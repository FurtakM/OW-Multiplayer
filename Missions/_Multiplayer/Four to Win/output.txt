// export def_public_score , def_amount_score ; export is_depot , number_of_breastworks , number_of_people , amount_of_apemen , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , amount_score , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id , king_territory , final_count , Player_Side , player_team ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if MultiPlayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type = mp_game_type ;
  79: LD_ADDR_EXP 41
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side = mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  99: LD_ADDR_EXP 21
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 109: LD_ADDR_EXP 18
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 119: LD_ADDR_EXP 22
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 20
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams = mp_teams ;
 139: LD_ADDR_EXP 19
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 352
// begin Game_Type = 3 ;
 151: LD_ADDR_EXP 41
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side = 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions = [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 167: LD_ADDR_EXP 21
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 18
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 2
 219: PUSH
 220: LD_INT 2
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 245: LD_ADDR_EXP 22
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: LD_INT 2
 258: PUSH
 259: LD_INT 2
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 20
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams = [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 323: LD_ADDR_EXP 19
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 4
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: ST_TO_ADDR
// end ; for i := 1 to 8 do
 352: LD_ADDR_VAR 0 2
 356: PUSH
 357: DOUBLE
 358: LD_INT 1
 360: DEC
 361: ST_TO_ADDR
 362: LD_INT 8
 364: PUSH
 365: FOR_TO
 366: IFFALSE 453
// if Multiplayer_GetPlayerIsSpec ( i ) then
 368: LD_VAR 0 2
 372: PPUSH
 373: CALL_OW 530
 377: IFFALSE 451
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 379: LD_ADDR_EXP 21
 383: PUSH
 384: LD_EXP 21
 388: PPUSH
 389: LD_VAR 0 2
 393: PPUSH
 394: LD_INT 0
 396: PPUSH
 397: CALL_OW 1
 401: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 402: LD_ADDR_EXP 19
 406: PUSH
 407: LD_EXP 19
 411: PPUSH
 412: LD_EXP 18
 416: PUSH
 417: LD_VAR 0 2
 421: ARRAY
 422: PPUSH
 423: LD_EXP 19
 427: PUSH
 428: LD_EXP 18
 432: PUSH
 433: LD_VAR 0 2
 437: ARRAY
 438: ARRAY
 439: PUSH
 440: LD_VAR 0 2
 444: DIFF
 445: PPUSH
 446: CALL_OW 1
 450: ST_TO_ADDR
// end ;
 451: GO 365
 453: POP
 454: POP
// if MultiPlayer then
 455: LD_OWVAR 4
 459: IFFALSE 666
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 461: LD_ADDR_EXP 43
 465: PUSH
 466: LD_INT 0
 468: PPUSH
 469: CALL_OW 426
 473: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 474: LD_ADDR_EXP 44
 478: PUSH
 479: LD_INT 1
 481: PPUSH
 482: CALL_OW 426
 486: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
 487: LD_ADDR_EXP 45
 491: PUSH
 492: LD_INT 2
 494: PPUSH
 495: CALL_OW 426
 499: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 500: LD_ADDR_EXP 46
 504: PUSH
 505: LD_INT 3
 507: PPUSH
 508: CALL_OW 426
 512: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 513: LD_ADDR_EXP 47
 517: PUSH
 518: LD_INT 4
 520: PPUSH
 521: CALL_OW 426
 525: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 526: LD_ADDR_EXP 48
 530: PUSH
 531: LD_INT 5
 533: PPUSH
 534: CALL_OW 426
 538: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 539: LD_ADDR_EXP 50
 543: PUSH
 544: LD_INT 10
 546: PPUSH
 547: CALL_OW 426
 551: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 552: LD_ADDR_EXP 51
 556: PUSH
 557: LD_INT 11
 559: PPUSH
 560: CALL_OW 426
 564: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 565: LD_ADDR_EXP 52
 569: PUSH
 570: LD_INT 12
 572: PPUSH
 573: CALL_OW 426
 577: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 13 ) ;
 578: LD_ADDR_EXP 53
 582: PUSH
 583: LD_INT 13
 585: PPUSH
 586: CALL_OW 426
 590: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 14 ) ;
 591: LD_ADDR_EXP 54
 595: PUSH
 596: LD_INT 14
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 604: LD_ADDR_EXP 55
 608: PUSH
 609: LD_INT 15
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_public_score = GetMultiplayerSetting ( 16 ) ;
 617: LD_ADDR_EXP 1
 621: PUSH
 622: LD_INT 16
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// def_amount_score = GetMultiplayerSetting ( 17 ) ;
 630: LD_ADDR_EXP 2
 634: PUSH
 635: LD_INT 17
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 643: LD_ADDR_VAR 0 3
 647: PUSH
 648: LD_INT 22
 650: PPUSH
 651: CALL_OW 426
 655: ST_TO_ADDR
// def_win_rules = 0 ;
 656: LD_ADDR_EXP 17
 660: PUSH
 661: LD_INT 0
 663: ST_TO_ADDR
// end else
 664: GO 798
// begin randomize ;
 666: CALL_OW 10
// def_base_level = 3 ;
 670: LD_ADDR_EXP 43
 674: PUSH
 675: LD_INT 3
 677: ST_TO_ADDR
// def_amount_of_people = 1 ;
 678: LD_ADDR_EXP 44
 682: PUSH
 683: LD_INT 1
 685: ST_TO_ADDR
// def_skill_level = 1 ;
 686: LD_ADDR_EXP 45
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// def_starting_resources = 2 ;
 694: LD_ADDR_EXP 46
 698: PUSH
 699: LD_INT 2
 701: ST_TO_ADDR
// def_shipments_density = 1 ;
 702: LD_ADDR_EXP 47
 706: PUSH
 707: LD_INT 1
 709: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
 710: LD_ADDR_EXP 48
 714: PUSH
 715: LD_INT 0
 717: ST_TO_ADDR
// def_shared_vision = 1 ;
 718: LD_ADDR_EXP 50
 722: PUSH
 723: LD_INT 1
 725: ST_TO_ADDR
// def_morale_flags = 1 ;
 726: LD_ADDR_EXP 51
 730: PUSH
 731: LD_INT 1
 733: ST_TO_ADDR
// def_siberite_detection = 1 ;
 734: LD_ADDR_EXP 52
 738: PUSH
 739: LD_INT 1
 741: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
 742: LD_ADDR_EXP 54
 746: PUSH
 747: LD_INT 3
 749: ST_TO_ADDR
// def_people_respawning = 2 ;
 750: LD_ADDR_EXP 53
 754: PUSH
 755: LD_INT 2
 757: ST_TO_ADDR
// def_siberite_bomb = 0 ;
 758: LD_ADDR_EXP 55
 762: PUSH
 763: LD_INT 0
 765: ST_TO_ADDR
// def_public_score = 1 ;
 766: LD_ADDR_EXP 1
 770: PUSH
 771: LD_INT 1
 773: ST_TO_ADDR
// def_amount_score = 0 ;
 774: LD_ADDR_EXP 2
 778: PUSH
 779: LD_INT 0
 781: ST_TO_ADDR
// tech_level = 4 ;
 782: LD_ADDR_VAR 0 3
 786: PUSH
 787: LD_INT 4
 789: ST_TO_ADDR
// def_win_rules = 0 ;
 790: LD_ADDR_EXP 17
 794: PUSH
 795: LD_INT 0
 797: ST_TO_ADDR
// end ; Player_Side = Your_Side ;
 798: LD_ADDR_EXP 31
 802: PUSH
 803: LD_OWVAR 2
 807: ST_TO_ADDR
// player_team = Side_Teams [ Player_Side ] ;
 808: LD_ADDR_EXP 32
 812: PUSH
 813: LD_EXP 18
 817: PUSH
 818: LD_EXP 31
 822: ARRAY
 823: ST_TO_ADDR
// InitGameRules ;
 824: CALL 7788 0 0
// if def_game_rules = 0 then
 828: LD_EXP 42
 832: PUSH
 833: LD_INT 0
 835: EQUAL
 836: IFFALSE 863
// begin if isSGUI then
 838: LD_OWVAR 83
 842: IFFALSE 850
// setMpTechs ( ) else
 844: CALL 15498 0 0
 848: GO 863
// begin SetMpTechLevel ( tech_level + 1 ) ;
 850: LD_VAR 0 3
 854: PUSH
 855: LD_INT 1
 857: PLUS
 858: PPUSH
 859: CALL 15645 0 1
// end ; end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 863: LD_ADDR_EXP 3
 867: PUSH
 868: LD_INT 0
 870: PUSH
 871: LD_INT 1
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: PUSH
 886: LD_EXP 43
 890: PUSH
 891: LD_INT 1
 893: PLUS
 894: ARRAY
 895: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
 896: LD_ADDR_EXP 4
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: LD_INT 0
 906: PUSH
 907: LD_INT 2
 909: PUSH
 910: LD_INT 4
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: PUSH
 919: LD_EXP 43
 923: PUSH
 924: LD_INT 1
 926: PLUS
 927: ARRAY
 928: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 929: LD_ADDR_EXP 5
 933: PUSH
 934: LD_INT 9
 936: PUSH
 937: LD_INT 12
 939: PUSH
 940: LD_INT 15
 942: PUSH
 943: LD_INT 24
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: PUSH
 952: LD_EXP 44
 956: PUSH
 957: LD_INT 1
 959: PLUS
 960: ARRAY
 961: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 962: LD_ADDR_EXP 7
 966: PUSH
 967: LD_INT 2
 969: PUSH
 970: LD_INT 3
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: LD_INT 5
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: PUSH
 985: LD_EXP 45
 989: PUSH
 990: LD_INT 1
 992: PLUS
 993: ARRAY
 994: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 995: LD_ADDR_EXP 9
 999: PUSH
1000: LD_INT 0
1002: PUSH
1003: LD_INT 0
1005: PUSH
1006: LD_INT 0
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 30
1016: PUSH
1017: LD_INT 0
1019: PUSH
1020: LD_INT 0
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: PUSH
1028: LD_INT 50
1030: PUSH
1031: LD_INT 20
1033: PUSH
1034: LD_INT 0
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: LIST
1041: PUSH
1042: LD_INT 80
1044: PUSH
1045: LD_INT 40
1047: PUSH
1048: LD_INT 20
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: PUSH
1062: LD_EXP 46
1066: PUSH
1067: LD_INT 1
1069: PLUS
1070: ARRAY
1071: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1072: LD_ADDR_EXP 8
1076: PUSH
1077: LD_INT 10
1079: PUSH
1080: EMPTY
1081: LIST
1082: PUSH
1083: LD_INT 7
1085: PUSH
1086: LD_INT 14
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 6
1095: PUSH
1096: LD_INT 12
1098: PUSH
1099: LD_INT 18
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 5
1109: PUSH
1110: LD_INT 10
1112: PUSH
1113: LD_INT 15
1115: PUSH
1116: LD_INT 20
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: LIST
1129: LIST
1130: PUSH
1131: LD_EXP 46
1135: PUSH
1136: LD_INT 1
1138: PLUS
1139: ARRAY
1140: ST_TO_ADDR
// shipments_density = [ 15 , 20 , 25 ] [ def_shipments_density + 1 ] ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_INT 15
1148: PUSH
1149: LD_INT 20
1151: PUSH
1152: LD_INT 25
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_EXP 47
1164: PUSH
1165: LD_INT 1
1167: PLUS
1168: ARRAY
1169: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1170: LD_ADDR_EXP 6
1174: PUSH
1175: LD_INT 0
1177: PUSH
1178: LD_INT 1
1180: PUSH
1181: LD_INT 2
1183: PUSH
1184: LD_INT 3
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_EXP 54
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1203: LD_ADDR_EXP 12
1207: PUSH
1208: LD_INT 0
1210: PUSH
1211: LD_INT 165
1213: PUSH
1214: LD_INT 140
1216: PUSH
1217: LD_INT 115
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: LD_EXP 54
1230: PUSH
1231: LD_INT 1
1233: PLUS
1234: ARRAY
1235: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1236: LD_ADDR_EXP 13
1240: PUSH
1241: LD_INT 0
1243: PUSH
1244: LD_INT 8400
1246: PUSH
1247: LD_INT 1750
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_EXP 53
1259: PUSH
1260: LD_INT 1
1262: PLUS
1263: ARRAY
1264: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1265: LD_ADDR_EXP 14
1269: PUSH
1270: LD_INT 0
1272: PUSH
1273: LD_INT 21000
1275: PUSH
1276: LD_INT 4200
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: LIST
1283: PUSH
1284: LD_EXP 53
1288: PUSH
1289: LD_INT 1
1291: PLUS
1292: ARRAY
1293: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1294: LD_ADDR_EXP 11
1298: PUSH
1299: LD_INT 1
1301: NEG
1302: PUSH
1303: LD_INT 350
1305: PUSH
1306: LD_INT 700
1308: PUSH
1309: LD_INT 1400
1311: PUSH
1312: LD_INT 0
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: PUSH
1322: LD_EXP 51
1326: PUSH
1327: LD_INT 1
1329: PLUS
1330: ARRAY
1331: ST_TO_ADDR
// battle_flags_id = [ ] ;
1332: LD_ADDR_EXP 28
1336: PUSH
1337: EMPTY
1338: ST_TO_ADDR
// amount_score = [ 200 , 300 , 500 , 700 , 1000 , 1500 ] [ def_amount_score + 1 ] ;
1339: LD_ADDR_EXP 15
1343: PUSH
1344: LD_INT 200
1346: PUSH
1347: LD_INT 300
1349: PUSH
1350: LD_INT 500
1352: PUSH
1353: LD_INT 700
1355: PUSH
1356: LD_INT 1000
1358: PUSH
1359: LD_INT 1500
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: PUSH
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 1
1377: PLUS
1378: ARRAY
1379: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1380: LD_ADDR_EXP 16
1384: PUSH
1385: LD_INT 0
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 63000
1393: PUSH
1394: LD_INT 126000
1396: PUSH
1397: LD_INT 189000
1399: PUSH
1400: LD_INT 252000
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: PUSH
1411: LD_EXP 55
1415: PUSH
1416: LD_INT 1
1418: PLUS
1419: ARRAY
1420: ST_TO_ADDR
// if not def_builduptime then
1421: LD_EXP 56
1425: NOT
1426: IFFALSE 1431
// disable ( 600 ) ;
1428: LD_INT 600
1430: DISABLE_MARKED
// king_territory = KopecStred ;
1431: LD_ADDR_EXP 29
1435: PUSH
1436: LD_INT 2
1438: ST_TO_ADDR
// final_count = amount_score ;
1439: LD_ADDR_EXP 30
1443: PUSH
1444: LD_EXP 15
1448: ST_TO_ADDR
// end ;
1449: LD_VAR 0 1
1453: RET
// function init_map ; var i ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
// extra_oil_deposits_locations := [ [ 53 , 26 ] , [ 51 , 53 ] , [ 129 , 20 ] , [ 155 , 53 ] , [ 187 , 139 ] , [ 183 , 107 ] , [ 106 , 135 ] , [ 80 , 106 ] ] ;
1458: LD_ADDR_EXP 27
1462: PUSH
1463: LD_INT 53
1465: PUSH
1466: LD_INT 26
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 51
1475: PUSH
1476: LD_INT 53
1478: PUSH
1479: EMPTY
1480: LIST
1481: LIST
1482: PUSH
1483: LD_INT 129
1485: PUSH
1486: LD_INT 20
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: PUSH
1493: LD_INT 155
1495: PUSH
1496: LD_INT 53
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: PUSH
1503: LD_INT 187
1505: PUSH
1506: LD_INT 139
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PUSH
1513: LD_INT 183
1515: PUSH
1516: LD_INT 107
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: PUSH
1523: LD_INT 106
1525: PUSH
1526: LD_INT 135
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: PUSH
1533: LD_INT 80
1535: PUSH
1536: LD_INT 106
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: ST_TO_ADDR
// depot_def := [ [ 29 , 22 , 3 ] , [ 154 , 21 , 3 ] , [ 85 , 138 , 0 ] , [ 212 , 141 , 5 ] ] ;
1553: LD_ADDR_EXP 24
1557: PUSH
1558: LD_INT 29
1560: PUSH
1561: LD_INT 22
1563: PUSH
1564: LD_INT 3
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 154
1574: PUSH
1575: LD_INT 21
1577: PUSH
1578: LD_INT 3
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: LIST
1585: PUSH
1586: LD_INT 85
1588: PUSH
1589: LD_INT 138
1591: PUSH
1592: LD_INT 0
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 212
1602: PUSH
1603: LD_INT 141
1605: PUSH
1606: LD_INT 5
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: ST_TO_ADDR
// start_def := [ [ 33 , 25 ] , [ 151 , 24 ] , [ 89 , 135 ] , [ 205 , 137 ] ] ;
1620: LD_ADDR_EXP 26
1624: PUSH
1625: LD_INT 33
1627: PUSH
1628: LD_INT 25
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 151
1637: PUSH
1638: LD_INT 24
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 89
1647: PUSH
1648: LD_INT 135
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 205
1657: PUSH
1658: LD_INT 137
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: ST_TO_ADDR
// breastworks_def := [ [ [ 46 , 13 , 4 ] , [ 43 , 39 , 4 ] , [ 47 , 25 , 5 ] , [ 45 , 44 , 5 ] ] , [ [ 129 , 12 , 0 ] , [ 153 , 34 , 1 ] , [ 139 , 24 , 0 ] , [ 158 , 41 , 0 ] ] , [ [ 84 , 121 , 4 ] , [ 109 , 143 , 4 ] , [ 87 , 126 , 4 ] , [ 111 , 148 , 4 ] ] , [ [ 194 , 146 , 2 ] , [ 195 , 121 , 1 ] , [ 193 , 135 , 2 ] , [ 192 , 116 , 2 ] ] , ] ;
1671: LD_ADDR_EXP 25
1675: PUSH
1676: LD_INT 46
1678: PUSH
1679: LD_INT 13
1681: PUSH
1682: LD_INT 4
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: LIST
1689: PUSH
1690: LD_INT 43
1692: PUSH
1693: LD_INT 39
1695: PUSH
1696: LD_INT 4
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 47
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: LD_INT 5
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 45
1720: PUSH
1721: LD_INT 44
1723: PUSH
1724: LD_INT 5
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: LIST
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 129
1740: PUSH
1741: LD_INT 12
1743: PUSH
1744: LD_INT 0
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_INT 153
1754: PUSH
1755: LD_INT 34
1757: PUSH
1758: LD_INT 1
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 139
1768: PUSH
1769: LD_INT 24
1771: PUSH
1772: LD_INT 0
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 158
1782: PUSH
1783: LD_INT 41
1785: PUSH
1786: LD_INT 0
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 84
1802: PUSH
1803: LD_INT 121
1805: PUSH
1806: LD_INT 4
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 109
1816: PUSH
1817: LD_INT 143
1819: PUSH
1820: LD_INT 4
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PUSH
1828: LD_INT 87
1830: PUSH
1831: LD_INT 126
1833: PUSH
1834: LD_INT 4
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 111
1844: PUSH
1845: LD_INT 148
1847: PUSH
1848: LD_INT 4
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 194
1864: PUSH
1865: LD_INT 146
1867: PUSH
1868: LD_INT 2
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: PUSH
1876: LD_INT 195
1878: PUSH
1879: LD_INT 121
1881: PUSH
1882: LD_INT 1
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 193
1892: PUSH
1893: LD_INT 135
1895: PUSH
1896: LD_INT 2
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 192
1906: PUSH
1907: LD_INT 116
1909: PUSH
1910: LD_INT 2
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: ST_TO_ADDR
// if def_extra_oil_deposits then
1930: LD_EXP 48
1934: IFFALSE 1978
// for i in extra_oil_deposits_locations do
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_EXP 27
1945: PUSH
1946: FOR_IN
1947: IFFALSE 1976
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1949: LD_VAR 0 2
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PPUSH
1958: LD_VAR 0 2
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PPUSH
1967: LD_INT 2
1969: PPUSH
1970: CALL_OW 62
1974: GO 1946
1976: POP
1977: POP
// end ;
1978: LD_VAR 0 1
1982: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1983: LD_INT 0
1985: PPUSH
1986: PPUSH
1987: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1988: LD_ADDR_EXP 23
1992: PUSH
1993: LD_EXP 18
1997: PUSH
1998: LD_INT 0
2000: PUSH
2001: EMPTY
2002: LIST
2003: DIFF
2004: PUSH
2005: LD_INT 1
2007: GREATER
2008: ST_TO_ADDR
// if not Team_Game then
2009: LD_EXP 23
2013: NOT
2014: IFFALSE 2112
// begin for i = 1 to 8 do
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: DOUBLE
2022: LD_INT 1
2024: DEC
2025: ST_TO_ADDR
2026: LD_INT 8
2028: PUSH
2029: FOR_TO
2030: IFFALSE 2108
// for j = 1 to 8 do
2032: LD_ADDR_VAR 0 3
2036: PUSH
2037: DOUBLE
2038: LD_INT 1
2040: DEC
2041: ST_TO_ADDR
2042: LD_INT 8
2044: PUSH
2045: FOR_TO
2046: IFFALSE 2104
// if i <> j then
2048: LD_VAR 0 2
2052: PUSH
2053: LD_VAR 0 3
2057: NONEQUAL
2058: IFFALSE 2082
// SetAttitude ( i , j , att_neutral , true ) else
2060: LD_VAR 0 2
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: LD_INT 0
2072: PPUSH
2073: LD_INT 1
2075: PPUSH
2076: CALL_OW 80
2080: GO 2102
// SetAttitude ( i , j , att_friend , true ) ;
2082: LD_VAR 0 2
2086: PPUSH
2087: LD_VAR 0 3
2091: PPUSH
2092: LD_INT 1
2094: PPUSH
2095: LD_INT 1
2097: PPUSH
2098: CALL_OW 80
2102: GO 2045
2104: POP
2105: POP
2106: GO 2029
2108: POP
2109: POP
// end else
2110: GO 2287
// begin if def_shared_vision then
2112: LD_EXP 50
2116: IFFALSE 2181
// begin for i in Teams do
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_EXP 19
2127: PUSH
2128: FOR_IN
2129: IFFALSE 2179
// for j = 2 to i do
2131: LD_ADDR_VAR 0 3
2135: PUSH
2136: DOUBLE
2137: LD_INT 2
2139: DEC
2140: ST_TO_ADDR
2141: LD_VAR 0 2
2145: PUSH
2146: FOR_TO
2147: IFFALSE 2175
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2149: LD_VAR 0 2
2153: PUSH
2154: LD_VAR 0 3
2158: ARRAY
2159: PPUSH
2160: LD_VAR 0 2
2164: PUSH
2165: LD_INT 1
2167: ARRAY
2168: PPUSH
2169: CALL_OW 343
2173: GO 2146
2175: POP
2176: POP
2177: GO 2128
2179: POP
2180: POP
// end ; for i = 1 to 8 do
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: DOUBLE
2187: LD_INT 1
2189: DEC
2190: ST_TO_ADDR
2191: LD_INT 8
2193: PUSH
2194: FOR_TO
2195: IFFALSE 2285
// for j = 1 to 8 do
2197: LD_ADDR_VAR 0 3
2201: PUSH
2202: DOUBLE
2203: LD_INT 1
2205: DEC
2206: ST_TO_ADDR
2207: LD_INT 8
2209: PUSH
2210: FOR_TO
2211: IFFALSE 2281
// if Side_Teams [ i ] = Side_Teams [ j ] then
2213: LD_EXP 18
2217: PUSH
2218: LD_VAR 0 2
2222: ARRAY
2223: PUSH
2224: LD_EXP 18
2228: PUSH
2229: LD_VAR 0 3
2233: ARRAY
2234: EQUAL
2235: IFFALSE 2259
// SetAttitude ( i , j , att_friend , true ) else
2237: LD_VAR 0 2
2241: PPUSH
2242: LD_VAR 0 3
2246: PPUSH
2247: LD_INT 1
2249: PPUSH
2250: LD_INT 1
2252: PPUSH
2253: CALL_OW 80
2257: GO 2279
// SetAttitude ( i , j , att_enemy , true ) ;
2259: LD_VAR 0 2
2263: PPUSH
2264: LD_VAR 0 3
2268: PPUSH
2269: LD_INT 2
2271: PPUSH
2272: LD_INT 1
2274: PPUSH
2275: CALL_OW 80
2279: GO 2210
2281: POP
2282: POP
2283: GO 2194
2285: POP
2286: POP
// end ; end ;
2287: LD_VAR 0 1
2291: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2292: LD_INT 0
2294: PPUSH
2295: PPUSH
2296: PPUSH
2297: PPUSH
// result := [ ] ;
2298: LD_ADDR_VAR 0 6
2302: PUSH
2303: EMPTY
2304: ST_TO_ADDR
// for i := 1 to count do
2305: LD_ADDR_VAR 0 7
2309: PUSH
2310: DOUBLE
2311: LD_INT 1
2313: DEC
2314: ST_TO_ADDR
2315: LD_VAR 0 1
2319: PUSH
2320: FOR_TO
2321: IFFALSE 2717
// begin uc_direction := Rand ( 0 , 5 ) ;
2323: LD_ADDR_OWVAR 24
2327: PUSH
2328: LD_INT 0
2330: PPUSH
2331: LD_INT 5
2333: PPUSH
2334: CALL_OW 12
2338: ST_TO_ADDR
// if commander then
2339: LD_LOC 1
2343: IFFALSE 2452
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2345: LD_ADDR_OWVAR 26
2349: PUSH
2350: LD_OWVAR 19
2354: PUSH
2355: LD_OWVAR 20
2359: ARRAY
2360: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2361: LD_INT 1
2363: PPUSH
2364: LD_INT 2
2366: PPUSH
2367: CALL_OW 12
2371: PPUSH
2372: LD_VAR 0 2
2376: PPUSH
2377: LD_EXP 7
2381: PUSH
2382: LD_INT 2
2384: PLUS
2385: PPUSH
2386: CALL_OW 380
// hc_importance := 105 ;
2390: LD_ADDR_OWVAR 32
2394: PUSH
2395: LD_INT 105
2397: ST_TO_ADDR
// commander := false ;
2398: LD_ADDR_LOC 1
2402: PUSH
2403: LD_INT 0
2405: ST_TO_ADDR
// if Multiplayer then
2406: LD_OWVAR 4
2410: IFFALSE 2450
// begin hc_gallery := MULTIAVATARS ;
2412: LD_ADDR_OWVAR 33
2416: PUSH
2417: LD_STRING MULTIAVATARS
2419: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2420: LD_ADDR_OWVAR 34
2424: PUSH
2425: LD_OWVAR 20
2429: PPUSH
2430: CALL_OW 525
2434: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2435: LD_ADDR_OWVAR 27
2439: PUSH
2440: LD_OWVAR 20
2444: PPUSH
2445: CALL_OW 526
2449: ST_TO_ADDR
// end ; end else
2450: GO 2515
// begin hc_name :=  ;
2452: LD_ADDR_OWVAR 26
2456: PUSH
2457: LD_STRING 
2459: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2460: LD_INT 1
2462: PPUSH
2463: LD_INT 2
2465: PPUSH
2466: CALL_OW 12
2470: PPUSH
2471: LD_VAR 0 2
2475: PPUSH
2476: LD_EXP 7
2480: PPUSH
2481: CALL_OW 380
// hc_importance := 0 ;
2485: LD_ADDR_OWVAR 32
2489: PUSH
2490: LD_INT 0
2492: ST_TO_ADDR
// if Multiplayer then
2493: LD_OWVAR 4
2497: IFFALSE 2515
// begin hc_gallery :=  ;
2499: LD_ADDR_OWVAR 33
2503: PUSH
2504: LD_STRING 
2506: ST_TO_ADDR
// hc_face_number := 0 ;
2507: LD_ADDR_OWVAR 34
2511: PUSH
2512: LD_INT 0
2514: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2515: LD_ADDR_VAR 0 9
2519: PUSH
2520: CALL_OW 44
2524: ST_TO_ADDR
// if global_defined then
2525: LD_LOC 3
2529: IFFALSE 2669
// begin if ( cl = class_soldier ) then
2531: LD_VAR 0 2
2535: PUSH
2536: LD_INT 1
2538: EQUAL
2539: IFFALSE 2559
// j := i + soldiers_created else
2541: LD_ADDR_VAR 0 8
2545: PUSH
2546: LD_VAR 0 7
2550: PUSH
2551: LD_LOC 4
2555: PLUS
2556: ST_TO_ADDR
2557: GO 2569
// j := i ;
2559: LD_ADDR_VAR 0 8
2563: PUSH
2564: LD_VAR 0 7
2568: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2569: LD_LOC 2
2573: PUSH
2574: LD_VAR 0 2
2578: ARRAY
2579: PUSH
2580: LD_VAR 0 8
2584: ARRAY
2585: PPUSH
2586: LD_VAR 0 9
2590: PPUSH
2591: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2595: LD_VAR 0 9
2599: PPUSH
2600: LD_INT 2
2602: PPUSH
2603: LD_LOC 2
2607: PUSH
2608: LD_VAR 0 2
2612: ARRAY
2613: PUSH
2614: LD_VAR 0 8
2618: ARRAY
2619: PPUSH
2620: LD_INT 2
2622: PPUSH
2623: CALL_OW 260
2627: PPUSH
2628: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2632: LD_VAR 0 9
2636: PPUSH
2637: LD_INT 1
2639: PPUSH
2640: LD_LOC 2
2644: PUSH
2645: LD_VAR 0 2
2649: ARRAY
2650: PUSH
2651: LD_VAR 0 8
2655: ARRAY
2656: PPUSH
2657: LD_INT 1
2659: PPUSH
2660: CALL_OW 260
2664: PPUSH
2665: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2669: LD_VAR 0 9
2673: PPUSH
2674: LD_VAR 0 3
2678: PPUSH
2679: LD_VAR 0 4
2683: PPUSH
2684: LD_VAR 0 5
2688: PPUSH
2689: LD_INT 0
2691: PPUSH
2692: CALL_OW 50
// result := result ^ [ un ] ;
2696: LD_ADDR_VAR 0 6
2700: PUSH
2701: LD_VAR 0 6
2705: PUSH
2706: LD_VAR 0 9
2710: PUSH
2711: EMPTY
2712: LIST
2713: ADD
2714: ST_TO_ADDR
// end ;
2715: GO 2320
2717: POP
2718: POP
// if not global_defined then
2719: LD_LOC 3
2723: NOT
2724: IFFALSE 2802
// if ( global_units >= cl ) then
2726: LD_LOC 2
2730: PUSH
2731: LD_VAR 0 2
2735: GREATEREQUAL
2736: IFFALSE 2777
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2738: LD_ADDR_LOC 2
2742: PUSH
2743: LD_LOC 2
2747: PPUSH
2748: LD_VAR 0 2
2752: PPUSH
2753: LD_LOC 2
2757: PUSH
2758: LD_VAR 0 2
2762: ARRAY
2763: PUSH
2764: LD_VAR 0 6
2768: ADD
2769: PPUSH
2770: CALL_OW 1
2774: ST_TO_ADDR
2775: GO 2802
// global_units := Replace ( global_units , cl , result ) ;
2777: LD_ADDR_LOC 2
2781: PUSH
2782: LD_LOC 2
2786: PPUSH
2787: LD_VAR 0 2
2791: PPUSH
2792: LD_VAR 0 6
2796: PPUSH
2797: CALL_OW 1
2801: ST_TO_ADDR
// end ;
2802: LD_VAR 0 6
2806: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , sol , br , dep ; begin
2807: LD_INT 0
2809: PPUSH
2810: PPUSH
2811: PPUSH
2812: PPUSH
2813: PPUSH
2814: PPUSH
2815: PPUSH
2816: PPUSH
2817: PPUSH
2818: PPUSH
// if side in [ 0 , 9 ] then
2819: LD_VAR 0 1
2823: PUSH
2824: LD_INT 0
2826: PUSH
2827: LD_INT 9
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: IN
2834: IFFALSE 2838
// exit ;
2836: GO 3945
// pos := Side_Positions [ side ] ;
2838: LD_ADDR_VAR 0 3
2842: PUSH
2843: LD_EXP 21
2847: PUSH
2848: LD_VAR 0 1
2852: ARRAY
2853: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2854: LD_ADDR_OWVAR 21
2858: PUSH
2859: LD_EXP 22
2863: PUSH
2864: LD_VAR 0 1
2868: ARRAY
2869: ST_TO_ADDR
// uc_side := side ;
2870: LD_ADDR_OWVAR 20
2874: PUSH
2875: LD_VAR 0 1
2879: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2880: LD_ADDR_VAR 0 4
2884: PUSH
2885: LD_EXP 24
2889: PUSH
2890: LD_VAR 0 3
2894: ARRAY
2895: PUSH
2896: LD_INT 1
2898: ARRAY
2899: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2900: LD_ADDR_VAR 0 5
2904: PUSH
2905: LD_EXP 24
2909: PUSH
2910: LD_VAR 0 3
2914: ARRAY
2915: PUSH
2916: LD_INT 2
2918: ARRAY
2919: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2920: LD_ADDR_VAR 0 6
2924: PUSH
2925: LD_EXP 24
2929: PUSH
2930: LD_VAR 0 3
2934: ARRAY
2935: PUSH
2936: LD_INT 3
2938: ARRAY
2939: ST_TO_ADDR
// if is_depot then
2940: LD_EXP 3
2944: IFFALSE 3077
// begin bc_type = b_depot ;
2946: LD_ADDR_OWVAR 42
2950: PUSH
2951: LD_INT 0
2953: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2954: LD_ADDR_VAR 0 11
2958: PUSH
2959: LD_VAR 0 4
2963: PPUSH
2964: LD_VAR 0 5
2968: PPUSH
2969: LD_VAR 0 6
2973: PPUSH
2974: CALL_OW 47
2978: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2979: LD_VAR 0 11
2983: PPUSH
2984: LD_STRING @
2986: PUSH
2987: LD_VAR 0 1
2991: STR
2992: PPUSH
2993: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2997: LD_VAR 0 11
3001: PPUSH
3002: CALL_OW 274
3006: PPUSH
3007: LD_INT 1
3009: PPUSH
3010: LD_EXP 9
3014: PUSH
3015: LD_INT 1
3017: ARRAY
3018: PPUSH
3019: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3023: LD_VAR 0 11
3027: PPUSH
3028: CALL_OW 274
3032: PPUSH
3033: LD_INT 2
3035: PPUSH
3036: LD_EXP 9
3040: PUSH
3041: LD_INT 2
3043: ARRAY
3044: PPUSH
3045: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3049: LD_VAR 0 11
3053: PPUSH
3054: CALL_OW 274
3058: PPUSH
3059: LD_INT 3
3061: PPUSH
3062: LD_EXP 9
3066: PUSH
3067: LD_INT 3
3069: ARRAY
3070: PPUSH
3071: CALL_OW 277
// end else
3075: GO 3221
// begin for i := 1 to 3 do
3077: LD_ADDR_VAR 0 7
3081: PUSH
3082: DOUBLE
3083: LD_INT 1
3085: DEC
3086: ST_TO_ADDR
3087: LD_INT 3
3089: PUSH
3090: FOR_TO
3091: IFFALSE 3219
// begin r := starting_resources [ i ] ;
3093: LD_ADDR_VAR 0 8
3097: PUSH
3098: LD_EXP 9
3102: PUSH
3103: LD_VAR 0 7
3107: ARRAY
3108: ST_TO_ADDR
// while r >= 10 do
3109: LD_VAR 0 8
3113: PUSH
3114: LD_INT 10
3116: GREATEREQUAL
3117: IFFALSE 3217
// if r > 50 then
3119: LD_VAR 0 8
3123: PUSH
3124: LD_INT 50
3126: GREATER
3127: IFFALSE 3173
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3129: LD_VAR 0 7
3133: PPUSH
3134: LD_INT 5
3136: PPUSH
3137: LD_VAR 0 4
3141: PPUSH
3142: LD_VAR 0 5
3146: PPUSH
3147: LD_INT 4
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 60
// r := r - 50 ;
3157: LD_ADDR_VAR 0 8
3161: PUSH
3162: LD_VAR 0 8
3166: PUSH
3167: LD_INT 50
3169: MINUS
3170: ST_TO_ADDR
// end else
3171: GO 3215
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3173: LD_VAR 0 7
3177: PPUSH
3178: LD_VAR 0 8
3182: PUSH
3183: LD_INT 10
3185: DIV
3186: PPUSH
3187: LD_VAR 0 4
3191: PPUSH
3192: LD_VAR 0 5
3196: PPUSH
3197: LD_INT 4
3199: PPUSH
3200: LD_INT 0
3202: PPUSH
3203: CALL_OW 60
// r := 0 ;
3207: LD_ADDR_VAR 0 8
3211: PUSH
3212: LD_INT 0
3214: ST_TO_ADDR
// end ;
3215: GO 3109
// end ;
3217: GO 3090
3219: POP
3220: POP
// end ; for r in starting_crates do
3221: LD_ADDR_VAR 0 8
3225: PUSH
3226: LD_EXP 8
3230: PUSH
3231: FOR_IN
3232: IFFALSE 3264
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 5
3239: PPUSH
3240: LD_VAR 0 4
3244: PPUSH
3245: LD_VAR 0 5
3249: PPUSH
3250: LD_VAR 0 8
3254: PPUSH
3255: LD_INT 0
3257: PPUSH
3258: CALL_OW 60
3262: GO 3231
3264: POP
3265: POP
// if def_morale_flags then
3266: LD_EXP 51
3270: IFFALSE 3409
// begin x := start_def [ pos ] [ 1 ] ;
3272: LD_ADDR_VAR 0 4
3276: PUSH
3277: LD_EXP 26
3281: PUSH
3282: LD_VAR 0 3
3286: ARRAY
3287: PUSH
3288: LD_INT 1
3290: ARRAY
3291: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3292: LD_ADDR_VAR 0 5
3296: PUSH
3297: LD_EXP 26
3301: PUSH
3302: LD_VAR 0 3
3306: ARRAY
3307: PUSH
3308: LD_INT 2
3310: ARRAY
3311: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3312: LD_VAR 0 4
3316: PPUSH
3317: LD_VAR 0 5
3321: PPUSH
3322: LD_INT 12
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3332: LD_ADDR_EXP 28
3336: PUSH
3337: LD_EXP 28
3341: PUSH
3342: LD_VAR 0 1
3346: PPUSH
3347: LD_VAR 0 4
3351: PPUSH
3352: LD_VAR 0 5
3356: PPUSH
3357: LD_INT 1
3359: PUSH
3360: LD_INT 100
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: LD_INT 2
3369: PUSH
3370: LD_INT 50
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 3
3379: PUSH
3380: LD_INT 20
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PUSH
3387: LD_INT 20
3389: PUSH
3390: LD_INT 100
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 418
3407: ADD
3408: ST_TO_ADDR
// end ; commander := true ;
3409: LD_ADDR_LOC 1
3413: PUSH
3414: LD_INT 1
3416: ST_TO_ADDR
// soldiers_created := 0 ;
3417: LD_ADDR_LOC 4
3421: PUSH
3422: LD_INT 0
3424: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3425: LD_ADDR_VAR 0 7
3429: PUSH
3430: DOUBLE
3431: LD_INT 1
3433: DEC
3434: ST_TO_ADDR
3435: LD_EXP 4
3439: PUSH
3440: FOR_TO
3441: IFFALSE 3663
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3443: LD_ADDR_VAR 0 4
3447: PUSH
3448: LD_EXP 25
3452: PUSH
3453: LD_VAR 0 3
3457: ARRAY
3458: PUSH
3459: LD_VAR 0 7
3463: ARRAY
3464: PUSH
3465: LD_INT 1
3467: ARRAY
3468: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3469: LD_ADDR_VAR 0 5
3473: PUSH
3474: LD_EXP 25
3478: PUSH
3479: LD_VAR 0 3
3483: ARRAY
3484: PUSH
3485: LD_VAR 0 7
3489: ARRAY
3490: PUSH
3491: LD_INT 2
3493: ARRAY
3494: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3495: LD_ADDR_VAR 0 6
3499: PUSH
3500: LD_EXP 25
3504: PUSH
3505: LD_VAR 0 3
3509: ARRAY
3510: PUSH
3511: LD_VAR 0 7
3515: ARRAY
3516: PUSH
3517: LD_INT 3
3519: ARRAY
3520: ST_TO_ADDR
// bc_type := b_breastwork ;
3521: LD_ADDR_OWVAR 42
3525: PUSH
3526: LD_INT 31
3528: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3529: LD_ADDR_VAR 0 10
3533: PUSH
3534: LD_VAR 0 4
3538: PPUSH
3539: LD_VAR 0 5
3543: PPUSH
3544: LD_VAR 0 6
3548: PPUSH
3549: CALL_OW 47
3553: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3554: LD_ADDR_VAR 0 4
3558: PUSH
3559: LD_VAR 0 4
3563: PPUSH
3564: LD_VAR 0 6
3568: PPUSH
3569: LD_INT 2
3571: PPUSH
3572: CALL_OW 272
3576: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3577: LD_ADDR_VAR 0 5
3581: PUSH
3582: LD_VAR 0 5
3586: PPUSH
3587: LD_VAR 0 6
3591: PPUSH
3592: LD_INT 2
3594: PPUSH
3595: CALL_OW 273
3599: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3600: LD_ADDR_VAR 0 9
3604: PUSH
3605: LD_INT 1
3607: PPUSH
3608: LD_INT 1
3610: PPUSH
3611: LD_VAR 0 4
3615: PPUSH
3616: LD_VAR 0 5
3620: PPUSH
3621: LD_INT 0
3623: PPUSH
3624: CALL 2292 0 5
3628: PUSH
3629: LD_INT 1
3631: ARRAY
3632: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
3633: LD_ADDR_LOC 4
3637: PUSH
3638: LD_LOC 4
3642: PUSH
3643: LD_INT 1
3645: PLUS
3646: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
3647: LD_VAR 0 9
3651: PPUSH
3652: LD_VAR 0 10
3656: PPUSH
3657: CALL_OW 120
// end ;
3661: GO 3440
3663: POP
3664: POP
// x := start_def [ pos ] [ 1 ] ;
3665: LD_ADDR_VAR 0 4
3669: PUSH
3670: LD_EXP 26
3674: PUSH
3675: LD_VAR 0 3
3679: ARRAY
3680: PUSH
3681: LD_INT 1
3683: ARRAY
3684: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3685: LD_ADDR_VAR 0 5
3689: PUSH
3690: LD_EXP 26
3694: PUSH
3695: LD_VAR 0 3
3699: ARRAY
3700: PUSH
3701: LD_INT 2
3703: ARRAY
3704: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
3705: LD_LOC 8
3709: PUSH
3710: LD_EXP 4
3714: MINUS
3715: PPUSH
3716: LD_INT 1
3718: PPUSH
3719: LD_VAR 0 4
3723: PPUSH
3724: LD_VAR 0 5
3728: PPUSH
3729: LD_INT 5
3731: PPUSH
3732: CALL 2292 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
3736: LD_LOC 5
3740: PPUSH
3741: LD_INT 2
3743: PPUSH
3744: LD_VAR 0 4
3748: PPUSH
3749: LD_VAR 0 5
3753: PPUSH
3754: LD_INT 5
3756: PPUSH
3757: CALL 2292 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
3761: LD_LOC 7
3765: PPUSH
3766: LD_INT 3
3768: PPUSH
3769: LD_VAR 0 4
3773: PPUSH
3774: LD_VAR 0 5
3778: PPUSH
3779: LD_INT 5
3781: PPUSH
3782: CALL 2292 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
3786: LD_LOC 6
3790: PPUSH
3791: LD_INT 4
3793: PPUSH
3794: LD_VAR 0 4
3798: PPUSH
3799: LD_VAR 0 5
3803: PPUSH
3804: LD_INT 5
3806: PPUSH
3807: CALL 2292 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3811: LD_EXP 52
3815: PUSH
3816: LD_INT 20
3818: PPUSH
3819: LD_VAR 0 1
3823: PPUSH
3824: CALL_OW 321
3828: PUSH
3829: LD_INT 1
3831: EQUAL
3832: AND
3833: IFFALSE 3850
// SetTech ( tech_SibDet , side , state_researched ) ;
3835: LD_INT 20
3837: PPUSH
3838: LD_VAR 0 1
3842: PPUSH
3843: LD_INT 2
3845: PPUSH
3846: CALL_OW 322
// if def_siberite_bomb = 1 then
3850: LD_EXP 55
3854: PUSH
3855: LD_INT 1
3857: EQUAL
3858: IFFALSE 3892
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3860: LD_INT 25
3862: PPUSH
3863: LD_VAR 0 1
3867: PPUSH
3868: LD_INT 1
3870: PPUSH
3871: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3875: LD_INT 73
3877: PPUSH
3878: LD_VAR 0 1
3882: PPUSH
3883: LD_INT 1
3885: PPUSH
3886: CALL_OW 322
// end else
3890: GO 3922
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3892: LD_INT 25
3894: PPUSH
3895: LD_VAR 0 1
3899: PPUSH
3900: LD_INT 0
3902: PPUSH
3903: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3907: LD_INT 73
3909: PPUSH
3910: LD_VAR 0 1
3914: PPUSH
3915: LD_INT 0
3917: PPUSH
3918: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3922: LD_INT 24
3924: PPUSH
3925: LD_VAR 0 1
3929: PPUSH
3930: LD_INT 0
3932: PPUSH
3933: CALL_OW 322
// global_defined := true ;
3937: LD_ADDR_LOC 3
3941: PUSH
3942: LD_INT 1
3944: ST_TO_ADDR
// end ;
3945: LD_VAR 0 2
3949: RET
// every 0 0$1 do
3950: GO 3952
3952: DISABLE
// if ( def_siberite_bomb > 1 ) then
3953: LD_EXP 55
3957: PUSH
3958: LD_INT 1
3960: GREATER
3961: IFFALSE 3976
// begin wait ( siberite_bomb_Delay ) ;
3963: LD_EXP 16
3967: PPUSH
3968: CALL_OW 67
// EnableSibFiss ;
3972: CALL 3977 0 0
// end ;
3976: END
// function EnableSibFiss ; var i ; begin
3977: LD_INT 0
3979: PPUSH
3980: PPUSH
// for i := 1 to 8 do
3981: LD_ADDR_VAR 0 2
3985: PUSH
3986: DOUBLE
3987: LD_INT 1
3989: DEC
3990: ST_TO_ADDR
3991: LD_INT 8
3993: PUSH
3994: FOR_TO
3995: IFFALSE 4041
// if Side_Positions [ i ] then
3997: LD_EXP 21
4001: PUSH
4002: LD_VAR 0 2
4006: ARRAY
4007: IFFALSE 4039
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4009: LD_INT 25
4011: PPUSH
4012: LD_VAR 0 2
4016: PPUSH
4017: LD_INT 1
4019: PPUSH
4020: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4024: LD_INT 73
4026: PPUSH
4027: LD_VAR 0 2
4031: PPUSH
4032: LD_INT 1
4034: PPUSH
4035: CALL_OW 322
// end ;
4039: GO 3994
4041: POP
4042: POP
// end ;
4043: LD_VAR 0 1
4047: RET
// function prepare_sides ; var i ; begin
4048: LD_INT 0
4050: PPUSH
4051: PPUSH
// global_units := [ ] ;
4052: LD_ADDR_LOC 2
4056: PUSH
4057: EMPTY
4058: ST_TO_ADDR
// global_defined := false ;
4059: LD_ADDR_LOC 3
4063: PUSH
4064: LD_INT 0
4066: ST_TO_ADDR
// CountClassMembers ;
4067: CALL 4117 0 0
// for i := 1 to 8 do
4071: LD_ADDR_VAR 0 2
4075: PUSH
4076: DOUBLE
4077: LD_INT 1
4079: DEC
4080: ST_TO_ADDR
4081: LD_INT 8
4083: PUSH
4084: FOR_TO
4085: IFFALSE 4110
// if Side_Positions [ i ] then
4087: LD_EXP 21
4091: PUSH
4092: LD_VAR 0 2
4096: ARRAY
4097: IFFALSE 4108
// prepare_side ( i ) ;
4099: LD_VAR 0 2
4103: PPUSH
4104: CALL 2807 0 1
4108: GO 4084
4110: POP
4111: POP
// end ;
4112: LD_VAR 0 1
4116: RET
// function CountClassMembers ; var Mode ; begin
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
// if No_Mechs then
4121: LD_EXP 57
4125: IFFALSE 4137
// Mode := 2 else
4127: LD_ADDR_VAR 0 2
4131: PUSH
4132: LD_INT 2
4134: ST_TO_ADDR
4135: GO 4145
// Mode := 1 ;
4137: LD_ADDR_VAR 0 2
4141: PUSH
4142: LD_INT 1
4144: ST_TO_ADDR
// neng := number_of_people ;
4145: LD_ADDR_LOC 5
4149: PUSH
4150: LD_EXP 5
4154: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4155: LD_ADDR_LOC 8
4159: PUSH
4160: LD_LOC 5
4164: PUSH
4165: LD_INT 4
4167: PUSH
4168: LD_INT 3
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: LD_VAR 0 2
4179: ARRAY
4180: DIV
4181: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4182: LD_LOC 8
4186: PUSH
4187: LD_EXP 4
4191: LESS
4192: IFFALSE 4204
// nsol := number_of_breastworks ;
4194: LD_ADDR_LOC 8
4198: PUSH
4199: LD_EXP 4
4203: ST_TO_ADDR
// neng := neng - nsol ;
4204: LD_ADDR_LOC 5
4208: PUSH
4209: LD_LOC 5
4213: PUSH
4214: LD_LOC 8
4218: MINUS
4219: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4220: LD_ADDR_LOC 6
4224: PUSH
4225: LD_LOC 5
4229: PUSH
4230: LD_INT 3
4232: PUSH
4233: LD_INT 2
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_VAR 0 2
4244: ARRAY
4245: DIV
4246: ST_TO_ADDR
// if ( nsci < 1 ) then
4247: LD_LOC 6
4251: PUSH
4252: LD_INT 1
4254: LESS
4255: IFFALSE 4265
// nsci := 1 ;
4257: LD_ADDR_LOC 6
4261: PUSH
4262: LD_INT 1
4264: ST_TO_ADDR
// neng := neng - nsci ;
4265: LD_ADDR_LOC 5
4269: PUSH
4270: LD_LOC 5
4274: PUSH
4275: LD_LOC 6
4279: MINUS
4280: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4281: LD_ADDR_LOC 7
4285: PUSH
4286: LD_LOC 5
4290: PUSH
4291: LD_INT 2
4293: DIV
4294: PUSH
4295: LD_INT 0
4297: PUSH
4298: EMPTY
4299: LIST
4300: LIST
4301: PUSH
4302: LD_VAR 0 2
4306: ARRAY
4307: ST_TO_ADDR
// neng := neng - nmech ;
4308: LD_ADDR_LOC 5
4312: PUSH
4313: LD_LOC 5
4317: PUSH
4318: LD_LOC 7
4322: MINUS
4323: ST_TO_ADDR
// if ( neng < 1 ) then
4324: LD_LOC 5
4328: PUSH
4329: LD_INT 1
4331: LESS
4332: IFFALSE 4342
// neng := 1 ;
4334: LD_ADDR_LOC 5
4338: PUSH
4339: LD_INT 1
4341: ST_TO_ADDR
// end ;
4342: LD_VAR 0 1
4346: RET
// starting begin disable ( 98 ) ;
4347: LD_INT 98
4349: DISABLE_MARKED
// disable ( 99 ) ;
4350: LD_INT 99
4352: DISABLE_MARKED
// disable ( 100 ) ;
4353: LD_INT 100
4355: DISABLE_MARKED
// disable ( 4 ) ;
4356: LD_INT 4
4358: DISABLE_MARKED
// disable ( 400 ) ;
4359: LD_INT 400
4361: DISABLE_MARKED
// disable ( 401 ) ;
4362: LD_INT 401
4364: DISABLE_MARKED
// mp_selectmsg := true ;
4365: LD_ADDR_OWVAR 13
4369: PUSH
4370: LD_INT 1
4372: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4373: CALL 68 0 0
// init_map ;
4377: CALL 1454 0 0
// set_shared_visions_and_alliances ;
4381: CALL 1983 0 0
// ResetFog ;
4385: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4389: LD_OWVAR 2
4393: PPUSH
4394: CALL_OW 520
// AnimateTrees ( true ) ;
4398: LD_INT 1
4400: PPUSH
4401: CALL_OW 573
// prepare_sides ;
4405: CALL 4048 0 0
// init_shipments_and_respawning ;
4409: CALL 4550 0 0
// Init_Win_Condition ;
4413: CALL 12047 0 0
// if game_type = 3 then
4417: LD_EXP 41
4421: PUSH
4422: LD_INT 3
4424: EQUAL
4425: IFFALSE 4435
// begin InitPoints ( ) ;
4427: CALL 11050 0 0
// init_kings_counting ;
4431: CALL 13342 0 0
// end ; InitApeman ;
4435: CALL 6680 0 0
// InitLimits ;
4439: CALL 9920 0 0
// ShowTimer ;
4443: CALL 10857 0 0
// music_nat := Side_Nations [ your_side ] ;
4447: LD_ADDR_OWVAR 71
4451: PUSH
4452: LD_EXP 22
4456: PUSH
4457: LD_OWVAR 2
4461: ARRAY
4462: ST_TO_ADDR
// if IAmSpec then
4463: CALL_OW 531
4467: IFFALSE 4503
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4469: LD_INT 0
4471: PPUSH
4472: LD_INT 0
4474: PPUSH
4475: LD_OWVAR 2
4479: PPUSH
4480: LD_INT 32767
4482: NEG
4483: PPUSH
4484: CALL_OW 330
// CenterNowOnXY ( 119 , 79 ) ;
4488: LD_INT 119
4490: PPUSH
4491: LD_INT 79
4493: PPUSH
4494: CALL_OW 86
// enable ( 400 ) ;
4498: LD_INT 400
4500: ENABLE_MARKED
// end else
4501: GO 4549
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4503: LD_EXP 26
4507: PUSH
4508: LD_EXP 21
4512: PUSH
4513: LD_OWVAR 2
4517: ARRAY
4518: ARRAY
4519: PUSH
4520: LD_INT 1
4522: ARRAY
4523: PPUSH
4524: LD_EXP 26
4528: PUSH
4529: LD_EXP 21
4533: PUSH
4534: LD_OWVAR 2
4538: ARRAY
4539: ARRAY
4540: PUSH
4541: LD_INT 2
4543: ARRAY
4544: PPUSH
4545: CALL_OW 86
// end ; end ; end_of_file
4549: END
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
4550: LD_INT 0
4552: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4553: LD_ADDR_LOC 9
4557: PUSH
4558: LD_INT 0
4560: PPUSH
4561: LD_INT 3
4563: PPUSH
4564: CALL_OW 12
4568: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
4569: LD_ADDR_LOC 10
4573: PUSH
4574: LD_INT 1
4576: PPUSH
4577: LD_INT 8
4579: PPUSH
4580: CALL_OW 12
4584: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4585: LD_ADDR_LOC 11
4589: PUSH
4590: LD_INT 0
4592: PUSH
4593: LD_INT 0
4595: PUSH
4596: LD_INT 0
4598: PUSH
4599: LD_INT 0
4601: PUSH
4602: LD_INT 0
4604: PUSH
4605: LD_INT 0
4607: PUSH
4608: LD_INT 0
4610: PUSH
4611: LD_INT 0
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: ST_TO_ADDR
// end ;
4624: LD_VAR 0 1
4628: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
4629: GO 4631
4631: DISABLE
4632: LD_INT 0
4634: PPUSH
4635: PPUSH
4636: PPUSH
4637: PPUSH
// begin if respawning_time_max = 0 then
4638: LD_EXP 14
4642: PUSH
4643: LD_INT 0
4645: EQUAL
4646: IFFALSE 4650
// exit ;
4648: GO 5157
// if respawn = 8 then
4650: LD_LOC 10
4654: PUSH
4655: LD_INT 8
4657: EQUAL
4658: IFFALSE 4670
// respawn := 1 else
4660: LD_ADDR_LOC 10
4664: PUSH
4665: LD_INT 1
4667: ST_TO_ADDR
4668: GO 4684
// respawn := respawn + 1 ;
4670: LD_ADDR_LOC 10
4674: PUSH
4675: LD_LOC 10
4679: PUSH
4680: LD_INT 1
4682: PLUS
4683: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
4684: LD_EXP 21
4688: PUSH
4689: LD_LOC 10
4693: ARRAY
4694: PUSH
4695: LD_LOC 11
4699: PUSH
4700: LD_LOC 10
4704: ARRAY
4705: NOT
4706: AND
4707: IFFALSE 5156
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
4709: LD_ADDR_VAR 0 1
4713: PUSH
4714: LD_INT 21
4716: PUSH
4717: LD_INT 1
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 22
4726: PUSH
4727: LD_LOC 10
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: LD_INT 3
4738: PUSH
4739: LD_INT 23
4741: PUSH
4742: LD_INT 0
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: PPUSH
4755: CALL_OW 69
4759: ST_TO_ADDR
// if n < number_of_people then
4760: LD_VAR 0 1
4764: PUSH
4765: LD_EXP 5
4769: LESS
4770: IFFALSE 5153
// begin aktresp := respawn ;
4772: LD_ADDR_VAR 0 3
4776: PUSH
4777: LD_LOC 10
4781: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
4782: LD_ADDR_LOC 11
4786: PUSH
4787: LD_LOC 11
4791: PPUSH
4792: LD_VAR 0 3
4796: PPUSH
4797: LD_INT 1
4799: PPUSH
4800: CALL_OW 1
4804: ST_TO_ADDR
// enable ;
4805: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
4806: LD_EXP 13
4810: PPUSH
4811: LD_EXP 14
4815: PPUSH
4816: CALL_OW 12
4820: PPUSH
4821: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
4825: LD_ADDR_LOC 11
4829: PUSH
4830: LD_LOC 11
4834: PPUSH
4835: LD_VAR 0 3
4839: PPUSH
4840: LD_INT 0
4842: PPUSH
4843: CALL_OW 1
4847: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
4848: LD_ADDR_VAR 0 2
4852: PUSH
4853: LD_INT 21
4855: PUSH
4856: LD_INT 3
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 2
4865: PUSH
4866: LD_INT 30
4868: PUSH
4869: LD_INT 0
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 30
4878: PUSH
4879: LD_INT 1
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 50
4893: PUSH
4894: EMPTY
4895: LIST
4896: PUSH
4897: LD_INT 22
4899: PUSH
4900: LD_VAR 0 3
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: PPUSH
4915: CALL_OW 69
4919: ST_TO_ADDR
// if building_list = 0 then
4920: LD_VAR 0 2
4924: PUSH
4925: LD_INT 0
4927: EQUAL
4928: IFFALSE 4973
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
4930: LD_ADDR_VAR 0 2
4934: PUSH
4935: LD_INT 21
4937: PUSH
4938: LD_INT 3
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: PUSH
4945: LD_INT 50
4947: PUSH
4948: EMPTY
4949: LIST
4950: PUSH
4951: LD_INT 22
4953: PUSH
4954: LD_VAR 0 3
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: LIST
4967: PPUSH
4968: CALL_OW 69
4972: ST_TO_ADDR
// if building_list = 0 then
4973: LD_VAR 0 2
4977: PUSH
4978: LD_INT 0
4980: EQUAL
4981: IFFALSE 4985
// exit ;
4983: GO 5157
// hc_name :=  ;
4985: LD_ADDR_OWVAR 26
4989: PUSH
4990: LD_STRING 
4992: ST_TO_ADDR
// hc_importance := 0 ;
4993: LD_ADDR_OWVAR 32
4997: PUSH
4998: LD_INT 0
5000: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
5001: LD_INT 0
5003: PPUSH
5004: LD_INT 0
5006: PPUSH
5007: LD_EXP 7
5011: PUSH
5012: LD_INT 2
5014: DIV
5015: PPUSH
5016: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
5020: LD_ADDR_OWVAR 21
5024: PUSH
5025: LD_EXP 22
5029: PUSH
5030: LD_VAR 0 3
5034: ARRAY
5035: ST_TO_ADDR
// uc_side := aktresp ;
5036: LD_ADDR_OWVAR 20
5040: PUSH
5041: LD_VAR 0 3
5045: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5046: LD_ADDR_VAR 0 4
5050: PUSH
5051: LD_VAR 0 2
5055: PUSH
5056: LD_INT 1
5058: PPUSH
5059: LD_VAR 0 2
5063: PUSH
5064: LD_INT 0
5066: PLUS
5067: PPUSH
5068: CALL_OW 12
5072: ARRAY
5073: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5074: LD_VAR 0 4
5078: PPUSH
5079: CALL_OW 266
5083: PUSH
5084: LD_INT 0
5086: PUSH
5087: LD_INT 1
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: IN
5094: IFFALSE 5106
// n = 25 else
5096: LD_ADDR_VAR 0 1
5100: PUSH
5101: LD_INT 25
5103: ST_TO_ADDR
5104: GO 5114
// n = 10 ;
5106: LD_ADDR_VAR 0 1
5110: PUSH
5111: LD_INT 10
5113: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5114: CALL_OW 44
5118: PPUSH
5119: LD_VAR 0 4
5123: PPUSH
5124: CALL_OW 250
5128: PPUSH
5129: LD_VAR 0 4
5133: PPUSH
5134: CALL_OW 251
5138: PPUSH
5139: LD_VAR 0 1
5143: PPUSH
5144: LD_INT 1
5146: PPUSH
5147: CALL_OW 50
// end else
5151: GO 5154
// enable ;
5153: ENABLE
// end else
5154: GO 5157
// enable ;
5156: ENABLE
// end ;
5157: PPOPN 4
5159: END
// every 0 0$5 + 0 0$1.1 do var d ;
5160: GO 5162
5162: DISABLE
5163: LD_INT 0
5165: PPUSH
// begin case tick of 1 .. 1 1$0 :
5166: LD_OWVAR 1
5170: PUSH
5171: LD_INT 1
5173: DOUBLE
5174: GREATEREQUAL
5175: IFFALSE 5183
5177: LD_INT 2100
5179: DOUBLE
5180: LESSEQUAL
5181: IFTRUE 5185
5183: GO 5196
5185: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5186: LD_ADDR_VAR 0 1
5190: PUSH
5191: LD_INT 150
5193: ST_TO_ADDR
5194: GO 5379
5196: LD_INT 2100
5198: PUSH
5199: LD_INT 1
5201: PLUS
5202: DOUBLE
5203: GREATEREQUAL
5204: IFFALSE 5212
5206: LD_INT 10500
5208: DOUBLE
5209: LESSEQUAL
5210: IFTRUE 5214
5212: GO 5225
5214: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5215: LD_ADDR_VAR 0 1
5219: PUSH
5220: LD_INT 100
5222: ST_TO_ADDR
5223: GO 5379
5225: LD_INT 10500
5227: PUSH
5228: LD_INT 1
5230: PLUS
5231: DOUBLE
5232: GREATEREQUAL
5233: IFFALSE 5241
5235: LD_INT 21000
5237: DOUBLE
5238: LESSEQUAL
5239: IFTRUE 5243
5241: GO 5254
5243: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5244: LD_ADDR_VAR 0 1
5248: PUSH
5249: LD_INT 90
5251: ST_TO_ADDR
5252: GO 5379
5254: LD_INT 21000
5256: PUSH
5257: LD_INT 1
5259: PLUS
5260: DOUBLE
5261: GREATEREQUAL
5262: IFFALSE 5270
5264: LD_INT 42000
5266: DOUBLE
5267: LESSEQUAL
5268: IFTRUE 5272
5270: GO 5283
5272: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5273: LD_ADDR_VAR 0 1
5277: PUSH
5278: LD_INT 70
5280: ST_TO_ADDR
5281: GO 5379
5283: LD_INT 42000
5285: PUSH
5286: LD_INT 1
5288: PLUS
5289: DOUBLE
5290: GREATEREQUAL
5291: IFFALSE 5299
5293: LD_INT 63000
5295: DOUBLE
5296: LESSEQUAL
5297: IFTRUE 5301
5299: GO 5312
5301: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5302: LD_ADDR_VAR 0 1
5306: PUSH
5307: LD_INT 60
5309: ST_TO_ADDR
5310: GO 5379
5312: LD_INT 63000
5314: PUSH
5315: LD_INT 1
5317: PLUS
5318: DOUBLE
5319: GREATEREQUAL
5320: IFFALSE 5328
5322: LD_INT 105000
5324: DOUBLE
5325: LESSEQUAL
5326: IFTRUE 5330
5328: GO 5341
5330: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5331: LD_ADDR_VAR 0 1
5335: PUSH
5336: LD_INT 35
5338: ST_TO_ADDR
5339: GO 5379
5341: LD_INT 105000
5343: PUSH
5344: LD_INT 1
5346: PLUS
5347: DOUBLE
5348: GREATEREQUAL
5349: IFFALSE 5357
5351: LD_INT 630000
5353: DOUBLE
5354: LESSEQUAL
5355: IFTRUE 5359
5357: GO 5370
5359: POP
// d := 20 ; else
5360: LD_ADDR_VAR 0 1
5364: PUSH
5365: LD_INT 20
5367: ST_TO_ADDR
5368: GO 5379
5370: POP
// d := 0 ; end ;
5371: LD_ADDR_VAR 0 1
5375: PUSH
5376: LD_INT 0
5378: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5379: LD_INT 1
5381: PPUSH
5382: LD_INT 10000
5384: PPUSH
5385: CALL_OW 12
5389: PUSH
5390: LD_VAR 0 1
5394: PUSH
5395: LD_EXP 10
5399: MUL
5400: LESSEQUAL
5401: IFFALSE 5455
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5403: LD_INT 1
5405: PPUSH
5406: LD_INT 140
5408: PPUSH
5409: CALL_OW 12
5413: PPUSH
5414: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5418: LD_ADDR_LOC 9
5422: PUSH
5423: LD_LOC 9
5427: PUSH
5428: LD_INT 1
5430: PLUS
5431: PUSH
5432: LD_INT 4
5434: MOD
5435: ST_TO_ADDR
// CreateCratesArea ( 5 , ZaklLH + shipment , true ) ;
5436: LD_INT 5
5438: PPUSH
5439: LD_INT 3
5441: PUSH
5442: LD_LOC 9
5446: PLUS
5447: PPUSH
5448: LD_INT 1
5450: PPUSH
5451: CALL_OW 55
// end ; enable ;
5455: ENABLE
// end ;
5456: PPOPN 1
5458: END
// every 0 0$7 + 0 0$1.7 do var d ;
5459: GO 5461
5461: DISABLE
5462: LD_INT 0
5464: PPUSH
// begin case tick of 1 .. 1 1$0 :
5465: LD_OWVAR 1
5469: PUSH
5470: LD_INT 1
5472: DOUBLE
5473: GREATEREQUAL
5474: IFFALSE 5482
5476: LD_INT 2100
5478: DOUBLE
5479: LESSEQUAL
5480: IFTRUE 5484
5482: GO 5495
5484: POP
// d := 20 ; 1 1$0 + 1 .. 5 5$0 :
5485: LD_ADDR_VAR 0 1
5489: PUSH
5490: LD_INT 20
5492: ST_TO_ADDR
5493: GO 5678
5495: LD_INT 2100
5497: PUSH
5498: LD_INT 1
5500: PLUS
5501: DOUBLE
5502: GREATEREQUAL
5503: IFFALSE 5511
5505: LD_INT 10500
5507: DOUBLE
5508: LESSEQUAL
5509: IFTRUE 5513
5511: GO 5524
5513: POP
// d := 50 ; 5 5$0 + 1 .. 10 10$0 :
5514: LD_ADDR_VAR 0 1
5518: PUSH
5519: LD_INT 50
5521: ST_TO_ADDR
5522: GO 5678
5524: LD_INT 10500
5526: PUSH
5527: LD_INT 1
5529: PLUS
5530: DOUBLE
5531: GREATEREQUAL
5532: IFFALSE 5540
5534: LD_INT 21000
5536: DOUBLE
5537: LESSEQUAL
5538: IFTRUE 5542
5540: GO 5553
5542: POP
// d := 150 ; 10 10$0 + 1 .. 20 20$0 :
5543: LD_ADDR_VAR 0 1
5547: PUSH
5548: LD_INT 150
5550: ST_TO_ADDR
5551: GO 5678
5553: LD_INT 21000
5555: PUSH
5556: LD_INT 1
5558: PLUS
5559: DOUBLE
5560: GREATEREQUAL
5561: IFFALSE 5569
5563: LD_INT 42000
5565: DOUBLE
5566: LESSEQUAL
5567: IFTRUE 5571
5569: GO 5582
5571: POP
// d := 100 ; 20 20$0 + 1 .. 30 30$0 :
5572: LD_ADDR_VAR 0 1
5576: PUSH
5577: LD_INT 100
5579: ST_TO_ADDR
5580: GO 5678
5582: LD_INT 42000
5584: PUSH
5585: LD_INT 1
5587: PLUS
5588: DOUBLE
5589: GREATEREQUAL
5590: IFFALSE 5598
5592: LD_INT 63000
5594: DOUBLE
5595: LESSEQUAL
5596: IFTRUE 5600
5598: GO 5611
5600: POP
// d := 90 ; 30 30$0 + 1 .. 50 50$0 :
5601: LD_ADDR_VAR 0 1
5605: PUSH
5606: LD_INT 90
5608: ST_TO_ADDR
5609: GO 5678
5611: LD_INT 63000
5613: PUSH
5614: LD_INT 1
5616: PLUS
5617: DOUBLE
5618: GREATEREQUAL
5619: IFFALSE 5627
5621: LD_INT 105000
5623: DOUBLE
5624: LESSEQUAL
5625: IFTRUE 5629
5627: GO 5640
5629: POP
// d := 70 ; 50 50$0 + 1 .. 300 300$0 :
5630: LD_ADDR_VAR 0 1
5634: PUSH
5635: LD_INT 70
5637: ST_TO_ADDR
5638: GO 5678
5640: LD_INT 105000
5642: PUSH
5643: LD_INT 1
5645: PLUS
5646: DOUBLE
5647: GREATEREQUAL
5648: IFFALSE 5656
5650: LD_INT 630000
5652: DOUBLE
5653: LESSEQUAL
5654: IFTRUE 5658
5656: GO 5669
5658: POP
// d := 60 ; else
5659: LD_ADDR_VAR 0 1
5663: PUSH
5664: LD_INT 60
5666: ST_TO_ADDR
5667: GO 5678
5669: POP
// d := 35 ; end ;
5670: LD_ADDR_VAR 0 1
5674: PUSH
5675: LD_INT 35
5677: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5678: LD_INT 1
5680: PPUSH
5681: LD_INT 10000
5683: PPUSH
5684: CALL_OW 12
5688: PUSH
5689: LD_VAR 0 1
5693: PUSH
5694: LD_EXP 10
5698: MUL
5699: LESSEQUAL
5700: IFFALSE 5754
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5702: LD_INT 1
5704: PPUSH
5705: LD_INT 140
5707: PPUSH
5708: CALL_OW 12
5712: PPUSH
5713: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5717: LD_ADDR_LOC 9
5721: PUSH
5722: LD_LOC 9
5726: PUSH
5727: LD_INT 1
5729: PLUS
5730: PUSH
5731: LD_INT 4
5733: MOD
5734: ST_TO_ADDR
// CreateCratesArea ( 5 , ZaklLHOut + shipment , true ) ;
5735: LD_INT 5
5737: PPUSH
5738: LD_INT 20
5740: PUSH
5741: LD_LOC 9
5745: PLUS
5746: PPUSH
5747: LD_INT 1
5749: PPUSH
5750: CALL_OW 55
// end ; enable ;
5754: ENABLE
// end ;
5755: PPOPN 1
5757: END
// every 1 1$0 trigger def_shipments_density do
5758: LD_EXP 47
5762: IFFALSE 5798
5764: GO 5766
5766: DISABLE
// begin CreateCratesArea ( 5 , map_center , true ) ;
5767: LD_INT 5
5769: PPUSH
5770: LD_INT 15
5772: PPUSH
5773: LD_INT 1
5775: PPUSH
5776: CALL_OW 55
// wait ( 3 3$0 - ( 1 1$0 * def_shipments_density ) ) ;
5780: LD_INT 6300
5782: PUSH
5783: LD_INT 2100
5785: PUSH
5786: LD_EXP 47
5790: MUL
5791: MINUS
5792: PPUSH
5793: CALL_OW 67
// enable ;
5797: ENABLE
// end ; end_of_file
5798: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5799: LD_VAR 0 1
5803: PPUSH
5804: CALL_OW 266
5808: PUSH
5809: LD_INT 0
5811: PUSH
5812: LD_INT 1
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: IN
5819: IFFALSE 5844
// SetBName ( b , @ & GetSide ( b ) ) ;
5821: LD_VAR 0 1
5825: PPUSH
5826: LD_STRING @
5828: PUSH
5829: LD_VAR 0 1
5833: PPUSH
5834: CALL_OW 255
5838: STR
5839: PPUSH
5840: CALL_OW 500
// if def_game_rules then
5844: LD_EXP 42
5848: IFFALSE 5885
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
5850: LD_VAR 0 1
5854: PPUSH
5855: LD_VAR 0 1
5859: PPUSH
5860: CALL_OW 266
5864: PPUSH
5865: LD_VAR 0 1
5869: PPUSH
5870: CALL_OW 255
5874: PPUSH
5875: LD_INT 0
5877: PPUSH
5878: LD_INT 1
5880: PPUSH
5881: CALL 10321 0 5
// end ;
5885: PPOPN 2
5887: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5888: LD_VAR 0 1
5892: PPUSH
5893: CALL_OW 266
5897: PUSH
5898: LD_INT 0
5900: PUSH
5901: LD_INT 1
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: IN
5908: IFFALSE 5933
// SetBName ( b , @ & GetSide ( b ) ) ;
5910: LD_VAR 0 1
5914: PPUSH
5915: LD_STRING @
5917: PUSH
5918: LD_VAR 0 1
5922: PPUSH
5923: CALL_OW 255
5927: STR
5928: PPUSH
5929: CALL_OW 500
// if def_game_rules then
5933: LD_EXP 42
5937: IFFALSE 5976
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
5939: LD_VAR 0 1
5943: PPUSH
5944: LD_VAR 0 1
5948: PPUSH
5949: CALL_OW 266
5953: PPUSH
5954: LD_VAR 0 1
5958: PPUSH
5959: CALL_OW 255
5963: PPUSH
5964: LD_VAR 0 2
5968: PPUSH
5969: LD_INT 1
5971: PPUSH
5972: CALL 10321 0 5
// end ;
5976: PPOPN 3
5978: END
// on VehicleConstructed ( veh , fac ) do var side ;
5979: LD_INT 0
5981: PPUSH
// begin if GetControl ( veh ) = control_apeman then
5982: LD_VAR 0 1
5986: PPUSH
5987: CALL_OW 263
5991: PUSH
5992: LD_INT 5
5994: EQUAL
5995: IFFALSE 6137
// begin side := GetSide ( veh ) ;
5997: LD_ADDR_VAR 0 3
6001: PUSH
6002: LD_VAR 0 1
6006: PPUSH
6007: CALL_OW 255
6011: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6012: LD_ADDR_EXP 37
6016: PUSH
6017: LD_EXP 37
6021: PPUSH
6022: LD_VAR 0 3
6026: PPUSH
6027: LD_EXP 37
6031: PUSH
6032: LD_VAR 0 3
6036: ARRAY
6037: PPUSH
6038: LD_INT 52
6040: PUSH
6041: EMPTY
6042: LIST
6043: PPUSH
6044: CALL_OW 72
6048: PUSH
6049: LD_INT 22
6051: PUSH
6052: LD_VAR 0 3
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: PUSH
6061: LD_INT 2
6063: PUSH
6064: LD_INT 33
6066: PUSH
6067: LD_INT 5
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 12
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 25
6086: PUSH
6087: LD_INT 15
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PUSH
6094: LD_INT 25
6096: PUSH
6097: LD_INT 16
6099: PUSH
6100: EMPTY
6101: LIST
6102: LIST
6103: PUSH
6104: LD_INT 25
6106: PUSH
6107: LD_INT 17
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: PPUSH
6126: CALL_OW 69
6130: UNION
6131: PPUSH
6132: CALL_OW 1
6136: ST_TO_ADDR
// end ; end ;
6137: PPOPN 3
6139: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6140: LD_INT 0
6142: PPUSH
6143: PPUSH
6144: PPUSH
6145: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6146: LD_VAR 0 1
6150: PPUSH
6151: CALL_OW 257
6155: PUSH
6156: LD_INT 12
6158: PUSH
6159: LD_INT 15
6161: PUSH
6162: LD_INT 17
6164: PUSH
6165: LD_INT 16
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: IN
6174: PUSH
6175: LD_VAR 0 1
6179: PPUSH
6180: CALL_OW 263
6184: PUSH
6185: LD_INT 5
6187: EQUAL
6188: OR
6189: IFFALSE 6200
// ApeKilled ( j ) ;
6191: LD_VAR 0 1
6195: PPUSH
6196: CALL 7361 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6200: LD_VAR 0 1
6204: PPUSH
6205: CALL_OW 266
6209: PUSH
6210: LD_INT 0
6212: PUSH
6213: LD_INT 1
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: IN
6220: IFFALSE 6302
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6222: LD_ADDR_VAR 0 4
6226: PUSH
6227: LD_EXP 21
6231: PUSH
6232: LD_VAR 0 1
6236: PPUSH
6237: CALL_OW 255
6241: ARRAY
6242: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6243: LD_ADDR_VAR 0 2
6247: PUSH
6248: LD_EXP 26
6252: PUSH
6253: LD_VAR 0 4
6257: ARRAY
6258: PUSH
6259: LD_INT 1
6261: ARRAY
6262: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6263: LD_ADDR_VAR 0 3
6267: PUSH
6268: LD_EXP 26
6272: PUSH
6273: LD_VAR 0 4
6277: ARRAY
6278: PUSH
6279: LD_INT 2
6281: ARRAY
6282: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6283: LD_VAR 0 2
6287: PPUSH
6288: LD_VAR 0 3
6292: PPUSH
6293: CALL_OW 420
6297: PPUSH
6298: CALL_OW 419
// end ; if def_game_rules then
6302: LD_EXP 42
6306: IFFALSE 6405
// if ( GetType ( j ) = 3 ) then
6308: LD_VAR 0 1
6312: PPUSH
6313: CALL_OW 247
6317: PUSH
6318: LD_INT 3
6320: EQUAL
6321: IFFALSE 6361
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
6323: LD_VAR 0 1
6327: PPUSH
6328: LD_VAR 0 1
6332: PPUSH
6333: CALL_OW 266
6337: PPUSH
6338: LD_VAR 0 1
6342: PPUSH
6343: CALL_OW 255
6347: PPUSH
6348: LD_INT 0
6350: PPUSH
6351: LD_INT 1
6353: NEG
6354: PPUSH
6355: CALL 10321 0 5
6359: GO 6405
// if ( GetChassis ( j ) = 25 ) then
6361: LD_VAR 0 1
6365: PPUSH
6366: CALL_OW 265
6370: PUSH
6371: LD_INT 25
6373: EQUAL
6374: IFFALSE 6405
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
6376: LD_VAR 0 1
6380: PPUSH
6381: LD_INT 37
6383: PPUSH
6384: LD_VAR 0 1
6388: PPUSH
6389: CALL_OW 255
6393: PPUSH
6394: LD_INT 0
6396: PPUSH
6397: LD_INT 1
6399: NEG
6400: PPUSH
6401: CALL 10321 0 5
// end ;
6405: PPOPN 5
6407: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
6408: LD_EXP 42
6412: PUSH
6413: LD_VAR 0 1
6417: PPUSH
6418: CALL_OW 265
6422: PUSH
6423: LD_INT 25
6425: EQUAL
6426: AND
6427: IFFALSE 6459
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
6429: LD_VAR 0 1
6433: PPUSH
6434: LD_INT 37
6436: PPUSH
6437: LD_VAR 0 1
6441: PPUSH
6442: CALL_OW 255
6446: PPUSH
6447: LD_VAR 0 3
6451: PPUSH
6452: LD_INT 1
6454: PPUSH
6455: CALL 10321 0 5
// end ;
6459: PPOPN 4
6461: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6462: LD_VAR 0 1
6466: PPUSH
6467: LD_VAR 0 2
6471: PPUSH
6472: LD_VAR 0 3
6476: PPUSH
6477: LD_OWVAR 2
6481: PPUSH
6482: CALL 11808 0 4
6486: PPOPN 3
6488: END
// every 20 20$00 trigger apemanNumber do
6489: LD_EXP 34
6493: IFFALSE 6526
6495: GO 6497
6497: DISABLE
// begin enable ;
6498: ENABLE
// if apeLevel >= 8 then
6499: LD_EXP 39
6503: PUSH
6504: LD_INT 8
6506: GREATEREQUAL
6507: IFFALSE 6512
// disable else
6509: DISABLE
6510: GO 6526
// apeLevel := apeLevel + 1 ;
6512: LD_ADDR_EXP 39
6516: PUSH
6517: LD_EXP 39
6521: PUSH
6522: LD_INT 1
6524: PLUS
6525: ST_TO_ADDR
// end ;
6526: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6527: LD_EXP 34
6531: PUSH
6532: LD_EXP 35
6536: LESS
6537: IFFALSE 6677
6539: GO 6541
6541: DISABLE
6542: LD_INT 0
6544: PPUSH
6545: PPUSH
6546: PPUSH
6547: PPUSH
// begin enable ;
6548: ENABLE
// for i := 1 to apemanPos do
6549: LD_ADDR_VAR 0 1
6553: PUSH
6554: DOUBLE
6555: LD_INT 1
6557: DEC
6558: ST_TO_ADDR
6559: LD_EXP 37
6563: PUSH
6564: FOR_TO
6565: IFFALSE 6675
// begin if apemanPlayerCount [ i ] then
6567: LD_EXP 38
6571: PUSH
6572: LD_VAR 0 1
6576: ARRAY
6577: IFFALSE 6673
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6579: LD_EXP 38
6583: PUSH
6584: LD_VAR 0 1
6588: ARRAY
6589: PUSH
6590: LD_EXP 37
6594: PUSH
6595: LD_VAR 0 1
6599: ARRAY
6600: GREATER
6601: IFFALSE 6673
// begin ape := PrepareApeman ;
6603: LD_ADDR_VAR 0 2
6607: PUSH
6608: CALL 7180 0 0
6612: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6613: LD_VAR 0 2
6617: PPUSH
6618: LD_EXP 40
6622: PUSH
6623: LD_VAR 0 1
6627: ARRAY
6628: PPUSH
6629: LD_INT 0
6631: PPUSH
6632: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6636: LD_ADDR_EXP 37
6640: PUSH
6641: LD_EXP 37
6645: PPUSH
6646: LD_VAR 0 1
6650: PPUSH
6651: LD_EXP 37
6655: PUSH
6656: LD_VAR 0 1
6660: ARRAY
6661: PUSH
6662: LD_VAR 0 2
6666: UNION
6667: PPUSH
6668: CALL_OW 1
6672: ST_TO_ADDR
// end ; end ; end ;
6673: GO 6564
6675: POP
6676: POP
// end ;
6677: PPOPN 4
6679: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6680: LD_INT 0
6682: PPUSH
6683: PPUSH
6684: PPUSH
6685: PPUSH
6686: PPUSH
6687: PPUSH
6688: PPUSH
// playersAmount := 0 ;
6689: LD_ADDR_VAR 0 3
6693: PUSH
6694: LD_INT 0
6696: ST_TO_ADDR
// _apeAreas := [ OpiceSZ , OpiceSV , OpiceJZ , OpiceJV ] ;
6697: LD_ADDR_VAR 0 7
6701: PUSH
6702: LD_INT 11
6704: PUSH
6705: LD_INT 12
6707: PUSH
6708: LD_INT 14
6710: PUSH
6711: LD_INT 13
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6720: LD_ADDR_EXP 40
6724: PUSH
6725: LD_INT 0
6727: PUSH
6728: LD_INT 0
6730: PUSH
6731: LD_INT 0
6733: PUSH
6734: LD_INT 0
6736: PUSH
6737: LD_INT 0
6739: PUSH
6740: LD_INT 0
6742: PUSH
6743: LD_INT 0
6745: PUSH
6746: LD_INT 0
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: ST_TO_ADDR
// for j = 1 to Side_Positions do
6759: LD_ADDR_VAR 0 4
6763: PUSH
6764: DOUBLE
6765: LD_INT 1
6767: DEC
6768: ST_TO_ADDR
6769: LD_EXP 21
6773: PUSH
6774: FOR_TO
6775: IFFALSE 6842
// if Side_Positions [ j ] then
6777: LD_EXP 21
6781: PUSH
6782: LD_VAR 0 4
6786: ARRAY
6787: IFFALSE 6840
// begin playersAmount := playersAmount + 1 ;
6789: LD_ADDR_VAR 0 3
6793: PUSH
6794: LD_VAR 0 3
6798: PUSH
6799: LD_INT 1
6801: PLUS
6802: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6803: LD_ADDR_EXP 40
6807: PUSH
6808: LD_EXP 40
6812: PPUSH
6813: LD_VAR 0 4
6817: PPUSH
6818: LD_VAR 0 7
6822: PUSH
6823: LD_EXP 21
6827: PUSH
6828: LD_VAR 0 4
6832: ARRAY
6833: ARRAY
6834: PPUSH
6835: CALL_OW 1
6839: ST_TO_ADDR
// end ;
6840: GO 6774
6842: POP
6843: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6844: LD_ADDR_EXP 36
6848: PUSH
6849: LD_INT 3
6851: PUSH
6852: LD_EXP 6
6856: MUL
6857: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6858: LD_ADDR_EXP 34
6862: PUSH
6863: LD_VAR 0 3
6867: PUSH
6868: LD_EXP 36
6872: MUL
6873: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6874: LD_ADDR_EXP 35
6878: PUSH
6879: LD_EXP 34
6883: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6884: LD_ADDR_EXP 37
6888: PUSH
6889: LD_INT 0
6891: PUSH
6892: LD_INT 0
6894: PUSH
6895: LD_INT 0
6897: PUSH
6898: LD_INT 0
6900: PUSH
6901: LD_INT 0
6903: PUSH
6904: LD_INT 0
6906: PUSH
6907: LD_INT 0
6909: PUSH
6910: LD_INT 0
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6923: LD_ADDR_EXP 38
6927: PUSH
6928: LD_INT 0
6930: PUSH
6931: LD_INT 0
6933: PUSH
6934: LD_INT 0
6936: PUSH
6937: LD_INT 0
6939: PUSH
6940: LD_INT 0
6942: PUSH
6943: LD_INT 0
6945: PUSH
6946: LD_INT 0
6948: PUSH
6949: LD_INT 0
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: ST_TO_ADDR
// apeLevel := 1 ;
6962: LD_ADDR_EXP 39
6966: PUSH
6967: LD_INT 1
6969: ST_TO_ADDR
// if not apemanNumber then
6970: LD_EXP 34
6974: NOT
6975: IFFALSE 6979
// exit ;
6977: GO 7175
// for i := 1 to apemanPerPlayer do
6979: LD_ADDR_VAR 0 2
6983: PUSH
6984: DOUBLE
6985: LD_INT 1
6987: DEC
6988: ST_TO_ADDR
6989: LD_EXP 36
6993: PUSH
6994: FOR_TO
6995: IFFALSE 7173
// begin for j := 1 to Side_Positions do
6997: LD_ADDR_VAR 0 4
7001: PUSH
7002: DOUBLE
7003: LD_INT 1
7005: DEC
7006: ST_TO_ADDR
7007: LD_EXP 21
7011: PUSH
7012: FOR_TO
7013: IFFALSE 7169
// if Side_Positions [ j ] then
7015: LD_EXP 21
7019: PUSH
7020: LD_VAR 0 4
7024: ARRAY
7025: IFFALSE 7167
// begin pos := Side_Positions [ j ] ;
7027: LD_ADDR_VAR 0 6
7031: PUSH
7032: LD_EXP 21
7036: PUSH
7037: LD_VAR 0 4
7041: ARRAY
7042: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7043: LD_ADDR_EXP 38
7047: PUSH
7048: LD_EXP 38
7052: PPUSH
7053: LD_VAR 0 4
7057: PPUSH
7058: LD_EXP 38
7062: PUSH
7063: LD_VAR 0 4
7067: ARRAY
7068: PUSH
7069: LD_INT 1
7071: PLUS
7072: PPUSH
7073: CALL_OW 1
7077: ST_TO_ADDR
// ape := PrepareApeman ;
7078: LD_ADDR_VAR 0 5
7082: PUSH
7083: CALL 7180 0 0
7087: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7088: LD_ADDR_EXP 37
7092: PUSH
7093: LD_EXP 37
7097: PPUSH
7098: LD_VAR 0 4
7102: PPUSH
7103: LD_EXP 37
7107: PUSH
7108: LD_VAR 0 4
7112: ARRAY
7113: PPUSH
7114: LD_EXP 37
7118: PUSH
7119: LD_VAR 0 4
7123: ARRAY
7124: PUSH
7125: LD_INT 1
7127: PLUS
7128: PPUSH
7129: LD_VAR 0 5
7133: PPUSH
7134: CALL_OW 1
7138: PPUSH
7139: CALL_OW 1
7143: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7144: LD_VAR 0 5
7148: PPUSH
7149: LD_EXP 40
7153: PUSH
7154: LD_VAR 0 4
7158: ARRAY
7159: PPUSH
7160: LD_INT 0
7162: PPUSH
7163: CALL_OW 49
// end ;
7167: GO 7012
7169: POP
7170: POP
// end ;
7171: GO 6994
7173: POP
7174: POP
// end ;
7175: LD_VAR 0 1
7179: RET
// export function PrepareApeman ; var bonus ; begin
7180: LD_INT 0
7182: PPUSH
7183: PPUSH
// uc_side := 0 ;
7184: LD_ADDR_OWVAR 20
7188: PUSH
7189: LD_INT 0
7191: ST_TO_ADDR
// uc_nation := 0 ;
7192: LD_ADDR_OWVAR 21
7196: PUSH
7197: LD_INT 0
7199: ST_TO_ADDR
// InitHc ;
7200: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
7204: LD_ADDR_VAR 0 2
7208: PUSH
7209: LD_INT 1
7211: NEG
7212: PUSH
7213: LD_INT 0
7215: PUSH
7216: LD_INT 1
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: LIST
7223: PUSH
7224: LD_OWVAR 1
7228: PUSH
7229: LD_INT 3
7231: MOD
7232: PUSH
7233: LD_INT 1
7235: PLUS
7236: ARRAY
7237: ST_TO_ADDR
// hc_class := class_apeman ;
7238: LD_ADDR_OWVAR 28
7242: PUSH
7243: LD_INT 12
7245: ST_TO_ADDR
// hc_gallery :=  ;
7246: LD_ADDR_OWVAR 33
7250: PUSH
7251: LD_STRING 
7253: ST_TO_ADDR
// hc_name :=  ;
7254: LD_ADDR_OWVAR 26
7258: PUSH
7259: LD_STRING 
7261: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
7262: LD_ADDR_OWVAR 31
7266: PUSH
7267: LD_EXP 39
7271: PUSH
7272: LD_VAR 0 2
7276: PLUS
7277: PUSH
7278: LD_EXP 39
7282: PUSH
7283: LD_VAR 0 2
7287: PLUS
7288: PUSH
7289: LD_EXP 39
7293: PUSH
7294: LD_VAR 0 2
7298: PLUS
7299: PUSH
7300: LD_EXP 39
7304: PUSH
7305: LD_VAR 0 2
7309: PLUS
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
7317: LD_ADDR_OWVAR 35
7321: PUSH
7322: LD_INT 10
7324: PUSH
7325: LD_VAR 0 2
7329: MUL
7330: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7331: LD_ADDR_OWVAR 29
7335: PUSH
7336: LD_INT 12
7338: PUSH
7339: LD_INT 10
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: ST_TO_ADDR
// result := CreateHuman ;
7346: LD_ADDR_VAR 0 1
7350: PUSH
7351: CALL_OW 44
7355: ST_TO_ADDR
// end ;
7356: LD_VAR 0 1
7360: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
7361: LD_INT 0
7363: PPUSH
7364: PPUSH
7365: PPUSH
// if not ape then
7366: LD_VAR 0 1
7370: NOT
7371: IFFALSE 7375
// exit ;
7373: GO 7500
// side := GetSide ( ape ) ;
7375: LD_ADDR_VAR 0 3
7379: PUSH
7380: LD_VAR 0 1
7384: PPUSH
7385: CALL_OW 255
7389: ST_TO_ADDR
// if not side then
7390: LD_VAR 0 3
7394: NOT
7395: IFFALSE 7449
// begin for i = 1 to apemanPos do
7397: LD_ADDR_VAR 0 4
7401: PUSH
7402: DOUBLE
7403: LD_INT 1
7405: DEC
7406: ST_TO_ADDR
7407: LD_EXP 37
7411: PUSH
7412: FOR_TO
7413: IFFALSE 7447
// if ape in apemanPos [ i ] then
7415: LD_VAR 0 1
7419: PUSH
7420: LD_EXP 37
7424: PUSH
7425: LD_VAR 0 4
7429: ARRAY
7430: IN
7431: IFFALSE 7445
// begin side := i ;
7433: LD_ADDR_VAR 0 3
7437: PUSH
7438: LD_VAR 0 4
7442: ST_TO_ADDR
// break ;
7443: GO 7447
// end ;
7445: GO 7412
7447: POP
7448: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7449: LD_ADDR_EXP 37
7453: PUSH
7454: LD_EXP 37
7458: PPUSH
7459: LD_VAR 0 3
7463: PPUSH
7464: LD_EXP 37
7468: PUSH
7469: LD_VAR 0 3
7473: ARRAY
7474: PUSH
7475: LD_VAR 0 1
7479: DIFF
7480: PPUSH
7481: CALL_OW 1
7485: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7486: LD_ADDR_EXP 34
7490: PUSH
7491: LD_EXP 34
7495: PUSH
7496: LD_INT 1
7498: MINUS
7499: ST_TO_ADDR
// end ; end_of_file
7500: LD_VAR 0 2
7504: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7505: LD_INT 0
7507: PPUSH
7508: PPUSH
// for un in battle_flags_id do
7509: LD_ADDR_VAR 0 2
7513: PUSH
7514: LD_EXP 28
7518: PUSH
7519: FOR_IN
7520: IFFALSE 7595
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7522: LD_VAR 0 2
7526: PPUSH
7527: LD_INT 1
7529: PUSH
7530: LD_LOC 12
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 2
7541: PUSH
7542: LD_LOC 12
7546: PUSH
7547: LD_INT 2
7549: DIV
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PUSH
7555: LD_INT 3
7557: PUSH
7558: LD_LOC 12
7562: PUSH
7563: LD_INT 5
7565: DIV
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PUSH
7571: LD_INT 20
7573: PUSH
7574: LD_LOC 12
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: PPUSH
7589: CALL_OW 423
7593: GO 7519
7595: POP
7596: POP
// end ;
7597: LD_VAR 0 1
7601: RET
// every 0 0$0.1 do var un ;
7602: GO 7604
7604: DISABLE
7605: LD_INT 0
7607: PPUSH
// begin if not def_morale_flags then
7608: LD_EXP 51
7612: NOT
7613: IFFALSE 7617
// exit ;
7615: GO 7694
// if not morale_decreasing_time then
7617: LD_EXP 11
7621: NOT
7622: IFFALSE 7626
// exit ;
7624: GO 7694
// strength = 100 ;
7626: LD_ADDR_LOC 12
7630: PUSH
7631: LD_INT 100
7633: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7634: LD_EXP 11
7638: PPUSH
7639: CALL_OW 67
// strength := strength - 1 ;
7643: LD_ADDR_LOC 12
7647: PUSH
7648: LD_LOC 12
7652: PUSH
7653: LD_INT 1
7655: MINUS
7656: ST_TO_ADDR
// Update_Flags ;
7657: CALL 7505 0 0
// until not strength ;
7661: LD_LOC 12
7665: NOT
7666: IFFALSE 7634
// for un in battle_flags_id do
7668: LD_ADDR_VAR 0 1
7672: PUSH
7673: LD_EXP 28
7677: PUSH
7678: FOR_IN
7679: IFFALSE 7692
// KillBattleFlag ( un ) ;
7681: LD_VAR 0 1
7685: PPUSH
7686: CALL_OW 419
7690: GO 7678
7692: POP
7693: POP
// end ; end_of_file
7694: PPOPN 1
7696: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7697: LD_INT 0
7699: PPUSH
7700: PPUSH
// if ( not IAmSpec ) then
7701: CALL_OW 531
7705: NOT
7706: IFFALSE 7722
// Result := Limits_Info ^  ;
7708: LD_ADDR_VAR 0 1
7712: PUSH
7713: LD_LOC 24
7717: PUSH
7718: LD_STRING 
7720: ADD
7721: ST_TO_ADDR
// for i := 1 to 8 do
7722: LD_ADDR_VAR 0 2
7726: PUSH
7727: DOUBLE
7728: LD_INT 1
7730: DEC
7731: ST_TO_ADDR
7732: LD_INT 8
7734: PUSH
7735: FOR_TO
7736: IFFALSE 7781
// if Cheaters [ i ] then
7738: LD_LOC 25
7742: PUSH
7743: LD_VAR 0 2
7747: ARRAY
7748: IFFALSE 7779
// Result := Result ^ [ #Cheater , i , i ] ;
7750: LD_ADDR_VAR 0 1
7754: PUSH
7755: LD_VAR 0 1
7759: PUSH
7760: LD_STRING #Cheater
7762: PUSH
7763: LD_VAR 0 2
7767: PUSH
7768: LD_VAR 0 2
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: LIST
7777: ADD
7778: ST_TO_ADDR
7779: GO 7735
7781: POP
7782: POP
// end ;
7783: LD_VAR 0 1
7787: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
7788: LD_INT 0
7790: PPUSH
7791: PPUSH
7792: PPUSH
7793: PPUSH
7794: PPUSH
// case Game_Type of 10 :
7795: LD_EXP 41
7799: PUSH
7800: LD_INT 10
7802: DOUBLE
7803: EQUAL
7804: IFTRUE 7808
7806: GO 7819
7808: POP
// def_game_rules := 1 ; 11 :
7809: LD_ADDR_EXP 42
7813: PUSH
7814: LD_INT 1
7816: ST_TO_ADDR
7817: GO 7839
7819: LD_INT 11
7821: DOUBLE
7822: EQUAL
7823: IFTRUE 7827
7825: GO 7838
7827: POP
// def_game_rules := 3 ; end ;
7828: LD_ADDR_EXP 42
7832: PUSH
7833: LD_INT 3
7835: ST_TO_ADDR
7836: GO 7839
7838: POP
// case def_game_rules of 0 :
7839: LD_EXP 42
7843: PUSH
7844: LD_INT 0
7846: DOUBLE
7847: EQUAL
7848: IFTRUE 7852
7850: GO 7857
7852: POP
// exit ; 1 :
7853: GO 9915
7855: GO 9815
7857: LD_INT 1
7859: DOUBLE
7860: EQUAL
7861: IFTRUE 7865
7863: GO 8081
7865: POP
// begin def_base_level := 2 ;
7866: LD_ADDR_EXP 43
7870: PUSH
7871: LD_INT 2
7873: ST_TO_ADDR
// def_amount_of_people := 2 ;
7874: LD_ADDR_EXP 44
7878: PUSH
7879: LD_INT 2
7881: ST_TO_ADDR
// def_skill_level := 1 ;
7882: LD_ADDR_EXP 45
7886: PUSH
7887: LD_INT 1
7889: ST_TO_ADDR
// def_starting_resources := 2 ;
7890: LD_ADDR_EXP 46
7894: PUSH
7895: LD_INT 2
7897: ST_TO_ADDR
// def_shipments_density := 1 ;
7898: LD_ADDR_EXP 47
7902: PUSH
7903: LD_INT 1
7905: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7906: LD_ADDR_EXP 48
7910: PUSH
7911: LD_INT 0
7913: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7914: LD_ADDR_EXP 49
7918: PUSH
7919: LD_INT 1
7921: ST_TO_ADDR
// def_shared_vision := 1 ;
7922: LD_ADDR_EXP 50
7926: PUSH
7927: LD_INT 1
7929: ST_TO_ADDR
// def_morale_flags := 3 ;
7930: LD_ADDR_EXP 51
7934: PUSH
7935: LD_INT 3
7937: ST_TO_ADDR
// def_siberite_detection := 1 ;
7938: LD_ADDR_EXP 52
7942: PUSH
7943: LD_INT 1
7945: ST_TO_ADDR
// def_people_respawning := 1 ;
7946: LD_ADDR_EXP 53
7950: PUSH
7951: LD_INT 1
7953: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
7954: LD_ADDR_EXP 54
7958: PUSH
7959: LD_INT 1
7961: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7962: LD_ADDR_EXP 55
7966: PUSH
7967: LD_INT 0
7969: ST_TO_ADDR
// def_builduptime := 2 ;
7970: LD_ADDR_EXP 56
7974: PUSH
7975: LD_INT 2
7977: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
7978: LD_ADDR_VAR 0 2
7982: PUSH
7983: EMPTY
7984: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7985: LD_ADDR_VAR 0 3
7989: PUSH
7990: EMPTY
7991: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7992: LD_ADDR_LOC 19
7996: PUSH
7997: EMPTY
7998: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7999: LD_ADDR_LOC 20
8003: PUSH
8004: EMPTY
8005: ST_TO_ADDR
// Banned_Controls := [ ] ;
8006: LD_ADDR_LOC 21
8010: PUSH
8011: EMPTY
8012: ST_TO_ADDR
// Banned_Engines := [ ] ;
8013: LD_ADDR_LOC 22
8017: PUSH
8018: EMPTY
8019: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8020: LD_ADDR_LOC 17
8024: PUSH
8025: LD_INT 37
8027: PUSH
8028: EMPTY
8029: LIST
8030: PUSH
8031: LD_INT 4
8033: PUSH
8034: LD_INT 5
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PUSH
8041: LD_INT 31
8043: PUSH
8044: LD_INT 32
8046: PUSH
8047: LD_INT 33
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: LIST
8059: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
8060: LD_ADDR_LOC 18
8064: PUSH
8065: LD_INT 2
8067: PUSH
8068: LD_INT 2
8070: PUSH
8071: LD_INT 4
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: LIST
8078: ST_TO_ADDR
// end ; 2 :
8079: GO 9815
8081: LD_INT 2
8083: DOUBLE
8084: EQUAL
8085: IFTRUE 8089
8087: GO 8298
8089: POP
// begin def_base_level := 1 ;
8090: LD_ADDR_EXP 43
8094: PUSH
8095: LD_INT 1
8097: ST_TO_ADDR
// def_amount_of_people := 2 ;
8098: LD_ADDR_EXP 44
8102: PUSH
8103: LD_INT 2
8105: ST_TO_ADDR
// def_skill_level := 3 ;
8106: LD_ADDR_EXP 45
8110: PUSH
8111: LD_INT 3
8113: ST_TO_ADDR
// def_starting_resources := 3 ;
8114: LD_ADDR_EXP 46
8118: PUSH
8119: LD_INT 3
8121: ST_TO_ADDR
// def_shipments_density := 2 ;
8122: LD_ADDR_EXP 47
8126: PUSH
8127: LD_INT 2
8129: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8130: LD_ADDR_EXP 48
8134: PUSH
8135: LD_INT 1
8137: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8138: LD_ADDR_EXP 49
8142: PUSH
8143: LD_INT 2
8145: ST_TO_ADDR
// def_shared_vision := 1 ;
8146: LD_ADDR_EXP 50
8150: PUSH
8151: LD_INT 1
8153: ST_TO_ADDR
// def_morale_flags := 0 ;
8154: LD_ADDR_EXP 51
8158: PUSH
8159: LD_INT 0
8161: ST_TO_ADDR
// def_siberite_detection := 1 ;
8162: LD_ADDR_EXP 52
8166: PUSH
8167: LD_INT 1
8169: ST_TO_ADDR
// def_people_respawning := 0 ;
8170: LD_ADDR_EXP 53
8174: PUSH
8175: LD_INT 0
8177: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8178: LD_ADDR_EXP 54
8182: PUSH
8183: LD_INT 0
8185: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8186: LD_ADDR_EXP 55
8190: PUSH
8191: LD_INT 0
8193: ST_TO_ADDR
// def_builduptime := 2 ;
8194: LD_ADDR_EXP 56
8198: PUSH
8199: LD_INT 2
8201: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8202: LD_ADDR_VAR 0 2
8206: PUSH
8207: LD_INT 1
8209: PUSH
8210: EMPTY
8211: LIST
8212: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8213: LD_ADDR_VAR 0 3
8217: PUSH
8218: EMPTY
8219: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8220: LD_ADDR_LOC 19
8224: PUSH
8225: EMPTY
8226: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8227: LD_ADDR_LOC 20
8231: PUSH
8232: EMPTY
8233: ST_TO_ADDR
// Banned_Controls := [ ] ;
8234: LD_ADDR_LOC 21
8238: PUSH
8239: EMPTY
8240: ST_TO_ADDR
// Banned_Engines := [ ] ;
8241: LD_ADDR_LOC 22
8245: PUSH
8246: EMPTY
8247: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8248: LD_ADDR_LOC 17
8252: PUSH
8253: LD_INT 4
8255: PUSH
8256: LD_INT 5
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: PUSH
8263: LD_INT 31
8265: PUSH
8266: LD_INT 32
8268: PUSH
8269: LD_INT 33
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: LIST
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
8281: LD_ADDR_LOC 18
8285: PUSH
8286: LD_INT 1
8288: PUSH
8289: LD_INT 2
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: ST_TO_ADDR
// end ; 3 :
8296: GO 9815
8298: LD_INT 3
8300: DOUBLE
8301: EQUAL
8302: IFTRUE 8306
8304: GO 8549
8306: POP
// begin def_base_level := 1 ;
8307: LD_ADDR_EXP 43
8311: PUSH
8312: LD_INT 1
8314: ST_TO_ADDR
// def_amount_of_people := 2 ;
8315: LD_ADDR_EXP 44
8319: PUSH
8320: LD_INT 2
8322: ST_TO_ADDR
// def_skill_level := 3 ;
8323: LD_ADDR_EXP 45
8327: PUSH
8328: LD_INT 3
8330: ST_TO_ADDR
// def_starting_resources := 3 ;
8331: LD_ADDR_EXP 46
8335: PUSH
8336: LD_INT 3
8338: ST_TO_ADDR
// def_shipments_density := 1 ;
8339: LD_ADDR_EXP 47
8343: PUSH
8344: LD_INT 1
8346: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8347: LD_ADDR_EXP 48
8351: PUSH
8352: LD_INT 0
8354: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8355: LD_ADDR_EXP 49
8359: PUSH
8360: LD_INT 1
8362: ST_TO_ADDR
// def_shared_vision := 1 ;
8363: LD_ADDR_EXP 50
8367: PUSH
8368: LD_INT 1
8370: ST_TO_ADDR
// def_morale_flags := 0 ;
8371: LD_ADDR_EXP 51
8375: PUSH
8376: LD_INT 0
8378: ST_TO_ADDR
// def_siberite_detection := 1 ;
8379: LD_ADDR_EXP 52
8383: PUSH
8384: LD_INT 1
8386: ST_TO_ADDR
// def_people_respawning := 0 ;
8387: LD_ADDR_EXP 53
8391: PUSH
8392: LD_INT 0
8394: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8395: LD_ADDR_EXP 54
8399: PUSH
8400: LD_INT 2
8402: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8403: LD_ADDR_EXP 55
8407: PUSH
8408: LD_INT 0
8410: ST_TO_ADDR
// def_builduptime := 1 ;
8411: LD_ADDR_EXP 56
8415: PUSH
8416: LD_INT 1
8418: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8419: LD_ADDR_VAR 0 2
8423: PUSH
8424: LD_INT 23
8426: PUSH
8427: EMPTY
8428: LIST
8429: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
8430: LD_ADDR_VAR 0 3
8434: PUSH
8435: LD_INT 2
8437: PUSH
8438: LD_INT 37
8440: PUSH
8441: LD_INT 32
8443: PUSH
8444: LD_INT 33
8446: PUSH
8447: LD_INT 36
8449: PUSH
8450: LD_INT 16
8452: PUSH
8453: LD_INT 23
8455: PUSH
8456: LD_INT 21
8458: PUSH
8459: LD_INT 18
8461: PUSH
8462: LD_INT 22
8464: PUSH
8465: LD_INT 20
8467: PUSH
8468: LD_INT 19
8470: PUSH
8471: LD_INT 25
8473: PUSH
8474: LD_INT 17
8476: PUSH
8477: LD_INT 24
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8497: LD_ADDR_LOC 19
8501: PUSH
8502: EMPTY
8503: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8504: LD_ADDR_LOC 20
8508: PUSH
8509: EMPTY
8510: ST_TO_ADDR
// Banned_Controls := [ ] ;
8511: LD_ADDR_LOC 21
8515: PUSH
8516: EMPTY
8517: ST_TO_ADDR
// Banned_Engines := [ ] ;
8518: LD_ADDR_LOC 22
8522: PUSH
8523: EMPTY
8524: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8525: LD_ADDR_LOC 17
8529: PUSH
8530: EMPTY
8531: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8532: LD_ADDR_LOC 18
8536: PUSH
8537: EMPTY
8538: ST_TO_ADDR
// No_Mechs := true ;
8539: LD_ADDR_EXP 57
8543: PUSH
8544: LD_INT 1
8546: ST_TO_ADDR
// end ; 4 :
8547: GO 9815
8549: LD_INT 4
8551: DOUBLE
8552: EQUAL
8553: IFTRUE 8557
8555: GO 8732
8557: POP
// begin def_base_level := 1 ;
8558: LD_ADDR_EXP 43
8562: PUSH
8563: LD_INT 1
8565: ST_TO_ADDR
// def_amount_of_people := 2 ;
8566: LD_ADDR_EXP 44
8570: PUSH
8571: LD_INT 2
8573: ST_TO_ADDR
// def_skill_level := 3 ;
8574: LD_ADDR_EXP 45
8578: PUSH
8579: LD_INT 3
8581: ST_TO_ADDR
// def_starting_resources := 3 ;
8582: LD_ADDR_EXP 46
8586: PUSH
8587: LD_INT 3
8589: ST_TO_ADDR
// def_shipments_density := 2 ;
8590: LD_ADDR_EXP 47
8594: PUSH
8595: LD_INT 2
8597: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8598: LD_ADDR_EXP 48
8602: PUSH
8603: LD_INT 1
8605: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8606: LD_ADDR_EXP 49
8610: PUSH
8611: LD_INT 2
8613: ST_TO_ADDR
// def_shared_vision := 1 ;
8614: LD_ADDR_EXP 50
8618: PUSH
8619: LD_INT 1
8621: ST_TO_ADDR
// def_morale_flags := 0 ;
8622: LD_ADDR_EXP 51
8626: PUSH
8627: LD_INT 0
8629: ST_TO_ADDR
// def_siberite_detection := 1 ;
8630: LD_ADDR_EXP 52
8634: PUSH
8635: LD_INT 1
8637: ST_TO_ADDR
// def_people_respawning := 0 ;
8638: LD_ADDR_EXP 53
8642: PUSH
8643: LD_INT 0
8645: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8646: LD_ADDR_EXP 54
8650: PUSH
8651: LD_INT 0
8653: ST_TO_ADDR
// def_siberite_bomb := 1 ;
8654: LD_ADDR_EXP 55
8658: PUSH
8659: LD_INT 1
8661: ST_TO_ADDR
// def_builduptime := 3 ;
8662: LD_ADDR_EXP 56
8666: PUSH
8667: LD_INT 3
8669: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8670: LD_ADDR_VAR 0 2
8674: PUSH
8675: LD_INT 1
8677: PUSH
8678: EMPTY
8679: LIST
8680: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8681: LD_ADDR_VAR 0 3
8685: PUSH
8686: EMPTY
8687: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8688: LD_ADDR_LOC 19
8692: PUSH
8693: EMPTY
8694: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8695: LD_ADDR_LOC 20
8699: PUSH
8700: EMPTY
8701: ST_TO_ADDR
// Banned_Controls := [ ] ;
8702: LD_ADDR_LOC 21
8706: PUSH
8707: EMPTY
8708: ST_TO_ADDR
// Banned_Engines := [ ] ;
8709: LD_ADDR_LOC 22
8713: PUSH
8714: EMPTY
8715: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8716: LD_ADDR_LOC 17
8720: PUSH
8721: EMPTY
8722: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8723: LD_ADDR_LOC 18
8727: PUSH
8728: EMPTY
8729: ST_TO_ADDR
// end ; 5 :
8730: GO 9815
8732: LD_INT 5
8734: DOUBLE
8735: EQUAL
8736: IFTRUE 8740
8738: GO 8989
8740: POP
// begin def_base_level := 0 ;
8741: LD_ADDR_EXP 43
8745: PUSH
8746: LD_INT 0
8748: ST_TO_ADDR
// def_amount_of_people := 0 ;
8749: LD_ADDR_EXP 44
8753: PUSH
8754: LD_INT 0
8756: ST_TO_ADDR
// def_skill_level := 0 ;
8757: LD_ADDR_EXP 45
8761: PUSH
8762: LD_INT 0
8764: ST_TO_ADDR
// def_starting_resources := 0 ;
8765: LD_ADDR_EXP 46
8769: PUSH
8770: LD_INT 0
8772: ST_TO_ADDR
// def_shipments_density := 0 ;
8773: LD_ADDR_EXP 47
8777: PUSH
8778: LD_INT 0
8780: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8781: LD_ADDR_EXP 48
8785: PUSH
8786: LD_INT 0
8788: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8789: LD_ADDR_EXP 49
8793: PUSH
8794: LD_INT 0
8796: ST_TO_ADDR
// def_shared_vision := 1 ;
8797: LD_ADDR_EXP 50
8801: PUSH
8802: LD_INT 1
8804: ST_TO_ADDR
// def_morale_flags := 0 ;
8805: LD_ADDR_EXP 51
8809: PUSH
8810: LD_INT 0
8812: ST_TO_ADDR
// def_siberite_detection := 0 ;
8813: LD_ADDR_EXP 52
8817: PUSH
8818: LD_INT 0
8820: ST_TO_ADDR
// def_people_respawning := 1 ;
8821: LD_ADDR_EXP 53
8825: PUSH
8826: LD_INT 1
8828: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8829: LD_ADDR_EXP 54
8833: PUSH
8834: LD_INT 1
8836: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8837: LD_ADDR_EXP 55
8841: PUSH
8842: LD_INT 0
8844: ST_TO_ADDR
// def_builduptime := 0 ;
8845: LD_ADDR_EXP 56
8849: PUSH
8850: LD_INT 0
8852: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
8853: LD_ADDR_VAR 0 2
8857: PUSH
8858: LD_INT 10
8860: PUSH
8861: LD_INT 3
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
8868: LD_ADDR_VAR 0 3
8872: PUSH
8873: LD_INT 12
8875: PUSH
8876: LD_INT 11
8878: PUSH
8879: LD_INT 14
8881: PUSH
8882: LD_INT 13
8884: PUSH
8885: LD_INT 5
8887: PUSH
8888: LD_INT 24
8890: PUSH
8891: LD_INT 21
8893: PUSH
8894: LD_INT 33
8896: PUSH
8897: LD_INT 36
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
8911: LD_ADDR_LOC 19
8915: PUSH
8916: LD_INT 31
8918: PUSH
8919: EMPTY
8920: LIST
8921: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8922: LD_ADDR_LOC 20
8926: PUSH
8927: EMPTY
8928: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
8929: LD_ADDR_LOC 21
8933: PUSH
8934: LD_INT 2
8936: PUSH
8937: EMPTY
8938: LIST
8939: ST_TO_ADDR
// Banned_Engines := [ ] ;
8940: LD_ADDR_LOC 22
8944: PUSH
8945: EMPTY
8946: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
8947: LD_ADDR_LOC 17
8951: PUSH
8952: LD_INT 4
8954: PUSH
8955: EMPTY
8956: LIST
8957: PUSH
8958: LD_INT 31
8960: PUSH
8961: LD_INT 32
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
8972: LD_ADDR_LOC 18
8976: PUSH
8977: LD_INT 1
8979: PUSH
8980: LD_INT 1
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: ST_TO_ADDR
// end ; 6 :
8987: GO 9815
8989: LD_INT 6
8991: DOUBLE
8992: EQUAL
8993: IFTRUE 8997
8995: GO 9200
8997: POP
// begin def_base_level := 1 ;
8998: LD_ADDR_EXP 43
9002: PUSH
9003: LD_INT 1
9005: ST_TO_ADDR
// def_amount_of_people := 2 ;
9006: LD_ADDR_EXP 44
9010: PUSH
9011: LD_INT 2
9013: ST_TO_ADDR
// def_skill_level := 3 ;
9014: LD_ADDR_EXP 45
9018: PUSH
9019: LD_INT 3
9021: ST_TO_ADDR
// def_starting_resources := 3 ;
9022: LD_ADDR_EXP 46
9026: PUSH
9027: LD_INT 3
9029: ST_TO_ADDR
// def_shipments_density := 1 ;
9030: LD_ADDR_EXP 47
9034: PUSH
9035: LD_INT 1
9037: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9038: LD_ADDR_EXP 48
9042: PUSH
9043: LD_INT 0
9045: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9046: LD_ADDR_EXP 49
9050: PUSH
9051: LD_INT 1
9053: ST_TO_ADDR
// def_shared_vision := 1 ;
9054: LD_ADDR_EXP 50
9058: PUSH
9059: LD_INT 1
9061: ST_TO_ADDR
// def_morale_flags := 0 ;
9062: LD_ADDR_EXP 51
9066: PUSH
9067: LD_INT 0
9069: ST_TO_ADDR
// def_siberite_detection := 1 ;
9070: LD_ADDR_EXP 52
9074: PUSH
9075: LD_INT 1
9077: ST_TO_ADDR
// def_people_respawning := 2 ;
9078: LD_ADDR_EXP 53
9082: PUSH
9083: LD_INT 2
9085: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9086: LD_ADDR_EXP 54
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9094: LD_ADDR_EXP 55
9098: PUSH
9099: LD_INT 0
9101: ST_TO_ADDR
// def_builduptime := 1 ;
9102: LD_ADDR_EXP 56
9106: PUSH
9107: LD_INT 1
9109: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9110: LD_ADDR_VAR 0 2
9114: PUSH
9115: LD_INT 23
9117: PUSH
9118: EMPTY
9119: LIST
9120: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
9121: LD_ADDR_VAR 0 3
9125: PUSH
9126: LD_INT 2
9128: PUSH
9129: LD_INT 37
9131: PUSH
9132: LD_INT 31
9134: PUSH
9135: LD_INT 32
9137: PUSH
9138: LD_INT 33
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9148: LD_ADDR_LOC 19
9152: PUSH
9153: EMPTY
9154: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9155: LD_ADDR_LOC 20
9159: PUSH
9160: EMPTY
9161: ST_TO_ADDR
// Banned_Controls := [ ] ;
9162: LD_ADDR_LOC 21
9166: PUSH
9167: EMPTY
9168: ST_TO_ADDR
// Banned_Engines := [ ] ;
9169: LD_ADDR_LOC 22
9173: PUSH
9174: EMPTY
9175: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9176: LD_ADDR_LOC 17
9180: PUSH
9181: EMPTY
9182: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9183: LD_ADDR_LOC 18
9187: PUSH
9188: EMPTY
9189: ST_TO_ADDR
// No_Mechs := true ;
9190: LD_ADDR_EXP 57
9194: PUSH
9195: LD_INT 1
9197: ST_TO_ADDR
// end ; 7 :
9198: GO 9815
9200: LD_INT 7
9202: DOUBLE
9203: EQUAL
9204: IFTRUE 9208
9206: GO 9406
9208: POP
// begin def_base_level := 1 ;
9209: LD_ADDR_EXP 43
9213: PUSH
9214: LD_INT 1
9216: ST_TO_ADDR
// def_amount_of_people := 2 ;
9217: LD_ADDR_EXP 44
9221: PUSH
9222: LD_INT 2
9224: ST_TO_ADDR
// def_skill_level := 3 ;
9225: LD_ADDR_EXP 45
9229: PUSH
9230: LD_INT 3
9232: ST_TO_ADDR
// def_starting_resources := 3 ;
9233: LD_ADDR_EXP 46
9237: PUSH
9238: LD_INT 3
9240: ST_TO_ADDR
// def_shipments_density := 1 ;
9241: LD_ADDR_EXP 47
9245: PUSH
9246: LD_INT 1
9248: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9249: LD_ADDR_EXP 48
9253: PUSH
9254: LD_INT 1
9256: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9257: LD_ADDR_EXP 49
9261: PUSH
9262: LD_INT 2
9264: ST_TO_ADDR
// def_shared_vision := 1 ;
9265: LD_ADDR_EXP 50
9269: PUSH
9270: LD_INT 1
9272: ST_TO_ADDR
// def_morale_flags := 0 ;
9273: LD_ADDR_EXP 51
9277: PUSH
9278: LD_INT 0
9280: ST_TO_ADDR
// def_siberite_detection := 1 ;
9281: LD_ADDR_EXP 52
9285: PUSH
9286: LD_INT 1
9288: ST_TO_ADDR
// def_people_respawning := 0 ;
9289: LD_ADDR_EXP 53
9293: PUSH
9294: LD_INT 0
9296: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9297: LD_ADDR_EXP 54
9301: PUSH
9302: LD_INT 1
9304: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9305: LD_ADDR_EXP 55
9309: PUSH
9310: LD_INT 0
9312: ST_TO_ADDR
// def_builduptime := 3 ;
9313: LD_ADDR_EXP 56
9317: PUSH
9318: LD_INT 3
9320: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9321: LD_ADDR_VAR 0 2
9325: PUSH
9326: LD_INT 23
9328: PUSH
9329: EMPTY
9330: LIST
9331: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
9332: LD_ADDR_VAR 0 3
9336: PUSH
9337: LD_INT 37
9339: PUSH
9340: EMPTY
9341: LIST
9342: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9343: LD_ADDR_LOC 19
9347: PUSH
9348: EMPTY
9349: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9350: LD_ADDR_LOC 20
9354: PUSH
9355: EMPTY
9356: ST_TO_ADDR
// Banned_Controls := [ ] ;
9357: LD_ADDR_LOC 21
9361: PUSH
9362: EMPTY
9363: ST_TO_ADDR
// Banned_Engines := [ ] ;
9364: LD_ADDR_LOC 22
9368: PUSH
9369: EMPTY
9370: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9371: LD_ADDR_LOC 17
9375: PUSH
9376: LD_INT 31
9378: PUSH
9379: LD_INT 32
9381: PUSH
9382: LD_INT 33
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: LIST
9389: PUSH
9390: EMPTY
9391: LIST
9392: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
9393: LD_ADDR_LOC 18
9397: PUSH
9398: LD_INT 10
9400: PUSH
9401: EMPTY
9402: LIST
9403: ST_TO_ADDR
// end ; 8 :
9404: GO 9815
9406: LD_INT 8
9408: DOUBLE
9409: EQUAL
9410: IFTRUE 9414
9412: GO 9814
9414: POP
// begin def_base_level := 0 ;
9415: LD_ADDR_EXP 43
9419: PUSH
9420: LD_INT 0
9422: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
9423: LD_ADDR_EXP 44
9427: PUSH
9428: LD_INT 0
9430: PPUSH
9431: LD_INT 1
9433: PPUSH
9434: CALL_OW 12
9438: ST_TO_ADDR
// def_skill_level := 0 ;
9439: LD_ADDR_EXP 45
9443: PUSH
9444: LD_INT 0
9446: ST_TO_ADDR
// def_starting_resources := 2 ;
9447: LD_ADDR_EXP 46
9451: PUSH
9452: LD_INT 2
9454: ST_TO_ADDR
// def_shipments_density := 1 ;
9455: LD_ADDR_EXP 47
9459: PUSH
9460: LD_INT 1
9462: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9463: LD_ADDR_EXP 48
9467: PUSH
9468: LD_INT 0
9470: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9471: LD_ADDR_EXP 49
9475: PUSH
9476: LD_INT 0
9478: ST_TO_ADDR
// def_shared_vision := 1 ;
9479: LD_ADDR_EXP 50
9483: PUSH
9484: LD_INT 1
9486: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
9487: LD_ADDR_EXP 51
9491: PUSH
9492: LD_INT 0
9494: PPUSH
9495: LD_INT 2
9497: PPUSH
9498: CALL_OW 12
9502: ST_TO_ADDR
// def_siberite_detection := 0 ;
9503: LD_ADDR_EXP 52
9507: PUSH
9508: LD_INT 0
9510: ST_TO_ADDR
// def_people_respawning := 0 ;
9511: LD_ADDR_EXP 53
9515: PUSH
9516: LD_INT 0
9518: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9519: LD_ADDR_EXP 54
9523: PUSH
9524: LD_INT 2
9526: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9527: LD_ADDR_EXP 55
9531: PUSH
9532: LD_INT 0
9534: ST_TO_ADDR
// def_builduptime := 0 ;
9535: LD_ADDR_EXP 56
9539: PUSH
9540: LD_INT 0
9542: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
9543: LD_ADDR_VAR 0 2
9547: PUSH
9548: LD_INT 23
9550: PUSH
9551: LD_INT 20
9553: PUSH
9554: LD_INT 40
9556: PUSH
9557: LD_INT 47
9559: PUSH
9560: LD_INT 46
9562: PUSH
9563: LD_INT 39
9565: PUSH
9566: LD_INT 71
9568: PUSH
9569: LD_INT 34
9571: PUSH
9572: LD_INT 41
9574: PUSH
9575: LD_INT 44
9577: PUSH
9578: LD_INT 17
9580: PUSH
9581: LD_INT 16
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
9598: LD_ADDR_VAR 0 3
9602: PUSH
9603: LD_INT 37
9605: PUSH
9606: LD_INT 5
9608: PUSH
9609: LD_INT 13
9611: PUSH
9612: LD_INT 34
9614: PUSH
9615: LD_INT 12
9617: PUSH
9618: LD_INT 15
9620: PUSH
9621: LD_INT 11
9623: PUSH
9624: LD_INT 14
9626: PUSH
9627: LD_INT 29
9629: PUSH
9630: LD_INT 30
9632: PUSH
9633: LD_INT 28
9635: PUSH
9636: LD_INT 24
9638: PUSH
9639: LD_INT 25
9641: PUSH
9642: LD_INT 20
9644: PUSH
9645: LD_INT 21
9647: PUSH
9648: LD_INT 22
9650: PUSH
9651: LD_INT 36
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9673: LD_ADDR_LOC 19
9677: PUSH
9678: EMPTY
9679: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9680: LD_ADDR_LOC 20
9684: PUSH
9685: LD_INT 14
9687: PUSH
9688: EMPTY
9689: LIST
9690: ST_TO_ADDR
// Banned_Controls := [ ] ;
9691: LD_ADDR_LOC 21
9695: PUSH
9696: EMPTY
9697: ST_TO_ADDR
// Banned_Engines := [ ] ;
9698: LD_ADDR_LOC 22
9702: PUSH
9703: EMPTY
9704: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9705: LD_ADDR_LOC 17
9709: PUSH
9710: LD_INT 31
9712: PUSH
9713: LD_INT 32
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PUSH
9720: LD_INT 4
9722: PUSH
9723: EMPTY
9724: LIST
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9730: LD_ADDR_LOC 18
9734: PUSH
9735: LD_INT 2
9737: PUSH
9738: LD_INT 1
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: ST_TO_ADDR
// for i := 1 to 8 do
9745: LD_ADDR_VAR 0 4
9749: PUSH
9750: DOUBLE
9751: LD_INT 1
9753: DEC
9754: ST_TO_ADDR
9755: LD_INT 8
9757: PUSH
9758: FOR_TO
9759: IFFALSE 9810
// if ( Side_Nations [ i ] = 3 ) then
9761: LD_EXP 22
9765: PUSH
9766: LD_VAR 0 4
9770: ARRAY
9771: PUSH
9772: LD_INT 3
9774: EQUAL
9775: IFFALSE 9808
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
9777: LD_ADDR_EXP 22
9781: PUSH
9782: LD_EXP 22
9786: PPUSH
9787: LD_VAR 0 4
9791: PPUSH
9792: LD_INT 1
9794: PPUSH
9795: LD_INT 2
9797: PPUSH
9798: CALL_OW 12
9802: PPUSH
9803: CALL_OW 1
9807: ST_TO_ADDR
9808: GO 9758
9810: POP
9811: POP
// end ; end ;
9812: GO 9815
9814: POP
// for i := 1 to 8 do
9815: LD_ADDR_VAR 0 4
9819: PUSH
9820: DOUBLE
9821: LD_INT 1
9823: DEC
9824: ST_TO_ADDR
9825: LD_INT 8
9827: PUSH
9828: FOR_TO
9829: IFFALSE 9913
// if Side_Positions [ i ] then
9831: LD_EXP 21
9835: PUSH
9836: LD_VAR 0 4
9840: ARRAY
9841: IFFALSE 9911
// begin for j in Unavailable_Techs do
9843: LD_ADDR_VAR 0 5
9847: PUSH
9848: LD_VAR 0 2
9852: PUSH
9853: FOR_IN
9854: IFFALSE 9875
// SetTech ( j , i , 0 ) ;
9856: LD_VAR 0 5
9860: PPUSH
9861: LD_VAR 0 4
9865: PPUSH
9866: LD_INT 0
9868: PPUSH
9869: CALL_OW 322
9873: GO 9853
9875: POP
9876: POP
// for j in Unavailable_Builds do
9877: LD_ADDR_VAR 0 5
9881: PUSH
9882: LD_VAR 0 3
9886: PUSH
9887: FOR_IN
9888: IFFALSE 9909
// SetRestrict ( j , i , 0 ) ;
9890: LD_VAR 0 5
9894: PPUSH
9895: LD_VAR 0 4
9899: PPUSH
9900: LD_INT 0
9902: PPUSH
9903: CALL_OW 324
9907: GO 9887
9909: POP
9910: POP
// end ;
9911: GO 9828
9913: POP
9914: POP
// end ;
9915: LD_VAR 0 1
9919: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
9920: LD_INT 0
9922: PPUSH
9923: PPUSH
9924: PPUSH
9925: PPUSH
9926: PPUSH
9927: PPUSH
9928: PPUSH
// for i := 1 to Restricted_Builds do
9929: LD_ADDR_VAR 0 2
9933: PUSH
9934: DOUBLE
9935: LD_INT 1
9937: DEC
9938: ST_TO_ADDR
9939: LD_LOC 17
9943: PUSH
9944: FOR_TO
9945: IFFALSE 10255
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
9947: LD_LOC 17
9951: PUSH
9952: LD_VAR 0 2
9956: ARRAY
9957: PUSH
9958: LD_INT 1
9960: ARRAY
9961: PUSH
9962: LD_INT 31
9964: DOUBLE
9965: EQUAL
9966: IFTRUE 9982
9968: LD_INT 32
9970: DOUBLE
9971: EQUAL
9972: IFTRUE 9982
9974: LD_INT 33
9976: DOUBLE
9977: EQUAL
9978: IFTRUE 9982
9980: GO 9993
9982: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
9983: LD_ADDR_VAR 0 6
9987: PUSH
9988: LD_STRING #Turrets
9990: ST_TO_ADDR
9991: GO 10038
9993: LD_INT 4
9995: DOUBLE
9996: EQUAL
9997: IFTRUE 10007
9999: LD_INT 5
10001: DOUBLE
10002: EQUAL
10003: IFTRUE 10007
10005: GO 10018
10007: POP
// btype := #Armouries ; b_Behemoth :
10008: LD_ADDR_VAR 0 6
10012: PUSH
10013: LD_STRING #Armouries
10015: ST_TO_ADDR
10016: GO 10038
10018: LD_INT 37
10020: DOUBLE
10021: EQUAL
10022: IFTRUE 10026
10024: GO 10037
10026: POP
// btype := #Behemoths ; end ;
10027: LD_ADDR_VAR 0 6
10031: PUSH
10032: LD_STRING #Behemoths
10034: ST_TO_ADDR
10035: GO 10038
10037: POP
// list := [ ] ;
10038: LD_ADDR_VAR 0 7
10042: PUSH
10043: EMPTY
10044: ST_TO_ADDR
// for j := 1 to 8 do
10045: LD_ADDR_VAR 0 3
10049: PUSH
10050: DOUBLE
10051: LD_INT 1
10053: DEC
10054: ST_TO_ADDR
10055: LD_INT 8
10057: PUSH
10058: FOR_TO
10059: IFFALSE 10152
// if Side_Positions [ j ] then
10061: LD_EXP 21
10065: PUSH
10066: LD_VAR 0 3
10070: ARRAY
10071: IFFALSE 10150
// begin amount := 0 ;
10073: LD_ADDR_VAR 0 5
10077: PUSH
10078: LD_INT 0
10080: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
10081: LD_ADDR_VAR 0 4
10085: PUSH
10086: LD_LOC 17
10090: PUSH
10091: LD_VAR 0 2
10095: ARRAY
10096: PUSH
10097: FOR_IN
10098: IFFALSE 10146
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
10100: LD_ADDR_VAR 0 5
10104: PUSH
10105: LD_VAR 0 5
10109: PUSH
10110: LD_INT 22
10112: PUSH
10113: LD_VAR 0 3
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: PUSH
10122: LD_INT 30
10124: PUSH
10125: LD_VAR 0 4
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: PPUSH
10138: CALL_OW 69
10142: PLUS
10143: ST_TO_ADDR
10144: GO 10097
10146: POP
10147: POP
// break ;
10148: GO 10152
// end ;
10150: GO 10058
10152: POP
10153: POP
// list := [ ] ;
10154: LD_ADDR_VAR 0 7
10158: PUSH
10159: EMPTY
10160: ST_TO_ADDR
// for j := 1 to 8 do
10161: LD_ADDR_VAR 0 3
10165: PUSH
10166: DOUBLE
10167: LD_INT 1
10169: DEC
10170: ST_TO_ADDR
10171: LD_INT 8
10173: PUSH
10174: FOR_TO
10175: IFFALSE 10195
// list := list ^ amount ;
10177: LD_ADDR_VAR 0 7
10181: PUSH
10182: LD_VAR 0 7
10186: PUSH
10187: LD_VAR 0 5
10191: ADD
10192: ST_TO_ADDR
10193: GO 10174
10195: POP
10196: POP
// Already_Built := Already_Built ^ [ list ] ;
10197: LD_ADDR_LOC 23
10201: PUSH
10202: LD_LOC 23
10206: PUSH
10207: LD_VAR 0 7
10211: PUSH
10212: EMPTY
10213: LIST
10214: ADD
10215: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
10216: LD_ADDR_LOC 24
10220: PUSH
10221: LD_LOC 24
10225: PUSH
10226: LD_VAR 0 6
10230: PUSH
10231: LD_VAR 0 5
10235: PUSH
10236: LD_LOC 18
10240: PUSH
10241: LD_VAR 0 2
10245: ARRAY
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: LIST
10251: ADD
10252: ST_TO_ADDR
// end ;
10253: GO 9944
10255: POP
10256: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10257: LD_ADDR_LOC 25
10261: PUSH
10262: LD_INT 0
10264: PUSH
10265: LD_INT 0
10267: PUSH
10268: LD_INT 0
10270: PUSH
10271: LD_INT 0
10273: PUSH
10274: LD_INT 0
10276: PUSH
10277: LD_INT 0
10279: PUSH
10280: LD_INT 0
10282: PUSH
10283: LD_INT 0
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: ST_TO_ADDR
// if Limits_Info then
10296: LD_LOC 24
10300: IFFALSE 10316
// Limits_Info := #Limits ^ Limits_Info ;
10302: LD_ADDR_LOC 24
10306: PUSH
10307: LD_STRING #Limits
10309: PUSH
10310: LD_LOC 24
10314: ADD
10315: ST_TO_ADDR
// end ;
10316: LD_VAR 0 1
10320: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
10321: LD_INT 0
10323: PPUSH
10324: PPUSH
10325: PPUSH
10326: PPUSH
// for i := 1 to Restricted_Builds do
10327: LD_ADDR_VAR 0 7
10331: PUSH
10332: DOUBLE
10333: LD_INT 1
10335: DEC
10336: ST_TO_ADDR
10337: LD_LOC 17
10341: PUSH
10342: FOR_TO
10343: IFFALSE 10766
// if BType in Restricted_Builds [ i ] then
10345: LD_VAR 0 2
10349: PUSH
10350: LD_LOC 17
10354: PUSH
10355: LD_VAR 0 7
10359: ARRAY
10360: IN
10361: IFFALSE 10764
// begin if old_side then
10363: LD_VAR 0 4
10367: IFFALSE 10493
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
10369: LD_LOC 23
10373: PUSH
10374: LD_VAR 0 7
10378: ARRAY
10379: PUSH
10380: LD_VAR 0 3
10384: ARRAY
10385: PUSH
10386: LD_VAR 0 5
10390: PLUS
10391: PUSH
10392: LD_LOC 18
10396: PUSH
10397: LD_VAR 0 7
10401: ARRAY
10402: GREATER
10403: IFFALSE 10429
// begin SetSide ( un , old_side ) ;
10405: LD_VAR 0 1
10409: PPUSH
10410: LD_VAR 0 4
10414: PPUSH
10415: CALL_OW 235
// count := 0 ;
10419: LD_ADDR_VAR 0 5
10423: PUSH
10424: LD_INT 0
10426: ST_TO_ADDR
// end else
10427: GO 10493
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
10429: LD_ADDR_LOC 23
10433: PUSH
10434: LD_LOC 23
10438: PPUSH
10439: LD_VAR 0 7
10443: PPUSH
10444: LD_LOC 23
10448: PUSH
10449: LD_VAR 0 7
10453: ARRAY
10454: PPUSH
10455: LD_VAR 0 4
10459: PPUSH
10460: LD_LOC 23
10464: PUSH
10465: LD_VAR 0 7
10469: ARRAY
10470: PUSH
10471: LD_VAR 0 4
10475: ARRAY
10476: PUSH
10477: LD_VAR 0 5
10481: MINUS
10482: PPUSH
10483: CALL_OW 1
10487: PPUSH
10488: CALL_OW 1
10492: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
10493: LD_ADDR_LOC 23
10497: PUSH
10498: LD_LOC 23
10502: PPUSH
10503: LD_VAR 0 7
10507: PPUSH
10508: LD_LOC 23
10512: PUSH
10513: LD_VAR 0 7
10517: ARRAY
10518: PPUSH
10519: LD_VAR 0 3
10523: PPUSH
10524: LD_LOC 23
10528: PUSH
10529: LD_VAR 0 7
10533: ARRAY
10534: PUSH
10535: LD_VAR 0 3
10539: ARRAY
10540: PUSH
10541: LD_VAR 0 5
10545: PLUS
10546: PPUSH
10547: CALL_OW 1
10551: PPUSH
10552: CALL_OW 1
10556: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
10557: LD_VAR 0 5
10561: PUSH
10562: LD_INT 0
10564: NONEQUAL
10565: PUSH
10566: LD_VAR 0 3
10570: PUSH
10571: LD_OWVAR 2
10575: EQUAL
10576: AND
10577: IFFALSE 10620
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
10579: LD_ADDR_LOC 24
10583: PUSH
10584: LD_LOC 24
10588: PPUSH
10589: LD_INT 3
10591: PUSH
10592: LD_VAR 0 7
10596: MUL
10597: PPUSH
10598: LD_LOC 23
10602: PUSH
10603: LD_VAR 0 7
10607: ARRAY
10608: PUSH
10609: LD_VAR 0 3
10613: ARRAY
10614: PPUSH
10615: CALL_OW 1
10619: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
10620: LD_LOC 23
10624: PUSH
10625: LD_VAR 0 7
10629: ARRAY
10630: PUSH
10631: LD_VAR 0 3
10635: ARRAY
10636: PUSH
10637: LD_LOC 18
10641: PUSH
10642: LD_VAR 0 7
10646: ARRAY
10647: GREATER
10648: IFFALSE 10675
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
10650: LD_ADDR_LOC 25
10654: PUSH
10655: LD_LOC 25
10659: PPUSH
10660: LD_VAR 0 3
10664: PPUSH
10665: LD_INT 1
10667: PPUSH
10668: CALL_OW 1
10672: ST_TO_ADDR
// end else
10673: GO 10762
// begin for j := 1 to Restricted_Builds do
10675: LD_ADDR_VAR 0 8
10679: PUSH
10680: DOUBLE
10681: LD_INT 1
10683: DEC
10684: ST_TO_ADDR
10685: LD_LOC 17
10689: PUSH
10690: FOR_TO
10691: IFFALSE 10735
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10693: LD_LOC 23
10697: PUSH
10698: LD_VAR 0 8
10702: ARRAY
10703: PUSH
10704: LD_VAR 0 3
10708: ARRAY
10709: PUSH
10710: LD_LOC 18
10714: PUSH
10715: LD_VAR 0 8
10719: ARRAY
10720: GREATER
10721: IFFALSE 10733
// begin Is_Cheater := true ;
10723: LD_ADDR_VAR 0 9
10727: PUSH
10728: LD_INT 1
10730: ST_TO_ADDR
// break ;
10731: GO 10735
// end ;
10733: GO 10690
10735: POP
10736: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10737: LD_ADDR_LOC 25
10741: PUSH
10742: LD_LOC 25
10746: PPUSH
10747: LD_VAR 0 3
10751: PPUSH
10752: LD_VAR 0 9
10756: PPUSH
10757: CALL_OW 1
10761: ST_TO_ADDR
// end ; break ;
10762: GO 10766
// end ;
10764: GO 10342
10766: POP
10767: POP
// end ;
10768: LD_VAR 0 6
10772: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
10773: LD_VAR 0 5
10777: PUSH
10778: LD_LOC 19
10782: IN
10783: PUSH
10784: LD_VAR 0 2
10788: PUSH
10789: LD_LOC 20
10793: IN
10794: OR
10795: PUSH
10796: LD_VAR 0 4
10800: PUSH
10801: LD_LOC 21
10805: IN
10806: OR
10807: PUSH
10808: LD_VAR 0 3
10812: PUSH
10813: LD_LOC 22
10817: IN
10818: OR
10819: IFFALSE 10830
// ComCancel ( factory ) ;
10821: LD_VAR 0 1
10825: PPUSH
10826: CALL_OW 127
// end ;
10830: PPOPN 5
10832: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
10833: LD_VAR 0 2
10837: PUSH
10838: LD_LOC 19
10842: IN
10843: IFFALSE 10854
// ComCancel ( building ) ;
10845: LD_VAR 0 1
10849: PPUSH
10850: CALL_OW 127
// end ; end_of_file
10854: PPOPN 2
10856: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
10857: LD_INT 0
10859: PPUSH
10860: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
10861: LD_ADDR_VAR 0 2
10865: PUSH
10866: LD_STRING #Multi1x1-Time
10868: PUSH
10869: LD_OWVAR 1
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: ST_TO_ADDR
// if WaitServerStrings then
10878: LD_EXP 59
10882: IFFALSE 10900
// AllStrings = AllStrings ^ WaitServerStrings ;
10884: LD_ADDR_VAR 0 2
10888: PUSH
10889: LD_VAR 0 2
10893: PUSH
10894: LD_EXP 59
10898: ADD
10899: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
10900: LD_INT 0
10902: PUSH
10903: LD_EXP 16
10907: PUSH
10908: LD_OWVAR 1
10912: MINUS
10913: LESSEQUAL
10914: IFFALSE 10945
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
10916: LD_ADDR_VAR 0 2
10920: PUSH
10921: LD_VAR 0 2
10925: PUSH
10926: LD_STRING #allowedsibbomb
10928: PUSH
10929: LD_EXP 16
10933: PUSH
10934: LD_OWVAR 1
10938: MINUS
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: ADD
10944: ST_TO_ADDR
// if ( ExtraStrings ) then
10945: LD_EXP 58
10949: IFFALSE 10971
// AllStrings := AllStrings ^  ^ ExtraStrings ;
10951: LD_ADDR_VAR 0 2
10955: PUSH
10956: LD_VAR 0 2
10960: PUSH
10961: LD_STRING 
10963: ADD
10964: PUSH
10965: LD_EXP 58
10969: ADD
10970: ST_TO_ADDR
// if ( Display_kings ) and not isSGUI then
10971: LD_EXP 60
10975: PUSH
10976: LD_OWVAR 83
10980: NOT
10981: AND
10982: IFFALSE 11000
// AllStrings = AllStrings ^ Display_kings ;
10984: LD_ADDR_VAR 0 2
10988: PUSH
10989: LD_VAR 0 2
10993: PUSH
10994: LD_EXP 60
10998: ADD
10999: ST_TO_ADDR
// if ( LimitsStrings ) then
11000: CALL 7697 0 0
11004: IFFALSE 11026
// AllStrings := AllStrings ^  ^ LimitsStrings ;
11006: LD_ADDR_VAR 0 2
11010: PUSH
11011: LD_VAR 0 2
11015: PUSH
11016: LD_STRING 
11018: ADD
11019: PUSH
11020: CALL 7697 0 0
11024: ADD
11025: ST_TO_ADDR
// Display_Strings := AllStrings ;
11026: LD_ADDR_OWVAR 47
11030: PUSH
11031: LD_VAR 0 2
11035: ST_TO_ADDR
// end ;
11036: LD_VAR 0 1
11040: RET
// every 0 0$1 do
11041: GO 11043
11043: DISABLE
// begin ShowTimer ;
11044: CALL 10857 0 0
// enable ;
11048: ENABLE
// end ; end_of_file
11049: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
11050: LD_INT 0
11052: PPUSH
11053: PPUSH
11054: PPUSH
// sharedPoints1 = [ ] ;
11055: LD_ADDR_LOC 26
11059: PUSH
11060: EMPTY
11061: ST_TO_ADDR
// sharedPoints2 = [ ] ;
11062: LD_ADDR_LOC 27
11066: PUSH
11067: EMPTY
11068: ST_TO_ADDR
// sharedPoints3 = [ ] ;
11069: LD_ADDR_LOC 28
11073: PUSH
11074: EMPTY
11075: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
11076: LD_ADDR_VAR 0 2
11080: PUSH
11081: DOUBLE
11082: LD_INT 1
11084: DEC
11085: ST_TO_ADDR
11086: LD_EXP 21
11090: PUSH
11091: LD_INT 0
11093: PLUS
11094: PUSH
11095: FOR_TO
11096: IFFALSE 11198
// begin if not Side_Positions [ i ] = 0 then
11098: LD_EXP 21
11102: PUSH
11103: LD_VAR 0 2
11107: ARRAY
11108: PUSH
11109: LD_INT 0
11111: EQUAL
11112: NOT
11113: IFFALSE 11127
// SetMultiScore ( i , 0 ) ;
11115: LD_VAR 0 2
11119: PPUSH
11120: LD_INT 0
11122: PPUSH
11123: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
11127: LD_ADDR_LOC 26
11131: PUSH
11132: LD_LOC 26
11136: PPUSH
11137: LD_VAR 0 2
11141: PPUSH
11142: LD_INT 0
11144: PPUSH
11145: CALL_OW 1
11149: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
11150: LD_ADDR_LOC 27
11154: PUSH
11155: LD_LOC 27
11159: PPUSH
11160: LD_VAR 0 2
11164: PPUSH
11165: LD_INT 0
11167: PPUSH
11168: CALL_OW 1
11172: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
11173: LD_ADDR_LOC 28
11177: PUSH
11178: LD_LOC 28
11182: PPUSH
11183: LD_VAR 0 2
11187: PPUSH
11188: LD_INT 0
11190: PPUSH
11191: CALL_OW 1
11195: ST_TO_ADDR
// end ;
11196: GO 11095
11198: POP
11199: POP
// pointGame = true ;
11200: LD_ADDR_LOC 29
11204: PUSH
11205: LD_INT 1
11207: ST_TO_ADDR
// end ;
11208: LD_VAR 0 1
11212: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
11213: LD_LOC 29
11217: IFFALSE 11628
11219: GO 11221
11221: DISABLE
11222: LD_INT 0
11224: PPUSH
11225: PPUSH
11226: PPUSH
11227: PPUSH
11228: PPUSH
11229: PPUSH
11230: PPUSH
11231: PPUSH
11232: PPUSH
11233: PPUSH
11234: PPUSH
11235: PPUSH
11236: PPUSH
// begin if isSGUI then
11237: LD_OWVAR 83
11241: IFFALSE 11628
// begin if Teams [ 1 ] then
11243: LD_EXP 19
11247: PUSH
11248: LD_INT 1
11250: ARRAY
11251: IFFALSE 11263
// red = true else
11253: LD_ADDR_VAR 0 2
11257: PUSH
11258: LD_INT 1
11260: ST_TO_ADDR
11261: GO 11271
// red = false ;
11263: LD_ADDR_VAR 0 2
11267: PUSH
11268: LD_INT 0
11270: ST_TO_ADDR
// if Teams [ 2 ] then
11271: LD_EXP 19
11275: PUSH
11276: LD_INT 2
11278: ARRAY
11279: IFFALSE 11291
// blue = true else
11281: LD_ADDR_VAR 0 3
11285: PUSH
11286: LD_INT 1
11288: ST_TO_ADDR
11289: GO 11299
// blue = false ;
11291: LD_ADDR_VAR 0 3
11295: PUSH
11296: LD_INT 0
11298: ST_TO_ADDR
// if Teams [ 3 ] then
11299: LD_EXP 19
11303: PUSH
11304: LD_INT 3
11306: ARRAY
11307: IFFALSE 11319
// yel = true else
11309: LD_ADDR_VAR 0 4
11313: PUSH
11314: LD_INT 1
11316: ST_TO_ADDR
11317: GO 11327
// yel = false ;
11319: LD_ADDR_VAR 0 4
11323: PUSH
11324: LD_INT 0
11326: ST_TO_ADDR
// if Teams [ 4 ] then
11327: LD_EXP 19
11331: PUSH
11332: LD_INT 4
11334: ARRAY
11335: IFFALSE 11347
// green = true else
11337: LD_ADDR_VAR 0 5
11341: PUSH
11342: LD_INT 1
11344: ST_TO_ADDR
11345: GO 11355
// green = false ;
11347: LD_ADDR_VAR 0 5
11351: PUSH
11352: LD_INT 0
11354: ST_TO_ADDR
// if def_public_score then
11355: LD_EXP 1
11359: IFFALSE 11371
// p = true else
11361: LD_ADDR_VAR 0 12
11365: PUSH
11366: LD_INT 1
11368: ST_TO_ADDR
11369: GO 11379
// p = false ;
11371: LD_ADDR_VAR 0 12
11375: PUSH
11376: LD_INT 0
11378: ST_TO_ADDR
// if team_game then
11379: LD_EXP 23
11383: IFFALSE 11464
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
11385: LD_ADDR_VAR 0 13
11389: PUSH
11390: LD_INT 3
11392: PUSH
11393: LD_INT 1
11395: PUSH
11396: LD_INT 2
11398: PUSH
11399: LD_INT 7
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: PUSH
11408: LD_EXP 32
11412: ARRAY
11413: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
11414: LD_ADDR_VAR 0 10
11418: PUSH
11419: LD_STRING {
11421: PUSH
11422: LD_VAR 0 3
11426: STR
11427: PUSH
11428: LD_STRING ,
11430: STR
11431: PUSH
11432: LD_VAR 0 4
11436: STR
11437: PUSH
11438: LD_STRING ,
11440: STR
11441: PUSH
11442: LD_VAR 0 2
11446: STR
11447: PUSH
11448: LD_STRING ,0,0,0,
11450: STR
11451: PUSH
11452: LD_VAR 0 5
11456: STR
11457: PUSH
11458: LD_STRING ,0}
11460: STR
11461: ST_TO_ADDR
// end else
11462: GO 11564
// begin you = your_side ;
11464: LD_ADDR_VAR 0 13
11468: PUSH
11469: LD_OWVAR 2
11473: ST_TO_ADDR
// s = { ;
11474: LD_ADDR_VAR 0 10
11478: PUSH
11479: LD_STRING {
11481: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
11482: LD_ADDR_VAR 0 1
11486: PUSH
11487: DOUBLE
11488: LD_INT 1
11490: DEC
11491: ST_TO_ADDR
11492: LD_EXP 21
11496: PUSH
11497: LD_INT 0
11499: PLUS
11500: PUSH
11501: FOR_TO
11502: IFFALSE 11548
// if side_positions [ i ] then
11504: LD_EXP 21
11508: PUSH
11509: LD_VAR 0 1
11513: ARRAY
11514: IFFALSE 11532
// s = s & 1, else
11516: LD_ADDR_VAR 0 10
11520: PUSH
11521: LD_VAR 0 10
11525: PUSH
11526: LD_STRING 1,
11528: STR
11529: ST_TO_ADDR
11530: GO 11546
// s = s & 0, ;
11532: LD_ADDR_VAR 0 10
11536: PUSH
11537: LD_VAR 0 10
11541: PUSH
11542: LD_STRING 0,
11544: STR
11545: ST_TO_ADDR
11546: GO 11501
11548: POP
11549: POP
// s = s & } ;
11550: LD_ADDR_VAR 0 10
11554: PUSH
11555: LD_VAR 0 10
11559: PUSH
11560: LD_STRING }
11562: STR
11563: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
11564: LD_STRING initScore(
11566: PUSH
11567: LD_VAR 0 10
11571: STR
11572: PUSH
11573: LD_STRING ,
11575: STR
11576: PUSH
11577: LD_VAR 0 12
11581: STR
11582: PUSH
11583: LD_STRING ,
11585: STR
11586: PUSH
11587: LD_VAR 0 13
11591: STR
11592: PUSH
11593: LD_STRING  );
11595: STR
11596: PPUSH
11597: CALL_OW 559
// if game_type = 3 then
11601: LD_EXP 41
11605: PUSH
11606: LD_INT 3
11608: EQUAL
11609: IFFALSE 11628
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
11611: LD_STRING AddScorePoints(2,2,
11613: PUSH
11614: LD_EXP 30
11618: STR
11619: PUSH
11620: LD_STRING  );
11622: STR
11623: PPUSH
11624: CALL_OW 559
// end ; end ;
11628: PPOPN 13
11630: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
11631: LD_INT 0
11633: PPUSH
11634: PPUSH
// case typ of 1 :
11635: LD_VAR 0 3
11639: PUSH
11640: LD_INT 1
11642: DOUBLE
11643: EQUAL
11644: IFTRUE 11648
11646: GO 11676
11648: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
11649: LD_ADDR_LOC 26
11653: PUSH
11654: LD_LOC 26
11658: PPUSH
11659: LD_VAR 0 1
11663: PPUSH
11664: LD_VAR 0 2
11668: PPUSH
11669: CALL_OW 1
11673: ST_TO_ADDR
11674: GO 11749
11676: LD_INT 2
11678: DOUBLE
11679: EQUAL
11680: IFTRUE 11684
11682: GO 11712
11684: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
11685: LD_ADDR_LOC 27
11689: PUSH
11690: LD_LOC 27
11694: PPUSH
11695: LD_VAR 0 1
11699: PPUSH
11700: LD_VAR 0 2
11704: PPUSH
11705: CALL_OW 1
11709: ST_TO_ADDR
11710: GO 11749
11712: LD_INT 3
11714: DOUBLE
11715: EQUAL
11716: IFTRUE 11720
11718: GO 11748
11720: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
11721: LD_ADDR_LOC 28
11725: PUSH
11726: LD_LOC 28
11730: PPUSH
11731: LD_VAR 0 1
11735: PPUSH
11736: LD_VAR 0 2
11740: PPUSH
11741: CALL_OW 1
11745: ST_TO_ADDR
11746: GO 11749
11748: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
11749: LD_ADDR_VAR 0 5
11753: PUSH
11754: LD_LOC 26
11758: PUSH
11759: LD_VAR 0 1
11763: ARRAY
11764: PUSH
11765: LD_LOC 27
11769: PUSH
11770: LD_VAR 0 1
11774: ARRAY
11775: PLUS
11776: PUSH
11777: LD_LOC 28
11781: PUSH
11782: LD_VAR 0 1
11786: ARRAY
11787: PLUS
11788: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
11789: LD_VAR 0 1
11793: PPUSH
11794: LD_VAR 0 5
11798: PPUSH
11799: CALL_OW 506
// end ; end_of_file
11803: LD_VAR 0 4
11807: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
11808: LD_INT 0
11810: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
11811: LD_VAR 0 1
11815: PPUSH
11816: CALL_OW 255
11820: PUSH
11821: LD_VAR 0 4
11825: EQUAL
11826: IFFALSE 11845
// begin SetAchievement ( ACH_RAD ) ;
11828: LD_STRING ACH_RAD
11830: PPUSH
11831: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
11835: LD_STRING ACH_NL
11837: PPUSH
11838: LD_INT 1
11840: PPUSH
11841: CALL_OW 564
// end end ;
11845: LD_VAR 0 5
11849: RET
// export function SA_Win ( side ) ; begin
11850: LD_INT 0
11852: PPUSH
// case side of 1 :
11853: LD_VAR 0 1
11857: PUSH
11858: LD_INT 1
11860: DOUBLE
11861: EQUAL
11862: IFTRUE 11866
11864: GO 11879
11866: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
11867: LD_STRING ACH_AH
11869: PPUSH
11870: LD_INT 1
11872: PPUSH
11873: CALL_OW 564
11877: GO 12042
11879: LD_INT 2
11881: DOUBLE
11882: EQUAL
11883: IFTRUE 11887
11885: GO 11900
11887: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
11888: LD_STRING ACH_E
11890: PPUSH
11891: LD_INT 1
11893: PPUSH
11894: CALL_OW 564
11898: GO 12042
11900: LD_INT 3
11902: DOUBLE
11903: EQUAL
11904: IFTRUE 11908
11906: GO 11921
11908: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
11909: LD_STRING ACH_OOL
11911: PPUSH
11912: LD_INT 1
11914: PPUSH
11915: CALL_OW 564
11919: GO 12042
11921: LD_INT 1
11923: PUSH
11924: LD_INT 2
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: DOUBLE
11931: EQUAL
11932: IFTRUE 11936
11934: GO 11961
11936: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11937: LD_STRING ACH_AH
11939: PPUSH
11940: LD_REAL  5.00000000000000E-0001
11943: PPUSH
11944: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11948: LD_STRING ACH_E
11950: PPUSH
11951: LD_REAL  5.00000000000000E-0001
11954: PPUSH
11955: CALL_OW 564
// end ; [ 2 , 3 ] :
11959: GO 12042
11961: LD_INT 2
11963: PUSH
11964: LD_INT 3
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: DOUBLE
11971: EQUAL
11972: IFTRUE 11976
11974: GO 12001
11976: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
11977: LD_STRING ACH_OOL
11979: PPUSH
11980: LD_REAL  5.00000000000000E-0001
11983: PPUSH
11984: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11988: LD_STRING ACH_E
11990: PPUSH
11991: LD_REAL  5.00000000000000E-0001
11994: PPUSH
11995: CALL_OW 564
// end ; [ 3 , 1 ] :
11999: GO 12042
12001: LD_INT 3
12003: PUSH
12004: LD_INT 1
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: DOUBLE
12011: EQUAL
12012: IFTRUE 12016
12014: GO 12041
12016: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12017: LD_STRING ACH_AH
12019: PPUSH
12020: LD_REAL  5.00000000000000E-0001
12023: PPUSH
12024: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12028: LD_STRING ACH_OOL
12030: PPUSH
12031: LD_REAL  5.00000000000000E-0001
12034: PPUSH
12035: CALL_OW 564
// end ; end ;
12039: GO 12042
12041: POP
// end ; end_of_file
12042: LD_VAR 0 2
12046: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
12047: LD_INT 0
12049: PPUSH
12050: PPUSH
// enable ( 98 ) ;
12051: LD_INT 98
12053: ENABLE_MARKED
// GameEnded = false ;
12054: LD_ADDR_LOC 31
12058: PUSH
12059: LD_INT 0
12061: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12062: LD_ADDR_LOC 30
12066: PUSH
12067: LD_INT 0
12069: PUSH
12070: LD_INT 0
12072: PUSH
12073: LD_INT 0
12075: PUSH
12076: LD_INT 0
12078: PUSH
12079: LD_INT 0
12081: PUSH
12082: LD_INT 0
12084: PUSH
12085: LD_INT 0
12087: PUSH
12088: LD_INT 0
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: ST_TO_ADDR
// unfoged = false ;
12101: LD_ADDR_LOC 32
12105: PUSH
12106: LD_INT 0
12108: ST_TO_ADDR
// defeated_specs := [ ] ;
12109: LD_ADDR_LOC 33
12113: PUSH
12114: EMPTY
12115: ST_TO_ADDR
// for i = 1 to side_positions do
12116: LD_ADDR_VAR 0 2
12120: PUSH
12121: DOUBLE
12122: LD_INT 1
12124: DEC
12125: ST_TO_ADDR
12126: LD_EXP 21
12130: PUSH
12131: FOR_TO
12132: IFFALSE 12172
// if not side_positions [ i ] then
12134: LD_EXP 21
12138: PUSH
12139: LD_VAR 0 2
12143: ARRAY
12144: NOT
12145: IFFALSE 12170
// defeated = replace ( defeated , i , true ) ;
12147: LD_ADDR_LOC 30
12151: PUSH
12152: LD_LOC 30
12156: PPUSH
12157: LD_VAR 0 2
12161: PPUSH
12162: LD_INT 1
12164: PPUSH
12165: CALL_OW 1
12169: ST_TO_ADDR
12170: GO 12131
12172: POP
12173: POP
// end ;
12174: LD_VAR 0 1
12178: RET
// function CanWinLoose ; begin
12179: LD_INT 0
12181: PPUSH
// Result := true ;
12182: LD_ADDR_VAR 0 1
12186: PUSH
12187: LD_INT 1
12189: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
12190: CALL_OW 518
12194: PUSH
12195: CALL_OW 519
12199: PUSH
12200: LD_INT 0
12202: GREATER
12203: AND
12204: IFFALSE 12214
// Result := false ;
12206: LD_ADDR_VAR 0 1
12210: PUSH
12211: LD_INT 0
12213: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12214: CALL_OW 531
12218: PUSH
12219: CALL_OW 519
12223: PUSH
12224: LD_INT 1
12226: GREATER
12227: AND
12228: IFFALSE 12238
// Result := false ;
12230: LD_ADDR_VAR 0 1
12234: PUSH
12235: LD_INT 0
12237: ST_TO_ADDR
// end ;
12238: LD_VAR 0 1
12242: RET
// export function HasPower ( i ) ; var k , h ; begin
12243: LD_INT 0
12245: PPUSH
12246: PPUSH
12247: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
12248: LD_VAR 0 1
12252: PPUSH
12253: CALL_OW 108
12257: NOT
12258: PUSH
12259: LD_EXP 20
12263: PUSH
12264: LD_VAR 0 1
12268: ARRAY
12269: NOT
12270: AND
12271: PUSH
12272: LD_OWVAR 4
12276: AND
12277: IFFALSE 12289
// begin result = false ;
12279: LD_ADDR_VAR 0 2
12283: PUSH
12284: LD_INT 0
12286: ST_TO_ADDR
// end else
12287: GO 12584
// case def_win_rules of 0 :
12289: LD_EXP 17
12293: PUSH
12294: LD_INT 0
12296: DOUBLE
12297: EQUAL
12298: IFTRUE 12302
12300: GO 12465
12302: POP
// if def_people_respawning then
12303: LD_EXP 53
12307: IFFALSE 12398
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
12309: LD_ADDR_VAR 0 2
12313: PUSH
12314: LD_INT 22
12316: PUSH
12317: LD_VAR 0 1
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PUSH
12326: LD_INT 2
12328: PUSH
12329: LD_INT 21
12331: PUSH
12332: LD_INT 1
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: PUSH
12339: LD_INT 33
12341: PUSH
12342: LD_INT 3
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: PUSH
12349: LD_INT 33
12351: PUSH
12352: LD_INT 5
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: PUSH
12359: LD_INT 30
12361: PUSH
12362: LD_INT 0
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: PUSH
12369: LD_INT 30
12371: PUSH
12372: LD_INT 1
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: PPUSH
12391: CALL_OW 69
12395: ST_TO_ADDR
12396: GO 12463
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
12398: LD_ADDR_VAR 0 2
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_VAR 0 1
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: LD_INT 2
12417: PUSH
12418: LD_INT 21
12420: PUSH
12421: LD_INT 1
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: LD_INT 33
12430: PUSH
12431: LD_INT 3
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: LD_INT 33
12440: PUSH
12441: LD_INT 5
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PPUSH
12458: CALL_OW 69
12462: ST_TO_ADDR
12463: GO 12584
12465: LD_INT 1
12467: DOUBLE
12468: EQUAL
12469: IFTRUE 12473
12471: GO 12512
12473: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
12474: LD_ADDR_VAR 0 2
12478: PUSH
12479: LD_INT 22
12481: PUSH
12482: LD_VAR 0 1
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 21
12493: PUSH
12494: LD_INT 1
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PPUSH
12505: CALL_OW 69
12509: ST_TO_ADDR
12510: GO 12584
12512: LD_INT 2
12514: DOUBLE
12515: EQUAL
12516: IFTRUE 12520
12518: GO 12583
12520: POP
// begin h = false ;
12521: LD_ADDR_VAR 0 4
12525: PUSH
12526: LD_INT 0
12528: ST_TO_ADDR
// for k in heroes [ i ] do
12529: LD_ADDR_VAR 0 3
12533: PUSH
12534: LD_EXP 33
12538: PUSH
12539: LD_VAR 0 1
12543: ARRAY
12544: PUSH
12545: FOR_IN
12546: IFFALSE 12569
// if IsLive ( k ) then
12548: LD_VAR 0 3
12552: PPUSH
12553: CALL_OW 300
12557: IFFALSE 12567
// h = true ;
12559: LD_ADDR_VAR 0 4
12563: PUSH
12564: LD_INT 1
12566: ST_TO_ADDR
12567: GO 12545
12569: POP
12570: POP
// Result := h ;
12571: LD_ADDR_VAR 0 2
12575: PUSH
12576: LD_VAR 0 4
12580: ST_TO_ADDR
// end ; end ;
12581: GO 12584
12583: POP
// end ;
12584: LD_VAR 0 2
12588: RET
// function AlliedSides ( i , j ) ; begin
12589: LD_INT 0
12591: PPUSH
// Result := false ;
12592: LD_ADDR_VAR 0 3
12596: PUSH
12597: LD_INT 0
12599: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
12600: LD_VAR 0 1
12604: PPUSH
12605: LD_VAR 0 2
12609: PPUSH
12610: CALL_OW 81
12614: PUSH
12615: LD_INT 1
12617: EQUAL
12618: PUSH
12619: LD_VAR 0 2
12623: PPUSH
12624: LD_VAR 0 1
12628: PPUSH
12629: CALL_OW 81
12633: PUSH
12634: LD_INT 1
12636: EQUAL
12637: AND
12638: PUSH
12639: LD_VAR 0 1
12643: PPUSH
12644: CALL_OW 83
12648: AND
12649: PUSH
12650: LD_VAR 0 2
12654: PPUSH
12655: CALL_OW 83
12659: AND
12660: IFFALSE 12670
// Result := true ;
12662: LD_ADDR_VAR 0 3
12666: PUSH
12667: LD_INT 1
12669: ST_TO_ADDR
// end ;
12670: LD_VAR 0 3
12674: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
12675: CALL 12179 0 0
12679: PUSH
12680: LD_LOC 31
12684: NOT
12685: AND
12686: IFFALSE 12702
12688: GO 12690
12690: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
12691: LD_ADDR_EXP 59
12695: PUSH
12696: LD_STRING #Player-Ended
12698: PUSH
12699: EMPTY
12700: LIST
12701: ST_TO_ADDR
12702: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
12703: CALL 12179 0 0
12707: PUSH
12708: LD_LOC 31
12712: AND
12713: IFFALSE 12722
12715: GO 12717
12717: DISABLE
// YouLostInMultiplayer ;
12718: CALL_OW 107
12722: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
12723: CALL 12179 0 0
12727: NOT
12728: PUSH
12729: CALL_OW 531
12733: NOT
12734: AND
12735: IFFALSE 12751
12737: GO 12739
12739: DISABLE
// WaitServerStrings = [ #server-wait ] ;
12740: LD_ADDR_EXP 59
12744: PUSH
12745: LD_STRING #server-wait
12747: PUSH
12748: EMPTY
12749: LIST
12750: ST_TO_ADDR
12751: END
// every 100 trigger IAmSpec do
12752: CALL_OW 531
12756: IFFALSE 12772
12758: GO 12760
12760: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
12761: LD_ADDR_EXP 59
12765: PUSH
12766: LD_STRING #Player-IAmSpec
12768: PUSH
12769: EMPTY
12770: LIST
12771: ST_TO_ADDR
12772: END
// every 100 trigger GameEnded and IAmSpec do
12773: LD_LOC 31
12777: PUSH
12778: CALL_OW 531
12782: AND
12783: IFFALSE 12792
12785: GO 12787
12787: DISABLE
// YouLostInMultiplayer ;
12788: CALL_OW 107
12792: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
12793: CALL 12179 0 0
12797: PUSH
12798: LD_LOC 31
12802: NOT
12803: AND
12804: IFFALSE 12820
12806: GO 12808
12808: DISABLE
// WaitServerStrings = [ $player-win ] ;
12809: LD_ADDR_EXP 59
12813: PUSH
12814: LD_STRING $player-win
12816: PUSH
12817: EMPTY
12818: LIST
12819: ST_TO_ADDR
12820: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
12821: CALL 12179 0 0
12825: PUSH
12826: LD_LOC 31
12830: AND
12831: IFFALSE 12855
12833: GO 12835
12835: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
12836: LD_EXP 22
12840: PUSH
12841: LD_OWVAR 7
12845: ARRAY
12846: PPUSH
12847: CALL 11850 0 1
// YouWinInMultiplayer ;
12851: CALL_OW 106
// end ;
12855: END
// every 100 trigger isEditor marked 401 do
12856: LD_OWVAR 84
12860: IFFALSE 12876
12862: GO 12864
12864: DISABLE
// Debug_Strings = [ You won ] ;
12865: LD_ADDR_OWVAR 48
12869: PUSH
12870: LD_STRING You won
12872: PUSH
12873: EMPTY
12874: LIST
12875: ST_TO_ADDR
12876: END
// every 100 trigger isEditor marked 400 do
12877: LD_OWVAR 84
12881: IFFALSE 12897
12883: GO 12885
12885: DISABLE
// Debug_Strings = [ You loss ] ;
12886: LD_ADDR_OWVAR 48
12890: PUSH
12891: LD_STRING You loss
12893: PUSH
12894: EMPTY
12895: LIST
12896: ST_TO_ADDR
12897: END
// every 100 marked 98 do var i , un ;
12898: GO 12900
12900: DISABLE
12901: LD_INT 0
12903: PPUSH
12904: PPUSH
// begin for i = 1 to side_positions do
12905: LD_ADDR_VAR 0 1
12909: PUSH
12910: DOUBLE
12911: LD_INT 1
12913: DEC
12914: ST_TO_ADDR
12915: LD_EXP 21
12919: PUSH
12920: FOR_TO
12921: IFFALSE 13008
// begin if side_positions [ i ] then
12923: LD_EXP 21
12927: PUSH
12928: LD_VAR 0 1
12932: ARRAY
12933: IFFALSE 13006
// if not HasPower ( i ) and not defeated [ i ] then
12935: LD_VAR 0 1
12939: PPUSH
12940: CALL 12243 0 1
12944: NOT
12945: PUSH
12946: LD_LOC 30
12950: PUSH
12951: LD_VAR 0 1
12955: ARRAY
12956: NOT
12957: AND
12958: IFFALSE 13006
// begin defeated = replace ( defeated , i , true ) ;
12960: LD_ADDR_LOC 30
12964: PUSH
12965: LD_LOC 30
12969: PPUSH
12970: LD_VAR 0 1
12974: PPUSH
12975: LD_INT 1
12977: PPUSH
12978: CALL_OW 1
12982: ST_TO_ADDR
// if i = mp_player_side then
12983: LD_VAR 0 1
12987: PUSH
12988: LD_OWVAR 7
12992: EQUAL
12993: IFFALSE 13006
// begin Multiplayer_Loose_Message ;
12995: CALL_OW 521
// SetPlayerSpectator ( ) ;
12999: CALL_OW 572
// enable ( 400 ) ;
13003: LD_INT 400
13005: ENABLE_MARKED
// end ; end ; end ;
13006: GO 12920
13008: POP
13009: POP
// DidGameEnd ;
13010: CALL 13025 0 0
// if not GameEnded then
13014: LD_LOC 31
13018: NOT
13019: IFFALSE 13022
// enable ;
13021: ENABLE
// end ;
13022: PPOPN 2
13024: END
// function DidGameEnd ; var i , k , enemy ; begin
13025: LD_INT 0
13027: PPUSH
13028: PPUSH
13029: PPUSH
13030: PPUSH
// enemy = [ ] ;
13031: LD_ADDR_VAR 0 4
13035: PUSH
13036: EMPTY
13037: ST_TO_ADDR
// for i = 1 to side_positions do
13038: LD_ADDR_VAR 0 2
13042: PUSH
13043: DOUBLE
13044: LD_INT 1
13046: DEC
13047: ST_TO_ADDR
13048: LD_EXP 21
13052: PUSH
13053: FOR_TO
13054: IFFALSE 13148
// if not defeated [ i ] then
13056: LD_LOC 30
13060: PUSH
13061: LD_VAR 0 2
13065: ARRAY
13066: NOT
13067: IFFALSE 13146
// for k = 1 to side_positions do
13069: LD_ADDR_VAR 0 3
13073: PUSH
13074: DOUBLE
13075: LD_INT 1
13077: DEC
13078: ST_TO_ADDR
13079: LD_EXP 21
13083: PUSH
13084: FOR_TO
13085: IFFALSE 13144
// if not defeated [ k ] then
13087: LD_LOC 30
13091: PUSH
13092: LD_VAR 0 3
13096: ARRAY
13097: NOT
13098: IFFALSE 13142
// if not AlliedSides ( i , k ) then
13100: LD_VAR 0 2
13104: PPUSH
13105: LD_VAR 0 3
13109: PPUSH
13110: CALL 12589 0 2
13114: NOT
13115: IFFALSE 13142
// enemy = enemy ^ [ i , k ] ;
13117: LD_ADDR_VAR 0 4
13121: PUSH
13122: LD_VAR 0 4
13126: PUSH
13127: LD_VAR 0 2
13131: PUSH
13132: LD_VAR 0 3
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: ADD
13141: ST_TO_ADDR
13142: GO 13084
13144: POP
13145: POP
13146: GO 13053
13148: POP
13149: POP
// if not enemy then
13150: LD_VAR 0 4
13154: NOT
13155: IFFALSE 13181
// begin GameEnded = true ;
13157: LD_ADDR_LOC 31
13161: PUSH
13162: LD_INT 1
13164: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
13165: LD_LOC 30
13169: PUSH
13170: LD_OWVAR 7
13174: ARRAY
13175: NOT
13176: IFFALSE 13181
// enable ( 401 ) ;
13178: LD_INT 401
13180: ENABLE_MARKED
// end ; end ;
13181: LD_VAR 0 1
13185: RET
// function unfog ; var k , friends ; begin
13186: LD_INT 0
13188: PPUSH
13189: PPUSH
13190: PPUSH
// for k = 1 to side_positions do
13191: LD_ADDR_VAR 0 2
13195: PUSH
13196: DOUBLE
13197: LD_INT 1
13199: DEC
13200: ST_TO_ADDR
13201: LD_EXP 21
13205: PUSH
13206: FOR_TO
13207: IFFALSE 13263
// if not defeated [ k ] then
13209: LD_LOC 30
13213: PUSH
13214: LD_VAR 0 2
13218: ARRAY
13219: NOT
13220: IFFALSE 13261
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
13222: LD_OWVAR 7
13226: PPUSH
13227: LD_VAR 0 2
13231: PPUSH
13232: CALL_OW 81
13236: PUSH
13237: LD_INT 1
13239: PUSH
13240: EMPTY
13241: LIST
13242: IN
13243: IFFALSE 13261
// friends = friends ^ k ;
13245: LD_ADDR_VAR 0 3
13249: PUSH
13250: LD_VAR 0 3
13254: PUSH
13255: LD_VAR 0 2
13259: ADD
13260: ST_TO_ADDR
13261: GO 13206
13263: POP
13264: POP
// if not friends then
13265: LD_VAR 0 3
13269: NOT
13270: IFFALSE 13284
// begin SetPlayerSpectator ( ) ;
13272: CALL_OW 572
// unfoged = true ;
13276: LD_ADDR_LOC 32
13280: PUSH
13281: LD_INT 1
13283: ST_TO_ADDR
// end ; end ;
13284: LD_VAR 0 1
13288: RET
// export function MakeGameEnd ; begin
13289: LD_INT 0
13291: PPUSH
// SetPlayerSpectator ( ) ;
13292: CALL_OW 572
// unfoged = true ;
13296: LD_ADDR_LOC 32
13300: PUSH
13301: LD_INT 1
13303: ST_TO_ADDR
// wait ( 0 0$5 ) ;
13304: LD_INT 175
13306: PPUSH
13307: CALL_OW 67
// GameEnded = true ;
13311: LD_ADDR_LOC 31
13315: PUSH
13316: LD_INT 1
13318: ST_TO_ADDR
// end ;
13319: LD_VAR 0 1
13323: RET
// export function GetGameEnded ; begin
13324: LD_INT 0
13326: PPUSH
// result = GameEnded ;
13327: LD_ADDR_VAR 0 1
13331: PUSH
13332: LD_LOC 31
13336: ST_TO_ADDR
// end ; end_of_file
13337: LD_VAR 0 1
13341: RET
// var win ; export function init_kings_counting ; var i ; begin
13342: LD_INT 0
13344: PPUSH
13345: PPUSH
// mp_with_score := true ;
13346: LD_ADDR_OWVAR 14
13350: PUSH
13351: LD_INT 1
13353: ST_TO_ADDR
// ResetMultiScore ;
13354: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
13358: LD_EXP 29
13362: PPUSH
13363: LD_INT 1
13365: PPUSH
13366: CALL_OW 424
// enable ( 2 ) ;
13370: LD_INT 2
13372: ENABLE_MARKED
// end ;
13373: LD_VAR 0 1
13377: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
13378: LD_INT 0
13380: PPUSH
13381: PPUSH
13382: PPUSH
13383: PPUSH
13384: PPUSH
13385: PPUSH
13386: PPUSH
13387: PPUSH
13388: PPUSH
// vypis := [ ] ;
13389: LD_ADDR_VAR 0 3
13393: PUSH
13394: EMPTY
13395: ST_TO_ADDR
// red = 0 ;
13396: LD_ADDR_VAR 0 5
13400: PUSH
13401: LD_INT 0
13403: ST_TO_ADDR
// blue = 0 ;
13404: LD_ADDR_VAR 0 6
13408: PUSH
13409: LD_INT 0
13411: ST_TO_ADDR
// yel = 0 ;
13412: LD_ADDR_VAR 0 7
13416: PUSH
13417: LD_INT 0
13419: ST_TO_ADDR
// green = 0 ;
13420: LD_ADDR_VAR 0 8
13424: PUSH
13425: LD_INT 0
13427: ST_TO_ADDR
// if def_public_score or isSGUI then
13428: LD_EXP 1
13432: PUSH
13433: LD_OWVAR 83
13437: OR
13438: IFFALSE 14035
// if not Team_Game then
13440: LD_EXP 23
13444: NOT
13445: IFFALSE 13567
// begin for side = 1 to Side_Positions do
13447: LD_ADDR_VAR 0 2
13451: PUSH
13452: DOUBLE
13453: LD_INT 1
13455: DEC
13456: ST_TO_ADDR
13457: LD_EXP 21
13461: PUSH
13462: FOR_TO
13463: IFFALSE 13563
// if Side_Positions [ side ] then
13465: LD_EXP 21
13469: PUSH
13470: LD_VAR 0 2
13474: ARRAY
13475: IFFALSE 13561
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
13477: LD_ADDR_VAR 0 3
13481: PUSH
13482: LD_VAR 0 3
13486: PUSH
13487: LD_STRING #KingoftheHill-Public
13489: PUSH
13490: LD_VAR 0 2
13494: PUSH
13495: LD_VAR 0 2
13499: PUSH
13500: LD_VAR 0 2
13504: PUSH
13505: LD_INT 10
13507: PLUS
13508: PPUSH
13509: CALL_OW 110
13513: PUSH
13514: LD_INT 3
13516: DIV
13517: PUSH
13518: LD_EXP 30
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: ADD
13530: ST_TO_ADDR
// LScore_Update_Points ( 2 , side , ( GetTag ( side + 10 ) div 3 ) ) ;
13531: LD_INT 2
13533: PPUSH
13534: LD_VAR 0 2
13538: PPUSH
13539: LD_VAR 0 2
13543: PUSH
13544: LD_INT 10
13546: PLUS
13547: PPUSH
13548: CALL_OW 110
13552: PUSH
13553: LD_INT 3
13555: DIV
13556: PPUSH
13557: CALL 20939 0 3
// end ;
13561: GO 13462
13563: POP
13564: POP
// end else
13565: GO 14033
// begin if Teams [ 1 ] then
13567: LD_EXP 19
13571: PUSH
13572: LD_INT 1
13574: ARRAY
13575: IFFALSE 13627
// for i in Teams [ 1 ] do
13577: LD_ADDR_VAR 0 4
13581: PUSH
13582: LD_EXP 19
13586: PUSH
13587: LD_INT 1
13589: ARRAY
13590: PUSH
13591: FOR_IN
13592: IFFALSE 13625
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
13594: LD_ADDR_VAR 0 5
13598: PUSH
13599: LD_VAR 0 5
13603: PUSH
13604: LD_VAR 0 4
13608: PUSH
13609: LD_INT 10
13611: PLUS
13612: PPUSH
13613: CALL_OW 110
13617: PUSH
13618: LD_INT 3
13620: DIV
13621: PLUS
13622: ST_TO_ADDR
13623: GO 13591
13625: POP
13626: POP
// if Teams [ 2 ] then
13627: LD_EXP 19
13631: PUSH
13632: LD_INT 2
13634: ARRAY
13635: IFFALSE 13687
// for i in Teams [ 2 ] do
13637: LD_ADDR_VAR 0 4
13641: PUSH
13642: LD_EXP 19
13646: PUSH
13647: LD_INT 2
13649: ARRAY
13650: PUSH
13651: FOR_IN
13652: IFFALSE 13685
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
13654: LD_ADDR_VAR 0 6
13658: PUSH
13659: LD_VAR 0 6
13663: PUSH
13664: LD_VAR 0 4
13668: PUSH
13669: LD_INT 10
13671: PLUS
13672: PPUSH
13673: CALL_OW 110
13677: PUSH
13678: LD_INT 3
13680: DIV
13681: PLUS
13682: ST_TO_ADDR
13683: GO 13651
13685: POP
13686: POP
// if Teams [ 3 ] then
13687: LD_EXP 19
13691: PUSH
13692: LD_INT 3
13694: ARRAY
13695: IFFALSE 13747
// for i in Teams [ 3 ] do
13697: LD_ADDR_VAR 0 4
13701: PUSH
13702: LD_EXP 19
13706: PUSH
13707: LD_INT 3
13709: ARRAY
13710: PUSH
13711: FOR_IN
13712: IFFALSE 13745
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
13714: LD_ADDR_VAR 0 7
13718: PUSH
13719: LD_VAR 0 7
13723: PUSH
13724: LD_VAR 0 4
13728: PUSH
13729: LD_INT 10
13731: PLUS
13732: PPUSH
13733: CALL_OW 110
13737: PUSH
13738: LD_INT 3
13740: DIV
13741: PLUS
13742: ST_TO_ADDR
13743: GO 13711
13745: POP
13746: POP
// if Teams [ 4 ] then
13747: LD_EXP 19
13751: PUSH
13752: LD_INT 4
13754: ARRAY
13755: IFFALSE 13807
// for i in Teams [ 4 ] do
13757: LD_ADDR_VAR 0 4
13761: PUSH
13762: LD_EXP 19
13766: PUSH
13767: LD_INT 4
13769: ARRAY
13770: PUSH
13771: FOR_IN
13772: IFFALSE 13805
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
13774: LD_ADDR_VAR 0 8
13778: PUSH
13779: LD_VAR 0 8
13783: PUSH
13784: LD_VAR 0 4
13788: PUSH
13789: LD_INT 10
13791: PLUS
13792: PPUSH
13793: CALL_OW 110
13797: PUSH
13798: LD_INT 3
13800: DIV
13801: PLUS
13802: ST_TO_ADDR
13803: GO 13771
13805: POP
13806: POP
// if Teams [ 1 ] then
13807: LD_EXP 19
13811: PUSH
13812: LD_INT 1
13814: ARRAY
13815: IFFALSE 13844
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
13817: LD_ADDR_VAR 0 3
13821: PUSH
13822: LD_STRING #KingoftheHill-Public-red
13824: PUSH
13825: LD_INT 3
13827: PUSH
13828: LD_VAR 0 5
13832: PUSH
13833: LD_EXP 30
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: ST_TO_ADDR
// if Teams [ 2 ] then
13844: LD_EXP 19
13848: PUSH
13849: LD_INT 2
13851: ARRAY
13852: IFFALSE 13887
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
13854: LD_ADDR_VAR 0 3
13858: PUSH
13859: LD_VAR 0 3
13863: PUSH
13864: LD_STRING #KingoftheHill-Public-blue
13866: PUSH
13867: LD_INT 1
13869: PUSH
13870: LD_VAR 0 6
13874: PUSH
13875: LD_EXP 30
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: ADD
13886: ST_TO_ADDR
// if Teams [ 3 ] then
13887: LD_EXP 19
13891: PUSH
13892: LD_INT 3
13894: ARRAY
13895: IFFALSE 13930
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
13897: LD_ADDR_VAR 0 3
13901: PUSH
13902: LD_VAR 0 3
13906: PUSH
13907: LD_STRING #KingoftheHill-Public-yell
13909: PUSH
13910: LD_INT 2
13912: PUSH
13913: LD_VAR 0 7
13917: PUSH
13918: LD_EXP 30
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: ADD
13929: ST_TO_ADDR
// if Teams [ 4 ] then
13930: LD_EXP 19
13934: PUSH
13935: LD_INT 4
13937: ARRAY
13938: IFFALSE 13973
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
13940: LD_ADDR_VAR 0 3
13944: PUSH
13945: LD_VAR 0 3
13949: PUSH
13950: LD_STRING #KingoftheHill-Public-green
13952: PUSH
13953: LD_INT 7
13955: PUSH
13956: LD_VAR 0 8
13960: PUSH
13961: LD_EXP 30
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: ADD
13972: ST_TO_ADDR
// LScore_Update_Points ( 2 , 3 , red ) ;
13973: LD_INT 2
13975: PPUSH
13976: LD_INT 3
13978: PPUSH
13979: LD_VAR 0 5
13983: PPUSH
13984: CALL 20939 0 3
// LScore_Update_Points ( 2 , 1 , blue ) ;
13988: LD_INT 2
13990: PPUSH
13991: LD_INT 1
13993: PPUSH
13994: LD_VAR 0 6
13998: PPUSH
13999: CALL 20939 0 3
// LScore_Update_Points ( 2 , 2 , yel ) ;
14003: LD_INT 2
14005: PPUSH
14006: LD_INT 2
14008: PPUSH
14009: LD_VAR 0 7
14013: PPUSH
14014: CALL 20939 0 3
// LScore_Update_Points ( 2 , 7 , green ) ;
14018: LD_INT 2
14020: PPUSH
14021: LD_INT 7
14023: PPUSH
14024: LD_VAR 0 8
14028: PPUSH
14029: CALL 20939 0 3
// end else
14033: GO 14470
// if not Team_Game then
14035: LD_EXP 23
14039: NOT
14040: IFFALSE 14098
// vypis := vypis ^ [ #KingoftheHill-Private , mp_player_side , mp_player_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
14042: LD_ADDR_VAR 0 3
14046: PUSH
14047: LD_VAR 0 3
14051: PUSH
14052: LD_STRING #KingoftheHill-Private
14054: PUSH
14055: LD_OWVAR 7
14059: PUSH
14060: LD_OWVAR 7
14064: PUSH
14065: LD_VAR 0 2
14069: PUSH
14070: LD_INT 10
14072: PLUS
14073: PPUSH
14074: CALL_OW 110
14078: PUSH
14079: LD_INT 3
14081: DIV
14082: PUSH
14083: LD_EXP 30
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: ADD
14095: ST_TO_ADDR
14096: GO 14470
// begin for i in Teams [ 1 ] do
14098: LD_ADDR_VAR 0 4
14102: PUSH
14103: LD_EXP 19
14107: PUSH
14108: LD_INT 1
14110: ARRAY
14111: PUSH
14112: FOR_IN
14113: IFFALSE 14146
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
14115: LD_ADDR_VAR 0 5
14119: PUSH
14120: LD_VAR 0 5
14124: PUSH
14125: LD_VAR 0 4
14129: PUSH
14130: LD_INT 10
14132: PLUS
14133: PPUSH
14134: CALL_OW 110
14138: PUSH
14139: LD_INT 3
14141: DIV
14142: PLUS
14143: ST_TO_ADDR
14144: GO 14112
14146: POP
14147: POP
// for i in Teams [ 2 ] do
14148: LD_ADDR_VAR 0 4
14152: PUSH
14153: LD_EXP 19
14157: PUSH
14158: LD_INT 2
14160: ARRAY
14161: PUSH
14162: FOR_IN
14163: IFFALSE 14196
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
14165: LD_ADDR_VAR 0 6
14169: PUSH
14170: LD_VAR 0 6
14174: PUSH
14175: LD_VAR 0 4
14179: PUSH
14180: LD_INT 10
14182: PLUS
14183: PPUSH
14184: CALL_OW 110
14188: PUSH
14189: LD_INT 3
14191: DIV
14192: PLUS
14193: ST_TO_ADDR
14194: GO 14162
14196: POP
14197: POP
// for i in Teams [ 3 ] do
14198: LD_ADDR_VAR 0 4
14202: PUSH
14203: LD_EXP 19
14207: PUSH
14208: LD_INT 3
14210: ARRAY
14211: PUSH
14212: FOR_IN
14213: IFFALSE 14246
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
14215: LD_ADDR_VAR 0 7
14219: PUSH
14220: LD_VAR 0 7
14224: PUSH
14225: LD_VAR 0 4
14229: PUSH
14230: LD_INT 10
14232: PLUS
14233: PPUSH
14234: CALL_OW 110
14238: PUSH
14239: LD_INT 3
14241: DIV
14242: PLUS
14243: ST_TO_ADDR
14244: GO 14212
14246: POP
14247: POP
// for i in Teams [ 4 ] do
14248: LD_ADDR_VAR 0 4
14252: PUSH
14253: LD_EXP 19
14257: PUSH
14258: LD_INT 4
14260: ARRAY
14261: PUSH
14262: FOR_IN
14263: IFFALSE 14296
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
14265: LD_ADDR_VAR 0 8
14269: PUSH
14270: LD_VAR 0 8
14274: PUSH
14275: LD_VAR 0 4
14279: PUSH
14280: LD_INT 10
14282: PLUS
14283: PPUSH
14284: CALL_OW 110
14288: PUSH
14289: LD_INT 3
14291: DIV
14292: PLUS
14293: ST_TO_ADDR
14294: GO 14262
14296: POP
14297: POP
// if mp_player_side in Teams [ 1 ] then
14298: LD_OWVAR 7
14302: PUSH
14303: LD_EXP 19
14307: PUSH
14308: LD_INT 1
14310: ARRAY
14311: IN
14312: IFFALSE 14341
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
14314: LD_ADDR_VAR 0 3
14318: PUSH
14319: LD_STRING #KingoftheHill-Public-red
14321: PUSH
14322: LD_INT 3
14324: PUSH
14325: LD_VAR 0 5
14329: PUSH
14330: LD_EXP 30
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: ST_TO_ADDR
// if mp_player_side in Teams [ 2 ] then
14341: LD_OWVAR 7
14345: PUSH
14346: LD_EXP 19
14350: PUSH
14351: LD_INT 2
14353: ARRAY
14354: IN
14355: IFFALSE 14384
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
14357: LD_ADDR_VAR 0 3
14361: PUSH
14362: LD_STRING #KingoftheHill-Public-blue
14364: PUSH
14365: LD_INT 1
14367: PUSH
14368: LD_VAR 0 6
14372: PUSH
14373: LD_EXP 30
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: ST_TO_ADDR
// if mp_player_side in Teams [ 3 ] then
14384: LD_OWVAR 7
14388: PUSH
14389: LD_EXP 19
14393: PUSH
14394: LD_INT 3
14396: ARRAY
14397: IN
14398: IFFALSE 14427
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
14400: LD_ADDR_VAR 0 3
14404: PUSH
14405: LD_STRING #KingoftheHill-Public-yell
14407: PUSH
14408: LD_INT 2
14410: PUSH
14411: LD_VAR 0 7
14415: PUSH
14416: LD_EXP 30
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: ST_TO_ADDR
// if mp_player_side in Teams [ 4 ] then
14427: LD_OWVAR 7
14431: PUSH
14432: LD_EXP 19
14436: PUSH
14437: LD_INT 4
14439: ARRAY
14440: IN
14441: IFFALSE 14470
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
14443: LD_ADDR_VAR 0 3
14447: PUSH
14448: LD_STRING #KingoftheHill-Public-green
14450: PUSH
14451: LD_INT 7
14453: PUSH
14454: LD_VAR 0 8
14458: PUSH
14459: LD_EXP 30
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: ST_TO_ADDR
// end ; Display_kings := vypis ;
14470: LD_ADDR_EXP 60
14474: PUSH
14475: LD_VAR 0 3
14479: ST_TO_ADDR
// end ;
14480: LD_VAR 0 1
14484: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
14485: LD_INT 0
14487: PPUSH
14488: PPUSH
14489: PPUSH
14490: PPUSH
14491: PPUSH
14492: PPUSH
14493: PPUSH
14494: PPUSH
14495: PPUSH
// side := [ ] ;
14496: LD_ADDR_VAR 0 2
14500: PUSH
14501: EMPTY
14502: ST_TO_ADDR
// red = 0 ;
14503: LD_ADDR_VAR 0 5
14507: PUSH
14508: LD_INT 0
14510: ST_TO_ADDR
// blue = 0 ;
14511: LD_ADDR_VAR 0 6
14515: PUSH
14516: LD_INT 0
14518: ST_TO_ADDR
// yel = 0 ;
14519: LD_ADDR_VAR 0 7
14523: PUSH
14524: LD_INT 0
14526: ST_TO_ADDR
// green = 0 ;
14527: LD_ADDR_VAR 0 8
14531: PUSH
14532: LD_INT 0
14534: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
14535: LD_ADDR_VAR 0 3
14539: PUSH
14540: LD_EXP 29
14544: PPUSH
14545: LD_INT 21
14547: PUSH
14548: LD_INT 3
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: LD_INT 53
14557: PUSH
14558: EMPTY
14559: LIST
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PPUSH
14565: CALL_OW 70
14569: ST_TO_ADDR
// for un in list do
14570: LD_ADDR_VAR 0 4
14574: PUSH
14575: LD_VAR 0 3
14579: PUSH
14580: FOR_IN
14581: IFFALSE 14606
// side := side union GetSide ( un ) ;
14583: LD_ADDR_VAR 0 2
14587: PUSH
14588: LD_VAR 0 2
14592: PUSH
14593: LD_VAR 0 4
14597: PPUSH
14598: CALL_OW 255
14602: UNION
14603: ST_TO_ADDR
14604: GO 14580
14606: POP
14607: POP
// if side <> 1 then
14608: LD_VAR 0 2
14612: PUSH
14613: LD_INT 1
14615: NONEQUAL
14616: IFFALSE 14620
// exit ;
14618: GO 14983
// side := side [ 1 ] ;
14620: LD_ADDR_VAR 0 2
14624: PUSH
14625: LD_VAR 0 2
14629: PUSH
14630: LD_INT 1
14632: ARRAY
14633: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
14634: LD_VAR 0 2
14638: PUSH
14639: LD_INT 10
14641: PLUS
14642: PPUSH
14643: LD_VAR 0 2
14647: PUSH
14648: LD_INT 10
14650: PLUS
14651: PPUSH
14652: CALL_OW 110
14656: PUSH
14657: LD_INT 1
14659: PLUS
14660: PPUSH
14661: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
14665: LD_VAR 0 2
14669: PPUSH
14670: LD_VAR 0 2
14674: PUSH
14675: LD_INT 10
14677: PLUS
14678: PPUSH
14679: CALL_OW 110
14683: PUSH
14684: LD_INT 3
14686: DIV
14687: PPUSH
14688: LD_INT 2
14690: PPUSH
14691: CALL 11631 0 3
// if not Team_Game then
14695: LD_EXP 23
14699: NOT
14700: IFFALSE 14983
// if GetTag ( side + 10 ) >= final_count * 3 then
14702: LD_VAR 0 2
14706: PUSH
14707: LD_INT 10
14709: PLUS
14710: PPUSH
14711: CALL_OW 110
14715: PUSH
14716: LD_EXP 30
14720: PUSH
14721: LD_INT 3
14723: MUL
14724: GREATEREQUAL
14725: IFFALSE 14732
// enable ( 3 ) else
14727: LD_INT 3
14729: ENABLE_MARKED
14730: GO 14983
// begin for i in Teams [ 1 ] do
14732: LD_ADDR_VAR 0 9
14736: PUSH
14737: LD_EXP 19
14741: PUSH
14742: LD_INT 1
14744: ARRAY
14745: PUSH
14746: FOR_IN
14747: IFFALSE 14780
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
14749: LD_ADDR_VAR 0 5
14753: PUSH
14754: LD_VAR 0 5
14758: PUSH
14759: LD_VAR 0 9
14763: PUSH
14764: LD_INT 10
14766: PLUS
14767: PPUSH
14768: CALL_OW 110
14772: PUSH
14773: LD_INT 3
14775: DIV
14776: PLUS
14777: ST_TO_ADDR
14778: GO 14746
14780: POP
14781: POP
// for i in Teams [ 2 ] do
14782: LD_ADDR_VAR 0 9
14786: PUSH
14787: LD_EXP 19
14791: PUSH
14792: LD_INT 2
14794: ARRAY
14795: PUSH
14796: FOR_IN
14797: IFFALSE 14830
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
14799: LD_ADDR_VAR 0 6
14803: PUSH
14804: LD_VAR 0 6
14808: PUSH
14809: LD_VAR 0 9
14813: PUSH
14814: LD_INT 10
14816: PLUS
14817: PPUSH
14818: CALL_OW 110
14822: PUSH
14823: LD_INT 3
14825: DIV
14826: PLUS
14827: ST_TO_ADDR
14828: GO 14796
14830: POP
14831: POP
// for i in Teams [ 3 ] do
14832: LD_ADDR_VAR 0 9
14836: PUSH
14837: LD_EXP 19
14841: PUSH
14842: LD_INT 3
14844: ARRAY
14845: PUSH
14846: FOR_IN
14847: IFFALSE 14880
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
14849: LD_ADDR_VAR 0 7
14853: PUSH
14854: LD_VAR 0 7
14858: PUSH
14859: LD_VAR 0 9
14863: PUSH
14864: LD_INT 10
14866: PLUS
14867: PPUSH
14868: CALL_OW 110
14872: PUSH
14873: LD_INT 3
14875: DIV
14876: PLUS
14877: ST_TO_ADDR
14878: GO 14846
14880: POP
14881: POP
// for i in Teams [ 4 ] do
14882: LD_ADDR_VAR 0 9
14886: PUSH
14887: LD_EXP 19
14891: PUSH
14892: LD_INT 4
14894: ARRAY
14895: PUSH
14896: FOR_IN
14897: IFFALSE 14930
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
14899: LD_ADDR_VAR 0 8
14903: PUSH
14904: LD_VAR 0 8
14908: PUSH
14909: LD_VAR 0 9
14913: PUSH
14914: LD_INT 10
14916: PLUS
14917: PPUSH
14918: CALL_OW 110
14922: PUSH
14923: LD_INT 3
14925: DIV
14926: PLUS
14927: ST_TO_ADDR
14928: GO 14896
14930: POP
14931: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
14932: LD_VAR 0 5
14936: PUSH
14937: LD_EXP 30
14941: GREATEREQUAL
14942: PUSH
14943: LD_VAR 0 6
14947: PUSH
14948: LD_EXP 30
14952: GREATEREQUAL
14953: OR
14954: PUSH
14955: LD_VAR 0 7
14959: PUSH
14960: LD_EXP 30
14964: GREATEREQUAL
14965: OR
14966: PUSH
14967: LD_VAR 0 8
14971: PUSH
14972: LD_EXP 30
14976: GREATEREQUAL
14977: OR
14978: IFFALSE 14983
// enable ( 3 ) ;
14980: LD_INT 3
14982: ENABLE_MARKED
// end ; end ;
14983: LD_VAR 0 1
14987: RET
// every 0 0$1 marked 2 do
14988: GO 14990
14990: DISABLE
// begin count_king ;
14991: CALL 14485 0 0
// show_public_points ;
14995: CALL 13378 0 0
// enable ;
14999: ENABLE
// end ;
15000: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
15001: GO 15003
15003: DISABLE
15004: LD_INT 0
15006: PPUSH
15007: PPUSH
15008: PPUSH
15009: PPUSH
15010: PPUSH
15011: PPUSH
// begin win := [ ] ;
15012: LD_ADDR_LOC 34
15016: PUSH
15017: EMPTY
15018: ST_TO_ADDR
// red = 0 ;
15019: LD_ADDR_VAR 0 2
15023: PUSH
15024: LD_INT 0
15026: ST_TO_ADDR
// blue = 0 ;
15027: LD_ADDR_VAR 0 3
15031: PUSH
15032: LD_INT 0
15034: ST_TO_ADDR
// yel = 0 ;
15035: LD_ADDR_VAR 0 4
15039: PUSH
15040: LD_INT 0
15042: ST_TO_ADDR
// green = 0 ;
15043: LD_ADDR_VAR 0 5
15047: PUSH
15048: LD_INT 0
15050: ST_TO_ADDR
// if not Team_Game then
15051: LD_EXP 23
15055: NOT
15056: IFFALSE 15133
// begin for side = 1 to 8 do
15058: LD_ADDR_VAR 0 1
15062: PUSH
15063: DOUBLE
15064: LD_INT 1
15066: DEC
15067: ST_TO_ADDR
15068: LD_INT 8
15070: PUSH
15071: FOR_TO
15072: IFFALSE 15117
// if GetTag ( side + 10 ) >= final_count * 3 then
15074: LD_VAR 0 1
15078: PUSH
15079: LD_INT 10
15081: PLUS
15082: PPUSH
15083: CALL_OW 110
15087: PUSH
15088: LD_EXP 30
15092: PUSH
15093: LD_INT 3
15095: MUL
15096: GREATEREQUAL
15097: IFFALSE 15115
// win := win ^ side ;
15099: LD_ADDR_LOC 34
15103: PUSH
15104: LD_LOC 34
15108: PUSH
15109: LD_VAR 0 1
15113: ADD
15114: ST_TO_ADDR
15115: GO 15071
15117: POP
15118: POP
// if win then
15119: LD_LOC 34
15123: IFFALSE 15130
// enable ( 4 ) else
15125: LD_INT 4
15127: ENABLE_MARKED
15128: GO 15131
// enable ;
15130: ENABLE
// end else
15131: GO 15449
// begin for i in Teams [ 1 ] do
15133: LD_ADDR_VAR 0 6
15137: PUSH
15138: LD_EXP 19
15142: PUSH
15143: LD_INT 1
15145: ARRAY
15146: PUSH
15147: FOR_IN
15148: IFFALSE 15181
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
15150: LD_ADDR_VAR 0 2
15154: PUSH
15155: LD_VAR 0 2
15159: PUSH
15160: LD_VAR 0 6
15164: PUSH
15165: LD_INT 10
15167: PLUS
15168: PPUSH
15169: CALL_OW 110
15173: PUSH
15174: LD_INT 3
15176: DIV
15177: PLUS
15178: ST_TO_ADDR
15179: GO 15147
15181: POP
15182: POP
// for i in Teams [ 2 ] do
15183: LD_ADDR_VAR 0 6
15187: PUSH
15188: LD_EXP 19
15192: PUSH
15193: LD_INT 2
15195: ARRAY
15196: PUSH
15197: FOR_IN
15198: IFFALSE 15231
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
15200: LD_ADDR_VAR 0 3
15204: PUSH
15205: LD_VAR 0 3
15209: PUSH
15210: LD_VAR 0 6
15214: PUSH
15215: LD_INT 10
15217: PLUS
15218: PPUSH
15219: CALL_OW 110
15223: PUSH
15224: LD_INT 3
15226: DIV
15227: PLUS
15228: ST_TO_ADDR
15229: GO 15197
15231: POP
15232: POP
// for i in Teams [ 3 ] do
15233: LD_ADDR_VAR 0 6
15237: PUSH
15238: LD_EXP 19
15242: PUSH
15243: LD_INT 3
15245: ARRAY
15246: PUSH
15247: FOR_IN
15248: IFFALSE 15281
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
15250: LD_ADDR_VAR 0 4
15254: PUSH
15255: LD_VAR 0 4
15259: PUSH
15260: LD_VAR 0 6
15264: PUSH
15265: LD_INT 10
15267: PLUS
15268: PPUSH
15269: CALL_OW 110
15273: PUSH
15274: LD_INT 3
15276: DIV
15277: PLUS
15278: ST_TO_ADDR
15279: GO 15247
15281: POP
15282: POP
// for i in Teams [ 4 ] do
15283: LD_ADDR_VAR 0 6
15287: PUSH
15288: LD_EXP 19
15292: PUSH
15293: LD_INT 4
15295: ARRAY
15296: PUSH
15297: FOR_IN
15298: IFFALSE 15331
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
15300: LD_ADDR_VAR 0 5
15304: PUSH
15305: LD_VAR 0 5
15309: PUSH
15310: LD_VAR 0 6
15314: PUSH
15315: LD_INT 10
15317: PLUS
15318: PPUSH
15319: CALL_OW 110
15323: PUSH
15324: LD_INT 3
15326: DIV
15327: PLUS
15328: ST_TO_ADDR
15329: GO 15297
15331: POP
15332: POP
// if red >= final_count then
15333: LD_VAR 0 2
15337: PUSH
15338: LD_EXP 30
15342: GREATEREQUAL
15343: IFFALSE 15359
// win = teams [ 1 ] ;
15345: LD_ADDR_LOC 34
15349: PUSH
15350: LD_EXP 19
15354: PUSH
15355: LD_INT 1
15357: ARRAY
15358: ST_TO_ADDR
// if blue >= final_count then
15359: LD_VAR 0 3
15363: PUSH
15364: LD_EXP 30
15368: GREATEREQUAL
15369: IFFALSE 15385
// win = teams [ 2 ] ;
15371: LD_ADDR_LOC 34
15375: PUSH
15376: LD_EXP 19
15380: PUSH
15381: LD_INT 2
15383: ARRAY
15384: ST_TO_ADDR
// if yel >= final_count then
15385: LD_VAR 0 4
15389: PUSH
15390: LD_EXP 30
15394: GREATEREQUAL
15395: IFFALSE 15411
// win = teams [ 3 ] ;
15397: LD_ADDR_LOC 34
15401: PUSH
15402: LD_EXP 19
15406: PUSH
15407: LD_INT 3
15409: ARRAY
15410: ST_TO_ADDR
// if green >= final_count then
15411: LD_VAR 0 5
15415: PUSH
15416: LD_EXP 30
15420: GREATEREQUAL
15421: IFFALSE 15437
// win = teams [ 4 ] ;
15423: LD_ADDR_LOC 34
15427: PUSH
15428: LD_EXP 19
15432: PUSH
15433: LD_INT 4
15435: ARRAY
15436: ST_TO_ADDR
// if win then
15437: LD_LOC 34
15441: IFFALSE 15448
// enable ( 4 ) else
15443: LD_INT 4
15445: ENABLE_MARKED
15446: GO 15449
// enable ;
15448: ENABLE
// end ; end ;
15449: PPOPN 6
15451: END
// every 0 0$1 marked 4 do
15452: GO 15454
15454: DISABLE
// begin if Player_Side in win then
15455: LD_EXP 31
15459: PUSH
15460: LD_LOC 34
15464: IN
15465: IFFALSE 15481
// begin wait ( 0 0$2 ) ;
15467: LD_INT 70
15469: PPUSH
15470: CALL_OW 67
// enable ( 401 ) ;
15474: LD_INT 401
15476: ENABLE_MARKED
// exit ;
15477: GO 15497
// end else
15479: GO 15497
// begin wait ( 0 0$2 ) ;
15481: LD_INT 70
15483: PPUSH
15484: CALL_OW 67
// Multiplayer_Loose_Message ;
15488: CALL_OW 521
// enable ( 400 ) ;
15492: LD_INT 400
15494: ENABLE_MARKED
// exit ;
15495: GO 15497
// end ; end ; end_of_file
15497: END
// export function SetMpTechs ( ) ; var side , i ; begin
15498: LD_INT 0
15500: PPUSH
15501: PPUSH
15502: PPUSH
// for side = 1 to 8 do
15503: LD_ADDR_VAR 0 2
15507: PUSH
15508: DOUBLE
15509: LD_INT 1
15511: DEC
15512: ST_TO_ADDR
15513: LD_INT 8
15515: PUSH
15516: FOR_TO
15517: IFFALSE 15638
// begin for i = 1 to 72 do
15519: LD_ADDR_VAR 0 3
15523: PUSH
15524: DOUBLE
15525: LD_INT 1
15527: DEC
15528: ST_TO_ADDR
15529: LD_INT 72
15531: PUSH
15532: FOR_TO
15533: IFFALSE 15564
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
15535: LD_VAR 0 3
15539: PPUSH
15540: LD_VAR 0 2
15544: PPUSH
15545: LD_INT 0
15547: PPUSH
15548: LD_VAR 0 3
15552: PPUSH
15553: CALL_OW 565
15557: PPUSH
15558: CALL_OW 322
15562: GO 15532
15564: POP
15565: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
15566: LD_INT 73
15568: PPUSH
15569: LD_VAR 0 2
15573: PPUSH
15574: LD_INT 0
15576: PPUSH
15577: LD_INT 25
15579: PPUSH
15580: CALL_OW 565
15584: PPUSH
15585: CALL_OW 322
// for i = 0 to 40 do
15589: LD_ADDR_VAR 0 3
15593: PUSH
15594: DOUBLE
15595: LD_INT 0
15597: DEC
15598: ST_TO_ADDR
15599: LD_INT 40
15601: PUSH
15602: FOR_TO
15603: IFFALSE 15634
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
15605: LD_VAR 0 3
15609: PPUSH
15610: LD_VAR 0 2
15614: PPUSH
15615: LD_INT 1
15617: PPUSH
15618: LD_VAR 0 3
15622: PPUSH
15623: CALL_OW 565
15627: PPUSH
15628: CALL_OW 324
15632: GO 15602
15634: POP
15635: POP
// end ;
15636: GO 15516
15638: POP
15639: POP
// end ;
15640: LD_VAR 0 1
15644: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
15645: LD_INT 0
15647: PPUSH
15648: PPUSH
15649: PPUSH
// for side = 1 to 8 do
15650: LD_ADDR_VAR 0 3
15654: PUSH
15655: DOUBLE
15656: LD_INT 1
15658: DEC
15659: ST_TO_ADDR
15660: LD_INT 8
15662: PUSH
15663: FOR_TO
15664: IFFALSE 19660
// begin for i = 1 to 73 do
15666: LD_ADDR_VAR 0 4
15670: PUSH
15671: DOUBLE
15672: LD_INT 1
15674: DEC
15675: ST_TO_ADDR
15676: LD_INT 73
15678: PUSH
15679: FOR_TO
15680: IFFALSE 15701
// SetTech ( i , side , state_disabled ) ;
15682: LD_VAR 0 4
15686: PPUSH
15687: LD_VAR 0 3
15691: PPUSH
15692: LD_INT 0
15694: PPUSH
15695: CALL_OW 322
15699: GO 15679
15701: POP
15702: POP
// for i = 0 to 40 do
15703: LD_ADDR_VAR 0 4
15707: PUSH
15708: DOUBLE
15709: LD_INT 0
15711: DEC
15712: ST_TO_ADDR
15713: LD_INT 40
15715: PUSH
15716: FOR_TO
15717: IFFALSE 15738
// SetRestrict ( i , side , false ) ;
15719: LD_VAR 0 4
15723: PPUSH
15724: LD_VAR 0 3
15728: PPUSH
15729: LD_INT 0
15731: PPUSH
15732: CALL_OW 324
15736: GO 15716
15738: POP
15739: POP
// case level of 1 :
15740: LD_VAR 0 1
15744: PUSH
15745: LD_INT 1
15747: DOUBLE
15748: EQUAL
15749: IFTRUE 15753
15751: GO 15906
15753: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15754: LD_INT 35
15756: PPUSH
15757: LD_VAR 0 3
15761: PPUSH
15762: LD_INT 1
15764: PPUSH
15765: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15769: LD_INT 45
15771: PPUSH
15772: LD_VAR 0 3
15776: PPUSH
15777: LD_INT 1
15779: PPUSH
15780: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15784: LD_INT 46
15786: PPUSH
15787: LD_VAR 0 3
15791: PPUSH
15792: LD_INT 1
15794: PPUSH
15795: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15799: LD_INT 47
15801: PPUSH
15802: LD_VAR 0 3
15806: PPUSH
15807: LD_INT 1
15809: PPUSH
15810: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15814: LD_INT 0
15816: PPUSH
15817: LD_VAR 0 3
15821: PPUSH
15822: LD_INT 1
15824: PPUSH
15825: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15829: LD_INT 2
15831: PPUSH
15832: LD_VAR 0 3
15836: PPUSH
15837: LD_INT 1
15839: PPUSH
15840: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15844: LD_INT 4
15846: PPUSH
15847: LD_VAR 0 3
15851: PPUSH
15852: LD_INT 1
15854: PPUSH
15855: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15859: LD_INT 6
15861: PPUSH
15862: LD_VAR 0 3
15866: PPUSH
15867: LD_INT 1
15869: PPUSH
15870: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15874: LD_INT 29
15876: PPUSH
15877: LD_VAR 0 3
15881: PPUSH
15882: LD_INT 1
15884: PPUSH
15885: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15889: LD_INT 31
15891: PPUSH
15892: LD_VAR 0 3
15896: PPUSH
15897: LD_INT 1
15899: PPUSH
15900: CALL_OW 324
// end ; 2 :
15904: GO 19658
15906: LD_INT 2
15908: DOUBLE
15909: EQUAL
15910: IFTRUE 15914
15912: GO 16112
15914: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15915: LD_INT 35
15917: PPUSH
15918: LD_VAR 0 3
15922: PPUSH
15923: LD_INT 1
15925: PPUSH
15926: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15930: LD_INT 45
15932: PPUSH
15933: LD_VAR 0 3
15937: PPUSH
15938: LD_INT 1
15940: PPUSH
15941: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15945: LD_INT 46
15947: PPUSH
15948: LD_VAR 0 3
15952: PPUSH
15953: LD_INT 1
15955: PPUSH
15956: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15960: LD_INT 47
15962: PPUSH
15963: LD_VAR 0 3
15967: PPUSH
15968: LD_INT 1
15970: PPUSH
15971: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15975: LD_INT 1
15977: PPUSH
15978: LD_VAR 0 3
15982: PPUSH
15983: LD_INT 1
15985: PPUSH
15986: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15990: LD_INT 2
15992: PPUSH
15993: LD_VAR 0 3
15997: PPUSH
15998: LD_INT 1
16000: PPUSH
16001: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16005: LD_INT 11
16007: PPUSH
16008: LD_VAR 0 3
16012: PPUSH
16013: LD_INT 1
16015: PPUSH
16016: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16020: LD_INT 0
16022: PPUSH
16023: LD_VAR 0 3
16027: PPUSH
16028: LD_INT 1
16030: PPUSH
16031: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16035: LD_INT 2
16037: PPUSH
16038: LD_VAR 0 3
16042: PPUSH
16043: LD_INT 1
16045: PPUSH
16046: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16050: LD_INT 4
16052: PPUSH
16053: LD_VAR 0 3
16057: PPUSH
16058: LD_INT 1
16060: PPUSH
16061: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16065: LD_INT 6
16067: PPUSH
16068: LD_VAR 0 3
16072: PPUSH
16073: LD_INT 1
16075: PPUSH
16076: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16080: LD_INT 29
16082: PPUSH
16083: LD_VAR 0 3
16087: PPUSH
16088: LD_INT 1
16090: PPUSH
16091: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16095: LD_INT 31
16097: PPUSH
16098: LD_VAR 0 3
16102: PPUSH
16103: LD_INT 1
16105: PPUSH
16106: CALL_OW 324
// end ; 3 :
16110: GO 19658
16112: LD_INT 3
16114: DOUBLE
16115: EQUAL
16116: IFTRUE 16120
16118: GO 16573
16120: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16121: LD_INT 35
16123: PPUSH
16124: LD_VAR 0 3
16128: PPUSH
16129: LD_INT 1
16131: PPUSH
16132: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16136: LD_INT 45
16138: PPUSH
16139: LD_VAR 0 3
16143: PPUSH
16144: LD_INT 1
16146: PPUSH
16147: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16151: LD_INT 46
16153: PPUSH
16154: LD_VAR 0 3
16158: PPUSH
16159: LD_INT 1
16161: PPUSH
16162: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16166: LD_INT 47
16168: PPUSH
16169: LD_VAR 0 3
16173: PPUSH
16174: LD_INT 1
16176: PPUSH
16177: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16181: LD_INT 1
16183: PPUSH
16184: LD_VAR 0 3
16188: PPUSH
16189: LD_INT 1
16191: PPUSH
16192: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16196: LD_INT 2
16198: PPUSH
16199: LD_VAR 0 3
16203: PPUSH
16204: LD_INT 1
16206: PPUSH
16207: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16211: LD_INT 11
16213: PPUSH
16214: LD_VAR 0 3
16218: PPUSH
16219: LD_INT 1
16221: PPUSH
16222: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16226: LD_INT 48
16228: PPUSH
16229: LD_VAR 0 3
16233: PPUSH
16234: LD_INT 1
16236: PPUSH
16237: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16241: LD_INT 69
16243: PPUSH
16244: LD_VAR 0 3
16248: PPUSH
16249: LD_INT 1
16251: PPUSH
16252: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16256: LD_INT 39
16258: PPUSH
16259: LD_VAR 0 3
16263: PPUSH
16264: LD_INT 1
16266: PPUSH
16267: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16271: LD_INT 43
16273: PPUSH
16274: LD_VAR 0 3
16278: PPUSH
16279: LD_INT 1
16281: PPUSH
16282: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16286: LD_INT 51
16288: PPUSH
16289: LD_VAR 0 3
16293: PPUSH
16294: LD_INT 1
16296: PPUSH
16297: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16301: LD_INT 6
16303: PPUSH
16304: LD_VAR 0 3
16308: PPUSH
16309: LD_INT 1
16311: PPUSH
16312: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16316: LD_INT 0
16318: PPUSH
16319: LD_VAR 0 3
16323: PPUSH
16324: LD_INT 1
16326: PPUSH
16327: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16331: LD_INT 2
16333: PPUSH
16334: LD_VAR 0 3
16338: PPUSH
16339: LD_INT 1
16341: PPUSH
16342: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16346: LD_INT 3
16348: PPUSH
16349: LD_VAR 0 3
16353: PPUSH
16354: LD_INT 1
16356: PPUSH
16357: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16361: LD_INT 4
16363: PPUSH
16364: LD_VAR 0 3
16368: PPUSH
16369: LD_INT 1
16371: PPUSH
16372: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16376: LD_INT 6
16378: PPUSH
16379: LD_VAR 0 3
16383: PPUSH
16384: LD_INT 1
16386: PPUSH
16387: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16391: LD_INT 7
16393: PPUSH
16394: LD_VAR 0 3
16398: PPUSH
16399: LD_INT 1
16401: PPUSH
16402: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16406: LD_INT 8
16408: PPUSH
16409: LD_VAR 0 3
16413: PPUSH
16414: LD_INT 1
16416: PPUSH
16417: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16421: LD_INT 10
16423: PPUSH
16424: LD_VAR 0 3
16428: PPUSH
16429: LD_INT 1
16431: PPUSH
16432: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16436: LD_INT 15
16438: PPUSH
16439: LD_VAR 0 3
16443: PPUSH
16444: LD_INT 1
16446: PPUSH
16447: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16451: LD_INT 16
16453: PPUSH
16454: LD_VAR 0 3
16458: PPUSH
16459: LD_INT 1
16461: PPUSH
16462: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16466: LD_INT 17
16468: PPUSH
16469: LD_VAR 0 3
16473: PPUSH
16474: LD_INT 1
16476: PPUSH
16477: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16481: LD_INT 20
16483: PPUSH
16484: LD_VAR 0 3
16488: PPUSH
16489: LD_INT 1
16491: PPUSH
16492: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16496: LD_INT 26
16498: PPUSH
16499: LD_VAR 0 3
16503: PPUSH
16504: LD_INT 1
16506: PPUSH
16507: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16511: LD_INT 27
16513: PPUSH
16514: LD_VAR 0 3
16518: PPUSH
16519: LD_INT 1
16521: PPUSH
16522: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16526: LD_INT 29
16528: PPUSH
16529: LD_VAR 0 3
16533: PPUSH
16534: LD_INT 1
16536: PPUSH
16537: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16541: LD_INT 31
16543: PPUSH
16544: LD_VAR 0 3
16548: PPUSH
16549: LD_INT 1
16551: PPUSH
16552: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16556: LD_INT 32
16558: PPUSH
16559: LD_VAR 0 3
16563: PPUSH
16564: LD_INT 1
16566: PPUSH
16567: CALL_OW 324
// end ; 4 :
16571: GO 19658
16573: LD_INT 4
16575: DOUBLE
16576: EQUAL
16577: IFTRUE 16581
16579: GO 17529
16581: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16582: LD_INT 35
16584: PPUSH
16585: LD_VAR 0 3
16589: PPUSH
16590: LD_INT 1
16592: PPUSH
16593: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16597: LD_INT 45
16599: PPUSH
16600: LD_VAR 0 3
16604: PPUSH
16605: LD_INT 1
16607: PPUSH
16608: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16612: LD_INT 46
16614: PPUSH
16615: LD_VAR 0 3
16619: PPUSH
16620: LD_INT 1
16622: PPUSH
16623: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16627: LD_INT 47
16629: PPUSH
16630: LD_VAR 0 3
16634: PPUSH
16635: LD_INT 1
16637: PPUSH
16638: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16642: LD_INT 1
16644: PPUSH
16645: LD_VAR 0 3
16649: PPUSH
16650: LD_INT 1
16652: PPUSH
16653: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16657: LD_INT 2
16659: PPUSH
16660: LD_VAR 0 3
16664: PPUSH
16665: LD_INT 1
16667: PPUSH
16668: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16672: LD_INT 11
16674: PPUSH
16675: LD_VAR 0 3
16679: PPUSH
16680: LD_INT 1
16682: PPUSH
16683: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16687: LD_INT 20
16689: PPUSH
16690: LD_VAR 0 3
16694: PPUSH
16695: LD_INT 1
16697: PPUSH
16698: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16702: LD_INT 48
16704: PPUSH
16705: LD_VAR 0 3
16709: PPUSH
16710: LD_INT 1
16712: PPUSH
16713: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16717: LD_INT 49
16719: PPUSH
16720: LD_VAR 0 3
16724: PPUSH
16725: LD_INT 1
16727: PPUSH
16728: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16732: LD_INT 69
16734: PPUSH
16735: LD_VAR 0 3
16739: PPUSH
16740: LD_INT 1
16742: PPUSH
16743: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16747: LD_INT 39
16749: PPUSH
16750: LD_VAR 0 3
16754: PPUSH
16755: LD_INT 1
16757: PPUSH
16758: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16762: LD_INT 34
16764: PPUSH
16765: LD_VAR 0 3
16769: PPUSH
16770: LD_INT 1
16772: PPUSH
16773: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16777: LD_INT 42
16779: PPUSH
16780: LD_VAR 0 3
16784: PPUSH
16785: LD_INT 1
16787: PPUSH
16788: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16792: LD_INT 44
16794: PPUSH
16795: LD_VAR 0 3
16799: PPUSH
16800: LD_INT 1
16802: PPUSH
16803: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16807: LD_INT 41
16809: PPUSH
16810: LD_VAR 0 3
16814: PPUSH
16815: LD_INT 1
16817: PPUSH
16818: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16822: LD_INT 43
16824: PPUSH
16825: LD_VAR 0 3
16829: PPUSH
16830: LD_INT 1
16832: PPUSH
16833: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16837: LD_INT 70
16839: PPUSH
16840: LD_VAR 0 3
16844: PPUSH
16845: LD_INT 1
16847: PPUSH
16848: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16852: LD_INT 51
16854: PPUSH
16855: LD_VAR 0 3
16859: PPUSH
16860: LD_INT 1
16862: PPUSH
16863: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16867: LD_INT 52
16869: PPUSH
16870: LD_VAR 0 3
16874: PPUSH
16875: LD_INT 1
16877: PPUSH
16878: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16882: LD_INT 6
16884: PPUSH
16885: LD_VAR 0 3
16889: PPUSH
16890: LD_INT 1
16892: PPUSH
16893: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16897: LD_INT 15
16899: PPUSH
16900: LD_VAR 0 3
16904: PPUSH
16905: LD_INT 1
16907: PPUSH
16908: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16912: LD_INT 7
16914: PPUSH
16915: LD_VAR 0 3
16919: PPUSH
16920: LD_INT 1
16922: PPUSH
16923: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16927: LD_INT 12
16929: PPUSH
16930: LD_VAR 0 3
16934: PPUSH
16935: LD_INT 1
16937: PPUSH
16938: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16942: LD_INT 18
16944: PPUSH
16945: LD_VAR 0 3
16949: PPUSH
16950: LD_INT 1
16952: PPUSH
16953: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16957: LD_INT 60
16959: PPUSH
16960: LD_VAR 0 3
16964: PPUSH
16965: LD_INT 1
16967: PPUSH
16968: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16972: LD_INT 9
16974: PPUSH
16975: LD_VAR 0 3
16979: PPUSH
16980: LD_INT 1
16982: PPUSH
16983: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16987: LD_INT 30
16989: PPUSH
16990: LD_VAR 0 3
16994: PPUSH
16995: LD_INT 1
16997: PPUSH
16998: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17002: LD_INT 37
17004: PPUSH
17005: LD_VAR 0 3
17009: PPUSH
17010: LD_INT 1
17012: PPUSH
17013: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17017: LD_INT 5
17019: PPUSH
17020: LD_VAR 0 3
17024: PPUSH
17025: LD_INT 1
17027: PPUSH
17028: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17032: LD_INT 66
17034: PPUSH
17035: LD_VAR 0 3
17039: PPUSH
17040: LD_INT 1
17042: PPUSH
17043: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17047: LD_INT 21
17049: PPUSH
17050: LD_VAR 0 3
17054: PPUSH
17055: LD_INT 1
17057: PPUSH
17058: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17062: LD_INT 22
17064: PPUSH
17065: LD_VAR 0 3
17069: PPUSH
17070: LD_INT 1
17072: PPUSH
17073: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17077: LD_INT 54
17079: PPUSH
17080: LD_VAR 0 3
17084: PPUSH
17085: LD_INT 1
17087: PPUSH
17088: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17092: LD_INT 0
17094: PPUSH
17095: LD_VAR 0 3
17099: PPUSH
17100: LD_INT 1
17102: PPUSH
17103: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17107: LD_INT 1
17109: PPUSH
17110: LD_VAR 0 3
17114: PPUSH
17115: LD_INT 1
17117: PPUSH
17118: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17122: LD_INT 2
17124: PPUSH
17125: LD_VAR 0 3
17129: PPUSH
17130: LD_INT 1
17132: PPUSH
17133: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17137: LD_INT 3
17139: PPUSH
17140: LD_VAR 0 3
17144: PPUSH
17145: LD_INT 1
17147: PPUSH
17148: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17152: LD_INT 4
17154: PPUSH
17155: LD_VAR 0 3
17159: PPUSH
17160: LD_INT 1
17162: PPUSH
17163: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17167: LD_INT 5
17169: PPUSH
17170: LD_VAR 0 3
17174: PPUSH
17175: LD_INT 1
17177: PPUSH
17178: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17182: LD_INT 6
17184: PPUSH
17185: LD_VAR 0 3
17189: PPUSH
17190: LD_INT 1
17192: PPUSH
17193: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17197: LD_INT 7
17199: PPUSH
17200: LD_VAR 0 3
17204: PPUSH
17205: LD_INT 1
17207: PPUSH
17208: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17212: LD_INT 8
17214: PPUSH
17215: LD_VAR 0 3
17219: PPUSH
17220: LD_INT 1
17222: PPUSH
17223: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17227: LD_INT 10
17229: PPUSH
17230: LD_VAR 0 3
17234: PPUSH
17235: LD_INT 1
17237: PPUSH
17238: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17242: LD_INT 11
17244: PPUSH
17245: LD_VAR 0 3
17249: PPUSH
17250: LD_INT 1
17252: PPUSH
17253: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17257: LD_INT 12
17259: PPUSH
17260: LD_VAR 0 3
17264: PPUSH
17265: LD_INT 1
17267: PPUSH
17268: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17272: LD_INT 13
17274: PPUSH
17275: LD_VAR 0 3
17279: PPUSH
17280: LD_INT 1
17282: PPUSH
17283: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17287: LD_INT 14
17289: PPUSH
17290: LD_VAR 0 3
17294: PPUSH
17295: LD_INT 1
17297: PPUSH
17298: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17302: LD_INT 15
17304: PPUSH
17305: LD_VAR 0 3
17309: PPUSH
17310: LD_INT 1
17312: PPUSH
17313: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17317: LD_INT 16
17319: PPUSH
17320: LD_VAR 0 3
17324: PPUSH
17325: LD_INT 1
17327: PPUSH
17328: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17332: LD_INT 17
17334: PPUSH
17335: LD_VAR 0 3
17339: PPUSH
17340: LD_INT 1
17342: PPUSH
17343: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17347: LD_INT 19
17349: PPUSH
17350: LD_VAR 0 3
17354: PPUSH
17355: LD_INT 1
17357: PPUSH
17358: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17362: LD_INT 20
17364: PPUSH
17365: LD_VAR 0 3
17369: PPUSH
17370: LD_INT 1
17372: PPUSH
17373: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17377: LD_INT 21
17379: PPUSH
17380: LD_VAR 0 3
17384: PPUSH
17385: LD_INT 1
17387: PPUSH
17388: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17392: LD_INT 23
17394: PPUSH
17395: LD_VAR 0 3
17399: PPUSH
17400: LD_INT 1
17402: PPUSH
17403: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17407: LD_INT 26
17409: PPUSH
17410: LD_VAR 0 3
17414: PPUSH
17415: LD_INT 1
17417: PPUSH
17418: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17422: LD_INT 27
17424: PPUSH
17425: LD_VAR 0 3
17429: PPUSH
17430: LD_INT 1
17432: PPUSH
17433: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17437: LD_INT 28
17439: PPUSH
17440: LD_VAR 0 3
17444: PPUSH
17445: LD_INT 1
17447: PPUSH
17448: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17452: LD_INT 29
17454: PPUSH
17455: LD_VAR 0 3
17459: PPUSH
17460: LD_INT 1
17462: PPUSH
17463: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17467: LD_INT 30
17469: PPUSH
17470: LD_VAR 0 3
17474: PPUSH
17475: LD_INT 1
17477: PPUSH
17478: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17482: LD_INT 31
17484: PPUSH
17485: LD_VAR 0 3
17489: PPUSH
17490: LD_INT 1
17492: PPUSH
17493: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17497: LD_INT 32
17499: PPUSH
17500: LD_VAR 0 3
17504: PPUSH
17505: LD_INT 1
17507: PPUSH
17508: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17512: LD_INT 36
17514: PPUSH
17515: LD_VAR 0 3
17519: PPUSH
17520: LD_INT 1
17522: PPUSH
17523: CALL_OW 324
// end ; 5 :
17527: GO 19658
17529: LD_INT 5
17531: DOUBLE
17532: EQUAL
17533: IFTRUE 17537
17535: GO 18650
17537: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17538: LD_INT 35
17540: PPUSH
17541: LD_VAR 0 3
17545: PPUSH
17546: LD_INT 1
17548: PPUSH
17549: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17553: LD_INT 45
17555: PPUSH
17556: LD_VAR 0 3
17560: PPUSH
17561: LD_INT 1
17563: PPUSH
17564: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17568: LD_INT 46
17570: PPUSH
17571: LD_VAR 0 3
17575: PPUSH
17576: LD_INT 1
17578: PPUSH
17579: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17583: LD_INT 47
17585: PPUSH
17586: LD_VAR 0 3
17590: PPUSH
17591: LD_INT 1
17593: PPUSH
17594: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17598: LD_INT 1
17600: PPUSH
17601: LD_VAR 0 3
17605: PPUSH
17606: LD_INT 1
17608: PPUSH
17609: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17613: LD_INT 2
17615: PPUSH
17616: LD_VAR 0 3
17620: PPUSH
17621: LD_INT 1
17623: PPUSH
17624: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17628: LD_INT 11
17630: PPUSH
17631: LD_VAR 0 3
17635: PPUSH
17636: LD_INT 1
17638: PPUSH
17639: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17643: LD_INT 20
17645: PPUSH
17646: LD_VAR 0 3
17650: PPUSH
17651: LD_INT 1
17653: PPUSH
17654: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17658: LD_INT 48
17660: PPUSH
17661: LD_VAR 0 3
17665: PPUSH
17666: LD_INT 1
17668: PPUSH
17669: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17673: LD_INT 49
17675: PPUSH
17676: LD_VAR 0 3
17680: PPUSH
17681: LD_INT 1
17683: PPUSH
17684: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17688: LD_INT 69
17690: PPUSH
17691: LD_VAR 0 3
17695: PPUSH
17696: LD_INT 1
17698: PPUSH
17699: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17703: LD_INT 39
17705: PPUSH
17706: LD_VAR 0 3
17710: PPUSH
17711: LD_INT 1
17713: PPUSH
17714: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17718: LD_INT 34
17720: PPUSH
17721: LD_VAR 0 3
17725: PPUSH
17726: LD_INT 1
17728: PPUSH
17729: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17733: LD_INT 42
17735: PPUSH
17736: LD_VAR 0 3
17740: PPUSH
17741: LD_INT 1
17743: PPUSH
17744: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17748: LD_INT 44
17750: PPUSH
17751: LD_VAR 0 3
17755: PPUSH
17756: LD_INT 1
17758: PPUSH
17759: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17763: LD_INT 41
17765: PPUSH
17766: LD_VAR 0 3
17770: PPUSH
17771: LD_INT 1
17773: PPUSH
17774: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17778: LD_INT 40
17780: PPUSH
17781: LD_VAR 0 3
17785: PPUSH
17786: LD_INT 1
17788: PPUSH
17789: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17793: LD_INT 43
17795: PPUSH
17796: LD_VAR 0 3
17800: PPUSH
17801: LD_INT 1
17803: PPUSH
17804: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17808: LD_INT 70
17810: PPUSH
17811: LD_VAR 0 3
17815: PPUSH
17816: LD_INT 1
17818: PPUSH
17819: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17823: LD_INT 51
17825: PPUSH
17826: LD_VAR 0 3
17830: PPUSH
17831: LD_INT 1
17833: PPUSH
17834: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17838: LD_INT 52
17840: PPUSH
17841: LD_VAR 0 3
17845: PPUSH
17846: LD_INT 1
17848: PPUSH
17849: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17853: LD_INT 6
17855: PPUSH
17856: LD_VAR 0 3
17860: PPUSH
17861: LD_INT 1
17863: PPUSH
17864: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17868: LD_INT 15
17870: PPUSH
17871: LD_VAR 0 3
17875: PPUSH
17876: LD_INT 1
17878: PPUSH
17879: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17883: LD_INT 7
17885: PPUSH
17886: LD_VAR 0 3
17890: PPUSH
17891: LD_INT 1
17893: PPUSH
17894: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17898: LD_INT 12
17900: PPUSH
17901: LD_VAR 0 3
17905: PPUSH
17906: LD_INT 1
17908: PPUSH
17909: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17913: LD_INT 17
17915: PPUSH
17916: LD_VAR 0 3
17920: PPUSH
17921: LD_INT 1
17923: PPUSH
17924: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17928: LD_INT 18
17930: PPUSH
17931: LD_VAR 0 3
17935: PPUSH
17936: LD_INT 1
17938: PPUSH
17939: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17943: LD_INT 60
17945: PPUSH
17946: LD_VAR 0 3
17950: PPUSH
17951: LD_INT 1
17953: PPUSH
17954: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17958: LD_INT 32
17960: PPUSH
17961: LD_VAR 0 3
17965: PPUSH
17966: LD_INT 1
17968: PPUSH
17969: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17973: LD_INT 9
17975: PPUSH
17976: LD_VAR 0 3
17980: PPUSH
17981: LD_INT 1
17983: PPUSH
17984: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17988: LD_INT 57
17990: PPUSH
17991: LD_VAR 0 3
17995: PPUSH
17996: LD_INT 1
17998: PPUSH
17999: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18003: LD_INT 30
18005: PPUSH
18006: LD_VAR 0 3
18010: PPUSH
18011: LD_INT 1
18013: PPUSH
18014: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18018: LD_INT 37
18020: PPUSH
18021: LD_VAR 0 3
18025: PPUSH
18026: LD_INT 1
18028: PPUSH
18029: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
18033: LD_INT 63
18035: PPUSH
18036: LD_VAR 0 3
18040: PPUSH
18041: LD_INT 1
18043: PPUSH
18044: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
18048: LD_INT 3
18050: PPUSH
18051: LD_VAR 0 3
18055: PPUSH
18056: LD_INT 1
18058: PPUSH
18059: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
18063: LD_INT 4
18065: PPUSH
18066: LD_VAR 0 3
18070: PPUSH
18071: LD_INT 1
18073: PPUSH
18074: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18078: LD_INT 5
18080: PPUSH
18081: LD_VAR 0 3
18085: PPUSH
18086: LD_INT 1
18088: PPUSH
18089: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18093: LD_INT 66
18095: PPUSH
18096: LD_VAR 0 3
18100: PPUSH
18101: LD_INT 1
18103: PPUSH
18104: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18108: LD_INT 21
18110: PPUSH
18111: LD_VAR 0 3
18115: PPUSH
18116: LD_INT 1
18118: PPUSH
18119: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18123: LD_INT 22
18125: PPUSH
18126: LD_VAR 0 3
18130: PPUSH
18131: LD_INT 1
18133: PPUSH
18134: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18138: LD_INT 19
18140: PPUSH
18141: LD_VAR 0 3
18145: PPUSH
18146: LD_INT 1
18148: PPUSH
18149: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18153: LD_INT 54
18155: PPUSH
18156: LD_VAR 0 3
18160: PPUSH
18161: LD_INT 1
18163: PPUSH
18164: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18168: LD_INT 55
18170: PPUSH
18171: LD_VAR 0 3
18175: PPUSH
18176: LD_INT 1
18178: PPUSH
18179: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18183: LD_INT 0
18185: PPUSH
18186: LD_VAR 0 3
18190: PPUSH
18191: LD_INT 1
18193: PPUSH
18194: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18198: LD_INT 1
18200: PPUSH
18201: LD_VAR 0 3
18205: PPUSH
18206: LD_INT 1
18208: PPUSH
18209: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18213: LD_INT 2
18215: PPUSH
18216: LD_VAR 0 3
18220: PPUSH
18221: LD_INT 1
18223: PPUSH
18224: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18228: LD_INT 3
18230: PPUSH
18231: LD_VAR 0 3
18235: PPUSH
18236: LD_INT 1
18238: PPUSH
18239: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18243: LD_INT 4
18245: PPUSH
18246: LD_VAR 0 3
18250: PPUSH
18251: LD_INT 1
18253: PPUSH
18254: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18258: LD_INT 5
18260: PPUSH
18261: LD_VAR 0 3
18265: PPUSH
18266: LD_INT 1
18268: PPUSH
18269: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18273: LD_INT 6
18275: PPUSH
18276: LD_VAR 0 3
18280: PPUSH
18281: LD_INT 1
18283: PPUSH
18284: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18288: LD_INT 7
18290: PPUSH
18291: LD_VAR 0 3
18295: PPUSH
18296: LD_INT 1
18298: PPUSH
18299: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18303: LD_INT 8
18305: PPUSH
18306: LD_VAR 0 3
18310: PPUSH
18311: LD_INT 1
18313: PPUSH
18314: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18318: LD_INT 10
18320: PPUSH
18321: LD_VAR 0 3
18325: PPUSH
18326: LD_INT 1
18328: PPUSH
18329: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18333: LD_INT 11
18335: PPUSH
18336: LD_VAR 0 3
18340: PPUSH
18341: LD_INT 1
18343: PPUSH
18344: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18348: LD_INT 12
18350: PPUSH
18351: LD_VAR 0 3
18355: PPUSH
18356: LD_INT 1
18358: PPUSH
18359: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18363: LD_INT 13
18365: PPUSH
18366: LD_VAR 0 3
18370: PPUSH
18371: LD_INT 1
18373: PPUSH
18374: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18378: LD_INT 14
18380: PPUSH
18381: LD_VAR 0 3
18385: PPUSH
18386: LD_INT 1
18388: PPUSH
18389: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18393: LD_INT 15
18395: PPUSH
18396: LD_VAR 0 3
18400: PPUSH
18401: LD_INT 1
18403: PPUSH
18404: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18408: LD_INT 16
18410: PPUSH
18411: LD_VAR 0 3
18415: PPUSH
18416: LD_INT 1
18418: PPUSH
18419: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18423: LD_INT 17
18425: PPUSH
18426: LD_VAR 0 3
18430: PPUSH
18431: LD_INT 1
18433: PPUSH
18434: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
18438: LD_INT 18
18440: PPUSH
18441: LD_VAR 0 3
18445: PPUSH
18446: LD_INT 1
18448: PPUSH
18449: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18453: LD_INT 19
18455: PPUSH
18456: LD_VAR 0 3
18460: PPUSH
18461: LD_INT 1
18463: PPUSH
18464: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18468: LD_INT 20
18470: PPUSH
18471: LD_VAR 0 3
18475: PPUSH
18476: LD_INT 1
18478: PPUSH
18479: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18483: LD_INT 21
18485: PPUSH
18486: LD_VAR 0 3
18490: PPUSH
18491: LD_INT 1
18493: PPUSH
18494: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18498: LD_INT 23
18500: PPUSH
18501: LD_VAR 0 3
18505: PPUSH
18506: LD_INT 1
18508: PPUSH
18509: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18513: LD_INT 26
18515: PPUSH
18516: LD_VAR 0 3
18520: PPUSH
18521: LD_INT 1
18523: PPUSH
18524: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18528: LD_INT 27
18530: PPUSH
18531: LD_VAR 0 3
18535: PPUSH
18536: LD_INT 1
18538: PPUSH
18539: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18543: LD_INT 28
18545: PPUSH
18546: LD_VAR 0 3
18550: PPUSH
18551: LD_INT 1
18553: PPUSH
18554: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18558: LD_INT 29
18560: PPUSH
18561: LD_VAR 0 3
18565: PPUSH
18566: LD_INT 1
18568: PPUSH
18569: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18573: LD_INT 30
18575: PPUSH
18576: LD_VAR 0 3
18580: PPUSH
18581: LD_INT 1
18583: PPUSH
18584: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18588: LD_INT 31
18590: PPUSH
18591: LD_VAR 0 3
18595: PPUSH
18596: LD_INT 1
18598: PPUSH
18599: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18603: LD_INT 32
18605: PPUSH
18606: LD_VAR 0 3
18610: PPUSH
18611: LD_INT 1
18613: PPUSH
18614: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
18618: LD_INT 33
18620: PPUSH
18621: LD_VAR 0 3
18625: PPUSH
18626: LD_INT 1
18628: PPUSH
18629: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18633: LD_INT 36
18635: PPUSH
18636: LD_VAR 0 3
18640: PPUSH
18641: LD_INT 1
18643: PPUSH
18644: CALL_OW 324
// end ; 6 :
18648: GO 19658
18650: LD_INT 6
18652: DOUBLE
18653: EQUAL
18654: IFTRUE 18658
18656: GO 19583
18658: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18659: LD_INT 35
18661: PPUSH
18662: LD_VAR 0 3
18666: PPUSH
18667: LD_INT 1
18669: PPUSH
18670: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18674: LD_INT 45
18676: PPUSH
18677: LD_VAR 0 3
18681: PPUSH
18682: LD_INT 1
18684: PPUSH
18685: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18689: LD_INT 46
18691: PPUSH
18692: LD_VAR 0 3
18696: PPUSH
18697: LD_INT 1
18699: PPUSH
18700: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18704: LD_INT 47
18706: PPUSH
18707: LD_VAR 0 3
18711: PPUSH
18712: LD_INT 1
18714: PPUSH
18715: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18719: LD_INT 1
18721: PPUSH
18722: LD_VAR 0 3
18726: PPUSH
18727: LD_INT 1
18729: PPUSH
18730: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18734: LD_INT 2
18736: PPUSH
18737: LD_VAR 0 3
18741: PPUSH
18742: LD_INT 1
18744: PPUSH
18745: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18749: LD_INT 11
18751: PPUSH
18752: LD_VAR 0 3
18756: PPUSH
18757: LD_INT 1
18759: PPUSH
18760: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18764: LD_INT 20
18766: PPUSH
18767: LD_VAR 0 3
18771: PPUSH
18772: LD_INT 1
18774: PPUSH
18775: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18779: LD_INT 48
18781: PPUSH
18782: LD_VAR 0 3
18786: PPUSH
18787: LD_INT 1
18789: PPUSH
18790: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18794: LD_INT 49
18796: PPUSH
18797: LD_VAR 0 3
18801: PPUSH
18802: LD_INT 1
18804: PPUSH
18805: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
18809: LD_INT 50
18811: PPUSH
18812: LD_VAR 0 3
18816: PPUSH
18817: LD_INT 1
18819: PPUSH
18820: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18824: LD_INT 69
18826: PPUSH
18827: LD_VAR 0 3
18831: PPUSH
18832: LD_INT 1
18834: PPUSH
18835: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18839: LD_INT 39
18841: PPUSH
18842: LD_VAR 0 3
18846: PPUSH
18847: LD_INT 1
18849: PPUSH
18850: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18854: LD_INT 34
18856: PPUSH
18857: LD_VAR 0 3
18861: PPUSH
18862: LD_INT 1
18864: PPUSH
18865: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18869: LD_INT 42
18871: PPUSH
18872: LD_VAR 0 3
18876: PPUSH
18877: LD_INT 1
18879: PPUSH
18880: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18884: LD_INT 44
18886: PPUSH
18887: LD_VAR 0 3
18891: PPUSH
18892: LD_INT 1
18894: PPUSH
18895: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18899: LD_INT 41
18901: PPUSH
18902: LD_VAR 0 3
18906: PPUSH
18907: LD_INT 1
18909: PPUSH
18910: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18914: LD_INT 13
18916: PPUSH
18917: LD_VAR 0 3
18921: PPUSH
18922: LD_INT 1
18924: PPUSH
18925: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18929: LD_INT 40
18931: PPUSH
18932: LD_VAR 0 3
18936: PPUSH
18937: LD_INT 1
18939: PPUSH
18940: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18944: LD_INT 43
18946: PPUSH
18947: LD_VAR 0 3
18951: PPUSH
18952: LD_INT 1
18954: PPUSH
18955: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18959: LD_INT 70
18961: PPUSH
18962: LD_VAR 0 3
18966: PPUSH
18967: LD_INT 1
18969: PPUSH
18970: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
18974: LD_INT 23
18976: PPUSH
18977: LD_VAR 0 3
18981: PPUSH
18982: LD_INT 1
18984: PPUSH
18985: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18989: LD_INT 51
18991: PPUSH
18992: LD_VAR 0 3
18996: PPUSH
18997: LD_INT 1
18999: PPUSH
19000: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19004: LD_INT 52
19006: PPUSH
19007: LD_VAR 0 3
19011: PPUSH
19012: LD_INT 1
19014: PPUSH
19015: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19019: LD_INT 6
19021: PPUSH
19022: LD_VAR 0 3
19026: PPUSH
19027: LD_INT 1
19029: PPUSH
19030: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19034: LD_INT 15
19036: PPUSH
19037: LD_VAR 0 3
19041: PPUSH
19042: LD_INT 1
19044: PPUSH
19045: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19049: LD_INT 7
19051: PPUSH
19052: LD_VAR 0 3
19056: PPUSH
19057: LD_INT 1
19059: PPUSH
19060: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19064: LD_INT 12
19066: PPUSH
19067: LD_VAR 0 3
19071: PPUSH
19072: LD_INT 1
19074: PPUSH
19075: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
19079: LD_INT 10
19081: PPUSH
19082: LD_VAR 0 3
19086: PPUSH
19087: LD_INT 1
19089: PPUSH
19090: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19094: LD_INT 17
19096: PPUSH
19097: LD_VAR 0 3
19101: PPUSH
19102: LD_INT 1
19104: PPUSH
19105: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19109: LD_INT 18
19111: PPUSH
19112: LD_VAR 0 3
19116: PPUSH
19117: LD_INT 1
19119: PPUSH
19120: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19124: LD_INT 60
19126: PPUSH
19127: LD_VAR 0 3
19131: PPUSH
19132: LD_INT 1
19134: PPUSH
19135: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
19139: LD_INT 61
19141: PPUSH
19142: LD_VAR 0 3
19146: PPUSH
19147: LD_INT 1
19149: PPUSH
19150: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19154: LD_INT 32
19156: PPUSH
19157: LD_VAR 0 3
19161: PPUSH
19162: LD_INT 1
19164: PPUSH
19165: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
19169: LD_INT 27
19171: PPUSH
19172: LD_VAR 0 3
19176: PPUSH
19177: LD_INT 1
19179: PPUSH
19180: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
19184: LD_INT 36
19186: PPUSH
19187: LD_VAR 0 3
19191: PPUSH
19192: LD_INT 1
19194: PPUSH
19195: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
19199: LD_INT 33
19201: PPUSH
19202: LD_VAR 0 3
19206: PPUSH
19207: LD_INT 1
19209: PPUSH
19210: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19214: LD_INT 9
19216: PPUSH
19217: LD_VAR 0 3
19221: PPUSH
19222: LD_INT 1
19224: PPUSH
19225: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
19229: LD_INT 38
19231: PPUSH
19232: LD_VAR 0 3
19236: PPUSH
19237: LD_INT 1
19239: PPUSH
19240: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19244: LD_INT 57
19246: PPUSH
19247: LD_VAR 0 3
19251: PPUSH
19252: LD_INT 1
19254: PPUSH
19255: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
19259: LD_INT 58
19261: PPUSH
19262: LD_VAR 0 3
19266: PPUSH
19267: LD_INT 1
19269: PPUSH
19270: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
19274: LD_INT 28
19276: PPUSH
19277: LD_VAR 0 3
19281: PPUSH
19282: LD_INT 1
19284: PPUSH
19285: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
19289: LD_INT 29
19291: PPUSH
19292: LD_VAR 0 3
19296: PPUSH
19297: LD_INT 1
19299: PPUSH
19300: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19304: LD_INT 30
19306: PPUSH
19307: LD_VAR 0 3
19311: PPUSH
19312: LD_INT 1
19314: PPUSH
19315: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19319: LD_INT 37
19321: PPUSH
19322: LD_VAR 0 3
19326: PPUSH
19327: LD_INT 1
19329: PPUSH
19330: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19334: LD_INT 63
19336: PPUSH
19337: LD_VAR 0 3
19341: PPUSH
19342: LD_INT 1
19344: PPUSH
19345: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
19349: LD_INT 64
19351: PPUSH
19352: LD_VAR 0 3
19356: PPUSH
19357: LD_INT 1
19359: PPUSH
19360: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19364: LD_INT 3
19366: PPUSH
19367: LD_VAR 0 3
19371: PPUSH
19372: LD_INT 1
19374: PPUSH
19375: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19379: LD_INT 4
19381: PPUSH
19382: LD_VAR 0 3
19386: PPUSH
19387: LD_INT 1
19389: PPUSH
19390: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19394: LD_INT 5
19396: PPUSH
19397: LD_VAR 0 3
19401: PPUSH
19402: LD_INT 1
19404: PPUSH
19405: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
19409: LD_INT 8
19411: PPUSH
19412: LD_VAR 0 3
19416: PPUSH
19417: LD_INT 1
19419: PPUSH
19420: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19424: LD_INT 66
19426: PPUSH
19427: LD_VAR 0 3
19431: PPUSH
19432: LD_INT 1
19434: PPUSH
19435: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
19439: LD_INT 67
19441: PPUSH
19442: LD_VAR 0 3
19446: PPUSH
19447: LD_INT 1
19449: PPUSH
19450: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19454: LD_INT 21
19456: PPUSH
19457: LD_VAR 0 3
19461: PPUSH
19462: LD_INT 1
19464: PPUSH
19465: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19469: LD_INT 22
19471: PPUSH
19472: LD_VAR 0 3
19476: PPUSH
19477: LD_INT 1
19479: PPUSH
19480: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19484: LD_INT 19
19486: PPUSH
19487: LD_VAR 0 3
19491: PPUSH
19492: LD_INT 1
19494: PPUSH
19495: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
19499: LD_INT 26
19501: PPUSH
19502: LD_VAR 0 3
19506: PPUSH
19507: LD_INT 1
19509: PPUSH
19510: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19514: LD_INT 54
19516: PPUSH
19517: LD_VAR 0 3
19521: PPUSH
19522: LD_INT 1
19524: PPUSH
19525: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19529: LD_INT 55
19531: PPUSH
19532: LD_VAR 0 3
19536: PPUSH
19537: LD_INT 1
19539: PPUSH
19540: CALL_OW 322
// for i = 0 to 39 do
19544: LD_ADDR_VAR 0 4
19548: PUSH
19549: DOUBLE
19550: LD_INT 0
19552: DEC
19553: ST_TO_ADDR
19554: LD_INT 39
19556: PUSH
19557: FOR_TO
19558: IFFALSE 19579
// SetRestrict ( i , side , true ) ;
19560: LD_VAR 0 4
19564: PPUSH
19565: LD_VAR 0 3
19569: PPUSH
19570: LD_INT 1
19572: PPUSH
19573: CALL_OW 324
19577: GO 19557
19579: POP
19580: POP
// end ; else
19581: GO 19658
19583: POP
// begin for i = 1 to 73 do
19584: LD_ADDR_VAR 0 4
19588: PUSH
19589: DOUBLE
19590: LD_INT 1
19592: DEC
19593: ST_TO_ADDR
19594: LD_INT 73
19596: PUSH
19597: FOR_TO
19598: IFFALSE 19619
// SetTech ( i , side , state_enabled ) ;
19600: LD_VAR 0 4
19604: PPUSH
19605: LD_VAR 0 3
19609: PPUSH
19610: LD_INT 1
19612: PPUSH
19613: CALL_OW 322
19617: GO 19597
19619: POP
19620: POP
// for i = 0 to 39 do
19621: LD_ADDR_VAR 0 4
19625: PUSH
19626: DOUBLE
19627: LD_INT 0
19629: DEC
19630: ST_TO_ADDR
19631: LD_INT 39
19633: PUSH
19634: FOR_TO
19635: IFFALSE 19656
// SetRestrict ( i , side , true ) ;
19637: LD_VAR 0 4
19641: PPUSH
19642: LD_VAR 0 3
19646: PPUSH
19647: LD_INT 1
19649: PPUSH
19650: CALL_OW 324
19654: GO 19634
19656: POP
19657: POP
// end ; end ; end ;
19658: GO 15663
19660: POP
19661: POP
// end ; end_of_file
19662: LD_VAR 0 2
19666: RET
// export function LScore_Init ( sides , ifPScore , yourSide ) ; begin
19667: LD_INT 0
19669: PPUSH
// LScore_Init2 ( sides , ifPScore , yourSide , false ) ;
19670: LD_VAR 0 1
19674: PPUSH
19675: LD_VAR 0 2
19679: PPUSH
19680: LD_VAR 0 3
19684: PPUSH
19685: LD_INT 0
19687: PPUSH
19688: CALL 19697 0 4
// end ;
19692: LD_VAR 0 4
19696: RET
// export function LScore_Init2 ( sides , ifPScore , yourSide , lockTeam ) ; begin
19697: LD_INT 0
19699: PPUSH
// ToLua ( initScore({ & sides [ 1 ] & , & sides [ 2 ] & , & sides [ 3 ] & , & sides [ 4 ] & , & sides [ 5 ] & , & sides [ 6 ] & , & sides [ 7 ] & , & sides [ 8 ] & }, & ifPScore & , & yourSide & , & lockTeam & ); ) ;
19700: LD_STRING initScore({
19702: PUSH
19703: LD_VAR 0 1
19707: PUSH
19708: LD_INT 1
19710: ARRAY
19711: STR
19712: PUSH
19713: LD_STRING ,
19715: STR
19716: PUSH
19717: LD_VAR 0 1
19721: PUSH
19722: LD_INT 2
19724: ARRAY
19725: STR
19726: PUSH
19727: LD_STRING ,
19729: STR
19730: PUSH
19731: LD_VAR 0 1
19735: PUSH
19736: LD_INT 3
19738: ARRAY
19739: STR
19740: PUSH
19741: LD_STRING ,
19743: STR
19744: PUSH
19745: LD_VAR 0 1
19749: PUSH
19750: LD_INT 4
19752: ARRAY
19753: STR
19754: PUSH
19755: LD_STRING ,
19757: STR
19758: PUSH
19759: LD_VAR 0 1
19763: PUSH
19764: LD_INT 5
19766: ARRAY
19767: STR
19768: PUSH
19769: LD_STRING ,
19771: STR
19772: PUSH
19773: LD_VAR 0 1
19777: PUSH
19778: LD_INT 6
19780: ARRAY
19781: STR
19782: PUSH
19783: LD_STRING ,
19785: STR
19786: PUSH
19787: LD_VAR 0 1
19791: PUSH
19792: LD_INT 7
19794: ARRAY
19795: STR
19796: PUSH
19797: LD_STRING ,
19799: STR
19800: PUSH
19801: LD_VAR 0 1
19805: PUSH
19806: LD_INT 8
19808: ARRAY
19809: STR
19810: PUSH
19811: LD_STRING },
19813: STR
19814: PUSH
19815: LD_VAR 0 2
19819: STR
19820: PUSH
19821: LD_STRING ,
19823: STR
19824: PUSH
19825: LD_VAR 0 3
19829: STR
19830: PUSH
19831: LD_STRING ,
19833: STR
19834: PUSH
19835: LD_VAR 0 4
19839: STR
19840: PUSH
19841: LD_STRING );
19843: STR
19844: PPUSH
19845: CALL_OW 559
// end ;
19849: LD_VAR 0 5
19853: RET
// export function LScore_Reset ( ) ; begin
19854: LD_INT 0
19856: PPUSH
// ToLua ( ResetScorebar(); ) ;
19857: LD_STRING ResetScorebar();
19859: PPUSH
19860: CALL_OW 559
// end ;
19864: LD_VAR 0 1
19868: RET
// export function LScore_Delete ( ID ) ; begin
19869: LD_INT 0
19871: PPUSH
// ToLua ( deleteScore( & ID & ); ) ;
19872: LD_STRING deleteScore(
19874: PUSH
19875: LD_VAR 0 1
19879: STR
19880: PUSH
19881: LD_STRING );
19883: STR
19884: PPUSH
19885: CALL_OW 559
// end ;
19889: LD_VAR 0 2
19893: RET
// export function LScore_Add_Timer ( ID , typ , totalTime ) ; begin
19894: LD_INT 0
19896: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & ,); ) ;
19897: LD_STRING AST(
19899: PUSH
19900: LD_VAR 0 1
19904: STR
19905: PUSH
19906: LD_STRING ,
19908: STR
19909: PUSH
19910: LD_VAR 0 2
19914: STR
19915: PUSH
19916: LD_STRING ,
19918: STR
19919: PUSH
19920: LD_VAR 0 3
19924: STR
19925: PUSH
19926: LD_STRING ,);
19928: STR
19929: PPUSH
19930: CALL_OW 559
// end ;
19934: LD_VAR 0 4
19938: RET
// export function LScore_Add_Timer2 ( ID , typ , totalTime , show_total ) ; begin
19939: LD_INT 0
19941: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
19942: LD_STRING AST(
19944: PUSH
19945: LD_VAR 0 1
19949: STR
19950: PUSH
19951: LD_STRING ,
19953: STR
19954: PUSH
19955: LD_VAR 0 2
19959: STR
19960: PUSH
19961: LD_STRING ,
19963: STR
19964: PUSH
19965: LD_VAR 0 3
19969: STR
19970: PUSH
19971: LD_STRING ,
19973: STR
19974: PUSH
19975: LD_VAR 0 4
19979: STR
19980: PUSH
19981: LD_STRING );
19983: STR
19984: PPUSH
19985: CALL_OW 559
// end ;
19989: LD_VAR 0 5
19993: RET
// export function LScore_Add_Timer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
19994: LD_INT 0
19996: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
19997: LD_STRING AST(
19999: PUSH
20000: LD_VAR 0 1
20004: STR
20005: PUSH
20006: LD_STRING ,
20008: STR
20009: PUSH
20010: LD_VAR 0 2
20014: STR
20015: PUSH
20016: LD_STRING ,
20018: STR
20019: PUSH
20020: LD_VAR 0 3
20024: STR
20025: PUSH
20026: LD_STRING ,
20028: STR
20029: PUSH
20030: LD_VAR 0 4
20034: STR
20035: PUSH
20036: LD_STRING ,
20038: STR
20039: PUSH
20040: LD_VAR 0 5
20044: STR
20045: PUSH
20046: LD_STRING );
20048: STR
20049: PPUSH
20050: CALL_OW 559
// end ;
20054: LD_VAR 0 6
20058: RET
// export function LScore_Add_ReverseTimer ( ID , typ , totalTime ) ; begin
20059: LD_INT 0
20061: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & ,); ) ;
20062: LD_STRING ASRT(
20064: PUSH
20065: LD_VAR 0 1
20069: STR
20070: PUSH
20071: LD_STRING ,
20073: STR
20074: PUSH
20075: LD_VAR 0 2
20079: STR
20080: PUSH
20081: LD_STRING ,
20083: STR
20084: PUSH
20085: LD_VAR 0 3
20089: STR
20090: PUSH
20091: LD_STRING ,);
20093: STR
20094: PPUSH
20095: CALL_OW 559
// end ;
20099: LD_VAR 0 4
20103: RET
// export function LScore_Add_ReverseTimer2 ( ID , typ , totalTime , show_total ) ; begin
20104: LD_INT 0
20106: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
20107: LD_STRING ASRT(
20109: PUSH
20110: LD_VAR 0 1
20114: STR
20115: PUSH
20116: LD_STRING ,
20118: STR
20119: PUSH
20120: LD_VAR 0 2
20124: STR
20125: PUSH
20126: LD_STRING ,
20128: STR
20129: PUSH
20130: LD_VAR 0 3
20134: STR
20135: PUSH
20136: LD_STRING ,
20138: STR
20139: PUSH
20140: LD_VAR 0 4
20144: STR
20145: PUSH
20146: LD_STRING );
20148: STR
20149: PPUSH
20150: CALL_OW 559
// end ;
20154: LD_VAR 0 5
20158: RET
// export function LScore_Add_ReverseTimer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
20159: LD_INT 0
20161: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
20162: LD_STRING ASRT(
20164: PUSH
20165: LD_VAR 0 1
20169: STR
20170: PUSH
20171: LD_STRING ,
20173: STR
20174: PUSH
20175: LD_VAR 0 2
20179: STR
20180: PUSH
20181: LD_STRING ,
20183: STR
20184: PUSH
20185: LD_VAR 0 3
20189: STR
20190: PUSH
20191: LD_STRING ,
20193: STR
20194: PUSH
20195: LD_VAR 0 4
20199: STR
20200: PUSH
20201: LD_STRING ,
20203: STR
20204: PUSH
20205: LD_VAR 0 5
20209: STR
20210: PUSH
20211: LD_STRING );
20213: STR
20214: PPUSH
20215: CALL_OW 559
// end ;
20219: LD_VAR 0 6
20223: RET
// export function LScore_update_Timer ( ID , currentTime ) ; begin
20224: LD_INT 0
20226: PPUSH
// ToLua ( UST( & id & , & currentTime & ); ) ;
20227: LD_STRING UST(
20229: PUSH
20230: LD_VAR 0 1
20234: STR
20235: PUSH
20236: LD_STRING ,
20238: STR
20239: PUSH
20240: LD_VAR 0 2
20244: STR
20245: PUSH
20246: LD_STRING );
20248: STR
20249: PPUSH
20250: CALL_OW 559
// end ;
20254: LD_VAR 0 3
20258: RET
// export function LScore_update_Timer2 ( ID , currentTime , totalTime ) ; begin
20259: LD_INT 0
20261: PPUSH
// ToLua ( UST( & id & , & currentTime & , & totalTime & ); ) ;
20262: LD_STRING UST(
20264: PUSH
20265: LD_VAR 0 1
20269: STR
20270: PUSH
20271: LD_STRING ,
20273: STR
20274: PUSH
20275: LD_VAR 0 2
20279: STR
20280: PUSH
20281: LD_STRING ,
20283: STR
20284: PUSH
20285: LD_VAR 0 3
20289: STR
20290: PUSH
20291: LD_STRING );
20293: STR
20294: PPUSH
20295: CALL_OW 559
// end ;
20299: LD_VAR 0 4
20303: RET
// export function LScore_Change_TimerColourRGB ( id , red , green , blue ) ; begin
20304: LD_INT 0
20306: PPUSH
// ToLua ( CCST( & id & ,{ & red & , & green & , & blue & }); ) ;
20307: LD_STRING CCST(
20309: PUSH
20310: LD_VAR 0 1
20314: STR
20315: PUSH
20316: LD_STRING ,{
20318: STR
20319: PUSH
20320: LD_VAR 0 2
20324: STR
20325: PUSH
20326: LD_STRING ,
20328: STR
20329: PUSH
20330: LD_VAR 0 3
20334: STR
20335: PUSH
20336: LD_STRING ,
20338: STR
20339: PUSH
20340: LD_VAR 0 4
20344: STR
20345: PUSH
20346: LD_STRING });
20348: STR
20349: PPUSH
20350: CALL_OW 559
// end ;
20354: LD_VAR 0 5
20358: RET
// export function LScore_Change_TimerColour ( id , side ) ; begin
20359: LD_INT 0
20361: PPUSH
// ToLua ( CCST( & id & , & side & ); ) ;
20362: LD_STRING CCST(
20364: PUSH
20365: LD_VAR 0 1
20369: STR
20370: PUSH
20371: LD_STRING ,
20373: STR
20374: PUSH
20375: LD_VAR 0 2
20379: STR
20380: PUSH
20381: LD_STRING );
20383: STR
20384: PPUSH
20385: CALL_OW 559
// end ;
20389: LD_VAR 0 3
20393: RET
// export function LScore_Add_SinglePoints ( ID , typ , totalPoints ) ; begin
20394: LD_INT 0
20396: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & ,); ) ;
20397: LD_STRING ASSP(
20399: PUSH
20400: LD_VAR 0 1
20404: STR
20405: PUSH
20406: LD_STRING ,
20408: STR
20409: PUSH
20410: LD_VAR 0 2
20414: STR
20415: PUSH
20416: LD_STRING ,
20418: STR
20419: PUSH
20420: LD_VAR 0 3
20424: STR
20425: PUSH
20426: LD_STRING ,);
20428: STR
20429: PPUSH
20430: CALL_OW 559
// end ;
20434: LD_VAR 0 4
20438: RET
// export function LScore_Add_SinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
20439: LD_INT 0
20441: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
20442: LD_STRING ASSP(
20444: PUSH
20445: LD_VAR 0 1
20449: STR
20450: PUSH
20451: LD_STRING ,
20453: STR
20454: PUSH
20455: LD_VAR 0 2
20459: STR
20460: PUSH
20461: LD_STRING ,
20463: STR
20464: PUSH
20465: LD_VAR 0 3
20469: STR
20470: PUSH
20471: LD_STRING ,
20473: STR
20474: PUSH
20475: LD_VAR 0 4
20479: STR
20480: PUSH
20481: LD_STRING );
20483: STR
20484: PPUSH
20485: CALL_OW 559
// end ;
20489: LD_VAR 0 5
20493: RET
// export function LScore_Add_SinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
20494: LD_INT 0
20496: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
20497: LD_STRING ASSP(
20499: PUSH
20500: LD_VAR 0 1
20504: STR
20505: PUSH
20506: LD_STRING ,
20508: STR
20509: PUSH
20510: LD_VAR 0 2
20514: STR
20515: PUSH
20516: LD_STRING ,
20518: STR
20519: PUSH
20520: LD_VAR 0 3
20524: STR
20525: PUSH
20526: LD_STRING ,
20528: STR
20529: PUSH
20530: LD_VAR 0 4
20534: STR
20535: PUSH
20536: LD_STRING ,
20538: STR
20539: PUSH
20540: LD_VAR 0 5
20544: STR
20545: PUSH
20546: LD_STRING );
20548: STR
20549: PPUSH
20550: CALL_OW 559
// end ;
20554: LD_VAR 0 6
20558: RET
// export function LScore_Add_ReverseSinglePoints ( ID , typ , totalPoints ) ; begin
20559: LD_INT 0
20561: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & ,); ) ;
20562: LD_STRING ASRSP(
20564: PUSH
20565: LD_VAR 0 1
20569: STR
20570: PUSH
20571: LD_STRING ,
20573: STR
20574: PUSH
20575: LD_VAR 0 2
20579: STR
20580: PUSH
20581: LD_STRING ,
20583: STR
20584: PUSH
20585: LD_VAR 0 3
20589: STR
20590: PUSH
20591: LD_STRING ,);
20593: STR
20594: PPUSH
20595: CALL_OW 559
// end ;
20599: LD_VAR 0 4
20603: RET
// export function LScore_Add_ReverseSinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
20604: LD_INT 0
20606: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
20607: LD_STRING ASRSP(
20609: PUSH
20610: LD_VAR 0 1
20614: STR
20615: PUSH
20616: LD_STRING ,
20618: STR
20619: PUSH
20620: LD_VAR 0 2
20624: STR
20625: PUSH
20626: LD_STRING ,
20628: STR
20629: PUSH
20630: LD_VAR 0 3
20634: STR
20635: PUSH
20636: LD_STRING ,
20638: STR
20639: PUSH
20640: LD_VAR 0 4
20644: STR
20645: PUSH
20646: LD_STRING );
20648: STR
20649: PPUSH
20650: CALL_OW 559
// end ;
20654: LD_VAR 0 5
20658: RET
// export function LScore_Add_ReverseSinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
20659: LD_INT 0
20661: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
20662: LD_STRING ASRSP(
20664: PUSH
20665: LD_VAR 0 1
20669: STR
20670: PUSH
20671: LD_STRING ,
20673: STR
20674: PUSH
20675: LD_VAR 0 2
20679: STR
20680: PUSH
20681: LD_STRING ,
20683: STR
20684: PUSH
20685: LD_VAR 0 3
20689: STR
20690: PUSH
20691: LD_STRING ,
20693: STR
20694: PUSH
20695: LD_VAR 0 4
20699: STR
20700: PUSH
20701: LD_STRING ,
20703: STR
20704: PUSH
20705: LD_VAR 0 5
20709: STR
20710: PUSH
20711: LD_STRING );
20713: STR
20714: PPUSH
20715: CALL_OW 559
// end ;
20719: LD_VAR 0 6
20723: RET
// export function LScore_update_SinglePoints ( ID , currentPoints ) ; begin
20724: LD_INT 0
20726: PPUSH
// ToLua ( USSP( & id & , & currentPoints & ); ) ;
20727: LD_STRING USSP(
20729: PUSH
20730: LD_VAR 0 1
20734: STR
20735: PUSH
20736: LD_STRING ,
20738: STR
20739: PUSH
20740: LD_VAR 0 2
20744: STR
20745: PUSH
20746: LD_STRING );
20748: STR
20749: PPUSH
20750: CALL_OW 559
// end ;
20754: LD_VAR 0 3
20758: RET
// export function LScore_update_SinglePoints2 ( ID , currentPoints , totalPoints ) ; begin
20759: LD_INT 0
20761: PPUSH
// ToLua ( USSP( & id & , & currentPoints & , & totalPoints & ); ) ;
20762: LD_STRING USSP(
20764: PUSH
20765: LD_VAR 0 1
20769: STR
20770: PUSH
20771: LD_STRING ,
20773: STR
20774: PUSH
20775: LD_VAR 0 2
20779: STR
20780: PUSH
20781: LD_STRING ,
20783: STR
20784: PUSH
20785: LD_VAR 0 3
20789: STR
20790: PUSH
20791: LD_STRING );
20793: STR
20794: PPUSH
20795: CALL_OW 559
// end ;
20799: LD_VAR 0 4
20803: RET
// export function LScore_Change_SinglePointsRGB ( id , red , green , blue ) ; begin
20804: LD_INT 0
20806: PPUSH
// ToLua ( CCSSP( & id & ,{ & red & , & green & , & blue & }); ) ;
20807: LD_STRING CCSSP(
20809: PUSH
20810: LD_VAR 0 1
20814: STR
20815: PUSH
20816: LD_STRING ,{
20818: STR
20819: PUSH
20820: LD_VAR 0 2
20824: STR
20825: PUSH
20826: LD_STRING ,
20828: STR
20829: PUSH
20830: LD_VAR 0 3
20834: STR
20835: PUSH
20836: LD_STRING ,
20838: STR
20839: PUSH
20840: LD_VAR 0 4
20844: STR
20845: PUSH
20846: LD_STRING });
20848: STR
20849: PPUSH
20850: CALL_OW 559
// end ;
20854: LD_VAR 0 5
20858: RET
// export function LScore_Change_SinglePoints ( id , side ) ; begin
20859: LD_INT 0
20861: PPUSH
// ToLua ( CCSSP( & id & , & side & ); ) ;
20862: LD_STRING CCSSP(
20864: PUSH
20865: LD_VAR 0 1
20869: STR
20870: PUSH
20871: LD_STRING ,
20873: STR
20874: PUSH
20875: LD_VAR 0 2
20879: STR
20880: PUSH
20881: LD_STRING );
20883: STR
20884: PPUSH
20885: CALL_OW 559
// end ;
20889: LD_VAR 0 3
20893: RET
// export function LScore_Add_Points ( ID , typ , goal ) ; begin
20894: LD_INT 0
20896: PPUSH
// ToLua ( ASP( & id & , & typ & , & goal & ); ) ;
20897: LD_STRING ASP(
20899: PUSH
20900: LD_VAR 0 1
20904: STR
20905: PUSH
20906: LD_STRING ,
20908: STR
20909: PUSH
20910: LD_VAR 0 2
20914: STR
20915: PUSH
20916: LD_STRING ,
20918: STR
20919: PUSH
20920: LD_VAR 0 3
20924: STR
20925: PUSH
20926: LD_STRING );
20928: STR
20929: PPUSH
20930: CALL_OW 559
// end ;
20934: LD_VAR 0 4
20938: RET
// export function LScore_Update_Points ( ID , side , points ) ; begin
20939: LD_INT 0
20941: PPUSH
// ToLua ( USP( & id & , & side & , & points & ); ) ;
20942: LD_STRING USP(
20944: PUSH
20945: LD_VAR 0 1
20949: STR
20950: PUSH
20951: LD_STRING ,
20953: STR
20954: PUSH
20955: LD_VAR 0 2
20959: STR
20960: PUSH
20961: LD_STRING ,
20963: STR
20964: PUSH
20965: LD_VAR 0 3
20969: STR
20970: PUSH
20971: LD_STRING );
20973: STR
20974: PPUSH
20975: CALL_OW 559
// end ;
20979: LD_VAR 0 4
20983: RET
// export function LScore_Update_PointsAll ( ID , score ) ; var i ; begin
20984: LD_INT 0
20986: PPUSH
20987: PPUSH
// for i = 1 to 8 do
20988: LD_ADDR_VAR 0 4
20992: PUSH
20993: DOUBLE
20994: LD_INT 1
20996: DEC
20997: ST_TO_ADDR
20998: LD_INT 8
21000: PUSH
21001: FOR_TO
21002: IFFALSE 21049
// ToLua ( USP( & ID & , & i & , & score [ i ] & ); ) ;
21004: LD_STRING USP(
21006: PUSH
21007: LD_VAR 0 1
21011: STR
21012: PUSH
21013: LD_STRING ,
21015: STR
21016: PUSH
21017: LD_VAR 0 4
21021: STR
21022: PUSH
21023: LD_STRING ,
21025: STR
21026: PUSH
21027: LD_VAR 0 2
21031: PUSH
21032: LD_VAR 0 4
21036: ARRAY
21037: STR
21038: PUSH
21039: LD_STRING );
21041: STR
21042: PPUSH
21043: CALL_OW 559
21047: GO 21001
21049: POP
21050: POP
// end ;
21051: LD_VAR 0 3
21055: RET
// export function LScore_Add_Pieces ( id , typ , goal , total ) ; begin
21056: LD_INT 0
21058: PPUSH
// ToLua ( ASC( & id & , & typ & , & goal & , & total & ); ) ;
21059: LD_STRING ASC(
21061: PUSH
21062: LD_VAR 0 1
21066: STR
21067: PUSH
21068: LD_STRING ,
21070: STR
21071: PUSH
21072: LD_VAR 0 2
21076: STR
21077: PUSH
21078: LD_STRING ,
21080: STR
21081: PUSH
21082: LD_VAR 0 3
21086: STR
21087: PUSH
21088: LD_STRING ,
21090: STR
21091: PUSH
21092: LD_VAR 0 4
21096: STR
21097: PUSH
21098: LD_STRING );
21100: STR
21101: PPUSH
21102: CALL_OW 559
// end ;
21106: LD_VAR 0 5
21110: RET
// export function LScore_Update_Peices ( id , sidesChunks ) ; begin
21111: LD_INT 0
21113: PPUSH
// ToLua ( USC( & id & ,{ & sidesChunks [ 1 ] & , & sidesChunks [ 2 ] & , & sidesChunks [ 3 ] & , & sidesChunks [ 4 ] & , & sidesChunks [ 5 ] & , & sidesChunks [ 6 ] & , & sidesChunks [ 7 ] & , & sidesChunks [ 8 ] & }); ) ;
21114: LD_STRING USC(
21116: PUSH
21117: LD_VAR 0 1
21121: STR
21122: PUSH
21123: LD_STRING ,{
21125: STR
21126: PUSH
21127: LD_VAR 0 2
21131: PUSH
21132: LD_INT 1
21134: ARRAY
21135: STR
21136: PUSH
21137: LD_STRING ,
21139: STR
21140: PUSH
21141: LD_VAR 0 2
21145: PUSH
21146: LD_INT 2
21148: ARRAY
21149: STR
21150: PUSH
21151: LD_STRING ,
21153: STR
21154: PUSH
21155: LD_VAR 0 2
21159: PUSH
21160: LD_INT 3
21162: ARRAY
21163: STR
21164: PUSH
21165: LD_STRING ,
21167: STR
21168: PUSH
21169: LD_VAR 0 2
21173: PUSH
21174: LD_INT 4
21176: ARRAY
21177: STR
21178: PUSH
21179: LD_STRING ,
21181: STR
21182: PUSH
21183: LD_VAR 0 2
21187: PUSH
21188: LD_INT 5
21190: ARRAY
21191: STR
21192: PUSH
21193: LD_STRING ,
21195: STR
21196: PUSH
21197: LD_VAR 0 2
21201: PUSH
21202: LD_INT 6
21204: ARRAY
21205: STR
21206: PUSH
21207: LD_STRING ,
21209: STR
21210: PUSH
21211: LD_VAR 0 2
21215: PUSH
21216: LD_INT 7
21218: ARRAY
21219: STR
21220: PUSH
21221: LD_STRING ,
21223: STR
21224: PUSH
21225: LD_VAR 0 2
21229: PUSH
21230: LD_INT 8
21232: ARRAY
21233: STR
21234: PUSH
21235: LD_STRING });
21237: STR
21238: PPUSH
21239: CALL_OW 559
// end ; end_of_file
21243: LD_VAR 0 3
21247: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
21248: LD_INT 0
21250: PPUSH
21251: PPUSH
21252: PPUSH
21253: PPUSH
21254: PPUSH
21255: PPUSH
21256: PPUSH
21257: PPUSH
21258: PPUSH
// for i := 1 to 8 do
21259: LD_ADDR_VAR 0 2
21263: PUSH
21264: DOUBLE
21265: LD_INT 1
21267: DEC
21268: ST_TO_ADDR
21269: LD_INT 8
21271: PUSH
21272: FOR_TO
21273: IFFALSE 21657
// begin if Side_Positions [ i ] then
21275: LD_EXP 21
21279: PUSH
21280: LD_VAR 0 2
21284: ARRAY
21285: IFFALSE 21655
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
21287: LD_ADDR_VAR 0 7
21291: PUSH
21292: LD_INT 22
21294: PUSH
21295: LD_VAR 0 2
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 21
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PPUSH
21318: CALL_OW 69
21322: PUSH
21323: LD_INT 0
21325: PLUS
21326: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21327: LD_ADDR_VAR 0 9
21331: PUSH
21332: LD_INT 22
21334: PUSH
21335: LD_VAR 0 2
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: LD_INT 2
21346: PUSH
21347: LD_INT 30
21349: PUSH
21350: LD_INT 0
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 30
21359: PUSH
21360: LD_INT 1
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: LIST
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PPUSH
21376: CALL_OW 69
21380: ST_TO_ADDR
// crates := 0 ;
21381: LD_ADDR_VAR 0 4
21385: PUSH
21386: LD_INT 0
21388: ST_TO_ADDR
// oil := 0 ;
21389: LD_ADDR_VAR 0 5
21393: PUSH
21394: LD_INT 0
21396: ST_TO_ADDR
// sib := 0 ;
21397: LD_ADDR_VAR 0 6
21401: PUSH
21402: LD_INT 0
21404: ST_TO_ADDR
// if bases then
21405: LD_VAR 0 9
21409: IFFALSE 21515
// begin for j in bases do
21411: LD_ADDR_VAR 0 3
21415: PUSH
21416: LD_VAR 0 9
21420: PUSH
21421: FOR_IN
21422: IFFALSE 21513
// begin base := GetBase ( j ) ;
21424: LD_ADDR_VAR 0 8
21428: PUSH
21429: LD_VAR 0 3
21433: PPUSH
21434: CALL_OW 274
21438: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
21439: LD_ADDR_VAR 0 4
21443: PUSH
21444: LD_VAR 0 4
21448: PUSH
21449: LD_VAR 0 8
21453: PPUSH
21454: LD_INT 1
21456: PPUSH
21457: CALL_OW 275
21461: PLUS
21462: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
21463: LD_ADDR_VAR 0 5
21467: PUSH
21468: LD_VAR 0 5
21472: PUSH
21473: LD_VAR 0 8
21477: PPUSH
21478: LD_INT 2
21480: PPUSH
21481: CALL_OW 275
21485: PLUS
21486: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
21487: LD_ADDR_VAR 0 6
21491: PUSH
21492: LD_VAR 0 6
21496: PUSH
21497: LD_VAR 0 8
21501: PPUSH
21502: LD_INT 3
21504: PPUSH
21505: CALL_OW 275
21509: PLUS
21510: ST_TO_ADDR
// end ;
21511: GO 21421
21513: POP
21514: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
21515: LD_STRING setSpecText(
21517: PUSH
21518: LD_VAR 0 2
21522: STR
21523: PUSH
21524: LD_STRING ,
21526: STR
21527: PUSH
21528: LD_INT 2
21530: STR
21531: PUSH
21532: LD_STRING ,
21534: STR
21535: PUSH
21536: LD_VAR 0 4
21540: STR
21541: PUSH
21542: LD_STRING )
21544: STR
21545: PPUSH
21546: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
21550: LD_STRING setSpecText(
21552: PUSH
21553: LD_VAR 0 2
21557: STR
21558: PUSH
21559: LD_STRING ,
21561: STR
21562: PUSH
21563: LD_INT 3
21565: STR
21566: PUSH
21567: LD_STRING ,
21569: STR
21570: PUSH
21571: LD_VAR 0 5
21575: STR
21576: PUSH
21577: LD_STRING )
21579: STR
21580: PPUSH
21581: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
21585: LD_STRING setSpecText(
21587: PUSH
21588: LD_VAR 0 2
21592: STR
21593: PUSH
21594: LD_STRING ,
21596: STR
21597: PUSH
21598: LD_INT 4
21600: STR
21601: PUSH
21602: LD_STRING ,
21604: STR
21605: PUSH
21606: LD_VAR 0 6
21610: STR
21611: PUSH
21612: LD_STRING )
21614: STR
21615: PPUSH
21616: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
21620: LD_STRING setSpecText(
21622: PUSH
21623: LD_VAR 0 2
21627: STR
21628: PUSH
21629: LD_STRING ,
21631: STR
21632: PUSH
21633: LD_INT 5
21635: STR
21636: PUSH
21637: LD_STRING ,
21639: STR
21640: PUSH
21641: LD_VAR 0 7
21645: STR
21646: PUSH
21647: LD_STRING )
21649: STR
21650: PPUSH
21651: CALL_OW 559
// end ; end ;
21655: GO 21272
21657: POP
21658: POP
// end ;
21659: LD_VAR 0 1
21663: RET
// every 0 0$1 do
21664: GO 21666
21666: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
21667: LD_STRING setSpecLogoNumber(
21669: PUSH
21670: LD_INT 2
21672: STR
21673: PUSH
21674: LD_STRING ,
21676: STR
21677: PUSH
21678: LD_INT 1
21680: STR
21681: PUSH
21682: LD_STRING )
21684: STR
21685: PPUSH
21686: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
21690: LD_STRING setSpecLogoNumber(
21692: PUSH
21693: LD_INT 3
21695: STR
21696: PUSH
21697: LD_STRING ,
21699: STR
21700: PUSH
21701: LD_INT 2
21703: STR
21704: PUSH
21705: LD_STRING )
21707: STR
21708: PPUSH
21709: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
21713: LD_STRING setSpecLogoNumber(
21715: PUSH
21716: LD_INT 4
21718: STR
21719: PUSH
21720: LD_STRING ,
21722: STR
21723: PUSH
21724: LD_INT 3
21726: STR
21727: PUSH
21728: LD_STRING )
21730: STR
21731: PPUSH
21732: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
21736: LD_STRING setSpecLogoNumber(
21738: PUSH
21739: LD_INT 5
21741: STR
21742: PUSH
21743: LD_STRING ,
21745: STR
21746: PUSH
21747: LD_INT 4
21749: STR
21750: PUSH
21751: LD_STRING )
21753: STR
21754: PPUSH
21755: CALL_OW 559
// end ;
21759: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
21760: LD_INT 2
21762: PUSH
21763: LD_INT 30
21765: PUSH
21766: LD_INT 0
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 30
21775: PUSH
21776: LD_INT 1
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: LIST
21787: PPUSH
21788: CALL_OW 69
21792: IFFALSE 21802
21794: GO 21796
21796: DISABLE
// begin enable ;
21797: ENABLE
// UpdateSpectatorBar ;
21798: CALL 21248 0 0
// end ;
21802: END
