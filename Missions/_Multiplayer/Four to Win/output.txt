// export def_public_score , def_amount_score ; export is_depot , number_of_breastworks , number_of_people , amount_of_apemen , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , spawning_koef_of_apemen , respawning_time_min , respawning_time_max , amount_score , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id , king_territory , final_count , Player_Side , player_team ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if MultiPlayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type = mp_game_type ;
  79: LD_ADDR_EXP 41
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side = mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  99: LD_ADDR_EXP 21
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 109: LD_ADDR_EXP 18
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 119: LD_ADDR_EXP 22
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 20
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams = mp_teams ;
 139: LD_ADDR_EXP 19
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 352
// begin Game_Type = 3 ;
 151: LD_ADDR_EXP 41
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side = 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions = [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 167: LD_ADDR_EXP 21
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 0
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 18
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 2
 219: PUSH
 220: LD_INT 2
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations = [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 245: LD_ADDR_EXP 22
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 1
 255: PUSH
 256: LD_INT 2
 258: PUSH
 259: LD_INT 2
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 20
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams = [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 323: LD_ADDR_EXP 19
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 4
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: ST_TO_ADDR
// end ; for i := 1 to 8 do
 352: LD_ADDR_VAR 0 2
 356: PUSH
 357: DOUBLE
 358: LD_INT 1
 360: DEC
 361: ST_TO_ADDR
 362: LD_INT 8
 364: PUSH
 365: FOR_TO
 366: IFFALSE 453
// if Multiplayer_GetPlayerIsSpec ( i ) then
 368: LD_VAR 0 2
 372: PPUSH
 373: CALL_OW 530
 377: IFFALSE 451
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 379: LD_ADDR_EXP 21
 383: PUSH
 384: LD_EXP 21
 388: PPUSH
 389: LD_VAR 0 2
 393: PPUSH
 394: LD_INT 0
 396: PPUSH
 397: CALL_OW 1
 401: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 402: LD_ADDR_EXP 19
 406: PUSH
 407: LD_EXP 19
 411: PPUSH
 412: LD_EXP 18
 416: PUSH
 417: LD_VAR 0 2
 421: ARRAY
 422: PPUSH
 423: LD_EXP 19
 427: PUSH
 428: LD_EXP 18
 432: PUSH
 433: LD_VAR 0 2
 437: ARRAY
 438: ARRAY
 439: PUSH
 440: LD_VAR 0 2
 444: DIFF
 445: PPUSH
 446: CALL_OW 1
 450: ST_TO_ADDR
// end ;
 451: GO 365
 453: POP
 454: POP
// if MultiPlayer then
 455: LD_OWVAR 4
 459: IFFALSE 666
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 461: LD_ADDR_EXP 43
 465: PUSH
 466: LD_INT 0
 468: PPUSH
 469: CALL_OW 426
 473: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 474: LD_ADDR_EXP 44
 478: PUSH
 479: LD_INT 1
 481: PPUSH
 482: CALL_OW 426
 486: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
 487: LD_ADDR_EXP 45
 491: PUSH
 492: LD_INT 2
 494: PPUSH
 495: CALL_OW 426
 499: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 500: LD_ADDR_EXP 46
 504: PUSH
 505: LD_INT 3
 507: PPUSH
 508: CALL_OW 426
 512: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 513: LD_ADDR_EXP 47
 517: PUSH
 518: LD_INT 4
 520: PPUSH
 521: CALL_OW 426
 525: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 526: LD_ADDR_EXP 48
 530: PUSH
 531: LD_INT 5
 533: PPUSH
 534: CALL_OW 426
 538: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 539: LD_ADDR_EXP 50
 543: PUSH
 544: LD_INT 10
 546: PPUSH
 547: CALL_OW 426
 551: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 552: LD_ADDR_EXP 51
 556: PUSH
 557: LD_INT 11
 559: PPUSH
 560: CALL_OW 426
 564: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 565: LD_ADDR_EXP 52
 569: PUSH
 570: LD_INT 12
 572: PPUSH
 573: CALL_OW 426
 577: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 13 ) ;
 578: LD_ADDR_EXP 53
 582: PUSH
 583: LD_INT 13
 585: PPUSH
 586: CALL_OW 426
 590: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 14 ) ;
 591: LD_ADDR_EXP 54
 595: PUSH
 596: LD_INT 14
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 604: LD_ADDR_EXP 55
 608: PUSH
 609: LD_INT 15
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_public_score = GetMultiplayerSetting ( 16 ) ;
 617: LD_ADDR_EXP 1
 621: PUSH
 622: LD_INT 16
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// def_amount_score = GetMultiplayerSetting ( 17 ) ;
 630: LD_ADDR_EXP 2
 634: PUSH
 635: LD_INT 17
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 643: LD_ADDR_VAR 0 3
 647: PUSH
 648: LD_INT 22
 650: PPUSH
 651: CALL_OW 426
 655: ST_TO_ADDR
// def_win_rules = 0 ;
 656: LD_ADDR_EXP 17
 660: PUSH
 661: LD_INT 0
 663: ST_TO_ADDR
// end else
 664: GO 798
// begin randomize ;
 666: CALL_OW 10
// def_base_level = 3 ;
 670: LD_ADDR_EXP 43
 674: PUSH
 675: LD_INT 3
 677: ST_TO_ADDR
// def_amount_of_people = 1 ;
 678: LD_ADDR_EXP 44
 682: PUSH
 683: LD_INT 1
 685: ST_TO_ADDR
// def_skill_level = 1 ;
 686: LD_ADDR_EXP 45
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// def_starting_resources = 2 ;
 694: LD_ADDR_EXP 46
 698: PUSH
 699: LD_INT 2
 701: ST_TO_ADDR
// def_shipments_density = 1 ;
 702: LD_ADDR_EXP 47
 706: PUSH
 707: LD_INT 1
 709: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
 710: LD_ADDR_EXP 48
 714: PUSH
 715: LD_INT 0
 717: ST_TO_ADDR
// def_shared_vision = 1 ;
 718: LD_ADDR_EXP 50
 722: PUSH
 723: LD_INT 1
 725: ST_TO_ADDR
// def_morale_flags = 1 ;
 726: LD_ADDR_EXP 51
 730: PUSH
 731: LD_INT 1
 733: ST_TO_ADDR
// def_siberite_detection = 1 ;
 734: LD_ADDR_EXP 52
 738: PUSH
 739: LD_INT 1
 741: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
 742: LD_ADDR_EXP 54
 746: PUSH
 747: LD_INT 3
 749: ST_TO_ADDR
// def_people_respawning = 2 ;
 750: LD_ADDR_EXP 53
 754: PUSH
 755: LD_INT 2
 757: ST_TO_ADDR
// def_siberite_bomb = 0 ;
 758: LD_ADDR_EXP 55
 762: PUSH
 763: LD_INT 0
 765: ST_TO_ADDR
// def_public_score = 1 ;
 766: LD_ADDR_EXP 1
 770: PUSH
 771: LD_INT 1
 773: ST_TO_ADDR
// def_amount_score = 0 ;
 774: LD_ADDR_EXP 2
 778: PUSH
 779: LD_INT 0
 781: ST_TO_ADDR
// tech_level = 4 ;
 782: LD_ADDR_VAR 0 3
 786: PUSH
 787: LD_INT 4
 789: ST_TO_ADDR
// def_win_rules = 0 ;
 790: LD_ADDR_EXP 17
 794: PUSH
 795: LD_INT 0
 797: ST_TO_ADDR
// end ; Player_Side = Your_Side ;
 798: LD_ADDR_EXP 31
 802: PUSH
 803: LD_OWVAR 2
 807: ST_TO_ADDR
// player_team = Side_Teams [ Player_Side ] ;
 808: LD_ADDR_EXP 32
 812: PUSH
 813: LD_EXP 18
 817: PUSH
 818: LD_EXP 31
 822: ARRAY
 823: ST_TO_ADDR
// InitGameRules ;
 824: CALL 7781 0 0
// if def_game_rules = 0 then
 828: LD_EXP 42
 832: PUSH
 833: LD_INT 0
 835: EQUAL
 836: IFFALSE 863
// begin if isSGUI then
 838: LD_OWVAR 83
 842: IFFALSE 850
// setMpTechs ( ) else
 844: CALL 15422 0 0
 848: GO 863
// begin SetMpTechLevel ( tech_level + 1 ) ;
 850: LD_VAR 0 3
 854: PUSH
 855: LD_INT 1
 857: PLUS
 858: PPUSH
 859: CALL 15569 0 1
// end ; end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 863: LD_ADDR_EXP 3
 867: PUSH
 868: LD_INT 0
 870: PUSH
 871: LD_INT 1
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: LD_INT 1
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: LIST
 884: LIST
 885: PUSH
 886: LD_EXP 43
 890: PUSH
 891: LD_INT 1
 893: PLUS
 894: ARRAY
 895: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
 896: LD_ADDR_EXP 4
 900: PUSH
 901: LD_INT 0
 903: PUSH
 904: LD_INT 0
 906: PUSH
 907: LD_INT 2
 909: PUSH
 910: LD_INT 4
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: LIST
 918: PUSH
 919: LD_EXP 43
 923: PUSH
 924: LD_INT 1
 926: PLUS
 927: ARRAY
 928: ST_TO_ADDR
// number_of_people = [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 929: LD_ADDR_EXP 5
 933: PUSH
 934: LD_INT 9
 936: PUSH
 937: LD_INT 12
 939: PUSH
 940: LD_INT 15
 942: PUSH
 943: LD_INT 24
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: LIST
 950: LIST
 951: PUSH
 952: LD_EXP 44
 956: PUSH
 957: LD_INT 1
 959: PLUS
 960: ARRAY
 961: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 962: LD_ADDR_EXP 7
 966: PUSH
 967: LD_INT 2
 969: PUSH
 970: LD_INT 3
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: LD_INT 5
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: PUSH
 985: LD_EXP 45
 989: PUSH
 990: LD_INT 1
 992: PLUS
 993: ARRAY
 994: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 995: LD_ADDR_EXP 9
 999: PUSH
1000: LD_INT 0
1002: PUSH
1003: LD_INT 0
1005: PUSH
1006: LD_INT 0
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 30
1016: PUSH
1017: LD_INT 0
1019: PUSH
1020: LD_INT 0
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: PUSH
1028: LD_INT 50
1030: PUSH
1031: LD_INT 20
1033: PUSH
1034: LD_INT 0
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: LIST
1041: PUSH
1042: LD_INT 80
1044: PUSH
1045: LD_INT 40
1047: PUSH
1048: LD_INT 20
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: PUSH
1062: LD_EXP 46
1066: PUSH
1067: LD_INT 1
1069: PLUS
1070: ARRAY
1071: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1072: LD_ADDR_EXP 8
1076: PUSH
1077: LD_INT 10
1079: PUSH
1080: EMPTY
1081: LIST
1082: PUSH
1083: LD_INT 7
1085: PUSH
1086: LD_INT 14
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 6
1095: PUSH
1096: LD_INT 12
1098: PUSH
1099: LD_INT 18
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 5
1109: PUSH
1110: LD_INT 10
1112: PUSH
1113: LD_INT 15
1115: PUSH
1116: LD_INT 20
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: LIST
1129: LIST
1130: PUSH
1131: LD_EXP 46
1135: PUSH
1136: LD_INT 1
1138: PLUS
1139: ARRAY
1140: ST_TO_ADDR
// shipments_density = [ 15 , 20 , 25 ] [ def_shipments_density + 1 ] ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_INT 15
1148: PUSH
1149: LD_INT 20
1151: PUSH
1152: LD_INT 25
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_EXP 47
1164: PUSH
1165: LD_INT 1
1167: PLUS
1168: ARRAY
1169: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1170: LD_ADDR_EXP 6
1174: PUSH
1175: LD_INT 0
1177: PUSH
1178: LD_INT 1
1180: PUSH
1181: LD_INT 2
1183: PUSH
1184: LD_INT 3
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_EXP 54
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: ST_TO_ADDR
// spawning_koef_of_apemen = [ 0 , 165 , 140 , 115 ] [ def_amount_of_apemen + 1 ] ;
1203: LD_ADDR_EXP 12
1207: PUSH
1208: LD_INT 0
1210: PUSH
1211: LD_INT 165
1213: PUSH
1214: LD_INT 140
1216: PUSH
1217: LD_INT 115
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: LD_EXP 54
1230: PUSH
1231: LD_INT 1
1233: PLUS
1234: ARRAY
1235: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1236: LD_ADDR_EXP 13
1240: PUSH
1241: LD_INT 0
1243: PUSH
1244: LD_INT 8400
1246: PUSH
1247: LD_INT 1750
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_EXP 53
1259: PUSH
1260: LD_INT 1
1262: PLUS
1263: ARRAY
1264: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1265: LD_ADDR_EXP 14
1269: PUSH
1270: LD_INT 0
1272: PUSH
1273: LD_INT 21000
1275: PUSH
1276: LD_INT 4200
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: LIST
1283: PUSH
1284: LD_EXP 53
1288: PUSH
1289: LD_INT 1
1291: PLUS
1292: ARRAY
1293: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1294: LD_ADDR_EXP 11
1298: PUSH
1299: LD_INT 1
1301: NEG
1302: PUSH
1303: LD_INT 350
1305: PUSH
1306: LD_INT 700
1308: PUSH
1309: LD_INT 1400
1311: PUSH
1312: LD_INT 0
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: PUSH
1322: LD_EXP 51
1326: PUSH
1327: LD_INT 1
1329: PLUS
1330: ARRAY
1331: ST_TO_ADDR
// battle_flags_id = [ ] ;
1332: LD_ADDR_EXP 28
1336: PUSH
1337: EMPTY
1338: ST_TO_ADDR
// amount_score = [ 200 , 300 , 500 , 700 , 1000 , 1500 ] [ def_amount_score + 1 ] ;
1339: LD_ADDR_EXP 15
1343: PUSH
1344: LD_INT 200
1346: PUSH
1347: LD_INT 300
1349: PUSH
1350: LD_INT 500
1352: PUSH
1353: LD_INT 700
1355: PUSH
1356: LD_INT 1000
1358: PUSH
1359: LD_INT 1500
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: PUSH
1370: LD_EXP 2
1374: PUSH
1375: LD_INT 1
1377: PLUS
1378: ARRAY
1379: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1380: LD_ADDR_EXP 16
1384: PUSH
1385: LD_INT 0
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 63000
1393: PUSH
1394: LD_INT 126000
1396: PUSH
1397: LD_INT 189000
1399: PUSH
1400: LD_INT 252000
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: PUSH
1411: LD_EXP 55
1415: PUSH
1416: LD_INT 1
1418: PLUS
1419: ARRAY
1420: ST_TO_ADDR
// if not def_builduptime then
1421: LD_EXP 56
1425: NOT
1426: IFFALSE 1431
// disable ( 600 ) ;
1428: LD_INT 600
1430: DISABLE_MARKED
// king_territory = KopecStred ;
1431: LD_ADDR_EXP 29
1435: PUSH
1436: LD_INT 2
1438: ST_TO_ADDR
// final_count = amount_score ;
1439: LD_ADDR_EXP 30
1443: PUSH
1444: LD_EXP 15
1448: ST_TO_ADDR
// end ;
1449: LD_VAR 0 1
1453: RET
// function init_map ; var i ; begin
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
// extra_oil_deposits_locations := [ [ 53 , 26 ] , [ 51 , 53 ] , [ 129 , 20 ] , [ 155 , 53 ] , [ 187 , 139 ] , [ 183 , 107 ] , [ 106 , 135 ] , [ 80 , 106 ] ] ;
1458: LD_ADDR_EXP 27
1462: PUSH
1463: LD_INT 53
1465: PUSH
1466: LD_INT 26
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 51
1475: PUSH
1476: LD_INT 53
1478: PUSH
1479: EMPTY
1480: LIST
1481: LIST
1482: PUSH
1483: LD_INT 129
1485: PUSH
1486: LD_INT 20
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: PUSH
1493: LD_INT 155
1495: PUSH
1496: LD_INT 53
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: PUSH
1503: LD_INT 187
1505: PUSH
1506: LD_INT 139
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PUSH
1513: LD_INT 183
1515: PUSH
1516: LD_INT 107
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: PUSH
1523: LD_INT 106
1525: PUSH
1526: LD_INT 135
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: PUSH
1533: LD_INT 80
1535: PUSH
1536: LD_INT 106
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: ST_TO_ADDR
// depot_def := [ [ 29 , 22 , 3 ] , [ 154 , 21 , 3 ] , [ 85 , 138 , 0 ] , [ 212 , 141 , 5 ] ] ;
1553: LD_ADDR_EXP 24
1557: PUSH
1558: LD_INT 29
1560: PUSH
1561: LD_INT 22
1563: PUSH
1564: LD_INT 3
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 154
1574: PUSH
1575: LD_INT 21
1577: PUSH
1578: LD_INT 3
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: LIST
1585: PUSH
1586: LD_INT 85
1588: PUSH
1589: LD_INT 138
1591: PUSH
1592: LD_INT 0
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 212
1602: PUSH
1603: LD_INT 141
1605: PUSH
1606: LD_INT 5
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: LIST
1618: LIST
1619: ST_TO_ADDR
// start_def := [ [ 33 , 25 ] , [ 151 , 24 ] , [ 89 , 135 ] , [ 205 , 137 ] ] ;
1620: LD_ADDR_EXP 26
1624: PUSH
1625: LD_INT 33
1627: PUSH
1628: LD_INT 25
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PUSH
1635: LD_INT 151
1637: PUSH
1638: LD_INT 24
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 89
1647: PUSH
1648: LD_INT 135
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 205
1657: PUSH
1658: LD_INT 137
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: ST_TO_ADDR
// breastworks_def := [ [ [ 46 , 13 , 4 ] , [ 43 , 39 , 4 ] , [ 47 , 25 , 5 ] , [ 45 , 44 , 5 ] ] , [ [ 129 , 12 , 0 ] , [ 153 , 34 , 1 ] , [ 139 , 24 , 0 ] , [ 158 , 41 , 0 ] ] , [ [ 84 , 121 , 4 ] , [ 109 , 143 , 4 ] , [ 87 , 126 , 4 ] , [ 111 , 148 , 4 ] ] , [ [ 194 , 146 , 2 ] , [ 195 , 121 , 1 ] , [ 193 , 135 , 2 ] , [ 192 , 116 , 2 ] ] , ] ;
1671: LD_ADDR_EXP 25
1675: PUSH
1676: LD_INT 46
1678: PUSH
1679: LD_INT 13
1681: PUSH
1682: LD_INT 4
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: LIST
1689: PUSH
1690: LD_INT 43
1692: PUSH
1693: LD_INT 39
1695: PUSH
1696: LD_INT 4
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 47
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: LD_INT 5
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 45
1720: PUSH
1721: LD_INT 44
1723: PUSH
1724: LD_INT 5
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: LIST
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: PUSH
1738: LD_INT 129
1740: PUSH
1741: LD_INT 12
1743: PUSH
1744: LD_INT 0
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: PUSH
1752: LD_INT 153
1754: PUSH
1755: LD_INT 34
1757: PUSH
1758: LD_INT 1
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 139
1768: PUSH
1769: LD_INT 24
1771: PUSH
1772: LD_INT 0
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 158
1782: PUSH
1783: LD_INT 41
1785: PUSH
1786: LD_INT 0
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 84
1802: PUSH
1803: LD_INT 121
1805: PUSH
1806: LD_INT 4
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 109
1816: PUSH
1817: LD_INT 143
1819: PUSH
1820: LD_INT 4
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PUSH
1828: LD_INT 87
1830: PUSH
1831: LD_INT 126
1833: PUSH
1834: LD_INT 4
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 111
1844: PUSH
1845: LD_INT 148
1847: PUSH
1848: LD_INT 4
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 194
1864: PUSH
1865: LD_INT 146
1867: PUSH
1868: LD_INT 2
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: PUSH
1876: LD_INT 195
1878: PUSH
1879: LD_INT 121
1881: PUSH
1882: LD_INT 1
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 193
1892: PUSH
1893: LD_INT 135
1895: PUSH
1896: LD_INT 2
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 192
1906: PUSH
1907: LD_INT 116
1909: PUSH
1910: LD_INT 2
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: LIST
1928: LIST
1929: ST_TO_ADDR
// if def_extra_oil_deposits then
1930: LD_EXP 48
1934: IFFALSE 1978
// for i in extra_oil_deposits_locations do
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_EXP 27
1945: PUSH
1946: FOR_IN
1947: IFFALSE 1976
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1949: LD_VAR 0 2
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PPUSH
1958: LD_VAR 0 2
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PPUSH
1967: LD_INT 2
1969: PPUSH
1970: CALL_OW 62
1974: GO 1946
1976: POP
1977: POP
// end ;
1978: LD_VAR 0 1
1982: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1983: LD_INT 0
1985: PPUSH
1986: PPUSH
1987: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1988: LD_ADDR_EXP 23
1992: PUSH
1993: LD_EXP 18
1997: PUSH
1998: LD_INT 0
2000: PUSH
2001: EMPTY
2002: LIST
2003: DIFF
2004: PUSH
2005: LD_INT 1
2007: GREATER
2008: ST_TO_ADDR
// if not Team_Game then
2009: LD_EXP 23
2013: NOT
2014: IFFALSE 2112
// begin for i = 1 to 8 do
2016: LD_ADDR_VAR 0 2
2020: PUSH
2021: DOUBLE
2022: LD_INT 1
2024: DEC
2025: ST_TO_ADDR
2026: LD_INT 8
2028: PUSH
2029: FOR_TO
2030: IFFALSE 2108
// for j = 1 to 8 do
2032: LD_ADDR_VAR 0 3
2036: PUSH
2037: DOUBLE
2038: LD_INT 1
2040: DEC
2041: ST_TO_ADDR
2042: LD_INT 8
2044: PUSH
2045: FOR_TO
2046: IFFALSE 2104
// if i <> j then
2048: LD_VAR 0 2
2052: PUSH
2053: LD_VAR 0 3
2057: NONEQUAL
2058: IFFALSE 2082
// SetAttitude ( i , j , att_neutral , true ) else
2060: LD_VAR 0 2
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: LD_INT 0
2072: PPUSH
2073: LD_INT 1
2075: PPUSH
2076: CALL_OW 80
2080: GO 2102
// SetAttitude ( i , j , att_friend , true ) ;
2082: LD_VAR 0 2
2086: PPUSH
2087: LD_VAR 0 3
2091: PPUSH
2092: LD_INT 1
2094: PPUSH
2095: LD_INT 1
2097: PPUSH
2098: CALL_OW 80
2102: GO 2045
2104: POP
2105: POP
2106: GO 2029
2108: POP
2109: POP
// end else
2110: GO 2287
// begin if def_shared_vision then
2112: LD_EXP 50
2116: IFFALSE 2181
// begin for i in Teams do
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_EXP 19
2127: PUSH
2128: FOR_IN
2129: IFFALSE 2179
// for j = 2 to i do
2131: LD_ADDR_VAR 0 3
2135: PUSH
2136: DOUBLE
2137: LD_INT 2
2139: DEC
2140: ST_TO_ADDR
2141: LD_VAR 0 2
2145: PUSH
2146: FOR_TO
2147: IFFALSE 2175
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2149: LD_VAR 0 2
2153: PUSH
2154: LD_VAR 0 3
2158: ARRAY
2159: PPUSH
2160: LD_VAR 0 2
2164: PUSH
2165: LD_INT 1
2167: ARRAY
2168: PPUSH
2169: CALL_OW 343
2173: GO 2146
2175: POP
2176: POP
2177: GO 2128
2179: POP
2180: POP
// end ; for i = 1 to 8 do
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: DOUBLE
2187: LD_INT 1
2189: DEC
2190: ST_TO_ADDR
2191: LD_INT 8
2193: PUSH
2194: FOR_TO
2195: IFFALSE 2285
// for j = 1 to 8 do
2197: LD_ADDR_VAR 0 3
2201: PUSH
2202: DOUBLE
2203: LD_INT 1
2205: DEC
2206: ST_TO_ADDR
2207: LD_INT 8
2209: PUSH
2210: FOR_TO
2211: IFFALSE 2281
// if Side_Teams [ i ] = Side_Teams [ j ] then
2213: LD_EXP 18
2217: PUSH
2218: LD_VAR 0 2
2222: ARRAY
2223: PUSH
2224: LD_EXP 18
2228: PUSH
2229: LD_VAR 0 3
2233: ARRAY
2234: EQUAL
2235: IFFALSE 2259
// SetAttitude ( i , j , att_friend , true ) else
2237: LD_VAR 0 2
2241: PPUSH
2242: LD_VAR 0 3
2246: PPUSH
2247: LD_INT 1
2249: PPUSH
2250: LD_INT 1
2252: PPUSH
2253: CALL_OW 80
2257: GO 2279
// SetAttitude ( i , j , att_enemy , true ) ;
2259: LD_VAR 0 2
2263: PPUSH
2264: LD_VAR 0 3
2268: PPUSH
2269: LD_INT 2
2271: PPUSH
2272: LD_INT 1
2274: PPUSH
2275: CALL_OW 80
2279: GO 2210
2281: POP
2282: POP
2283: GO 2194
2285: POP
2286: POP
// end ; end ;
2287: LD_VAR 0 1
2291: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2292: LD_INT 0
2294: PPUSH
2295: PPUSH
2296: PPUSH
2297: PPUSH
// result := [ ] ;
2298: LD_ADDR_VAR 0 6
2302: PUSH
2303: EMPTY
2304: ST_TO_ADDR
// for i := 1 to count do
2305: LD_ADDR_VAR 0 7
2309: PUSH
2310: DOUBLE
2311: LD_INT 1
2313: DEC
2314: ST_TO_ADDR
2315: LD_VAR 0 1
2319: PUSH
2320: FOR_TO
2321: IFFALSE 2717
// begin uc_direction := Rand ( 0 , 5 ) ;
2323: LD_ADDR_OWVAR 24
2327: PUSH
2328: LD_INT 0
2330: PPUSH
2331: LD_INT 5
2333: PPUSH
2334: CALL_OW 12
2338: ST_TO_ADDR
// if commander then
2339: LD_LOC 1
2343: IFFALSE 2452
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2345: LD_ADDR_OWVAR 26
2349: PUSH
2350: LD_OWVAR 19
2354: PUSH
2355: LD_OWVAR 20
2359: ARRAY
2360: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2361: LD_INT 1
2363: PPUSH
2364: LD_INT 2
2366: PPUSH
2367: CALL_OW 12
2371: PPUSH
2372: LD_VAR 0 2
2376: PPUSH
2377: LD_EXP 7
2381: PUSH
2382: LD_INT 2
2384: PLUS
2385: PPUSH
2386: CALL_OW 380
// hc_importance := 105 ;
2390: LD_ADDR_OWVAR 32
2394: PUSH
2395: LD_INT 105
2397: ST_TO_ADDR
// commander := false ;
2398: LD_ADDR_LOC 1
2402: PUSH
2403: LD_INT 0
2405: ST_TO_ADDR
// if Multiplayer then
2406: LD_OWVAR 4
2410: IFFALSE 2450
// begin hc_gallery := MULTIAVATARS ;
2412: LD_ADDR_OWVAR 33
2416: PUSH
2417: LD_STRING MULTIAVATARS
2419: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2420: LD_ADDR_OWVAR 34
2424: PUSH
2425: LD_OWVAR 20
2429: PPUSH
2430: CALL_OW 525
2434: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2435: LD_ADDR_OWVAR 27
2439: PUSH
2440: LD_OWVAR 20
2444: PPUSH
2445: CALL_OW 526
2449: ST_TO_ADDR
// end ; end else
2450: GO 2515
// begin hc_name :=  ;
2452: LD_ADDR_OWVAR 26
2456: PUSH
2457: LD_STRING 
2459: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2460: LD_INT 1
2462: PPUSH
2463: LD_INT 2
2465: PPUSH
2466: CALL_OW 12
2470: PPUSH
2471: LD_VAR 0 2
2475: PPUSH
2476: LD_EXP 7
2480: PPUSH
2481: CALL_OW 380
// hc_importance := 0 ;
2485: LD_ADDR_OWVAR 32
2489: PUSH
2490: LD_INT 0
2492: ST_TO_ADDR
// if Multiplayer then
2493: LD_OWVAR 4
2497: IFFALSE 2515
// begin hc_gallery :=  ;
2499: LD_ADDR_OWVAR 33
2503: PUSH
2504: LD_STRING 
2506: ST_TO_ADDR
// hc_face_number := 0 ;
2507: LD_ADDR_OWVAR 34
2511: PUSH
2512: LD_INT 0
2514: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2515: LD_ADDR_VAR 0 9
2519: PUSH
2520: CALL_OW 44
2524: ST_TO_ADDR
// if global_defined then
2525: LD_LOC 3
2529: IFFALSE 2669
// begin if ( cl = class_soldier ) then
2531: LD_VAR 0 2
2535: PUSH
2536: LD_INT 1
2538: EQUAL
2539: IFFALSE 2559
// j := i + soldiers_created else
2541: LD_ADDR_VAR 0 8
2545: PUSH
2546: LD_VAR 0 7
2550: PUSH
2551: LD_LOC 4
2555: PLUS
2556: ST_TO_ADDR
2557: GO 2569
// j := i ;
2559: LD_ADDR_VAR 0 8
2563: PUSH
2564: LD_VAR 0 7
2568: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2569: LD_LOC 2
2573: PUSH
2574: LD_VAR 0 2
2578: ARRAY
2579: PUSH
2580: LD_VAR 0 8
2584: ARRAY
2585: PPUSH
2586: LD_VAR 0 9
2590: PPUSH
2591: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2595: LD_VAR 0 9
2599: PPUSH
2600: LD_INT 2
2602: PPUSH
2603: LD_LOC 2
2607: PUSH
2608: LD_VAR 0 2
2612: ARRAY
2613: PUSH
2614: LD_VAR 0 8
2618: ARRAY
2619: PPUSH
2620: LD_INT 2
2622: PPUSH
2623: CALL_OW 260
2627: PPUSH
2628: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2632: LD_VAR 0 9
2636: PPUSH
2637: LD_INT 1
2639: PPUSH
2640: LD_LOC 2
2644: PUSH
2645: LD_VAR 0 2
2649: ARRAY
2650: PUSH
2651: LD_VAR 0 8
2655: ARRAY
2656: PPUSH
2657: LD_INT 1
2659: PPUSH
2660: CALL_OW 260
2664: PPUSH
2665: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
2669: LD_VAR 0 9
2673: PPUSH
2674: LD_VAR 0 3
2678: PPUSH
2679: LD_VAR 0 4
2683: PPUSH
2684: LD_VAR 0 5
2688: PPUSH
2689: LD_INT 0
2691: PPUSH
2692: CALL_OW 50
// result := result ^ [ un ] ;
2696: LD_ADDR_VAR 0 6
2700: PUSH
2701: LD_VAR 0 6
2705: PUSH
2706: LD_VAR 0 9
2710: PUSH
2711: EMPTY
2712: LIST
2713: ADD
2714: ST_TO_ADDR
// end ;
2715: GO 2320
2717: POP
2718: POP
// if not global_defined then
2719: LD_LOC 3
2723: NOT
2724: IFFALSE 2802
// if ( global_units >= cl ) then
2726: LD_LOC 2
2730: PUSH
2731: LD_VAR 0 2
2735: GREATEREQUAL
2736: IFFALSE 2777
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2738: LD_ADDR_LOC 2
2742: PUSH
2743: LD_LOC 2
2747: PPUSH
2748: LD_VAR 0 2
2752: PPUSH
2753: LD_LOC 2
2757: PUSH
2758: LD_VAR 0 2
2762: ARRAY
2763: PUSH
2764: LD_VAR 0 6
2768: ADD
2769: PPUSH
2770: CALL_OW 1
2774: ST_TO_ADDR
2775: GO 2802
// global_units := Replace ( global_units , cl , result ) ;
2777: LD_ADDR_LOC 2
2781: PUSH
2782: LD_LOC 2
2786: PPUSH
2787: LD_VAR 0 2
2791: PPUSH
2792: LD_VAR 0 6
2796: PPUSH
2797: CALL_OW 1
2801: ST_TO_ADDR
// end ;
2802: LD_VAR 0 6
2806: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , sol , br , dep ; begin
2807: LD_INT 0
2809: PPUSH
2810: PPUSH
2811: PPUSH
2812: PPUSH
2813: PPUSH
2814: PPUSH
2815: PPUSH
2816: PPUSH
2817: PPUSH
2818: PPUSH
// if side in [ 0 , 9 ] then
2819: LD_VAR 0 1
2823: PUSH
2824: LD_INT 0
2826: PUSH
2827: LD_INT 9
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: IN
2834: IFFALSE 2838
// exit ;
2836: GO 3945
// pos := Side_Positions [ side ] ;
2838: LD_ADDR_VAR 0 3
2842: PUSH
2843: LD_EXP 21
2847: PUSH
2848: LD_VAR 0 1
2852: ARRAY
2853: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2854: LD_ADDR_OWVAR 21
2858: PUSH
2859: LD_EXP 22
2863: PUSH
2864: LD_VAR 0 1
2868: ARRAY
2869: ST_TO_ADDR
// uc_side := side ;
2870: LD_ADDR_OWVAR 20
2874: PUSH
2875: LD_VAR 0 1
2879: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2880: LD_ADDR_VAR 0 4
2884: PUSH
2885: LD_EXP 24
2889: PUSH
2890: LD_VAR 0 3
2894: ARRAY
2895: PUSH
2896: LD_INT 1
2898: ARRAY
2899: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2900: LD_ADDR_VAR 0 5
2904: PUSH
2905: LD_EXP 24
2909: PUSH
2910: LD_VAR 0 3
2914: ARRAY
2915: PUSH
2916: LD_INT 2
2918: ARRAY
2919: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2920: LD_ADDR_VAR 0 6
2924: PUSH
2925: LD_EXP 24
2929: PUSH
2930: LD_VAR 0 3
2934: ARRAY
2935: PUSH
2936: LD_INT 3
2938: ARRAY
2939: ST_TO_ADDR
// if is_depot then
2940: LD_EXP 3
2944: IFFALSE 3077
// begin bc_type = b_depot ;
2946: LD_ADDR_OWVAR 42
2950: PUSH
2951: LD_INT 0
2953: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2954: LD_ADDR_VAR 0 11
2958: PUSH
2959: LD_VAR 0 4
2963: PPUSH
2964: LD_VAR 0 5
2968: PPUSH
2969: LD_VAR 0 6
2973: PPUSH
2974: CALL_OW 47
2978: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2979: LD_VAR 0 11
2983: PPUSH
2984: LD_STRING @
2986: PUSH
2987: LD_VAR 0 1
2991: STR
2992: PPUSH
2993: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2997: LD_VAR 0 11
3001: PPUSH
3002: CALL_OW 274
3006: PPUSH
3007: LD_INT 1
3009: PPUSH
3010: LD_EXP 9
3014: PUSH
3015: LD_INT 1
3017: ARRAY
3018: PPUSH
3019: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3023: LD_VAR 0 11
3027: PPUSH
3028: CALL_OW 274
3032: PPUSH
3033: LD_INT 2
3035: PPUSH
3036: LD_EXP 9
3040: PUSH
3041: LD_INT 2
3043: ARRAY
3044: PPUSH
3045: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3049: LD_VAR 0 11
3053: PPUSH
3054: CALL_OW 274
3058: PPUSH
3059: LD_INT 3
3061: PPUSH
3062: LD_EXP 9
3066: PUSH
3067: LD_INT 3
3069: ARRAY
3070: PPUSH
3071: CALL_OW 277
// end else
3075: GO 3221
// begin for i := 1 to 3 do
3077: LD_ADDR_VAR 0 7
3081: PUSH
3082: DOUBLE
3083: LD_INT 1
3085: DEC
3086: ST_TO_ADDR
3087: LD_INT 3
3089: PUSH
3090: FOR_TO
3091: IFFALSE 3219
// begin r := starting_resources [ i ] ;
3093: LD_ADDR_VAR 0 8
3097: PUSH
3098: LD_EXP 9
3102: PUSH
3103: LD_VAR 0 7
3107: ARRAY
3108: ST_TO_ADDR
// while r >= 10 do
3109: LD_VAR 0 8
3113: PUSH
3114: LD_INT 10
3116: GREATEREQUAL
3117: IFFALSE 3217
// if r > 50 then
3119: LD_VAR 0 8
3123: PUSH
3124: LD_INT 50
3126: GREATER
3127: IFFALSE 3173
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3129: LD_VAR 0 7
3133: PPUSH
3134: LD_INT 5
3136: PPUSH
3137: LD_VAR 0 4
3141: PPUSH
3142: LD_VAR 0 5
3146: PPUSH
3147: LD_INT 4
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 60
// r := r - 50 ;
3157: LD_ADDR_VAR 0 8
3161: PUSH
3162: LD_VAR 0 8
3166: PUSH
3167: LD_INT 50
3169: MINUS
3170: ST_TO_ADDR
// end else
3171: GO 3215
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3173: LD_VAR 0 7
3177: PPUSH
3178: LD_VAR 0 8
3182: PUSH
3183: LD_INT 10
3185: DIV
3186: PPUSH
3187: LD_VAR 0 4
3191: PPUSH
3192: LD_VAR 0 5
3196: PPUSH
3197: LD_INT 4
3199: PPUSH
3200: LD_INT 0
3202: PPUSH
3203: CALL_OW 60
// r := 0 ;
3207: LD_ADDR_VAR 0 8
3211: PUSH
3212: LD_INT 0
3214: ST_TO_ADDR
// end ;
3215: GO 3109
// end ;
3217: GO 3090
3219: POP
3220: POP
// end ; for r in starting_crates do
3221: LD_ADDR_VAR 0 8
3225: PUSH
3226: LD_EXP 8
3230: PUSH
3231: FOR_IN
3232: IFFALSE 3264
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 5
3239: PPUSH
3240: LD_VAR 0 4
3244: PPUSH
3245: LD_VAR 0 5
3249: PPUSH
3250: LD_VAR 0 8
3254: PPUSH
3255: LD_INT 0
3257: PPUSH
3258: CALL_OW 60
3262: GO 3231
3264: POP
3265: POP
// if def_morale_flags then
3266: LD_EXP 51
3270: IFFALSE 3409
// begin x := start_def [ pos ] [ 1 ] ;
3272: LD_ADDR_VAR 0 4
3276: PUSH
3277: LD_EXP 26
3281: PUSH
3282: LD_VAR 0 3
3286: ARRAY
3287: PUSH
3288: LD_INT 1
3290: ARRAY
3291: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3292: LD_ADDR_VAR 0 5
3296: PUSH
3297: LD_EXP 26
3301: PUSH
3302: LD_VAR 0 3
3306: ARRAY
3307: PUSH
3308: LD_INT 2
3310: ARRAY
3311: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3312: LD_VAR 0 4
3316: PPUSH
3317: LD_VAR 0 5
3321: PPUSH
3322: LD_INT 12
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3332: LD_ADDR_EXP 28
3336: PUSH
3337: LD_EXP 28
3341: PUSH
3342: LD_VAR 0 1
3346: PPUSH
3347: LD_VAR 0 4
3351: PPUSH
3352: LD_VAR 0 5
3356: PPUSH
3357: LD_INT 1
3359: PUSH
3360: LD_INT 100
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PUSH
3367: LD_INT 2
3369: PUSH
3370: LD_INT 50
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 3
3379: PUSH
3380: LD_INT 20
3382: PUSH
3383: EMPTY
3384: LIST
3385: LIST
3386: PUSH
3387: LD_INT 20
3389: PUSH
3390: LD_INT 100
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: PPUSH
3403: CALL_OW 418
3407: ADD
3408: ST_TO_ADDR
// end ; commander := true ;
3409: LD_ADDR_LOC 1
3413: PUSH
3414: LD_INT 1
3416: ST_TO_ADDR
// soldiers_created := 0 ;
3417: LD_ADDR_LOC 4
3421: PUSH
3422: LD_INT 0
3424: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3425: LD_ADDR_VAR 0 7
3429: PUSH
3430: DOUBLE
3431: LD_INT 1
3433: DEC
3434: ST_TO_ADDR
3435: LD_EXP 4
3439: PUSH
3440: FOR_TO
3441: IFFALSE 3663
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3443: LD_ADDR_VAR 0 4
3447: PUSH
3448: LD_EXP 25
3452: PUSH
3453: LD_VAR 0 3
3457: ARRAY
3458: PUSH
3459: LD_VAR 0 7
3463: ARRAY
3464: PUSH
3465: LD_INT 1
3467: ARRAY
3468: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3469: LD_ADDR_VAR 0 5
3473: PUSH
3474: LD_EXP 25
3478: PUSH
3479: LD_VAR 0 3
3483: ARRAY
3484: PUSH
3485: LD_VAR 0 7
3489: ARRAY
3490: PUSH
3491: LD_INT 2
3493: ARRAY
3494: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3495: LD_ADDR_VAR 0 6
3499: PUSH
3500: LD_EXP 25
3504: PUSH
3505: LD_VAR 0 3
3509: ARRAY
3510: PUSH
3511: LD_VAR 0 7
3515: ARRAY
3516: PUSH
3517: LD_INT 3
3519: ARRAY
3520: ST_TO_ADDR
// bc_type := b_breastwork ;
3521: LD_ADDR_OWVAR 42
3525: PUSH
3526: LD_INT 31
3528: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3529: LD_ADDR_VAR 0 10
3533: PUSH
3534: LD_VAR 0 4
3538: PPUSH
3539: LD_VAR 0 5
3543: PPUSH
3544: LD_VAR 0 6
3548: PPUSH
3549: CALL_OW 47
3553: ST_TO_ADDR
// x := ShiftX ( x , dir , 2 ) ;
3554: LD_ADDR_VAR 0 4
3558: PUSH
3559: LD_VAR 0 4
3563: PPUSH
3564: LD_VAR 0 6
3568: PPUSH
3569: LD_INT 2
3571: PPUSH
3572: CALL_OW 272
3576: ST_TO_ADDR
// y := ShiftY ( y , dir , 2 ) ;
3577: LD_ADDR_VAR 0 5
3581: PUSH
3582: LD_VAR 0 5
3586: PPUSH
3587: LD_VAR 0 6
3591: PPUSH
3592: LD_INT 2
3594: PPUSH
3595: CALL_OW 273
3599: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
3600: LD_ADDR_VAR 0 9
3604: PUSH
3605: LD_INT 1
3607: PPUSH
3608: LD_INT 1
3610: PPUSH
3611: LD_VAR 0 4
3615: PPUSH
3616: LD_VAR 0 5
3620: PPUSH
3621: LD_INT 0
3623: PPUSH
3624: CALL 2292 0 5
3628: PUSH
3629: LD_INT 1
3631: ARRAY
3632: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
3633: LD_ADDR_LOC 4
3637: PUSH
3638: LD_LOC 4
3642: PUSH
3643: LD_INT 1
3645: PLUS
3646: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
3647: LD_VAR 0 9
3651: PPUSH
3652: LD_VAR 0 10
3656: PPUSH
3657: CALL_OW 120
// end ;
3661: GO 3440
3663: POP
3664: POP
// x := start_def [ pos ] [ 1 ] ;
3665: LD_ADDR_VAR 0 4
3669: PUSH
3670: LD_EXP 26
3674: PUSH
3675: LD_VAR 0 3
3679: ARRAY
3680: PUSH
3681: LD_INT 1
3683: ARRAY
3684: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3685: LD_ADDR_VAR 0 5
3689: PUSH
3690: LD_EXP 26
3694: PUSH
3695: LD_VAR 0 3
3699: ARRAY
3700: PUSH
3701: LD_INT 2
3703: ARRAY
3704: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
3705: LD_LOC 8
3709: PUSH
3710: LD_EXP 4
3714: MINUS
3715: PPUSH
3716: LD_INT 1
3718: PPUSH
3719: LD_VAR 0 4
3723: PPUSH
3724: LD_VAR 0 5
3728: PPUSH
3729: LD_INT 5
3731: PPUSH
3732: CALL 2292 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
3736: LD_LOC 5
3740: PPUSH
3741: LD_INT 2
3743: PPUSH
3744: LD_VAR 0 4
3748: PPUSH
3749: LD_VAR 0 5
3753: PPUSH
3754: LD_INT 5
3756: PPUSH
3757: CALL 2292 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
3761: LD_LOC 7
3765: PPUSH
3766: LD_INT 3
3768: PPUSH
3769: LD_VAR 0 4
3773: PPUSH
3774: LD_VAR 0 5
3778: PPUSH
3779: LD_INT 5
3781: PPUSH
3782: CALL 2292 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
3786: LD_LOC 6
3790: PPUSH
3791: LD_INT 4
3793: PPUSH
3794: LD_VAR 0 4
3798: PPUSH
3799: LD_VAR 0 5
3803: PPUSH
3804: LD_INT 5
3806: PPUSH
3807: CALL 2292 0 5
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3811: LD_EXP 52
3815: PUSH
3816: LD_INT 20
3818: PPUSH
3819: LD_VAR 0 1
3823: PPUSH
3824: CALL_OW 321
3828: PUSH
3829: LD_INT 1
3831: EQUAL
3832: AND
3833: IFFALSE 3850
// SetTech ( tech_SibDet , side , state_researched ) ;
3835: LD_INT 20
3837: PPUSH
3838: LD_VAR 0 1
3842: PPUSH
3843: LD_INT 2
3845: PPUSH
3846: CALL_OW 322
// if def_siberite_bomb = 1 then
3850: LD_EXP 55
3854: PUSH
3855: LD_INT 1
3857: EQUAL
3858: IFFALSE 3892
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3860: LD_INT 25
3862: PPUSH
3863: LD_VAR 0 1
3867: PPUSH
3868: LD_INT 1
3870: PPUSH
3871: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3875: LD_INT 73
3877: PPUSH
3878: LD_VAR 0 1
3882: PPUSH
3883: LD_INT 1
3885: PPUSH
3886: CALL_OW 322
// end else
3890: GO 3922
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3892: LD_INT 25
3894: PPUSH
3895: LD_VAR 0 1
3899: PPUSH
3900: LD_INT 0
3902: PPUSH
3903: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3907: LD_INT 73
3909: PPUSH
3910: LD_VAR 0 1
3914: PPUSH
3915: LD_INT 0
3917: PPUSH
3918: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3922: LD_INT 24
3924: PPUSH
3925: LD_VAR 0 1
3929: PPUSH
3930: LD_INT 0
3932: PPUSH
3933: CALL_OW 322
// global_defined := true ;
3937: LD_ADDR_LOC 3
3941: PUSH
3942: LD_INT 1
3944: ST_TO_ADDR
// end ;
3945: LD_VAR 0 2
3949: RET
// every 0 0$1 do
3950: GO 3952
3952: DISABLE
// if ( def_siberite_bomb > 1 ) then
3953: LD_EXP 55
3957: PUSH
3958: LD_INT 1
3960: GREATER
3961: IFFALSE 3976
// begin wait ( siberite_bomb_Delay ) ;
3963: LD_EXP 16
3967: PPUSH
3968: CALL_OW 67
// EnableSibFiss ;
3972: CALL 3977 0 0
// end ;
3976: END
// function EnableSibFiss ; var i ; begin
3977: LD_INT 0
3979: PPUSH
3980: PPUSH
// for i := 1 to 8 do
3981: LD_ADDR_VAR 0 2
3985: PUSH
3986: DOUBLE
3987: LD_INT 1
3989: DEC
3990: ST_TO_ADDR
3991: LD_INT 8
3993: PUSH
3994: FOR_TO
3995: IFFALSE 4041
// if Side_Positions [ i ] then
3997: LD_EXP 21
4001: PUSH
4002: LD_VAR 0 2
4006: ARRAY
4007: IFFALSE 4039
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4009: LD_INT 25
4011: PPUSH
4012: LD_VAR 0 2
4016: PPUSH
4017: LD_INT 1
4019: PPUSH
4020: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4024: LD_INT 73
4026: PPUSH
4027: LD_VAR 0 2
4031: PPUSH
4032: LD_INT 1
4034: PPUSH
4035: CALL_OW 322
// end ;
4039: GO 3994
4041: POP
4042: POP
// end ;
4043: LD_VAR 0 1
4047: RET
// function prepare_sides ; var i ; begin
4048: LD_INT 0
4050: PPUSH
4051: PPUSH
// global_units := [ ] ;
4052: LD_ADDR_LOC 2
4056: PUSH
4057: EMPTY
4058: ST_TO_ADDR
// global_defined := false ;
4059: LD_ADDR_LOC 3
4063: PUSH
4064: LD_INT 0
4066: ST_TO_ADDR
// CountClassMembers ;
4067: CALL 4117 0 0
// for i := 1 to 8 do
4071: LD_ADDR_VAR 0 2
4075: PUSH
4076: DOUBLE
4077: LD_INT 1
4079: DEC
4080: ST_TO_ADDR
4081: LD_INT 8
4083: PUSH
4084: FOR_TO
4085: IFFALSE 4110
// if Side_Positions [ i ] then
4087: LD_EXP 21
4091: PUSH
4092: LD_VAR 0 2
4096: ARRAY
4097: IFFALSE 4108
// prepare_side ( i ) ;
4099: LD_VAR 0 2
4103: PPUSH
4104: CALL 2807 0 1
4108: GO 4084
4110: POP
4111: POP
// end ;
4112: LD_VAR 0 1
4116: RET
// function CountClassMembers ; var Mode ; begin
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
// if No_Mechs then
4121: LD_EXP 57
4125: IFFALSE 4137
// Mode := 2 else
4127: LD_ADDR_VAR 0 2
4131: PUSH
4132: LD_INT 2
4134: ST_TO_ADDR
4135: GO 4145
// Mode := 1 ;
4137: LD_ADDR_VAR 0 2
4141: PUSH
4142: LD_INT 1
4144: ST_TO_ADDR
// neng := number_of_people ;
4145: LD_ADDR_LOC 5
4149: PUSH
4150: LD_EXP 5
4154: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4155: LD_ADDR_LOC 8
4159: PUSH
4160: LD_LOC 5
4164: PUSH
4165: LD_INT 4
4167: PUSH
4168: LD_INT 3
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: LD_VAR 0 2
4179: ARRAY
4180: DIV
4181: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4182: LD_LOC 8
4186: PUSH
4187: LD_EXP 4
4191: LESS
4192: IFFALSE 4204
// nsol := number_of_breastworks ;
4194: LD_ADDR_LOC 8
4198: PUSH
4199: LD_EXP 4
4203: ST_TO_ADDR
// neng := neng - nsol ;
4204: LD_ADDR_LOC 5
4208: PUSH
4209: LD_LOC 5
4213: PUSH
4214: LD_LOC 8
4218: MINUS
4219: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4220: LD_ADDR_LOC 6
4224: PUSH
4225: LD_LOC 5
4229: PUSH
4230: LD_INT 3
4232: PUSH
4233: LD_INT 2
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_VAR 0 2
4244: ARRAY
4245: DIV
4246: ST_TO_ADDR
// if ( nsci < 1 ) then
4247: LD_LOC 6
4251: PUSH
4252: LD_INT 1
4254: LESS
4255: IFFALSE 4265
// nsci := 1 ;
4257: LD_ADDR_LOC 6
4261: PUSH
4262: LD_INT 1
4264: ST_TO_ADDR
// neng := neng - nsci ;
4265: LD_ADDR_LOC 5
4269: PUSH
4270: LD_LOC 5
4274: PUSH
4275: LD_LOC 6
4279: MINUS
4280: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4281: LD_ADDR_LOC 7
4285: PUSH
4286: LD_LOC 5
4290: PUSH
4291: LD_INT 2
4293: DIV
4294: PUSH
4295: LD_INT 0
4297: PUSH
4298: EMPTY
4299: LIST
4300: LIST
4301: PUSH
4302: LD_VAR 0 2
4306: ARRAY
4307: ST_TO_ADDR
// neng := neng - nmech ;
4308: LD_ADDR_LOC 5
4312: PUSH
4313: LD_LOC 5
4317: PUSH
4318: LD_LOC 7
4322: MINUS
4323: ST_TO_ADDR
// if ( neng < 1 ) then
4324: LD_LOC 5
4328: PUSH
4329: LD_INT 1
4331: LESS
4332: IFFALSE 4342
// neng := 1 ;
4334: LD_ADDR_LOC 5
4338: PUSH
4339: LD_INT 1
4341: ST_TO_ADDR
// end ;
4342: LD_VAR 0 1
4346: RET
// starting begin disable ( 98 ) ;
4347: LD_INT 98
4349: DISABLE_MARKED
// disable ( 99 ) ;
4350: LD_INT 99
4352: DISABLE_MARKED
// disable ( 100 ) ;
4353: LD_INT 100
4355: DISABLE_MARKED
// disable ( 4 ) ;
4356: LD_INT 4
4358: DISABLE_MARKED
// disable ( 400 ) ;
4359: LD_INT 400
4361: DISABLE_MARKED
// disable ( 401 ) ;
4362: LD_INT 401
4364: DISABLE_MARKED
// mp_selectmsg := true ;
4365: LD_ADDR_OWVAR 13
4369: PUSH
4370: LD_INT 1
4372: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4373: CALL 68 0 0
// init_map ;
4377: CALL 1454 0 0
// set_shared_visions_and_alliances ;
4381: CALL 1983 0 0
// ResetFog ;
4385: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4389: LD_OWVAR 2
4393: PPUSH
4394: CALL_OW 520
// prepare_sides ;
4398: CALL 4048 0 0
// init_shipments_and_respawning ;
4402: CALL 4543 0 0
// Init_Win_Condition ;
4406: CALL 12040 0 0
// if game_type = 3 then
4410: LD_EXP 41
4414: PUSH
4415: LD_INT 3
4417: EQUAL
4418: IFFALSE 4428
// begin InitPoints ( ) ;
4420: CALL 11043 0 0
// init_kings_counting ;
4424: CALL 13266 0 0
// end ; InitApeman ;
4428: CALL 6673 0 0
// InitLimits ;
4432: CALL 9913 0 0
// ShowTimer ;
4436: CALL 10850 0 0
// music_nat := Side_Nations [ your_side ] ;
4440: LD_ADDR_OWVAR 71
4444: PUSH
4445: LD_EXP 22
4449: PUSH
4450: LD_OWVAR 2
4454: ARRAY
4455: ST_TO_ADDR
// if IAmSpec then
4456: CALL_OW 531
4460: IFFALSE 4496
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4462: LD_INT 0
4464: PPUSH
4465: LD_INT 0
4467: PPUSH
4468: LD_OWVAR 2
4472: PPUSH
4473: LD_INT 32767
4475: NEG
4476: PPUSH
4477: CALL_OW 330
// CenterNowOnXY ( 119 , 79 ) ;
4481: LD_INT 119
4483: PPUSH
4484: LD_INT 79
4486: PPUSH
4487: CALL_OW 86
// enable ( 400 ) ;
4491: LD_INT 400
4493: ENABLE_MARKED
// end else
4494: GO 4542
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4496: LD_EXP 26
4500: PUSH
4501: LD_EXP 21
4505: PUSH
4506: LD_OWVAR 2
4510: ARRAY
4511: ARRAY
4512: PUSH
4513: LD_INT 1
4515: ARRAY
4516: PPUSH
4517: LD_EXP 26
4521: PUSH
4522: LD_EXP 21
4526: PUSH
4527: LD_OWVAR 2
4531: ARRAY
4532: ARRAY
4533: PUSH
4534: LD_INT 2
4536: ARRAY
4537: PPUSH
4538: CALL_OW 86
// end ; end ; end_of_file
4542: END
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
4543: LD_INT 0
4545: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4546: LD_ADDR_LOC 9
4550: PUSH
4551: LD_INT 0
4553: PPUSH
4554: LD_INT 3
4556: PPUSH
4557: CALL_OW 12
4561: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
4562: LD_ADDR_LOC 10
4566: PUSH
4567: LD_INT 1
4569: PPUSH
4570: LD_INT 8
4572: PPUSH
4573: CALL_OW 12
4577: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4578: LD_ADDR_LOC 11
4582: PUSH
4583: LD_INT 0
4585: PUSH
4586: LD_INT 0
4588: PUSH
4589: LD_INT 0
4591: PUSH
4592: LD_INT 0
4594: PUSH
4595: LD_INT 0
4597: PUSH
4598: LD_INT 0
4600: PUSH
4601: LD_INT 0
4603: PUSH
4604: LD_INT 0
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: ST_TO_ADDR
// end ;
4617: LD_VAR 0 1
4621: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
4622: GO 4624
4624: DISABLE
4625: LD_INT 0
4627: PPUSH
4628: PPUSH
4629: PPUSH
4630: PPUSH
// begin if respawning_time_max = 0 then
4631: LD_EXP 14
4635: PUSH
4636: LD_INT 0
4638: EQUAL
4639: IFFALSE 4643
// exit ;
4641: GO 5150
// if respawn = 8 then
4643: LD_LOC 10
4647: PUSH
4648: LD_INT 8
4650: EQUAL
4651: IFFALSE 4663
// respawn := 1 else
4653: LD_ADDR_LOC 10
4657: PUSH
4658: LD_INT 1
4660: ST_TO_ADDR
4661: GO 4677
// respawn := respawn + 1 ;
4663: LD_ADDR_LOC 10
4667: PUSH
4668: LD_LOC 10
4672: PUSH
4673: LD_INT 1
4675: PLUS
4676: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
4677: LD_EXP 21
4681: PUSH
4682: LD_LOC 10
4686: ARRAY
4687: PUSH
4688: LD_LOC 11
4692: PUSH
4693: LD_LOC 10
4697: ARRAY
4698: NOT
4699: AND
4700: IFFALSE 5149
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
4702: LD_ADDR_VAR 0 1
4706: PUSH
4707: LD_INT 21
4709: PUSH
4710: LD_INT 1
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_INT 22
4719: PUSH
4720: LD_LOC 10
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: PUSH
4729: LD_INT 3
4731: PUSH
4732: LD_INT 23
4734: PUSH
4735: LD_INT 0
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: PPUSH
4748: CALL_OW 69
4752: ST_TO_ADDR
// if n < number_of_people then
4753: LD_VAR 0 1
4757: PUSH
4758: LD_EXP 5
4762: LESS
4763: IFFALSE 5146
// begin aktresp := respawn ;
4765: LD_ADDR_VAR 0 3
4769: PUSH
4770: LD_LOC 10
4774: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
4775: LD_ADDR_LOC 11
4779: PUSH
4780: LD_LOC 11
4784: PPUSH
4785: LD_VAR 0 3
4789: PPUSH
4790: LD_INT 1
4792: PPUSH
4793: CALL_OW 1
4797: ST_TO_ADDR
// enable ;
4798: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
4799: LD_EXP 13
4803: PPUSH
4804: LD_EXP 14
4808: PPUSH
4809: CALL_OW 12
4813: PPUSH
4814: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
4818: LD_ADDR_LOC 11
4822: PUSH
4823: LD_LOC 11
4827: PPUSH
4828: LD_VAR 0 3
4832: PPUSH
4833: LD_INT 0
4835: PPUSH
4836: CALL_OW 1
4840: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
4841: LD_ADDR_VAR 0 2
4845: PUSH
4846: LD_INT 21
4848: PUSH
4849: LD_INT 3
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 2
4858: PUSH
4859: LD_INT 30
4861: PUSH
4862: LD_INT 0
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: LD_INT 30
4871: PUSH
4872: LD_INT 1
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PUSH
4879: EMPTY
4880: LIST
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 50
4886: PUSH
4887: EMPTY
4888: LIST
4889: PUSH
4890: LD_INT 22
4892: PUSH
4893: LD_VAR 0 3
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: PPUSH
4908: CALL_OW 69
4912: ST_TO_ADDR
// if building_list = 0 then
4913: LD_VAR 0 2
4917: PUSH
4918: LD_INT 0
4920: EQUAL
4921: IFFALSE 4966
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
4923: LD_ADDR_VAR 0 2
4927: PUSH
4928: LD_INT 21
4930: PUSH
4931: LD_INT 3
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: LD_INT 50
4940: PUSH
4941: EMPTY
4942: LIST
4943: PUSH
4944: LD_INT 22
4946: PUSH
4947: LD_VAR 0 3
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: LIST
4960: PPUSH
4961: CALL_OW 69
4965: ST_TO_ADDR
// if building_list = 0 then
4966: LD_VAR 0 2
4970: PUSH
4971: LD_INT 0
4973: EQUAL
4974: IFFALSE 4978
// exit ;
4976: GO 5150
// hc_name :=  ;
4978: LD_ADDR_OWVAR 26
4982: PUSH
4983: LD_STRING 
4985: ST_TO_ADDR
// hc_importance := 0 ;
4986: LD_ADDR_OWVAR 32
4990: PUSH
4991: LD_INT 0
4993: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
4994: LD_INT 0
4996: PPUSH
4997: LD_INT 0
4999: PPUSH
5000: LD_EXP 7
5004: PUSH
5005: LD_INT 2
5007: DIV
5008: PPUSH
5009: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
5013: LD_ADDR_OWVAR 21
5017: PUSH
5018: LD_EXP 22
5022: PUSH
5023: LD_VAR 0 3
5027: ARRAY
5028: ST_TO_ADDR
// uc_side := aktresp ;
5029: LD_ADDR_OWVAR 20
5033: PUSH
5034: LD_VAR 0 3
5038: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5039: LD_ADDR_VAR 0 4
5043: PUSH
5044: LD_VAR 0 2
5048: PUSH
5049: LD_INT 1
5051: PPUSH
5052: LD_VAR 0 2
5056: PUSH
5057: LD_INT 0
5059: PLUS
5060: PPUSH
5061: CALL_OW 12
5065: ARRAY
5066: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5067: LD_VAR 0 4
5071: PPUSH
5072: CALL_OW 266
5076: PUSH
5077: LD_INT 0
5079: PUSH
5080: LD_INT 1
5082: PUSH
5083: EMPTY
5084: LIST
5085: LIST
5086: IN
5087: IFFALSE 5099
// n = 25 else
5089: LD_ADDR_VAR 0 1
5093: PUSH
5094: LD_INT 25
5096: ST_TO_ADDR
5097: GO 5107
// n = 10 ;
5099: LD_ADDR_VAR 0 1
5103: PUSH
5104: LD_INT 10
5106: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5107: CALL_OW 44
5111: PPUSH
5112: LD_VAR 0 4
5116: PPUSH
5117: CALL_OW 250
5121: PPUSH
5122: LD_VAR 0 4
5126: PPUSH
5127: CALL_OW 251
5131: PPUSH
5132: LD_VAR 0 1
5136: PPUSH
5137: LD_INT 1
5139: PPUSH
5140: CALL_OW 50
// end else
5144: GO 5147
// enable ;
5146: ENABLE
// end else
5147: GO 5150
// enable ;
5149: ENABLE
// end ;
5150: PPOPN 4
5152: END
// every 0 0$5 + 0 0$1.1 do var d ;
5153: GO 5155
5155: DISABLE
5156: LD_INT 0
5158: PPUSH
// begin case tick of 1 .. 1 1$0 :
5159: LD_OWVAR 1
5163: PUSH
5164: LD_INT 1
5166: DOUBLE
5167: GREATEREQUAL
5168: IFFALSE 5176
5170: LD_INT 2100
5172: DOUBLE
5173: LESSEQUAL
5174: IFTRUE 5178
5176: GO 5189
5178: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5179: LD_ADDR_VAR 0 1
5183: PUSH
5184: LD_INT 150
5186: ST_TO_ADDR
5187: GO 5372
5189: LD_INT 2100
5191: PUSH
5192: LD_INT 1
5194: PLUS
5195: DOUBLE
5196: GREATEREQUAL
5197: IFFALSE 5205
5199: LD_INT 10500
5201: DOUBLE
5202: LESSEQUAL
5203: IFTRUE 5207
5205: GO 5218
5207: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5208: LD_ADDR_VAR 0 1
5212: PUSH
5213: LD_INT 100
5215: ST_TO_ADDR
5216: GO 5372
5218: LD_INT 10500
5220: PUSH
5221: LD_INT 1
5223: PLUS
5224: DOUBLE
5225: GREATEREQUAL
5226: IFFALSE 5234
5228: LD_INT 21000
5230: DOUBLE
5231: LESSEQUAL
5232: IFTRUE 5236
5234: GO 5247
5236: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5237: LD_ADDR_VAR 0 1
5241: PUSH
5242: LD_INT 90
5244: ST_TO_ADDR
5245: GO 5372
5247: LD_INT 21000
5249: PUSH
5250: LD_INT 1
5252: PLUS
5253: DOUBLE
5254: GREATEREQUAL
5255: IFFALSE 5263
5257: LD_INT 42000
5259: DOUBLE
5260: LESSEQUAL
5261: IFTRUE 5265
5263: GO 5276
5265: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5266: LD_ADDR_VAR 0 1
5270: PUSH
5271: LD_INT 70
5273: ST_TO_ADDR
5274: GO 5372
5276: LD_INT 42000
5278: PUSH
5279: LD_INT 1
5281: PLUS
5282: DOUBLE
5283: GREATEREQUAL
5284: IFFALSE 5292
5286: LD_INT 63000
5288: DOUBLE
5289: LESSEQUAL
5290: IFTRUE 5294
5292: GO 5305
5294: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5295: LD_ADDR_VAR 0 1
5299: PUSH
5300: LD_INT 60
5302: ST_TO_ADDR
5303: GO 5372
5305: LD_INT 63000
5307: PUSH
5308: LD_INT 1
5310: PLUS
5311: DOUBLE
5312: GREATEREQUAL
5313: IFFALSE 5321
5315: LD_INT 105000
5317: DOUBLE
5318: LESSEQUAL
5319: IFTRUE 5323
5321: GO 5334
5323: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5324: LD_ADDR_VAR 0 1
5328: PUSH
5329: LD_INT 35
5331: ST_TO_ADDR
5332: GO 5372
5334: LD_INT 105000
5336: PUSH
5337: LD_INT 1
5339: PLUS
5340: DOUBLE
5341: GREATEREQUAL
5342: IFFALSE 5350
5344: LD_INT 630000
5346: DOUBLE
5347: LESSEQUAL
5348: IFTRUE 5352
5350: GO 5363
5352: POP
// d := 20 ; else
5353: LD_ADDR_VAR 0 1
5357: PUSH
5358: LD_INT 20
5360: ST_TO_ADDR
5361: GO 5372
5363: POP
// d := 0 ; end ;
5364: LD_ADDR_VAR 0 1
5368: PUSH
5369: LD_INT 0
5371: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5372: LD_INT 1
5374: PPUSH
5375: LD_INT 10000
5377: PPUSH
5378: CALL_OW 12
5382: PUSH
5383: LD_VAR 0 1
5387: PUSH
5388: LD_EXP 10
5392: MUL
5393: LESSEQUAL
5394: IFFALSE 5448
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5396: LD_INT 1
5398: PPUSH
5399: LD_INT 140
5401: PPUSH
5402: CALL_OW 12
5406: PPUSH
5407: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5411: LD_ADDR_LOC 9
5415: PUSH
5416: LD_LOC 9
5420: PUSH
5421: LD_INT 1
5423: PLUS
5424: PUSH
5425: LD_INT 4
5427: MOD
5428: ST_TO_ADDR
// CreateCratesArea ( 5 , ZaklLH + shipment , true ) ;
5429: LD_INT 5
5431: PPUSH
5432: LD_INT 3
5434: PUSH
5435: LD_LOC 9
5439: PLUS
5440: PPUSH
5441: LD_INT 1
5443: PPUSH
5444: CALL_OW 55
// end ; enable ;
5448: ENABLE
// end ;
5449: PPOPN 1
5451: END
// every 0 0$7 + 0 0$1.7 do var d ;
5452: GO 5454
5454: DISABLE
5455: LD_INT 0
5457: PPUSH
// begin case tick of 1 .. 1 1$0 :
5458: LD_OWVAR 1
5462: PUSH
5463: LD_INT 1
5465: DOUBLE
5466: GREATEREQUAL
5467: IFFALSE 5475
5469: LD_INT 2100
5471: DOUBLE
5472: LESSEQUAL
5473: IFTRUE 5477
5475: GO 5488
5477: POP
// d := 20 ; 1 1$0 + 1 .. 5 5$0 :
5478: LD_ADDR_VAR 0 1
5482: PUSH
5483: LD_INT 20
5485: ST_TO_ADDR
5486: GO 5671
5488: LD_INT 2100
5490: PUSH
5491: LD_INT 1
5493: PLUS
5494: DOUBLE
5495: GREATEREQUAL
5496: IFFALSE 5504
5498: LD_INT 10500
5500: DOUBLE
5501: LESSEQUAL
5502: IFTRUE 5506
5504: GO 5517
5506: POP
// d := 50 ; 5 5$0 + 1 .. 10 10$0 :
5507: LD_ADDR_VAR 0 1
5511: PUSH
5512: LD_INT 50
5514: ST_TO_ADDR
5515: GO 5671
5517: LD_INT 10500
5519: PUSH
5520: LD_INT 1
5522: PLUS
5523: DOUBLE
5524: GREATEREQUAL
5525: IFFALSE 5533
5527: LD_INT 21000
5529: DOUBLE
5530: LESSEQUAL
5531: IFTRUE 5535
5533: GO 5546
5535: POP
// d := 150 ; 10 10$0 + 1 .. 20 20$0 :
5536: LD_ADDR_VAR 0 1
5540: PUSH
5541: LD_INT 150
5543: ST_TO_ADDR
5544: GO 5671
5546: LD_INT 21000
5548: PUSH
5549: LD_INT 1
5551: PLUS
5552: DOUBLE
5553: GREATEREQUAL
5554: IFFALSE 5562
5556: LD_INT 42000
5558: DOUBLE
5559: LESSEQUAL
5560: IFTRUE 5564
5562: GO 5575
5564: POP
// d := 100 ; 20 20$0 + 1 .. 30 30$0 :
5565: LD_ADDR_VAR 0 1
5569: PUSH
5570: LD_INT 100
5572: ST_TO_ADDR
5573: GO 5671
5575: LD_INT 42000
5577: PUSH
5578: LD_INT 1
5580: PLUS
5581: DOUBLE
5582: GREATEREQUAL
5583: IFFALSE 5591
5585: LD_INT 63000
5587: DOUBLE
5588: LESSEQUAL
5589: IFTRUE 5593
5591: GO 5604
5593: POP
// d := 90 ; 30 30$0 + 1 .. 50 50$0 :
5594: LD_ADDR_VAR 0 1
5598: PUSH
5599: LD_INT 90
5601: ST_TO_ADDR
5602: GO 5671
5604: LD_INT 63000
5606: PUSH
5607: LD_INT 1
5609: PLUS
5610: DOUBLE
5611: GREATEREQUAL
5612: IFFALSE 5620
5614: LD_INT 105000
5616: DOUBLE
5617: LESSEQUAL
5618: IFTRUE 5622
5620: GO 5633
5622: POP
// d := 70 ; 50 50$0 + 1 .. 300 300$0 :
5623: LD_ADDR_VAR 0 1
5627: PUSH
5628: LD_INT 70
5630: ST_TO_ADDR
5631: GO 5671
5633: LD_INT 105000
5635: PUSH
5636: LD_INT 1
5638: PLUS
5639: DOUBLE
5640: GREATEREQUAL
5641: IFFALSE 5649
5643: LD_INT 630000
5645: DOUBLE
5646: LESSEQUAL
5647: IFTRUE 5651
5649: GO 5662
5651: POP
// d := 60 ; else
5652: LD_ADDR_VAR 0 1
5656: PUSH
5657: LD_INT 60
5659: ST_TO_ADDR
5660: GO 5671
5662: POP
// d := 35 ; end ;
5663: LD_ADDR_VAR 0 1
5667: PUSH
5668: LD_INT 35
5670: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5671: LD_INT 1
5673: PPUSH
5674: LD_INT 10000
5676: PPUSH
5677: CALL_OW 12
5681: PUSH
5682: LD_VAR 0 1
5686: PUSH
5687: LD_EXP 10
5691: MUL
5692: LESSEQUAL
5693: IFFALSE 5747
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5695: LD_INT 1
5697: PPUSH
5698: LD_INT 140
5700: PPUSH
5701: CALL_OW 12
5705: PPUSH
5706: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5710: LD_ADDR_LOC 9
5714: PUSH
5715: LD_LOC 9
5719: PUSH
5720: LD_INT 1
5722: PLUS
5723: PUSH
5724: LD_INT 4
5726: MOD
5727: ST_TO_ADDR
// CreateCratesArea ( 5 , ZaklLHOut + shipment , true ) ;
5728: LD_INT 5
5730: PPUSH
5731: LD_INT 20
5733: PUSH
5734: LD_LOC 9
5738: PLUS
5739: PPUSH
5740: LD_INT 1
5742: PPUSH
5743: CALL_OW 55
// end ; enable ;
5747: ENABLE
// end ;
5748: PPOPN 1
5750: END
// every 1 1$0 trigger def_shipments_density do
5751: LD_EXP 47
5755: IFFALSE 5791
5757: GO 5759
5759: DISABLE
// begin CreateCratesArea ( 5 , map_center , true ) ;
5760: LD_INT 5
5762: PPUSH
5763: LD_INT 15
5765: PPUSH
5766: LD_INT 1
5768: PPUSH
5769: CALL_OW 55
// wait ( 3 3$0 - ( 1 1$0 * def_shipments_density ) ) ;
5773: LD_INT 6300
5775: PUSH
5776: LD_INT 2100
5778: PUSH
5779: LD_EXP 47
5783: MUL
5784: MINUS
5785: PPUSH
5786: CALL_OW 67
// enable ;
5790: ENABLE
// end ; end_of_file
5791: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5792: LD_VAR 0 1
5796: PPUSH
5797: CALL_OW 266
5801: PUSH
5802: LD_INT 0
5804: PUSH
5805: LD_INT 1
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: IN
5812: IFFALSE 5837
// SetBName ( b , @ & GetSide ( b ) ) ;
5814: LD_VAR 0 1
5818: PPUSH
5819: LD_STRING @
5821: PUSH
5822: LD_VAR 0 1
5826: PPUSH
5827: CALL_OW 255
5831: STR
5832: PPUSH
5833: CALL_OW 500
// if def_game_rules then
5837: LD_EXP 42
5841: IFFALSE 5878
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
5843: LD_VAR 0 1
5847: PPUSH
5848: LD_VAR 0 1
5852: PPUSH
5853: CALL_OW 266
5857: PPUSH
5858: LD_VAR 0 1
5862: PPUSH
5863: CALL_OW 255
5867: PPUSH
5868: LD_INT 0
5870: PPUSH
5871: LD_INT 1
5873: PPUSH
5874: CALL 10314 0 5
// end ;
5878: PPOPN 2
5880: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5881: LD_VAR 0 1
5885: PPUSH
5886: CALL_OW 266
5890: PUSH
5891: LD_INT 0
5893: PUSH
5894: LD_INT 1
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: IN
5901: IFFALSE 5926
// SetBName ( b , @ & GetSide ( b ) ) ;
5903: LD_VAR 0 1
5907: PPUSH
5908: LD_STRING @
5910: PUSH
5911: LD_VAR 0 1
5915: PPUSH
5916: CALL_OW 255
5920: STR
5921: PPUSH
5922: CALL_OW 500
// if def_game_rules then
5926: LD_EXP 42
5930: IFFALSE 5969
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
5932: LD_VAR 0 1
5936: PPUSH
5937: LD_VAR 0 1
5941: PPUSH
5942: CALL_OW 266
5946: PPUSH
5947: LD_VAR 0 1
5951: PPUSH
5952: CALL_OW 255
5956: PPUSH
5957: LD_VAR 0 2
5961: PPUSH
5962: LD_INT 1
5964: PPUSH
5965: CALL 10314 0 5
// end ;
5969: PPOPN 3
5971: END
// on VehicleConstructed ( veh , fac ) do var side ;
5972: LD_INT 0
5974: PPUSH
// begin if GetControl ( veh ) = control_apeman then
5975: LD_VAR 0 1
5979: PPUSH
5980: CALL_OW 263
5984: PUSH
5985: LD_INT 5
5987: EQUAL
5988: IFFALSE 6130
// begin side := GetSide ( veh ) ;
5990: LD_ADDR_VAR 0 3
5994: PUSH
5995: LD_VAR 0 1
5999: PPUSH
6000: CALL_OW 255
6004: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6005: LD_ADDR_EXP 37
6009: PUSH
6010: LD_EXP 37
6014: PPUSH
6015: LD_VAR 0 3
6019: PPUSH
6020: LD_EXP 37
6024: PUSH
6025: LD_VAR 0 3
6029: ARRAY
6030: PPUSH
6031: LD_INT 52
6033: PUSH
6034: EMPTY
6035: LIST
6036: PPUSH
6037: CALL_OW 72
6041: PUSH
6042: LD_INT 22
6044: PUSH
6045: LD_VAR 0 3
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PUSH
6054: LD_INT 2
6056: PUSH
6057: LD_INT 33
6059: PUSH
6060: LD_INT 5
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PUSH
6067: LD_INT 25
6069: PUSH
6070: LD_INT 12
6072: PUSH
6073: EMPTY
6074: LIST
6075: LIST
6076: PUSH
6077: LD_INT 25
6079: PUSH
6080: LD_INT 15
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: LD_INT 25
6089: PUSH
6090: LD_INT 16
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: PUSH
6097: LD_INT 25
6099: PUSH
6100: LD_INT 17
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PPUSH
6119: CALL_OW 69
6123: UNION
6124: PPUSH
6125: CALL_OW 1
6129: ST_TO_ADDR
// end ; end ;
6130: PPOPN 3
6132: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6133: LD_INT 0
6135: PPUSH
6136: PPUSH
6137: PPUSH
6138: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6139: LD_VAR 0 1
6143: PPUSH
6144: CALL_OW 257
6148: PUSH
6149: LD_INT 12
6151: PUSH
6152: LD_INT 15
6154: PUSH
6155: LD_INT 17
6157: PUSH
6158: LD_INT 16
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: IN
6167: PUSH
6168: LD_VAR 0 1
6172: PPUSH
6173: CALL_OW 263
6177: PUSH
6178: LD_INT 5
6180: EQUAL
6181: OR
6182: IFFALSE 6193
// ApeKilled ( j ) ;
6184: LD_VAR 0 1
6188: PPUSH
6189: CALL 7354 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6193: LD_VAR 0 1
6197: PPUSH
6198: CALL_OW 266
6202: PUSH
6203: LD_INT 0
6205: PUSH
6206: LD_INT 1
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: IN
6213: IFFALSE 6295
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6215: LD_ADDR_VAR 0 4
6219: PUSH
6220: LD_EXP 21
6224: PUSH
6225: LD_VAR 0 1
6229: PPUSH
6230: CALL_OW 255
6234: ARRAY
6235: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6236: LD_ADDR_VAR 0 2
6240: PUSH
6241: LD_EXP 26
6245: PUSH
6246: LD_VAR 0 4
6250: ARRAY
6251: PUSH
6252: LD_INT 1
6254: ARRAY
6255: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6256: LD_ADDR_VAR 0 3
6260: PUSH
6261: LD_EXP 26
6265: PUSH
6266: LD_VAR 0 4
6270: ARRAY
6271: PUSH
6272: LD_INT 2
6274: ARRAY
6275: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6276: LD_VAR 0 2
6280: PPUSH
6281: LD_VAR 0 3
6285: PPUSH
6286: CALL_OW 420
6290: PPUSH
6291: CALL_OW 419
// end ; if def_game_rules then
6295: LD_EXP 42
6299: IFFALSE 6398
// if ( GetType ( j ) = 3 ) then
6301: LD_VAR 0 1
6305: PPUSH
6306: CALL_OW 247
6310: PUSH
6311: LD_INT 3
6313: EQUAL
6314: IFFALSE 6354
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
6316: LD_VAR 0 1
6320: PPUSH
6321: LD_VAR 0 1
6325: PPUSH
6326: CALL_OW 266
6330: PPUSH
6331: LD_VAR 0 1
6335: PPUSH
6336: CALL_OW 255
6340: PPUSH
6341: LD_INT 0
6343: PPUSH
6344: LD_INT 1
6346: NEG
6347: PPUSH
6348: CALL 10314 0 5
6352: GO 6398
// if ( GetChassis ( j ) = 25 ) then
6354: LD_VAR 0 1
6358: PPUSH
6359: CALL_OW 265
6363: PUSH
6364: LD_INT 25
6366: EQUAL
6367: IFFALSE 6398
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
6369: LD_VAR 0 1
6373: PPUSH
6374: LD_INT 37
6376: PPUSH
6377: LD_VAR 0 1
6381: PPUSH
6382: CALL_OW 255
6386: PPUSH
6387: LD_INT 0
6389: PPUSH
6390: LD_INT 1
6392: NEG
6393: PPUSH
6394: CALL 10314 0 5
// end ;
6398: PPOPN 5
6400: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
6401: LD_EXP 42
6405: PUSH
6406: LD_VAR 0 1
6410: PPUSH
6411: CALL_OW 265
6415: PUSH
6416: LD_INT 25
6418: EQUAL
6419: AND
6420: IFFALSE 6452
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
6422: LD_VAR 0 1
6426: PPUSH
6427: LD_INT 37
6429: PPUSH
6430: LD_VAR 0 1
6434: PPUSH
6435: CALL_OW 255
6439: PPUSH
6440: LD_VAR 0 3
6444: PPUSH
6445: LD_INT 1
6447: PPUSH
6448: CALL 10314 0 5
// end ;
6452: PPOPN 4
6454: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6455: LD_VAR 0 1
6459: PPUSH
6460: LD_VAR 0 2
6464: PPUSH
6465: LD_VAR 0 3
6469: PPUSH
6470: LD_OWVAR 2
6474: PPUSH
6475: CALL 11801 0 4
6479: PPOPN 3
6481: END
// every 20 20$00 trigger apemanNumber do
6482: LD_EXP 34
6486: IFFALSE 6519
6488: GO 6490
6490: DISABLE
// begin enable ;
6491: ENABLE
// if apeLevel >= 8 then
6492: LD_EXP 39
6496: PUSH
6497: LD_INT 8
6499: GREATEREQUAL
6500: IFFALSE 6505
// disable else
6502: DISABLE
6503: GO 6519
// apeLevel := apeLevel + 1 ;
6505: LD_ADDR_EXP 39
6509: PUSH
6510: LD_EXP 39
6514: PUSH
6515: LD_INT 1
6517: PLUS
6518: ST_TO_ADDR
// end ;
6519: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6520: LD_EXP 34
6524: PUSH
6525: LD_EXP 35
6529: LESS
6530: IFFALSE 6670
6532: GO 6534
6534: DISABLE
6535: LD_INT 0
6537: PPUSH
6538: PPUSH
6539: PPUSH
6540: PPUSH
// begin enable ;
6541: ENABLE
// for i := 1 to apemanPos do
6542: LD_ADDR_VAR 0 1
6546: PUSH
6547: DOUBLE
6548: LD_INT 1
6550: DEC
6551: ST_TO_ADDR
6552: LD_EXP 37
6556: PUSH
6557: FOR_TO
6558: IFFALSE 6668
// begin if apemanPlayerCount [ i ] then
6560: LD_EXP 38
6564: PUSH
6565: LD_VAR 0 1
6569: ARRAY
6570: IFFALSE 6666
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6572: LD_EXP 38
6576: PUSH
6577: LD_VAR 0 1
6581: ARRAY
6582: PUSH
6583: LD_EXP 37
6587: PUSH
6588: LD_VAR 0 1
6592: ARRAY
6593: GREATER
6594: IFFALSE 6666
// begin ape := PrepareApeman ;
6596: LD_ADDR_VAR 0 2
6600: PUSH
6601: CALL 7173 0 0
6605: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6606: LD_VAR 0 2
6610: PPUSH
6611: LD_EXP 40
6615: PUSH
6616: LD_VAR 0 1
6620: ARRAY
6621: PPUSH
6622: LD_INT 0
6624: PPUSH
6625: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6629: LD_ADDR_EXP 37
6633: PUSH
6634: LD_EXP 37
6638: PPUSH
6639: LD_VAR 0 1
6643: PPUSH
6644: LD_EXP 37
6648: PUSH
6649: LD_VAR 0 1
6653: ARRAY
6654: PUSH
6655: LD_VAR 0 2
6659: UNION
6660: PPUSH
6661: CALL_OW 1
6665: ST_TO_ADDR
// end ; end ; end ;
6666: GO 6557
6668: POP
6669: POP
// end ;
6670: PPOPN 4
6672: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6673: LD_INT 0
6675: PPUSH
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
6680: PPUSH
6681: PPUSH
// playersAmount := 0 ;
6682: LD_ADDR_VAR 0 3
6686: PUSH
6687: LD_INT 0
6689: ST_TO_ADDR
// _apeAreas := [ OpiceSZ , OpiceSV , OpiceJZ , OpiceJV ] ;
6690: LD_ADDR_VAR 0 7
6694: PUSH
6695: LD_INT 11
6697: PUSH
6698: LD_INT 12
6700: PUSH
6701: LD_INT 14
6703: PUSH
6704: LD_INT 13
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6713: LD_ADDR_EXP 40
6717: PUSH
6718: LD_INT 0
6720: PUSH
6721: LD_INT 0
6723: PUSH
6724: LD_INT 0
6726: PUSH
6727: LD_INT 0
6729: PUSH
6730: LD_INT 0
6732: PUSH
6733: LD_INT 0
6735: PUSH
6736: LD_INT 0
6738: PUSH
6739: LD_INT 0
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: ST_TO_ADDR
// for j = 1 to Side_Positions do
6752: LD_ADDR_VAR 0 4
6756: PUSH
6757: DOUBLE
6758: LD_INT 1
6760: DEC
6761: ST_TO_ADDR
6762: LD_EXP 21
6766: PUSH
6767: FOR_TO
6768: IFFALSE 6835
// if Side_Positions [ j ] then
6770: LD_EXP 21
6774: PUSH
6775: LD_VAR 0 4
6779: ARRAY
6780: IFFALSE 6833
// begin playersAmount := playersAmount + 1 ;
6782: LD_ADDR_VAR 0 3
6786: PUSH
6787: LD_VAR 0 3
6791: PUSH
6792: LD_INT 1
6794: PLUS
6795: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6796: LD_ADDR_EXP 40
6800: PUSH
6801: LD_EXP 40
6805: PPUSH
6806: LD_VAR 0 4
6810: PPUSH
6811: LD_VAR 0 7
6815: PUSH
6816: LD_EXP 21
6820: PUSH
6821: LD_VAR 0 4
6825: ARRAY
6826: ARRAY
6827: PPUSH
6828: CALL_OW 1
6832: ST_TO_ADDR
// end ;
6833: GO 6767
6835: POP
6836: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6837: LD_ADDR_EXP 36
6841: PUSH
6842: LD_INT 3
6844: PUSH
6845: LD_EXP 6
6849: MUL
6850: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6851: LD_ADDR_EXP 34
6855: PUSH
6856: LD_VAR 0 3
6860: PUSH
6861: LD_EXP 36
6865: MUL
6866: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6867: LD_ADDR_EXP 35
6871: PUSH
6872: LD_EXP 34
6876: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6877: LD_ADDR_EXP 37
6881: PUSH
6882: LD_INT 0
6884: PUSH
6885: LD_INT 0
6887: PUSH
6888: LD_INT 0
6890: PUSH
6891: LD_INT 0
6893: PUSH
6894: LD_INT 0
6896: PUSH
6897: LD_INT 0
6899: PUSH
6900: LD_INT 0
6902: PUSH
6903: LD_INT 0
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6916: LD_ADDR_EXP 38
6920: PUSH
6921: LD_INT 0
6923: PUSH
6924: LD_INT 0
6926: PUSH
6927: LD_INT 0
6929: PUSH
6930: LD_INT 0
6932: PUSH
6933: LD_INT 0
6935: PUSH
6936: LD_INT 0
6938: PUSH
6939: LD_INT 0
6941: PUSH
6942: LD_INT 0
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: ST_TO_ADDR
// apeLevel := 1 ;
6955: LD_ADDR_EXP 39
6959: PUSH
6960: LD_INT 1
6962: ST_TO_ADDR
// if not apemanNumber then
6963: LD_EXP 34
6967: NOT
6968: IFFALSE 6972
// exit ;
6970: GO 7168
// for i := 1 to apemanPerPlayer do
6972: LD_ADDR_VAR 0 2
6976: PUSH
6977: DOUBLE
6978: LD_INT 1
6980: DEC
6981: ST_TO_ADDR
6982: LD_EXP 36
6986: PUSH
6987: FOR_TO
6988: IFFALSE 7166
// begin for j := 1 to Side_Positions do
6990: LD_ADDR_VAR 0 4
6994: PUSH
6995: DOUBLE
6996: LD_INT 1
6998: DEC
6999: ST_TO_ADDR
7000: LD_EXP 21
7004: PUSH
7005: FOR_TO
7006: IFFALSE 7162
// if Side_Positions [ j ] then
7008: LD_EXP 21
7012: PUSH
7013: LD_VAR 0 4
7017: ARRAY
7018: IFFALSE 7160
// begin pos := Side_Positions [ j ] ;
7020: LD_ADDR_VAR 0 6
7024: PUSH
7025: LD_EXP 21
7029: PUSH
7030: LD_VAR 0 4
7034: ARRAY
7035: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7036: LD_ADDR_EXP 38
7040: PUSH
7041: LD_EXP 38
7045: PPUSH
7046: LD_VAR 0 4
7050: PPUSH
7051: LD_EXP 38
7055: PUSH
7056: LD_VAR 0 4
7060: ARRAY
7061: PUSH
7062: LD_INT 1
7064: PLUS
7065: PPUSH
7066: CALL_OW 1
7070: ST_TO_ADDR
// ape := PrepareApeman ;
7071: LD_ADDR_VAR 0 5
7075: PUSH
7076: CALL 7173 0 0
7080: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7081: LD_ADDR_EXP 37
7085: PUSH
7086: LD_EXP 37
7090: PPUSH
7091: LD_VAR 0 4
7095: PPUSH
7096: LD_EXP 37
7100: PUSH
7101: LD_VAR 0 4
7105: ARRAY
7106: PPUSH
7107: LD_EXP 37
7111: PUSH
7112: LD_VAR 0 4
7116: ARRAY
7117: PUSH
7118: LD_INT 1
7120: PLUS
7121: PPUSH
7122: LD_VAR 0 5
7126: PPUSH
7127: CALL_OW 1
7131: PPUSH
7132: CALL_OW 1
7136: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7137: LD_VAR 0 5
7141: PPUSH
7142: LD_EXP 40
7146: PUSH
7147: LD_VAR 0 4
7151: ARRAY
7152: PPUSH
7153: LD_INT 0
7155: PPUSH
7156: CALL_OW 49
// end ;
7160: GO 7005
7162: POP
7163: POP
// end ;
7164: GO 6987
7166: POP
7167: POP
// end ;
7168: LD_VAR 0 1
7172: RET
// export function PrepareApeman ; var bonus ; begin
7173: LD_INT 0
7175: PPUSH
7176: PPUSH
// uc_side := 0 ;
7177: LD_ADDR_OWVAR 20
7181: PUSH
7182: LD_INT 0
7184: ST_TO_ADDR
// uc_nation := 0 ;
7185: LD_ADDR_OWVAR 21
7189: PUSH
7190: LD_INT 0
7192: ST_TO_ADDR
// InitHc ;
7193: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
7197: LD_ADDR_VAR 0 2
7201: PUSH
7202: LD_INT 1
7204: NEG
7205: PUSH
7206: LD_INT 0
7208: PUSH
7209: LD_INT 1
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: PUSH
7217: LD_OWVAR 1
7221: PUSH
7222: LD_INT 3
7224: MOD
7225: PUSH
7226: LD_INT 1
7228: PLUS
7229: ARRAY
7230: ST_TO_ADDR
// hc_class := class_apeman ;
7231: LD_ADDR_OWVAR 28
7235: PUSH
7236: LD_INT 12
7238: ST_TO_ADDR
// hc_gallery :=  ;
7239: LD_ADDR_OWVAR 33
7243: PUSH
7244: LD_STRING 
7246: ST_TO_ADDR
// hc_name :=  ;
7247: LD_ADDR_OWVAR 26
7251: PUSH
7252: LD_STRING 
7254: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
7255: LD_ADDR_OWVAR 31
7259: PUSH
7260: LD_EXP 39
7264: PUSH
7265: LD_VAR 0 2
7269: PLUS
7270: PUSH
7271: LD_EXP 39
7275: PUSH
7276: LD_VAR 0 2
7280: PLUS
7281: PUSH
7282: LD_EXP 39
7286: PUSH
7287: LD_VAR 0 2
7291: PLUS
7292: PUSH
7293: LD_EXP 39
7297: PUSH
7298: LD_VAR 0 2
7302: PLUS
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
7310: LD_ADDR_OWVAR 35
7314: PUSH
7315: LD_INT 10
7317: PUSH
7318: LD_VAR 0 2
7322: MUL
7323: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7324: LD_ADDR_OWVAR 29
7328: PUSH
7329: LD_INT 12
7331: PUSH
7332: LD_INT 10
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: ST_TO_ADDR
// result := CreateHuman ;
7339: LD_ADDR_VAR 0 1
7343: PUSH
7344: CALL_OW 44
7348: ST_TO_ADDR
// end ;
7349: LD_VAR 0 1
7353: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
7354: LD_INT 0
7356: PPUSH
7357: PPUSH
7358: PPUSH
// if not ape then
7359: LD_VAR 0 1
7363: NOT
7364: IFFALSE 7368
// exit ;
7366: GO 7493
// side := GetSide ( ape ) ;
7368: LD_ADDR_VAR 0 3
7372: PUSH
7373: LD_VAR 0 1
7377: PPUSH
7378: CALL_OW 255
7382: ST_TO_ADDR
// if not side then
7383: LD_VAR 0 3
7387: NOT
7388: IFFALSE 7442
// begin for i = 1 to apemanPos do
7390: LD_ADDR_VAR 0 4
7394: PUSH
7395: DOUBLE
7396: LD_INT 1
7398: DEC
7399: ST_TO_ADDR
7400: LD_EXP 37
7404: PUSH
7405: FOR_TO
7406: IFFALSE 7440
// if ape in apemanPos [ i ] then
7408: LD_VAR 0 1
7412: PUSH
7413: LD_EXP 37
7417: PUSH
7418: LD_VAR 0 4
7422: ARRAY
7423: IN
7424: IFFALSE 7438
// begin side := i ;
7426: LD_ADDR_VAR 0 3
7430: PUSH
7431: LD_VAR 0 4
7435: ST_TO_ADDR
// break ;
7436: GO 7440
// end ;
7438: GO 7405
7440: POP
7441: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7442: LD_ADDR_EXP 37
7446: PUSH
7447: LD_EXP 37
7451: PPUSH
7452: LD_VAR 0 3
7456: PPUSH
7457: LD_EXP 37
7461: PUSH
7462: LD_VAR 0 3
7466: ARRAY
7467: PUSH
7468: LD_VAR 0 1
7472: DIFF
7473: PPUSH
7474: CALL_OW 1
7478: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7479: LD_ADDR_EXP 34
7483: PUSH
7484: LD_EXP 34
7488: PUSH
7489: LD_INT 1
7491: MINUS
7492: ST_TO_ADDR
// end ; end_of_file
7493: LD_VAR 0 2
7497: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7498: LD_INT 0
7500: PPUSH
7501: PPUSH
// for un in battle_flags_id do
7502: LD_ADDR_VAR 0 2
7506: PUSH
7507: LD_EXP 28
7511: PUSH
7512: FOR_IN
7513: IFFALSE 7588
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7515: LD_VAR 0 2
7519: PPUSH
7520: LD_INT 1
7522: PUSH
7523: LD_LOC 12
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: PUSH
7532: LD_INT 2
7534: PUSH
7535: LD_LOC 12
7539: PUSH
7540: LD_INT 2
7542: DIV
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: LD_INT 3
7550: PUSH
7551: LD_LOC 12
7555: PUSH
7556: LD_INT 5
7558: DIV
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 20
7566: PUSH
7567: LD_LOC 12
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: PPUSH
7582: CALL_OW 423
7586: GO 7512
7588: POP
7589: POP
// end ;
7590: LD_VAR 0 1
7594: RET
// every 0 0$0.1 do var un ;
7595: GO 7597
7597: DISABLE
7598: LD_INT 0
7600: PPUSH
// begin if not def_morale_flags then
7601: LD_EXP 51
7605: NOT
7606: IFFALSE 7610
// exit ;
7608: GO 7687
// if not morale_decreasing_time then
7610: LD_EXP 11
7614: NOT
7615: IFFALSE 7619
// exit ;
7617: GO 7687
// strength = 100 ;
7619: LD_ADDR_LOC 12
7623: PUSH
7624: LD_INT 100
7626: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7627: LD_EXP 11
7631: PPUSH
7632: CALL_OW 67
// strength := strength - 1 ;
7636: LD_ADDR_LOC 12
7640: PUSH
7641: LD_LOC 12
7645: PUSH
7646: LD_INT 1
7648: MINUS
7649: ST_TO_ADDR
// Update_Flags ;
7650: CALL 7498 0 0
// until not strength ;
7654: LD_LOC 12
7658: NOT
7659: IFFALSE 7627
// for un in battle_flags_id do
7661: LD_ADDR_VAR 0 1
7665: PUSH
7666: LD_EXP 28
7670: PUSH
7671: FOR_IN
7672: IFFALSE 7685
// KillBattleFlag ( un ) ;
7674: LD_VAR 0 1
7678: PPUSH
7679: CALL_OW 419
7683: GO 7671
7685: POP
7686: POP
// end ; end_of_file
7687: PPOPN 1
7689: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
7690: LD_INT 0
7692: PPUSH
7693: PPUSH
// if ( not IAmSpec ) then
7694: CALL_OW 531
7698: NOT
7699: IFFALSE 7715
// Result := Limits_Info ^  ;
7701: LD_ADDR_VAR 0 1
7705: PUSH
7706: LD_LOC 24
7710: PUSH
7711: LD_STRING 
7713: ADD
7714: ST_TO_ADDR
// for i := 1 to 8 do
7715: LD_ADDR_VAR 0 2
7719: PUSH
7720: DOUBLE
7721: LD_INT 1
7723: DEC
7724: ST_TO_ADDR
7725: LD_INT 8
7727: PUSH
7728: FOR_TO
7729: IFFALSE 7774
// if Cheaters [ i ] then
7731: LD_LOC 25
7735: PUSH
7736: LD_VAR 0 2
7740: ARRAY
7741: IFFALSE 7772
// Result := Result ^ [ #Cheater , i , i ] ;
7743: LD_ADDR_VAR 0 1
7747: PUSH
7748: LD_VAR 0 1
7752: PUSH
7753: LD_STRING #Cheater
7755: PUSH
7756: LD_VAR 0 2
7760: PUSH
7761: LD_VAR 0 2
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: LIST
7770: ADD
7771: ST_TO_ADDR
7772: GO 7728
7774: POP
7775: POP
// end ;
7776: LD_VAR 0 1
7780: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
7781: LD_INT 0
7783: PPUSH
7784: PPUSH
7785: PPUSH
7786: PPUSH
7787: PPUSH
// case Game_Type of 10 :
7788: LD_EXP 41
7792: PUSH
7793: LD_INT 10
7795: DOUBLE
7796: EQUAL
7797: IFTRUE 7801
7799: GO 7812
7801: POP
// def_game_rules := 1 ; 11 :
7802: LD_ADDR_EXP 42
7806: PUSH
7807: LD_INT 1
7809: ST_TO_ADDR
7810: GO 7832
7812: LD_INT 11
7814: DOUBLE
7815: EQUAL
7816: IFTRUE 7820
7818: GO 7831
7820: POP
// def_game_rules := 3 ; end ;
7821: LD_ADDR_EXP 42
7825: PUSH
7826: LD_INT 3
7828: ST_TO_ADDR
7829: GO 7832
7831: POP
// case def_game_rules of 0 :
7832: LD_EXP 42
7836: PUSH
7837: LD_INT 0
7839: DOUBLE
7840: EQUAL
7841: IFTRUE 7845
7843: GO 7850
7845: POP
// exit ; 1 :
7846: GO 9908
7848: GO 9808
7850: LD_INT 1
7852: DOUBLE
7853: EQUAL
7854: IFTRUE 7858
7856: GO 8074
7858: POP
// begin def_base_level := 2 ;
7859: LD_ADDR_EXP 43
7863: PUSH
7864: LD_INT 2
7866: ST_TO_ADDR
// def_amount_of_people := 2 ;
7867: LD_ADDR_EXP 44
7871: PUSH
7872: LD_INT 2
7874: ST_TO_ADDR
// def_skill_level := 1 ;
7875: LD_ADDR_EXP 45
7879: PUSH
7880: LD_INT 1
7882: ST_TO_ADDR
// def_starting_resources := 2 ;
7883: LD_ADDR_EXP 46
7887: PUSH
7888: LD_INT 2
7890: ST_TO_ADDR
// def_shipments_density := 1 ;
7891: LD_ADDR_EXP 47
7895: PUSH
7896: LD_INT 1
7898: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7899: LD_ADDR_EXP 48
7903: PUSH
7904: LD_INT 0
7906: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7907: LD_ADDR_EXP 49
7911: PUSH
7912: LD_INT 1
7914: ST_TO_ADDR
// def_shared_vision := 1 ;
7915: LD_ADDR_EXP 50
7919: PUSH
7920: LD_INT 1
7922: ST_TO_ADDR
// def_morale_flags := 3 ;
7923: LD_ADDR_EXP 51
7927: PUSH
7928: LD_INT 3
7930: ST_TO_ADDR
// def_siberite_detection := 1 ;
7931: LD_ADDR_EXP 52
7935: PUSH
7936: LD_INT 1
7938: ST_TO_ADDR
// def_people_respawning := 1 ;
7939: LD_ADDR_EXP 53
7943: PUSH
7944: LD_INT 1
7946: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
7947: LD_ADDR_EXP 54
7951: PUSH
7952: LD_INT 1
7954: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7955: LD_ADDR_EXP 55
7959: PUSH
7960: LD_INT 0
7962: ST_TO_ADDR
// def_builduptime := 2 ;
7963: LD_ADDR_EXP 56
7967: PUSH
7968: LD_INT 2
7970: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
7971: LD_ADDR_VAR 0 2
7975: PUSH
7976: EMPTY
7977: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7978: LD_ADDR_VAR 0 3
7982: PUSH
7983: EMPTY
7984: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7985: LD_ADDR_LOC 19
7989: PUSH
7990: EMPTY
7991: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7992: LD_ADDR_LOC 20
7996: PUSH
7997: EMPTY
7998: ST_TO_ADDR
// Banned_Controls := [ ] ;
7999: LD_ADDR_LOC 21
8003: PUSH
8004: EMPTY
8005: ST_TO_ADDR
// Banned_Engines := [ ] ;
8006: LD_ADDR_LOC 22
8010: PUSH
8011: EMPTY
8012: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8013: LD_ADDR_LOC 17
8017: PUSH
8018: LD_INT 37
8020: PUSH
8021: EMPTY
8022: LIST
8023: PUSH
8024: LD_INT 4
8026: PUSH
8027: LD_INT 5
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: PUSH
8034: LD_INT 31
8036: PUSH
8037: LD_INT 32
8039: PUSH
8040: LD_INT 33
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: LIST
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: LIST
8052: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
8053: LD_ADDR_LOC 18
8057: PUSH
8058: LD_INT 2
8060: PUSH
8061: LD_INT 2
8063: PUSH
8064: LD_INT 4
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: LIST
8071: ST_TO_ADDR
// end ; 2 :
8072: GO 9808
8074: LD_INT 2
8076: DOUBLE
8077: EQUAL
8078: IFTRUE 8082
8080: GO 8291
8082: POP
// begin def_base_level := 1 ;
8083: LD_ADDR_EXP 43
8087: PUSH
8088: LD_INT 1
8090: ST_TO_ADDR
// def_amount_of_people := 2 ;
8091: LD_ADDR_EXP 44
8095: PUSH
8096: LD_INT 2
8098: ST_TO_ADDR
// def_skill_level := 3 ;
8099: LD_ADDR_EXP 45
8103: PUSH
8104: LD_INT 3
8106: ST_TO_ADDR
// def_starting_resources := 3 ;
8107: LD_ADDR_EXP 46
8111: PUSH
8112: LD_INT 3
8114: ST_TO_ADDR
// def_shipments_density := 2 ;
8115: LD_ADDR_EXP 47
8119: PUSH
8120: LD_INT 2
8122: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8123: LD_ADDR_EXP 48
8127: PUSH
8128: LD_INT 1
8130: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8131: LD_ADDR_EXP 49
8135: PUSH
8136: LD_INT 2
8138: ST_TO_ADDR
// def_shared_vision := 1 ;
8139: LD_ADDR_EXP 50
8143: PUSH
8144: LD_INT 1
8146: ST_TO_ADDR
// def_morale_flags := 0 ;
8147: LD_ADDR_EXP 51
8151: PUSH
8152: LD_INT 0
8154: ST_TO_ADDR
// def_siberite_detection := 1 ;
8155: LD_ADDR_EXP 52
8159: PUSH
8160: LD_INT 1
8162: ST_TO_ADDR
// def_people_respawning := 0 ;
8163: LD_ADDR_EXP 53
8167: PUSH
8168: LD_INT 0
8170: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8171: LD_ADDR_EXP 54
8175: PUSH
8176: LD_INT 0
8178: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8179: LD_ADDR_EXP 55
8183: PUSH
8184: LD_INT 0
8186: ST_TO_ADDR
// def_builduptime := 2 ;
8187: LD_ADDR_EXP 56
8191: PUSH
8192: LD_INT 2
8194: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8195: LD_ADDR_VAR 0 2
8199: PUSH
8200: LD_INT 1
8202: PUSH
8203: EMPTY
8204: LIST
8205: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8206: LD_ADDR_VAR 0 3
8210: PUSH
8211: EMPTY
8212: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8213: LD_ADDR_LOC 19
8217: PUSH
8218: EMPTY
8219: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8220: LD_ADDR_LOC 20
8224: PUSH
8225: EMPTY
8226: ST_TO_ADDR
// Banned_Controls := [ ] ;
8227: LD_ADDR_LOC 21
8231: PUSH
8232: EMPTY
8233: ST_TO_ADDR
// Banned_Engines := [ ] ;
8234: LD_ADDR_LOC 22
8238: PUSH
8239: EMPTY
8240: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8241: LD_ADDR_LOC 17
8245: PUSH
8246: LD_INT 4
8248: PUSH
8249: LD_INT 5
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: PUSH
8256: LD_INT 31
8258: PUSH
8259: LD_INT 32
8261: PUSH
8262: LD_INT 33
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
8274: LD_ADDR_LOC 18
8278: PUSH
8279: LD_INT 1
8281: PUSH
8282: LD_INT 2
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: ST_TO_ADDR
// end ; 3 :
8289: GO 9808
8291: LD_INT 3
8293: DOUBLE
8294: EQUAL
8295: IFTRUE 8299
8297: GO 8542
8299: POP
// begin def_base_level := 1 ;
8300: LD_ADDR_EXP 43
8304: PUSH
8305: LD_INT 1
8307: ST_TO_ADDR
// def_amount_of_people := 2 ;
8308: LD_ADDR_EXP 44
8312: PUSH
8313: LD_INT 2
8315: ST_TO_ADDR
// def_skill_level := 3 ;
8316: LD_ADDR_EXP 45
8320: PUSH
8321: LD_INT 3
8323: ST_TO_ADDR
// def_starting_resources := 3 ;
8324: LD_ADDR_EXP 46
8328: PUSH
8329: LD_INT 3
8331: ST_TO_ADDR
// def_shipments_density := 1 ;
8332: LD_ADDR_EXP 47
8336: PUSH
8337: LD_INT 1
8339: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8340: LD_ADDR_EXP 48
8344: PUSH
8345: LD_INT 0
8347: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
8348: LD_ADDR_EXP 49
8352: PUSH
8353: LD_INT 1
8355: ST_TO_ADDR
// def_shared_vision := 1 ;
8356: LD_ADDR_EXP 50
8360: PUSH
8361: LD_INT 1
8363: ST_TO_ADDR
// def_morale_flags := 0 ;
8364: LD_ADDR_EXP 51
8368: PUSH
8369: LD_INT 0
8371: ST_TO_ADDR
// def_siberite_detection := 1 ;
8372: LD_ADDR_EXP 52
8376: PUSH
8377: LD_INT 1
8379: ST_TO_ADDR
// def_people_respawning := 0 ;
8380: LD_ADDR_EXP 53
8384: PUSH
8385: LD_INT 0
8387: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8388: LD_ADDR_EXP 54
8392: PUSH
8393: LD_INT 2
8395: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8396: LD_ADDR_EXP 55
8400: PUSH
8401: LD_INT 0
8403: ST_TO_ADDR
// def_builduptime := 1 ;
8404: LD_ADDR_EXP 56
8408: PUSH
8409: LD_INT 1
8411: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8412: LD_ADDR_VAR 0 2
8416: PUSH
8417: LD_INT 23
8419: PUSH
8420: EMPTY
8421: LIST
8422: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
8423: LD_ADDR_VAR 0 3
8427: PUSH
8428: LD_INT 2
8430: PUSH
8431: LD_INT 37
8433: PUSH
8434: LD_INT 32
8436: PUSH
8437: LD_INT 33
8439: PUSH
8440: LD_INT 36
8442: PUSH
8443: LD_INT 16
8445: PUSH
8446: LD_INT 23
8448: PUSH
8449: LD_INT 21
8451: PUSH
8452: LD_INT 18
8454: PUSH
8455: LD_INT 22
8457: PUSH
8458: LD_INT 20
8460: PUSH
8461: LD_INT 19
8463: PUSH
8464: LD_INT 25
8466: PUSH
8467: LD_INT 17
8469: PUSH
8470: LD_INT 24
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8490: LD_ADDR_LOC 19
8494: PUSH
8495: EMPTY
8496: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8497: LD_ADDR_LOC 20
8501: PUSH
8502: EMPTY
8503: ST_TO_ADDR
// Banned_Controls := [ ] ;
8504: LD_ADDR_LOC 21
8508: PUSH
8509: EMPTY
8510: ST_TO_ADDR
// Banned_Engines := [ ] ;
8511: LD_ADDR_LOC 22
8515: PUSH
8516: EMPTY
8517: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8518: LD_ADDR_LOC 17
8522: PUSH
8523: EMPTY
8524: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8525: LD_ADDR_LOC 18
8529: PUSH
8530: EMPTY
8531: ST_TO_ADDR
// No_Mechs := true ;
8532: LD_ADDR_EXP 57
8536: PUSH
8537: LD_INT 1
8539: ST_TO_ADDR
// end ; 4 :
8540: GO 9808
8542: LD_INT 4
8544: DOUBLE
8545: EQUAL
8546: IFTRUE 8550
8548: GO 8725
8550: POP
// begin def_base_level := 1 ;
8551: LD_ADDR_EXP 43
8555: PUSH
8556: LD_INT 1
8558: ST_TO_ADDR
// def_amount_of_people := 2 ;
8559: LD_ADDR_EXP 44
8563: PUSH
8564: LD_INT 2
8566: ST_TO_ADDR
// def_skill_level := 3 ;
8567: LD_ADDR_EXP 45
8571: PUSH
8572: LD_INT 3
8574: ST_TO_ADDR
// def_starting_resources := 3 ;
8575: LD_ADDR_EXP 46
8579: PUSH
8580: LD_INT 3
8582: ST_TO_ADDR
// def_shipments_density := 2 ;
8583: LD_ADDR_EXP 47
8587: PUSH
8588: LD_INT 2
8590: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
8591: LD_ADDR_EXP 48
8595: PUSH
8596: LD_INT 1
8598: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
8599: LD_ADDR_EXP 49
8603: PUSH
8604: LD_INT 2
8606: ST_TO_ADDR
// def_shared_vision := 1 ;
8607: LD_ADDR_EXP 50
8611: PUSH
8612: LD_INT 1
8614: ST_TO_ADDR
// def_morale_flags := 0 ;
8615: LD_ADDR_EXP 51
8619: PUSH
8620: LD_INT 0
8622: ST_TO_ADDR
// def_siberite_detection := 1 ;
8623: LD_ADDR_EXP 52
8627: PUSH
8628: LD_INT 1
8630: ST_TO_ADDR
// def_people_respawning := 0 ;
8631: LD_ADDR_EXP 53
8635: PUSH
8636: LD_INT 0
8638: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
8639: LD_ADDR_EXP 54
8643: PUSH
8644: LD_INT 0
8646: ST_TO_ADDR
// def_siberite_bomb := 1 ;
8647: LD_ADDR_EXP 55
8651: PUSH
8652: LD_INT 1
8654: ST_TO_ADDR
// def_builduptime := 3 ;
8655: LD_ADDR_EXP 56
8659: PUSH
8660: LD_INT 3
8662: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
8663: LD_ADDR_VAR 0 2
8667: PUSH
8668: LD_INT 1
8670: PUSH
8671: EMPTY
8672: LIST
8673: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
8674: LD_ADDR_VAR 0 3
8678: PUSH
8679: EMPTY
8680: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8681: LD_ADDR_LOC 19
8685: PUSH
8686: EMPTY
8687: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8688: LD_ADDR_LOC 20
8692: PUSH
8693: EMPTY
8694: ST_TO_ADDR
// Banned_Controls := [ ] ;
8695: LD_ADDR_LOC 21
8699: PUSH
8700: EMPTY
8701: ST_TO_ADDR
// Banned_Engines := [ ] ;
8702: LD_ADDR_LOC 22
8706: PUSH
8707: EMPTY
8708: ST_TO_ADDR
// Restricted_Builds := [ ] ;
8709: LD_ADDR_LOC 17
8713: PUSH
8714: EMPTY
8715: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
8716: LD_ADDR_LOC 18
8720: PUSH
8721: EMPTY
8722: ST_TO_ADDR
// end ; 5 :
8723: GO 9808
8725: LD_INT 5
8727: DOUBLE
8728: EQUAL
8729: IFTRUE 8733
8731: GO 8982
8733: POP
// begin def_base_level := 0 ;
8734: LD_ADDR_EXP 43
8738: PUSH
8739: LD_INT 0
8741: ST_TO_ADDR
// def_amount_of_people := 0 ;
8742: LD_ADDR_EXP 44
8746: PUSH
8747: LD_INT 0
8749: ST_TO_ADDR
// def_skill_level := 0 ;
8750: LD_ADDR_EXP 45
8754: PUSH
8755: LD_INT 0
8757: ST_TO_ADDR
// def_starting_resources := 0 ;
8758: LD_ADDR_EXP 46
8762: PUSH
8763: LD_INT 0
8765: ST_TO_ADDR
// def_shipments_density := 0 ;
8766: LD_ADDR_EXP 47
8770: PUSH
8771: LD_INT 0
8773: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8774: LD_ADDR_EXP 48
8778: PUSH
8779: LD_INT 0
8781: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8782: LD_ADDR_EXP 49
8786: PUSH
8787: LD_INT 0
8789: ST_TO_ADDR
// def_shared_vision := 1 ;
8790: LD_ADDR_EXP 50
8794: PUSH
8795: LD_INT 1
8797: ST_TO_ADDR
// def_morale_flags := 0 ;
8798: LD_ADDR_EXP 51
8802: PUSH
8803: LD_INT 0
8805: ST_TO_ADDR
// def_siberite_detection := 0 ;
8806: LD_ADDR_EXP 52
8810: PUSH
8811: LD_INT 0
8813: ST_TO_ADDR
// def_people_respawning := 1 ;
8814: LD_ADDR_EXP 53
8818: PUSH
8819: LD_INT 1
8821: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
8822: LD_ADDR_EXP 54
8826: PUSH
8827: LD_INT 1
8829: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8830: LD_ADDR_EXP 55
8834: PUSH
8835: LD_INT 0
8837: ST_TO_ADDR
// def_builduptime := 0 ;
8838: LD_ADDR_EXP 56
8842: PUSH
8843: LD_INT 0
8845: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
8846: LD_ADDR_VAR 0 2
8850: PUSH
8851: LD_INT 10
8853: PUSH
8854: LD_INT 3
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
8861: LD_ADDR_VAR 0 3
8865: PUSH
8866: LD_INT 12
8868: PUSH
8869: LD_INT 11
8871: PUSH
8872: LD_INT 14
8874: PUSH
8875: LD_INT 13
8877: PUSH
8878: LD_INT 5
8880: PUSH
8881: LD_INT 24
8883: PUSH
8884: LD_INT 21
8886: PUSH
8887: LD_INT 33
8889: PUSH
8890: LD_INT 36
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
8904: LD_ADDR_LOC 19
8908: PUSH
8909: LD_INT 31
8911: PUSH
8912: EMPTY
8913: LIST
8914: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8915: LD_ADDR_LOC 20
8919: PUSH
8920: EMPTY
8921: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
8922: LD_ADDR_LOC 21
8926: PUSH
8927: LD_INT 2
8929: PUSH
8930: EMPTY
8931: LIST
8932: ST_TO_ADDR
// Banned_Engines := [ ] ;
8933: LD_ADDR_LOC 22
8937: PUSH
8938: EMPTY
8939: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
8940: LD_ADDR_LOC 17
8944: PUSH
8945: LD_INT 4
8947: PUSH
8948: EMPTY
8949: LIST
8950: PUSH
8951: LD_INT 31
8953: PUSH
8954: LD_INT 32
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
8965: LD_ADDR_LOC 18
8969: PUSH
8970: LD_INT 1
8972: PUSH
8973: LD_INT 1
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: ST_TO_ADDR
// end ; 6 :
8980: GO 9808
8982: LD_INT 6
8984: DOUBLE
8985: EQUAL
8986: IFTRUE 8990
8988: GO 9193
8990: POP
// begin def_base_level := 1 ;
8991: LD_ADDR_EXP 43
8995: PUSH
8996: LD_INT 1
8998: ST_TO_ADDR
// def_amount_of_people := 2 ;
8999: LD_ADDR_EXP 44
9003: PUSH
9004: LD_INT 2
9006: ST_TO_ADDR
// def_skill_level := 3 ;
9007: LD_ADDR_EXP 45
9011: PUSH
9012: LD_INT 3
9014: ST_TO_ADDR
// def_starting_resources := 3 ;
9015: LD_ADDR_EXP 46
9019: PUSH
9020: LD_INT 3
9022: ST_TO_ADDR
// def_shipments_density := 1 ;
9023: LD_ADDR_EXP 47
9027: PUSH
9028: LD_INT 1
9030: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9031: LD_ADDR_EXP 48
9035: PUSH
9036: LD_INT 0
9038: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9039: LD_ADDR_EXP 49
9043: PUSH
9044: LD_INT 1
9046: ST_TO_ADDR
// def_shared_vision := 1 ;
9047: LD_ADDR_EXP 50
9051: PUSH
9052: LD_INT 1
9054: ST_TO_ADDR
// def_morale_flags := 0 ;
9055: LD_ADDR_EXP 51
9059: PUSH
9060: LD_INT 0
9062: ST_TO_ADDR
// def_siberite_detection := 1 ;
9063: LD_ADDR_EXP 52
9067: PUSH
9068: LD_INT 1
9070: ST_TO_ADDR
// def_people_respawning := 2 ;
9071: LD_ADDR_EXP 53
9075: PUSH
9076: LD_INT 2
9078: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9079: LD_ADDR_EXP 54
9083: PUSH
9084: LD_INT 1
9086: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9087: LD_ADDR_EXP 55
9091: PUSH
9092: LD_INT 0
9094: ST_TO_ADDR
// def_builduptime := 1 ;
9095: LD_ADDR_EXP 56
9099: PUSH
9100: LD_INT 1
9102: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9103: LD_ADDR_VAR 0 2
9107: PUSH
9108: LD_INT 23
9110: PUSH
9111: EMPTY
9112: LIST
9113: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
9114: LD_ADDR_VAR 0 3
9118: PUSH
9119: LD_INT 2
9121: PUSH
9122: LD_INT 37
9124: PUSH
9125: LD_INT 31
9127: PUSH
9128: LD_INT 32
9130: PUSH
9131: LD_INT 33
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9141: LD_ADDR_LOC 19
9145: PUSH
9146: EMPTY
9147: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9148: LD_ADDR_LOC 20
9152: PUSH
9153: EMPTY
9154: ST_TO_ADDR
// Banned_Controls := [ ] ;
9155: LD_ADDR_LOC 21
9159: PUSH
9160: EMPTY
9161: ST_TO_ADDR
// Banned_Engines := [ ] ;
9162: LD_ADDR_LOC 22
9166: PUSH
9167: EMPTY
9168: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9169: LD_ADDR_LOC 17
9173: PUSH
9174: EMPTY
9175: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9176: LD_ADDR_LOC 18
9180: PUSH
9181: EMPTY
9182: ST_TO_ADDR
// No_Mechs := true ;
9183: LD_ADDR_EXP 57
9187: PUSH
9188: LD_INT 1
9190: ST_TO_ADDR
// end ; 7 :
9191: GO 9808
9193: LD_INT 7
9195: DOUBLE
9196: EQUAL
9197: IFTRUE 9201
9199: GO 9399
9201: POP
// begin def_base_level := 1 ;
9202: LD_ADDR_EXP 43
9206: PUSH
9207: LD_INT 1
9209: ST_TO_ADDR
// def_amount_of_people := 2 ;
9210: LD_ADDR_EXP 44
9214: PUSH
9215: LD_INT 2
9217: ST_TO_ADDR
// def_skill_level := 3 ;
9218: LD_ADDR_EXP 45
9222: PUSH
9223: LD_INT 3
9225: ST_TO_ADDR
// def_starting_resources := 3 ;
9226: LD_ADDR_EXP 46
9230: PUSH
9231: LD_INT 3
9233: ST_TO_ADDR
// def_shipments_density := 1 ;
9234: LD_ADDR_EXP 47
9238: PUSH
9239: LD_INT 1
9241: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9242: LD_ADDR_EXP 48
9246: PUSH
9247: LD_INT 1
9249: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9250: LD_ADDR_EXP 49
9254: PUSH
9255: LD_INT 2
9257: ST_TO_ADDR
// def_shared_vision := 1 ;
9258: LD_ADDR_EXP 50
9262: PUSH
9263: LD_INT 1
9265: ST_TO_ADDR
// def_morale_flags := 0 ;
9266: LD_ADDR_EXP 51
9270: PUSH
9271: LD_INT 0
9273: ST_TO_ADDR
// def_siberite_detection := 1 ;
9274: LD_ADDR_EXP 52
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// def_people_respawning := 0 ;
9282: LD_ADDR_EXP 53
9286: PUSH
9287: LD_INT 0
9289: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9290: LD_ADDR_EXP 54
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9298: LD_ADDR_EXP 55
9302: PUSH
9303: LD_INT 0
9305: ST_TO_ADDR
// def_builduptime := 3 ;
9306: LD_ADDR_EXP 56
9310: PUSH
9311: LD_INT 3
9313: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9314: LD_ADDR_VAR 0 2
9318: PUSH
9319: LD_INT 23
9321: PUSH
9322: EMPTY
9323: LIST
9324: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
9325: LD_ADDR_VAR 0 3
9329: PUSH
9330: LD_INT 37
9332: PUSH
9333: EMPTY
9334: LIST
9335: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9336: LD_ADDR_LOC 19
9340: PUSH
9341: EMPTY
9342: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9343: LD_ADDR_LOC 20
9347: PUSH
9348: EMPTY
9349: ST_TO_ADDR
// Banned_Controls := [ ] ;
9350: LD_ADDR_LOC 21
9354: PUSH
9355: EMPTY
9356: ST_TO_ADDR
// Banned_Engines := [ ] ;
9357: LD_ADDR_LOC 22
9361: PUSH
9362: EMPTY
9363: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9364: LD_ADDR_LOC 17
9368: PUSH
9369: LD_INT 31
9371: PUSH
9372: LD_INT 32
9374: PUSH
9375: LD_INT 33
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: LIST
9382: PUSH
9383: EMPTY
9384: LIST
9385: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
9386: LD_ADDR_LOC 18
9390: PUSH
9391: LD_INT 10
9393: PUSH
9394: EMPTY
9395: LIST
9396: ST_TO_ADDR
// end ; 8 :
9397: GO 9808
9399: LD_INT 8
9401: DOUBLE
9402: EQUAL
9403: IFTRUE 9407
9405: GO 9807
9407: POP
// begin def_base_level := 0 ;
9408: LD_ADDR_EXP 43
9412: PUSH
9413: LD_INT 0
9415: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
9416: LD_ADDR_EXP 44
9420: PUSH
9421: LD_INT 0
9423: PPUSH
9424: LD_INT 1
9426: PPUSH
9427: CALL_OW 12
9431: ST_TO_ADDR
// def_skill_level := 0 ;
9432: LD_ADDR_EXP 45
9436: PUSH
9437: LD_INT 0
9439: ST_TO_ADDR
// def_starting_resources := 2 ;
9440: LD_ADDR_EXP 46
9444: PUSH
9445: LD_INT 2
9447: ST_TO_ADDR
// def_shipments_density := 1 ;
9448: LD_ADDR_EXP 47
9452: PUSH
9453: LD_INT 1
9455: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9456: LD_ADDR_EXP 48
9460: PUSH
9461: LD_INT 0
9463: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9464: LD_ADDR_EXP 49
9468: PUSH
9469: LD_INT 0
9471: ST_TO_ADDR
// def_shared_vision := 1 ;
9472: LD_ADDR_EXP 50
9476: PUSH
9477: LD_INT 1
9479: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
9480: LD_ADDR_EXP 51
9484: PUSH
9485: LD_INT 0
9487: PPUSH
9488: LD_INT 2
9490: PPUSH
9491: CALL_OW 12
9495: ST_TO_ADDR
// def_siberite_detection := 0 ;
9496: LD_ADDR_EXP 52
9500: PUSH
9501: LD_INT 0
9503: ST_TO_ADDR
// def_people_respawning := 0 ;
9504: LD_ADDR_EXP 53
9508: PUSH
9509: LD_INT 0
9511: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9512: LD_ADDR_EXP 54
9516: PUSH
9517: LD_INT 2
9519: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9520: LD_ADDR_EXP 55
9524: PUSH
9525: LD_INT 0
9527: ST_TO_ADDR
// def_builduptime := 0 ;
9528: LD_ADDR_EXP 56
9532: PUSH
9533: LD_INT 0
9535: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
9536: LD_ADDR_VAR 0 2
9540: PUSH
9541: LD_INT 23
9543: PUSH
9544: LD_INT 20
9546: PUSH
9547: LD_INT 40
9549: PUSH
9550: LD_INT 47
9552: PUSH
9553: LD_INT 46
9555: PUSH
9556: LD_INT 39
9558: PUSH
9559: LD_INT 71
9561: PUSH
9562: LD_INT 34
9564: PUSH
9565: LD_INT 41
9567: PUSH
9568: LD_INT 44
9570: PUSH
9571: LD_INT 17
9573: PUSH
9574: LD_INT 16
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
9591: LD_ADDR_VAR 0 3
9595: PUSH
9596: LD_INT 37
9598: PUSH
9599: LD_INT 5
9601: PUSH
9602: LD_INT 13
9604: PUSH
9605: LD_INT 34
9607: PUSH
9608: LD_INT 12
9610: PUSH
9611: LD_INT 15
9613: PUSH
9614: LD_INT 11
9616: PUSH
9617: LD_INT 14
9619: PUSH
9620: LD_INT 29
9622: PUSH
9623: LD_INT 30
9625: PUSH
9626: LD_INT 28
9628: PUSH
9629: LD_INT 24
9631: PUSH
9632: LD_INT 25
9634: PUSH
9635: LD_INT 20
9637: PUSH
9638: LD_INT 21
9640: PUSH
9641: LD_INT 22
9643: PUSH
9644: LD_INT 36
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9666: LD_ADDR_LOC 19
9670: PUSH
9671: EMPTY
9672: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
9673: LD_ADDR_LOC 20
9677: PUSH
9678: LD_INT 14
9680: PUSH
9681: EMPTY
9682: LIST
9683: ST_TO_ADDR
// Banned_Controls := [ ] ;
9684: LD_ADDR_LOC 21
9688: PUSH
9689: EMPTY
9690: ST_TO_ADDR
// Banned_Engines := [ ] ;
9691: LD_ADDR_LOC 22
9695: PUSH
9696: EMPTY
9697: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
9698: LD_ADDR_LOC 17
9702: PUSH
9703: LD_INT 31
9705: PUSH
9706: LD_INT 32
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: PUSH
9713: LD_INT 4
9715: PUSH
9716: EMPTY
9717: LIST
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
9723: LD_ADDR_LOC 18
9727: PUSH
9728: LD_INT 2
9730: PUSH
9731: LD_INT 1
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: ST_TO_ADDR
// for i := 1 to 8 do
9738: LD_ADDR_VAR 0 4
9742: PUSH
9743: DOUBLE
9744: LD_INT 1
9746: DEC
9747: ST_TO_ADDR
9748: LD_INT 8
9750: PUSH
9751: FOR_TO
9752: IFFALSE 9803
// if ( Side_Nations [ i ] = 3 ) then
9754: LD_EXP 22
9758: PUSH
9759: LD_VAR 0 4
9763: ARRAY
9764: PUSH
9765: LD_INT 3
9767: EQUAL
9768: IFFALSE 9801
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
9770: LD_ADDR_EXP 22
9774: PUSH
9775: LD_EXP 22
9779: PPUSH
9780: LD_VAR 0 4
9784: PPUSH
9785: LD_INT 1
9787: PPUSH
9788: LD_INT 2
9790: PPUSH
9791: CALL_OW 12
9795: PPUSH
9796: CALL_OW 1
9800: ST_TO_ADDR
9801: GO 9751
9803: POP
9804: POP
// end ; end ;
9805: GO 9808
9807: POP
// for i := 1 to 8 do
9808: LD_ADDR_VAR 0 4
9812: PUSH
9813: DOUBLE
9814: LD_INT 1
9816: DEC
9817: ST_TO_ADDR
9818: LD_INT 8
9820: PUSH
9821: FOR_TO
9822: IFFALSE 9906
// if Side_Positions [ i ] then
9824: LD_EXP 21
9828: PUSH
9829: LD_VAR 0 4
9833: ARRAY
9834: IFFALSE 9904
// begin for j in Unavailable_Techs do
9836: LD_ADDR_VAR 0 5
9840: PUSH
9841: LD_VAR 0 2
9845: PUSH
9846: FOR_IN
9847: IFFALSE 9868
// SetTech ( j , i , 0 ) ;
9849: LD_VAR 0 5
9853: PPUSH
9854: LD_VAR 0 4
9858: PPUSH
9859: LD_INT 0
9861: PPUSH
9862: CALL_OW 322
9866: GO 9846
9868: POP
9869: POP
// for j in Unavailable_Builds do
9870: LD_ADDR_VAR 0 5
9874: PUSH
9875: LD_VAR 0 3
9879: PUSH
9880: FOR_IN
9881: IFFALSE 9902
// SetRestrict ( j , i , 0 ) ;
9883: LD_VAR 0 5
9887: PPUSH
9888: LD_VAR 0 4
9892: PPUSH
9893: LD_INT 0
9895: PPUSH
9896: CALL_OW 324
9900: GO 9880
9902: POP
9903: POP
// end ;
9904: GO 9821
9906: POP
9907: POP
// end ;
9908: LD_VAR 0 1
9912: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
9913: LD_INT 0
9915: PPUSH
9916: PPUSH
9917: PPUSH
9918: PPUSH
9919: PPUSH
9920: PPUSH
9921: PPUSH
// for i := 1 to Restricted_Builds do
9922: LD_ADDR_VAR 0 2
9926: PUSH
9927: DOUBLE
9928: LD_INT 1
9930: DEC
9931: ST_TO_ADDR
9932: LD_LOC 17
9936: PUSH
9937: FOR_TO
9938: IFFALSE 10248
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
9940: LD_LOC 17
9944: PUSH
9945: LD_VAR 0 2
9949: ARRAY
9950: PUSH
9951: LD_INT 1
9953: ARRAY
9954: PUSH
9955: LD_INT 31
9957: DOUBLE
9958: EQUAL
9959: IFTRUE 9975
9961: LD_INT 32
9963: DOUBLE
9964: EQUAL
9965: IFTRUE 9975
9967: LD_INT 33
9969: DOUBLE
9970: EQUAL
9971: IFTRUE 9975
9973: GO 9986
9975: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
9976: LD_ADDR_VAR 0 6
9980: PUSH
9981: LD_STRING #Turrets
9983: ST_TO_ADDR
9984: GO 10031
9986: LD_INT 4
9988: DOUBLE
9989: EQUAL
9990: IFTRUE 10000
9992: LD_INT 5
9994: DOUBLE
9995: EQUAL
9996: IFTRUE 10000
9998: GO 10011
10000: POP
// btype := #Armouries ; b_Behemoth :
10001: LD_ADDR_VAR 0 6
10005: PUSH
10006: LD_STRING #Armouries
10008: ST_TO_ADDR
10009: GO 10031
10011: LD_INT 37
10013: DOUBLE
10014: EQUAL
10015: IFTRUE 10019
10017: GO 10030
10019: POP
// btype := #Behemoths ; end ;
10020: LD_ADDR_VAR 0 6
10024: PUSH
10025: LD_STRING #Behemoths
10027: ST_TO_ADDR
10028: GO 10031
10030: POP
// list := [ ] ;
10031: LD_ADDR_VAR 0 7
10035: PUSH
10036: EMPTY
10037: ST_TO_ADDR
// for j := 1 to 8 do
10038: LD_ADDR_VAR 0 3
10042: PUSH
10043: DOUBLE
10044: LD_INT 1
10046: DEC
10047: ST_TO_ADDR
10048: LD_INT 8
10050: PUSH
10051: FOR_TO
10052: IFFALSE 10145
// if Side_Positions [ j ] then
10054: LD_EXP 21
10058: PUSH
10059: LD_VAR 0 3
10063: ARRAY
10064: IFFALSE 10143
// begin amount := 0 ;
10066: LD_ADDR_VAR 0 5
10070: PUSH
10071: LD_INT 0
10073: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
10074: LD_ADDR_VAR 0 4
10078: PUSH
10079: LD_LOC 17
10083: PUSH
10084: LD_VAR 0 2
10088: ARRAY
10089: PUSH
10090: FOR_IN
10091: IFFALSE 10139
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
10093: LD_ADDR_VAR 0 5
10097: PUSH
10098: LD_VAR 0 5
10102: PUSH
10103: LD_INT 22
10105: PUSH
10106: LD_VAR 0 3
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PUSH
10115: LD_INT 30
10117: PUSH
10118: LD_VAR 0 4
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PPUSH
10131: CALL_OW 69
10135: PLUS
10136: ST_TO_ADDR
10137: GO 10090
10139: POP
10140: POP
// break ;
10141: GO 10145
// end ;
10143: GO 10051
10145: POP
10146: POP
// list := [ ] ;
10147: LD_ADDR_VAR 0 7
10151: PUSH
10152: EMPTY
10153: ST_TO_ADDR
// for j := 1 to 8 do
10154: LD_ADDR_VAR 0 3
10158: PUSH
10159: DOUBLE
10160: LD_INT 1
10162: DEC
10163: ST_TO_ADDR
10164: LD_INT 8
10166: PUSH
10167: FOR_TO
10168: IFFALSE 10188
// list := list ^ amount ;
10170: LD_ADDR_VAR 0 7
10174: PUSH
10175: LD_VAR 0 7
10179: PUSH
10180: LD_VAR 0 5
10184: ADD
10185: ST_TO_ADDR
10186: GO 10167
10188: POP
10189: POP
// Already_Built := Already_Built ^ [ list ] ;
10190: LD_ADDR_LOC 23
10194: PUSH
10195: LD_LOC 23
10199: PUSH
10200: LD_VAR 0 7
10204: PUSH
10205: EMPTY
10206: LIST
10207: ADD
10208: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
10209: LD_ADDR_LOC 24
10213: PUSH
10214: LD_LOC 24
10218: PUSH
10219: LD_VAR 0 6
10223: PUSH
10224: LD_VAR 0 5
10228: PUSH
10229: LD_LOC 18
10233: PUSH
10234: LD_VAR 0 2
10238: ARRAY
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: LIST
10244: ADD
10245: ST_TO_ADDR
// end ;
10246: GO 9937
10248: POP
10249: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10250: LD_ADDR_LOC 25
10254: PUSH
10255: LD_INT 0
10257: PUSH
10258: LD_INT 0
10260: PUSH
10261: LD_INT 0
10263: PUSH
10264: LD_INT 0
10266: PUSH
10267: LD_INT 0
10269: PUSH
10270: LD_INT 0
10272: PUSH
10273: LD_INT 0
10275: PUSH
10276: LD_INT 0
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: ST_TO_ADDR
// if Limits_Info then
10289: LD_LOC 24
10293: IFFALSE 10309
// Limits_Info := #Limits ^ Limits_Info ;
10295: LD_ADDR_LOC 24
10299: PUSH
10300: LD_STRING #Limits
10302: PUSH
10303: LD_LOC 24
10307: ADD
10308: ST_TO_ADDR
// end ;
10309: LD_VAR 0 1
10313: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
10314: LD_INT 0
10316: PPUSH
10317: PPUSH
10318: PPUSH
10319: PPUSH
// for i := 1 to Restricted_Builds do
10320: LD_ADDR_VAR 0 7
10324: PUSH
10325: DOUBLE
10326: LD_INT 1
10328: DEC
10329: ST_TO_ADDR
10330: LD_LOC 17
10334: PUSH
10335: FOR_TO
10336: IFFALSE 10759
// if BType in Restricted_Builds [ i ] then
10338: LD_VAR 0 2
10342: PUSH
10343: LD_LOC 17
10347: PUSH
10348: LD_VAR 0 7
10352: ARRAY
10353: IN
10354: IFFALSE 10757
// begin if old_side then
10356: LD_VAR 0 4
10360: IFFALSE 10486
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
10362: LD_LOC 23
10366: PUSH
10367: LD_VAR 0 7
10371: ARRAY
10372: PUSH
10373: LD_VAR 0 3
10377: ARRAY
10378: PUSH
10379: LD_VAR 0 5
10383: PLUS
10384: PUSH
10385: LD_LOC 18
10389: PUSH
10390: LD_VAR 0 7
10394: ARRAY
10395: GREATER
10396: IFFALSE 10422
// begin SetSide ( un , old_side ) ;
10398: LD_VAR 0 1
10402: PPUSH
10403: LD_VAR 0 4
10407: PPUSH
10408: CALL_OW 235
// count := 0 ;
10412: LD_ADDR_VAR 0 5
10416: PUSH
10417: LD_INT 0
10419: ST_TO_ADDR
// end else
10420: GO 10486
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
10422: LD_ADDR_LOC 23
10426: PUSH
10427: LD_LOC 23
10431: PPUSH
10432: LD_VAR 0 7
10436: PPUSH
10437: LD_LOC 23
10441: PUSH
10442: LD_VAR 0 7
10446: ARRAY
10447: PPUSH
10448: LD_VAR 0 4
10452: PPUSH
10453: LD_LOC 23
10457: PUSH
10458: LD_VAR 0 7
10462: ARRAY
10463: PUSH
10464: LD_VAR 0 4
10468: ARRAY
10469: PUSH
10470: LD_VAR 0 5
10474: MINUS
10475: PPUSH
10476: CALL_OW 1
10480: PPUSH
10481: CALL_OW 1
10485: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
10486: LD_ADDR_LOC 23
10490: PUSH
10491: LD_LOC 23
10495: PPUSH
10496: LD_VAR 0 7
10500: PPUSH
10501: LD_LOC 23
10505: PUSH
10506: LD_VAR 0 7
10510: ARRAY
10511: PPUSH
10512: LD_VAR 0 3
10516: PPUSH
10517: LD_LOC 23
10521: PUSH
10522: LD_VAR 0 7
10526: ARRAY
10527: PUSH
10528: LD_VAR 0 3
10532: ARRAY
10533: PUSH
10534: LD_VAR 0 5
10538: PLUS
10539: PPUSH
10540: CALL_OW 1
10544: PPUSH
10545: CALL_OW 1
10549: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
10550: LD_VAR 0 5
10554: PUSH
10555: LD_INT 0
10557: NONEQUAL
10558: PUSH
10559: LD_VAR 0 3
10563: PUSH
10564: LD_OWVAR 2
10568: EQUAL
10569: AND
10570: IFFALSE 10613
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
10572: LD_ADDR_LOC 24
10576: PUSH
10577: LD_LOC 24
10581: PPUSH
10582: LD_INT 3
10584: PUSH
10585: LD_VAR 0 7
10589: MUL
10590: PPUSH
10591: LD_LOC 23
10595: PUSH
10596: LD_VAR 0 7
10600: ARRAY
10601: PUSH
10602: LD_VAR 0 3
10606: ARRAY
10607: PPUSH
10608: CALL_OW 1
10612: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
10613: LD_LOC 23
10617: PUSH
10618: LD_VAR 0 7
10622: ARRAY
10623: PUSH
10624: LD_VAR 0 3
10628: ARRAY
10629: PUSH
10630: LD_LOC 18
10634: PUSH
10635: LD_VAR 0 7
10639: ARRAY
10640: GREATER
10641: IFFALSE 10668
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
10643: LD_ADDR_LOC 25
10647: PUSH
10648: LD_LOC 25
10652: PPUSH
10653: LD_VAR 0 3
10657: PPUSH
10658: LD_INT 1
10660: PPUSH
10661: CALL_OW 1
10665: ST_TO_ADDR
// end else
10666: GO 10755
// begin for j := 1 to Restricted_Builds do
10668: LD_ADDR_VAR 0 8
10672: PUSH
10673: DOUBLE
10674: LD_INT 1
10676: DEC
10677: ST_TO_ADDR
10678: LD_LOC 17
10682: PUSH
10683: FOR_TO
10684: IFFALSE 10728
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
10686: LD_LOC 23
10690: PUSH
10691: LD_VAR 0 8
10695: ARRAY
10696: PUSH
10697: LD_VAR 0 3
10701: ARRAY
10702: PUSH
10703: LD_LOC 18
10707: PUSH
10708: LD_VAR 0 8
10712: ARRAY
10713: GREATER
10714: IFFALSE 10726
// begin Is_Cheater := true ;
10716: LD_ADDR_VAR 0 9
10720: PUSH
10721: LD_INT 1
10723: ST_TO_ADDR
// break ;
10724: GO 10728
// end ;
10726: GO 10683
10728: POP
10729: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
10730: LD_ADDR_LOC 25
10734: PUSH
10735: LD_LOC 25
10739: PPUSH
10740: LD_VAR 0 3
10744: PPUSH
10745: LD_VAR 0 9
10749: PPUSH
10750: CALL_OW 1
10754: ST_TO_ADDR
// end ; break ;
10755: GO 10759
// end ;
10757: GO 10335
10759: POP
10760: POP
// end ;
10761: LD_VAR 0 6
10765: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
10766: LD_VAR 0 5
10770: PUSH
10771: LD_LOC 19
10775: IN
10776: PUSH
10777: LD_VAR 0 2
10781: PUSH
10782: LD_LOC 20
10786: IN
10787: OR
10788: PUSH
10789: LD_VAR 0 4
10793: PUSH
10794: LD_LOC 21
10798: IN
10799: OR
10800: PUSH
10801: LD_VAR 0 3
10805: PUSH
10806: LD_LOC 22
10810: IN
10811: OR
10812: IFFALSE 10823
// ComCancel ( factory ) ;
10814: LD_VAR 0 1
10818: PPUSH
10819: CALL_OW 127
// end ;
10823: PPOPN 5
10825: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
10826: LD_VAR 0 2
10830: PUSH
10831: LD_LOC 19
10835: IN
10836: IFFALSE 10847
// ComCancel ( building ) ;
10838: LD_VAR 0 1
10842: PPUSH
10843: CALL_OW 127
// end ; end_of_file
10847: PPOPN 2
10849: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
10850: LD_INT 0
10852: PPUSH
10853: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
10854: LD_ADDR_VAR 0 2
10858: PUSH
10859: LD_STRING #Multi1x1-Time
10861: PUSH
10862: LD_OWVAR 1
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: ST_TO_ADDR
// if WaitServerStrings then
10871: LD_EXP 59
10875: IFFALSE 10893
// AllStrings = AllStrings ^ WaitServerStrings ;
10877: LD_ADDR_VAR 0 2
10881: PUSH
10882: LD_VAR 0 2
10886: PUSH
10887: LD_EXP 59
10891: ADD
10892: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
10893: LD_INT 0
10895: PUSH
10896: LD_EXP 16
10900: PUSH
10901: LD_OWVAR 1
10905: MINUS
10906: LESSEQUAL
10907: IFFALSE 10938
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
10909: LD_ADDR_VAR 0 2
10913: PUSH
10914: LD_VAR 0 2
10918: PUSH
10919: LD_STRING #allowedsibbomb
10921: PUSH
10922: LD_EXP 16
10926: PUSH
10927: LD_OWVAR 1
10931: MINUS
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: ADD
10937: ST_TO_ADDR
// if ( ExtraStrings ) then
10938: LD_EXP 58
10942: IFFALSE 10964
// AllStrings := AllStrings ^  ^ ExtraStrings ;
10944: LD_ADDR_VAR 0 2
10948: PUSH
10949: LD_VAR 0 2
10953: PUSH
10954: LD_STRING 
10956: ADD
10957: PUSH
10958: LD_EXP 58
10962: ADD
10963: ST_TO_ADDR
// if ( Display_kings ) and not isSGUI then
10964: LD_EXP 60
10968: PUSH
10969: LD_OWVAR 83
10973: NOT
10974: AND
10975: IFFALSE 10993
// AllStrings = AllStrings ^ Display_kings ;
10977: LD_ADDR_VAR 0 2
10981: PUSH
10982: LD_VAR 0 2
10986: PUSH
10987: LD_EXP 60
10991: ADD
10992: ST_TO_ADDR
// if ( LimitsStrings ) then
10993: CALL 7690 0 0
10997: IFFALSE 11019
// AllStrings := AllStrings ^  ^ LimitsStrings ;
10999: LD_ADDR_VAR 0 2
11003: PUSH
11004: LD_VAR 0 2
11008: PUSH
11009: LD_STRING 
11011: ADD
11012: PUSH
11013: CALL 7690 0 0
11017: ADD
11018: ST_TO_ADDR
// Display_Strings := AllStrings ;
11019: LD_ADDR_OWVAR 47
11023: PUSH
11024: LD_VAR 0 2
11028: ST_TO_ADDR
// end ;
11029: LD_VAR 0 1
11033: RET
// every 0 0$1 do
11034: GO 11036
11036: DISABLE
// begin ShowTimer ;
11037: CALL 10850 0 0
// enable ;
11041: ENABLE
// end ; end_of_file
11042: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
11043: LD_INT 0
11045: PPUSH
11046: PPUSH
11047: PPUSH
// sharedPoints1 = [ ] ;
11048: LD_ADDR_LOC 26
11052: PUSH
11053: EMPTY
11054: ST_TO_ADDR
// sharedPoints2 = [ ] ;
11055: LD_ADDR_LOC 27
11059: PUSH
11060: EMPTY
11061: ST_TO_ADDR
// sharedPoints3 = [ ] ;
11062: LD_ADDR_LOC 28
11066: PUSH
11067: EMPTY
11068: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
11069: LD_ADDR_VAR 0 2
11073: PUSH
11074: DOUBLE
11075: LD_INT 1
11077: DEC
11078: ST_TO_ADDR
11079: LD_EXP 21
11083: PUSH
11084: LD_INT 0
11086: PLUS
11087: PUSH
11088: FOR_TO
11089: IFFALSE 11191
// begin if not Side_Positions [ i ] = 0 then
11091: LD_EXP 21
11095: PUSH
11096: LD_VAR 0 2
11100: ARRAY
11101: PUSH
11102: LD_INT 0
11104: EQUAL
11105: NOT
11106: IFFALSE 11120
// SetMultiScore ( i , 0 ) ;
11108: LD_VAR 0 2
11112: PPUSH
11113: LD_INT 0
11115: PPUSH
11116: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
11120: LD_ADDR_LOC 26
11124: PUSH
11125: LD_LOC 26
11129: PPUSH
11130: LD_VAR 0 2
11134: PPUSH
11135: LD_INT 0
11137: PPUSH
11138: CALL_OW 1
11142: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
11143: LD_ADDR_LOC 27
11147: PUSH
11148: LD_LOC 27
11152: PPUSH
11153: LD_VAR 0 2
11157: PPUSH
11158: LD_INT 0
11160: PPUSH
11161: CALL_OW 1
11165: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
11166: LD_ADDR_LOC 28
11170: PUSH
11171: LD_LOC 28
11175: PPUSH
11176: LD_VAR 0 2
11180: PPUSH
11181: LD_INT 0
11183: PPUSH
11184: CALL_OW 1
11188: ST_TO_ADDR
// end ;
11189: GO 11088
11191: POP
11192: POP
// pointGame = true ;
11193: LD_ADDR_LOC 29
11197: PUSH
11198: LD_INT 1
11200: ST_TO_ADDR
// end ;
11201: LD_VAR 0 1
11205: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
11206: LD_LOC 29
11210: IFFALSE 11621
11212: GO 11214
11214: DISABLE
11215: LD_INT 0
11217: PPUSH
11218: PPUSH
11219: PPUSH
11220: PPUSH
11221: PPUSH
11222: PPUSH
11223: PPUSH
11224: PPUSH
11225: PPUSH
11226: PPUSH
11227: PPUSH
11228: PPUSH
11229: PPUSH
// begin if isSGUI then
11230: LD_OWVAR 83
11234: IFFALSE 11621
// begin if Teams [ 1 ] then
11236: LD_EXP 19
11240: PUSH
11241: LD_INT 1
11243: ARRAY
11244: IFFALSE 11256
// red = true else
11246: LD_ADDR_VAR 0 2
11250: PUSH
11251: LD_INT 1
11253: ST_TO_ADDR
11254: GO 11264
// red = false ;
11256: LD_ADDR_VAR 0 2
11260: PUSH
11261: LD_INT 0
11263: ST_TO_ADDR
// if Teams [ 2 ] then
11264: LD_EXP 19
11268: PUSH
11269: LD_INT 2
11271: ARRAY
11272: IFFALSE 11284
// blue = true else
11274: LD_ADDR_VAR 0 3
11278: PUSH
11279: LD_INT 1
11281: ST_TO_ADDR
11282: GO 11292
// blue = false ;
11284: LD_ADDR_VAR 0 3
11288: PUSH
11289: LD_INT 0
11291: ST_TO_ADDR
// if Teams [ 3 ] then
11292: LD_EXP 19
11296: PUSH
11297: LD_INT 3
11299: ARRAY
11300: IFFALSE 11312
// yel = true else
11302: LD_ADDR_VAR 0 4
11306: PUSH
11307: LD_INT 1
11309: ST_TO_ADDR
11310: GO 11320
// yel = false ;
11312: LD_ADDR_VAR 0 4
11316: PUSH
11317: LD_INT 0
11319: ST_TO_ADDR
// if Teams [ 4 ] then
11320: LD_EXP 19
11324: PUSH
11325: LD_INT 4
11327: ARRAY
11328: IFFALSE 11340
// green = true else
11330: LD_ADDR_VAR 0 5
11334: PUSH
11335: LD_INT 1
11337: ST_TO_ADDR
11338: GO 11348
// green = false ;
11340: LD_ADDR_VAR 0 5
11344: PUSH
11345: LD_INT 0
11347: ST_TO_ADDR
// if def_public_score then
11348: LD_EXP 1
11352: IFFALSE 11364
// p = true else
11354: LD_ADDR_VAR 0 12
11358: PUSH
11359: LD_INT 1
11361: ST_TO_ADDR
11362: GO 11372
// p = false ;
11364: LD_ADDR_VAR 0 12
11368: PUSH
11369: LD_INT 0
11371: ST_TO_ADDR
// if team_game then
11372: LD_EXP 23
11376: IFFALSE 11457
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
11378: LD_ADDR_VAR 0 13
11382: PUSH
11383: LD_INT 3
11385: PUSH
11386: LD_INT 1
11388: PUSH
11389: LD_INT 2
11391: PUSH
11392: LD_INT 7
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: PUSH
11401: LD_EXP 32
11405: ARRAY
11406: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
11407: LD_ADDR_VAR 0 10
11411: PUSH
11412: LD_STRING {
11414: PUSH
11415: LD_VAR 0 3
11419: STR
11420: PUSH
11421: LD_STRING ,
11423: STR
11424: PUSH
11425: LD_VAR 0 4
11429: STR
11430: PUSH
11431: LD_STRING ,
11433: STR
11434: PUSH
11435: LD_VAR 0 2
11439: STR
11440: PUSH
11441: LD_STRING ,0,0,0,
11443: STR
11444: PUSH
11445: LD_VAR 0 5
11449: STR
11450: PUSH
11451: LD_STRING ,0}
11453: STR
11454: ST_TO_ADDR
// end else
11455: GO 11557
// begin you = your_side ;
11457: LD_ADDR_VAR 0 13
11461: PUSH
11462: LD_OWVAR 2
11466: ST_TO_ADDR
// s = { ;
11467: LD_ADDR_VAR 0 10
11471: PUSH
11472: LD_STRING {
11474: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
11475: LD_ADDR_VAR 0 1
11479: PUSH
11480: DOUBLE
11481: LD_INT 1
11483: DEC
11484: ST_TO_ADDR
11485: LD_EXP 21
11489: PUSH
11490: LD_INT 0
11492: PLUS
11493: PUSH
11494: FOR_TO
11495: IFFALSE 11541
// if side_positions [ i ] then
11497: LD_EXP 21
11501: PUSH
11502: LD_VAR 0 1
11506: ARRAY
11507: IFFALSE 11525
// s = s & 1, else
11509: LD_ADDR_VAR 0 10
11513: PUSH
11514: LD_VAR 0 10
11518: PUSH
11519: LD_STRING 1,
11521: STR
11522: ST_TO_ADDR
11523: GO 11539
// s = s & 0, ;
11525: LD_ADDR_VAR 0 10
11529: PUSH
11530: LD_VAR 0 10
11534: PUSH
11535: LD_STRING 0,
11537: STR
11538: ST_TO_ADDR
11539: GO 11494
11541: POP
11542: POP
// s = s & } ;
11543: LD_ADDR_VAR 0 10
11547: PUSH
11548: LD_VAR 0 10
11552: PUSH
11553: LD_STRING }
11555: STR
11556: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
11557: LD_STRING initScore(
11559: PUSH
11560: LD_VAR 0 10
11564: STR
11565: PUSH
11566: LD_STRING ,
11568: STR
11569: PUSH
11570: LD_VAR 0 12
11574: STR
11575: PUSH
11576: LD_STRING ,
11578: STR
11579: PUSH
11580: LD_VAR 0 13
11584: STR
11585: PUSH
11586: LD_STRING  );
11588: STR
11589: PPUSH
11590: CALL_OW 559
// if game_type = 3 then
11594: LD_EXP 41
11598: PUSH
11599: LD_INT 3
11601: EQUAL
11602: IFFALSE 11621
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
11604: LD_STRING AddScorePoints(2,2,
11606: PUSH
11607: LD_EXP 30
11611: STR
11612: PUSH
11613: LD_STRING  );
11615: STR
11616: PPUSH
11617: CALL_OW 559
// end ; end ;
11621: PPOPN 13
11623: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
11624: LD_INT 0
11626: PPUSH
11627: PPUSH
// case typ of 1 :
11628: LD_VAR 0 3
11632: PUSH
11633: LD_INT 1
11635: DOUBLE
11636: EQUAL
11637: IFTRUE 11641
11639: GO 11669
11641: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
11642: LD_ADDR_LOC 26
11646: PUSH
11647: LD_LOC 26
11651: PPUSH
11652: LD_VAR 0 1
11656: PPUSH
11657: LD_VAR 0 2
11661: PPUSH
11662: CALL_OW 1
11666: ST_TO_ADDR
11667: GO 11742
11669: LD_INT 2
11671: DOUBLE
11672: EQUAL
11673: IFTRUE 11677
11675: GO 11705
11677: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
11678: LD_ADDR_LOC 27
11682: PUSH
11683: LD_LOC 27
11687: PPUSH
11688: LD_VAR 0 1
11692: PPUSH
11693: LD_VAR 0 2
11697: PPUSH
11698: CALL_OW 1
11702: ST_TO_ADDR
11703: GO 11742
11705: LD_INT 3
11707: DOUBLE
11708: EQUAL
11709: IFTRUE 11713
11711: GO 11741
11713: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
11714: LD_ADDR_LOC 28
11718: PUSH
11719: LD_LOC 28
11723: PPUSH
11724: LD_VAR 0 1
11728: PPUSH
11729: LD_VAR 0 2
11733: PPUSH
11734: CALL_OW 1
11738: ST_TO_ADDR
11739: GO 11742
11741: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
11742: LD_ADDR_VAR 0 5
11746: PUSH
11747: LD_LOC 26
11751: PUSH
11752: LD_VAR 0 1
11756: ARRAY
11757: PUSH
11758: LD_LOC 27
11762: PUSH
11763: LD_VAR 0 1
11767: ARRAY
11768: PLUS
11769: PUSH
11770: LD_LOC 28
11774: PUSH
11775: LD_VAR 0 1
11779: ARRAY
11780: PLUS
11781: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
11782: LD_VAR 0 1
11786: PPUSH
11787: LD_VAR 0 5
11791: PPUSH
11792: CALL_OW 506
// end ; end_of_file
11796: LD_VAR 0 4
11800: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
11801: LD_INT 0
11803: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
11804: LD_VAR 0 1
11808: PPUSH
11809: CALL_OW 255
11813: PUSH
11814: LD_VAR 0 4
11818: EQUAL
11819: IFFALSE 11838
// begin SetAchievement ( ACH_RAD ) ;
11821: LD_STRING ACH_RAD
11823: PPUSH
11824: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
11828: LD_STRING ACH_NL
11830: PPUSH
11831: LD_INT 1
11833: PPUSH
11834: CALL_OW 564
// end end ;
11838: LD_VAR 0 5
11842: RET
// export function SA_Win ( side ) ; begin
11843: LD_INT 0
11845: PPUSH
// case side of 1 :
11846: LD_VAR 0 1
11850: PUSH
11851: LD_INT 1
11853: DOUBLE
11854: EQUAL
11855: IFTRUE 11859
11857: GO 11872
11859: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
11860: LD_STRING ACH_AH
11862: PPUSH
11863: LD_INT 1
11865: PPUSH
11866: CALL_OW 564
11870: GO 12035
11872: LD_INT 2
11874: DOUBLE
11875: EQUAL
11876: IFTRUE 11880
11878: GO 11893
11880: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
11881: LD_STRING ACH_E
11883: PPUSH
11884: LD_INT 1
11886: PPUSH
11887: CALL_OW 564
11891: GO 12035
11893: LD_INT 3
11895: DOUBLE
11896: EQUAL
11897: IFTRUE 11901
11899: GO 11914
11901: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
11902: LD_STRING ACH_OOL
11904: PPUSH
11905: LD_INT 1
11907: PPUSH
11908: CALL_OW 564
11912: GO 12035
11914: LD_INT 1
11916: PUSH
11917: LD_INT 2
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: DOUBLE
11924: EQUAL
11925: IFTRUE 11929
11927: GO 11954
11929: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
11930: LD_STRING ACH_AH
11932: PPUSH
11933: LD_REAL  5.00000000000000E-0001
11936: PPUSH
11937: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11941: LD_STRING ACH_E
11943: PPUSH
11944: LD_REAL  5.00000000000000E-0001
11947: PPUSH
11948: CALL_OW 564
// end ; [ 2 , 3 ] :
11952: GO 12035
11954: LD_INT 2
11956: PUSH
11957: LD_INT 3
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: DOUBLE
11964: EQUAL
11965: IFTRUE 11969
11967: GO 11994
11969: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
11970: LD_STRING ACH_OOL
11972: PPUSH
11973: LD_REAL  5.00000000000000E-0001
11976: PPUSH
11977: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
11981: LD_STRING ACH_E
11983: PPUSH
11984: LD_REAL  5.00000000000000E-0001
11987: PPUSH
11988: CALL_OW 564
// end ; [ 3 , 1 ] :
11992: GO 12035
11994: LD_INT 3
11996: PUSH
11997: LD_INT 1
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: DOUBLE
12004: EQUAL
12005: IFTRUE 12009
12007: GO 12034
12009: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12010: LD_STRING ACH_AH
12012: PPUSH
12013: LD_REAL  5.00000000000000E-0001
12016: PPUSH
12017: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12021: LD_STRING ACH_OOL
12023: PPUSH
12024: LD_REAL  5.00000000000000E-0001
12027: PPUSH
12028: CALL_OW 564
// end ; end ;
12032: GO 12035
12034: POP
// end ; end_of_file
12035: LD_VAR 0 2
12039: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
12040: LD_INT 0
12042: PPUSH
12043: PPUSH
// enable ( 98 ) ;
12044: LD_INT 98
12046: ENABLE_MARKED
// GameEnded = false ;
12047: LD_ADDR_LOC 31
12051: PUSH
12052: LD_INT 0
12054: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12055: LD_ADDR_LOC 30
12059: PUSH
12060: LD_INT 0
12062: PUSH
12063: LD_INT 0
12065: PUSH
12066: LD_INT 0
12068: PUSH
12069: LD_INT 0
12071: PUSH
12072: LD_INT 0
12074: PUSH
12075: LD_INT 0
12077: PUSH
12078: LD_INT 0
12080: PUSH
12081: LD_INT 0
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: ST_TO_ADDR
// unfoged = false ;
12094: LD_ADDR_LOC 32
12098: PUSH
12099: LD_INT 0
12101: ST_TO_ADDR
// for i = 1 to side_positions do
12102: LD_ADDR_VAR 0 2
12106: PUSH
12107: DOUBLE
12108: LD_INT 1
12110: DEC
12111: ST_TO_ADDR
12112: LD_EXP 21
12116: PUSH
12117: FOR_TO
12118: IFFALSE 12158
// if not side_positions [ i ] then
12120: LD_EXP 21
12124: PUSH
12125: LD_VAR 0 2
12129: ARRAY
12130: NOT
12131: IFFALSE 12156
// defaited = replace ( defaited , i , true ) ;
12133: LD_ADDR_LOC 30
12137: PUSH
12138: LD_LOC 30
12142: PPUSH
12143: LD_VAR 0 2
12147: PPUSH
12148: LD_INT 1
12150: PPUSH
12151: CALL_OW 1
12155: ST_TO_ADDR
12156: GO 12117
12158: POP
12159: POP
// end ;
12160: LD_VAR 0 1
12164: RET
// function CanWinLoose ; begin
12165: LD_INT 0
12167: PPUSH
// Result := true ;
12168: LD_ADDR_VAR 0 1
12172: PUSH
12173: LD_INT 1
12175: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
12176: CALL_OW 518
12180: PUSH
12181: CALL_OW 519
12185: PUSH
12186: LD_INT 0
12188: GREATER
12189: AND
12190: IFFALSE 12200
// Result := false ;
12192: LD_ADDR_VAR 0 1
12196: PUSH
12197: LD_INT 0
12199: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12200: CALL_OW 531
12204: PUSH
12205: CALL_OW 519
12209: PUSH
12210: LD_INT 1
12212: GREATER
12213: AND
12214: IFFALSE 12224
// Result := false ;
12216: LD_ADDR_VAR 0 1
12220: PUSH
12221: LD_INT 0
12223: ST_TO_ADDR
// end ;
12224: LD_VAR 0 1
12228: RET
// export function HasPower ( i ) ; var k , h ; begin
12229: LD_INT 0
12231: PPUSH
12232: PPUSH
12233: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
12234: LD_VAR 0 1
12238: PPUSH
12239: CALL_OW 108
12243: NOT
12244: PUSH
12245: LD_EXP 20
12249: PUSH
12250: LD_VAR 0 1
12254: ARRAY
12255: NOT
12256: AND
12257: PUSH
12258: LD_OWVAR 4
12262: AND
12263: IFFALSE 12275
// begin result = false ;
12265: LD_ADDR_VAR 0 2
12269: PUSH
12270: LD_INT 0
12272: ST_TO_ADDR
// end else
12273: GO 12570
// case def_win_rules of 0 :
12275: LD_EXP 17
12279: PUSH
12280: LD_INT 0
12282: DOUBLE
12283: EQUAL
12284: IFTRUE 12288
12286: GO 12451
12288: POP
// if def_people_respawning then
12289: LD_EXP 53
12293: IFFALSE 12384
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
12295: LD_ADDR_VAR 0 2
12299: PUSH
12300: LD_INT 22
12302: PUSH
12303: LD_VAR 0 1
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 2
12314: PUSH
12315: LD_INT 21
12317: PUSH
12318: LD_INT 1
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PUSH
12325: LD_INT 33
12327: PUSH
12328: LD_INT 3
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PUSH
12335: LD_INT 33
12337: PUSH
12338: LD_INT 5
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 30
12347: PUSH
12348: LD_INT 0
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 30
12357: PUSH
12358: LD_INT 1
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PPUSH
12377: CALL_OW 69
12381: ST_TO_ADDR
12382: GO 12449
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
12384: LD_ADDR_VAR 0 2
12388: PUSH
12389: LD_INT 22
12391: PUSH
12392: LD_VAR 0 1
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 2
12403: PUSH
12404: LD_INT 21
12406: PUSH
12407: LD_INT 1
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 33
12416: PUSH
12417: LD_INT 3
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: LD_INT 33
12426: PUSH
12427: LD_INT 5
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PPUSH
12444: CALL_OW 69
12448: ST_TO_ADDR
12449: GO 12570
12451: LD_INT 1
12453: DOUBLE
12454: EQUAL
12455: IFTRUE 12459
12457: GO 12498
12459: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
12460: LD_ADDR_VAR 0 2
12464: PUSH
12465: LD_INT 22
12467: PUSH
12468: LD_VAR 0 1
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: LD_INT 21
12479: PUSH
12480: LD_INT 1
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PPUSH
12491: CALL_OW 69
12495: ST_TO_ADDR
12496: GO 12570
12498: LD_INT 2
12500: DOUBLE
12501: EQUAL
12502: IFTRUE 12506
12504: GO 12569
12506: POP
// begin h = false ;
12507: LD_ADDR_VAR 0 4
12511: PUSH
12512: LD_INT 0
12514: ST_TO_ADDR
// for k in heroes [ i ] do
12515: LD_ADDR_VAR 0 3
12519: PUSH
12520: LD_EXP 33
12524: PUSH
12525: LD_VAR 0 1
12529: ARRAY
12530: PUSH
12531: FOR_IN
12532: IFFALSE 12555
// if IsLive ( k ) then
12534: LD_VAR 0 3
12538: PPUSH
12539: CALL_OW 300
12543: IFFALSE 12553
// h = true ;
12545: LD_ADDR_VAR 0 4
12549: PUSH
12550: LD_INT 1
12552: ST_TO_ADDR
12553: GO 12531
12555: POP
12556: POP
// Result := h ;
12557: LD_ADDR_VAR 0 2
12561: PUSH
12562: LD_VAR 0 4
12566: ST_TO_ADDR
// end ; end ;
12567: GO 12570
12569: POP
// end ;
12570: LD_VAR 0 2
12574: RET
// function AlliedSides ( i , j ) ; begin
12575: LD_INT 0
12577: PPUSH
// Result := false ;
12578: LD_ADDR_VAR 0 3
12582: PUSH
12583: LD_INT 0
12585: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
12586: LD_VAR 0 1
12590: PPUSH
12591: LD_VAR 0 2
12595: PPUSH
12596: CALL_OW 81
12600: PUSH
12601: LD_INT 1
12603: EQUAL
12604: PUSH
12605: LD_VAR 0 2
12609: PPUSH
12610: LD_VAR 0 1
12614: PPUSH
12615: CALL_OW 81
12619: PUSH
12620: LD_INT 1
12622: EQUAL
12623: AND
12624: PUSH
12625: LD_VAR 0 1
12629: PPUSH
12630: CALL_OW 83
12634: AND
12635: PUSH
12636: LD_VAR 0 2
12640: PPUSH
12641: CALL_OW 83
12645: AND
12646: IFFALSE 12656
// Result := true ;
12648: LD_ADDR_VAR 0 3
12652: PUSH
12653: LD_INT 1
12655: ST_TO_ADDR
// end ;
12656: LD_VAR 0 3
12660: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
12661: CALL 12165 0 0
12665: PUSH
12666: LD_LOC 31
12670: NOT
12671: AND
12672: IFFALSE 12688
12674: GO 12676
12676: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
12677: LD_ADDR_EXP 59
12681: PUSH
12682: LD_STRING #Player-Ended
12684: PUSH
12685: EMPTY
12686: LIST
12687: ST_TO_ADDR
12688: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
12689: CALL 12165 0 0
12693: PUSH
12694: LD_LOC 31
12698: AND
12699: IFFALSE 12708
12701: GO 12703
12703: DISABLE
// YouLostInMultiplayer ;
12704: CALL_OW 107
12708: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
12709: CALL 12165 0 0
12713: NOT
12714: PUSH
12715: CALL_OW 531
12719: NOT
12720: AND
12721: IFFALSE 12737
12723: GO 12725
12725: DISABLE
// WaitServerStrings = [ #server-wait ] ;
12726: LD_ADDR_EXP 59
12730: PUSH
12731: LD_STRING #server-wait
12733: PUSH
12734: EMPTY
12735: LIST
12736: ST_TO_ADDR
12737: END
// every 100 trigger IAmSpec do
12738: CALL_OW 531
12742: IFFALSE 12758
12744: GO 12746
12746: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
12747: LD_ADDR_EXP 59
12751: PUSH
12752: LD_STRING #Player-IAmSpec
12754: PUSH
12755: EMPTY
12756: LIST
12757: ST_TO_ADDR
12758: END
// every 100 trigger GameEnded and IAmSpec do
12759: LD_LOC 31
12763: PUSH
12764: CALL_OW 531
12768: AND
12769: IFFALSE 12778
12771: GO 12773
12773: DISABLE
// YouLostInMultiplayer ;
12774: CALL_OW 107
12778: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
12779: CALL 12165 0 0
12783: PUSH
12784: LD_LOC 31
12788: NOT
12789: AND
12790: IFFALSE 12806
12792: GO 12794
12794: DISABLE
// WaitServerStrings = [ $player-win ] ;
12795: LD_ADDR_EXP 59
12799: PUSH
12800: LD_STRING $player-win
12802: PUSH
12803: EMPTY
12804: LIST
12805: ST_TO_ADDR
12806: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
12807: CALL 12165 0 0
12811: PUSH
12812: LD_LOC 31
12816: AND
12817: IFFALSE 12841
12819: GO 12821
12821: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
12822: LD_EXP 22
12826: PUSH
12827: LD_OWVAR 2
12831: ARRAY
12832: PPUSH
12833: CALL 11843 0 1
// YouWinInMultiplayer ;
12837: CALL_OW 106
// end ;
12841: END
// every 100 trigger isEditor marked 401 do
12842: LD_OWVAR 84
12846: IFFALSE 12862
12848: GO 12850
12850: DISABLE
// Debug_Strings = [ You won ] ;
12851: LD_ADDR_OWVAR 48
12855: PUSH
12856: LD_STRING You won
12858: PUSH
12859: EMPTY
12860: LIST
12861: ST_TO_ADDR
12862: END
// every 100 trigger isEditor marked 400 do
12863: LD_OWVAR 84
12867: IFFALSE 12883
12869: GO 12871
12871: DISABLE
// Debug_Strings = [ You loss ] ;
12872: LD_ADDR_OWVAR 48
12876: PUSH
12877: LD_STRING You loss
12879: PUSH
12880: EMPTY
12881: LIST
12882: ST_TO_ADDR
12883: END
// every 100 marked 98 do var i , un ;
12884: GO 12886
12886: DISABLE
12887: LD_INT 0
12889: PPUSH
12890: PPUSH
// begin for i = 1 to side_positions do
12891: LD_ADDR_VAR 0 1
12895: PUSH
12896: DOUBLE
12897: LD_INT 1
12899: DEC
12900: ST_TO_ADDR
12901: LD_EXP 21
12905: PUSH
12906: FOR_TO
12907: IFFALSE 12990
// if side_positions [ i ] then
12909: LD_EXP 21
12913: PUSH
12914: LD_VAR 0 1
12918: ARRAY
12919: IFFALSE 12988
// if not HasPower ( i ) and not Defaited [ i ] then
12921: LD_VAR 0 1
12925: PPUSH
12926: CALL 12229 0 1
12930: NOT
12931: PUSH
12932: LD_LOC 30
12936: PUSH
12937: LD_VAR 0 1
12941: ARRAY
12942: NOT
12943: AND
12944: IFFALSE 12988
// begin Defaited = replace ( Defaited , i , true ) ;
12946: LD_ADDR_LOC 30
12950: PUSH
12951: LD_LOC 30
12955: PPUSH
12956: LD_VAR 0 1
12960: PPUSH
12961: LD_INT 1
12963: PPUSH
12964: CALL_OW 1
12968: ST_TO_ADDR
// if i = your_side then
12969: LD_VAR 0 1
12973: PUSH
12974: LD_OWVAR 2
12978: EQUAL
12979: IFFALSE 12988
// begin Multiplayer_Loose_Message ;
12981: CALL_OW 521
// enable ( 400 ) ;
12985: LD_INT 400
12987: ENABLE_MARKED
// end ; end ;
12988: GO 12906
12990: POP
12991: POP
// if not Unfoged and defaited [ your_side ] then
12992: LD_LOC 32
12996: NOT
12997: PUSH
12998: LD_LOC 30
13002: PUSH
13003: LD_OWVAR 2
13007: ARRAY
13008: AND
13009: IFFALSE 13015
// Unfog ;
13011: CALL 13191 0 0
// DidGameEnd ;
13015: CALL 13030 0 0
// if not GameEnded then
13019: LD_LOC 31
13023: NOT
13024: IFFALSE 13027
// enable ;
13026: ENABLE
// end ;
13027: PPOPN 2
13029: END
// function DidGameEnd ; var i , k , enemy ; begin
13030: LD_INT 0
13032: PPUSH
13033: PPUSH
13034: PPUSH
13035: PPUSH
// enemy = [ ] ;
13036: LD_ADDR_VAR 0 4
13040: PUSH
13041: EMPTY
13042: ST_TO_ADDR
// for i = 1 to side_positions do
13043: LD_ADDR_VAR 0 2
13047: PUSH
13048: DOUBLE
13049: LD_INT 1
13051: DEC
13052: ST_TO_ADDR
13053: LD_EXP 21
13057: PUSH
13058: FOR_TO
13059: IFFALSE 13153
// if not defaited [ i ] then
13061: LD_LOC 30
13065: PUSH
13066: LD_VAR 0 2
13070: ARRAY
13071: NOT
13072: IFFALSE 13151
// for k = 1 to side_positions do
13074: LD_ADDR_VAR 0 3
13078: PUSH
13079: DOUBLE
13080: LD_INT 1
13082: DEC
13083: ST_TO_ADDR
13084: LD_EXP 21
13088: PUSH
13089: FOR_TO
13090: IFFALSE 13149
// if not defaited [ k ] then
13092: LD_LOC 30
13096: PUSH
13097: LD_VAR 0 3
13101: ARRAY
13102: NOT
13103: IFFALSE 13147
// if not AlliedSides ( i , k ) then
13105: LD_VAR 0 2
13109: PPUSH
13110: LD_VAR 0 3
13114: PPUSH
13115: CALL 12575 0 2
13119: NOT
13120: IFFALSE 13147
// enemy = enemy ^ [ i , k ] ;
13122: LD_ADDR_VAR 0 4
13126: PUSH
13127: LD_VAR 0 4
13131: PUSH
13132: LD_VAR 0 2
13136: PUSH
13137: LD_VAR 0 3
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: ADD
13146: ST_TO_ADDR
13147: GO 13089
13149: POP
13150: POP
13151: GO 13058
13153: POP
13154: POP
// if not enemy then
13155: LD_VAR 0 4
13159: NOT
13160: IFFALSE 13186
// begin GameEnded = true ;
13162: LD_ADDR_LOC 31
13166: PUSH
13167: LD_INT 1
13169: ST_TO_ADDR
// if not defaited [ your_side ] then
13170: LD_LOC 30
13174: PUSH
13175: LD_OWVAR 2
13179: ARRAY
13180: NOT
13181: IFFALSE 13186
// enable ( 401 ) ;
13183: LD_INT 401
13185: ENABLE_MARKED
// end ; end ;
13186: LD_VAR 0 1
13190: RET
// function unfog ; var k , friends ; begin
13191: LD_INT 0
13193: PPUSH
13194: PPUSH
13195: PPUSH
// SetPlayerSpectator ( ) ;
13196: CALL_OW 572
// unfoged = true ;
13200: LD_ADDR_LOC 32
13204: PUSH
13205: LD_INT 1
13207: ST_TO_ADDR
// end ;
13208: LD_VAR 0 1
13212: RET
// export function MakeGameEnd ; begin
13213: LD_INT 0
13215: PPUSH
// SetPlayerSpectator ( ) ;
13216: CALL_OW 572
// unfoged = true ;
13220: LD_ADDR_LOC 32
13224: PUSH
13225: LD_INT 1
13227: ST_TO_ADDR
// wait ( 0 0$5 ) ;
13228: LD_INT 175
13230: PPUSH
13231: CALL_OW 67
// GameEnded = true ;
13235: LD_ADDR_LOC 31
13239: PUSH
13240: LD_INT 1
13242: ST_TO_ADDR
// end ;
13243: LD_VAR 0 1
13247: RET
// export function GetGameEnded ; begin
13248: LD_INT 0
13250: PPUSH
// result = GameEnded ;
13251: LD_ADDR_VAR 0 1
13255: PUSH
13256: LD_LOC 31
13260: ST_TO_ADDR
// end ; end_of_file
13261: LD_VAR 0 1
13265: RET
// var win ; export function init_kings_counting ; var i ; begin
13266: LD_INT 0
13268: PPUSH
13269: PPUSH
// mp_with_score := true ;
13270: LD_ADDR_OWVAR 14
13274: PUSH
13275: LD_INT 1
13277: ST_TO_ADDR
// ResetMultiScore ;
13278: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
13282: LD_EXP 29
13286: PPUSH
13287: LD_INT 1
13289: PPUSH
13290: CALL_OW 424
// enable ( 2 ) ;
13294: LD_INT 2
13296: ENABLE_MARKED
// end ;
13297: LD_VAR 0 1
13301: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
13302: LD_INT 0
13304: PPUSH
13305: PPUSH
13306: PPUSH
13307: PPUSH
13308: PPUSH
13309: PPUSH
13310: PPUSH
13311: PPUSH
13312: PPUSH
// vypis := [ ] ;
13313: LD_ADDR_VAR 0 3
13317: PUSH
13318: EMPTY
13319: ST_TO_ADDR
// red = 0 ;
13320: LD_ADDR_VAR 0 5
13324: PUSH
13325: LD_INT 0
13327: ST_TO_ADDR
// blue = 0 ;
13328: LD_ADDR_VAR 0 6
13332: PUSH
13333: LD_INT 0
13335: ST_TO_ADDR
// yel = 0 ;
13336: LD_ADDR_VAR 0 7
13340: PUSH
13341: LD_INT 0
13343: ST_TO_ADDR
// green = 0 ;
13344: LD_ADDR_VAR 0 8
13348: PUSH
13349: LD_INT 0
13351: ST_TO_ADDR
// if def_public_score or isSGUI then
13352: LD_EXP 1
13356: PUSH
13357: LD_OWVAR 83
13361: OR
13362: IFFALSE 13959
// if not Team_Game then
13364: LD_EXP 23
13368: NOT
13369: IFFALSE 13491
// begin for side = 1 to Side_Positions do
13371: LD_ADDR_VAR 0 2
13375: PUSH
13376: DOUBLE
13377: LD_INT 1
13379: DEC
13380: ST_TO_ADDR
13381: LD_EXP 21
13385: PUSH
13386: FOR_TO
13387: IFFALSE 13487
// if Side_Positions [ side ] then
13389: LD_EXP 21
13393: PUSH
13394: LD_VAR 0 2
13398: ARRAY
13399: IFFALSE 13485
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
13401: LD_ADDR_VAR 0 3
13405: PUSH
13406: LD_VAR 0 3
13410: PUSH
13411: LD_STRING #KingoftheHill-Public
13413: PUSH
13414: LD_VAR 0 2
13418: PUSH
13419: LD_VAR 0 2
13423: PUSH
13424: LD_VAR 0 2
13428: PUSH
13429: LD_INT 10
13431: PLUS
13432: PPUSH
13433: CALL_OW 110
13437: PUSH
13438: LD_INT 3
13440: DIV
13441: PUSH
13442: LD_EXP 30
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: ADD
13454: ST_TO_ADDR
// LScore_Update_Points ( 2 , side , ( GetTag ( side + 10 ) div 3 ) ) ;
13455: LD_INT 2
13457: PPUSH
13458: LD_VAR 0 2
13462: PPUSH
13463: LD_VAR 0 2
13467: PUSH
13468: LD_INT 10
13470: PLUS
13471: PPUSH
13472: CALL_OW 110
13476: PUSH
13477: LD_INT 3
13479: DIV
13480: PPUSH
13481: CALL 20863 0 3
// end ;
13485: GO 13386
13487: POP
13488: POP
// end else
13489: GO 13957
// begin if Teams [ 1 ] then
13491: LD_EXP 19
13495: PUSH
13496: LD_INT 1
13498: ARRAY
13499: IFFALSE 13551
// for i in Teams [ 1 ] do
13501: LD_ADDR_VAR 0 4
13505: PUSH
13506: LD_EXP 19
13510: PUSH
13511: LD_INT 1
13513: ARRAY
13514: PUSH
13515: FOR_IN
13516: IFFALSE 13549
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
13518: LD_ADDR_VAR 0 5
13522: PUSH
13523: LD_VAR 0 5
13527: PUSH
13528: LD_VAR 0 4
13532: PUSH
13533: LD_INT 10
13535: PLUS
13536: PPUSH
13537: CALL_OW 110
13541: PUSH
13542: LD_INT 3
13544: DIV
13545: PLUS
13546: ST_TO_ADDR
13547: GO 13515
13549: POP
13550: POP
// if Teams [ 2 ] then
13551: LD_EXP 19
13555: PUSH
13556: LD_INT 2
13558: ARRAY
13559: IFFALSE 13611
// for i in Teams [ 2 ] do
13561: LD_ADDR_VAR 0 4
13565: PUSH
13566: LD_EXP 19
13570: PUSH
13571: LD_INT 2
13573: ARRAY
13574: PUSH
13575: FOR_IN
13576: IFFALSE 13609
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
13578: LD_ADDR_VAR 0 6
13582: PUSH
13583: LD_VAR 0 6
13587: PUSH
13588: LD_VAR 0 4
13592: PUSH
13593: LD_INT 10
13595: PLUS
13596: PPUSH
13597: CALL_OW 110
13601: PUSH
13602: LD_INT 3
13604: DIV
13605: PLUS
13606: ST_TO_ADDR
13607: GO 13575
13609: POP
13610: POP
// if Teams [ 3 ] then
13611: LD_EXP 19
13615: PUSH
13616: LD_INT 3
13618: ARRAY
13619: IFFALSE 13671
// for i in Teams [ 3 ] do
13621: LD_ADDR_VAR 0 4
13625: PUSH
13626: LD_EXP 19
13630: PUSH
13631: LD_INT 3
13633: ARRAY
13634: PUSH
13635: FOR_IN
13636: IFFALSE 13669
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
13638: LD_ADDR_VAR 0 7
13642: PUSH
13643: LD_VAR 0 7
13647: PUSH
13648: LD_VAR 0 4
13652: PUSH
13653: LD_INT 10
13655: PLUS
13656: PPUSH
13657: CALL_OW 110
13661: PUSH
13662: LD_INT 3
13664: DIV
13665: PLUS
13666: ST_TO_ADDR
13667: GO 13635
13669: POP
13670: POP
// if Teams [ 4 ] then
13671: LD_EXP 19
13675: PUSH
13676: LD_INT 4
13678: ARRAY
13679: IFFALSE 13731
// for i in Teams [ 4 ] do
13681: LD_ADDR_VAR 0 4
13685: PUSH
13686: LD_EXP 19
13690: PUSH
13691: LD_INT 4
13693: ARRAY
13694: PUSH
13695: FOR_IN
13696: IFFALSE 13729
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
13698: LD_ADDR_VAR 0 8
13702: PUSH
13703: LD_VAR 0 8
13707: PUSH
13708: LD_VAR 0 4
13712: PUSH
13713: LD_INT 10
13715: PLUS
13716: PPUSH
13717: CALL_OW 110
13721: PUSH
13722: LD_INT 3
13724: DIV
13725: PLUS
13726: ST_TO_ADDR
13727: GO 13695
13729: POP
13730: POP
// if Teams [ 1 ] then
13731: LD_EXP 19
13735: PUSH
13736: LD_INT 1
13738: ARRAY
13739: IFFALSE 13768
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
13741: LD_ADDR_VAR 0 3
13745: PUSH
13746: LD_STRING #KingoftheHill-Public-red
13748: PUSH
13749: LD_INT 3
13751: PUSH
13752: LD_VAR 0 5
13756: PUSH
13757: LD_EXP 30
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: ST_TO_ADDR
// if Teams [ 2 ] then
13768: LD_EXP 19
13772: PUSH
13773: LD_INT 2
13775: ARRAY
13776: IFFALSE 13811
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
13778: LD_ADDR_VAR 0 3
13782: PUSH
13783: LD_VAR 0 3
13787: PUSH
13788: LD_STRING #KingoftheHill-Public-blue
13790: PUSH
13791: LD_INT 1
13793: PUSH
13794: LD_VAR 0 6
13798: PUSH
13799: LD_EXP 30
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: ADD
13810: ST_TO_ADDR
// if Teams [ 3 ] then
13811: LD_EXP 19
13815: PUSH
13816: LD_INT 3
13818: ARRAY
13819: IFFALSE 13854
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
13821: LD_ADDR_VAR 0 3
13825: PUSH
13826: LD_VAR 0 3
13830: PUSH
13831: LD_STRING #KingoftheHill-Public-yell
13833: PUSH
13834: LD_INT 2
13836: PUSH
13837: LD_VAR 0 7
13841: PUSH
13842: LD_EXP 30
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: ADD
13853: ST_TO_ADDR
// if Teams [ 4 ] then
13854: LD_EXP 19
13858: PUSH
13859: LD_INT 4
13861: ARRAY
13862: IFFALSE 13897
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
13864: LD_ADDR_VAR 0 3
13868: PUSH
13869: LD_VAR 0 3
13873: PUSH
13874: LD_STRING #KingoftheHill-Public-green
13876: PUSH
13877: LD_INT 7
13879: PUSH
13880: LD_VAR 0 8
13884: PUSH
13885: LD_EXP 30
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: ADD
13896: ST_TO_ADDR
// LScore_Update_Points ( 2 , 3 , red ) ;
13897: LD_INT 2
13899: PPUSH
13900: LD_INT 3
13902: PPUSH
13903: LD_VAR 0 5
13907: PPUSH
13908: CALL 20863 0 3
// LScore_Update_Points ( 2 , 1 , blue ) ;
13912: LD_INT 2
13914: PPUSH
13915: LD_INT 1
13917: PPUSH
13918: LD_VAR 0 6
13922: PPUSH
13923: CALL 20863 0 3
// LScore_Update_Points ( 2 , 2 , yel ) ;
13927: LD_INT 2
13929: PPUSH
13930: LD_INT 2
13932: PPUSH
13933: LD_VAR 0 7
13937: PPUSH
13938: CALL 20863 0 3
// LScore_Update_Points ( 2 , 7 , green ) ;
13942: LD_INT 2
13944: PPUSH
13945: LD_INT 7
13947: PPUSH
13948: LD_VAR 0 8
13952: PPUSH
13953: CALL 20863 0 3
// end else
13957: GO 14394
// if not Team_Game then
13959: LD_EXP 23
13963: NOT
13964: IFFALSE 14022
// vypis := vypis ^ [ #KingoftheHill-Private , your_side , your_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
13966: LD_ADDR_VAR 0 3
13970: PUSH
13971: LD_VAR 0 3
13975: PUSH
13976: LD_STRING #KingoftheHill-Private
13978: PUSH
13979: LD_OWVAR 2
13983: PUSH
13984: LD_OWVAR 2
13988: PUSH
13989: LD_VAR 0 2
13993: PUSH
13994: LD_INT 10
13996: PLUS
13997: PPUSH
13998: CALL_OW 110
14002: PUSH
14003: LD_INT 3
14005: DIV
14006: PUSH
14007: LD_EXP 30
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: ADD
14019: ST_TO_ADDR
14020: GO 14394
// begin for i in Teams [ 1 ] do
14022: LD_ADDR_VAR 0 4
14026: PUSH
14027: LD_EXP 19
14031: PUSH
14032: LD_INT 1
14034: ARRAY
14035: PUSH
14036: FOR_IN
14037: IFFALSE 14070
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
14039: LD_ADDR_VAR 0 5
14043: PUSH
14044: LD_VAR 0 5
14048: PUSH
14049: LD_VAR 0 4
14053: PUSH
14054: LD_INT 10
14056: PLUS
14057: PPUSH
14058: CALL_OW 110
14062: PUSH
14063: LD_INT 3
14065: DIV
14066: PLUS
14067: ST_TO_ADDR
14068: GO 14036
14070: POP
14071: POP
// for i in Teams [ 2 ] do
14072: LD_ADDR_VAR 0 4
14076: PUSH
14077: LD_EXP 19
14081: PUSH
14082: LD_INT 2
14084: ARRAY
14085: PUSH
14086: FOR_IN
14087: IFFALSE 14120
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
14089: LD_ADDR_VAR 0 6
14093: PUSH
14094: LD_VAR 0 6
14098: PUSH
14099: LD_VAR 0 4
14103: PUSH
14104: LD_INT 10
14106: PLUS
14107: PPUSH
14108: CALL_OW 110
14112: PUSH
14113: LD_INT 3
14115: DIV
14116: PLUS
14117: ST_TO_ADDR
14118: GO 14086
14120: POP
14121: POP
// for i in Teams [ 3 ] do
14122: LD_ADDR_VAR 0 4
14126: PUSH
14127: LD_EXP 19
14131: PUSH
14132: LD_INT 3
14134: ARRAY
14135: PUSH
14136: FOR_IN
14137: IFFALSE 14170
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
14139: LD_ADDR_VAR 0 7
14143: PUSH
14144: LD_VAR 0 7
14148: PUSH
14149: LD_VAR 0 4
14153: PUSH
14154: LD_INT 10
14156: PLUS
14157: PPUSH
14158: CALL_OW 110
14162: PUSH
14163: LD_INT 3
14165: DIV
14166: PLUS
14167: ST_TO_ADDR
14168: GO 14136
14170: POP
14171: POP
// for i in Teams [ 4 ] do
14172: LD_ADDR_VAR 0 4
14176: PUSH
14177: LD_EXP 19
14181: PUSH
14182: LD_INT 4
14184: ARRAY
14185: PUSH
14186: FOR_IN
14187: IFFALSE 14220
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
14189: LD_ADDR_VAR 0 8
14193: PUSH
14194: LD_VAR 0 8
14198: PUSH
14199: LD_VAR 0 4
14203: PUSH
14204: LD_INT 10
14206: PLUS
14207: PPUSH
14208: CALL_OW 110
14212: PUSH
14213: LD_INT 3
14215: DIV
14216: PLUS
14217: ST_TO_ADDR
14218: GO 14186
14220: POP
14221: POP
// if your_side in Teams [ 1 ] then
14222: LD_OWVAR 2
14226: PUSH
14227: LD_EXP 19
14231: PUSH
14232: LD_INT 1
14234: ARRAY
14235: IN
14236: IFFALSE 14265
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
14238: LD_ADDR_VAR 0 3
14242: PUSH
14243: LD_STRING #KingoftheHill-Public-red
14245: PUSH
14246: LD_INT 3
14248: PUSH
14249: LD_VAR 0 5
14253: PUSH
14254: LD_EXP 30
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: ST_TO_ADDR
// if your_side in Teams [ 2 ] then
14265: LD_OWVAR 2
14269: PUSH
14270: LD_EXP 19
14274: PUSH
14275: LD_INT 2
14277: ARRAY
14278: IN
14279: IFFALSE 14308
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
14281: LD_ADDR_VAR 0 3
14285: PUSH
14286: LD_STRING #KingoftheHill-Public-blue
14288: PUSH
14289: LD_INT 1
14291: PUSH
14292: LD_VAR 0 6
14296: PUSH
14297: LD_EXP 30
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: ST_TO_ADDR
// if your_side in Teams [ 3 ] then
14308: LD_OWVAR 2
14312: PUSH
14313: LD_EXP 19
14317: PUSH
14318: LD_INT 3
14320: ARRAY
14321: IN
14322: IFFALSE 14351
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
14324: LD_ADDR_VAR 0 3
14328: PUSH
14329: LD_STRING #KingoftheHill-Public-yell
14331: PUSH
14332: LD_INT 2
14334: PUSH
14335: LD_VAR 0 7
14339: PUSH
14340: LD_EXP 30
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: ST_TO_ADDR
// if your_side in Teams [ 4 ] then
14351: LD_OWVAR 2
14355: PUSH
14356: LD_EXP 19
14360: PUSH
14361: LD_INT 4
14363: ARRAY
14364: IN
14365: IFFALSE 14394
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
14367: LD_ADDR_VAR 0 3
14371: PUSH
14372: LD_STRING #KingoftheHill-Public-green
14374: PUSH
14375: LD_INT 7
14377: PUSH
14378: LD_VAR 0 8
14382: PUSH
14383: LD_EXP 30
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: ST_TO_ADDR
// end ; Display_kings := vypis ;
14394: LD_ADDR_EXP 60
14398: PUSH
14399: LD_VAR 0 3
14403: ST_TO_ADDR
// end ;
14404: LD_VAR 0 1
14408: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
14409: LD_INT 0
14411: PPUSH
14412: PPUSH
14413: PPUSH
14414: PPUSH
14415: PPUSH
14416: PPUSH
14417: PPUSH
14418: PPUSH
14419: PPUSH
// side := [ ] ;
14420: LD_ADDR_VAR 0 2
14424: PUSH
14425: EMPTY
14426: ST_TO_ADDR
// red = 0 ;
14427: LD_ADDR_VAR 0 5
14431: PUSH
14432: LD_INT 0
14434: ST_TO_ADDR
// blue = 0 ;
14435: LD_ADDR_VAR 0 6
14439: PUSH
14440: LD_INT 0
14442: ST_TO_ADDR
// yel = 0 ;
14443: LD_ADDR_VAR 0 7
14447: PUSH
14448: LD_INT 0
14450: ST_TO_ADDR
// green = 0 ;
14451: LD_ADDR_VAR 0 8
14455: PUSH
14456: LD_INT 0
14458: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
14459: LD_ADDR_VAR 0 3
14463: PUSH
14464: LD_EXP 29
14468: PPUSH
14469: LD_INT 21
14471: PUSH
14472: LD_INT 3
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: PUSH
14479: LD_INT 53
14481: PUSH
14482: EMPTY
14483: LIST
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: PPUSH
14489: CALL_OW 70
14493: ST_TO_ADDR
// for un in list do
14494: LD_ADDR_VAR 0 4
14498: PUSH
14499: LD_VAR 0 3
14503: PUSH
14504: FOR_IN
14505: IFFALSE 14530
// side := side union GetSide ( un ) ;
14507: LD_ADDR_VAR 0 2
14511: PUSH
14512: LD_VAR 0 2
14516: PUSH
14517: LD_VAR 0 4
14521: PPUSH
14522: CALL_OW 255
14526: UNION
14527: ST_TO_ADDR
14528: GO 14504
14530: POP
14531: POP
// if side <> 1 then
14532: LD_VAR 0 2
14536: PUSH
14537: LD_INT 1
14539: NONEQUAL
14540: IFFALSE 14544
// exit ;
14542: GO 14907
// side := side [ 1 ] ;
14544: LD_ADDR_VAR 0 2
14548: PUSH
14549: LD_VAR 0 2
14553: PUSH
14554: LD_INT 1
14556: ARRAY
14557: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
14558: LD_VAR 0 2
14562: PUSH
14563: LD_INT 10
14565: PLUS
14566: PPUSH
14567: LD_VAR 0 2
14571: PUSH
14572: LD_INT 10
14574: PLUS
14575: PPUSH
14576: CALL_OW 110
14580: PUSH
14581: LD_INT 1
14583: PLUS
14584: PPUSH
14585: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
14589: LD_VAR 0 2
14593: PPUSH
14594: LD_VAR 0 2
14598: PUSH
14599: LD_INT 10
14601: PLUS
14602: PPUSH
14603: CALL_OW 110
14607: PUSH
14608: LD_INT 3
14610: DIV
14611: PPUSH
14612: LD_INT 2
14614: PPUSH
14615: CALL 11624 0 3
// if not Team_Game then
14619: LD_EXP 23
14623: NOT
14624: IFFALSE 14907
// if GetTag ( side + 10 ) >= final_count * 3 then
14626: LD_VAR 0 2
14630: PUSH
14631: LD_INT 10
14633: PLUS
14634: PPUSH
14635: CALL_OW 110
14639: PUSH
14640: LD_EXP 30
14644: PUSH
14645: LD_INT 3
14647: MUL
14648: GREATEREQUAL
14649: IFFALSE 14656
// enable ( 3 ) else
14651: LD_INT 3
14653: ENABLE_MARKED
14654: GO 14907
// begin for i in Teams [ 1 ] do
14656: LD_ADDR_VAR 0 9
14660: PUSH
14661: LD_EXP 19
14665: PUSH
14666: LD_INT 1
14668: ARRAY
14669: PUSH
14670: FOR_IN
14671: IFFALSE 14704
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
14673: LD_ADDR_VAR 0 5
14677: PUSH
14678: LD_VAR 0 5
14682: PUSH
14683: LD_VAR 0 9
14687: PUSH
14688: LD_INT 10
14690: PLUS
14691: PPUSH
14692: CALL_OW 110
14696: PUSH
14697: LD_INT 3
14699: DIV
14700: PLUS
14701: ST_TO_ADDR
14702: GO 14670
14704: POP
14705: POP
// for i in Teams [ 2 ] do
14706: LD_ADDR_VAR 0 9
14710: PUSH
14711: LD_EXP 19
14715: PUSH
14716: LD_INT 2
14718: ARRAY
14719: PUSH
14720: FOR_IN
14721: IFFALSE 14754
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
14723: LD_ADDR_VAR 0 6
14727: PUSH
14728: LD_VAR 0 6
14732: PUSH
14733: LD_VAR 0 9
14737: PUSH
14738: LD_INT 10
14740: PLUS
14741: PPUSH
14742: CALL_OW 110
14746: PUSH
14747: LD_INT 3
14749: DIV
14750: PLUS
14751: ST_TO_ADDR
14752: GO 14720
14754: POP
14755: POP
// for i in Teams [ 3 ] do
14756: LD_ADDR_VAR 0 9
14760: PUSH
14761: LD_EXP 19
14765: PUSH
14766: LD_INT 3
14768: ARRAY
14769: PUSH
14770: FOR_IN
14771: IFFALSE 14804
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
14773: LD_ADDR_VAR 0 7
14777: PUSH
14778: LD_VAR 0 7
14782: PUSH
14783: LD_VAR 0 9
14787: PUSH
14788: LD_INT 10
14790: PLUS
14791: PPUSH
14792: CALL_OW 110
14796: PUSH
14797: LD_INT 3
14799: DIV
14800: PLUS
14801: ST_TO_ADDR
14802: GO 14770
14804: POP
14805: POP
// for i in Teams [ 4 ] do
14806: LD_ADDR_VAR 0 9
14810: PUSH
14811: LD_EXP 19
14815: PUSH
14816: LD_INT 4
14818: ARRAY
14819: PUSH
14820: FOR_IN
14821: IFFALSE 14854
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
14823: LD_ADDR_VAR 0 8
14827: PUSH
14828: LD_VAR 0 8
14832: PUSH
14833: LD_VAR 0 9
14837: PUSH
14838: LD_INT 10
14840: PLUS
14841: PPUSH
14842: CALL_OW 110
14846: PUSH
14847: LD_INT 3
14849: DIV
14850: PLUS
14851: ST_TO_ADDR
14852: GO 14820
14854: POP
14855: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
14856: LD_VAR 0 5
14860: PUSH
14861: LD_EXP 30
14865: GREATEREQUAL
14866: PUSH
14867: LD_VAR 0 6
14871: PUSH
14872: LD_EXP 30
14876: GREATEREQUAL
14877: OR
14878: PUSH
14879: LD_VAR 0 7
14883: PUSH
14884: LD_EXP 30
14888: GREATEREQUAL
14889: OR
14890: PUSH
14891: LD_VAR 0 8
14895: PUSH
14896: LD_EXP 30
14900: GREATEREQUAL
14901: OR
14902: IFFALSE 14907
// enable ( 3 ) ;
14904: LD_INT 3
14906: ENABLE_MARKED
// end ; end ;
14907: LD_VAR 0 1
14911: RET
// every 0 0$1 marked 2 do
14912: GO 14914
14914: DISABLE
// begin count_king ;
14915: CALL 14409 0 0
// show_public_points ;
14919: CALL 13302 0 0
// enable ;
14923: ENABLE
// end ;
14924: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
14925: GO 14927
14927: DISABLE
14928: LD_INT 0
14930: PPUSH
14931: PPUSH
14932: PPUSH
14933: PPUSH
14934: PPUSH
14935: PPUSH
// begin win := [ ] ;
14936: LD_ADDR_LOC 33
14940: PUSH
14941: EMPTY
14942: ST_TO_ADDR
// red = 0 ;
14943: LD_ADDR_VAR 0 2
14947: PUSH
14948: LD_INT 0
14950: ST_TO_ADDR
// blue = 0 ;
14951: LD_ADDR_VAR 0 3
14955: PUSH
14956: LD_INT 0
14958: ST_TO_ADDR
// yel = 0 ;
14959: LD_ADDR_VAR 0 4
14963: PUSH
14964: LD_INT 0
14966: ST_TO_ADDR
// green = 0 ;
14967: LD_ADDR_VAR 0 5
14971: PUSH
14972: LD_INT 0
14974: ST_TO_ADDR
// if not Team_Game then
14975: LD_EXP 23
14979: NOT
14980: IFFALSE 15057
// begin for side = 1 to 8 do
14982: LD_ADDR_VAR 0 1
14986: PUSH
14987: DOUBLE
14988: LD_INT 1
14990: DEC
14991: ST_TO_ADDR
14992: LD_INT 8
14994: PUSH
14995: FOR_TO
14996: IFFALSE 15041
// if GetTag ( side + 10 ) >= final_count * 3 then
14998: LD_VAR 0 1
15002: PUSH
15003: LD_INT 10
15005: PLUS
15006: PPUSH
15007: CALL_OW 110
15011: PUSH
15012: LD_EXP 30
15016: PUSH
15017: LD_INT 3
15019: MUL
15020: GREATEREQUAL
15021: IFFALSE 15039
// win := win ^ side ;
15023: LD_ADDR_LOC 33
15027: PUSH
15028: LD_LOC 33
15032: PUSH
15033: LD_VAR 0 1
15037: ADD
15038: ST_TO_ADDR
15039: GO 14995
15041: POP
15042: POP
// if win then
15043: LD_LOC 33
15047: IFFALSE 15054
// enable ( 4 ) else
15049: LD_INT 4
15051: ENABLE_MARKED
15052: GO 15055
// enable ;
15054: ENABLE
// end else
15055: GO 15373
// begin for i in Teams [ 1 ] do
15057: LD_ADDR_VAR 0 6
15061: PUSH
15062: LD_EXP 19
15066: PUSH
15067: LD_INT 1
15069: ARRAY
15070: PUSH
15071: FOR_IN
15072: IFFALSE 15105
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
15074: LD_ADDR_VAR 0 2
15078: PUSH
15079: LD_VAR 0 2
15083: PUSH
15084: LD_VAR 0 6
15088: PUSH
15089: LD_INT 10
15091: PLUS
15092: PPUSH
15093: CALL_OW 110
15097: PUSH
15098: LD_INT 3
15100: DIV
15101: PLUS
15102: ST_TO_ADDR
15103: GO 15071
15105: POP
15106: POP
// for i in Teams [ 2 ] do
15107: LD_ADDR_VAR 0 6
15111: PUSH
15112: LD_EXP 19
15116: PUSH
15117: LD_INT 2
15119: ARRAY
15120: PUSH
15121: FOR_IN
15122: IFFALSE 15155
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
15124: LD_ADDR_VAR 0 3
15128: PUSH
15129: LD_VAR 0 3
15133: PUSH
15134: LD_VAR 0 6
15138: PUSH
15139: LD_INT 10
15141: PLUS
15142: PPUSH
15143: CALL_OW 110
15147: PUSH
15148: LD_INT 3
15150: DIV
15151: PLUS
15152: ST_TO_ADDR
15153: GO 15121
15155: POP
15156: POP
// for i in Teams [ 3 ] do
15157: LD_ADDR_VAR 0 6
15161: PUSH
15162: LD_EXP 19
15166: PUSH
15167: LD_INT 3
15169: ARRAY
15170: PUSH
15171: FOR_IN
15172: IFFALSE 15205
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
15174: LD_ADDR_VAR 0 4
15178: PUSH
15179: LD_VAR 0 4
15183: PUSH
15184: LD_VAR 0 6
15188: PUSH
15189: LD_INT 10
15191: PLUS
15192: PPUSH
15193: CALL_OW 110
15197: PUSH
15198: LD_INT 3
15200: DIV
15201: PLUS
15202: ST_TO_ADDR
15203: GO 15171
15205: POP
15206: POP
// for i in Teams [ 4 ] do
15207: LD_ADDR_VAR 0 6
15211: PUSH
15212: LD_EXP 19
15216: PUSH
15217: LD_INT 4
15219: ARRAY
15220: PUSH
15221: FOR_IN
15222: IFFALSE 15255
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
15224: LD_ADDR_VAR 0 5
15228: PUSH
15229: LD_VAR 0 5
15233: PUSH
15234: LD_VAR 0 6
15238: PUSH
15239: LD_INT 10
15241: PLUS
15242: PPUSH
15243: CALL_OW 110
15247: PUSH
15248: LD_INT 3
15250: DIV
15251: PLUS
15252: ST_TO_ADDR
15253: GO 15221
15255: POP
15256: POP
// if red >= final_count then
15257: LD_VAR 0 2
15261: PUSH
15262: LD_EXP 30
15266: GREATEREQUAL
15267: IFFALSE 15283
// win = teams [ 1 ] ;
15269: LD_ADDR_LOC 33
15273: PUSH
15274: LD_EXP 19
15278: PUSH
15279: LD_INT 1
15281: ARRAY
15282: ST_TO_ADDR
// if blue >= final_count then
15283: LD_VAR 0 3
15287: PUSH
15288: LD_EXP 30
15292: GREATEREQUAL
15293: IFFALSE 15309
// win = teams [ 2 ] ;
15295: LD_ADDR_LOC 33
15299: PUSH
15300: LD_EXP 19
15304: PUSH
15305: LD_INT 2
15307: ARRAY
15308: ST_TO_ADDR
// if yel >= final_count then
15309: LD_VAR 0 4
15313: PUSH
15314: LD_EXP 30
15318: GREATEREQUAL
15319: IFFALSE 15335
// win = teams [ 3 ] ;
15321: LD_ADDR_LOC 33
15325: PUSH
15326: LD_EXP 19
15330: PUSH
15331: LD_INT 3
15333: ARRAY
15334: ST_TO_ADDR
// if green >= final_count then
15335: LD_VAR 0 5
15339: PUSH
15340: LD_EXP 30
15344: GREATEREQUAL
15345: IFFALSE 15361
// win = teams [ 4 ] ;
15347: LD_ADDR_LOC 33
15351: PUSH
15352: LD_EXP 19
15356: PUSH
15357: LD_INT 4
15359: ARRAY
15360: ST_TO_ADDR
// if win then
15361: LD_LOC 33
15365: IFFALSE 15372
// enable ( 4 ) else
15367: LD_INT 4
15369: ENABLE_MARKED
15370: GO 15373
// enable ;
15372: ENABLE
// end ; end ;
15373: PPOPN 6
15375: END
// every 0 0$1 marked 4 do
15376: GO 15378
15378: DISABLE
// begin if Player_Side in win then
15379: LD_EXP 31
15383: PUSH
15384: LD_LOC 33
15388: IN
15389: IFFALSE 15405
// begin wait ( 0 0$2 ) ;
15391: LD_INT 70
15393: PPUSH
15394: CALL_OW 67
// enable ( 401 ) ;
15398: LD_INT 401
15400: ENABLE_MARKED
// exit ;
15401: GO 15421
// end else
15403: GO 15421
// begin wait ( 0 0$2 ) ;
15405: LD_INT 70
15407: PPUSH
15408: CALL_OW 67
// Multiplayer_Loose_Message ;
15412: CALL_OW 521
// enable ( 400 ) ;
15416: LD_INT 400
15418: ENABLE_MARKED
// exit ;
15419: GO 15421
// end ; end ; end_of_file
15421: END
// export function SetMpTechs ( ) ; var side , i ; begin
15422: LD_INT 0
15424: PPUSH
15425: PPUSH
15426: PPUSH
// for side = 1 to 8 do
15427: LD_ADDR_VAR 0 2
15431: PUSH
15432: DOUBLE
15433: LD_INT 1
15435: DEC
15436: ST_TO_ADDR
15437: LD_INT 8
15439: PUSH
15440: FOR_TO
15441: IFFALSE 15562
// begin for i = 1 to 72 do
15443: LD_ADDR_VAR 0 3
15447: PUSH
15448: DOUBLE
15449: LD_INT 1
15451: DEC
15452: ST_TO_ADDR
15453: LD_INT 72
15455: PUSH
15456: FOR_TO
15457: IFFALSE 15488
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
15459: LD_VAR 0 3
15463: PPUSH
15464: LD_VAR 0 2
15468: PPUSH
15469: LD_INT 0
15471: PPUSH
15472: LD_VAR 0 3
15476: PPUSH
15477: CALL_OW 565
15481: PPUSH
15482: CALL_OW 322
15486: GO 15456
15488: POP
15489: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
15490: LD_INT 73
15492: PPUSH
15493: LD_VAR 0 2
15497: PPUSH
15498: LD_INT 0
15500: PPUSH
15501: LD_INT 25
15503: PPUSH
15504: CALL_OW 565
15508: PPUSH
15509: CALL_OW 322
// for i = 0 to 40 do
15513: LD_ADDR_VAR 0 3
15517: PUSH
15518: DOUBLE
15519: LD_INT 0
15521: DEC
15522: ST_TO_ADDR
15523: LD_INT 40
15525: PUSH
15526: FOR_TO
15527: IFFALSE 15558
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
15529: LD_VAR 0 3
15533: PPUSH
15534: LD_VAR 0 2
15538: PPUSH
15539: LD_INT 1
15541: PPUSH
15542: LD_VAR 0 3
15546: PPUSH
15547: CALL_OW 565
15551: PPUSH
15552: CALL_OW 324
15556: GO 15526
15558: POP
15559: POP
// end ;
15560: GO 15440
15562: POP
15563: POP
// end ;
15564: LD_VAR 0 1
15568: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
15569: LD_INT 0
15571: PPUSH
15572: PPUSH
15573: PPUSH
// for side = 1 to 8 do
15574: LD_ADDR_VAR 0 3
15578: PUSH
15579: DOUBLE
15580: LD_INT 1
15582: DEC
15583: ST_TO_ADDR
15584: LD_INT 8
15586: PUSH
15587: FOR_TO
15588: IFFALSE 19584
// begin for i = 1 to 73 do
15590: LD_ADDR_VAR 0 4
15594: PUSH
15595: DOUBLE
15596: LD_INT 1
15598: DEC
15599: ST_TO_ADDR
15600: LD_INT 73
15602: PUSH
15603: FOR_TO
15604: IFFALSE 15625
// SetTech ( i , side , state_disabled ) ;
15606: LD_VAR 0 4
15610: PPUSH
15611: LD_VAR 0 3
15615: PPUSH
15616: LD_INT 0
15618: PPUSH
15619: CALL_OW 322
15623: GO 15603
15625: POP
15626: POP
// for i = 0 to 40 do
15627: LD_ADDR_VAR 0 4
15631: PUSH
15632: DOUBLE
15633: LD_INT 0
15635: DEC
15636: ST_TO_ADDR
15637: LD_INT 40
15639: PUSH
15640: FOR_TO
15641: IFFALSE 15662
// SetRestrict ( i , side , false ) ;
15643: LD_VAR 0 4
15647: PPUSH
15648: LD_VAR 0 3
15652: PPUSH
15653: LD_INT 0
15655: PPUSH
15656: CALL_OW 324
15660: GO 15640
15662: POP
15663: POP
// case level of 1 :
15664: LD_VAR 0 1
15668: PUSH
15669: LD_INT 1
15671: DOUBLE
15672: EQUAL
15673: IFTRUE 15677
15675: GO 15830
15677: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15678: LD_INT 35
15680: PPUSH
15681: LD_VAR 0 3
15685: PPUSH
15686: LD_INT 1
15688: PPUSH
15689: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15693: LD_INT 45
15695: PPUSH
15696: LD_VAR 0 3
15700: PPUSH
15701: LD_INT 1
15703: PPUSH
15704: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15708: LD_INT 46
15710: PPUSH
15711: LD_VAR 0 3
15715: PPUSH
15716: LD_INT 1
15718: PPUSH
15719: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15723: LD_INT 47
15725: PPUSH
15726: LD_VAR 0 3
15730: PPUSH
15731: LD_INT 1
15733: PPUSH
15734: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15738: LD_INT 0
15740: PPUSH
15741: LD_VAR 0 3
15745: PPUSH
15746: LD_INT 1
15748: PPUSH
15749: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15753: LD_INT 2
15755: PPUSH
15756: LD_VAR 0 3
15760: PPUSH
15761: LD_INT 1
15763: PPUSH
15764: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15768: LD_INT 4
15770: PPUSH
15771: LD_VAR 0 3
15775: PPUSH
15776: LD_INT 1
15778: PPUSH
15779: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15783: LD_INT 6
15785: PPUSH
15786: LD_VAR 0 3
15790: PPUSH
15791: LD_INT 1
15793: PPUSH
15794: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15798: LD_INT 29
15800: PPUSH
15801: LD_VAR 0 3
15805: PPUSH
15806: LD_INT 1
15808: PPUSH
15809: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15813: LD_INT 31
15815: PPUSH
15816: LD_VAR 0 3
15820: PPUSH
15821: LD_INT 1
15823: PPUSH
15824: CALL_OW 324
// end ; 2 :
15828: GO 19582
15830: LD_INT 2
15832: DOUBLE
15833: EQUAL
15834: IFTRUE 15838
15836: GO 16036
15838: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15839: LD_INT 35
15841: PPUSH
15842: LD_VAR 0 3
15846: PPUSH
15847: LD_INT 1
15849: PPUSH
15850: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15854: LD_INT 45
15856: PPUSH
15857: LD_VAR 0 3
15861: PPUSH
15862: LD_INT 1
15864: PPUSH
15865: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15869: LD_INT 46
15871: PPUSH
15872: LD_VAR 0 3
15876: PPUSH
15877: LD_INT 1
15879: PPUSH
15880: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15884: LD_INT 47
15886: PPUSH
15887: LD_VAR 0 3
15891: PPUSH
15892: LD_INT 1
15894: PPUSH
15895: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15899: LD_INT 1
15901: PPUSH
15902: LD_VAR 0 3
15906: PPUSH
15907: LD_INT 1
15909: PPUSH
15910: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15914: LD_INT 2
15916: PPUSH
15917: LD_VAR 0 3
15921: PPUSH
15922: LD_INT 1
15924: PPUSH
15925: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15929: LD_INT 11
15931: PPUSH
15932: LD_VAR 0 3
15936: PPUSH
15937: LD_INT 1
15939: PPUSH
15940: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15944: LD_INT 0
15946: PPUSH
15947: LD_VAR 0 3
15951: PPUSH
15952: LD_INT 1
15954: PPUSH
15955: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15959: LD_INT 2
15961: PPUSH
15962: LD_VAR 0 3
15966: PPUSH
15967: LD_INT 1
15969: PPUSH
15970: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15974: LD_INT 4
15976: PPUSH
15977: LD_VAR 0 3
15981: PPUSH
15982: LD_INT 1
15984: PPUSH
15985: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15989: LD_INT 6
15991: PPUSH
15992: LD_VAR 0 3
15996: PPUSH
15997: LD_INT 1
15999: PPUSH
16000: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16004: LD_INT 29
16006: PPUSH
16007: LD_VAR 0 3
16011: PPUSH
16012: LD_INT 1
16014: PPUSH
16015: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16019: LD_INT 31
16021: PPUSH
16022: LD_VAR 0 3
16026: PPUSH
16027: LD_INT 1
16029: PPUSH
16030: CALL_OW 324
// end ; 3 :
16034: GO 19582
16036: LD_INT 3
16038: DOUBLE
16039: EQUAL
16040: IFTRUE 16044
16042: GO 16497
16044: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16045: LD_INT 35
16047: PPUSH
16048: LD_VAR 0 3
16052: PPUSH
16053: LD_INT 1
16055: PPUSH
16056: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16060: LD_INT 45
16062: PPUSH
16063: LD_VAR 0 3
16067: PPUSH
16068: LD_INT 1
16070: PPUSH
16071: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16075: LD_INT 46
16077: PPUSH
16078: LD_VAR 0 3
16082: PPUSH
16083: LD_INT 1
16085: PPUSH
16086: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16090: LD_INT 47
16092: PPUSH
16093: LD_VAR 0 3
16097: PPUSH
16098: LD_INT 1
16100: PPUSH
16101: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16105: LD_INT 1
16107: PPUSH
16108: LD_VAR 0 3
16112: PPUSH
16113: LD_INT 1
16115: PPUSH
16116: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16120: LD_INT 2
16122: PPUSH
16123: LD_VAR 0 3
16127: PPUSH
16128: LD_INT 1
16130: PPUSH
16131: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16135: LD_INT 11
16137: PPUSH
16138: LD_VAR 0 3
16142: PPUSH
16143: LD_INT 1
16145: PPUSH
16146: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16150: LD_INT 48
16152: PPUSH
16153: LD_VAR 0 3
16157: PPUSH
16158: LD_INT 1
16160: PPUSH
16161: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16165: LD_INT 69
16167: PPUSH
16168: LD_VAR 0 3
16172: PPUSH
16173: LD_INT 1
16175: PPUSH
16176: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16180: LD_INT 39
16182: PPUSH
16183: LD_VAR 0 3
16187: PPUSH
16188: LD_INT 1
16190: PPUSH
16191: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16195: LD_INT 43
16197: PPUSH
16198: LD_VAR 0 3
16202: PPUSH
16203: LD_INT 1
16205: PPUSH
16206: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16210: LD_INT 51
16212: PPUSH
16213: LD_VAR 0 3
16217: PPUSH
16218: LD_INT 1
16220: PPUSH
16221: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16225: LD_INT 6
16227: PPUSH
16228: LD_VAR 0 3
16232: PPUSH
16233: LD_INT 1
16235: PPUSH
16236: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16240: LD_INT 0
16242: PPUSH
16243: LD_VAR 0 3
16247: PPUSH
16248: LD_INT 1
16250: PPUSH
16251: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16255: LD_INT 2
16257: PPUSH
16258: LD_VAR 0 3
16262: PPUSH
16263: LD_INT 1
16265: PPUSH
16266: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16270: LD_INT 3
16272: PPUSH
16273: LD_VAR 0 3
16277: PPUSH
16278: LD_INT 1
16280: PPUSH
16281: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16285: LD_INT 4
16287: PPUSH
16288: LD_VAR 0 3
16292: PPUSH
16293: LD_INT 1
16295: PPUSH
16296: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16300: LD_INT 6
16302: PPUSH
16303: LD_VAR 0 3
16307: PPUSH
16308: LD_INT 1
16310: PPUSH
16311: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16315: LD_INT 7
16317: PPUSH
16318: LD_VAR 0 3
16322: PPUSH
16323: LD_INT 1
16325: PPUSH
16326: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16330: LD_INT 8
16332: PPUSH
16333: LD_VAR 0 3
16337: PPUSH
16338: LD_INT 1
16340: PPUSH
16341: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16345: LD_INT 10
16347: PPUSH
16348: LD_VAR 0 3
16352: PPUSH
16353: LD_INT 1
16355: PPUSH
16356: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16360: LD_INT 15
16362: PPUSH
16363: LD_VAR 0 3
16367: PPUSH
16368: LD_INT 1
16370: PPUSH
16371: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16375: LD_INT 16
16377: PPUSH
16378: LD_VAR 0 3
16382: PPUSH
16383: LD_INT 1
16385: PPUSH
16386: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16390: LD_INT 17
16392: PPUSH
16393: LD_VAR 0 3
16397: PPUSH
16398: LD_INT 1
16400: PPUSH
16401: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16405: LD_INT 20
16407: PPUSH
16408: LD_VAR 0 3
16412: PPUSH
16413: LD_INT 1
16415: PPUSH
16416: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16420: LD_INT 26
16422: PPUSH
16423: LD_VAR 0 3
16427: PPUSH
16428: LD_INT 1
16430: PPUSH
16431: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16435: LD_INT 27
16437: PPUSH
16438: LD_VAR 0 3
16442: PPUSH
16443: LD_INT 1
16445: PPUSH
16446: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16450: LD_INT 29
16452: PPUSH
16453: LD_VAR 0 3
16457: PPUSH
16458: LD_INT 1
16460: PPUSH
16461: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16465: LD_INT 31
16467: PPUSH
16468: LD_VAR 0 3
16472: PPUSH
16473: LD_INT 1
16475: PPUSH
16476: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16480: LD_INT 32
16482: PPUSH
16483: LD_VAR 0 3
16487: PPUSH
16488: LD_INT 1
16490: PPUSH
16491: CALL_OW 324
// end ; 4 :
16495: GO 19582
16497: LD_INT 4
16499: DOUBLE
16500: EQUAL
16501: IFTRUE 16505
16503: GO 17453
16505: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16506: LD_INT 35
16508: PPUSH
16509: LD_VAR 0 3
16513: PPUSH
16514: LD_INT 1
16516: PPUSH
16517: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16521: LD_INT 45
16523: PPUSH
16524: LD_VAR 0 3
16528: PPUSH
16529: LD_INT 1
16531: PPUSH
16532: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16536: LD_INT 46
16538: PPUSH
16539: LD_VAR 0 3
16543: PPUSH
16544: LD_INT 1
16546: PPUSH
16547: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16551: LD_INT 47
16553: PPUSH
16554: LD_VAR 0 3
16558: PPUSH
16559: LD_INT 1
16561: PPUSH
16562: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16566: LD_INT 1
16568: PPUSH
16569: LD_VAR 0 3
16573: PPUSH
16574: LD_INT 1
16576: PPUSH
16577: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16581: LD_INT 2
16583: PPUSH
16584: LD_VAR 0 3
16588: PPUSH
16589: LD_INT 1
16591: PPUSH
16592: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16596: LD_INT 11
16598: PPUSH
16599: LD_VAR 0 3
16603: PPUSH
16604: LD_INT 1
16606: PPUSH
16607: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16611: LD_INT 20
16613: PPUSH
16614: LD_VAR 0 3
16618: PPUSH
16619: LD_INT 1
16621: PPUSH
16622: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16626: LD_INT 48
16628: PPUSH
16629: LD_VAR 0 3
16633: PPUSH
16634: LD_INT 1
16636: PPUSH
16637: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16641: LD_INT 49
16643: PPUSH
16644: LD_VAR 0 3
16648: PPUSH
16649: LD_INT 1
16651: PPUSH
16652: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16656: LD_INT 69
16658: PPUSH
16659: LD_VAR 0 3
16663: PPUSH
16664: LD_INT 1
16666: PPUSH
16667: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16671: LD_INT 39
16673: PPUSH
16674: LD_VAR 0 3
16678: PPUSH
16679: LD_INT 1
16681: PPUSH
16682: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16686: LD_INT 34
16688: PPUSH
16689: LD_VAR 0 3
16693: PPUSH
16694: LD_INT 1
16696: PPUSH
16697: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16701: LD_INT 42
16703: PPUSH
16704: LD_VAR 0 3
16708: PPUSH
16709: LD_INT 1
16711: PPUSH
16712: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16716: LD_INT 44
16718: PPUSH
16719: LD_VAR 0 3
16723: PPUSH
16724: LD_INT 1
16726: PPUSH
16727: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16731: LD_INT 41
16733: PPUSH
16734: LD_VAR 0 3
16738: PPUSH
16739: LD_INT 1
16741: PPUSH
16742: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16746: LD_INT 43
16748: PPUSH
16749: LD_VAR 0 3
16753: PPUSH
16754: LD_INT 1
16756: PPUSH
16757: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16761: LD_INT 70
16763: PPUSH
16764: LD_VAR 0 3
16768: PPUSH
16769: LD_INT 1
16771: PPUSH
16772: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16776: LD_INT 51
16778: PPUSH
16779: LD_VAR 0 3
16783: PPUSH
16784: LD_INT 1
16786: PPUSH
16787: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16791: LD_INT 52
16793: PPUSH
16794: LD_VAR 0 3
16798: PPUSH
16799: LD_INT 1
16801: PPUSH
16802: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16806: LD_INT 6
16808: PPUSH
16809: LD_VAR 0 3
16813: PPUSH
16814: LD_INT 1
16816: PPUSH
16817: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16821: LD_INT 15
16823: PPUSH
16824: LD_VAR 0 3
16828: PPUSH
16829: LD_INT 1
16831: PPUSH
16832: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16836: LD_INT 7
16838: PPUSH
16839: LD_VAR 0 3
16843: PPUSH
16844: LD_INT 1
16846: PPUSH
16847: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16851: LD_INT 12
16853: PPUSH
16854: LD_VAR 0 3
16858: PPUSH
16859: LD_INT 1
16861: PPUSH
16862: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16866: LD_INT 18
16868: PPUSH
16869: LD_VAR 0 3
16873: PPUSH
16874: LD_INT 1
16876: PPUSH
16877: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16881: LD_INT 60
16883: PPUSH
16884: LD_VAR 0 3
16888: PPUSH
16889: LD_INT 1
16891: PPUSH
16892: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16896: LD_INT 9
16898: PPUSH
16899: LD_VAR 0 3
16903: PPUSH
16904: LD_INT 1
16906: PPUSH
16907: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16911: LD_INT 30
16913: PPUSH
16914: LD_VAR 0 3
16918: PPUSH
16919: LD_INT 1
16921: PPUSH
16922: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16926: LD_INT 37
16928: PPUSH
16929: LD_VAR 0 3
16933: PPUSH
16934: LD_INT 1
16936: PPUSH
16937: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16941: LD_INT 5
16943: PPUSH
16944: LD_VAR 0 3
16948: PPUSH
16949: LD_INT 1
16951: PPUSH
16952: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16956: LD_INT 66
16958: PPUSH
16959: LD_VAR 0 3
16963: PPUSH
16964: LD_INT 1
16966: PPUSH
16967: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16971: LD_INT 21
16973: PPUSH
16974: LD_VAR 0 3
16978: PPUSH
16979: LD_INT 1
16981: PPUSH
16982: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16986: LD_INT 22
16988: PPUSH
16989: LD_VAR 0 3
16993: PPUSH
16994: LD_INT 1
16996: PPUSH
16997: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17001: LD_INT 54
17003: PPUSH
17004: LD_VAR 0 3
17008: PPUSH
17009: LD_INT 1
17011: PPUSH
17012: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17016: LD_INT 0
17018: PPUSH
17019: LD_VAR 0 3
17023: PPUSH
17024: LD_INT 1
17026: PPUSH
17027: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
17031: LD_INT 1
17033: PPUSH
17034: LD_VAR 0 3
17038: PPUSH
17039: LD_INT 1
17041: PPUSH
17042: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17046: LD_INT 2
17048: PPUSH
17049: LD_VAR 0 3
17053: PPUSH
17054: LD_INT 1
17056: PPUSH
17057: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17061: LD_INT 3
17063: PPUSH
17064: LD_VAR 0 3
17068: PPUSH
17069: LD_INT 1
17071: PPUSH
17072: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17076: LD_INT 4
17078: PPUSH
17079: LD_VAR 0 3
17083: PPUSH
17084: LD_INT 1
17086: PPUSH
17087: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
17091: LD_INT 5
17093: PPUSH
17094: LD_VAR 0 3
17098: PPUSH
17099: LD_INT 1
17101: PPUSH
17102: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17106: LD_INT 6
17108: PPUSH
17109: LD_VAR 0 3
17113: PPUSH
17114: LD_INT 1
17116: PPUSH
17117: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17121: LD_INT 7
17123: PPUSH
17124: LD_VAR 0 3
17128: PPUSH
17129: LD_INT 1
17131: PPUSH
17132: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17136: LD_INT 8
17138: PPUSH
17139: LD_VAR 0 3
17143: PPUSH
17144: LD_INT 1
17146: PPUSH
17147: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17151: LD_INT 10
17153: PPUSH
17154: LD_VAR 0 3
17158: PPUSH
17159: LD_INT 1
17161: PPUSH
17162: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
17166: LD_INT 11
17168: PPUSH
17169: LD_VAR 0 3
17173: PPUSH
17174: LD_INT 1
17176: PPUSH
17177: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
17181: LD_INT 12
17183: PPUSH
17184: LD_VAR 0 3
17188: PPUSH
17189: LD_INT 1
17191: PPUSH
17192: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
17196: LD_INT 13
17198: PPUSH
17199: LD_VAR 0 3
17203: PPUSH
17204: LD_INT 1
17206: PPUSH
17207: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
17211: LD_INT 14
17213: PPUSH
17214: LD_VAR 0 3
17218: PPUSH
17219: LD_INT 1
17221: PPUSH
17222: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17226: LD_INT 15
17228: PPUSH
17229: LD_VAR 0 3
17233: PPUSH
17234: LD_INT 1
17236: PPUSH
17237: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17241: LD_INT 16
17243: PPUSH
17244: LD_VAR 0 3
17248: PPUSH
17249: LD_INT 1
17251: PPUSH
17252: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17256: LD_INT 17
17258: PPUSH
17259: LD_VAR 0 3
17263: PPUSH
17264: LD_INT 1
17266: PPUSH
17267: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
17271: LD_INT 19
17273: PPUSH
17274: LD_VAR 0 3
17278: PPUSH
17279: LD_INT 1
17281: PPUSH
17282: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17286: LD_INT 20
17288: PPUSH
17289: LD_VAR 0 3
17293: PPUSH
17294: LD_INT 1
17296: PPUSH
17297: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
17301: LD_INT 21
17303: PPUSH
17304: LD_VAR 0 3
17308: PPUSH
17309: LD_INT 1
17311: PPUSH
17312: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
17316: LD_INT 23
17318: PPUSH
17319: LD_VAR 0 3
17323: PPUSH
17324: LD_INT 1
17326: PPUSH
17327: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17331: LD_INT 26
17333: PPUSH
17334: LD_VAR 0 3
17338: PPUSH
17339: LD_INT 1
17341: PPUSH
17342: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17346: LD_INT 27
17348: PPUSH
17349: LD_VAR 0 3
17353: PPUSH
17354: LD_INT 1
17356: PPUSH
17357: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
17361: LD_INT 28
17363: PPUSH
17364: LD_VAR 0 3
17368: PPUSH
17369: LD_INT 1
17371: PPUSH
17372: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17376: LD_INT 29
17378: PPUSH
17379: LD_VAR 0 3
17383: PPUSH
17384: LD_INT 1
17386: PPUSH
17387: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
17391: LD_INT 30
17393: PPUSH
17394: LD_VAR 0 3
17398: PPUSH
17399: LD_INT 1
17401: PPUSH
17402: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17406: LD_INT 31
17408: PPUSH
17409: LD_VAR 0 3
17413: PPUSH
17414: LD_INT 1
17416: PPUSH
17417: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17421: LD_INT 32
17423: PPUSH
17424: LD_VAR 0 3
17428: PPUSH
17429: LD_INT 1
17431: PPUSH
17432: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17436: LD_INT 36
17438: PPUSH
17439: LD_VAR 0 3
17443: PPUSH
17444: LD_INT 1
17446: PPUSH
17447: CALL_OW 324
// end ; 5 :
17451: GO 19582
17453: LD_INT 5
17455: DOUBLE
17456: EQUAL
17457: IFTRUE 17461
17459: GO 18574
17461: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17462: LD_INT 35
17464: PPUSH
17465: LD_VAR 0 3
17469: PPUSH
17470: LD_INT 1
17472: PPUSH
17473: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17477: LD_INT 45
17479: PPUSH
17480: LD_VAR 0 3
17484: PPUSH
17485: LD_INT 1
17487: PPUSH
17488: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17492: LD_INT 46
17494: PPUSH
17495: LD_VAR 0 3
17499: PPUSH
17500: LD_INT 1
17502: PPUSH
17503: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17507: LD_INT 47
17509: PPUSH
17510: LD_VAR 0 3
17514: PPUSH
17515: LD_INT 1
17517: PPUSH
17518: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17522: LD_INT 1
17524: PPUSH
17525: LD_VAR 0 3
17529: PPUSH
17530: LD_INT 1
17532: PPUSH
17533: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17537: LD_INT 2
17539: PPUSH
17540: LD_VAR 0 3
17544: PPUSH
17545: LD_INT 1
17547: PPUSH
17548: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17552: LD_INT 11
17554: PPUSH
17555: LD_VAR 0 3
17559: PPUSH
17560: LD_INT 1
17562: PPUSH
17563: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17567: LD_INT 20
17569: PPUSH
17570: LD_VAR 0 3
17574: PPUSH
17575: LD_INT 1
17577: PPUSH
17578: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17582: LD_INT 48
17584: PPUSH
17585: LD_VAR 0 3
17589: PPUSH
17590: LD_INT 1
17592: PPUSH
17593: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17597: LD_INT 49
17599: PPUSH
17600: LD_VAR 0 3
17604: PPUSH
17605: LD_INT 1
17607: PPUSH
17608: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17612: LD_INT 69
17614: PPUSH
17615: LD_VAR 0 3
17619: PPUSH
17620: LD_INT 1
17622: PPUSH
17623: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17627: LD_INT 39
17629: PPUSH
17630: LD_VAR 0 3
17634: PPUSH
17635: LD_INT 1
17637: PPUSH
17638: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17642: LD_INT 34
17644: PPUSH
17645: LD_VAR 0 3
17649: PPUSH
17650: LD_INT 1
17652: PPUSH
17653: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17657: LD_INT 42
17659: PPUSH
17660: LD_VAR 0 3
17664: PPUSH
17665: LD_INT 1
17667: PPUSH
17668: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17672: LD_INT 44
17674: PPUSH
17675: LD_VAR 0 3
17679: PPUSH
17680: LD_INT 1
17682: PPUSH
17683: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17687: LD_INT 41
17689: PPUSH
17690: LD_VAR 0 3
17694: PPUSH
17695: LD_INT 1
17697: PPUSH
17698: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17702: LD_INT 40
17704: PPUSH
17705: LD_VAR 0 3
17709: PPUSH
17710: LD_INT 1
17712: PPUSH
17713: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17717: LD_INT 43
17719: PPUSH
17720: LD_VAR 0 3
17724: PPUSH
17725: LD_INT 1
17727: PPUSH
17728: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17732: LD_INT 70
17734: PPUSH
17735: LD_VAR 0 3
17739: PPUSH
17740: LD_INT 1
17742: PPUSH
17743: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17747: LD_INT 51
17749: PPUSH
17750: LD_VAR 0 3
17754: PPUSH
17755: LD_INT 1
17757: PPUSH
17758: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17762: LD_INT 52
17764: PPUSH
17765: LD_VAR 0 3
17769: PPUSH
17770: LD_INT 1
17772: PPUSH
17773: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17777: LD_INT 6
17779: PPUSH
17780: LD_VAR 0 3
17784: PPUSH
17785: LD_INT 1
17787: PPUSH
17788: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17792: LD_INT 15
17794: PPUSH
17795: LD_VAR 0 3
17799: PPUSH
17800: LD_INT 1
17802: PPUSH
17803: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17807: LD_INT 7
17809: PPUSH
17810: LD_VAR 0 3
17814: PPUSH
17815: LD_INT 1
17817: PPUSH
17818: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17822: LD_INT 12
17824: PPUSH
17825: LD_VAR 0 3
17829: PPUSH
17830: LD_INT 1
17832: PPUSH
17833: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17837: LD_INT 17
17839: PPUSH
17840: LD_VAR 0 3
17844: PPUSH
17845: LD_INT 1
17847: PPUSH
17848: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17852: LD_INT 18
17854: PPUSH
17855: LD_VAR 0 3
17859: PPUSH
17860: LD_INT 1
17862: PPUSH
17863: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17867: LD_INT 60
17869: PPUSH
17870: LD_VAR 0 3
17874: PPUSH
17875: LD_INT 1
17877: PPUSH
17878: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17882: LD_INT 32
17884: PPUSH
17885: LD_VAR 0 3
17889: PPUSH
17890: LD_INT 1
17892: PPUSH
17893: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17897: LD_INT 9
17899: PPUSH
17900: LD_VAR 0 3
17904: PPUSH
17905: LD_INT 1
17907: PPUSH
17908: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17912: LD_INT 57
17914: PPUSH
17915: LD_VAR 0 3
17919: PPUSH
17920: LD_INT 1
17922: PPUSH
17923: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17927: LD_INT 30
17929: PPUSH
17930: LD_VAR 0 3
17934: PPUSH
17935: LD_INT 1
17937: PPUSH
17938: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17942: LD_INT 37
17944: PPUSH
17945: LD_VAR 0 3
17949: PPUSH
17950: LD_INT 1
17952: PPUSH
17953: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
17957: LD_INT 63
17959: PPUSH
17960: LD_VAR 0 3
17964: PPUSH
17965: LD_INT 1
17967: PPUSH
17968: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
17972: LD_INT 3
17974: PPUSH
17975: LD_VAR 0 3
17979: PPUSH
17980: LD_INT 1
17982: PPUSH
17983: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
17987: LD_INT 4
17989: PPUSH
17990: LD_VAR 0 3
17994: PPUSH
17995: LD_INT 1
17997: PPUSH
17998: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18002: LD_INT 5
18004: PPUSH
18005: LD_VAR 0 3
18009: PPUSH
18010: LD_INT 1
18012: PPUSH
18013: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18017: LD_INT 66
18019: PPUSH
18020: LD_VAR 0 3
18024: PPUSH
18025: LD_INT 1
18027: PPUSH
18028: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18032: LD_INT 21
18034: PPUSH
18035: LD_VAR 0 3
18039: PPUSH
18040: LD_INT 1
18042: PPUSH
18043: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18047: LD_INT 22
18049: PPUSH
18050: LD_VAR 0 3
18054: PPUSH
18055: LD_INT 1
18057: PPUSH
18058: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
18062: LD_INT 19
18064: PPUSH
18065: LD_VAR 0 3
18069: PPUSH
18070: LD_INT 1
18072: PPUSH
18073: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18077: LD_INT 54
18079: PPUSH
18080: LD_VAR 0 3
18084: PPUSH
18085: LD_INT 1
18087: PPUSH
18088: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
18092: LD_INT 55
18094: PPUSH
18095: LD_VAR 0 3
18099: PPUSH
18100: LD_INT 1
18102: PPUSH
18103: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18107: LD_INT 0
18109: PPUSH
18110: LD_VAR 0 3
18114: PPUSH
18115: LD_INT 1
18117: PPUSH
18118: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18122: LD_INT 1
18124: PPUSH
18125: LD_VAR 0 3
18129: PPUSH
18130: LD_INT 1
18132: PPUSH
18133: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18137: LD_INT 2
18139: PPUSH
18140: LD_VAR 0 3
18144: PPUSH
18145: LD_INT 1
18147: PPUSH
18148: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18152: LD_INT 3
18154: PPUSH
18155: LD_VAR 0 3
18159: PPUSH
18160: LD_INT 1
18162: PPUSH
18163: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18167: LD_INT 4
18169: PPUSH
18170: LD_VAR 0 3
18174: PPUSH
18175: LD_INT 1
18177: PPUSH
18178: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18182: LD_INT 5
18184: PPUSH
18185: LD_VAR 0 3
18189: PPUSH
18190: LD_INT 1
18192: PPUSH
18193: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18197: LD_INT 6
18199: PPUSH
18200: LD_VAR 0 3
18204: PPUSH
18205: LD_INT 1
18207: PPUSH
18208: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18212: LD_INT 7
18214: PPUSH
18215: LD_VAR 0 3
18219: PPUSH
18220: LD_INT 1
18222: PPUSH
18223: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18227: LD_INT 8
18229: PPUSH
18230: LD_VAR 0 3
18234: PPUSH
18235: LD_INT 1
18237: PPUSH
18238: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18242: LD_INT 10
18244: PPUSH
18245: LD_VAR 0 3
18249: PPUSH
18250: LD_INT 1
18252: PPUSH
18253: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18257: LD_INT 11
18259: PPUSH
18260: LD_VAR 0 3
18264: PPUSH
18265: LD_INT 1
18267: PPUSH
18268: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18272: LD_INT 12
18274: PPUSH
18275: LD_VAR 0 3
18279: PPUSH
18280: LD_INT 1
18282: PPUSH
18283: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18287: LD_INT 13
18289: PPUSH
18290: LD_VAR 0 3
18294: PPUSH
18295: LD_INT 1
18297: PPUSH
18298: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18302: LD_INT 14
18304: PPUSH
18305: LD_VAR 0 3
18309: PPUSH
18310: LD_INT 1
18312: PPUSH
18313: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18317: LD_INT 15
18319: PPUSH
18320: LD_VAR 0 3
18324: PPUSH
18325: LD_INT 1
18327: PPUSH
18328: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18332: LD_INT 16
18334: PPUSH
18335: LD_VAR 0 3
18339: PPUSH
18340: LD_INT 1
18342: PPUSH
18343: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18347: LD_INT 17
18349: PPUSH
18350: LD_VAR 0 3
18354: PPUSH
18355: LD_INT 1
18357: PPUSH
18358: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
18362: LD_INT 18
18364: PPUSH
18365: LD_VAR 0 3
18369: PPUSH
18370: LD_INT 1
18372: PPUSH
18373: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18377: LD_INT 19
18379: PPUSH
18380: LD_VAR 0 3
18384: PPUSH
18385: LD_INT 1
18387: PPUSH
18388: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18392: LD_INT 20
18394: PPUSH
18395: LD_VAR 0 3
18399: PPUSH
18400: LD_INT 1
18402: PPUSH
18403: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18407: LD_INT 21
18409: PPUSH
18410: LD_VAR 0 3
18414: PPUSH
18415: LD_INT 1
18417: PPUSH
18418: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18422: LD_INT 23
18424: PPUSH
18425: LD_VAR 0 3
18429: PPUSH
18430: LD_INT 1
18432: PPUSH
18433: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18437: LD_INT 26
18439: PPUSH
18440: LD_VAR 0 3
18444: PPUSH
18445: LD_INT 1
18447: PPUSH
18448: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18452: LD_INT 27
18454: PPUSH
18455: LD_VAR 0 3
18459: PPUSH
18460: LD_INT 1
18462: PPUSH
18463: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18467: LD_INT 28
18469: PPUSH
18470: LD_VAR 0 3
18474: PPUSH
18475: LD_INT 1
18477: PPUSH
18478: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18482: LD_INT 29
18484: PPUSH
18485: LD_VAR 0 3
18489: PPUSH
18490: LD_INT 1
18492: PPUSH
18493: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18497: LD_INT 30
18499: PPUSH
18500: LD_VAR 0 3
18504: PPUSH
18505: LD_INT 1
18507: PPUSH
18508: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18512: LD_INT 31
18514: PPUSH
18515: LD_VAR 0 3
18519: PPUSH
18520: LD_INT 1
18522: PPUSH
18523: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18527: LD_INT 32
18529: PPUSH
18530: LD_VAR 0 3
18534: PPUSH
18535: LD_INT 1
18537: PPUSH
18538: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
18542: LD_INT 33
18544: PPUSH
18545: LD_VAR 0 3
18549: PPUSH
18550: LD_INT 1
18552: PPUSH
18553: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18557: LD_INT 36
18559: PPUSH
18560: LD_VAR 0 3
18564: PPUSH
18565: LD_INT 1
18567: PPUSH
18568: CALL_OW 324
// end ; 6 :
18572: GO 19582
18574: LD_INT 6
18576: DOUBLE
18577: EQUAL
18578: IFTRUE 18582
18580: GO 19507
18582: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18583: LD_INT 35
18585: PPUSH
18586: LD_VAR 0 3
18590: PPUSH
18591: LD_INT 1
18593: PPUSH
18594: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18598: LD_INT 45
18600: PPUSH
18601: LD_VAR 0 3
18605: PPUSH
18606: LD_INT 1
18608: PPUSH
18609: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18613: LD_INT 46
18615: PPUSH
18616: LD_VAR 0 3
18620: PPUSH
18621: LD_INT 1
18623: PPUSH
18624: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18628: LD_INT 47
18630: PPUSH
18631: LD_VAR 0 3
18635: PPUSH
18636: LD_INT 1
18638: PPUSH
18639: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18643: LD_INT 1
18645: PPUSH
18646: LD_VAR 0 3
18650: PPUSH
18651: LD_INT 1
18653: PPUSH
18654: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18658: LD_INT 2
18660: PPUSH
18661: LD_VAR 0 3
18665: PPUSH
18666: LD_INT 1
18668: PPUSH
18669: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18673: LD_INT 11
18675: PPUSH
18676: LD_VAR 0 3
18680: PPUSH
18681: LD_INT 1
18683: PPUSH
18684: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18688: LD_INT 20
18690: PPUSH
18691: LD_VAR 0 3
18695: PPUSH
18696: LD_INT 1
18698: PPUSH
18699: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18703: LD_INT 48
18705: PPUSH
18706: LD_VAR 0 3
18710: PPUSH
18711: LD_INT 1
18713: PPUSH
18714: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18718: LD_INT 49
18720: PPUSH
18721: LD_VAR 0 3
18725: PPUSH
18726: LD_INT 1
18728: PPUSH
18729: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
18733: LD_INT 50
18735: PPUSH
18736: LD_VAR 0 3
18740: PPUSH
18741: LD_INT 1
18743: PPUSH
18744: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18748: LD_INT 69
18750: PPUSH
18751: LD_VAR 0 3
18755: PPUSH
18756: LD_INT 1
18758: PPUSH
18759: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18763: LD_INT 39
18765: PPUSH
18766: LD_VAR 0 3
18770: PPUSH
18771: LD_INT 1
18773: PPUSH
18774: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18778: LD_INT 34
18780: PPUSH
18781: LD_VAR 0 3
18785: PPUSH
18786: LD_INT 1
18788: PPUSH
18789: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18793: LD_INT 42
18795: PPUSH
18796: LD_VAR 0 3
18800: PPUSH
18801: LD_INT 1
18803: PPUSH
18804: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18808: LD_INT 44
18810: PPUSH
18811: LD_VAR 0 3
18815: PPUSH
18816: LD_INT 1
18818: PPUSH
18819: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18823: LD_INT 41
18825: PPUSH
18826: LD_VAR 0 3
18830: PPUSH
18831: LD_INT 1
18833: PPUSH
18834: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
18838: LD_INT 13
18840: PPUSH
18841: LD_VAR 0 3
18845: PPUSH
18846: LD_INT 1
18848: PPUSH
18849: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18853: LD_INT 40
18855: PPUSH
18856: LD_VAR 0 3
18860: PPUSH
18861: LD_INT 1
18863: PPUSH
18864: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18868: LD_INT 43
18870: PPUSH
18871: LD_VAR 0 3
18875: PPUSH
18876: LD_INT 1
18878: PPUSH
18879: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18883: LD_INT 70
18885: PPUSH
18886: LD_VAR 0 3
18890: PPUSH
18891: LD_INT 1
18893: PPUSH
18894: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
18898: LD_INT 23
18900: PPUSH
18901: LD_VAR 0 3
18905: PPUSH
18906: LD_INT 1
18908: PPUSH
18909: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18913: LD_INT 51
18915: PPUSH
18916: LD_VAR 0 3
18920: PPUSH
18921: LD_INT 1
18923: PPUSH
18924: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18928: LD_INT 52
18930: PPUSH
18931: LD_VAR 0 3
18935: PPUSH
18936: LD_INT 1
18938: PPUSH
18939: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18943: LD_INT 6
18945: PPUSH
18946: LD_VAR 0 3
18950: PPUSH
18951: LD_INT 1
18953: PPUSH
18954: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18958: LD_INT 15
18960: PPUSH
18961: LD_VAR 0 3
18965: PPUSH
18966: LD_INT 1
18968: PPUSH
18969: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18973: LD_INT 7
18975: PPUSH
18976: LD_VAR 0 3
18980: PPUSH
18981: LD_INT 1
18983: PPUSH
18984: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18988: LD_INT 12
18990: PPUSH
18991: LD_VAR 0 3
18995: PPUSH
18996: LD_INT 1
18998: PPUSH
18999: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
19003: LD_INT 10
19005: PPUSH
19006: LD_VAR 0 3
19010: PPUSH
19011: LD_INT 1
19013: PPUSH
19014: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19018: LD_INT 17
19020: PPUSH
19021: LD_VAR 0 3
19025: PPUSH
19026: LD_INT 1
19028: PPUSH
19029: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19033: LD_INT 18
19035: PPUSH
19036: LD_VAR 0 3
19040: PPUSH
19041: LD_INT 1
19043: PPUSH
19044: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19048: LD_INT 60
19050: PPUSH
19051: LD_VAR 0 3
19055: PPUSH
19056: LD_INT 1
19058: PPUSH
19059: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
19063: LD_INT 61
19065: PPUSH
19066: LD_VAR 0 3
19070: PPUSH
19071: LD_INT 1
19073: PPUSH
19074: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19078: LD_INT 32
19080: PPUSH
19081: LD_VAR 0 3
19085: PPUSH
19086: LD_INT 1
19088: PPUSH
19089: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
19093: LD_INT 27
19095: PPUSH
19096: LD_VAR 0 3
19100: PPUSH
19101: LD_INT 1
19103: PPUSH
19104: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
19108: LD_INT 36
19110: PPUSH
19111: LD_VAR 0 3
19115: PPUSH
19116: LD_INT 1
19118: PPUSH
19119: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
19123: LD_INT 33
19125: PPUSH
19126: LD_VAR 0 3
19130: PPUSH
19131: LD_INT 1
19133: PPUSH
19134: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19138: LD_INT 9
19140: PPUSH
19141: LD_VAR 0 3
19145: PPUSH
19146: LD_INT 1
19148: PPUSH
19149: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
19153: LD_INT 38
19155: PPUSH
19156: LD_VAR 0 3
19160: PPUSH
19161: LD_INT 1
19163: PPUSH
19164: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19168: LD_INT 57
19170: PPUSH
19171: LD_VAR 0 3
19175: PPUSH
19176: LD_INT 1
19178: PPUSH
19179: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
19183: LD_INT 58
19185: PPUSH
19186: LD_VAR 0 3
19190: PPUSH
19191: LD_INT 1
19193: PPUSH
19194: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
19198: LD_INT 28
19200: PPUSH
19201: LD_VAR 0 3
19205: PPUSH
19206: LD_INT 1
19208: PPUSH
19209: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
19213: LD_INT 29
19215: PPUSH
19216: LD_VAR 0 3
19220: PPUSH
19221: LD_INT 1
19223: PPUSH
19224: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19228: LD_INT 30
19230: PPUSH
19231: LD_VAR 0 3
19235: PPUSH
19236: LD_INT 1
19238: PPUSH
19239: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19243: LD_INT 37
19245: PPUSH
19246: LD_VAR 0 3
19250: PPUSH
19251: LD_INT 1
19253: PPUSH
19254: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19258: LD_INT 63
19260: PPUSH
19261: LD_VAR 0 3
19265: PPUSH
19266: LD_INT 1
19268: PPUSH
19269: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
19273: LD_INT 64
19275: PPUSH
19276: LD_VAR 0 3
19280: PPUSH
19281: LD_INT 1
19283: PPUSH
19284: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19288: LD_INT 3
19290: PPUSH
19291: LD_VAR 0 3
19295: PPUSH
19296: LD_INT 1
19298: PPUSH
19299: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19303: LD_INT 4
19305: PPUSH
19306: LD_VAR 0 3
19310: PPUSH
19311: LD_INT 1
19313: PPUSH
19314: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19318: LD_INT 5
19320: PPUSH
19321: LD_VAR 0 3
19325: PPUSH
19326: LD_INT 1
19328: PPUSH
19329: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
19333: LD_INT 8
19335: PPUSH
19336: LD_VAR 0 3
19340: PPUSH
19341: LD_INT 1
19343: PPUSH
19344: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19348: LD_INT 66
19350: PPUSH
19351: LD_VAR 0 3
19355: PPUSH
19356: LD_INT 1
19358: PPUSH
19359: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
19363: LD_INT 67
19365: PPUSH
19366: LD_VAR 0 3
19370: PPUSH
19371: LD_INT 1
19373: PPUSH
19374: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19378: LD_INT 21
19380: PPUSH
19381: LD_VAR 0 3
19385: PPUSH
19386: LD_INT 1
19388: PPUSH
19389: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19393: LD_INT 22
19395: PPUSH
19396: LD_VAR 0 3
19400: PPUSH
19401: LD_INT 1
19403: PPUSH
19404: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19408: LD_INT 19
19410: PPUSH
19411: LD_VAR 0 3
19415: PPUSH
19416: LD_INT 1
19418: PPUSH
19419: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
19423: LD_INT 26
19425: PPUSH
19426: LD_VAR 0 3
19430: PPUSH
19431: LD_INT 1
19433: PPUSH
19434: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19438: LD_INT 54
19440: PPUSH
19441: LD_VAR 0 3
19445: PPUSH
19446: LD_INT 1
19448: PPUSH
19449: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19453: LD_INT 55
19455: PPUSH
19456: LD_VAR 0 3
19460: PPUSH
19461: LD_INT 1
19463: PPUSH
19464: CALL_OW 322
// for i = 0 to 39 do
19468: LD_ADDR_VAR 0 4
19472: PUSH
19473: DOUBLE
19474: LD_INT 0
19476: DEC
19477: ST_TO_ADDR
19478: LD_INT 39
19480: PUSH
19481: FOR_TO
19482: IFFALSE 19503
// SetRestrict ( i , side , true ) ;
19484: LD_VAR 0 4
19488: PPUSH
19489: LD_VAR 0 3
19493: PPUSH
19494: LD_INT 1
19496: PPUSH
19497: CALL_OW 324
19501: GO 19481
19503: POP
19504: POP
// end ; else
19505: GO 19582
19507: POP
// begin for i = 1 to 73 do
19508: LD_ADDR_VAR 0 4
19512: PUSH
19513: DOUBLE
19514: LD_INT 1
19516: DEC
19517: ST_TO_ADDR
19518: LD_INT 73
19520: PUSH
19521: FOR_TO
19522: IFFALSE 19543
// SetTech ( i , side , state_enabled ) ;
19524: LD_VAR 0 4
19528: PPUSH
19529: LD_VAR 0 3
19533: PPUSH
19534: LD_INT 1
19536: PPUSH
19537: CALL_OW 322
19541: GO 19521
19543: POP
19544: POP
// for i = 0 to 39 do
19545: LD_ADDR_VAR 0 4
19549: PUSH
19550: DOUBLE
19551: LD_INT 0
19553: DEC
19554: ST_TO_ADDR
19555: LD_INT 39
19557: PUSH
19558: FOR_TO
19559: IFFALSE 19580
// SetRestrict ( i , side , true ) ;
19561: LD_VAR 0 4
19565: PPUSH
19566: LD_VAR 0 3
19570: PPUSH
19571: LD_INT 1
19573: PPUSH
19574: CALL_OW 324
19578: GO 19558
19580: POP
19581: POP
// end ; end ; end ;
19582: GO 15587
19584: POP
19585: POP
// end ; end_of_file
19586: LD_VAR 0 2
19590: RET
// export function LScore_Init ( sides , ifPScore , yourSide ) ; begin
19591: LD_INT 0
19593: PPUSH
// LScore_Init2 ( sides , ifPScore , yourSide , false ) ;
19594: LD_VAR 0 1
19598: PPUSH
19599: LD_VAR 0 2
19603: PPUSH
19604: LD_VAR 0 3
19608: PPUSH
19609: LD_INT 0
19611: PPUSH
19612: CALL 19621 0 4
// end ;
19616: LD_VAR 0 4
19620: RET
// export function LScore_Init2 ( sides , ifPScore , yourSide , lockTeam ) ; begin
19621: LD_INT 0
19623: PPUSH
// ToLua ( initScore({ & sides [ 1 ] & , & sides [ 2 ] & , & sides [ 3 ] & , & sides [ 4 ] & , & sides [ 5 ] & , & sides [ 6 ] & , & sides [ 7 ] & , & sides [ 8 ] & }, & ifPScore & , & yourSide & , & lockTeam & ); ) ;
19624: LD_STRING initScore({
19626: PUSH
19627: LD_VAR 0 1
19631: PUSH
19632: LD_INT 1
19634: ARRAY
19635: STR
19636: PUSH
19637: LD_STRING ,
19639: STR
19640: PUSH
19641: LD_VAR 0 1
19645: PUSH
19646: LD_INT 2
19648: ARRAY
19649: STR
19650: PUSH
19651: LD_STRING ,
19653: STR
19654: PUSH
19655: LD_VAR 0 1
19659: PUSH
19660: LD_INT 3
19662: ARRAY
19663: STR
19664: PUSH
19665: LD_STRING ,
19667: STR
19668: PUSH
19669: LD_VAR 0 1
19673: PUSH
19674: LD_INT 4
19676: ARRAY
19677: STR
19678: PUSH
19679: LD_STRING ,
19681: STR
19682: PUSH
19683: LD_VAR 0 1
19687: PUSH
19688: LD_INT 5
19690: ARRAY
19691: STR
19692: PUSH
19693: LD_STRING ,
19695: STR
19696: PUSH
19697: LD_VAR 0 1
19701: PUSH
19702: LD_INT 6
19704: ARRAY
19705: STR
19706: PUSH
19707: LD_STRING ,
19709: STR
19710: PUSH
19711: LD_VAR 0 1
19715: PUSH
19716: LD_INT 7
19718: ARRAY
19719: STR
19720: PUSH
19721: LD_STRING ,
19723: STR
19724: PUSH
19725: LD_VAR 0 1
19729: PUSH
19730: LD_INT 8
19732: ARRAY
19733: STR
19734: PUSH
19735: LD_STRING },
19737: STR
19738: PUSH
19739: LD_VAR 0 2
19743: STR
19744: PUSH
19745: LD_STRING ,
19747: STR
19748: PUSH
19749: LD_VAR 0 3
19753: STR
19754: PUSH
19755: LD_STRING ,
19757: STR
19758: PUSH
19759: LD_VAR 0 4
19763: STR
19764: PUSH
19765: LD_STRING );
19767: STR
19768: PPUSH
19769: CALL_OW 559
// end ;
19773: LD_VAR 0 5
19777: RET
// export function LScore_Reset ( ) ; begin
19778: LD_INT 0
19780: PPUSH
// ToLua ( ResetScorebar(); ) ;
19781: LD_STRING ResetScorebar();
19783: PPUSH
19784: CALL_OW 559
// end ;
19788: LD_VAR 0 1
19792: RET
// export function LScore_Delete ( ID ) ; begin
19793: LD_INT 0
19795: PPUSH
// ToLua ( deleteScore( & ID & ); ) ;
19796: LD_STRING deleteScore(
19798: PUSH
19799: LD_VAR 0 1
19803: STR
19804: PUSH
19805: LD_STRING );
19807: STR
19808: PPUSH
19809: CALL_OW 559
// end ;
19813: LD_VAR 0 2
19817: RET
// export function LScore_Add_Timer ( ID , typ , totalTime ) ; begin
19818: LD_INT 0
19820: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & ,); ) ;
19821: LD_STRING AST(
19823: PUSH
19824: LD_VAR 0 1
19828: STR
19829: PUSH
19830: LD_STRING ,
19832: STR
19833: PUSH
19834: LD_VAR 0 2
19838: STR
19839: PUSH
19840: LD_STRING ,
19842: STR
19843: PUSH
19844: LD_VAR 0 3
19848: STR
19849: PUSH
19850: LD_STRING ,);
19852: STR
19853: PPUSH
19854: CALL_OW 559
// end ;
19858: LD_VAR 0 4
19862: RET
// export function LScore_Add_Timer2 ( ID , typ , totalTime , show_total ) ; begin
19863: LD_INT 0
19865: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
19866: LD_STRING AST(
19868: PUSH
19869: LD_VAR 0 1
19873: STR
19874: PUSH
19875: LD_STRING ,
19877: STR
19878: PUSH
19879: LD_VAR 0 2
19883: STR
19884: PUSH
19885: LD_STRING ,
19887: STR
19888: PUSH
19889: LD_VAR 0 3
19893: STR
19894: PUSH
19895: LD_STRING ,
19897: STR
19898: PUSH
19899: LD_VAR 0 4
19903: STR
19904: PUSH
19905: LD_STRING );
19907: STR
19908: PPUSH
19909: CALL_OW 559
// end ;
19913: LD_VAR 0 5
19917: RET
// export function LScore_Add_Timer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
19918: LD_INT 0
19920: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
19921: LD_STRING AST(
19923: PUSH
19924: LD_VAR 0 1
19928: STR
19929: PUSH
19930: LD_STRING ,
19932: STR
19933: PUSH
19934: LD_VAR 0 2
19938: STR
19939: PUSH
19940: LD_STRING ,
19942: STR
19943: PUSH
19944: LD_VAR 0 3
19948: STR
19949: PUSH
19950: LD_STRING ,
19952: STR
19953: PUSH
19954: LD_VAR 0 4
19958: STR
19959: PUSH
19960: LD_STRING ,
19962: STR
19963: PUSH
19964: LD_VAR 0 5
19968: STR
19969: PUSH
19970: LD_STRING );
19972: STR
19973: PPUSH
19974: CALL_OW 559
// end ;
19978: LD_VAR 0 6
19982: RET
// export function LScore_Add_ReverseTimer ( ID , typ , totalTime ) ; begin
19983: LD_INT 0
19985: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & ,); ) ;
19986: LD_STRING ASRT(
19988: PUSH
19989: LD_VAR 0 1
19993: STR
19994: PUSH
19995: LD_STRING ,
19997: STR
19998: PUSH
19999: LD_VAR 0 2
20003: STR
20004: PUSH
20005: LD_STRING ,
20007: STR
20008: PUSH
20009: LD_VAR 0 3
20013: STR
20014: PUSH
20015: LD_STRING ,);
20017: STR
20018: PPUSH
20019: CALL_OW 559
// end ;
20023: LD_VAR 0 4
20027: RET
// export function LScore_Add_ReverseTimer2 ( ID , typ , totalTime , show_total ) ; begin
20028: LD_INT 0
20030: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
20031: LD_STRING ASRT(
20033: PUSH
20034: LD_VAR 0 1
20038: STR
20039: PUSH
20040: LD_STRING ,
20042: STR
20043: PUSH
20044: LD_VAR 0 2
20048: STR
20049: PUSH
20050: LD_STRING ,
20052: STR
20053: PUSH
20054: LD_VAR 0 3
20058: STR
20059: PUSH
20060: LD_STRING ,
20062: STR
20063: PUSH
20064: LD_VAR 0 4
20068: STR
20069: PUSH
20070: LD_STRING );
20072: STR
20073: PPUSH
20074: CALL_OW 559
// end ;
20078: LD_VAR 0 5
20082: RET
// export function LScore_Add_ReverseTimer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
20083: LD_INT 0
20085: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
20086: LD_STRING ASRT(
20088: PUSH
20089: LD_VAR 0 1
20093: STR
20094: PUSH
20095: LD_STRING ,
20097: STR
20098: PUSH
20099: LD_VAR 0 2
20103: STR
20104: PUSH
20105: LD_STRING ,
20107: STR
20108: PUSH
20109: LD_VAR 0 3
20113: STR
20114: PUSH
20115: LD_STRING ,
20117: STR
20118: PUSH
20119: LD_VAR 0 4
20123: STR
20124: PUSH
20125: LD_STRING ,
20127: STR
20128: PUSH
20129: LD_VAR 0 5
20133: STR
20134: PUSH
20135: LD_STRING );
20137: STR
20138: PPUSH
20139: CALL_OW 559
// end ;
20143: LD_VAR 0 6
20147: RET
// export function LScore_update_Timer ( ID , currentTime ) ; begin
20148: LD_INT 0
20150: PPUSH
// ToLua ( UST( & id & , & currentTime & ); ) ;
20151: LD_STRING UST(
20153: PUSH
20154: LD_VAR 0 1
20158: STR
20159: PUSH
20160: LD_STRING ,
20162: STR
20163: PUSH
20164: LD_VAR 0 2
20168: STR
20169: PUSH
20170: LD_STRING );
20172: STR
20173: PPUSH
20174: CALL_OW 559
// end ;
20178: LD_VAR 0 3
20182: RET
// export function LScore_update_Timer2 ( ID , currentTime , totalTime ) ; begin
20183: LD_INT 0
20185: PPUSH
// ToLua ( UST( & id & , & currentTime & , & totalTime & ); ) ;
20186: LD_STRING UST(
20188: PUSH
20189: LD_VAR 0 1
20193: STR
20194: PUSH
20195: LD_STRING ,
20197: STR
20198: PUSH
20199: LD_VAR 0 2
20203: STR
20204: PUSH
20205: LD_STRING ,
20207: STR
20208: PUSH
20209: LD_VAR 0 3
20213: STR
20214: PUSH
20215: LD_STRING );
20217: STR
20218: PPUSH
20219: CALL_OW 559
// end ;
20223: LD_VAR 0 4
20227: RET
// export function LScore_Change_TimerColourRGB ( id , red , green , blue ) ; begin
20228: LD_INT 0
20230: PPUSH
// ToLua ( CCST( & id & ,{ & red & , & green & , & blue & }); ) ;
20231: LD_STRING CCST(
20233: PUSH
20234: LD_VAR 0 1
20238: STR
20239: PUSH
20240: LD_STRING ,{
20242: STR
20243: PUSH
20244: LD_VAR 0 2
20248: STR
20249: PUSH
20250: LD_STRING ,
20252: STR
20253: PUSH
20254: LD_VAR 0 3
20258: STR
20259: PUSH
20260: LD_STRING ,
20262: STR
20263: PUSH
20264: LD_VAR 0 4
20268: STR
20269: PUSH
20270: LD_STRING });
20272: STR
20273: PPUSH
20274: CALL_OW 559
// end ;
20278: LD_VAR 0 5
20282: RET
// export function LScore_Change_TimerColour ( id , side ) ; begin
20283: LD_INT 0
20285: PPUSH
// ToLua ( CCST( & id & , & side & ); ) ;
20286: LD_STRING CCST(
20288: PUSH
20289: LD_VAR 0 1
20293: STR
20294: PUSH
20295: LD_STRING ,
20297: STR
20298: PUSH
20299: LD_VAR 0 2
20303: STR
20304: PUSH
20305: LD_STRING );
20307: STR
20308: PPUSH
20309: CALL_OW 559
// end ;
20313: LD_VAR 0 3
20317: RET
// export function LScore_Add_SinglePoints ( ID , typ , totalPoints ) ; begin
20318: LD_INT 0
20320: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & ,); ) ;
20321: LD_STRING ASSP(
20323: PUSH
20324: LD_VAR 0 1
20328: STR
20329: PUSH
20330: LD_STRING ,
20332: STR
20333: PUSH
20334: LD_VAR 0 2
20338: STR
20339: PUSH
20340: LD_STRING ,
20342: STR
20343: PUSH
20344: LD_VAR 0 3
20348: STR
20349: PUSH
20350: LD_STRING ,);
20352: STR
20353: PPUSH
20354: CALL_OW 559
// end ;
20358: LD_VAR 0 4
20362: RET
// export function LScore_Add_SinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
20363: LD_INT 0
20365: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
20366: LD_STRING ASSP(
20368: PUSH
20369: LD_VAR 0 1
20373: STR
20374: PUSH
20375: LD_STRING ,
20377: STR
20378: PUSH
20379: LD_VAR 0 2
20383: STR
20384: PUSH
20385: LD_STRING ,
20387: STR
20388: PUSH
20389: LD_VAR 0 3
20393: STR
20394: PUSH
20395: LD_STRING ,
20397: STR
20398: PUSH
20399: LD_VAR 0 4
20403: STR
20404: PUSH
20405: LD_STRING );
20407: STR
20408: PPUSH
20409: CALL_OW 559
// end ;
20413: LD_VAR 0 5
20417: RET
// export function LScore_Add_SinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
20418: LD_INT 0
20420: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
20421: LD_STRING ASSP(
20423: PUSH
20424: LD_VAR 0 1
20428: STR
20429: PUSH
20430: LD_STRING ,
20432: STR
20433: PUSH
20434: LD_VAR 0 2
20438: STR
20439: PUSH
20440: LD_STRING ,
20442: STR
20443: PUSH
20444: LD_VAR 0 3
20448: STR
20449: PUSH
20450: LD_STRING ,
20452: STR
20453: PUSH
20454: LD_VAR 0 4
20458: STR
20459: PUSH
20460: LD_STRING ,
20462: STR
20463: PUSH
20464: LD_VAR 0 5
20468: STR
20469: PUSH
20470: LD_STRING );
20472: STR
20473: PPUSH
20474: CALL_OW 559
// end ;
20478: LD_VAR 0 6
20482: RET
// export function LScore_Add_ReverseSinglePoints ( ID , typ , totalPoints ) ; begin
20483: LD_INT 0
20485: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & ,); ) ;
20486: LD_STRING ASRSP(
20488: PUSH
20489: LD_VAR 0 1
20493: STR
20494: PUSH
20495: LD_STRING ,
20497: STR
20498: PUSH
20499: LD_VAR 0 2
20503: STR
20504: PUSH
20505: LD_STRING ,
20507: STR
20508: PUSH
20509: LD_VAR 0 3
20513: STR
20514: PUSH
20515: LD_STRING ,);
20517: STR
20518: PPUSH
20519: CALL_OW 559
// end ;
20523: LD_VAR 0 4
20527: RET
// export function LScore_Add_ReverseSinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
20528: LD_INT 0
20530: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
20531: LD_STRING ASRSP(
20533: PUSH
20534: LD_VAR 0 1
20538: STR
20539: PUSH
20540: LD_STRING ,
20542: STR
20543: PUSH
20544: LD_VAR 0 2
20548: STR
20549: PUSH
20550: LD_STRING ,
20552: STR
20553: PUSH
20554: LD_VAR 0 3
20558: STR
20559: PUSH
20560: LD_STRING ,
20562: STR
20563: PUSH
20564: LD_VAR 0 4
20568: STR
20569: PUSH
20570: LD_STRING );
20572: STR
20573: PPUSH
20574: CALL_OW 559
// end ;
20578: LD_VAR 0 5
20582: RET
// export function LScore_Add_ReverseSinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
20583: LD_INT 0
20585: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
20586: LD_STRING ASRSP(
20588: PUSH
20589: LD_VAR 0 1
20593: STR
20594: PUSH
20595: LD_STRING ,
20597: STR
20598: PUSH
20599: LD_VAR 0 2
20603: STR
20604: PUSH
20605: LD_STRING ,
20607: STR
20608: PUSH
20609: LD_VAR 0 3
20613: STR
20614: PUSH
20615: LD_STRING ,
20617: STR
20618: PUSH
20619: LD_VAR 0 4
20623: STR
20624: PUSH
20625: LD_STRING ,
20627: STR
20628: PUSH
20629: LD_VAR 0 5
20633: STR
20634: PUSH
20635: LD_STRING );
20637: STR
20638: PPUSH
20639: CALL_OW 559
// end ;
20643: LD_VAR 0 6
20647: RET
// export function LScore_update_SinglePoints ( ID , currentPoints ) ; begin
20648: LD_INT 0
20650: PPUSH
// ToLua ( USSP( & id & , & currentPoints & ); ) ;
20651: LD_STRING USSP(
20653: PUSH
20654: LD_VAR 0 1
20658: STR
20659: PUSH
20660: LD_STRING ,
20662: STR
20663: PUSH
20664: LD_VAR 0 2
20668: STR
20669: PUSH
20670: LD_STRING );
20672: STR
20673: PPUSH
20674: CALL_OW 559
// end ;
20678: LD_VAR 0 3
20682: RET
// export function LScore_update_SinglePoints2 ( ID , currentPoints , totalPoints ) ; begin
20683: LD_INT 0
20685: PPUSH
// ToLua ( USSP( & id & , & currentPoints & , & totalPoints & ); ) ;
20686: LD_STRING USSP(
20688: PUSH
20689: LD_VAR 0 1
20693: STR
20694: PUSH
20695: LD_STRING ,
20697: STR
20698: PUSH
20699: LD_VAR 0 2
20703: STR
20704: PUSH
20705: LD_STRING ,
20707: STR
20708: PUSH
20709: LD_VAR 0 3
20713: STR
20714: PUSH
20715: LD_STRING );
20717: STR
20718: PPUSH
20719: CALL_OW 559
// end ;
20723: LD_VAR 0 4
20727: RET
// export function LScore_Change_SinglePointsRGB ( id , red , green , blue ) ; begin
20728: LD_INT 0
20730: PPUSH
// ToLua ( CCSSP( & id & ,{ & red & , & green & , & blue & }); ) ;
20731: LD_STRING CCSSP(
20733: PUSH
20734: LD_VAR 0 1
20738: STR
20739: PUSH
20740: LD_STRING ,{
20742: STR
20743: PUSH
20744: LD_VAR 0 2
20748: STR
20749: PUSH
20750: LD_STRING ,
20752: STR
20753: PUSH
20754: LD_VAR 0 3
20758: STR
20759: PUSH
20760: LD_STRING ,
20762: STR
20763: PUSH
20764: LD_VAR 0 4
20768: STR
20769: PUSH
20770: LD_STRING });
20772: STR
20773: PPUSH
20774: CALL_OW 559
// end ;
20778: LD_VAR 0 5
20782: RET
// export function LScore_Change_SinglePoints ( id , side ) ; begin
20783: LD_INT 0
20785: PPUSH
// ToLua ( CCSSP( & id & , & side & ); ) ;
20786: LD_STRING CCSSP(
20788: PUSH
20789: LD_VAR 0 1
20793: STR
20794: PUSH
20795: LD_STRING ,
20797: STR
20798: PUSH
20799: LD_VAR 0 2
20803: STR
20804: PUSH
20805: LD_STRING );
20807: STR
20808: PPUSH
20809: CALL_OW 559
// end ;
20813: LD_VAR 0 3
20817: RET
// export function LScore_Add_Points ( ID , typ , goal ) ; begin
20818: LD_INT 0
20820: PPUSH
// ToLua ( ASP( & id & , & typ & , & goal & ); ) ;
20821: LD_STRING ASP(
20823: PUSH
20824: LD_VAR 0 1
20828: STR
20829: PUSH
20830: LD_STRING ,
20832: STR
20833: PUSH
20834: LD_VAR 0 2
20838: STR
20839: PUSH
20840: LD_STRING ,
20842: STR
20843: PUSH
20844: LD_VAR 0 3
20848: STR
20849: PUSH
20850: LD_STRING );
20852: STR
20853: PPUSH
20854: CALL_OW 559
// end ;
20858: LD_VAR 0 4
20862: RET
// export function LScore_Update_Points ( ID , side , points ) ; begin
20863: LD_INT 0
20865: PPUSH
// ToLua ( USP( & id & , & side & , & points & ); ) ;
20866: LD_STRING USP(
20868: PUSH
20869: LD_VAR 0 1
20873: STR
20874: PUSH
20875: LD_STRING ,
20877: STR
20878: PUSH
20879: LD_VAR 0 2
20883: STR
20884: PUSH
20885: LD_STRING ,
20887: STR
20888: PUSH
20889: LD_VAR 0 3
20893: STR
20894: PUSH
20895: LD_STRING );
20897: STR
20898: PPUSH
20899: CALL_OW 559
// end ;
20903: LD_VAR 0 4
20907: RET
// export function LScore_Update_PointsAll ( ID , score ) ; var i ; begin
20908: LD_INT 0
20910: PPUSH
20911: PPUSH
// for i = 1 to 8 do
20912: LD_ADDR_VAR 0 4
20916: PUSH
20917: DOUBLE
20918: LD_INT 1
20920: DEC
20921: ST_TO_ADDR
20922: LD_INT 8
20924: PUSH
20925: FOR_TO
20926: IFFALSE 20973
// ToLua ( USP( & ID & , & i & , & score [ i ] & ); ) ;
20928: LD_STRING USP(
20930: PUSH
20931: LD_VAR 0 1
20935: STR
20936: PUSH
20937: LD_STRING ,
20939: STR
20940: PUSH
20941: LD_VAR 0 4
20945: STR
20946: PUSH
20947: LD_STRING ,
20949: STR
20950: PUSH
20951: LD_VAR 0 2
20955: PUSH
20956: LD_VAR 0 4
20960: ARRAY
20961: STR
20962: PUSH
20963: LD_STRING );
20965: STR
20966: PPUSH
20967: CALL_OW 559
20971: GO 20925
20973: POP
20974: POP
// end ;
20975: LD_VAR 0 3
20979: RET
// export function LScore_Add_Pieces ( id , typ , goal , total ) ; begin
20980: LD_INT 0
20982: PPUSH
// ToLua ( ASC( & id & , & typ & , & goal & , & total & ); ) ;
20983: LD_STRING ASC(
20985: PUSH
20986: LD_VAR 0 1
20990: STR
20991: PUSH
20992: LD_STRING ,
20994: STR
20995: PUSH
20996: LD_VAR 0 2
21000: STR
21001: PUSH
21002: LD_STRING ,
21004: STR
21005: PUSH
21006: LD_VAR 0 3
21010: STR
21011: PUSH
21012: LD_STRING ,
21014: STR
21015: PUSH
21016: LD_VAR 0 4
21020: STR
21021: PUSH
21022: LD_STRING );
21024: STR
21025: PPUSH
21026: CALL_OW 559
// end ;
21030: LD_VAR 0 5
21034: RET
// export function LScore_Update_Peices ( id , sidesChunks ) ; begin
21035: LD_INT 0
21037: PPUSH
// ToLua ( USC( & id & ,{ & sidesChunks [ 1 ] & , & sidesChunks [ 2 ] & , & sidesChunks [ 3 ] & , & sidesChunks [ 4 ] & , & sidesChunks [ 5 ] & , & sidesChunks [ 6 ] & , & sidesChunks [ 7 ] & , & sidesChunks [ 8 ] & }); ) ;
21038: LD_STRING USC(
21040: PUSH
21041: LD_VAR 0 1
21045: STR
21046: PUSH
21047: LD_STRING ,{
21049: STR
21050: PUSH
21051: LD_VAR 0 2
21055: PUSH
21056: LD_INT 1
21058: ARRAY
21059: STR
21060: PUSH
21061: LD_STRING ,
21063: STR
21064: PUSH
21065: LD_VAR 0 2
21069: PUSH
21070: LD_INT 2
21072: ARRAY
21073: STR
21074: PUSH
21075: LD_STRING ,
21077: STR
21078: PUSH
21079: LD_VAR 0 2
21083: PUSH
21084: LD_INT 3
21086: ARRAY
21087: STR
21088: PUSH
21089: LD_STRING ,
21091: STR
21092: PUSH
21093: LD_VAR 0 2
21097: PUSH
21098: LD_INT 4
21100: ARRAY
21101: STR
21102: PUSH
21103: LD_STRING ,
21105: STR
21106: PUSH
21107: LD_VAR 0 2
21111: PUSH
21112: LD_INT 5
21114: ARRAY
21115: STR
21116: PUSH
21117: LD_STRING ,
21119: STR
21120: PUSH
21121: LD_VAR 0 2
21125: PUSH
21126: LD_INT 6
21128: ARRAY
21129: STR
21130: PUSH
21131: LD_STRING ,
21133: STR
21134: PUSH
21135: LD_VAR 0 2
21139: PUSH
21140: LD_INT 7
21142: ARRAY
21143: STR
21144: PUSH
21145: LD_STRING ,
21147: STR
21148: PUSH
21149: LD_VAR 0 2
21153: PUSH
21154: LD_INT 8
21156: ARRAY
21157: STR
21158: PUSH
21159: LD_STRING });
21161: STR
21162: PPUSH
21163: CALL_OW 559
// end ;
21167: LD_VAR 0 3
21171: RET
