// export narodnosti , barvy , your_position , enemy_position , stav , pocet_lidi , rozvitost_zakladny , resources , levely_unitu , technologie , shipments_density , opoce_nahore , opoce_dole , respawn_opoce , goals_to_win , time_of_game , new_people , Base_Positions ; export Side_Positions , Side_Nations , Game_Type ; export def_base_level , def_amount_of_people , def_skill_level , def_technologies , def_starting_resources , def_shipments_density , def_amount_apes , def_respawn_apes , def_goals , def_time , def_new_humen ; starting begin Base_Positions := [ [ 39 , 51 ] , [ 179 , 57 ] ] ;
   0: LD_ADDR_EXP 18
   4: PUSH
   5: LD_INT 39
   7: PUSH
   8: LD_INT 51
  10: PUSH
  11: EMPTY
  12: LIST
  13: LIST
  14: PUSH
  15: LD_INT 179
  17: PUSH
  18: LD_INT 57
  20: PUSH
  21: EMPTY
  22: LIST
  23: LIST
  24: PUSH
  25: EMPTY
  26: LIST
  27: LIST
  28: ST_TO_ADDR
// stav := [ 0 , 0 ] ;
  29: LD_ADDR_EXP 5
  33: PUSH
  34: LD_INT 0
  36: PUSH
  37: LD_INT 0
  39: PUSH
  40: EMPTY
  41: LIST
  42: LIST
  43: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
  44: CALL 267 0 0
// place_buildings ;
  48: CALL 2567 0 0
// set_resource_na_zacatku ;
  52: CALL 5207 0 0
// placni_lidi ;
  56: CALL 3147 0 0
// placni_opoce_na_mapu ;
  60: CALL 7492 0 0
// zpristupni_technologie ;
  64: CALL 1198 0 0
// SetAreaMapShow ( branka1 , 1 ) ;
  68: LD_INT 1
  70: PPUSH
  71: LD_INT 1
  73: PPUSH
  74: CALL_OW 424
// SetAreaMapShow ( branka2 , 1 ) ;
  78: LD_INT 2
  80: PPUSH
  81: LD_INT 1
  83: PPUSH
  84: CALL_OW 424
// RevealFogArea ( barvy [ 1 ] , base1 ) ;
  88: LD_EXP 2
  92: PUSH
  93: LD_INT 1
  95: ARRAY
  96: PPUSH
  97: LD_INT 7
  99: PPUSH
 100: CALL_OW 332
// RevealFogArea ( barvy [ 2 ] , base2 ) ;
 104: LD_EXP 2
 108: PUSH
 109: LD_INT 2
 111: ARRAY
 112: PPUSH
 113: LD_INT 6
 115: PPUSH
 116: CALL_OW 332
// TeleportExit ( tel1 , 61 , 38 ) ;
 120: LD_INT 1
 122: PPUSH
 123: LD_INT 61
 125: PPUSH
 126: LD_INT 38
 128: PPUSH
 129: CALL_OW 243
// TeleportExit ( tel2 , 169 , 93 ) ;
 133: LD_INT 2
 135: PPUSH
 136: LD_INT 169
 138: PPUSH
 139: LD_INT 93
 141: PPUSH
 142: CALL_OW 243
// SetSide ( tel1 , barvy [ 1 ] ) ;
 146: LD_INT 1
 148: PPUSH
 149: LD_EXP 2
 153: PUSH
 154: LD_INT 1
 156: ARRAY
 157: PPUSH
 158: CALL_OW 235
// SetSide ( tel2 , barvy [ 2 ] ) ;
 162: LD_INT 2
 164: PPUSH
 165: LD_EXP 2
 169: PUSH
 170: LD_INT 2
 172: ARRAY
 173: PPUSH
 174: CALL_OW 235
// CenterNowOnXY ( Base_Positions [ your_position ] [ 1 ] , Base_Positions [ your_position ] [ 2 ] ) ;
 178: LD_EXP 18
 182: PUSH
 183: LD_EXP 3
 187: ARRAY
 188: PUSH
 189: LD_INT 1
 191: ARRAY
 192: PPUSH
 193: LD_EXP 18
 197: PUSH
 198: LD_EXP 3
 202: ARRAY
 203: PUSH
 204: LD_INT 2
 206: ARRAY
 207: PPUSH
 208: CALL_OW 86
// case Game_Type of 1 :
 212: LD_EXP 21
 216: PUSH
 217: LD_INT 1
 219: DOUBLE
 220: EQUAL
 221: IFTRUE 225
 223: GO 238
 225: POP
// Display_Strings := CurrentScore ; 2 :
 226: LD_ADDR_OWVAR 47
 230: PUSH
 231: CALL 5996 0 0
 235: ST_TO_ADDR
 236: GO 266
 238: LD_INT 2
 240: DOUBLE
 241: EQUAL
 242: IFTRUE 246
 244: GO 265
 246: POP
// Display_Strings := TimeLeft ^ CurrentScore ; end ;
 247: LD_ADDR_OWVAR 47
 251: PUSH
 252: CALL 6062 0 0
 256: PUSH
 257: CALL 5996 0 0
 261: ADD
 262: ST_TO_ADDR
 263: GO 266
 265: POP
// end ;
 266: END
// function read_multiplayer_and_game_parameters ; var i ; begin
 267: LD_INT 0
 269: PPUSH
 270: PPUSH
// if MultiPlayer then
 271: LD_OWVAR 4
 275: IFFALSE 326
// begin Your_Side := mp_player_side ;
 277: LD_ADDR_OWVAR 2
 281: PUSH
 282: LD_OWVAR 7
 286: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
 287: LD_ADDR_EXP 19
 291: PUSH
 292: LD_OWVAR 17
 296: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 297: LD_ADDR_EXP 20
 301: PUSH
 302: LD_OWVAR 16
 306: ST_TO_ADDR
// Game_Type := GetMultiplayerSetting ( 17 ) + 1 ;
 307: LD_ADDR_EXP 21
 311: PUSH
 312: LD_INT 17
 314: PPUSH
 315: CALL_OW 426
 319: PUSH
 320: LD_INT 1
 322: PLUS
 323: ST_TO_ADDR
// end else
 324: GO 420
// begin Your_Side := 3 ;
 326: LD_ADDR_OWVAR 2
 330: PUSH
 331: LD_INT 3
 333: ST_TO_ADDR
// Side_Positions := [ 0 , 0 , 1 , 0 , 0 , 2 , 0 , 0 ] ;
 334: LD_ADDR_EXP 19
 338: PUSH
 339: LD_INT 0
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: LD_INT 1
 347: PUSH
 348: LD_INT 0
 350: PUSH
 351: LD_INT 0
 353: PUSH
 354: LD_INT 2
 356: PUSH
 357: LD_INT 0
 359: PUSH
 360: LD_INT 0
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: LIST
 371: LIST
 372: ST_TO_ADDR
// Side_Nations := [ 0 , 0 , 3 , 0 , 0 , 3 , 0 , 0 ] ;
 373: LD_ADDR_EXP 20
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: LD_INT 3
 386: PUSH
 387: LD_INT 0
 389: PUSH
 390: LD_INT 0
 392: PUSH
 393: LD_INT 3
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: ST_TO_ADDR
// Game_Type := 2 ;
 412: LD_ADDR_EXP 21
 416: PUSH
 417: LD_INT 2
 419: ST_TO_ADDR
// end ; for i := 1 to 8 do
 420: LD_ADDR_VAR 0 2
 424: PUSH
 425: DOUBLE
 426: LD_INT 1
 428: DEC
 429: ST_TO_ADDR
 430: LD_INT 8
 432: PUSH
 433: FOR_TO
 434: IFFALSE 564
// if Side_Positions [ i ] then
 436: LD_EXP 19
 440: PUSH
 441: LD_VAR 0 2
 445: ARRAY
 446: IFFALSE 562
// begin barvy := Replace ( barvy , Side_Positions [ i ] , i ) ;
 448: LD_ADDR_EXP 2
 452: PUSH
 453: LD_EXP 2
 457: PPUSH
 458: LD_EXP 19
 462: PUSH
 463: LD_VAR 0 2
 467: ARRAY
 468: PPUSH
 469: LD_VAR 0 2
 473: PPUSH
 474: CALL_OW 1
 478: ST_TO_ADDR
// narodnosti := Replace ( narodnosti , Side_Positions [ i ] , Side_Nations [ i ] ) ;
 479: LD_ADDR_EXP 1
 483: PUSH
 484: LD_EXP 1
 488: PPUSH
 489: LD_EXP 19
 493: PUSH
 494: LD_VAR 0 2
 498: ARRAY
 499: PPUSH
 500: LD_EXP 20
 504: PUSH
 505: LD_VAR 0 2
 509: ARRAY
 510: PPUSH
 511: CALL_OW 1
 515: ST_TO_ADDR
// if ( i = your_side ) then
 516: LD_VAR 0 2
 520: PUSH
 521: LD_OWVAR 2
 525: EQUAL
 526: IFFALSE 546
// your_position := Side_Positions [ i ] else
 528: LD_ADDR_EXP 3
 532: PUSH
 533: LD_EXP 19
 537: PUSH
 538: LD_VAR 0 2
 542: ARRAY
 543: ST_TO_ADDR
 544: GO 562
// enemy_position := Side_Positions [ i ] ;
 546: LD_ADDR_EXP 4
 550: PUSH
 551: LD_EXP 19
 555: PUSH
 556: LD_VAR 0 2
 560: ARRAY
 561: ST_TO_ADDR
// end ;
 562: GO 433
 564: POP
 565: POP
// if MultiPlayer then
 566: LD_OWVAR 4
 570: IFFALSE 717
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 572: LD_ADDR_EXP 22
 576: PUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 426
 584: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 585: LD_ADDR_EXP 23
 589: PUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 426
 597: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
 598: LD_ADDR_EXP 24
 602: PUSH
 603: LD_INT 2
 605: PPUSH
 606: CALL_OW 426
 610: ST_TO_ADDR
// def_technologies = GetMultiplayerSetting ( 21 ) ;
 611: LD_ADDR_EXP 25
 615: PUSH
 616: LD_INT 21
 618: PPUSH
 619: CALL_OW 426
 623: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 624: LD_ADDR_EXP 26
 628: PUSH
 629: LD_INT 3
 631: PPUSH
 632: CALL_OW 426
 636: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 637: LD_ADDR_EXP 27
 641: PUSH
 642: LD_INT 4
 644: PPUSH
 645: CALL_OW 426
 649: ST_TO_ADDR
// def_amount_apes = GetMultiplayerSetting ( 14 ) ;
 650: LD_ADDR_EXP 28
 654: PUSH
 655: LD_INT 14
 657: PPUSH
 658: CALL_OW 426
 662: ST_TO_ADDR
// def_respawn_apes = GetMultiplayerSetting ( 15 ) ;
 663: LD_ADDR_EXP 29
 667: PUSH
 668: LD_INT 15
 670: PPUSH
 671: CALL_OW 426
 675: ST_TO_ADDR
// def_new_humen = GetMultiplayerSetting ( 16 ) ;
 676: LD_ADDR_EXP 32
 680: PUSH
 681: LD_INT 16
 683: PPUSH
 684: CALL_OW 426
 688: ST_TO_ADDR
// def_goals = GetMultiplayerSetting ( 18 ) ;
 689: LD_ADDR_EXP 30
 693: PUSH
 694: LD_INT 18
 696: PPUSH
 697: CALL_OW 426
 701: ST_TO_ADDR
// def_time = GetMultiplayerSetting ( 19 ) ;
 702: LD_ADDR_EXP 31
 706: PUSH
 707: LD_INT 19
 709: PPUSH
 710: CALL_OW 426
 714: ST_TO_ADDR
// end else
 715: GO 809
// begin RandomizeAll ;
 717: CALL_OW 11
// def_base_level = 3 ;
 721: LD_ADDR_EXP 22
 725: PUSH
 726: LD_INT 3
 728: ST_TO_ADDR
// def_amount_of_people = 2 ;
 729: LD_ADDR_EXP 23
 733: PUSH
 734: LD_INT 2
 736: ST_TO_ADDR
// def_skill_level = 1 ;
 737: LD_ADDR_EXP 24
 741: PUSH
 742: LD_INT 1
 744: ST_TO_ADDR
// def_technologies = 3 ;
 745: LD_ADDR_EXP 25
 749: PUSH
 750: LD_INT 3
 752: ST_TO_ADDR
// def_starting_resources = 1 ;
 753: LD_ADDR_EXP 26
 757: PUSH
 758: LD_INT 1
 760: ST_TO_ADDR
// def_shipments_density = 1 ;
 761: LD_ADDR_EXP 27
 765: PUSH
 766: LD_INT 1
 768: ST_TO_ADDR
// def_amount_apes = 2 ;
 769: LD_ADDR_EXP 28
 773: PUSH
 774: LD_INT 2
 776: ST_TO_ADDR
// def_respawn_apes = 0 ;
 777: LD_ADDR_EXP 29
 781: PUSH
 782: LD_INT 0
 784: ST_TO_ADDR
// def_new_humen = 1 ;
 785: LD_ADDR_EXP 32
 789: PUSH
 790: LD_INT 1
 792: ST_TO_ADDR
// def_goals = 4 ;
 793: LD_ADDR_EXP 30
 797: PUSH
 798: LD_INT 4
 800: ST_TO_ADDR
// def_time = 0 ;
 801: LD_ADDR_EXP 31
 805: PUSH
 806: LD_INT 0
 808: ST_TO_ADDR
// end ; rozvitost_zakladny := def_base_level ;
 809: LD_ADDR_EXP 7
 813: PUSH
 814: LD_EXP 22
 818: ST_TO_ADDR
// pocet_lidi := [ 6 , 8 , 11 , 13 , 16 ] [ def_amount_of_people + 1 ] ;
 819: LD_ADDR_EXP 6
 823: PUSH
 824: LD_INT 6
 826: PUSH
 827: LD_INT 8
 829: PUSH
 830: LD_INT 11
 832: PUSH
 833: LD_INT 13
 835: PUSH
 836: LD_INT 16
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: LIST
 843: LIST
 844: LIST
 845: PUSH
 846: LD_EXP 23
 850: PUSH
 851: LD_INT 1
 853: PLUS
 854: ARRAY
 855: ST_TO_ADDR
// levely_unitu := [ 1 , 3 , 5 , 7 ] [ def_skill_level + 1 ] ;
 856: LD_ADDR_EXP 9
 860: PUSH
 861: LD_INT 1
 863: PUSH
 864: LD_INT 3
 866: PUSH
 867: LD_INT 5
 869: PUSH
 870: LD_INT 7
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: LIST
 877: LIST
 878: PUSH
 879: LD_EXP 24
 883: PUSH
 884: LD_INT 1
 886: PLUS
 887: ARRAY
 888: ST_TO_ADDR
// technologie := def_technologies ;
 889: LD_ADDR_EXP 10
 893: PUSH
 894: LD_EXP 25
 898: ST_TO_ADDR
// resources := [ [ 0 , 0 , 0 ] , [ 100 , 20 , 5 ] , [ 250 , 70 , 50 ] , [ 500 , 250 , 100 ] ] [ def_starting_resources + 1 ] ;
 899: LD_ADDR_EXP 8
 903: PUSH
 904: LD_INT 0
 906: PUSH
 907: LD_INT 0
 909: PUSH
 910: LD_INT 0
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: PUSH
 918: LD_INT 100
 920: PUSH
 921: LD_INT 20
 923: PUSH
 924: LD_INT 5
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 250
 934: PUSH
 935: LD_INT 70
 937: PUSH
 938: LD_INT 50
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: LIST
 945: PUSH
 946: LD_INT 500
 948: PUSH
 949: LD_INT 250
 951: PUSH
 952: LD_INT 100
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: LIST
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_EXP 26
 970: PUSH
 971: LD_INT 1
 973: PLUS
 974: ARRAY
 975: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 ] [ def_shipments_density + 1 ] ;
 976: LD_ADDR_EXP 11
 980: PUSH
 981: LD_INT 150
 983: PUSH
 984: LD_INT 125
 986: PUSH
 987: LD_INT 100
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: PUSH
 995: LD_EXP 27
 999: PUSH
1000: LD_INT 1
1002: PLUS
1003: ARRAY
1004: ST_TO_ADDR
// opoce_nahore := [ 0 , 1 , 2 , 3 , 4 ] [ def_amount_apes + 1 ] ;
1005: LD_ADDR_EXP 12
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: LD_INT 1
1015: PUSH
1016: LD_INT 2
1018: PUSH
1019: LD_INT 3
1021: PUSH
1022: LD_INT 4
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: LD_EXP 28
1036: PUSH
1037: LD_INT 1
1039: PLUS
1040: ARRAY
1041: ST_TO_ADDR
// opoce_dole := [ 0 , 5 , 10 , 15 , 25 ] [ def_amount_apes + 1 ] ;
1042: LD_ADDR_EXP 13
1046: PUSH
1047: LD_INT 0
1049: PUSH
1050: LD_INT 5
1052: PUSH
1053: LD_INT 10
1055: PUSH
1056: LD_INT 15
1058: PUSH
1059: LD_INT 25
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: PUSH
1069: LD_EXP 28
1073: PUSH
1074: LD_INT 1
1076: PLUS
1077: ARRAY
1078: ST_TO_ADDR
// respawn_opoce := def_respawn_apes ;
1079: LD_ADDR_EXP 14
1083: PUSH
1084: LD_EXP 29
1088: ST_TO_ADDR
// new_people := def_new_humen ;
1089: LD_ADDR_EXP 17
1093: PUSH
1094: LD_EXP 32
1098: ST_TO_ADDR
// goals_to_win := [ 1 , 2 , 3 , 4 , 5 , 10 , 15 , 20 ] [ def_goals + 1 ] ;
1099: LD_ADDR_EXP 15
1103: PUSH
1104: LD_INT 1
1106: PUSH
1107: LD_INT 2
1109: PUSH
1110: LD_INT 3
1112: PUSH
1113: LD_INT 4
1115: PUSH
1116: LD_INT 5
1118: PUSH
1119: LD_INT 10
1121: PUSH
1122: LD_INT 15
1124: PUSH
1125: LD_INT 20
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: LIST
1137: PUSH
1138: LD_EXP 30
1142: PUSH
1143: LD_INT 1
1145: PLUS
1146: ARRAY
1147: ST_TO_ADDR
// time_of_game := [ 5 5$0 , 10 10$0 , 20 20$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 ] [ def_time + 1 ] ;
1148: LD_ADDR_EXP 16
1152: PUSH
1153: LD_INT 10500
1155: PUSH
1156: LD_INT 21000
1158: PUSH
1159: LD_INT 42000
1161: PUSH
1162: LD_INT 63000
1164: PUSH
1165: LD_INT 94500
1167: PUSH
1168: LD_INT 126000
1170: PUSH
1171: LD_INT 189000
1173: PUSH
1174: EMPTY
1175: LIST
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: LIST
1182: PUSH
1183: LD_EXP 31
1187: PUSH
1188: LD_INT 1
1190: PLUS
1191: ARRAY
1192: ST_TO_ADDR
// end ;
1193: LD_VAR 0 1
1197: RET
// function zpristupni_technologie ; var tech1 ; var tech2 ; var i ; begin
1198: LD_INT 0
1200: PPUSH
1201: PPUSH
1202: PPUSH
1203: PPUSH
// case technologie of 1 :
1204: LD_EXP 10
1208: PUSH
1209: LD_INT 1
1211: DOUBLE
1212: EQUAL
1213: IFTRUE 1217
1215: GO 1344
1217: POP
// begin tech1 = [ tech_SibDet , tech_Gatling , tech_OilPow , tech_OilEng , tech_ApeLang ] ;
1218: LD_ADDR_VAR 0 2
1222: PUSH
1223: LD_INT 20
1225: PUSH
1226: LD_INT 69
1228: PUSH
1229: LD_INT 46
1231: PUSH
1232: LD_INT 47
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: ST_TO_ADDR
// tech2 = [ tech_SibDet , tech_Gatling , tech_OilPow , tech_OilEng , tech_ApeLang ] ;
1245: LD_ADDR_VAR 0 3
1249: PUSH
1250: LD_INT 20
1252: PUSH
1253: LD_INT 69
1255: PUSH
1256: LD_INT 46
1258: PUSH
1259: LD_INT 47
1261: PUSH
1262: LD_INT 1
1264: PUSH
1265: EMPTY
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: ST_TO_ADDR
// if narodnosti [ 1 ] <> nation_russian then
1272: LD_EXP 1
1276: PUSH
1277: LD_INT 1
1279: ARRAY
1280: PUSH
1281: LD_INT 3
1283: NONEQUAL
1284: IFFALSE 1307
// tech1 = tech1 ^ [ tech_SolPow , tech_SolEng ] ;
1286: LD_ADDR_VAR 0 2
1290: PUSH
1291: LD_VAR 0 2
1295: PUSH
1296: LD_INT 35
1298: PUSH
1299: LD_INT 45
1301: PUSH
1302: EMPTY
1303: LIST
1304: LIST
1305: ADD
1306: ST_TO_ADDR
// if narodnosti [ 2 ] <> nation_russian then
1307: LD_EXP 1
1311: PUSH
1312: LD_INT 2
1314: ARRAY
1315: PUSH
1316: LD_INT 3
1318: NONEQUAL
1319: IFFALSE 1342
// tech2 = tech2 ^ [ tech_SolPow , tech_SolEng ] ;
1321: LD_ADDR_VAR 0 3
1325: PUSH
1326: LD_VAR 0 3
1330: PUSH
1331: LD_INT 35
1333: PUSH
1334: LD_INT 45
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: ADD
1341: ST_TO_ADDR
// end ; 2 :
1342: GO 2459
1344: LD_INT 2
1346: DOUBLE
1347: EQUAL
1348: IFTRUE 1352
1350: GO 1797
1352: POP
// begin tech1 = [ tech_SibDet , tech_Gatling , tech_OilPow , tech_OilEng , tech_ApeLang , tech_Gun , tech_SibPow , tech_SibEng , tech_Tech1 , tech_Weap1 ] ;
1353: LD_ADDR_VAR 0 2
1357: PUSH
1358: LD_INT 20
1360: PUSH
1361: LD_INT 69
1363: PUSH
1364: LD_INT 46
1366: PUSH
1367: LD_INT 47
1369: PUSH
1370: LD_INT 1
1372: PUSH
1373: LD_INT 39
1375: PUSH
1376: LD_INT 21
1378: PUSH
1379: LD_INT 22
1381: PUSH
1382: LD_INT 48
1384: PUSH
1385: LD_INT 51
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: ST_TO_ADDR
// tech2 = [ tech_SibDet , tech_Gatling , tech_OilPow , tech_OilEng , tech_ApeLang , tech_Gun , tech_SibPow , tech_SibEng , tech_Tech1 , tech_Weap1 ] ;
1400: LD_ADDR_VAR 0 3
1404: PUSH
1405: LD_INT 20
1407: PUSH
1408: LD_INT 69
1410: PUSH
1411: LD_INT 46
1413: PUSH
1414: LD_INT 47
1416: PUSH
1417: LD_INT 1
1419: PUSH
1420: LD_INT 39
1422: PUSH
1423: LD_INT 21
1425: PUSH
1426: LD_INT 22
1428: PUSH
1429: LD_INT 48
1431: PUSH
1432: LD_INT 51
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: ST_TO_ADDR
// case narodnosti [ 1 ] of nation_american :
1447: LD_EXP 1
1451: PUSH
1452: LD_INT 1
1454: ARRAY
1455: PUSH
1456: LD_INT 1
1458: DOUBLE
1459: EQUAL
1460: IFTRUE 1464
1462: GO 1508
1464: POP
// tech1 = tech1 ^ [ tech_SolPow , tech_SolEng , tech_ApePsych , tech_Radar , tech_RemCont , tech_MatDet , tech_AI ] ; nation_arabian :
1465: LD_ADDR_VAR 0 2
1469: PUSH
1470: LD_VAR 0 2
1474: PUSH
1475: LD_INT 35
1477: PUSH
1478: LD_INT 45
1480: PUSH
1481: LD_INT 2
1483: PUSH
1484: LD_INT 6
1486: PUSH
1487: LD_INT 15
1489: PUSH
1490: LD_INT 7
1492: PUSH
1493: LD_INT 32
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: ADD
1505: ST_TO_ADDR
1506: GO 1621
1508: LD_INT 2
1510: DOUBLE
1511: EQUAL
1512: IFTRUE 1516
1514: GO 1564
1516: POP
// tech1 = tech1 ^ [ tech_SolPow , tech_SolEng , tech_ApeAgres , tech_ApeNeural , tech_Radar , tech_RemCont , tech_MatDet , tech_Mortar ] ; nation_russian :
1517: LD_ADDR_VAR 0 2
1521: PUSH
1522: LD_VAR 0 2
1526: PUSH
1527: LD_INT 35
1529: PUSH
1530: LD_INT 45
1532: PUSH
1533: LD_INT 11
1535: PUSH
1536: LD_INT 3
1538: PUSH
1539: LD_INT 6
1541: PUSH
1542: LD_INT 15
1544: PUSH
1545: LD_INT 7
1547: PUSH
1548: LD_INT 41
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: LIST
1559: LIST
1560: ADD
1561: ST_TO_ADDR
1562: GO 1621
1564: LD_INT 3
1566: DOUBLE
1567: EQUAL
1568: IFTRUE 1572
1570: GO 1620
1572: POP
// tech1 = tech1 ^ [ tech_ApePsych , tech_ApeAgres , tech_MatPred , tech_SibLoc , tech_TauRad , tech_LimTeleport , tech_AI , tech_Bazooka ] ; end ;
1573: LD_ADDR_VAR 0 2
1577: PUSH
1578: LD_VAR 0 2
1582: PUSH
1583: LD_INT 2
1585: PUSH
1586: LD_INT 11
1588: PUSH
1589: LD_INT 9
1591: PUSH
1592: LD_INT 19
1594: PUSH
1595: LD_INT 28
1597: PUSH
1598: LD_INT 37
1600: PUSH
1601: LD_INT 32
1603: PUSH
1604: LD_INT 44
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: LIST
1616: ADD
1617: ST_TO_ADDR
1618: GO 1621
1620: POP
// case narodnosti [ 2 ] of nation_american :
1621: LD_EXP 1
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PUSH
1630: LD_INT 1
1632: DOUBLE
1633: EQUAL
1634: IFTRUE 1638
1636: GO 1682
1638: POP
// tech2 = tech2 ^ [ tech_SolPow , tech_SolEng , tech_ApePsych , tech_Radar , tech_RemCont , tech_MatDet , tech_AI ] ; nation_arabian :
1639: LD_ADDR_VAR 0 3
1643: PUSH
1644: LD_VAR 0 3
1648: PUSH
1649: LD_INT 35
1651: PUSH
1652: LD_INT 45
1654: PUSH
1655: LD_INT 2
1657: PUSH
1658: LD_INT 6
1660: PUSH
1661: LD_INT 15
1663: PUSH
1664: LD_INT 7
1666: PUSH
1667: LD_INT 32
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: ADD
1679: ST_TO_ADDR
1680: GO 1795
1682: LD_INT 2
1684: DOUBLE
1685: EQUAL
1686: IFTRUE 1690
1688: GO 1738
1690: POP
// tech2 = tech2 ^ [ tech_SolPow , tech_SolEng , tech_ApeAgres , tech_ApeNeural , tech_Radar , tech_RemCont , tech_MatDet , tech_Mortar ] ; nation_russian :
1691: LD_ADDR_VAR 0 3
1695: PUSH
1696: LD_VAR 0 3
1700: PUSH
1701: LD_INT 35
1703: PUSH
1704: LD_INT 45
1706: PUSH
1707: LD_INT 11
1709: PUSH
1710: LD_INT 3
1712: PUSH
1713: LD_INT 6
1715: PUSH
1716: LD_INT 15
1718: PUSH
1719: LD_INT 7
1721: PUSH
1722: LD_INT 41
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: ADD
1735: ST_TO_ADDR
1736: GO 1795
1738: LD_INT 3
1740: DOUBLE
1741: EQUAL
1742: IFTRUE 1746
1744: GO 1794
1746: POP
// tech2 = tech2 ^ [ tech_ApePsych , tech_ApeAgres , tech_MatPred , tech_SibLoc , tech_TauRad , tech_LimTeleport , tech_AI , tech_Bazooka ] ; end ;
1747: LD_ADDR_VAR 0 3
1751: PUSH
1752: LD_VAR 0 3
1756: PUSH
1757: LD_INT 2
1759: PUSH
1760: LD_INT 11
1762: PUSH
1763: LD_INT 9
1765: PUSH
1766: LD_INT 19
1768: PUSH
1769: LD_INT 28
1771: PUSH
1772: LD_INT 37
1774: PUSH
1775: LD_INT 32
1777: PUSH
1778: LD_INT 44
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: ADD
1791: ST_TO_ADDR
1792: GO 1795
1794: POP
// end ; 3 :
1795: GO 2459
1797: LD_INT 3
1799: DOUBLE
1800: EQUAL
1801: IFTRUE 1805
1803: GO 2458
1805: POP
// begin tech1 = [ tech_SibDet , tech_Gatling , tech_OilPow , tech_OilEng , tech_ApeLang , tech_Gun , tech_SibPow , tech_SibEng , tech_Tech1 , tech_Weap1 , tech_SibPow , tech_SibEng , tech_Rocket ] ;
1806: LD_ADDR_VAR 0 2
1810: PUSH
1811: LD_INT 20
1813: PUSH
1814: LD_INT 69
1816: PUSH
1817: LD_INT 46
1819: PUSH
1820: LD_INT 47
1822: PUSH
1823: LD_INT 1
1825: PUSH
1826: LD_INT 39
1828: PUSH
1829: LD_INT 21
1831: PUSH
1832: LD_INT 22
1834: PUSH
1835: LD_INT 48
1837: PUSH
1838: LD_INT 51
1840: PUSH
1841: LD_INT 21
1843: PUSH
1844: LD_INT 22
1846: PUSH
1847: LD_INT 40
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: ST_TO_ADDR
// tech2 = [ tech_SibDet , tech_Gatling , tech_OilPow , tech_OilEng , tech_ApeLang , tech_Gun , tech_SibPow , tech_SibEng , tech_Tech1 , tech_Weap1 , tech_SibPow , tech_SibEng , tech_Rocket ] ;
1865: LD_ADDR_VAR 0 3
1869: PUSH
1870: LD_INT 20
1872: PUSH
1873: LD_INT 69
1875: PUSH
1876: LD_INT 46
1878: PUSH
1879: LD_INT 47
1881: PUSH
1882: LD_INT 1
1884: PUSH
1885: LD_INT 39
1887: PUSH
1888: LD_INT 21
1890: PUSH
1891: LD_INT 22
1893: PUSH
1894: LD_INT 48
1896: PUSH
1897: LD_INT 51
1899: PUSH
1900: LD_INT 21
1902: PUSH
1903: LD_INT 22
1905: PUSH
1906: LD_INT 40
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: ST_TO_ADDR
// case narodnosti [ 1 ] of nation_american :
1924: LD_EXP 1
1928: PUSH
1929: LD_INT 1
1931: ARRAY
1932: PUSH
1933: LD_INT 1
1935: DOUBLE
1936: EQUAL
1937: IFTRUE 1941
1939: GO 2017
1941: POP
// tech1 = tech1 ^ [ tech_SolPow , tech_SolEng , tech_ApePsych , tech_Radar , tech_RemCont , tech_MatDet , tech_AI , tech_LasSight , tech_PartInvis , tech_Soporific , tech_Laser , tech_AdvAI , tech_AdvMet , tech_Opto1 , tech_Comp1 ] ; nation_arabian :
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: LD_VAR 0 2
1951: PUSH
1952: LD_INT 35
1954: PUSH
1955: LD_INT 45
1957: PUSH
1958: LD_INT 2
1960: PUSH
1961: LD_INT 6
1963: PUSH
1964: LD_INT 15
1966: PUSH
1967: LD_INT 7
1969: PUSH
1970: LD_INT 32
1972: PUSH
1973: LD_INT 12
1975: PUSH
1976: LD_INT 16
1978: PUSH
1979: LD_INT 13
1981: PUSH
1982: LD_INT 10
1984: PUSH
1985: LD_INT 27
1987: PUSH
1988: LD_INT 34
1990: PUSH
1991: LD_INT 60
1993: PUSH
1994: LD_INT 57
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: ADD
2014: ST_TO_ADDR
2015: GO 2190
2017: LD_INT 2
2019: DOUBLE
2020: EQUAL
2021: IFTRUE 2025
2023: GO 2105
2025: POP
// tech1 = tech1 ^ [ tech_SolPow , tech_SolEng , tech_ApeAgres , tech_ApeNeural , tech_Radar , tech_RemCont , tech_MatDet , tech_Mortar , tech_ApeBrain , tech_Flame , tech_RemCharge , tech_HidCam , tech_BioDet , tech_Explos , tech_Bio1 , tech_Opto1 ] ; nation_russian :
2026: LD_ADDR_VAR 0 2
2030: PUSH
2031: LD_VAR 0 2
2035: PUSH
2036: LD_INT 35
2038: PUSH
2039: LD_INT 45
2041: PUSH
2042: LD_INT 11
2044: PUSH
2045: LD_INT 3
2047: PUSH
2048: LD_INT 6
2050: PUSH
2051: LD_INT 15
2053: PUSH
2054: LD_INT 7
2056: PUSH
2057: LD_INT 41
2059: PUSH
2060: LD_INT 4
2062: PUSH
2063: LD_INT 70
2065: PUSH
2066: LD_INT 18
2068: PUSH
2069: LD_INT 17
2071: PUSH
2072: LD_INT 8
2074: PUSH
2075: LD_INT 42
2077: PUSH
2078: LD_INT 66
2080: PUSH
2081: LD_INT 60
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: ADD
2102: ST_TO_ADDR
2103: GO 2190
2105: LD_INT 3
2107: DOUBLE
2108: EQUAL
2109: IFTRUE 2113
2111: GO 2189
2113: POP
// tech1 = tech1 ^ [ tech_ApePsych , tech_ApeAgres , tech_MatPred , tech_SibLoc , tech_TauRad , tech_LimTeleport , tech_AI , tech_Bazooka , tech_TauRad , tech_SpacAnom , tech_TauField , tech_AdvAI , tech_AdvMet , tech_Comp1 , tech_ST1 ] ; end ;
2114: LD_ADDR_VAR 0 2
2118: PUSH
2119: LD_VAR 0 2
2123: PUSH
2124: LD_INT 2
2126: PUSH
2127: LD_INT 11
2129: PUSH
2130: LD_INT 9
2132: PUSH
2133: LD_INT 19
2135: PUSH
2136: LD_INT 28
2138: PUSH
2139: LD_INT 37
2141: PUSH
2142: LD_INT 32
2144: PUSH
2145: LD_INT 44
2147: PUSH
2148: LD_INT 28
2150: PUSH
2151: LD_INT 29
2153: PUSH
2154: LD_INT 30
2156: PUSH
2157: LD_INT 27
2159: PUSH
2160: LD_INT 34
2162: PUSH
2163: LD_INT 57
2165: PUSH
2166: LD_INT 63
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: ADD
2186: ST_TO_ADDR
2187: GO 2190
2189: POP
// case narodnosti [ 2 ] of nation_american :
2190: LD_EXP 1
2194: PUSH
2195: LD_INT 2
2197: ARRAY
2198: PUSH
2199: LD_INT 1
2201: DOUBLE
2202: EQUAL
2203: IFTRUE 2207
2205: GO 2283
2207: POP
// tech2 = tech2 ^ [ tech_SolPow , tech_SolEng , tech_ApePsych , tech_Radar , tech_RemCont , tech_MatDet , tech_AI , tech_LasSight , tech_PartInvis , tech_Soporific , tech_Laser , tech_AdvAI , tech_AdvMet , tech_Opto1 , tech_Comp1 ] ; nation_arabian :
2208: LD_ADDR_VAR 0 3
2212: PUSH
2213: LD_VAR 0 3
2217: PUSH
2218: LD_INT 35
2220: PUSH
2221: LD_INT 45
2223: PUSH
2224: LD_INT 2
2226: PUSH
2227: LD_INT 6
2229: PUSH
2230: LD_INT 15
2232: PUSH
2233: LD_INT 7
2235: PUSH
2236: LD_INT 32
2238: PUSH
2239: LD_INT 12
2241: PUSH
2242: LD_INT 16
2244: PUSH
2245: LD_INT 13
2247: PUSH
2248: LD_INT 10
2250: PUSH
2251: LD_INT 27
2253: PUSH
2254: LD_INT 34
2256: PUSH
2257: LD_INT 60
2259: PUSH
2260: LD_INT 57
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: ADD
2280: ST_TO_ADDR
2281: GO 2456
2283: LD_INT 2
2285: DOUBLE
2286: EQUAL
2287: IFTRUE 2291
2289: GO 2371
2291: POP
// tech2 = tech2 ^ [ tech_SolPow , tech_SolEng , tech_ApeAgres , tech_ApeNeural , tech_Radar , tech_RemCont , tech_MatDet , tech_Mortar , tech_ApeBrain , tech_Flame , tech_RemCharge , tech_HidCam , tech_BioDet , tech_Explos , tech_Bio1 , tech_Opto1 ] ; nation_russian :
2292: LD_ADDR_VAR 0 3
2296: PUSH
2297: LD_VAR 0 3
2301: PUSH
2302: LD_INT 35
2304: PUSH
2305: LD_INT 45
2307: PUSH
2308: LD_INT 11
2310: PUSH
2311: LD_INT 3
2313: PUSH
2314: LD_INT 6
2316: PUSH
2317: LD_INT 15
2319: PUSH
2320: LD_INT 7
2322: PUSH
2323: LD_INT 41
2325: PUSH
2326: LD_INT 4
2328: PUSH
2329: LD_INT 70
2331: PUSH
2332: LD_INT 18
2334: PUSH
2335: LD_INT 17
2337: PUSH
2338: LD_INT 8
2340: PUSH
2341: LD_INT 42
2343: PUSH
2344: LD_INT 66
2346: PUSH
2347: LD_INT 60
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: ADD
2368: ST_TO_ADDR
2369: GO 2456
2371: LD_INT 3
2373: DOUBLE
2374: EQUAL
2375: IFTRUE 2379
2377: GO 2455
2379: POP
// tech2 = tech2 ^ [ tech_ApePsych , tech_ApeAgres , tech_MatPred , tech_SibLoc , tech_TauRad , tech_LimTeleport , tech_AI , tech_Bazooka , tech_TauRad , tech_SpacAnom , tech_TauField , tech_AdvAI , tech_AdvMet , tech_Comp1 , tech_ST1 ] ; end ;
2380: LD_ADDR_VAR 0 3
2384: PUSH
2385: LD_VAR 0 3
2389: PUSH
2390: LD_INT 2
2392: PUSH
2393: LD_INT 11
2395: PUSH
2396: LD_INT 9
2398: PUSH
2399: LD_INT 19
2401: PUSH
2402: LD_INT 28
2404: PUSH
2405: LD_INT 37
2407: PUSH
2408: LD_INT 32
2410: PUSH
2411: LD_INT 44
2413: PUSH
2414: LD_INT 28
2416: PUSH
2417: LD_INT 29
2419: PUSH
2420: LD_INT 30
2422: PUSH
2423: LD_INT 27
2425: PUSH
2426: LD_INT 34
2428: PUSH
2429: LD_INT 57
2431: PUSH
2432: LD_INT 63
2434: PUSH
2435: EMPTY
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: LIST
2444: LIST
2445: LIST
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: ADD
2452: ST_TO_ADDR
2453: GO 2456
2455: POP
// end ; end ;
2456: GO 2459
2458: POP
// for i in tech1 do
2459: LD_ADDR_VAR 0 4
2463: PUSH
2464: LD_VAR 0 2
2468: PUSH
2469: FOR_IN
2470: IFFALSE 2495
// SetTech ( i , barvy [ 1 ] , state_researched ) ;
2472: LD_VAR 0 4
2476: PPUSH
2477: LD_EXP 2
2481: PUSH
2482: LD_INT 1
2484: ARRAY
2485: PPUSH
2486: LD_INT 2
2488: PPUSH
2489: CALL_OW 322
2493: GO 2469
2495: POP
2496: POP
// for i in tech2 do
2497: LD_ADDR_VAR 0 4
2501: PUSH
2502: LD_VAR 0 3
2506: PUSH
2507: FOR_IN
2508: IFFALSE 2533
// SetTech ( i , barvy [ 2 ] , state_researched ) ;
2510: LD_VAR 0 4
2514: PPUSH
2515: LD_EXP 2
2519: PUSH
2520: LD_INT 2
2522: ARRAY
2523: PPUSH
2524: LD_INT 2
2526: PPUSH
2527: CALL_OW 322
2531: GO 2507
2533: POP
2534: POP
// end ;
2535: LD_VAR 0 1
2539: RET
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
2540: LD_VAR 0 1
2544: PPUSH
2545: LD_VAR 0 2
2549: PPUSH
2550: LD_VAR 0 3
2554: PPUSH
2555: LD_OWVAR 2
2559: PPUSH
2560: CALL 8036 0 4
2564: PPOPN 3
2566: END
// var delay1 , delay2 ; export function place_buildings ; var budovy , b , i , dep ; begin
2567: LD_INT 0
2569: PPUSH
2570: PPUSH
2571: PPUSH
2572: PPUSH
2573: PPUSH
// InitUc ;
2574: CALL_OW 18
// InitHc ;
2578: CALL_OW 19
// InitVc ;
2582: CALL_OW 20
// bc_kind1 := b_lab_basic ;
2586: LD_ADDR_OWVAR 44
2590: PUSH
2591: LD_INT 9
2593: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2594: LD_ADDR_OWVAR 45
2598: PUSH
2599: LD_INT 9
2601: ST_TO_ADDR
// bc_level := levely_unitu ;
2602: LD_ADDR_OWVAR 43
2606: PUSH
2607: LD_EXP 9
2611: ST_TO_ADDR
// for i := 1 to 2 do
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: DOUBLE
2618: LD_INT 1
2620: DEC
2621: ST_TO_ADDR
2622: LD_INT 2
2624: PUSH
2625: FOR_TO
2626: IFFALSE 2791
// begin uc_side := barvy [ i ] ;
2628: LD_ADDR_OWVAR 20
2632: PUSH
2633: LD_EXP 2
2637: PUSH
2638: LD_VAR 0 4
2642: ARRAY
2643: ST_TO_ADDR
// uc_nation := narodnosti [ i ] ;
2644: LD_ADDR_OWVAR 21
2648: PUSH
2649: LD_EXP 1
2653: PUSH
2654: LD_VAR 0 4
2658: ARRAY
2659: ST_TO_ADDR
// budovy := GetBudovy ( i ) ;
2660: LD_ADDR_VAR 0 2
2664: PUSH
2665: LD_VAR 0 4
2669: PPUSH
2670: CALL 4215 0 1
2674: ST_TO_ADDR
// for b in budovy do
2675: LD_ADDR_VAR 0 3
2679: PUSH
2680: LD_VAR 0 2
2684: PUSH
2685: FOR_IN
2686: IFFALSE 2787
// begin bc_type := b [ 1 ] ;
2688: LD_ADDR_OWVAR 42
2692: PUSH
2693: LD_VAR 0 3
2697: PUSH
2698: LD_INT 1
2700: ARRAY
2701: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( b [ 2 ] , b [ 3 ] , b [ 4 ] ) ;
2702: LD_ADDR_VAR 0 5
2706: PUSH
2707: LD_VAR 0 3
2711: PUSH
2712: LD_INT 2
2714: ARRAY
2715: PPUSH
2716: LD_VAR 0 3
2720: PUSH
2721: LD_INT 3
2723: ARRAY
2724: PPUSH
2725: LD_VAR 0 3
2729: PUSH
2730: LD_INT 4
2732: ARRAY
2733: PPUSH
2734: CALL_OW 47
2738: ST_TO_ADDR
// if GetBType ( dep ) in [ b_depot , b_warehouse ] then
2739: LD_VAR 0 5
2743: PPUSH
2744: CALL_OW 266
2748: PUSH
2749: LD_INT 0
2751: PUSH
2752: LD_INT 1
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: IN
2759: IFFALSE 2785
// SetBName ( dep , @ & barvy [ i ] ) ;
2761: LD_VAR 0 5
2765: PPUSH
2766: LD_STRING @
2768: PUSH
2769: LD_EXP 2
2773: PUSH
2774: LD_VAR 0 4
2778: ARRAY
2779: STR
2780: PPUSH
2781: CALL_OW 500
// end ;
2785: GO 2685
2787: POP
2788: POP
// end ;
2789: GO 2625
2791: POP
2792: POP
// end ;
2793: LD_VAR 0 1
2797: RET
// every 10 do
2798: GO 2800
2800: DISABLE
// begin SetLives ( tel1 , 1000 ) ;
2801: LD_INT 1
2803: PPUSH
2804: LD_INT 1000
2806: PPUSH
2807: CALL_OW 234
// SetLives ( tel2 , 1000 ) ;
2811: LD_INT 2
2813: PPUSH
2814: LD_INT 1000
2816: PPUSH
2817: CALL_OW 234
// enable ;
2821: ENABLE
// end ;
2822: END
// every 0 0$1 trigger not delay1 do var pom , un ;
2823: LD_LOC 1
2827: NOT
2828: IFFALSE 2948
2830: GO 2832
2832: DISABLE
2833: LD_INT 0
2835: PPUSH
2836: PPUSH
// begin pom := FilterUnitsInArea ( Zpet1 , [ [ f_side , barvy [ 1 ] ] ] ) ;
2837: LD_ADDR_VAR 0 1
2841: PUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 22
2847: PUSH
2848: LD_EXP 2
2852: PUSH
2853: LD_INT 1
2855: ARRAY
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: EMPTY
2862: LIST
2863: PPUSH
2864: CALL_OW 70
2868: ST_TO_ADDR
// if pom then
2869: LD_VAR 0 1
2873: IFFALSE 2947
// begin un := pom [ 1 ] ;
2875: LD_ADDR_VAR 0 2
2879: PUSH
2880: LD_VAR 0 1
2884: PUSH
2885: LD_INT 1
2887: ARRAY
2888: ST_TO_ADDR
// ComStop ( un ) ;
2889: LD_VAR 0 2
2893: PPUSH
2894: CALL_OW 141
// TeleportUnit ( un , Base_Positions [ 1 ] [ 1 ] , Base_Positions [ 1 ] [ 2 ] , 5 , false ) ;
2898: LD_VAR 0 2
2902: PPUSH
2903: LD_EXP 18
2907: PUSH
2908: LD_INT 1
2910: ARRAY
2911: PUSH
2912: LD_INT 1
2914: ARRAY
2915: PPUSH
2916: LD_EXP 18
2920: PUSH
2921: LD_INT 1
2923: ARRAY
2924: PUSH
2925: LD_INT 2
2927: ARRAY
2928: PPUSH
2929: LD_INT 5
2931: PPUSH
2932: LD_INT 0
2934: PPUSH
2935: CALL_OW 483
// delay1 := true ;
2939: LD_ADDR_LOC 1
2943: PUSH
2944: LD_INT 1
2946: ST_TO_ADDR
// end ; enable ;
2947: ENABLE
// end ;
2948: PPOPN 2
2950: END
// every 0 0$1 trigger not delay2 do var pom , un ;
2951: LD_LOC 2
2955: NOT
2956: IFFALSE 3076
2958: GO 2960
2960: DISABLE
2961: LD_INT 0
2963: PPUSH
2964: PPUSH
// begin pom := FilterUnitsInArea ( Zpet2 , [ [ f_side , barvy [ 2 ] ] ] ) ;
2965: LD_ADDR_VAR 0 1
2969: PUSH
2970: LD_INT 4
2972: PPUSH
2973: LD_INT 22
2975: PUSH
2976: LD_EXP 2
2980: PUSH
2981: LD_INT 2
2983: ARRAY
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PUSH
2989: EMPTY
2990: LIST
2991: PPUSH
2992: CALL_OW 70
2996: ST_TO_ADDR
// if pom then
2997: LD_VAR 0 1
3001: IFFALSE 3075
// begin un := pom [ 1 ] ;
3003: LD_ADDR_VAR 0 2
3007: PUSH
3008: LD_VAR 0 1
3012: PUSH
3013: LD_INT 1
3015: ARRAY
3016: ST_TO_ADDR
// ComStop ( un ) ;
3017: LD_VAR 0 2
3021: PPUSH
3022: CALL_OW 141
// TeleportUnit ( un , Base_Positions [ 2 ] [ 1 ] , Base_Positions [ 2 ] [ 2 ] , 5 , false ) ;
3026: LD_VAR 0 2
3030: PPUSH
3031: LD_EXP 18
3035: PUSH
3036: LD_INT 2
3038: ARRAY
3039: PUSH
3040: LD_INT 1
3042: ARRAY
3043: PPUSH
3044: LD_EXP 18
3048: PUSH
3049: LD_INT 2
3051: ARRAY
3052: PUSH
3053: LD_INT 2
3055: ARRAY
3056: PPUSH
3057: LD_INT 5
3059: PPUSH
3060: LD_INT 0
3062: PPUSH
3063: CALL_OW 483
// delay2 := true ;
3067: LD_ADDR_LOC 2
3071: PUSH
3072: LD_INT 1
3074: ST_TO_ADDR
// end ; enable ;
3075: ENABLE
// end ;
3076: PPOPN 2
3078: END
// every 0 0$5 trigger delay1 do
3079: LD_LOC 1
3083: IFFALSE 3112
3085: GO 3087
3087: DISABLE
// begin wait ( Rand ( 1 , 0 0$20 ) ) ;
3088: LD_INT 1
3090: PPUSH
3091: LD_INT 700
3093: PPUSH
3094: CALL_OW 12
3098: PPUSH
3099: CALL_OW 67
// delay1 = false ;
3103: LD_ADDR_LOC 1
3107: PUSH
3108: LD_INT 0
3110: ST_TO_ADDR
// enable ;
3111: ENABLE
// end ;
3112: END
// every 0 0$5 trigger delay2 do
3113: LD_LOC 2
3117: IFFALSE 3146
3119: GO 3121
3121: DISABLE
// begin wait ( Rand ( 1 , 0 0$20 ) ) ;
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 700
3127: PPUSH
3128: CALL_OW 12
3132: PPUSH
3133: CALL_OW 67
// delay2 = false ;
3137: LD_ADDR_LOC 2
3141: PUSH
3142: LD_INT 0
3144: ST_TO_ADDR
// enable ;
3145: ENABLE
// end ;
3146: END
// export function placni_lidi ; var pom , pompocet ; var n , un ; begin
3147: LD_INT 0
3149: PPUSH
3150: PPUSH
3151: PPUSH
3152: PPUSH
3153: PPUSH
// for n := 1 to 2 do
3154: LD_ADDR_VAR 0 4
3158: PUSH
3159: DOUBLE
3160: LD_INT 1
3162: DEC
3163: ST_TO_ADDR
3164: LD_INT 2
3166: PUSH
3167: FOR_TO
3168: IFFALSE 3567
// begin uc_side := barvy [ n ] ;
3170: LD_ADDR_OWVAR 20
3174: PUSH
3175: LD_EXP 2
3179: PUSH
3180: LD_VAR 0 4
3184: ARRAY
3185: ST_TO_ADDR
// uc_nation := narodnosti [ n ] ;
3186: LD_ADDR_OWVAR 21
3190: PUSH
3191: LD_EXP 1
3195: PUSH
3196: LD_VAR 0 4
3200: ARRAY
3201: ST_TO_ADDR
// pom := [ ] ;
3202: LD_ADDR_VAR 0 2
3206: PUSH
3207: EMPTY
3208: ST_TO_ADDR
// hc_importance := 100 ;
3209: LD_ADDR_OWVAR 32
3213: PUSH
3214: LD_INT 100
3216: ST_TO_ADDR
// hc_sex := get_sex ;
3217: LD_ADDR_OWVAR 27
3221: PUSH
3222: CALL 3621 0 0
3226: ST_TO_ADDR
// if Multiplayer then
3227: LD_OWVAR 4
3231: IFFALSE 3271
// begin hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3233: LD_ADDR_OWVAR 27
3237: PUSH
3238: LD_OWVAR 20
3242: PPUSH
3243: CALL_OW 526
3247: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
3248: LD_ADDR_OWVAR 33
3252: PUSH
3253: LD_STRING MULTIAVATARS
3255: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3256: LD_ADDR_OWVAR 34
3260: PUSH
3261: LD_OWVAR 20
3265: PPUSH
3266: CALL_OW 525
3270: ST_TO_ADDR
// end ; pom := pom ^ get_human ( hc_sex , class_soldier , levely_unitu + 1 , mp_sides_players_names [ uc_side ] ) ;
3271: LD_ADDR_VAR 0 2
3275: PUSH
3276: LD_VAR 0 2
3280: PUSH
3281: LD_OWVAR 27
3285: PPUSH
3286: LD_INT 1
3288: PPUSH
3289: LD_EXP 9
3293: PUSH
3294: LD_INT 1
3296: PLUS
3297: PPUSH
3298: LD_OWVAR 19
3302: PUSH
3303: LD_OWVAR 20
3307: ARRAY
3308: PPUSH
3309: CALL 3574 0 4
3313: ADD
3314: ST_TO_ADDR
// hc_gallery :=  ;
3315: LD_ADDR_OWVAR 33
3319: PUSH
3320: LD_STRING 
3322: ST_TO_ADDR
// hc_importance := 0 ;
3323: LD_ADDR_OWVAR 32
3327: PUSH
3328: LD_INT 0
3330: ST_TO_ADDR
// pom := pom ^ get_human ( get_sex , class_scientistic , levely_unitu ,  ) ;
3331: LD_ADDR_VAR 0 2
3335: PUSH
3336: LD_VAR 0 2
3340: PUSH
3341: CALL 3621 0 0
3345: PPUSH
3346: LD_INT 4
3348: PPUSH
3349: LD_EXP 9
3353: PPUSH
3354: LD_STRING 
3356: PPUSH
3357: CALL 3574 0 4
3361: ADD
3362: ST_TO_ADDR
// pom := pom ^ get_human ( get_sex , class_mechanic , levely_unitu ,  ) ;
3363: LD_ADDR_VAR 0 2
3367: PUSH
3368: LD_VAR 0 2
3372: PUSH
3373: CALL 3621 0 0
3377: PPUSH
3378: LD_INT 3
3380: PPUSH
3381: LD_EXP 9
3385: PPUSH
3386: LD_STRING 
3388: PPUSH
3389: CALL 3574 0 4
3393: ADD
3394: ST_TO_ADDR
// pom := pom ^ get_human ( get_sex , class_engineer , levely_unitu ,  ) ;
3395: LD_ADDR_VAR 0 2
3399: PUSH
3400: LD_VAR 0 2
3404: PUSH
3405: CALL 3621 0 0
3409: PPUSH
3410: LD_INT 2
3412: PPUSH
3413: LD_EXP 9
3417: PPUSH
3418: LD_STRING 
3420: PPUSH
3421: CALL 3574 0 4
3425: ADD
3426: ST_TO_ADDR
// pompocet := pocet_lidi - 4 ;
3427: LD_ADDR_VAR 0 3
3431: PUSH
3432: LD_EXP 6
3436: PUSH
3437: LD_INT 4
3439: MINUS
3440: ST_TO_ADDR
// while ( pompocet ) do
3441: LD_VAR 0 3
3445: IFFALSE 3503
// begin pompocet := pompocet - 1 ;
3447: LD_ADDR_VAR 0 3
3451: PUSH
3452: LD_VAR 0 3
3456: PUSH
3457: LD_INT 1
3459: MINUS
3460: ST_TO_ADDR
// pom := pom ^ get_human ( get_sex , Rand ( 1 , 4 ) , levely_unitu ,  ) ;
3461: LD_ADDR_VAR 0 2
3465: PUSH
3466: LD_VAR 0 2
3470: PUSH
3471: CALL 3621 0 0
3475: PPUSH
3476: LD_INT 1
3478: PPUSH
3479: LD_INT 4
3481: PPUSH
3482: CALL_OW 12
3486: PPUSH
3487: LD_EXP 9
3491: PPUSH
3492: LD_STRING 
3494: PPUSH
3495: CALL 3574 0 4
3499: ADD
3500: ST_TO_ADDR
// end ;
3501: GO 3441
// for un in pom do
3503: LD_ADDR_VAR 0 5
3507: PUSH
3508: LD_VAR 0 2
3512: PUSH
3513: FOR_IN
3514: IFFALSE 3563
// PlaceUnitXYR ( un , Base_Positions [ n ] [ 1 ] , Base_Positions [ n ] [ 2 ] , 5 , false ) ;
3516: LD_VAR 0 5
3520: PPUSH
3521: LD_EXP 18
3525: PUSH
3526: LD_VAR 0 4
3530: ARRAY
3531: PUSH
3532: LD_INT 1
3534: ARRAY
3535: PPUSH
3536: LD_EXP 18
3540: PUSH
3541: LD_VAR 0 4
3545: ARRAY
3546: PUSH
3547: LD_INT 2
3549: ARRAY
3550: PPUSH
3551: LD_INT 5
3553: PPUSH
3554: LD_INT 0
3556: PPUSH
3557: CALL_OW 50
3561: GO 3513
3563: POP
3564: POP
// end ;
3565: GO 3167
3567: POP
3568: POP
// end ;
3569: LD_VAR 0 1
3573: RET
// function Get_Human ( sex , clas , level , name ) ; begin
3574: LD_INT 0
3576: PPUSH
// PrepareHuman ( sex , clas , level ) ;
3577: LD_VAR 0 1
3581: PPUSH
3582: LD_VAR 0 2
3586: PPUSH
3587: LD_VAR 0 3
3591: PPUSH
3592: CALL_OW 380
// hc_name := name ;
3596: LD_ADDR_OWVAR 26
3600: PUSH
3601: LD_VAR 0 4
3605: ST_TO_ADDR
// Result := CreateHuman ;
3606: LD_ADDR_VAR 0 5
3610: PUSH
3611: CALL_OW 44
3615: ST_TO_ADDR
// end ;
3616: LD_VAR 0 5
3620: RET
// function get_sex ; begin
3621: LD_INT 0
3623: PPUSH
// if Prob ( 20 ) then
3624: LD_INT 20
3626: PPUSH
3627: CALL_OW 13
3631: IFFALSE 3643
// Result := sex_female else
3633: LD_ADDR_VAR 0 1
3637: PUSH
3638: LD_INT 2
3640: ST_TO_ADDR
3641: GO 3651
// Result := sex_male ;
3643: LD_ADDR_VAR 0 1
3647: PUSH
3648: LD_INT 1
3650: ST_TO_ADDR
// end ;
3651: LD_VAR 0 1
3655: RET
// export function novy_vojak ( strana , ridic ) ; var i , cla ; begin
3656: LD_INT 0
3658: PPUSH
3659: PPUSH
3660: PPUSH
// case new_people of 0 :
3661: LD_EXP 17
3665: PUSH
3666: LD_INT 0
3668: DOUBLE
3669: EQUAL
3670: IFTRUE 3674
3672: GO 3679
3674: POP
// exit ; 1 :
3675: GO 3978
3677: GO 3812
3679: LD_INT 1
3681: DOUBLE
3682: EQUAL
3683: IFTRUE 3687
3685: GO 3724
3687: POP
// if ridic then
3688: LD_VAR 0 2
3692: IFFALSE 3722
// PlaceUnitArea ( ridic , [ base1 , base2 ] [ strana ] , true ) ; 2 :
3694: LD_VAR 0 2
3698: PPUSH
3699: LD_INT 7
3701: PUSH
3702: LD_INT 6
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PUSH
3709: LD_VAR 0 1
3713: ARRAY
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: CALL_OW 49
3722: GO 3812
3724: LD_INT 2
3726: DOUBLE
3727: EQUAL
3728: IFTRUE 3732
3730: GO 3757
3732: POP
// if ridic then
3733: LD_VAR 0 2
3737: IFFALSE 3755
// i = Rand ( 1 , 4 ) ; 3 :
3739: LD_ADDR_VAR 0 4
3743: PUSH
3744: LD_INT 1
3746: PPUSH
3747: LD_INT 4
3749: PPUSH
3750: CALL_OW 12
3754: ST_TO_ADDR
3755: GO 3812
3757: LD_INT 3
3759: DOUBLE
3760: EQUAL
3761: IFTRUE 3765
3763: GO 3784
3765: POP
// i = Rand ( 1 , 4 ) ; 4 :
3766: LD_ADDR_VAR 0 4
3770: PUSH
3771: LD_INT 1
3773: PPUSH
3774: LD_INT 4
3776: PPUSH
3777: CALL_OW 12
3781: ST_TO_ADDR
3782: GO 3812
3784: LD_INT 4
3786: DOUBLE
3787: EQUAL
3788: IFTRUE 3792
3790: GO 3811
3792: POP
// i = Rand ( 1 , 10 ) ; end ;
3793: LD_ADDR_VAR 0 4
3797: PUSH
3798: LD_INT 1
3800: PPUSH
3801: LD_INT 10
3803: PPUSH
3804: CALL_OW 12
3808: ST_TO_ADDR
3809: GO 3812
3811: POP
// if not i then
3812: LD_VAR 0 4
3816: NOT
3817: IFFALSE 3821
// exit ;
3819: GO 3978
// cla := [ class_soldier , class_engineer , class_mechanic , class_scientistic , class_sniper , class_mortar , class_bazooker , class_apeman_soldier , class_apeman_engineer , class_apeman_kamikaze ] [ i ] ;
3821: LD_ADDR_VAR 0 5
3825: PUSH
3826: LD_INT 1
3828: PUSH
3829: LD_INT 2
3831: PUSH
3832: LD_INT 3
3834: PUSH
3835: LD_INT 4
3837: PUSH
3838: LD_INT 5
3840: PUSH
3841: LD_INT 8
3843: PUSH
3844: LD_INT 9
3846: PUSH
3847: LD_INT 15
3849: PUSH
3850: LD_INT 16
3852: PUSH
3853: LD_INT 17
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: PUSH
3868: LD_VAR 0 4
3872: ARRAY
3873: ST_TO_ADDR
// if ( i < 8 ) then
3874: LD_VAR 0 4
3878: PUSH
3879: LD_INT 8
3881: LESS
3882: IFFALSE 3902
// uc_nation := narodnosti [ strana ] else
3884: LD_ADDR_OWVAR 21
3888: PUSH
3889: LD_EXP 1
3893: PUSH
3894: LD_VAR 0 1
3898: ARRAY
3899: ST_TO_ADDR
3900: GO 3910
// uc_nation := nation_nature ;
3902: LD_ADDR_OWVAR 21
3906: PUSH
3907: LD_INT 0
3909: ST_TO_ADDR
// uc_side := barvy [ strana ] ;
3910: LD_ADDR_OWVAR 20
3914: PUSH
3915: LD_EXP 2
3919: PUSH
3920: LD_VAR 0 1
3924: ARRAY
3925: ST_TO_ADDR
// PlaceUnitArea ( Get_Human ( get_sex , cla , Rand ( 1 , 7 ) ,  ) , [ base1 , base2 ] [ strana ] , true ) ;
3926: CALL 3621 0 0
3930: PPUSH
3931: LD_VAR 0 5
3935: PPUSH
3936: LD_INT 1
3938: PPUSH
3939: LD_INT 7
3941: PPUSH
3942: CALL_OW 12
3946: PPUSH
3947: LD_STRING 
3949: PPUSH
3950: CALL 3574 0 4
3954: PPUSH
3955: LD_INT 7
3957: PUSH
3958: LD_INT 6
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: PUSH
3965: LD_VAR 0 1
3969: ARRAY
3970: PPUSH
3971: LD_INT 1
3973: PPUSH
3974: CALL_OW 49
// end ;
3978: LD_VAR 0 3
3982: RET
// every 0 0$3 do var pom , un ;
3983: GO 3985
3985: DISABLE
3986: LD_INT 0
3988: PPUSH
3989: PPUSH
// begin pom := FilterUnitsInArea ( Zpet1 , [ [ f_side , barvy [ 2 ] ] ] ) ;
3990: LD_ADDR_VAR 0 1
3994: PUSH
3995: LD_INT 3
3997: PPUSH
3998: LD_INT 22
4000: PUSH
4001: LD_EXP 2
4005: PUSH
4006: LD_INT 2
4008: ARRAY
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: EMPTY
4015: LIST
4016: PPUSH
4017: CALL_OW 70
4021: ST_TO_ADDR
// if pom then
4022: LD_VAR 0 1
4026: IFFALSE 4095
// begin un := pom [ 1 ] ;
4028: LD_ADDR_VAR 0 2
4032: PUSH
4033: LD_VAR 0 1
4037: PUSH
4038: LD_INT 1
4040: ARRAY
4041: ST_TO_ADDR
// ComStop ( un ) ;
4042: LD_VAR 0 2
4046: PPUSH
4047: CALL_OW 141
// TeleportUnit ( un , 109 , 59 , 10 , false ) ;
4051: LD_VAR 0 2
4055: PPUSH
4056: LD_INT 109
4058: PPUSH
4059: LD_INT 59
4061: PPUSH
4062: LD_INT 10
4064: PPUSH
4065: LD_INT 0
4067: PPUSH
4068: CALL_OW 483
// SetLives ( un , GetLives ( un ) div 6 ) ;
4072: LD_VAR 0 2
4076: PPUSH
4077: LD_VAR 0 2
4081: PPUSH
4082: CALL_OW 256
4086: PUSH
4087: LD_INT 6
4089: DIV
4090: PPUSH
4091: CALL_OW 234
// end ; enable ;
4095: ENABLE
// end ;
4096: PPOPN 2
4098: END
// every 0 0$3 do var pom , un ;
4099: GO 4101
4101: DISABLE
4102: LD_INT 0
4104: PPUSH
4105: PPUSH
// begin pom := FilterUnitsInArea ( Zpet2 , [ [ f_side , barvy [ 1 ] ] ] ) ;
4106: LD_ADDR_VAR 0 1
4110: PUSH
4111: LD_INT 4
4113: PPUSH
4114: LD_INT 22
4116: PUSH
4117: LD_EXP 2
4121: PUSH
4122: LD_INT 1
4124: ARRAY
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: PUSH
4130: EMPTY
4131: LIST
4132: PPUSH
4133: CALL_OW 70
4137: ST_TO_ADDR
// if pom then
4138: LD_VAR 0 1
4142: IFFALSE 4211
// begin un := pom [ 1 ] ;
4144: LD_ADDR_VAR 0 2
4148: PUSH
4149: LD_VAR 0 1
4153: PUSH
4154: LD_INT 1
4156: ARRAY
4157: ST_TO_ADDR
// ComStop ( un ) ;
4158: LD_VAR 0 2
4162: PPUSH
4163: CALL_OW 141
// TeleportUnit ( un , 109 , 59 , 10 , false ) ;
4167: LD_VAR 0 2
4171: PPUSH
4172: LD_INT 109
4174: PPUSH
4175: LD_INT 59
4177: PPUSH
4178: LD_INT 10
4180: PPUSH
4181: LD_INT 0
4183: PPUSH
4184: CALL_OW 483
// SetLives ( un , GetLives ( un ) div 6 ) ;
4188: LD_VAR 0 2
4192: PPUSH
4193: LD_VAR 0 2
4197: PPUSH
4198: CALL_OW 256
4202: PUSH
4203: LD_INT 6
4205: DIV
4206: PPUSH
4207: CALL_OW 234
// end ; enable ;
4211: ENABLE
// end ;
4212: PPOPN 2
4214: END
// function getbudovy ( side ) ; begin
4215: LD_INT 0
4217: PPUSH
// case side of 1 :
4218: LD_VAR 0 1
4222: PUSH
4223: LD_INT 1
4225: DOUBLE
4226: EQUAL
4227: IFTRUE 4231
4229: GO 4712
4231: POP
// case rozvitost_zakladny of 1 :
4232: LD_EXP 7
4236: PUSH
4237: LD_INT 1
4239: DOUBLE
4240: EQUAL
4241: IFTRUE 4245
4243: GO 4274
4245: POP
// Result := [ [ b_depot , 33 , 48 , 2 ] ] ; 2 :
4246: LD_ADDR_VAR 0 2
4250: PUSH
4251: LD_INT 0
4253: PUSH
4254: LD_INT 33
4256: PUSH
4257: LD_INT 48
4259: PUSH
4260: LD_INT 2
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: PUSH
4269: EMPTY
4270: LIST
4271: ST_TO_ADDR
4272: GO 4710
4274: LD_INT 2
4276: DOUBLE
4277: EQUAL
4278: IFTRUE 4282
4280: GO 4444
4282: POP
// begin SetResourceVisibility ( 33 , 54 , barvy [ 1 ] ) ;
4283: LD_INT 33
4285: PPUSH
4286: LD_INT 54
4288: PPUSH
4289: LD_EXP 2
4293: PUSH
4294: LD_INT 1
4296: ARRAY
4297: PPUSH
4298: CALL_OW 441
// Result := [ [ b_depot , 33 , 48 , 2 ] , [ b_oil_mine , 33 , 54 , 0 ] , [ b_lab , 42 , 63 , 0 ] , [ b_workshop , 29 , 37 , 2 ] , [ b_armoury , 48 , 50 , 4 ] , [ b_breastwork , 48 , 44 , 5 ] , [ b_breastwork , 57 , 67 , 4 ] ] ;
4302: LD_ADDR_VAR 0 2
4306: PUSH
4307: LD_INT 0
4309: PUSH
4310: LD_INT 33
4312: PUSH
4313: LD_INT 48
4315: PUSH
4316: LD_INT 2
4318: PUSH
4319: EMPTY
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: PUSH
4325: LD_INT 29
4327: PUSH
4328: LD_INT 33
4330: PUSH
4331: LD_INT 54
4333: PUSH
4334: LD_INT 0
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: PUSH
4343: LD_INT 6
4345: PUSH
4346: LD_INT 42
4348: PUSH
4349: LD_INT 63
4351: PUSH
4352: LD_INT 0
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: PUSH
4361: LD_INT 2
4363: PUSH
4364: LD_INT 29
4366: PUSH
4367: LD_INT 37
4369: PUSH
4370: LD_INT 2
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: PUSH
4379: LD_INT 4
4381: PUSH
4382: LD_INT 48
4384: PUSH
4385: LD_INT 50
4387: PUSH
4388: LD_INT 4
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: PUSH
4397: LD_INT 31
4399: PUSH
4400: LD_INT 48
4402: PUSH
4403: LD_INT 44
4405: PUSH
4406: LD_INT 5
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 31
4417: PUSH
4418: LD_INT 57
4420: PUSH
4421: LD_INT 67
4423: PUSH
4424: LD_INT 4
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: ST_TO_ADDR
// end ; 3 :
4442: GO 4710
4444: LD_INT 3
4446: DOUBLE
4447: EQUAL
4448: IFTRUE 4452
4450: GO 4709
4452: POP
// begin SetResourceVisibility ( 33 , 54 , barvy [ 1 ] ) ;
4453: LD_INT 33
4455: PPUSH
4456: LD_INT 54
4458: PPUSH
4459: LD_EXP 2
4463: PUSH
4464: LD_INT 1
4466: ARRAY
4467: PPUSH
4468: CALL_OW 441
// SetResourceVisibility ( 33 , 33 , barvy [ 1 ] ) ;
4472: LD_INT 33
4474: PPUSH
4475: LD_INT 33
4477: PPUSH
4478: LD_EXP 2
4482: PUSH
4483: LD_INT 1
4485: ARRAY
4486: PPUSH
4487: CALL_OW 441
// Result := [ [ b_warehouse , 33 , 48 , 2 ] , [ b_oil_mine , 33 , 54 , 0 ] , [ b_lab , 42 , 63 , 0 ] , [ b_factory , 29 , 37 , 2 ] , [ b_barracks , 48 , 50 , 4 ] , [ b_bunker , 48 , 44 , 5 ] , [ b_bunker , 57 , 67 , 4 ] , [ b_lab , 51 , 82 , 0 ] , [ b_siberite_mine , 33 , 33 , 0 ] , [ b_bunker , 30 , 27 , 3 ] , [ b_bunker , 61 , 81 , 4 ] ] ;
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: LD_INT 1
4498: PUSH
4499: LD_INT 33
4501: PUSH
4502: LD_INT 48
4504: PUSH
4505: LD_INT 2
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: PUSH
4514: LD_INT 29
4516: PUSH
4517: LD_INT 33
4519: PUSH
4520: LD_INT 54
4522: PUSH
4523: LD_INT 0
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: PUSH
4532: LD_INT 6
4534: PUSH
4535: LD_INT 42
4537: PUSH
4538: LD_INT 63
4540: PUSH
4541: LD_INT 0
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: PUSH
4550: LD_INT 3
4552: PUSH
4553: LD_INT 29
4555: PUSH
4556: LD_INT 37
4558: PUSH
4559: LD_INT 2
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: PUSH
4568: LD_INT 5
4570: PUSH
4571: LD_INT 48
4573: PUSH
4574: LD_INT 50
4576: PUSH
4577: LD_INT 4
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: PUSH
4586: LD_INT 32
4588: PUSH
4589: LD_INT 48
4591: PUSH
4592: LD_INT 44
4594: PUSH
4595: LD_INT 5
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: PUSH
4604: LD_INT 32
4606: PUSH
4607: LD_INT 57
4609: PUSH
4610: LD_INT 67
4612: PUSH
4613: LD_INT 4
4615: PUSH
4616: EMPTY
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 6
4624: PUSH
4625: LD_INT 51
4627: PUSH
4628: LD_INT 82
4630: PUSH
4631: LD_INT 0
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: PUSH
4640: LD_INT 30
4642: PUSH
4643: LD_INT 33
4645: PUSH
4646: LD_INT 33
4648: PUSH
4649: LD_INT 0
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: PUSH
4658: LD_INT 32
4660: PUSH
4661: LD_INT 30
4663: PUSH
4664: LD_INT 27
4666: PUSH
4667: LD_INT 3
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: PUSH
4676: LD_INT 32
4678: PUSH
4679: LD_INT 61
4681: PUSH
4682: LD_INT 81
4684: PUSH
4685: LD_INT 4
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: ST_TO_ADDR
// end ; end ; 2 :
4707: GO 4710
4709: POP
4710: GO 5202
4712: LD_INT 2
4714: DOUBLE
4715: EQUAL
4716: IFTRUE 4720
4718: GO 5201
4720: POP
// case rozvitost_zakladny of 1 :
4721: LD_EXP 7
4725: PUSH
4726: LD_INT 1
4728: DOUBLE
4729: EQUAL
4730: IFTRUE 4734
4732: GO 4763
4734: POP
// Result := [ [ b_depot , 183 , 55 , 3 ] ] ; 2 :
4735: LD_ADDR_VAR 0 2
4739: PUSH
4740: LD_INT 0
4742: PUSH
4743: LD_INT 183
4745: PUSH
4746: LD_INT 55
4748: PUSH
4749: LD_INT 3
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: PUSH
4758: EMPTY
4759: LIST
4760: ST_TO_ADDR
4761: GO 5199
4763: LD_INT 2
4765: DOUBLE
4766: EQUAL
4767: IFTRUE 4771
4769: GO 4933
4771: POP
// begin SetResourceVisibility ( 174 , 38 , barvy [ 2 ] ) ;
4772: LD_INT 174
4774: PPUSH
4775: LD_INT 38
4777: PPUSH
4778: LD_EXP 2
4782: PUSH
4783: LD_INT 2
4785: ARRAY
4786: PPUSH
4787: CALL_OW 441
// Result := [ [ b_depot , 183 , 55 , 3 ] , [ b_oil_mine , 174 , 38 , 0 ] , [ b_lab , 170 , 33 , 3 ] , [ b_workshop , 185 , 66 , 5 ] , [ b_armoury , 176 , 66 , 1 ] , [ b_breastwork , 174 , 59 , 1 ] , [ b_breastwork , 179 , 75 , 1 ] ] ;
4791: LD_ADDR_VAR 0 2
4795: PUSH
4796: LD_INT 0
4798: PUSH
4799: LD_INT 183
4801: PUSH
4802: LD_INT 55
4804: PUSH
4805: LD_INT 3
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: PUSH
4814: LD_INT 29
4816: PUSH
4817: LD_INT 174
4819: PUSH
4820: LD_INT 38
4822: PUSH
4823: LD_INT 0
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: PUSH
4832: LD_INT 6
4834: PUSH
4835: LD_INT 170
4837: PUSH
4838: LD_INT 33
4840: PUSH
4841: LD_INT 3
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: PUSH
4850: LD_INT 2
4852: PUSH
4853: LD_INT 185
4855: PUSH
4856: LD_INT 66
4858: PUSH
4859: LD_INT 5
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 4
4870: PUSH
4871: LD_INT 176
4873: PUSH
4874: LD_INT 66
4876: PUSH
4877: LD_INT 1
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: LD_INT 31
4888: PUSH
4889: LD_INT 174
4891: PUSH
4892: LD_INT 59
4894: PUSH
4895: LD_INT 1
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: PUSH
4904: LD_INT 31
4906: PUSH
4907: LD_INT 179
4909: PUSH
4910: LD_INT 75
4912: PUSH
4913: LD_INT 1
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: ST_TO_ADDR
// end ; 3 :
4931: GO 5199
4933: LD_INT 3
4935: DOUBLE
4936: EQUAL
4937: IFTRUE 4941
4939: GO 5198
4941: POP
// begin SetResourceVisibility ( 174 , 38 , barvy [ 2 ] ) ;
4942: LD_INT 174
4944: PPUSH
4945: LD_INT 38
4947: PPUSH
4948: LD_EXP 2
4952: PUSH
4953: LD_INT 2
4955: ARRAY
4956: PPUSH
4957: CALL_OW 441
// SetResourceVisibility ( 184 , 84 , barvy [ 2 ] ) ;
4961: LD_INT 184
4963: PPUSH
4964: LD_INT 84
4966: PPUSH
4967: LD_EXP 2
4971: PUSH
4972: LD_INT 2
4974: ARRAY
4975: PPUSH
4976: CALL_OW 441
// Result := [ [ b_warehouse , 183 , 55 , 3 ] , [ b_oil_mine , 174 , 38 , 0 ] , [ b_lab , 170 , 33 , 3 ] , [ b_factory , 185 , 66 , 5 ] , [ b_barracks , 176 , 66 , 1 ] , [ b_bunker , 174 , 59 , 1 ] , [ b_bunker , 179 , 75 , 1 ] , [ b_lab , 162 , 30 , 3 ] , [ b_siberite_mine , 184 , 84 , 3 ] , [ b_bunker , 183 , 87 , 1 ] , [ b_bunker , 158 , 33 , 2 ] ] ;
4980: LD_ADDR_VAR 0 2
4984: PUSH
4985: LD_INT 1
4987: PUSH
4988: LD_INT 183
4990: PUSH
4991: LD_INT 55
4993: PUSH
4994: LD_INT 3
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: PUSH
5003: LD_INT 29
5005: PUSH
5006: LD_INT 174
5008: PUSH
5009: LD_INT 38
5011: PUSH
5012: LD_INT 0
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: PUSH
5021: LD_INT 6
5023: PUSH
5024: LD_INT 170
5026: PUSH
5027: LD_INT 33
5029: PUSH
5030: LD_INT 3
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: PUSH
5039: LD_INT 3
5041: PUSH
5042: LD_INT 185
5044: PUSH
5045: LD_INT 66
5047: PUSH
5048: LD_INT 5
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 5
5059: PUSH
5060: LD_INT 176
5062: PUSH
5063: LD_INT 66
5065: PUSH
5066: LD_INT 1
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: LIST
5073: LIST
5074: PUSH
5075: LD_INT 32
5077: PUSH
5078: LD_INT 174
5080: PUSH
5081: LD_INT 59
5083: PUSH
5084: LD_INT 1
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: PUSH
5093: LD_INT 32
5095: PUSH
5096: LD_INT 179
5098: PUSH
5099: LD_INT 75
5101: PUSH
5102: LD_INT 1
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: PUSH
5111: LD_INT 6
5113: PUSH
5114: LD_INT 162
5116: PUSH
5117: LD_INT 30
5119: PUSH
5120: LD_INT 3
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: PUSH
5129: LD_INT 30
5131: PUSH
5132: LD_INT 184
5134: PUSH
5135: LD_INT 84
5137: PUSH
5138: LD_INT 3
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: PUSH
5147: LD_INT 32
5149: PUSH
5150: LD_INT 183
5152: PUSH
5153: LD_INT 87
5155: PUSH
5156: LD_INT 1
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: PUSH
5165: LD_INT 32
5167: PUSH
5168: LD_INT 158
5170: PUSH
5171: LD_INT 33
5173: PUSH
5174: LD_INT 2
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: ST_TO_ADDR
// end ; end ; end ;
5196: GO 5199
5198: POP
5199: GO 5202
5201: POP
// end ;
5202: LD_VAR 0 2
5206: RET
// export function set_resource_na_zacatku ; var pom ; begin
5207: LD_INT 0
5209: PPUSH
5210: PPUSH
// pom := FilterAllUnits ( [ [ f_side , barvy [ 1 ] ] , [ f_type , unit_building ] ] ) ;
5211: LD_ADDR_VAR 0 2
5215: PUSH
5216: LD_INT 22
5218: PUSH
5219: LD_EXP 2
5223: PUSH
5224: LD_INT 1
5226: ARRAY
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: LD_INT 21
5234: PUSH
5235: LD_INT 3
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: PPUSH
5246: CALL_OW 69
5250: ST_TO_ADDR
// if pom then
5251: LD_VAR 0 2
5255: IFFALSE 5347
// begin SetResourceType ( GetBase ( pom [ 1 ] ) , mat_cans , resources [ 1 ] ) ;
5257: LD_VAR 0 2
5261: PUSH
5262: LD_INT 1
5264: ARRAY
5265: PPUSH
5266: CALL_OW 274
5270: PPUSH
5271: LD_INT 1
5273: PPUSH
5274: LD_EXP 8
5278: PUSH
5279: LD_INT 1
5281: ARRAY
5282: PPUSH
5283: CALL_OW 277
// SetResourceType ( GetBase ( pom [ 1 ] ) , mat_oil , resources [ 2 ] ) ;
5287: LD_VAR 0 2
5291: PUSH
5292: LD_INT 1
5294: ARRAY
5295: PPUSH
5296: CALL_OW 274
5300: PPUSH
5301: LD_INT 2
5303: PPUSH
5304: LD_EXP 8
5308: PUSH
5309: LD_INT 2
5311: ARRAY
5312: PPUSH
5313: CALL_OW 277
// SetResourceType ( GetBase ( pom [ 1 ] ) , mat_siberit , resources [ 3 ] ) ;
5317: LD_VAR 0 2
5321: PUSH
5322: LD_INT 1
5324: ARRAY
5325: PPUSH
5326: CALL_OW 274
5330: PPUSH
5331: LD_INT 3
5333: PPUSH
5334: LD_EXP 8
5338: PUSH
5339: LD_INT 3
5341: ARRAY
5342: PPUSH
5343: CALL_OW 277
// end ; pom := FilterAllUnits ( [ [ f_side , barvy [ 2 ] ] , [ f_type , unit_building ] ] ) ;
5347: LD_ADDR_VAR 0 2
5351: PUSH
5352: LD_INT 22
5354: PUSH
5355: LD_EXP 2
5359: PUSH
5360: LD_INT 2
5362: ARRAY
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 21
5370: PUSH
5371: LD_INT 3
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: PPUSH
5382: CALL_OW 69
5386: ST_TO_ADDR
// if pom then
5387: LD_VAR 0 2
5391: IFFALSE 5483
// begin SetResourceType ( GetBase ( pom [ 1 ] ) , mat_cans , resources [ 1 ] ) ;
5393: LD_VAR 0 2
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PPUSH
5402: CALL_OW 274
5406: PPUSH
5407: LD_INT 1
5409: PPUSH
5410: LD_EXP 8
5414: PUSH
5415: LD_INT 1
5417: ARRAY
5418: PPUSH
5419: CALL_OW 277
// SetResourceType ( GetBase ( pom [ 1 ] ) , mat_oil , resources [ 2 ] ) ;
5423: LD_VAR 0 2
5427: PUSH
5428: LD_INT 1
5430: ARRAY
5431: PPUSH
5432: CALL_OW 274
5436: PPUSH
5437: LD_INT 2
5439: PPUSH
5440: LD_EXP 8
5444: PUSH
5445: LD_INT 2
5447: ARRAY
5448: PPUSH
5449: CALL_OW 277
// SetResourceType ( GetBase ( pom [ 1 ] ) , mat_siberit , resources [ 3 ] ) ;
5453: LD_VAR 0 2
5457: PUSH
5458: LD_INT 1
5460: ARRAY
5461: PPUSH
5462: CALL_OW 274
5466: PPUSH
5467: LD_INT 3
5469: PPUSH
5470: LD_EXP 8
5474: PUSH
5475: LD_INT 3
5477: ARRAY
5478: PPUSH
5479: CALL_OW 277
// end ; end ; end_of_file
5483: LD_VAR 0 1
5487: RET
// every 1 do var drv , pom , i ;
5488: GO 5490
5490: DISABLE
5491: LD_INT 0
5493: PPUSH
5494: PPUSH
5495: PPUSH
// begin for i := 1 to 2 do
5496: LD_ADDR_VAR 0 3
5500: PUSH
5501: DOUBLE
5502: LD_INT 1
5504: DEC
5505: ST_TO_ADDR
5506: LD_INT 2
5508: PUSH
5509: FOR_TO
5510: IFFALSE 5674
// begin pom := FilterUnitsInArea ( [ branka1 , branka2 ] [ i ] , [ [ f_side , barvy [ i ] ] , [ f_type , unit_vehicle ] ] ) ;
5512: LD_ADDR_VAR 0 2
5516: PUSH
5517: LD_INT 1
5519: PUSH
5520: LD_INT 2
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PUSH
5527: LD_VAR 0 3
5531: ARRAY
5532: PPUSH
5533: LD_INT 22
5535: PUSH
5536: LD_EXP 2
5540: PUSH
5541: LD_VAR 0 3
5545: ARRAY
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: PUSH
5551: LD_INT 21
5553: PUSH
5554: LD_INT 2
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PPUSH
5565: CALL_OW 70
5569: ST_TO_ADDR
// if pom then
5570: LD_VAR 0 2
5574: IFFALSE 5672
// begin drv := IsDrivenBy ( pom [ 1 ] ) ;
5576: LD_ADDR_VAR 0 1
5580: PUSH
5581: LD_VAR 0 2
5585: PUSH
5586: LD_INT 1
5588: ARRAY
5589: PPUSH
5590: CALL_OW 311
5594: ST_TO_ADDR
// if drv then
5595: LD_VAR 0 1
5599: IFFALSE 5610
// RemoveUnit ( drv ) ;
5601: LD_VAR 0 1
5605: PPUSH
5606: CALL_OW 64
// DestroyUnit ( pom [ 1 ] ) ;
5610: LD_VAR 0 2
5614: PUSH
5615: LD_INT 1
5617: ARRAY
5618: PPUSH
5619: CALL_OW 65
// stav := Replace ( stav , i , stav [ i ] + 1 ) ;
5623: LD_ADDR_EXP 5
5627: PUSH
5628: LD_EXP 5
5632: PPUSH
5633: LD_VAR 0 3
5637: PPUSH
5638: LD_EXP 5
5642: PUSH
5643: LD_VAR 0 3
5647: ARRAY
5648: PUSH
5649: LD_INT 1
5651: PLUS
5652: PPUSH
5653: CALL_OW 1
5657: ST_TO_ADDR
// novy_vojak ( i , drv ) ;
5658: LD_VAR 0 3
5662: PPUSH
5663: LD_VAR 0 1
5667: PPUSH
5668: CALL 3656 0 2
// end ; end ;
5672: GO 5509
5674: POP
5675: POP
// case Game_Type of 1 :
5676: LD_EXP 21
5680: PUSH
5681: LD_INT 1
5683: DOUBLE
5684: EQUAL
5685: IFTRUE 5689
5687: GO 5768
5689: POP
// begin Display_Strings := CurrentScore ;
5690: LD_ADDR_OWVAR 47
5694: PUSH
5695: CALL 5996 0 0
5699: ST_TO_ADDR
// if ( stav [ 1 ] >= goals_to_win ) or ( stav [ 2 ] >= goals_to_win ) then
5700: LD_EXP 5
5704: PUSH
5705: LD_INT 1
5707: ARRAY
5708: PUSH
5709: LD_EXP 15
5713: GREATEREQUAL
5714: PUSH
5715: LD_EXP 5
5719: PUSH
5720: LD_INT 2
5722: ARRAY
5723: PUSH
5724: LD_EXP 15
5728: GREATEREQUAL
5729: OR
5730: IFFALSE 5766
// if ( stav [ your_position ] >= goals_to_win ) then
5732: LD_EXP 5
5736: PUSH
5737: LD_EXP 3
5741: ARRAY
5742: PUSH
5743: LD_EXP 15
5747: GREATEREQUAL
5748: IFFALSE 5759
// EndMatch ( 1 ) else
5750: LD_INT 1
5752: PPUSH
5753: CALL 5899 0 1
5757: GO 5766
// EndMatch ( 0 ) ;
5759: LD_INT 0
5761: PPUSH
5762: CALL 5899 0 1
// end ; 2 :
5766: GO 5895
5768: LD_INT 2
5770: DOUBLE
5771: EQUAL
5772: IFTRUE 5776
5774: GO 5894
5776: POP
// if Time_Of_Game then
5777: LD_EXP 16
5781: IFFALSE 5815
// begin time_of_game := time_of_game - 1 ;
5783: LD_ADDR_EXP 16
5787: PUSH
5788: LD_EXP 16
5792: PUSH
5793: LD_INT 1
5795: MINUS
5796: ST_TO_ADDR
// Display_Strings := CurrentScore ^ TimeLeft ;
5797: LD_ADDR_OWVAR 47
5801: PUSH
5802: CALL 5996 0 0
5806: PUSH
5807: CALL 6062 0 0
5811: ADD
5812: ST_TO_ADDR
// end else
5813: GO 5892
// begin if ( stav [ 1 ] <> stav [ 2 ] ) then
5815: LD_EXP 5
5819: PUSH
5820: LD_INT 1
5822: ARRAY
5823: PUSH
5824: LD_EXP 5
5828: PUSH
5829: LD_INT 2
5831: ARRAY
5832: NONEQUAL
5833: IFFALSE 5875
// if ( stav [ your_position ] > stav [ enemy_position ] ) then
5835: LD_EXP 5
5839: PUSH
5840: LD_EXP 3
5844: ARRAY
5845: PUSH
5846: LD_EXP 5
5850: PUSH
5851: LD_EXP 4
5855: ARRAY
5856: GREATER
5857: IFFALSE 5868
// EndMatch ( 1 ) else
5859: LD_INT 1
5861: PPUSH
5862: CALL 5899 0 1
5866: GO 5875
// EndMatch ( 0 ) ;
5868: LD_INT 0
5870: PPUSH
5871: CALL 5899 0 1
// Display_Strings := CurrentScore ^ [ #Football-overtime ] ;
5875: LD_ADDR_OWVAR 47
5879: PUSH
5880: CALL 5996 0 0
5884: PUSH
5885: LD_STRING #Football-overtime
5887: PUSH
5888: EMPTY
5889: LIST
5890: ADD
5891: ST_TO_ADDR
// end ; end ;
5892: GO 5895
5894: POP
// enable ;
5895: ENABLE
// end ;
5896: PPOPN 3
5898: END
// function EndMatch ( win ) ; begin
5899: LD_INT 0
5901: PPUSH
// ExclusiveOn ;
5902: CALL_OW 4
// Display_Strings := CurrentScore ^ #Football-end ;
5906: LD_ADDR_OWVAR 47
5910: PUSH
5911: CALL 5996 0 0
5915: PUSH
5916: LD_STRING #Football-end
5918: ADD
5919: ST_TO_ADDR
// Wait ( 0 0$3 ) ;
5920: LD_INT 105
5922: PPUSH
5923: CALL_OW 67
// if IAmServer then
5927: CALL_OW 518
5931: IFFALSE 5940
// wait ( 0 0$1 ) ;
5933: LD_INT 35
5935: PPUSH
5936: CALL_OW 67
// case win of 0 :
5940: LD_VAR 0 1
5944: PUSH
5945: LD_INT 0
5947: DOUBLE
5948: EQUAL
5949: IFTRUE 5953
5951: GO 5960
5953: POP
// YouLostInMultiplayer ; 1 :
5954: CALL_OW 107
5958: GO 5991
5960: LD_INT 1
5962: DOUBLE
5963: EQUAL
5964: IFTRUE 5968
5966: GO 5990
5968: POP
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
5969: LD_EXP 20
5973: PUSH
5974: LD_OWVAR 2
5978: ARRAY
5979: PPUSH
5980: CALL 8078 0 1
// YouWinInMultiplayer ;
5984: CALL_OW 106
// end ; end ;
5988: GO 5991
5990: POP
// end ;
5991: LD_VAR 0 2
5995: RET
// export function CurrentScore ; begin
5996: LD_INT 0
5998: PPUSH
// Result := [ #Football-score , barvy [ 1 ] , stav [ 1 ] ] ^ [ #Football-score , barvy [ 2 ] , stav [ 2 ] ] ;
5999: LD_ADDR_VAR 0 1
6003: PUSH
6004: LD_STRING #Football-score
6006: PUSH
6007: LD_EXP 2
6011: PUSH
6012: LD_INT 1
6014: ARRAY
6015: PUSH
6016: LD_EXP 5
6020: PUSH
6021: LD_INT 1
6023: ARRAY
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: LIST
6029: PUSH
6030: LD_STRING #Football-score
6032: PUSH
6033: LD_EXP 2
6037: PUSH
6038: LD_INT 2
6040: ARRAY
6041: PUSH
6042: LD_EXP 5
6046: PUSH
6047: LD_INT 2
6049: ARRAY
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: ADD
6056: ST_TO_ADDR
// end ;
6057: LD_VAR 0 1
6061: RET
// export function TimeLeft ; begin
6062: LD_INT 0
6064: PPUSH
// Result := [ #Football-time , time_of_game ] ;
6065: LD_ADDR_VAR 0 1
6069: PUSH
6070: LD_STRING #Football-time
6072: PUSH
6073: LD_EXP 16
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: ST_TO_ADDR
// end ; end_of_file
6082: LD_VAR 0 1
6086: RET
// every 0 0$3 + 0 0$0.8 do var i ;
6087: GO 6089
6089: DISABLE
6090: LD_INT 0
6092: PPUSH
// begin case tick of 1 .. 1 1$0 :
6093: LD_OWVAR 1
6097: PUSH
6098: LD_INT 1
6100: DOUBLE
6101: GREATEREQUAL
6102: IFFALSE 6110
6104: LD_INT 2100
6106: DOUBLE
6107: LESSEQUAL
6108: IFTRUE 6112
6110: GO 6140
6112: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
6113: LD_EXP 11
6117: PUSH
6118: LD_INT 100
6120: DIVREAL
6121: PUSH
6122: LD_INT 350
6124: PPUSH
6125: LD_INT 1050
6127: PPUSH
6128: CALL_OW 12
6132: MUL
6133: PPUSH
6134: CALL_OW 67
6138: GO 6442
6140: LD_INT 2100
6142: PUSH
6143: LD_INT 1
6145: PLUS
6146: DOUBLE
6147: GREATEREQUAL
6148: IFFALSE 6156
6150: LD_INT 10500
6152: DOUBLE
6153: LESSEQUAL
6154: IFTRUE 6158
6156: GO 6186
6158: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
6159: LD_EXP 11
6163: PUSH
6164: LD_INT 100
6166: DIVREAL
6167: PUSH
6168: LD_INT 1050
6170: PPUSH
6171: LD_INT 1575
6173: PPUSH
6174: CALL_OW 12
6178: MUL
6179: PPUSH
6180: CALL_OW 67
6184: GO 6442
6186: LD_INT 10500
6188: PUSH
6189: LD_INT 1
6191: PLUS
6192: DOUBLE
6193: GREATEREQUAL
6194: IFFALSE 6202
6196: LD_INT 21000
6198: DOUBLE
6199: LESSEQUAL
6200: IFTRUE 6204
6202: GO 6232
6204: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
6205: LD_EXP 11
6209: PUSH
6210: LD_INT 100
6212: DIVREAL
6213: PUSH
6214: LD_INT 1575
6216: PPUSH
6217: LD_INT 2100
6219: PPUSH
6220: CALL_OW 12
6224: MUL
6225: PPUSH
6226: CALL_OW 67
6230: GO 6442
6232: LD_INT 21000
6234: PUSH
6235: LD_INT 1
6237: PLUS
6238: DOUBLE
6239: GREATEREQUAL
6240: IFFALSE 6248
6242: LD_INT 42000
6244: DOUBLE
6245: LESSEQUAL
6246: IFTRUE 6250
6248: GO 6278
6250: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
6251: LD_EXP 11
6255: PUSH
6256: LD_INT 100
6258: DIVREAL
6259: PUSH
6260: LD_INT 2100
6262: PPUSH
6263: LD_INT 2625
6265: PPUSH
6266: CALL_OW 12
6270: MUL
6271: PPUSH
6272: CALL_OW 67
6276: GO 6442
6278: LD_INT 42000
6280: PUSH
6281: LD_INT 1
6283: PLUS
6284: DOUBLE
6285: GREATEREQUAL
6286: IFFALSE 6294
6288: LD_INT 63000
6290: DOUBLE
6291: LESSEQUAL
6292: IFTRUE 6296
6294: GO 6324
6296: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
6297: LD_EXP 11
6301: PUSH
6302: LD_INT 100
6304: DIVREAL
6305: PUSH
6306: LD_INT 2625
6308: PPUSH
6309: LD_INT 3150
6311: PPUSH
6312: CALL_OW 12
6316: MUL
6317: PPUSH
6318: CALL_OW 67
6322: GO 6442
6324: LD_INT 63000
6326: PUSH
6327: LD_INT 1
6329: PLUS
6330: DOUBLE
6331: GREATEREQUAL
6332: IFFALSE 6340
6334: LD_INT 105000
6336: DOUBLE
6337: LESSEQUAL
6338: IFTRUE 6342
6340: GO 6370
6342: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 200 200$0 :
6343: LD_EXP 11
6347: PUSH
6348: LD_INT 100
6350: DIVREAL
6351: PUSH
6352: LD_INT 3150
6354: PPUSH
6355: LD_INT 3675
6357: PPUSH
6358: CALL_OW 12
6362: MUL
6363: PPUSH
6364: CALL_OW 67
6368: GO 6442
6370: LD_INT 105000
6372: PUSH
6373: LD_INT 1
6375: PLUS
6376: DOUBLE
6377: GREATEREQUAL
6378: IFFALSE 6386
6380: LD_INT 420000
6382: DOUBLE
6383: LESSEQUAL
6384: IFTRUE 6388
6386: GO 6416
6388: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
6389: LD_EXP 11
6393: PUSH
6394: LD_INT 100
6396: DIVREAL
6397: PUSH
6398: LD_INT 3675
6400: PPUSH
6401: LD_INT 4200
6403: PPUSH
6404: CALL_OW 12
6408: MUL
6409: PPUSH
6410: CALL_OW 67
6414: GO 6442
6416: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
6417: LD_EXP 11
6421: PUSH
6422: LD_INT 100
6424: DIVREAL
6425: PUSH
6426: LD_INT 4200
6428: PPUSH
6429: LD_INT 5250
6431: PPUSH
6432: CALL_OW 12
6436: MUL
6437: PPUSH
6438: CALL_OW 67
// if Prob ( 50 ) then
6442: LD_INT 50
6444: PPUSH
6445: CALL_OW 13
6449: IFFALSE 6510
// begin CreateCratesArea ( Rand ( 3 , 5 ) , base1 , true ) ;
6451: LD_INT 3
6453: PPUSH
6454: LD_INT 5
6456: PPUSH
6457: CALL_OW 12
6461: PPUSH
6462: LD_INT 7
6464: PPUSH
6465: LD_INT 1
6467: PPUSH
6468: CALL_OW 55
// wait ( Rand ( 0 0$0.1 , 0 0$20 ) ) ;
6472: LD_INT 4
6474: PPUSH
6475: LD_INT 700
6477: PPUSH
6478: CALL_OW 12
6482: PPUSH
6483: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , base2 , true ) ;
6487: LD_INT 3
6489: PPUSH
6490: LD_INT 5
6492: PPUSH
6493: CALL_OW 12
6497: PPUSH
6498: LD_INT 6
6500: PPUSH
6501: LD_INT 1
6503: PPUSH
6504: CALL_OW 55
// end else
6508: GO 6567
// begin CreateCratesArea ( Rand ( 3 , 5 ) , base2 , true ) ;
6510: LD_INT 3
6512: PPUSH
6513: LD_INT 5
6515: PPUSH
6516: CALL_OW 12
6520: PPUSH
6521: LD_INT 6
6523: PPUSH
6524: LD_INT 1
6526: PPUSH
6527: CALL_OW 55
// wait ( Rand ( 0 0$0.1 , 0 0$20 ) ) ;
6531: LD_INT 4
6533: PPUSH
6534: LD_INT 700
6536: PPUSH
6537: CALL_OW 12
6541: PPUSH
6542: CALL_OW 67
// CreateCratesArea ( Rand ( 3 , 5 ) , base1 , true ) ;
6546: LD_INT 3
6548: PPUSH
6549: LD_INT 5
6551: PPUSH
6552: CALL_OW 12
6556: PPUSH
6557: LD_INT 7
6559: PPUSH
6560: LD_INT 1
6562: PPUSH
6563: CALL_OW 55
// end ; wait ( 0 0$5 ) ;
6567: LD_INT 175
6569: PPUSH
6570: CALL_OW 67
// enable ;
6574: ENABLE
// end ;
6575: PPOPN 1
6577: END
// every 0 0$6 do
6578: GO 6580
6580: DISABLE
// begin case tick of 1 .. 1 1$0 :
6581: LD_OWVAR 1
6585: PUSH
6586: LD_INT 1
6588: DOUBLE
6589: GREATEREQUAL
6590: IFFALSE 6598
6592: LD_INT 2100
6594: DOUBLE
6595: LESSEQUAL
6596: IFTRUE 6600
6598: GO 6628
6600: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$5 , 0 0$15 ) ) ; 1 1$0 + 1 .. 5 5$0 :
6601: LD_EXP 11
6605: PUSH
6606: LD_INT 100
6608: DIVREAL
6609: PUSH
6610: LD_INT 175
6612: PPUSH
6613: LD_INT 525
6615: PPUSH
6616: CALL_OW 12
6620: MUL
6621: PPUSH
6622: CALL_OW 67
6626: GO 6930
6628: LD_INT 2100
6630: PUSH
6631: LD_INT 1
6633: PLUS
6634: DOUBLE
6635: GREATEREQUAL
6636: IFFALSE 6644
6638: LD_INT 10500
6640: DOUBLE
6641: LESSEQUAL
6642: IFTRUE 6646
6644: GO 6674
6646: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$22 ) ) ; 5 5$0 + 1 .. 10 10$0 :
6647: LD_EXP 11
6651: PUSH
6652: LD_INT 100
6654: DIVREAL
6655: PUSH
6656: LD_INT 525
6658: PPUSH
6659: LD_INT 770
6661: PPUSH
6662: CALL_OW 12
6666: MUL
6667: PPUSH
6668: CALL_OW 67
6672: GO 6930
6674: LD_INT 10500
6676: PUSH
6677: LD_INT 1
6679: PLUS
6680: DOUBLE
6681: GREATEREQUAL
6682: IFFALSE 6690
6684: LD_INT 21000
6686: DOUBLE
6687: LESSEQUAL
6688: IFTRUE 6692
6690: GO 6720
6692: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$23 , 0 0$30 ) ) ; 10 10$0 + 1 .. 20 20$0 :
6693: LD_EXP 11
6697: PUSH
6698: LD_INT 100
6700: DIVREAL
6701: PUSH
6702: LD_INT 805
6704: PPUSH
6705: LD_INT 1050
6707: PPUSH
6708: CALL_OW 12
6712: MUL
6713: PPUSH
6714: CALL_OW 67
6718: GO 6930
6720: LD_INT 21000
6722: PUSH
6723: LD_INT 1
6725: PLUS
6726: DOUBLE
6727: GREATEREQUAL
6728: IFFALSE 6736
6730: LD_INT 42000
6732: DOUBLE
6733: LESSEQUAL
6734: IFTRUE 6738
6736: GO 6766
6738: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$42 ) ) ; 20 20$0 + 1 .. 30 30$0 :
6739: LD_EXP 11
6743: PUSH
6744: LD_INT 100
6746: DIVREAL
6747: PUSH
6748: LD_INT 1050
6750: PPUSH
6751: LD_INT 1470
6753: PPUSH
6754: CALL_OW 12
6758: MUL
6759: PPUSH
6760: CALL_OW 67
6764: GO 6930
6766: LD_INT 42000
6768: PUSH
6769: LD_INT 1
6771: PLUS
6772: DOUBLE
6773: GREATEREQUAL
6774: IFFALSE 6782
6776: LD_INT 63000
6778: DOUBLE
6779: LESSEQUAL
6780: IFTRUE 6784
6782: GO 6812
6784: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$42 , 1 1$00 ) ) ; 30 30$0 + 1 .. 50 50$0 :
6785: LD_EXP 11
6789: PUSH
6790: LD_INT 100
6792: DIVREAL
6793: PUSH
6794: LD_INT 1470
6796: PPUSH
6797: LD_INT 2100
6799: PPUSH
6800: CALL_OW 12
6804: MUL
6805: PPUSH
6806: CALL_OW 67
6810: GO 6930
6812: LD_INT 63000
6814: PUSH
6815: LD_INT 1
6817: PLUS
6818: DOUBLE
6819: GREATEREQUAL
6820: IFFALSE 6828
6822: LD_INT 105000
6824: DOUBLE
6825: LESSEQUAL
6826: IFTRUE 6830
6828: GO 6858
6830: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$30 ) ) ; 50 50$0 + 1 .. 200 200$0 :
6831: LD_EXP 11
6835: PUSH
6836: LD_INT 100
6838: DIVREAL
6839: PUSH
6840: LD_INT 2100
6842: PPUSH
6843: LD_INT 3150
6845: PPUSH
6846: CALL_OW 12
6850: MUL
6851: PPUSH
6852: CALL_OW 67
6856: GO 6930
6858: LD_INT 105000
6860: PUSH
6861: LD_INT 1
6863: PLUS
6864: DOUBLE
6865: GREATEREQUAL
6866: IFFALSE 6874
6868: LD_INT 420000
6870: DOUBLE
6871: LESSEQUAL
6872: IFTRUE 6876
6874: GO 6904
6876: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 2 2$0 ) ) ; else
6877: LD_EXP 11
6881: PUSH
6882: LD_INT 100
6884: DIVREAL
6885: PUSH
6886: LD_INT 3150
6888: PPUSH
6889: LD_INT 4200
6891: PPUSH
6892: CALL_OW 12
6896: MUL
6897: PPUSH
6898: CALL_OW 67
6902: GO 6930
6904: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
6905: LD_EXP 11
6909: PUSH
6910: LD_INT 100
6912: DIVREAL
6913: PUSH
6914: LD_INT 4200
6916: PPUSH
6917: LD_INT 5250
6919: PPUSH
6920: CALL_OW 12
6924: MUL
6925: PPUSH
6926: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , mapa , true ) ;
6930: LD_INT 1
6932: PPUSH
6933: LD_INT 5
6935: PPUSH
6936: CALL_OW 12
6940: PPUSH
6941: LD_INT 5
6943: PPUSH
6944: LD_INT 1
6946: PPUSH
6947: CALL_OW 55
// enable ;
6951: ENABLE
// end ; end_of_file
6952: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6953: LD_VAR 0 1
6957: PPUSH
6958: CALL_OW 266
6962: PUSH
6963: LD_INT 0
6965: PUSH
6966: LD_INT 1
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: IN
6973: IFFALSE 6998
// SetBName ( b , @ & GetSide ( b ) ) ;
6975: LD_VAR 0 1
6979: PPUSH
6980: LD_STRING @
6982: PUSH
6983: LD_VAR 0 1
6987: PPUSH
6988: CALL_OW 255
6992: STR
6993: PPUSH
6994: CALL_OW 500
// end ;
6998: PPOPN 2
7000: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7001: LD_VAR 0 1
7005: PPUSH
7006: CALL_OW 266
7010: PUSH
7011: LD_INT 0
7013: PUSH
7014: LD_INT 1
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: IN
7021: IFFALSE 7046
// SetBName ( b , @ & GetSide ( b ) ) ;
7023: LD_VAR 0 1
7027: PPUSH
7028: LD_STRING @
7030: PUSH
7031: LD_VAR 0 1
7035: PPUSH
7036: CALL_OW 255
7040: STR
7041: PPUSH
7042: CALL_OW 500
// end ; end_of_file
7046: PPOPN 3
7048: END
// every 0 0$2 trigger CanWinLoose do
7049: CALL 7160 0 0
7053: IFFALSE 7159
7055: GO 7057
7057: DISABLE
// begin if not FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) then
7058: LD_INT 22
7060: PUSH
7061: LD_OWVAR 2
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: LD_INT 21
7072: PUSH
7073: LD_INT 1
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PPUSH
7084: CALL_OW 69
7088: NOT
7089: IFFALSE 7108
// begin if IAmServer then
7091: CALL_OW 518
7095: IFFALSE 7104
// wait ( 0 0$1 ) ;
7097: LD_INT 35
7099: PPUSH
7100: CALL_OW 67
// YouLostInMultiplayer ;
7104: CALL_OW 107
// end ; if not MultiplayerSideAlive ( barvy [ enemy_position ] ) then
7108: LD_EXP 2
7112: PUSH
7113: LD_EXP 4
7117: ARRAY
7118: PPUSH
7119: CALL_OW 108
7123: NOT
7124: IFFALSE 7158
// begin if IAmServer then
7126: CALL_OW 518
7130: IFFALSE 7139
// wait ( 0 0$1 ) ;
7132: LD_INT 35
7134: PPUSH
7135: CALL_OW 67
// SA_Win ( Side_Nations [ Your_side ] ) ;
7139: LD_EXP 20
7143: PUSH
7144: LD_OWVAR 2
7148: ARRAY
7149: PPUSH
7150: CALL 8078 0 1
// YouWinInMultiplayer ;
7154: CALL_OW 106
// end ; enable ;
7158: ENABLE
// end ;
7159: END
// function CanWinLoose ; begin
7160: LD_INT 0
7162: PPUSH
// Result := true ;
7163: LD_ADDR_VAR 0 1
7167: PUSH
7168: LD_INT 1
7170: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7171: CALL_OW 518
7175: PUSH
7176: CALL_OW 519
7180: PUSH
7181: LD_INT 0
7183: GREATER
7184: AND
7185: IFFALSE 7195
// Result := false ;
7187: LD_ADDR_VAR 0 1
7191: PUSH
7192: LD_INT 0
7194: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7195: CALL_OW 531
7199: PUSH
7200: CALL_OW 519
7204: PUSH
7205: LD_INT 1
7207: GREATER
7208: AND
7209: IFFALSE 7219
// Result := false ;
7211: LD_ADDR_VAR 0 1
7215: PUSH
7216: LD_INT 0
7218: ST_TO_ADDR
// end ; end_of_file
7219: LD_VAR 0 1
7223: RET
// var opoce_jmena ; function apeman_init ; begin
7224: LD_INT 0
7226: PPUSH
// uc_side := 0 ;
7227: LD_ADDR_OWVAR 20
7231: PUSH
7232: LD_INT 0
7234: ST_TO_ADDR
// uc_nation := nation_nature ;
7235: LD_ADDR_OWVAR 21
7239: PUSH
7240: LD_INT 0
7242: ST_TO_ADDR
// hc_class := class_apeman ;
7243: LD_ADDR_OWVAR 28
7247: PUSH
7248: LD_INT 12
7250: ST_TO_ADDR
// hc_basic_skills := [ Rand ( 0 , 3 ) , Rand ( 0 , 3 ) , Rand ( 0 , 3 ) , Rand ( 0 , 3 ) ] ;
7251: LD_ADDR_OWVAR 30
7255: PUSH
7256: LD_INT 0
7258: PPUSH
7259: LD_INT 3
7261: PPUSH
7262: CALL_OW 12
7266: PUSH
7267: LD_INT 0
7269: PPUSH
7270: LD_INT 3
7272: PPUSH
7273: CALL_OW 12
7277: PUSH
7278: LD_INT 0
7280: PPUSH
7281: LD_INT 3
7283: PPUSH
7284: CALL_OW 12
7288: PUSH
7289: LD_INT 0
7291: PPUSH
7292: LD_INT 3
7294: PPUSH
7295: CALL_OW 12
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 3 ) , Rand ( 0 , 3 ) , Rand ( 0 , 3 ) , Rand ( 0 , 3 ) ] ;
7306: LD_ADDR_OWVAR 31
7310: PUSH
7311: LD_INT 0
7313: PPUSH
7314: LD_INT 3
7316: PPUSH
7317: CALL_OW 12
7321: PUSH
7322: LD_INT 0
7324: PPUSH
7325: LD_INT 3
7327: PPUSH
7328: CALL_OW 12
7332: PUSH
7333: LD_INT 0
7335: PPUSH
7336: LD_INT 3
7338: PPUSH
7339: CALL_OW 12
7343: PUSH
7344: LD_INT 0
7346: PPUSH
7347: LD_INT 3
7349: PPUSH
7350: CALL_OW 12
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: ST_TO_ADDR
// hc_attr := [ Rand ( 7 , 16 ) , Rand ( 7 , 15 ) ] ;
7361: LD_ADDR_OWVAR 29
7365: PUSH
7366: LD_INT 7
7368: PPUSH
7369: LD_INT 16
7371: PPUSH
7372: CALL_OW 12
7376: PUSH
7377: LD_INT 7
7379: PPUSH
7380: LD_INT 15
7382: PPUSH
7383: CALL_OW 12
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: ST_TO_ADDR
// hc_sex := Prob ( 20 ) ;
7392: LD_ADDR_OWVAR 27
7396: PUSH
7397: LD_INT 20
7399: PPUSH
7400: CALL_OW 13
7404: ST_TO_ADDR
// hc_importance := 0 ;
7405: LD_ADDR_OWVAR 32
7409: PUSH
7410: LD_INT 0
7412: ST_TO_ADDR
// hc_agressivity := Rand ( - 30 , 30 ) ;
7413: LD_ADDR_OWVAR 35
7417: PUSH
7418: LD_INT 30
7420: NEG
7421: PPUSH
7422: LD_INT 30
7424: PPUSH
7425: CALL_OW 12
7429: ST_TO_ADDR
// if ( hc_sex = 0 ) and Prob ( 50 ) then
7430: LD_OWVAR 27
7434: PUSH
7435: LD_INT 0
7437: EQUAL
7438: PUSH
7439: LD_INT 50
7441: PPUSH
7442: CALL_OW 13
7446: AND
7447: IFFALSE 7479
// hc_name := opoce_jmena [ Rand ( 1 , opoce_jmena + 0 ) ] else
7449: LD_ADDR_OWVAR 26
7453: PUSH
7454: LD_LOC 3
7458: PUSH
7459: LD_INT 1
7461: PPUSH
7462: LD_LOC 3
7466: PUSH
7467: LD_INT 0
7469: PLUS
7470: PPUSH
7471: CALL_OW 12
7475: ARRAY
7476: ST_TO_ADDR
7477: GO 7487
// hc_name :=  ;
7479: LD_ADDR_OWVAR 26
7483: PUSH
7484: LD_STRING 
7486: ST_TO_ADDR
// end ;
7487: LD_VAR 0 1
7491: RET
// export function placni_opoce_na_mapu ; var apes ; begin
7492: LD_INT 0
7494: PPUSH
7495: PPUSH
// opoce_jmena = [ Tupoun , Opoce , Opka , Butrus , Bubu , Condor , Kuklajs , Simon , Ugh , Urgh , Argh , Aargh , Hrumph , Grumph , Oorg , Eghrr , Rrrr , Bark , Wraughrr , :-) , Semik , Hrgh , Hur , Yeargh , Marta , Batman , Barkman , Xcenovsk , David Love , Freon , Stoupik , Quik , CFC , Kvakous , Quak , Bad Ape , Druss , Sumys , Agent , Nazghul , Havran , Vrana , Havranek , Cendicek , Pluto , Chmura , Hujaj Kuklaj , Potrus , HZ , Furious Ape , Tapik , Mgr Zobak , Paja , Katcha , Dwarfy , Chrump , Shorty , Prcek , Charonorach , Steve , Just Ape ] ;
7496: LD_ADDR_LOC 3
7500: PUSH
7501: LD_STRING Tupoun
7503: PUSH
7504: LD_STRING Opoce
7506: PUSH
7507: LD_STRING Opka
7509: PUSH
7510: LD_STRING Butrus
7512: PUSH
7513: LD_STRING Bubu
7515: PUSH
7516: LD_STRING Condor
7518: PUSH
7519: LD_STRING Kuklajs
7521: PUSH
7522: LD_STRING Simon
7524: PUSH
7525: LD_STRING Ugh
7527: PUSH
7528: LD_STRING Urgh
7530: PUSH
7531: LD_STRING Argh
7533: PUSH
7534: LD_STRING Aargh
7536: PUSH
7537: LD_STRING Hrumph
7539: PUSH
7540: LD_STRING Grumph
7542: PUSH
7543: LD_STRING Oorg
7545: PUSH
7546: LD_STRING Eghrr
7548: PUSH
7549: LD_STRING Rrrr
7551: PUSH
7552: LD_STRING Bark
7554: PUSH
7555: LD_STRING Wraughrr
7557: PUSH
7558: LD_STRING :-)
7560: PUSH
7561: LD_STRING Semik
7563: PUSH
7564: LD_STRING Hrgh
7566: PUSH
7567: LD_STRING Hur
7569: PUSH
7570: LD_STRING Yeargh
7572: PUSH
7573: LD_STRING Marta
7575: PUSH
7576: LD_STRING Batman
7578: PUSH
7579: LD_STRING Barkman
7581: PUSH
7582: LD_STRING Xcenovsk
7584: PUSH
7585: LD_STRING David Love
7587: PUSH
7588: LD_STRING Freon
7590: PUSH
7591: LD_STRING Stoupik
7593: PUSH
7594: LD_STRING Quik
7596: PUSH
7597: LD_STRING CFC
7599: PUSH
7600: LD_STRING Kvakous
7602: PUSH
7603: LD_STRING Quak
7605: PUSH
7606: LD_STRING Bad Ape
7608: PUSH
7609: LD_STRING Druss
7611: PUSH
7612: LD_STRING Sumys
7614: PUSH
7615: LD_STRING Agent
7617: PUSH
7618: LD_STRING Nazghul
7620: PUSH
7621: LD_STRING Havran
7623: PUSH
7624: LD_STRING Vrana
7626: PUSH
7627: LD_STRING Havranek
7629: PUSH
7630: LD_STRING Cendicek
7632: PUSH
7633: LD_STRING Pluto
7635: PUSH
7636: LD_STRING Chmura
7638: PUSH
7639: LD_STRING Hujaj Kuklaj
7641: PUSH
7642: LD_STRING Potrus
7644: PUSH
7645: LD_STRING HZ
7647: PUSH
7648: LD_STRING Furious Ape
7650: PUSH
7651: LD_STRING Tapik
7653: PUSH
7654: LD_STRING Mgr Zobak
7656: PUSH
7657: LD_STRING Paja
7659: PUSH
7660: LD_STRING Katcha
7662: PUSH
7663: LD_STRING Dwarfy
7665: PUSH
7666: LD_STRING Chrump
7668: PUSH
7669: LD_STRING Shorty
7671: PUSH
7672: LD_STRING Prcek
7674: PUSH
7675: LD_STRING Charonorach
7677: PUSH
7678: LD_STRING Steve
7680: PUSH
7681: LD_STRING Just Ape
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: ST_TO_ADDR
// apes := 0 ;
7747: LD_ADDR_VAR 0 2
7751: PUSH
7752: LD_INT 0
7754: ST_TO_ADDR
// while apes < opoce_nahore do
7755: LD_VAR 0 2
7759: PUSH
7760: LD_EXP 12
7764: LESS
7765: IFFALSE 7821
// begin apeman_init ;
7767: CALL 7224 0 0
// PlaceUnitArea ( CreateHuman , base1 , false ) ;
7771: CALL_OW 44
7775: PPUSH
7776: LD_INT 7
7778: PPUSH
7779: LD_INT 0
7781: PPUSH
7782: CALL_OW 49
// apeman_init ;
7786: CALL 7224 0 0
// PlaceUnitArea ( CreateHuman , base2 , false ) ;
7790: CALL_OW 44
7794: PPUSH
7795: LD_INT 6
7797: PPUSH
7798: LD_INT 0
7800: PPUSH
7801: CALL_OW 49
// apes = apes + 1 ;
7805: LD_ADDR_VAR 0 2
7809: PUSH
7810: LD_VAR 0 2
7814: PUSH
7815: LD_INT 1
7817: PLUS
7818: ST_TO_ADDR
// end ;
7819: GO 7755
// apes := 0 ;
7821: LD_ADDR_VAR 0 2
7825: PUSH
7826: LD_INT 0
7828: ST_TO_ADDR
// while apes < opoce_dole do
7829: LD_VAR 0 2
7833: PUSH
7834: LD_EXP 13
7838: LESS
7839: IFFALSE 7876
// begin apeman_init ;
7841: CALL 7224 0 0
// PlaceUnitArea ( CreateHuman , mapa , false ) ;
7845: CALL_OW 44
7849: PPUSH
7850: LD_INT 5
7852: PPUSH
7853: LD_INT 0
7855: PPUSH
7856: CALL_OW 49
// apes = apes + 1 ;
7860: LD_ADDR_VAR 0 2
7864: PUSH
7865: LD_VAR 0 2
7869: PUSH
7870: LD_INT 1
7872: PLUS
7873: ST_TO_ADDR
// end ;
7874: GO 7829
// end ;
7876: LD_VAR 0 1
7880: RET
// every 2 2$1 trigger respawn_opoce do
7881: LD_EXP 14
7885: IFFALSE 8035
7887: GO 7889
7889: DISABLE
// begin wait ( Rand ( 0 0$1 , 1 1$0 ) ) ;
7890: LD_INT 35
7892: PPUSH
7893: LD_INT 2100
7895: PPUSH
7896: CALL_OW 12
7900: PPUSH
7901: CALL_OW 67
// if FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] , [ f_class , class_apeman_soldier ] , [ f_control , control_apeman ] ] ) < ( opoce_nahore * 2 + opoce_dole ) then
7905: LD_INT 2
7907: PUSH
7908: LD_INT 25
7910: PUSH
7911: LD_INT 12
7913: PUSH
7914: EMPTY
7915: LIST
7916: LIST
7917: PUSH
7918: LD_INT 25
7920: PUSH
7921: LD_INT 16
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PUSH
7928: LD_INT 25
7930: PUSH
7931: LD_INT 17
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 25
7940: PUSH
7941: LD_INT 15
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: LD_INT 33
7950: PUSH
7951: LD_INT 5
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: PPUSH
7966: CALL_OW 69
7970: PUSH
7971: LD_EXP 12
7975: PUSH
7976: LD_INT 2
7978: MUL
7979: PUSH
7980: LD_EXP 13
7984: PLUS
7985: LESS
7986: IFFALSE 8034
// begin apeman_init ;
7988: CALL 7224 0 0
// PlaceUnitArea ( CreateHuman , [ OpoceR1 , OpoceR2 , OpoceR3 , OpoceR4 ] [ Rand ( 1 , 4 ) ] , false ) ;
7992: CALL_OW 44
7996: PPUSH
7997: LD_INT 8
7999: PUSH
8000: LD_INT 9
8002: PUSH
8003: LD_INT 10
8005: PUSH
8006: LD_INT 11
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: PUSH
8015: LD_INT 1
8017: PPUSH
8018: LD_INT 4
8020: PPUSH
8021: CALL_OW 12
8025: ARRAY
8026: PPUSH
8027: LD_INT 0
8029: PPUSH
8030: CALL_OW 49
// end ; enable ;
8034: ENABLE
// end ; end_of_file
8035: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8036: LD_INT 0
8038: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8039: LD_VAR 0 1
8043: PPUSH
8044: CALL_OW 255
8048: PUSH
8049: LD_VAR 0 4
8053: EQUAL
8054: IFFALSE 8073
// begin SetAchievement ( ACH_RAD ) ;
8056: LD_STRING ACH_RAD
8058: PPUSH
8059: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8063: LD_STRING ACH_NL
8065: PPUSH
8066: LD_INT 1
8068: PPUSH
8069: CALL_OW 564
// end end ;
8073: LD_VAR 0 5
8077: RET
// export function SA_Win ( side ) ; begin
8078: LD_INT 0
8080: PPUSH
// case side of 1 :
8081: LD_VAR 0 1
8085: PUSH
8086: LD_INT 1
8088: DOUBLE
8089: EQUAL
8090: IFTRUE 8094
8092: GO 8107
8094: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8095: LD_STRING ACH_AH
8097: PPUSH
8098: LD_INT 1
8100: PPUSH
8101: CALL_OW 564
8105: GO 8270
8107: LD_INT 2
8109: DOUBLE
8110: EQUAL
8111: IFTRUE 8115
8113: GO 8128
8115: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8116: LD_STRING ACH_E
8118: PPUSH
8119: LD_INT 1
8121: PPUSH
8122: CALL_OW 564
8126: GO 8270
8128: LD_INT 3
8130: DOUBLE
8131: EQUAL
8132: IFTRUE 8136
8134: GO 8149
8136: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8137: LD_STRING ACH_OOL
8139: PPUSH
8140: LD_INT 1
8142: PPUSH
8143: CALL_OW 564
8147: GO 8270
8149: LD_INT 1
8151: PUSH
8152: LD_INT 2
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: DOUBLE
8159: EQUAL
8160: IFTRUE 8164
8162: GO 8189
8164: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8165: LD_STRING ACH_AH
8167: PPUSH
8168: LD_REAL  5.00000000000000E-0001
8171: PPUSH
8172: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8176: LD_STRING ACH_E
8178: PPUSH
8179: LD_REAL  5.00000000000000E-0001
8182: PPUSH
8183: CALL_OW 564
// end ; [ 2 , 3 ] :
8187: GO 8270
8189: LD_INT 2
8191: PUSH
8192: LD_INT 3
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: DOUBLE
8199: EQUAL
8200: IFTRUE 8204
8202: GO 8229
8204: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8205: LD_STRING ACH_OOL
8207: PPUSH
8208: LD_REAL  5.00000000000000E-0001
8211: PPUSH
8212: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8216: LD_STRING ACH_E
8218: PPUSH
8219: LD_REAL  5.00000000000000E-0001
8222: PPUSH
8223: CALL_OW 564
// end ; [ 3 , 1 ] :
8227: GO 8270
8229: LD_INT 3
8231: PUSH
8232: LD_INT 1
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: DOUBLE
8239: EQUAL
8240: IFTRUE 8244
8242: GO 8269
8244: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8245: LD_STRING ACH_AH
8247: PPUSH
8248: LD_REAL  5.00000000000000E-0001
8251: PPUSH
8252: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8256: LD_STRING ACH_OOL
8258: PPUSH
8259: LD_REAL  5.00000000000000E-0001
8262: PPUSH
8263: CALL_OW 564
// end ; end ;
8267: GO 8270
8269: POP
// end ; end_of_file
8270: LD_VAR 0 2
8274: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
8275: LD_INT 0
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
8283: PPUSH
8284: PPUSH
8285: PPUSH
// for i := 1 to 8 do
8286: LD_ADDR_VAR 0 2
8290: PUSH
8291: DOUBLE
8292: LD_INT 1
8294: DEC
8295: ST_TO_ADDR
8296: LD_INT 8
8298: PUSH
8299: FOR_TO
8300: IFFALSE 8684
// begin if Side_Positions [ i ] then
8302: LD_EXP 19
8306: PUSH
8307: LD_VAR 0 2
8311: ARRAY
8312: IFFALSE 8682
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
8314: LD_ADDR_VAR 0 7
8318: PUSH
8319: LD_INT 22
8321: PUSH
8322: LD_VAR 0 2
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: PUSH
8331: LD_INT 21
8333: PUSH
8334: LD_INT 1
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PPUSH
8345: CALL_OW 69
8349: PUSH
8350: LD_INT 0
8352: PLUS
8353: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8354: LD_ADDR_VAR 0 9
8358: PUSH
8359: LD_INT 22
8361: PUSH
8362: LD_VAR 0 2
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: PUSH
8371: LD_INT 2
8373: PUSH
8374: LD_INT 30
8376: PUSH
8377: LD_INT 0
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PUSH
8384: LD_INT 30
8386: PUSH
8387: LD_INT 1
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: LIST
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 69
8407: ST_TO_ADDR
// crates := 0 ;
8408: LD_ADDR_VAR 0 4
8412: PUSH
8413: LD_INT 0
8415: ST_TO_ADDR
// oil := 0 ;
8416: LD_ADDR_VAR 0 5
8420: PUSH
8421: LD_INT 0
8423: ST_TO_ADDR
// sib := 0 ;
8424: LD_ADDR_VAR 0 6
8428: PUSH
8429: LD_INT 0
8431: ST_TO_ADDR
// if bases then
8432: LD_VAR 0 9
8436: IFFALSE 8542
// begin for j in bases do
8438: LD_ADDR_VAR 0 3
8442: PUSH
8443: LD_VAR 0 9
8447: PUSH
8448: FOR_IN
8449: IFFALSE 8540
// begin base := GetBase ( j ) ;
8451: LD_ADDR_VAR 0 8
8455: PUSH
8456: LD_VAR 0 3
8460: PPUSH
8461: CALL_OW 274
8465: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
8466: LD_ADDR_VAR 0 4
8470: PUSH
8471: LD_VAR 0 4
8475: PUSH
8476: LD_VAR 0 8
8480: PPUSH
8481: LD_INT 1
8483: PPUSH
8484: CALL_OW 275
8488: PLUS
8489: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
8490: LD_ADDR_VAR 0 5
8494: PUSH
8495: LD_VAR 0 5
8499: PUSH
8500: LD_VAR 0 8
8504: PPUSH
8505: LD_INT 2
8507: PPUSH
8508: CALL_OW 275
8512: PLUS
8513: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
8514: LD_ADDR_VAR 0 6
8518: PUSH
8519: LD_VAR 0 6
8523: PUSH
8524: LD_VAR 0 8
8528: PPUSH
8529: LD_INT 3
8531: PPUSH
8532: CALL_OW 275
8536: PLUS
8537: ST_TO_ADDR
// end ;
8538: GO 8448
8540: POP
8541: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
8542: LD_STRING setSpecText(
8544: PUSH
8545: LD_VAR 0 2
8549: STR
8550: PUSH
8551: LD_STRING ,
8553: STR
8554: PUSH
8555: LD_INT 2
8557: STR
8558: PUSH
8559: LD_STRING ,
8561: STR
8562: PUSH
8563: LD_VAR 0 4
8567: STR
8568: PUSH
8569: LD_STRING )
8571: STR
8572: PPUSH
8573: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
8577: LD_STRING setSpecText(
8579: PUSH
8580: LD_VAR 0 2
8584: STR
8585: PUSH
8586: LD_STRING ,
8588: STR
8589: PUSH
8590: LD_INT 3
8592: STR
8593: PUSH
8594: LD_STRING ,
8596: STR
8597: PUSH
8598: LD_VAR 0 5
8602: STR
8603: PUSH
8604: LD_STRING )
8606: STR
8607: PPUSH
8608: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
8612: LD_STRING setSpecText(
8614: PUSH
8615: LD_VAR 0 2
8619: STR
8620: PUSH
8621: LD_STRING ,
8623: STR
8624: PUSH
8625: LD_INT 4
8627: STR
8628: PUSH
8629: LD_STRING ,
8631: STR
8632: PUSH
8633: LD_VAR 0 6
8637: STR
8638: PUSH
8639: LD_STRING )
8641: STR
8642: PPUSH
8643: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
8647: LD_STRING setSpecText(
8649: PUSH
8650: LD_VAR 0 2
8654: STR
8655: PUSH
8656: LD_STRING ,
8658: STR
8659: PUSH
8660: LD_INT 5
8662: STR
8663: PUSH
8664: LD_STRING ,
8666: STR
8667: PUSH
8668: LD_VAR 0 7
8672: STR
8673: PUSH
8674: LD_STRING )
8676: STR
8677: PPUSH
8678: CALL_OW 559
// end ; end ;
8682: GO 8299
8684: POP
8685: POP
// end ;
8686: LD_VAR 0 1
8690: RET
// every 0 0$1 do
8691: GO 8693
8693: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
8694: LD_STRING setSpecLogoNumber(
8696: PUSH
8697: LD_INT 2
8699: STR
8700: PUSH
8701: LD_STRING ,
8703: STR
8704: PUSH
8705: LD_INT 1
8707: STR
8708: PUSH
8709: LD_STRING )
8711: STR
8712: PPUSH
8713: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
8717: LD_STRING setSpecLogoNumber(
8719: PUSH
8720: LD_INT 3
8722: STR
8723: PUSH
8724: LD_STRING ,
8726: STR
8727: PUSH
8728: LD_INT 2
8730: STR
8731: PUSH
8732: LD_STRING )
8734: STR
8735: PPUSH
8736: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
8740: LD_STRING setSpecLogoNumber(
8742: PUSH
8743: LD_INT 4
8745: STR
8746: PUSH
8747: LD_STRING ,
8749: STR
8750: PUSH
8751: LD_INT 3
8753: STR
8754: PUSH
8755: LD_STRING )
8757: STR
8758: PPUSH
8759: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
8763: LD_STRING setSpecLogoNumber(
8765: PUSH
8766: LD_INT 5
8768: STR
8769: PUSH
8770: LD_STRING ,
8772: STR
8773: PUSH
8774: LD_INT 4
8776: STR
8777: PUSH
8778: LD_STRING )
8780: STR
8781: PPUSH
8782: CALL_OW 559
// end ;
8786: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
8787: LD_INT 2
8789: PUSH
8790: LD_INT 30
8792: PUSH
8793: LD_INT 0
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: PUSH
8800: LD_INT 30
8802: PUSH
8803: LD_INT 1
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: LIST
8814: PPUSH
8815: CALL_OW 69
8819: IFFALSE 8829
8821: GO 8823
8823: DISABLE
// begin enable ;
8824: ENABLE
// UpdateSpectatorBar ;
8825: CALL 8275 0 0
// end ;
8829: END
