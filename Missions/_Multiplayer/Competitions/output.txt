// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 368
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: LD_INT 6
 351: PUSH
 352: LD_INT 7
 354: PUSH
 355: LD_INT 8
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 368: LD_ADDR_EXP 36
 372: PUSH
 373: LD_EXP 31
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: EMPTY
 382: LIST
 383: DIFF
 384: PUSH
 385: LD_INT 1
 387: GREATER
 388: ST_TO_ADDR
// if Multiplayer then
 389: LD_OWVAR 4
 393: IFFALSE 600
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 395: LD_ADDR_EXP 1
 399: PUSH
 400: LD_INT 0
 402: PPUSH
 403: CALL_OW 426
 407: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 408: LD_ADDR_EXP 2
 412: PUSH
 413: LD_INT 1
 415: PPUSH
 416: CALL_OW 426
 420: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 421: LD_ADDR_EXP 3
 425: PUSH
 426: LD_INT 2
 428: PPUSH
 429: CALL_OW 426
 433: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 434: LD_ADDR_EXP 4
 438: PUSH
 439: LD_INT 3
 441: PPUSH
 442: CALL_OW 426
 446: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 447: LD_ADDR_EXP 5
 451: PUSH
 452: LD_INT 4
 454: PPUSH
 455: CALL_OW 426
 459: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 460: LD_ADDR_EXP 6
 464: PUSH
 465: LD_INT 5
 467: PPUSH
 468: CALL_OW 426
 472: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 473: LD_ADDR_EXP 7
 477: PUSH
 478: LD_INT 6
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 486: LD_ADDR_EXP 8
 490: PUSH
 491: LD_INT 10
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 499: LD_ADDR_EXP 9
 503: PUSH
 504: LD_INT 11
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 512: LD_ADDR_EXP 10
 516: PUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 525: LD_ADDR_EXP 11
 529: PUSH
 530: LD_INT 13
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 538: LD_ADDR_EXP 12
 542: PUSH
 543: LD_INT 14
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 551: LD_ADDR_EXP 13
 555: PUSH
 556: LD_INT 17
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 564: LD_ADDR_EXP 14
 568: PUSH
 569: LD_INT 20
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 577: LD_ADDR_VAR 0 3
 581: PUSH
 582: LD_INT 22
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// def_win_rules = 0 ;
 590: LD_ADDR_EXP 30
 594: PUSH
 595: LD_INT 0
 597: ST_TO_ADDR
// end else
 598: GO 732
// begin Randomize ;
 600: CALL_OW 10
// def_base_level := 2 ;
 604: LD_ADDR_EXP 1
 608: PUSH
 609: LD_INT 2
 611: ST_TO_ADDR
// def_amount_of_people := 2 ;
 612: LD_ADDR_EXP 2
 616: PUSH
 617: LD_INT 2
 619: ST_TO_ADDR
// def_skill_level := 1 ;
 620: LD_ADDR_EXP 3
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// def_starting_resources := 2 ;
 628: LD_ADDR_EXP 4
 632: PUSH
 633: LD_INT 2
 635: ST_TO_ADDR
// def_shipments_density := 50 ;
 636: LD_ADDR_EXP 5
 640: PUSH
 641: LD_INT 50
 643: ST_TO_ADDR
// def_extra_oil_deposits := 2 ;
 644: LD_ADDR_EXP 6
 648: PUSH
 649: LD_INT 2
 651: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 2
 659: ST_TO_ADDR
// def_shared_vision := 1 ;
 660: LD_ADDR_EXP 8
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// def_morale_flags := 1 ;
 668: LD_ADDR_EXP 9
 672: PUSH
 673: LD_INT 1
 675: ST_TO_ADDR
// def_siberite_detection := 1 ;
 676: LD_ADDR_EXP 10
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// def_people_respawning := 2 ;
 684: LD_ADDR_EXP 11
 688: PUSH
 689: LD_INT 2
 691: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 692: LD_ADDR_EXP 12
 696: PUSH
 697: LD_INT 3
 699: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 700: LD_ADDR_EXP 13
 704: PUSH
 705: LD_INT 2
 707: ST_TO_ADDR
// def_builduptime := 1 ;
 708: LD_ADDR_EXP 14
 712: PUSH
 713: LD_INT 1
 715: ST_TO_ADDR
// tech_level = 4 ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_INT 4
 723: ST_TO_ADDR
// def_win_rules = 0 ;
 724: LD_ADDR_EXP 30
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// end ; if isSGUI then
 732: LD_OWVAR 83
 736: IFFALSE 744
// setMpTechs ( ) else
 738: CALL 9996 0 0
 742: GO 757
// SetMpTechLevel ( tech_level + 1 ) ;
 744: LD_VAR 0 3
 748: PUSH
 749: LD_INT 1
 751: PLUS
 752: PPUSH
 753: CALL 10143 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 757: LD_ADDR_EXP 17
 761: PUSH
 762: LD_INT 0
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 1
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_EXP 1
 780: PUSH
 781: LD_INT 1
 783: PLUS
 784: ARRAY
 785: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 786: LD_ADDR_EXP 18
 790: PUSH
 791: LD_INT 0
 793: PUSH
 794: LD_INT 0
 796: PUSH
 797: LD_INT 3
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: LIST
 804: PUSH
 805: LD_EXP 1
 809: PUSH
 810: LD_INT 1
 812: PLUS
 813: ARRAY
 814: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 815: LD_ADDR_EXP 19
 819: PUSH
 820: LD_INT 9
 822: PUSH
 823: LD_INT 12
 825: PUSH
 826: LD_INT 15
 828: PUSH
 829: LD_INT 24
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: LD_EXP 2
 842: PUSH
 843: LD_INT 1
 845: PLUS
 846: ARRAY
 847: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 848: LD_ADDR_EXP 20
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_EXP 3
 875: PUSH
 876: LD_INT 1
 878: PLUS
 879: ARRAY
 880: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 881: LD_ADDR_EXP 22
 885: PUSH
 886: LD_INT 0
 888: PUSH
 889: LD_INT 0
 891: PUSH
 892: LD_INT 0
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 30
 902: PUSH
 903: LD_INT 0
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 50
 916: PUSH
 917: LD_INT 20
 919: PUSH
 920: LD_INT 0
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PUSH
 928: LD_INT 80
 930: PUSH
 931: LD_INT 40
 933: PUSH
 934: LD_INT 20
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: PUSH
 948: LD_EXP 4
 952: PUSH
 953: LD_INT 1
 955: PLUS
 956: ARRAY
 957: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 958: LD_ADDR_EXP 21
 962: PUSH
 963: LD_INT 10
 965: PUSH
 966: EMPTY
 967: LIST
 968: PUSH
 969: LD_INT 7
 971: PUSH
 972: LD_INT 14
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 6
 981: PUSH
 982: LD_INT 12
 984: PUSH
 985: LD_INT 18
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 10
 998: PUSH
 999: LD_INT 15
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: PUSH
1017: LD_EXP 4
1021: PUSH
1022: LD_INT 1
1024: PLUS
1025: ARRAY
1026: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
1027: LD_ADDR_EXP 23
1031: PUSH
1032: LD_INT 150
1034: PUSH
1035: LD_EXP 5
1039: MINUS
1040: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1041: LD_ADDR_EXP 27
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: LD_INT 10500
1051: PUSH
1052: LD_INT 6300
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: PUSH
1060: LD_EXP 11
1064: PUSH
1065: LD_INT 1
1067: PLUS
1068: ARRAY
1069: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1070: LD_ADDR_EXP 28
1074: PUSH
1075: LD_INT 0
1077: PUSH
1078: LD_INT 31500
1080: PUSH
1081: LD_INT 10500
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_EXP 11
1093: PUSH
1094: LD_INT 1
1096: PLUS
1097: ARRAY
1098: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1099: LD_ADDR_EXP 25
1103: PUSH
1104: LD_INT 0
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 3
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_EXP 12
1126: PUSH
1127: LD_INT 1
1129: PLUS
1130: ARRAY
1131: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1132: LD_ADDR_EXP 24
1136: PUSH
1137: LD_INT 1
1139: NEG
1140: PUSH
1141: LD_INT 350
1143: PUSH
1144: LD_INT 700
1146: PUSH
1147: LD_INT 1400
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_EXP 9
1164: PUSH
1165: LD_INT 1
1167: PLUS
1168: ARRAY
1169: ST_TO_ADDR
// battle_flags_id := [ ] ;
1170: LD_ADDR_EXP 44
1174: PUSH
1175: EMPTY
1176: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1177: LD_EXP 13
1181: PUSH
1182: LD_INT 0
1184: EQUAL
1185: IFFALSE 1197
// siberite_bomb_Delay = 0 else
1187: LD_ADDR_EXP 29
1191: PUSH
1192: LD_INT 0
1194: ST_TO_ADDR
1195: GO 1219
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1197: LD_ADDR_EXP 29
1201: PUSH
1202: LD_EXP 13
1206: PUSH
1207: LD_INT 1
1209: MINUS
1210: PUSH
1211: LD_INT 21000
1213: MUL
1214: PUSH
1215: LD_INT 1
1217: PLUS
1218: ST_TO_ADDR
// end ;
1219: LD_VAR 0 1
1223: RET
// function init_map ; var i , j ; begin
1224: LD_INT 0
1226: PPUSH
1227: PPUSH
1228: PPUSH
// normal_oil_deposits_locations := [ [ 42 , 72 ] , [ 86 , 6 ] , [ 159 , 5 ] , [ 214 , 68 ] , [ 298 , 184 ] , [ 259 , 264 ] , [ 182 , 252 ] , [ 99 , 179 ] ] ;
1229: LD_ADDR_EXP 40
1233: PUSH
1234: LD_INT 42
1236: PUSH
1237: LD_INT 72
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PUSH
1244: LD_INT 86
1246: PUSH
1247: LD_INT 6
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 159
1256: PUSH
1257: LD_INT 5
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 214
1266: PUSH
1267: LD_INT 68
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PUSH
1274: LD_INT 298
1276: PUSH
1277: LD_INT 184
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: PUSH
1284: LD_INT 259
1286: PUSH
1287: LD_INT 264
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 182
1296: PUSH
1297: LD_INT 252
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 99
1306: PUSH
1307: LD_INT 179
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 57 , 102 ] , [ 66 , 7 ] , [ 144 , 28 ] , [ 237 , 67 ] , [ 280 , 197 ] , [ 282 , 274 ] , [ 197 , 272 ] , [ 120 , 198 ] ] ;
1324: LD_ADDR_EXP 41
1328: PUSH
1329: LD_INT 57
1331: PUSH
1332: LD_INT 102
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 66
1341: PUSH
1342: LD_INT 7
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 144
1351: PUSH
1352: LD_INT 28
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 237
1361: PUSH
1362: LD_INT 67
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 280
1371: PUSH
1372: LD_INT 197
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 282
1381: PUSH
1382: LD_INT 274
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 197
1391: PUSH
1392: LD_INT 272
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 120
1401: PUSH
1402: LD_INT 198
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 68 , 74 ] , [ 81 , 28 ] , [ 142 , 9 ] , [ 229 , 64 ] , [ 293 , 204 ] , [ 274 , 275 ] , [ 206 , 252 ] , [ 106 , 200 ] ] ;
1419: LD_ADDR_EXP 42
1423: PUSH
1424: LD_INT 68
1426: PUSH
1427: LD_INT 74
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 81
1436: PUSH
1437: LD_INT 28
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PUSH
1444: LD_INT 142
1446: PUSH
1447: LD_INT 9
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: PUSH
1454: LD_INT 229
1456: PUSH
1457: LD_INT 64
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 293
1466: PUSH
1467: LD_INT 204
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 274
1476: PUSH
1477: LD_INT 275
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 206
1486: PUSH
1487: LD_INT 252
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 106
1496: PUSH
1497: LD_INT 200
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 73 , 79 ] , [ 72 , 21 ] , [ 144 , 5 ] , [ 254 , 95 ] , [ 275 , 166 ] , [ 277 , 252 ] , [ 213 , 272 ] , [ 115 , 174 ] ] ;
1514: LD_ADDR_EXP 43
1518: PUSH
1519: LD_INT 73
1521: PUSH
1522: LD_INT 79
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 72
1531: PUSH
1532: LD_INT 21
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 144
1541: PUSH
1542: LD_INT 5
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 254
1551: PUSH
1552: LD_INT 95
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 275
1561: PUSH
1562: LD_INT 166
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 277
1571: PUSH
1572: LD_INT 252
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 213
1581: PUSH
1582: LD_INT 272
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 115
1591: PUSH
1592: LD_INT 174
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: ST_TO_ADDR
// depot_def := [ [ 59 , 84 , 2 ] , [ 80 , 15 , 3 ] , [ 153 , 15 , 3 ] , [ 234 , 80 , 3 ] , [ 285 , 184 , 5 ] , [ 273 , 263 , 5 ] , [ 200 , 261 , 0 ] , [ 109 , 186 , 1 ] ] ;
1609: LD_ADDR_EXP 37
1613: PUSH
1614: LD_INT 59
1616: PUSH
1617: LD_INT 84
1619: PUSH
1620: LD_INT 2
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 80
1630: PUSH
1631: LD_INT 15
1633: PUSH
1634: LD_INT 3
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 153
1644: PUSH
1645: LD_INT 15
1647: PUSH
1648: LD_INT 3
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 234
1658: PUSH
1659: LD_INT 80
1661: PUSH
1662: LD_INT 3
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 285
1672: PUSH
1673: LD_INT 184
1675: PUSH
1676: LD_INT 5
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: PUSH
1684: LD_INT 273
1686: PUSH
1687: LD_INT 263
1689: PUSH
1690: LD_INT 5
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 200
1700: PUSH
1701: LD_INT 261
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: PUSH
1712: LD_INT 109
1714: PUSH
1715: LD_INT 186
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: ST_TO_ADDR
// for i in depot_def do
1736: LD_ADDR_VAR 0 2
1740: PUSH
1741: LD_EXP 37
1745: PUSH
1746: FOR_IN
1747: IFFALSE 1823
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1749: LD_ADDR_EXP 39
1753: PUSH
1754: LD_EXP 39
1758: PUSH
1759: LD_VAR 0 2
1763: PUSH
1764: LD_INT 1
1766: ARRAY
1767: PPUSH
1768: LD_VAR 0 2
1772: PUSH
1773: LD_INT 3
1775: ARRAY
1776: PPUSH
1777: LD_INT 4
1779: NEG
1780: PPUSH
1781: CALL_OW 272
1785: PUSH
1786: LD_VAR 0 2
1790: PUSH
1791: LD_INT 2
1793: ARRAY
1794: PPUSH
1795: LD_VAR 0 2
1799: PUSH
1800: LD_INT 3
1802: ARRAY
1803: PPUSH
1804: LD_INT 4
1806: NEG
1807: PPUSH
1808: CALL_OW 273
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: EMPTY
1818: LIST
1819: ADD
1820: ST_TO_ADDR
1821: GO 1746
1823: POP
1824: POP
// breastworks_def := [ [ [ 76 , 103 , 5 ] , [ 81 , 99 , 5 ] , [ 79 , 90 , 4 ] ] , [ [ 87 , 33 , 5 ] , [ 90 , 29 , 5 ] , [ 97 , 32 , 5 ] ] , [ [ 148 , 30 , 0 ] , [ 157 , 31 , 0 ] , [ 166 , 31 , 0 ] ] , [ [ 223 , 89 , 1 ] , [ 229 , 96 , 0 ] , [ 237 , 98 , 0 ] ] , [ [ 263 , 171 , 2 ] , [ 267 , 181 , 2 ] , [ 269 , 170 , 2 ] ] , [ [ 255 , 248 , 2 ] , [ 264 , 248 , 2 ] , [ 273 , 249 , 3 ] ] , [ [ 184 , 247 , 2 ] , [ 192 , 247 , 2 ] , [ 201 , 248 , 3 ] ] , [ [ 121 , 177 , 4 ] , [ 125 , 184 , 4 ] , [ 128 , 192 , 5 ] ] ] ;
1825: LD_ADDR_EXP 38
1829: PUSH
1830: LD_INT 76
1832: PUSH
1833: LD_INT 103
1835: PUSH
1836: LD_INT 5
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 81
1846: PUSH
1847: LD_INT 99
1849: PUSH
1850: LD_INT 5
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 79
1860: PUSH
1861: LD_INT 90
1863: PUSH
1864: LD_INT 4
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 87
1879: PUSH
1880: LD_INT 33
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: PUSH
1891: LD_INT 90
1893: PUSH
1894: LD_INT 29
1896: PUSH
1897: LD_INT 5
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: PUSH
1905: LD_INT 97
1907: PUSH
1908: LD_INT 32
1910: PUSH
1911: LD_INT 5
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 148
1926: PUSH
1927: LD_INT 30
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: LIST
1937: PUSH
1938: LD_INT 157
1940: PUSH
1941: LD_INT 31
1943: PUSH
1944: LD_INT 0
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 166
1954: PUSH
1955: LD_INT 31
1957: PUSH
1958: LD_INT 0
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: LIST
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 223
1973: PUSH
1974: LD_INT 89
1976: PUSH
1977: LD_INT 1
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 229
1987: PUSH
1988: LD_INT 96
1990: PUSH
1991: LD_INT 0
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 237
2001: PUSH
2002: LD_INT 98
2004: PUSH
2005: LD_INT 0
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_INT 263
2020: PUSH
2021: LD_INT 171
2023: PUSH
2024: LD_INT 2
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 267
2034: PUSH
2035: LD_INT 181
2037: PUSH
2038: LD_INT 2
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 269
2048: PUSH
2049: LD_INT 170
2051: PUSH
2052: LD_INT 2
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 255
2067: PUSH
2068: LD_INT 248
2070: PUSH
2071: LD_INT 2
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 264
2081: PUSH
2082: LD_INT 248
2084: PUSH
2085: LD_INT 2
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: LD_INT 273
2095: PUSH
2096: LD_INT 249
2098: PUSH
2099: LD_INT 3
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 184
2114: PUSH
2115: LD_INT 247
2117: PUSH
2118: LD_INT 2
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 192
2128: PUSH
2129: LD_INT 247
2131: PUSH
2132: LD_INT 2
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 201
2142: PUSH
2143: LD_INT 248
2145: PUSH
2146: LD_INT 3
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: LD_INT 121
2161: PUSH
2162: LD_INT 177
2164: PUSH
2165: LD_INT 4
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 125
2175: PUSH
2176: LD_INT 184
2178: PUSH
2179: LD_INT 4
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 128
2189: PUSH
2190: LD_INT 192
2192: PUSH
2193: LD_INT 5
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: ST_TO_ADDR
// for i = 1 to Side_Positions do
2216: LD_ADDR_VAR 0 2
2220: PUSH
2221: DOUBLE
2222: LD_INT 1
2224: DEC
2225: ST_TO_ADDR
2226: LD_EXP 34
2230: PUSH
2231: FOR_TO
2232: IFFALSE 2355
// begin if not Side_Positions [ i ] then
2234: LD_EXP 34
2238: PUSH
2239: LD_VAR 0 2
2243: ARRAY
2244: NOT
2245: IFFALSE 2249
// continue ;
2247: GO 2231
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2249: LD_EXP 40
2253: PUSH
2254: LD_EXP 34
2258: PUSH
2259: LD_VAR 0 2
2263: ARRAY
2264: ARRAY
2265: PUSH
2266: LD_INT 1
2268: ARRAY
2269: PPUSH
2270: LD_EXP 40
2274: PUSH
2275: LD_EXP 34
2279: PUSH
2280: LD_VAR 0 2
2284: ARRAY
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_INT 2
2293: PPUSH
2294: CALL_OW 62
// if def_extra_oil_deposits then
2298: LD_EXP 6
2302: IFFALSE 2353
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2304: LD_EXP 41
2308: PUSH
2309: LD_EXP 34
2313: PUSH
2314: LD_VAR 0 2
2318: ARRAY
2319: ARRAY
2320: PUSH
2321: LD_INT 1
2323: ARRAY
2324: PPUSH
2325: LD_EXP 41
2329: PUSH
2330: LD_EXP 34
2334: PUSH
2335: LD_VAR 0 2
2339: ARRAY
2340: ARRAY
2341: PUSH
2342: LD_INT 2
2344: ARRAY
2345: PPUSH
2346: LD_INT 2
2348: PPUSH
2349: CALL_OW 62
// end ;
2353: GO 2231
2355: POP
2356: POP
// if def_extra_sib_deposits then
2357: LD_EXP 7
2361: IFFALSE 2508
// for i = 1 to Side_Positions do
2363: LD_ADDR_VAR 0 2
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_EXP 34
2377: PUSH
2378: FOR_TO
2379: IFFALSE 2506
// begin if not Side_Positions [ i ] then
2381: LD_EXP 34
2385: PUSH
2386: LD_VAR 0 2
2390: ARRAY
2391: NOT
2392: IFFALSE 2396
// continue ;
2394: GO 2378
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2396: LD_EXP 42
2400: PUSH
2401: LD_EXP 34
2405: PUSH
2406: LD_VAR 0 2
2410: ARRAY
2411: ARRAY
2412: PUSH
2413: LD_INT 1
2415: ARRAY
2416: PPUSH
2417: LD_EXP 42
2421: PUSH
2422: LD_EXP 34
2426: PUSH
2427: LD_VAR 0 2
2431: ARRAY
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 3
2440: PPUSH
2441: CALL_OW 62
// if def_extra_sib_deposits = 2 then
2445: LD_EXP 7
2449: PUSH
2450: LD_INT 2
2452: EQUAL
2453: IFFALSE 2504
// CreateDepositXY ( extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2455: LD_EXP 43
2459: PUSH
2460: LD_EXP 34
2464: PUSH
2465: LD_VAR 0 2
2469: ARRAY
2470: ARRAY
2471: PUSH
2472: LD_INT 1
2474: ARRAY
2475: PPUSH
2476: LD_EXP 43
2480: PUSH
2481: LD_EXP 34
2485: PUSH
2486: LD_VAR 0 2
2490: ARRAY
2491: ARRAY
2492: PUSH
2493: LD_INT 2
2495: ARRAY
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: CALL_OW 62
// end ;
2504: GO 2378
2506: POP
2507: POP
// end ;
2508: LD_VAR 0 1
2512: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2513: LD_INT 0
2515: PPUSH
2516: PPUSH
2517: PPUSH
// if not Team_Game then
2518: LD_EXP 36
2522: NOT
2523: IFFALSE 2621
// begin for i = 1 to 8 do
2525: LD_ADDR_VAR 0 2
2529: PUSH
2530: DOUBLE
2531: LD_INT 1
2533: DEC
2534: ST_TO_ADDR
2535: LD_INT 8
2537: PUSH
2538: FOR_TO
2539: IFFALSE 2617
// for j = 1 to 8 do
2541: LD_ADDR_VAR 0 3
2545: PUSH
2546: DOUBLE
2547: LD_INT 1
2549: DEC
2550: ST_TO_ADDR
2551: LD_INT 8
2553: PUSH
2554: FOR_TO
2555: IFFALSE 2613
// if i <> j then
2557: LD_VAR 0 2
2561: PUSH
2562: LD_VAR 0 3
2566: NONEQUAL
2567: IFFALSE 2591
// SetAttitude ( i , j , att_neutral , true ) else
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_VAR 0 3
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: LD_INT 1
2584: PPUSH
2585: CALL_OW 80
2589: GO 2611
// SetAttitude ( i , j , att_friend , true ) ;
2591: LD_VAR 0 2
2595: PPUSH
2596: LD_VAR 0 3
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: CALL_OW 80
2611: GO 2554
2613: POP
2614: POP
2615: GO 2538
2617: POP
2618: POP
// end else
2619: GO 2796
// begin if def_shared_vision then
2621: LD_EXP 8
2625: IFFALSE 2690
// begin for i in Teams do
2627: LD_ADDR_VAR 0 2
2631: PUSH
2632: LD_EXP 32
2636: PUSH
2637: FOR_IN
2638: IFFALSE 2688
// for j = 2 to i do
2640: LD_ADDR_VAR 0 3
2644: PUSH
2645: DOUBLE
2646: LD_INT 2
2648: DEC
2649: ST_TO_ADDR
2650: LD_VAR 0 2
2654: PUSH
2655: FOR_TO
2656: IFFALSE 2684
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2658: LD_VAR 0 2
2662: PUSH
2663: LD_VAR 0 3
2667: ARRAY
2668: PPUSH
2669: LD_VAR 0 2
2673: PUSH
2674: LD_INT 1
2676: ARRAY
2677: PPUSH
2678: CALL_OW 343
2682: GO 2655
2684: POP
2685: POP
2686: GO 2637
2688: POP
2689: POP
// end ; for i = 1 to 8 do
2690: LD_ADDR_VAR 0 2
2694: PUSH
2695: DOUBLE
2696: LD_INT 1
2698: DEC
2699: ST_TO_ADDR
2700: LD_INT 8
2702: PUSH
2703: FOR_TO
2704: IFFALSE 2794
// for j = 1 to 8 do
2706: LD_ADDR_VAR 0 3
2710: PUSH
2711: DOUBLE
2712: LD_INT 1
2714: DEC
2715: ST_TO_ADDR
2716: LD_INT 8
2718: PUSH
2719: FOR_TO
2720: IFFALSE 2790
// if Side_Teams [ i ] = Side_Teams [ j ] then
2722: LD_EXP 31
2726: PUSH
2727: LD_VAR 0 2
2731: ARRAY
2732: PUSH
2733: LD_EXP 31
2737: PUSH
2738: LD_VAR 0 3
2742: ARRAY
2743: EQUAL
2744: IFFALSE 2768
// SetAttitude ( i , j , att_friend , true ) else
2746: LD_VAR 0 2
2750: PPUSH
2751: LD_VAR 0 3
2755: PPUSH
2756: LD_INT 1
2758: PPUSH
2759: LD_INT 1
2761: PPUSH
2762: CALL_OW 80
2766: GO 2788
// SetAttitude ( i , j , att_enemy , true ) ;
2768: LD_VAR 0 2
2772: PPUSH
2773: LD_VAR 0 3
2777: PPUSH
2778: LD_INT 2
2780: PPUSH
2781: LD_INT 1
2783: PPUSH
2784: CALL_OW 80
2788: GO 2719
2790: POP
2791: POP
2792: GO 2703
2794: POP
2795: POP
// end ; end ;
2796: LD_VAR 0 1
2800: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2801: LD_INT 0
2803: PPUSH
2804: PPUSH
2805: PPUSH
2806: PPUSH
// result := [ ] ;
2807: LD_ADDR_VAR 0 7
2811: PUSH
2812: EMPTY
2813: ST_TO_ADDR
// for i := 1 to count do
2814: LD_ADDR_VAR 0 8
2818: PUSH
2819: DOUBLE
2820: LD_INT 1
2822: DEC
2823: ST_TO_ADDR
2824: LD_VAR 0 1
2828: PUSH
2829: FOR_TO
2830: IFFALSE 3248
// begin uc_direction := Rand ( 0 , 5 ) ;
2832: LD_ADDR_OWVAR 24
2836: PUSH
2837: LD_INT 0
2839: PPUSH
2840: LD_INT 5
2842: PPUSH
2843: CALL_OW 12
2847: ST_TO_ADDR
// if commander then
2848: LD_LOC 1
2852: IFFALSE 2961
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2854: LD_ADDR_OWVAR 26
2858: PUSH
2859: LD_OWVAR 19
2863: PUSH
2864: LD_OWVAR 20
2868: ARRAY
2869: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2870: LD_INT 1
2872: PPUSH
2873: LD_INT 2
2875: PPUSH
2876: CALL_OW 12
2880: PPUSH
2881: LD_VAR 0 2
2885: PPUSH
2886: LD_EXP 20
2890: PUSH
2891: LD_INT 2
2893: PLUS
2894: PPUSH
2895: CALL_OW 380
// hc_importance := 105 ;
2899: LD_ADDR_OWVAR 32
2903: PUSH
2904: LD_INT 105
2906: ST_TO_ADDR
// commander := false ;
2907: LD_ADDR_LOC 1
2911: PUSH
2912: LD_INT 0
2914: ST_TO_ADDR
// if Multiplayer then
2915: LD_OWVAR 4
2919: IFFALSE 2959
// begin hc_gallery := MULTIAVATARS ;
2921: LD_ADDR_OWVAR 33
2925: PUSH
2926: LD_STRING MULTIAVATARS
2928: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2929: LD_ADDR_OWVAR 34
2933: PUSH
2934: LD_OWVAR 20
2938: PPUSH
2939: CALL_OW 525
2943: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2944: LD_ADDR_OWVAR 27
2948: PUSH
2949: LD_OWVAR 20
2953: PPUSH
2954: CALL_OW 526
2958: ST_TO_ADDR
// end ; end else
2959: GO 3024
// begin hc_name :=  ;
2961: LD_ADDR_OWVAR 26
2965: PUSH
2966: LD_STRING 
2968: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2969: LD_INT 1
2971: PPUSH
2972: LD_INT 2
2974: PPUSH
2975: CALL_OW 12
2979: PPUSH
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_EXP 20
2989: PPUSH
2990: CALL_OW 380
// hc_importance := 0 ;
2994: LD_ADDR_OWVAR 32
2998: PUSH
2999: LD_INT 0
3001: ST_TO_ADDR
// if Multiplayer then
3002: LD_OWVAR 4
3006: IFFALSE 3024
// begin hc_gallery :=  ;
3008: LD_ADDR_OWVAR 33
3012: PUSH
3013: LD_STRING 
3015: ST_TO_ADDR
// hc_face_number := 0 ;
3016: LD_ADDR_OWVAR 34
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3024: LD_ADDR_VAR 0 10
3028: PUSH
3029: CALL_OW 44
3033: ST_TO_ADDR
// if global_defined then
3034: LD_LOC 3
3038: IFFALSE 3178
// begin if ( cl = class_soldier ) then
3040: LD_VAR 0 2
3044: PUSH
3045: LD_INT 1
3047: EQUAL
3048: IFFALSE 3068
// j := i + soldiers_created else
3050: LD_ADDR_VAR 0 9
3054: PUSH
3055: LD_VAR 0 8
3059: PUSH
3060: LD_LOC 4
3064: PLUS
3065: ST_TO_ADDR
3066: GO 3078
// j := i ;
3068: LD_ADDR_VAR 0 9
3072: PUSH
3073: LD_VAR 0 8
3077: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3078: LD_LOC 2
3082: PUSH
3083: LD_VAR 0 2
3087: ARRAY
3088: PUSH
3089: LD_VAR 0 9
3093: ARRAY
3094: PPUSH
3095: LD_VAR 0 10
3099: PPUSH
3100: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3104: LD_VAR 0 10
3108: PPUSH
3109: LD_INT 2
3111: PPUSH
3112: LD_LOC 2
3116: PUSH
3117: LD_VAR 0 2
3121: ARRAY
3122: PUSH
3123: LD_VAR 0 9
3127: ARRAY
3128: PPUSH
3129: LD_INT 2
3131: PPUSH
3132: CALL_OW 260
3136: PPUSH
3137: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3141: LD_VAR 0 10
3145: PPUSH
3146: LD_INT 1
3148: PPUSH
3149: LD_LOC 2
3153: PUSH
3154: LD_VAR 0 2
3158: ARRAY
3159: PUSH
3160: LD_VAR 0 9
3164: ARRAY
3165: PPUSH
3166: LD_INT 1
3168: PPUSH
3169: CALL_OW 260
3173: PPUSH
3174: CALL_OW 239
// end ; if building then
3178: LD_VAR 0 6
3182: IFFALSE 3200
// PlaceHumanInUnit ( un , building ) else
3184: LD_VAR 0 10
3188: PPUSH
3189: LD_VAR 0 6
3193: PPUSH
3194: CALL_OW 52
3198: GO 3227
// PlaceUnitXYR ( un , x , y , r , false ) ;
3200: LD_VAR 0 10
3204: PPUSH
3205: LD_VAR 0 3
3209: PPUSH
3210: LD_VAR 0 4
3214: PPUSH
3215: LD_VAR 0 5
3219: PPUSH
3220: LD_INT 0
3222: PPUSH
3223: CALL_OW 50
// result := result ^ [ un ] ;
3227: LD_ADDR_VAR 0 7
3231: PUSH
3232: LD_VAR 0 7
3236: PUSH
3237: LD_VAR 0 10
3241: PUSH
3242: EMPTY
3243: LIST
3244: ADD
3245: ST_TO_ADDR
// end ;
3246: GO 2829
3248: POP
3249: POP
// if not global_defined then
3250: LD_LOC 3
3254: NOT
3255: IFFALSE 3333
// if ( global_units >= cl ) then
3257: LD_LOC 2
3261: PUSH
3262: LD_VAR 0 2
3266: GREATEREQUAL
3267: IFFALSE 3308
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3269: LD_ADDR_LOC 2
3273: PUSH
3274: LD_LOC 2
3278: PPUSH
3279: LD_VAR 0 2
3283: PPUSH
3284: LD_LOC 2
3288: PUSH
3289: LD_VAR 0 2
3293: ARRAY
3294: PUSH
3295: LD_VAR 0 7
3299: ADD
3300: PPUSH
3301: CALL_OW 1
3305: ST_TO_ADDR
3306: GO 3333
// global_units := Replace ( global_units , cl , result ) ;
3308: LD_ADDR_LOC 2
3312: PUSH
3313: LD_LOC 2
3317: PPUSH
3318: LD_VAR 0 2
3322: PPUSH
3323: LD_VAR 0 7
3327: PPUSH
3328: CALL_OW 1
3332: ST_TO_ADDR
// if commander then
3333: LD_LOC 1
3337: IFFALSE 3384
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3339: LD_ADDR_EXP 45
3343: PUSH
3344: LD_EXP 45
3348: PPUSH
3349: LD_OWVAR 20
3353: PPUSH
3354: LD_EXP 45
3358: PUSH
3359: LD_OWVAR 20
3363: ARRAY
3364: PUSH
3365: LD_VAR 0 10
3369: ADD
3370: PPUSH
3371: CALL_OW 1
3375: ST_TO_ADDR
// commander := false ;
3376: LD_ADDR_LOC 1
3380: PUSH
3381: LD_INT 0
3383: ST_TO_ADDR
// end ; end ;
3384: LD_VAR 0 7
3388: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3389: LD_INT 0
3391: PPUSH
3392: PPUSH
3393: PPUSH
3394: PPUSH
3395: PPUSH
3396: PPUSH
3397: PPUSH
3398: PPUSH
3399: PPUSH
// if side in [ 0 , 9 ] then
3400: LD_VAR 0 1
3404: PUSH
3405: LD_INT 0
3407: PUSH
3408: LD_INT 9
3410: PUSH
3411: EMPTY
3412: LIST
3413: LIST
3414: IN
3415: IFFALSE 3419
// exit ;
3417: GO 4469
// pos := Side_Positions [ side ] ;
3419: LD_ADDR_VAR 0 3
3423: PUSH
3424: LD_EXP 34
3428: PUSH
3429: LD_VAR 0 1
3433: ARRAY
3434: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3435: LD_ADDR_OWVAR 21
3439: PUSH
3440: LD_EXP 35
3444: PUSH
3445: LD_VAR 0 1
3449: ARRAY
3450: ST_TO_ADDR
// uc_side := side ;
3451: LD_ADDR_OWVAR 20
3455: PUSH
3456: LD_VAR 0 1
3460: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3461: LD_ADDR_VAR 0 4
3465: PUSH
3466: LD_EXP 37
3470: PUSH
3471: LD_VAR 0 3
3475: ARRAY
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3481: LD_ADDR_VAR 0 5
3485: PUSH
3486: LD_EXP 37
3490: PUSH
3491: LD_VAR 0 3
3495: ARRAY
3496: PUSH
3497: LD_INT 2
3499: ARRAY
3500: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3501: LD_ADDR_VAR 0 6
3505: PUSH
3506: LD_EXP 37
3510: PUSH
3511: LD_VAR 0 3
3515: ARRAY
3516: PUSH
3517: LD_INT 3
3519: ARRAY
3520: ST_TO_ADDR
// if is_depot then
3521: LD_EXP 17
3525: IFFALSE 3658
// begin bc_type = b_depot ;
3527: LD_ADDR_OWVAR 42
3531: PUSH
3532: LD_INT 0
3534: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3535: LD_ADDR_VAR 0 10
3539: PUSH
3540: LD_VAR 0 4
3544: PPUSH
3545: LD_VAR 0 5
3549: PPUSH
3550: LD_VAR 0 6
3554: PPUSH
3555: CALL_OW 47
3559: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3560: LD_VAR 0 10
3564: PPUSH
3565: LD_STRING @
3567: PUSH
3568: LD_VAR 0 1
3572: STR
3573: PPUSH
3574: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3578: LD_VAR 0 10
3582: PPUSH
3583: CALL_OW 274
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: LD_EXP 22
3595: PUSH
3596: LD_INT 1
3598: ARRAY
3599: PPUSH
3600: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3604: LD_VAR 0 10
3608: PPUSH
3609: CALL_OW 274
3613: PPUSH
3614: LD_INT 2
3616: PPUSH
3617: LD_EXP 22
3621: PUSH
3622: LD_INT 2
3624: ARRAY
3625: PPUSH
3626: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3630: LD_VAR 0 10
3634: PPUSH
3635: CALL_OW 274
3639: PPUSH
3640: LD_INT 3
3642: PPUSH
3643: LD_EXP 22
3647: PUSH
3648: LD_INT 3
3650: ARRAY
3651: PPUSH
3652: CALL_OW 277
// end else
3656: GO 3802
// begin for i := 1 to 3 do
3658: LD_ADDR_VAR 0 7
3662: PUSH
3663: DOUBLE
3664: LD_INT 1
3666: DEC
3667: ST_TO_ADDR
3668: LD_INT 3
3670: PUSH
3671: FOR_TO
3672: IFFALSE 3800
// begin r := starting_resources [ i ] ;
3674: LD_ADDR_VAR 0 8
3678: PUSH
3679: LD_EXP 22
3683: PUSH
3684: LD_VAR 0 7
3688: ARRAY
3689: ST_TO_ADDR
// while r >= 10 do
3690: LD_VAR 0 8
3694: PUSH
3695: LD_INT 10
3697: GREATEREQUAL
3698: IFFALSE 3798
// if r > 50 then
3700: LD_VAR 0 8
3704: PUSH
3705: LD_INT 50
3707: GREATER
3708: IFFALSE 3754
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3710: LD_VAR 0 7
3714: PPUSH
3715: LD_INT 5
3717: PPUSH
3718: LD_VAR 0 4
3722: PPUSH
3723: LD_VAR 0 5
3727: PPUSH
3728: LD_INT 4
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 60
// r := r - 50 ;
3738: LD_ADDR_VAR 0 8
3742: PUSH
3743: LD_VAR 0 8
3747: PUSH
3748: LD_INT 50
3750: MINUS
3751: ST_TO_ADDR
// end else
3752: GO 3796
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3754: LD_VAR 0 7
3758: PPUSH
3759: LD_VAR 0 8
3763: PUSH
3764: LD_INT 10
3766: DIV
3767: PPUSH
3768: LD_VAR 0 4
3772: PPUSH
3773: LD_VAR 0 5
3777: PPUSH
3778: LD_INT 4
3780: PPUSH
3781: LD_INT 0
3783: PPUSH
3784: CALL_OW 60
// r := 0 ;
3788: LD_ADDR_VAR 0 8
3792: PUSH
3793: LD_INT 0
3795: ST_TO_ADDR
// end ;
3796: GO 3690
// end ;
3798: GO 3671
3800: POP
3801: POP
// end ; for r in starting_crates do
3802: LD_ADDR_VAR 0 8
3806: PUSH
3807: LD_EXP 21
3811: PUSH
3812: FOR_IN
3813: IFFALSE 3845
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3815: LD_INT 1
3817: PPUSH
3818: LD_INT 5
3820: PPUSH
3821: LD_VAR 0 4
3825: PPUSH
3826: LD_VAR 0 5
3830: PPUSH
3831: LD_VAR 0 8
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: CALL_OW 60
3843: GO 3812
3845: POP
3846: POP
// if def_morale_flags then
3847: LD_EXP 9
3851: IFFALSE 3990
// begin x := start_def [ pos ] [ 1 ] ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_EXP 39
3862: PUSH
3863: LD_VAR 0 3
3867: ARRAY
3868: PUSH
3869: LD_INT 1
3871: ARRAY
3872: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3873: LD_ADDR_VAR 0 5
3877: PUSH
3878: LD_EXP 39
3882: PUSH
3883: LD_VAR 0 3
3887: ARRAY
3888: PUSH
3889: LD_INT 2
3891: ARRAY
3892: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3893: LD_VAR 0 4
3897: PPUSH
3898: LD_VAR 0 5
3902: PPUSH
3903: LD_INT 12
3905: PPUSH
3906: LD_INT 2
3908: PPUSH
3909: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3913: LD_ADDR_EXP 44
3917: PUSH
3918: LD_EXP 44
3922: PUSH
3923: LD_VAR 0 1
3927: PPUSH
3928: LD_VAR 0 4
3932: PPUSH
3933: LD_VAR 0 5
3937: PPUSH
3938: LD_INT 1
3940: PUSH
3941: LD_INT 100
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: PUSH
3948: LD_INT 2
3950: PUSH
3951: LD_INT 50
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 3
3960: PUSH
3961: LD_INT 20
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: PUSH
3968: LD_INT 20
3970: PUSH
3971: LD_INT 100
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: PPUSH
3984: CALL_OW 418
3988: ADD
3989: ST_TO_ADDR
// end ; commander := true ;
3990: LD_ADDR_LOC 1
3994: PUSH
3995: LD_INT 1
3997: ST_TO_ADDR
// soldiers_created := 0 ;
3998: LD_ADDR_LOC 4
4002: PUSH
4003: LD_INT 0
4005: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4006: LD_ADDR_VAR 0 7
4010: PUSH
4011: DOUBLE
4012: LD_INT 1
4014: DEC
4015: ST_TO_ADDR
4016: LD_EXP 18
4020: PUSH
4021: FOR_TO
4022: IFFALSE 4175
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4024: LD_ADDR_VAR 0 4
4028: PUSH
4029: LD_EXP 38
4033: PUSH
4034: LD_VAR 0 3
4038: ARRAY
4039: PUSH
4040: LD_VAR 0 7
4044: ARRAY
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4050: LD_ADDR_VAR 0 5
4054: PUSH
4055: LD_EXP 38
4059: PUSH
4060: LD_VAR 0 3
4064: ARRAY
4065: PUSH
4066: LD_VAR 0 7
4070: ARRAY
4071: PUSH
4072: LD_INT 2
4074: ARRAY
4075: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4076: LD_ADDR_VAR 0 6
4080: PUSH
4081: LD_EXP 38
4085: PUSH
4086: LD_VAR 0 3
4090: ARRAY
4091: PUSH
4092: LD_VAR 0 7
4096: ARRAY
4097: PUSH
4098: LD_INT 3
4100: ARRAY
4101: ST_TO_ADDR
// bc_type := b_breastwork ;
4102: LD_ADDR_OWVAR 42
4106: PUSH
4107: LD_INT 31
4109: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4110: LD_ADDR_VAR 0 9
4114: PUSH
4115: LD_VAR 0 4
4119: PPUSH
4120: LD_VAR 0 5
4124: PPUSH
4125: LD_VAR 0 6
4129: PPUSH
4130: CALL_OW 47
4134: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4135: LD_INT 1
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: LD_INT 0
4146: PPUSH
4147: LD_INT 0
4149: PPUSH
4150: LD_VAR 0 9
4154: PPUSH
4155: CALL 2801 0 6
// soldiers_created := soldiers_created + 1 ;
4159: LD_ADDR_LOC 4
4163: PUSH
4164: LD_LOC 4
4168: PUSH
4169: LD_INT 1
4171: PLUS
4172: ST_TO_ADDR
// end ;
4173: GO 4021
4175: POP
4176: POP
// x := start_def [ pos ] [ 1 ] ;
4177: LD_ADDR_VAR 0 4
4181: PUSH
4182: LD_EXP 39
4186: PUSH
4187: LD_VAR 0 3
4191: ARRAY
4192: PUSH
4193: LD_INT 1
4195: ARRAY
4196: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4197: LD_ADDR_VAR 0 5
4201: PUSH
4202: LD_EXP 39
4206: PUSH
4207: LD_VAR 0 3
4211: ARRAY
4212: PUSH
4213: LD_INT 2
4215: ARRAY
4216: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4217: LD_LOC 8
4221: PUSH
4222: LD_EXP 18
4226: MINUS
4227: PPUSH
4228: LD_INT 1
4230: PPUSH
4231: LD_VAR 0 4
4235: PPUSH
4236: LD_VAR 0 5
4240: PPUSH
4241: LD_INT 5
4243: PPUSH
4244: LD_INT 0
4246: PPUSH
4247: CALL 2801 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4251: LD_LOC 5
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: LD_VAR 0 4
4263: PPUSH
4264: LD_VAR 0 5
4268: PPUSH
4269: LD_INT 5
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL 2801 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4279: LD_LOC 7
4283: PPUSH
4284: LD_INT 3
4286: PPUSH
4287: LD_VAR 0 4
4291: PPUSH
4292: LD_VAR 0 5
4296: PPUSH
4297: LD_INT 5
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL 2801 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4307: LD_LOC 6
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_VAR 0 4
4319: PPUSH
4320: LD_VAR 0 5
4324: PPUSH
4325: LD_INT 5
4327: PPUSH
4328: LD_INT 0
4330: PPUSH
4331: CALL 2801 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4335: LD_EXP 10
4339: PUSH
4340: LD_INT 20
4342: PPUSH
4343: LD_VAR 0 1
4347: PPUSH
4348: CALL_OW 321
4352: PUSH
4353: LD_INT 1
4355: EQUAL
4356: AND
4357: IFFALSE 4374
// SetTech ( tech_SibDet , side , state_researched ) ;
4359: LD_INT 20
4361: PPUSH
4362: LD_VAR 0 1
4366: PPUSH
4367: LD_INT 2
4369: PPUSH
4370: CALL_OW 322
// if def_siberite_bomb = 1 then
4374: LD_EXP 13
4378: PUSH
4379: LD_INT 1
4381: EQUAL
4382: IFFALSE 4416
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4384: LD_INT 25
4386: PPUSH
4387: LD_VAR 0 1
4391: PPUSH
4392: LD_INT 1
4394: PPUSH
4395: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4399: LD_INT 73
4401: PPUSH
4402: LD_VAR 0 1
4406: PPUSH
4407: LD_INT 1
4409: PPUSH
4410: CALL_OW 322
// end else
4414: GO 4446
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4416: LD_INT 25
4418: PPUSH
4419: LD_VAR 0 1
4423: PPUSH
4424: LD_INT 0
4426: PPUSH
4427: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4431: LD_INT 73
4433: PPUSH
4434: LD_VAR 0 1
4438: PPUSH
4439: LD_INT 0
4441: PPUSH
4442: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4446: LD_INT 24
4448: PPUSH
4449: LD_VAR 0 1
4453: PPUSH
4454: LD_INT 0
4456: PPUSH
4457: CALL_OW 322
// global_defined := true ;
4461: LD_ADDR_LOC 3
4465: PUSH
4466: LD_INT 1
4468: ST_TO_ADDR
// end ;
4469: LD_VAR 0 2
4473: RET
// function prepare_sides ; var i ; begin
4474: LD_INT 0
4476: PPUSH
4477: PPUSH
// global_units := [ ] ;
4478: LD_ADDR_LOC 2
4482: PUSH
4483: EMPTY
4484: ST_TO_ADDR
// global_defined := false ;
4485: LD_ADDR_LOC 3
4489: PUSH
4490: LD_INT 0
4492: ST_TO_ADDR
// CountClassMembers ;
4493: CALL 4543 0 0
// for i := 1 to 8 do
4497: LD_ADDR_VAR 0 2
4501: PUSH
4502: DOUBLE
4503: LD_INT 1
4505: DEC
4506: ST_TO_ADDR
4507: LD_INT 8
4509: PUSH
4510: FOR_TO
4511: IFFALSE 4536
// if Side_Positions [ i ] then
4513: LD_EXP 34
4517: PUSH
4518: LD_VAR 0 2
4522: ARRAY
4523: IFFALSE 4534
// prepare_side ( i ) ;
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL 3389 0 1
4534: GO 4510
4536: POP
4537: POP
// end ;
4538: LD_VAR 0 1
4542: RET
// function CountClassMembers ; var Mode ; begin
4543: LD_INT 0
4545: PPUSH
4546: PPUSH
// if No_Mechs then
4547: LD_EXP 15
4551: IFFALSE 4563
// Mode := 2 else
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: LD_INT 2
4560: ST_TO_ADDR
4561: GO 4571
// Mode := 1 ;
4563: LD_ADDR_VAR 0 2
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// neng := number_of_people ;
4571: LD_ADDR_LOC 5
4575: PUSH
4576: LD_EXP 19
4580: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4581: LD_ADDR_LOC 8
4585: PUSH
4586: LD_LOC 5
4590: PUSH
4591: LD_INT 4
4593: PUSH
4594: LD_INT 3
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_VAR 0 2
4605: ARRAY
4606: DIV
4607: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4608: LD_LOC 8
4612: PUSH
4613: LD_EXP 18
4617: LESS
4618: IFFALSE 4630
// nsol := number_of_breastworks ;
4620: LD_ADDR_LOC 8
4624: PUSH
4625: LD_EXP 18
4629: ST_TO_ADDR
// neng := neng - nsol ;
4630: LD_ADDR_LOC 5
4634: PUSH
4635: LD_LOC 5
4639: PUSH
4640: LD_LOC 8
4644: MINUS
4645: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4646: LD_ADDR_LOC 6
4650: PUSH
4651: LD_LOC 5
4655: PUSH
4656: LD_INT 3
4658: PUSH
4659: LD_INT 2
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_VAR 0 2
4670: ARRAY
4671: DIV
4672: ST_TO_ADDR
// if ( nsci < 1 ) then
4673: LD_LOC 6
4677: PUSH
4678: LD_INT 1
4680: LESS
4681: IFFALSE 4691
// nsci := 1 ;
4683: LD_ADDR_LOC 6
4687: PUSH
4688: LD_INT 1
4690: ST_TO_ADDR
// neng := neng - nsci ;
4691: LD_ADDR_LOC 5
4695: PUSH
4696: LD_LOC 5
4700: PUSH
4701: LD_LOC 6
4705: MINUS
4706: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4707: LD_ADDR_LOC 7
4711: PUSH
4712: LD_LOC 5
4716: PUSH
4717: LD_INT 2
4719: DIV
4720: PUSH
4721: LD_INT 0
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PUSH
4728: LD_VAR 0 2
4732: ARRAY
4733: ST_TO_ADDR
// neng := neng - nmech ;
4734: LD_ADDR_LOC 5
4738: PUSH
4739: LD_LOC 5
4743: PUSH
4744: LD_LOC 7
4748: MINUS
4749: ST_TO_ADDR
// if ( neng < 1 ) then
4750: LD_LOC 5
4754: PUSH
4755: LD_INT 1
4757: LESS
4758: IFFALSE 4768
// neng := 1 ;
4760: LD_ADDR_LOC 5
4764: PUSH
4765: LD_INT 1
4767: ST_TO_ADDR
// end ;
4768: LD_VAR 0 1
4772: RET
// starting begin disable ( 98 ) ;
4773: LD_INT 98
4775: DISABLE_MARKED
// disable ( 99 ) ;
4776: LD_INT 99
4778: DISABLE_MARKED
// disable ( 400 ) ;
4779: LD_INT 400
4781: DISABLE_MARKED
// disable ( 401 ) ;
4782: LD_INT 401
4784: DISABLE_MARKED
// mp_selectmsg := true ;
4785: LD_ADDR_OWVAR 13
4789: PUSH
4790: LD_INT 1
4792: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4793: CALL 68 0 0
// init_map ;
4797: CALL 1224 0 0
// init_respawning ;
4801: CALL 9263 0 0
// set_shared_visions_and_alliances ;
4805: CALL 2513 0 0
// ResetFog ;
4809: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4813: LD_OWVAR 2
4817: PPUSH
4818: CALL_OW 520
// AnimateTrees ( true ) ;
4822: LD_INT 1
4824: PPUSH
4825: CALL_OW 573
// prepare_sides ;
4829: CALL 4474 0 0
// Init_Win_Condition ;
4833: CALL 7968 0 0
// ShowTimer ;
4837: CALL 7369 0 0
// music_nat := Side_Nations [ your_side ] ;
4841: LD_ADDR_OWVAR 71
4845: PUSH
4846: LD_EXP 35
4850: PUSH
4851: LD_OWVAR 2
4855: ARRAY
4856: ST_TO_ADDR
// if IAmSpec then
4857: CALL_OW 531
4861: IFFALSE 4885
// begin fogoff ( true ) ;
4863: LD_INT 1
4865: PPUSH
4866: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4870: LD_INT 130
4872: PPUSH
4873: LD_INT 100
4875: PPUSH
4876: CALL_OW 86
// enable ( 400 ) ;
4880: LD_INT 400
4882: ENABLE_MARKED
// end else
4883: GO 4931
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4885: LD_EXP 39
4889: PUSH
4890: LD_EXP 34
4894: PUSH
4895: LD_OWVAR 2
4899: ARRAY
4900: ARRAY
4901: PUSH
4902: LD_INT 1
4904: ARRAY
4905: PPUSH
4906: LD_EXP 39
4910: PUSH
4911: LD_EXP 34
4915: PUSH
4916: LD_OWVAR 2
4920: ARRAY
4921: ARRAY
4922: PUSH
4923: LD_INT 2
4925: ARRAY
4926: PPUSH
4927: CALL_OW 86
// end ; InitApeman ;
4931: CALL 5877 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
4935: LD_ADDR_EXP 55
4939: PUSH
4940: LD_INT 1
4942: PUSH
4943: LD_INT 2
4945: PUSH
4946: LD_INT 3
4948: PUSH
4949: LD_INT 4
4951: PUSH
4952: LD_INT 5
4954: PUSH
4955: LD_INT 6
4957: PUSH
4958: LD_INT 7
4960: PUSH
4961: LD_INT 8
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: ST_TO_ADDR
// BeginBuildUp ;
4974: CALL 14165 0 0
// end ;
4978: END
// every 0 0$1 do
4979: GO 4981
4981: DISABLE
// if ( def_siberite_bomb > 1 ) then
4982: LD_EXP 13
4986: PUSH
4987: LD_INT 1
4989: GREATER
4990: IFFALSE 5005
// begin wait ( siberite_bomb_Delay ) ;
4992: LD_EXP 29
4996: PPUSH
4997: CALL_OW 67
// EnableSibFiss ;
5001: CALL 5006 0 0
// end ;
5005: END
// function EnableSibFiss ; var i ; begin
5006: LD_INT 0
5008: PPUSH
5009: PPUSH
// for i := 1 to 8 do
5010: LD_ADDR_VAR 0 2
5014: PUSH
5015: DOUBLE
5016: LD_INT 1
5018: DEC
5019: ST_TO_ADDR
5020: LD_INT 8
5022: PUSH
5023: FOR_TO
5024: IFFALSE 5070
// if Side_Positions [ i ] then
5026: LD_EXP 34
5030: PUSH
5031: LD_VAR 0 2
5035: ARRAY
5036: IFFALSE 5068
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5038: LD_INT 25
5040: PPUSH
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_INT 1
5048: PPUSH
5049: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5053: LD_INT 73
5055: PPUSH
5056: LD_VAR 0 2
5060: PPUSH
5061: LD_INT 1
5063: PPUSH
5064: CALL_OW 322
// end ;
5068: GO 5023
5070: POP
5071: POP
// end ; end_of_file
5072: LD_VAR 0 1
5076: RET
// every 0 0$25 + 0 0$1.0 do var i , areas ;
5077: GO 5079
5079: DISABLE
5080: LD_INT 0
5082: PPUSH
5083: PPUSH
// begin areas := [ Between18 , Between23 , Between45 , Between67 ] ;
5084: LD_ADDR_VAR 0 2
5088: PUSH
5089: LD_INT 10
5091: PUSH
5092: LD_INT 11
5094: PUSH
5095: LD_INT 12
5097: PUSH
5098: LD_INT 13
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: ST_TO_ADDR
// for i := 1 to 4 do
5107: LD_ADDR_VAR 0 1
5111: PUSH
5112: DOUBLE
5113: LD_INT 1
5115: DEC
5116: ST_TO_ADDR
5117: LD_INT 4
5119: PUSH
5120: FOR_TO
5121: IFFALSE 5192
// begin if GetResourceArea ( areas [ i ] , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5123: LD_VAR 0 2
5127: PUSH
5128: LD_VAR 0 1
5132: ARRAY
5133: PPUSH
5134: LD_INT 1
5136: PPUSH
5137: CALL_OW 287
5141: PUSH
5142: LD_INT 200
5144: PUSH
5145: LD_EXP 23
5149: MINUS
5150: PUSH
5151: LD_INT 50
5153: DIVREAL
5154: PUSH
5155: LD_INT 5
5157: MUL
5158: LESS
5159: IFFALSE 5190
// CreateCratesArea ( rand ( 2 , 5 ) , areas [ i ] , true ) ;
5161: LD_INT 2
5163: PPUSH
5164: LD_INT 5
5166: PPUSH
5167: CALL_OW 12
5171: PPUSH
5172: LD_VAR 0 2
5176: PUSH
5177: LD_VAR 0 1
5181: ARRAY
5182: PPUSH
5183: LD_INT 1
5185: PPUSH
5186: CALL_OW 55
// end ;
5190: GO 5120
5192: POP
5193: POP
// if GetResourceArea ( Center , mat_cans ) < ( ( 600 - shipments_density ) / 25 * 5 ) then
5194: LD_INT 14
5196: PPUSH
5197: LD_INT 1
5199: PPUSH
5200: CALL_OW 287
5204: PUSH
5205: LD_INT 600
5207: PUSH
5208: LD_EXP 23
5212: MINUS
5213: PUSH
5214: LD_INT 25
5216: DIVREAL
5217: PUSH
5218: LD_INT 5
5220: MUL
5221: LESS
5222: IFFALSE 5237
// CreateCratesArea ( 5 , Center , true ) ;
5224: LD_INT 5
5226: PPUSH
5227: LD_INT 14
5229: PPUSH
5230: LD_INT 1
5232: PPUSH
5233: CALL_OW 55
// enable ;
5237: ENABLE
// end ;
5238: PPOPN 2
5240: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5241: GO 5243
5243: DISABLE
5244: LD_INT 0
5246: PPUSH
5247: PPUSH
// begin case tick of 1 .. 1 1$0 :
5248: LD_OWVAR 1
5252: PUSH
5253: LD_INT 1
5255: DOUBLE
5256: GREATEREQUAL
5257: IFFALSE 5265
5259: LD_INT 2100
5261: DOUBLE
5262: LESSEQUAL
5263: IFTRUE 5267
5265: GO 5295
5267: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5268: LD_EXP 23
5272: PUSH
5273: LD_INT 100
5275: DIVREAL
5276: PUSH
5277: LD_INT 525
5279: PPUSH
5280: LD_INT 1050
5282: PPUSH
5283: CALL_OW 12
5287: MUL
5288: PPUSH
5289: CALL_OW 67
5293: GO 5597
5295: LD_INT 2100
5297: PUSH
5298: LD_INT 1
5300: PLUS
5301: DOUBLE
5302: GREATEREQUAL
5303: IFFALSE 5311
5305: LD_INT 10500
5307: DOUBLE
5308: LESSEQUAL
5309: IFTRUE 5313
5311: GO 5341
5313: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5314: LD_EXP 23
5318: PUSH
5319: LD_INT 100
5321: DIVREAL
5322: PUSH
5323: LD_INT 1050
5325: PPUSH
5326: LD_INT 1750
5328: PPUSH
5329: CALL_OW 12
5333: MUL
5334: PPUSH
5335: CALL_OW 67
5339: GO 5597
5341: LD_INT 10500
5343: PUSH
5344: LD_INT 1
5346: PLUS
5347: DOUBLE
5348: GREATEREQUAL
5349: IFFALSE 5357
5351: LD_INT 21000
5353: DOUBLE
5354: LESSEQUAL
5355: IFTRUE 5359
5357: GO 5387
5359: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5360: LD_EXP 23
5364: PUSH
5365: LD_INT 100
5367: DIVREAL
5368: PUSH
5369: LD_INT 1750
5371: PPUSH
5372: LD_INT 2100
5374: PPUSH
5375: CALL_OW 12
5379: MUL
5380: PPUSH
5381: CALL_OW 67
5385: GO 5597
5387: LD_INT 21000
5389: PUSH
5390: LD_INT 1
5392: PLUS
5393: DOUBLE
5394: GREATEREQUAL
5395: IFFALSE 5403
5397: LD_INT 42000
5399: DOUBLE
5400: LESSEQUAL
5401: IFTRUE 5405
5403: GO 5433
5405: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5406: LD_EXP 23
5410: PUSH
5411: LD_INT 100
5413: DIVREAL
5414: PUSH
5415: LD_INT 2100
5417: PPUSH
5418: LD_INT 2275
5420: PPUSH
5421: CALL_OW 12
5425: MUL
5426: PPUSH
5427: CALL_OW 67
5431: GO 5597
5433: LD_INT 42000
5435: PUSH
5436: LD_INT 1
5438: PLUS
5439: DOUBLE
5440: GREATEREQUAL
5441: IFFALSE 5449
5443: LD_INT 63000
5445: DOUBLE
5446: LESSEQUAL
5447: IFTRUE 5451
5449: GO 5479
5451: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5452: LD_EXP 23
5456: PUSH
5457: LD_INT 100
5459: DIVREAL
5460: PUSH
5461: LD_INT 2275
5463: PPUSH
5464: LD_INT 2450
5466: PPUSH
5467: CALL_OW 12
5471: MUL
5472: PPUSH
5473: CALL_OW 67
5477: GO 5597
5479: LD_INT 63000
5481: PUSH
5482: LD_INT 1
5484: PLUS
5485: DOUBLE
5486: GREATEREQUAL
5487: IFFALSE 5495
5489: LD_INT 105000
5491: DOUBLE
5492: LESSEQUAL
5493: IFTRUE 5497
5495: GO 5525
5497: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5498: LD_EXP 23
5502: PUSH
5503: LD_INT 100
5505: DIVREAL
5506: PUSH
5507: LD_INT 2450
5509: PPUSH
5510: LD_INT 2800
5512: PPUSH
5513: CALL_OW 12
5517: MUL
5518: PPUSH
5519: CALL_OW 67
5523: GO 5597
5525: LD_INT 105000
5527: PUSH
5528: LD_INT 1
5530: PLUS
5531: DOUBLE
5532: GREATEREQUAL
5533: IFFALSE 5541
5535: LD_INT 630000
5537: DOUBLE
5538: LESSEQUAL
5539: IFTRUE 5543
5541: GO 5571
5543: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5544: LD_EXP 23
5548: PUSH
5549: LD_INT 100
5551: DIVREAL
5552: PUSH
5553: LD_INT 2800
5555: PPUSH
5556: LD_INT 3500
5558: PPUSH
5559: CALL_OW 12
5563: MUL
5564: PPUSH
5565: CALL_OW 67
5569: GO 5597
5571: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5572: LD_EXP 23
5576: PUSH
5577: LD_INT 100
5579: DIVREAL
5580: PUSH
5581: LD_INT 3500
5583: PPUSH
5584: LD_INT 3850
5586: PPUSH
5587: CALL_OW 12
5591: MUL
5592: PPUSH
5593: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5597: LD_ADDR_VAR 0 2
5601: PUSH
5602: LD_INT 3
5604: PPUSH
5605: LD_INT 5
5607: PPUSH
5608: CALL_OW 12
5612: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5613: LD_ADDR_VAR 0 1
5617: PUSH
5618: LD_EXP 34
5622: PUSH
5623: LD_INT 0
5625: PUSH
5626: EMPTY
5627: LIST
5628: DIFF
5629: PUSH
5630: FOR_IN
5631: IFFALSE 5680
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5633: LD_VAR 0 2
5637: PPUSH
5638: LD_EXP 39
5642: PUSH
5643: LD_VAR 0 1
5647: ARRAY
5648: PUSH
5649: LD_INT 1
5651: ARRAY
5652: PPUSH
5653: LD_EXP 39
5657: PUSH
5658: LD_VAR 0 1
5662: ARRAY
5663: PUSH
5664: LD_INT 2
5666: ARRAY
5667: PPUSH
5668: LD_INT 20
5670: PPUSH
5671: LD_INT 1
5673: PPUSH
5674: CALL_OW 56
5678: GO 5630
5680: POP
5681: POP
// enable ;
5682: ENABLE
// end ; end_of_file
5683: PPOPN 2
5685: END
// every 20 20$00 trigger apemanNumber do
5686: LD_EXP 46
5690: IFFALSE 5723
5692: GO 5694
5694: DISABLE
// begin enable ;
5695: ENABLE
// if apeLevel >= 8 then
5696: LD_EXP 51
5700: PUSH
5701: LD_INT 8
5703: GREATEREQUAL
5704: IFFALSE 5709
// disable else
5706: DISABLE
5707: GO 5723
// apeLevel := apeLevel + 1 ;
5709: LD_ADDR_EXP 51
5713: PUSH
5714: LD_EXP 51
5718: PUSH
5719: LD_INT 1
5721: PLUS
5722: ST_TO_ADDR
// end ;
5723: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5724: LD_EXP 46
5728: PUSH
5729: LD_EXP 47
5733: LESS
5734: IFFALSE 5874
5736: GO 5738
5738: DISABLE
5739: LD_INT 0
5741: PPUSH
5742: PPUSH
5743: PPUSH
5744: PPUSH
// begin enable ;
5745: ENABLE
// for i := 1 to apemanPos do
5746: LD_ADDR_VAR 0 1
5750: PUSH
5751: DOUBLE
5752: LD_INT 1
5754: DEC
5755: ST_TO_ADDR
5756: LD_EXP 49
5760: PUSH
5761: FOR_TO
5762: IFFALSE 5872
// begin if apemanPlayerCount [ i ] then
5764: LD_EXP 50
5768: PUSH
5769: LD_VAR 0 1
5773: ARRAY
5774: IFFALSE 5870
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5776: LD_EXP 50
5780: PUSH
5781: LD_VAR 0 1
5785: ARRAY
5786: PUSH
5787: LD_EXP 49
5791: PUSH
5792: LD_VAR 0 1
5796: ARRAY
5797: GREATER
5798: IFFALSE 5870
// begin ape := PrepareApeman ;
5800: LD_ADDR_VAR 0 2
5804: PUSH
5805: CALL 6393 0 0
5809: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5810: LD_VAR 0 2
5814: PPUSH
5815: LD_EXP 52
5819: PUSH
5820: LD_VAR 0 1
5824: ARRAY
5825: PPUSH
5826: LD_INT 0
5828: PPUSH
5829: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5833: LD_ADDR_EXP 49
5837: PUSH
5838: LD_EXP 49
5842: PPUSH
5843: LD_VAR 0 1
5847: PPUSH
5848: LD_EXP 49
5852: PUSH
5853: LD_VAR 0 1
5857: ARRAY
5858: PUSH
5859: LD_VAR 0 2
5863: UNION
5864: PPUSH
5865: CALL_OW 1
5869: ST_TO_ADDR
// end ; end ; end ;
5870: GO 5761
5872: POP
5873: POP
// end ;
5874: PPOPN 4
5876: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5877: LD_INT 0
5879: PPUSH
5880: PPUSH
5881: PPUSH
5882: PPUSH
5883: PPUSH
5884: PPUSH
5885: PPUSH
// playersAmount := 0 ;
5886: LD_ADDR_VAR 0 3
5890: PUSH
5891: LD_INT 0
5893: ST_TO_ADDR
// _apeAreas := [ Ape1Area , Ape2Area , Ape3Area , Ape4Area , Ape5Area , Ape6Area , Ape7Area , Ape8Area ] ;
5894: LD_ADDR_VAR 0 7
5898: PUSH
5899: LD_INT 15
5901: PUSH
5902: LD_INT 19
5904: PUSH
5905: LD_INT 20
5907: PUSH
5908: LD_INT 17
5910: PUSH
5911: LD_INT 18
5913: PUSH
5914: LD_INT 21
5916: PUSH
5917: LD_INT 22
5919: PUSH
5920: LD_INT 16
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5933: LD_ADDR_EXP 52
5937: PUSH
5938: LD_INT 0
5940: PUSH
5941: LD_INT 0
5943: PUSH
5944: LD_INT 0
5946: PUSH
5947: LD_INT 0
5949: PUSH
5950: LD_INT 0
5952: PUSH
5953: LD_INT 0
5955: PUSH
5956: LD_INT 0
5958: PUSH
5959: LD_INT 0
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: ST_TO_ADDR
// for j = 1 to Side_Positions do
5972: LD_ADDR_VAR 0 4
5976: PUSH
5977: DOUBLE
5978: LD_INT 1
5980: DEC
5981: ST_TO_ADDR
5982: LD_EXP 34
5986: PUSH
5987: FOR_TO
5988: IFFALSE 6055
// if Side_Positions [ j ] then
5990: LD_EXP 34
5994: PUSH
5995: LD_VAR 0 4
5999: ARRAY
6000: IFFALSE 6053
// begin playersAmount := playersAmount + 1 ;
6002: LD_ADDR_VAR 0 3
6006: PUSH
6007: LD_VAR 0 3
6011: PUSH
6012: LD_INT 1
6014: PLUS
6015: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6016: LD_ADDR_EXP 52
6020: PUSH
6021: LD_EXP 52
6025: PPUSH
6026: LD_VAR 0 4
6030: PPUSH
6031: LD_VAR 0 7
6035: PUSH
6036: LD_EXP 34
6040: PUSH
6041: LD_VAR 0 4
6045: ARRAY
6046: ARRAY
6047: PPUSH
6048: CALL_OW 1
6052: ST_TO_ADDR
// end ;
6053: GO 5987
6055: POP
6056: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6057: LD_ADDR_EXP 48
6061: PUSH
6062: LD_INT 3
6064: PUSH
6065: LD_EXP 25
6069: MUL
6070: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6071: LD_ADDR_EXP 46
6075: PUSH
6076: LD_VAR 0 3
6080: PUSH
6081: LD_EXP 48
6085: MUL
6086: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6087: LD_ADDR_EXP 47
6091: PUSH
6092: LD_EXP 46
6096: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6097: LD_ADDR_EXP 49
6101: PUSH
6102: LD_INT 0
6104: PUSH
6105: LD_INT 0
6107: PUSH
6108: LD_INT 0
6110: PUSH
6111: LD_INT 0
6113: PUSH
6114: LD_INT 0
6116: PUSH
6117: LD_INT 0
6119: PUSH
6120: LD_INT 0
6122: PUSH
6123: LD_INT 0
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6136: LD_ADDR_EXP 50
6140: PUSH
6141: LD_INT 0
6143: PUSH
6144: LD_INT 0
6146: PUSH
6147: LD_INT 0
6149: PUSH
6150: LD_INT 0
6152: PUSH
6153: LD_INT 0
6155: PUSH
6156: LD_INT 0
6158: PUSH
6159: LD_INT 0
6161: PUSH
6162: LD_INT 0
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: ST_TO_ADDR
// apeLevel := 1 ;
6175: LD_ADDR_EXP 51
6179: PUSH
6180: LD_INT 1
6182: ST_TO_ADDR
// if not apemanNumber then
6183: LD_EXP 46
6187: NOT
6188: IFFALSE 6192
// exit ;
6190: GO 6388
// for i := 1 to apemanPerPlayer do
6192: LD_ADDR_VAR 0 2
6196: PUSH
6197: DOUBLE
6198: LD_INT 1
6200: DEC
6201: ST_TO_ADDR
6202: LD_EXP 48
6206: PUSH
6207: FOR_TO
6208: IFFALSE 6386
// begin for j := 1 to Side_Positions do
6210: LD_ADDR_VAR 0 4
6214: PUSH
6215: DOUBLE
6216: LD_INT 1
6218: DEC
6219: ST_TO_ADDR
6220: LD_EXP 34
6224: PUSH
6225: FOR_TO
6226: IFFALSE 6382
// if Side_Positions [ j ] then
6228: LD_EXP 34
6232: PUSH
6233: LD_VAR 0 4
6237: ARRAY
6238: IFFALSE 6380
// begin pos := Side_Positions [ j ] ;
6240: LD_ADDR_VAR 0 6
6244: PUSH
6245: LD_EXP 34
6249: PUSH
6250: LD_VAR 0 4
6254: ARRAY
6255: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6256: LD_ADDR_EXP 50
6260: PUSH
6261: LD_EXP 50
6265: PPUSH
6266: LD_VAR 0 4
6270: PPUSH
6271: LD_EXP 50
6275: PUSH
6276: LD_VAR 0 4
6280: ARRAY
6281: PUSH
6282: LD_INT 1
6284: PLUS
6285: PPUSH
6286: CALL_OW 1
6290: ST_TO_ADDR
// ape := PrepareApeman ;
6291: LD_ADDR_VAR 0 5
6295: PUSH
6296: CALL 6393 0 0
6300: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6301: LD_ADDR_EXP 49
6305: PUSH
6306: LD_EXP 49
6310: PPUSH
6311: LD_VAR 0 4
6315: PPUSH
6316: LD_EXP 49
6320: PUSH
6321: LD_VAR 0 4
6325: ARRAY
6326: PPUSH
6327: LD_EXP 49
6331: PUSH
6332: LD_VAR 0 4
6336: ARRAY
6337: PUSH
6338: LD_INT 1
6340: PLUS
6341: PPUSH
6342: LD_VAR 0 5
6346: PPUSH
6347: CALL_OW 1
6351: PPUSH
6352: CALL_OW 1
6356: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6357: LD_VAR 0 5
6361: PPUSH
6362: LD_EXP 52
6366: PUSH
6367: LD_VAR 0 4
6371: ARRAY
6372: PPUSH
6373: LD_INT 0
6375: PPUSH
6376: CALL_OW 49
// end ;
6380: GO 6225
6382: POP
6383: POP
// end ;
6384: GO 6207
6386: POP
6387: POP
// end ;
6388: LD_VAR 0 1
6392: RET
// export function PrepareApeman ; var bonus ; begin
6393: LD_INT 0
6395: PPUSH
6396: PPUSH
// uc_side := 0 ;
6397: LD_ADDR_OWVAR 20
6401: PUSH
6402: LD_INT 0
6404: ST_TO_ADDR
// uc_nation := 0 ;
6405: LD_ADDR_OWVAR 21
6409: PUSH
6410: LD_INT 0
6412: ST_TO_ADDR
// InitHc ;
6413: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6417: LD_ADDR_VAR 0 2
6421: PUSH
6422: LD_INT 1
6424: NEG
6425: PUSH
6426: LD_INT 0
6428: PUSH
6429: LD_INT 1
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: PUSH
6437: LD_INT 25
6439: PUSH
6440: LD_INT 12
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PPUSH
6447: CALL_OW 69
6451: PUSH
6452: LD_INT 3
6454: MOD
6455: PUSH
6456: LD_INT 1
6458: PLUS
6459: ARRAY
6460: ST_TO_ADDR
// hc_class := class_apeman ;
6461: LD_ADDR_OWVAR 28
6465: PUSH
6466: LD_INT 12
6468: ST_TO_ADDR
// hc_gallery :=  ;
6469: LD_ADDR_OWVAR 33
6473: PUSH
6474: LD_STRING 
6476: ST_TO_ADDR
// hc_name :=  ;
6477: LD_ADDR_OWVAR 26
6481: PUSH
6482: LD_STRING 
6484: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6485: LD_ADDR_OWVAR 31
6489: PUSH
6490: LD_EXP 51
6494: PUSH
6495: LD_VAR 0 2
6499: PLUS
6500: PUSH
6501: LD_EXP 51
6505: PUSH
6506: LD_VAR 0 2
6510: PLUS
6511: PUSH
6512: LD_EXP 51
6516: PUSH
6517: LD_VAR 0 2
6521: PLUS
6522: PUSH
6523: LD_EXP 51
6527: PUSH
6528: LD_VAR 0 2
6532: PLUS
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6540: LD_ADDR_OWVAR 35
6544: PUSH
6545: LD_INT 10
6547: PUSH
6548: LD_VAR 0 2
6552: MUL
6553: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6554: LD_ADDR_OWVAR 29
6558: PUSH
6559: LD_INT 12
6561: PUSH
6562: LD_INT 12
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: ST_TO_ADDR
// result := CreateHuman ;
6569: LD_ADDR_VAR 0 1
6573: PUSH
6574: CALL_OW 44
6578: ST_TO_ADDR
// end ;
6579: LD_VAR 0 1
6583: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6584: LD_INT 0
6586: PPUSH
6587: PPUSH
6588: PPUSH
// if not ape then
6589: LD_VAR 0 1
6593: NOT
6594: IFFALSE 6598
// exit ;
6596: GO 6723
// side := GetSide ( ape ) ;
6598: LD_ADDR_VAR 0 3
6602: PUSH
6603: LD_VAR 0 1
6607: PPUSH
6608: CALL_OW 255
6612: ST_TO_ADDR
// if not side then
6613: LD_VAR 0 3
6617: NOT
6618: IFFALSE 6672
// begin for i = 1 to apemanPos do
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: DOUBLE
6626: LD_INT 1
6628: DEC
6629: ST_TO_ADDR
6630: LD_EXP 49
6634: PUSH
6635: FOR_TO
6636: IFFALSE 6670
// if ape in apemanPos [ i ] then
6638: LD_VAR 0 1
6642: PUSH
6643: LD_EXP 49
6647: PUSH
6648: LD_VAR 0 4
6652: ARRAY
6653: IN
6654: IFFALSE 6668
// begin side := i ;
6656: LD_ADDR_VAR 0 3
6660: PUSH
6661: LD_VAR 0 4
6665: ST_TO_ADDR
// break ;
6666: GO 6670
// end ;
6668: GO 6635
6670: POP
6671: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6672: LD_ADDR_EXP 49
6676: PUSH
6677: LD_EXP 49
6681: PPUSH
6682: LD_VAR 0 3
6686: PPUSH
6687: LD_EXP 49
6691: PUSH
6692: LD_VAR 0 3
6696: ARRAY
6697: PUSH
6698: LD_VAR 0 1
6702: DIFF
6703: PPUSH
6704: CALL_OW 1
6708: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6709: LD_ADDR_EXP 46
6713: PUSH
6714: LD_EXP 46
6718: PUSH
6719: LD_INT 1
6721: MINUS
6722: ST_TO_ADDR
// end ; end_of_file
6723: LD_VAR 0 2
6727: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6728: LD_VAR 0 1
6732: PPUSH
6733: CALL_OW 266
6737: PUSH
6738: LD_INT 0
6740: PUSH
6741: LD_INT 1
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: IN
6748: IFFALSE 6773
// SetBName ( b , @ & GetSide ( b ) ) ;
6750: LD_VAR 0 1
6754: PPUSH
6755: LD_STRING @
6757: PUSH
6758: LD_VAR 0 1
6762: PPUSH
6763: CALL_OW 255
6767: STR
6768: PPUSH
6769: CALL_OW 500
// end ;
6773: PPOPN 2
6775: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6776: LD_VAR 0 1
6780: PPUSH
6781: CALL_OW 266
6785: PUSH
6786: LD_INT 0
6788: PUSH
6789: LD_INT 1
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: IN
6796: IFFALSE 6821
// SetBName ( b , @ & GetSide ( b ) ) ;
6798: LD_VAR 0 1
6802: PPUSH
6803: LD_STRING @
6805: PUSH
6806: LD_VAR 0 1
6810: PPUSH
6811: CALL_OW 255
6815: STR
6816: PPUSH
6817: CALL_OW 500
// end ;
6821: PPOPN 3
6823: END
// on VehicleConstructed ( veh , fac ) do var side ;
6824: LD_INT 0
6826: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6827: LD_VAR 0 1
6831: PPUSH
6832: CALL_OW 263
6836: PUSH
6837: LD_INT 5
6839: EQUAL
6840: IFFALSE 6982
// begin side := GetSide ( veh ) ;
6842: LD_ADDR_VAR 0 3
6846: PUSH
6847: LD_VAR 0 1
6851: PPUSH
6852: CALL_OW 255
6856: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6857: LD_ADDR_EXP 49
6861: PUSH
6862: LD_EXP 49
6866: PPUSH
6867: LD_VAR 0 3
6871: PPUSH
6872: LD_EXP 49
6876: PUSH
6877: LD_VAR 0 3
6881: ARRAY
6882: PPUSH
6883: LD_INT 52
6885: PUSH
6886: EMPTY
6887: LIST
6888: PPUSH
6889: CALL_OW 72
6893: PUSH
6894: LD_INT 22
6896: PUSH
6897: LD_VAR 0 3
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 2
6908: PUSH
6909: LD_INT 33
6911: PUSH
6912: LD_INT 5
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 25
6921: PUSH
6922: LD_INT 12
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: LD_INT 25
6931: PUSH
6932: LD_INT 15
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 25
6941: PUSH
6942: LD_INT 16
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 25
6951: PUSH
6952: LD_INT 17
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PPUSH
6971: CALL_OW 69
6975: UNION
6976: PPUSH
6977: CALL_OW 1
6981: ST_TO_ADDR
// end ; end ;
6982: PPOPN 3
6984: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6985: LD_INT 0
6987: PPUSH
6988: PPUSH
6989: PPUSH
6990: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6991: LD_VAR 0 1
6995: PPUSH
6996: CALL_OW 257
7000: PUSH
7001: LD_INT 12
7003: PUSH
7004: LD_INT 15
7006: PUSH
7007: LD_INT 17
7009: PUSH
7010: LD_INT 16
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: IN
7019: PUSH
7020: LD_VAR 0 1
7024: PPUSH
7025: CALL_OW 263
7029: PUSH
7030: LD_INT 5
7032: EQUAL
7033: OR
7034: IFFALSE 7045
// ApeKilled ( j ) ;
7036: LD_VAR 0 1
7040: PPUSH
7041: CALL 6584 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7045: LD_VAR 0 1
7049: PPUSH
7050: CALL_OW 266
7054: PUSH
7055: LD_INT 0
7057: PUSH
7058: LD_INT 1
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: IN
7065: IFFALSE 7147
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7067: LD_ADDR_VAR 0 4
7071: PUSH
7072: LD_EXP 34
7076: PUSH
7077: LD_VAR 0 1
7081: PPUSH
7082: CALL_OW 255
7086: ARRAY
7087: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7088: LD_ADDR_VAR 0 2
7092: PUSH
7093: LD_EXP 39
7097: PUSH
7098: LD_VAR 0 4
7102: ARRAY
7103: PUSH
7104: LD_INT 1
7106: ARRAY
7107: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7108: LD_ADDR_VAR 0 3
7112: PUSH
7113: LD_EXP 39
7117: PUSH
7118: LD_VAR 0 4
7122: ARRAY
7123: PUSH
7124: LD_INT 2
7126: ARRAY
7127: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7128: LD_VAR 0 2
7132: PPUSH
7133: LD_VAR 0 3
7137: PPUSH
7138: CALL_OW 420
7142: PPUSH
7143: CALL_OW 419
// end ; end ;
7147: PPOPN 5
7149: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7150: LD_VAR 0 1
7154: PPUSH
7155: LD_VAR 0 2
7159: PPUSH
7160: LD_VAR 0 3
7164: PPUSH
7165: LD_OWVAR 2
7169: PPUSH
7170: CALL 9757 0 4
7174: PPOPN 3
7176: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7177: LD_INT 0
7179: PPUSH
7180: PPUSH
// for un in battle_flags_id do
7181: LD_ADDR_VAR 0 2
7185: PUSH
7186: LD_EXP 44
7190: PUSH
7191: FOR_IN
7192: IFFALSE 7267
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7194: LD_VAR 0 2
7198: PPUSH
7199: LD_INT 1
7201: PUSH
7202: LD_LOC 9
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 2
7213: PUSH
7214: LD_LOC 9
7218: PUSH
7219: LD_INT 2
7221: DIV
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: LD_INT 3
7229: PUSH
7230: LD_LOC 9
7234: PUSH
7235: LD_INT 5
7237: DIV
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 20
7245: PUSH
7246: LD_LOC 9
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: PPUSH
7261: CALL_OW 423
7265: GO 7191
7267: POP
7268: POP
// end ;
7269: LD_VAR 0 1
7273: RET
// every 1 do var un ;
7274: GO 7276
7276: DISABLE
7277: LD_INT 0
7279: PPUSH
// begin if not def_morale_flags then
7280: LD_EXP 9
7284: NOT
7285: IFFALSE 7289
// exit ;
7287: GO 7366
// if not morale_decreasing_time then
7289: LD_EXP 24
7293: NOT
7294: IFFALSE 7298
// exit ;
7296: GO 7366
// strength = 100 ;
7298: LD_ADDR_LOC 9
7302: PUSH
7303: LD_INT 100
7305: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7306: LD_EXP 24
7310: PPUSH
7311: CALL_OW 67
// strength := strength - 1 ;
7315: LD_ADDR_LOC 9
7319: PUSH
7320: LD_LOC 9
7324: PUSH
7325: LD_INT 1
7327: MINUS
7328: ST_TO_ADDR
// Update_Flags ;
7329: CALL 7177 0 0
// until not strength ;
7333: LD_LOC 9
7337: NOT
7338: IFFALSE 7306
// for un in battle_flags_id do
7340: LD_ADDR_VAR 0 1
7344: PUSH
7345: LD_EXP 44
7349: PUSH
7350: FOR_IN
7351: IFFALSE 7364
// KillBattleFlag ( un ) ;
7353: LD_VAR 0 1
7357: PPUSH
7358: CALL_OW 419
7362: GO 7350
7364: POP
7365: POP
// end ; end_of_file
7366: PPOPN 1
7368: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7369: LD_INT 0
7371: PPUSH
7372: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7373: LD_ADDR_VAR 0 2
7377: PUSH
7378: LD_STRING #Multi1x1-Time
7380: PUSH
7381: LD_OWVAR 1
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: ST_TO_ADDR
// if WaitServerStrings then
7390: LD_EXP 54
7394: IFFALSE 7412
// AllStrings = AllStrings ^ WaitServerStrings ;
7396: LD_ADDR_VAR 0 2
7400: PUSH
7401: LD_VAR 0 2
7405: PUSH
7406: LD_EXP 54
7410: ADD
7411: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7412: LD_INT 0
7414: PUSH
7415: LD_EXP 29
7419: PUSH
7420: LD_OWVAR 1
7424: MINUS
7425: LESSEQUAL
7426: IFFALSE 7457
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7428: LD_ADDR_VAR 0 2
7432: PUSH
7433: LD_VAR 0 2
7437: PUSH
7438: LD_STRING #allowedsibbomb
7440: PUSH
7441: LD_EXP 29
7445: PUSH
7446: LD_OWVAR 1
7450: MINUS
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: ADD
7456: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7457: LD_INT 0
7459: PUSH
7460: LD_EXP 57
7464: PUSH
7465: LD_OWVAR 1
7469: MINUS
7470: LESSEQUAL
7471: IFFALSE 7502
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7473: LD_ADDR_VAR 0 2
7477: PUSH
7478: LD_VAR 0 2
7482: PUSH
7483: LD_STRING #builduptime
7485: PUSH
7486: LD_EXP 57
7490: PUSH
7491: LD_OWVAR 1
7495: MINUS
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: ADD
7501: ST_TO_ADDR
// if ( ExtraStrings ) then
7502: LD_EXP 53
7506: IFFALSE 7528
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7508: LD_ADDR_VAR 0 2
7512: PUSH
7513: LD_VAR 0 2
7517: PUSH
7518: LD_STRING 
7520: ADD
7521: PUSH
7522: LD_EXP 53
7526: ADD
7527: ST_TO_ADDR
// Display_Strings := AllStrings ;
7528: LD_ADDR_OWVAR 47
7532: PUSH
7533: LD_VAR 0 2
7537: ST_TO_ADDR
// end ;
7538: LD_VAR 0 1
7542: RET
// every 0 0$1 do
7543: GO 7545
7545: DISABLE
// begin ShowTimer ;
7546: CALL 7369 0 0
// enable ;
7550: ENABLE
// end ; end_of_file
7551: END
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
7552: LD_INT 0
7554: PPUSH
7555: PPUSH
7556: PPUSH
7557: PPUSH
7558: PPUSH
7559: PPUSH
7560: PPUSH
7561: PPUSH
7562: PPUSH
// for i := 1 to 8 do
7563: LD_ADDR_VAR 0 2
7567: PUSH
7568: DOUBLE
7569: LD_INT 1
7571: DEC
7572: ST_TO_ADDR
7573: LD_INT 8
7575: PUSH
7576: FOR_TO
7577: IFFALSE 7961
// begin if Side_Positions [ i ] then
7579: LD_EXP 34
7583: PUSH
7584: LD_VAR 0 2
7588: ARRAY
7589: IFFALSE 7959
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
7591: LD_ADDR_VAR 0 7
7595: PUSH
7596: LD_INT 22
7598: PUSH
7599: LD_VAR 0 2
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 21
7610: PUSH
7611: LD_INT 1
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PPUSH
7622: CALL_OW 69
7626: PUSH
7627: LD_INT 0
7629: PLUS
7630: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7631: LD_ADDR_VAR 0 9
7635: PUSH
7636: LD_INT 22
7638: PUSH
7639: LD_VAR 0 2
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: LD_INT 30
7653: PUSH
7654: LD_INT 0
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: LD_INT 30
7663: PUSH
7664: LD_INT 1
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: LIST
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PPUSH
7680: CALL_OW 69
7684: ST_TO_ADDR
// crates := 0 ;
7685: LD_ADDR_VAR 0 4
7689: PUSH
7690: LD_INT 0
7692: ST_TO_ADDR
// oil := 0 ;
7693: LD_ADDR_VAR 0 5
7697: PUSH
7698: LD_INT 0
7700: ST_TO_ADDR
// sib := 0 ;
7701: LD_ADDR_VAR 0 6
7705: PUSH
7706: LD_INT 0
7708: ST_TO_ADDR
// if bases then
7709: LD_VAR 0 9
7713: IFFALSE 7819
// begin for j in bases do
7715: LD_ADDR_VAR 0 3
7719: PUSH
7720: LD_VAR 0 9
7724: PUSH
7725: FOR_IN
7726: IFFALSE 7817
// begin base := GetBase ( j ) ;
7728: LD_ADDR_VAR 0 8
7732: PUSH
7733: LD_VAR 0 3
7737: PPUSH
7738: CALL_OW 274
7742: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
7743: LD_ADDR_VAR 0 4
7747: PUSH
7748: LD_VAR 0 4
7752: PUSH
7753: LD_VAR 0 8
7757: PPUSH
7758: LD_INT 1
7760: PPUSH
7761: CALL_OW 275
7765: PLUS
7766: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
7767: LD_ADDR_VAR 0 5
7771: PUSH
7772: LD_VAR 0 5
7776: PUSH
7777: LD_VAR 0 8
7781: PPUSH
7782: LD_INT 2
7784: PPUSH
7785: CALL_OW 275
7789: PLUS
7790: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
7791: LD_ADDR_VAR 0 6
7795: PUSH
7796: LD_VAR 0 6
7800: PUSH
7801: LD_VAR 0 8
7805: PPUSH
7806: LD_INT 3
7808: PPUSH
7809: CALL_OW 275
7813: PLUS
7814: ST_TO_ADDR
// end ;
7815: GO 7725
7817: POP
7818: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
7819: LD_STRING setSpecText(
7821: PUSH
7822: LD_VAR 0 2
7826: STR
7827: PUSH
7828: LD_STRING ,
7830: STR
7831: PUSH
7832: LD_INT 2
7834: STR
7835: PUSH
7836: LD_STRING ,
7838: STR
7839: PUSH
7840: LD_VAR 0 4
7844: STR
7845: PUSH
7846: LD_STRING )
7848: STR
7849: PPUSH
7850: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
7854: LD_STRING setSpecText(
7856: PUSH
7857: LD_VAR 0 2
7861: STR
7862: PUSH
7863: LD_STRING ,
7865: STR
7866: PUSH
7867: LD_INT 3
7869: STR
7870: PUSH
7871: LD_STRING ,
7873: STR
7874: PUSH
7875: LD_VAR 0 5
7879: STR
7880: PUSH
7881: LD_STRING )
7883: STR
7884: PPUSH
7885: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
7889: LD_STRING setSpecText(
7891: PUSH
7892: LD_VAR 0 2
7896: STR
7897: PUSH
7898: LD_STRING ,
7900: STR
7901: PUSH
7902: LD_INT 4
7904: STR
7905: PUSH
7906: LD_STRING ,
7908: STR
7909: PUSH
7910: LD_VAR 0 6
7914: STR
7915: PUSH
7916: LD_STRING )
7918: STR
7919: PPUSH
7920: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
7924: LD_STRING setSpecText(
7926: PUSH
7927: LD_VAR 0 2
7931: STR
7932: PUSH
7933: LD_STRING ,
7935: STR
7936: PUSH
7937: LD_INT 5
7939: STR
7940: PUSH
7941: LD_STRING ,
7943: STR
7944: PUSH
7945: LD_VAR 0 7
7949: STR
7950: PUSH
7951: LD_STRING )
7953: STR
7954: PPUSH
7955: CALL_OW 559
// end ; end ;
7959: GO 7576
7961: POP
7962: POP
// end ; end_of_file
7963: LD_VAR 0 1
7967: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7968: LD_INT 0
7970: PPUSH
7971: PPUSH
// enable ( 98 ) ;
7972: LD_INT 98
7974: ENABLE_MARKED
// GameEnded = false ;
7975: LD_ADDR_LOC 15
7979: PUSH
7980: LD_INT 0
7982: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7983: LD_ADDR_LOC 14
7987: PUSH
7988: LD_INT 0
7990: PUSH
7991: LD_INT 0
7993: PUSH
7994: LD_INT 0
7996: PUSH
7997: LD_INT 0
7999: PUSH
8000: LD_INT 0
8002: PUSH
8003: LD_INT 0
8005: PUSH
8006: LD_INT 0
8008: PUSH
8009: LD_INT 0
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: ST_TO_ADDR
// unfoged = false ;
8022: LD_ADDR_LOC 16
8026: PUSH
8027: LD_INT 0
8029: ST_TO_ADDR
// defeated_specs := [ ] ;
8030: LD_ADDR_LOC 17
8034: PUSH
8035: EMPTY
8036: ST_TO_ADDR
// for i = 1 to side_positions do
8037: LD_ADDR_VAR 0 2
8041: PUSH
8042: DOUBLE
8043: LD_INT 1
8045: DEC
8046: ST_TO_ADDR
8047: LD_EXP 34
8051: PUSH
8052: FOR_TO
8053: IFFALSE 8093
// if not side_positions [ i ] then
8055: LD_EXP 34
8059: PUSH
8060: LD_VAR 0 2
8064: ARRAY
8065: NOT
8066: IFFALSE 8091
// defeated = replace ( defeated , i , true ) ;
8068: LD_ADDR_LOC 14
8072: PUSH
8073: LD_LOC 14
8077: PPUSH
8078: LD_VAR 0 2
8082: PPUSH
8083: LD_INT 1
8085: PPUSH
8086: CALL_OW 1
8090: ST_TO_ADDR
8091: GO 8052
8093: POP
8094: POP
// end ;
8095: LD_VAR 0 1
8099: RET
// function CanWinLoose ; begin
8100: LD_INT 0
8102: PPUSH
// Result := true ;
8103: LD_ADDR_VAR 0 1
8107: PUSH
8108: LD_INT 1
8110: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8111: CALL_OW 518
8115: PUSH
8116: CALL_OW 519
8120: PUSH
8121: LD_INT 0
8123: GREATER
8124: AND
8125: IFFALSE 8135
// Result := false ;
8127: LD_ADDR_VAR 0 1
8131: PUSH
8132: LD_INT 0
8134: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8135: CALL_OW 531
8139: PUSH
8140: CALL_OW 519
8144: PUSH
8145: LD_INT 1
8147: GREATER
8148: AND
8149: IFFALSE 8159
// Result := false ;
8151: LD_ADDR_VAR 0 1
8155: PUSH
8156: LD_INT 0
8158: ST_TO_ADDR
// end ;
8159: LD_VAR 0 1
8163: RET
// export function HasPower ( i ) ; var k , h ; begin
8164: LD_INT 0
8166: PPUSH
8167: PPUSH
8168: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8169: LD_VAR 0 1
8173: PPUSH
8174: CALL_OW 108
8178: NOT
8179: PUSH
8180: LD_EXP 33
8184: PUSH
8185: LD_VAR 0 1
8189: ARRAY
8190: NOT
8191: AND
8192: PUSH
8193: LD_OWVAR 4
8197: AND
8198: IFFALSE 8210
// begin result = false ;
8200: LD_ADDR_VAR 0 2
8204: PUSH
8205: LD_INT 0
8207: ST_TO_ADDR
// end else
8208: GO 8505
// case def_win_rules of 0 :
8210: LD_EXP 30
8214: PUSH
8215: LD_INT 0
8217: DOUBLE
8218: EQUAL
8219: IFTRUE 8223
8221: GO 8386
8223: POP
// if def_people_respawning then
8224: LD_EXP 11
8228: IFFALSE 8319
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8230: LD_ADDR_VAR 0 2
8234: PUSH
8235: LD_INT 22
8237: PUSH
8238: LD_VAR 0 1
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: PUSH
8247: LD_INT 2
8249: PUSH
8250: LD_INT 21
8252: PUSH
8253: LD_INT 1
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 33
8262: PUSH
8263: LD_INT 3
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: LD_INT 33
8272: PUSH
8273: LD_INT 5
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: LD_INT 30
8282: PUSH
8283: LD_INT 0
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: LD_INT 30
8292: PUSH
8293: LD_INT 1
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PPUSH
8312: CALL_OW 69
8316: ST_TO_ADDR
8317: GO 8384
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8319: LD_ADDR_VAR 0 2
8323: PUSH
8324: LD_INT 22
8326: PUSH
8327: LD_VAR 0 1
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: PUSH
8336: LD_INT 2
8338: PUSH
8339: LD_INT 21
8341: PUSH
8342: LD_INT 1
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PUSH
8349: LD_INT 33
8351: PUSH
8352: LD_INT 3
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: LD_INT 33
8361: PUSH
8362: LD_INT 5
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PPUSH
8379: CALL_OW 69
8383: ST_TO_ADDR
8384: GO 8505
8386: LD_INT 1
8388: DOUBLE
8389: EQUAL
8390: IFTRUE 8394
8392: GO 8433
8394: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8395: LD_ADDR_VAR 0 2
8399: PUSH
8400: LD_INT 22
8402: PUSH
8403: LD_VAR 0 1
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: PUSH
8412: LD_INT 21
8414: PUSH
8415: LD_INT 1
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PPUSH
8426: CALL_OW 69
8430: ST_TO_ADDR
8431: GO 8505
8433: LD_INT 2
8435: DOUBLE
8436: EQUAL
8437: IFTRUE 8441
8439: GO 8504
8441: POP
// begin h = false ;
8442: LD_ADDR_VAR 0 4
8446: PUSH
8447: LD_INT 0
8449: ST_TO_ADDR
// for k in heroes [ i ] do
8450: LD_ADDR_VAR 0 3
8454: PUSH
8455: LD_EXP 45
8459: PUSH
8460: LD_VAR 0 1
8464: ARRAY
8465: PUSH
8466: FOR_IN
8467: IFFALSE 8490
// if IsLive ( k ) then
8469: LD_VAR 0 3
8473: PPUSH
8474: CALL_OW 300
8478: IFFALSE 8488
// h = true ;
8480: LD_ADDR_VAR 0 4
8484: PUSH
8485: LD_INT 1
8487: ST_TO_ADDR
8488: GO 8466
8490: POP
8491: POP
// Result := h ;
8492: LD_ADDR_VAR 0 2
8496: PUSH
8497: LD_VAR 0 4
8501: ST_TO_ADDR
// end ; end ;
8502: GO 8505
8504: POP
// end ;
8505: LD_VAR 0 2
8509: RET
// function AlliedSides ( i , j ) ; begin
8510: LD_INT 0
8512: PPUSH
// Result := false ;
8513: LD_ADDR_VAR 0 3
8517: PUSH
8518: LD_INT 0
8520: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8521: LD_VAR 0 1
8525: PPUSH
8526: LD_VAR 0 2
8530: PPUSH
8531: CALL_OW 81
8535: PUSH
8536: LD_INT 1
8538: EQUAL
8539: PUSH
8540: LD_VAR 0 2
8544: PPUSH
8545: LD_VAR 0 1
8549: PPUSH
8550: CALL_OW 81
8554: PUSH
8555: LD_INT 1
8557: EQUAL
8558: AND
8559: PUSH
8560: LD_VAR 0 1
8564: PPUSH
8565: CALL_OW 83
8569: AND
8570: PUSH
8571: LD_VAR 0 2
8575: PPUSH
8576: CALL_OW 83
8580: AND
8581: IFFALSE 8591
// Result := true ;
8583: LD_ADDR_VAR 0 3
8587: PUSH
8588: LD_INT 1
8590: ST_TO_ADDR
// end ;
8591: LD_VAR 0 3
8595: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8596: CALL 8100 0 0
8600: PUSH
8601: LD_LOC 15
8605: NOT
8606: AND
8607: IFFALSE 8623
8609: GO 8611
8611: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8612: LD_ADDR_EXP 54
8616: PUSH
8617: LD_STRING #Player-Ended
8619: PUSH
8620: EMPTY
8621: LIST
8622: ST_TO_ADDR
8623: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8624: CALL 8100 0 0
8628: PUSH
8629: LD_LOC 15
8633: AND
8634: IFFALSE 8643
8636: GO 8638
8638: DISABLE
// YouLostInMultiplayer ;
8639: CALL_OW 107
8643: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8644: CALL 8100 0 0
8648: NOT
8649: PUSH
8650: CALL_OW 531
8654: NOT
8655: AND
8656: IFFALSE 8672
8658: GO 8660
8660: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8661: LD_ADDR_EXP 54
8665: PUSH
8666: LD_STRING #server-wait
8668: PUSH
8669: EMPTY
8670: LIST
8671: ST_TO_ADDR
8672: END
// every 100 trigger IAmSpec do
8673: CALL_OW 531
8677: IFFALSE 8693
8679: GO 8681
8681: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8682: LD_ADDR_EXP 54
8686: PUSH
8687: LD_STRING #Player-IAmSpec
8689: PUSH
8690: EMPTY
8691: LIST
8692: ST_TO_ADDR
8693: END
// every 100 trigger GameEnded and IAmSpec do
8694: LD_LOC 15
8698: PUSH
8699: CALL_OW 531
8703: AND
8704: IFFALSE 8713
8706: GO 8708
8708: DISABLE
// YouLostInMultiplayer ;
8709: CALL_OW 107
8713: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8714: CALL 8100 0 0
8718: PUSH
8719: LD_LOC 15
8723: NOT
8724: AND
8725: IFFALSE 8741
8727: GO 8729
8729: DISABLE
// WaitServerStrings = [ $player-win ] ;
8730: LD_ADDR_EXP 54
8734: PUSH
8735: LD_STRING $player-win
8737: PUSH
8738: EMPTY
8739: LIST
8740: ST_TO_ADDR
8741: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8742: CALL 8100 0 0
8746: PUSH
8747: LD_LOC 15
8751: AND
8752: IFFALSE 8776
8754: GO 8756
8756: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8757: LD_EXP 35
8761: PUSH
8762: LD_OWVAR 7
8766: ARRAY
8767: PPUSH
8768: CALL 9799 0 1
// YouWinInMultiplayer ;
8772: CALL_OW 106
// end ;
8776: END
// every 100 trigger isEditor marked 401 do
8777: LD_OWVAR 84
8781: IFFALSE 8797
8783: GO 8785
8785: DISABLE
// Debug_Strings = [ You won ] ;
8786: LD_ADDR_OWVAR 48
8790: PUSH
8791: LD_STRING You won
8793: PUSH
8794: EMPTY
8795: LIST
8796: ST_TO_ADDR
8797: END
// every 100 trigger isEditor marked 400 do
8798: LD_OWVAR 84
8802: IFFALSE 8818
8804: GO 8806
8806: DISABLE
// Debug_Strings = [ You loss ] ;
8807: LD_ADDR_OWVAR 48
8811: PUSH
8812: LD_STRING You loss
8814: PUSH
8815: EMPTY
8816: LIST
8817: ST_TO_ADDR
8818: END
// every 100 marked 98 do var i , un ;
8819: GO 8821
8821: DISABLE
8822: LD_INT 0
8824: PPUSH
8825: PPUSH
// begin for i = 1 to side_positions do
8826: LD_ADDR_VAR 0 1
8830: PUSH
8831: DOUBLE
8832: LD_INT 1
8834: DEC
8835: ST_TO_ADDR
8836: LD_EXP 34
8840: PUSH
8841: FOR_TO
8842: IFFALSE 8929
// begin if side_positions [ i ] then
8844: LD_EXP 34
8848: PUSH
8849: LD_VAR 0 1
8853: ARRAY
8854: IFFALSE 8927
// if not HasPower ( i ) and not defeated [ i ] then
8856: LD_VAR 0 1
8860: PPUSH
8861: CALL 8164 0 1
8865: NOT
8866: PUSH
8867: LD_LOC 14
8871: PUSH
8872: LD_VAR 0 1
8876: ARRAY
8877: NOT
8878: AND
8879: IFFALSE 8927
// begin defeated = replace ( defeated , i , true ) ;
8881: LD_ADDR_LOC 14
8885: PUSH
8886: LD_LOC 14
8890: PPUSH
8891: LD_VAR 0 1
8895: PPUSH
8896: LD_INT 1
8898: PPUSH
8899: CALL_OW 1
8903: ST_TO_ADDR
// if i = mp_player_side then
8904: LD_VAR 0 1
8908: PUSH
8909: LD_OWVAR 7
8913: EQUAL
8914: IFFALSE 8927
// begin Multiplayer_Loose_Message ;
8916: CALL_OW 521
// SetPlayerSpectator ( ) ;
8920: CALL_OW 572
// enable ( 400 ) ;
8924: LD_INT 400
8926: ENABLE_MARKED
// end ; end ; end ;
8927: GO 8841
8929: POP
8930: POP
// DidGameEnd ;
8931: CALL 8946 0 0
// if not GameEnded then
8935: LD_LOC 15
8939: NOT
8940: IFFALSE 8943
// enable ;
8942: ENABLE
// end ;
8943: PPOPN 2
8945: END
// function DidGameEnd ; var i , k , enemy ; begin
8946: LD_INT 0
8948: PPUSH
8949: PPUSH
8950: PPUSH
8951: PPUSH
// enemy = [ ] ;
8952: LD_ADDR_VAR 0 4
8956: PUSH
8957: EMPTY
8958: ST_TO_ADDR
// for i = 1 to side_positions do
8959: LD_ADDR_VAR 0 2
8963: PUSH
8964: DOUBLE
8965: LD_INT 1
8967: DEC
8968: ST_TO_ADDR
8969: LD_EXP 34
8973: PUSH
8974: FOR_TO
8975: IFFALSE 9069
// if not defeated [ i ] then
8977: LD_LOC 14
8981: PUSH
8982: LD_VAR 0 2
8986: ARRAY
8987: NOT
8988: IFFALSE 9067
// for k = 1 to side_positions do
8990: LD_ADDR_VAR 0 3
8994: PUSH
8995: DOUBLE
8996: LD_INT 1
8998: DEC
8999: ST_TO_ADDR
9000: LD_EXP 34
9004: PUSH
9005: FOR_TO
9006: IFFALSE 9065
// if not defeated [ k ] then
9008: LD_LOC 14
9012: PUSH
9013: LD_VAR 0 3
9017: ARRAY
9018: NOT
9019: IFFALSE 9063
// if not AlliedSides ( i , k ) then
9021: LD_VAR 0 2
9025: PPUSH
9026: LD_VAR 0 3
9030: PPUSH
9031: CALL 8510 0 2
9035: NOT
9036: IFFALSE 9063
// enemy = enemy ^ [ i , k ] ;
9038: LD_ADDR_VAR 0 4
9042: PUSH
9043: LD_VAR 0 4
9047: PUSH
9048: LD_VAR 0 2
9052: PUSH
9053: LD_VAR 0 3
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: ADD
9062: ST_TO_ADDR
9063: GO 9005
9065: POP
9066: POP
9067: GO 8974
9069: POP
9070: POP
// if not enemy then
9071: LD_VAR 0 4
9075: NOT
9076: IFFALSE 9102
// begin GameEnded = true ;
9078: LD_ADDR_LOC 15
9082: PUSH
9083: LD_INT 1
9085: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9086: LD_LOC 14
9090: PUSH
9091: LD_OWVAR 7
9095: ARRAY
9096: NOT
9097: IFFALSE 9102
// enable ( 401 ) ;
9099: LD_INT 401
9101: ENABLE_MARKED
// end ; end ;
9102: LD_VAR 0 1
9106: RET
// function unfog ; var k , friends ; begin
9107: LD_INT 0
9109: PPUSH
9110: PPUSH
9111: PPUSH
// for k = 1 to side_positions do
9112: LD_ADDR_VAR 0 2
9116: PUSH
9117: DOUBLE
9118: LD_INT 1
9120: DEC
9121: ST_TO_ADDR
9122: LD_EXP 34
9126: PUSH
9127: FOR_TO
9128: IFFALSE 9184
// if not defeated [ k ] then
9130: LD_LOC 14
9134: PUSH
9135: LD_VAR 0 2
9139: ARRAY
9140: NOT
9141: IFFALSE 9182
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9143: LD_OWVAR 7
9147: PPUSH
9148: LD_VAR 0 2
9152: PPUSH
9153: CALL_OW 81
9157: PUSH
9158: LD_INT 1
9160: PUSH
9161: EMPTY
9162: LIST
9163: IN
9164: IFFALSE 9182
// friends = friends ^ k ;
9166: LD_ADDR_VAR 0 3
9170: PUSH
9171: LD_VAR 0 3
9175: PUSH
9176: LD_VAR 0 2
9180: ADD
9181: ST_TO_ADDR
9182: GO 9127
9184: POP
9185: POP
// if not friends then
9186: LD_VAR 0 3
9190: NOT
9191: IFFALSE 9205
// begin SetPlayerSpectator ( ) ;
9193: CALL_OW 572
// unfoged = true ;
9197: LD_ADDR_LOC 16
9201: PUSH
9202: LD_INT 1
9204: ST_TO_ADDR
// end ; end ;
9205: LD_VAR 0 1
9209: RET
// export function MakeGameEnd ; begin
9210: LD_INT 0
9212: PPUSH
// SetPlayerSpectator ( ) ;
9213: CALL_OW 572
// unfoged = true ;
9217: LD_ADDR_LOC 16
9221: PUSH
9222: LD_INT 1
9224: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9225: LD_INT 175
9227: PPUSH
9228: CALL_OW 67
// GameEnded = true ;
9232: LD_ADDR_LOC 15
9236: PUSH
9237: LD_INT 1
9239: ST_TO_ADDR
// end ;
9240: LD_VAR 0 1
9244: RET
// export function GetGameEnded ; begin
9245: LD_INT 0
9247: PPUSH
// result = GameEnded ;
9248: LD_ADDR_VAR 0 1
9252: PUSH
9253: LD_LOC 15
9257: ST_TO_ADDR
// end ; end_of_file
9258: LD_VAR 0 1
9262: RET
// var respawn , inqueue ; export function init_respawning ; begin
9263: LD_INT 0
9265: PPUSH
// respawn := Rand ( 1 , 8 ) ;
9266: LD_ADDR_LOC 18
9270: PUSH
9271: LD_INT 1
9273: PPUSH
9274: LD_INT 8
9276: PPUSH
9277: CALL_OW 12
9281: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9282: LD_ADDR_LOC 19
9286: PUSH
9287: LD_INT 0
9289: PUSH
9290: LD_INT 0
9292: PUSH
9293: LD_INT 0
9295: PUSH
9296: LD_INT 0
9298: PUSH
9299: LD_INT 0
9301: PUSH
9302: LD_INT 0
9304: PUSH
9305: LD_INT 0
9307: PUSH
9308: LD_INT 0
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: ST_TO_ADDR
// end ;
9321: LD_VAR 0 1
9325: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
9326: GO 9328
9328: DISABLE
9329: LD_INT 0
9331: PPUSH
9332: PPUSH
9333: PPUSH
// begin if respawning_time_max = 0 then
9334: LD_EXP 28
9338: PUSH
9339: LD_INT 0
9341: EQUAL
9342: IFFALSE 9346
// exit ;
9344: GO 9754
// if respawn = 8 then
9346: LD_LOC 18
9350: PUSH
9351: LD_INT 8
9353: EQUAL
9354: IFFALSE 9366
// respawn := 1 else
9356: LD_ADDR_LOC 18
9360: PUSH
9361: LD_INT 1
9363: ST_TO_ADDR
9364: GO 9380
// respawn := respawn + 1 ;
9366: LD_ADDR_LOC 18
9370: PUSH
9371: LD_LOC 18
9375: PUSH
9376: LD_INT 1
9378: PLUS
9379: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
9380: LD_EXP 34
9384: PUSH
9385: LD_LOC 18
9389: ARRAY
9390: PUSH
9391: LD_LOC 19
9395: PUSH
9396: LD_LOC 18
9400: ARRAY
9401: NOT
9402: AND
9403: IFFALSE 9753
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
9405: LD_ADDR_VAR 0 1
9409: PUSH
9410: LD_INT 21
9412: PUSH
9413: LD_INT 1
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: LD_INT 22
9422: PUSH
9423: LD_LOC 18
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: LD_INT 3
9434: PUSH
9435: LD_INT 23
9437: PUSH
9438: LD_INT 0
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: PPUSH
9451: CALL_OW 69
9455: ST_TO_ADDR
// if n < number_of_people then
9456: LD_VAR 0 1
9460: PUSH
9461: LD_EXP 19
9465: LESS
9466: IFFALSE 9750
// begin aktresp := respawn ;
9468: LD_ADDR_VAR 0 3
9472: PUSH
9473: LD_LOC 18
9477: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
9478: LD_ADDR_LOC 19
9482: PUSH
9483: LD_LOC 19
9487: PPUSH
9488: LD_VAR 0 3
9492: PPUSH
9493: LD_INT 1
9495: PPUSH
9496: CALL_OW 1
9500: ST_TO_ADDR
// enable ;
9501: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
9502: LD_EXP 27
9506: PPUSH
9507: LD_EXP 28
9511: PPUSH
9512: CALL_OW 12
9516: PPUSH
9517: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
9521: LD_ADDR_LOC 19
9525: PUSH
9526: LD_LOC 19
9530: PPUSH
9531: LD_VAR 0 3
9535: PPUSH
9536: LD_INT 0
9538: PPUSH
9539: CALL_OW 1
9543: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
9544: LD_ADDR_VAR 0 2
9548: PUSH
9549: LD_INT 21
9551: PUSH
9552: LD_INT 3
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: LD_INT 2
9561: PUSH
9562: LD_INT 30
9564: PUSH
9565: LD_INT 0
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: PUSH
9572: LD_INT 30
9574: PUSH
9575: LD_INT 1
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 50
9589: PUSH
9590: EMPTY
9591: LIST
9592: PUSH
9593: LD_INT 22
9595: PUSH
9596: LD_VAR 0 3
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: PPUSH
9611: CALL_OW 69
9615: ST_TO_ADDR
// if dep = 0 then
9616: LD_VAR 0 2
9620: PUSH
9621: LD_INT 0
9623: EQUAL
9624: IFFALSE 9628
// exit ;
9626: GO 9754
// hc_name :=  ;
9628: LD_ADDR_OWVAR 26
9632: PUSH
9633: LD_STRING 
9635: ST_TO_ADDR
// hc_importance := 0 ;
9636: LD_ADDR_OWVAR 32
9640: PUSH
9641: LD_INT 0
9643: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
9644: LD_INT 0
9646: PPUSH
9647: LD_INT 0
9649: PPUSH
9650: LD_EXP 20
9654: PUSH
9655: LD_INT 2
9657: DIV
9658: PPUSH
9659: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
9663: LD_ADDR_OWVAR 21
9667: PUSH
9668: LD_EXP 35
9672: PUSH
9673: LD_VAR 0 3
9677: ARRAY
9678: ST_TO_ADDR
// uc_side := aktresp ;
9679: LD_ADDR_OWVAR 20
9683: PUSH
9684: LD_VAR 0 3
9688: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
9689: LD_ADDR_VAR 0 2
9693: PUSH
9694: LD_VAR 0 2
9698: PUSH
9699: LD_INT 1
9701: PPUSH
9702: LD_VAR 0 2
9706: PPUSH
9707: CALL_OW 12
9711: ARRAY
9712: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
9713: CALL_OW 44
9717: PPUSH
9718: LD_VAR 0 2
9722: PPUSH
9723: CALL_OW 250
9727: PPUSH
9728: LD_VAR 0 2
9732: PPUSH
9733: CALL_OW 251
9737: PPUSH
9738: LD_INT 7
9740: PPUSH
9741: LD_INT 1
9743: PPUSH
9744: CALL_OW 50
// end else
9748: GO 9751
// enable ;
9750: ENABLE
// end else
9751: GO 9754
// enable ;
9753: ENABLE
// end ; end_of_file
9754: PPOPN 3
9756: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
9757: LD_INT 0
9759: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
9760: LD_VAR 0 1
9764: PPUSH
9765: CALL_OW 255
9769: PUSH
9770: LD_VAR 0 4
9774: EQUAL
9775: IFFALSE 9794
// begin SetAchievement ( ACH_RAD ) ;
9777: LD_STRING ACH_RAD
9779: PPUSH
9780: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
9784: LD_STRING ACH_NL
9786: PPUSH
9787: LD_INT 1
9789: PPUSH
9790: CALL_OW 564
// end end ;
9794: LD_VAR 0 5
9798: RET
// export function SA_Win ( side ) ; begin
9799: LD_INT 0
9801: PPUSH
// case side of 1 :
9802: LD_VAR 0 1
9806: PUSH
9807: LD_INT 1
9809: DOUBLE
9810: EQUAL
9811: IFTRUE 9815
9813: GO 9828
9815: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
9816: LD_STRING ACH_AH
9818: PPUSH
9819: LD_INT 1
9821: PPUSH
9822: CALL_OW 564
9826: GO 9991
9828: LD_INT 2
9830: DOUBLE
9831: EQUAL
9832: IFTRUE 9836
9834: GO 9849
9836: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
9837: LD_STRING ACH_E
9839: PPUSH
9840: LD_INT 1
9842: PPUSH
9843: CALL_OW 564
9847: GO 9991
9849: LD_INT 3
9851: DOUBLE
9852: EQUAL
9853: IFTRUE 9857
9855: GO 9870
9857: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
9858: LD_STRING ACH_OOL
9860: PPUSH
9861: LD_INT 1
9863: PPUSH
9864: CALL_OW 564
9868: GO 9991
9870: LD_INT 1
9872: PUSH
9873: LD_INT 2
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: DOUBLE
9880: EQUAL
9881: IFTRUE 9885
9883: GO 9910
9885: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9886: LD_STRING ACH_AH
9888: PPUSH
9889: LD_REAL  5.00000000000000E-0001
9892: PPUSH
9893: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9897: LD_STRING ACH_E
9899: PPUSH
9900: LD_REAL  5.00000000000000E-0001
9903: PPUSH
9904: CALL_OW 564
// end ; [ 2 , 3 ] :
9908: GO 9991
9910: LD_INT 2
9912: PUSH
9913: LD_INT 3
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: DOUBLE
9920: EQUAL
9921: IFTRUE 9925
9923: GO 9950
9925: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
9926: LD_STRING ACH_OOL
9928: PPUSH
9929: LD_REAL  5.00000000000000E-0001
9932: PPUSH
9933: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9937: LD_STRING ACH_E
9939: PPUSH
9940: LD_REAL  5.00000000000000E-0001
9943: PPUSH
9944: CALL_OW 564
// end ; [ 3 , 1 ] :
9948: GO 9991
9950: LD_INT 3
9952: PUSH
9953: LD_INT 1
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: DOUBLE
9960: EQUAL
9961: IFTRUE 9965
9963: GO 9990
9965: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9966: LD_STRING ACH_AH
9968: PPUSH
9969: LD_REAL  5.00000000000000E-0001
9972: PPUSH
9973: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
9977: LD_STRING ACH_OOL
9979: PPUSH
9980: LD_REAL  5.00000000000000E-0001
9983: PPUSH
9984: CALL_OW 564
// end ; end ;
9988: GO 9991
9990: POP
// end ; end_of_file
9991: LD_VAR 0 2
9995: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9996: LD_INT 0
9998: PPUSH
9999: PPUSH
10000: PPUSH
// for side = 1 to 8 do
10001: LD_ADDR_VAR 0 2
10005: PUSH
10006: DOUBLE
10007: LD_INT 1
10009: DEC
10010: ST_TO_ADDR
10011: LD_INT 8
10013: PUSH
10014: FOR_TO
10015: IFFALSE 10136
// begin for i = 1 to 72 do
10017: LD_ADDR_VAR 0 3
10021: PUSH
10022: DOUBLE
10023: LD_INT 1
10025: DEC
10026: ST_TO_ADDR
10027: LD_INT 72
10029: PUSH
10030: FOR_TO
10031: IFFALSE 10062
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
10033: LD_VAR 0 3
10037: PPUSH
10038: LD_VAR 0 2
10042: PPUSH
10043: LD_INT 0
10045: PPUSH
10046: LD_VAR 0 3
10050: PPUSH
10051: CALL_OW 565
10055: PPUSH
10056: CALL_OW 322
10060: GO 10030
10062: POP
10063: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
10064: LD_INT 73
10066: PPUSH
10067: LD_VAR 0 2
10071: PPUSH
10072: LD_INT 0
10074: PPUSH
10075: LD_INT 25
10077: PPUSH
10078: CALL_OW 565
10082: PPUSH
10083: CALL_OW 322
// for i = 0 to 40 do
10087: LD_ADDR_VAR 0 3
10091: PUSH
10092: DOUBLE
10093: LD_INT 0
10095: DEC
10096: ST_TO_ADDR
10097: LD_INT 40
10099: PUSH
10100: FOR_TO
10101: IFFALSE 10132
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
10103: LD_VAR 0 3
10107: PPUSH
10108: LD_VAR 0 2
10112: PPUSH
10113: LD_INT 1
10115: PPUSH
10116: LD_VAR 0 3
10120: PPUSH
10121: CALL_OW 565
10125: PPUSH
10126: CALL_OW 324
10130: GO 10100
10132: POP
10133: POP
// end ;
10134: GO 10014
10136: POP
10137: POP
// end ;
10138: LD_VAR 0 1
10142: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
10143: LD_INT 0
10145: PPUSH
10146: PPUSH
10147: PPUSH
// for side = 1 to 8 do
10148: LD_ADDR_VAR 0 3
10152: PUSH
10153: DOUBLE
10154: LD_INT 1
10156: DEC
10157: ST_TO_ADDR
10158: LD_INT 8
10160: PUSH
10161: FOR_TO
10162: IFFALSE 14158
// begin for i = 1 to 73 do
10164: LD_ADDR_VAR 0 4
10168: PUSH
10169: DOUBLE
10170: LD_INT 1
10172: DEC
10173: ST_TO_ADDR
10174: LD_INT 73
10176: PUSH
10177: FOR_TO
10178: IFFALSE 10199
// SetTech ( i , side , state_disabled ) ;
10180: LD_VAR 0 4
10184: PPUSH
10185: LD_VAR 0 3
10189: PPUSH
10190: LD_INT 0
10192: PPUSH
10193: CALL_OW 322
10197: GO 10177
10199: POP
10200: POP
// for i = 0 to 40 do
10201: LD_ADDR_VAR 0 4
10205: PUSH
10206: DOUBLE
10207: LD_INT 0
10209: DEC
10210: ST_TO_ADDR
10211: LD_INT 40
10213: PUSH
10214: FOR_TO
10215: IFFALSE 10236
// SetRestrict ( i , side , false ) ;
10217: LD_VAR 0 4
10221: PPUSH
10222: LD_VAR 0 3
10226: PPUSH
10227: LD_INT 0
10229: PPUSH
10230: CALL_OW 324
10234: GO 10214
10236: POP
10237: POP
// case level of 1 :
10238: LD_VAR 0 1
10242: PUSH
10243: LD_INT 1
10245: DOUBLE
10246: EQUAL
10247: IFTRUE 10251
10249: GO 10404
10251: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10252: LD_INT 35
10254: PPUSH
10255: LD_VAR 0 3
10259: PPUSH
10260: LD_INT 1
10262: PPUSH
10263: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10267: LD_INT 45
10269: PPUSH
10270: LD_VAR 0 3
10274: PPUSH
10275: LD_INT 1
10277: PPUSH
10278: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10282: LD_INT 46
10284: PPUSH
10285: LD_VAR 0 3
10289: PPUSH
10290: LD_INT 1
10292: PPUSH
10293: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10297: LD_INT 47
10299: PPUSH
10300: LD_VAR 0 3
10304: PPUSH
10305: LD_INT 1
10307: PPUSH
10308: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10312: LD_INT 0
10314: PPUSH
10315: LD_VAR 0 3
10319: PPUSH
10320: LD_INT 1
10322: PPUSH
10323: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10327: LD_INT 2
10329: PPUSH
10330: LD_VAR 0 3
10334: PPUSH
10335: LD_INT 1
10337: PPUSH
10338: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10342: LD_INT 4
10344: PPUSH
10345: LD_VAR 0 3
10349: PPUSH
10350: LD_INT 1
10352: PPUSH
10353: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10357: LD_INT 6
10359: PPUSH
10360: LD_VAR 0 3
10364: PPUSH
10365: LD_INT 1
10367: PPUSH
10368: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10372: LD_INT 29
10374: PPUSH
10375: LD_VAR 0 3
10379: PPUSH
10380: LD_INT 1
10382: PPUSH
10383: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10387: LD_INT 31
10389: PPUSH
10390: LD_VAR 0 3
10394: PPUSH
10395: LD_INT 1
10397: PPUSH
10398: CALL_OW 324
// end ; 2 :
10402: GO 14156
10404: LD_INT 2
10406: DOUBLE
10407: EQUAL
10408: IFTRUE 10412
10410: GO 10610
10412: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10413: LD_INT 35
10415: PPUSH
10416: LD_VAR 0 3
10420: PPUSH
10421: LD_INT 1
10423: PPUSH
10424: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10428: LD_INT 45
10430: PPUSH
10431: LD_VAR 0 3
10435: PPUSH
10436: LD_INT 1
10438: PPUSH
10439: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10443: LD_INT 46
10445: PPUSH
10446: LD_VAR 0 3
10450: PPUSH
10451: LD_INT 1
10453: PPUSH
10454: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10458: LD_INT 47
10460: PPUSH
10461: LD_VAR 0 3
10465: PPUSH
10466: LD_INT 1
10468: PPUSH
10469: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10473: LD_INT 1
10475: PPUSH
10476: LD_VAR 0 3
10480: PPUSH
10481: LD_INT 1
10483: PPUSH
10484: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10488: LD_INT 2
10490: PPUSH
10491: LD_VAR 0 3
10495: PPUSH
10496: LD_INT 1
10498: PPUSH
10499: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10503: LD_INT 11
10505: PPUSH
10506: LD_VAR 0 3
10510: PPUSH
10511: LD_INT 1
10513: PPUSH
10514: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10518: LD_INT 0
10520: PPUSH
10521: LD_VAR 0 3
10525: PPUSH
10526: LD_INT 1
10528: PPUSH
10529: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10533: LD_INT 2
10535: PPUSH
10536: LD_VAR 0 3
10540: PPUSH
10541: LD_INT 1
10543: PPUSH
10544: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10548: LD_INT 4
10550: PPUSH
10551: LD_VAR 0 3
10555: PPUSH
10556: LD_INT 1
10558: PPUSH
10559: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10563: LD_INT 6
10565: PPUSH
10566: LD_VAR 0 3
10570: PPUSH
10571: LD_INT 1
10573: PPUSH
10574: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10578: LD_INT 29
10580: PPUSH
10581: LD_VAR 0 3
10585: PPUSH
10586: LD_INT 1
10588: PPUSH
10589: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10593: LD_INT 31
10595: PPUSH
10596: LD_VAR 0 3
10600: PPUSH
10601: LD_INT 1
10603: PPUSH
10604: CALL_OW 324
// end ; 3 :
10608: GO 14156
10610: LD_INT 3
10612: DOUBLE
10613: EQUAL
10614: IFTRUE 10618
10616: GO 11071
10618: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10619: LD_INT 35
10621: PPUSH
10622: LD_VAR 0 3
10626: PPUSH
10627: LD_INT 1
10629: PPUSH
10630: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10634: LD_INT 45
10636: PPUSH
10637: LD_VAR 0 3
10641: PPUSH
10642: LD_INT 1
10644: PPUSH
10645: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10649: LD_INT 46
10651: PPUSH
10652: LD_VAR 0 3
10656: PPUSH
10657: LD_INT 1
10659: PPUSH
10660: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10664: LD_INT 47
10666: PPUSH
10667: LD_VAR 0 3
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10679: LD_INT 1
10681: PPUSH
10682: LD_VAR 0 3
10686: PPUSH
10687: LD_INT 1
10689: PPUSH
10690: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10694: LD_INT 2
10696: PPUSH
10697: LD_VAR 0 3
10701: PPUSH
10702: LD_INT 1
10704: PPUSH
10705: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10709: LD_INT 11
10711: PPUSH
10712: LD_VAR 0 3
10716: PPUSH
10717: LD_INT 1
10719: PPUSH
10720: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10724: LD_INT 48
10726: PPUSH
10727: LD_VAR 0 3
10731: PPUSH
10732: LD_INT 1
10734: PPUSH
10735: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10739: LD_INT 69
10741: PPUSH
10742: LD_VAR 0 3
10746: PPUSH
10747: LD_INT 1
10749: PPUSH
10750: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10754: LD_INT 39
10756: PPUSH
10757: LD_VAR 0 3
10761: PPUSH
10762: LD_INT 1
10764: PPUSH
10765: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10769: LD_INT 43
10771: PPUSH
10772: LD_VAR 0 3
10776: PPUSH
10777: LD_INT 1
10779: PPUSH
10780: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10784: LD_INT 51
10786: PPUSH
10787: LD_VAR 0 3
10791: PPUSH
10792: LD_INT 1
10794: PPUSH
10795: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10799: LD_INT 6
10801: PPUSH
10802: LD_VAR 0 3
10806: PPUSH
10807: LD_INT 1
10809: PPUSH
10810: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10814: LD_INT 0
10816: PPUSH
10817: LD_VAR 0 3
10821: PPUSH
10822: LD_INT 1
10824: PPUSH
10825: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10829: LD_INT 2
10831: PPUSH
10832: LD_VAR 0 3
10836: PPUSH
10837: LD_INT 1
10839: PPUSH
10840: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10844: LD_INT 3
10846: PPUSH
10847: LD_VAR 0 3
10851: PPUSH
10852: LD_INT 1
10854: PPUSH
10855: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10859: LD_INT 4
10861: PPUSH
10862: LD_VAR 0 3
10866: PPUSH
10867: LD_INT 1
10869: PPUSH
10870: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10874: LD_INT 6
10876: PPUSH
10877: LD_VAR 0 3
10881: PPUSH
10882: LD_INT 1
10884: PPUSH
10885: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10889: LD_INT 7
10891: PPUSH
10892: LD_VAR 0 3
10896: PPUSH
10897: LD_INT 1
10899: PPUSH
10900: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10904: LD_INT 8
10906: PPUSH
10907: LD_VAR 0 3
10911: PPUSH
10912: LD_INT 1
10914: PPUSH
10915: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10919: LD_INT 10
10921: PPUSH
10922: LD_VAR 0 3
10926: PPUSH
10927: LD_INT 1
10929: PPUSH
10930: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10934: LD_INT 15
10936: PPUSH
10937: LD_VAR 0 3
10941: PPUSH
10942: LD_INT 1
10944: PPUSH
10945: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10949: LD_INT 16
10951: PPUSH
10952: LD_VAR 0 3
10956: PPUSH
10957: LD_INT 1
10959: PPUSH
10960: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10964: LD_INT 17
10966: PPUSH
10967: LD_VAR 0 3
10971: PPUSH
10972: LD_INT 1
10974: PPUSH
10975: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10979: LD_INT 20
10981: PPUSH
10982: LD_VAR 0 3
10986: PPUSH
10987: LD_INT 1
10989: PPUSH
10990: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10994: LD_INT 26
10996: PPUSH
10997: LD_VAR 0 3
11001: PPUSH
11002: LD_INT 1
11004: PPUSH
11005: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11009: LD_INT 27
11011: PPUSH
11012: LD_VAR 0 3
11016: PPUSH
11017: LD_INT 1
11019: PPUSH
11020: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11024: LD_INT 29
11026: PPUSH
11027: LD_VAR 0 3
11031: PPUSH
11032: LD_INT 1
11034: PPUSH
11035: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11039: LD_INT 31
11041: PPUSH
11042: LD_VAR 0 3
11046: PPUSH
11047: LD_INT 1
11049: PPUSH
11050: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11054: LD_INT 32
11056: PPUSH
11057: LD_VAR 0 3
11061: PPUSH
11062: LD_INT 1
11064: PPUSH
11065: CALL_OW 324
// end ; 4 :
11069: GO 14156
11071: LD_INT 4
11073: DOUBLE
11074: EQUAL
11075: IFTRUE 11079
11077: GO 12027
11079: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11080: LD_INT 35
11082: PPUSH
11083: LD_VAR 0 3
11087: PPUSH
11088: LD_INT 1
11090: PPUSH
11091: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11095: LD_INT 45
11097: PPUSH
11098: LD_VAR 0 3
11102: PPUSH
11103: LD_INT 1
11105: PPUSH
11106: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11110: LD_INT 46
11112: PPUSH
11113: LD_VAR 0 3
11117: PPUSH
11118: LD_INT 1
11120: PPUSH
11121: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11125: LD_INT 47
11127: PPUSH
11128: LD_VAR 0 3
11132: PPUSH
11133: LD_INT 1
11135: PPUSH
11136: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11140: LD_INT 1
11142: PPUSH
11143: LD_VAR 0 3
11147: PPUSH
11148: LD_INT 1
11150: PPUSH
11151: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11155: LD_INT 2
11157: PPUSH
11158: LD_VAR 0 3
11162: PPUSH
11163: LD_INT 1
11165: PPUSH
11166: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11170: LD_INT 11
11172: PPUSH
11173: LD_VAR 0 3
11177: PPUSH
11178: LD_INT 1
11180: PPUSH
11181: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11185: LD_INT 20
11187: PPUSH
11188: LD_VAR 0 3
11192: PPUSH
11193: LD_INT 1
11195: PPUSH
11196: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11200: LD_INT 48
11202: PPUSH
11203: LD_VAR 0 3
11207: PPUSH
11208: LD_INT 1
11210: PPUSH
11211: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11215: LD_INT 49
11217: PPUSH
11218: LD_VAR 0 3
11222: PPUSH
11223: LD_INT 1
11225: PPUSH
11226: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11230: LD_INT 69
11232: PPUSH
11233: LD_VAR 0 3
11237: PPUSH
11238: LD_INT 1
11240: PPUSH
11241: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11245: LD_INT 39
11247: PPUSH
11248: LD_VAR 0 3
11252: PPUSH
11253: LD_INT 1
11255: PPUSH
11256: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11260: LD_INT 34
11262: PPUSH
11263: LD_VAR 0 3
11267: PPUSH
11268: LD_INT 1
11270: PPUSH
11271: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11275: LD_INT 42
11277: PPUSH
11278: LD_VAR 0 3
11282: PPUSH
11283: LD_INT 1
11285: PPUSH
11286: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11290: LD_INT 44
11292: PPUSH
11293: LD_VAR 0 3
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11305: LD_INT 41
11307: PPUSH
11308: LD_VAR 0 3
11312: PPUSH
11313: LD_INT 1
11315: PPUSH
11316: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11320: LD_INT 43
11322: PPUSH
11323: LD_VAR 0 3
11327: PPUSH
11328: LD_INT 1
11330: PPUSH
11331: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11335: LD_INT 70
11337: PPUSH
11338: LD_VAR 0 3
11342: PPUSH
11343: LD_INT 1
11345: PPUSH
11346: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11350: LD_INT 51
11352: PPUSH
11353: LD_VAR 0 3
11357: PPUSH
11358: LD_INT 1
11360: PPUSH
11361: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11365: LD_INT 52
11367: PPUSH
11368: LD_VAR 0 3
11372: PPUSH
11373: LD_INT 1
11375: PPUSH
11376: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11380: LD_INT 6
11382: PPUSH
11383: LD_VAR 0 3
11387: PPUSH
11388: LD_INT 1
11390: PPUSH
11391: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11395: LD_INT 15
11397: PPUSH
11398: LD_VAR 0 3
11402: PPUSH
11403: LD_INT 1
11405: PPUSH
11406: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11410: LD_INT 7
11412: PPUSH
11413: LD_VAR 0 3
11417: PPUSH
11418: LD_INT 1
11420: PPUSH
11421: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11425: LD_INT 12
11427: PPUSH
11428: LD_VAR 0 3
11432: PPUSH
11433: LD_INT 1
11435: PPUSH
11436: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11440: LD_INT 18
11442: PPUSH
11443: LD_VAR 0 3
11447: PPUSH
11448: LD_INT 1
11450: PPUSH
11451: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11455: LD_INT 60
11457: PPUSH
11458: LD_VAR 0 3
11462: PPUSH
11463: LD_INT 1
11465: PPUSH
11466: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11470: LD_INT 9
11472: PPUSH
11473: LD_VAR 0 3
11477: PPUSH
11478: LD_INT 1
11480: PPUSH
11481: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11485: LD_INT 30
11487: PPUSH
11488: LD_VAR 0 3
11492: PPUSH
11493: LD_INT 1
11495: PPUSH
11496: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11500: LD_INT 37
11502: PPUSH
11503: LD_VAR 0 3
11507: PPUSH
11508: LD_INT 1
11510: PPUSH
11511: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11515: LD_INT 5
11517: PPUSH
11518: LD_VAR 0 3
11522: PPUSH
11523: LD_INT 1
11525: PPUSH
11526: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11530: LD_INT 66
11532: PPUSH
11533: LD_VAR 0 3
11537: PPUSH
11538: LD_INT 1
11540: PPUSH
11541: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11545: LD_INT 21
11547: PPUSH
11548: LD_VAR 0 3
11552: PPUSH
11553: LD_INT 1
11555: PPUSH
11556: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11560: LD_INT 22
11562: PPUSH
11563: LD_VAR 0 3
11567: PPUSH
11568: LD_INT 1
11570: PPUSH
11571: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11575: LD_INT 54
11577: PPUSH
11578: LD_VAR 0 3
11582: PPUSH
11583: LD_INT 1
11585: PPUSH
11586: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11590: LD_INT 0
11592: PPUSH
11593: LD_VAR 0 3
11597: PPUSH
11598: LD_INT 1
11600: PPUSH
11601: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11605: LD_INT 1
11607: PPUSH
11608: LD_VAR 0 3
11612: PPUSH
11613: LD_INT 1
11615: PPUSH
11616: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11620: LD_INT 2
11622: PPUSH
11623: LD_VAR 0 3
11627: PPUSH
11628: LD_INT 1
11630: PPUSH
11631: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11635: LD_INT 3
11637: PPUSH
11638: LD_VAR 0 3
11642: PPUSH
11643: LD_INT 1
11645: PPUSH
11646: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11650: LD_INT 4
11652: PPUSH
11653: LD_VAR 0 3
11657: PPUSH
11658: LD_INT 1
11660: PPUSH
11661: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11665: LD_INT 5
11667: PPUSH
11668: LD_VAR 0 3
11672: PPUSH
11673: LD_INT 1
11675: PPUSH
11676: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11680: LD_INT 6
11682: PPUSH
11683: LD_VAR 0 3
11687: PPUSH
11688: LD_INT 1
11690: PPUSH
11691: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11695: LD_INT 7
11697: PPUSH
11698: LD_VAR 0 3
11702: PPUSH
11703: LD_INT 1
11705: PPUSH
11706: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11710: LD_INT 8
11712: PPUSH
11713: LD_VAR 0 3
11717: PPUSH
11718: LD_INT 1
11720: PPUSH
11721: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11725: LD_INT 10
11727: PPUSH
11728: LD_VAR 0 3
11732: PPUSH
11733: LD_INT 1
11735: PPUSH
11736: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11740: LD_INT 11
11742: PPUSH
11743: LD_VAR 0 3
11747: PPUSH
11748: LD_INT 1
11750: PPUSH
11751: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11755: LD_INT 12
11757: PPUSH
11758: LD_VAR 0 3
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11770: LD_INT 13
11772: PPUSH
11773: LD_VAR 0 3
11777: PPUSH
11778: LD_INT 1
11780: PPUSH
11781: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11785: LD_INT 14
11787: PPUSH
11788: LD_VAR 0 3
11792: PPUSH
11793: LD_INT 1
11795: PPUSH
11796: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11800: LD_INT 15
11802: PPUSH
11803: LD_VAR 0 3
11807: PPUSH
11808: LD_INT 1
11810: PPUSH
11811: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11815: LD_INT 16
11817: PPUSH
11818: LD_VAR 0 3
11822: PPUSH
11823: LD_INT 1
11825: PPUSH
11826: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11830: LD_INT 17
11832: PPUSH
11833: LD_VAR 0 3
11837: PPUSH
11838: LD_INT 1
11840: PPUSH
11841: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11845: LD_INT 19
11847: PPUSH
11848: LD_VAR 0 3
11852: PPUSH
11853: LD_INT 1
11855: PPUSH
11856: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11860: LD_INT 20
11862: PPUSH
11863: LD_VAR 0 3
11867: PPUSH
11868: LD_INT 1
11870: PPUSH
11871: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11875: LD_INT 21
11877: PPUSH
11878: LD_VAR 0 3
11882: PPUSH
11883: LD_INT 1
11885: PPUSH
11886: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11890: LD_INT 23
11892: PPUSH
11893: LD_VAR 0 3
11897: PPUSH
11898: LD_INT 1
11900: PPUSH
11901: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11905: LD_INT 26
11907: PPUSH
11908: LD_VAR 0 3
11912: PPUSH
11913: LD_INT 1
11915: PPUSH
11916: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11920: LD_INT 27
11922: PPUSH
11923: LD_VAR 0 3
11927: PPUSH
11928: LD_INT 1
11930: PPUSH
11931: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11935: LD_INT 28
11937: PPUSH
11938: LD_VAR 0 3
11942: PPUSH
11943: LD_INT 1
11945: PPUSH
11946: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11950: LD_INT 29
11952: PPUSH
11953: LD_VAR 0 3
11957: PPUSH
11958: LD_INT 1
11960: PPUSH
11961: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11965: LD_INT 30
11967: PPUSH
11968: LD_VAR 0 3
11972: PPUSH
11973: LD_INT 1
11975: PPUSH
11976: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11980: LD_INT 31
11982: PPUSH
11983: LD_VAR 0 3
11987: PPUSH
11988: LD_INT 1
11990: PPUSH
11991: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11995: LD_INT 32
11997: PPUSH
11998: LD_VAR 0 3
12002: PPUSH
12003: LD_INT 1
12005: PPUSH
12006: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12010: LD_INT 36
12012: PPUSH
12013: LD_VAR 0 3
12017: PPUSH
12018: LD_INT 1
12020: PPUSH
12021: CALL_OW 324
// end ; 5 :
12025: GO 14156
12027: LD_INT 5
12029: DOUBLE
12030: EQUAL
12031: IFTRUE 12035
12033: GO 13148
12035: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12036: LD_INT 35
12038: PPUSH
12039: LD_VAR 0 3
12043: PPUSH
12044: LD_INT 1
12046: PPUSH
12047: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12051: LD_INT 45
12053: PPUSH
12054: LD_VAR 0 3
12058: PPUSH
12059: LD_INT 1
12061: PPUSH
12062: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12066: LD_INT 46
12068: PPUSH
12069: LD_VAR 0 3
12073: PPUSH
12074: LD_INT 1
12076: PPUSH
12077: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12081: LD_INT 47
12083: PPUSH
12084: LD_VAR 0 3
12088: PPUSH
12089: LD_INT 1
12091: PPUSH
12092: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12096: LD_INT 1
12098: PPUSH
12099: LD_VAR 0 3
12103: PPUSH
12104: LD_INT 1
12106: PPUSH
12107: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12111: LD_INT 2
12113: PPUSH
12114: LD_VAR 0 3
12118: PPUSH
12119: LD_INT 1
12121: PPUSH
12122: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12126: LD_INT 11
12128: PPUSH
12129: LD_VAR 0 3
12133: PPUSH
12134: LD_INT 1
12136: PPUSH
12137: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12141: LD_INT 20
12143: PPUSH
12144: LD_VAR 0 3
12148: PPUSH
12149: LD_INT 1
12151: PPUSH
12152: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12156: LD_INT 48
12158: PPUSH
12159: LD_VAR 0 3
12163: PPUSH
12164: LD_INT 1
12166: PPUSH
12167: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12171: LD_INT 49
12173: PPUSH
12174: LD_VAR 0 3
12178: PPUSH
12179: LD_INT 1
12181: PPUSH
12182: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12186: LD_INT 69
12188: PPUSH
12189: LD_VAR 0 3
12193: PPUSH
12194: LD_INT 1
12196: PPUSH
12197: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12201: LD_INT 39
12203: PPUSH
12204: LD_VAR 0 3
12208: PPUSH
12209: LD_INT 1
12211: PPUSH
12212: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12216: LD_INT 34
12218: PPUSH
12219: LD_VAR 0 3
12223: PPUSH
12224: LD_INT 1
12226: PPUSH
12227: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12231: LD_INT 42
12233: PPUSH
12234: LD_VAR 0 3
12238: PPUSH
12239: LD_INT 1
12241: PPUSH
12242: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12246: LD_INT 44
12248: PPUSH
12249: LD_VAR 0 3
12253: PPUSH
12254: LD_INT 1
12256: PPUSH
12257: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12261: LD_INT 41
12263: PPUSH
12264: LD_VAR 0 3
12268: PPUSH
12269: LD_INT 1
12271: PPUSH
12272: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12276: LD_INT 40
12278: PPUSH
12279: LD_VAR 0 3
12283: PPUSH
12284: LD_INT 1
12286: PPUSH
12287: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12291: LD_INT 43
12293: PPUSH
12294: LD_VAR 0 3
12298: PPUSH
12299: LD_INT 1
12301: PPUSH
12302: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12306: LD_INT 70
12308: PPUSH
12309: LD_VAR 0 3
12313: PPUSH
12314: LD_INT 1
12316: PPUSH
12317: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12321: LD_INT 51
12323: PPUSH
12324: LD_VAR 0 3
12328: PPUSH
12329: LD_INT 1
12331: PPUSH
12332: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12336: LD_INT 52
12338: PPUSH
12339: LD_VAR 0 3
12343: PPUSH
12344: LD_INT 1
12346: PPUSH
12347: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12351: LD_INT 6
12353: PPUSH
12354: LD_VAR 0 3
12358: PPUSH
12359: LD_INT 1
12361: PPUSH
12362: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12366: LD_INT 15
12368: PPUSH
12369: LD_VAR 0 3
12373: PPUSH
12374: LD_INT 1
12376: PPUSH
12377: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12381: LD_INT 7
12383: PPUSH
12384: LD_VAR 0 3
12388: PPUSH
12389: LD_INT 1
12391: PPUSH
12392: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12396: LD_INT 12
12398: PPUSH
12399: LD_VAR 0 3
12403: PPUSH
12404: LD_INT 1
12406: PPUSH
12407: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12411: LD_INT 17
12413: PPUSH
12414: LD_VAR 0 3
12418: PPUSH
12419: LD_INT 1
12421: PPUSH
12422: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12426: LD_INT 18
12428: PPUSH
12429: LD_VAR 0 3
12433: PPUSH
12434: LD_INT 1
12436: PPUSH
12437: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12441: LD_INT 60
12443: PPUSH
12444: LD_VAR 0 3
12448: PPUSH
12449: LD_INT 1
12451: PPUSH
12452: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12456: LD_INT 32
12458: PPUSH
12459: LD_VAR 0 3
12463: PPUSH
12464: LD_INT 1
12466: PPUSH
12467: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12471: LD_INT 9
12473: PPUSH
12474: LD_VAR 0 3
12478: PPUSH
12479: LD_INT 1
12481: PPUSH
12482: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12486: LD_INT 57
12488: PPUSH
12489: LD_VAR 0 3
12493: PPUSH
12494: LD_INT 1
12496: PPUSH
12497: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12501: LD_INT 30
12503: PPUSH
12504: LD_VAR 0 3
12508: PPUSH
12509: LD_INT 1
12511: PPUSH
12512: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12516: LD_INT 37
12518: PPUSH
12519: LD_VAR 0 3
12523: PPUSH
12524: LD_INT 1
12526: PPUSH
12527: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12531: LD_INT 63
12533: PPUSH
12534: LD_VAR 0 3
12538: PPUSH
12539: LD_INT 1
12541: PPUSH
12542: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12546: LD_INT 3
12548: PPUSH
12549: LD_VAR 0 3
12553: PPUSH
12554: LD_INT 1
12556: PPUSH
12557: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12561: LD_INT 4
12563: PPUSH
12564: LD_VAR 0 3
12568: PPUSH
12569: LD_INT 1
12571: PPUSH
12572: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12576: LD_INT 5
12578: PPUSH
12579: LD_VAR 0 3
12583: PPUSH
12584: LD_INT 1
12586: PPUSH
12587: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12591: LD_INT 66
12593: PPUSH
12594: LD_VAR 0 3
12598: PPUSH
12599: LD_INT 1
12601: PPUSH
12602: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12606: LD_INT 21
12608: PPUSH
12609: LD_VAR 0 3
12613: PPUSH
12614: LD_INT 1
12616: PPUSH
12617: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12621: LD_INT 22
12623: PPUSH
12624: LD_VAR 0 3
12628: PPUSH
12629: LD_INT 1
12631: PPUSH
12632: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12636: LD_INT 19
12638: PPUSH
12639: LD_VAR 0 3
12643: PPUSH
12644: LD_INT 1
12646: PPUSH
12647: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12651: LD_INT 54
12653: PPUSH
12654: LD_VAR 0 3
12658: PPUSH
12659: LD_INT 1
12661: PPUSH
12662: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12666: LD_INT 55
12668: PPUSH
12669: LD_VAR 0 3
12673: PPUSH
12674: LD_INT 1
12676: PPUSH
12677: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12681: LD_INT 0
12683: PPUSH
12684: LD_VAR 0 3
12688: PPUSH
12689: LD_INT 1
12691: PPUSH
12692: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12696: LD_INT 1
12698: PPUSH
12699: LD_VAR 0 3
12703: PPUSH
12704: LD_INT 1
12706: PPUSH
12707: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12711: LD_INT 2
12713: PPUSH
12714: LD_VAR 0 3
12718: PPUSH
12719: LD_INT 1
12721: PPUSH
12722: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12726: LD_INT 3
12728: PPUSH
12729: LD_VAR 0 3
12733: PPUSH
12734: LD_INT 1
12736: PPUSH
12737: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12741: LD_INT 4
12743: PPUSH
12744: LD_VAR 0 3
12748: PPUSH
12749: LD_INT 1
12751: PPUSH
12752: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12756: LD_INT 5
12758: PPUSH
12759: LD_VAR 0 3
12763: PPUSH
12764: LD_INT 1
12766: PPUSH
12767: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12771: LD_INT 6
12773: PPUSH
12774: LD_VAR 0 3
12778: PPUSH
12779: LD_INT 1
12781: PPUSH
12782: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12786: LD_INT 7
12788: PPUSH
12789: LD_VAR 0 3
12793: PPUSH
12794: LD_INT 1
12796: PPUSH
12797: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12801: LD_INT 8
12803: PPUSH
12804: LD_VAR 0 3
12808: PPUSH
12809: LD_INT 1
12811: PPUSH
12812: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12816: LD_INT 10
12818: PPUSH
12819: LD_VAR 0 3
12823: PPUSH
12824: LD_INT 1
12826: PPUSH
12827: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12831: LD_INT 11
12833: PPUSH
12834: LD_VAR 0 3
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12846: LD_INT 12
12848: PPUSH
12849: LD_VAR 0 3
12853: PPUSH
12854: LD_INT 1
12856: PPUSH
12857: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12861: LD_INT 13
12863: PPUSH
12864: LD_VAR 0 3
12868: PPUSH
12869: LD_INT 1
12871: PPUSH
12872: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12876: LD_INT 14
12878: PPUSH
12879: LD_VAR 0 3
12883: PPUSH
12884: LD_INT 1
12886: PPUSH
12887: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12891: LD_INT 15
12893: PPUSH
12894: LD_VAR 0 3
12898: PPUSH
12899: LD_INT 1
12901: PPUSH
12902: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12906: LD_INT 16
12908: PPUSH
12909: LD_VAR 0 3
12913: PPUSH
12914: LD_INT 1
12916: PPUSH
12917: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12921: LD_INT 17
12923: PPUSH
12924: LD_VAR 0 3
12928: PPUSH
12929: LD_INT 1
12931: PPUSH
12932: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12936: LD_INT 18
12938: PPUSH
12939: LD_VAR 0 3
12943: PPUSH
12944: LD_INT 1
12946: PPUSH
12947: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12951: LD_INT 19
12953: PPUSH
12954: LD_VAR 0 3
12958: PPUSH
12959: LD_INT 1
12961: PPUSH
12962: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12966: LD_INT 20
12968: PPUSH
12969: LD_VAR 0 3
12973: PPUSH
12974: LD_INT 1
12976: PPUSH
12977: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12981: LD_INT 21
12983: PPUSH
12984: LD_VAR 0 3
12988: PPUSH
12989: LD_INT 1
12991: PPUSH
12992: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12996: LD_INT 23
12998: PPUSH
12999: LD_VAR 0 3
13003: PPUSH
13004: LD_INT 1
13006: PPUSH
13007: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13011: LD_INT 26
13013: PPUSH
13014: LD_VAR 0 3
13018: PPUSH
13019: LD_INT 1
13021: PPUSH
13022: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13026: LD_INT 27
13028: PPUSH
13029: LD_VAR 0 3
13033: PPUSH
13034: LD_INT 1
13036: PPUSH
13037: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13041: LD_INT 28
13043: PPUSH
13044: LD_VAR 0 3
13048: PPUSH
13049: LD_INT 1
13051: PPUSH
13052: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13056: LD_INT 29
13058: PPUSH
13059: LD_VAR 0 3
13063: PPUSH
13064: LD_INT 1
13066: PPUSH
13067: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13071: LD_INT 30
13073: PPUSH
13074: LD_VAR 0 3
13078: PPUSH
13079: LD_INT 1
13081: PPUSH
13082: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13086: LD_INT 31
13088: PPUSH
13089: LD_VAR 0 3
13093: PPUSH
13094: LD_INT 1
13096: PPUSH
13097: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13101: LD_INT 32
13103: PPUSH
13104: LD_VAR 0 3
13108: PPUSH
13109: LD_INT 1
13111: PPUSH
13112: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
13116: LD_INT 33
13118: PPUSH
13119: LD_VAR 0 3
13123: PPUSH
13124: LD_INT 1
13126: PPUSH
13127: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13131: LD_INT 36
13133: PPUSH
13134: LD_VAR 0 3
13138: PPUSH
13139: LD_INT 1
13141: PPUSH
13142: CALL_OW 324
// end ; 6 :
13146: GO 14156
13148: LD_INT 6
13150: DOUBLE
13151: EQUAL
13152: IFTRUE 13156
13154: GO 14081
13156: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13157: LD_INT 35
13159: PPUSH
13160: LD_VAR 0 3
13164: PPUSH
13165: LD_INT 1
13167: PPUSH
13168: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13172: LD_INT 45
13174: PPUSH
13175: LD_VAR 0 3
13179: PPUSH
13180: LD_INT 1
13182: PPUSH
13183: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13187: LD_INT 46
13189: PPUSH
13190: LD_VAR 0 3
13194: PPUSH
13195: LD_INT 1
13197: PPUSH
13198: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13202: LD_INT 47
13204: PPUSH
13205: LD_VAR 0 3
13209: PPUSH
13210: LD_INT 1
13212: PPUSH
13213: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13217: LD_INT 1
13219: PPUSH
13220: LD_VAR 0 3
13224: PPUSH
13225: LD_INT 1
13227: PPUSH
13228: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13232: LD_INT 2
13234: PPUSH
13235: LD_VAR 0 3
13239: PPUSH
13240: LD_INT 1
13242: PPUSH
13243: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13247: LD_INT 11
13249: PPUSH
13250: LD_VAR 0 3
13254: PPUSH
13255: LD_INT 1
13257: PPUSH
13258: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13262: LD_INT 20
13264: PPUSH
13265: LD_VAR 0 3
13269: PPUSH
13270: LD_INT 1
13272: PPUSH
13273: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13277: LD_INT 48
13279: PPUSH
13280: LD_VAR 0 3
13284: PPUSH
13285: LD_INT 1
13287: PPUSH
13288: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13292: LD_INT 49
13294: PPUSH
13295: LD_VAR 0 3
13299: PPUSH
13300: LD_INT 1
13302: PPUSH
13303: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
13307: LD_INT 50
13309: PPUSH
13310: LD_VAR 0 3
13314: PPUSH
13315: LD_INT 1
13317: PPUSH
13318: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13322: LD_INT 69
13324: PPUSH
13325: LD_VAR 0 3
13329: PPUSH
13330: LD_INT 1
13332: PPUSH
13333: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13337: LD_INT 39
13339: PPUSH
13340: LD_VAR 0 3
13344: PPUSH
13345: LD_INT 1
13347: PPUSH
13348: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13352: LD_INT 34
13354: PPUSH
13355: LD_VAR 0 3
13359: PPUSH
13360: LD_INT 1
13362: PPUSH
13363: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13367: LD_INT 42
13369: PPUSH
13370: LD_VAR 0 3
13374: PPUSH
13375: LD_INT 1
13377: PPUSH
13378: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13382: LD_INT 44
13384: PPUSH
13385: LD_VAR 0 3
13389: PPUSH
13390: LD_INT 1
13392: PPUSH
13393: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13397: LD_INT 41
13399: PPUSH
13400: LD_VAR 0 3
13404: PPUSH
13405: LD_INT 1
13407: PPUSH
13408: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13412: LD_INT 13
13414: PPUSH
13415: LD_VAR 0 3
13419: PPUSH
13420: LD_INT 1
13422: PPUSH
13423: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13427: LD_INT 40
13429: PPUSH
13430: LD_VAR 0 3
13434: PPUSH
13435: LD_INT 1
13437: PPUSH
13438: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13442: LD_INT 43
13444: PPUSH
13445: LD_VAR 0 3
13449: PPUSH
13450: LD_INT 1
13452: PPUSH
13453: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13457: LD_INT 70
13459: PPUSH
13460: LD_VAR 0 3
13464: PPUSH
13465: LD_INT 1
13467: PPUSH
13468: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13472: LD_INT 23
13474: PPUSH
13475: LD_VAR 0 3
13479: PPUSH
13480: LD_INT 1
13482: PPUSH
13483: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13487: LD_INT 51
13489: PPUSH
13490: LD_VAR 0 3
13494: PPUSH
13495: LD_INT 1
13497: PPUSH
13498: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13502: LD_INT 52
13504: PPUSH
13505: LD_VAR 0 3
13509: PPUSH
13510: LD_INT 1
13512: PPUSH
13513: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13517: LD_INT 6
13519: PPUSH
13520: LD_VAR 0 3
13524: PPUSH
13525: LD_INT 1
13527: PPUSH
13528: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13532: LD_INT 15
13534: PPUSH
13535: LD_VAR 0 3
13539: PPUSH
13540: LD_INT 1
13542: PPUSH
13543: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13547: LD_INT 7
13549: PPUSH
13550: LD_VAR 0 3
13554: PPUSH
13555: LD_INT 1
13557: PPUSH
13558: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13562: LD_INT 12
13564: PPUSH
13565: LD_VAR 0 3
13569: PPUSH
13570: LD_INT 1
13572: PPUSH
13573: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13577: LD_INT 10
13579: PPUSH
13580: LD_VAR 0 3
13584: PPUSH
13585: LD_INT 1
13587: PPUSH
13588: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13592: LD_INT 17
13594: PPUSH
13595: LD_VAR 0 3
13599: PPUSH
13600: LD_INT 1
13602: PPUSH
13603: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13607: LD_INT 18
13609: PPUSH
13610: LD_VAR 0 3
13614: PPUSH
13615: LD_INT 1
13617: PPUSH
13618: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13622: LD_INT 60
13624: PPUSH
13625: LD_VAR 0 3
13629: PPUSH
13630: LD_INT 1
13632: PPUSH
13633: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13637: LD_INT 61
13639: PPUSH
13640: LD_VAR 0 3
13644: PPUSH
13645: LD_INT 1
13647: PPUSH
13648: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13652: LD_INT 32
13654: PPUSH
13655: LD_VAR 0 3
13659: PPUSH
13660: LD_INT 1
13662: PPUSH
13663: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13667: LD_INT 27
13669: PPUSH
13670: LD_VAR 0 3
13674: PPUSH
13675: LD_INT 1
13677: PPUSH
13678: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13682: LD_INT 36
13684: PPUSH
13685: LD_VAR 0 3
13689: PPUSH
13690: LD_INT 1
13692: PPUSH
13693: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13697: LD_INT 33
13699: PPUSH
13700: LD_VAR 0 3
13704: PPUSH
13705: LD_INT 1
13707: PPUSH
13708: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13712: LD_INT 9
13714: PPUSH
13715: LD_VAR 0 3
13719: PPUSH
13720: LD_INT 1
13722: PPUSH
13723: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13727: LD_INT 38
13729: PPUSH
13730: LD_VAR 0 3
13734: PPUSH
13735: LD_INT 1
13737: PPUSH
13738: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13742: LD_INT 57
13744: PPUSH
13745: LD_VAR 0 3
13749: PPUSH
13750: LD_INT 1
13752: PPUSH
13753: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13757: LD_INT 58
13759: PPUSH
13760: LD_VAR 0 3
13764: PPUSH
13765: LD_INT 1
13767: PPUSH
13768: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13772: LD_INT 28
13774: PPUSH
13775: LD_VAR 0 3
13779: PPUSH
13780: LD_INT 1
13782: PPUSH
13783: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13787: LD_INT 29
13789: PPUSH
13790: LD_VAR 0 3
13794: PPUSH
13795: LD_INT 1
13797: PPUSH
13798: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13802: LD_INT 30
13804: PPUSH
13805: LD_VAR 0 3
13809: PPUSH
13810: LD_INT 1
13812: PPUSH
13813: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13817: LD_INT 37
13819: PPUSH
13820: LD_VAR 0 3
13824: PPUSH
13825: LD_INT 1
13827: PPUSH
13828: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13832: LD_INT 63
13834: PPUSH
13835: LD_VAR 0 3
13839: PPUSH
13840: LD_INT 1
13842: PPUSH
13843: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13847: LD_INT 64
13849: PPUSH
13850: LD_VAR 0 3
13854: PPUSH
13855: LD_INT 1
13857: PPUSH
13858: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13862: LD_INT 3
13864: PPUSH
13865: LD_VAR 0 3
13869: PPUSH
13870: LD_INT 1
13872: PPUSH
13873: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13877: LD_INT 4
13879: PPUSH
13880: LD_VAR 0 3
13884: PPUSH
13885: LD_INT 1
13887: PPUSH
13888: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13892: LD_INT 5
13894: PPUSH
13895: LD_VAR 0 3
13899: PPUSH
13900: LD_INT 1
13902: PPUSH
13903: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13907: LD_INT 8
13909: PPUSH
13910: LD_VAR 0 3
13914: PPUSH
13915: LD_INT 1
13917: PPUSH
13918: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13922: LD_INT 66
13924: PPUSH
13925: LD_VAR 0 3
13929: PPUSH
13930: LD_INT 1
13932: PPUSH
13933: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13937: LD_INT 67
13939: PPUSH
13940: LD_VAR 0 3
13944: PPUSH
13945: LD_INT 1
13947: PPUSH
13948: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13952: LD_INT 21
13954: PPUSH
13955: LD_VAR 0 3
13959: PPUSH
13960: LD_INT 1
13962: PPUSH
13963: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13967: LD_INT 22
13969: PPUSH
13970: LD_VAR 0 3
13974: PPUSH
13975: LD_INT 1
13977: PPUSH
13978: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13982: LD_INT 19
13984: PPUSH
13985: LD_VAR 0 3
13989: PPUSH
13990: LD_INT 1
13992: PPUSH
13993: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13997: LD_INT 26
13999: PPUSH
14000: LD_VAR 0 3
14004: PPUSH
14005: LD_INT 1
14007: PPUSH
14008: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14012: LD_INT 54
14014: PPUSH
14015: LD_VAR 0 3
14019: PPUSH
14020: LD_INT 1
14022: PPUSH
14023: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14027: LD_INT 55
14029: PPUSH
14030: LD_VAR 0 3
14034: PPUSH
14035: LD_INT 1
14037: PPUSH
14038: CALL_OW 322
// for i = 0 to 39 do
14042: LD_ADDR_VAR 0 4
14046: PUSH
14047: DOUBLE
14048: LD_INT 0
14050: DEC
14051: ST_TO_ADDR
14052: LD_INT 39
14054: PUSH
14055: FOR_TO
14056: IFFALSE 14077
// SetRestrict ( i , side , true ) ;
14058: LD_VAR 0 4
14062: PPUSH
14063: LD_VAR 0 3
14067: PPUSH
14068: LD_INT 1
14070: PPUSH
14071: CALL_OW 324
14075: GO 14055
14077: POP
14078: POP
// end ; else
14079: GO 14156
14081: POP
// begin for i = 1 to 73 do
14082: LD_ADDR_VAR 0 4
14086: PUSH
14087: DOUBLE
14088: LD_INT 1
14090: DEC
14091: ST_TO_ADDR
14092: LD_INT 73
14094: PUSH
14095: FOR_TO
14096: IFFALSE 14117
// SetTech ( i , side , state_enabled ) ;
14098: LD_VAR 0 4
14102: PPUSH
14103: LD_VAR 0 3
14107: PPUSH
14108: LD_INT 1
14110: PPUSH
14111: CALL_OW 322
14115: GO 14095
14117: POP
14118: POP
// for i = 0 to 39 do
14119: LD_ADDR_VAR 0 4
14123: PUSH
14124: DOUBLE
14125: LD_INT 0
14127: DEC
14128: ST_TO_ADDR
14129: LD_INT 39
14131: PUSH
14132: FOR_TO
14133: IFFALSE 14154
// SetRestrict ( i , side , true ) ;
14135: LD_VAR 0 4
14139: PPUSH
14140: LD_VAR 0 3
14144: PPUSH
14145: LD_INT 1
14147: PPUSH
14148: CALL_OW 324
14152: GO 14132
14154: POP
14155: POP
// end ; end ; end ;
14156: GO 10161
14158: POP
14159: POP
// end ; end_of_file
14160: LD_VAR 0 2
14164: RET
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
14165: LD_INT 0
14167: PPUSH
14168: PPUSH
14169: PPUSH
// BuildUpTime_Delay = 0 ;
14170: LD_ADDR_EXP 57
14174: PUSH
14175: LD_INT 0
14177: ST_TO_ADDR
// if not def_builduptime then
14178: LD_EXP 14
14182: NOT
14183: IFFALSE 14187
// exit ;
14185: GO 14370
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14187: LD_ADDR_EXP 57
14191: PUSH
14192: LD_INT 8400
14194: PUSH
14195: LD_INT 2100
14197: PUSH
14198: LD_EXP 14
14202: MUL
14203: PLUS
14204: ST_TO_ADDR
// BuildUpTimeActive := true ;
14205: LD_ADDR_EXP 56
14209: PUSH
14210: LD_INT 1
14212: ST_TO_ADDR
// for i := 1 to 8 do
14213: LD_ADDR_VAR 0 2
14217: PUSH
14218: DOUBLE
14219: LD_INT 1
14221: DEC
14222: ST_TO_ADDR
14223: LD_INT 8
14225: PUSH
14226: FOR_TO
14227: IFFALSE 14368
// if Side_Positions [ i ] then
14229: LD_EXP 34
14233: PUSH
14234: LD_VAR 0 2
14238: ARRAY
14239: IFFALSE 14366
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14241: LD_EXP 55
14245: PUSH
14246: LD_EXP 34
14250: PUSH
14251: LD_VAR 0 2
14255: ARRAY
14256: ARRAY
14257: PPUSH
14258: LD_INT 5
14260: PPUSH
14261: CALL_OW 424
// for j := 1 to 8 do
14265: LD_ADDR_VAR 0 3
14269: PUSH
14270: DOUBLE
14271: LD_INT 1
14273: DEC
14274: ST_TO_ADDR
14275: LD_INT 8
14277: PUSH
14278: FOR_TO
14279: IFFALSE 14364
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14281: LD_EXP 34
14285: PUSH
14286: LD_VAR 0 3
14290: ARRAY
14291: PUSH
14292: LD_EXP 31
14296: PUSH
14297: LD_VAR 0 2
14301: ARRAY
14302: PUSH
14303: LD_EXP 31
14307: PUSH
14308: LD_VAR 0 3
14312: ARRAY
14313: NONEQUAL
14314: PUSH
14315: LD_EXP 36
14319: NOT
14320: PUSH
14321: LD_VAR 0 2
14325: PUSH
14326: LD_VAR 0 3
14330: NONEQUAL
14331: AND
14332: OR
14333: AND
14334: IFFALSE 14362
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14336: LD_VAR 0 3
14340: PPUSH
14341: LD_EXP 55
14345: PUSH
14346: LD_EXP 34
14350: PUSH
14351: LD_VAR 0 2
14355: ARRAY
14356: ARRAY
14357: PPUSH
14358: CALL_OW 333
14362: GO 14278
14364: POP
14365: POP
// end ;
14366: GO 14226
14368: POP
14369: POP
// end ;
14370: LD_VAR 0 1
14374: RET
// export function EndBuildUp ; var i , j ; begin
14375: LD_INT 0
14377: PPUSH
14378: PPUSH
14379: PPUSH
// BuildUpTimeActive := false ;
14380: LD_ADDR_EXP 56
14384: PUSH
14385: LD_INT 0
14387: ST_TO_ADDR
// for i := 1 to 8 do
14388: LD_ADDR_VAR 0 2
14392: PUSH
14393: DOUBLE
14394: LD_INT 1
14396: DEC
14397: ST_TO_ADDR
14398: LD_INT 8
14400: PUSH
14401: FOR_TO
14402: IFFALSE 14543
// if Side_Positions [ i ] then
14404: LD_EXP 34
14408: PUSH
14409: LD_VAR 0 2
14413: ARRAY
14414: IFFALSE 14541
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14416: LD_EXP 55
14420: PUSH
14421: LD_EXP 34
14425: PUSH
14426: LD_VAR 0 2
14430: ARRAY
14431: ARRAY
14432: PPUSH
14433: LD_INT 0
14435: PPUSH
14436: CALL_OW 424
// for j := 1 to 8 do
14440: LD_ADDR_VAR 0 3
14444: PUSH
14445: DOUBLE
14446: LD_INT 1
14448: DEC
14449: ST_TO_ADDR
14450: LD_INT 8
14452: PUSH
14453: FOR_TO
14454: IFFALSE 14539
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14456: LD_EXP 34
14460: PUSH
14461: LD_VAR 0 3
14465: ARRAY
14466: PUSH
14467: LD_EXP 31
14471: PUSH
14472: LD_VAR 0 2
14476: ARRAY
14477: PUSH
14478: LD_EXP 31
14482: PUSH
14483: LD_VAR 0 3
14487: ARRAY
14488: NONEQUAL
14489: PUSH
14490: LD_EXP 36
14494: NOT
14495: PUSH
14496: LD_VAR 0 2
14500: PUSH
14501: LD_VAR 0 3
14505: NONEQUAL
14506: AND
14507: OR
14508: AND
14509: IFFALSE 14537
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14511: LD_VAR 0 3
14515: PPUSH
14516: LD_EXP 55
14520: PUSH
14521: LD_EXP 34
14525: PUSH
14526: LD_VAR 0 2
14530: ARRAY
14531: ARRAY
14532: PPUSH
14533: CALL_OW 334
14537: GO 14453
14539: POP
14540: POP
// end ;
14541: GO 14401
14543: POP
14544: POP
// end ;
14545: LD_VAR 0 1
14549: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14550: LD_EXP 56
14554: IFFALSE 14729
14556: GO 14558
14558: DISABLE
14559: LD_INT 0
14561: PPUSH
14562: PPUSH
// begin for i := 1 to 8 do
14563: LD_ADDR_VAR 0 1
14567: PUSH
14568: DOUBLE
14569: LD_INT 1
14571: DEC
14572: ST_TO_ADDR
14573: LD_INT 8
14575: PUSH
14576: FOR_TO
14577: IFFALSE 14726
// if Side_Positions [ i ] then
14579: LD_EXP 34
14583: PUSH
14584: LD_VAR 0 1
14588: ARRAY
14589: IFFALSE 14724
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14591: LD_ADDR_VAR 0 2
14595: PUSH
14596: LD_EXP 55
14600: PUSH
14601: LD_EXP 34
14605: PUSH
14606: LD_VAR 0 1
14610: ARRAY
14611: ARRAY
14612: PPUSH
14613: LD_INT 2
14615: PUSH
14616: LD_INT 21
14618: PUSH
14619: LD_INT 1
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: LD_INT 21
14628: PUSH
14629: LD_INT 2
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 22
14643: PUSH
14644: LD_OWVAR 2
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PPUSH
14657: CALL_OW 70
14661: PUSH
14662: FOR_IN
14663: IFFALSE 14722
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14665: LD_EXP 31
14669: PUSH
14670: LD_VAR 0 1
14674: ARRAY
14675: PUSH
14676: LD_EXP 31
14680: PUSH
14681: LD_OWVAR 2
14685: ARRAY
14686: NONEQUAL
14687: PUSH
14688: LD_EXP 36
14692: NOT
14693: PUSH
14694: LD_VAR 0 1
14698: PUSH
14699: LD_OWVAR 2
14703: NONEQUAL
14704: AND
14705: OR
14706: IFFALSE 14720
// ComMoveToArea ( un , BuildUpEscape ) ;
14708: LD_VAR 0 2
14712: PPUSH
14713: LD_INT 9
14715: PPUSH
14716: CALL_OW 113
14720: GO 14662
14722: POP
14723: POP
14724: GO 14576
14726: POP
14727: POP
// enable ;
14728: ENABLE
// end ;
14729: PPOPN 2
14731: END
// every 0 0$1 trigger def_builduptime do
14732: LD_EXP 14
14736: IFFALSE 14762
14738: GO 14740
14740: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14741: LD_INT 8400
14743: PUSH
14744: LD_EXP 14
14748: PUSH
14749: LD_INT 2100
14751: MUL
14752: PLUS
14753: PPUSH
14754: CALL_OW 67
// EndBuildUp ;
14758: CALL 14375 0 0
// end ;
14762: END
