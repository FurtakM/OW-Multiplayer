// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 368
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: LD_INT 6
 351: PUSH
 352: LD_INT 7
 354: PUSH
 355: LD_INT 8
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 368: LD_ADDR_EXP 36
 372: PUSH
 373: LD_EXP 31
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: EMPTY
 382: LIST
 383: DIFF
 384: PUSH
 385: LD_INT 1
 387: GREATER
 388: ST_TO_ADDR
// if Multiplayer then
 389: LD_OWVAR 4
 393: IFFALSE 600
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 395: LD_ADDR_EXP 1
 399: PUSH
 400: LD_INT 0
 402: PPUSH
 403: CALL_OW 426
 407: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 408: LD_ADDR_EXP 2
 412: PUSH
 413: LD_INT 1
 415: PPUSH
 416: CALL_OW 426
 420: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 421: LD_ADDR_EXP 3
 425: PUSH
 426: LD_INT 2
 428: PPUSH
 429: CALL_OW 426
 433: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 434: LD_ADDR_EXP 4
 438: PUSH
 439: LD_INT 3
 441: PPUSH
 442: CALL_OW 426
 446: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 447: LD_ADDR_EXP 5
 451: PUSH
 452: LD_INT 4
 454: PPUSH
 455: CALL_OW 426
 459: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 460: LD_ADDR_EXP 6
 464: PUSH
 465: LD_INT 5
 467: PPUSH
 468: CALL_OW 426
 472: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 473: LD_ADDR_EXP 7
 477: PUSH
 478: LD_INT 6
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 486: LD_ADDR_EXP 8
 490: PUSH
 491: LD_INT 10
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 499: LD_ADDR_EXP 9
 503: PUSH
 504: LD_INT 11
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 512: LD_ADDR_EXP 10
 516: PUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 525: LD_ADDR_EXP 11
 529: PUSH
 530: LD_INT 13
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 538: LD_ADDR_EXP 12
 542: PUSH
 543: LD_INT 14
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 551: LD_ADDR_EXP 13
 555: PUSH
 556: LD_INT 17
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 564: LD_ADDR_EXP 14
 568: PUSH
 569: LD_INT 20
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 577: LD_ADDR_VAR 0 3
 581: PUSH
 582: LD_INT 22
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// def_win_rules = 0 ;
 590: LD_ADDR_EXP 30
 594: PUSH
 595: LD_INT 0
 597: ST_TO_ADDR
// end else
 598: GO 732
// begin Randomize ;
 600: CALL_OW 10
// def_base_level := 2 ;
 604: LD_ADDR_EXP 1
 608: PUSH
 609: LD_INT 2
 611: ST_TO_ADDR
// def_amount_of_people := 2 ;
 612: LD_ADDR_EXP 2
 616: PUSH
 617: LD_INT 2
 619: ST_TO_ADDR
// def_skill_level := 1 ;
 620: LD_ADDR_EXP 3
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// def_starting_resources := 2 ;
 628: LD_ADDR_EXP 4
 632: PUSH
 633: LD_INT 2
 635: ST_TO_ADDR
// def_shipments_density := 50 ;
 636: LD_ADDR_EXP 5
 640: PUSH
 641: LD_INT 50
 643: ST_TO_ADDR
// def_extra_oil_deposits := 2 ;
 644: LD_ADDR_EXP 6
 648: PUSH
 649: LD_INT 2
 651: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 2
 659: ST_TO_ADDR
// def_shared_vision := 1 ;
 660: LD_ADDR_EXP 8
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// def_morale_flags := 1 ;
 668: LD_ADDR_EXP 9
 672: PUSH
 673: LD_INT 1
 675: ST_TO_ADDR
// def_siberite_detection := 1 ;
 676: LD_ADDR_EXP 10
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// def_people_respawning := 2 ;
 684: LD_ADDR_EXP 11
 688: PUSH
 689: LD_INT 2
 691: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 692: LD_ADDR_EXP 12
 696: PUSH
 697: LD_INT 3
 699: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 700: LD_ADDR_EXP 13
 704: PUSH
 705: LD_INT 2
 707: ST_TO_ADDR
// def_builduptime := 1 ;
 708: LD_ADDR_EXP 14
 712: PUSH
 713: LD_INT 1
 715: ST_TO_ADDR
// tech_level = 4 ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_INT 4
 723: ST_TO_ADDR
// def_win_rules = 0 ;
 724: LD_ADDR_EXP 30
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// end ; if isSGUI then
 732: LD_OWVAR 83
 736: IFFALSE 744
// setMpTechs ( ) else
 738: CALL 10113 0 0
 742: GO 757
// SetMpTechLevel ( tech_level + 1 ) ;
 744: LD_VAR 0 3
 748: PUSH
 749: LD_INT 1
 751: PLUS
 752: PPUSH
 753: CALL 10260 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 757: LD_ADDR_EXP 17
 761: PUSH
 762: LD_INT 0
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 1
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_EXP 1
 780: PUSH
 781: LD_INT 1
 783: PLUS
 784: ARRAY
 785: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 786: LD_ADDR_EXP 18
 790: PUSH
 791: LD_INT 0
 793: PUSH
 794: LD_INT 0
 796: PUSH
 797: LD_INT 3
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: LIST
 804: PUSH
 805: LD_EXP 1
 809: PUSH
 810: LD_INT 1
 812: PLUS
 813: ARRAY
 814: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 815: LD_ADDR_EXP 19
 819: PUSH
 820: LD_INT 9
 822: PUSH
 823: LD_INT 12
 825: PUSH
 826: LD_INT 15
 828: PUSH
 829: LD_INT 24
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: LD_EXP 2
 842: PUSH
 843: LD_INT 1
 845: PLUS
 846: ARRAY
 847: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 848: LD_ADDR_EXP 20
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_EXP 3
 875: PUSH
 876: LD_INT 1
 878: PLUS
 879: ARRAY
 880: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 881: LD_ADDR_EXP 22
 885: PUSH
 886: LD_INT 0
 888: PUSH
 889: LD_INT 0
 891: PUSH
 892: LD_INT 0
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 30
 902: PUSH
 903: LD_INT 0
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 50
 916: PUSH
 917: LD_INT 20
 919: PUSH
 920: LD_INT 0
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PUSH
 928: LD_INT 80
 930: PUSH
 931: LD_INT 40
 933: PUSH
 934: LD_INT 20
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: PUSH
 948: LD_EXP 4
 952: PUSH
 953: LD_INT 1
 955: PLUS
 956: ARRAY
 957: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 958: LD_ADDR_EXP 21
 962: PUSH
 963: LD_INT 10
 965: PUSH
 966: EMPTY
 967: LIST
 968: PUSH
 969: LD_INT 7
 971: PUSH
 972: LD_INT 14
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 6
 981: PUSH
 982: LD_INT 12
 984: PUSH
 985: LD_INT 18
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 10
 998: PUSH
 999: LD_INT 15
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: PUSH
1017: LD_EXP 4
1021: PUSH
1022: LD_INT 1
1024: PLUS
1025: ARRAY
1026: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
1027: LD_ADDR_EXP 23
1031: PUSH
1032: LD_INT 150
1034: PUSH
1035: LD_EXP 5
1039: MINUS
1040: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1041: LD_ADDR_EXP 27
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: LD_INT 10500
1051: PUSH
1052: LD_INT 6300
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: PUSH
1060: LD_EXP 11
1064: PUSH
1065: LD_INT 1
1067: PLUS
1068: ARRAY
1069: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1070: LD_ADDR_EXP 28
1074: PUSH
1075: LD_INT 0
1077: PUSH
1078: LD_INT 31500
1080: PUSH
1081: LD_INT 10500
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_EXP 11
1093: PUSH
1094: LD_INT 1
1096: PLUS
1097: ARRAY
1098: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1099: LD_ADDR_EXP 25
1103: PUSH
1104: LD_INT 0
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 3
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_EXP 12
1126: PUSH
1127: LD_INT 1
1129: PLUS
1130: ARRAY
1131: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1132: LD_ADDR_EXP 24
1136: PUSH
1137: LD_INT 1
1139: NEG
1140: PUSH
1141: LD_INT 350
1143: PUSH
1144: LD_INT 700
1146: PUSH
1147: LD_INT 1400
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_EXP 9
1164: PUSH
1165: LD_INT 1
1167: PLUS
1168: ARRAY
1169: ST_TO_ADDR
// battle_flags_id := [ ] ;
1170: LD_ADDR_EXP 44
1174: PUSH
1175: EMPTY
1176: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1177: LD_EXP 13
1181: PUSH
1182: LD_INT 0
1184: EQUAL
1185: IFFALSE 1197
// siberite_bomb_Delay = 0 else
1187: LD_ADDR_EXP 29
1191: PUSH
1192: LD_INT 0
1194: ST_TO_ADDR
1195: GO 1219
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1197: LD_ADDR_EXP 29
1201: PUSH
1202: LD_EXP 13
1206: PUSH
1207: LD_INT 1
1209: MINUS
1210: PUSH
1211: LD_INT 21000
1213: MUL
1214: PUSH
1215: LD_INT 1
1217: PLUS
1218: ST_TO_ADDR
// end ;
1219: LD_VAR 0 1
1223: RET
// function init_map ; var i , j ; begin
1224: LD_INT 0
1226: PPUSH
1227: PPUSH
1228: PPUSH
// normal_oil_deposits_locations := [ [ 42 , 72 ] , [ 86 , 6 ] , [ 159 , 5 ] , [ 214 , 68 ] , [ 298 , 184 ] , [ 259 , 264 ] , [ 182 , 252 ] , [ 99 , 179 ] ] ;
1229: LD_ADDR_EXP 40
1233: PUSH
1234: LD_INT 42
1236: PUSH
1237: LD_INT 72
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PUSH
1244: LD_INT 86
1246: PUSH
1247: LD_INT 6
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 159
1256: PUSH
1257: LD_INT 5
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 214
1266: PUSH
1267: LD_INT 68
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PUSH
1274: LD_INT 298
1276: PUSH
1277: LD_INT 184
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: PUSH
1284: LD_INT 259
1286: PUSH
1287: LD_INT 264
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 182
1296: PUSH
1297: LD_INT 252
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 99
1306: PUSH
1307: LD_INT 179
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 57 , 102 ] , [ 66 , 7 ] , [ 144 , 28 ] , [ 237 , 67 ] , [ 280 , 197 ] , [ 282 , 274 ] , [ 197 , 272 ] , [ 120 , 198 ] ] ;
1324: LD_ADDR_EXP 41
1328: PUSH
1329: LD_INT 57
1331: PUSH
1332: LD_INT 102
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 66
1341: PUSH
1342: LD_INT 7
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 144
1351: PUSH
1352: LD_INT 28
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 237
1361: PUSH
1362: LD_INT 67
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 280
1371: PUSH
1372: LD_INT 197
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 282
1381: PUSH
1382: LD_INT 274
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 197
1391: PUSH
1392: LD_INT 272
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 120
1401: PUSH
1402: LD_INT 198
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 68 , 74 ] , [ 81 , 28 ] , [ 142 , 9 ] , [ 229 , 64 ] , [ 293 , 204 ] , [ 274 , 275 ] , [ 206 , 252 ] , [ 106 , 200 ] ] ;
1419: LD_ADDR_EXP 42
1423: PUSH
1424: LD_INT 68
1426: PUSH
1427: LD_INT 74
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 81
1436: PUSH
1437: LD_INT 28
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PUSH
1444: LD_INT 142
1446: PUSH
1447: LD_INT 9
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: PUSH
1454: LD_INT 229
1456: PUSH
1457: LD_INT 64
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 293
1466: PUSH
1467: LD_INT 204
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 274
1476: PUSH
1477: LD_INT 275
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 206
1486: PUSH
1487: LD_INT 252
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 106
1496: PUSH
1497: LD_INT 200
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 73 , 79 ] , [ 72 , 21 ] , [ 144 , 5 ] , [ 254 , 95 ] , [ 275 , 166 ] , [ 277 , 252 ] , [ 213 , 272 ] , [ 115 , 174 ] ] ;
1514: LD_ADDR_EXP 43
1518: PUSH
1519: LD_INT 73
1521: PUSH
1522: LD_INT 79
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 72
1531: PUSH
1532: LD_INT 21
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 144
1541: PUSH
1542: LD_INT 5
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 254
1551: PUSH
1552: LD_INT 95
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 275
1561: PUSH
1562: LD_INT 166
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 277
1571: PUSH
1572: LD_INT 252
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 213
1581: PUSH
1582: LD_INT 272
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 115
1591: PUSH
1592: LD_INT 174
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: ST_TO_ADDR
// depot_def := [ [ 59 , 84 , 2 ] , [ 80 , 15 , 3 ] , [ 153 , 15 , 3 ] , [ 234 , 80 , 3 ] , [ 285 , 184 , 5 ] , [ 273 , 263 , 5 ] , [ 200 , 261 , 0 ] , [ 109 , 186 , 1 ] ] ;
1609: LD_ADDR_EXP 37
1613: PUSH
1614: LD_INT 59
1616: PUSH
1617: LD_INT 84
1619: PUSH
1620: LD_INT 2
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 80
1630: PUSH
1631: LD_INT 15
1633: PUSH
1634: LD_INT 3
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 153
1644: PUSH
1645: LD_INT 15
1647: PUSH
1648: LD_INT 3
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 234
1658: PUSH
1659: LD_INT 80
1661: PUSH
1662: LD_INT 3
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 285
1672: PUSH
1673: LD_INT 184
1675: PUSH
1676: LD_INT 5
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: PUSH
1684: LD_INT 273
1686: PUSH
1687: LD_INT 263
1689: PUSH
1690: LD_INT 5
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 200
1700: PUSH
1701: LD_INT 261
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: PUSH
1712: LD_INT 109
1714: PUSH
1715: LD_INT 186
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: ST_TO_ADDR
// for i in depot_def do
1736: LD_ADDR_VAR 0 2
1740: PUSH
1741: LD_EXP 37
1745: PUSH
1746: FOR_IN
1747: IFFALSE 1823
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1749: LD_ADDR_EXP 39
1753: PUSH
1754: LD_EXP 39
1758: PUSH
1759: LD_VAR 0 2
1763: PUSH
1764: LD_INT 1
1766: ARRAY
1767: PPUSH
1768: LD_VAR 0 2
1772: PUSH
1773: LD_INT 3
1775: ARRAY
1776: PPUSH
1777: LD_INT 4
1779: NEG
1780: PPUSH
1781: CALL_OW 272
1785: PUSH
1786: LD_VAR 0 2
1790: PUSH
1791: LD_INT 2
1793: ARRAY
1794: PPUSH
1795: LD_VAR 0 2
1799: PUSH
1800: LD_INT 3
1802: ARRAY
1803: PPUSH
1804: LD_INT 4
1806: NEG
1807: PPUSH
1808: CALL_OW 273
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: EMPTY
1818: LIST
1819: ADD
1820: ST_TO_ADDR
1821: GO 1746
1823: POP
1824: POP
// breastworks_def := [ [ [ 76 , 103 , 5 ] , [ 81 , 99 , 5 ] , [ 79 , 90 , 4 ] ] , [ [ 87 , 33 , 5 ] , [ 90 , 29 , 5 ] , [ 97 , 32 , 5 ] ] , [ [ 148 , 30 , 0 ] , [ 157 , 31 , 0 ] , [ 166 , 31 , 0 ] ] , [ [ 223 , 89 , 1 ] , [ 229 , 96 , 0 ] , [ 237 , 98 , 0 ] ] , [ [ 263 , 171 , 2 ] , [ 267 , 181 , 2 ] , [ 269 , 170 , 2 ] ] , [ [ 255 , 248 , 2 ] , [ 264 , 248 , 2 ] , [ 273 , 249 , 3 ] ] , [ [ 184 , 247 , 2 ] , [ 192 , 247 , 2 ] , [ 201 , 248 , 3 ] ] , [ [ 121 , 177 , 4 ] , [ 125 , 184 , 4 ] , [ 128 , 192 , 5 ] ] ] ;
1825: LD_ADDR_EXP 38
1829: PUSH
1830: LD_INT 76
1832: PUSH
1833: LD_INT 103
1835: PUSH
1836: LD_INT 5
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 81
1846: PUSH
1847: LD_INT 99
1849: PUSH
1850: LD_INT 5
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 79
1860: PUSH
1861: LD_INT 90
1863: PUSH
1864: LD_INT 4
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 87
1879: PUSH
1880: LD_INT 33
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: PUSH
1891: LD_INT 90
1893: PUSH
1894: LD_INT 29
1896: PUSH
1897: LD_INT 5
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: PUSH
1905: LD_INT 97
1907: PUSH
1908: LD_INT 32
1910: PUSH
1911: LD_INT 5
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 148
1926: PUSH
1927: LD_INT 30
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: LIST
1937: PUSH
1938: LD_INT 157
1940: PUSH
1941: LD_INT 31
1943: PUSH
1944: LD_INT 0
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 166
1954: PUSH
1955: LD_INT 31
1957: PUSH
1958: LD_INT 0
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: LIST
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 223
1973: PUSH
1974: LD_INT 89
1976: PUSH
1977: LD_INT 1
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 229
1987: PUSH
1988: LD_INT 96
1990: PUSH
1991: LD_INT 0
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 237
2001: PUSH
2002: LD_INT 98
2004: PUSH
2005: LD_INT 0
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_INT 263
2020: PUSH
2021: LD_INT 171
2023: PUSH
2024: LD_INT 2
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 267
2034: PUSH
2035: LD_INT 181
2037: PUSH
2038: LD_INT 2
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 269
2048: PUSH
2049: LD_INT 170
2051: PUSH
2052: LD_INT 2
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 255
2067: PUSH
2068: LD_INT 248
2070: PUSH
2071: LD_INT 2
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 264
2081: PUSH
2082: LD_INT 248
2084: PUSH
2085: LD_INT 2
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: LD_INT 273
2095: PUSH
2096: LD_INT 249
2098: PUSH
2099: LD_INT 3
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 184
2114: PUSH
2115: LD_INT 247
2117: PUSH
2118: LD_INT 2
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 192
2128: PUSH
2129: LD_INT 247
2131: PUSH
2132: LD_INT 2
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 201
2142: PUSH
2143: LD_INT 248
2145: PUSH
2146: LD_INT 3
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: LD_INT 121
2161: PUSH
2162: LD_INT 177
2164: PUSH
2165: LD_INT 4
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 125
2175: PUSH
2176: LD_INT 184
2178: PUSH
2179: LD_INT 4
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 128
2189: PUSH
2190: LD_INT 192
2192: PUSH
2193: LD_INT 5
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: ST_TO_ADDR
// for i = 1 to Side_Positions do
2216: LD_ADDR_VAR 0 2
2220: PUSH
2221: DOUBLE
2222: LD_INT 1
2224: DEC
2225: ST_TO_ADDR
2226: LD_EXP 34
2230: PUSH
2231: FOR_TO
2232: IFFALSE 2355
// begin if not Side_Positions [ i ] then
2234: LD_EXP 34
2238: PUSH
2239: LD_VAR 0 2
2243: ARRAY
2244: NOT
2245: IFFALSE 2249
// continue ;
2247: GO 2231
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2249: LD_EXP 40
2253: PUSH
2254: LD_EXP 34
2258: PUSH
2259: LD_VAR 0 2
2263: ARRAY
2264: ARRAY
2265: PUSH
2266: LD_INT 1
2268: ARRAY
2269: PPUSH
2270: LD_EXP 40
2274: PUSH
2275: LD_EXP 34
2279: PUSH
2280: LD_VAR 0 2
2284: ARRAY
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_INT 2
2293: PPUSH
2294: CALL_OW 62
// if def_extra_oil_deposits then
2298: LD_EXP 6
2302: IFFALSE 2353
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2304: LD_EXP 41
2308: PUSH
2309: LD_EXP 34
2313: PUSH
2314: LD_VAR 0 2
2318: ARRAY
2319: ARRAY
2320: PUSH
2321: LD_INT 1
2323: ARRAY
2324: PPUSH
2325: LD_EXP 41
2329: PUSH
2330: LD_EXP 34
2334: PUSH
2335: LD_VAR 0 2
2339: ARRAY
2340: ARRAY
2341: PUSH
2342: LD_INT 2
2344: ARRAY
2345: PPUSH
2346: LD_INT 2
2348: PPUSH
2349: CALL_OW 62
// end ;
2353: GO 2231
2355: POP
2356: POP
// if def_extra_sib_deposits then
2357: LD_EXP 7
2361: IFFALSE 2508
// for i = 1 to Side_Positions do
2363: LD_ADDR_VAR 0 2
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_EXP 34
2377: PUSH
2378: FOR_TO
2379: IFFALSE 2506
// begin if not Side_Positions [ i ] then
2381: LD_EXP 34
2385: PUSH
2386: LD_VAR 0 2
2390: ARRAY
2391: NOT
2392: IFFALSE 2396
// continue ;
2394: GO 2378
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2396: LD_EXP 42
2400: PUSH
2401: LD_EXP 34
2405: PUSH
2406: LD_VAR 0 2
2410: ARRAY
2411: ARRAY
2412: PUSH
2413: LD_INT 1
2415: ARRAY
2416: PPUSH
2417: LD_EXP 42
2421: PUSH
2422: LD_EXP 34
2426: PUSH
2427: LD_VAR 0 2
2431: ARRAY
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 3
2440: PPUSH
2441: CALL_OW 62
// if def_extra_sib_deposits = 2 then
2445: LD_EXP 7
2449: PUSH
2450: LD_INT 2
2452: EQUAL
2453: IFFALSE 2504
// CreateDepositXY ( extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2455: LD_EXP 43
2459: PUSH
2460: LD_EXP 34
2464: PUSH
2465: LD_VAR 0 2
2469: ARRAY
2470: ARRAY
2471: PUSH
2472: LD_INT 1
2474: ARRAY
2475: PPUSH
2476: LD_EXP 43
2480: PUSH
2481: LD_EXP 34
2485: PUSH
2486: LD_VAR 0 2
2490: ARRAY
2491: ARRAY
2492: PUSH
2493: LD_INT 2
2495: ARRAY
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: CALL_OW 62
// end ;
2504: GO 2378
2506: POP
2507: POP
// end ;
2508: LD_VAR 0 1
2512: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2513: LD_INT 0
2515: PPUSH
2516: PPUSH
2517: PPUSH
// if not Team_Game then
2518: LD_EXP 36
2522: NOT
2523: IFFALSE 2621
// begin for i = 1 to 8 do
2525: LD_ADDR_VAR 0 2
2529: PUSH
2530: DOUBLE
2531: LD_INT 1
2533: DEC
2534: ST_TO_ADDR
2535: LD_INT 8
2537: PUSH
2538: FOR_TO
2539: IFFALSE 2617
// for j = 1 to 8 do
2541: LD_ADDR_VAR 0 3
2545: PUSH
2546: DOUBLE
2547: LD_INT 1
2549: DEC
2550: ST_TO_ADDR
2551: LD_INT 8
2553: PUSH
2554: FOR_TO
2555: IFFALSE 2613
// if i <> j then
2557: LD_VAR 0 2
2561: PUSH
2562: LD_VAR 0 3
2566: NONEQUAL
2567: IFFALSE 2591
// SetAttitude ( i , j , att_neutral , true ) else
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_VAR 0 3
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: LD_INT 1
2584: PPUSH
2585: CALL_OW 80
2589: GO 2611
// SetAttitude ( i , j , att_friend , true ) ;
2591: LD_VAR 0 2
2595: PPUSH
2596: LD_VAR 0 3
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: CALL_OW 80
2611: GO 2554
2613: POP
2614: POP
2615: GO 2538
2617: POP
2618: POP
// end else
2619: GO 2796
// begin if def_shared_vision then
2621: LD_EXP 8
2625: IFFALSE 2690
// begin for i in Teams do
2627: LD_ADDR_VAR 0 2
2631: PUSH
2632: LD_EXP 32
2636: PUSH
2637: FOR_IN
2638: IFFALSE 2688
// for j = 2 to i do
2640: LD_ADDR_VAR 0 3
2644: PUSH
2645: DOUBLE
2646: LD_INT 2
2648: DEC
2649: ST_TO_ADDR
2650: LD_VAR 0 2
2654: PUSH
2655: FOR_TO
2656: IFFALSE 2684
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2658: LD_VAR 0 2
2662: PUSH
2663: LD_VAR 0 3
2667: ARRAY
2668: PPUSH
2669: LD_VAR 0 2
2673: PUSH
2674: LD_INT 1
2676: ARRAY
2677: PPUSH
2678: CALL_OW 343
2682: GO 2655
2684: POP
2685: POP
2686: GO 2637
2688: POP
2689: POP
// end ; for i = 1 to 8 do
2690: LD_ADDR_VAR 0 2
2694: PUSH
2695: DOUBLE
2696: LD_INT 1
2698: DEC
2699: ST_TO_ADDR
2700: LD_INT 8
2702: PUSH
2703: FOR_TO
2704: IFFALSE 2794
// for j = 1 to 8 do
2706: LD_ADDR_VAR 0 3
2710: PUSH
2711: DOUBLE
2712: LD_INT 1
2714: DEC
2715: ST_TO_ADDR
2716: LD_INT 8
2718: PUSH
2719: FOR_TO
2720: IFFALSE 2790
// if Side_Teams [ i ] = Side_Teams [ j ] then
2722: LD_EXP 31
2726: PUSH
2727: LD_VAR 0 2
2731: ARRAY
2732: PUSH
2733: LD_EXP 31
2737: PUSH
2738: LD_VAR 0 3
2742: ARRAY
2743: EQUAL
2744: IFFALSE 2768
// SetAttitude ( i , j , att_friend , true ) else
2746: LD_VAR 0 2
2750: PPUSH
2751: LD_VAR 0 3
2755: PPUSH
2756: LD_INT 1
2758: PPUSH
2759: LD_INT 1
2761: PPUSH
2762: CALL_OW 80
2766: GO 2788
// SetAttitude ( i , j , att_enemy , true ) ;
2768: LD_VAR 0 2
2772: PPUSH
2773: LD_VAR 0 3
2777: PPUSH
2778: LD_INT 2
2780: PPUSH
2781: LD_INT 1
2783: PPUSH
2784: CALL_OW 80
2788: GO 2719
2790: POP
2791: POP
2792: GO 2703
2794: POP
2795: POP
// end ; end ;
2796: LD_VAR 0 1
2800: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2801: LD_INT 0
2803: PPUSH
2804: PPUSH
2805: PPUSH
2806: PPUSH
// result := [ ] ;
2807: LD_ADDR_VAR 0 7
2811: PUSH
2812: EMPTY
2813: ST_TO_ADDR
// for i := 1 to count do
2814: LD_ADDR_VAR 0 8
2818: PUSH
2819: DOUBLE
2820: LD_INT 1
2822: DEC
2823: ST_TO_ADDR
2824: LD_VAR 0 1
2828: PUSH
2829: FOR_TO
2830: IFFALSE 3248
// begin uc_direction := Rand ( 0 , 5 ) ;
2832: LD_ADDR_OWVAR 24
2836: PUSH
2837: LD_INT 0
2839: PPUSH
2840: LD_INT 5
2842: PPUSH
2843: CALL_OW 12
2847: ST_TO_ADDR
// if commander then
2848: LD_LOC 1
2852: IFFALSE 2961
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2854: LD_ADDR_OWVAR 26
2858: PUSH
2859: LD_OWVAR 19
2863: PUSH
2864: LD_OWVAR 20
2868: ARRAY
2869: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2870: LD_INT 1
2872: PPUSH
2873: LD_INT 2
2875: PPUSH
2876: CALL_OW 12
2880: PPUSH
2881: LD_VAR 0 2
2885: PPUSH
2886: LD_EXP 20
2890: PUSH
2891: LD_INT 2
2893: PLUS
2894: PPUSH
2895: CALL_OW 380
// hc_importance := 105 ;
2899: LD_ADDR_OWVAR 32
2903: PUSH
2904: LD_INT 105
2906: ST_TO_ADDR
// commander := false ;
2907: LD_ADDR_LOC 1
2911: PUSH
2912: LD_INT 0
2914: ST_TO_ADDR
// if Multiplayer then
2915: LD_OWVAR 4
2919: IFFALSE 2959
// begin hc_gallery := MULTIAVATARS ;
2921: LD_ADDR_OWVAR 33
2925: PUSH
2926: LD_STRING MULTIAVATARS
2928: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2929: LD_ADDR_OWVAR 34
2933: PUSH
2934: LD_OWVAR 20
2938: PPUSH
2939: CALL_OW 525
2943: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2944: LD_ADDR_OWVAR 27
2948: PUSH
2949: LD_OWVAR 20
2953: PPUSH
2954: CALL_OW 526
2958: ST_TO_ADDR
// end ; end else
2959: GO 3024
// begin hc_name :=  ;
2961: LD_ADDR_OWVAR 26
2965: PUSH
2966: LD_STRING 
2968: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2969: LD_INT 1
2971: PPUSH
2972: LD_INT 2
2974: PPUSH
2975: CALL_OW 12
2979: PPUSH
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_EXP 20
2989: PPUSH
2990: CALL_OW 380
// hc_importance := 0 ;
2994: LD_ADDR_OWVAR 32
2998: PUSH
2999: LD_INT 0
3001: ST_TO_ADDR
// if Multiplayer then
3002: LD_OWVAR 4
3006: IFFALSE 3024
// begin hc_gallery :=  ;
3008: LD_ADDR_OWVAR 33
3012: PUSH
3013: LD_STRING 
3015: ST_TO_ADDR
// hc_face_number := 0 ;
3016: LD_ADDR_OWVAR 34
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3024: LD_ADDR_VAR 0 10
3028: PUSH
3029: CALL_OW 44
3033: ST_TO_ADDR
// if global_defined then
3034: LD_LOC 3
3038: IFFALSE 3178
// begin if ( cl = class_soldier ) then
3040: LD_VAR 0 2
3044: PUSH
3045: LD_INT 1
3047: EQUAL
3048: IFFALSE 3068
// j := i + soldiers_created else
3050: LD_ADDR_VAR 0 9
3054: PUSH
3055: LD_VAR 0 8
3059: PUSH
3060: LD_LOC 4
3064: PLUS
3065: ST_TO_ADDR
3066: GO 3078
// j := i ;
3068: LD_ADDR_VAR 0 9
3072: PUSH
3073: LD_VAR 0 8
3077: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3078: LD_LOC 2
3082: PUSH
3083: LD_VAR 0 2
3087: ARRAY
3088: PUSH
3089: LD_VAR 0 9
3093: ARRAY
3094: PPUSH
3095: LD_VAR 0 10
3099: PPUSH
3100: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3104: LD_VAR 0 10
3108: PPUSH
3109: LD_INT 2
3111: PPUSH
3112: LD_LOC 2
3116: PUSH
3117: LD_VAR 0 2
3121: ARRAY
3122: PUSH
3123: LD_VAR 0 9
3127: ARRAY
3128: PPUSH
3129: LD_INT 2
3131: PPUSH
3132: CALL_OW 260
3136: PPUSH
3137: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3141: LD_VAR 0 10
3145: PPUSH
3146: LD_INT 1
3148: PPUSH
3149: LD_LOC 2
3153: PUSH
3154: LD_VAR 0 2
3158: ARRAY
3159: PUSH
3160: LD_VAR 0 9
3164: ARRAY
3165: PPUSH
3166: LD_INT 1
3168: PPUSH
3169: CALL_OW 260
3173: PPUSH
3174: CALL_OW 239
// end ; if building then
3178: LD_VAR 0 6
3182: IFFALSE 3200
// PlaceHumanInUnit ( un , building ) else
3184: LD_VAR 0 10
3188: PPUSH
3189: LD_VAR 0 6
3193: PPUSH
3194: CALL_OW 52
3198: GO 3227
// PlaceUnitXYR ( un , x , y , r , false ) ;
3200: LD_VAR 0 10
3204: PPUSH
3205: LD_VAR 0 3
3209: PPUSH
3210: LD_VAR 0 4
3214: PPUSH
3215: LD_VAR 0 5
3219: PPUSH
3220: LD_INT 0
3222: PPUSH
3223: CALL_OW 50
// result := result ^ [ un ] ;
3227: LD_ADDR_VAR 0 7
3231: PUSH
3232: LD_VAR 0 7
3236: PUSH
3237: LD_VAR 0 10
3241: PUSH
3242: EMPTY
3243: LIST
3244: ADD
3245: ST_TO_ADDR
// end ;
3246: GO 2829
3248: POP
3249: POP
// if not global_defined then
3250: LD_LOC 3
3254: NOT
3255: IFFALSE 3333
// if ( global_units >= cl ) then
3257: LD_LOC 2
3261: PUSH
3262: LD_VAR 0 2
3266: GREATEREQUAL
3267: IFFALSE 3308
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3269: LD_ADDR_LOC 2
3273: PUSH
3274: LD_LOC 2
3278: PPUSH
3279: LD_VAR 0 2
3283: PPUSH
3284: LD_LOC 2
3288: PUSH
3289: LD_VAR 0 2
3293: ARRAY
3294: PUSH
3295: LD_VAR 0 7
3299: ADD
3300: PPUSH
3301: CALL_OW 1
3305: ST_TO_ADDR
3306: GO 3333
// global_units := Replace ( global_units , cl , result ) ;
3308: LD_ADDR_LOC 2
3312: PUSH
3313: LD_LOC 2
3317: PPUSH
3318: LD_VAR 0 2
3322: PPUSH
3323: LD_VAR 0 7
3327: PPUSH
3328: CALL_OW 1
3332: ST_TO_ADDR
// if commander then
3333: LD_LOC 1
3337: IFFALSE 3384
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3339: LD_ADDR_EXP 45
3343: PUSH
3344: LD_EXP 45
3348: PPUSH
3349: LD_OWVAR 20
3353: PPUSH
3354: LD_EXP 45
3358: PUSH
3359: LD_OWVAR 20
3363: ARRAY
3364: PUSH
3365: LD_VAR 0 10
3369: ADD
3370: PPUSH
3371: CALL_OW 1
3375: ST_TO_ADDR
// commander := false ;
3376: LD_ADDR_LOC 1
3380: PUSH
3381: LD_INT 0
3383: ST_TO_ADDR
// end ; end ;
3384: LD_VAR 0 7
3388: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3389: LD_INT 0
3391: PPUSH
3392: PPUSH
3393: PPUSH
3394: PPUSH
3395: PPUSH
3396: PPUSH
3397: PPUSH
3398: PPUSH
3399: PPUSH
// if side in [ 0 , 9 ] then
3400: LD_VAR 0 1
3404: PUSH
3405: LD_INT 0
3407: PUSH
3408: LD_INT 9
3410: PUSH
3411: EMPTY
3412: LIST
3413: LIST
3414: IN
3415: IFFALSE 3419
// exit ;
3417: GO 4469
// pos := Side_Positions [ side ] ;
3419: LD_ADDR_VAR 0 3
3423: PUSH
3424: LD_EXP 34
3428: PUSH
3429: LD_VAR 0 1
3433: ARRAY
3434: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3435: LD_ADDR_OWVAR 21
3439: PUSH
3440: LD_EXP 35
3444: PUSH
3445: LD_VAR 0 1
3449: ARRAY
3450: ST_TO_ADDR
// uc_side := side ;
3451: LD_ADDR_OWVAR 20
3455: PUSH
3456: LD_VAR 0 1
3460: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3461: LD_ADDR_VAR 0 4
3465: PUSH
3466: LD_EXP 37
3470: PUSH
3471: LD_VAR 0 3
3475: ARRAY
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3481: LD_ADDR_VAR 0 5
3485: PUSH
3486: LD_EXP 37
3490: PUSH
3491: LD_VAR 0 3
3495: ARRAY
3496: PUSH
3497: LD_INT 2
3499: ARRAY
3500: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3501: LD_ADDR_VAR 0 6
3505: PUSH
3506: LD_EXP 37
3510: PUSH
3511: LD_VAR 0 3
3515: ARRAY
3516: PUSH
3517: LD_INT 3
3519: ARRAY
3520: ST_TO_ADDR
// if is_depot then
3521: LD_EXP 17
3525: IFFALSE 3658
// begin bc_type = b_depot ;
3527: LD_ADDR_OWVAR 42
3531: PUSH
3532: LD_INT 0
3534: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3535: LD_ADDR_VAR 0 10
3539: PUSH
3540: LD_VAR 0 4
3544: PPUSH
3545: LD_VAR 0 5
3549: PPUSH
3550: LD_VAR 0 6
3554: PPUSH
3555: CALL_OW 47
3559: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3560: LD_VAR 0 10
3564: PPUSH
3565: LD_STRING @
3567: PUSH
3568: LD_VAR 0 1
3572: STR
3573: PPUSH
3574: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3578: LD_VAR 0 10
3582: PPUSH
3583: CALL_OW 274
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: LD_EXP 22
3595: PUSH
3596: LD_INT 1
3598: ARRAY
3599: PPUSH
3600: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3604: LD_VAR 0 10
3608: PPUSH
3609: CALL_OW 274
3613: PPUSH
3614: LD_INT 2
3616: PPUSH
3617: LD_EXP 22
3621: PUSH
3622: LD_INT 2
3624: ARRAY
3625: PPUSH
3626: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3630: LD_VAR 0 10
3634: PPUSH
3635: CALL_OW 274
3639: PPUSH
3640: LD_INT 3
3642: PPUSH
3643: LD_EXP 22
3647: PUSH
3648: LD_INT 3
3650: ARRAY
3651: PPUSH
3652: CALL_OW 277
// end else
3656: GO 3802
// begin for i := 1 to 3 do
3658: LD_ADDR_VAR 0 7
3662: PUSH
3663: DOUBLE
3664: LD_INT 1
3666: DEC
3667: ST_TO_ADDR
3668: LD_INT 3
3670: PUSH
3671: FOR_TO
3672: IFFALSE 3800
// begin r := starting_resources [ i ] ;
3674: LD_ADDR_VAR 0 8
3678: PUSH
3679: LD_EXP 22
3683: PUSH
3684: LD_VAR 0 7
3688: ARRAY
3689: ST_TO_ADDR
// while r >= 10 do
3690: LD_VAR 0 8
3694: PUSH
3695: LD_INT 10
3697: GREATEREQUAL
3698: IFFALSE 3798
// if r > 50 then
3700: LD_VAR 0 8
3704: PUSH
3705: LD_INT 50
3707: GREATER
3708: IFFALSE 3754
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3710: LD_VAR 0 7
3714: PPUSH
3715: LD_INT 5
3717: PPUSH
3718: LD_VAR 0 4
3722: PPUSH
3723: LD_VAR 0 5
3727: PPUSH
3728: LD_INT 4
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 60
// r := r - 50 ;
3738: LD_ADDR_VAR 0 8
3742: PUSH
3743: LD_VAR 0 8
3747: PUSH
3748: LD_INT 50
3750: MINUS
3751: ST_TO_ADDR
// end else
3752: GO 3796
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3754: LD_VAR 0 7
3758: PPUSH
3759: LD_VAR 0 8
3763: PUSH
3764: LD_INT 10
3766: DIV
3767: PPUSH
3768: LD_VAR 0 4
3772: PPUSH
3773: LD_VAR 0 5
3777: PPUSH
3778: LD_INT 4
3780: PPUSH
3781: LD_INT 0
3783: PPUSH
3784: CALL_OW 60
// r := 0 ;
3788: LD_ADDR_VAR 0 8
3792: PUSH
3793: LD_INT 0
3795: ST_TO_ADDR
// end ;
3796: GO 3690
// end ;
3798: GO 3671
3800: POP
3801: POP
// end ; for r in starting_crates do
3802: LD_ADDR_VAR 0 8
3806: PUSH
3807: LD_EXP 21
3811: PUSH
3812: FOR_IN
3813: IFFALSE 3845
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3815: LD_INT 1
3817: PPUSH
3818: LD_INT 5
3820: PPUSH
3821: LD_VAR 0 4
3825: PPUSH
3826: LD_VAR 0 5
3830: PPUSH
3831: LD_VAR 0 8
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: CALL_OW 60
3843: GO 3812
3845: POP
3846: POP
// if def_morale_flags then
3847: LD_EXP 9
3851: IFFALSE 3990
// begin x := start_def [ pos ] [ 1 ] ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_EXP 39
3862: PUSH
3863: LD_VAR 0 3
3867: ARRAY
3868: PUSH
3869: LD_INT 1
3871: ARRAY
3872: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3873: LD_ADDR_VAR 0 5
3877: PUSH
3878: LD_EXP 39
3882: PUSH
3883: LD_VAR 0 3
3887: ARRAY
3888: PUSH
3889: LD_INT 2
3891: ARRAY
3892: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3893: LD_VAR 0 4
3897: PPUSH
3898: LD_VAR 0 5
3902: PPUSH
3903: LD_INT 12
3905: PPUSH
3906: LD_INT 2
3908: PPUSH
3909: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3913: LD_ADDR_EXP 44
3917: PUSH
3918: LD_EXP 44
3922: PUSH
3923: LD_VAR 0 1
3927: PPUSH
3928: LD_VAR 0 4
3932: PPUSH
3933: LD_VAR 0 5
3937: PPUSH
3938: LD_INT 1
3940: PUSH
3941: LD_INT 100
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: PUSH
3948: LD_INT 2
3950: PUSH
3951: LD_INT 50
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 3
3960: PUSH
3961: LD_INT 20
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: PUSH
3968: LD_INT 20
3970: PUSH
3971: LD_INT 100
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: PPUSH
3984: CALL_OW 418
3988: ADD
3989: ST_TO_ADDR
// end ; commander := true ;
3990: LD_ADDR_LOC 1
3994: PUSH
3995: LD_INT 1
3997: ST_TO_ADDR
// soldiers_created := 0 ;
3998: LD_ADDR_LOC 4
4002: PUSH
4003: LD_INT 0
4005: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4006: LD_ADDR_VAR 0 7
4010: PUSH
4011: DOUBLE
4012: LD_INT 1
4014: DEC
4015: ST_TO_ADDR
4016: LD_EXP 18
4020: PUSH
4021: FOR_TO
4022: IFFALSE 4175
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4024: LD_ADDR_VAR 0 4
4028: PUSH
4029: LD_EXP 38
4033: PUSH
4034: LD_VAR 0 3
4038: ARRAY
4039: PUSH
4040: LD_VAR 0 7
4044: ARRAY
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4050: LD_ADDR_VAR 0 5
4054: PUSH
4055: LD_EXP 38
4059: PUSH
4060: LD_VAR 0 3
4064: ARRAY
4065: PUSH
4066: LD_VAR 0 7
4070: ARRAY
4071: PUSH
4072: LD_INT 2
4074: ARRAY
4075: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4076: LD_ADDR_VAR 0 6
4080: PUSH
4081: LD_EXP 38
4085: PUSH
4086: LD_VAR 0 3
4090: ARRAY
4091: PUSH
4092: LD_VAR 0 7
4096: ARRAY
4097: PUSH
4098: LD_INT 3
4100: ARRAY
4101: ST_TO_ADDR
// bc_type := b_breastwork ;
4102: LD_ADDR_OWVAR 42
4106: PUSH
4107: LD_INT 31
4109: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4110: LD_ADDR_VAR 0 9
4114: PUSH
4115: LD_VAR 0 4
4119: PPUSH
4120: LD_VAR 0 5
4124: PPUSH
4125: LD_VAR 0 6
4129: PPUSH
4130: CALL_OW 47
4134: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4135: LD_INT 1
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: LD_INT 0
4146: PPUSH
4147: LD_INT 0
4149: PPUSH
4150: LD_VAR 0 9
4154: PPUSH
4155: CALL 2801 0 6
// soldiers_created := soldiers_created + 1 ;
4159: LD_ADDR_LOC 4
4163: PUSH
4164: LD_LOC 4
4168: PUSH
4169: LD_INT 1
4171: PLUS
4172: ST_TO_ADDR
// end ;
4173: GO 4021
4175: POP
4176: POP
// x := start_def [ pos ] [ 1 ] ;
4177: LD_ADDR_VAR 0 4
4181: PUSH
4182: LD_EXP 39
4186: PUSH
4187: LD_VAR 0 3
4191: ARRAY
4192: PUSH
4193: LD_INT 1
4195: ARRAY
4196: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4197: LD_ADDR_VAR 0 5
4201: PUSH
4202: LD_EXP 39
4206: PUSH
4207: LD_VAR 0 3
4211: ARRAY
4212: PUSH
4213: LD_INT 2
4215: ARRAY
4216: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4217: LD_LOC 8
4221: PUSH
4222: LD_EXP 18
4226: MINUS
4227: PPUSH
4228: LD_INT 1
4230: PPUSH
4231: LD_VAR 0 4
4235: PPUSH
4236: LD_VAR 0 5
4240: PPUSH
4241: LD_INT 5
4243: PPUSH
4244: LD_INT 0
4246: PPUSH
4247: CALL 2801 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4251: LD_LOC 5
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: LD_VAR 0 4
4263: PPUSH
4264: LD_VAR 0 5
4268: PPUSH
4269: LD_INT 5
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL 2801 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4279: LD_LOC 7
4283: PPUSH
4284: LD_INT 3
4286: PPUSH
4287: LD_VAR 0 4
4291: PPUSH
4292: LD_VAR 0 5
4296: PPUSH
4297: LD_INT 5
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL 2801 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4307: LD_LOC 6
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_VAR 0 4
4319: PPUSH
4320: LD_VAR 0 5
4324: PPUSH
4325: LD_INT 5
4327: PPUSH
4328: LD_INT 0
4330: PPUSH
4331: CALL 2801 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4335: LD_EXP 10
4339: PUSH
4340: LD_INT 20
4342: PPUSH
4343: LD_VAR 0 1
4347: PPUSH
4348: CALL_OW 321
4352: PUSH
4353: LD_INT 1
4355: EQUAL
4356: AND
4357: IFFALSE 4374
// SetTech ( tech_SibDet , side , state_researched ) ;
4359: LD_INT 20
4361: PPUSH
4362: LD_VAR 0 1
4366: PPUSH
4367: LD_INT 2
4369: PPUSH
4370: CALL_OW 322
// if def_siberite_bomb = 1 then
4374: LD_EXP 13
4378: PUSH
4379: LD_INT 1
4381: EQUAL
4382: IFFALSE 4416
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4384: LD_INT 25
4386: PPUSH
4387: LD_VAR 0 1
4391: PPUSH
4392: LD_INT 1
4394: PPUSH
4395: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4399: LD_INT 73
4401: PPUSH
4402: LD_VAR 0 1
4406: PPUSH
4407: LD_INT 1
4409: PPUSH
4410: CALL_OW 322
// end else
4414: GO 4446
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4416: LD_INT 25
4418: PPUSH
4419: LD_VAR 0 1
4423: PPUSH
4424: LD_INT 0
4426: PPUSH
4427: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4431: LD_INT 73
4433: PPUSH
4434: LD_VAR 0 1
4438: PPUSH
4439: LD_INT 0
4441: PPUSH
4442: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4446: LD_INT 24
4448: PPUSH
4449: LD_VAR 0 1
4453: PPUSH
4454: LD_INT 0
4456: PPUSH
4457: CALL_OW 322
// global_defined := true ;
4461: LD_ADDR_LOC 3
4465: PUSH
4466: LD_INT 1
4468: ST_TO_ADDR
// end ;
4469: LD_VAR 0 2
4473: RET
// function prepare_sides ; var i ; begin
4474: LD_INT 0
4476: PPUSH
4477: PPUSH
// global_units := [ ] ;
4478: LD_ADDR_LOC 2
4482: PUSH
4483: EMPTY
4484: ST_TO_ADDR
// global_defined := false ;
4485: LD_ADDR_LOC 3
4489: PUSH
4490: LD_INT 0
4492: ST_TO_ADDR
// CountClassMembers ;
4493: CALL 4543 0 0
// for i := 1 to 8 do
4497: LD_ADDR_VAR 0 2
4501: PUSH
4502: DOUBLE
4503: LD_INT 1
4505: DEC
4506: ST_TO_ADDR
4507: LD_INT 8
4509: PUSH
4510: FOR_TO
4511: IFFALSE 4536
// if Side_Positions [ i ] then
4513: LD_EXP 34
4517: PUSH
4518: LD_VAR 0 2
4522: ARRAY
4523: IFFALSE 4534
// prepare_side ( i ) ;
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL 3389 0 1
4534: GO 4510
4536: POP
4537: POP
// end ;
4538: LD_VAR 0 1
4542: RET
// function CountClassMembers ; var Mode ; begin
4543: LD_INT 0
4545: PPUSH
4546: PPUSH
// if No_Mechs then
4547: LD_EXP 15
4551: IFFALSE 4563
// Mode := 2 else
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: LD_INT 2
4560: ST_TO_ADDR
4561: GO 4571
// Mode := 1 ;
4563: LD_ADDR_VAR 0 2
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// neng := number_of_people ;
4571: LD_ADDR_LOC 5
4575: PUSH
4576: LD_EXP 19
4580: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4581: LD_ADDR_LOC 8
4585: PUSH
4586: LD_LOC 5
4590: PUSH
4591: LD_INT 4
4593: PUSH
4594: LD_INT 3
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_VAR 0 2
4605: ARRAY
4606: DIV
4607: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4608: LD_LOC 8
4612: PUSH
4613: LD_EXP 18
4617: LESS
4618: IFFALSE 4630
// nsol := number_of_breastworks ;
4620: LD_ADDR_LOC 8
4624: PUSH
4625: LD_EXP 18
4629: ST_TO_ADDR
// neng := neng - nsol ;
4630: LD_ADDR_LOC 5
4634: PUSH
4635: LD_LOC 5
4639: PUSH
4640: LD_LOC 8
4644: MINUS
4645: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4646: LD_ADDR_LOC 6
4650: PUSH
4651: LD_LOC 5
4655: PUSH
4656: LD_INT 3
4658: PUSH
4659: LD_INT 2
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_VAR 0 2
4670: ARRAY
4671: DIV
4672: ST_TO_ADDR
// if ( nsci < 1 ) then
4673: LD_LOC 6
4677: PUSH
4678: LD_INT 1
4680: LESS
4681: IFFALSE 4691
// nsci := 1 ;
4683: LD_ADDR_LOC 6
4687: PUSH
4688: LD_INT 1
4690: ST_TO_ADDR
// neng := neng - nsci ;
4691: LD_ADDR_LOC 5
4695: PUSH
4696: LD_LOC 5
4700: PUSH
4701: LD_LOC 6
4705: MINUS
4706: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4707: LD_ADDR_LOC 7
4711: PUSH
4712: LD_LOC 5
4716: PUSH
4717: LD_INT 2
4719: DIV
4720: PUSH
4721: LD_INT 0
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PUSH
4728: LD_VAR 0 2
4732: ARRAY
4733: ST_TO_ADDR
// neng := neng - nmech ;
4734: LD_ADDR_LOC 5
4738: PUSH
4739: LD_LOC 5
4743: PUSH
4744: LD_LOC 7
4748: MINUS
4749: ST_TO_ADDR
// if ( neng < 1 ) then
4750: LD_LOC 5
4754: PUSH
4755: LD_INT 1
4757: LESS
4758: IFFALSE 4768
// neng := 1 ;
4760: LD_ADDR_LOC 5
4764: PUSH
4765: LD_INT 1
4767: ST_TO_ADDR
// end ;
4768: LD_VAR 0 1
4772: RET
// starting begin disable ( 98 ) ;
4773: LD_INT 98
4775: DISABLE_MARKED
// disable ( 99 ) ;
4776: LD_INT 99
4778: DISABLE_MARKED
// disable ( 400 ) ;
4779: LD_INT 400
4781: DISABLE_MARKED
// disable ( 401 ) ;
4782: LD_INT 401
4784: DISABLE_MARKED
// mp_selectmsg := true ;
4785: LD_ADDR_OWVAR 13
4789: PUSH
4790: LD_INT 1
4792: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4793: CALL 68 0 0
// init_map ;
4797: CALL 1224 0 0
// init_respawning ;
4801: CALL 9380 0 0
// set_shared_visions_and_alliances ;
4805: CALL 2513 0 0
// ResetFog ;
4809: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4813: LD_OWVAR 2
4817: PPUSH
4818: CALL_OW 520
// AnimateTrees ( true ) ;
4822: LD_INT 1
4824: PPUSH
4825: CALL_OW 573
// prepare_sides ;
4829: CALL 4474 0 0
// Init_Win_Condition ;
4833: CALL 8085 0 0
// ShowTimer ;
4837: CALL 7347 0 0
// music_nat := Side_Nations [ your_side ] ;
4841: LD_ADDR_OWVAR 71
4845: PUSH
4846: LD_EXP 35
4850: PUSH
4851: LD_OWVAR 2
4855: ARRAY
4856: ST_TO_ADDR
// if IAmSpec then
4857: CALL_OW 531
4861: IFFALSE 4885
// begin fogoff ( true ) ;
4863: LD_INT 1
4865: PPUSH
4866: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4870: LD_INT 130
4872: PPUSH
4873: LD_INT 100
4875: PPUSH
4876: CALL_OW 86
// enable ( 400 ) ;
4880: LD_INT 400
4882: ENABLE_MARKED
// end else
4883: GO 4931
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4885: LD_EXP 39
4889: PUSH
4890: LD_EXP 34
4894: PUSH
4895: LD_OWVAR 2
4899: ARRAY
4900: ARRAY
4901: PUSH
4902: LD_INT 1
4904: ARRAY
4905: PPUSH
4906: LD_EXP 39
4910: PUSH
4911: LD_EXP 34
4915: PUSH
4916: LD_OWVAR 2
4920: ARRAY
4921: ARRAY
4922: PUSH
4923: LD_INT 2
4925: ARRAY
4926: PPUSH
4927: CALL_OW 86
// end ; InitApeman ;
4931: CALL 5877 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
4935: LD_ADDR_EXP 55
4939: PUSH
4940: LD_INT 1
4942: PUSH
4943: LD_INT 2
4945: PUSH
4946: LD_INT 3
4948: PUSH
4949: LD_INT 4
4951: PUSH
4952: LD_INT 5
4954: PUSH
4955: LD_INT 6
4957: PUSH
4958: LD_INT 7
4960: PUSH
4961: LD_INT 8
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: ST_TO_ADDR
// BeginBuildUp ;
4974: CALL 14282 0 0
// end ;
4978: END
// every 0 0$1 do
4979: GO 4981
4981: DISABLE
// if ( def_siberite_bomb > 1 ) then
4982: LD_EXP 13
4986: PUSH
4987: LD_INT 1
4989: GREATER
4990: IFFALSE 5005
// begin wait ( siberite_bomb_Delay ) ;
4992: LD_EXP 29
4996: PPUSH
4997: CALL_OW 67
// EnableSibFiss ;
5001: CALL 5006 0 0
// end ;
5005: END
// function EnableSibFiss ; var i ; begin
5006: LD_INT 0
5008: PPUSH
5009: PPUSH
// for i := 1 to 8 do
5010: LD_ADDR_VAR 0 2
5014: PUSH
5015: DOUBLE
5016: LD_INT 1
5018: DEC
5019: ST_TO_ADDR
5020: LD_INT 8
5022: PUSH
5023: FOR_TO
5024: IFFALSE 5070
// if Side_Positions [ i ] then
5026: LD_EXP 34
5030: PUSH
5031: LD_VAR 0 2
5035: ARRAY
5036: IFFALSE 5068
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5038: LD_INT 25
5040: PPUSH
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_INT 1
5048: PPUSH
5049: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5053: LD_INT 73
5055: PPUSH
5056: LD_VAR 0 2
5060: PPUSH
5061: LD_INT 1
5063: PPUSH
5064: CALL_OW 322
// end ;
5068: GO 5023
5070: POP
5071: POP
// end ; end_of_file
5072: LD_VAR 0 1
5076: RET
// every 0 0$25 + 0 0$1.0 do var i , areas ;
5077: GO 5079
5079: DISABLE
5080: LD_INT 0
5082: PPUSH
5083: PPUSH
// begin areas := [ Between18 , Between23 , Between45 , Between67 ] ;
5084: LD_ADDR_VAR 0 2
5088: PUSH
5089: LD_INT 10
5091: PUSH
5092: LD_INT 11
5094: PUSH
5095: LD_INT 12
5097: PUSH
5098: LD_INT 13
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: ST_TO_ADDR
// for i := 1 to 4 do
5107: LD_ADDR_VAR 0 1
5111: PUSH
5112: DOUBLE
5113: LD_INT 1
5115: DEC
5116: ST_TO_ADDR
5117: LD_INT 4
5119: PUSH
5120: FOR_TO
5121: IFFALSE 5192
// begin if GetResourceArea ( areas [ i ] , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5123: LD_VAR 0 2
5127: PUSH
5128: LD_VAR 0 1
5132: ARRAY
5133: PPUSH
5134: LD_INT 1
5136: PPUSH
5137: CALL_OW 287
5141: PUSH
5142: LD_INT 200
5144: PUSH
5145: LD_EXP 23
5149: MINUS
5150: PUSH
5151: LD_INT 50
5153: DIVREAL
5154: PUSH
5155: LD_INT 5
5157: MUL
5158: LESS
5159: IFFALSE 5190
// CreateCratesArea ( rand ( 2 , 5 ) , areas [ i ] , true ) ;
5161: LD_INT 2
5163: PPUSH
5164: LD_INT 5
5166: PPUSH
5167: CALL_OW 12
5171: PPUSH
5172: LD_VAR 0 2
5176: PUSH
5177: LD_VAR 0 1
5181: ARRAY
5182: PPUSH
5183: LD_INT 1
5185: PPUSH
5186: CALL_OW 55
// end ;
5190: GO 5120
5192: POP
5193: POP
// if GetResourceArea ( Center , mat_cans ) < ( ( 600 - shipments_density ) / 25 * 5 ) then
5194: LD_INT 14
5196: PPUSH
5197: LD_INT 1
5199: PPUSH
5200: CALL_OW 287
5204: PUSH
5205: LD_INT 600
5207: PUSH
5208: LD_EXP 23
5212: MINUS
5213: PUSH
5214: LD_INT 25
5216: DIVREAL
5217: PUSH
5218: LD_INT 5
5220: MUL
5221: LESS
5222: IFFALSE 5237
// CreateCratesArea ( 5 , Center , true ) ;
5224: LD_INT 5
5226: PPUSH
5227: LD_INT 14
5229: PPUSH
5230: LD_INT 1
5232: PPUSH
5233: CALL_OW 55
// enable ;
5237: ENABLE
// end ;
5238: PPOPN 2
5240: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5241: GO 5243
5243: DISABLE
5244: LD_INT 0
5246: PPUSH
5247: PPUSH
// begin case tick of 1 .. 1 1$0 :
5248: LD_OWVAR 1
5252: PUSH
5253: LD_INT 1
5255: DOUBLE
5256: GREATEREQUAL
5257: IFFALSE 5265
5259: LD_INT 2100
5261: DOUBLE
5262: LESSEQUAL
5263: IFTRUE 5267
5265: GO 5295
5267: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5268: LD_EXP 23
5272: PUSH
5273: LD_INT 100
5275: DIVREAL
5276: PUSH
5277: LD_INT 525
5279: PPUSH
5280: LD_INT 1050
5282: PPUSH
5283: CALL_OW 12
5287: MUL
5288: PPUSH
5289: CALL_OW 67
5293: GO 5597
5295: LD_INT 2100
5297: PUSH
5298: LD_INT 1
5300: PLUS
5301: DOUBLE
5302: GREATEREQUAL
5303: IFFALSE 5311
5305: LD_INT 10500
5307: DOUBLE
5308: LESSEQUAL
5309: IFTRUE 5313
5311: GO 5341
5313: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5314: LD_EXP 23
5318: PUSH
5319: LD_INT 100
5321: DIVREAL
5322: PUSH
5323: LD_INT 1050
5325: PPUSH
5326: LD_INT 1750
5328: PPUSH
5329: CALL_OW 12
5333: MUL
5334: PPUSH
5335: CALL_OW 67
5339: GO 5597
5341: LD_INT 10500
5343: PUSH
5344: LD_INT 1
5346: PLUS
5347: DOUBLE
5348: GREATEREQUAL
5349: IFFALSE 5357
5351: LD_INT 21000
5353: DOUBLE
5354: LESSEQUAL
5355: IFTRUE 5359
5357: GO 5387
5359: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5360: LD_EXP 23
5364: PUSH
5365: LD_INT 100
5367: DIVREAL
5368: PUSH
5369: LD_INT 1750
5371: PPUSH
5372: LD_INT 2100
5374: PPUSH
5375: CALL_OW 12
5379: MUL
5380: PPUSH
5381: CALL_OW 67
5385: GO 5597
5387: LD_INT 21000
5389: PUSH
5390: LD_INT 1
5392: PLUS
5393: DOUBLE
5394: GREATEREQUAL
5395: IFFALSE 5403
5397: LD_INT 42000
5399: DOUBLE
5400: LESSEQUAL
5401: IFTRUE 5405
5403: GO 5433
5405: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5406: LD_EXP 23
5410: PUSH
5411: LD_INT 100
5413: DIVREAL
5414: PUSH
5415: LD_INT 2100
5417: PPUSH
5418: LD_INT 2275
5420: PPUSH
5421: CALL_OW 12
5425: MUL
5426: PPUSH
5427: CALL_OW 67
5431: GO 5597
5433: LD_INT 42000
5435: PUSH
5436: LD_INT 1
5438: PLUS
5439: DOUBLE
5440: GREATEREQUAL
5441: IFFALSE 5449
5443: LD_INT 63000
5445: DOUBLE
5446: LESSEQUAL
5447: IFTRUE 5451
5449: GO 5479
5451: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5452: LD_EXP 23
5456: PUSH
5457: LD_INT 100
5459: DIVREAL
5460: PUSH
5461: LD_INT 2275
5463: PPUSH
5464: LD_INT 2450
5466: PPUSH
5467: CALL_OW 12
5471: MUL
5472: PPUSH
5473: CALL_OW 67
5477: GO 5597
5479: LD_INT 63000
5481: PUSH
5482: LD_INT 1
5484: PLUS
5485: DOUBLE
5486: GREATEREQUAL
5487: IFFALSE 5495
5489: LD_INT 105000
5491: DOUBLE
5492: LESSEQUAL
5493: IFTRUE 5497
5495: GO 5525
5497: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5498: LD_EXP 23
5502: PUSH
5503: LD_INT 100
5505: DIVREAL
5506: PUSH
5507: LD_INT 2450
5509: PPUSH
5510: LD_INT 2800
5512: PPUSH
5513: CALL_OW 12
5517: MUL
5518: PPUSH
5519: CALL_OW 67
5523: GO 5597
5525: LD_INT 105000
5527: PUSH
5528: LD_INT 1
5530: PLUS
5531: DOUBLE
5532: GREATEREQUAL
5533: IFFALSE 5541
5535: LD_INT 630000
5537: DOUBLE
5538: LESSEQUAL
5539: IFTRUE 5543
5541: GO 5571
5543: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5544: LD_EXP 23
5548: PUSH
5549: LD_INT 100
5551: DIVREAL
5552: PUSH
5553: LD_INT 2800
5555: PPUSH
5556: LD_INT 3500
5558: PPUSH
5559: CALL_OW 12
5563: MUL
5564: PPUSH
5565: CALL_OW 67
5569: GO 5597
5571: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5572: LD_EXP 23
5576: PUSH
5577: LD_INT 100
5579: DIVREAL
5580: PUSH
5581: LD_INT 3500
5583: PPUSH
5584: LD_INT 3850
5586: PPUSH
5587: CALL_OW 12
5591: MUL
5592: PPUSH
5593: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5597: LD_ADDR_VAR 0 2
5601: PUSH
5602: LD_INT 3
5604: PPUSH
5605: LD_INT 5
5607: PPUSH
5608: CALL_OW 12
5612: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5613: LD_ADDR_VAR 0 1
5617: PUSH
5618: LD_EXP 34
5622: PUSH
5623: LD_INT 0
5625: PUSH
5626: EMPTY
5627: LIST
5628: DIFF
5629: PUSH
5630: FOR_IN
5631: IFFALSE 5680
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5633: LD_VAR 0 2
5637: PPUSH
5638: LD_EXP 39
5642: PUSH
5643: LD_VAR 0 1
5647: ARRAY
5648: PUSH
5649: LD_INT 1
5651: ARRAY
5652: PPUSH
5653: LD_EXP 39
5657: PUSH
5658: LD_VAR 0 1
5662: ARRAY
5663: PUSH
5664: LD_INT 2
5666: ARRAY
5667: PPUSH
5668: LD_INT 20
5670: PPUSH
5671: LD_INT 1
5673: PPUSH
5674: CALL_OW 56
5678: GO 5630
5680: POP
5681: POP
// enable ;
5682: ENABLE
// end ; end_of_file
5683: PPOPN 2
5685: END
// every 20 20$00 trigger apemanNumber do
5686: LD_EXP 46
5690: IFFALSE 5723
5692: GO 5694
5694: DISABLE
// begin enable ;
5695: ENABLE
// if apeLevel >= 8 then
5696: LD_EXP 51
5700: PUSH
5701: LD_INT 8
5703: GREATEREQUAL
5704: IFFALSE 5709
// disable else
5706: DISABLE
5707: GO 5723
// apeLevel := apeLevel + 1 ;
5709: LD_ADDR_EXP 51
5713: PUSH
5714: LD_EXP 51
5718: PUSH
5719: LD_INT 1
5721: PLUS
5722: ST_TO_ADDR
// end ;
5723: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5724: LD_EXP 46
5728: PUSH
5729: LD_EXP 47
5733: LESS
5734: IFFALSE 5874
5736: GO 5738
5738: DISABLE
5739: LD_INT 0
5741: PPUSH
5742: PPUSH
5743: PPUSH
5744: PPUSH
// begin enable ;
5745: ENABLE
// for i := 1 to apemanPos do
5746: LD_ADDR_VAR 0 1
5750: PUSH
5751: DOUBLE
5752: LD_INT 1
5754: DEC
5755: ST_TO_ADDR
5756: LD_EXP 49
5760: PUSH
5761: FOR_TO
5762: IFFALSE 5872
// begin if apemanPlayerCount [ i ] then
5764: LD_EXP 50
5768: PUSH
5769: LD_VAR 0 1
5773: ARRAY
5774: IFFALSE 5870
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5776: LD_EXP 50
5780: PUSH
5781: LD_VAR 0 1
5785: ARRAY
5786: PUSH
5787: LD_EXP 49
5791: PUSH
5792: LD_VAR 0 1
5796: ARRAY
5797: GREATER
5798: IFFALSE 5870
// begin ape := PrepareApeman ;
5800: LD_ADDR_VAR 0 2
5804: PUSH
5805: CALL 6393 0 0
5809: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5810: LD_VAR 0 2
5814: PPUSH
5815: LD_EXP 52
5819: PUSH
5820: LD_VAR 0 1
5824: ARRAY
5825: PPUSH
5826: LD_INT 0
5828: PPUSH
5829: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5833: LD_ADDR_EXP 49
5837: PUSH
5838: LD_EXP 49
5842: PPUSH
5843: LD_VAR 0 1
5847: PPUSH
5848: LD_EXP 49
5852: PUSH
5853: LD_VAR 0 1
5857: ARRAY
5858: PUSH
5859: LD_VAR 0 2
5863: UNION
5864: PPUSH
5865: CALL_OW 1
5869: ST_TO_ADDR
// end ; end ; end ;
5870: GO 5761
5872: POP
5873: POP
// end ;
5874: PPOPN 4
5876: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5877: LD_INT 0
5879: PPUSH
5880: PPUSH
5881: PPUSH
5882: PPUSH
5883: PPUSH
5884: PPUSH
5885: PPUSH
// playersAmount := 0 ;
5886: LD_ADDR_VAR 0 3
5890: PUSH
5891: LD_INT 0
5893: ST_TO_ADDR
// _apeAreas := [ Ape1Area , Ape2Area , Ape3Area , Ape4Area , Ape5Area , Ape6Area , Ape7Area , Ape8Area ] ;
5894: LD_ADDR_VAR 0 7
5898: PUSH
5899: LD_INT 15
5901: PUSH
5902: LD_INT 19
5904: PUSH
5905: LD_INT 20
5907: PUSH
5908: LD_INT 17
5910: PUSH
5911: LD_INT 18
5913: PUSH
5914: LD_INT 21
5916: PUSH
5917: LD_INT 22
5919: PUSH
5920: LD_INT 16
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5933: LD_ADDR_EXP 52
5937: PUSH
5938: LD_INT 0
5940: PUSH
5941: LD_INT 0
5943: PUSH
5944: LD_INT 0
5946: PUSH
5947: LD_INT 0
5949: PUSH
5950: LD_INT 0
5952: PUSH
5953: LD_INT 0
5955: PUSH
5956: LD_INT 0
5958: PUSH
5959: LD_INT 0
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: ST_TO_ADDR
// for j = 1 to Side_Positions do
5972: LD_ADDR_VAR 0 4
5976: PUSH
5977: DOUBLE
5978: LD_INT 1
5980: DEC
5981: ST_TO_ADDR
5982: LD_EXP 34
5986: PUSH
5987: FOR_TO
5988: IFFALSE 6055
// if Side_Positions [ j ] then
5990: LD_EXP 34
5994: PUSH
5995: LD_VAR 0 4
5999: ARRAY
6000: IFFALSE 6053
// begin playersAmount := playersAmount + 1 ;
6002: LD_ADDR_VAR 0 3
6006: PUSH
6007: LD_VAR 0 3
6011: PUSH
6012: LD_INT 1
6014: PLUS
6015: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6016: LD_ADDR_EXP 52
6020: PUSH
6021: LD_EXP 52
6025: PPUSH
6026: LD_VAR 0 4
6030: PPUSH
6031: LD_VAR 0 7
6035: PUSH
6036: LD_EXP 34
6040: PUSH
6041: LD_VAR 0 4
6045: ARRAY
6046: ARRAY
6047: PPUSH
6048: CALL_OW 1
6052: ST_TO_ADDR
// end ;
6053: GO 5987
6055: POP
6056: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6057: LD_ADDR_EXP 48
6061: PUSH
6062: LD_INT 3
6064: PUSH
6065: LD_EXP 25
6069: MUL
6070: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6071: LD_ADDR_EXP 46
6075: PUSH
6076: LD_VAR 0 3
6080: PUSH
6081: LD_EXP 48
6085: MUL
6086: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6087: LD_ADDR_EXP 47
6091: PUSH
6092: LD_EXP 46
6096: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6097: LD_ADDR_EXP 49
6101: PUSH
6102: LD_INT 0
6104: PUSH
6105: LD_INT 0
6107: PUSH
6108: LD_INT 0
6110: PUSH
6111: LD_INT 0
6113: PUSH
6114: LD_INT 0
6116: PUSH
6117: LD_INT 0
6119: PUSH
6120: LD_INT 0
6122: PUSH
6123: LD_INT 0
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6136: LD_ADDR_EXP 50
6140: PUSH
6141: LD_INT 0
6143: PUSH
6144: LD_INT 0
6146: PUSH
6147: LD_INT 0
6149: PUSH
6150: LD_INT 0
6152: PUSH
6153: LD_INT 0
6155: PUSH
6156: LD_INT 0
6158: PUSH
6159: LD_INT 0
6161: PUSH
6162: LD_INT 0
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: ST_TO_ADDR
// apeLevel := 1 ;
6175: LD_ADDR_EXP 51
6179: PUSH
6180: LD_INT 1
6182: ST_TO_ADDR
// if not apemanNumber then
6183: LD_EXP 46
6187: NOT
6188: IFFALSE 6192
// exit ;
6190: GO 6388
// for i := 1 to apemanPerPlayer do
6192: LD_ADDR_VAR 0 2
6196: PUSH
6197: DOUBLE
6198: LD_INT 1
6200: DEC
6201: ST_TO_ADDR
6202: LD_EXP 48
6206: PUSH
6207: FOR_TO
6208: IFFALSE 6386
// begin for j := 1 to Side_Positions do
6210: LD_ADDR_VAR 0 4
6214: PUSH
6215: DOUBLE
6216: LD_INT 1
6218: DEC
6219: ST_TO_ADDR
6220: LD_EXP 34
6224: PUSH
6225: FOR_TO
6226: IFFALSE 6382
// if Side_Positions [ j ] then
6228: LD_EXP 34
6232: PUSH
6233: LD_VAR 0 4
6237: ARRAY
6238: IFFALSE 6380
// begin pos := Side_Positions [ j ] ;
6240: LD_ADDR_VAR 0 6
6244: PUSH
6245: LD_EXP 34
6249: PUSH
6250: LD_VAR 0 4
6254: ARRAY
6255: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6256: LD_ADDR_EXP 50
6260: PUSH
6261: LD_EXP 50
6265: PPUSH
6266: LD_VAR 0 4
6270: PPUSH
6271: LD_EXP 50
6275: PUSH
6276: LD_VAR 0 4
6280: ARRAY
6281: PUSH
6282: LD_INT 1
6284: PLUS
6285: PPUSH
6286: CALL_OW 1
6290: ST_TO_ADDR
// ape := PrepareApeman ;
6291: LD_ADDR_VAR 0 5
6295: PUSH
6296: CALL 6393 0 0
6300: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6301: LD_ADDR_EXP 49
6305: PUSH
6306: LD_EXP 49
6310: PPUSH
6311: LD_VAR 0 4
6315: PPUSH
6316: LD_EXP 49
6320: PUSH
6321: LD_VAR 0 4
6325: ARRAY
6326: PPUSH
6327: LD_EXP 49
6331: PUSH
6332: LD_VAR 0 4
6336: ARRAY
6337: PUSH
6338: LD_INT 1
6340: PLUS
6341: PPUSH
6342: LD_VAR 0 5
6346: PPUSH
6347: CALL_OW 1
6351: PPUSH
6352: CALL_OW 1
6356: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6357: LD_VAR 0 5
6361: PPUSH
6362: LD_EXP 52
6366: PUSH
6367: LD_VAR 0 4
6371: ARRAY
6372: PPUSH
6373: LD_INT 0
6375: PPUSH
6376: CALL_OW 49
// end ;
6380: GO 6225
6382: POP
6383: POP
// end ;
6384: GO 6207
6386: POP
6387: POP
// end ;
6388: LD_VAR 0 1
6392: RET
// export function PrepareApeman ; var bonus ; begin
6393: LD_INT 0
6395: PPUSH
6396: PPUSH
// uc_side := 0 ;
6397: LD_ADDR_OWVAR 20
6401: PUSH
6402: LD_INT 0
6404: ST_TO_ADDR
// uc_nation := 0 ;
6405: LD_ADDR_OWVAR 21
6409: PUSH
6410: LD_INT 0
6412: ST_TO_ADDR
// InitHc ;
6413: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6417: LD_ADDR_VAR 0 2
6421: PUSH
6422: LD_INT 1
6424: NEG
6425: PUSH
6426: LD_INT 0
6428: PUSH
6429: LD_INT 1
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: PUSH
6437: LD_INT 25
6439: PUSH
6440: LD_INT 12
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PPUSH
6447: CALL_OW 69
6451: PUSH
6452: LD_INT 3
6454: MOD
6455: PUSH
6456: LD_INT 1
6458: PLUS
6459: ARRAY
6460: ST_TO_ADDR
// hc_class := class_apeman ;
6461: LD_ADDR_OWVAR 28
6465: PUSH
6466: LD_INT 12
6468: ST_TO_ADDR
// hc_gallery :=  ;
6469: LD_ADDR_OWVAR 33
6473: PUSH
6474: LD_STRING 
6476: ST_TO_ADDR
// hc_name :=  ;
6477: LD_ADDR_OWVAR 26
6481: PUSH
6482: LD_STRING 
6484: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6485: LD_ADDR_OWVAR 31
6489: PUSH
6490: LD_EXP 51
6494: PUSH
6495: LD_VAR 0 2
6499: PLUS
6500: PUSH
6501: LD_EXP 51
6505: PUSH
6506: LD_VAR 0 2
6510: PLUS
6511: PUSH
6512: LD_EXP 51
6516: PUSH
6517: LD_VAR 0 2
6521: PLUS
6522: PUSH
6523: LD_EXP 51
6527: PUSH
6528: LD_VAR 0 2
6532: PLUS
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6540: LD_ADDR_OWVAR 35
6544: PUSH
6545: LD_INT 10
6547: PUSH
6548: LD_VAR 0 2
6552: MUL
6553: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6554: LD_ADDR_OWVAR 29
6558: PUSH
6559: LD_INT 12
6561: PUSH
6562: LD_INT 12
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: ST_TO_ADDR
// result := CreateHuman ;
6569: LD_ADDR_VAR 0 1
6573: PUSH
6574: CALL_OW 44
6578: ST_TO_ADDR
// end ;
6579: LD_VAR 0 1
6583: RET
// export function ApeKilled ( ape ) ; var s , i ; begin
6584: LD_INT 0
6586: PPUSH
6587: PPUSH
6588: PPUSH
// if not ape then
6589: LD_VAR 0 1
6593: NOT
6594: IFFALSE 6598
// exit ;
6596: GO 6701
// for i = 1 to apemanPos do
6598: LD_ADDR_VAR 0 4
6602: PUSH
6603: DOUBLE
6604: LD_INT 1
6606: DEC
6607: ST_TO_ADDR
6608: LD_EXP 49
6612: PUSH
6613: FOR_TO
6614: IFFALSE 6648
// if ape in apemanPos [ i ] then
6616: LD_VAR 0 1
6620: PUSH
6621: LD_EXP 49
6625: PUSH
6626: LD_VAR 0 4
6630: ARRAY
6631: IN
6632: IFFALSE 6646
// begin s := i ;
6634: LD_ADDR_VAR 0 3
6638: PUSH
6639: LD_VAR 0 4
6643: ST_TO_ADDR
// break ;
6644: GO 6648
// end ;
6646: GO 6613
6648: POP
6649: POP
// apemanPos := Replace ( apemanPos , s , apemanPos [ s ] diff ape ) ;
6650: LD_ADDR_EXP 49
6654: PUSH
6655: LD_EXP 49
6659: PPUSH
6660: LD_VAR 0 3
6664: PPUSH
6665: LD_EXP 49
6669: PUSH
6670: LD_VAR 0 3
6674: ARRAY
6675: PUSH
6676: LD_VAR 0 1
6680: DIFF
6681: PPUSH
6682: CALL_OW 1
6686: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6687: LD_ADDR_EXP 46
6691: PUSH
6692: LD_EXP 46
6696: PUSH
6697: LD_INT 1
6699: MINUS
6700: ST_TO_ADDR
// end ; end_of_file
6701: LD_VAR 0 2
6705: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6706: LD_VAR 0 1
6710: PPUSH
6711: CALL_OW 266
6715: PUSH
6716: LD_INT 0
6718: PUSH
6719: LD_INT 1
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: IN
6726: IFFALSE 6751
// SetBName ( b , @ & GetSide ( b ) ) ;
6728: LD_VAR 0 1
6732: PPUSH
6733: LD_STRING @
6735: PUSH
6736: LD_VAR 0 1
6740: PPUSH
6741: CALL_OW 255
6745: STR
6746: PPUSH
6747: CALL_OW 500
// end ;
6751: PPOPN 2
6753: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6754: LD_VAR 0 1
6758: PPUSH
6759: CALL_OW 266
6763: PUSH
6764: LD_INT 0
6766: PUSH
6767: LD_INT 1
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: IN
6774: IFFALSE 6799
// SetBName ( b , @ & GetSide ( b ) ) ;
6776: LD_VAR 0 1
6780: PPUSH
6781: LD_STRING @
6783: PUSH
6784: LD_VAR 0 1
6788: PPUSH
6789: CALL_OW 255
6793: STR
6794: PPUSH
6795: CALL_OW 500
// end ;
6799: PPOPN 3
6801: END
// on VehicleConstructed ( veh , fac ) do var side ;
6802: LD_INT 0
6804: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6805: LD_VAR 0 1
6809: PPUSH
6810: CALL_OW 263
6814: PUSH
6815: LD_INT 5
6817: EQUAL
6818: IFFALSE 6960
// begin side := GetSide ( veh ) ;
6820: LD_ADDR_VAR 0 3
6824: PUSH
6825: LD_VAR 0 1
6829: PPUSH
6830: CALL_OW 255
6834: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6835: LD_ADDR_EXP 49
6839: PUSH
6840: LD_EXP 49
6844: PPUSH
6845: LD_VAR 0 3
6849: PPUSH
6850: LD_EXP 49
6854: PUSH
6855: LD_VAR 0 3
6859: ARRAY
6860: PPUSH
6861: LD_INT 52
6863: PUSH
6864: EMPTY
6865: LIST
6866: PPUSH
6867: CALL_OW 72
6871: PUSH
6872: LD_INT 22
6874: PUSH
6875: LD_VAR 0 3
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: LD_INT 2
6886: PUSH
6887: LD_INT 33
6889: PUSH
6890: LD_INT 5
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PUSH
6897: LD_INT 25
6899: PUSH
6900: LD_INT 12
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PUSH
6907: LD_INT 25
6909: PUSH
6910: LD_INT 15
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 25
6919: PUSH
6920: LD_INT 16
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PUSH
6927: LD_INT 25
6929: PUSH
6930: LD_INT 17
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PPUSH
6949: CALL_OW 69
6953: UNION
6954: PPUSH
6955: CALL_OW 1
6959: ST_TO_ADDR
// end ; end ;
6960: PPOPN 3
6962: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6963: LD_INT 0
6965: PPUSH
6966: PPUSH
6967: PPUSH
6968: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6969: LD_VAR 0 1
6973: PPUSH
6974: CALL_OW 257
6978: PUSH
6979: LD_INT 12
6981: PUSH
6982: LD_INT 15
6984: PUSH
6985: LD_INT 17
6987: PUSH
6988: LD_INT 16
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: IN
6997: PUSH
6998: LD_VAR 0 1
7002: PPUSH
7003: CALL_OW 263
7007: PUSH
7008: LD_INT 5
7010: EQUAL
7011: OR
7012: IFFALSE 7023
// ApeKilled ( j ) ;
7014: LD_VAR 0 1
7018: PPUSH
7019: CALL 6584 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7023: LD_VAR 0 1
7027: PPUSH
7028: CALL_OW 266
7032: PUSH
7033: LD_INT 0
7035: PUSH
7036: LD_INT 1
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: IN
7043: IFFALSE 7125
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7045: LD_ADDR_VAR 0 4
7049: PUSH
7050: LD_EXP 34
7054: PUSH
7055: LD_VAR 0 1
7059: PPUSH
7060: CALL_OW 255
7064: ARRAY
7065: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7066: LD_ADDR_VAR 0 2
7070: PUSH
7071: LD_EXP 39
7075: PUSH
7076: LD_VAR 0 4
7080: ARRAY
7081: PUSH
7082: LD_INT 1
7084: ARRAY
7085: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7086: LD_ADDR_VAR 0 3
7090: PUSH
7091: LD_EXP 39
7095: PUSH
7096: LD_VAR 0 4
7100: ARRAY
7101: PUSH
7102: LD_INT 2
7104: ARRAY
7105: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7106: LD_VAR 0 2
7110: PPUSH
7111: LD_VAR 0 3
7115: PPUSH
7116: CALL_OW 420
7120: PPUSH
7121: CALL_OW 419
// end ; end ;
7125: PPOPN 5
7127: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7128: LD_VAR 0 1
7132: PPUSH
7133: LD_VAR 0 2
7137: PPUSH
7138: LD_VAR 0 3
7142: PPUSH
7143: LD_OWVAR 2
7147: PPUSH
7148: CALL 9874 0 4
7152: PPOPN 3
7154: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7155: LD_INT 0
7157: PPUSH
7158: PPUSH
// for un in battle_flags_id do
7159: LD_ADDR_VAR 0 2
7163: PUSH
7164: LD_EXP 44
7168: PUSH
7169: FOR_IN
7170: IFFALSE 7245
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7172: LD_VAR 0 2
7176: PPUSH
7177: LD_INT 1
7179: PUSH
7180: LD_LOC 9
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 2
7191: PUSH
7192: LD_LOC 9
7196: PUSH
7197: LD_INT 2
7199: DIV
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 3
7207: PUSH
7208: LD_LOC 9
7212: PUSH
7213: LD_INT 5
7215: DIV
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 20
7223: PUSH
7224: LD_LOC 9
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: PPUSH
7239: CALL_OW 423
7243: GO 7169
7245: POP
7246: POP
// end ;
7247: LD_VAR 0 1
7251: RET
// every 1 do var un ;
7252: GO 7254
7254: DISABLE
7255: LD_INT 0
7257: PPUSH
// begin if not def_morale_flags then
7258: LD_EXP 9
7262: NOT
7263: IFFALSE 7267
// exit ;
7265: GO 7344
// if not morale_decreasing_time then
7267: LD_EXP 24
7271: NOT
7272: IFFALSE 7276
// exit ;
7274: GO 7344
// strength = 100 ;
7276: LD_ADDR_LOC 9
7280: PUSH
7281: LD_INT 100
7283: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7284: LD_EXP 24
7288: PPUSH
7289: CALL_OW 67
// strength := strength - 1 ;
7293: LD_ADDR_LOC 9
7297: PUSH
7298: LD_LOC 9
7302: PUSH
7303: LD_INT 1
7305: MINUS
7306: ST_TO_ADDR
// Update_Flags ;
7307: CALL 7155 0 0
// until not strength ;
7311: LD_LOC 9
7315: NOT
7316: IFFALSE 7284
// for un in battle_flags_id do
7318: LD_ADDR_VAR 0 1
7322: PUSH
7323: LD_EXP 44
7327: PUSH
7328: FOR_IN
7329: IFFALSE 7342
// KillBattleFlag ( un ) ;
7331: LD_VAR 0 1
7335: PPUSH
7336: CALL_OW 419
7340: GO 7328
7342: POP
7343: POP
// end ; end_of_file
7344: PPOPN 1
7346: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7347: LD_INT 0
7349: PPUSH
7350: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7351: LD_ADDR_VAR 0 2
7355: PUSH
7356: LD_STRING #Multi1x1-Time
7358: PUSH
7359: LD_OWVAR 1
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: ST_TO_ADDR
// if WaitServerStrings then
7368: LD_EXP 54
7372: IFFALSE 7390
// AllStrings = AllStrings ^ WaitServerStrings ;
7374: LD_ADDR_VAR 0 2
7378: PUSH
7379: LD_VAR 0 2
7383: PUSH
7384: LD_EXP 54
7388: ADD
7389: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7390: LD_INT 0
7392: PUSH
7393: LD_EXP 29
7397: PUSH
7398: LD_OWVAR 1
7402: MINUS
7403: LESSEQUAL
7404: IFFALSE 7435
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7406: LD_ADDR_VAR 0 2
7410: PUSH
7411: LD_VAR 0 2
7415: PUSH
7416: LD_STRING #allowedsibbomb
7418: PUSH
7419: LD_EXP 29
7423: PUSH
7424: LD_OWVAR 1
7428: MINUS
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: ADD
7434: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7435: LD_INT 0
7437: PUSH
7438: LD_EXP 57
7442: PUSH
7443: LD_OWVAR 1
7447: MINUS
7448: LESSEQUAL
7449: IFFALSE 7480
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7451: LD_ADDR_VAR 0 2
7455: PUSH
7456: LD_VAR 0 2
7460: PUSH
7461: LD_STRING #builduptime
7463: PUSH
7464: LD_EXP 57
7468: PUSH
7469: LD_OWVAR 1
7473: MINUS
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: ADD
7479: ST_TO_ADDR
// if ( ExtraStrings ) then
7480: LD_EXP 53
7484: IFFALSE 7506
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7486: LD_ADDR_VAR 0 2
7490: PUSH
7491: LD_VAR 0 2
7495: PUSH
7496: LD_STRING 
7498: ADD
7499: PUSH
7500: LD_EXP 53
7504: ADD
7505: ST_TO_ADDR
// Display_Strings := AllStrings ;
7506: LD_ADDR_OWVAR 47
7510: PUSH
7511: LD_VAR 0 2
7515: ST_TO_ADDR
// end ;
7516: LD_VAR 0 1
7520: RET
// every 0 0$1 do
7521: GO 7523
7523: DISABLE
// begin ShowTimer ;
7524: CALL 7347 0 0
// enable ;
7528: ENABLE
// end ; end_of_file
7529: END
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
7530: LD_INT 0
7532: PPUSH
7533: PPUSH
7534: PPUSH
7535: PPUSH
7536: PPUSH
7537: PPUSH
7538: PPUSH
7539: PPUSH
7540: PPUSH
// for i := 1 to 8 do
7541: LD_ADDR_VAR 0 2
7545: PUSH
7546: DOUBLE
7547: LD_INT 1
7549: DEC
7550: ST_TO_ADDR
7551: LD_INT 8
7553: PUSH
7554: FOR_TO
7555: IFFALSE 7939
// begin if Side_Positions [ i ] then
7557: LD_EXP 34
7561: PUSH
7562: LD_VAR 0 2
7566: ARRAY
7567: IFFALSE 7937
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
7569: LD_ADDR_VAR 0 7
7573: PUSH
7574: LD_INT 22
7576: PUSH
7577: LD_VAR 0 2
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PUSH
7586: LD_INT 21
7588: PUSH
7589: LD_INT 1
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PPUSH
7600: CALL_OW 69
7604: PUSH
7605: LD_INT 0
7607: PLUS
7608: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7609: LD_ADDR_VAR 0 9
7613: PUSH
7614: LD_INT 22
7616: PUSH
7617: LD_VAR 0 2
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: LD_INT 2
7628: PUSH
7629: LD_INT 30
7631: PUSH
7632: LD_INT 0
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: PUSH
7639: LD_INT 30
7641: PUSH
7642: LD_INT 1
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PPUSH
7658: CALL_OW 69
7662: ST_TO_ADDR
// crates := 0 ;
7663: LD_ADDR_VAR 0 4
7667: PUSH
7668: LD_INT 0
7670: ST_TO_ADDR
// oil := 0 ;
7671: LD_ADDR_VAR 0 5
7675: PUSH
7676: LD_INT 0
7678: ST_TO_ADDR
// sib := 0 ;
7679: LD_ADDR_VAR 0 6
7683: PUSH
7684: LD_INT 0
7686: ST_TO_ADDR
// if bases then
7687: LD_VAR 0 9
7691: IFFALSE 7797
// begin for j in bases do
7693: LD_ADDR_VAR 0 3
7697: PUSH
7698: LD_VAR 0 9
7702: PUSH
7703: FOR_IN
7704: IFFALSE 7795
// begin base := GetBase ( j ) ;
7706: LD_ADDR_VAR 0 8
7710: PUSH
7711: LD_VAR 0 3
7715: PPUSH
7716: CALL_OW 274
7720: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
7721: LD_ADDR_VAR 0 4
7725: PUSH
7726: LD_VAR 0 4
7730: PUSH
7731: LD_VAR 0 8
7735: PPUSH
7736: LD_INT 1
7738: PPUSH
7739: CALL_OW 275
7743: PLUS
7744: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
7745: LD_ADDR_VAR 0 5
7749: PUSH
7750: LD_VAR 0 5
7754: PUSH
7755: LD_VAR 0 8
7759: PPUSH
7760: LD_INT 2
7762: PPUSH
7763: CALL_OW 275
7767: PLUS
7768: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
7769: LD_ADDR_VAR 0 6
7773: PUSH
7774: LD_VAR 0 6
7778: PUSH
7779: LD_VAR 0 8
7783: PPUSH
7784: LD_INT 3
7786: PPUSH
7787: CALL_OW 275
7791: PLUS
7792: ST_TO_ADDR
// end ;
7793: GO 7703
7795: POP
7796: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
7797: LD_STRING setSpecText(
7799: PUSH
7800: LD_VAR 0 2
7804: STR
7805: PUSH
7806: LD_STRING ,
7808: STR
7809: PUSH
7810: LD_INT 2
7812: STR
7813: PUSH
7814: LD_STRING ,
7816: STR
7817: PUSH
7818: LD_VAR 0 4
7822: STR
7823: PUSH
7824: LD_STRING )
7826: STR
7827: PPUSH
7828: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
7832: LD_STRING setSpecText(
7834: PUSH
7835: LD_VAR 0 2
7839: STR
7840: PUSH
7841: LD_STRING ,
7843: STR
7844: PUSH
7845: LD_INT 3
7847: STR
7848: PUSH
7849: LD_STRING ,
7851: STR
7852: PUSH
7853: LD_VAR 0 5
7857: STR
7858: PUSH
7859: LD_STRING )
7861: STR
7862: PPUSH
7863: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
7867: LD_STRING setSpecText(
7869: PUSH
7870: LD_VAR 0 2
7874: STR
7875: PUSH
7876: LD_STRING ,
7878: STR
7879: PUSH
7880: LD_INT 4
7882: STR
7883: PUSH
7884: LD_STRING ,
7886: STR
7887: PUSH
7888: LD_VAR 0 6
7892: STR
7893: PUSH
7894: LD_STRING )
7896: STR
7897: PPUSH
7898: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
7902: LD_STRING setSpecText(
7904: PUSH
7905: LD_VAR 0 2
7909: STR
7910: PUSH
7911: LD_STRING ,
7913: STR
7914: PUSH
7915: LD_INT 5
7917: STR
7918: PUSH
7919: LD_STRING ,
7921: STR
7922: PUSH
7923: LD_VAR 0 7
7927: STR
7928: PUSH
7929: LD_STRING )
7931: STR
7932: PPUSH
7933: CALL_OW 559
// end ; end ;
7937: GO 7554
7939: POP
7940: POP
// end ;
7941: LD_VAR 0 1
7945: RET
// every 0 0$1 do
7946: GO 7948
7948: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
7949: LD_STRING setSpecLogoNumber(
7951: PUSH
7952: LD_INT 2
7954: STR
7955: PUSH
7956: LD_STRING ,
7958: STR
7959: PUSH
7960: LD_INT 1
7962: STR
7963: PUSH
7964: LD_STRING )
7966: STR
7967: PPUSH
7968: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
7972: LD_STRING setSpecLogoNumber(
7974: PUSH
7975: LD_INT 3
7977: STR
7978: PUSH
7979: LD_STRING ,
7981: STR
7982: PUSH
7983: LD_INT 2
7985: STR
7986: PUSH
7987: LD_STRING )
7989: STR
7990: PPUSH
7991: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
7995: LD_STRING setSpecLogoNumber(
7997: PUSH
7998: LD_INT 4
8000: STR
8001: PUSH
8002: LD_STRING ,
8004: STR
8005: PUSH
8006: LD_INT 3
8008: STR
8009: PUSH
8010: LD_STRING )
8012: STR
8013: PPUSH
8014: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
8018: LD_STRING setSpecLogoNumber(
8020: PUSH
8021: LD_INT 5
8023: STR
8024: PUSH
8025: LD_STRING ,
8027: STR
8028: PUSH
8029: LD_INT 4
8031: STR
8032: PUSH
8033: LD_STRING )
8035: STR
8036: PPUSH
8037: CALL_OW 559
// end ;
8041: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
8042: LD_INT 2
8044: PUSH
8045: LD_INT 30
8047: PUSH
8048: LD_INT 0
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 30
8057: PUSH
8058: LD_INT 1
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 69
8074: IFFALSE 8084
8076: GO 8078
8078: DISABLE
// begin enable ;
8079: ENABLE
// UpdateSpectatorBar ;
8080: CALL 7530 0 0
// end ; end_of_file
8084: END
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8085: LD_INT 0
8087: PPUSH
8088: PPUSH
// enable ( 98 ) ;
8089: LD_INT 98
8091: ENABLE_MARKED
// GameEnded = false ;
8092: LD_ADDR_LOC 15
8096: PUSH
8097: LD_INT 0
8099: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8100: LD_ADDR_LOC 14
8104: PUSH
8105: LD_INT 0
8107: PUSH
8108: LD_INT 0
8110: PUSH
8111: LD_INT 0
8113: PUSH
8114: LD_INT 0
8116: PUSH
8117: LD_INT 0
8119: PUSH
8120: LD_INT 0
8122: PUSH
8123: LD_INT 0
8125: PUSH
8126: LD_INT 0
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: ST_TO_ADDR
// unfoged = false ;
8139: LD_ADDR_LOC 16
8143: PUSH
8144: LD_INT 0
8146: ST_TO_ADDR
// defeated_specs := [ ] ;
8147: LD_ADDR_LOC 17
8151: PUSH
8152: EMPTY
8153: ST_TO_ADDR
// for i = 1 to side_positions do
8154: LD_ADDR_VAR 0 2
8158: PUSH
8159: DOUBLE
8160: LD_INT 1
8162: DEC
8163: ST_TO_ADDR
8164: LD_EXP 34
8168: PUSH
8169: FOR_TO
8170: IFFALSE 8210
// if not side_positions [ i ] then
8172: LD_EXP 34
8176: PUSH
8177: LD_VAR 0 2
8181: ARRAY
8182: NOT
8183: IFFALSE 8208
// defeated = replace ( defeated , i , true ) ;
8185: LD_ADDR_LOC 14
8189: PUSH
8190: LD_LOC 14
8194: PPUSH
8195: LD_VAR 0 2
8199: PPUSH
8200: LD_INT 1
8202: PPUSH
8203: CALL_OW 1
8207: ST_TO_ADDR
8208: GO 8169
8210: POP
8211: POP
// end ;
8212: LD_VAR 0 1
8216: RET
// function CanWinLoose ; begin
8217: LD_INT 0
8219: PPUSH
// Result := true ;
8220: LD_ADDR_VAR 0 1
8224: PUSH
8225: LD_INT 1
8227: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8228: CALL_OW 518
8232: PUSH
8233: CALL_OW 519
8237: PUSH
8238: LD_INT 0
8240: GREATER
8241: AND
8242: IFFALSE 8252
// Result := false ;
8244: LD_ADDR_VAR 0 1
8248: PUSH
8249: LD_INT 0
8251: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8252: CALL_OW 531
8256: PUSH
8257: CALL_OW 519
8261: PUSH
8262: LD_INT 1
8264: GREATER
8265: AND
8266: IFFALSE 8276
// Result := false ;
8268: LD_ADDR_VAR 0 1
8272: PUSH
8273: LD_INT 0
8275: ST_TO_ADDR
// end ;
8276: LD_VAR 0 1
8280: RET
// export function HasPower ( i ) ; var k , h ; begin
8281: LD_INT 0
8283: PPUSH
8284: PPUSH
8285: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8286: LD_VAR 0 1
8290: PPUSH
8291: CALL_OW 108
8295: NOT
8296: PUSH
8297: LD_EXP 33
8301: PUSH
8302: LD_VAR 0 1
8306: ARRAY
8307: NOT
8308: AND
8309: PUSH
8310: LD_OWVAR 4
8314: AND
8315: IFFALSE 8327
// begin result = false ;
8317: LD_ADDR_VAR 0 2
8321: PUSH
8322: LD_INT 0
8324: ST_TO_ADDR
// end else
8325: GO 8622
// case def_win_rules of 0 :
8327: LD_EXP 30
8331: PUSH
8332: LD_INT 0
8334: DOUBLE
8335: EQUAL
8336: IFTRUE 8340
8338: GO 8503
8340: POP
// if def_people_respawning then
8341: LD_EXP 11
8345: IFFALSE 8436
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8347: LD_ADDR_VAR 0 2
8351: PUSH
8352: LD_INT 22
8354: PUSH
8355: LD_VAR 0 1
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: PUSH
8364: LD_INT 2
8366: PUSH
8367: LD_INT 21
8369: PUSH
8370: LD_INT 1
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: PUSH
8377: LD_INT 33
8379: PUSH
8380: LD_INT 3
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: PUSH
8387: LD_INT 33
8389: PUSH
8390: LD_INT 5
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: LD_INT 30
8399: PUSH
8400: LD_INT 0
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: LD_INT 30
8409: PUSH
8410: LD_INT 1
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: LIST
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: PPUSH
8429: CALL_OW 69
8433: ST_TO_ADDR
8434: GO 8501
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8436: LD_ADDR_VAR 0 2
8440: PUSH
8441: LD_INT 22
8443: PUSH
8444: LD_VAR 0 1
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PUSH
8453: LD_INT 2
8455: PUSH
8456: LD_INT 21
8458: PUSH
8459: LD_INT 1
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: PUSH
8466: LD_INT 33
8468: PUSH
8469: LD_INT 3
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: PUSH
8476: LD_INT 33
8478: PUSH
8479: LD_INT 5
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PPUSH
8496: CALL_OW 69
8500: ST_TO_ADDR
8501: GO 8622
8503: LD_INT 1
8505: DOUBLE
8506: EQUAL
8507: IFTRUE 8511
8509: GO 8550
8511: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8512: LD_ADDR_VAR 0 2
8516: PUSH
8517: LD_INT 22
8519: PUSH
8520: LD_VAR 0 1
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: PUSH
8529: LD_INT 21
8531: PUSH
8532: LD_INT 1
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PPUSH
8543: CALL_OW 69
8547: ST_TO_ADDR
8548: GO 8622
8550: LD_INT 2
8552: DOUBLE
8553: EQUAL
8554: IFTRUE 8558
8556: GO 8621
8558: POP
// begin h = false ;
8559: LD_ADDR_VAR 0 4
8563: PUSH
8564: LD_INT 0
8566: ST_TO_ADDR
// for k in heroes [ i ] do
8567: LD_ADDR_VAR 0 3
8571: PUSH
8572: LD_EXP 45
8576: PUSH
8577: LD_VAR 0 1
8581: ARRAY
8582: PUSH
8583: FOR_IN
8584: IFFALSE 8607
// if IsLive ( k ) then
8586: LD_VAR 0 3
8590: PPUSH
8591: CALL_OW 300
8595: IFFALSE 8605
// h = true ;
8597: LD_ADDR_VAR 0 4
8601: PUSH
8602: LD_INT 1
8604: ST_TO_ADDR
8605: GO 8583
8607: POP
8608: POP
// Result := h ;
8609: LD_ADDR_VAR 0 2
8613: PUSH
8614: LD_VAR 0 4
8618: ST_TO_ADDR
// end ; end ;
8619: GO 8622
8621: POP
// end ;
8622: LD_VAR 0 2
8626: RET
// function AlliedSides ( i , j ) ; begin
8627: LD_INT 0
8629: PPUSH
// Result := false ;
8630: LD_ADDR_VAR 0 3
8634: PUSH
8635: LD_INT 0
8637: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8638: LD_VAR 0 1
8642: PPUSH
8643: LD_VAR 0 2
8647: PPUSH
8648: CALL_OW 81
8652: PUSH
8653: LD_INT 1
8655: EQUAL
8656: PUSH
8657: LD_VAR 0 2
8661: PPUSH
8662: LD_VAR 0 1
8666: PPUSH
8667: CALL_OW 81
8671: PUSH
8672: LD_INT 1
8674: EQUAL
8675: AND
8676: PUSH
8677: LD_VAR 0 1
8681: PPUSH
8682: CALL_OW 83
8686: AND
8687: PUSH
8688: LD_VAR 0 2
8692: PPUSH
8693: CALL_OW 83
8697: AND
8698: IFFALSE 8708
// Result := true ;
8700: LD_ADDR_VAR 0 3
8704: PUSH
8705: LD_INT 1
8707: ST_TO_ADDR
// end ;
8708: LD_VAR 0 3
8712: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8713: CALL 8217 0 0
8717: PUSH
8718: LD_LOC 15
8722: NOT
8723: AND
8724: IFFALSE 8740
8726: GO 8728
8728: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8729: LD_ADDR_EXP 54
8733: PUSH
8734: LD_STRING #Player-Ended
8736: PUSH
8737: EMPTY
8738: LIST
8739: ST_TO_ADDR
8740: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8741: CALL 8217 0 0
8745: PUSH
8746: LD_LOC 15
8750: AND
8751: IFFALSE 8760
8753: GO 8755
8755: DISABLE
// YouLostInMultiplayer ;
8756: CALL_OW 107
8760: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8761: CALL 8217 0 0
8765: NOT
8766: PUSH
8767: CALL_OW 531
8771: NOT
8772: AND
8773: IFFALSE 8789
8775: GO 8777
8777: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8778: LD_ADDR_EXP 54
8782: PUSH
8783: LD_STRING #server-wait
8785: PUSH
8786: EMPTY
8787: LIST
8788: ST_TO_ADDR
8789: END
// every 100 trigger IAmSpec do
8790: CALL_OW 531
8794: IFFALSE 8810
8796: GO 8798
8798: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8799: LD_ADDR_EXP 54
8803: PUSH
8804: LD_STRING #Player-IAmSpec
8806: PUSH
8807: EMPTY
8808: LIST
8809: ST_TO_ADDR
8810: END
// every 100 trigger GameEnded and IAmSpec do
8811: LD_LOC 15
8815: PUSH
8816: CALL_OW 531
8820: AND
8821: IFFALSE 8830
8823: GO 8825
8825: DISABLE
// YouLostInMultiplayer ;
8826: CALL_OW 107
8830: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8831: CALL 8217 0 0
8835: PUSH
8836: LD_LOC 15
8840: NOT
8841: AND
8842: IFFALSE 8858
8844: GO 8846
8846: DISABLE
// WaitServerStrings = [ $player-win ] ;
8847: LD_ADDR_EXP 54
8851: PUSH
8852: LD_STRING $player-win
8854: PUSH
8855: EMPTY
8856: LIST
8857: ST_TO_ADDR
8858: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8859: CALL 8217 0 0
8863: PUSH
8864: LD_LOC 15
8868: AND
8869: IFFALSE 8893
8871: GO 8873
8873: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8874: LD_EXP 35
8878: PUSH
8879: LD_OWVAR 7
8883: ARRAY
8884: PPUSH
8885: CALL 9916 0 1
// YouWinInMultiplayer ;
8889: CALL_OW 106
// end ;
8893: END
// every 100 trigger isEditor marked 401 do
8894: LD_OWVAR 84
8898: IFFALSE 8914
8900: GO 8902
8902: DISABLE
// Debug_Strings = [ You won ] ;
8903: LD_ADDR_OWVAR 48
8907: PUSH
8908: LD_STRING You won
8910: PUSH
8911: EMPTY
8912: LIST
8913: ST_TO_ADDR
8914: END
// every 100 trigger isEditor marked 400 do
8915: LD_OWVAR 84
8919: IFFALSE 8935
8921: GO 8923
8923: DISABLE
// Debug_Strings = [ You loss ] ;
8924: LD_ADDR_OWVAR 48
8928: PUSH
8929: LD_STRING You loss
8931: PUSH
8932: EMPTY
8933: LIST
8934: ST_TO_ADDR
8935: END
// every 100 marked 98 do var i , un ;
8936: GO 8938
8938: DISABLE
8939: LD_INT 0
8941: PPUSH
8942: PPUSH
// begin for i = 1 to side_positions do
8943: LD_ADDR_VAR 0 1
8947: PUSH
8948: DOUBLE
8949: LD_INT 1
8951: DEC
8952: ST_TO_ADDR
8953: LD_EXP 34
8957: PUSH
8958: FOR_TO
8959: IFFALSE 9046
// begin if side_positions [ i ] then
8961: LD_EXP 34
8965: PUSH
8966: LD_VAR 0 1
8970: ARRAY
8971: IFFALSE 9044
// if not HasPower ( i ) and not defeated [ i ] then
8973: LD_VAR 0 1
8977: PPUSH
8978: CALL 8281 0 1
8982: NOT
8983: PUSH
8984: LD_LOC 14
8988: PUSH
8989: LD_VAR 0 1
8993: ARRAY
8994: NOT
8995: AND
8996: IFFALSE 9044
// begin defeated = replace ( defeated , i , true ) ;
8998: LD_ADDR_LOC 14
9002: PUSH
9003: LD_LOC 14
9007: PPUSH
9008: LD_VAR 0 1
9012: PPUSH
9013: LD_INT 1
9015: PPUSH
9016: CALL_OW 1
9020: ST_TO_ADDR
// if i = mp_player_side then
9021: LD_VAR 0 1
9025: PUSH
9026: LD_OWVAR 7
9030: EQUAL
9031: IFFALSE 9044
// begin Multiplayer_Loose_Message ;
9033: CALL_OW 521
// SetPlayerSpectator ( ) ;
9037: CALL_OW 572
// enable ( 400 ) ;
9041: LD_INT 400
9043: ENABLE_MARKED
// end ; end ; end ;
9044: GO 8958
9046: POP
9047: POP
// DidGameEnd ;
9048: CALL 9063 0 0
// if not GameEnded then
9052: LD_LOC 15
9056: NOT
9057: IFFALSE 9060
// enable ;
9059: ENABLE
// end ;
9060: PPOPN 2
9062: END
// function DidGameEnd ; var i , k , enemy ; begin
9063: LD_INT 0
9065: PPUSH
9066: PPUSH
9067: PPUSH
9068: PPUSH
// enemy = [ ] ;
9069: LD_ADDR_VAR 0 4
9073: PUSH
9074: EMPTY
9075: ST_TO_ADDR
// for i = 1 to side_positions do
9076: LD_ADDR_VAR 0 2
9080: PUSH
9081: DOUBLE
9082: LD_INT 1
9084: DEC
9085: ST_TO_ADDR
9086: LD_EXP 34
9090: PUSH
9091: FOR_TO
9092: IFFALSE 9186
// if not defeated [ i ] then
9094: LD_LOC 14
9098: PUSH
9099: LD_VAR 0 2
9103: ARRAY
9104: NOT
9105: IFFALSE 9184
// for k = 1 to side_positions do
9107: LD_ADDR_VAR 0 3
9111: PUSH
9112: DOUBLE
9113: LD_INT 1
9115: DEC
9116: ST_TO_ADDR
9117: LD_EXP 34
9121: PUSH
9122: FOR_TO
9123: IFFALSE 9182
// if not defeated [ k ] then
9125: LD_LOC 14
9129: PUSH
9130: LD_VAR 0 3
9134: ARRAY
9135: NOT
9136: IFFALSE 9180
// if not AlliedSides ( i , k ) then
9138: LD_VAR 0 2
9142: PPUSH
9143: LD_VAR 0 3
9147: PPUSH
9148: CALL 8627 0 2
9152: NOT
9153: IFFALSE 9180
// enemy = enemy ^ [ i , k ] ;
9155: LD_ADDR_VAR 0 4
9159: PUSH
9160: LD_VAR 0 4
9164: PUSH
9165: LD_VAR 0 2
9169: PUSH
9170: LD_VAR 0 3
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: ADD
9179: ST_TO_ADDR
9180: GO 9122
9182: POP
9183: POP
9184: GO 9091
9186: POP
9187: POP
// if not enemy then
9188: LD_VAR 0 4
9192: NOT
9193: IFFALSE 9219
// begin GameEnded = true ;
9195: LD_ADDR_LOC 15
9199: PUSH
9200: LD_INT 1
9202: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9203: LD_LOC 14
9207: PUSH
9208: LD_OWVAR 7
9212: ARRAY
9213: NOT
9214: IFFALSE 9219
// enable ( 401 ) ;
9216: LD_INT 401
9218: ENABLE_MARKED
// end ; end ;
9219: LD_VAR 0 1
9223: RET
// function unfog ; var k , friends ; begin
9224: LD_INT 0
9226: PPUSH
9227: PPUSH
9228: PPUSH
// for k = 1 to side_positions do
9229: LD_ADDR_VAR 0 2
9233: PUSH
9234: DOUBLE
9235: LD_INT 1
9237: DEC
9238: ST_TO_ADDR
9239: LD_EXP 34
9243: PUSH
9244: FOR_TO
9245: IFFALSE 9301
// if not defeated [ k ] then
9247: LD_LOC 14
9251: PUSH
9252: LD_VAR 0 2
9256: ARRAY
9257: NOT
9258: IFFALSE 9299
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9260: LD_OWVAR 7
9264: PPUSH
9265: LD_VAR 0 2
9269: PPUSH
9270: CALL_OW 81
9274: PUSH
9275: LD_INT 1
9277: PUSH
9278: EMPTY
9279: LIST
9280: IN
9281: IFFALSE 9299
// friends = friends ^ k ;
9283: LD_ADDR_VAR 0 3
9287: PUSH
9288: LD_VAR 0 3
9292: PUSH
9293: LD_VAR 0 2
9297: ADD
9298: ST_TO_ADDR
9299: GO 9244
9301: POP
9302: POP
// if not friends then
9303: LD_VAR 0 3
9307: NOT
9308: IFFALSE 9322
// begin SetPlayerSpectator ( ) ;
9310: CALL_OW 572
// unfoged = true ;
9314: LD_ADDR_LOC 16
9318: PUSH
9319: LD_INT 1
9321: ST_TO_ADDR
// end ; end ;
9322: LD_VAR 0 1
9326: RET
// export function MakeGameEnd ; begin
9327: LD_INT 0
9329: PPUSH
// SetPlayerSpectator ( ) ;
9330: CALL_OW 572
// unfoged = true ;
9334: LD_ADDR_LOC 16
9338: PUSH
9339: LD_INT 1
9341: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9342: LD_INT 175
9344: PPUSH
9345: CALL_OW 67
// GameEnded = true ;
9349: LD_ADDR_LOC 15
9353: PUSH
9354: LD_INT 1
9356: ST_TO_ADDR
// end ;
9357: LD_VAR 0 1
9361: RET
// export function GetGameEnded ; begin
9362: LD_INT 0
9364: PPUSH
// result = GameEnded ;
9365: LD_ADDR_VAR 0 1
9369: PUSH
9370: LD_LOC 15
9374: ST_TO_ADDR
// end ; end_of_file
9375: LD_VAR 0 1
9379: RET
// var respawn , inqueue ; export function init_respawning ; begin
9380: LD_INT 0
9382: PPUSH
// respawn := Rand ( 1 , 8 ) ;
9383: LD_ADDR_LOC 18
9387: PUSH
9388: LD_INT 1
9390: PPUSH
9391: LD_INT 8
9393: PPUSH
9394: CALL_OW 12
9398: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9399: LD_ADDR_LOC 19
9403: PUSH
9404: LD_INT 0
9406: PUSH
9407: LD_INT 0
9409: PUSH
9410: LD_INT 0
9412: PUSH
9413: LD_INT 0
9415: PUSH
9416: LD_INT 0
9418: PUSH
9419: LD_INT 0
9421: PUSH
9422: LD_INT 0
9424: PUSH
9425: LD_INT 0
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: ST_TO_ADDR
// end ;
9438: LD_VAR 0 1
9442: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
9443: GO 9445
9445: DISABLE
9446: LD_INT 0
9448: PPUSH
9449: PPUSH
9450: PPUSH
// begin if respawning_time_max = 0 then
9451: LD_EXP 28
9455: PUSH
9456: LD_INT 0
9458: EQUAL
9459: IFFALSE 9463
// exit ;
9461: GO 9871
// if respawn = 8 then
9463: LD_LOC 18
9467: PUSH
9468: LD_INT 8
9470: EQUAL
9471: IFFALSE 9483
// respawn := 1 else
9473: LD_ADDR_LOC 18
9477: PUSH
9478: LD_INT 1
9480: ST_TO_ADDR
9481: GO 9497
// respawn := respawn + 1 ;
9483: LD_ADDR_LOC 18
9487: PUSH
9488: LD_LOC 18
9492: PUSH
9493: LD_INT 1
9495: PLUS
9496: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
9497: LD_EXP 34
9501: PUSH
9502: LD_LOC 18
9506: ARRAY
9507: PUSH
9508: LD_LOC 19
9512: PUSH
9513: LD_LOC 18
9517: ARRAY
9518: NOT
9519: AND
9520: IFFALSE 9870
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
9522: LD_ADDR_VAR 0 1
9526: PUSH
9527: LD_INT 21
9529: PUSH
9530: LD_INT 1
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PUSH
9537: LD_INT 22
9539: PUSH
9540: LD_LOC 18
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: PUSH
9549: LD_INT 3
9551: PUSH
9552: LD_INT 23
9554: PUSH
9555: LD_INT 0
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: PPUSH
9568: CALL_OW 69
9572: ST_TO_ADDR
// if n < number_of_people then
9573: LD_VAR 0 1
9577: PUSH
9578: LD_EXP 19
9582: LESS
9583: IFFALSE 9867
// begin aktresp := respawn ;
9585: LD_ADDR_VAR 0 3
9589: PUSH
9590: LD_LOC 18
9594: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
9595: LD_ADDR_LOC 19
9599: PUSH
9600: LD_LOC 19
9604: PPUSH
9605: LD_VAR 0 3
9609: PPUSH
9610: LD_INT 1
9612: PPUSH
9613: CALL_OW 1
9617: ST_TO_ADDR
// enable ;
9618: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
9619: LD_EXP 27
9623: PPUSH
9624: LD_EXP 28
9628: PPUSH
9629: CALL_OW 12
9633: PPUSH
9634: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
9638: LD_ADDR_LOC 19
9642: PUSH
9643: LD_LOC 19
9647: PPUSH
9648: LD_VAR 0 3
9652: PPUSH
9653: LD_INT 0
9655: PPUSH
9656: CALL_OW 1
9660: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
9661: LD_ADDR_VAR 0 2
9665: PUSH
9666: LD_INT 21
9668: PUSH
9669: LD_INT 3
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PUSH
9676: LD_INT 2
9678: PUSH
9679: LD_INT 30
9681: PUSH
9682: LD_INT 0
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: PUSH
9689: LD_INT 30
9691: PUSH
9692: LD_INT 1
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: LIST
9703: PUSH
9704: LD_INT 50
9706: PUSH
9707: EMPTY
9708: LIST
9709: PUSH
9710: LD_INT 22
9712: PUSH
9713: LD_VAR 0 3
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PPUSH
9728: CALL_OW 69
9732: ST_TO_ADDR
// if dep = 0 then
9733: LD_VAR 0 2
9737: PUSH
9738: LD_INT 0
9740: EQUAL
9741: IFFALSE 9745
// exit ;
9743: GO 9871
// hc_name :=  ;
9745: LD_ADDR_OWVAR 26
9749: PUSH
9750: LD_STRING 
9752: ST_TO_ADDR
// hc_importance := 0 ;
9753: LD_ADDR_OWVAR 32
9757: PUSH
9758: LD_INT 0
9760: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
9761: LD_INT 0
9763: PPUSH
9764: LD_INT 0
9766: PPUSH
9767: LD_EXP 20
9771: PUSH
9772: LD_INT 2
9774: DIV
9775: PPUSH
9776: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
9780: LD_ADDR_OWVAR 21
9784: PUSH
9785: LD_EXP 35
9789: PUSH
9790: LD_VAR 0 3
9794: ARRAY
9795: ST_TO_ADDR
// uc_side := aktresp ;
9796: LD_ADDR_OWVAR 20
9800: PUSH
9801: LD_VAR 0 3
9805: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
9806: LD_ADDR_VAR 0 2
9810: PUSH
9811: LD_VAR 0 2
9815: PUSH
9816: LD_INT 1
9818: PPUSH
9819: LD_VAR 0 2
9823: PPUSH
9824: CALL_OW 12
9828: ARRAY
9829: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
9830: CALL_OW 44
9834: PPUSH
9835: LD_VAR 0 2
9839: PPUSH
9840: CALL_OW 250
9844: PPUSH
9845: LD_VAR 0 2
9849: PPUSH
9850: CALL_OW 251
9854: PPUSH
9855: LD_INT 7
9857: PPUSH
9858: LD_INT 1
9860: PPUSH
9861: CALL_OW 50
// end else
9865: GO 9868
// enable ;
9867: ENABLE
// end else
9868: GO 9871
// enable ;
9870: ENABLE
// end ; end_of_file
9871: PPOPN 3
9873: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
9874: LD_INT 0
9876: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
9877: LD_VAR 0 1
9881: PPUSH
9882: CALL_OW 255
9886: PUSH
9887: LD_VAR 0 4
9891: EQUAL
9892: IFFALSE 9911
// begin SetAchievement ( ACH_RAD ) ;
9894: LD_STRING ACH_RAD
9896: PPUSH
9897: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
9901: LD_STRING ACH_NL
9903: PPUSH
9904: LD_INT 1
9906: PPUSH
9907: CALL_OW 564
// end end ;
9911: LD_VAR 0 5
9915: RET
// export function SA_Win ( side ) ; begin
9916: LD_INT 0
9918: PPUSH
// case side of 1 :
9919: LD_VAR 0 1
9923: PUSH
9924: LD_INT 1
9926: DOUBLE
9927: EQUAL
9928: IFTRUE 9932
9930: GO 9945
9932: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
9933: LD_STRING ACH_AH
9935: PPUSH
9936: LD_INT 1
9938: PPUSH
9939: CALL_OW 564
9943: GO 10108
9945: LD_INT 2
9947: DOUBLE
9948: EQUAL
9949: IFTRUE 9953
9951: GO 9966
9953: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
9954: LD_STRING ACH_E
9956: PPUSH
9957: LD_INT 1
9959: PPUSH
9960: CALL_OW 564
9964: GO 10108
9966: LD_INT 3
9968: DOUBLE
9969: EQUAL
9970: IFTRUE 9974
9972: GO 9987
9974: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
9975: LD_STRING ACH_OOL
9977: PPUSH
9978: LD_INT 1
9980: PPUSH
9981: CALL_OW 564
9985: GO 10108
9987: LD_INT 1
9989: PUSH
9990: LD_INT 2
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: DOUBLE
9997: EQUAL
9998: IFTRUE 10002
10000: GO 10027
10002: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10003: LD_STRING ACH_AH
10005: PPUSH
10006: LD_REAL  5.00000000000000E-0001
10009: PPUSH
10010: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10014: LD_STRING ACH_E
10016: PPUSH
10017: LD_REAL  5.00000000000000E-0001
10020: PPUSH
10021: CALL_OW 564
// end ; [ 2 , 3 ] :
10025: GO 10108
10027: LD_INT 2
10029: PUSH
10030: LD_INT 3
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: DOUBLE
10037: EQUAL
10038: IFTRUE 10042
10040: GO 10067
10042: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
10043: LD_STRING ACH_OOL
10045: PPUSH
10046: LD_REAL  5.00000000000000E-0001
10049: PPUSH
10050: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10054: LD_STRING ACH_E
10056: PPUSH
10057: LD_REAL  5.00000000000000E-0001
10060: PPUSH
10061: CALL_OW 564
// end ; [ 3 , 1 ] :
10065: GO 10108
10067: LD_INT 3
10069: PUSH
10070: LD_INT 1
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: DOUBLE
10077: EQUAL
10078: IFTRUE 10082
10080: GO 10107
10082: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10083: LD_STRING ACH_AH
10085: PPUSH
10086: LD_REAL  5.00000000000000E-0001
10089: PPUSH
10090: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
10094: LD_STRING ACH_OOL
10096: PPUSH
10097: LD_REAL  5.00000000000000E-0001
10100: PPUSH
10101: CALL_OW 564
// end ; end ;
10105: GO 10108
10107: POP
// end ; end_of_file
10108: LD_VAR 0 2
10112: RET
// export function SetMpTechs ( ) ; var side , i ; begin
10113: LD_INT 0
10115: PPUSH
10116: PPUSH
10117: PPUSH
// for side = 1 to 8 do
10118: LD_ADDR_VAR 0 2
10122: PUSH
10123: DOUBLE
10124: LD_INT 1
10126: DEC
10127: ST_TO_ADDR
10128: LD_INT 8
10130: PUSH
10131: FOR_TO
10132: IFFALSE 10253
// begin for i = 1 to 72 do
10134: LD_ADDR_VAR 0 3
10138: PUSH
10139: DOUBLE
10140: LD_INT 1
10142: DEC
10143: ST_TO_ADDR
10144: LD_INT 72
10146: PUSH
10147: FOR_TO
10148: IFFALSE 10179
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
10150: LD_VAR 0 3
10154: PPUSH
10155: LD_VAR 0 2
10159: PPUSH
10160: LD_INT 0
10162: PPUSH
10163: LD_VAR 0 3
10167: PPUSH
10168: CALL_OW 565
10172: PPUSH
10173: CALL_OW 322
10177: GO 10147
10179: POP
10180: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
10181: LD_INT 73
10183: PPUSH
10184: LD_VAR 0 2
10188: PPUSH
10189: LD_INT 0
10191: PPUSH
10192: LD_INT 25
10194: PPUSH
10195: CALL_OW 565
10199: PPUSH
10200: CALL_OW 322
// for i = 0 to 40 do
10204: LD_ADDR_VAR 0 3
10208: PUSH
10209: DOUBLE
10210: LD_INT 0
10212: DEC
10213: ST_TO_ADDR
10214: LD_INT 40
10216: PUSH
10217: FOR_TO
10218: IFFALSE 10249
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
10220: LD_VAR 0 3
10224: PPUSH
10225: LD_VAR 0 2
10229: PPUSH
10230: LD_INT 1
10232: PPUSH
10233: LD_VAR 0 3
10237: PPUSH
10238: CALL_OW 565
10242: PPUSH
10243: CALL_OW 324
10247: GO 10217
10249: POP
10250: POP
// end ;
10251: GO 10131
10253: POP
10254: POP
// end ;
10255: LD_VAR 0 1
10259: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
10260: LD_INT 0
10262: PPUSH
10263: PPUSH
10264: PPUSH
// for side = 1 to 8 do
10265: LD_ADDR_VAR 0 3
10269: PUSH
10270: DOUBLE
10271: LD_INT 1
10273: DEC
10274: ST_TO_ADDR
10275: LD_INT 8
10277: PUSH
10278: FOR_TO
10279: IFFALSE 14275
// begin for i = 1 to 73 do
10281: LD_ADDR_VAR 0 4
10285: PUSH
10286: DOUBLE
10287: LD_INT 1
10289: DEC
10290: ST_TO_ADDR
10291: LD_INT 73
10293: PUSH
10294: FOR_TO
10295: IFFALSE 10316
// SetTech ( i , side , state_disabled ) ;
10297: LD_VAR 0 4
10301: PPUSH
10302: LD_VAR 0 3
10306: PPUSH
10307: LD_INT 0
10309: PPUSH
10310: CALL_OW 322
10314: GO 10294
10316: POP
10317: POP
// for i = 0 to 40 do
10318: LD_ADDR_VAR 0 4
10322: PUSH
10323: DOUBLE
10324: LD_INT 0
10326: DEC
10327: ST_TO_ADDR
10328: LD_INT 40
10330: PUSH
10331: FOR_TO
10332: IFFALSE 10353
// SetRestrict ( i , side , false ) ;
10334: LD_VAR 0 4
10338: PPUSH
10339: LD_VAR 0 3
10343: PPUSH
10344: LD_INT 0
10346: PPUSH
10347: CALL_OW 324
10351: GO 10331
10353: POP
10354: POP
// case level of 1 :
10355: LD_VAR 0 1
10359: PUSH
10360: LD_INT 1
10362: DOUBLE
10363: EQUAL
10364: IFTRUE 10368
10366: GO 10521
10368: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10369: LD_INT 35
10371: PPUSH
10372: LD_VAR 0 3
10376: PPUSH
10377: LD_INT 1
10379: PPUSH
10380: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10384: LD_INT 45
10386: PPUSH
10387: LD_VAR 0 3
10391: PPUSH
10392: LD_INT 1
10394: PPUSH
10395: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10399: LD_INT 46
10401: PPUSH
10402: LD_VAR 0 3
10406: PPUSH
10407: LD_INT 1
10409: PPUSH
10410: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10414: LD_INT 47
10416: PPUSH
10417: LD_VAR 0 3
10421: PPUSH
10422: LD_INT 1
10424: PPUSH
10425: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10429: LD_INT 0
10431: PPUSH
10432: LD_VAR 0 3
10436: PPUSH
10437: LD_INT 1
10439: PPUSH
10440: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10444: LD_INT 2
10446: PPUSH
10447: LD_VAR 0 3
10451: PPUSH
10452: LD_INT 1
10454: PPUSH
10455: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10459: LD_INT 4
10461: PPUSH
10462: LD_VAR 0 3
10466: PPUSH
10467: LD_INT 1
10469: PPUSH
10470: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10474: LD_INT 6
10476: PPUSH
10477: LD_VAR 0 3
10481: PPUSH
10482: LD_INT 1
10484: PPUSH
10485: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10489: LD_INT 29
10491: PPUSH
10492: LD_VAR 0 3
10496: PPUSH
10497: LD_INT 1
10499: PPUSH
10500: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10504: LD_INT 31
10506: PPUSH
10507: LD_VAR 0 3
10511: PPUSH
10512: LD_INT 1
10514: PPUSH
10515: CALL_OW 324
// end ; 2 :
10519: GO 14273
10521: LD_INT 2
10523: DOUBLE
10524: EQUAL
10525: IFTRUE 10529
10527: GO 10727
10529: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10530: LD_INT 35
10532: PPUSH
10533: LD_VAR 0 3
10537: PPUSH
10538: LD_INT 1
10540: PPUSH
10541: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10545: LD_INT 45
10547: PPUSH
10548: LD_VAR 0 3
10552: PPUSH
10553: LD_INT 1
10555: PPUSH
10556: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10560: LD_INT 46
10562: PPUSH
10563: LD_VAR 0 3
10567: PPUSH
10568: LD_INT 1
10570: PPUSH
10571: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10575: LD_INT 47
10577: PPUSH
10578: LD_VAR 0 3
10582: PPUSH
10583: LD_INT 1
10585: PPUSH
10586: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10590: LD_INT 1
10592: PPUSH
10593: LD_VAR 0 3
10597: PPUSH
10598: LD_INT 1
10600: PPUSH
10601: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10605: LD_INT 2
10607: PPUSH
10608: LD_VAR 0 3
10612: PPUSH
10613: LD_INT 1
10615: PPUSH
10616: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10620: LD_INT 11
10622: PPUSH
10623: LD_VAR 0 3
10627: PPUSH
10628: LD_INT 1
10630: PPUSH
10631: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10635: LD_INT 0
10637: PPUSH
10638: LD_VAR 0 3
10642: PPUSH
10643: LD_INT 1
10645: PPUSH
10646: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10650: LD_INT 2
10652: PPUSH
10653: LD_VAR 0 3
10657: PPUSH
10658: LD_INT 1
10660: PPUSH
10661: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10665: LD_INT 4
10667: PPUSH
10668: LD_VAR 0 3
10672: PPUSH
10673: LD_INT 1
10675: PPUSH
10676: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10680: LD_INT 6
10682: PPUSH
10683: LD_VAR 0 3
10687: PPUSH
10688: LD_INT 1
10690: PPUSH
10691: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10695: LD_INT 29
10697: PPUSH
10698: LD_VAR 0 3
10702: PPUSH
10703: LD_INT 1
10705: PPUSH
10706: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10710: LD_INT 31
10712: PPUSH
10713: LD_VAR 0 3
10717: PPUSH
10718: LD_INT 1
10720: PPUSH
10721: CALL_OW 324
// end ; 3 :
10725: GO 14273
10727: LD_INT 3
10729: DOUBLE
10730: EQUAL
10731: IFTRUE 10735
10733: GO 11188
10735: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10736: LD_INT 35
10738: PPUSH
10739: LD_VAR 0 3
10743: PPUSH
10744: LD_INT 1
10746: PPUSH
10747: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10751: LD_INT 45
10753: PPUSH
10754: LD_VAR 0 3
10758: PPUSH
10759: LD_INT 1
10761: PPUSH
10762: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10766: LD_INT 46
10768: PPUSH
10769: LD_VAR 0 3
10773: PPUSH
10774: LD_INT 1
10776: PPUSH
10777: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10781: LD_INT 47
10783: PPUSH
10784: LD_VAR 0 3
10788: PPUSH
10789: LD_INT 1
10791: PPUSH
10792: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10796: LD_INT 1
10798: PPUSH
10799: LD_VAR 0 3
10803: PPUSH
10804: LD_INT 1
10806: PPUSH
10807: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10811: LD_INT 2
10813: PPUSH
10814: LD_VAR 0 3
10818: PPUSH
10819: LD_INT 1
10821: PPUSH
10822: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10826: LD_INT 11
10828: PPUSH
10829: LD_VAR 0 3
10833: PPUSH
10834: LD_INT 1
10836: PPUSH
10837: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10841: LD_INT 48
10843: PPUSH
10844: LD_VAR 0 3
10848: PPUSH
10849: LD_INT 1
10851: PPUSH
10852: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10856: LD_INT 69
10858: PPUSH
10859: LD_VAR 0 3
10863: PPUSH
10864: LD_INT 1
10866: PPUSH
10867: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10871: LD_INT 39
10873: PPUSH
10874: LD_VAR 0 3
10878: PPUSH
10879: LD_INT 1
10881: PPUSH
10882: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10886: LD_INT 43
10888: PPUSH
10889: LD_VAR 0 3
10893: PPUSH
10894: LD_INT 1
10896: PPUSH
10897: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10901: LD_INT 51
10903: PPUSH
10904: LD_VAR 0 3
10908: PPUSH
10909: LD_INT 1
10911: PPUSH
10912: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10916: LD_INT 6
10918: PPUSH
10919: LD_VAR 0 3
10923: PPUSH
10924: LD_INT 1
10926: PPUSH
10927: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10931: LD_INT 0
10933: PPUSH
10934: LD_VAR 0 3
10938: PPUSH
10939: LD_INT 1
10941: PPUSH
10942: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10946: LD_INT 2
10948: PPUSH
10949: LD_VAR 0 3
10953: PPUSH
10954: LD_INT 1
10956: PPUSH
10957: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10961: LD_INT 3
10963: PPUSH
10964: LD_VAR 0 3
10968: PPUSH
10969: LD_INT 1
10971: PPUSH
10972: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10976: LD_INT 4
10978: PPUSH
10979: LD_VAR 0 3
10983: PPUSH
10984: LD_INT 1
10986: PPUSH
10987: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10991: LD_INT 6
10993: PPUSH
10994: LD_VAR 0 3
10998: PPUSH
10999: LD_INT 1
11001: PPUSH
11002: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11006: LD_INT 7
11008: PPUSH
11009: LD_VAR 0 3
11013: PPUSH
11014: LD_INT 1
11016: PPUSH
11017: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11021: LD_INT 8
11023: PPUSH
11024: LD_VAR 0 3
11028: PPUSH
11029: LD_INT 1
11031: PPUSH
11032: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11036: LD_INT 10
11038: PPUSH
11039: LD_VAR 0 3
11043: PPUSH
11044: LD_INT 1
11046: PPUSH
11047: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11051: LD_INT 15
11053: PPUSH
11054: LD_VAR 0 3
11058: PPUSH
11059: LD_INT 1
11061: PPUSH
11062: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11066: LD_INT 16
11068: PPUSH
11069: LD_VAR 0 3
11073: PPUSH
11074: LD_INT 1
11076: PPUSH
11077: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11081: LD_INT 17
11083: PPUSH
11084: LD_VAR 0 3
11088: PPUSH
11089: LD_INT 1
11091: PPUSH
11092: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11096: LD_INT 20
11098: PPUSH
11099: LD_VAR 0 3
11103: PPUSH
11104: LD_INT 1
11106: PPUSH
11107: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11111: LD_INT 26
11113: PPUSH
11114: LD_VAR 0 3
11118: PPUSH
11119: LD_INT 1
11121: PPUSH
11122: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11126: LD_INT 27
11128: PPUSH
11129: LD_VAR 0 3
11133: PPUSH
11134: LD_INT 1
11136: PPUSH
11137: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11141: LD_INT 29
11143: PPUSH
11144: LD_VAR 0 3
11148: PPUSH
11149: LD_INT 1
11151: PPUSH
11152: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11156: LD_INT 31
11158: PPUSH
11159: LD_VAR 0 3
11163: PPUSH
11164: LD_INT 1
11166: PPUSH
11167: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11171: LD_INT 32
11173: PPUSH
11174: LD_VAR 0 3
11178: PPUSH
11179: LD_INT 1
11181: PPUSH
11182: CALL_OW 324
// end ; 4 :
11186: GO 14273
11188: LD_INT 4
11190: DOUBLE
11191: EQUAL
11192: IFTRUE 11196
11194: GO 12144
11196: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11197: LD_INT 35
11199: PPUSH
11200: LD_VAR 0 3
11204: PPUSH
11205: LD_INT 1
11207: PPUSH
11208: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11212: LD_INT 45
11214: PPUSH
11215: LD_VAR 0 3
11219: PPUSH
11220: LD_INT 1
11222: PPUSH
11223: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11227: LD_INT 46
11229: PPUSH
11230: LD_VAR 0 3
11234: PPUSH
11235: LD_INT 1
11237: PPUSH
11238: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11242: LD_INT 47
11244: PPUSH
11245: LD_VAR 0 3
11249: PPUSH
11250: LD_INT 1
11252: PPUSH
11253: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11257: LD_INT 1
11259: PPUSH
11260: LD_VAR 0 3
11264: PPUSH
11265: LD_INT 1
11267: PPUSH
11268: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11272: LD_INT 2
11274: PPUSH
11275: LD_VAR 0 3
11279: PPUSH
11280: LD_INT 1
11282: PPUSH
11283: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11287: LD_INT 11
11289: PPUSH
11290: LD_VAR 0 3
11294: PPUSH
11295: LD_INT 1
11297: PPUSH
11298: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11302: LD_INT 20
11304: PPUSH
11305: LD_VAR 0 3
11309: PPUSH
11310: LD_INT 1
11312: PPUSH
11313: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11317: LD_INT 48
11319: PPUSH
11320: LD_VAR 0 3
11324: PPUSH
11325: LD_INT 1
11327: PPUSH
11328: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11332: LD_INT 49
11334: PPUSH
11335: LD_VAR 0 3
11339: PPUSH
11340: LD_INT 1
11342: PPUSH
11343: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11347: LD_INT 69
11349: PPUSH
11350: LD_VAR 0 3
11354: PPUSH
11355: LD_INT 1
11357: PPUSH
11358: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11362: LD_INT 39
11364: PPUSH
11365: LD_VAR 0 3
11369: PPUSH
11370: LD_INT 1
11372: PPUSH
11373: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11377: LD_INT 34
11379: PPUSH
11380: LD_VAR 0 3
11384: PPUSH
11385: LD_INT 1
11387: PPUSH
11388: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11392: LD_INT 42
11394: PPUSH
11395: LD_VAR 0 3
11399: PPUSH
11400: LD_INT 1
11402: PPUSH
11403: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11407: LD_INT 44
11409: PPUSH
11410: LD_VAR 0 3
11414: PPUSH
11415: LD_INT 1
11417: PPUSH
11418: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11422: LD_INT 41
11424: PPUSH
11425: LD_VAR 0 3
11429: PPUSH
11430: LD_INT 1
11432: PPUSH
11433: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11437: LD_INT 43
11439: PPUSH
11440: LD_VAR 0 3
11444: PPUSH
11445: LD_INT 1
11447: PPUSH
11448: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11452: LD_INT 70
11454: PPUSH
11455: LD_VAR 0 3
11459: PPUSH
11460: LD_INT 1
11462: PPUSH
11463: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11467: LD_INT 51
11469: PPUSH
11470: LD_VAR 0 3
11474: PPUSH
11475: LD_INT 1
11477: PPUSH
11478: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11482: LD_INT 52
11484: PPUSH
11485: LD_VAR 0 3
11489: PPUSH
11490: LD_INT 1
11492: PPUSH
11493: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11497: LD_INT 6
11499: PPUSH
11500: LD_VAR 0 3
11504: PPUSH
11505: LD_INT 1
11507: PPUSH
11508: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11512: LD_INT 15
11514: PPUSH
11515: LD_VAR 0 3
11519: PPUSH
11520: LD_INT 1
11522: PPUSH
11523: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11527: LD_INT 7
11529: PPUSH
11530: LD_VAR 0 3
11534: PPUSH
11535: LD_INT 1
11537: PPUSH
11538: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11542: LD_INT 12
11544: PPUSH
11545: LD_VAR 0 3
11549: PPUSH
11550: LD_INT 1
11552: PPUSH
11553: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11557: LD_INT 18
11559: PPUSH
11560: LD_VAR 0 3
11564: PPUSH
11565: LD_INT 1
11567: PPUSH
11568: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11572: LD_INT 60
11574: PPUSH
11575: LD_VAR 0 3
11579: PPUSH
11580: LD_INT 1
11582: PPUSH
11583: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11587: LD_INT 9
11589: PPUSH
11590: LD_VAR 0 3
11594: PPUSH
11595: LD_INT 1
11597: PPUSH
11598: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11602: LD_INT 30
11604: PPUSH
11605: LD_VAR 0 3
11609: PPUSH
11610: LD_INT 1
11612: PPUSH
11613: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11617: LD_INT 37
11619: PPUSH
11620: LD_VAR 0 3
11624: PPUSH
11625: LD_INT 1
11627: PPUSH
11628: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11632: LD_INT 5
11634: PPUSH
11635: LD_VAR 0 3
11639: PPUSH
11640: LD_INT 1
11642: PPUSH
11643: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11647: LD_INT 66
11649: PPUSH
11650: LD_VAR 0 3
11654: PPUSH
11655: LD_INT 1
11657: PPUSH
11658: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11662: LD_INT 21
11664: PPUSH
11665: LD_VAR 0 3
11669: PPUSH
11670: LD_INT 1
11672: PPUSH
11673: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11677: LD_INT 22
11679: PPUSH
11680: LD_VAR 0 3
11684: PPUSH
11685: LD_INT 1
11687: PPUSH
11688: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11692: LD_INT 54
11694: PPUSH
11695: LD_VAR 0 3
11699: PPUSH
11700: LD_INT 1
11702: PPUSH
11703: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11707: LD_INT 0
11709: PPUSH
11710: LD_VAR 0 3
11714: PPUSH
11715: LD_INT 1
11717: PPUSH
11718: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11722: LD_INT 1
11724: PPUSH
11725: LD_VAR 0 3
11729: PPUSH
11730: LD_INT 1
11732: PPUSH
11733: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11737: LD_INT 2
11739: PPUSH
11740: LD_VAR 0 3
11744: PPUSH
11745: LD_INT 1
11747: PPUSH
11748: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11752: LD_INT 3
11754: PPUSH
11755: LD_VAR 0 3
11759: PPUSH
11760: LD_INT 1
11762: PPUSH
11763: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11767: LD_INT 4
11769: PPUSH
11770: LD_VAR 0 3
11774: PPUSH
11775: LD_INT 1
11777: PPUSH
11778: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11782: LD_INT 5
11784: PPUSH
11785: LD_VAR 0 3
11789: PPUSH
11790: LD_INT 1
11792: PPUSH
11793: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11797: LD_INT 6
11799: PPUSH
11800: LD_VAR 0 3
11804: PPUSH
11805: LD_INT 1
11807: PPUSH
11808: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11812: LD_INT 7
11814: PPUSH
11815: LD_VAR 0 3
11819: PPUSH
11820: LD_INT 1
11822: PPUSH
11823: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11827: LD_INT 8
11829: PPUSH
11830: LD_VAR 0 3
11834: PPUSH
11835: LD_INT 1
11837: PPUSH
11838: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11842: LD_INT 10
11844: PPUSH
11845: LD_VAR 0 3
11849: PPUSH
11850: LD_INT 1
11852: PPUSH
11853: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11857: LD_INT 11
11859: PPUSH
11860: LD_VAR 0 3
11864: PPUSH
11865: LD_INT 1
11867: PPUSH
11868: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11872: LD_INT 12
11874: PPUSH
11875: LD_VAR 0 3
11879: PPUSH
11880: LD_INT 1
11882: PPUSH
11883: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11887: LD_INT 13
11889: PPUSH
11890: LD_VAR 0 3
11894: PPUSH
11895: LD_INT 1
11897: PPUSH
11898: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11902: LD_INT 14
11904: PPUSH
11905: LD_VAR 0 3
11909: PPUSH
11910: LD_INT 1
11912: PPUSH
11913: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11917: LD_INT 15
11919: PPUSH
11920: LD_VAR 0 3
11924: PPUSH
11925: LD_INT 1
11927: PPUSH
11928: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11932: LD_INT 16
11934: PPUSH
11935: LD_VAR 0 3
11939: PPUSH
11940: LD_INT 1
11942: PPUSH
11943: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11947: LD_INT 17
11949: PPUSH
11950: LD_VAR 0 3
11954: PPUSH
11955: LD_INT 1
11957: PPUSH
11958: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11962: LD_INT 19
11964: PPUSH
11965: LD_VAR 0 3
11969: PPUSH
11970: LD_INT 1
11972: PPUSH
11973: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11977: LD_INT 20
11979: PPUSH
11980: LD_VAR 0 3
11984: PPUSH
11985: LD_INT 1
11987: PPUSH
11988: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11992: LD_INT 21
11994: PPUSH
11995: LD_VAR 0 3
11999: PPUSH
12000: LD_INT 1
12002: PPUSH
12003: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12007: LD_INT 23
12009: PPUSH
12010: LD_VAR 0 3
12014: PPUSH
12015: LD_INT 1
12017: PPUSH
12018: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12022: LD_INT 26
12024: PPUSH
12025: LD_VAR 0 3
12029: PPUSH
12030: LD_INT 1
12032: PPUSH
12033: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12037: LD_INT 27
12039: PPUSH
12040: LD_VAR 0 3
12044: PPUSH
12045: LD_INT 1
12047: PPUSH
12048: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12052: LD_INT 28
12054: PPUSH
12055: LD_VAR 0 3
12059: PPUSH
12060: LD_INT 1
12062: PPUSH
12063: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12067: LD_INT 29
12069: PPUSH
12070: LD_VAR 0 3
12074: PPUSH
12075: LD_INT 1
12077: PPUSH
12078: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12082: LD_INT 30
12084: PPUSH
12085: LD_VAR 0 3
12089: PPUSH
12090: LD_INT 1
12092: PPUSH
12093: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12097: LD_INT 31
12099: PPUSH
12100: LD_VAR 0 3
12104: PPUSH
12105: LD_INT 1
12107: PPUSH
12108: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12112: LD_INT 32
12114: PPUSH
12115: LD_VAR 0 3
12119: PPUSH
12120: LD_INT 1
12122: PPUSH
12123: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12127: LD_INT 36
12129: PPUSH
12130: LD_VAR 0 3
12134: PPUSH
12135: LD_INT 1
12137: PPUSH
12138: CALL_OW 324
// end ; 5 :
12142: GO 14273
12144: LD_INT 5
12146: DOUBLE
12147: EQUAL
12148: IFTRUE 12152
12150: GO 13265
12152: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12153: LD_INT 35
12155: PPUSH
12156: LD_VAR 0 3
12160: PPUSH
12161: LD_INT 1
12163: PPUSH
12164: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12168: LD_INT 45
12170: PPUSH
12171: LD_VAR 0 3
12175: PPUSH
12176: LD_INT 1
12178: PPUSH
12179: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12183: LD_INT 46
12185: PPUSH
12186: LD_VAR 0 3
12190: PPUSH
12191: LD_INT 1
12193: PPUSH
12194: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12198: LD_INT 47
12200: PPUSH
12201: LD_VAR 0 3
12205: PPUSH
12206: LD_INT 1
12208: PPUSH
12209: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12213: LD_INT 1
12215: PPUSH
12216: LD_VAR 0 3
12220: PPUSH
12221: LD_INT 1
12223: PPUSH
12224: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12228: LD_INT 2
12230: PPUSH
12231: LD_VAR 0 3
12235: PPUSH
12236: LD_INT 1
12238: PPUSH
12239: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12243: LD_INT 11
12245: PPUSH
12246: LD_VAR 0 3
12250: PPUSH
12251: LD_INT 1
12253: PPUSH
12254: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12258: LD_INT 20
12260: PPUSH
12261: LD_VAR 0 3
12265: PPUSH
12266: LD_INT 1
12268: PPUSH
12269: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12273: LD_INT 48
12275: PPUSH
12276: LD_VAR 0 3
12280: PPUSH
12281: LD_INT 1
12283: PPUSH
12284: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12288: LD_INT 49
12290: PPUSH
12291: LD_VAR 0 3
12295: PPUSH
12296: LD_INT 1
12298: PPUSH
12299: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12303: LD_INT 69
12305: PPUSH
12306: LD_VAR 0 3
12310: PPUSH
12311: LD_INT 1
12313: PPUSH
12314: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12318: LD_INT 39
12320: PPUSH
12321: LD_VAR 0 3
12325: PPUSH
12326: LD_INT 1
12328: PPUSH
12329: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12333: LD_INT 34
12335: PPUSH
12336: LD_VAR 0 3
12340: PPUSH
12341: LD_INT 1
12343: PPUSH
12344: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12348: LD_INT 42
12350: PPUSH
12351: LD_VAR 0 3
12355: PPUSH
12356: LD_INT 1
12358: PPUSH
12359: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12363: LD_INT 44
12365: PPUSH
12366: LD_VAR 0 3
12370: PPUSH
12371: LD_INT 1
12373: PPUSH
12374: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12378: LD_INT 41
12380: PPUSH
12381: LD_VAR 0 3
12385: PPUSH
12386: LD_INT 1
12388: PPUSH
12389: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12393: LD_INT 40
12395: PPUSH
12396: LD_VAR 0 3
12400: PPUSH
12401: LD_INT 1
12403: PPUSH
12404: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12408: LD_INT 43
12410: PPUSH
12411: LD_VAR 0 3
12415: PPUSH
12416: LD_INT 1
12418: PPUSH
12419: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12423: LD_INT 70
12425: PPUSH
12426: LD_VAR 0 3
12430: PPUSH
12431: LD_INT 1
12433: PPUSH
12434: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12438: LD_INT 51
12440: PPUSH
12441: LD_VAR 0 3
12445: PPUSH
12446: LD_INT 1
12448: PPUSH
12449: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12453: LD_INT 52
12455: PPUSH
12456: LD_VAR 0 3
12460: PPUSH
12461: LD_INT 1
12463: PPUSH
12464: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12468: LD_INT 6
12470: PPUSH
12471: LD_VAR 0 3
12475: PPUSH
12476: LD_INT 1
12478: PPUSH
12479: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12483: LD_INT 15
12485: PPUSH
12486: LD_VAR 0 3
12490: PPUSH
12491: LD_INT 1
12493: PPUSH
12494: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12498: LD_INT 7
12500: PPUSH
12501: LD_VAR 0 3
12505: PPUSH
12506: LD_INT 1
12508: PPUSH
12509: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12513: LD_INT 12
12515: PPUSH
12516: LD_VAR 0 3
12520: PPUSH
12521: LD_INT 1
12523: PPUSH
12524: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12528: LD_INT 17
12530: PPUSH
12531: LD_VAR 0 3
12535: PPUSH
12536: LD_INT 1
12538: PPUSH
12539: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12543: LD_INT 18
12545: PPUSH
12546: LD_VAR 0 3
12550: PPUSH
12551: LD_INT 1
12553: PPUSH
12554: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12558: LD_INT 60
12560: PPUSH
12561: LD_VAR 0 3
12565: PPUSH
12566: LD_INT 1
12568: PPUSH
12569: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12573: LD_INT 32
12575: PPUSH
12576: LD_VAR 0 3
12580: PPUSH
12581: LD_INT 1
12583: PPUSH
12584: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12588: LD_INT 9
12590: PPUSH
12591: LD_VAR 0 3
12595: PPUSH
12596: LD_INT 1
12598: PPUSH
12599: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12603: LD_INT 57
12605: PPUSH
12606: LD_VAR 0 3
12610: PPUSH
12611: LD_INT 1
12613: PPUSH
12614: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12618: LD_INT 30
12620: PPUSH
12621: LD_VAR 0 3
12625: PPUSH
12626: LD_INT 1
12628: PPUSH
12629: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12633: LD_INT 37
12635: PPUSH
12636: LD_VAR 0 3
12640: PPUSH
12641: LD_INT 1
12643: PPUSH
12644: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12648: LD_INT 63
12650: PPUSH
12651: LD_VAR 0 3
12655: PPUSH
12656: LD_INT 1
12658: PPUSH
12659: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12663: LD_INT 3
12665: PPUSH
12666: LD_VAR 0 3
12670: PPUSH
12671: LD_INT 1
12673: PPUSH
12674: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12678: LD_INT 4
12680: PPUSH
12681: LD_VAR 0 3
12685: PPUSH
12686: LD_INT 1
12688: PPUSH
12689: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12693: LD_INT 5
12695: PPUSH
12696: LD_VAR 0 3
12700: PPUSH
12701: LD_INT 1
12703: PPUSH
12704: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12708: LD_INT 66
12710: PPUSH
12711: LD_VAR 0 3
12715: PPUSH
12716: LD_INT 1
12718: PPUSH
12719: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12723: LD_INT 21
12725: PPUSH
12726: LD_VAR 0 3
12730: PPUSH
12731: LD_INT 1
12733: PPUSH
12734: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12738: LD_INT 22
12740: PPUSH
12741: LD_VAR 0 3
12745: PPUSH
12746: LD_INT 1
12748: PPUSH
12749: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12753: LD_INT 19
12755: PPUSH
12756: LD_VAR 0 3
12760: PPUSH
12761: LD_INT 1
12763: PPUSH
12764: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12768: LD_INT 54
12770: PPUSH
12771: LD_VAR 0 3
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12783: LD_INT 55
12785: PPUSH
12786: LD_VAR 0 3
12790: PPUSH
12791: LD_INT 1
12793: PPUSH
12794: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12798: LD_INT 0
12800: PPUSH
12801: LD_VAR 0 3
12805: PPUSH
12806: LD_INT 1
12808: PPUSH
12809: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12813: LD_INT 1
12815: PPUSH
12816: LD_VAR 0 3
12820: PPUSH
12821: LD_INT 1
12823: PPUSH
12824: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12828: LD_INT 2
12830: PPUSH
12831: LD_VAR 0 3
12835: PPUSH
12836: LD_INT 1
12838: PPUSH
12839: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12843: LD_INT 3
12845: PPUSH
12846: LD_VAR 0 3
12850: PPUSH
12851: LD_INT 1
12853: PPUSH
12854: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12858: LD_INT 4
12860: PPUSH
12861: LD_VAR 0 3
12865: PPUSH
12866: LD_INT 1
12868: PPUSH
12869: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12873: LD_INT 5
12875: PPUSH
12876: LD_VAR 0 3
12880: PPUSH
12881: LD_INT 1
12883: PPUSH
12884: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12888: LD_INT 6
12890: PPUSH
12891: LD_VAR 0 3
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12903: LD_INT 7
12905: PPUSH
12906: LD_VAR 0 3
12910: PPUSH
12911: LD_INT 1
12913: PPUSH
12914: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12918: LD_INT 8
12920: PPUSH
12921: LD_VAR 0 3
12925: PPUSH
12926: LD_INT 1
12928: PPUSH
12929: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12933: LD_INT 10
12935: PPUSH
12936: LD_VAR 0 3
12940: PPUSH
12941: LD_INT 1
12943: PPUSH
12944: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12948: LD_INT 11
12950: PPUSH
12951: LD_VAR 0 3
12955: PPUSH
12956: LD_INT 1
12958: PPUSH
12959: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12963: LD_INT 12
12965: PPUSH
12966: LD_VAR 0 3
12970: PPUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12978: LD_INT 13
12980: PPUSH
12981: LD_VAR 0 3
12985: PPUSH
12986: LD_INT 1
12988: PPUSH
12989: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12993: LD_INT 14
12995: PPUSH
12996: LD_VAR 0 3
13000: PPUSH
13001: LD_INT 1
13003: PPUSH
13004: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13008: LD_INT 15
13010: PPUSH
13011: LD_VAR 0 3
13015: PPUSH
13016: LD_INT 1
13018: PPUSH
13019: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13023: LD_INT 16
13025: PPUSH
13026: LD_VAR 0 3
13030: PPUSH
13031: LD_INT 1
13033: PPUSH
13034: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13038: LD_INT 17
13040: PPUSH
13041: LD_VAR 0 3
13045: PPUSH
13046: LD_INT 1
13048: PPUSH
13049: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
13053: LD_INT 18
13055: PPUSH
13056: LD_VAR 0 3
13060: PPUSH
13061: LD_INT 1
13063: PPUSH
13064: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13068: LD_INT 19
13070: PPUSH
13071: LD_VAR 0 3
13075: PPUSH
13076: LD_INT 1
13078: PPUSH
13079: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13083: LD_INT 20
13085: PPUSH
13086: LD_VAR 0 3
13090: PPUSH
13091: LD_INT 1
13093: PPUSH
13094: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13098: LD_INT 21
13100: PPUSH
13101: LD_VAR 0 3
13105: PPUSH
13106: LD_INT 1
13108: PPUSH
13109: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13113: LD_INT 23
13115: PPUSH
13116: LD_VAR 0 3
13120: PPUSH
13121: LD_INT 1
13123: PPUSH
13124: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13128: LD_INT 26
13130: PPUSH
13131: LD_VAR 0 3
13135: PPUSH
13136: LD_INT 1
13138: PPUSH
13139: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13143: LD_INT 27
13145: PPUSH
13146: LD_VAR 0 3
13150: PPUSH
13151: LD_INT 1
13153: PPUSH
13154: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13158: LD_INT 28
13160: PPUSH
13161: LD_VAR 0 3
13165: PPUSH
13166: LD_INT 1
13168: PPUSH
13169: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13173: LD_INT 29
13175: PPUSH
13176: LD_VAR 0 3
13180: PPUSH
13181: LD_INT 1
13183: PPUSH
13184: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13188: LD_INT 30
13190: PPUSH
13191: LD_VAR 0 3
13195: PPUSH
13196: LD_INT 1
13198: PPUSH
13199: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13203: LD_INT 31
13205: PPUSH
13206: LD_VAR 0 3
13210: PPUSH
13211: LD_INT 1
13213: PPUSH
13214: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13218: LD_INT 32
13220: PPUSH
13221: LD_VAR 0 3
13225: PPUSH
13226: LD_INT 1
13228: PPUSH
13229: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
13233: LD_INT 33
13235: PPUSH
13236: LD_VAR 0 3
13240: PPUSH
13241: LD_INT 1
13243: PPUSH
13244: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13248: LD_INT 36
13250: PPUSH
13251: LD_VAR 0 3
13255: PPUSH
13256: LD_INT 1
13258: PPUSH
13259: CALL_OW 324
// end ; 6 :
13263: GO 14273
13265: LD_INT 6
13267: DOUBLE
13268: EQUAL
13269: IFTRUE 13273
13271: GO 14198
13273: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13274: LD_INT 35
13276: PPUSH
13277: LD_VAR 0 3
13281: PPUSH
13282: LD_INT 1
13284: PPUSH
13285: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13289: LD_INT 45
13291: PPUSH
13292: LD_VAR 0 3
13296: PPUSH
13297: LD_INT 1
13299: PPUSH
13300: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13304: LD_INT 46
13306: PPUSH
13307: LD_VAR 0 3
13311: PPUSH
13312: LD_INT 1
13314: PPUSH
13315: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13319: LD_INT 47
13321: PPUSH
13322: LD_VAR 0 3
13326: PPUSH
13327: LD_INT 1
13329: PPUSH
13330: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13334: LD_INT 1
13336: PPUSH
13337: LD_VAR 0 3
13341: PPUSH
13342: LD_INT 1
13344: PPUSH
13345: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13349: LD_INT 2
13351: PPUSH
13352: LD_VAR 0 3
13356: PPUSH
13357: LD_INT 1
13359: PPUSH
13360: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13364: LD_INT 11
13366: PPUSH
13367: LD_VAR 0 3
13371: PPUSH
13372: LD_INT 1
13374: PPUSH
13375: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13379: LD_INT 20
13381: PPUSH
13382: LD_VAR 0 3
13386: PPUSH
13387: LD_INT 1
13389: PPUSH
13390: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13394: LD_INT 48
13396: PPUSH
13397: LD_VAR 0 3
13401: PPUSH
13402: LD_INT 1
13404: PPUSH
13405: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13409: LD_INT 49
13411: PPUSH
13412: LD_VAR 0 3
13416: PPUSH
13417: LD_INT 1
13419: PPUSH
13420: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
13424: LD_INT 50
13426: PPUSH
13427: LD_VAR 0 3
13431: PPUSH
13432: LD_INT 1
13434: PPUSH
13435: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13439: LD_INT 69
13441: PPUSH
13442: LD_VAR 0 3
13446: PPUSH
13447: LD_INT 1
13449: PPUSH
13450: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13454: LD_INT 39
13456: PPUSH
13457: LD_VAR 0 3
13461: PPUSH
13462: LD_INT 1
13464: PPUSH
13465: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13469: LD_INT 34
13471: PPUSH
13472: LD_VAR 0 3
13476: PPUSH
13477: LD_INT 1
13479: PPUSH
13480: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13484: LD_INT 42
13486: PPUSH
13487: LD_VAR 0 3
13491: PPUSH
13492: LD_INT 1
13494: PPUSH
13495: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13499: LD_INT 44
13501: PPUSH
13502: LD_VAR 0 3
13506: PPUSH
13507: LD_INT 1
13509: PPUSH
13510: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13514: LD_INT 41
13516: PPUSH
13517: LD_VAR 0 3
13521: PPUSH
13522: LD_INT 1
13524: PPUSH
13525: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13529: LD_INT 13
13531: PPUSH
13532: LD_VAR 0 3
13536: PPUSH
13537: LD_INT 1
13539: PPUSH
13540: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13544: LD_INT 40
13546: PPUSH
13547: LD_VAR 0 3
13551: PPUSH
13552: LD_INT 1
13554: PPUSH
13555: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13559: LD_INT 43
13561: PPUSH
13562: LD_VAR 0 3
13566: PPUSH
13567: LD_INT 1
13569: PPUSH
13570: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13574: LD_INT 70
13576: PPUSH
13577: LD_VAR 0 3
13581: PPUSH
13582: LD_INT 1
13584: PPUSH
13585: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13589: LD_INT 23
13591: PPUSH
13592: LD_VAR 0 3
13596: PPUSH
13597: LD_INT 1
13599: PPUSH
13600: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13604: LD_INT 51
13606: PPUSH
13607: LD_VAR 0 3
13611: PPUSH
13612: LD_INT 1
13614: PPUSH
13615: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13619: LD_INT 52
13621: PPUSH
13622: LD_VAR 0 3
13626: PPUSH
13627: LD_INT 1
13629: PPUSH
13630: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13634: LD_INT 6
13636: PPUSH
13637: LD_VAR 0 3
13641: PPUSH
13642: LD_INT 1
13644: PPUSH
13645: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13649: LD_INT 15
13651: PPUSH
13652: LD_VAR 0 3
13656: PPUSH
13657: LD_INT 1
13659: PPUSH
13660: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13664: LD_INT 7
13666: PPUSH
13667: LD_VAR 0 3
13671: PPUSH
13672: LD_INT 1
13674: PPUSH
13675: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13679: LD_INT 12
13681: PPUSH
13682: LD_VAR 0 3
13686: PPUSH
13687: LD_INT 1
13689: PPUSH
13690: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13694: LD_INT 10
13696: PPUSH
13697: LD_VAR 0 3
13701: PPUSH
13702: LD_INT 1
13704: PPUSH
13705: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13709: LD_INT 17
13711: PPUSH
13712: LD_VAR 0 3
13716: PPUSH
13717: LD_INT 1
13719: PPUSH
13720: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13724: LD_INT 18
13726: PPUSH
13727: LD_VAR 0 3
13731: PPUSH
13732: LD_INT 1
13734: PPUSH
13735: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13739: LD_INT 60
13741: PPUSH
13742: LD_VAR 0 3
13746: PPUSH
13747: LD_INT 1
13749: PPUSH
13750: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13754: LD_INT 61
13756: PPUSH
13757: LD_VAR 0 3
13761: PPUSH
13762: LD_INT 1
13764: PPUSH
13765: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13769: LD_INT 32
13771: PPUSH
13772: LD_VAR 0 3
13776: PPUSH
13777: LD_INT 1
13779: PPUSH
13780: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13784: LD_INT 27
13786: PPUSH
13787: LD_VAR 0 3
13791: PPUSH
13792: LD_INT 1
13794: PPUSH
13795: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13799: LD_INT 36
13801: PPUSH
13802: LD_VAR 0 3
13806: PPUSH
13807: LD_INT 1
13809: PPUSH
13810: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13814: LD_INT 33
13816: PPUSH
13817: LD_VAR 0 3
13821: PPUSH
13822: LD_INT 1
13824: PPUSH
13825: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13829: LD_INT 9
13831: PPUSH
13832: LD_VAR 0 3
13836: PPUSH
13837: LD_INT 1
13839: PPUSH
13840: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13844: LD_INT 38
13846: PPUSH
13847: LD_VAR 0 3
13851: PPUSH
13852: LD_INT 1
13854: PPUSH
13855: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13859: LD_INT 57
13861: PPUSH
13862: LD_VAR 0 3
13866: PPUSH
13867: LD_INT 1
13869: PPUSH
13870: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13874: LD_INT 58
13876: PPUSH
13877: LD_VAR 0 3
13881: PPUSH
13882: LD_INT 1
13884: PPUSH
13885: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13889: LD_INT 28
13891: PPUSH
13892: LD_VAR 0 3
13896: PPUSH
13897: LD_INT 1
13899: PPUSH
13900: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13904: LD_INT 29
13906: PPUSH
13907: LD_VAR 0 3
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13919: LD_INT 30
13921: PPUSH
13922: LD_VAR 0 3
13926: PPUSH
13927: LD_INT 1
13929: PPUSH
13930: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13934: LD_INT 37
13936: PPUSH
13937: LD_VAR 0 3
13941: PPUSH
13942: LD_INT 1
13944: PPUSH
13945: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13949: LD_INT 63
13951: PPUSH
13952: LD_VAR 0 3
13956: PPUSH
13957: LD_INT 1
13959: PPUSH
13960: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13964: LD_INT 64
13966: PPUSH
13967: LD_VAR 0 3
13971: PPUSH
13972: LD_INT 1
13974: PPUSH
13975: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13979: LD_INT 3
13981: PPUSH
13982: LD_VAR 0 3
13986: PPUSH
13987: LD_INT 1
13989: PPUSH
13990: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13994: LD_INT 4
13996: PPUSH
13997: LD_VAR 0 3
14001: PPUSH
14002: LD_INT 1
14004: PPUSH
14005: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14009: LD_INT 5
14011: PPUSH
14012: LD_VAR 0 3
14016: PPUSH
14017: LD_INT 1
14019: PPUSH
14020: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
14024: LD_INT 8
14026: PPUSH
14027: LD_VAR 0 3
14031: PPUSH
14032: LD_INT 1
14034: PPUSH
14035: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14039: LD_INT 66
14041: PPUSH
14042: LD_VAR 0 3
14046: PPUSH
14047: LD_INT 1
14049: PPUSH
14050: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
14054: LD_INT 67
14056: PPUSH
14057: LD_VAR 0 3
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14069: LD_INT 21
14071: PPUSH
14072: LD_VAR 0 3
14076: PPUSH
14077: LD_INT 1
14079: PPUSH
14080: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14084: LD_INT 22
14086: PPUSH
14087: LD_VAR 0 3
14091: PPUSH
14092: LD_INT 1
14094: PPUSH
14095: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14099: LD_INT 19
14101: PPUSH
14102: LD_VAR 0 3
14106: PPUSH
14107: LD_INT 1
14109: PPUSH
14110: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
14114: LD_INT 26
14116: PPUSH
14117: LD_VAR 0 3
14121: PPUSH
14122: LD_INT 1
14124: PPUSH
14125: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14129: LD_INT 54
14131: PPUSH
14132: LD_VAR 0 3
14136: PPUSH
14137: LD_INT 1
14139: PPUSH
14140: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14144: LD_INT 55
14146: PPUSH
14147: LD_VAR 0 3
14151: PPUSH
14152: LD_INT 1
14154: PPUSH
14155: CALL_OW 322
// for i = 0 to 39 do
14159: LD_ADDR_VAR 0 4
14163: PUSH
14164: DOUBLE
14165: LD_INT 0
14167: DEC
14168: ST_TO_ADDR
14169: LD_INT 39
14171: PUSH
14172: FOR_TO
14173: IFFALSE 14194
// SetRestrict ( i , side , true ) ;
14175: LD_VAR 0 4
14179: PPUSH
14180: LD_VAR 0 3
14184: PPUSH
14185: LD_INT 1
14187: PPUSH
14188: CALL_OW 324
14192: GO 14172
14194: POP
14195: POP
// end ; else
14196: GO 14273
14198: POP
// begin for i = 1 to 73 do
14199: LD_ADDR_VAR 0 4
14203: PUSH
14204: DOUBLE
14205: LD_INT 1
14207: DEC
14208: ST_TO_ADDR
14209: LD_INT 73
14211: PUSH
14212: FOR_TO
14213: IFFALSE 14234
// SetTech ( i , side , state_enabled ) ;
14215: LD_VAR 0 4
14219: PPUSH
14220: LD_VAR 0 3
14224: PPUSH
14225: LD_INT 1
14227: PPUSH
14228: CALL_OW 322
14232: GO 14212
14234: POP
14235: POP
// for i = 0 to 39 do
14236: LD_ADDR_VAR 0 4
14240: PUSH
14241: DOUBLE
14242: LD_INT 0
14244: DEC
14245: ST_TO_ADDR
14246: LD_INT 39
14248: PUSH
14249: FOR_TO
14250: IFFALSE 14271
// SetRestrict ( i , side , true ) ;
14252: LD_VAR 0 4
14256: PPUSH
14257: LD_VAR 0 3
14261: PPUSH
14262: LD_INT 1
14264: PPUSH
14265: CALL_OW 324
14269: GO 14249
14271: POP
14272: POP
// end ; end ; end ;
14273: GO 10278
14275: POP
14276: POP
// end ; end_of_file
14277: LD_VAR 0 2
14281: RET
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
14282: LD_INT 0
14284: PPUSH
14285: PPUSH
14286: PPUSH
// BuildUpTime_Delay = 0 ;
14287: LD_ADDR_EXP 57
14291: PUSH
14292: LD_INT 0
14294: ST_TO_ADDR
// if not def_builduptime then
14295: LD_EXP 14
14299: NOT
14300: IFFALSE 14304
// exit ;
14302: GO 14487
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14304: LD_ADDR_EXP 57
14308: PUSH
14309: LD_INT 8400
14311: PUSH
14312: LD_INT 2100
14314: PUSH
14315: LD_EXP 14
14319: MUL
14320: PLUS
14321: ST_TO_ADDR
// BuildUpTimeActive := true ;
14322: LD_ADDR_EXP 56
14326: PUSH
14327: LD_INT 1
14329: ST_TO_ADDR
// for i := 1 to 8 do
14330: LD_ADDR_VAR 0 2
14334: PUSH
14335: DOUBLE
14336: LD_INT 1
14338: DEC
14339: ST_TO_ADDR
14340: LD_INT 8
14342: PUSH
14343: FOR_TO
14344: IFFALSE 14485
// if Side_Positions [ i ] then
14346: LD_EXP 34
14350: PUSH
14351: LD_VAR 0 2
14355: ARRAY
14356: IFFALSE 14483
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14358: LD_EXP 55
14362: PUSH
14363: LD_EXP 34
14367: PUSH
14368: LD_VAR 0 2
14372: ARRAY
14373: ARRAY
14374: PPUSH
14375: LD_INT 5
14377: PPUSH
14378: CALL_OW 424
// for j := 1 to 8 do
14382: LD_ADDR_VAR 0 3
14386: PUSH
14387: DOUBLE
14388: LD_INT 1
14390: DEC
14391: ST_TO_ADDR
14392: LD_INT 8
14394: PUSH
14395: FOR_TO
14396: IFFALSE 14481
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14398: LD_EXP 34
14402: PUSH
14403: LD_VAR 0 3
14407: ARRAY
14408: PUSH
14409: LD_EXP 31
14413: PUSH
14414: LD_VAR 0 2
14418: ARRAY
14419: PUSH
14420: LD_EXP 31
14424: PUSH
14425: LD_VAR 0 3
14429: ARRAY
14430: NONEQUAL
14431: PUSH
14432: LD_EXP 36
14436: NOT
14437: PUSH
14438: LD_VAR 0 2
14442: PUSH
14443: LD_VAR 0 3
14447: NONEQUAL
14448: AND
14449: OR
14450: AND
14451: IFFALSE 14479
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14453: LD_VAR 0 3
14457: PPUSH
14458: LD_EXP 55
14462: PUSH
14463: LD_EXP 34
14467: PUSH
14468: LD_VAR 0 2
14472: ARRAY
14473: ARRAY
14474: PPUSH
14475: CALL_OW 333
14479: GO 14395
14481: POP
14482: POP
// end ;
14483: GO 14343
14485: POP
14486: POP
// end ;
14487: LD_VAR 0 1
14491: RET
// export function EndBuildUp ; var i , j ; begin
14492: LD_INT 0
14494: PPUSH
14495: PPUSH
14496: PPUSH
// BuildUpTimeActive := false ;
14497: LD_ADDR_EXP 56
14501: PUSH
14502: LD_INT 0
14504: ST_TO_ADDR
// for i := 1 to 8 do
14505: LD_ADDR_VAR 0 2
14509: PUSH
14510: DOUBLE
14511: LD_INT 1
14513: DEC
14514: ST_TO_ADDR
14515: LD_INT 8
14517: PUSH
14518: FOR_TO
14519: IFFALSE 14660
// if Side_Positions [ i ] then
14521: LD_EXP 34
14525: PUSH
14526: LD_VAR 0 2
14530: ARRAY
14531: IFFALSE 14658
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14533: LD_EXP 55
14537: PUSH
14538: LD_EXP 34
14542: PUSH
14543: LD_VAR 0 2
14547: ARRAY
14548: ARRAY
14549: PPUSH
14550: LD_INT 0
14552: PPUSH
14553: CALL_OW 424
// for j := 1 to 8 do
14557: LD_ADDR_VAR 0 3
14561: PUSH
14562: DOUBLE
14563: LD_INT 1
14565: DEC
14566: ST_TO_ADDR
14567: LD_INT 8
14569: PUSH
14570: FOR_TO
14571: IFFALSE 14656
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14573: LD_EXP 34
14577: PUSH
14578: LD_VAR 0 3
14582: ARRAY
14583: PUSH
14584: LD_EXP 31
14588: PUSH
14589: LD_VAR 0 2
14593: ARRAY
14594: PUSH
14595: LD_EXP 31
14599: PUSH
14600: LD_VAR 0 3
14604: ARRAY
14605: NONEQUAL
14606: PUSH
14607: LD_EXP 36
14611: NOT
14612: PUSH
14613: LD_VAR 0 2
14617: PUSH
14618: LD_VAR 0 3
14622: NONEQUAL
14623: AND
14624: OR
14625: AND
14626: IFFALSE 14654
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14628: LD_VAR 0 3
14632: PPUSH
14633: LD_EXP 55
14637: PUSH
14638: LD_EXP 34
14642: PUSH
14643: LD_VAR 0 2
14647: ARRAY
14648: ARRAY
14649: PPUSH
14650: CALL_OW 334
14654: GO 14570
14656: POP
14657: POP
// end ;
14658: GO 14518
14660: POP
14661: POP
// end ;
14662: LD_VAR 0 1
14666: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14667: LD_EXP 56
14671: IFFALSE 14846
14673: GO 14675
14675: DISABLE
14676: LD_INT 0
14678: PPUSH
14679: PPUSH
// begin for i := 1 to 8 do
14680: LD_ADDR_VAR 0 1
14684: PUSH
14685: DOUBLE
14686: LD_INT 1
14688: DEC
14689: ST_TO_ADDR
14690: LD_INT 8
14692: PUSH
14693: FOR_TO
14694: IFFALSE 14843
// if Side_Positions [ i ] then
14696: LD_EXP 34
14700: PUSH
14701: LD_VAR 0 1
14705: ARRAY
14706: IFFALSE 14841
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14708: LD_ADDR_VAR 0 2
14712: PUSH
14713: LD_EXP 55
14717: PUSH
14718: LD_EXP 34
14722: PUSH
14723: LD_VAR 0 1
14727: ARRAY
14728: ARRAY
14729: PPUSH
14730: LD_INT 2
14732: PUSH
14733: LD_INT 21
14735: PUSH
14736: LD_INT 1
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: PUSH
14743: LD_INT 21
14745: PUSH
14746: LD_INT 2
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: LIST
14757: PUSH
14758: LD_INT 22
14760: PUSH
14761: LD_OWVAR 2
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PPUSH
14774: CALL_OW 70
14778: PUSH
14779: FOR_IN
14780: IFFALSE 14839
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14782: LD_EXP 31
14786: PUSH
14787: LD_VAR 0 1
14791: ARRAY
14792: PUSH
14793: LD_EXP 31
14797: PUSH
14798: LD_OWVAR 2
14802: ARRAY
14803: NONEQUAL
14804: PUSH
14805: LD_EXP 36
14809: NOT
14810: PUSH
14811: LD_VAR 0 1
14815: PUSH
14816: LD_OWVAR 2
14820: NONEQUAL
14821: AND
14822: OR
14823: IFFALSE 14837
// ComMoveToArea ( un , BuildUpEscape ) ;
14825: LD_VAR 0 2
14829: PPUSH
14830: LD_INT 9
14832: PPUSH
14833: CALL_OW 113
14837: GO 14779
14839: POP
14840: POP
14841: GO 14693
14843: POP
14844: POP
// enable ;
14845: ENABLE
// end ;
14846: PPOPN 2
14848: END
// every 0 0$1 trigger def_builduptime do
14849: LD_EXP 14
14853: IFFALSE 14879
14855: GO 14857
14857: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14858: LD_INT 8400
14860: PUSH
14861: LD_EXP 14
14865: PUSH
14866: LD_INT 2100
14868: MUL
14869: PLUS
14870: PPUSH
14871: CALL_OW 67
// EndBuildUp ;
14875: CALL 14492 0 0
// end ;
14879: END
