// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 368
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: LD_INT 6
 351: PUSH
 352: LD_INT 7
 354: PUSH
 355: LD_INT 8
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 368: LD_ADDR_EXP 36
 372: PUSH
 373: LD_EXP 31
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: EMPTY
 382: LIST
 383: DIFF
 384: PUSH
 385: LD_INT 1
 387: GREATER
 388: ST_TO_ADDR
// if Multiplayer then
 389: LD_OWVAR 4
 393: IFFALSE 600
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 395: LD_ADDR_EXP 1
 399: PUSH
 400: LD_INT 0
 402: PPUSH
 403: CALL_OW 426
 407: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 408: LD_ADDR_EXP 2
 412: PUSH
 413: LD_INT 1
 415: PPUSH
 416: CALL_OW 426
 420: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 421: LD_ADDR_EXP 3
 425: PUSH
 426: LD_INT 2
 428: PPUSH
 429: CALL_OW 426
 433: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 434: LD_ADDR_EXP 4
 438: PUSH
 439: LD_INT 3
 441: PPUSH
 442: CALL_OW 426
 446: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 447: LD_ADDR_EXP 5
 451: PUSH
 452: LD_INT 4
 454: PPUSH
 455: CALL_OW 426
 459: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 460: LD_ADDR_EXP 6
 464: PUSH
 465: LD_INT 5
 467: PPUSH
 468: CALL_OW 426
 472: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 473: LD_ADDR_EXP 7
 477: PUSH
 478: LD_INT 6
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 486: LD_ADDR_EXP 8
 490: PUSH
 491: LD_INT 10
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 499: LD_ADDR_EXP 9
 503: PUSH
 504: LD_INT 11
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 512: LD_ADDR_EXP 10
 516: PUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 525: LD_ADDR_EXP 11
 529: PUSH
 530: LD_INT 13
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 538: LD_ADDR_EXP 12
 542: PUSH
 543: LD_INT 14
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 551: LD_ADDR_EXP 13
 555: PUSH
 556: LD_INT 17
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 564: LD_ADDR_EXP 14
 568: PUSH
 569: LD_INT 20
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 577: LD_ADDR_VAR 0 3
 581: PUSH
 582: LD_INT 22
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// def_win_rules = 0 ;
 590: LD_ADDR_EXP 30
 594: PUSH
 595: LD_INT 0
 597: ST_TO_ADDR
// end else
 598: GO 732
// begin Randomize ;
 600: CALL_OW 10
// def_base_level := 2 ;
 604: LD_ADDR_EXP 1
 608: PUSH
 609: LD_INT 2
 611: ST_TO_ADDR
// def_amount_of_people := 2 ;
 612: LD_ADDR_EXP 2
 616: PUSH
 617: LD_INT 2
 619: ST_TO_ADDR
// def_skill_level := 1 ;
 620: LD_ADDR_EXP 3
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// def_starting_resources := 2 ;
 628: LD_ADDR_EXP 4
 632: PUSH
 633: LD_INT 2
 635: ST_TO_ADDR
// def_shipments_density := 50 ;
 636: LD_ADDR_EXP 5
 640: PUSH
 641: LD_INT 50
 643: ST_TO_ADDR
// def_extra_oil_deposits := 2 ;
 644: LD_ADDR_EXP 6
 648: PUSH
 649: LD_INT 2
 651: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 2
 659: ST_TO_ADDR
// def_shared_vision := 1 ;
 660: LD_ADDR_EXP 8
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// def_morale_flags := 1 ;
 668: LD_ADDR_EXP 9
 672: PUSH
 673: LD_INT 1
 675: ST_TO_ADDR
// def_siberite_detection := 1 ;
 676: LD_ADDR_EXP 10
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// def_people_respawning := 2 ;
 684: LD_ADDR_EXP 11
 688: PUSH
 689: LD_INT 2
 691: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 692: LD_ADDR_EXP 12
 696: PUSH
 697: LD_INT 3
 699: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 700: LD_ADDR_EXP 13
 704: PUSH
 705: LD_INT 2
 707: ST_TO_ADDR
// def_builduptime := 1 ;
 708: LD_ADDR_EXP 14
 712: PUSH
 713: LD_INT 1
 715: ST_TO_ADDR
// tech_level = 4 ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_INT 4
 723: ST_TO_ADDR
// def_win_rules = 0 ;
 724: LD_ADDR_EXP 30
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// end ; if isSGUI then
 732: LD_OWVAR 83
 736: IFFALSE 744
// setMpTechs ( ) else
 738: CALL 10135 0 0
 742: GO 757
// SetMpTechLevel ( tech_level + 1 ) ;
 744: LD_VAR 0 3
 748: PUSH
 749: LD_INT 1
 751: PLUS
 752: PPUSH
 753: CALL 10282 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 757: LD_ADDR_EXP 17
 761: PUSH
 762: LD_INT 0
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 1
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_EXP 1
 780: PUSH
 781: LD_INT 1
 783: PLUS
 784: ARRAY
 785: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 786: LD_ADDR_EXP 18
 790: PUSH
 791: LD_INT 0
 793: PUSH
 794: LD_INT 0
 796: PUSH
 797: LD_INT 3
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: LIST
 804: PUSH
 805: LD_EXP 1
 809: PUSH
 810: LD_INT 1
 812: PLUS
 813: ARRAY
 814: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 815: LD_ADDR_EXP 19
 819: PUSH
 820: LD_INT 9
 822: PUSH
 823: LD_INT 12
 825: PUSH
 826: LD_INT 15
 828: PUSH
 829: LD_INT 24
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: LD_EXP 2
 842: PUSH
 843: LD_INT 1
 845: PLUS
 846: ARRAY
 847: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 848: LD_ADDR_EXP 20
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_EXP 3
 875: PUSH
 876: LD_INT 1
 878: PLUS
 879: ARRAY
 880: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 881: LD_ADDR_EXP 22
 885: PUSH
 886: LD_INT 0
 888: PUSH
 889: LD_INT 0
 891: PUSH
 892: LD_INT 0
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 30
 902: PUSH
 903: LD_INT 0
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 50
 916: PUSH
 917: LD_INT 20
 919: PUSH
 920: LD_INT 0
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PUSH
 928: LD_INT 80
 930: PUSH
 931: LD_INT 40
 933: PUSH
 934: LD_INT 20
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: PUSH
 948: LD_EXP 4
 952: PUSH
 953: LD_INT 1
 955: PLUS
 956: ARRAY
 957: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 958: LD_ADDR_EXP 21
 962: PUSH
 963: LD_INT 10
 965: PUSH
 966: EMPTY
 967: LIST
 968: PUSH
 969: LD_INT 7
 971: PUSH
 972: LD_INT 14
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 6
 981: PUSH
 982: LD_INT 12
 984: PUSH
 985: LD_INT 18
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 10
 998: PUSH
 999: LD_INT 15
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: PUSH
1017: LD_EXP 4
1021: PUSH
1022: LD_INT 1
1024: PLUS
1025: ARRAY
1026: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
1027: LD_ADDR_EXP 23
1031: PUSH
1032: LD_INT 150
1034: PUSH
1035: LD_EXP 5
1039: MINUS
1040: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1041: LD_ADDR_EXP 27
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: LD_INT 10500
1051: PUSH
1052: LD_INT 6300
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: PUSH
1060: LD_EXP 11
1064: PUSH
1065: LD_INT 1
1067: PLUS
1068: ARRAY
1069: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1070: LD_ADDR_EXP 28
1074: PUSH
1075: LD_INT 0
1077: PUSH
1078: LD_INT 31500
1080: PUSH
1081: LD_INT 10500
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_EXP 11
1093: PUSH
1094: LD_INT 1
1096: PLUS
1097: ARRAY
1098: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1099: LD_ADDR_EXP 25
1103: PUSH
1104: LD_INT 0
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 3
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_EXP 12
1126: PUSH
1127: LD_INT 1
1129: PLUS
1130: ARRAY
1131: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1132: LD_ADDR_EXP 24
1136: PUSH
1137: LD_INT 1
1139: NEG
1140: PUSH
1141: LD_INT 350
1143: PUSH
1144: LD_INT 700
1146: PUSH
1147: LD_INT 1400
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_EXP 9
1164: PUSH
1165: LD_INT 1
1167: PLUS
1168: ARRAY
1169: ST_TO_ADDR
// battle_flags_id := [ ] ;
1170: LD_ADDR_EXP 44
1174: PUSH
1175: EMPTY
1176: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1177: LD_EXP 13
1181: PUSH
1182: LD_INT 0
1184: EQUAL
1185: IFFALSE 1197
// siberite_bomb_Delay = 0 else
1187: LD_ADDR_EXP 29
1191: PUSH
1192: LD_INT 0
1194: ST_TO_ADDR
1195: GO 1219
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1197: LD_ADDR_EXP 29
1201: PUSH
1202: LD_EXP 13
1206: PUSH
1207: LD_INT 1
1209: MINUS
1210: PUSH
1211: LD_INT 21000
1213: MUL
1214: PUSH
1215: LD_INT 1
1217: PLUS
1218: ST_TO_ADDR
// end ;
1219: LD_VAR 0 1
1223: RET
// function init_map ; var i , j ; begin
1224: LD_INT 0
1226: PPUSH
1227: PPUSH
1228: PPUSH
// normal_oil_deposits_locations := [ [ 42 , 72 ] , [ 86 , 6 ] , [ 159 , 5 ] , [ 214 , 68 ] , [ 298 , 184 ] , [ 259 , 264 ] , [ 182 , 252 ] , [ 99 , 179 ] ] ;
1229: LD_ADDR_EXP 40
1233: PUSH
1234: LD_INT 42
1236: PUSH
1237: LD_INT 72
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PUSH
1244: LD_INT 86
1246: PUSH
1247: LD_INT 6
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 159
1256: PUSH
1257: LD_INT 5
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 214
1266: PUSH
1267: LD_INT 68
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PUSH
1274: LD_INT 298
1276: PUSH
1277: LD_INT 184
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: PUSH
1284: LD_INT 259
1286: PUSH
1287: LD_INT 264
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 182
1296: PUSH
1297: LD_INT 252
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 99
1306: PUSH
1307: LD_INT 179
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 57 , 102 ] , [ 66 , 7 ] , [ 144 , 28 ] , [ 237 , 67 ] , [ 280 , 197 ] , [ 282 , 274 ] , [ 197 , 272 ] , [ 120 , 198 ] ] ;
1324: LD_ADDR_EXP 41
1328: PUSH
1329: LD_INT 57
1331: PUSH
1332: LD_INT 102
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 66
1341: PUSH
1342: LD_INT 7
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 144
1351: PUSH
1352: LD_INT 28
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 237
1361: PUSH
1362: LD_INT 67
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 280
1371: PUSH
1372: LD_INT 197
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 282
1381: PUSH
1382: LD_INT 274
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 197
1391: PUSH
1392: LD_INT 272
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 120
1401: PUSH
1402: LD_INT 198
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 68 , 74 ] , [ 81 , 28 ] , [ 142 , 9 ] , [ 229 , 64 ] , [ 293 , 204 ] , [ 274 , 275 ] , [ 206 , 252 ] , [ 106 , 200 ] ] ;
1419: LD_ADDR_EXP 42
1423: PUSH
1424: LD_INT 68
1426: PUSH
1427: LD_INT 74
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 81
1436: PUSH
1437: LD_INT 28
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PUSH
1444: LD_INT 142
1446: PUSH
1447: LD_INT 9
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: PUSH
1454: LD_INT 229
1456: PUSH
1457: LD_INT 64
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 293
1466: PUSH
1467: LD_INT 204
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 274
1476: PUSH
1477: LD_INT 275
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 206
1486: PUSH
1487: LD_INT 252
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 106
1496: PUSH
1497: LD_INT 200
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 73 , 79 ] , [ 72 , 21 ] , [ 144 , 5 ] , [ 254 , 95 ] , [ 275 , 166 ] , [ 277 , 252 ] , [ 213 , 272 ] , [ 115 , 174 ] ] ;
1514: LD_ADDR_EXP 43
1518: PUSH
1519: LD_INT 73
1521: PUSH
1522: LD_INT 79
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 72
1531: PUSH
1532: LD_INT 21
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 144
1541: PUSH
1542: LD_INT 5
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 254
1551: PUSH
1552: LD_INT 95
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 275
1561: PUSH
1562: LD_INT 166
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 277
1571: PUSH
1572: LD_INT 252
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 213
1581: PUSH
1582: LD_INT 272
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 115
1591: PUSH
1592: LD_INT 174
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: ST_TO_ADDR
// depot_def := [ [ 59 , 84 , 2 ] , [ 80 , 15 , 3 ] , [ 153 , 15 , 3 ] , [ 234 , 80 , 3 ] , [ 285 , 184 , 5 ] , [ 273 , 263 , 5 ] , [ 200 , 261 , 0 ] , [ 109 , 186 , 1 ] ] ;
1609: LD_ADDR_EXP 37
1613: PUSH
1614: LD_INT 59
1616: PUSH
1617: LD_INT 84
1619: PUSH
1620: LD_INT 2
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 80
1630: PUSH
1631: LD_INT 15
1633: PUSH
1634: LD_INT 3
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 153
1644: PUSH
1645: LD_INT 15
1647: PUSH
1648: LD_INT 3
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 234
1658: PUSH
1659: LD_INT 80
1661: PUSH
1662: LD_INT 3
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 285
1672: PUSH
1673: LD_INT 184
1675: PUSH
1676: LD_INT 5
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: PUSH
1684: LD_INT 273
1686: PUSH
1687: LD_INT 263
1689: PUSH
1690: LD_INT 5
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 200
1700: PUSH
1701: LD_INT 261
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: PUSH
1712: LD_INT 109
1714: PUSH
1715: LD_INT 186
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: ST_TO_ADDR
// for i in depot_def do
1736: LD_ADDR_VAR 0 2
1740: PUSH
1741: LD_EXP 37
1745: PUSH
1746: FOR_IN
1747: IFFALSE 1823
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1749: LD_ADDR_EXP 39
1753: PUSH
1754: LD_EXP 39
1758: PUSH
1759: LD_VAR 0 2
1763: PUSH
1764: LD_INT 1
1766: ARRAY
1767: PPUSH
1768: LD_VAR 0 2
1772: PUSH
1773: LD_INT 3
1775: ARRAY
1776: PPUSH
1777: LD_INT 4
1779: NEG
1780: PPUSH
1781: CALL_OW 272
1785: PUSH
1786: LD_VAR 0 2
1790: PUSH
1791: LD_INT 2
1793: ARRAY
1794: PPUSH
1795: LD_VAR 0 2
1799: PUSH
1800: LD_INT 3
1802: ARRAY
1803: PPUSH
1804: LD_INT 4
1806: NEG
1807: PPUSH
1808: CALL_OW 273
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: EMPTY
1818: LIST
1819: ADD
1820: ST_TO_ADDR
1821: GO 1746
1823: POP
1824: POP
// breastworks_def := [ [ [ 76 , 103 , 5 ] , [ 81 , 99 , 5 ] , [ 79 , 90 , 4 ] ] , [ [ 87 , 33 , 5 ] , [ 90 , 29 , 5 ] , [ 97 , 32 , 5 ] ] , [ [ 148 , 30 , 0 ] , [ 157 , 31 , 0 ] , [ 166 , 31 , 0 ] ] , [ [ 223 , 89 , 1 ] , [ 229 , 96 , 0 ] , [ 237 , 98 , 0 ] ] , [ [ 263 , 171 , 2 ] , [ 267 , 181 , 2 ] , [ 269 , 170 , 2 ] ] , [ [ 255 , 248 , 2 ] , [ 264 , 248 , 2 ] , [ 273 , 249 , 3 ] ] , [ [ 184 , 247 , 2 ] , [ 192 , 247 , 2 ] , [ 201 , 248 , 3 ] ] , [ [ 121 , 177 , 4 ] , [ 125 , 184 , 4 ] , [ 128 , 192 , 5 ] ] ] ;
1825: LD_ADDR_EXP 38
1829: PUSH
1830: LD_INT 76
1832: PUSH
1833: LD_INT 103
1835: PUSH
1836: LD_INT 5
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 81
1846: PUSH
1847: LD_INT 99
1849: PUSH
1850: LD_INT 5
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 79
1860: PUSH
1861: LD_INT 90
1863: PUSH
1864: LD_INT 4
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 87
1879: PUSH
1880: LD_INT 33
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: PUSH
1891: LD_INT 90
1893: PUSH
1894: LD_INT 29
1896: PUSH
1897: LD_INT 5
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: PUSH
1905: LD_INT 97
1907: PUSH
1908: LD_INT 32
1910: PUSH
1911: LD_INT 5
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 148
1926: PUSH
1927: LD_INT 30
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: LIST
1937: PUSH
1938: LD_INT 157
1940: PUSH
1941: LD_INT 31
1943: PUSH
1944: LD_INT 0
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 166
1954: PUSH
1955: LD_INT 31
1957: PUSH
1958: LD_INT 0
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: LIST
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 223
1973: PUSH
1974: LD_INT 89
1976: PUSH
1977: LD_INT 1
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 229
1987: PUSH
1988: LD_INT 96
1990: PUSH
1991: LD_INT 0
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 237
2001: PUSH
2002: LD_INT 98
2004: PUSH
2005: LD_INT 0
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_INT 263
2020: PUSH
2021: LD_INT 171
2023: PUSH
2024: LD_INT 2
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 267
2034: PUSH
2035: LD_INT 181
2037: PUSH
2038: LD_INT 2
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 269
2048: PUSH
2049: LD_INT 170
2051: PUSH
2052: LD_INT 2
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 255
2067: PUSH
2068: LD_INT 248
2070: PUSH
2071: LD_INT 2
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 264
2081: PUSH
2082: LD_INT 248
2084: PUSH
2085: LD_INT 2
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: LD_INT 273
2095: PUSH
2096: LD_INT 249
2098: PUSH
2099: LD_INT 3
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 184
2114: PUSH
2115: LD_INT 247
2117: PUSH
2118: LD_INT 2
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 192
2128: PUSH
2129: LD_INT 247
2131: PUSH
2132: LD_INT 2
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 201
2142: PUSH
2143: LD_INT 248
2145: PUSH
2146: LD_INT 3
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: LD_INT 121
2161: PUSH
2162: LD_INT 177
2164: PUSH
2165: LD_INT 4
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 125
2175: PUSH
2176: LD_INT 184
2178: PUSH
2179: LD_INT 4
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 128
2189: PUSH
2190: LD_INT 192
2192: PUSH
2193: LD_INT 5
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: ST_TO_ADDR
// for i = 1 to Side_Positions do
2216: LD_ADDR_VAR 0 2
2220: PUSH
2221: DOUBLE
2222: LD_INT 1
2224: DEC
2225: ST_TO_ADDR
2226: LD_EXP 34
2230: PUSH
2231: FOR_TO
2232: IFFALSE 2355
// begin if not Side_Positions [ i ] then
2234: LD_EXP 34
2238: PUSH
2239: LD_VAR 0 2
2243: ARRAY
2244: NOT
2245: IFFALSE 2249
// continue ;
2247: GO 2231
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2249: LD_EXP 40
2253: PUSH
2254: LD_EXP 34
2258: PUSH
2259: LD_VAR 0 2
2263: ARRAY
2264: ARRAY
2265: PUSH
2266: LD_INT 1
2268: ARRAY
2269: PPUSH
2270: LD_EXP 40
2274: PUSH
2275: LD_EXP 34
2279: PUSH
2280: LD_VAR 0 2
2284: ARRAY
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_INT 2
2293: PPUSH
2294: CALL_OW 62
// if def_extra_oil_deposits then
2298: LD_EXP 6
2302: IFFALSE 2353
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2304: LD_EXP 41
2308: PUSH
2309: LD_EXP 34
2313: PUSH
2314: LD_VAR 0 2
2318: ARRAY
2319: ARRAY
2320: PUSH
2321: LD_INT 1
2323: ARRAY
2324: PPUSH
2325: LD_EXP 41
2329: PUSH
2330: LD_EXP 34
2334: PUSH
2335: LD_VAR 0 2
2339: ARRAY
2340: ARRAY
2341: PUSH
2342: LD_INT 2
2344: ARRAY
2345: PPUSH
2346: LD_INT 2
2348: PPUSH
2349: CALL_OW 62
// end ;
2353: GO 2231
2355: POP
2356: POP
// if def_extra_sib_deposits then
2357: LD_EXP 7
2361: IFFALSE 2508
// for i = 1 to Side_Positions do
2363: LD_ADDR_VAR 0 2
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_EXP 34
2377: PUSH
2378: FOR_TO
2379: IFFALSE 2506
// begin if not Side_Positions [ i ] then
2381: LD_EXP 34
2385: PUSH
2386: LD_VAR 0 2
2390: ARRAY
2391: NOT
2392: IFFALSE 2396
// continue ;
2394: GO 2378
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2396: LD_EXP 42
2400: PUSH
2401: LD_EXP 34
2405: PUSH
2406: LD_VAR 0 2
2410: ARRAY
2411: ARRAY
2412: PUSH
2413: LD_INT 1
2415: ARRAY
2416: PPUSH
2417: LD_EXP 42
2421: PUSH
2422: LD_EXP 34
2426: PUSH
2427: LD_VAR 0 2
2431: ARRAY
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 3
2440: PPUSH
2441: CALL_OW 62
// if def_extra_sib_deposits = 2 then
2445: LD_EXP 7
2449: PUSH
2450: LD_INT 2
2452: EQUAL
2453: IFFALSE 2504
// CreateDepositXY ( extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2455: LD_EXP 43
2459: PUSH
2460: LD_EXP 34
2464: PUSH
2465: LD_VAR 0 2
2469: ARRAY
2470: ARRAY
2471: PUSH
2472: LD_INT 1
2474: ARRAY
2475: PPUSH
2476: LD_EXP 43
2480: PUSH
2481: LD_EXP 34
2485: PUSH
2486: LD_VAR 0 2
2490: ARRAY
2491: ARRAY
2492: PUSH
2493: LD_INT 2
2495: ARRAY
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: CALL_OW 62
// end ;
2504: GO 2378
2506: POP
2507: POP
// end ;
2508: LD_VAR 0 1
2512: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2513: LD_INT 0
2515: PPUSH
2516: PPUSH
2517: PPUSH
// if not Team_Game then
2518: LD_EXP 36
2522: NOT
2523: IFFALSE 2621
// begin for i = 1 to 8 do
2525: LD_ADDR_VAR 0 2
2529: PUSH
2530: DOUBLE
2531: LD_INT 1
2533: DEC
2534: ST_TO_ADDR
2535: LD_INT 8
2537: PUSH
2538: FOR_TO
2539: IFFALSE 2617
// for j = 1 to 8 do
2541: LD_ADDR_VAR 0 3
2545: PUSH
2546: DOUBLE
2547: LD_INT 1
2549: DEC
2550: ST_TO_ADDR
2551: LD_INT 8
2553: PUSH
2554: FOR_TO
2555: IFFALSE 2613
// if i <> j then
2557: LD_VAR 0 2
2561: PUSH
2562: LD_VAR 0 3
2566: NONEQUAL
2567: IFFALSE 2591
// SetAttitude ( i , j , att_neutral , true ) else
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_VAR 0 3
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: LD_INT 1
2584: PPUSH
2585: CALL_OW 80
2589: GO 2611
// SetAttitude ( i , j , att_friend , true ) ;
2591: LD_VAR 0 2
2595: PPUSH
2596: LD_VAR 0 3
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: CALL_OW 80
2611: GO 2554
2613: POP
2614: POP
2615: GO 2538
2617: POP
2618: POP
// end else
2619: GO 2796
// begin if def_shared_vision then
2621: LD_EXP 8
2625: IFFALSE 2690
// begin for i in Teams do
2627: LD_ADDR_VAR 0 2
2631: PUSH
2632: LD_EXP 32
2636: PUSH
2637: FOR_IN
2638: IFFALSE 2688
// for j = 2 to i do
2640: LD_ADDR_VAR 0 3
2644: PUSH
2645: DOUBLE
2646: LD_INT 2
2648: DEC
2649: ST_TO_ADDR
2650: LD_VAR 0 2
2654: PUSH
2655: FOR_TO
2656: IFFALSE 2684
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2658: LD_VAR 0 2
2662: PUSH
2663: LD_VAR 0 3
2667: ARRAY
2668: PPUSH
2669: LD_VAR 0 2
2673: PUSH
2674: LD_INT 1
2676: ARRAY
2677: PPUSH
2678: CALL_OW 343
2682: GO 2655
2684: POP
2685: POP
2686: GO 2637
2688: POP
2689: POP
// end ; for i = 1 to 8 do
2690: LD_ADDR_VAR 0 2
2694: PUSH
2695: DOUBLE
2696: LD_INT 1
2698: DEC
2699: ST_TO_ADDR
2700: LD_INT 8
2702: PUSH
2703: FOR_TO
2704: IFFALSE 2794
// for j = 1 to 8 do
2706: LD_ADDR_VAR 0 3
2710: PUSH
2711: DOUBLE
2712: LD_INT 1
2714: DEC
2715: ST_TO_ADDR
2716: LD_INT 8
2718: PUSH
2719: FOR_TO
2720: IFFALSE 2790
// if Side_Teams [ i ] = Side_Teams [ j ] then
2722: LD_EXP 31
2726: PUSH
2727: LD_VAR 0 2
2731: ARRAY
2732: PUSH
2733: LD_EXP 31
2737: PUSH
2738: LD_VAR 0 3
2742: ARRAY
2743: EQUAL
2744: IFFALSE 2768
// SetAttitude ( i , j , att_friend , true ) else
2746: LD_VAR 0 2
2750: PPUSH
2751: LD_VAR 0 3
2755: PPUSH
2756: LD_INT 1
2758: PPUSH
2759: LD_INT 1
2761: PPUSH
2762: CALL_OW 80
2766: GO 2788
// SetAttitude ( i , j , att_enemy , true ) ;
2768: LD_VAR 0 2
2772: PPUSH
2773: LD_VAR 0 3
2777: PPUSH
2778: LD_INT 2
2780: PPUSH
2781: LD_INT 1
2783: PPUSH
2784: CALL_OW 80
2788: GO 2719
2790: POP
2791: POP
2792: GO 2703
2794: POP
2795: POP
// end ; end ;
2796: LD_VAR 0 1
2800: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2801: LD_INT 0
2803: PPUSH
2804: PPUSH
2805: PPUSH
2806: PPUSH
// result := [ ] ;
2807: LD_ADDR_VAR 0 7
2811: PUSH
2812: EMPTY
2813: ST_TO_ADDR
// for i := 1 to count do
2814: LD_ADDR_VAR 0 8
2818: PUSH
2819: DOUBLE
2820: LD_INT 1
2822: DEC
2823: ST_TO_ADDR
2824: LD_VAR 0 1
2828: PUSH
2829: FOR_TO
2830: IFFALSE 3248
// begin uc_direction := Rand ( 0 , 5 ) ;
2832: LD_ADDR_OWVAR 24
2836: PUSH
2837: LD_INT 0
2839: PPUSH
2840: LD_INT 5
2842: PPUSH
2843: CALL_OW 12
2847: ST_TO_ADDR
// if commander then
2848: LD_LOC 1
2852: IFFALSE 2961
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2854: LD_ADDR_OWVAR 26
2858: PUSH
2859: LD_OWVAR 19
2863: PUSH
2864: LD_OWVAR 20
2868: ARRAY
2869: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2870: LD_INT 1
2872: PPUSH
2873: LD_INT 2
2875: PPUSH
2876: CALL_OW 12
2880: PPUSH
2881: LD_VAR 0 2
2885: PPUSH
2886: LD_EXP 20
2890: PUSH
2891: LD_INT 2
2893: PLUS
2894: PPUSH
2895: CALL_OW 380
// hc_importance := 105 ;
2899: LD_ADDR_OWVAR 32
2903: PUSH
2904: LD_INT 105
2906: ST_TO_ADDR
// commander := false ;
2907: LD_ADDR_LOC 1
2911: PUSH
2912: LD_INT 0
2914: ST_TO_ADDR
// if Multiplayer then
2915: LD_OWVAR 4
2919: IFFALSE 2959
// begin hc_gallery := MULTIAVATARS ;
2921: LD_ADDR_OWVAR 33
2925: PUSH
2926: LD_STRING MULTIAVATARS
2928: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2929: LD_ADDR_OWVAR 34
2933: PUSH
2934: LD_OWVAR 20
2938: PPUSH
2939: CALL_OW 525
2943: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2944: LD_ADDR_OWVAR 27
2948: PUSH
2949: LD_OWVAR 20
2953: PPUSH
2954: CALL_OW 526
2958: ST_TO_ADDR
// end ; end else
2959: GO 3024
// begin hc_name :=  ;
2961: LD_ADDR_OWVAR 26
2965: PUSH
2966: LD_STRING 
2968: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2969: LD_INT 1
2971: PPUSH
2972: LD_INT 2
2974: PPUSH
2975: CALL_OW 12
2979: PPUSH
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_EXP 20
2989: PPUSH
2990: CALL_OW 380
// hc_importance := 0 ;
2994: LD_ADDR_OWVAR 32
2998: PUSH
2999: LD_INT 0
3001: ST_TO_ADDR
// if Multiplayer then
3002: LD_OWVAR 4
3006: IFFALSE 3024
// begin hc_gallery :=  ;
3008: LD_ADDR_OWVAR 33
3012: PUSH
3013: LD_STRING 
3015: ST_TO_ADDR
// hc_face_number := 0 ;
3016: LD_ADDR_OWVAR 34
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3024: LD_ADDR_VAR 0 10
3028: PUSH
3029: CALL_OW 44
3033: ST_TO_ADDR
// if global_defined then
3034: LD_LOC 3
3038: IFFALSE 3178
// begin if ( cl = class_soldier ) then
3040: LD_VAR 0 2
3044: PUSH
3045: LD_INT 1
3047: EQUAL
3048: IFFALSE 3068
// j := i + soldiers_created else
3050: LD_ADDR_VAR 0 9
3054: PUSH
3055: LD_VAR 0 8
3059: PUSH
3060: LD_LOC 4
3064: PLUS
3065: ST_TO_ADDR
3066: GO 3078
// j := i ;
3068: LD_ADDR_VAR 0 9
3072: PUSH
3073: LD_VAR 0 8
3077: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3078: LD_LOC 2
3082: PUSH
3083: LD_VAR 0 2
3087: ARRAY
3088: PUSH
3089: LD_VAR 0 9
3093: ARRAY
3094: PPUSH
3095: LD_VAR 0 10
3099: PPUSH
3100: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3104: LD_VAR 0 10
3108: PPUSH
3109: LD_INT 2
3111: PPUSH
3112: LD_LOC 2
3116: PUSH
3117: LD_VAR 0 2
3121: ARRAY
3122: PUSH
3123: LD_VAR 0 9
3127: ARRAY
3128: PPUSH
3129: LD_INT 2
3131: PPUSH
3132: CALL_OW 260
3136: PPUSH
3137: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3141: LD_VAR 0 10
3145: PPUSH
3146: LD_INT 1
3148: PPUSH
3149: LD_LOC 2
3153: PUSH
3154: LD_VAR 0 2
3158: ARRAY
3159: PUSH
3160: LD_VAR 0 9
3164: ARRAY
3165: PPUSH
3166: LD_INT 1
3168: PPUSH
3169: CALL_OW 260
3173: PPUSH
3174: CALL_OW 239
// end ; if building then
3178: LD_VAR 0 6
3182: IFFALSE 3200
// PlaceHumanInUnit ( un , building ) else
3184: LD_VAR 0 10
3188: PPUSH
3189: LD_VAR 0 6
3193: PPUSH
3194: CALL_OW 52
3198: GO 3227
// PlaceUnitXYR ( un , x , y , r , false ) ;
3200: LD_VAR 0 10
3204: PPUSH
3205: LD_VAR 0 3
3209: PPUSH
3210: LD_VAR 0 4
3214: PPUSH
3215: LD_VAR 0 5
3219: PPUSH
3220: LD_INT 0
3222: PPUSH
3223: CALL_OW 50
// result := result ^ [ un ] ;
3227: LD_ADDR_VAR 0 7
3231: PUSH
3232: LD_VAR 0 7
3236: PUSH
3237: LD_VAR 0 10
3241: PUSH
3242: EMPTY
3243: LIST
3244: ADD
3245: ST_TO_ADDR
// end ;
3246: GO 2829
3248: POP
3249: POP
// if not global_defined then
3250: LD_LOC 3
3254: NOT
3255: IFFALSE 3333
// if ( global_units >= cl ) then
3257: LD_LOC 2
3261: PUSH
3262: LD_VAR 0 2
3266: GREATEREQUAL
3267: IFFALSE 3308
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3269: LD_ADDR_LOC 2
3273: PUSH
3274: LD_LOC 2
3278: PPUSH
3279: LD_VAR 0 2
3283: PPUSH
3284: LD_LOC 2
3288: PUSH
3289: LD_VAR 0 2
3293: ARRAY
3294: PUSH
3295: LD_VAR 0 7
3299: ADD
3300: PPUSH
3301: CALL_OW 1
3305: ST_TO_ADDR
3306: GO 3333
// global_units := Replace ( global_units , cl , result ) ;
3308: LD_ADDR_LOC 2
3312: PUSH
3313: LD_LOC 2
3317: PPUSH
3318: LD_VAR 0 2
3322: PPUSH
3323: LD_VAR 0 7
3327: PPUSH
3328: CALL_OW 1
3332: ST_TO_ADDR
// if commander then
3333: LD_LOC 1
3337: IFFALSE 3384
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3339: LD_ADDR_EXP 45
3343: PUSH
3344: LD_EXP 45
3348: PPUSH
3349: LD_OWVAR 20
3353: PPUSH
3354: LD_EXP 45
3358: PUSH
3359: LD_OWVAR 20
3363: ARRAY
3364: PUSH
3365: LD_VAR 0 10
3369: ADD
3370: PPUSH
3371: CALL_OW 1
3375: ST_TO_ADDR
// commander := false ;
3376: LD_ADDR_LOC 1
3380: PUSH
3381: LD_INT 0
3383: ST_TO_ADDR
// end ; end ;
3384: LD_VAR 0 7
3388: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3389: LD_INT 0
3391: PPUSH
3392: PPUSH
3393: PPUSH
3394: PPUSH
3395: PPUSH
3396: PPUSH
3397: PPUSH
3398: PPUSH
3399: PPUSH
// if side in [ 0 , 9 ] then
3400: LD_VAR 0 1
3404: PUSH
3405: LD_INT 0
3407: PUSH
3408: LD_INT 9
3410: PUSH
3411: EMPTY
3412: LIST
3413: LIST
3414: IN
3415: IFFALSE 3419
// exit ;
3417: GO 4469
// pos := Side_Positions [ side ] ;
3419: LD_ADDR_VAR 0 3
3423: PUSH
3424: LD_EXP 34
3428: PUSH
3429: LD_VAR 0 1
3433: ARRAY
3434: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3435: LD_ADDR_OWVAR 21
3439: PUSH
3440: LD_EXP 35
3444: PUSH
3445: LD_VAR 0 1
3449: ARRAY
3450: ST_TO_ADDR
// uc_side := side ;
3451: LD_ADDR_OWVAR 20
3455: PUSH
3456: LD_VAR 0 1
3460: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3461: LD_ADDR_VAR 0 4
3465: PUSH
3466: LD_EXP 37
3470: PUSH
3471: LD_VAR 0 3
3475: ARRAY
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3481: LD_ADDR_VAR 0 5
3485: PUSH
3486: LD_EXP 37
3490: PUSH
3491: LD_VAR 0 3
3495: ARRAY
3496: PUSH
3497: LD_INT 2
3499: ARRAY
3500: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3501: LD_ADDR_VAR 0 6
3505: PUSH
3506: LD_EXP 37
3510: PUSH
3511: LD_VAR 0 3
3515: ARRAY
3516: PUSH
3517: LD_INT 3
3519: ARRAY
3520: ST_TO_ADDR
// if is_depot then
3521: LD_EXP 17
3525: IFFALSE 3658
// begin bc_type = b_depot ;
3527: LD_ADDR_OWVAR 42
3531: PUSH
3532: LD_INT 0
3534: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3535: LD_ADDR_VAR 0 10
3539: PUSH
3540: LD_VAR 0 4
3544: PPUSH
3545: LD_VAR 0 5
3549: PPUSH
3550: LD_VAR 0 6
3554: PPUSH
3555: CALL_OW 47
3559: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3560: LD_VAR 0 10
3564: PPUSH
3565: LD_STRING @
3567: PUSH
3568: LD_VAR 0 1
3572: STR
3573: PPUSH
3574: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3578: LD_VAR 0 10
3582: PPUSH
3583: CALL_OW 274
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: LD_EXP 22
3595: PUSH
3596: LD_INT 1
3598: ARRAY
3599: PPUSH
3600: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3604: LD_VAR 0 10
3608: PPUSH
3609: CALL_OW 274
3613: PPUSH
3614: LD_INT 2
3616: PPUSH
3617: LD_EXP 22
3621: PUSH
3622: LD_INT 2
3624: ARRAY
3625: PPUSH
3626: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3630: LD_VAR 0 10
3634: PPUSH
3635: CALL_OW 274
3639: PPUSH
3640: LD_INT 3
3642: PPUSH
3643: LD_EXP 22
3647: PUSH
3648: LD_INT 3
3650: ARRAY
3651: PPUSH
3652: CALL_OW 277
// end else
3656: GO 3802
// begin for i := 1 to 3 do
3658: LD_ADDR_VAR 0 7
3662: PUSH
3663: DOUBLE
3664: LD_INT 1
3666: DEC
3667: ST_TO_ADDR
3668: LD_INT 3
3670: PUSH
3671: FOR_TO
3672: IFFALSE 3800
// begin r := starting_resources [ i ] ;
3674: LD_ADDR_VAR 0 8
3678: PUSH
3679: LD_EXP 22
3683: PUSH
3684: LD_VAR 0 7
3688: ARRAY
3689: ST_TO_ADDR
// while r >= 10 do
3690: LD_VAR 0 8
3694: PUSH
3695: LD_INT 10
3697: GREATEREQUAL
3698: IFFALSE 3798
// if r > 50 then
3700: LD_VAR 0 8
3704: PUSH
3705: LD_INT 50
3707: GREATER
3708: IFFALSE 3754
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3710: LD_VAR 0 7
3714: PPUSH
3715: LD_INT 5
3717: PPUSH
3718: LD_VAR 0 4
3722: PPUSH
3723: LD_VAR 0 5
3727: PPUSH
3728: LD_INT 4
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 60
// r := r - 50 ;
3738: LD_ADDR_VAR 0 8
3742: PUSH
3743: LD_VAR 0 8
3747: PUSH
3748: LD_INT 50
3750: MINUS
3751: ST_TO_ADDR
// end else
3752: GO 3796
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3754: LD_VAR 0 7
3758: PPUSH
3759: LD_VAR 0 8
3763: PUSH
3764: LD_INT 10
3766: DIV
3767: PPUSH
3768: LD_VAR 0 4
3772: PPUSH
3773: LD_VAR 0 5
3777: PPUSH
3778: LD_INT 4
3780: PPUSH
3781: LD_INT 0
3783: PPUSH
3784: CALL_OW 60
// r := 0 ;
3788: LD_ADDR_VAR 0 8
3792: PUSH
3793: LD_INT 0
3795: ST_TO_ADDR
// end ;
3796: GO 3690
// end ;
3798: GO 3671
3800: POP
3801: POP
// end ; for r in starting_crates do
3802: LD_ADDR_VAR 0 8
3806: PUSH
3807: LD_EXP 21
3811: PUSH
3812: FOR_IN
3813: IFFALSE 3845
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3815: LD_INT 1
3817: PPUSH
3818: LD_INT 5
3820: PPUSH
3821: LD_VAR 0 4
3825: PPUSH
3826: LD_VAR 0 5
3830: PPUSH
3831: LD_VAR 0 8
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: CALL_OW 60
3843: GO 3812
3845: POP
3846: POP
// if def_morale_flags then
3847: LD_EXP 9
3851: IFFALSE 3990
// begin x := start_def [ pos ] [ 1 ] ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_EXP 39
3862: PUSH
3863: LD_VAR 0 3
3867: ARRAY
3868: PUSH
3869: LD_INT 1
3871: ARRAY
3872: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3873: LD_ADDR_VAR 0 5
3877: PUSH
3878: LD_EXP 39
3882: PUSH
3883: LD_VAR 0 3
3887: ARRAY
3888: PUSH
3889: LD_INT 2
3891: ARRAY
3892: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3893: LD_VAR 0 4
3897: PPUSH
3898: LD_VAR 0 5
3902: PPUSH
3903: LD_INT 12
3905: PPUSH
3906: LD_INT 2
3908: PPUSH
3909: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3913: LD_ADDR_EXP 44
3917: PUSH
3918: LD_EXP 44
3922: PUSH
3923: LD_VAR 0 1
3927: PPUSH
3928: LD_VAR 0 4
3932: PPUSH
3933: LD_VAR 0 5
3937: PPUSH
3938: LD_INT 1
3940: PUSH
3941: LD_INT 100
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: PUSH
3948: LD_INT 2
3950: PUSH
3951: LD_INT 50
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 3
3960: PUSH
3961: LD_INT 20
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: PUSH
3968: LD_INT 20
3970: PUSH
3971: LD_INT 100
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: PPUSH
3984: CALL_OW 418
3988: ADD
3989: ST_TO_ADDR
// end ; commander := true ;
3990: LD_ADDR_LOC 1
3994: PUSH
3995: LD_INT 1
3997: ST_TO_ADDR
// soldiers_created := 0 ;
3998: LD_ADDR_LOC 4
4002: PUSH
4003: LD_INT 0
4005: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4006: LD_ADDR_VAR 0 7
4010: PUSH
4011: DOUBLE
4012: LD_INT 1
4014: DEC
4015: ST_TO_ADDR
4016: LD_EXP 18
4020: PUSH
4021: FOR_TO
4022: IFFALSE 4175
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4024: LD_ADDR_VAR 0 4
4028: PUSH
4029: LD_EXP 38
4033: PUSH
4034: LD_VAR 0 3
4038: ARRAY
4039: PUSH
4040: LD_VAR 0 7
4044: ARRAY
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4050: LD_ADDR_VAR 0 5
4054: PUSH
4055: LD_EXP 38
4059: PUSH
4060: LD_VAR 0 3
4064: ARRAY
4065: PUSH
4066: LD_VAR 0 7
4070: ARRAY
4071: PUSH
4072: LD_INT 2
4074: ARRAY
4075: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4076: LD_ADDR_VAR 0 6
4080: PUSH
4081: LD_EXP 38
4085: PUSH
4086: LD_VAR 0 3
4090: ARRAY
4091: PUSH
4092: LD_VAR 0 7
4096: ARRAY
4097: PUSH
4098: LD_INT 3
4100: ARRAY
4101: ST_TO_ADDR
// bc_type := b_breastwork ;
4102: LD_ADDR_OWVAR 42
4106: PUSH
4107: LD_INT 31
4109: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4110: LD_ADDR_VAR 0 9
4114: PUSH
4115: LD_VAR 0 4
4119: PPUSH
4120: LD_VAR 0 5
4124: PPUSH
4125: LD_VAR 0 6
4129: PPUSH
4130: CALL_OW 47
4134: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4135: LD_INT 1
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: LD_INT 0
4146: PPUSH
4147: LD_INT 0
4149: PPUSH
4150: LD_VAR 0 9
4154: PPUSH
4155: CALL 2801 0 6
// soldiers_created := soldiers_created + 1 ;
4159: LD_ADDR_LOC 4
4163: PUSH
4164: LD_LOC 4
4168: PUSH
4169: LD_INT 1
4171: PLUS
4172: ST_TO_ADDR
// end ;
4173: GO 4021
4175: POP
4176: POP
// x := start_def [ pos ] [ 1 ] ;
4177: LD_ADDR_VAR 0 4
4181: PUSH
4182: LD_EXP 39
4186: PUSH
4187: LD_VAR 0 3
4191: ARRAY
4192: PUSH
4193: LD_INT 1
4195: ARRAY
4196: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4197: LD_ADDR_VAR 0 5
4201: PUSH
4202: LD_EXP 39
4206: PUSH
4207: LD_VAR 0 3
4211: ARRAY
4212: PUSH
4213: LD_INT 2
4215: ARRAY
4216: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4217: LD_LOC 8
4221: PUSH
4222: LD_EXP 18
4226: MINUS
4227: PPUSH
4228: LD_INT 1
4230: PPUSH
4231: LD_VAR 0 4
4235: PPUSH
4236: LD_VAR 0 5
4240: PPUSH
4241: LD_INT 5
4243: PPUSH
4244: LD_INT 0
4246: PPUSH
4247: CALL 2801 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4251: LD_LOC 5
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: LD_VAR 0 4
4263: PPUSH
4264: LD_VAR 0 5
4268: PPUSH
4269: LD_INT 5
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL 2801 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4279: LD_LOC 7
4283: PPUSH
4284: LD_INT 3
4286: PPUSH
4287: LD_VAR 0 4
4291: PPUSH
4292: LD_VAR 0 5
4296: PPUSH
4297: LD_INT 5
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL 2801 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4307: LD_LOC 6
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_VAR 0 4
4319: PPUSH
4320: LD_VAR 0 5
4324: PPUSH
4325: LD_INT 5
4327: PPUSH
4328: LD_INT 0
4330: PPUSH
4331: CALL 2801 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4335: LD_EXP 10
4339: PUSH
4340: LD_INT 20
4342: PPUSH
4343: LD_VAR 0 1
4347: PPUSH
4348: CALL_OW 321
4352: PUSH
4353: LD_INT 1
4355: EQUAL
4356: AND
4357: IFFALSE 4374
// SetTech ( tech_SibDet , side , state_researched ) ;
4359: LD_INT 20
4361: PPUSH
4362: LD_VAR 0 1
4366: PPUSH
4367: LD_INT 2
4369: PPUSH
4370: CALL_OW 322
// if def_siberite_bomb = 1 then
4374: LD_EXP 13
4378: PUSH
4379: LD_INT 1
4381: EQUAL
4382: IFFALSE 4416
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4384: LD_INT 25
4386: PPUSH
4387: LD_VAR 0 1
4391: PPUSH
4392: LD_INT 1
4394: PPUSH
4395: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4399: LD_INT 73
4401: PPUSH
4402: LD_VAR 0 1
4406: PPUSH
4407: LD_INT 1
4409: PPUSH
4410: CALL_OW 322
// end else
4414: GO 4446
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4416: LD_INT 25
4418: PPUSH
4419: LD_VAR 0 1
4423: PPUSH
4424: LD_INT 0
4426: PPUSH
4427: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4431: LD_INT 73
4433: PPUSH
4434: LD_VAR 0 1
4438: PPUSH
4439: LD_INT 0
4441: PPUSH
4442: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4446: LD_INT 24
4448: PPUSH
4449: LD_VAR 0 1
4453: PPUSH
4454: LD_INT 0
4456: PPUSH
4457: CALL_OW 322
// global_defined := true ;
4461: LD_ADDR_LOC 3
4465: PUSH
4466: LD_INT 1
4468: ST_TO_ADDR
// end ;
4469: LD_VAR 0 2
4473: RET
// function prepare_sides ; var i ; begin
4474: LD_INT 0
4476: PPUSH
4477: PPUSH
// global_units := [ ] ;
4478: LD_ADDR_LOC 2
4482: PUSH
4483: EMPTY
4484: ST_TO_ADDR
// global_defined := false ;
4485: LD_ADDR_LOC 3
4489: PUSH
4490: LD_INT 0
4492: ST_TO_ADDR
// CountClassMembers ;
4493: CALL 4543 0 0
// for i := 1 to 8 do
4497: LD_ADDR_VAR 0 2
4501: PUSH
4502: DOUBLE
4503: LD_INT 1
4505: DEC
4506: ST_TO_ADDR
4507: LD_INT 8
4509: PUSH
4510: FOR_TO
4511: IFFALSE 4536
// if Side_Positions [ i ] then
4513: LD_EXP 34
4517: PUSH
4518: LD_VAR 0 2
4522: ARRAY
4523: IFFALSE 4534
// prepare_side ( i ) ;
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL 3389 0 1
4534: GO 4510
4536: POP
4537: POP
// end ;
4538: LD_VAR 0 1
4542: RET
// function CountClassMembers ; var Mode ; begin
4543: LD_INT 0
4545: PPUSH
4546: PPUSH
// if No_Mechs then
4547: LD_EXP 15
4551: IFFALSE 4563
// Mode := 2 else
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: LD_INT 2
4560: ST_TO_ADDR
4561: GO 4571
// Mode := 1 ;
4563: LD_ADDR_VAR 0 2
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// neng := number_of_people ;
4571: LD_ADDR_LOC 5
4575: PUSH
4576: LD_EXP 19
4580: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4581: LD_ADDR_LOC 8
4585: PUSH
4586: LD_LOC 5
4590: PUSH
4591: LD_INT 4
4593: PUSH
4594: LD_INT 3
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_VAR 0 2
4605: ARRAY
4606: DIV
4607: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4608: LD_LOC 8
4612: PUSH
4613: LD_EXP 18
4617: LESS
4618: IFFALSE 4630
// nsol := number_of_breastworks ;
4620: LD_ADDR_LOC 8
4624: PUSH
4625: LD_EXP 18
4629: ST_TO_ADDR
// neng := neng - nsol ;
4630: LD_ADDR_LOC 5
4634: PUSH
4635: LD_LOC 5
4639: PUSH
4640: LD_LOC 8
4644: MINUS
4645: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4646: LD_ADDR_LOC 6
4650: PUSH
4651: LD_LOC 5
4655: PUSH
4656: LD_INT 3
4658: PUSH
4659: LD_INT 2
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_VAR 0 2
4670: ARRAY
4671: DIV
4672: ST_TO_ADDR
// if ( nsci < 1 ) then
4673: LD_LOC 6
4677: PUSH
4678: LD_INT 1
4680: LESS
4681: IFFALSE 4691
// nsci := 1 ;
4683: LD_ADDR_LOC 6
4687: PUSH
4688: LD_INT 1
4690: ST_TO_ADDR
// neng := neng - nsci ;
4691: LD_ADDR_LOC 5
4695: PUSH
4696: LD_LOC 5
4700: PUSH
4701: LD_LOC 6
4705: MINUS
4706: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4707: LD_ADDR_LOC 7
4711: PUSH
4712: LD_LOC 5
4716: PUSH
4717: LD_INT 2
4719: DIV
4720: PUSH
4721: LD_INT 0
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PUSH
4728: LD_VAR 0 2
4732: ARRAY
4733: ST_TO_ADDR
// neng := neng - nmech ;
4734: LD_ADDR_LOC 5
4738: PUSH
4739: LD_LOC 5
4743: PUSH
4744: LD_LOC 7
4748: MINUS
4749: ST_TO_ADDR
// if ( neng < 1 ) then
4750: LD_LOC 5
4754: PUSH
4755: LD_INT 1
4757: LESS
4758: IFFALSE 4768
// neng := 1 ;
4760: LD_ADDR_LOC 5
4764: PUSH
4765: LD_INT 1
4767: ST_TO_ADDR
// end ;
4768: LD_VAR 0 1
4772: RET
// starting begin disable ( 98 ) ;
4773: LD_INT 98
4775: DISABLE_MARKED
// disable ( 99 ) ;
4776: LD_INT 99
4778: DISABLE_MARKED
// disable ( 400 ) ;
4779: LD_INT 400
4781: DISABLE_MARKED
// disable ( 401 ) ;
4782: LD_INT 401
4784: DISABLE_MARKED
// mp_selectmsg := true ;
4785: LD_ADDR_OWVAR 13
4789: PUSH
4790: LD_INT 1
4792: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4793: CALL 68 0 0
// init_map ;
4797: CALL 1224 0 0
// init_respawning ;
4801: CALL 9402 0 0
// set_shared_visions_and_alliances ;
4805: CALL 2513 0 0
// ResetFog ;
4809: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4813: LD_OWVAR 2
4817: PPUSH
4818: CALL_OW 520
// AnimateTrees ( true ) ;
4822: LD_INT 1
4824: PPUSH
4825: CALL_OW 573
// prepare_sides ;
4829: CALL 4474 0 0
// Init_Win_Condition ;
4833: CALL 8107 0 0
// ShowTimer ;
4837: CALL 7369 0 0
// music_nat := Side_Nations [ your_side ] ;
4841: LD_ADDR_OWVAR 71
4845: PUSH
4846: LD_EXP 35
4850: PUSH
4851: LD_OWVAR 2
4855: ARRAY
4856: ST_TO_ADDR
// if IAmSpec then
4857: CALL_OW 531
4861: IFFALSE 4885
// begin fogoff ( true ) ;
4863: LD_INT 1
4865: PPUSH
4866: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4870: LD_INT 130
4872: PPUSH
4873: LD_INT 100
4875: PPUSH
4876: CALL_OW 86
// enable ( 400 ) ;
4880: LD_INT 400
4882: ENABLE_MARKED
// end else
4883: GO 4931
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4885: LD_EXP 39
4889: PUSH
4890: LD_EXP 34
4894: PUSH
4895: LD_OWVAR 2
4899: ARRAY
4900: ARRAY
4901: PUSH
4902: LD_INT 1
4904: ARRAY
4905: PPUSH
4906: LD_EXP 39
4910: PUSH
4911: LD_EXP 34
4915: PUSH
4916: LD_OWVAR 2
4920: ARRAY
4921: ARRAY
4922: PUSH
4923: LD_INT 2
4925: ARRAY
4926: PPUSH
4927: CALL_OW 86
// end ; InitApeman ;
4931: CALL 5877 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
4935: LD_ADDR_EXP 55
4939: PUSH
4940: LD_INT 1
4942: PUSH
4943: LD_INT 2
4945: PUSH
4946: LD_INT 3
4948: PUSH
4949: LD_INT 4
4951: PUSH
4952: LD_INT 5
4954: PUSH
4955: LD_INT 6
4957: PUSH
4958: LD_INT 7
4960: PUSH
4961: LD_INT 8
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: ST_TO_ADDR
// BeginBuildUp ;
4974: CALL 14304 0 0
// end ;
4978: END
// every 0 0$1 do
4979: GO 4981
4981: DISABLE
// if ( def_siberite_bomb > 1 ) then
4982: LD_EXP 13
4986: PUSH
4987: LD_INT 1
4989: GREATER
4990: IFFALSE 5005
// begin wait ( siberite_bomb_Delay ) ;
4992: LD_EXP 29
4996: PPUSH
4997: CALL_OW 67
// EnableSibFiss ;
5001: CALL 5006 0 0
// end ;
5005: END
// function EnableSibFiss ; var i ; begin
5006: LD_INT 0
5008: PPUSH
5009: PPUSH
// for i := 1 to 8 do
5010: LD_ADDR_VAR 0 2
5014: PUSH
5015: DOUBLE
5016: LD_INT 1
5018: DEC
5019: ST_TO_ADDR
5020: LD_INT 8
5022: PUSH
5023: FOR_TO
5024: IFFALSE 5070
// if Side_Positions [ i ] then
5026: LD_EXP 34
5030: PUSH
5031: LD_VAR 0 2
5035: ARRAY
5036: IFFALSE 5068
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5038: LD_INT 25
5040: PPUSH
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_INT 1
5048: PPUSH
5049: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5053: LD_INT 73
5055: PPUSH
5056: LD_VAR 0 2
5060: PPUSH
5061: LD_INT 1
5063: PPUSH
5064: CALL_OW 322
// end ;
5068: GO 5023
5070: POP
5071: POP
// end ; end_of_file
5072: LD_VAR 0 1
5076: RET
// every 0 0$25 + 0 0$1.0 do var i , areas ;
5077: GO 5079
5079: DISABLE
5080: LD_INT 0
5082: PPUSH
5083: PPUSH
// begin areas := [ Between18 , Between23 , Between45 , Between67 ] ;
5084: LD_ADDR_VAR 0 2
5088: PUSH
5089: LD_INT 10
5091: PUSH
5092: LD_INT 11
5094: PUSH
5095: LD_INT 12
5097: PUSH
5098: LD_INT 13
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: ST_TO_ADDR
// for i := 1 to 4 do
5107: LD_ADDR_VAR 0 1
5111: PUSH
5112: DOUBLE
5113: LD_INT 1
5115: DEC
5116: ST_TO_ADDR
5117: LD_INT 4
5119: PUSH
5120: FOR_TO
5121: IFFALSE 5192
// begin if GetResourceArea ( areas [ i ] , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5123: LD_VAR 0 2
5127: PUSH
5128: LD_VAR 0 1
5132: ARRAY
5133: PPUSH
5134: LD_INT 1
5136: PPUSH
5137: CALL_OW 287
5141: PUSH
5142: LD_INT 200
5144: PUSH
5145: LD_EXP 23
5149: MINUS
5150: PUSH
5151: LD_INT 50
5153: DIVREAL
5154: PUSH
5155: LD_INT 5
5157: MUL
5158: LESS
5159: IFFALSE 5190
// CreateCratesArea ( rand ( 2 , 5 ) , areas [ i ] , true ) ;
5161: LD_INT 2
5163: PPUSH
5164: LD_INT 5
5166: PPUSH
5167: CALL_OW 12
5171: PPUSH
5172: LD_VAR 0 2
5176: PUSH
5177: LD_VAR 0 1
5181: ARRAY
5182: PPUSH
5183: LD_INT 1
5185: PPUSH
5186: CALL_OW 55
// end ;
5190: GO 5120
5192: POP
5193: POP
// if GetResourceArea ( Center , mat_cans ) < ( ( 600 - shipments_density ) / 25 * 5 ) then
5194: LD_INT 14
5196: PPUSH
5197: LD_INT 1
5199: PPUSH
5200: CALL_OW 287
5204: PUSH
5205: LD_INT 600
5207: PUSH
5208: LD_EXP 23
5212: MINUS
5213: PUSH
5214: LD_INT 25
5216: DIVREAL
5217: PUSH
5218: LD_INT 5
5220: MUL
5221: LESS
5222: IFFALSE 5237
// CreateCratesArea ( 5 , Center , true ) ;
5224: LD_INT 5
5226: PPUSH
5227: LD_INT 14
5229: PPUSH
5230: LD_INT 1
5232: PPUSH
5233: CALL_OW 55
// enable ;
5237: ENABLE
// end ;
5238: PPOPN 2
5240: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5241: GO 5243
5243: DISABLE
5244: LD_INT 0
5246: PPUSH
5247: PPUSH
// begin case tick of 1 .. 1 1$0 :
5248: LD_OWVAR 1
5252: PUSH
5253: LD_INT 1
5255: DOUBLE
5256: GREATEREQUAL
5257: IFFALSE 5265
5259: LD_INT 2100
5261: DOUBLE
5262: LESSEQUAL
5263: IFTRUE 5267
5265: GO 5295
5267: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5268: LD_EXP 23
5272: PUSH
5273: LD_INT 100
5275: DIVREAL
5276: PUSH
5277: LD_INT 525
5279: PPUSH
5280: LD_INT 1050
5282: PPUSH
5283: CALL_OW 12
5287: MUL
5288: PPUSH
5289: CALL_OW 67
5293: GO 5597
5295: LD_INT 2100
5297: PUSH
5298: LD_INT 1
5300: PLUS
5301: DOUBLE
5302: GREATEREQUAL
5303: IFFALSE 5311
5305: LD_INT 10500
5307: DOUBLE
5308: LESSEQUAL
5309: IFTRUE 5313
5311: GO 5341
5313: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5314: LD_EXP 23
5318: PUSH
5319: LD_INT 100
5321: DIVREAL
5322: PUSH
5323: LD_INT 1050
5325: PPUSH
5326: LD_INT 1750
5328: PPUSH
5329: CALL_OW 12
5333: MUL
5334: PPUSH
5335: CALL_OW 67
5339: GO 5597
5341: LD_INT 10500
5343: PUSH
5344: LD_INT 1
5346: PLUS
5347: DOUBLE
5348: GREATEREQUAL
5349: IFFALSE 5357
5351: LD_INT 21000
5353: DOUBLE
5354: LESSEQUAL
5355: IFTRUE 5359
5357: GO 5387
5359: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5360: LD_EXP 23
5364: PUSH
5365: LD_INT 100
5367: DIVREAL
5368: PUSH
5369: LD_INT 1750
5371: PPUSH
5372: LD_INT 2100
5374: PPUSH
5375: CALL_OW 12
5379: MUL
5380: PPUSH
5381: CALL_OW 67
5385: GO 5597
5387: LD_INT 21000
5389: PUSH
5390: LD_INT 1
5392: PLUS
5393: DOUBLE
5394: GREATEREQUAL
5395: IFFALSE 5403
5397: LD_INT 42000
5399: DOUBLE
5400: LESSEQUAL
5401: IFTRUE 5405
5403: GO 5433
5405: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5406: LD_EXP 23
5410: PUSH
5411: LD_INT 100
5413: DIVREAL
5414: PUSH
5415: LD_INT 2100
5417: PPUSH
5418: LD_INT 2275
5420: PPUSH
5421: CALL_OW 12
5425: MUL
5426: PPUSH
5427: CALL_OW 67
5431: GO 5597
5433: LD_INT 42000
5435: PUSH
5436: LD_INT 1
5438: PLUS
5439: DOUBLE
5440: GREATEREQUAL
5441: IFFALSE 5449
5443: LD_INT 63000
5445: DOUBLE
5446: LESSEQUAL
5447: IFTRUE 5451
5449: GO 5479
5451: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5452: LD_EXP 23
5456: PUSH
5457: LD_INT 100
5459: DIVREAL
5460: PUSH
5461: LD_INT 2275
5463: PPUSH
5464: LD_INT 2450
5466: PPUSH
5467: CALL_OW 12
5471: MUL
5472: PPUSH
5473: CALL_OW 67
5477: GO 5597
5479: LD_INT 63000
5481: PUSH
5482: LD_INT 1
5484: PLUS
5485: DOUBLE
5486: GREATEREQUAL
5487: IFFALSE 5495
5489: LD_INT 105000
5491: DOUBLE
5492: LESSEQUAL
5493: IFTRUE 5497
5495: GO 5525
5497: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5498: LD_EXP 23
5502: PUSH
5503: LD_INT 100
5505: DIVREAL
5506: PUSH
5507: LD_INT 2450
5509: PPUSH
5510: LD_INT 2800
5512: PPUSH
5513: CALL_OW 12
5517: MUL
5518: PPUSH
5519: CALL_OW 67
5523: GO 5597
5525: LD_INT 105000
5527: PUSH
5528: LD_INT 1
5530: PLUS
5531: DOUBLE
5532: GREATEREQUAL
5533: IFFALSE 5541
5535: LD_INT 630000
5537: DOUBLE
5538: LESSEQUAL
5539: IFTRUE 5543
5541: GO 5571
5543: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5544: LD_EXP 23
5548: PUSH
5549: LD_INT 100
5551: DIVREAL
5552: PUSH
5553: LD_INT 2800
5555: PPUSH
5556: LD_INT 3500
5558: PPUSH
5559: CALL_OW 12
5563: MUL
5564: PPUSH
5565: CALL_OW 67
5569: GO 5597
5571: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5572: LD_EXP 23
5576: PUSH
5577: LD_INT 100
5579: DIVREAL
5580: PUSH
5581: LD_INT 3500
5583: PPUSH
5584: LD_INT 3850
5586: PPUSH
5587: CALL_OW 12
5591: MUL
5592: PPUSH
5593: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5597: LD_ADDR_VAR 0 2
5601: PUSH
5602: LD_INT 3
5604: PPUSH
5605: LD_INT 5
5607: PPUSH
5608: CALL_OW 12
5612: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5613: LD_ADDR_VAR 0 1
5617: PUSH
5618: LD_EXP 34
5622: PUSH
5623: LD_INT 0
5625: PUSH
5626: EMPTY
5627: LIST
5628: DIFF
5629: PUSH
5630: FOR_IN
5631: IFFALSE 5680
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5633: LD_VAR 0 2
5637: PPUSH
5638: LD_EXP 39
5642: PUSH
5643: LD_VAR 0 1
5647: ARRAY
5648: PUSH
5649: LD_INT 1
5651: ARRAY
5652: PPUSH
5653: LD_EXP 39
5657: PUSH
5658: LD_VAR 0 1
5662: ARRAY
5663: PUSH
5664: LD_INT 2
5666: ARRAY
5667: PPUSH
5668: LD_INT 20
5670: PPUSH
5671: LD_INT 1
5673: PPUSH
5674: CALL_OW 56
5678: GO 5630
5680: POP
5681: POP
// enable ;
5682: ENABLE
// end ; end_of_file
5683: PPOPN 2
5685: END
// every 20 20$00 trigger apemanNumber do
5686: LD_EXP 46
5690: IFFALSE 5723
5692: GO 5694
5694: DISABLE
// begin enable ;
5695: ENABLE
// if apeLevel >= 8 then
5696: LD_EXP 51
5700: PUSH
5701: LD_INT 8
5703: GREATEREQUAL
5704: IFFALSE 5709
// disable else
5706: DISABLE
5707: GO 5723
// apeLevel := apeLevel + 1 ;
5709: LD_ADDR_EXP 51
5713: PUSH
5714: LD_EXP 51
5718: PUSH
5719: LD_INT 1
5721: PLUS
5722: ST_TO_ADDR
// end ;
5723: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5724: LD_EXP 46
5728: PUSH
5729: LD_EXP 47
5733: LESS
5734: IFFALSE 5874
5736: GO 5738
5738: DISABLE
5739: LD_INT 0
5741: PPUSH
5742: PPUSH
5743: PPUSH
5744: PPUSH
// begin enable ;
5745: ENABLE
// for i := 1 to apemanPos do
5746: LD_ADDR_VAR 0 1
5750: PUSH
5751: DOUBLE
5752: LD_INT 1
5754: DEC
5755: ST_TO_ADDR
5756: LD_EXP 49
5760: PUSH
5761: FOR_TO
5762: IFFALSE 5872
// begin if apemanPlayerCount [ i ] then
5764: LD_EXP 50
5768: PUSH
5769: LD_VAR 0 1
5773: ARRAY
5774: IFFALSE 5870
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5776: LD_EXP 50
5780: PUSH
5781: LD_VAR 0 1
5785: ARRAY
5786: PUSH
5787: LD_EXP 49
5791: PUSH
5792: LD_VAR 0 1
5796: ARRAY
5797: GREATER
5798: IFFALSE 5870
// begin ape := PrepareApeman ;
5800: LD_ADDR_VAR 0 2
5804: PUSH
5805: CALL 6393 0 0
5809: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5810: LD_VAR 0 2
5814: PPUSH
5815: LD_EXP 52
5819: PUSH
5820: LD_VAR 0 1
5824: ARRAY
5825: PPUSH
5826: LD_INT 0
5828: PPUSH
5829: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5833: LD_ADDR_EXP 49
5837: PUSH
5838: LD_EXP 49
5842: PPUSH
5843: LD_VAR 0 1
5847: PPUSH
5848: LD_EXP 49
5852: PUSH
5853: LD_VAR 0 1
5857: ARRAY
5858: PUSH
5859: LD_VAR 0 2
5863: UNION
5864: PPUSH
5865: CALL_OW 1
5869: ST_TO_ADDR
// end ; end ; end ;
5870: GO 5761
5872: POP
5873: POP
// end ;
5874: PPOPN 4
5876: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5877: LD_INT 0
5879: PPUSH
5880: PPUSH
5881: PPUSH
5882: PPUSH
5883: PPUSH
5884: PPUSH
5885: PPUSH
// playersAmount := 0 ;
5886: LD_ADDR_VAR 0 3
5890: PUSH
5891: LD_INT 0
5893: ST_TO_ADDR
// _apeAreas := [ Ape1Area , Ape2Area , Ape3Area , Ape4Area , Ape5Area , Ape6Area , Ape7Area , Ape8Area ] ;
5894: LD_ADDR_VAR 0 7
5898: PUSH
5899: LD_INT 15
5901: PUSH
5902: LD_INT 19
5904: PUSH
5905: LD_INT 20
5907: PUSH
5908: LD_INT 17
5910: PUSH
5911: LD_INT 18
5913: PUSH
5914: LD_INT 21
5916: PUSH
5917: LD_INT 22
5919: PUSH
5920: LD_INT 16
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5933: LD_ADDR_EXP 52
5937: PUSH
5938: LD_INT 0
5940: PUSH
5941: LD_INT 0
5943: PUSH
5944: LD_INT 0
5946: PUSH
5947: LD_INT 0
5949: PUSH
5950: LD_INT 0
5952: PUSH
5953: LD_INT 0
5955: PUSH
5956: LD_INT 0
5958: PUSH
5959: LD_INT 0
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: ST_TO_ADDR
// for j = 1 to Side_Positions do
5972: LD_ADDR_VAR 0 4
5976: PUSH
5977: DOUBLE
5978: LD_INT 1
5980: DEC
5981: ST_TO_ADDR
5982: LD_EXP 34
5986: PUSH
5987: FOR_TO
5988: IFFALSE 6055
// if Side_Positions [ j ] then
5990: LD_EXP 34
5994: PUSH
5995: LD_VAR 0 4
5999: ARRAY
6000: IFFALSE 6053
// begin playersAmount := playersAmount + 1 ;
6002: LD_ADDR_VAR 0 3
6006: PUSH
6007: LD_VAR 0 3
6011: PUSH
6012: LD_INT 1
6014: PLUS
6015: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6016: LD_ADDR_EXP 52
6020: PUSH
6021: LD_EXP 52
6025: PPUSH
6026: LD_VAR 0 4
6030: PPUSH
6031: LD_VAR 0 7
6035: PUSH
6036: LD_EXP 34
6040: PUSH
6041: LD_VAR 0 4
6045: ARRAY
6046: ARRAY
6047: PPUSH
6048: CALL_OW 1
6052: ST_TO_ADDR
// end ;
6053: GO 5987
6055: POP
6056: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6057: LD_ADDR_EXP 48
6061: PUSH
6062: LD_INT 3
6064: PUSH
6065: LD_EXP 25
6069: MUL
6070: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6071: LD_ADDR_EXP 46
6075: PUSH
6076: LD_VAR 0 3
6080: PUSH
6081: LD_EXP 48
6085: MUL
6086: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6087: LD_ADDR_EXP 47
6091: PUSH
6092: LD_EXP 46
6096: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6097: LD_ADDR_EXP 49
6101: PUSH
6102: LD_INT 0
6104: PUSH
6105: LD_INT 0
6107: PUSH
6108: LD_INT 0
6110: PUSH
6111: LD_INT 0
6113: PUSH
6114: LD_INT 0
6116: PUSH
6117: LD_INT 0
6119: PUSH
6120: LD_INT 0
6122: PUSH
6123: LD_INT 0
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6136: LD_ADDR_EXP 50
6140: PUSH
6141: LD_INT 0
6143: PUSH
6144: LD_INT 0
6146: PUSH
6147: LD_INT 0
6149: PUSH
6150: LD_INT 0
6152: PUSH
6153: LD_INT 0
6155: PUSH
6156: LD_INT 0
6158: PUSH
6159: LD_INT 0
6161: PUSH
6162: LD_INT 0
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: ST_TO_ADDR
// apeLevel := 1 ;
6175: LD_ADDR_EXP 51
6179: PUSH
6180: LD_INT 1
6182: ST_TO_ADDR
// if not apemanNumber then
6183: LD_EXP 46
6187: NOT
6188: IFFALSE 6192
// exit ;
6190: GO 6388
// for i := 1 to apemanPerPlayer do
6192: LD_ADDR_VAR 0 2
6196: PUSH
6197: DOUBLE
6198: LD_INT 1
6200: DEC
6201: ST_TO_ADDR
6202: LD_EXP 48
6206: PUSH
6207: FOR_TO
6208: IFFALSE 6386
// begin for j := 1 to Side_Positions do
6210: LD_ADDR_VAR 0 4
6214: PUSH
6215: DOUBLE
6216: LD_INT 1
6218: DEC
6219: ST_TO_ADDR
6220: LD_EXP 34
6224: PUSH
6225: FOR_TO
6226: IFFALSE 6382
// if Side_Positions [ j ] then
6228: LD_EXP 34
6232: PUSH
6233: LD_VAR 0 4
6237: ARRAY
6238: IFFALSE 6380
// begin pos := Side_Positions [ j ] ;
6240: LD_ADDR_VAR 0 6
6244: PUSH
6245: LD_EXP 34
6249: PUSH
6250: LD_VAR 0 4
6254: ARRAY
6255: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6256: LD_ADDR_EXP 50
6260: PUSH
6261: LD_EXP 50
6265: PPUSH
6266: LD_VAR 0 4
6270: PPUSH
6271: LD_EXP 50
6275: PUSH
6276: LD_VAR 0 4
6280: ARRAY
6281: PUSH
6282: LD_INT 1
6284: PLUS
6285: PPUSH
6286: CALL_OW 1
6290: ST_TO_ADDR
// ape := PrepareApeman ;
6291: LD_ADDR_VAR 0 5
6295: PUSH
6296: CALL 6393 0 0
6300: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6301: LD_ADDR_EXP 49
6305: PUSH
6306: LD_EXP 49
6310: PPUSH
6311: LD_VAR 0 4
6315: PPUSH
6316: LD_EXP 49
6320: PUSH
6321: LD_VAR 0 4
6325: ARRAY
6326: PPUSH
6327: LD_EXP 49
6331: PUSH
6332: LD_VAR 0 4
6336: ARRAY
6337: PUSH
6338: LD_INT 1
6340: PLUS
6341: PPUSH
6342: LD_VAR 0 5
6346: PPUSH
6347: CALL_OW 1
6351: PPUSH
6352: CALL_OW 1
6356: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6357: LD_VAR 0 5
6361: PPUSH
6362: LD_EXP 52
6366: PUSH
6367: LD_VAR 0 4
6371: ARRAY
6372: PPUSH
6373: LD_INT 0
6375: PPUSH
6376: CALL_OW 49
// end ;
6380: GO 6225
6382: POP
6383: POP
// end ;
6384: GO 6207
6386: POP
6387: POP
// end ;
6388: LD_VAR 0 1
6392: RET
// export function PrepareApeman ; var bonus ; begin
6393: LD_INT 0
6395: PPUSH
6396: PPUSH
// uc_side := 0 ;
6397: LD_ADDR_OWVAR 20
6401: PUSH
6402: LD_INT 0
6404: ST_TO_ADDR
// uc_nation := 0 ;
6405: LD_ADDR_OWVAR 21
6409: PUSH
6410: LD_INT 0
6412: ST_TO_ADDR
// InitHc ;
6413: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6417: LD_ADDR_VAR 0 2
6421: PUSH
6422: LD_INT 1
6424: NEG
6425: PUSH
6426: LD_INT 0
6428: PUSH
6429: LD_INT 1
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: PUSH
6437: LD_INT 25
6439: PUSH
6440: LD_INT 12
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PPUSH
6447: CALL_OW 69
6451: PUSH
6452: LD_INT 3
6454: MOD
6455: PUSH
6456: LD_INT 1
6458: PLUS
6459: ARRAY
6460: ST_TO_ADDR
// hc_class := class_apeman ;
6461: LD_ADDR_OWVAR 28
6465: PUSH
6466: LD_INT 12
6468: ST_TO_ADDR
// hc_gallery :=  ;
6469: LD_ADDR_OWVAR 33
6473: PUSH
6474: LD_STRING 
6476: ST_TO_ADDR
// hc_name :=  ;
6477: LD_ADDR_OWVAR 26
6481: PUSH
6482: LD_STRING 
6484: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6485: LD_ADDR_OWVAR 31
6489: PUSH
6490: LD_EXP 51
6494: PUSH
6495: LD_VAR 0 2
6499: PLUS
6500: PUSH
6501: LD_EXP 51
6505: PUSH
6506: LD_VAR 0 2
6510: PLUS
6511: PUSH
6512: LD_EXP 51
6516: PUSH
6517: LD_VAR 0 2
6521: PLUS
6522: PUSH
6523: LD_EXP 51
6527: PUSH
6528: LD_VAR 0 2
6532: PLUS
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6540: LD_ADDR_OWVAR 35
6544: PUSH
6545: LD_INT 10
6547: PUSH
6548: LD_VAR 0 2
6552: MUL
6553: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6554: LD_ADDR_OWVAR 29
6558: PUSH
6559: LD_INT 12
6561: PUSH
6562: LD_INT 12
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: ST_TO_ADDR
// result := CreateHuman ;
6569: LD_ADDR_VAR 0 1
6573: PUSH
6574: CALL_OW 44
6578: ST_TO_ADDR
// end ;
6579: LD_VAR 0 1
6583: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6584: LD_INT 0
6586: PPUSH
6587: PPUSH
6588: PPUSH
// if not ape then
6589: LD_VAR 0 1
6593: NOT
6594: IFFALSE 6598
// exit ;
6596: GO 6723
// side := GetSide ( ape ) ;
6598: LD_ADDR_VAR 0 3
6602: PUSH
6603: LD_VAR 0 1
6607: PPUSH
6608: CALL_OW 255
6612: ST_TO_ADDR
// if not side then
6613: LD_VAR 0 3
6617: NOT
6618: IFFALSE 6672
// begin for i = 1 to apemanPos do
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: DOUBLE
6626: LD_INT 1
6628: DEC
6629: ST_TO_ADDR
6630: LD_EXP 49
6634: PUSH
6635: FOR_TO
6636: IFFALSE 6670
// if ape in apemanPos [ i ] then
6638: LD_VAR 0 1
6642: PUSH
6643: LD_EXP 49
6647: PUSH
6648: LD_VAR 0 4
6652: ARRAY
6653: IN
6654: IFFALSE 6668
// begin side := i ;
6656: LD_ADDR_VAR 0 3
6660: PUSH
6661: LD_VAR 0 4
6665: ST_TO_ADDR
// break ;
6666: GO 6670
// end ;
6668: GO 6635
6670: POP
6671: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6672: LD_ADDR_EXP 49
6676: PUSH
6677: LD_EXP 49
6681: PPUSH
6682: LD_VAR 0 3
6686: PPUSH
6687: LD_EXP 49
6691: PUSH
6692: LD_VAR 0 3
6696: ARRAY
6697: PUSH
6698: LD_VAR 0 1
6702: DIFF
6703: PPUSH
6704: CALL_OW 1
6708: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6709: LD_ADDR_EXP 46
6713: PUSH
6714: LD_EXP 46
6718: PUSH
6719: LD_INT 1
6721: MINUS
6722: ST_TO_ADDR
// end ; end_of_file
6723: LD_VAR 0 2
6727: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6728: LD_VAR 0 1
6732: PPUSH
6733: CALL_OW 266
6737: PUSH
6738: LD_INT 0
6740: PUSH
6741: LD_INT 1
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: IN
6748: IFFALSE 6773
// SetBName ( b , @ & GetSide ( b ) ) ;
6750: LD_VAR 0 1
6754: PPUSH
6755: LD_STRING @
6757: PUSH
6758: LD_VAR 0 1
6762: PPUSH
6763: CALL_OW 255
6767: STR
6768: PPUSH
6769: CALL_OW 500
// end ;
6773: PPOPN 2
6775: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6776: LD_VAR 0 1
6780: PPUSH
6781: CALL_OW 266
6785: PUSH
6786: LD_INT 0
6788: PUSH
6789: LD_INT 1
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: IN
6796: IFFALSE 6821
// SetBName ( b , @ & GetSide ( b ) ) ;
6798: LD_VAR 0 1
6802: PPUSH
6803: LD_STRING @
6805: PUSH
6806: LD_VAR 0 1
6810: PPUSH
6811: CALL_OW 255
6815: STR
6816: PPUSH
6817: CALL_OW 500
// end ;
6821: PPOPN 3
6823: END
// on VehicleConstructed ( veh , fac ) do var side ;
6824: LD_INT 0
6826: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6827: LD_VAR 0 1
6831: PPUSH
6832: CALL_OW 263
6836: PUSH
6837: LD_INT 5
6839: EQUAL
6840: IFFALSE 6982
// begin side := GetSide ( veh ) ;
6842: LD_ADDR_VAR 0 3
6846: PUSH
6847: LD_VAR 0 1
6851: PPUSH
6852: CALL_OW 255
6856: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6857: LD_ADDR_EXP 49
6861: PUSH
6862: LD_EXP 49
6866: PPUSH
6867: LD_VAR 0 3
6871: PPUSH
6872: LD_EXP 49
6876: PUSH
6877: LD_VAR 0 3
6881: ARRAY
6882: PPUSH
6883: LD_INT 52
6885: PUSH
6886: EMPTY
6887: LIST
6888: PPUSH
6889: CALL_OW 72
6893: PUSH
6894: LD_INT 22
6896: PUSH
6897: LD_VAR 0 3
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 2
6908: PUSH
6909: LD_INT 33
6911: PUSH
6912: LD_INT 5
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 25
6921: PUSH
6922: LD_INT 12
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: LD_INT 25
6931: PUSH
6932: LD_INT 15
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 25
6941: PUSH
6942: LD_INT 16
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 25
6951: PUSH
6952: LD_INT 17
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PPUSH
6971: CALL_OW 69
6975: UNION
6976: PPUSH
6977: CALL_OW 1
6981: ST_TO_ADDR
// end ; end ;
6982: PPOPN 3
6984: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6985: LD_INT 0
6987: PPUSH
6988: PPUSH
6989: PPUSH
6990: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6991: LD_VAR 0 1
6995: PPUSH
6996: CALL_OW 257
7000: PUSH
7001: LD_INT 12
7003: PUSH
7004: LD_INT 15
7006: PUSH
7007: LD_INT 17
7009: PUSH
7010: LD_INT 16
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: IN
7019: PUSH
7020: LD_VAR 0 1
7024: PPUSH
7025: CALL_OW 263
7029: PUSH
7030: LD_INT 5
7032: EQUAL
7033: OR
7034: IFFALSE 7045
// ApeKilled ( j ) ;
7036: LD_VAR 0 1
7040: PPUSH
7041: CALL 6584 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7045: LD_VAR 0 1
7049: PPUSH
7050: CALL_OW 266
7054: PUSH
7055: LD_INT 0
7057: PUSH
7058: LD_INT 1
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: IN
7065: IFFALSE 7147
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7067: LD_ADDR_VAR 0 4
7071: PUSH
7072: LD_EXP 34
7076: PUSH
7077: LD_VAR 0 1
7081: PPUSH
7082: CALL_OW 255
7086: ARRAY
7087: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7088: LD_ADDR_VAR 0 2
7092: PUSH
7093: LD_EXP 39
7097: PUSH
7098: LD_VAR 0 4
7102: ARRAY
7103: PUSH
7104: LD_INT 1
7106: ARRAY
7107: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7108: LD_ADDR_VAR 0 3
7112: PUSH
7113: LD_EXP 39
7117: PUSH
7118: LD_VAR 0 4
7122: ARRAY
7123: PUSH
7124: LD_INT 2
7126: ARRAY
7127: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7128: LD_VAR 0 2
7132: PPUSH
7133: LD_VAR 0 3
7137: PPUSH
7138: CALL_OW 420
7142: PPUSH
7143: CALL_OW 419
// end ; end ;
7147: PPOPN 5
7149: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7150: LD_VAR 0 1
7154: PPUSH
7155: LD_VAR 0 2
7159: PPUSH
7160: LD_VAR 0 3
7164: PPUSH
7165: LD_OWVAR 2
7169: PPUSH
7170: CALL 9896 0 4
7174: PPOPN 3
7176: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7177: LD_INT 0
7179: PPUSH
7180: PPUSH
// for un in battle_flags_id do
7181: LD_ADDR_VAR 0 2
7185: PUSH
7186: LD_EXP 44
7190: PUSH
7191: FOR_IN
7192: IFFALSE 7267
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7194: LD_VAR 0 2
7198: PPUSH
7199: LD_INT 1
7201: PUSH
7202: LD_LOC 9
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 2
7213: PUSH
7214: LD_LOC 9
7218: PUSH
7219: LD_INT 2
7221: DIV
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: LD_INT 3
7229: PUSH
7230: LD_LOC 9
7234: PUSH
7235: LD_INT 5
7237: DIV
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 20
7245: PUSH
7246: LD_LOC 9
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: PPUSH
7261: CALL_OW 423
7265: GO 7191
7267: POP
7268: POP
// end ;
7269: LD_VAR 0 1
7273: RET
// every 1 do var un ;
7274: GO 7276
7276: DISABLE
7277: LD_INT 0
7279: PPUSH
// begin if not def_morale_flags then
7280: LD_EXP 9
7284: NOT
7285: IFFALSE 7289
// exit ;
7287: GO 7366
// if not morale_decreasing_time then
7289: LD_EXP 24
7293: NOT
7294: IFFALSE 7298
// exit ;
7296: GO 7366
// strength = 100 ;
7298: LD_ADDR_LOC 9
7302: PUSH
7303: LD_INT 100
7305: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7306: LD_EXP 24
7310: PPUSH
7311: CALL_OW 67
// strength := strength - 1 ;
7315: LD_ADDR_LOC 9
7319: PUSH
7320: LD_LOC 9
7324: PUSH
7325: LD_INT 1
7327: MINUS
7328: ST_TO_ADDR
// Update_Flags ;
7329: CALL 7177 0 0
// until not strength ;
7333: LD_LOC 9
7337: NOT
7338: IFFALSE 7306
// for un in battle_flags_id do
7340: LD_ADDR_VAR 0 1
7344: PUSH
7345: LD_EXP 44
7349: PUSH
7350: FOR_IN
7351: IFFALSE 7364
// KillBattleFlag ( un ) ;
7353: LD_VAR 0 1
7357: PPUSH
7358: CALL_OW 419
7362: GO 7350
7364: POP
7365: POP
// end ; end_of_file
7366: PPOPN 1
7368: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7369: LD_INT 0
7371: PPUSH
7372: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7373: LD_ADDR_VAR 0 2
7377: PUSH
7378: LD_STRING #Multi1x1-Time
7380: PUSH
7381: LD_OWVAR 1
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: ST_TO_ADDR
// if WaitServerStrings then
7390: LD_EXP 54
7394: IFFALSE 7412
// AllStrings = AllStrings ^ WaitServerStrings ;
7396: LD_ADDR_VAR 0 2
7400: PUSH
7401: LD_VAR 0 2
7405: PUSH
7406: LD_EXP 54
7410: ADD
7411: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7412: LD_INT 0
7414: PUSH
7415: LD_EXP 29
7419: PUSH
7420: LD_OWVAR 1
7424: MINUS
7425: LESSEQUAL
7426: IFFALSE 7457
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7428: LD_ADDR_VAR 0 2
7432: PUSH
7433: LD_VAR 0 2
7437: PUSH
7438: LD_STRING #allowedsibbomb
7440: PUSH
7441: LD_EXP 29
7445: PUSH
7446: LD_OWVAR 1
7450: MINUS
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: ADD
7456: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7457: LD_INT 0
7459: PUSH
7460: LD_EXP 57
7464: PUSH
7465: LD_OWVAR 1
7469: MINUS
7470: LESSEQUAL
7471: IFFALSE 7502
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7473: LD_ADDR_VAR 0 2
7477: PUSH
7478: LD_VAR 0 2
7482: PUSH
7483: LD_STRING #builduptime
7485: PUSH
7486: LD_EXP 57
7490: PUSH
7491: LD_OWVAR 1
7495: MINUS
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: ADD
7501: ST_TO_ADDR
// if ( ExtraStrings ) then
7502: LD_EXP 53
7506: IFFALSE 7528
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7508: LD_ADDR_VAR 0 2
7512: PUSH
7513: LD_VAR 0 2
7517: PUSH
7518: LD_STRING 
7520: ADD
7521: PUSH
7522: LD_EXP 53
7526: ADD
7527: ST_TO_ADDR
// Display_Strings := AllStrings ;
7528: LD_ADDR_OWVAR 47
7532: PUSH
7533: LD_VAR 0 2
7537: ST_TO_ADDR
// end ;
7538: LD_VAR 0 1
7542: RET
// every 0 0$1 do
7543: GO 7545
7545: DISABLE
// begin ShowTimer ;
7546: CALL 7369 0 0
// enable ;
7550: ENABLE
// end ; end_of_file
7551: END
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
7552: LD_INT 0
7554: PPUSH
7555: PPUSH
7556: PPUSH
7557: PPUSH
7558: PPUSH
7559: PPUSH
7560: PPUSH
7561: PPUSH
7562: PPUSH
// for i := 1 to 8 do
7563: LD_ADDR_VAR 0 2
7567: PUSH
7568: DOUBLE
7569: LD_INT 1
7571: DEC
7572: ST_TO_ADDR
7573: LD_INT 8
7575: PUSH
7576: FOR_TO
7577: IFFALSE 7961
// begin if Side_Positions [ i ] then
7579: LD_EXP 34
7583: PUSH
7584: LD_VAR 0 2
7588: ARRAY
7589: IFFALSE 7959
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
7591: LD_ADDR_VAR 0 7
7595: PUSH
7596: LD_INT 22
7598: PUSH
7599: LD_VAR 0 2
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 21
7610: PUSH
7611: LD_INT 1
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PPUSH
7622: CALL_OW 69
7626: PUSH
7627: LD_INT 0
7629: PLUS
7630: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7631: LD_ADDR_VAR 0 9
7635: PUSH
7636: LD_INT 22
7638: PUSH
7639: LD_VAR 0 2
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: LD_INT 30
7653: PUSH
7654: LD_INT 0
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: LD_INT 30
7663: PUSH
7664: LD_INT 1
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: LIST
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PPUSH
7680: CALL_OW 69
7684: ST_TO_ADDR
// crates := 0 ;
7685: LD_ADDR_VAR 0 4
7689: PUSH
7690: LD_INT 0
7692: ST_TO_ADDR
// oil := 0 ;
7693: LD_ADDR_VAR 0 5
7697: PUSH
7698: LD_INT 0
7700: ST_TO_ADDR
// sib := 0 ;
7701: LD_ADDR_VAR 0 6
7705: PUSH
7706: LD_INT 0
7708: ST_TO_ADDR
// if bases then
7709: LD_VAR 0 9
7713: IFFALSE 7819
// begin for j in bases do
7715: LD_ADDR_VAR 0 3
7719: PUSH
7720: LD_VAR 0 9
7724: PUSH
7725: FOR_IN
7726: IFFALSE 7817
// begin base := GetBase ( j ) ;
7728: LD_ADDR_VAR 0 8
7732: PUSH
7733: LD_VAR 0 3
7737: PPUSH
7738: CALL_OW 274
7742: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
7743: LD_ADDR_VAR 0 4
7747: PUSH
7748: LD_VAR 0 4
7752: PUSH
7753: LD_VAR 0 8
7757: PPUSH
7758: LD_INT 1
7760: PPUSH
7761: CALL_OW 275
7765: PLUS
7766: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
7767: LD_ADDR_VAR 0 5
7771: PUSH
7772: LD_VAR 0 5
7776: PUSH
7777: LD_VAR 0 8
7781: PPUSH
7782: LD_INT 2
7784: PPUSH
7785: CALL_OW 275
7789: PLUS
7790: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
7791: LD_ADDR_VAR 0 6
7795: PUSH
7796: LD_VAR 0 6
7800: PUSH
7801: LD_VAR 0 8
7805: PPUSH
7806: LD_INT 3
7808: PPUSH
7809: CALL_OW 275
7813: PLUS
7814: ST_TO_ADDR
// end ;
7815: GO 7725
7817: POP
7818: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
7819: LD_STRING setSpecText(
7821: PUSH
7822: LD_VAR 0 2
7826: STR
7827: PUSH
7828: LD_STRING ,
7830: STR
7831: PUSH
7832: LD_INT 2
7834: STR
7835: PUSH
7836: LD_STRING ,
7838: STR
7839: PUSH
7840: LD_VAR 0 4
7844: STR
7845: PUSH
7846: LD_STRING )
7848: STR
7849: PPUSH
7850: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
7854: LD_STRING setSpecText(
7856: PUSH
7857: LD_VAR 0 2
7861: STR
7862: PUSH
7863: LD_STRING ,
7865: STR
7866: PUSH
7867: LD_INT 3
7869: STR
7870: PUSH
7871: LD_STRING ,
7873: STR
7874: PUSH
7875: LD_VAR 0 5
7879: STR
7880: PUSH
7881: LD_STRING )
7883: STR
7884: PPUSH
7885: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
7889: LD_STRING setSpecText(
7891: PUSH
7892: LD_VAR 0 2
7896: STR
7897: PUSH
7898: LD_STRING ,
7900: STR
7901: PUSH
7902: LD_INT 4
7904: STR
7905: PUSH
7906: LD_STRING ,
7908: STR
7909: PUSH
7910: LD_VAR 0 6
7914: STR
7915: PUSH
7916: LD_STRING )
7918: STR
7919: PPUSH
7920: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
7924: LD_STRING setSpecText(
7926: PUSH
7927: LD_VAR 0 2
7931: STR
7932: PUSH
7933: LD_STRING ,
7935: STR
7936: PUSH
7937: LD_INT 5
7939: STR
7940: PUSH
7941: LD_STRING ,
7943: STR
7944: PUSH
7945: LD_VAR 0 7
7949: STR
7950: PUSH
7951: LD_STRING )
7953: STR
7954: PPUSH
7955: CALL_OW 559
// end ; end ;
7959: GO 7576
7961: POP
7962: POP
// end ;
7963: LD_VAR 0 1
7967: RET
// every 0 0$1 do
7968: GO 7970
7970: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
7971: LD_STRING setSpecLogoNumber(
7973: PUSH
7974: LD_INT 2
7976: STR
7977: PUSH
7978: LD_STRING ,
7980: STR
7981: PUSH
7982: LD_INT 1
7984: STR
7985: PUSH
7986: LD_STRING )
7988: STR
7989: PPUSH
7990: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
7994: LD_STRING setSpecLogoNumber(
7996: PUSH
7997: LD_INT 3
7999: STR
8000: PUSH
8001: LD_STRING ,
8003: STR
8004: PUSH
8005: LD_INT 2
8007: STR
8008: PUSH
8009: LD_STRING )
8011: STR
8012: PPUSH
8013: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
8017: LD_STRING setSpecLogoNumber(
8019: PUSH
8020: LD_INT 4
8022: STR
8023: PUSH
8024: LD_STRING ,
8026: STR
8027: PUSH
8028: LD_INT 3
8030: STR
8031: PUSH
8032: LD_STRING )
8034: STR
8035: PPUSH
8036: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
8040: LD_STRING setSpecLogoNumber(
8042: PUSH
8043: LD_INT 5
8045: STR
8046: PUSH
8047: LD_STRING ,
8049: STR
8050: PUSH
8051: LD_INT 4
8053: STR
8054: PUSH
8055: LD_STRING )
8057: STR
8058: PPUSH
8059: CALL_OW 559
// end ;
8063: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
8064: LD_INT 2
8066: PUSH
8067: LD_INT 30
8069: PUSH
8070: LD_INT 0
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: LD_INT 30
8079: PUSH
8080: LD_INT 1
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: LIST
8091: PPUSH
8092: CALL_OW 69
8096: IFFALSE 8106
8098: GO 8100
8100: DISABLE
// begin enable ;
8101: ENABLE
// UpdateSpectatorBar ;
8102: CALL 7552 0 0
// end ; end_of_file
8106: END
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8107: LD_INT 0
8109: PPUSH
8110: PPUSH
// enable ( 98 ) ;
8111: LD_INT 98
8113: ENABLE_MARKED
// GameEnded = false ;
8114: LD_ADDR_LOC 15
8118: PUSH
8119: LD_INT 0
8121: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8122: LD_ADDR_LOC 14
8126: PUSH
8127: LD_INT 0
8129: PUSH
8130: LD_INT 0
8132: PUSH
8133: LD_INT 0
8135: PUSH
8136: LD_INT 0
8138: PUSH
8139: LD_INT 0
8141: PUSH
8142: LD_INT 0
8144: PUSH
8145: LD_INT 0
8147: PUSH
8148: LD_INT 0
8150: PUSH
8151: EMPTY
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: ST_TO_ADDR
// unfoged = false ;
8161: LD_ADDR_LOC 16
8165: PUSH
8166: LD_INT 0
8168: ST_TO_ADDR
// defeated_specs := [ ] ;
8169: LD_ADDR_LOC 17
8173: PUSH
8174: EMPTY
8175: ST_TO_ADDR
// for i = 1 to side_positions do
8176: LD_ADDR_VAR 0 2
8180: PUSH
8181: DOUBLE
8182: LD_INT 1
8184: DEC
8185: ST_TO_ADDR
8186: LD_EXP 34
8190: PUSH
8191: FOR_TO
8192: IFFALSE 8232
// if not side_positions [ i ] then
8194: LD_EXP 34
8198: PUSH
8199: LD_VAR 0 2
8203: ARRAY
8204: NOT
8205: IFFALSE 8230
// defeated = replace ( defeated , i , true ) ;
8207: LD_ADDR_LOC 14
8211: PUSH
8212: LD_LOC 14
8216: PPUSH
8217: LD_VAR 0 2
8221: PPUSH
8222: LD_INT 1
8224: PPUSH
8225: CALL_OW 1
8229: ST_TO_ADDR
8230: GO 8191
8232: POP
8233: POP
// end ;
8234: LD_VAR 0 1
8238: RET
// function CanWinLoose ; begin
8239: LD_INT 0
8241: PPUSH
// Result := true ;
8242: LD_ADDR_VAR 0 1
8246: PUSH
8247: LD_INT 1
8249: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8250: CALL_OW 518
8254: PUSH
8255: CALL_OW 519
8259: PUSH
8260: LD_INT 0
8262: GREATER
8263: AND
8264: IFFALSE 8274
// Result := false ;
8266: LD_ADDR_VAR 0 1
8270: PUSH
8271: LD_INT 0
8273: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8274: CALL_OW 531
8278: PUSH
8279: CALL_OW 519
8283: PUSH
8284: LD_INT 1
8286: GREATER
8287: AND
8288: IFFALSE 8298
// Result := false ;
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: LD_INT 0
8297: ST_TO_ADDR
// end ;
8298: LD_VAR 0 1
8302: RET
// export function HasPower ( i ) ; var k , h ; begin
8303: LD_INT 0
8305: PPUSH
8306: PPUSH
8307: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8308: LD_VAR 0 1
8312: PPUSH
8313: CALL_OW 108
8317: NOT
8318: PUSH
8319: LD_EXP 33
8323: PUSH
8324: LD_VAR 0 1
8328: ARRAY
8329: NOT
8330: AND
8331: PUSH
8332: LD_OWVAR 4
8336: AND
8337: IFFALSE 8349
// begin result = false ;
8339: LD_ADDR_VAR 0 2
8343: PUSH
8344: LD_INT 0
8346: ST_TO_ADDR
// end else
8347: GO 8644
// case def_win_rules of 0 :
8349: LD_EXP 30
8353: PUSH
8354: LD_INT 0
8356: DOUBLE
8357: EQUAL
8358: IFTRUE 8362
8360: GO 8525
8362: POP
// if def_people_respawning then
8363: LD_EXP 11
8367: IFFALSE 8458
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8369: LD_ADDR_VAR 0 2
8373: PUSH
8374: LD_INT 22
8376: PUSH
8377: LD_VAR 0 1
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: PUSH
8386: LD_INT 2
8388: PUSH
8389: LD_INT 21
8391: PUSH
8392: LD_INT 1
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: LD_INT 33
8401: PUSH
8402: LD_INT 3
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: LD_INT 33
8411: PUSH
8412: LD_INT 5
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PUSH
8419: LD_INT 30
8421: PUSH
8422: LD_INT 0
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: PUSH
8429: LD_INT 30
8431: PUSH
8432: LD_INT 1
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PPUSH
8451: CALL_OW 69
8455: ST_TO_ADDR
8456: GO 8523
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8458: LD_ADDR_VAR 0 2
8462: PUSH
8463: LD_INT 22
8465: PUSH
8466: LD_VAR 0 1
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: LD_INT 2
8477: PUSH
8478: LD_INT 21
8480: PUSH
8481: LD_INT 1
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: LD_INT 33
8490: PUSH
8491: LD_INT 3
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: LD_INT 33
8500: PUSH
8501: LD_INT 5
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PPUSH
8518: CALL_OW 69
8522: ST_TO_ADDR
8523: GO 8644
8525: LD_INT 1
8527: DOUBLE
8528: EQUAL
8529: IFTRUE 8533
8531: GO 8572
8533: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8534: LD_ADDR_VAR 0 2
8538: PUSH
8539: LD_INT 22
8541: PUSH
8542: LD_VAR 0 1
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 21
8553: PUSH
8554: LD_INT 1
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PPUSH
8565: CALL_OW 69
8569: ST_TO_ADDR
8570: GO 8644
8572: LD_INT 2
8574: DOUBLE
8575: EQUAL
8576: IFTRUE 8580
8578: GO 8643
8580: POP
// begin h = false ;
8581: LD_ADDR_VAR 0 4
8585: PUSH
8586: LD_INT 0
8588: ST_TO_ADDR
// for k in heroes [ i ] do
8589: LD_ADDR_VAR 0 3
8593: PUSH
8594: LD_EXP 45
8598: PUSH
8599: LD_VAR 0 1
8603: ARRAY
8604: PUSH
8605: FOR_IN
8606: IFFALSE 8629
// if IsLive ( k ) then
8608: LD_VAR 0 3
8612: PPUSH
8613: CALL_OW 300
8617: IFFALSE 8627
// h = true ;
8619: LD_ADDR_VAR 0 4
8623: PUSH
8624: LD_INT 1
8626: ST_TO_ADDR
8627: GO 8605
8629: POP
8630: POP
// Result := h ;
8631: LD_ADDR_VAR 0 2
8635: PUSH
8636: LD_VAR 0 4
8640: ST_TO_ADDR
// end ; end ;
8641: GO 8644
8643: POP
// end ;
8644: LD_VAR 0 2
8648: RET
// function AlliedSides ( i , j ) ; begin
8649: LD_INT 0
8651: PPUSH
// Result := false ;
8652: LD_ADDR_VAR 0 3
8656: PUSH
8657: LD_INT 0
8659: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8660: LD_VAR 0 1
8664: PPUSH
8665: LD_VAR 0 2
8669: PPUSH
8670: CALL_OW 81
8674: PUSH
8675: LD_INT 1
8677: EQUAL
8678: PUSH
8679: LD_VAR 0 2
8683: PPUSH
8684: LD_VAR 0 1
8688: PPUSH
8689: CALL_OW 81
8693: PUSH
8694: LD_INT 1
8696: EQUAL
8697: AND
8698: PUSH
8699: LD_VAR 0 1
8703: PPUSH
8704: CALL_OW 83
8708: AND
8709: PUSH
8710: LD_VAR 0 2
8714: PPUSH
8715: CALL_OW 83
8719: AND
8720: IFFALSE 8730
// Result := true ;
8722: LD_ADDR_VAR 0 3
8726: PUSH
8727: LD_INT 1
8729: ST_TO_ADDR
// end ;
8730: LD_VAR 0 3
8734: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8735: CALL 8239 0 0
8739: PUSH
8740: LD_LOC 15
8744: NOT
8745: AND
8746: IFFALSE 8762
8748: GO 8750
8750: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8751: LD_ADDR_EXP 54
8755: PUSH
8756: LD_STRING #Player-Ended
8758: PUSH
8759: EMPTY
8760: LIST
8761: ST_TO_ADDR
8762: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8763: CALL 8239 0 0
8767: PUSH
8768: LD_LOC 15
8772: AND
8773: IFFALSE 8782
8775: GO 8777
8777: DISABLE
// YouLostInMultiplayer ;
8778: CALL_OW 107
8782: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8783: CALL 8239 0 0
8787: NOT
8788: PUSH
8789: CALL_OW 531
8793: NOT
8794: AND
8795: IFFALSE 8811
8797: GO 8799
8799: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8800: LD_ADDR_EXP 54
8804: PUSH
8805: LD_STRING #server-wait
8807: PUSH
8808: EMPTY
8809: LIST
8810: ST_TO_ADDR
8811: END
// every 100 trigger IAmSpec do
8812: CALL_OW 531
8816: IFFALSE 8832
8818: GO 8820
8820: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8821: LD_ADDR_EXP 54
8825: PUSH
8826: LD_STRING #Player-IAmSpec
8828: PUSH
8829: EMPTY
8830: LIST
8831: ST_TO_ADDR
8832: END
// every 100 trigger GameEnded and IAmSpec do
8833: LD_LOC 15
8837: PUSH
8838: CALL_OW 531
8842: AND
8843: IFFALSE 8852
8845: GO 8847
8847: DISABLE
// YouLostInMultiplayer ;
8848: CALL_OW 107
8852: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8853: CALL 8239 0 0
8857: PUSH
8858: LD_LOC 15
8862: NOT
8863: AND
8864: IFFALSE 8880
8866: GO 8868
8868: DISABLE
// WaitServerStrings = [ $player-win ] ;
8869: LD_ADDR_EXP 54
8873: PUSH
8874: LD_STRING $player-win
8876: PUSH
8877: EMPTY
8878: LIST
8879: ST_TO_ADDR
8880: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8881: CALL 8239 0 0
8885: PUSH
8886: LD_LOC 15
8890: AND
8891: IFFALSE 8915
8893: GO 8895
8895: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8896: LD_EXP 35
8900: PUSH
8901: LD_OWVAR 7
8905: ARRAY
8906: PPUSH
8907: CALL 9938 0 1
// YouWinInMultiplayer ;
8911: CALL_OW 106
// end ;
8915: END
// every 100 trigger isEditor marked 401 do
8916: LD_OWVAR 84
8920: IFFALSE 8936
8922: GO 8924
8924: DISABLE
// Debug_Strings = [ You won ] ;
8925: LD_ADDR_OWVAR 48
8929: PUSH
8930: LD_STRING You won
8932: PUSH
8933: EMPTY
8934: LIST
8935: ST_TO_ADDR
8936: END
// every 100 trigger isEditor marked 400 do
8937: LD_OWVAR 84
8941: IFFALSE 8957
8943: GO 8945
8945: DISABLE
// Debug_Strings = [ You loss ] ;
8946: LD_ADDR_OWVAR 48
8950: PUSH
8951: LD_STRING You loss
8953: PUSH
8954: EMPTY
8955: LIST
8956: ST_TO_ADDR
8957: END
// every 100 marked 98 do var i , un ;
8958: GO 8960
8960: DISABLE
8961: LD_INT 0
8963: PPUSH
8964: PPUSH
// begin for i = 1 to side_positions do
8965: LD_ADDR_VAR 0 1
8969: PUSH
8970: DOUBLE
8971: LD_INT 1
8973: DEC
8974: ST_TO_ADDR
8975: LD_EXP 34
8979: PUSH
8980: FOR_TO
8981: IFFALSE 9068
// begin if side_positions [ i ] then
8983: LD_EXP 34
8987: PUSH
8988: LD_VAR 0 1
8992: ARRAY
8993: IFFALSE 9066
// if not HasPower ( i ) and not defeated [ i ] then
8995: LD_VAR 0 1
8999: PPUSH
9000: CALL 8303 0 1
9004: NOT
9005: PUSH
9006: LD_LOC 14
9010: PUSH
9011: LD_VAR 0 1
9015: ARRAY
9016: NOT
9017: AND
9018: IFFALSE 9066
// begin defeated = replace ( defeated , i , true ) ;
9020: LD_ADDR_LOC 14
9024: PUSH
9025: LD_LOC 14
9029: PPUSH
9030: LD_VAR 0 1
9034: PPUSH
9035: LD_INT 1
9037: PPUSH
9038: CALL_OW 1
9042: ST_TO_ADDR
// if i = mp_player_side then
9043: LD_VAR 0 1
9047: PUSH
9048: LD_OWVAR 7
9052: EQUAL
9053: IFFALSE 9066
// begin Multiplayer_Loose_Message ;
9055: CALL_OW 521
// SetPlayerSpectator ( ) ;
9059: CALL_OW 572
// enable ( 400 ) ;
9063: LD_INT 400
9065: ENABLE_MARKED
// end ; end ; end ;
9066: GO 8980
9068: POP
9069: POP
// DidGameEnd ;
9070: CALL 9085 0 0
// if not GameEnded then
9074: LD_LOC 15
9078: NOT
9079: IFFALSE 9082
// enable ;
9081: ENABLE
// end ;
9082: PPOPN 2
9084: END
// function DidGameEnd ; var i , k , enemy ; begin
9085: LD_INT 0
9087: PPUSH
9088: PPUSH
9089: PPUSH
9090: PPUSH
// enemy = [ ] ;
9091: LD_ADDR_VAR 0 4
9095: PUSH
9096: EMPTY
9097: ST_TO_ADDR
// for i = 1 to side_positions do
9098: LD_ADDR_VAR 0 2
9102: PUSH
9103: DOUBLE
9104: LD_INT 1
9106: DEC
9107: ST_TO_ADDR
9108: LD_EXP 34
9112: PUSH
9113: FOR_TO
9114: IFFALSE 9208
// if not defeated [ i ] then
9116: LD_LOC 14
9120: PUSH
9121: LD_VAR 0 2
9125: ARRAY
9126: NOT
9127: IFFALSE 9206
// for k = 1 to side_positions do
9129: LD_ADDR_VAR 0 3
9133: PUSH
9134: DOUBLE
9135: LD_INT 1
9137: DEC
9138: ST_TO_ADDR
9139: LD_EXP 34
9143: PUSH
9144: FOR_TO
9145: IFFALSE 9204
// if not defeated [ k ] then
9147: LD_LOC 14
9151: PUSH
9152: LD_VAR 0 3
9156: ARRAY
9157: NOT
9158: IFFALSE 9202
// if not AlliedSides ( i , k ) then
9160: LD_VAR 0 2
9164: PPUSH
9165: LD_VAR 0 3
9169: PPUSH
9170: CALL 8649 0 2
9174: NOT
9175: IFFALSE 9202
// enemy = enemy ^ [ i , k ] ;
9177: LD_ADDR_VAR 0 4
9181: PUSH
9182: LD_VAR 0 4
9186: PUSH
9187: LD_VAR 0 2
9191: PUSH
9192: LD_VAR 0 3
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: ADD
9201: ST_TO_ADDR
9202: GO 9144
9204: POP
9205: POP
9206: GO 9113
9208: POP
9209: POP
// if not enemy then
9210: LD_VAR 0 4
9214: NOT
9215: IFFALSE 9241
// begin GameEnded = true ;
9217: LD_ADDR_LOC 15
9221: PUSH
9222: LD_INT 1
9224: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9225: LD_LOC 14
9229: PUSH
9230: LD_OWVAR 7
9234: ARRAY
9235: NOT
9236: IFFALSE 9241
// enable ( 401 ) ;
9238: LD_INT 401
9240: ENABLE_MARKED
// end ; end ;
9241: LD_VAR 0 1
9245: RET
// function unfog ; var k , friends ; begin
9246: LD_INT 0
9248: PPUSH
9249: PPUSH
9250: PPUSH
// for k = 1 to side_positions do
9251: LD_ADDR_VAR 0 2
9255: PUSH
9256: DOUBLE
9257: LD_INT 1
9259: DEC
9260: ST_TO_ADDR
9261: LD_EXP 34
9265: PUSH
9266: FOR_TO
9267: IFFALSE 9323
// if not defeated [ k ] then
9269: LD_LOC 14
9273: PUSH
9274: LD_VAR 0 2
9278: ARRAY
9279: NOT
9280: IFFALSE 9321
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9282: LD_OWVAR 7
9286: PPUSH
9287: LD_VAR 0 2
9291: PPUSH
9292: CALL_OW 81
9296: PUSH
9297: LD_INT 1
9299: PUSH
9300: EMPTY
9301: LIST
9302: IN
9303: IFFALSE 9321
// friends = friends ^ k ;
9305: LD_ADDR_VAR 0 3
9309: PUSH
9310: LD_VAR 0 3
9314: PUSH
9315: LD_VAR 0 2
9319: ADD
9320: ST_TO_ADDR
9321: GO 9266
9323: POP
9324: POP
// if not friends then
9325: LD_VAR 0 3
9329: NOT
9330: IFFALSE 9344
// begin SetPlayerSpectator ( ) ;
9332: CALL_OW 572
// unfoged = true ;
9336: LD_ADDR_LOC 16
9340: PUSH
9341: LD_INT 1
9343: ST_TO_ADDR
// end ; end ;
9344: LD_VAR 0 1
9348: RET
// export function MakeGameEnd ; begin
9349: LD_INT 0
9351: PPUSH
// SetPlayerSpectator ( ) ;
9352: CALL_OW 572
// unfoged = true ;
9356: LD_ADDR_LOC 16
9360: PUSH
9361: LD_INT 1
9363: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9364: LD_INT 175
9366: PPUSH
9367: CALL_OW 67
// GameEnded = true ;
9371: LD_ADDR_LOC 15
9375: PUSH
9376: LD_INT 1
9378: ST_TO_ADDR
// end ;
9379: LD_VAR 0 1
9383: RET
// export function GetGameEnded ; begin
9384: LD_INT 0
9386: PPUSH
// result = GameEnded ;
9387: LD_ADDR_VAR 0 1
9391: PUSH
9392: LD_LOC 15
9396: ST_TO_ADDR
// end ; end_of_file
9397: LD_VAR 0 1
9401: RET
// var respawn , inqueue ; export function init_respawning ; begin
9402: LD_INT 0
9404: PPUSH
// respawn := Rand ( 1 , 8 ) ;
9405: LD_ADDR_LOC 18
9409: PUSH
9410: LD_INT 1
9412: PPUSH
9413: LD_INT 8
9415: PPUSH
9416: CALL_OW 12
9420: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9421: LD_ADDR_LOC 19
9425: PUSH
9426: LD_INT 0
9428: PUSH
9429: LD_INT 0
9431: PUSH
9432: LD_INT 0
9434: PUSH
9435: LD_INT 0
9437: PUSH
9438: LD_INT 0
9440: PUSH
9441: LD_INT 0
9443: PUSH
9444: LD_INT 0
9446: PUSH
9447: LD_INT 0
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: ST_TO_ADDR
// end ;
9460: LD_VAR 0 1
9464: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
9465: GO 9467
9467: DISABLE
9468: LD_INT 0
9470: PPUSH
9471: PPUSH
9472: PPUSH
// begin if respawning_time_max = 0 then
9473: LD_EXP 28
9477: PUSH
9478: LD_INT 0
9480: EQUAL
9481: IFFALSE 9485
// exit ;
9483: GO 9893
// if respawn = 8 then
9485: LD_LOC 18
9489: PUSH
9490: LD_INT 8
9492: EQUAL
9493: IFFALSE 9505
// respawn := 1 else
9495: LD_ADDR_LOC 18
9499: PUSH
9500: LD_INT 1
9502: ST_TO_ADDR
9503: GO 9519
// respawn := respawn + 1 ;
9505: LD_ADDR_LOC 18
9509: PUSH
9510: LD_LOC 18
9514: PUSH
9515: LD_INT 1
9517: PLUS
9518: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
9519: LD_EXP 34
9523: PUSH
9524: LD_LOC 18
9528: ARRAY
9529: PUSH
9530: LD_LOC 19
9534: PUSH
9535: LD_LOC 18
9539: ARRAY
9540: NOT
9541: AND
9542: IFFALSE 9892
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
9544: LD_ADDR_VAR 0 1
9548: PUSH
9549: LD_INT 21
9551: PUSH
9552: LD_INT 1
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: LD_INT 22
9561: PUSH
9562: LD_LOC 18
9566: PUSH
9567: EMPTY
9568: LIST
9569: LIST
9570: PUSH
9571: LD_INT 3
9573: PUSH
9574: LD_INT 23
9576: PUSH
9577: LD_INT 0
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: PPUSH
9590: CALL_OW 69
9594: ST_TO_ADDR
// if n < number_of_people then
9595: LD_VAR 0 1
9599: PUSH
9600: LD_EXP 19
9604: LESS
9605: IFFALSE 9889
// begin aktresp := respawn ;
9607: LD_ADDR_VAR 0 3
9611: PUSH
9612: LD_LOC 18
9616: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
9617: LD_ADDR_LOC 19
9621: PUSH
9622: LD_LOC 19
9626: PPUSH
9627: LD_VAR 0 3
9631: PPUSH
9632: LD_INT 1
9634: PPUSH
9635: CALL_OW 1
9639: ST_TO_ADDR
// enable ;
9640: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
9641: LD_EXP 27
9645: PPUSH
9646: LD_EXP 28
9650: PPUSH
9651: CALL_OW 12
9655: PPUSH
9656: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
9660: LD_ADDR_LOC 19
9664: PUSH
9665: LD_LOC 19
9669: PPUSH
9670: LD_VAR 0 3
9674: PPUSH
9675: LD_INT 0
9677: PPUSH
9678: CALL_OW 1
9682: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
9683: LD_ADDR_VAR 0 2
9687: PUSH
9688: LD_INT 21
9690: PUSH
9691: LD_INT 3
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 2
9700: PUSH
9701: LD_INT 30
9703: PUSH
9704: LD_INT 0
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PUSH
9711: LD_INT 30
9713: PUSH
9714: LD_INT 1
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: LIST
9725: PUSH
9726: LD_INT 50
9728: PUSH
9729: EMPTY
9730: LIST
9731: PUSH
9732: LD_INT 22
9734: PUSH
9735: LD_VAR 0 3
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: PPUSH
9750: CALL_OW 69
9754: ST_TO_ADDR
// if dep = 0 then
9755: LD_VAR 0 2
9759: PUSH
9760: LD_INT 0
9762: EQUAL
9763: IFFALSE 9767
// exit ;
9765: GO 9893
// hc_name :=  ;
9767: LD_ADDR_OWVAR 26
9771: PUSH
9772: LD_STRING 
9774: ST_TO_ADDR
// hc_importance := 0 ;
9775: LD_ADDR_OWVAR 32
9779: PUSH
9780: LD_INT 0
9782: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
9783: LD_INT 0
9785: PPUSH
9786: LD_INT 0
9788: PPUSH
9789: LD_EXP 20
9793: PUSH
9794: LD_INT 2
9796: DIV
9797: PPUSH
9798: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
9802: LD_ADDR_OWVAR 21
9806: PUSH
9807: LD_EXP 35
9811: PUSH
9812: LD_VAR 0 3
9816: ARRAY
9817: ST_TO_ADDR
// uc_side := aktresp ;
9818: LD_ADDR_OWVAR 20
9822: PUSH
9823: LD_VAR 0 3
9827: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
9828: LD_ADDR_VAR 0 2
9832: PUSH
9833: LD_VAR 0 2
9837: PUSH
9838: LD_INT 1
9840: PPUSH
9841: LD_VAR 0 2
9845: PPUSH
9846: CALL_OW 12
9850: ARRAY
9851: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
9852: CALL_OW 44
9856: PPUSH
9857: LD_VAR 0 2
9861: PPUSH
9862: CALL_OW 250
9866: PPUSH
9867: LD_VAR 0 2
9871: PPUSH
9872: CALL_OW 251
9876: PPUSH
9877: LD_INT 7
9879: PPUSH
9880: LD_INT 1
9882: PPUSH
9883: CALL_OW 50
// end else
9887: GO 9890
// enable ;
9889: ENABLE
// end else
9890: GO 9893
// enable ;
9892: ENABLE
// end ; end_of_file
9893: PPOPN 3
9895: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
9896: LD_INT 0
9898: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
9899: LD_VAR 0 1
9903: PPUSH
9904: CALL_OW 255
9908: PUSH
9909: LD_VAR 0 4
9913: EQUAL
9914: IFFALSE 9933
// begin SetAchievement ( ACH_RAD ) ;
9916: LD_STRING ACH_RAD
9918: PPUSH
9919: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
9923: LD_STRING ACH_NL
9925: PPUSH
9926: LD_INT 1
9928: PPUSH
9929: CALL_OW 564
// end end ;
9933: LD_VAR 0 5
9937: RET
// export function SA_Win ( side ) ; begin
9938: LD_INT 0
9940: PPUSH
// case side of 1 :
9941: LD_VAR 0 1
9945: PUSH
9946: LD_INT 1
9948: DOUBLE
9949: EQUAL
9950: IFTRUE 9954
9952: GO 9967
9954: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
9955: LD_STRING ACH_AH
9957: PPUSH
9958: LD_INT 1
9960: PPUSH
9961: CALL_OW 564
9965: GO 10130
9967: LD_INT 2
9969: DOUBLE
9970: EQUAL
9971: IFTRUE 9975
9973: GO 9988
9975: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
9976: LD_STRING ACH_E
9978: PPUSH
9979: LD_INT 1
9981: PPUSH
9982: CALL_OW 564
9986: GO 10130
9988: LD_INT 3
9990: DOUBLE
9991: EQUAL
9992: IFTRUE 9996
9994: GO 10009
9996: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
9997: LD_STRING ACH_OOL
9999: PPUSH
10000: LD_INT 1
10002: PPUSH
10003: CALL_OW 564
10007: GO 10130
10009: LD_INT 1
10011: PUSH
10012: LD_INT 2
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: DOUBLE
10019: EQUAL
10020: IFTRUE 10024
10022: GO 10049
10024: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10025: LD_STRING ACH_AH
10027: PPUSH
10028: LD_REAL  5.00000000000000E-0001
10031: PPUSH
10032: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10036: LD_STRING ACH_E
10038: PPUSH
10039: LD_REAL  5.00000000000000E-0001
10042: PPUSH
10043: CALL_OW 564
// end ; [ 2 , 3 ] :
10047: GO 10130
10049: LD_INT 2
10051: PUSH
10052: LD_INT 3
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: DOUBLE
10059: EQUAL
10060: IFTRUE 10064
10062: GO 10089
10064: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
10065: LD_STRING ACH_OOL
10067: PPUSH
10068: LD_REAL  5.00000000000000E-0001
10071: PPUSH
10072: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10076: LD_STRING ACH_E
10078: PPUSH
10079: LD_REAL  5.00000000000000E-0001
10082: PPUSH
10083: CALL_OW 564
// end ; [ 3 , 1 ] :
10087: GO 10130
10089: LD_INT 3
10091: PUSH
10092: LD_INT 1
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: DOUBLE
10099: EQUAL
10100: IFTRUE 10104
10102: GO 10129
10104: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10105: LD_STRING ACH_AH
10107: PPUSH
10108: LD_REAL  5.00000000000000E-0001
10111: PPUSH
10112: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
10116: LD_STRING ACH_OOL
10118: PPUSH
10119: LD_REAL  5.00000000000000E-0001
10122: PPUSH
10123: CALL_OW 564
// end ; end ;
10127: GO 10130
10129: POP
// end ; end_of_file
10130: LD_VAR 0 2
10134: RET
// export function SetMpTechs ( ) ; var side , i ; begin
10135: LD_INT 0
10137: PPUSH
10138: PPUSH
10139: PPUSH
// for side = 1 to 8 do
10140: LD_ADDR_VAR 0 2
10144: PUSH
10145: DOUBLE
10146: LD_INT 1
10148: DEC
10149: ST_TO_ADDR
10150: LD_INT 8
10152: PUSH
10153: FOR_TO
10154: IFFALSE 10275
// begin for i = 1 to 72 do
10156: LD_ADDR_VAR 0 3
10160: PUSH
10161: DOUBLE
10162: LD_INT 1
10164: DEC
10165: ST_TO_ADDR
10166: LD_INT 72
10168: PUSH
10169: FOR_TO
10170: IFFALSE 10201
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
10172: LD_VAR 0 3
10176: PPUSH
10177: LD_VAR 0 2
10181: PPUSH
10182: LD_INT 0
10184: PPUSH
10185: LD_VAR 0 3
10189: PPUSH
10190: CALL_OW 565
10194: PPUSH
10195: CALL_OW 322
10199: GO 10169
10201: POP
10202: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
10203: LD_INT 73
10205: PPUSH
10206: LD_VAR 0 2
10210: PPUSH
10211: LD_INT 0
10213: PPUSH
10214: LD_INT 25
10216: PPUSH
10217: CALL_OW 565
10221: PPUSH
10222: CALL_OW 322
// for i = 0 to 40 do
10226: LD_ADDR_VAR 0 3
10230: PUSH
10231: DOUBLE
10232: LD_INT 0
10234: DEC
10235: ST_TO_ADDR
10236: LD_INT 40
10238: PUSH
10239: FOR_TO
10240: IFFALSE 10271
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
10242: LD_VAR 0 3
10246: PPUSH
10247: LD_VAR 0 2
10251: PPUSH
10252: LD_INT 1
10254: PPUSH
10255: LD_VAR 0 3
10259: PPUSH
10260: CALL_OW 565
10264: PPUSH
10265: CALL_OW 324
10269: GO 10239
10271: POP
10272: POP
// end ;
10273: GO 10153
10275: POP
10276: POP
// end ;
10277: LD_VAR 0 1
10281: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
10282: LD_INT 0
10284: PPUSH
10285: PPUSH
10286: PPUSH
// for side = 1 to 8 do
10287: LD_ADDR_VAR 0 3
10291: PUSH
10292: DOUBLE
10293: LD_INT 1
10295: DEC
10296: ST_TO_ADDR
10297: LD_INT 8
10299: PUSH
10300: FOR_TO
10301: IFFALSE 14297
// begin for i = 1 to 73 do
10303: LD_ADDR_VAR 0 4
10307: PUSH
10308: DOUBLE
10309: LD_INT 1
10311: DEC
10312: ST_TO_ADDR
10313: LD_INT 73
10315: PUSH
10316: FOR_TO
10317: IFFALSE 10338
// SetTech ( i , side , state_disabled ) ;
10319: LD_VAR 0 4
10323: PPUSH
10324: LD_VAR 0 3
10328: PPUSH
10329: LD_INT 0
10331: PPUSH
10332: CALL_OW 322
10336: GO 10316
10338: POP
10339: POP
// for i = 0 to 40 do
10340: LD_ADDR_VAR 0 4
10344: PUSH
10345: DOUBLE
10346: LD_INT 0
10348: DEC
10349: ST_TO_ADDR
10350: LD_INT 40
10352: PUSH
10353: FOR_TO
10354: IFFALSE 10375
// SetRestrict ( i , side , false ) ;
10356: LD_VAR 0 4
10360: PPUSH
10361: LD_VAR 0 3
10365: PPUSH
10366: LD_INT 0
10368: PPUSH
10369: CALL_OW 324
10373: GO 10353
10375: POP
10376: POP
// case level of 1 :
10377: LD_VAR 0 1
10381: PUSH
10382: LD_INT 1
10384: DOUBLE
10385: EQUAL
10386: IFTRUE 10390
10388: GO 10543
10390: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10391: LD_INT 35
10393: PPUSH
10394: LD_VAR 0 3
10398: PPUSH
10399: LD_INT 1
10401: PPUSH
10402: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10406: LD_INT 45
10408: PPUSH
10409: LD_VAR 0 3
10413: PPUSH
10414: LD_INT 1
10416: PPUSH
10417: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10421: LD_INT 46
10423: PPUSH
10424: LD_VAR 0 3
10428: PPUSH
10429: LD_INT 1
10431: PPUSH
10432: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10436: LD_INT 47
10438: PPUSH
10439: LD_VAR 0 3
10443: PPUSH
10444: LD_INT 1
10446: PPUSH
10447: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10451: LD_INT 0
10453: PPUSH
10454: LD_VAR 0 3
10458: PPUSH
10459: LD_INT 1
10461: PPUSH
10462: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10466: LD_INT 2
10468: PPUSH
10469: LD_VAR 0 3
10473: PPUSH
10474: LD_INT 1
10476: PPUSH
10477: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10481: LD_INT 4
10483: PPUSH
10484: LD_VAR 0 3
10488: PPUSH
10489: LD_INT 1
10491: PPUSH
10492: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10496: LD_INT 6
10498: PPUSH
10499: LD_VAR 0 3
10503: PPUSH
10504: LD_INT 1
10506: PPUSH
10507: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10511: LD_INT 29
10513: PPUSH
10514: LD_VAR 0 3
10518: PPUSH
10519: LD_INT 1
10521: PPUSH
10522: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10526: LD_INT 31
10528: PPUSH
10529: LD_VAR 0 3
10533: PPUSH
10534: LD_INT 1
10536: PPUSH
10537: CALL_OW 324
// end ; 2 :
10541: GO 14295
10543: LD_INT 2
10545: DOUBLE
10546: EQUAL
10547: IFTRUE 10551
10549: GO 10749
10551: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10552: LD_INT 35
10554: PPUSH
10555: LD_VAR 0 3
10559: PPUSH
10560: LD_INT 1
10562: PPUSH
10563: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10567: LD_INT 45
10569: PPUSH
10570: LD_VAR 0 3
10574: PPUSH
10575: LD_INT 1
10577: PPUSH
10578: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10582: LD_INT 46
10584: PPUSH
10585: LD_VAR 0 3
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10597: LD_INT 47
10599: PPUSH
10600: LD_VAR 0 3
10604: PPUSH
10605: LD_INT 1
10607: PPUSH
10608: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10612: LD_INT 1
10614: PPUSH
10615: LD_VAR 0 3
10619: PPUSH
10620: LD_INT 1
10622: PPUSH
10623: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10627: LD_INT 2
10629: PPUSH
10630: LD_VAR 0 3
10634: PPUSH
10635: LD_INT 1
10637: PPUSH
10638: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10642: LD_INT 11
10644: PPUSH
10645: LD_VAR 0 3
10649: PPUSH
10650: LD_INT 1
10652: PPUSH
10653: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10657: LD_INT 0
10659: PPUSH
10660: LD_VAR 0 3
10664: PPUSH
10665: LD_INT 1
10667: PPUSH
10668: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10672: LD_INT 2
10674: PPUSH
10675: LD_VAR 0 3
10679: PPUSH
10680: LD_INT 1
10682: PPUSH
10683: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10687: LD_INT 4
10689: PPUSH
10690: LD_VAR 0 3
10694: PPUSH
10695: LD_INT 1
10697: PPUSH
10698: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10702: LD_INT 6
10704: PPUSH
10705: LD_VAR 0 3
10709: PPUSH
10710: LD_INT 1
10712: PPUSH
10713: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10717: LD_INT 29
10719: PPUSH
10720: LD_VAR 0 3
10724: PPUSH
10725: LD_INT 1
10727: PPUSH
10728: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10732: LD_INT 31
10734: PPUSH
10735: LD_VAR 0 3
10739: PPUSH
10740: LD_INT 1
10742: PPUSH
10743: CALL_OW 324
// end ; 3 :
10747: GO 14295
10749: LD_INT 3
10751: DOUBLE
10752: EQUAL
10753: IFTRUE 10757
10755: GO 11210
10757: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10758: LD_INT 35
10760: PPUSH
10761: LD_VAR 0 3
10765: PPUSH
10766: LD_INT 1
10768: PPUSH
10769: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10773: LD_INT 45
10775: PPUSH
10776: LD_VAR 0 3
10780: PPUSH
10781: LD_INT 1
10783: PPUSH
10784: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10788: LD_INT 46
10790: PPUSH
10791: LD_VAR 0 3
10795: PPUSH
10796: LD_INT 1
10798: PPUSH
10799: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10803: LD_INT 47
10805: PPUSH
10806: LD_VAR 0 3
10810: PPUSH
10811: LD_INT 1
10813: PPUSH
10814: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10818: LD_INT 1
10820: PPUSH
10821: LD_VAR 0 3
10825: PPUSH
10826: LD_INT 1
10828: PPUSH
10829: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10833: LD_INT 2
10835: PPUSH
10836: LD_VAR 0 3
10840: PPUSH
10841: LD_INT 1
10843: PPUSH
10844: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10848: LD_INT 11
10850: PPUSH
10851: LD_VAR 0 3
10855: PPUSH
10856: LD_INT 1
10858: PPUSH
10859: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10863: LD_INT 48
10865: PPUSH
10866: LD_VAR 0 3
10870: PPUSH
10871: LD_INT 1
10873: PPUSH
10874: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10878: LD_INT 69
10880: PPUSH
10881: LD_VAR 0 3
10885: PPUSH
10886: LD_INT 1
10888: PPUSH
10889: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10893: LD_INT 39
10895: PPUSH
10896: LD_VAR 0 3
10900: PPUSH
10901: LD_INT 1
10903: PPUSH
10904: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10908: LD_INT 43
10910: PPUSH
10911: LD_VAR 0 3
10915: PPUSH
10916: LD_INT 1
10918: PPUSH
10919: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10923: LD_INT 51
10925: PPUSH
10926: LD_VAR 0 3
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10938: LD_INT 6
10940: PPUSH
10941: LD_VAR 0 3
10945: PPUSH
10946: LD_INT 1
10948: PPUSH
10949: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10953: LD_INT 0
10955: PPUSH
10956: LD_VAR 0 3
10960: PPUSH
10961: LD_INT 1
10963: PPUSH
10964: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10968: LD_INT 2
10970: PPUSH
10971: LD_VAR 0 3
10975: PPUSH
10976: LD_INT 1
10978: PPUSH
10979: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10983: LD_INT 3
10985: PPUSH
10986: LD_VAR 0 3
10990: PPUSH
10991: LD_INT 1
10993: PPUSH
10994: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10998: LD_INT 4
11000: PPUSH
11001: LD_VAR 0 3
11005: PPUSH
11006: LD_INT 1
11008: PPUSH
11009: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11013: LD_INT 6
11015: PPUSH
11016: LD_VAR 0 3
11020: PPUSH
11021: LD_INT 1
11023: PPUSH
11024: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11028: LD_INT 7
11030: PPUSH
11031: LD_VAR 0 3
11035: PPUSH
11036: LD_INT 1
11038: PPUSH
11039: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11043: LD_INT 8
11045: PPUSH
11046: LD_VAR 0 3
11050: PPUSH
11051: LD_INT 1
11053: PPUSH
11054: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11058: LD_INT 10
11060: PPUSH
11061: LD_VAR 0 3
11065: PPUSH
11066: LD_INT 1
11068: PPUSH
11069: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11073: LD_INT 15
11075: PPUSH
11076: LD_VAR 0 3
11080: PPUSH
11081: LD_INT 1
11083: PPUSH
11084: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11088: LD_INT 16
11090: PPUSH
11091: LD_VAR 0 3
11095: PPUSH
11096: LD_INT 1
11098: PPUSH
11099: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11103: LD_INT 17
11105: PPUSH
11106: LD_VAR 0 3
11110: PPUSH
11111: LD_INT 1
11113: PPUSH
11114: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11118: LD_INT 20
11120: PPUSH
11121: LD_VAR 0 3
11125: PPUSH
11126: LD_INT 1
11128: PPUSH
11129: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11133: LD_INT 26
11135: PPUSH
11136: LD_VAR 0 3
11140: PPUSH
11141: LD_INT 1
11143: PPUSH
11144: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11148: LD_INT 27
11150: PPUSH
11151: LD_VAR 0 3
11155: PPUSH
11156: LD_INT 1
11158: PPUSH
11159: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11163: LD_INT 29
11165: PPUSH
11166: LD_VAR 0 3
11170: PPUSH
11171: LD_INT 1
11173: PPUSH
11174: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11178: LD_INT 31
11180: PPUSH
11181: LD_VAR 0 3
11185: PPUSH
11186: LD_INT 1
11188: PPUSH
11189: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11193: LD_INT 32
11195: PPUSH
11196: LD_VAR 0 3
11200: PPUSH
11201: LD_INT 1
11203: PPUSH
11204: CALL_OW 324
// end ; 4 :
11208: GO 14295
11210: LD_INT 4
11212: DOUBLE
11213: EQUAL
11214: IFTRUE 11218
11216: GO 12166
11218: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11219: LD_INT 35
11221: PPUSH
11222: LD_VAR 0 3
11226: PPUSH
11227: LD_INT 1
11229: PPUSH
11230: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11234: LD_INT 45
11236: PPUSH
11237: LD_VAR 0 3
11241: PPUSH
11242: LD_INT 1
11244: PPUSH
11245: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11249: LD_INT 46
11251: PPUSH
11252: LD_VAR 0 3
11256: PPUSH
11257: LD_INT 1
11259: PPUSH
11260: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11264: LD_INT 47
11266: PPUSH
11267: LD_VAR 0 3
11271: PPUSH
11272: LD_INT 1
11274: PPUSH
11275: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11279: LD_INT 1
11281: PPUSH
11282: LD_VAR 0 3
11286: PPUSH
11287: LD_INT 1
11289: PPUSH
11290: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11294: LD_INT 2
11296: PPUSH
11297: LD_VAR 0 3
11301: PPUSH
11302: LD_INT 1
11304: PPUSH
11305: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11309: LD_INT 11
11311: PPUSH
11312: LD_VAR 0 3
11316: PPUSH
11317: LD_INT 1
11319: PPUSH
11320: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11324: LD_INT 20
11326: PPUSH
11327: LD_VAR 0 3
11331: PPUSH
11332: LD_INT 1
11334: PPUSH
11335: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11339: LD_INT 48
11341: PPUSH
11342: LD_VAR 0 3
11346: PPUSH
11347: LD_INT 1
11349: PPUSH
11350: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11354: LD_INT 49
11356: PPUSH
11357: LD_VAR 0 3
11361: PPUSH
11362: LD_INT 1
11364: PPUSH
11365: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11369: LD_INT 69
11371: PPUSH
11372: LD_VAR 0 3
11376: PPUSH
11377: LD_INT 1
11379: PPUSH
11380: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11384: LD_INT 39
11386: PPUSH
11387: LD_VAR 0 3
11391: PPUSH
11392: LD_INT 1
11394: PPUSH
11395: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11399: LD_INT 34
11401: PPUSH
11402: LD_VAR 0 3
11406: PPUSH
11407: LD_INT 1
11409: PPUSH
11410: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11414: LD_INT 42
11416: PPUSH
11417: LD_VAR 0 3
11421: PPUSH
11422: LD_INT 1
11424: PPUSH
11425: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11429: LD_INT 44
11431: PPUSH
11432: LD_VAR 0 3
11436: PPUSH
11437: LD_INT 1
11439: PPUSH
11440: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11444: LD_INT 41
11446: PPUSH
11447: LD_VAR 0 3
11451: PPUSH
11452: LD_INT 1
11454: PPUSH
11455: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11459: LD_INT 43
11461: PPUSH
11462: LD_VAR 0 3
11466: PPUSH
11467: LD_INT 1
11469: PPUSH
11470: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11474: LD_INT 70
11476: PPUSH
11477: LD_VAR 0 3
11481: PPUSH
11482: LD_INT 1
11484: PPUSH
11485: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11489: LD_INT 51
11491: PPUSH
11492: LD_VAR 0 3
11496: PPUSH
11497: LD_INT 1
11499: PPUSH
11500: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11504: LD_INT 52
11506: PPUSH
11507: LD_VAR 0 3
11511: PPUSH
11512: LD_INT 1
11514: PPUSH
11515: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11519: LD_INT 6
11521: PPUSH
11522: LD_VAR 0 3
11526: PPUSH
11527: LD_INT 1
11529: PPUSH
11530: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11534: LD_INT 15
11536: PPUSH
11537: LD_VAR 0 3
11541: PPUSH
11542: LD_INT 1
11544: PPUSH
11545: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11549: LD_INT 7
11551: PPUSH
11552: LD_VAR 0 3
11556: PPUSH
11557: LD_INT 1
11559: PPUSH
11560: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11564: LD_INT 12
11566: PPUSH
11567: LD_VAR 0 3
11571: PPUSH
11572: LD_INT 1
11574: PPUSH
11575: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11579: LD_INT 18
11581: PPUSH
11582: LD_VAR 0 3
11586: PPUSH
11587: LD_INT 1
11589: PPUSH
11590: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11594: LD_INT 60
11596: PPUSH
11597: LD_VAR 0 3
11601: PPUSH
11602: LD_INT 1
11604: PPUSH
11605: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11609: LD_INT 9
11611: PPUSH
11612: LD_VAR 0 3
11616: PPUSH
11617: LD_INT 1
11619: PPUSH
11620: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11624: LD_INT 30
11626: PPUSH
11627: LD_VAR 0 3
11631: PPUSH
11632: LD_INT 1
11634: PPUSH
11635: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11639: LD_INT 37
11641: PPUSH
11642: LD_VAR 0 3
11646: PPUSH
11647: LD_INT 1
11649: PPUSH
11650: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11654: LD_INT 5
11656: PPUSH
11657: LD_VAR 0 3
11661: PPUSH
11662: LD_INT 1
11664: PPUSH
11665: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11669: LD_INT 66
11671: PPUSH
11672: LD_VAR 0 3
11676: PPUSH
11677: LD_INT 1
11679: PPUSH
11680: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11684: LD_INT 21
11686: PPUSH
11687: LD_VAR 0 3
11691: PPUSH
11692: LD_INT 1
11694: PPUSH
11695: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11699: LD_INT 22
11701: PPUSH
11702: LD_VAR 0 3
11706: PPUSH
11707: LD_INT 1
11709: PPUSH
11710: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11714: LD_INT 54
11716: PPUSH
11717: LD_VAR 0 3
11721: PPUSH
11722: LD_INT 1
11724: PPUSH
11725: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11729: LD_INT 0
11731: PPUSH
11732: LD_VAR 0 3
11736: PPUSH
11737: LD_INT 1
11739: PPUSH
11740: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11744: LD_INT 1
11746: PPUSH
11747: LD_VAR 0 3
11751: PPUSH
11752: LD_INT 1
11754: PPUSH
11755: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11759: LD_INT 2
11761: PPUSH
11762: LD_VAR 0 3
11766: PPUSH
11767: LD_INT 1
11769: PPUSH
11770: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11774: LD_INT 3
11776: PPUSH
11777: LD_VAR 0 3
11781: PPUSH
11782: LD_INT 1
11784: PPUSH
11785: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11789: LD_INT 4
11791: PPUSH
11792: LD_VAR 0 3
11796: PPUSH
11797: LD_INT 1
11799: PPUSH
11800: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11804: LD_INT 5
11806: PPUSH
11807: LD_VAR 0 3
11811: PPUSH
11812: LD_INT 1
11814: PPUSH
11815: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11819: LD_INT 6
11821: PPUSH
11822: LD_VAR 0 3
11826: PPUSH
11827: LD_INT 1
11829: PPUSH
11830: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11834: LD_INT 7
11836: PPUSH
11837: LD_VAR 0 3
11841: PPUSH
11842: LD_INT 1
11844: PPUSH
11845: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11849: LD_INT 8
11851: PPUSH
11852: LD_VAR 0 3
11856: PPUSH
11857: LD_INT 1
11859: PPUSH
11860: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11864: LD_INT 10
11866: PPUSH
11867: LD_VAR 0 3
11871: PPUSH
11872: LD_INT 1
11874: PPUSH
11875: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11879: LD_INT 11
11881: PPUSH
11882: LD_VAR 0 3
11886: PPUSH
11887: LD_INT 1
11889: PPUSH
11890: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11894: LD_INT 12
11896: PPUSH
11897: LD_VAR 0 3
11901: PPUSH
11902: LD_INT 1
11904: PPUSH
11905: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11909: LD_INT 13
11911: PPUSH
11912: LD_VAR 0 3
11916: PPUSH
11917: LD_INT 1
11919: PPUSH
11920: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11924: LD_INT 14
11926: PPUSH
11927: LD_VAR 0 3
11931: PPUSH
11932: LD_INT 1
11934: PPUSH
11935: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11939: LD_INT 15
11941: PPUSH
11942: LD_VAR 0 3
11946: PPUSH
11947: LD_INT 1
11949: PPUSH
11950: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11954: LD_INT 16
11956: PPUSH
11957: LD_VAR 0 3
11961: PPUSH
11962: LD_INT 1
11964: PPUSH
11965: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11969: LD_INT 17
11971: PPUSH
11972: LD_VAR 0 3
11976: PPUSH
11977: LD_INT 1
11979: PPUSH
11980: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11984: LD_INT 19
11986: PPUSH
11987: LD_VAR 0 3
11991: PPUSH
11992: LD_INT 1
11994: PPUSH
11995: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11999: LD_INT 20
12001: PPUSH
12002: LD_VAR 0 3
12006: PPUSH
12007: LD_INT 1
12009: PPUSH
12010: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12014: LD_INT 21
12016: PPUSH
12017: LD_VAR 0 3
12021: PPUSH
12022: LD_INT 1
12024: PPUSH
12025: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12029: LD_INT 23
12031: PPUSH
12032: LD_VAR 0 3
12036: PPUSH
12037: LD_INT 1
12039: PPUSH
12040: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12044: LD_INT 26
12046: PPUSH
12047: LD_VAR 0 3
12051: PPUSH
12052: LD_INT 1
12054: PPUSH
12055: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12059: LD_INT 27
12061: PPUSH
12062: LD_VAR 0 3
12066: PPUSH
12067: LD_INT 1
12069: PPUSH
12070: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12074: LD_INT 28
12076: PPUSH
12077: LD_VAR 0 3
12081: PPUSH
12082: LD_INT 1
12084: PPUSH
12085: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12089: LD_INT 29
12091: PPUSH
12092: LD_VAR 0 3
12096: PPUSH
12097: LD_INT 1
12099: PPUSH
12100: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12104: LD_INT 30
12106: PPUSH
12107: LD_VAR 0 3
12111: PPUSH
12112: LD_INT 1
12114: PPUSH
12115: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12119: LD_INT 31
12121: PPUSH
12122: LD_VAR 0 3
12126: PPUSH
12127: LD_INT 1
12129: PPUSH
12130: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12134: LD_INT 32
12136: PPUSH
12137: LD_VAR 0 3
12141: PPUSH
12142: LD_INT 1
12144: PPUSH
12145: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12149: LD_INT 36
12151: PPUSH
12152: LD_VAR 0 3
12156: PPUSH
12157: LD_INT 1
12159: PPUSH
12160: CALL_OW 324
// end ; 5 :
12164: GO 14295
12166: LD_INT 5
12168: DOUBLE
12169: EQUAL
12170: IFTRUE 12174
12172: GO 13287
12174: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12175: LD_INT 35
12177: PPUSH
12178: LD_VAR 0 3
12182: PPUSH
12183: LD_INT 1
12185: PPUSH
12186: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12190: LD_INT 45
12192: PPUSH
12193: LD_VAR 0 3
12197: PPUSH
12198: LD_INT 1
12200: PPUSH
12201: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12205: LD_INT 46
12207: PPUSH
12208: LD_VAR 0 3
12212: PPUSH
12213: LD_INT 1
12215: PPUSH
12216: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12220: LD_INT 47
12222: PPUSH
12223: LD_VAR 0 3
12227: PPUSH
12228: LD_INT 1
12230: PPUSH
12231: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12235: LD_INT 1
12237: PPUSH
12238: LD_VAR 0 3
12242: PPUSH
12243: LD_INT 1
12245: PPUSH
12246: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12250: LD_INT 2
12252: PPUSH
12253: LD_VAR 0 3
12257: PPUSH
12258: LD_INT 1
12260: PPUSH
12261: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12265: LD_INT 11
12267: PPUSH
12268: LD_VAR 0 3
12272: PPUSH
12273: LD_INT 1
12275: PPUSH
12276: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12280: LD_INT 20
12282: PPUSH
12283: LD_VAR 0 3
12287: PPUSH
12288: LD_INT 1
12290: PPUSH
12291: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12295: LD_INT 48
12297: PPUSH
12298: LD_VAR 0 3
12302: PPUSH
12303: LD_INT 1
12305: PPUSH
12306: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12310: LD_INT 49
12312: PPUSH
12313: LD_VAR 0 3
12317: PPUSH
12318: LD_INT 1
12320: PPUSH
12321: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12325: LD_INT 69
12327: PPUSH
12328: LD_VAR 0 3
12332: PPUSH
12333: LD_INT 1
12335: PPUSH
12336: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12340: LD_INT 39
12342: PPUSH
12343: LD_VAR 0 3
12347: PPUSH
12348: LD_INT 1
12350: PPUSH
12351: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12355: LD_INT 34
12357: PPUSH
12358: LD_VAR 0 3
12362: PPUSH
12363: LD_INT 1
12365: PPUSH
12366: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12370: LD_INT 42
12372: PPUSH
12373: LD_VAR 0 3
12377: PPUSH
12378: LD_INT 1
12380: PPUSH
12381: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12385: LD_INT 44
12387: PPUSH
12388: LD_VAR 0 3
12392: PPUSH
12393: LD_INT 1
12395: PPUSH
12396: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12400: LD_INT 41
12402: PPUSH
12403: LD_VAR 0 3
12407: PPUSH
12408: LD_INT 1
12410: PPUSH
12411: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12415: LD_INT 40
12417: PPUSH
12418: LD_VAR 0 3
12422: PPUSH
12423: LD_INT 1
12425: PPUSH
12426: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12430: LD_INT 43
12432: PPUSH
12433: LD_VAR 0 3
12437: PPUSH
12438: LD_INT 1
12440: PPUSH
12441: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12445: LD_INT 70
12447: PPUSH
12448: LD_VAR 0 3
12452: PPUSH
12453: LD_INT 1
12455: PPUSH
12456: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12460: LD_INT 51
12462: PPUSH
12463: LD_VAR 0 3
12467: PPUSH
12468: LD_INT 1
12470: PPUSH
12471: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12475: LD_INT 52
12477: PPUSH
12478: LD_VAR 0 3
12482: PPUSH
12483: LD_INT 1
12485: PPUSH
12486: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12490: LD_INT 6
12492: PPUSH
12493: LD_VAR 0 3
12497: PPUSH
12498: LD_INT 1
12500: PPUSH
12501: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12505: LD_INT 15
12507: PPUSH
12508: LD_VAR 0 3
12512: PPUSH
12513: LD_INT 1
12515: PPUSH
12516: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12520: LD_INT 7
12522: PPUSH
12523: LD_VAR 0 3
12527: PPUSH
12528: LD_INT 1
12530: PPUSH
12531: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12535: LD_INT 12
12537: PPUSH
12538: LD_VAR 0 3
12542: PPUSH
12543: LD_INT 1
12545: PPUSH
12546: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12550: LD_INT 17
12552: PPUSH
12553: LD_VAR 0 3
12557: PPUSH
12558: LD_INT 1
12560: PPUSH
12561: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12565: LD_INT 18
12567: PPUSH
12568: LD_VAR 0 3
12572: PPUSH
12573: LD_INT 1
12575: PPUSH
12576: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12580: LD_INT 60
12582: PPUSH
12583: LD_VAR 0 3
12587: PPUSH
12588: LD_INT 1
12590: PPUSH
12591: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12595: LD_INT 32
12597: PPUSH
12598: LD_VAR 0 3
12602: PPUSH
12603: LD_INT 1
12605: PPUSH
12606: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12610: LD_INT 9
12612: PPUSH
12613: LD_VAR 0 3
12617: PPUSH
12618: LD_INT 1
12620: PPUSH
12621: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12625: LD_INT 57
12627: PPUSH
12628: LD_VAR 0 3
12632: PPUSH
12633: LD_INT 1
12635: PPUSH
12636: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12640: LD_INT 30
12642: PPUSH
12643: LD_VAR 0 3
12647: PPUSH
12648: LD_INT 1
12650: PPUSH
12651: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12655: LD_INT 37
12657: PPUSH
12658: LD_VAR 0 3
12662: PPUSH
12663: LD_INT 1
12665: PPUSH
12666: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12670: LD_INT 63
12672: PPUSH
12673: LD_VAR 0 3
12677: PPUSH
12678: LD_INT 1
12680: PPUSH
12681: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12685: LD_INT 3
12687: PPUSH
12688: LD_VAR 0 3
12692: PPUSH
12693: LD_INT 1
12695: PPUSH
12696: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12700: LD_INT 4
12702: PPUSH
12703: LD_VAR 0 3
12707: PPUSH
12708: LD_INT 1
12710: PPUSH
12711: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12715: LD_INT 5
12717: PPUSH
12718: LD_VAR 0 3
12722: PPUSH
12723: LD_INT 1
12725: PPUSH
12726: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12730: LD_INT 66
12732: PPUSH
12733: LD_VAR 0 3
12737: PPUSH
12738: LD_INT 1
12740: PPUSH
12741: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12745: LD_INT 21
12747: PPUSH
12748: LD_VAR 0 3
12752: PPUSH
12753: LD_INT 1
12755: PPUSH
12756: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12760: LD_INT 22
12762: PPUSH
12763: LD_VAR 0 3
12767: PPUSH
12768: LD_INT 1
12770: PPUSH
12771: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12775: LD_INT 19
12777: PPUSH
12778: LD_VAR 0 3
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12790: LD_INT 54
12792: PPUSH
12793: LD_VAR 0 3
12797: PPUSH
12798: LD_INT 1
12800: PPUSH
12801: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12805: LD_INT 55
12807: PPUSH
12808: LD_VAR 0 3
12812: PPUSH
12813: LD_INT 1
12815: PPUSH
12816: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12820: LD_INT 0
12822: PPUSH
12823: LD_VAR 0 3
12827: PPUSH
12828: LD_INT 1
12830: PPUSH
12831: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12835: LD_INT 1
12837: PPUSH
12838: LD_VAR 0 3
12842: PPUSH
12843: LD_INT 1
12845: PPUSH
12846: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12850: LD_INT 2
12852: PPUSH
12853: LD_VAR 0 3
12857: PPUSH
12858: LD_INT 1
12860: PPUSH
12861: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12865: LD_INT 3
12867: PPUSH
12868: LD_VAR 0 3
12872: PPUSH
12873: LD_INT 1
12875: PPUSH
12876: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12880: LD_INT 4
12882: PPUSH
12883: LD_VAR 0 3
12887: PPUSH
12888: LD_INT 1
12890: PPUSH
12891: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12895: LD_INT 5
12897: PPUSH
12898: LD_VAR 0 3
12902: PPUSH
12903: LD_INT 1
12905: PPUSH
12906: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12910: LD_INT 6
12912: PPUSH
12913: LD_VAR 0 3
12917: PPUSH
12918: LD_INT 1
12920: PPUSH
12921: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12925: LD_INT 7
12927: PPUSH
12928: LD_VAR 0 3
12932: PPUSH
12933: LD_INT 1
12935: PPUSH
12936: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12940: LD_INT 8
12942: PPUSH
12943: LD_VAR 0 3
12947: PPUSH
12948: LD_INT 1
12950: PPUSH
12951: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12955: LD_INT 10
12957: PPUSH
12958: LD_VAR 0 3
12962: PPUSH
12963: LD_INT 1
12965: PPUSH
12966: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12970: LD_INT 11
12972: PPUSH
12973: LD_VAR 0 3
12977: PPUSH
12978: LD_INT 1
12980: PPUSH
12981: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12985: LD_INT 12
12987: PPUSH
12988: LD_VAR 0 3
12992: PPUSH
12993: LD_INT 1
12995: PPUSH
12996: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13000: LD_INT 13
13002: PPUSH
13003: LD_VAR 0 3
13007: PPUSH
13008: LD_INT 1
13010: PPUSH
13011: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13015: LD_INT 14
13017: PPUSH
13018: LD_VAR 0 3
13022: PPUSH
13023: LD_INT 1
13025: PPUSH
13026: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13030: LD_INT 15
13032: PPUSH
13033: LD_VAR 0 3
13037: PPUSH
13038: LD_INT 1
13040: PPUSH
13041: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13045: LD_INT 16
13047: PPUSH
13048: LD_VAR 0 3
13052: PPUSH
13053: LD_INT 1
13055: PPUSH
13056: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13060: LD_INT 17
13062: PPUSH
13063: LD_VAR 0 3
13067: PPUSH
13068: LD_INT 1
13070: PPUSH
13071: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
13075: LD_INT 18
13077: PPUSH
13078: LD_VAR 0 3
13082: PPUSH
13083: LD_INT 1
13085: PPUSH
13086: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13090: LD_INT 19
13092: PPUSH
13093: LD_VAR 0 3
13097: PPUSH
13098: LD_INT 1
13100: PPUSH
13101: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13105: LD_INT 20
13107: PPUSH
13108: LD_VAR 0 3
13112: PPUSH
13113: LD_INT 1
13115: PPUSH
13116: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13120: LD_INT 21
13122: PPUSH
13123: LD_VAR 0 3
13127: PPUSH
13128: LD_INT 1
13130: PPUSH
13131: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13135: LD_INT 23
13137: PPUSH
13138: LD_VAR 0 3
13142: PPUSH
13143: LD_INT 1
13145: PPUSH
13146: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13150: LD_INT 26
13152: PPUSH
13153: LD_VAR 0 3
13157: PPUSH
13158: LD_INT 1
13160: PPUSH
13161: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13165: LD_INT 27
13167: PPUSH
13168: LD_VAR 0 3
13172: PPUSH
13173: LD_INT 1
13175: PPUSH
13176: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13180: LD_INT 28
13182: PPUSH
13183: LD_VAR 0 3
13187: PPUSH
13188: LD_INT 1
13190: PPUSH
13191: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13195: LD_INT 29
13197: PPUSH
13198: LD_VAR 0 3
13202: PPUSH
13203: LD_INT 1
13205: PPUSH
13206: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13210: LD_INT 30
13212: PPUSH
13213: LD_VAR 0 3
13217: PPUSH
13218: LD_INT 1
13220: PPUSH
13221: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13225: LD_INT 31
13227: PPUSH
13228: LD_VAR 0 3
13232: PPUSH
13233: LD_INT 1
13235: PPUSH
13236: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13240: LD_INT 32
13242: PPUSH
13243: LD_VAR 0 3
13247: PPUSH
13248: LD_INT 1
13250: PPUSH
13251: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
13255: LD_INT 33
13257: PPUSH
13258: LD_VAR 0 3
13262: PPUSH
13263: LD_INT 1
13265: PPUSH
13266: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13270: LD_INT 36
13272: PPUSH
13273: LD_VAR 0 3
13277: PPUSH
13278: LD_INT 1
13280: PPUSH
13281: CALL_OW 324
// end ; 6 :
13285: GO 14295
13287: LD_INT 6
13289: DOUBLE
13290: EQUAL
13291: IFTRUE 13295
13293: GO 14220
13295: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13296: LD_INT 35
13298: PPUSH
13299: LD_VAR 0 3
13303: PPUSH
13304: LD_INT 1
13306: PPUSH
13307: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13311: LD_INT 45
13313: PPUSH
13314: LD_VAR 0 3
13318: PPUSH
13319: LD_INT 1
13321: PPUSH
13322: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13326: LD_INT 46
13328: PPUSH
13329: LD_VAR 0 3
13333: PPUSH
13334: LD_INT 1
13336: PPUSH
13337: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13341: LD_INT 47
13343: PPUSH
13344: LD_VAR 0 3
13348: PPUSH
13349: LD_INT 1
13351: PPUSH
13352: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13356: LD_INT 1
13358: PPUSH
13359: LD_VAR 0 3
13363: PPUSH
13364: LD_INT 1
13366: PPUSH
13367: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13371: LD_INT 2
13373: PPUSH
13374: LD_VAR 0 3
13378: PPUSH
13379: LD_INT 1
13381: PPUSH
13382: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13386: LD_INT 11
13388: PPUSH
13389: LD_VAR 0 3
13393: PPUSH
13394: LD_INT 1
13396: PPUSH
13397: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13401: LD_INT 20
13403: PPUSH
13404: LD_VAR 0 3
13408: PPUSH
13409: LD_INT 1
13411: PPUSH
13412: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13416: LD_INT 48
13418: PPUSH
13419: LD_VAR 0 3
13423: PPUSH
13424: LD_INT 1
13426: PPUSH
13427: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13431: LD_INT 49
13433: PPUSH
13434: LD_VAR 0 3
13438: PPUSH
13439: LD_INT 1
13441: PPUSH
13442: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
13446: LD_INT 50
13448: PPUSH
13449: LD_VAR 0 3
13453: PPUSH
13454: LD_INT 1
13456: PPUSH
13457: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13461: LD_INT 69
13463: PPUSH
13464: LD_VAR 0 3
13468: PPUSH
13469: LD_INT 1
13471: PPUSH
13472: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13476: LD_INT 39
13478: PPUSH
13479: LD_VAR 0 3
13483: PPUSH
13484: LD_INT 1
13486: PPUSH
13487: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13491: LD_INT 34
13493: PPUSH
13494: LD_VAR 0 3
13498: PPUSH
13499: LD_INT 1
13501: PPUSH
13502: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13506: LD_INT 42
13508: PPUSH
13509: LD_VAR 0 3
13513: PPUSH
13514: LD_INT 1
13516: PPUSH
13517: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13521: LD_INT 44
13523: PPUSH
13524: LD_VAR 0 3
13528: PPUSH
13529: LD_INT 1
13531: PPUSH
13532: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13536: LD_INT 41
13538: PPUSH
13539: LD_VAR 0 3
13543: PPUSH
13544: LD_INT 1
13546: PPUSH
13547: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13551: LD_INT 13
13553: PPUSH
13554: LD_VAR 0 3
13558: PPUSH
13559: LD_INT 1
13561: PPUSH
13562: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13566: LD_INT 40
13568: PPUSH
13569: LD_VAR 0 3
13573: PPUSH
13574: LD_INT 1
13576: PPUSH
13577: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13581: LD_INT 43
13583: PPUSH
13584: LD_VAR 0 3
13588: PPUSH
13589: LD_INT 1
13591: PPUSH
13592: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13596: LD_INT 70
13598: PPUSH
13599: LD_VAR 0 3
13603: PPUSH
13604: LD_INT 1
13606: PPUSH
13607: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13611: LD_INT 23
13613: PPUSH
13614: LD_VAR 0 3
13618: PPUSH
13619: LD_INT 1
13621: PPUSH
13622: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13626: LD_INT 51
13628: PPUSH
13629: LD_VAR 0 3
13633: PPUSH
13634: LD_INT 1
13636: PPUSH
13637: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13641: LD_INT 52
13643: PPUSH
13644: LD_VAR 0 3
13648: PPUSH
13649: LD_INT 1
13651: PPUSH
13652: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13656: LD_INT 6
13658: PPUSH
13659: LD_VAR 0 3
13663: PPUSH
13664: LD_INT 1
13666: PPUSH
13667: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13671: LD_INT 15
13673: PPUSH
13674: LD_VAR 0 3
13678: PPUSH
13679: LD_INT 1
13681: PPUSH
13682: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13686: LD_INT 7
13688: PPUSH
13689: LD_VAR 0 3
13693: PPUSH
13694: LD_INT 1
13696: PPUSH
13697: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13701: LD_INT 12
13703: PPUSH
13704: LD_VAR 0 3
13708: PPUSH
13709: LD_INT 1
13711: PPUSH
13712: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13716: LD_INT 10
13718: PPUSH
13719: LD_VAR 0 3
13723: PPUSH
13724: LD_INT 1
13726: PPUSH
13727: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13731: LD_INT 17
13733: PPUSH
13734: LD_VAR 0 3
13738: PPUSH
13739: LD_INT 1
13741: PPUSH
13742: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13746: LD_INT 18
13748: PPUSH
13749: LD_VAR 0 3
13753: PPUSH
13754: LD_INT 1
13756: PPUSH
13757: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13761: LD_INT 60
13763: PPUSH
13764: LD_VAR 0 3
13768: PPUSH
13769: LD_INT 1
13771: PPUSH
13772: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13776: LD_INT 61
13778: PPUSH
13779: LD_VAR 0 3
13783: PPUSH
13784: LD_INT 1
13786: PPUSH
13787: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13791: LD_INT 32
13793: PPUSH
13794: LD_VAR 0 3
13798: PPUSH
13799: LD_INT 1
13801: PPUSH
13802: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13806: LD_INT 27
13808: PPUSH
13809: LD_VAR 0 3
13813: PPUSH
13814: LD_INT 1
13816: PPUSH
13817: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13821: LD_INT 36
13823: PPUSH
13824: LD_VAR 0 3
13828: PPUSH
13829: LD_INT 1
13831: PPUSH
13832: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13836: LD_INT 33
13838: PPUSH
13839: LD_VAR 0 3
13843: PPUSH
13844: LD_INT 1
13846: PPUSH
13847: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13851: LD_INT 9
13853: PPUSH
13854: LD_VAR 0 3
13858: PPUSH
13859: LD_INT 1
13861: PPUSH
13862: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13866: LD_INT 38
13868: PPUSH
13869: LD_VAR 0 3
13873: PPUSH
13874: LD_INT 1
13876: PPUSH
13877: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13881: LD_INT 57
13883: PPUSH
13884: LD_VAR 0 3
13888: PPUSH
13889: LD_INT 1
13891: PPUSH
13892: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13896: LD_INT 58
13898: PPUSH
13899: LD_VAR 0 3
13903: PPUSH
13904: LD_INT 1
13906: PPUSH
13907: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13911: LD_INT 28
13913: PPUSH
13914: LD_VAR 0 3
13918: PPUSH
13919: LD_INT 1
13921: PPUSH
13922: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13926: LD_INT 29
13928: PPUSH
13929: LD_VAR 0 3
13933: PPUSH
13934: LD_INT 1
13936: PPUSH
13937: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13941: LD_INT 30
13943: PPUSH
13944: LD_VAR 0 3
13948: PPUSH
13949: LD_INT 1
13951: PPUSH
13952: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13956: LD_INT 37
13958: PPUSH
13959: LD_VAR 0 3
13963: PPUSH
13964: LD_INT 1
13966: PPUSH
13967: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13971: LD_INT 63
13973: PPUSH
13974: LD_VAR 0 3
13978: PPUSH
13979: LD_INT 1
13981: PPUSH
13982: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13986: LD_INT 64
13988: PPUSH
13989: LD_VAR 0 3
13993: PPUSH
13994: LD_INT 1
13996: PPUSH
13997: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14001: LD_INT 3
14003: PPUSH
14004: LD_VAR 0 3
14008: PPUSH
14009: LD_INT 1
14011: PPUSH
14012: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14016: LD_INT 4
14018: PPUSH
14019: LD_VAR 0 3
14023: PPUSH
14024: LD_INT 1
14026: PPUSH
14027: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14031: LD_INT 5
14033: PPUSH
14034: LD_VAR 0 3
14038: PPUSH
14039: LD_INT 1
14041: PPUSH
14042: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
14046: LD_INT 8
14048: PPUSH
14049: LD_VAR 0 3
14053: PPUSH
14054: LD_INT 1
14056: PPUSH
14057: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14061: LD_INT 66
14063: PPUSH
14064: LD_VAR 0 3
14068: PPUSH
14069: LD_INT 1
14071: PPUSH
14072: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
14076: LD_INT 67
14078: PPUSH
14079: LD_VAR 0 3
14083: PPUSH
14084: LD_INT 1
14086: PPUSH
14087: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14091: LD_INT 21
14093: PPUSH
14094: LD_VAR 0 3
14098: PPUSH
14099: LD_INT 1
14101: PPUSH
14102: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14106: LD_INT 22
14108: PPUSH
14109: LD_VAR 0 3
14113: PPUSH
14114: LD_INT 1
14116: PPUSH
14117: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14121: LD_INT 19
14123: PPUSH
14124: LD_VAR 0 3
14128: PPUSH
14129: LD_INT 1
14131: PPUSH
14132: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
14136: LD_INT 26
14138: PPUSH
14139: LD_VAR 0 3
14143: PPUSH
14144: LD_INT 1
14146: PPUSH
14147: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14151: LD_INT 54
14153: PPUSH
14154: LD_VAR 0 3
14158: PPUSH
14159: LD_INT 1
14161: PPUSH
14162: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14166: LD_INT 55
14168: PPUSH
14169: LD_VAR 0 3
14173: PPUSH
14174: LD_INT 1
14176: PPUSH
14177: CALL_OW 322
// for i = 0 to 39 do
14181: LD_ADDR_VAR 0 4
14185: PUSH
14186: DOUBLE
14187: LD_INT 0
14189: DEC
14190: ST_TO_ADDR
14191: LD_INT 39
14193: PUSH
14194: FOR_TO
14195: IFFALSE 14216
// SetRestrict ( i , side , true ) ;
14197: LD_VAR 0 4
14201: PPUSH
14202: LD_VAR 0 3
14206: PPUSH
14207: LD_INT 1
14209: PPUSH
14210: CALL_OW 324
14214: GO 14194
14216: POP
14217: POP
// end ; else
14218: GO 14295
14220: POP
// begin for i = 1 to 73 do
14221: LD_ADDR_VAR 0 4
14225: PUSH
14226: DOUBLE
14227: LD_INT 1
14229: DEC
14230: ST_TO_ADDR
14231: LD_INT 73
14233: PUSH
14234: FOR_TO
14235: IFFALSE 14256
// SetTech ( i , side , state_enabled ) ;
14237: LD_VAR 0 4
14241: PPUSH
14242: LD_VAR 0 3
14246: PPUSH
14247: LD_INT 1
14249: PPUSH
14250: CALL_OW 322
14254: GO 14234
14256: POP
14257: POP
// for i = 0 to 39 do
14258: LD_ADDR_VAR 0 4
14262: PUSH
14263: DOUBLE
14264: LD_INT 0
14266: DEC
14267: ST_TO_ADDR
14268: LD_INT 39
14270: PUSH
14271: FOR_TO
14272: IFFALSE 14293
// SetRestrict ( i , side , true ) ;
14274: LD_VAR 0 4
14278: PPUSH
14279: LD_VAR 0 3
14283: PPUSH
14284: LD_INT 1
14286: PPUSH
14287: CALL_OW 324
14291: GO 14271
14293: POP
14294: POP
// end ; end ; end ;
14295: GO 10300
14297: POP
14298: POP
// end ; end_of_file
14299: LD_VAR 0 2
14303: RET
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
14304: LD_INT 0
14306: PPUSH
14307: PPUSH
14308: PPUSH
// BuildUpTime_Delay = 0 ;
14309: LD_ADDR_EXP 57
14313: PUSH
14314: LD_INT 0
14316: ST_TO_ADDR
// if not def_builduptime then
14317: LD_EXP 14
14321: NOT
14322: IFFALSE 14326
// exit ;
14324: GO 14509
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14326: LD_ADDR_EXP 57
14330: PUSH
14331: LD_INT 8400
14333: PUSH
14334: LD_INT 2100
14336: PUSH
14337: LD_EXP 14
14341: MUL
14342: PLUS
14343: ST_TO_ADDR
// BuildUpTimeActive := true ;
14344: LD_ADDR_EXP 56
14348: PUSH
14349: LD_INT 1
14351: ST_TO_ADDR
// for i := 1 to 8 do
14352: LD_ADDR_VAR 0 2
14356: PUSH
14357: DOUBLE
14358: LD_INT 1
14360: DEC
14361: ST_TO_ADDR
14362: LD_INT 8
14364: PUSH
14365: FOR_TO
14366: IFFALSE 14507
// if Side_Positions [ i ] then
14368: LD_EXP 34
14372: PUSH
14373: LD_VAR 0 2
14377: ARRAY
14378: IFFALSE 14505
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14380: LD_EXP 55
14384: PUSH
14385: LD_EXP 34
14389: PUSH
14390: LD_VAR 0 2
14394: ARRAY
14395: ARRAY
14396: PPUSH
14397: LD_INT 5
14399: PPUSH
14400: CALL_OW 424
// for j := 1 to 8 do
14404: LD_ADDR_VAR 0 3
14408: PUSH
14409: DOUBLE
14410: LD_INT 1
14412: DEC
14413: ST_TO_ADDR
14414: LD_INT 8
14416: PUSH
14417: FOR_TO
14418: IFFALSE 14503
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14420: LD_EXP 34
14424: PUSH
14425: LD_VAR 0 3
14429: ARRAY
14430: PUSH
14431: LD_EXP 31
14435: PUSH
14436: LD_VAR 0 2
14440: ARRAY
14441: PUSH
14442: LD_EXP 31
14446: PUSH
14447: LD_VAR 0 3
14451: ARRAY
14452: NONEQUAL
14453: PUSH
14454: LD_EXP 36
14458: NOT
14459: PUSH
14460: LD_VAR 0 2
14464: PUSH
14465: LD_VAR 0 3
14469: NONEQUAL
14470: AND
14471: OR
14472: AND
14473: IFFALSE 14501
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14475: LD_VAR 0 3
14479: PPUSH
14480: LD_EXP 55
14484: PUSH
14485: LD_EXP 34
14489: PUSH
14490: LD_VAR 0 2
14494: ARRAY
14495: ARRAY
14496: PPUSH
14497: CALL_OW 333
14501: GO 14417
14503: POP
14504: POP
// end ;
14505: GO 14365
14507: POP
14508: POP
// end ;
14509: LD_VAR 0 1
14513: RET
// export function EndBuildUp ; var i , j ; begin
14514: LD_INT 0
14516: PPUSH
14517: PPUSH
14518: PPUSH
// BuildUpTimeActive := false ;
14519: LD_ADDR_EXP 56
14523: PUSH
14524: LD_INT 0
14526: ST_TO_ADDR
// for i := 1 to 8 do
14527: LD_ADDR_VAR 0 2
14531: PUSH
14532: DOUBLE
14533: LD_INT 1
14535: DEC
14536: ST_TO_ADDR
14537: LD_INT 8
14539: PUSH
14540: FOR_TO
14541: IFFALSE 14682
// if Side_Positions [ i ] then
14543: LD_EXP 34
14547: PUSH
14548: LD_VAR 0 2
14552: ARRAY
14553: IFFALSE 14680
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14555: LD_EXP 55
14559: PUSH
14560: LD_EXP 34
14564: PUSH
14565: LD_VAR 0 2
14569: ARRAY
14570: ARRAY
14571: PPUSH
14572: LD_INT 0
14574: PPUSH
14575: CALL_OW 424
// for j := 1 to 8 do
14579: LD_ADDR_VAR 0 3
14583: PUSH
14584: DOUBLE
14585: LD_INT 1
14587: DEC
14588: ST_TO_ADDR
14589: LD_INT 8
14591: PUSH
14592: FOR_TO
14593: IFFALSE 14678
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14595: LD_EXP 34
14599: PUSH
14600: LD_VAR 0 3
14604: ARRAY
14605: PUSH
14606: LD_EXP 31
14610: PUSH
14611: LD_VAR 0 2
14615: ARRAY
14616: PUSH
14617: LD_EXP 31
14621: PUSH
14622: LD_VAR 0 3
14626: ARRAY
14627: NONEQUAL
14628: PUSH
14629: LD_EXP 36
14633: NOT
14634: PUSH
14635: LD_VAR 0 2
14639: PUSH
14640: LD_VAR 0 3
14644: NONEQUAL
14645: AND
14646: OR
14647: AND
14648: IFFALSE 14676
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14650: LD_VAR 0 3
14654: PPUSH
14655: LD_EXP 55
14659: PUSH
14660: LD_EXP 34
14664: PUSH
14665: LD_VAR 0 2
14669: ARRAY
14670: ARRAY
14671: PPUSH
14672: CALL_OW 334
14676: GO 14592
14678: POP
14679: POP
// end ;
14680: GO 14540
14682: POP
14683: POP
// end ;
14684: LD_VAR 0 1
14688: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14689: LD_EXP 56
14693: IFFALSE 14868
14695: GO 14697
14697: DISABLE
14698: LD_INT 0
14700: PPUSH
14701: PPUSH
// begin for i := 1 to 8 do
14702: LD_ADDR_VAR 0 1
14706: PUSH
14707: DOUBLE
14708: LD_INT 1
14710: DEC
14711: ST_TO_ADDR
14712: LD_INT 8
14714: PUSH
14715: FOR_TO
14716: IFFALSE 14865
// if Side_Positions [ i ] then
14718: LD_EXP 34
14722: PUSH
14723: LD_VAR 0 1
14727: ARRAY
14728: IFFALSE 14863
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14730: LD_ADDR_VAR 0 2
14734: PUSH
14735: LD_EXP 55
14739: PUSH
14740: LD_EXP 34
14744: PUSH
14745: LD_VAR 0 1
14749: ARRAY
14750: ARRAY
14751: PPUSH
14752: LD_INT 2
14754: PUSH
14755: LD_INT 21
14757: PUSH
14758: LD_INT 1
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: LD_INT 21
14767: PUSH
14768: LD_INT 2
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: LIST
14779: PUSH
14780: LD_INT 22
14782: PUSH
14783: LD_OWVAR 2
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PPUSH
14796: CALL_OW 70
14800: PUSH
14801: FOR_IN
14802: IFFALSE 14861
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14804: LD_EXP 31
14808: PUSH
14809: LD_VAR 0 1
14813: ARRAY
14814: PUSH
14815: LD_EXP 31
14819: PUSH
14820: LD_OWVAR 2
14824: ARRAY
14825: NONEQUAL
14826: PUSH
14827: LD_EXP 36
14831: NOT
14832: PUSH
14833: LD_VAR 0 1
14837: PUSH
14838: LD_OWVAR 2
14842: NONEQUAL
14843: AND
14844: OR
14845: IFFALSE 14859
// ComMoveToArea ( un , BuildUpEscape ) ;
14847: LD_VAR 0 2
14851: PPUSH
14852: LD_INT 9
14854: PPUSH
14855: CALL_OW 113
14859: GO 14801
14861: POP
14862: POP
14863: GO 14715
14865: POP
14866: POP
// enable ;
14867: ENABLE
// end ;
14868: PPOPN 2
14870: END
// every 0 0$1 trigger def_builduptime do
14871: LD_EXP 14
14875: IFFALSE 14901
14877: GO 14879
14879: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14880: LD_INT 8400
14882: PUSH
14883: LD_EXP 14
14887: PUSH
14888: LD_INT 2100
14890: MUL
14891: PLUS
14892: PPUSH
14893: CALL_OW 67
// EndBuildUp ;
14897: CALL 14514 0 0
// end ;
14901: END
