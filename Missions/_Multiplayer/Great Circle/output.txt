// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 368
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: LD_INT 6
 351: PUSH
 352: LD_INT 7
 354: PUSH
 355: LD_INT 8
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 368: LD_ADDR_EXP 36
 372: PUSH
 373: LD_EXP 31
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: EMPTY
 382: LIST
 383: DIFF
 384: PUSH
 385: LD_INT 1
 387: GREATER
 388: ST_TO_ADDR
// if Multiplayer then
 389: LD_OWVAR 4
 393: IFFALSE 600
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 395: LD_ADDR_EXP 1
 399: PUSH
 400: LD_INT 0
 402: PPUSH
 403: CALL_OW 426
 407: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 408: LD_ADDR_EXP 2
 412: PUSH
 413: LD_INT 1
 415: PPUSH
 416: CALL_OW 426
 420: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 421: LD_ADDR_EXP 3
 425: PUSH
 426: LD_INT 2
 428: PPUSH
 429: CALL_OW 426
 433: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 434: LD_ADDR_EXP 4
 438: PUSH
 439: LD_INT 3
 441: PPUSH
 442: CALL_OW 426
 446: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 447: LD_ADDR_EXP 5
 451: PUSH
 452: LD_INT 4
 454: PPUSH
 455: CALL_OW 426
 459: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 460: LD_ADDR_EXP 6
 464: PUSH
 465: LD_INT 5
 467: PPUSH
 468: CALL_OW 426
 472: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 473: LD_ADDR_EXP 7
 477: PUSH
 478: LD_INT 6
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 486: LD_ADDR_EXP 8
 490: PUSH
 491: LD_INT 10
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 499: LD_ADDR_EXP 9
 503: PUSH
 504: LD_INT 11
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 512: LD_ADDR_EXP 10
 516: PUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 525: LD_ADDR_EXP 11
 529: PUSH
 530: LD_INT 13
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 538: LD_ADDR_EXP 12
 542: PUSH
 543: LD_INT 14
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 551: LD_ADDR_EXP 13
 555: PUSH
 556: LD_INT 17
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 564: LD_ADDR_EXP 14
 568: PUSH
 569: LD_INT 20
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 577: LD_ADDR_VAR 0 3
 581: PUSH
 582: LD_INT 22
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// def_win_rules = 0 ;
 590: LD_ADDR_EXP 30
 594: PUSH
 595: LD_INT 0
 597: ST_TO_ADDR
// end else
 598: GO 732
// begin Randomize ;
 600: CALL_OW 10
// def_base_level := 2 ;
 604: LD_ADDR_EXP 1
 608: PUSH
 609: LD_INT 2
 611: ST_TO_ADDR
// def_amount_of_people := 2 ;
 612: LD_ADDR_EXP 2
 616: PUSH
 617: LD_INT 2
 619: ST_TO_ADDR
// def_skill_level := 1 ;
 620: LD_ADDR_EXP 3
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// def_starting_resources := 2 ;
 628: LD_ADDR_EXP 4
 632: PUSH
 633: LD_INT 2
 635: ST_TO_ADDR
// def_shipments_density := 50 ;
 636: LD_ADDR_EXP 5
 640: PUSH
 641: LD_INT 50
 643: ST_TO_ADDR
// def_extra_oil_deposits := 2 ;
 644: LD_ADDR_EXP 6
 648: PUSH
 649: LD_INT 2
 651: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 2
 659: ST_TO_ADDR
// def_shared_vision := 1 ;
 660: LD_ADDR_EXP 8
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// def_morale_flags := 1 ;
 668: LD_ADDR_EXP 9
 672: PUSH
 673: LD_INT 1
 675: ST_TO_ADDR
// def_siberite_detection := 1 ;
 676: LD_ADDR_EXP 10
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// def_people_respawning := 2 ;
 684: LD_ADDR_EXP 11
 688: PUSH
 689: LD_INT 2
 691: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 692: LD_ADDR_EXP 12
 696: PUSH
 697: LD_INT 3
 699: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 700: LD_ADDR_EXP 13
 704: PUSH
 705: LD_INT 2
 707: ST_TO_ADDR
// def_builduptime := 1 ;
 708: LD_ADDR_EXP 14
 712: PUSH
 713: LD_INT 1
 715: ST_TO_ADDR
// tech_level = 4 ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_INT 4
 723: ST_TO_ADDR
// def_win_rules = 0 ;
 724: LD_ADDR_EXP 30
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// end ; if isSGUI then
 732: LD_OWVAR 83
 736: IFFALSE 744
// setMpTechs ( ) else
 738: CALL 9793 0 0
 742: GO 757
// SetMpTechLevel ( tech_level + 1 ) ;
 744: LD_VAR 0 3
 748: PUSH
 749: LD_INT 1
 751: PLUS
 752: PPUSH
 753: CALL 9940 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 757: LD_ADDR_EXP 17
 761: PUSH
 762: LD_INT 0
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 1
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_EXP 1
 780: PUSH
 781: LD_INT 1
 783: PLUS
 784: ARRAY
 785: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 786: LD_ADDR_EXP 18
 790: PUSH
 791: LD_INT 0
 793: PUSH
 794: LD_INT 0
 796: PUSH
 797: LD_INT 3
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: LIST
 804: PUSH
 805: LD_EXP 1
 809: PUSH
 810: LD_INT 1
 812: PLUS
 813: ARRAY
 814: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 815: LD_ADDR_EXP 19
 819: PUSH
 820: LD_INT 9
 822: PUSH
 823: LD_INT 12
 825: PUSH
 826: LD_INT 15
 828: PUSH
 829: LD_INT 24
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: LD_EXP 2
 842: PUSH
 843: LD_INT 1
 845: PLUS
 846: ARRAY
 847: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 848: LD_ADDR_EXP 20
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_EXP 3
 875: PUSH
 876: LD_INT 1
 878: PLUS
 879: ARRAY
 880: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 881: LD_ADDR_EXP 22
 885: PUSH
 886: LD_INT 0
 888: PUSH
 889: LD_INT 0
 891: PUSH
 892: LD_INT 0
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 30
 902: PUSH
 903: LD_INT 0
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 50
 916: PUSH
 917: LD_INT 20
 919: PUSH
 920: LD_INT 0
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PUSH
 928: LD_INT 80
 930: PUSH
 931: LD_INT 40
 933: PUSH
 934: LD_INT 20
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: PUSH
 948: LD_EXP 4
 952: PUSH
 953: LD_INT 1
 955: PLUS
 956: ARRAY
 957: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 958: LD_ADDR_EXP 21
 962: PUSH
 963: LD_INT 10
 965: PUSH
 966: EMPTY
 967: LIST
 968: PUSH
 969: LD_INT 7
 971: PUSH
 972: LD_INT 14
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 6
 981: PUSH
 982: LD_INT 12
 984: PUSH
 985: LD_INT 18
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 10
 998: PUSH
 999: LD_INT 15
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: PUSH
1017: LD_EXP 4
1021: PUSH
1022: LD_INT 1
1024: PLUS
1025: ARRAY
1026: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
1027: LD_ADDR_EXP 23
1031: PUSH
1032: LD_INT 150
1034: PUSH
1035: LD_EXP 5
1039: MINUS
1040: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1041: LD_ADDR_EXP 27
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: LD_INT 10500
1051: PUSH
1052: LD_INT 6300
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: PUSH
1060: LD_EXP 11
1064: PUSH
1065: LD_INT 1
1067: PLUS
1068: ARRAY
1069: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1070: LD_ADDR_EXP 28
1074: PUSH
1075: LD_INT 0
1077: PUSH
1078: LD_INT 31500
1080: PUSH
1081: LD_INT 10500
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_EXP 11
1093: PUSH
1094: LD_INT 1
1096: PLUS
1097: ARRAY
1098: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1099: LD_ADDR_EXP 25
1103: PUSH
1104: LD_INT 0
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 3
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_EXP 12
1126: PUSH
1127: LD_INT 1
1129: PLUS
1130: ARRAY
1131: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1132: LD_ADDR_EXP 24
1136: PUSH
1137: LD_INT 1
1139: NEG
1140: PUSH
1141: LD_INT 350
1143: PUSH
1144: LD_INT 700
1146: PUSH
1147: LD_INT 1400
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_EXP 9
1164: PUSH
1165: LD_INT 1
1167: PLUS
1168: ARRAY
1169: ST_TO_ADDR
// battle_flags_id := [ ] ;
1170: LD_ADDR_EXP 44
1174: PUSH
1175: EMPTY
1176: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1177: LD_EXP 13
1181: PUSH
1182: LD_INT 0
1184: EQUAL
1185: IFFALSE 1197
// siberite_bomb_Delay = 0 else
1187: LD_ADDR_EXP 29
1191: PUSH
1192: LD_INT 0
1194: ST_TO_ADDR
1195: GO 1219
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1197: LD_ADDR_EXP 29
1201: PUSH
1202: LD_EXP 13
1206: PUSH
1207: LD_INT 1
1209: MINUS
1210: PUSH
1211: LD_INT 21000
1213: MUL
1214: PUSH
1215: LD_INT 1
1217: PLUS
1218: ST_TO_ADDR
// end ;
1219: LD_VAR 0 1
1223: RET
// function init_map ; var i , j ; begin
1224: LD_INT 0
1226: PPUSH
1227: PPUSH
1228: PPUSH
// normal_oil_deposits_locations := [ [ 61 , 54 ] , [ 94 , 26 ] , [ 156 , 50 ] , [ 214 , 114 ] , [ 237 , 188 ] , [ 204 , 246 ] , [ 137 , 204 ] , [ 81 , 115 ] ] ;
1229: LD_ADDR_EXP 40
1233: PUSH
1234: LD_INT 61
1236: PUSH
1237: LD_INT 54
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PUSH
1244: LD_INT 94
1246: PUSH
1247: LD_INT 26
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 156
1256: PUSH
1257: LD_INT 50
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 214
1266: PUSH
1267: LD_INT 114
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PUSH
1274: LD_INT 237
1276: PUSH
1277: LD_INT 188
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: PUSH
1284: LD_INT 204
1286: PUSH
1287: LD_INT 246
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 137
1296: PUSH
1297: LD_INT 204
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 81
1306: PUSH
1307: LD_INT 115
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 69 , 46 ] , [ 116 , 26 ] , [ 184 , 67 ] , [ 222 , 144 ] , [ 234 , 214 ] , [ 219 , 232 ] , [ 160 , 212 ] , [ 93 , 148 ] ] ;
1324: LD_ADDR_EXP 41
1328: PUSH
1329: LD_INT 69
1331: PUSH
1332: LD_INT 46
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 116
1341: PUSH
1342: LD_INT 26
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 184
1351: PUSH
1352: LD_INT 67
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 222
1361: PUSH
1362: LD_INT 144
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 234
1371: PUSH
1372: LD_INT 214
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 219
1381: PUSH
1382: LD_INT 232
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 160
1391: PUSH
1392: LD_INT 212
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 93
1401: PUSH
1402: LD_INT 148
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 81 , 48 ] , [ 109 , 18 ] , [ 180 , 77 ] , [ 208 , 119 ] , [ 248 , 197 ] , [ 194 , 223 ] , [ 139 , 209 ] , [ 77 , 123 ] ] ;
1419: LD_ADDR_EXP 42
1423: PUSH
1424: LD_INT 81
1426: PUSH
1427: LD_INT 48
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 109
1436: PUSH
1437: LD_INT 18
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PUSH
1444: LD_INT 180
1446: PUSH
1447: LD_INT 77
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: PUSH
1454: LD_INT 208
1456: PUSH
1457: LD_INT 119
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 248
1466: PUSH
1467: LD_INT 197
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 194
1476: PUSH
1477: LD_INT 223
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 139
1486: PUSH
1487: LD_INT 209
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 77
1496: PUSH
1497: LD_INT 123
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 74 , 72 ] , [ 99 , 38 ] , [ 155 , 58 ] , [ 237 , 141 ] , [ 249 , 218 ] , [ 221 , 247 ] , [ 159 , 204 ] , [ 110 , 151 ] ] ;
1514: LD_ADDR_EXP 43
1518: PUSH
1519: LD_INT 74
1521: PUSH
1522: LD_INT 72
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 99
1531: PUSH
1532: LD_INT 38
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 155
1541: PUSH
1542: LD_INT 58
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 237
1551: PUSH
1552: LD_INT 141
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 249
1561: PUSH
1562: LD_INT 218
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 221
1571: PUSH
1572: LD_INT 247
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 159
1581: PUSH
1582: LD_INT 204
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 110
1591: PUSH
1592: LD_INT 151
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: ST_TO_ADDR
// depot_def := [ [ 79 , 63 , 2 ] , [ 109 , 36 , 3 ] , [ 171 , 60 , 3 ] , [ 222 , 128 , 4 ] , [ 239 , 202 , 5 ] , [ 208 , 233 , 0 ] , [ 145 , 203 , 0 ] , [ 91 , 132 , 1 ] ] ;
1609: LD_ADDR_EXP 37
1613: PUSH
1614: LD_INT 79
1616: PUSH
1617: LD_INT 63
1619: PUSH
1620: LD_INT 2
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 109
1630: PUSH
1631: LD_INT 36
1633: PUSH
1634: LD_INT 3
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 171
1644: PUSH
1645: LD_INT 60
1647: PUSH
1648: LD_INT 3
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 222
1658: PUSH
1659: LD_INT 128
1661: PUSH
1662: LD_INT 4
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 239
1672: PUSH
1673: LD_INT 202
1675: PUSH
1676: LD_INT 5
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: PUSH
1684: LD_INT 208
1686: PUSH
1687: LD_INT 233
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 145
1700: PUSH
1701: LD_INT 203
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: PUSH
1712: LD_INT 91
1714: PUSH
1715: LD_INT 132
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: ST_TO_ADDR
// for i in depot_def do
1736: LD_ADDR_VAR 0 2
1740: PUSH
1741: LD_EXP 37
1745: PUSH
1746: FOR_IN
1747: IFFALSE 1823
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1749: LD_ADDR_EXP 39
1753: PUSH
1754: LD_EXP 39
1758: PUSH
1759: LD_VAR 0 2
1763: PUSH
1764: LD_INT 1
1766: ARRAY
1767: PPUSH
1768: LD_VAR 0 2
1772: PUSH
1773: LD_INT 3
1775: ARRAY
1776: PPUSH
1777: LD_INT 4
1779: NEG
1780: PPUSH
1781: CALL_OW 272
1785: PUSH
1786: LD_VAR 0 2
1790: PUSH
1791: LD_INT 2
1793: ARRAY
1794: PPUSH
1795: LD_VAR 0 2
1799: PUSH
1800: LD_INT 3
1802: ARRAY
1803: PPUSH
1804: LD_INT 4
1806: NEG
1807: PPUSH
1808: CALL_OW 273
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: EMPTY
1818: LIST
1819: ADD
1820: ST_TO_ADDR
1821: GO 1746
1823: POP
1824: POP
// breastworks_def := [ [ [ 90 , 82 , 5 ] , [ 92 , 76 , 5 ] , [ 91 , 66 , 4 ] ] , [ [ 111 , 52 , 5 ] , [ 118 , 52 , 5 ] , [ 123 , 51 , 5 ] ] , [ [ 158 , 69 , 0 ] , [ 165 , 78 , 0 ] , [ 172 , 82 , 0 ] ] , [ [ 206 , 121 , 1 ] , [ 208 , 130 , 1 ] , [ 214 , 139 , 1 ] ] , [ [ 223 , 192 , 2 ] , [ 224 , 187 , 2 ] , [ 232 , 188 , 2 ] ] , [ [ 195 , 218 , 2 ] , [ 200 , 215 , 2 ] , [ 208 , 220 , 3 ] ] , [ [ 141 , 186 , 3 ] , [ 150 , 192 , 2 ] , [ 157 , 199 , 4 ] ] , [ [ 99 , 125 , 4 ] , [ 105 , 136 , 4 ] , [ 108 , 147 , 5 ] ] ] ;
1825: LD_ADDR_EXP 38
1829: PUSH
1830: LD_INT 90
1832: PUSH
1833: LD_INT 82
1835: PUSH
1836: LD_INT 5
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 92
1846: PUSH
1847: LD_INT 76
1849: PUSH
1850: LD_INT 5
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 91
1860: PUSH
1861: LD_INT 66
1863: PUSH
1864: LD_INT 4
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 111
1879: PUSH
1880: LD_INT 52
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: PUSH
1891: LD_INT 118
1893: PUSH
1894: LD_INT 52
1896: PUSH
1897: LD_INT 5
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: PUSH
1905: LD_INT 123
1907: PUSH
1908: LD_INT 51
1910: PUSH
1911: LD_INT 5
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 158
1926: PUSH
1927: LD_INT 69
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: LIST
1937: PUSH
1938: LD_INT 165
1940: PUSH
1941: LD_INT 78
1943: PUSH
1944: LD_INT 0
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 172
1954: PUSH
1955: LD_INT 82
1957: PUSH
1958: LD_INT 0
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: LIST
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 206
1973: PUSH
1974: LD_INT 121
1976: PUSH
1977: LD_INT 1
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 208
1987: PUSH
1988: LD_INT 130
1990: PUSH
1991: LD_INT 1
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 214
2001: PUSH
2002: LD_INT 139
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_INT 223
2020: PUSH
2021: LD_INT 192
2023: PUSH
2024: LD_INT 2
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 224
2034: PUSH
2035: LD_INT 187
2037: PUSH
2038: LD_INT 2
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 232
2048: PUSH
2049: LD_INT 188
2051: PUSH
2052: LD_INT 2
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 195
2067: PUSH
2068: LD_INT 218
2070: PUSH
2071: LD_INT 2
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 200
2081: PUSH
2082: LD_INT 215
2084: PUSH
2085: LD_INT 2
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: LD_INT 208
2095: PUSH
2096: LD_INT 220
2098: PUSH
2099: LD_INT 3
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 141
2114: PUSH
2115: LD_INT 186
2117: PUSH
2118: LD_INT 3
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 150
2128: PUSH
2129: LD_INT 192
2131: PUSH
2132: LD_INT 2
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 157
2142: PUSH
2143: LD_INT 199
2145: PUSH
2146: LD_INT 4
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: LD_INT 99
2161: PUSH
2162: LD_INT 125
2164: PUSH
2165: LD_INT 4
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 105
2175: PUSH
2176: LD_INT 136
2178: PUSH
2179: LD_INT 4
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 108
2189: PUSH
2190: LD_INT 147
2192: PUSH
2193: LD_INT 5
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: ST_TO_ADDR
// for i = 1 to Side_Positions do
2216: LD_ADDR_VAR 0 2
2220: PUSH
2221: DOUBLE
2222: LD_INT 1
2224: DEC
2225: ST_TO_ADDR
2226: LD_EXP 34
2230: PUSH
2231: FOR_TO
2232: IFFALSE 2355
// begin if not Side_Positions [ i ] then
2234: LD_EXP 34
2238: PUSH
2239: LD_VAR 0 2
2243: ARRAY
2244: NOT
2245: IFFALSE 2249
// continue ;
2247: GO 2231
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2249: LD_EXP 40
2253: PUSH
2254: LD_EXP 34
2258: PUSH
2259: LD_VAR 0 2
2263: ARRAY
2264: ARRAY
2265: PUSH
2266: LD_INT 1
2268: ARRAY
2269: PPUSH
2270: LD_EXP 40
2274: PUSH
2275: LD_EXP 34
2279: PUSH
2280: LD_VAR 0 2
2284: ARRAY
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_INT 2
2293: PPUSH
2294: CALL_OW 62
// if def_extra_oil_deposits then
2298: LD_EXP 6
2302: IFFALSE 2353
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2304: LD_EXP 41
2308: PUSH
2309: LD_EXP 34
2313: PUSH
2314: LD_VAR 0 2
2318: ARRAY
2319: ARRAY
2320: PUSH
2321: LD_INT 1
2323: ARRAY
2324: PPUSH
2325: LD_EXP 41
2329: PUSH
2330: LD_EXP 34
2334: PUSH
2335: LD_VAR 0 2
2339: ARRAY
2340: ARRAY
2341: PUSH
2342: LD_INT 2
2344: ARRAY
2345: PPUSH
2346: LD_INT 2
2348: PPUSH
2349: CALL_OW 62
// end ;
2353: GO 2231
2355: POP
2356: POP
// if def_extra_sib_deposits then
2357: LD_EXP 7
2361: IFFALSE 2508
// for i = 1 to Side_Positions do
2363: LD_ADDR_VAR 0 2
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_EXP 34
2377: PUSH
2378: FOR_TO
2379: IFFALSE 2506
// begin if not Side_Positions [ i ] then
2381: LD_EXP 34
2385: PUSH
2386: LD_VAR 0 2
2390: ARRAY
2391: NOT
2392: IFFALSE 2396
// continue ;
2394: GO 2378
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2396: LD_EXP 42
2400: PUSH
2401: LD_EXP 34
2405: PUSH
2406: LD_VAR 0 2
2410: ARRAY
2411: ARRAY
2412: PUSH
2413: LD_INT 1
2415: ARRAY
2416: PPUSH
2417: LD_EXP 42
2421: PUSH
2422: LD_EXP 34
2426: PUSH
2427: LD_VAR 0 2
2431: ARRAY
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 3
2440: PPUSH
2441: CALL_OW 62
// if def_extra_sib_deposits = 2 then
2445: LD_EXP 7
2449: PUSH
2450: LD_INT 2
2452: EQUAL
2453: IFFALSE 2504
// CreateDepositXY ( extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2455: LD_EXP 43
2459: PUSH
2460: LD_EXP 34
2464: PUSH
2465: LD_VAR 0 2
2469: ARRAY
2470: ARRAY
2471: PUSH
2472: LD_INT 1
2474: ARRAY
2475: PPUSH
2476: LD_EXP 43
2480: PUSH
2481: LD_EXP 34
2485: PUSH
2486: LD_VAR 0 2
2490: ARRAY
2491: ARRAY
2492: PUSH
2493: LD_INT 2
2495: ARRAY
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: CALL_OW 62
// end ;
2504: GO 2378
2506: POP
2507: POP
// end ;
2508: LD_VAR 0 1
2512: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2513: LD_INT 0
2515: PPUSH
2516: PPUSH
2517: PPUSH
// if not Team_Game then
2518: LD_EXP 36
2522: NOT
2523: IFFALSE 2621
// begin for i = 1 to 8 do
2525: LD_ADDR_VAR 0 2
2529: PUSH
2530: DOUBLE
2531: LD_INT 1
2533: DEC
2534: ST_TO_ADDR
2535: LD_INT 8
2537: PUSH
2538: FOR_TO
2539: IFFALSE 2617
// for j = 1 to 8 do
2541: LD_ADDR_VAR 0 3
2545: PUSH
2546: DOUBLE
2547: LD_INT 1
2549: DEC
2550: ST_TO_ADDR
2551: LD_INT 8
2553: PUSH
2554: FOR_TO
2555: IFFALSE 2613
// if i <> j then
2557: LD_VAR 0 2
2561: PUSH
2562: LD_VAR 0 3
2566: NONEQUAL
2567: IFFALSE 2591
// SetAttitude ( i , j , att_neutral , true ) else
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_VAR 0 3
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: LD_INT 1
2584: PPUSH
2585: CALL_OW 80
2589: GO 2611
// SetAttitude ( i , j , att_friend , true ) ;
2591: LD_VAR 0 2
2595: PPUSH
2596: LD_VAR 0 3
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: CALL_OW 80
2611: GO 2554
2613: POP
2614: POP
2615: GO 2538
2617: POP
2618: POP
// end else
2619: GO 2796
// begin if def_shared_vision then
2621: LD_EXP 8
2625: IFFALSE 2690
// begin for i in Teams do
2627: LD_ADDR_VAR 0 2
2631: PUSH
2632: LD_EXP 32
2636: PUSH
2637: FOR_IN
2638: IFFALSE 2688
// for j = 2 to i do
2640: LD_ADDR_VAR 0 3
2644: PUSH
2645: DOUBLE
2646: LD_INT 2
2648: DEC
2649: ST_TO_ADDR
2650: LD_VAR 0 2
2654: PUSH
2655: FOR_TO
2656: IFFALSE 2684
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2658: LD_VAR 0 2
2662: PUSH
2663: LD_VAR 0 3
2667: ARRAY
2668: PPUSH
2669: LD_VAR 0 2
2673: PUSH
2674: LD_INT 1
2676: ARRAY
2677: PPUSH
2678: CALL_OW 343
2682: GO 2655
2684: POP
2685: POP
2686: GO 2637
2688: POP
2689: POP
// end ; for i = 1 to 8 do
2690: LD_ADDR_VAR 0 2
2694: PUSH
2695: DOUBLE
2696: LD_INT 1
2698: DEC
2699: ST_TO_ADDR
2700: LD_INT 8
2702: PUSH
2703: FOR_TO
2704: IFFALSE 2794
// for j = 1 to 8 do
2706: LD_ADDR_VAR 0 3
2710: PUSH
2711: DOUBLE
2712: LD_INT 1
2714: DEC
2715: ST_TO_ADDR
2716: LD_INT 8
2718: PUSH
2719: FOR_TO
2720: IFFALSE 2790
// if Side_Teams [ i ] = Side_Teams [ j ] then
2722: LD_EXP 31
2726: PUSH
2727: LD_VAR 0 2
2731: ARRAY
2732: PUSH
2733: LD_EXP 31
2737: PUSH
2738: LD_VAR 0 3
2742: ARRAY
2743: EQUAL
2744: IFFALSE 2768
// SetAttitude ( i , j , att_friend , true ) else
2746: LD_VAR 0 2
2750: PPUSH
2751: LD_VAR 0 3
2755: PPUSH
2756: LD_INT 1
2758: PPUSH
2759: LD_INT 1
2761: PPUSH
2762: CALL_OW 80
2766: GO 2788
// SetAttitude ( i , j , att_enemy , true ) ;
2768: LD_VAR 0 2
2772: PPUSH
2773: LD_VAR 0 3
2777: PPUSH
2778: LD_INT 2
2780: PPUSH
2781: LD_INT 1
2783: PPUSH
2784: CALL_OW 80
2788: GO 2719
2790: POP
2791: POP
2792: GO 2703
2794: POP
2795: POP
// end ; end ;
2796: LD_VAR 0 1
2800: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2801: LD_INT 0
2803: PPUSH
2804: PPUSH
2805: PPUSH
2806: PPUSH
// result := [ ] ;
2807: LD_ADDR_VAR 0 7
2811: PUSH
2812: EMPTY
2813: ST_TO_ADDR
// for i := 1 to count do
2814: LD_ADDR_VAR 0 8
2818: PUSH
2819: DOUBLE
2820: LD_INT 1
2822: DEC
2823: ST_TO_ADDR
2824: LD_VAR 0 1
2828: PUSH
2829: FOR_TO
2830: IFFALSE 3248
// begin uc_direction := Rand ( 0 , 5 ) ;
2832: LD_ADDR_OWVAR 24
2836: PUSH
2837: LD_INT 0
2839: PPUSH
2840: LD_INT 5
2842: PPUSH
2843: CALL_OW 12
2847: ST_TO_ADDR
// if commander then
2848: LD_LOC 1
2852: IFFALSE 2961
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2854: LD_ADDR_OWVAR 26
2858: PUSH
2859: LD_OWVAR 19
2863: PUSH
2864: LD_OWVAR 20
2868: ARRAY
2869: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2870: LD_INT 1
2872: PPUSH
2873: LD_INT 2
2875: PPUSH
2876: CALL_OW 12
2880: PPUSH
2881: LD_VAR 0 2
2885: PPUSH
2886: LD_EXP 20
2890: PUSH
2891: LD_INT 2
2893: PLUS
2894: PPUSH
2895: CALL_OW 380
// hc_importance := 105 ;
2899: LD_ADDR_OWVAR 32
2903: PUSH
2904: LD_INT 105
2906: ST_TO_ADDR
// commander := false ;
2907: LD_ADDR_LOC 1
2911: PUSH
2912: LD_INT 0
2914: ST_TO_ADDR
// if Multiplayer then
2915: LD_OWVAR 4
2919: IFFALSE 2959
// begin hc_gallery := MULTIAVATARS ;
2921: LD_ADDR_OWVAR 33
2925: PUSH
2926: LD_STRING MULTIAVATARS
2928: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2929: LD_ADDR_OWVAR 34
2933: PUSH
2934: LD_OWVAR 20
2938: PPUSH
2939: CALL_OW 525
2943: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2944: LD_ADDR_OWVAR 27
2948: PUSH
2949: LD_OWVAR 20
2953: PPUSH
2954: CALL_OW 526
2958: ST_TO_ADDR
// end ; end else
2959: GO 3024
// begin hc_name :=  ;
2961: LD_ADDR_OWVAR 26
2965: PUSH
2966: LD_STRING 
2968: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2969: LD_INT 1
2971: PPUSH
2972: LD_INT 2
2974: PPUSH
2975: CALL_OW 12
2979: PPUSH
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_EXP 20
2989: PPUSH
2990: CALL_OW 380
// hc_importance := 0 ;
2994: LD_ADDR_OWVAR 32
2998: PUSH
2999: LD_INT 0
3001: ST_TO_ADDR
// if Multiplayer then
3002: LD_OWVAR 4
3006: IFFALSE 3024
// begin hc_gallery :=  ;
3008: LD_ADDR_OWVAR 33
3012: PUSH
3013: LD_STRING 
3015: ST_TO_ADDR
// hc_face_number := 0 ;
3016: LD_ADDR_OWVAR 34
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3024: LD_ADDR_VAR 0 10
3028: PUSH
3029: CALL_OW 44
3033: ST_TO_ADDR
// if global_defined then
3034: LD_LOC 3
3038: IFFALSE 3178
// begin if ( cl = class_soldier ) then
3040: LD_VAR 0 2
3044: PUSH
3045: LD_INT 1
3047: EQUAL
3048: IFFALSE 3068
// j := i + soldiers_created else
3050: LD_ADDR_VAR 0 9
3054: PUSH
3055: LD_VAR 0 8
3059: PUSH
3060: LD_LOC 4
3064: PLUS
3065: ST_TO_ADDR
3066: GO 3078
// j := i ;
3068: LD_ADDR_VAR 0 9
3072: PUSH
3073: LD_VAR 0 8
3077: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3078: LD_LOC 2
3082: PUSH
3083: LD_VAR 0 2
3087: ARRAY
3088: PUSH
3089: LD_VAR 0 9
3093: ARRAY
3094: PPUSH
3095: LD_VAR 0 10
3099: PPUSH
3100: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3104: LD_VAR 0 10
3108: PPUSH
3109: LD_INT 2
3111: PPUSH
3112: LD_LOC 2
3116: PUSH
3117: LD_VAR 0 2
3121: ARRAY
3122: PUSH
3123: LD_VAR 0 9
3127: ARRAY
3128: PPUSH
3129: LD_INT 2
3131: PPUSH
3132: CALL_OW 260
3136: PPUSH
3137: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3141: LD_VAR 0 10
3145: PPUSH
3146: LD_INT 1
3148: PPUSH
3149: LD_LOC 2
3153: PUSH
3154: LD_VAR 0 2
3158: ARRAY
3159: PUSH
3160: LD_VAR 0 9
3164: ARRAY
3165: PPUSH
3166: LD_INT 1
3168: PPUSH
3169: CALL_OW 260
3173: PPUSH
3174: CALL_OW 239
// end ; if building then
3178: LD_VAR 0 6
3182: IFFALSE 3200
// PlaceHumanInUnit ( un , building ) else
3184: LD_VAR 0 10
3188: PPUSH
3189: LD_VAR 0 6
3193: PPUSH
3194: CALL_OW 52
3198: GO 3227
// PlaceUnitXYR ( un , x , y , r , false ) ;
3200: LD_VAR 0 10
3204: PPUSH
3205: LD_VAR 0 3
3209: PPUSH
3210: LD_VAR 0 4
3214: PPUSH
3215: LD_VAR 0 5
3219: PPUSH
3220: LD_INT 0
3222: PPUSH
3223: CALL_OW 50
// result := result ^ [ un ] ;
3227: LD_ADDR_VAR 0 7
3231: PUSH
3232: LD_VAR 0 7
3236: PUSH
3237: LD_VAR 0 10
3241: PUSH
3242: EMPTY
3243: LIST
3244: ADD
3245: ST_TO_ADDR
// end ;
3246: GO 2829
3248: POP
3249: POP
// if not global_defined then
3250: LD_LOC 3
3254: NOT
3255: IFFALSE 3333
// if ( global_units >= cl ) then
3257: LD_LOC 2
3261: PUSH
3262: LD_VAR 0 2
3266: GREATEREQUAL
3267: IFFALSE 3308
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3269: LD_ADDR_LOC 2
3273: PUSH
3274: LD_LOC 2
3278: PPUSH
3279: LD_VAR 0 2
3283: PPUSH
3284: LD_LOC 2
3288: PUSH
3289: LD_VAR 0 2
3293: ARRAY
3294: PUSH
3295: LD_VAR 0 7
3299: ADD
3300: PPUSH
3301: CALL_OW 1
3305: ST_TO_ADDR
3306: GO 3333
// global_units := Replace ( global_units , cl , result ) ;
3308: LD_ADDR_LOC 2
3312: PUSH
3313: LD_LOC 2
3317: PPUSH
3318: LD_VAR 0 2
3322: PPUSH
3323: LD_VAR 0 7
3327: PPUSH
3328: CALL_OW 1
3332: ST_TO_ADDR
// if commander then
3333: LD_LOC 1
3337: IFFALSE 3384
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3339: LD_ADDR_EXP 45
3343: PUSH
3344: LD_EXP 45
3348: PPUSH
3349: LD_OWVAR 20
3353: PPUSH
3354: LD_EXP 45
3358: PUSH
3359: LD_OWVAR 20
3363: ARRAY
3364: PUSH
3365: LD_VAR 0 10
3369: ADD
3370: PPUSH
3371: CALL_OW 1
3375: ST_TO_ADDR
// commander := false ;
3376: LD_ADDR_LOC 1
3380: PUSH
3381: LD_INT 0
3383: ST_TO_ADDR
// end ; end ;
3384: LD_VAR 0 7
3388: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3389: LD_INT 0
3391: PPUSH
3392: PPUSH
3393: PPUSH
3394: PPUSH
3395: PPUSH
3396: PPUSH
3397: PPUSH
3398: PPUSH
3399: PPUSH
// if side in [ 0 , 9 ] then
3400: LD_VAR 0 1
3404: PUSH
3405: LD_INT 0
3407: PUSH
3408: LD_INT 9
3410: PUSH
3411: EMPTY
3412: LIST
3413: LIST
3414: IN
3415: IFFALSE 3419
// exit ;
3417: GO 4469
// pos := Side_Positions [ side ] ;
3419: LD_ADDR_VAR 0 3
3423: PUSH
3424: LD_EXP 34
3428: PUSH
3429: LD_VAR 0 1
3433: ARRAY
3434: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3435: LD_ADDR_OWVAR 21
3439: PUSH
3440: LD_EXP 35
3444: PUSH
3445: LD_VAR 0 1
3449: ARRAY
3450: ST_TO_ADDR
// uc_side := side ;
3451: LD_ADDR_OWVAR 20
3455: PUSH
3456: LD_VAR 0 1
3460: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3461: LD_ADDR_VAR 0 4
3465: PUSH
3466: LD_EXP 37
3470: PUSH
3471: LD_VAR 0 3
3475: ARRAY
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3481: LD_ADDR_VAR 0 5
3485: PUSH
3486: LD_EXP 37
3490: PUSH
3491: LD_VAR 0 3
3495: ARRAY
3496: PUSH
3497: LD_INT 2
3499: ARRAY
3500: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3501: LD_ADDR_VAR 0 6
3505: PUSH
3506: LD_EXP 37
3510: PUSH
3511: LD_VAR 0 3
3515: ARRAY
3516: PUSH
3517: LD_INT 3
3519: ARRAY
3520: ST_TO_ADDR
// if is_depot then
3521: LD_EXP 17
3525: IFFALSE 3658
// begin bc_type = b_depot ;
3527: LD_ADDR_OWVAR 42
3531: PUSH
3532: LD_INT 0
3534: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3535: LD_ADDR_VAR 0 10
3539: PUSH
3540: LD_VAR 0 4
3544: PPUSH
3545: LD_VAR 0 5
3549: PPUSH
3550: LD_VAR 0 6
3554: PPUSH
3555: CALL_OW 47
3559: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3560: LD_VAR 0 10
3564: PPUSH
3565: LD_STRING @
3567: PUSH
3568: LD_VAR 0 1
3572: STR
3573: PPUSH
3574: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3578: LD_VAR 0 10
3582: PPUSH
3583: CALL_OW 274
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: LD_EXP 22
3595: PUSH
3596: LD_INT 1
3598: ARRAY
3599: PPUSH
3600: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3604: LD_VAR 0 10
3608: PPUSH
3609: CALL_OW 274
3613: PPUSH
3614: LD_INT 2
3616: PPUSH
3617: LD_EXP 22
3621: PUSH
3622: LD_INT 2
3624: ARRAY
3625: PPUSH
3626: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3630: LD_VAR 0 10
3634: PPUSH
3635: CALL_OW 274
3639: PPUSH
3640: LD_INT 3
3642: PPUSH
3643: LD_EXP 22
3647: PUSH
3648: LD_INT 3
3650: ARRAY
3651: PPUSH
3652: CALL_OW 277
// end else
3656: GO 3802
// begin for i := 1 to 3 do
3658: LD_ADDR_VAR 0 7
3662: PUSH
3663: DOUBLE
3664: LD_INT 1
3666: DEC
3667: ST_TO_ADDR
3668: LD_INT 3
3670: PUSH
3671: FOR_TO
3672: IFFALSE 3800
// begin r := starting_resources [ i ] ;
3674: LD_ADDR_VAR 0 8
3678: PUSH
3679: LD_EXP 22
3683: PUSH
3684: LD_VAR 0 7
3688: ARRAY
3689: ST_TO_ADDR
// while r >= 10 do
3690: LD_VAR 0 8
3694: PUSH
3695: LD_INT 10
3697: GREATEREQUAL
3698: IFFALSE 3798
// if r > 50 then
3700: LD_VAR 0 8
3704: PUSH
3705: LD_INT 50
3707: GREATER
3708: IFFALSE 3754
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3710: LD_VAR 0 7
3714: PPUSH
3715: LD_INT 5
3717: PPUSH
3718: LD_VAR 0 4
3722: PPUSH
3723: LD_VAR 0 5
3727: PPUSH
3728: LD_INT 4
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 60
// r := r - 50 ;
3738: LD_ADDR_VAR 0 8
3742: PUSH
3743: LD_VAR 0 8
3747: PUSH
3748: LD_INT 50
3750: MINUS
3751: ST_TO_ADDR
// end else
3752: GO 3796
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3754: LD_VAR 0 7
3758: PPUSH
3759: LD_VAR 0 8
3763: PUSH
3764: LD_INT 10
3766: DIV
3767: PPUSH
3768: LD_VAR 0 4
3772: PPUSH
3773: LD_VAR 0 5
3777: PPUSH
3778: LD_INT 4
3780: PPUSH
3781: LD_INT 0
3783: PPUSH
3784: CALL_OW 60
// r := 0 ;
3788: LD_ADDR_VAR 0 8
3792: PUSH
3793: LD_INT 0
3795: ST_TO_ADDR
// end ;
3796: GO 3690
// end ;
3798: GO 3671
3800: POP
3801: POP
// end ; for r in starting_crates do
3802: LD_ADDR_VAR 0 8
3806: PUSH
3807: LD_EXP 21
3811: PUSH
3812: FOR_IN
3813: IFFALSE 3845
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3815: LD_INT 1
3817: PPUSH
3818: LD_INT 5
3820: PPUSH
3821: LD_VAR 0 4
3825: PPUSH
3826: LD_VAR 0 5
3830: PPUSH
3831: LD_VAR 0 8
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: CALL_OW 60
3843: GO 3812
3845: POP
3846: POP
// if def_morale_flags then
3847: LD_EXP 9
3851: IFFALSE 3990
// begin x := start_def [ pos ] [ 1 ] ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_EXP 39
3862: PUSH
3863: LD_VAR 0 3
3867: ARRAY
3868: PUSH
3869: LD_INT 1
3871: ARRAY
3872: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3873: LD_ADDR_VAR 0 5
3877: PUSH
3878: LD_EXP 39
3882: PUSH
3883: LD_VAR 0 3
3887: ARRAY
3888: PUSH
3889: LD_INT 2
3891: ARRAY
3892: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3893: LD_VAR 0 4
3897: PPUSH
3898: LD_VAR 0 5
3902: PPUSH
3903: LD_INT 12
3905: PPUSH
3906: LD_INT 2
3908: PPUSH
3909: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3913: LD_ADDR_EXP 44
3917: PUSH
3918: LD_EXP 44
3922: PUSH
3923: LD_VAR 0 1
3927: PPUSH
3928: LD_VAR 0 4
3932: PPUSH
3933: LD_VAR 0 5
3937: PPUSH
3938: LD_INT 1
3940: PUSH
3941: LD_INT 100
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: PUSH
3948: LD_INT 2
3950: PUSH
3951: LD_INT 50
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 3
3960: PUSH
3961: LD_INT 20
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: PUSH
3968: LD_INT 20
3970: PUSH
3971: LD_INT 100
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: PPUSH
3984: CALL_OW 418
3988: ADD
3989: ST_TO_ADDR
// end ; commander := true ;
3990: LD_ADDR_LOC 1
3994: PUSH
3995: LD_INT 1
3997: ST_TO_ADDR
// soldiers_created := 0 ;
3998: LD_ADDR_LOC 4
4002: PUSH
4003: LD_INT 0
4005: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4006: LD_ADDR_VAR 0 7
4010: PUSH
4011: DOUBLE
4012: LD_INT 1
4014: DEC
4015: ST_TO_ADDR
4016: LD_EXP 18
4020: PUSH
4021: FOR_TO
4022: IFFALSE 4175
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4024: LD_ADDR_VAR 0 4
4028: PUSH
4029: LD_EXP 38
4033: PUSH
4034: LD_VAR 0 3
4038: ARRAY
4039: PUSH
4040: LD_VAR 0 7
4044: ARRAY
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4050: LD_ADDR_VAR 0 5
4054: PUSH
4055: LD_EXP 38
4059: PUSH
4060: LD_VAR 0 3
4064: ARRAY
4065: PUSH
4066: LD_VAR 0 7
4070: ARRAY
4071: PUSH
4072: LD_INT 2
4074: ARRAY
4075: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4076: LD_ADDR_VAR 0 6
4080: PUSH
4081: LD_EXP 38
4085: PUSH
4086: LD_VAR 0 3
4090: ARRAY
4091: PUSH
4092: LD_VAR 0 7
4096: ARRAY
4097: PUSH
4098: LD_INT 3
4100: ARRAY
4101: ST_TO_ADDR
// bc_type := b_breastwork ;
4102: LD_ADDR_OWVAR 42
4106: PUSH
4107: LD_INT 31
4109: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4110: LD_ADDR_VAR 0 9
4114: PUSH
4115: LD_VAR 0 4
4119: PPUSH
4120: LD_VAR 0 5
4124: PPUSH
4125: LD_VAR 0 6
4129: PPUSH
4130: CALL_OW 47
4134: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4135: LD_INT 1
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: LD_INT 0
4146: PPUSH
4147: LD_INT 0
4149: PPUSH
4150: LD_VAR 0 9
4154: PPUSH
4155: CALL 2801 0 6
// soldiers_created := soldiers_created + 1 ;
4159: LD_ADDR_LOC 4
4163: PUSH
4164: LD_LOC 4
4168: PUSH
4169: LD_INT 1
4171: PLUS
4172: ST_TO_ADDR
// end ;
4173: GO 4021
4175: POP
4176: POP
// x := start_def [ pos ] [ 1 ] ;
4177: LD_ADDR_VAR 0 4
4181: PUSH
4182: LD_EXP 39
4186: PUSH
4187: LD_VAR 0 3
4191: ARRAY
4192: PUSH
4193: LD_INT 1
4195: ARRAY
4196: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4197: LD_ADDR_VAR 0 5
4201: PUSH
4202: LD_EXP 39
4206: PUSH
4207: LD_VAR 0 3
4211: ARRAY
4212: PUSH
4213: LD_INT 2
4215: ARRAY
4216: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4217: LD_LOC 8
4221: PUSH
4222: LD_EXP 18
4226: MINUS
4227: PPUSH
4228: LD_INT 1
4230: PPUSH
4231: LD_VAR 0 4
4235: PPUSH
4236: LD_VAR 0 5
4240: PPUSH
4241: LD_INT 5
4243: PPUSH
4244: LD_INT 0
4246: PPUSH
4247: CALL 2801 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4251: LD_LOC 5
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: LD_VAR 0 4
4263: PPUSH
4264: LD_VAR 0 5
4268: PPUSH
4269: LD_INT 5
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL 2801 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4279: LD_LOC 7
4283: PPUSH
4284: LD_INT 3
4286: PPUSH
4287: LD_VAR 0 4
4291: PPUSH
4292: LD_VAR 0 5
4296: PPUSH
4297: LD_INT 5
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL 2801 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4307: LD_LOC 6
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_VAR 0 4
4319: PPUSH
4320: LD_VAR 0 5
4324: PPUSH
4325: LD_INT 5
4327: PPUSH
4328: LD_INT 0
4330: PPUSH
4331: CALL 2801 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4335: LD_EXP 10
4339: PUSH
4340: LD_INT 20
4342: PPUSH
4343: LD_VAR 0 1
4347: PPUSH
4348: CALL_OW 321
4352: PUSH
4353: LD_INT 1
4355: EQUAL
4356: AND
4357: IFFALSE 4374
// SetTech ( tech_SibDet , side , state_researched ) ;
4359: LD_INT 20
4361: PPUSH
4362: LD_VAR 0 1
4366: PPUSH
4367: LD_INT 2
4369: PPUSH
4370: CALL_OW 322
// if def_siberite_bomb = 1 then
4374: LD_EXP 13
4378: PUSH
4379: LD_INT 1
4381: EQUAL
4382: IFFALSE 4416
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4384: LD_INT 25
4386: PPUSH
4387: LD_VAR 0 1
4391: PPUSH
4392: LD_INT 1
4394: PPUSH
4395: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4399: LD_INT 73
4401: PPUSH
4402: LD_VAR 0 1
4406: PPUSH
4407: LD_INT 1
4409: PPUSH
4410: CALL_OW 322
// end else
4414: GO 4446
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4416: LD_INT 25
4418: PPUSH
4419: LD_VAR 0 1
4423: PPUSH
4424: LD_INT 0
4426: PPUSH
4427: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4431: LD_INT 73
4433: PPUSH
4434: LD_VAR 0 1
4438: PPUSH
4439: LD_INT 0
4441: PPUSH
4442: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4446: LD_INT 24
4448: PPUSH
4449: LD_VAR 0 1
4453: PPUSH
4454: LD_INT 0
4456: PPUSH
4457: CALL_OW 322
// global_defined := true ;
4461: LD_ADDR_LOC 3
4465: PUSH
4466: LD_INT 1
4468: ST_TO_ADDR
// end ;
4469: LD_VAR 0 2
4473: RET
// function prepare_sides ; var i ; begin
4474: LD_INT 0
4476: PPUSH
4477: PPUSH
// global_units := [ ] ;
4478: LD_ADDR_LOC 2
4482: PUSH
4483: EMPTY
4484: ST_TO_ADDR
// global_defined := false ;
4485: LD_ADDR_LOC 3
4489: PUSH
4490: LD_INT 0
4492: ST_TO_ADDR
// CountClassMembers ;
4493: CALL 4543 0 0
// for i := 1 to 8 do
4497: LD_ADDR_VAR 0 2
4501: PUSH
4502: DOUBLE
4503: LD_INT 1
4505: DEC
4506: ST_TO_ADDR
4507: LD_INT 8
4509: PUSH
4510: FOR_TO
4511: IFFALSE 4536
// if Side_Positions [ i ] then
4513: LD_EXP 34
4517: PUSH
4518: LD_VAR 0 2
4522: ARRAY
4523: IFFALSE 4534
// prepare_side ( i ) ;
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL 3389 0 1
4534: GO 4510
4536: POP
4537: POP
// end ;
4538: LD_VAR 0 1
4542: RET
// function CountClassMembers ; var Mode ; begin
4543: LD_INT 0
4545: PPUSH
4546: PPUSH
// if No_Mechs then
4547: LD_EXP 15
4551: IFFALSE 4563
// Mode := 2 else
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: LD_INT 2
4560: ST_TO_ADDR
4561: GO 4571
// Mode := 1 ;
4563: LD_ADDR_VAR 0 2
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// neng := number_of_people ;
4571: LD_ADDR_LOC 5
4575: PUSH
4576: LD_EXP 19
4580: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4581: LD_ADDR_LOC 8
4585: PUSH
4586: LD_LOC 5
4590: PUSH
4591: LD_INT 4
4593: PUSH
4594: LD_INT 3
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_VAR 0 2
4605: ARRAY
4606: DIV
4607: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4608: LD_LOC 8
4612: PUSH
4613: LD_EXP 18
4617: LESS
4618: IFFALSE 4630
// nsol := number_of_breastworks ;
4620: LD_ADDR_LOC 8
4624: PUSH
4625: LD_EXP 18
4629: ST_TO_ADDR
// neng := neng - nsol ;
4630: LD_ADDR_LOC 5
4634: PUSH
4635: LD_LOC 5
4639: PUSH
4640: LD_LOC 8
4644: MINUS
4645: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4646: LD_ADDR_LOC 6
4650: PUSH
4651: LD_LOC 5
4655: PUSH
4656: LD_INT 3
4658: PUSH
4659: LD_INT 2
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_VAR 0 2
4670: ARRAY
4671: DIV
4672: ST_TO_ADDR
// if ( nsci < 1 ) then
4673: LD_LOC 6
4677: PUSH
4678: LD_INT 1
4680: LESS
4681: IFFALSE 4691
// nsci := 1 ;
4683: LD_ADDR_LOC 6
4687: PUSH
4688: LD_INT 1
4690: ST_TO_ADDR
// neng := neng - nsci ;
4691: LD_ADDR_LOC 5
4695: PUSH
4696: LD_LOC 5
4700: PUSH
4701: LD_LOC 6
4705: MINUS
4706: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4707: LD_ADDR_LOC 7
4711: PUSH
4712: LD_LOC 5
4716: PUSH
4717: LD_INT 2
4719: DIV
4720: PUSH
4721: LD_INT 0
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PUSH
4728: LD_VAR 0 2
4732: ARRAY
4733: ST_TO_ADDR
// neng := neng - nmech ;
4734: LD_ADDR_LOC 5
4738: PUSH
4739: LD_LOC 5
4743: PUSH
4744: LD_LOC 7
4748: MINUS
4749: ST_TO_ADDR
// if ( neng < 1 ) then
4750: LD_LOC 5
4754: PUSH
4755: LD_INT 1
4757: LESS
4758: IFFALSE 4768
// neng := 1 ;
4760: LD_ADDR_LOC 5
4764: PUSH
4765: LD_INT 1
4767: ST_TO_ADDR
// end ;
4768: LD_VAR 0 1
4772: RET
// starting begin disable ( 98 ) ;
4773: LD_INT 98
4775: DISABLE_MARKED
// disable ( 99 ) ;
4776: LD_INT 99
4778: DISABLE_MARKED
// disable ( 400 ) ;
4779: LD_INT 400
4781: DISABLE_MARKED
// disable ( 401 ) ;
4782: LD_INT 401
4784: DISABLE_MARKED
// mp_selectmsg := true ;
4785: LD_ADDR_OWVAR 13
4789: PUSH
4790: LD_INT 1
4792: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4793: CALL 68 0 0
// init_map ;
4797: CALL 1224 0 0
// init_respawning ;
4801: CALL 14560 0 0
// set_shared_visions_and_alliances ;
4805: CALL 2513 0 0
// ResetFog ;
4809: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4813: LD_OWVAR 2
4817: PPUSH
4818: CALL_OW 520
// AnimateTrees ( true ) ;
4822: LD_INT 1
4824: PPUSH
4825: CALL_OW 573
// prepare_sides ;
4829: CALL 4474 0 0
// Init_Win_Condition ;
4833: CALL 8498 0 0
// ShowTimer ;
4837: CALL 7521 0 0
// music_nat := Side_Nations [ your_side ] ;
4841: LD_ADDR_OWVAR 71
4845: PUSH
4846: LD_EXP 35
4850: PUSH
4851: LD_OWVAR 2
4855: ARRAY
4856: ST_TO_ADDR
// if IAmSpec then
4857: CALL_OW 531
4861: IFFALSE 4885
// begin fogoff ( true ) ;
4863: LD_INT 1
4865: PPUSH
4866: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4870: LD_INT 130
4872: PPUSH
4873: LD_INT 100
4875: PPUSH
4876: CALL_OW 86
// enable ( 400 ) ;
4880: LD_INT 400
4882: ENABLE_MARKED
// end else
4883: GO 4931
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4885: LD_EXP 39
4889: PUSH
4890: LD_EXP 34
4894: PUSH
4895: LD_OWVAR 2
4899: ARRAY
4900: ARRAY
4901: PUSH
4902: LD_INT 1
4904: ARRAY
4905: PPUSH
4906: LD_EXP 39
4910: PUSH
4911: LD_EXP 34
4915: PUSH
4916: LD_OWVAR 2
4920: ARRAY
4921: ARRAY
4922: PUSH
4923: LD_INT 2
4925: ARRAY
4926: PPUSH
4927: CALL_OW 86
// end ; InitApeman ;
4931: CALL 6029 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
4935: LD_ADDR_EXP 55
4939: PUSH
4940: LD_INT 1
4942: PUSH
4943: LD_INT 2
4945: PUSH
4946: LD_INT 3
4948: PUSH
4949: LD_INT 4
4951: PUSH
4952: LD_INT 5
4954: PUSH
4955: LD_INT 6
4957: PUSH
4958: LD_INT 7
4960: PUSH
4961: LD_INT 8
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: ST_TO_ADDR
// BeginBuildUp ;
4974: CALL 13962 0 0
// end ;
4978: END
// every 0 0$1 do
4979: GO 4981
4981: DISABLE
// if ( def_siberite_bomb > 1 ) then
4982: LD_EXP 13
4986: PUSH
4987: LD_INT 1
4989: GREATER
4990: IFFALSE 5005
// begin wait ( siberite_bomb_Delay ) ;
4992: LD_EXP 29
4996: PPUSH
4997: CALL_OW 67
// EnableSibFiss ;
5001: CALL 5006 0 0
// end ;
5005: END
// function EnableSibFiss ; var i ; begin
5006: LD_INT 0
5008: PPUSH
5009: PPUSH
// for i := 1 to 8 do
5010: LD_ADDR_VAR 0 2
5014: PUSH
5015: DOUBLE
5016: LD_INT 1
5018: DEC
5019: ST_TO_ADDR
5020: LD_INT 8
5022: PUSH
5023: FOR_TO
5024: IFFALSE 5070
// if Side_Positions [ i ] then
5026: LD_EXP 34
5030: PUSH
5031: LD_VAR 0 2
5035: ARRAY
5036: IFFALSE 5068
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5038: LD_INT 25
5040: PPUSH
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_INT 1
5048: PPUSH
5049: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5053: LD_INT 73
5055: PPUSH
5056: LD_VAR 0 2
5060: PPUSH
5061: LD_INT 1
5063: PPUSH
5064: CALL_OW 322
// end ;
5068: GO 5023
5070: POP
5071: POP
// end ; end_of_file
5072: LD_VAR 0 1
5076: RET
// every 0 0$25 + 0 0$1.0 do var i , areas , _areas ;
5077: GO 5079
5079: DISABLE
5080: LD_INT 0
5082: PPUSH
5083: PPUSH
5084: PPUSH
// begin _areas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
5085: LD_ADDR_VAR 0 3
5089: PUSH
5090: LD_INT 1
5092: PUSH
5093: LD_INT 2
5095: PUSH
5096: LD_INT 3
5098: PUSH
5099: LD_INT 4
5101: PUSH
5102: LD_INT 5
5104: PUSH
5105: LD_INT 6
5107: PUSH
5108: LD_INT 7
5110: PUSH
5111: LD_INT 8
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: ST_TO_ADDR
// areas := [ Between18 , Between21 , Between32 , Between43 , Between54 , Between65 , Between76 , Between87 ] ;
5124: LD_ADDR_VAR 0 2
5128: PUSH
5129: LD_INT 9
5131: PUSH
5132: LD_INT 10
5134: PUSH
5135: LD_INT 11
5137: PUSH
5138: LD_INT 12
5140: PUSH
5141: LD_INT 13
5143: PUSH
5144: LD_INT 14
5146: PUSH
5147: LD_INT 15
5149: PUSH
5150: LD_INT 16
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: ST_TO_ADDR
// for i := 1 to 8 do
5163: LD_ADDR_VAR 0 1
5167: PUSH
5168: DOUBLE
5169: LD_INT 1
5171: DEC
5172: ST_TO_ADDR
5173: LD_INT 8
5175: PUSH
5176: FOR_TO
5177: IFFALSE 5311
// begin if FilterUnitsInArea ( _areas [ i ] , [ [ f_not , [ f_side , 0 ] ] , [ f_type , unit_building ] ] ) and GetResourceArea ( areas [ i ] , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5179: LD_VAR 0 3
5183: PUSH
5184: LD_VAR 0 1
5188: ARRAY
5189: PPUSH
5190: LD_INT 3
5192: PUSH
5193: LD_INT 22
5195: PUSH
5196: LD_INT 0
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: PUSH
5207: LD_INT 21
5209: PUSH
5210: LD_INT 3
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 70
5225: PUSH
5226: LD_VAR 0 2
5230: PUSH
5231: LD_VAR 0 1
5235: ARRAY
5236: PPUSH
5237: LD_INT 1
5239: PPUSH
5240: CALL_OW 287
5244: PUSH
5245: LD_INT 200
5247: PUSH
5248: LD_EXP 23
5252: MINUS
5253: PUSH
5254: LD_INT 50
5256: DIVREAL
5257: PUSH
5258: LD_INT 5
5260: MUL
5261: LESS
5262: AND
5263: IFFALSE 5309
// begin wait ( rand ( 0 0$2 , 0 0$6 ) ) ;
5265: LD_INT 70
5267: PPUSH
5268: LD_INT 210
5270: PPUSH
5271: CALL_OW 12
5275: PPUSH
5276: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , areas [ i ] , true ) ;
5280: LD_INT 2
5282: PPUSH
5283: LD_INT 5
5285: PPUSH
5286: CALL_OW 12
5290: PPUSH
5291: LD_VAR 0 2
5295: PUSH
5296: LD_VAR 0 1
5300: ARRAY
5301: PPUSH
5302: LD_INT 1
5304: PPUSH
5305: CALL_OW 55
// end ; end ;
5309: GO 5176
5311: POP
5312: POP
// if GetResourceArea ( Center , mat_cans ) < ( ( 700 - shipments_density ) / 25 * 5 ) then
5313: LD_INT 17
5315: PPUSH
5316: LD_INT 1
5318: PPUSH
5319: CALL_OW 287
5323: PUSH
5324: LD_INT 700
5326: PUSH
5327: LD_EXP 23
5331: MINUS
5332: PUSH
5333: LD_INT 25
5335: DIVREAL
5336: PUSH
5337: LD_INT 5
5339: MUL
5340: LESS
5341: IFFALSE 5356
// CreateCratesArea ( 5 , Center , true ) ;
5343: LD_INT 5
5345: PPUSH
5346: LD_INT 17
5348: PPUSH
5349: LD_INT 1
5351: PPUSH
5352: CALL_OW 55
// wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
5356: LD_INT 350
5358: PPUSH
5359: LD_INT 525
5361: PPUSH
5362: CALL_OW 12
5366: PPUSH
5367: CALL_OW 67
// CreateCratesAnyWhere ( rand ( 1 , 5 ) , true ) ;
5371: LD_INT 1
5373: PPUSH
5374: LD_INT 5
5376: PPUSH
5377: CALL_OW 12
5381: PPUSH
5382: LD_INT 1
5384: PPUSH
5385: CALL_OW 57
// enable ;
5389: ENABLE
// end ;
5390: PPOPN 3
5392: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5393: GO 5395
5395: DISABLE
5396: LD_INT 0
5398: PPUSH
5399: PPUSH
// begin case tick of 1 .. 1 1$0 :
5400: LD_OWVAR 1
5404: PUSH
5405: LD_INT 1
5407: DOUBLE
5408: GREATEREQUAL
5409: IFFALSE 5417
5411: LD_INT 2100
5413: DOUBLE
5414: LESSEQUAL
5415: IFTRUE 5419
5417: GO 5447
5419: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5420: LD_EXP 23
5424: PUSH
5425: LD_INT 100
5427: DIVREAL
5428: PUSH
5429: LD_INT 525
5431: PPUSH
5432: LD_INT 1050
5434: PPUSH
5435: CALL_OW 12
5439: MUL
5440: PPUSH
5441: CALL_OW 67
5445: GO 5749
5447: LD_INT 2100
5449: PUSH
5450: LD_INT 1
5452: PLUS
5453: DOUBLE
5454: GREATEREQUAL
5455: IFFALSE 5463
5457: LD_INT 10500
5459: DOUBLE
5460: LESSEQUAL
5461: IFTRUE 5465
5463: GO 5493
5465: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5466: LD_EXP 23
5470: PUSH
5471: LD_INT 100
5473: DIVREAL
5474: PUSH
5475: LD_INT 1050
5477: PPUSH
5478: LD_INT 1750
5480: PPUSH
5481: CALL_OW 12
5485: MUL
5486: PPUSH
5487: CALL_OW 67
5491: GO 5749
5493: LD_INT 10500
5495: PUSH
5496: LD_INT 1
5498: PLUS
5499: DOUBLE
5500: GREATEREQUAL
5501: IFFALSE 5509
5503: LD_INT 21000
5505: DOUBLE
5506: LESSEQUAL
5507: IFTRUE 5511
5509: GO 5539
5511: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5512: LD_EXP 23
5516: PUSH
5517: LD_INT 100
5519: DIVREAL
5520: PUSH
5521: LD_INT 1750
5523: PPUSH
5524: LD_INT 2100
5526: PPUSH
5527: CALL_OW 12
5531: MUL
5532: PPUSH
5533: CALL_OW 67
5537: GO 5749
5539: LD_INT 21000
5541: PUSH
5542: LD_INT 1
5544: PLUS
5545: DOUBLE
5546: GREATEREQUAL
5547: IFFALSE 5555
5549: LD_INT 42000
5551: DOUBLE
5552: LESSEQUAL
5553: IFTRUE 5557
5555: GO 5585
5557: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5558: LD_EXP 23
5562: PUSH
5563: LD_INT 100
5565: DIVREAL
5566: PUSH
5567: LD_INT 2100
5569: PPUSH
5570: LD_INT 2275
5572: PPUSH
5573: CALL_OW 12
5577: MUL
5578: PPUSH
5579: CALL_OW 67
5583: GO 5749
5585: LD_INT 42000
5587: PUSH
5588: LD_INT 1
5590: PLUS
5591: DOUBLE
5592: GREATEREQUAL
5593: IFFALSE 5601
5595: LD_INT 63000
5597: DOUBLE
5598: LESSEQUAL
5599: IFTRUE 5603
5601: GO 5631
5603: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5604: LD_EXP 23
5608: PUSH
5609: LD_INT 100
5611: DIVREAL
5612: PUSH
5613: LD_INT 2275
5615: PPUSH
5616: LD_INT 2450
5618: PPUSH
5619: CALL_OW 12
5623: MUL
5624: PPUSH
5625: CALL_OW 67
5629: GO 5749
5631: LD_INT 63000
5633: PUSH
5634: LD_INT 1
5636: PLUS
5637: DOUBLE
5638: GREATEREQUAL
5639: IFFALSE 5647
5641: LD_INT 105000
5643: DOUBLE
5644: LESSEQUAL
5645: IFTRUE 5649
5647: GO 5677
5649: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5650: LD_EXP 23
5654: PUSH
5655: LD_INT 100
5657: DIVREAL
5658: PUSH
5659: LD_INT 2450
5661: PPUSH
5662: LD_INT 2800
5664: PPUSH
5665: CALL_OW 12
5669: MUL
5670: PPUSH
5671: CALL_OW 67
5675: GO 5749
5677: LD_INT 105000
5679: PUSH
5680: LD_INT 1
5682: PLUS
5683: DOUBLE
5684: GREATEREQUAL
5685: IFFALSE 5693
5687: LD_INT 630000
5689: DOUBLE
5690: LESSEQUAL
5691: IFTRUE 5695
5693: GO 5723
5695: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5696: LD_EXP 23
5700: PUSH
5701: LD_INT 100
5703: DIVREAL
5704: PUSH
5705: LD_INT 2800
5707: PPUSH
5708: LD_INT 3500
5710: PPUSH
5711: CALL_OW 12
5715: MUL
5716: PPUSH
5717: CALL_OW 67
5721: GO 5749
5723: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5724: LD_EXP 23
5728: PUSH
5729: LD_INT 100
5731: DIVREAL
5732: PUSH
5733: LD_INT 3500
5735: PPUSH
5736: LD_INT 3850
5738: PPUSH
5739: CALL_OW 12
5743: MUL
5744: PPUSH
5745: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5749: LD_ADDR_VAR 0 2
5753: PUSH
5754: LD_INT 3
5756: PPUSH
5757: LD_INT 5
5759: PPUSH
5760: CALL_OW 12
5764: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5765: LD_ADDR_VAR 0 1
5769: PUSH
5770: LD_EXP 34
5774: PUSH
5775: LD_INT 0
5777: PUSH
5778: EMPTY
5779: LIST
5780: DIFF
5781: PUSH
5782: FOR_IN
5783: IFFALSE 5832
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5785: LD_VAR 0 2
5789: PPUSH
5790: LD_EXP 39
5794: PUSH
5795: LD_VAR 0 1
5799: ARRAY
5800: PUSH
5801: LD_INT 1
5803: ARRAY
5804: PPUSH
5805: LD_EXP 39
5809: PUSH
5810: LD_VAR 0 1
5814: ARRAY
5815: PUSH
5816: LD_INT 2
5818: ARRAY
5819: PPUSH
5820: LD_INT 20
5822: PPUSH
5823: LD_INT 1
5825: PPUSH
5826: CALL_OW 56
5830: GO 5782
5832: POP
5833: POP
// enable ;
5834: ENABLE
// end ; end_of_file
5835: PPOPN 2
5837: END
// every 20 20$00 trigger apemanNumber do
5838: LD_EXP 46
5842: IFFALSE 5875
5844: GO 5846
5846: DISABLE
// begin enable ;
5847: ENABLE
// if apeLevel >= 8 then
5848: LD_EXP 51
5852: PUSH
5853: LD_INT 8
5855: GREATEREQUAL
5856: IFFALSE 5861
// disable else
5858: DISABLE
5859: GO 5875
// apeLevel := apeLevel + 1 ;
5861: LD_ADDR_EXP 51
5865: PUSH
5866: LD_EXP 51
5870: PUSH
5871: LD_INT 1
5873: PLUS
5874: ST_TO_ADDR
// end ;
5875: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5876: LD_EXP 46
5880: PUSH
5881: LD_EXP 47
5885: LESS
5886: IFFALSE 6026
5888: GO 5890
5890: DISABLE
5891: LD_INT 0
5893: PPUSH
5894: PPUSH
5895: PPUSH
5896: PPUSH
// begin enable ;
5897: ENABLE
// for i := 1 to apemanPos do
5898: LD_ADDR_VAR 0 1
5902: PUSH
5903: DOUBLE
5904: LD_INT 1
5906: DEC
5907: ST_TO_ADDR
5908: LD_EXP 49
5912: PUSH
5913: FOR_TO
5914: IFFALSE 6024
// begin if apemanPlayerCount [ i ] then
5916: LD_EXP 50
5920: PUSH
5921: LD_VAR 0 1
5925: ARRAY
5926: IFFALSE 6022
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5928: LD_EXP 50
5932: PUSH
5933: LD_VAR 0 1
5937: ARRAY
5938: PUSH
5939: LD_EXP 49
5943: PUSH
5944: LD_VAR 0 1
5948: ARRAY
5949: GREATER
5950: IFFALSE 6022
// begin ape := PrepareApeman ;
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: CALL 6545 0 0
5961: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5962: LD_VAR 0 2
5966: PPUSH
5967: LD_EXP 52
5971: PUSH
5972: LD_VAR 0 1
5976: ARRAY
5977: PPUSH
5978: LD_INT 0
5980: PPUSH
5981: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5985: LD_ADDR_EXP 49
5989: PUSH
5990: LD_EXP 49
5994: PPUSH
5995: LD_VAR 0 1
5999: PPUSH
6000: LD_EXP 49
6004: PUSH
6005: LD_VAR 0 1
6009: ARRAY
6010: PUSH
6011: LD_VAR 0 2
6015: UNION
6016: PPUSH
6017: CALL_OW 1
6021: ST_TO_ADDR
// end ; end ; end ;
6022: GO 5913
6024: POP
6025: POP
// end ;
6026: PPOPN 4
6028: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6029: LD_INT 0
6031: PPUSH
6032: PPUSH
6033: PPUSH
6034: PPUSH
6035: PPUSH
6036: PPUSH
6037: PPUSH
// playersAmount := 0 ;
6038: LD_ADDR_VAR 0 3
6042: PUSH
6043: LD_INT 0
6045: ST_TO_ADDR
// _apeAreas := [ Between18 , Between21 , Between32 , Between43 , Between54 , Between65 , Between76 , Between87 ] ;
6046: LD_ADDR_VAR 0 7
6050: PUSH
6051: LD_INT 9
6053: PUSH
6054: LD_INT 10
6056: PUSH
6057: LD_INT 11
6059: PUSH
6060: LD_INT 12
6062: PUSH
6063: LD_INT 13
6065: PUSH
6066: LD_INT 14
6068: PUSH
6069: LD_INT 15
6071: PUSH
6072: LD_INT 16
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6085: LD_ADDR_EXP 52
6089: PUSH
6090: LD_INT 0
6092: PUSH
6093: LD_INT 0
6095: PUSH
6096: LD_INT 0
6098: PUSH
6099: LD_INT 0
6101: PUSH
6102: LD_INT 0
6104: PUSH
6105: LD_INT 0
6107: PUSH
6108: LD_INT 0
6110: PUSH
6111: LD_INT 0
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: ST_TO_ADDR
// for j = 1 to Side_Positions do
6124: LD_ADDR_VAR 0 4
6128: PUSH
6129: DOUBLE
6130: LD_INT 1
6132: DEC
6133: ST_TO_ADDR
6134: LD_EXP 34
6138: PUSH
6139: FOR_TO
6140: IFFALSE 6207
// if Side_Positions [ j ] then
6142: LD_EXP 34
6146: PUSH
6147: LD_VAR 0 4
6151: ARRAY
6152: IFFALSE 6205
// begin playersAmount := playersAmount + 1 ;
6154: LD_ADDR_VAR 0 3
6158: PUSH
6159: LD_VAR 0 3
6163: PUSH
6164: LD_INT 1
6166: PLUS
6167: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6168: LD_ADDR_EXP 52
6172: PUSH
6173: LD_EXP 52
6177: PPUSH
6178: LD_VAR 0 4
6182: PPUSH
6183: LD_VAR 0 7
6187: PUSH
6188: LD_EXP 34
6192: PUSH
6193: LD_VAR 0 4
6197: ARRAY
6198: ARRAY
6199: PPUSH
6200: CALL_OW 1
6204: ST_TO_ADDR
// end ;
6205: GO 6139
6207: POP
6208: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6209: LD_ADDR_EXP 48
6213: PUSH
6214: LD_INT 3
6216: PUSH
6217: LD_EXP 25
6221: MUL
6222: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6223: LD_ADDR_EXP 46
6227: PUSH
6228: LD_VAR 0 3
6232: PUSH
6233: LD_EXP 48
6237: MUL
6238: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6239: LD_ADDR_EXP 47
6243: PUSH
6244: LD_EXP 46
6248: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6249: LD_ADDR_EXP 49
6253: PUSH
6254: LD_INT 0
6256: PUSH
6257: LD_INT 0
6259: PUSH
6260: LD_INT 0
6262: PUSH
6263: LD_INT 0
6265: PUSH
6266: LD_INT 0
6268: PUSH
6269: LD_INT 0
6271: PUSH
6272: LD_INT 0
6274: PUSH
6275: LD_INT 0
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6288: LD_ADDR_EXP 50
6292: PUSH
6293: LD_INT 0
6295: PUSH
6296: LD_INT 0
6298: PUSH
6299: LD_INT 0
6301: PUSH
6302: LD_INT 0
6304: PUSH
6305: LD_INT 0
6307: PUSH
6308: LD_INT 0
6310: PUSH
6311: LD_INT 0
6313: PUSH
6314: LD_INT 0
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: ST_TO_ADDR
// apeLevel := 1 ;
6327: LD_ADDR_EXP 51
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// if not apemanNumber then
6335: LD_EXP 46
6339: NOT
6340: IFFALSE 6344
// exit ;
6342: GO 6540
// for i := 1 to apemanPerPlayer do
6344: LD_ADDR_VAR 0 2
6348: PUSH
6349: DOUBLE
6350: LD_INT 1
6352: DEC
6353: ST_TO_ADDR
6354: LD_EXP 48
6358: PUSH
6359: FOR_TO
6360: IFFALSE 6538
// begin for j := 1 to Side_Positions do
6362: LD_ADDR_VAR 0 4
6366: PUSH
6367: DOUBLE
6368: LD_INT 1
6370: DEC
6371: ST_TO_ADDR
6372: LD_EXP 34
6376: PUSH
6377: FOR_TO
6378: IFFALSE 6534
// if Side_Positions [ j ] then
6380: LD_EXP 34
6384: PUSH
6385: LD_VAR 0 4
6389: ARRAY
6390: IFFALSE 6532
// begin pos := Side_Positions [ j ] ;
6392: LD_ADDR_VAR 0 6
6396: PUSH
6397: LD_EXP 34
6401: PUSH
6402: LD_VAR 0 4
6406: ARRAY
6407: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6408: LD_ADDR_EXP 50
6412: PUSH
6413: LD_EXP 50
6417: PPUSH
6418: LD_VAR 0 4
6422: PPUSH
6423: LD_EXP 50
6427: PUSH
6428: LD_VAR 0 4
6432: ARRAY
6433: PUSH
6434: LD_INT 1
6436: PLUS
6437: PPUSH
6438: CALL_OW 1
6442: ST_TO_ADDR
// ape := PrepareApeman ;
6443: LD_ADDR_VAR 0 5
6447: PUSH
6448: CALL 6545 0 0
6452: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6453: LD_ADDR_EXP 49
6457: PUSH
6458: LD_EXP 49
6462: PPUSH
6463: LD_VAR 0 4
6467: PPUSH
6468: LD_EXP 49
6472: PUSH
6473: LD_VAR 0 4
6477: ARRAY
6478: PPUSH
6479: LD_EXP 49
6483: PUSH
6484: LD_VAR 0 4
6488: ARRAY
6489: PUSH
6490: LD_INT 1
6492: PLUS
6493: PPUSH
6494: LD_VAR 0 5
6498: PPUSH
6499: CALL_OW 1
6503: PPUSH
6504: CALL_OW 1
6508: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6509: LD_VAR 0 5
6513: PPUSH
6514: LD_EXP 52
6518: PUSH
6519: LD_VAR 0 4
6523: ARRAY
6524: PPUSH
6525: LD_INT 0
6527: PPUSH
6528: CALL_OW 49
// end ;
6532: GO 6377
6534: POP
6535: POP
// end ;
6536: GO 6359
6538: POP
6539: POP
// end ;
6540: LD_VAR 0 1
6544: RET
// export function PrepareApeman ; var bonus ; begin
6545: LD_INT 0
6547: PPUSH
6548: PPUSH
// uc_side := 0 ;
6549: LD_ADDR_OWVAR 20
6553: PUSH
6554: LD_INT 0
6556: ST_TO_ADDR
// uc_nation := 0 ;
6557: LD_ADDR_OWVAR 21
6561: PUSH
6562: LD_INT 0
6564: ST_TO_ADDR
// InitHc ;
6565: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6569: LD_ADDR_VAR 0 2
6573: PUSH
6574: LD_INT 1
6576: NEG
6577: PUSH
6578: LD_INT 0
6580: PUSH
6581: LD_INT 1
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 25
6591: PUSH
6592: LD_INT 12
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PPUSH
6599: CALL_OW 69
6603: PUSH
6604: LD_INT 3
6606: MOD
6607: PUSH
6608: LD_INT 1
6610: PLUS
6611: ARRAY
6612: ST_TO_ADDR
// hc_class := class_apeman ;
6613: LD_ADDR_OWVAR 28
6617: PUSH
6618: LD_INT 12
6620: ST_TO_ADDR
// hc_gallery :=  ;
6621: LD_ADDR_OWVAR 33
6625: PUSH
6626: LD_STRING 
6628: ST_TO_ADDR
// hc_name :=  ;
6629: LD_ADDR_OWVAR 26
6633: PUSH
6634: LD_STRING 
6636: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6637: LD_ADDR_OWVAR 31
6641: PUSH
6642: LD_EXP 51
6646: PUSH
6647: LD_VAR 0 2
6651: PLUS
6652: PUSH
6653: LD_EXP 51
6657: PUSH
6658: LD_VAR 0 2
6662: PLUS
6663: PUSH
6664: LD_EXP 51
6668: PUSH
6669: LD_VAR 0 2
6673: PLUS
6674: PUSH
6675: LD_EXP 51
6679: PUSH
6680: LD_VAR 0 2
6684: PLUS
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6692: LD_ADDR_OWVAR 35
6696: PUSH
6697: LD_INT 10
6699: PUSH
6700: LD_VAR 0 2
6704: MUL
6705: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6706: LD_ADDR_OWVAR 29
6710: PUSH
6711: LD_INT 12
6713: PUSH
6714: LD_INT 12
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: ST_TO_ADDR
// result := CreateHuman ;
6721: LD_ADDR_VAR 0 1
6725: PUSH
6726: CALL_OW 44
6730: ST_TO_ADDR
// end ;
6731: LD_VAR 0 1
6735: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6736: LD_INT 0
6738: PPUSH
6739: PPUSH
6740: PPUSH
// if not ape then
6741: LD_VAR 0 1
6745: NOT
6746: IFFALSE 6750
// exit ;
6748: GO 6875
// side := GetSide ( ape ) ;
6750: LD_ADDR_VAR 0 3
6754: PUSH
6755: LD_VAR 0 1
6759: PPUSH
6760: CALL_OW 255
6764: ST_TO_ADDR
// if not side then
6765: LD_VAR 0 3
6769: NOT
6770: IFFALSE 6824
// begin for i = 1 to apemanPos do
6772: LD_ADDR_VAR 0 4
6776: PUSH
6777: DOUBLE
6778: LD_INT 1
6780: DEC
6781: ST_TO_ADDR
6782: LD_EXP 49
6786: PUSH
6787: FOR_TO
6788: IFFALSE 6822
// if ape in apemanPos [ i ] then
6790: LD_VAR 0 1
6794: PUSH
6795: LD_EXP 49
6799: PUSH
6800: LD_VAR 0 4
6804: ARRAY
6805: IN
6806: IFFALSE 6820
// begin side := i ;
6808: LD_ADDR_VAR 0 3
6812: PUSH
6813: LD_VAR 0 4
6817: ST_TO_ADDR
// break ;
6818: GO 6822
// end ;
6820: GO 6787
6822: POP
6823: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6824: LD_ADDR_EXP 49
6828: PUSH
6829: LD_EXP 49
6833: PPUSH
6834: LD_VAR 0 3
6838: PPUSH
6839: LD_EXP 49
6843: PUSH
6844: LD_VAR 0 3
6848: ARRAY
6849: PUSH
6850: LD_VAR 0 1
6854: DIFF
6855: PPUSH
6856: CALL_OW 1
6860: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6861: LD_ADDR_EXP 46
6865: PUSH
6866: LD_EXP 46
6870: PUSH
6871: LD_INT 1
6873: MINUS
6874: ST_TO_ADDR
// end ; end_of_file
6875: LD_VAR 0 2
6879: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6880: LD_VAR 0 1
6884: PPUSH
6885: CALL_OW 266
6889: PUSH
6890: LD_INT 0
6892: PUSH
6893: LD_INT 1
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: IN
6900: IFFALSE 6925
// SetBName ( b , @ & GetSide ( b ) ) ;
6902: LD_VAR 0 1
6906: PPUSH
6907: LD_STRING @
6909: PUSH
6910: LD_VAR 0 1
6914: PPUSH
6915: CALL_OW 255
6919: STR
6920: PPUSH
6921: CALL_OW 500
// end ;
6925: PPOPN 2
6927: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6928: LD_VAR 0 1
6932: PPUSH
6933: CALL_OW 266
6937: PUSH
6938: LD_INT 0
6940: PUSH
6941: LD_INT 1
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: IN
6948: IFFALSE 6973
// SetBName ( b , @ & GetSide ( b ) ) ;
6950: LD_VAR 0 1
6954: PPUSH
6955: LD_STRING @
6957: PUSH
6958: LD_VAR 0 1
6962: PPUSH
6963: CALL_OW 255
6967: STR
6968: PPUSH
6969: CALL_OW 500
// end ;
6973: PPOPN 3
6975: END
// on VehicleConstructed ( veh , fac ) do var side ;
6976: LD_INT 0
6978: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6979: LD_VAR 0 1
6983: PPUSH
6984: CALL_OW 263
6988: PUSH
6989: LD_INT 5
6991: EQUAL
6992: IFFALSE 7134
// begin side := GetSide ( veh ) ;
6994: LD_ADDR_VAR 0 3
6998: PUSH
6999: LD_VAR 0 1
7003: PPUSH
7004: CALL_OW 255
7008: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7009: LD_ADDR_EXP 49
7013: PUSH
7014: LD_EXP 49
7018: PPUSH
7019: LD_VAR 0 3
7023: PPUSH
7024: LD_EXP 49
7028: PUSH
7029: LD_VAR 0 3
7033: ARRAY
7034: PPUSH
7035: LD_INT 52
7037: PUSH
7038: EMPTY
7039: LIST
7040: PPUSH
7041: CALL_OW 72
7045: PUSH
7046: LD_INT 22
7048: PUSH
7049: LD_VAR 0 3
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: LD_INT 2
7060: PUSH
7061: LD_INT 33
7063: PUSH
7064: LD_INT 5
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: LD_INT 25
7073: PUSH
7074: LD_INT 12
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PUSH
7081: LD_INT 25
7083: PUSH
7084: LD_INT 15
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_INT 25
7093: PUSH
7094: LD_INT 16
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 25
7103: PUSH
7104: LD_INT 17
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PPUSH
7123: CALL_OW 69
7127: UNION
7128: PPUSH
7129: CALL_OW 1
7133: ST_TO_ADDR
// end ; end ;
7134: PPOPN 3
7136: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7137: LD_INT 0
7139: PPUSH
7140: PPUSH
7141: PPUSH
7142: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7143: LD_VAR 0 1
7147: PPUSH
7148: CALL_OW 257
7152: PUSH
7153: LD_INT 12
7155: PUSH
7156: LD_INT 15
7158: PUSH
7159: LD_INT 17
7161: PUSH
7162: LD_INT 16
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: IN
7171: PUSH
7172: LD_VAR 0 1
7176: PPUSH
7177: CALL_OW 263
7181: PUSH
7182: LD_INT 5
7184: EQUAL
7185: OR
7186: IFFALSE 7197
// ApeKilled ( j ) ;
7188: LD_VAR 0 1
7192: PPUSH
7193: CALL 6736 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7197: LD_VAR 0 1
7201: PPUSH
7202: CALL_OW 266
7206: PUSH
7207: LD_INT 0
7209: PUSH
7210: LD_INT 1
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: IN
7217: IFFALSE 7299
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7219: LD_ADDR_VAR 0 4
7223: PUSH
7224: LD_EXP 34
7228: PUSH
7229: LD_VAR 0 1
7233: PPUSH
7234: CALL_OW 255
7238: ARRAY
7239: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7240: LD_ADDR_VAR 0 2
7244: PUSH
7245: LD_EXP 39
7249: PUSH
7250: LD_VAR 0 4
7254: ARRAY
7255: PUSH
7256: LD_INT 1
7258: ARRAY
7259: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7260: LD_ADDR_VAR 0 3
7264: PUSH
7265: LD_EXP 39
7269: PUSH
7270: LD_VAR 0 4
7274: ARRAY
7275: PUSH
7276: LD_INT 2
7278: ARRAY
7279: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7280: LD_VAR 0 2
7284: PPUSH
7285: LD_VAR 0 3
7289: PPUSH
7290: CALL_OW 420
7294: PPUSH
7295: CALL_OW 419
// end ; end ;
7299: PPOPN 5
7301: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7302: LD_VAR 0 1
7306: PPUSH
7307: LD_VAR 0 2
7311: PPUSH
7312: LD_VAR 0 3
7316: PPUSH
7317: LD_OWVAR 2
7321: PPUSH
7322: CALL 8259 0 4
7326: PPOPN 3
7328: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7329: LD_INT 0
7331: PPUSH
7332: PPUSH
// for un in battle_flags_id do
7333: LD_ADDR_VAR 0 2
7337: PUSH
7338: LD_EXP 44
7342: PUSH
7343: FOR_IN
7344: IFFALSE 7419
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7346: LD_VAR 0 2
7350: PPUSH
7351: LD_INT 1
7353: PUSH
7354: LD_LOC 9
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: LD_INT 2
7365: PUSH
7366: LD_LOC 9
7370: PUSH
7371: LD_INT 2
7373: DIV
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 3
7381: PUSH
7382: LD_LOC 9
7386: PUSH
7387: LD_INT 5
7389: DIV
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: LD_INT 20
7397: PUSH
7398: LD_LOC 9
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: PPUSH
7413: CALL_OW 423
7417: GO 7343
7419: POP
7420: POP
// end ;
7421: LD_VAR 0 1
7425: RET
// every 1 do var un ;
7426: GO 7428
7428: DISABLE
7429: LD_INT 0
7431: PPUSH
// begin if not def_morale_flags then
7432: LD_EXP 9
7436: NOT
7437: IFFALSE 7441
// exit ;
7439: GO 7518
// if not morale_decreasing_time then
7441: LD_EXP 24
7445: NOT
7446: IFFALSE 7450
// exit ;
7448: GO 7518
// strength = 100 ;
7450: LD_ADDR_LOC 9
7454: PUSH
7455: LD_INT 100
7457: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7458: LD_EXP 24
7462: PPUSH
7463: CALL_OW 67
// strength := strength - 1 ;
7467: LD_ADDR_LOC 9
7471: PUSH
7472: LD_LOC 9
7476: PUSH
7477: LD_INT 1
7479: MINUS
7480: ST_TO_ADDR
// Update_Flags ;
7481: CALL 7329 0 0
// until not strength ;
7485: LD_LOC 9
7489: NOT
7490: IFFALSE 7458
// for un in battle_flags_id do
7492: LD_ADDR_VAR 0 1
7496: PUSH
7497: LD_EXP 44
7501: PUSH
7502: FOR_IN
7503: IFFALSE 7516
// KillBattleFlag ( un ) ;
7505: LD_VAR 0 1
7509: PPUSH
7510: CALL_OW 419
7514: GO 7502
7516: POP
7517: POP
// end ; end_of_file
7518: PPOPN 1
7520: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7521: LD_INT 0
7523: PPUSH
7524: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7525: LD_ADDR_VAR 0 2
7529: PUSH
7530: LD_STRING #Multi1x1-Time
7532: PUSH
7533: LD_OWVAR 1
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: ST_TO_ADDR
// if WaitServerStrings then
7542: LD_EXP 54
7546: IFFALSE 7564
// AllStrings = AllStrings ^ WaitServerStrings ;
7548: LD_ADDR_VAR 0 2
7552: PUSH
7553: LD_VAR 0 2
7557: PUSH
7558: LD_EXP 54
7562: ADD
7563: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7564: LD_INT 0
7566: PUSH
7567: LD_EXP 29
7571: PUSH
7572: LD_OWVAR 1
7576: MINUS
7577: LESSEQUAL
7578: IFFALSE 7609
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7580: LD_ADDR_VAR 0 2
7584: PUSH
7585: LD_VAR 0 2
7589: PUSH
7590: LD_STRING #allowedsibbomb
7592: PUSH
7593: LD_EXP 29
7597: PUSH
7598: LD_OWVAR 1
7602: MINUS
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: ADD
7608: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7609: LD_INT 0
7611: PUSH
7612: LD_EXP 57
7616: PUSH
7617: LD_OWVAR 1
7621: MINUS
7622: LESSEQUAL
7623: IFFALSE 7654
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7625: LD_ADDR_VAR 0 2
7629: PUSH
7630: LD_VAR 0 2
7634: PUSH
7635: LD_STRING #builduptime
7637: PUSH
7638: LD_EXP 57
7642: PUSH
7643: LD_OWVAR 1
7647: MINUS
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: ADD
7653: ST_TO_ADDR
// if ( ExtraStrings ) then
7654: LD_EXP 53
7658: IFFALSE 7680
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7660: LD_ADDR_VAR 0 2
7664: PUSH
7665: LD_VAR 0 2
7669: PUSH
7670: LD_STRING 
7672: ADD
7673: PUSH
7674: LD_EXP 53
7678: ADD
7679: ST_TO_ADDR
// Display_Strings := AllStrings ;
7680: LD_ADDR_OWVAR 47
7684: PUSH
7685: LD_VAR 0 2
7689: ST_TO_ADDR
// end ;
7690: LD_VAR 0 1
7694: RET
// every 0 0$1 do
7695: GO 7697
7697: DISABLE
// begin ShowTimer ;
7698: CALL 7521 0 0
// enable ;
7702: ENABLE
// end ; end_of_file
7703: END
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
7704: LD_INT 0
7706: PPUSH
7707: PPUSH
7708: PPUSH
7709: PPUSH
7710: PPUSH
7711: PPUSH
7712: PPUSH
7713: PPUSH
7714: PPUSH
// for i := 1 to 8 do
7715: LD_ADDR_VAR 0 2
7719: PUSH
7720: DOUBLE
7721: LD_INT 1
7723: DEC
7724: ST_TO_ADDR
7725: LD_INT 8
7727: PUSH
7728: FOR_TO
7729: IFFALSE 8113
// begin if Side_Positions [ i ] then
7731: LD_EXP 34
7735: PUSH
7736: LD_VAR 0 2
7740: ARRAY
7741: IFFALSE 8111
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
7743: LD_ADDR_VAR 0 7
7747: PUSH
7748: LD_INT 22
7750: PUSH
7751: LD_VAR 0 2
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 21
7762: PUSH
7763: LD_INT 1
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PPUSH
7774: CALL_OW 69
7778: PUSH
7779: LD_INT 0
7781: PLUS
7782: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7783: LD_ADDR_VAR 0 9
7787: PUSH
7788: LD_INT 22
7790: PUSH
7791: LD_VAR 0 2
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: LD_INT 2
7802: PUSH
7803: LD_INT 30
7805: PUSH
7806: LD_INT 0
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: PUSH
7813: LD_INT 30
7815: PUSH
7816: LD_INT 1
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: LIST
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PPUSH
7832: CALL_OW 69
7836: ST_TO_ADDR
// crates := 0 ;
7837: LD_ADDR_VAR 0 4
7841: PUSH
7842: LD_INT 0
7844: ST_TO_ADDR
// oil := 0 ;
7845: LD_ADDR_VAR 0 5
7849: PUSH
7850: LD_INT 0
7852: ST_TO_ADDR
// sib := 0 ;
7853: LD_ADDR_VAR 0 6
7857: PUSH
7858: LD_INT 0
7860: ST_TO_ADDR
// if bases then
7861: LD_VAR 0 9
7865: IFFALSE 7971
// begin for j in bases do
7867: LD_ADDR_VAR 0 3
7871: PUSH
7872: LD_VAR 0 9
7876: PUSH
7877: FOR_IN
7878: IFFALSE 7969
// begin base := GetBase ( j ) ;
7880: LD_ADDR_VAR 0 8
7884: PUSH
7885: LD_VAR 0 3
7889: PPUSH
7890: CALL_OW 274
7894: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
7895: LD_ADDR_VAR 0 4
7899: PUSH
7900: LD_VAR 0 4
7904: PUSH
7905: LD_VAR 0 8
7909: PPUSH
7910: LD_INT 1
7912: PPUSH
7913: CALL_OW 275
7917: PLUS
7918: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
7919: LD_ADDR_VAR 0 5
7923: PUSH
7924: LD_VAR 0 5
7928: PUSH
7929: LD_VAR 0 8
7933: PPUSH
7934: LD_INT 2
7936: PPUSH
7937: CALL_OW 275
7941: PLUS
7942: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
7943: LD_ADDR_VAR 0 6
7947: PUSH
7948: LD_VAR 0 6
7952: PUSH
7953: LD_VAR 0 8
7957: PPUSH
7958: LD_INT 3
7960: PPUSH
7961: CALL_OW 275
7965: PLUS
7966: ST_TO_ADDR
// end ;
7967: GO 7877
7969: POP
7970: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
7971: LD_STRING setSpecText(
7973: PUSH
7974: LD_VAR 0 2
7978: STR
7979: PUSH
7980: LD_STRING ,
7982: STR
7983: PUSH
7984: LD_INT 2
7986: STR
7987: PUSH
7988: LD_STRING ,
7990: STR
7991: PUSH
7992: LD_VAR 0 4
7996: STR
7997: PUSH
7998: LD_STRING )
8000: STR
8001: PPUSH
8002: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
8006: LD_STRING setSpecText(
8008: PUSH
8009: LD_VAR 0 2
8013: STR
8014: PUSH
8015: LD_STRING ,
8017: STR
8018: PUSH
8019: LD_INT 3
8021: STR
8022: PUSH
8023: LD_STRING ,
8025: STR
8026: PUSH
8027: LD_VAR 0 5
8031: STR
8032: PUSH
8033: LD_STRING )
8035: STR
8036: PPUSH
8037: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
8041: LD_STRING setSpecText(
8043: PUSH
8044: LD_VAR 0 2
8048: STR
8049: PUSH
8050: LD_STRING ,
8052: STR
8053: PUSH
8054: LD_INT 4
8056: STR
8057: PUSH
8058: LD_STRING ,
8060: STR
8061: PUSH
8062: LD_VAR 0 6
8066: STR
8067: PUSH
8068: LD_STRING )
8070: STR
8071: PPUSH
8072: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
8076: LD_STRING setSpecText(
8078: PUSH
8079: LD_VAR 0 2
8083: STR
8084: PUSH
8085: LD_STRING ,
8087: STR
8088: PUSH
8089: LD_INT 5
8091: STR
8092: PUSH
8093: LD_STRING ,
8095: STR
8096: PUSH
8097: LD_VAR 0 7
8101: STR
8102: PUSH
8103: LD_STRING )
8105: STR
8106: PPUSH
8107: CALL_OW 559
// end ; end ;
8111: GO 7728
8113: POP
8114: POP
// end ;
8115: LD_VAR 0 1
8119: RET
// every 0 0$1 do
8120: GO 8122
8122: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
8123: LD_STRING setSpecLogoNumber(
8125: PUSH
8126: LD_INT 2
8128: STR
8129: PUSH
8130: LD_STRING ,
8132: STR
8133: PUSH
8134: LD_INT 1
8136: STR
8137: PUSH
8138: LD_STRING )
8140: STR
8141: PPUSH
8142: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
8146: LD_STRING setSpecLogoNumber(
8148: PUSH
8149: LD_INT 3
8151: STR
8152: PUSH
8153: LD_STRING ,
8155: STR
8156: PUSH
8157: LD_INT 2
8159: STR
8160: PUSH
8161: LD_STRING )
8163: STR
8164: PPUSH
8165: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
8169: LD_STRING setSpecLogoNumber(
8171: PUSH
8172: LD_INT 4
8174: STR
8175: PUSH
8176: LD_STRING ,
8178: STR
8179: PUSH
8180: LD_INT 3
8182: STR
8183: PUSH
8184: LD_STRING )
8186: STR
8187: PPUSH
8188: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
8192: LD_STRING setSpecLogoNumber(
8194: PUSH
8195: LD_INT 5
8197: STR
8198: PUSH
8199: LD_STRING ,
8201: STR
8202: PUSH
8203: LD_INT 4
8205: STR
8206: PUSH
8207: LD_STRING )
8209: STR
8210: PPUSH
8211: CALL_OW 559
// end ;
8215: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
8216: LD_INT 2
8218: PUSH
8219: LD_INT 30
8221: PUSH
8222: LD_INT 0
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PUSH
8229: LD_INT 30
8231: PUSH
8232: LD_INT 1
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: LIST
8243: PPUSH
8244: CALL_OW 69
8248: IFFALSE 8258
8250: GO 8252
8252: DISABLE
// begin enable ;
8253: ENABLE
// UpdateSpectatorBar ;
8254: CALL 7704 0 0
// end ; end_of_file
8258: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8259: LD_INT 0
8261: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8262: LD_VAR 0 1
8266: PPUSH
8267: CALL_OW 255
8271: PUSH
8272: LD_VAR 0 4
8276: EQUAL
8277: IFFALSE 8296
// begin SetAchievement ( ACH_RAD ) ;
8279: LD_STRING ACH_RAD
8281: PPUSH
8282: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8286: LD_STRING ACH_NL
8288: PPUSH
8289: LD_INT 1
8291: PPUSH
8292: CALL_OW 564
// end end ;
8296: LD_VAR 0 5
8300: RET
// export function SA_Win ( side ) ; begin
8301: LD_INT 0
8303: PPUSH
// case side of 1 :
8304: LD_VAR 0 1
8308: PUSH
8309: LD_INT 1
8311: DOUBLE
8312: EQUAL
8313: IFTRUE 8317
8315: GO 8330
8317: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8318: LD_STRING ACH_AH
8320: PPUSH
8321: LD_INT 1
8323: PPUSH
8324: CALL_OW 564
8328: GO 8493
8330: LD_INT 2
8332: DOUBLE
8333: EQUAL
8334: IFTRUE 8338
8336: GO 8351
8338: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8339: LD_STRING ACH_E
8341: PPUSH
8342: LD_INT 1
8344: PPUSH
8345: CALL_OW 564
8349: GO 8493
8351: LD_INT 3
8353: DOUBLE
8354: EQUAL
8355: IFTRUE 8359
8357: GO 8372
8359: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8360: LD_STRING ACH_OOL
8362: PPUSH
8363: LD_INT 1
8365: PPUSH
8366: CALL_OW 564
8370: GO 8493
8372: LD_INT 1
8374: PUSH
8375: LD_INT 2
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: DOUBLE
8382: EQUAL
8383: IFTRUE 8387
8385: GO 8412
8387: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8388: LD_STRING ACH_AH
8390: PPUSH
8391: LD_REAL  5.00000000000000E-0001
8394: PPUSH
8395: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8399: LD_STRING ACH_E
8401: PPUSH
8402: LD_REAL  5.00000000000000E-0001
8405: PPUSH
8406: CALL_OW 564
// end ; [ 2 , 3 ] :
8410: GO 8493
8412: LD_INT 2
8414: PUSH
8415: LD_INT 3
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: DOUBLE
8422: EQUAL
8423: IFTRUE 8427
8425: GO 8452
8427: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8428: LD_STRING ACH_OOL
8430: PPUSH
8431: LD_REAL  5.00000000000000E-0001
8434: PPUSH
8435: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8439: LD_STRING ACH_E
8441: PPUSH
8442: LD_REAL  5.00000000000000E-0001
8445: PPUSH
8446: CALL_OW 564
// end ; [ 3 , 1 ] :
8450: GO 8493
8452: LD_INT 3
8454: PUSH
8455: LD_INT 1
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: DOUBLE
8462: EQUAL
8463: IFTRUE 8467
8465: GO 8492
8467: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8468: LD_STRING ACH_AH
8470: PPUSH
8471: LD_REAL  5.00000000000000E-0001
8474: PPUSH
8475: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8479: LD_STRING ACH_OOL
8481: PPUSH
8482: LD_REAL  5.00000000000000E-0001
8485: PPUSH
8486: CALL_OW 564
// end ; end ;
8490: GO 8493
8492: POP
// end ; end_of_file
8493: LD_VAR 0 2
8497: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8498: LD_INT 0
8500: PPUSH
8501: PPUSH
// enable ( 98 ) ;
8502: LD_INT 98
8504: ENABLE_MARKED
// GameEnded = false ;
8505: LD_ADDR_LOC 15
8509: PUSH
8510: LD_INT 0
8512: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8513: LD_ADDR_LOC 14
8517: PUSH
8518: LD_INT 0
8520: PUSH
8521: LD_INT 0
8523: PUSH
8524: LD_INT 0
8526: PUSH
8527: LD_INT 0
8529: PUSH
8530: LD_INT 0
8532: PUSH
8533: LD_INT 0
8535: PUSH
8536: LD_INT 0
8538: PUSH
8539: LD_INT 0
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: ST_TO_ADDR
// unfoged = false ;
8552: LD_ADDR_LOC 16
8556: PUSH
8557: LD_INT 0
8559: ST_TO_ADDR
// defeated_specs := [ ] ;
8560: LD_ADDR_LOC 17
8564: PUSH
8565: EMPTY
8566: ST_TO_ADDR
// for i = 1 to side_positions do
8567: LD_ADDR_VAR 0 2
8571: PUSH
8572: DOUBLE
8573: LD_INT 1
8575: DEC
8576: ST_TO_ADDR
8577: LD_EXP 34
8581: PUSH
8582: FOR_TO
8583: IFFALSE 8623
// if not side_positions [ i ] then
8585: LD_EXP 34
8589: PUSH
8590: LD_VAR 0 2
8594: ARRAY
8595: NOT
8596: IFFALSE 8621
// defeated = replace ( defeated , i , true ) ;
8598: LD_ADDR_LOC 14
8602: PUSH
8603: LD_LOC 14
8607: PPUSH
8608: LD_VAR 0 2
8612: PPUSH
8613: LD_INT 1
8615: PPUSH
8616: CALL_OW 1
8620: ST_TO_ADDR
8621: GO 8582
8623: POP
8624: POP
// end ;
8625: LD_VAR 0 1
8629: RET
// function CanWinLoose ; begin
8630: LD_INT 0
8632: PPUSH
// Result := true ;
8633: LD_ADDR_VAR 0 1
8637: PUSH
8638: LD_INT 1
8640: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8641: CALL_OW 518
8645: PUSH
8646: CALL_OW 519
8650: PUSH
8651: LD_INT 0
8653: GREATER
8654: AND
8655: IFFALSE 8665
// Result := false ;
8657: LD_ADDR_VAR 0 1
8661: PUSH
8662: LD_INT 0
8664: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8665: CALL_OW 531
8669: PUSH
8670: CALL_OW 519
8674: PUSH
8675: LD_INT 1
8677: GREATER
8678: AND
8679: IFFALSE 8689
// Result := false ;
8681: LD_ADDR_VAR 0 1
8685: PUSH
8686: LD_INT 0
8688: ST_TO_ADDR
// end ;
8689: LD_VAR 0 1
8693: RET
// export function HasPower ( i ) ; var k , h ; begin
8694: LD_INT 0
8696: PPUSH
8697: PPUSH
8698: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8699: LD_VAR 0 1
8703: PPUSH
8704: CALL_OW 108
8708: NOT
8709: PUSH
8710: LD_EXP 33
8714: PUSH
8715: LD_VAR 0 1
8719: ARRAY
8720: NOT
8721: AND
8722: PUSH
8723: LD_OWVAR 4
8727: AND
8728: IFFALSE 8740
// begin result = false ;
8730: LD_ADDR_VAR 0 2
8734: PUSH
8735: LD_INT 0
8737: ST_TO_ADDR
// end else
8738: GO 9035
// case def_win_rules of 0 :
8740: LD_EXP 30
8744: PUSH
8745: LD_INT 0
8747: DOUBLE
8748: EQUAL
8749: IFTRUE 8753
8751: GO 8916
8753: POP
// if def_people_respawning then
8754: LD_EXP 11
8758: IFFALSE 8849
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8760: LD_ADDR_VAR 0 2
8764: PUSH
8765: LD_INT 22
8767: PUSH
8768: LD_VAR 0 1
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PUSH
8777: LD_INT 2
8779: PUSH
8780: LD_INT 21
8782: PUSH
8783: LD_INT 1
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: PUSH
8790: LD_INT 33
8792: PUSH
8793: LD_INT 3
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: PUSH
8800: LD_INT 33
8802: PUSH
8803: LD_INT 5
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: PUSH
8810: LD_INT 30
8812: PUSH
8813: LD_INT 0
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: PUSH
8820: LD_INT 30
8822: PUSH
8823: LD_INT 1
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: PPUSH
8842: CALL_OW 69
8846: ST_TO_ADDR
8847: GO 8914
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8849: LD_ADDR_VAR 0 2
8853: PUSH
8854: LD_INT 22
8856: PUSH
8857: LD_VAR 0 1
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: PUSH
8866: LD_INT 2
8868: PUSH
8869: LD_INT 21
8871: PUSH
8872: LD_INT 1
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: LD_INT 33
8881: PUSH
8882: LD_INT 3
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: PUSH
8889: LD_INT 33
8891: PUSH
8892: LD_INT 5
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PPUSH
8909: CALL_OW 69
8913: ST_TO_ADDR
8914: GO 9035
8916: LD_INT 1
8918: DOUBLE
8919: EQUAL
8920: IFTRUE 8924
8922: GO 8963
8924: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8925: LD_ADDR_VAR 0 2
8929: PUSH
8930: LD_INT 22
8932: PUSH
8933: LD_VAR 0 1
8937: PUSH
8938: EMPTY
8939: LIST
8940: LIST
8941: PUSH
8942: LD_INT 21
8944: PUSH
8945: LD_INT 1
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PPUSH
8956: CALL_OW 69
8960: ST_TO_ADDR
8961: GO 9035
8963: LD_INT 2
8965: DOUBLE
8966: EQUAL
8967: IFTRUE 8971
8969: GO 9034
8971: POP
// begin h = false ;
8972: LD_ADDR_VAR 0 4
8976: PUSH
8977: LD_INT 0
8979: ST_TO_ADDR
// for k in heroes [ i ] do
8980: LD_ADDR_VAR 0 3
8984: PUSH
8985: LD_EXP 45
8989: PUSH
8990: LD_VAR 0 1
8994: ARRAY
8995: PUSH
8996: FOR_IN
8997: IFFALSE 9020
// if IsLive ( k ) then
8999: LD_VAR 0 3
9003: PPUSH
9004: CALL_OW 300
9008: IFFALSE 9018
// h = true ;
9010: LD_ADDR_VAR 0 4
9014: PUSH
9015: LD_INT 1
9017: ST_TO_ADDR
9018: GO 8996
9020: POP
9021: POP
// Result := h ;
9022: LD_ADDR_VAR 0 2
9026: PUSH
9027: LD_VAR 0 4
9031: ST_TO_ADDR
// end ; end ;
9032: GO 9035
9034: POP
// end ;
9035: LD_VAR 0 2
9039: RET
// function AlliedSides ( i , j ) ; begin
9040: LD_INT 0
9042: PPUSH
// Result := false ;
9043: LD_ADDR_VAR 0 3
9047: PUSH
9048: LD_INT 0
9050: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
9051: LD_VAR 0 1
9055: PPUSH
9056: LD_VAR 0 2
9060: PPUSH
9061: CALL_OW 81
9065: PUSH
9066: LD_INT 1
9068: EQUAL
9069: PUSH
9070: LD_VAR 0 2
9074: PPUSH
9075: LD_VAR 0 1
9079: PPUSH
9080: CALL_OW 81
9084: PUSH
9085: LD_INT 1
9087: EQUAL
9088: AND
9089: PUSH
9090: LD_VAR 0 1
9094: PPUSH
9095: CALL_OW 83
9099: AND
9100: PUSH
9101: LD_VAR 0 2
9105: PPUSH
9106: CALL_OW 83
9110: AND
9111: IFFALSE 9121
// Result := true ;
9113: LD_ADDR_VAR 0 3
9117: PUSH
9118: LD_INT 1
9120: ST_TO_ADDR
// end ;
9121: LD_VAR 0 3
9125: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
9126: CALL 8630 0 0
9130: PUSH
9131: LD_LOC 15
9135: NOT
9136: AND
9137: IFFALSE 9153
9139: GO 9141
9141: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
9142: LD_ADDR_EXP 54
9146: PUSH
9147: LD_STRING #Player-Ended
9149: PUSH
9150: EMPTY
9151: LIST
9152: ST_TO_ADDR
9153: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
9154: CALL 8630 0 0
9158: PUSH
9159: LD_LOC 15
9163: AND
9164: IFFALSE 9173
9166: GO 9168
9168: DISABLE
// YouLostInMultiplayer ;
9169: CALL_OW 107
9173: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
9174: CALL 8630 0 0
9178: NOT
9179: PUSH
9180: CALL_OW 531
9184: NOT
9185: AND
9186: IFFALSE 9202
9188: GO 9190
9190: DISABLE
// WaitServerStrings = [ #server-wait ] ;
9191: LD_ADDR_EXP 54
9195: PUSH
9196: LD_STRING #server-wait
9198: PUSH
9199: EMPTY
9200: LIST
9201: ST_TO_ADDR
9202: END
// every 100 trigger IAmSpec do
9203: CALL_OW 531
9207: IFFALSE 9223
9209: GO 9211
9211: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
9212: LD_ADDR_EXP 54
9216: PUSH
9217: LD_STRING #Player-IAmSpec
9219: PUSH
9220: EMPTY
9221: LIST
9222: ST_TO_ADDR
9223: END
// every 100 trigger GameEnded and IAmSpec do
9224: LD_LOC 15
9228: PUSH
9229: CALL_OW 531
9233: AND
9234: IFFALSE 9243
9236: GO 9238
9238: DISABLE
// YouLostInMultiplayer ;
9239: CALL_OW 107
9243: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
9244: CALL 8630 0 0
9248: PUSH
9249: LD_LOC 15
9253: NOT
9254: AND
9255: IFFALSE 9271
9257: GO 9259
9259: DISABLE
// WaitServerStrings = [ $player-win ] ;
9260: LD_ADDR_EXP 54
9264: PUSH
9265: LD_STRING $player-win
9267: PUSH
9268: EMPTY
9269: LIST
9270: ST_TO_ADDR
9271: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
9272: CALL 8630 0 0
9276: PUSH
9277: LD_LOC 15
9281: AND
9282: IFFALSE 9306
9284: GO 9286
9286: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
9287: LD_EXP 35
9291: PUSH
9292: LD_OWVAR 7
9296: ARRAY
9297: PPUSH
9298: CALL 8301 0 1
// YouWinInMultiplayer ;
9302: CALL_OW 106
// end ;
9306: END
// every 100 trigger isEditor marked 401 do
9307: LD_OWVAR 84
9311: IFFALSE 9327
9313: GO 9315
9315: DISABLE
// Debug_Strings = [ You won ] ;
9316: LD_ADDR_OWVAR 48
9320: PUSH
9321: LD_STRING You won
9323: PUSH
9324: EMPTY
9325: LIST
9326: ST_TO_ADDR
9327: END
// every 100 trigger isEditor marked 400 do
9328: LD_OWVAR 84
9332: IFFALSE 9348
9334: GO 9336
9336: DISABLE
// Debug_Strings = [ You loss ] ;
9337: LD_ADDR_OWVAR 48
9341: PUSH
9342: LD_STRING You loss
9344: PUSH
9345: EMPTY
9346: LIST
9347: ST_TO_ADDR
9348: END
// every 100 marked 98 do var i , un ;
9349: GO 9351
9351: DISABLE
9352: LD_INT 0
9354: PPUSH
9355: PPUSH
// begin for i = 1 to side_positions do
9356: LD_ADDR_VAR 0 1
9360: PUSH
9361: DOUBLE
9362: LD_INT 1
9364: DEC
9365: ST_TO_ADDR
9366: LD_EXP 34
9370: PUSH
9371: FOR_TO
9372: IFFALSE 9459
// begin if side_positions [ i ] then
9374: LD_EXP 34
9378: PUSH
9379: LD_VAR 0 1
9383: ARRAY
9384: IFFALSE 9457
// if not HasPower ( i ) and not defeated [ i ] then
9386: LD_VAR 0 1
9390: PPUSH
9391: CALL 8694 0 1
9395: NOT
9396: PUSH
9397: LD_LOC 14
9401: PUSH
9402: LD_VAR 0 1
9406: ARRAY
9407: NOT
9408: AND
9409: IFFALSE 9457
// begin defeated = replace ( defeated , i , true ) ;
9411: LD_ADDR_LOC 14
9415: PUSH
9416: LD_LOC 14
9420: PPUSH
9421: LD_VAR 0 1
9425: PPUSH
9426: LD_INT 1
9428: PPUSH
9429: CALL_OW 1
9433: ST_TO_ADDR
// if i = mp_player_side then
9434: LD_VAR 0 1
9438: PUSH
9439: LD_OWVAR 7
9443: EQUAL
9444: IFFALSE 9457
// begin Multiplayer_Loose_Message ;
9446: CALL_OW 521
// SetPlayerSpectator ( ) ;
9450: CALL_OW 572
// enable ( 400 ) ;
9454: LD_INT 400
9456: ENABLE_MARKED
// end ; end ; end ;
9457: GO 9371
9459: POP
9460: POP
// DidGameEnd ;
9461: CALL 9476 0 0
// if not GameEnded then
9465: LD_LOC 15
9469: NOT
9470: IFFALSE 9473
// enable ;
9472: ENABLE
// end ;
9473: PPOPN 2
9475: END
// function DidGameEnd ; var i , k , enemy ; begin
9476: LD_INT 0
9478: PPUSH
9479: PPUSH
9480: PPUSH
9481: PPUSH
// enemy = [ ] ;
9482: LD_ADDR_VAR 0 4
9486: PUSH
9487: EMPTY
9488: ST_TO_ADDR
// for i = 1 to side_positions do
9489: LD_ADDR_VAR 0 2
9493: PUSH
9494: DOUBLE
9495: LD_INT 1
9497: DEC
9498: ST_TO_ADDR
9499: LD_EXP 34
9503: PUSH
9504: FOR_TO
9505: IFFALSE 9599
// if not defeated [ i ] then
9507: LD_LOC 14
9511: PUSH
9512: LD_VAR 0 2
9516: ARRAY
9517: NOT
9518: IFFALSE 9597
// for k = 1 to side_positions do
9520: LD_ADDR_VAR 0 3
9524: PUSH
9525: DOUBLE
9526: LD_INT 1
9528: DEC
9529: ST_TO_ADDR
9530: LD_EXP 34
9534: PUSH
9535: FOR_TO
9536: IFFALSE 9595
// if not defeated [ k ] then
9538: LD_LOC 14
9542: PUSH
9543: LD_VAR 0 3
9547: ARRAY
9548: NOT
9549: IFFALSE 9593
// if not AlliedSides ( i , k ) then
9551: LD_VAR 0 2
9555: PPUSH
9556: LD_VAR 0 3
9560: PPUSH
9561: CALL 9040 0 2
9565: NOT
9566: IFFALSE 9593
// enemy = enemy ^ [ i , k ] ;
9568: LD_ADDR_VAR 0 4
9572: PUSH
9573: LD_VAR 0 4
9577: PUSH
9578: LD_VAR 0 2
9582: PUSH
9583: LD_VAR 0 3
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: ADD
9592: ST_TO_ADDR
9593: GO 9535
9595: POP
9596: POP
9597: GO 9504
9599: POP
9600: POP
// if not enemy then
9601: LD_VAR 0 4
9605: NOT
9606: IFFALSE 9632
// begin GameEnded = true ;
9608: LD_ADDR_LOC 15
9612: PUSH
9613: LD_INT 1
9615: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9616: LD_LOC 14
9620: PUSH
9621: LD_OWVAR 7
9625: ARRAY
9626: NOT
9627: IFFALSE 9632
// enable ( 401 ) ;
9629: LD_INT 401
9631: ENABLE_MARKED
// end ; end ;
9632: LD_VAR 0 1
9636: RET
// function unfog ; var k , friends ; begin
9637: LD_INT 0
9639: PPUSH
9640: PPUSH
9641: PPUSH
// for k = 1 to side_positions do
9642: LD_ADDR_VAR 0 2
9646: PUSH
9647: DOUBLE
9648: LD_INT 1
9650: DEC
9651: ST_TO_ADDR
9652: LD_EXP 34
9656: PUSH
9657: FOR_TO
9658: IFFALSE 9714
// if not defeated [ k ] then
9660: LD_LOC 14
9664: PUSH
9665: LD_VAR 0 2
9669: ARRAY
9670: NOT
9671: IFFALSE 9712
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9673: LD_OWVAR 7
9677: PPUSH
9678: LD_VAR 0 2
9682: PPUSH
9683: CALL_OW 81
9687: PUSH
9688: LD_INT 1
9690: PUSH
9691: EMPTY
9692: LIST
9693: IN
9694: IFFALSE 9712
// friends = friends ^ k ;
9696: LD_ADDR_VAR 0 3
9700: PUSH
9701: LD_VAR 0 3
9705: PUSH
9706: LD_VAR 0 2
9710: ADD
9711: ST_TO_ADDR
9712: GO 9657
9714: POP
9715: POP
// if not friends then
9716: LD_VAR 0 3
9720: NOT
9721: IFFALSE 9735
// begin SetPlayerSpectator ( ) ;
9723: CALL_OW 572
// unfoged = true ;
9727: LD_ADDR_LOC 16
9731: PUSH
9732: LD_INT 1
9734: ST_TO_ADDR
// end ; end ;
9735: LD_VAR 0 1
9739: RET
// export function MakeGameEnd ; begin
9740: LD_INT 0
9742: PPUSH
// SetPlayerSpectator ( ) ;
9743: CALL_OW 572
// unfoged = true ;
9747: LD_ADDR_LOC 16
9751: PUSH
9752: LD_INT 1
9754: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9755: LD_INT 175
9757: PPUSH
9758: CALL_OW 67
// GameEnded = true ;
9762: LD_ADDR_LOC 15
9766: PUSH
9767: LD_INT 1
9769: ST_TO_ADDR
// end ;
9770: LD_VAR 0 1
9774: RET
// export function GetGameEnded ; begin
9775: LD_INT 0
9777: PPUSH
// result = GameEnded ;
9778: LD_ADDR_VAR 0 1
9782: PUSH
9783: LD_LOC 15
9787: ST_TO_ADDR
// end ; end_of_file
9788: LD_VAR 0 1
9792: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9793: LD_INT 0
9795: PPUSH
9796: PPUSH
9797: PPUSH
// for side = 1 to 8 do
9798: LD_ADDR_VAR 0 2
9802: PUSH
9803: DOUBLE
9804: LD_INT 1
9806: DEC
9807: ST_TO_ADDR
9808: LD_INT 8
9810: PUSH
9811: FOR_TO
9812: IFFALSE 9933
// begin for i = 1 to 72 do
9814: LD_ADDR_VAR 0 3
9818: PUSH
9819: DOUBLE
9820: LD_INT 1
9822: DEC
9823: ST_TO_ADDR
9824: LD_INT 72
9826: PUSH
9827: FOR_TO
9828: IFFALSE 9859
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9830: LD_VAR 0 3
9834: PPUSH
9835: LD_VAR 0 2
9839: PPUSH
9840: LD_INT 0
9842: PPUSH
9843: LD_VAR 0 3
9847: PPUSH
9848: CALL_OW 565
9852: PPUSH
9853: CALL_OW 322
9857: GO 9827
9859: POP
9860: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9861: LD_INT 73
9863: PPUSH
9864: LD_VAR 0 2
9868: PPUSH
9869: LD_INT 0
9871: PPUSH
9872: LD_INT 25
9874: PPUSH
9875: CALL_OW 565
9879: PPUSH
9880: CALL_OW 322
// for i = 0 to 40 do
9884: LD_ADDR_VAR 0 3
9888: PUSH
9889: DOUBLE
9890: LD_INT 0
9892: DEC
9893: ST_TO_ADDR
9894: LD_INT 40
9896: PUSH
9897: FOR_TO
9898: IFFALSE 9929
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9900: LD_VAR 0 3
9904: PPUSH
9905: LD_VAR 0 2
9909: PPUSH
9910: LD_INT 1
9912: PPUSH
9913: LD_VAR 0 3
9917: PPUSH
9918: CALL_OW 565
9922: PPUSH
9923: CALL_OW 324
9927: GO 9897
9929: POP
9930: POP
// end ;
9931: GO 9811
9933: POP
9934: POP
// end ;
9935: LD_VAR 0 1
9939: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9940: LD_INT 0
9942: PPUSH
9943: PPUSH
9944: PPUSH
// for side = 1 to 8 do
9945: LD_ADDR_VAR 0 3
9949: PUSH
9950: DOUBLE
9951: LD_INT 1
9953: DEC
9954: ST_TO_ADDR
9955: LD_INT 8
9957: PUSH
9958: FOR_TO
9959: IFFALSE 13955
// begin for i = 1 to 73 do
9961: LD_ADDR_VAR 0 4
9965: PUSH
9966: DOUBLE
9967: LD_INT 1
9969: DEC
9970: ST_TO_ADDR
9971: LD_INT 73
9973: PUSH
9974: FOR_TO
9975: IFFALSE 9996
// SetTech ( i , side , state_disabled ) ;
9977: LD_VAR 0 4
9981: PPUSH
9982: LD_VAR 0 3
9986: PPUSH
9987: LD_INT 0
9989: PPUSH
9990: CALL_OW 322
9994: GO 9974
9996: POP
9997: POP
// for i = 0 to 40 do
9998: LD_ADDR_VAR 0 4
10002: PUSH
10003: DOUBLE
10004: LD_INT 0
10006: DEC
10007: ST_TO_ADDR
10008: LD_INT 40
10010: PUSH
10011: FOR_TO
10012: IFFALSE 10033
// SetRestrict ( i , side , false ) ;
10014: LD_VAR 0 4
10018: PPUSH
10019: LD_VAR 0 3
10023: PPUSH
10024: LD_INT 0
10026: PPUSH
10027: CALL_OW 324
10031: GO 10011
10033: POP
10034: POP
// case level of 1 :
10035: LD_VAR 0 1
10039: PUSH
10040: LD_INT 1
10042: DOUBLE
10043: EQUAL
10044: IFTRUE 10048
10046: GO 10201
10048: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10049: LD_INT 35
10051: PPUSH
10052: LD_VAR 0 3
10056: PPUSH
10057: LD_INT 1
10059: PPUSH
10060: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10064: LD_INT 45
10066: PPUSH
10067: LD_VAR 0 3
10071: PPUSH
10072: LD_INT 1
10074: PPUSH
10075: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10079: LD_INT 46
10081: PPUSH
10082: LD_VAR 0 3
10086: PPUSH
10087: LD_INT 1
10089: PPUSH
10090: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10094: LD_INT 47
10096: PPUSH
10097: LD_VAR 0 3
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10109: LD_INT 0
10111: PPUSH
10112: LD_VAR 0 3
10116: PPUSH
10117: LD_INT 1
10119: PPUSH
10120: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10124: LD_INT 2
10126: PPUSH
10127: LD_VAR 0 3
10131: PPUSH
10132: LD_INT 1
10134: PPUSH
10135: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10139: LD_INT 4
10141: PPUSH
10142: LD_VAR 0 3
10146: PPUSH
10147: LD_INT 1
10149: PPUSH
10150: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10154: LD_INT 6
10156: PPUSH
10157: LD_VAR 0 3
10161: PPUSH
10162: LD_INT 1
10164: PPUSH
10165: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10169: LD_INT 29
10171: PPUSH
10172: LD_VAR 0 3
10176: PPUSH
10177: LD_INT 1
10179: PPUSH
10180: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10184: LD_INT 31
10186: PPUSH
10187: LD_VAR 0 3
10191: PPUSH
10192: LD_INT 1
10194: PPUSH
10195: CALL_OW 324
// end ; 2 :
10199: GO 13953
10201: LD_INT 2
10203: DOUBLE
10204: EQUAL
10205: IFTRUE 10209
10207: GO 10407
10209: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10210: LD_INT 35
10212: PPUSH
10213: LD_VAR 0 3
10217: PPUSH
10218: LD_INT 1
10220: PPUSH
10221: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10225: LD_INT 45
10227: PPUSH
10228: LD_VAR 0 3
10232: PPUSH
10233: LD_INT 1
10235: PPUSH
10236: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10240: LD_INT 46
10242: PPUSH
10243: LD_VAR 0 3
10247: PPUSH
10248: LD_INT 1
10250: PPUSH
10251: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10255: LD_INT 47
10257: PPUSH
10258: LD_VAR 0 3
10262: PPUSH
10263: LD_INT 1
10265: PPUSH
10266: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10270: LD_INT 1
10272: PPUSH
10273: LD_VAR 0 3
10277: PPUSH
10278: LD_INT 1
10280: PPUSH
10281: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10285: LD_INT 2
10287: PPUSH
10288: LD_VAR 0 3
10292: PPUSH
10293: LD_INT 1
10295: PPUSH
10296: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10300: LD_INT 11
10302: PPUSH
10303: LD_VAR 0 3
10307: PPUSH
10308: LD_INT 1
10310: PPUSH
10311: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10315: LD_INT 0
10317: PPUSH
10318: LD_VAR 0 3
10322: PPUSH
10323: LD_INT 1
10325: PPUSH
10326: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10330: LD_INT 2
10332: PPUSH
10333: LD_VAR 0 3
10337: PPUSH
10338: LD_INT 1
10340: PPUSH
10341: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10345: LD_INT 4
10347: PPUSH
10348: LD_VAR 0 3
10352: PPUSH
10353: LD_INT 1
10355: PPUSH
10356: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10360: LD_INT 6
10362: PPUSH
10363: LD_VAR 0 3
10367: PPUSH
10368: LD_INT 1
10370: PPUSH
10371: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10375: LD_INT 29
10377: PPUSH
10378: LD_VAR 0 3
10382: PPUSH
10383: LD_INT 1
10385: PPUSH
10386: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10390: LD_INT 31
10392: PPUSH
10393: LD_VAR 0 3
10397: PPUSH
10398: LD_INT 1
10400: PPUSH
10401: CALL_OW 324
// end ; 3 :
10405: GO 13953
10407: LD_INT 3
10409: DOUBLE
10410: EQUAL
10411: IFTRUE 10415
10413: GO 10868
10415: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10416: LD_INT 35
10418: PPUSH
10419: LD_VAR 0 3
10423: PPUSH
10424: LD_INT 1
10426: PPUSH
10427: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10431: LD_INT 45
10433: PPUSH
10434: LD_VAR 0 3
10438: PPUSH
10439: LD_INT 1
10441: PPUSH
10442: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10446: LD_INT 46
10448: PPUSH
10449: LD_VAR 0 3
10453: PPUSH
10454: LD_INT 1
10456: PPUSH
10457: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10461: LD_INT 47
10463: PPUSH
10464: LD_VAR 0 3
10468: PPUSH
10469: LD_INT 1
10471: PPUSH
10472: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10476: LD_INT 1
10478: PPUSH
10479: LD_VAR 0 3
10483: PPUSH
10484: LD_INT 1
10486: PPUSH
10487: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10491: LD_INT 2
10493: PPUSH
10494: LD_VAR 0 3
10498: PPUSH
10499: LD_INT 1
10501: PPUSH
10502: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10506: LD_INT 11
10508: PPUSH
10509: LD_VAR 0 3
10513: PPUSH
10514: LD_INT 1
10516: PPUSH
10517: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10521: LD_INT 48
10523: PPUSH
10524: LD_VAR 0 3
10528: PPUSH
10529: LD_INT 1
10531: PPUSH
10532: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10536: LD_INT 69
10538: PPUSH
10539: LD_VAR 0 3
10543: PPUSH
10544: LD_INT 1
10546: PPUSH
10547: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10551: LD_INT 39
10553: PPUSH
10554: LD_VAR 0 3
10558: PPUSH
10559: LD_INT 1
10561: PPUSH
10562: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10566: LD_INT 43
10568: PPUSH
10569: LD_VAR 0 3
10573: PPUSH
10574: LD_INT 1
10576: PPUSH
10577: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10581: LD_INT 51
10583: PPUSH
10584: LD_VAR 0 3
10588: PPUSH
10589: LD_INT 1
10591: PPUSH
10592: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10596: LD_INT 6
10598: PPUSH
10599: LD_VAR 0 3
10603: PPUSH
10604: LD_INT 1
10606: PPUSH
10607: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10611: LD_INT 0
10613: PPUSH
10614: LD_VAR 0 3
10618: PPUSH
10619: LD_INT 1
10621: PPUSH
10622: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10626: LD_INT 2
10628: PPUSH
10629: LD_VAR 0 3
10633: PPUSH
10634: LD_INT 1
10636: PPUSH
10637: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10641: LD_INT 3
10643: PPUSH
10644: LD_VAR 0 3
10648: PPUSH
10649: LD_INT 1
10651: PPUSH
10652: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10656: LD_INT 4
10658: PPUSH
10659: LD_VAR 0 3
10663: PPUSH
10664: LD_INT 1
10666: PPUSH
10667: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10671: LD_INT 6
10673: PPUSH
10674: LD_VAR 0 3
10678: PPUSH
10679: LD_INT 1
10681: PPUSH
10682: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10686: LD_INT 7
10688: PPUSH
10689: LD_VAR 0 3
10693: PPUSH
10694: LD_INT 1
10696: PPUSH
10697: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10701: LD_INT 8
10703: PPUSH
10704: LD_VAR 0 3
10708: PPUSH
10709: LD_INT 1
10711: PPUSH
10712: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10716: LD_INT 10
10718: PPUSH
10719: LD_VAR 0 3
10723: PPUSH
10724: LD_INT 1
10726: PPUSH
10727: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10731: LD_INT 15
10733: PPUSH
10734: LD_VAR 0 3
10738: PPUSH
10739: LD_INT 1
10741: PPUSH
10742: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10746: LD_INT 16
10748: PPUSH
10749: LD_VAR 0 3
10753: PPUSH
10754: LD_INT 1
10756: PPUSH
10757: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10761: LD_INT 17
10763: PPUSH
10764: LD_VAR 0 3
10768: PPUSH
10769: LD_INT 1
10771: PPUSH
10772: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10776: LD_INT 20
10778: PPUSH
10779: LD_VAR 0 3
10783: PPUSH
10784: LD_INT 1
10786: PPUSH
10787: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10791: LD_INT 26
10793: PPUSH
10794: LD_VAR 0 3
10798: PPUSH
10799: LD_INT 1
10801: PPUSH
10802: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10806: LD_INT 27
10808: PPUSH
10809: LD_VAR 0 3
10813: PPUSH
10814: LD_INT 1
10816: PPUSH
10817: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10821: LD_INT 29
10823: PPUSH
10824: LD_VAR 0 3
10828: PPUSH
10829: LD_INT 1
10831: PPUSH
10832: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10836: LD_INT 31
10838: PPUSH
10839: LD_VAR 0 3
10843: PPUSH
10844: LD_INT 1
10846: PPUSH
10847: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10851: LD_INT 32
10853: PPUSH
10854: LD_VAR 0 3
10858: PPUSH
10859: LD_INT 1
10861: PPUSH
10862: CALL_OW 324
// end ; 4 :
10866: GO 13953
10868: LD_INT 4
10870: DOUBLE
10871: EQUAL
10872: IFTRUE 10876
10874: GO 11824
10876: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10877: LD_INT 35
10879: PPUSH
10880: LD_VAR 0 3
10884: PPUSH
10885: LD_INT 1
10887: PPUSH
10888: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10892: LD_INT 45
10894: PPUSH
10895: LD_VAR 0 3
10899: PPUSH
10900: LD_INT 1
10902: PPUSH
10903: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10907: LD_INT 46
10909: PPUSH
10910: LD_VAR 0 3
10914: PPUSH
10915: LD_INT 1
10917: PPUSH
10918: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10922: LD_INT 47
10924: PPUSH
10925: LD_VAR 0 3
10929: PPUSH
10930: LD_INT 1
10932: PPUSH
10933: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10937: LD_INT 1
10939: PPUSH
10940: LD_VAR 0 3
10944: PPUSH
10945: LD_INT 1
10947: PPUSH
10948: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10952: LD_INT 2
10954: PPUSH
10955: LD_VAR 0 3
10959: PPUSH
10960: LD_INT 1
10962: PPUSH
10963: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10967: LD_INT 11
10969: PPUSH
10970: LD_VAR 0 3
10974: PPUSH
10975: LD_INT 1
10977: PPUSH
10978: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10982: LD_INT 20
10984: PPUSH
10985: LD_VAR 0 3
10989: PPUSH
10990: LD_INT 1
10992: PPUSH
10993: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10997: LD_INT 48
10999: PPUSH
11000: LD_VAR 0 3
11004: PPUSH
11005: LD_INT 1
11007: PPUSH
11008: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11012: LD_INT 49
11014: PPUSH
11015: LD_VAR 0 3
11019: PPUSH
11020: LD_INT 1
11022: PPUSH
11023: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11027: LD_INT 69
11029: PPUSH
11030: LD_VAR 0 3
11034: PPUSH
11035: LD_INT 1
11037: PPUSH
11038: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11042: LD_INT 39
11044: PPUSH
11045: LD_VAR 0 3
11049: PPUSH
11050: LD_INT 1
11052: PPUSH
11053: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11057: LD_INT 34
11059: PPUSH
11060: LD_VAR 0 3
11064: PPUSH
11065: LD_INT 1
11067: PPUSH
11068: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11072: LD_INT 42
11074: PPUSH
11075: LD_VAR 0 3
11079: PPUSH
11080: LD_INT 1
11082: PPUSH
11083: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11087: LD_INT 44
11089: PPUSH
11090: LD_VAR 0 3
11094: PPUSH
11095: LD_INT 1
11097: PPUSH
11098: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11102: LD_INT 41
11104: PPUSH
11105: LD_VAR 0 3
11109: PPUSH
11110: LD_INT 1
11112: PPUSH
11113: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11117: LD_INT 43
11119: PPUSH
11120: LD_VAR 0 3
11124: PPUSH
11125: LD_INT 1
11127: PPUSH
11128: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11132: LD_INT 70
11134: PPUSH
11135: LD_VAR 0 3
11139: PPUSH
11140: LD_INT 1
11142: PPUSH
11143: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11147: LD_INT 51
11149: PPUSH
11150: LD_VAR 0 3
11154: PPUSH
11155: LD_INT 1
11157: PPUSH
11158: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11162: LD_INT 52
11164: PPUSH
11165: LD_VAR 0 3
11169: PPUSH
11170: LD_INT 1
11172: PPUSH
11173: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11177: LD_INT 6
11179: PPUSH
11180: LD_VAR 0 3
11184: PPUSH
11185: LD_INT 1
11187: PPUSH
11188: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11192: LD_INT 15
11194: PPUSH
11195: LD_VAR 0 3
11199: PPUSH
11200: LD_INT 1
11202: PPUSH
11203: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11207: LD_INT 7
11209: PPUSH
11210: LD_VAR 0 3
11214: PPUSH
11215: LD_INT 1
11217: PPUSH
11218: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11222: LD_INT 12
11224: PPUSH
11225: LD_VAR 0 3
11229: PPUSH
11230: LD_INT 1
11232: PPUSH
11233: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11237: LD_INT 18
11239: PPUSH
11240: LD_VAR 0 3
11244: PPUSH
11245: LD_INT 1
11247: PPUSH
11248: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11252: LD_INT 60
11254: PPUSH
11255: LD_VAR 0 3
11259: PPUSH
11260: LD_INT 1
11262: PPUSH
11263: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11267: LD_INT 9
11269: PPUSH
11270: LD_VAR 0 3
11274: PPUSH
11275: LD_INT 1
11277: PPUSH
11278: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11282: LD_INT 30
11284: PPUSH
11285: LD_VAR 0 3
11289: PPUSH
11290: LD_INT 1
11292: PPUSH
11293: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11297: LD_INT 37
11299: PPUSH
11300: LD_VAR 0 3
11304: PPUSH
11305: LD_INT 1
11307: PPUSH
11308: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11312: LD_INT 5
11314: PPUSH
11315: LD_VAR 0 3
11319: PPUSH
11320: LD_INT 1
11322: PPUSH
11323: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11327: LD_INT 66
11329: PPUSH
11330: LD_VAR 0 3
11334: PPUSH
11335: LD_INT 1
11337: PPUSH
11338: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11342: LD_INT 21
11344: PPUSH
11345: LD_VAR 0 3
11349: PPUSH
11350: LD_INT 1
11352: PPUSH
11353: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11357: LD_INT 22
11359: PPUSH
11360: LD_VAR 0 3
11364: PPUSH
11365: LD_INT 1
11367: PPUSH
11368: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11372: LD_INT 54
11374: PPUSH
11375: LD_VAR 0 3
11379: PPUSH
11380: LD_INT 1
11382: PPUSH
11383: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11387: LD_INT 0
11389: PPUSH
11390: LD_VAR 0 3
11394: PPUSH
11395: LD_INT 1
11397: PPUSH
11398: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11402: LD_INT 1
11404: PPUSH
11405: LD_VAR 0 3
11409: PPUSH
11410: LD_INT 1
11412: PPUSH
11413: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11417: LD_INT 2
11419: PPUSH
11420: LD_VAR 0 3
11424: PPUSH
11425: LD_INT 1
11427: PPUSH
11428: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11432: LD_INT 3
11434: PPUSH
11435: LD_VAR 0 3
11439: PPUSH
11440: LD_INT 1
11442: PPUSH
11443: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11447: LD_INT 4
11449: PPUSH
11450: LD_VAR 0 3
11454: PPUSH
11455: LD_INT 1
11457: PPUSH
11458: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11462: LD_INT 5
11464: PPUSH
11465: LD_VAR 0 3
11469: PPUSH
11470: LD_INT 1
11472: PPUSH
11473: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11477: LD_INT 6
11479: PPUSH
11480: LD_VAR 0 3
11484: PPUSH
11485: LD_INT 1
11487: PPUSH
11488: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11492: LD_INT 7
11494: PPUSH
11495: LD_VAR 0 3
11499: PPUSH
11500: LD_INT 1
11502: PPUSH
11503: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11507: LD_INT 8
11509: PPUSH
11510: LD_VAR 0 3
11514: PPUSH
11515: LD_INT 1
11517: PPUSH
11518: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11522: LD_INT 10
11524: PPUSH
11525: LD_VAR 0 3
11529: PPUSH
11530: LD_INT 1
11532: PPUSH
11533: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11537: LD_INT 11
11539: PPUSH
11540: LD_VAR 0 3
11544: PPUSH
11545: LD_INT 1
11547: PPUSH
11548: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11552: LD_INT 12
11554: PPUSH
11555: LD_VAR 0 3
11559: PPUSH
11560: LD_INT 1
11562: PPUSH
11563: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11567: LD_INT 13
11569: PPUSH
11570: LD_VAR 0 3
11574: PPUSH
11575: LD_INT 1
11577: PPUSH
11578: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11582: LD_INT 14
11584: PPUSH
11585: LD_VAR 0 3
11589: PPUSH
11590: LD_INT 1
11592: PPUSH
11593: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11597: LD_INT 15
11599: PPUSH
11600: LD_VAR 0 3
11604: PPUSH
11605: LD_INT 1
11607: PPUSH
11608: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11612: LD_INT 16
11614: PPUSH
11615: LD_VAR 0 3
11619: PPUSH
11620: LD_INT 1
11622: PPUSH
11623: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11627: LD_INT 17
11629: PPUSH
11630: LD_VAR 0 3
11634: PPUSH
11635: LD_INT 1
11637: PPUSH
11638: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11642: LD_INT 19
11644: PPUSH
11645: LD_VAR 0 3
11649: PPUSH
11650: LD_INT 1
11652: PPUSH
11653: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11657: LD_INT 20
11659: PPUSH
11660: LD_VAR 0 3
11664: PPUSH
11665: LD_INT 1
11667: PPUSH
11668: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11672: LD_INT 21
11674: PPUSH
11675: LD_VAR 0 3
11679: PPUSH
11680: LD_INT 1
11682: PPUSH
11683: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11687: LD_INT 23
11689: PPUSH
11690: LD_VAR 0 3
11694: PPUSH
11695: LD_INT 1
11697: PPUSH
11698: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11702: LD_INT 26
11704: PPUSH
11705: LD_VAR 0 3
11709: PPUSH
11710: LD_INT 1
11712: PPUSH
11713: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11717: LD_INT 27
11719: PPUSH
11720: LD_VAR 0 3
11724: PPUSH
11725: LD_INT 1
11727: PPUSH
11728: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11732: LD_INT 28
11734: PPUSH
11735: LD_VAR 0 3
11739: PPUSH
11740: LD_INT 1
11742: PPUSH
11743: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11747: LD_INT 29
11749: PPUSH
11750: LD_VAR 0 3
11754: PPUSH
11755: LD_INT 1
11757: PPUSH
11758: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11762: LD_INT 30
11764: PPUSH
11765: LD_VAR 0 3
11769: PPUSH
11770: LD_INT 1
11772: PPUSH
11773: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11777: LD_INT 31
11779: PPUSH
11780: LD_VAR 0 3
11784: PPUSH
11785: LD_INT 1
11787: PPUSH
11788: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11792: LD_INT 32
11794: PPUSH
11795: LD_VAR 0 3
11799: PPUSH
11800: LD_INT 1
11802: PPUSH
11803: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11807: LD_INT 36
11809: PPUSH
11810: LD_VAR 0 3
11814: PPUSH
11815: LD_INT 1
11817: PPUSH
11818: CALL_OW 324
// end ; 5 :
11822: GO 13953
11824: LD_INT 5
11826: DOUBLE
11827: EQUAL
11828: IFTRUE 11832
11830: GO 12945
11832: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11833: LD_INT 35
11835: PPUSH
11836: LD_VAR 0 3
11840: PPUSH
11841: LD_INT 1
11843: PPUSH
11844: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11848: LD_INT 45
11850: PPUSH
11851: LD_VAR 0 3
11855: PPUSH
11856: LD_INT 1
11858: PPUSH
11859: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11863: LD_INT 46
11865: PPUSH
11866: LD_VAR 0 3
11870: PPUSH
11871: LD_INT 1
11873: PPUSH
11874: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11878: LD_INT 47
11880: PPUSH
11881: LD_VAR 0 3
11885: PPUSH
11886: LD_INT 1
11888: PPUSH
11889: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11893: LD_INT 1
11895: PPUSH
11896: LD_VAR 0 3
11900: PPUSH
11901: LD_INT 1
11903: PPUSH
11904: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11908: LD_INT 2
11910: PPUSH
11911: LD_VAR 0 3
11915: PPUSH
11916: LD_INT 1
11918: PPUSH
11919: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11923: LD_INT 11
11925: PPUSH
11926: LD_VAR 0 3
11930: PPUSH
11931: LD_INT 1
11933: PPUSH
11934: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11938: LD_INT 20
11940: PPUSH
11941: LD_VAR 0 3
11945: PPUSH
11946: LD_INT 1
11948: PPUSH
11949: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11953: LD_INT 48
11955: PPUSH
11956: LD_VAR 0 3
11960: PPUSH
11961: LD_INT 1
11963: PPUSH
11964: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11968: LD_INT 49
11970: PPUSH
11971: LD_VAR 0 3
11975: PPUSH
11976: LD_INT 1
11978: PPUSH
11979: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11983: LD_INT 69
11985: PPUSH
11986: LD_VAR 0 3
11990: PPUSH
11991: LD_INT 1
11993: PPUSH
11994: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11998: LD_INT 39
12000: PPUSH
12001: LD_VAR 0 3
12005: PPUSH
12006: LD_INT 1
12008: PPUSH
12009: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12013: LD_INT 34
12015: PPUSH
12016: LD_VAR 0 3
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12028: LD_INT 42
12030: PPUSH
12031: LD_VAR 0 3
12035: PPUSH
12036: LD_INT 1
12038: PPUSH
12039: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12043: LD_INT 44
12045: PPUSH
12046: LD_VAR 0 3
12050: PPUSH
12051: LD_INT 1
12053: PPUSH
12054: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12058: LD_INT 41
12060: PPUSH
12061: LD_VAR 0 3
12065: PPUSH
12066: LD_INT 1
12068: PPUSH
12069: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12073: LD_INT 40
12075: PPUSH
12076: LD_VAR 0 3
12080: PPUSH
12081: LD_INT 1
12083: PPUSH
12084: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12088: LD_INT 43
12090: PPUSH
12091: LD_VAR 0 3
12095: PPUSH
12096: LD_INT 1
12098: PPUSH
12099: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12103: LD_INT 70
12105: PPUSH
12106: LD_VAR 0 3
12110: PPUSH
12111: LD_INT 1
12113: PPUSH
12114: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12118: LD_INT 51
12120: PPUSH
12121: LD_VAR 0 3
12125: PPUSH
12126: LD_INT 1
12128: PPUSH
12129: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12133: LD_INT 52
12135: PPUSH
12136: LD_VAR 0 3
12140: PPUSH
12141: LD_INT 1
12143: PPUSH
12144: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12148: LD_INT 6
12150: PPUSH
12151: LD_VAR 0 3
12155: PPUSH
12156: LD_INT 1
12158: PPUSH
12159: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12163: LD_INT 15
12165: PPUSH
12166: LD_VAR 0 3
12170: PPUSH
12171: LD_INT 1
12173: PPUSH
12174: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12178: LD_INT 7
12180: PPUSH
12181: LD_VAR 0 3
12185: PPUSH
12186: LD_INT 1
12188: PPUSH
12189: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12193: LD_INT 12
12195: PPUSH
12196: LD_VAR 0 3
12200: PPUSH
12201: LD_INT 1
12203: PPUSH
12204: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12208: LD_INT 17
12210: PPUSH
12211: LD_VAR 0 3
12215: PPUSH
12216: LD_INT 1
12218: PPUSH
12219: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12223: LD_INT 18
12225: PPUSH
12226: LD_VAR 0 3
12230: PPUSH
12231: LD_INT 1
12233: PPUSH
12234: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12238: LD_INT 60
12240: PPUSH
12241: LD_VAR 0 3
12245: PPUSH
12246: LD_INT 1
12248: PPUSH
12249: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12253: LD_INT 32
12255: PPUSH
12256: LD_VAR 0 3
12260: PPUSH
12261: LD_INT 1
12263: PPUSH
12264: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12268: LD_INT 9
12270: PPUSH
12271: LD_VAR 0 3
12275: PPUSH
12276: LD_INT 1
12278: PPUSH
12279: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12283: LD_INT 57
12285: PPUSH
12286: LD_VAR 0 3
12290: PPUSH
12291: LD_INT 1
12293: PPUSH
12294: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12298: LD_INT 30
12300: PPUSH
12301: LD_VAR 0 3
12305: PPUSH
12306: LD_INT 1
12308: PPUSH
12309: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12313: LD_INT 37
12315: PPUSH
12316: LD_VAR 0 3
12320: PPUSH
12321: LD_INT 1
12323: PPUSH
12324: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12328: LD_INT 63
12330: PPUSH
12331: LD_VAR 0 3
12335: PPUSH
12336: LD_INT 1
12338: PPUSH
12339: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12343: LD_INT 3
12345: PPUSH
12346: LD_VAR 0 3
12350: PPUSH
12351: LD_INT 1
12353: PPUSH
12354: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12358: LD_INT 4
12360: PPUSH
12361: LD_VAR 0 3
12365: PPUSH
12366: LD_INT 1
12368: PPUSH
12369: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12373: LD_INT 5
12375: PPUSH
12376: LD_VAR 0 3
12380: PPUSH
12381: LD_INT 1
12383: PPUSH
12384: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12388: LD_INT 66
12390: PPUSH
12391: LD_VAR 0 3
12395: PPUSH
12396: LD_INT 1
12398: PPUSH
12399: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12403: LD_INT 21
12405: PPUSH
12406: LD_VAR 0 3
12410: PPUSH
12411: LD_INT 1
12413: PPUSH
12414: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12418: LD_INT 22
12420: PPUSH
12421: LD_VAR 0 3
12425: PPUSH
12426: LD_INT 1
12428: PPUSH
12429: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12433: LD_INT 19
12435: PPUSH
12436: LD_VAR 0 3
12440: PPUSH
12441: LD_INT 1
12443: PPUSH
12444: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12448: LD_INT 54
12450: PPUSH
12451: LD_VAR 0 3
12455: PPUSH
12456: LD_INT 1
12458: PPUSH
12459: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12463: LD_INT 55
12465: PPUSH
12466: LD_VAR 0 3
12470: PPUSH
12471: LD_INT 1
12473: PPUSH
12474: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12478: LD_INT 0
12480: PPUSH
12481: LD_VAR 0 3
12485: PPUSH
12486: LD_INT 1
12488: PPUSH
12489: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12493: LD_INT 1
12495: PPUSH
12496: LD_VAR 0 3
12500: PPUSH
12501: LD_INT 1
12503: PPUSH
12504: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12508: LD_INT 2
12510: PPUSH
12511: LD_VAR 0 3
12515: PPUSH
12516: LD_INT 1
12518: PPUSH
12519: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12523: LD_INT 3
12525: PPUSH
12526: LD_VAR 0 3
12530: PPUSH
12531: LD_INT 1
12533: PPUSH
12534: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12538: LD_INT 4
12540: PPUSH
12541: LD_VAR 0 3
12545: PPUSH
12546: LD_INT 1
12548: PPUSH
12549: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12553: LD_INT 5
12555: PPUSH
12556: LD_VAR 0 3
12560: PPUSH
12561: LD_INT 1
12563: PPUSH
12564: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12568: LD_INT 6
12570: PPUSH
12571: LD_VAR 0 3
12575: PPUSH
12576: LD_INT 1
12578: PPUSH
12579: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12583: LD_INT 7
12585: PPUSH
12586: LD_VAR 0 3
12590: PPUSH
12591: LD_INT 1
12593: PPUSH
12594: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12598: LD_INT 8
12600: PPUSH
12601: LD_VAR 0 3
12605: PPUSH
12606: LD_INT 1
12608: PPUSH
12609: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12613: LD_INT 10
12615: PPUSH
12616: LD_VAR 0 3
12620: PPUSH
12621: LD_INT 1
12623: PPUSH
12624: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12628: LD_INT 11
12630: PPUSH
12631: LD_VAR 0 3
12635: PPUSH
12636: LD_INT 1
12638: PPUSH
12639: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12643: LD_INT 12
12645: PPUSH
12646: LD_VAR 0 3
12650: PPUSH
12651: LD_INT 1
12653: PPUSH
12654: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12658: LD_INT 13
12660: PPUSH
12661: LD_VAR 0 3
12665: PPUSH
12666: LD_INT 1
12668: PPUSH
12669: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12673: LD_INT 14
12675: PPUSH
12676: LD_VAR 0 3
12680: PPUSH
12681: LD_INT 1
12683: PPUSH
12684: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12688: LD_INT 15
12690: PPUSH
12691: LD_VAR 0 3
12695: PPUSH
12696: LD_INT 1
12698: PPUSH
12699: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12703: LD_INT 16
12705: PPUSH
12706: LD_VAR 0 3
12710: PPUSH
12711: LD_INT 1
12713: PPUSH
12714: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12718: LD_INT 17
12720: PPUSH
12721: LD_VAR 0 3
12725: PPUSH
12726: LD_INT 1
12728: PPUSH
12729: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12733: LD_INT 18
12735: PPUSH
12736: LD_VAR 0 3
12740: PPUSH
12741: LD_INT 1
12743: PPUSH
12744: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12748: LD_INT 19
12750: PPUSH
12751: LD_VAR 0 3
12755: PPUSH
12756: LD_INT 1
12758: PPUSH
12759: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12763: LD_INT 20
12765: PPUSH
12766: LD_VAR 0 3
12770: PPUSH
12771: LD_INT 1
12773: PPUSH
12774: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12778: LD_INT 21
12780: PPUSH
12781: LD_VAR 0 3
12785: PPUSH
12786: LD_INT 1
12788: PPUSH
12789: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12793: LD_INT 23
12795: PPUSH
12796: LD_VAR 0 3
12800: PPUSH
12801: LD_INT 1
12803: PPUSH
12804: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12808: LD_INT 26
12810: PPUSH
12811: LD_VAR 0 3
12815: PPUSH
12816: LD_INT 1
12818: PPUSH
12819: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12823: LD_INT 27
12825: PPUSH
12826: LD_VAR 0 3
12830: PPUSH
12831: LD_INT 1
12833: PPUSH
12834: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12838: LD_INT 28
12840: PPUSH
12841: LD_VAR 0 3
12845: PPUSH
12846: LD_INT 1
12848: PPUSH
12849: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12853: LD_INT 29
12855: PPUSH
12856: LD_VAR 0 3
12860: PPUSH
12861: LD_INT 1
12863: PPUSH
12864: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12868: LD_INT 30
12870: PPUSH
12871: LD_VAR 0 3
12875: PPUSH
12876: LD_INT 1
12878: PPUSH
12879: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12883: LD_INT 31
12885: PPUSH
12886: LD_VAR 0 3
12890: PPUSH
12891: LD_INT 1
12893: PPUSH
12894: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12898: LD_INT 32
12900: PPUSH
12901: LD_VAR 0 3
12905: PPUSH
12906: LD_INT 1
12908: PPUSH
12909: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12913: LD_INT 33
12915: PPUSH
12916: LD_VAR 0 3
12920: PPUSH
12921: LD_INT 1
12923: PPUSH
12924: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12928: LD_INT 36
12930: PPUSH
12931: LD_VAR 0 3
12935: PPUSH
12936: LD_INT 1
12938: PPUSH
12939: CALL_OW 324
// end ; 6 :
12943: GO 13953
12945: LD_INT 6
12947: DOUBLE
12948: EQUAL
12949: IFTRUE 12953
12951: GO 13878
12953: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12954: LD_INT 35
12956: PPUSH
12957: LD_VAR 0 3
12961: PPUSH
12962: LD_INT 1
12964: PPUSH
12965: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12969: LD_INT 45
12971: PPUSH
12972: LD_VAR 0 3
12976: PPUSH
12977: LD_INT 1
12979: PPUSH
12980: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12984: LD_INT 46
12986: PPUSH
12987: LD_VAR 0 3
12991: PPUSH
12992: LD_INT 1
12994: PPUSH
12995: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12999: LD_INT 47
13001: PPUSH
13002: LD_VAR 0 3
13006: PPUSH
13007: LD_INT 1
13009: PPUSH
13010: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13014: LD_INT 1
13016: PPUSH
13017: LD_VAR 0 3
13021: PPUSH
13022: LD_INT 1
13024: PPUSH
13025: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13029: LD_INT 2
13031: PPUSH
13032: LD_VAR 0 3
13036: PPUSH
13037: LD_INT 1
13039: PPUSH
13040: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13044: LD_INT 11
13046: PPUSH
13047: LD_VAR 0 3
13051: PPUSH
13052: LD_INT 1
13054: PPUSH
13055: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13059: LD_INT 20
13061: PPUSH
13062: LD_VAR 0 3
13066: PPUSH
13067: LD_INT 1
13069: PPUSH
13070: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13074: LD_INT 48
13076: PPUSH
13077: LD_VAR 0 3
13081: PPUSH
13082: LD_INT 1
13084: PPUSH
13085: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13089: LD_INT 49
13091: PPUSH
13092: LD_VAR 0 3
13096: PPUSH
13097: LD_INT 1
13099: PPUSH
13100: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
13104: LD_INT 50
13106: PPUSH
13107: LD_VAR 0 3
13111: PPUSH
13112: LD_INT 1
13114: PPUSH
13115: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13119: LD_INT 69
13121: PPUSH
13122: LD_VAR 0 3
13126: PPUSH
13127: LD_INT 1
13129: PPUSH
13130: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13134: LD_INT 39
13136: PPUSH
13137: LD_VAR 0 3
13141: PPUSH
13142: LD_INT 1
13144: PPUSH
13145: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13149: LD_INT 34
13151: PPUSH
13152: LD_VAR 0 3
13156: PPUSH
13157: LD_INT 1
13159: PPUSH
13160: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13164: LD_INT 42
13166: PPUSH
13167: LD_VAR 0 3
13171: PPUSH
13172: LD_INT 1
13174: PPUSH
13175: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13179: LD_INT 44
13181: PPUSH
13182: LD_VAR 0 3
13186: PPUSH
13187: LD_INT 1
13189: PPUSH
13190: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13194: LD_INT 41
13196: PPUSH
13197: LD_VAR 0 3
13201: PPUSH
13202: LD_INT 1
13204: PPUSH
13205: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13209: LD_INT 13
13211: PPUSH
13212: LD_VAR 0 3
13216: PPUSH
13217: LD_INT 1
13219: PPUSH
13220: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13224: LD_INT 40
13226: PPUSH
13227: LD_VAR 0 3
13231: PPUSH
13232: LD_INT 1
13234: PPUSH
13235: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13239: LD_INT 43
13241: PPUSH
13242: LD_VAR 0 3
13246: PPUSH
13247: LD_INT 1
13249: PPUSH
13250: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13254: LD_INT 70
13256: PPUSH
13257: LD_VAR 0 3
13261: PPUSH
13262: LD_INT 1
13264: PPUSH
13265: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13269: LD_INT 23
13271: PPUSH
13272: LD_VAR 0 3
13276: PPUSH
13277: LD_INT 1
13279: PPUSH
13280: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13284: LD_INT 51
13286: PPUSH
13287: LD_VAR 0 3
13291: PPUSH
13292: LD_INT 1
13294: PPUSH
13295: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13299: LD_INT 52
13301: PPUSH
13302: LD_VAR 0 3
13306: PPUSH
13307: LD_INT 1
13309: PPUSH
13310: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13314: LD_INT 6
13316: PPUSH
13317: LD_VAR 0 3
13321: PPUSH
13322: LD_INT 1
13324: PPUSH
13325: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13329: LD_INT 15
13331: PPUSH
13332: LD_VAR 0 3
13336: PPUSH
13337: LD_INT 1
13339: PPUSH
13340: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13344: LD_INT 7
13346: PPUSH
13347: LD_VAR 0 3
13351: PPUSH
13352: LD_INT 1
13354: PPUSH
13355: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13359: LD_INT 12
13361: PPUSH
13362: LD_VAR 0 3
13366: PPUSH
13367: LD_INT 1
13369: PPUSH
13370: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13374: LD_INT 10
13376: PPUSH
13377: LD_VAR 0 3
13381: PPUSH
13382: LD_INT 1
13384: PPUSH
13385: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13389: LD_INT 17
13391: PPUSH
13392: LD_VAR 0 3
13396: PPUSH
13397: LD_INT 1
13399: PPUSH
13400: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13404: LD_INT 18
13406: PPUSH
13407: LD_VAR 0 3
13411: PPUSH
13412: LD_INT 1
13414: PPUSH
13415: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13419: LD_INT 60
13421: PPUSH
13422: LD_VAR 0 3
13426: PPUSH
13427: LD_INT 1
13429: PPUSH
13430: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13434: LD_INT 61
13436: PPUSH
13437: LD_VAR 0 3
13441: PPUSH
13442: LD_INT 1
13444: PPUSH
13445: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13449: LD_INT 32
13451: PPUSH
13452: LD_VAR 0 3
13456: PPUSH
13457: LD_INT 1
13459: PPUSH
13460: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13464: LD_INT 27
13466: PPUSH
13467: LD_VAR 0 3
13471: PPUSH
13472: LD_INT 1
13474: PPUSH
13475: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13479: LD_INT 36
13481: PPUSH
13482: LD_VAR 0 3
13486: PPUSH
13487: LD_INT 1
13489: PPUSH
13490: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13494: LD_INT 33
13496: PPUSH
13497: LD_VAR 0 3
13501: PPUSH
13502: LD_INT 1
13504: PPUSH
13505: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13509: LD_INT 9
13511: PPUSH
13512: LD_VAR 0 3
13516: PPUSH
13517: LD_INT 1
13519: PPUSH
13520: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13524: LD_INT 38
13526: PPUSH
13527: LD_VAR 0 3
13531: PPUSH
13532: LD_INT 1
13534: PPUSH
13535: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13539: LD_INT 57
13541: PPUSH
13542: LD_VAR 0 3
13546: PPUSH
13547: LD_INT 1
13549: PPUSH
13550: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13554: LD_INT 58
13556: PPUSH
13557: LD_VAR 0 3
13561: PPUSH
13562: LD_INT 1
13564: PPUSH
13565: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13569: LD_INT 28
13571: PPUSH
13572: LD_VAR 0 3
13576: PPUSH
13577: LD_INT 1
13579: PPUSH
13580: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13584: LD_INT 29
13586: PPUSH
13587: LD_VAR 0 3
13591: PPUSH
13592: LD_INT 1
13594: PPUSH
13595: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13599: LD_INT 30
13601: PPUSH
13602: LD_VAR 0 3
13606: PPUSH
13607: LD_INT 1
13609: PPUSH
13610: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13614: LD_INT 37
13616: PPUSH
13617: LD_VAR 0 3
13621: PPUSH
13622: LD_INT 1
13624: PPUSH
13625: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13629: LD_INT 63
13631: PPUSH
13632: LD_VAR 0 3
13636: PPUSH
13637: LD_INT 1
13639: PPUSH
13640: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13644: LD_INT 64
13646: PPUSH
13647: LD_VAR 0 3
13651: PPUSH
13652: LD_INT 1
13654: PPUSH
13655: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13659: LD_INT 3
13661: PPUSH
13662: LD_VAR 0 3
13666: PPUSH
13667: LD_INT 1
13669: PPUSH
13670: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13674: LD_INT 4
13676: PPUSH
13677: LD_VAR 0 3
13681: PPUSH
13682: LD_INT 1
13684: PPUSH
13685: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13689: LD_INT 5
13691: PPUSH
13692: LD_VAR 0 3
13696: PPUSH
13697: LD_INT 1
13699: PPUSH
13700: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13704: LD_INT 8
13706: PPUSH
13707: LD_VAR 0 3
13711: PPUSH
13712: LD_INT 1
13714: PPUSH
13715: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13719: LD_INT 66
13721: PPUSH
13722: LD_VAR 0 3
13726: PPUSH
13727: LD_INT 1
13729: PPUSH
13730: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13734: LD_INT 67
13736: PPUSH
13737: LD_VAR 0 3
13741: PPUSH
13742: LD_INT 1
13744: PPUSH
13745: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13749: LD_INT 21
13751: PPUSH
13752: LD_VAR 0 3
13756: PPUSH
13757: LD_INT 1
13759: PPUSH
13760: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13764: LD_INT 22
13766: PPUSH
13767: LD_VAR 0 3
13771: PPUSH
13772: LD_INT 1
13774: PPUSH
13775: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13779: LD_INT 19
13781: PPUSH
13782: LD_VAR 0 3
13786: PPUSH
13787: LD_INT 1
13789: PPUSH
13790: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13794: LD_INT 26
13796: PPUSH
13797: LD_VAR 0 3
13801: PPUSH
13802: LD_INT 1
13804: PPUSH
13805: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13809: LD_INT 54
13811: PPUSH
13812: LD_VAR 0 3
13816: PPUSH
13817: LD_INT 1
13819: PPUSH
13820: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13824: LD_INT 55
13826: PPUSH
13827: LD_VAR 0 3
13831: PPUSH
13832: LD_INT 1
13834: PPUSH
13835: CALL_OW 322
// for i = 0 to 39 do
13839: LD_ADDR_VAR 0 4
13843: PUSH
13844: DOUBLE
13845: LD_INT 0
13847: DEC
13848: ST_TO_ADDR
13849: LD_INT 39
13851: PUSH
13852: FOR_TO
13853: IFFALSE 13874
// SetRestrict ( i , side , true ) ;
13855: LD_VAR 0 4
13859: PPUSH
13860: LD_VAR 0 3
13864: PPUSH
13865: LD_INT 1
13867: PPUSH
13868: CALL_OW 324
13872: GO 13852
13874: POP
13875: POP
// end ; else
13876: GO 13953
13878: POP
// begin for i = 1 to 73 do
13879: LD_ADDR_VAR 0 4
13883: PUSH
13884: DOUBLE
13885: LD_INT 1
13887: DEC
13888: ST_TO_ADDR
13889: LD_INT 73
13891: PUSH
13892: FOR_TO
13893: IFFALSE 13914
// SetTech ( i , side , state_enabled ) ;
13895: LD_VAR 0 4
13899: PPUSH
13900: LD_VAR 0 3
13904: PPUSH
13905: LD_INT 1
13907: PPUSH
13908: CALL_OW 322
13912: GO 13892
13914: POP
13915: POP
// for i = 0 to 39 do
13916: LD_ADDR_VAR 0 4
13920: PUSH
13921: DOUBLE
13922: LD_INT 0
13924: DEC
13925: ST_TO_ADDR
13926: LD_INT 39
13928: PUSH
13929: FOR_TO
13930: IFFALSE 13951
// SetRestrict ( i , side , true ) ;
13932: LD_VAR 0 4
13936: PPUSH
13937: LD_VAR 0 3
13941: PPUSH
13942: LD_INT 1
13944: PPUSH
13945: CALL_OW 324
13949: GO 13929
13951: POP
13952: POP
// end ; end ; end ;
13953: GO 9958
13955: POP
13956: POP
// end ; end_of_file
13957: LD_VAR 0 2
13961: RET
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
13962: LD_INT 0
13964: PPUSH
13965: PPUSH
13966: PPUSH
// BuildUpTime_Delay = 0 ;
13967: LD_ADDR_EXP 57
13971: PUSH
13972: LD_INT 0
13974: ST_TO_ADDR
// if not def_builduptime then
13975: LD_EXP 14
13979: NOT
13980: IFFALSE 13984
// exit ;
13982: GO 14167
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
13984: LD_ADDR_EXP 57
13988: PUSH
13989: LD_INT 8400
13991: PUSH
13992: LD_INT 2100
13994: PUSH
13995: LD_EXP 14
13999: MUL
14000: PLUS
14001: ST_TO_ADDR
// BuildUpTimeActive := true ;
14002: LD_ADDR_EXP 56
14006: PUSH
14007: LD_INT 1
14009: ST_TO_ADDR
// for i := 1 to 8 do
14010: LD_ADDR_VAR 0 2
14014: PUSH
14015: DOUBLE
14016: LD_INT 1
14018: DEC
14019: ST_TO_ADDR
14020: LD_INT 8
14022: PUSH
14023: FOR_TO
14024: IFFALSE 14165
// if Side_Positions [ i ] then
14026: LD_EXP 34
14030: PUSH
14031: LD_VAR 0 2
14035: ARRAY
14036: IFFALSE 14163
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14038: LD_EXP 55
14042: PUSH
14043: LD_EXP 34
14047: PUSH
14048: LD_VAR 0 2
14052: ARRAY
14053: ARRAY
14054: PPUSH
14055: LD_INT 5
14057: PPUSH
14058: CALL_OW 424
// for j := 1 to 8 do
14062: LD_ADDR_VAR 0 3
14066: PUSH
14067: DOUBLE
14068: LD_INT 1
14070: DEC
14071: ST_TO_ADDR
14072: LD_INT 8
14074: PUSH
14075: FOR_TO
14076: IFFALSE 14161
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14078: LD_EXP 34
14082: PUSH
14083: LD_VAR 0 3
14087: ARRAY
14088: PUSH
14089: LD_EXP 31
14093: PUSH
14094: LD_VAR 0 2
14098: ARRAY
14099: PUSH
14100: LD_EXP 31
14104: PUSH
14105: LD_VAR 0 3
14109: ARRAY
14110: NONEQUAL
14111: PUSH
14112: LD_EXP 36
14116: NOT
14117: PUSH
14118: LD_VAR 0 2
14122: PUSH
14123: LD_VAR 0 3
14127: NONEQUAL
14128: AND
14129: OR
14130: AND
14131: IFFALSE 14159
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14133: LD_VAR 0 3
14137: PPUSH
14138: LD_EXP 55
14142: PUSH
14143: LD_EXP 34
14147: PUSH
14148: LD_VAR 0 2
14152: ARRAY
14153: ARRAY
14154: PPUSH
14155: CALL_OW 333
14159: GO 14075
14161: POP
14162: POP
// end ;
14163: GO 14023
14165: POP
14166: POP
// end ;
14167: LD_VAR 0 1
14171: RET
// export function EndBuildUp ; var i , j ; begin
14172: LD_INT 0
14174: PPUSH
14175: PPUSH
14176: PPUSH
// BuildUpTimeActive := false ;
14177: LD_ADDR_EXP 56
14181: PUSH
14182: LD_INT 0
14184: ST_TO_ADDR
// for i := 1 to 8 do
14185: LD_ADDR_VAR 0 2
14189: PUSH
14190: DOUBLE
14191: LD_INT 1
14193: DEC
14194: ST_TO_ADDR
14195: LD_INT 8
14197: PUSH
14198: FOR_TO
14199: IFFALSE 14340
// if Side_Positions [ i ] then
14201: LD_EXP 34
14205: PUSH
14206: LD_VAR 0 2
14210: ARRAY
14211: IFFALSE 14338
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14213: LD_EXP 55
14217: PUSH
14218: LD_EXP 34
14222: PUSH
14223: LD_VAR 0 2
14227: ARRAY
14228: ARRAY
14229: PPUSH
14230: LD_INT 0
14232: PPUSH
14233: CALL_OW 424
// for j := 1 to 8 do
14237: LD_ADDR_VAR 0 3
14241: PUSH
14242: DOUBLE
14243: LD_INT 1
14245: DEC
14246: ST_TO_ADDR
14247: LD_INT 8
14249: PUSH
14250: FOR_TO
14251: IFFALSE 14336
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14253: LD_EXP 34
14257: PUSH
14258: LD_VAR 0 3
14262: ARRAY
14263: PUSH
14264: LD_EXP 31
14268: PUSH
14269: LD_VAR 0 2
14273: ARRAY
14274: PUSH
14275: LD_EXP 31
14279: PUSH
14280: LD_VAR 0 3
14284: ARRAY
14285: NONEQUAL
14286: PUSH
14287: LD_EXP 36
14291: NOT
14292: PUSH
14293: LD_VAR 0 2
14297: PUSH
14298: LD_VAR 0 3
14302: NONEQUAL
14303: AND
14304: OR
14305: AND
14306: IFFALSE 14334
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14308: LD_VAR 0 3
14312: PPUSH
14313: LD_EXP 55
14317: PUSH
14318: LD_EXP 34
14322: PUSH
14323: LD_VAR 0 2
14327: ARRAY
14328: ARRAY
14329: PPUSH
14330: CALL_OW 334
14334: GO 14250
14336: POP
14337: POP
// end ;
14338: GO 14198
14340: POP
14341: POP
// end ;
14342: LD_VAR 0 1
14346: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14347: LD_EXP 56
14351: IFFALSE 14526
14353: GO 14355
14355: DISABLE
14356: LD_INT 0
14358: PPUSH
14359: PPUSH
// begin for i := 1 to 8 do
14360: LD_ADDR_VAR 0 1
14364: PUSH
14365: DOUBLE
14366: LD_INT 1
14368: DEC
14369: ST_TO_ADDR
14370: LD_INT 8
14372: PUSH
14373: FOR_TO
14374: IFFALSE 14523
// if Side_Positions [ i ] then
14376: LD_EXP 34
14380: PUSH
14381: LD_VAR 0 1
14385: ARRAY
14386: IFFALSE 14521
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14388: LD_ADDR_VAR 0 2
14392: PUSH
14393: LD_EXP 55
14397: PUSH
14398: LD_EXP 34
14402: PUSH
14403: LD_VAR 0 1
14407: ARRAY
14408: ARRAY
14409: PPUSH
14410: LD_INT 2
14412: PUSH
14413: LD_INT 21
14415: PUSH
14416: LD_INT 1
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: PUSH
14423: LD_INT 21
14425: PUSH
14426: LD_INT 2
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 22
14440: PUSH
14441: LD_OWVAR 2
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PPUSH
14454: CALL_OW 70
14458: PUSH
14459: FOR_IN
14460: IFFALSE 14519
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14462: LD_EXP 31
14466: PUSH
14467: LD_VAR 0 1
14471: ARRAY
14472: PUSH
14473: LD_EXP 31
14477: PUSH
14478: LD_OWVAR 2
14482: ARRAY
14483: NONEQUAL
14484: PUSH
14485: LD_EXP 36
14489: NOT
14490: PUSH
14491: LD_VAR 0 1
14495: PUSH
14496: LD_OWVAR 2
14500: NONEQUAL
14501: AND
14502: OR
14503: IFFALSE 14517
// ComMoveToArea ( un , BuildUpEscape ) ;
14505: LD_VAR 0 2
14509: PPUSH
14510: LD_INT 18
14512: PPUSH
14513: CALL_OW 113
14517: GO 14459
14519: POP
14520: POP
14521: GO 14373
14523: POP
14524: POP
// enable ;
14525: ENABLE
// end ;
14526: PPOPN 2
14528: END
// every 0 0$1 trigger def_builduptime do
14529: LD_EXP 14
14533: IFFALSE 14559
14535: GO 14537
14537: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14538: LD_INT 8400
14540: PUSH
14541: LD_EXP 14
14545: PUSH
14546: LD_INT 2100
14548: MUL
14549: PLUS
14550: PPUSH
14551: CALL_OW 67
// EndBuildUp ;
14555: CALL 14172 0 0
// end ; end_of_file
14559: END
// var respawn , inqueue ; export function init_respawning ; begin
14560: LD_INT 0
14562: PPUSH
// respawn := Rand ( 1 , 8 ) ;
14563: LD_ADDR_LOC 18
14567: PUSH
14568: LD_INT 1
14570: PPUSH
14571: LD_INT 8
14573: PPUSH
14574: CALL_OW 12
14578: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14579: LD_ADDR_LOC 19
14583: PUSH
14584: LD_INT 0
14586: PUSH
14587: LD_INT 0
14589: PUSH
14590: LD_INT 0
14592: PUSH
14593: LD_INT 0
14595: PUSH
14596: LD_INT 0
14598: PUSH
14599: LD_INT 0
14601: PUSH
14602: LD_INT 0
14604: PUSH
14605: LD_INT 0
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: ST_TO_ADDR
// end ;
14618: LD_VAR 0 1
14622: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14623: GO 14625
14625: DISABLE
14626: LD_INT 0
14628: PPUSH
14629: PPUSH
14630: PPUSH
// begin if respawning_time_max = 0 then
14631: LD_EXP 28
14635: PUSH
14636: LD_INT 0
14638: EQUAL
14639: IFFALSE 14643
// exit ;
14641: GO 15051
// if respawn = 8 then
14643: LD_LOC 18
14647: PUSH
14648: LD_INT 8
14650: EQUAL
14651: IFFALSE 14663
// respawn := 1 else
14653: LD_ADDR_LOC 18
14657: PUSH
14658: LD_INT 1
14660: ST_TO_ADDR
14661: GO 14677
// respawn := respawn + 1 ;
14663: LD_ADDR_LOC 18
14667: PUSH
14668: LD_LOC 18
14672: PUSH
14673: LD_INT 1
14675: PLUS
14676: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14677: LD_EXP 34
14681: PUSH
14682: LD_LOC 18
14686: ARRAY
14687: PUSH
14688: LD_LOC 19
14692: PUSH
14693: LD_LOC 18
14697: ARRAY
14698: NOT
14699: AND
14700: IFFALSE 15050
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14702: LD_ADDR_VAR 0 1
14706: PUSH
14707: LD_INT 21
14709: PUSH
14710: LD_INT 1
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: LD_INT 22
14719: PUSH
14720: LD_LOC 18
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 3
14731: PUSH
14732: LD_INT 23
14734: PUSH
14735: LD_INT 0
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: PPUSH
14748: CALL_OW 69
14752: ST_TO_ADDR
// if n < number_of_people then
14753: LD_VAR 0 1
14757: PUSH
14758: LD_EXP 19
14762: LESS
14763: IFFALSE 15047
// begin aktresp := respawn ;
14765: LD_ADDR_VAR 0 3
14769: PUSH
14770: LD_LOC 18
14774: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14775: LD_ADDR_LOC 19
14779: PUSH
14780: LD_LOC 19
14784: PPUSH
14785: LD_VAR 0 3
14789: PPUSH
14790: LD_INT 1
14792: PPUSH
14793: CALL_OW 1
14797: ST_TO_ADDR
// enable ;
14798: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14799: LD_EXP 27
14803: PPUSH
14804: LD_EXP 28
14808: PPUSH
14809: CALL_OW 12
14813: PPUSH
14814: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14818: LD_ADDR_LOC 19
14822: PUSH
14823: LD_LOC 19
14827: PPUSH
14828: LD_VAR 0 3
14832: PPUSH
14833: LD_INT 0
14835: PPUSH
14836: CALL_OW 1
14840: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14841: LD_ADDR_VAR 0 2
14845: PUSH
14846: LD_INT 21
14848: PUSH
14849: LD_INT 3
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 2
14858: PUSH
14859: LD_INT 30
14861: PUSH
14862: LD_INT 0
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 30
14871: PUSH
14872: LD_INT 1
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: PUSH
14884: LD_INT 50
14886: PUSH
14887: EMPTY
14888: LIST
14889: PUSH
14890: LD_INT 22
14892: PUSH
14893: LD_VAR 0 3
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: PPUSH
14908: CALL_OW 69
14912: ST_TO_ADDR
// if dep = 0 then
14913: LD_VAR 0 2
14917: PUSH
14918: LD_INT 0
14920: EQUAL
14921: IFFALSE 14925
// exit ;
14923: GO 15051
// hc_name :=  ;
14925: LD_ADDR_OWVAR 26
14929: PUSH
14930: LD_STRING 
14932: ST_TO_ADDR
// hc_importance := 0 ;
14933: LD_ADDR_OWVAR 32
14937: PUSH
14938: LD_INT 0
14940: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14941: LD_INT 0
14943: PPUSH
14944: LD_INT 0
14946: PPUSH
14947: LD_EXP 20
14951: PUSH
14952: LD_INT 2
14954: DIV
14955: PPUSH
14956: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14960: LD_ADDR_OWVAR 21
14964: PUSH
14965: LD_EXP 35
14969: PUSH
14970: LD_VAR 0 3
14974: ARRAY
14975: ST_TO_ADDR
// uc_side := aktresp ;
14976: LD_ADDR_OWVAR 20
14980: PUSH
14981: LD_VAR 0 3
14985: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14986: LD_ADDR_VAR 0 2
14990: PUSH
14991: LD_VAR 0 2
14995: PUSH
14996: LD_INT 1
14998: PPUSH
14999: LD_VAR 0 2
15003: PPUSH
15004: CALL_OW 12
15008: ARRAY
15009: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
15010: CALL_OW 44
15014: PPUSH
15015: LD_VAR 0 2
15019: PPUSH
15020: CALL_OW 250
15024: PPUSH
15025: LD_VAR 0 2
15029: PPUSH
15030: CALL_OW 251
15034: PPUSH
15035: LD_INT 7
15037: PPUSH
15038: LD_INT 1
15040: PPUSH
15041: CALL_OW 50
// end else
15045: GO 15048
// enable ;
15047: ENABLE
// end else
15048: GO 15051
// enable ;
15050: ENABLE
// end ;
15051: PPOPN 3
15053: END
