// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 368
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: LD_INT 6
 351: PUSH
 352: LD_INT 7
 354: PUSH
 355: LD_INT 8
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 368: LD_ADDR_EXP 36
 372: PUSH
 373: LD_EXP 31
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: EMPTY
 382: LIST
 383: DIFF
 384: PUSH
 385: LD_INT 1
 387: GREATER
 388: ST_TO_ADDR
// if Multiplayer then
 389: LD_OWVAR 4
 393: IFFALSE 600
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 395: LD_ADDR_EXP 1
 399: PUSH
 400: LD_INT 0
 402: PPUSH
 403: CALL_OW 426
 407: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 408: LD_ADDR_EXP 2
 412: PUSH
 413: LD_INT 1
 415: PPUSH
 416: CALL_OW 426
 420: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 421: LD_ADDR_EXP 3
 425: PUSH
 426: LD_INT 2
 428: PPUSH
 429: CALL_OW 426
 433: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 434: LD_ADDR_EXP 4
 438: PUSH
 439: LD_INT 3
 441: PPUSH
 442: CALL_OW 426
 446: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 447: LD_ADDR_EXP 5
 451: PUSH
 452: LD_INT 4
 454: PPUSH
 455: CALL_OW 426
 459: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 460: LD_ADDR_EXP 6
 464: PUSH
 465: LD_INT 5
 467: PPUSH
 468: CALL_OW 426
 472: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 473: LD_ADDR_EXP 7
 477: PUSH
 478: LD_INT 6
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 486: LD_ADDR_EXP 8
 490: PUSH
 491: LD_INT 10
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 499: LD_ADDR_EXP 9
 503: PUSH
 504: LD_INT 11
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 512: LD_ADDR_EXP 10
 516: PUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 525: LD_ADDR_EXP 11
 529: PUSH
 530: LD_INT 13
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 538: LD_ADDR_EXP 12
 542: PUSH
 543: LD_INT 14
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 551: LD_ADDR_EXP 13
 555: PUSH
 556: LD_INT 17
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 564: LD_ADDR_EXP 14
 568: PUSH
 569: LD_INT 20
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 577: LD_ADDR_VAR 0 3
 581: PUSH
 582: LD_INT 22
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// def_win_rules = 0 ;
 590: LD_ADDR_EXP 30
 594: PUSH
 595: LD_INT 0
 597: ST_TO_ADDR
// end else
 598: GO 732
// begin Randomize ;
 600: CALL_OW 10
// def_base_level := 2 ;
 604: LD_ADDR_EXP 1
 608: PUSH
 609: LD_INT 2
 611: ST_TO_ADDR
// def_amount_of_people := 2 ;
 612: LD_ADDR_EXP 2
 616: PUSH
 617: LD_INT 2
 619: ST_TO_ADDR
// def_skill_level := 1 ;
 620: LD_ADDR_EXP 3
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// def_starting_resources := 2 ;
 628: LD_ADDR_EXP 4
 632: PUSH
 633: LD_INT 2
 635: ST_TO_ADDR
// def_shipments_density := 50 ;
 636: LD_ADDR_EXP 5
 640: PUSH
 641: LD_INT 50
 643: ST_TO_ADDR
// def_extra_oil_deposits := 2 ;
 644: LD_ADDR_EXP 6
 648: PUSH
 649: LD_INT 2
 651: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 2
 659: ST_TO_ADDR
// def_shared_vision := 1 ;
 660: LD_ADDR_EXP 8
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// def_morale_flags := 1 ;
 668: LD_ADDR_EXP 9
 672: PUSH
 673: LD_INT 1
 675: ST_TO_ADDR
// def_siberite_detection := 1 ;
 676: LD_ADDR_EXP 10
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// def_people_respawning := 2 ;
 684: LD_ADDR_EXP 11
 688: PUSH
 689: LD_INT 2
 691: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 692: LD_ADDR_EXP 12
 696: PUSH
 697: LD_INT 3
 699: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 700: LD_ADDR_EXP 13
 704: PUSH
 705: LD_INT 2
 707: ST_TO_ADDR
// def_builduptime := 1 ;
 708: LD_ADDR_EXP 14
 712: PUSH
 713: LD_INT 1
 715: ST_TO_ADDR
// tech_level = 4 ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_INT 4
 723: ST_TO_ADDR
// def_win_rules = 0 ;
 724: LD_ADDR_EXP 30
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// end ; if isSGUI then
 732: LD_OWVAR 83
 736: IFFALSE 744
// setMpTechs ( ) else
 738: CALL 9771 0 0
 742: GO 757
// SetMpTechLevel ( tech_level + 1 ) ;
 744: LD_VAR 0 3
 748: PUSH
 749: LD_INT 1
 751: PLUS
 752: PPUSH
 753: CALL 9918 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 757: LD_ADDR_EXP 17
 761: PUSH
 762: LD_INT 0
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 1
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_EXP 1
 780: PUSH
 781: LD_INT 1
 783: PLUS
 784: ARRAY
 785: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 786: LD_ADDR_EXP 18
 790: PUSH
 791: LD_INT 0
 793: PUSH
 794: LD_INT 0
 796: PUSH
 797: LD_INT 3
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: LIST
 804: PUSH
 805: LD_EXP 1
 809: PUSH
 810: LD_INT 1
 812: PLUS
 813: ARRAY
 814: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 815: LD_ADDR_EXP 19
 819: PUSH
 820: LD_INT 9
 822: PUSH
 823: LD_INT 12
 825: PUSH
 826: LD_INT 15
 828: PUSH
 829: LD_INT 24
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: LD_EXP 2
 842: PUSH
 843: LD_INT 1
 845: PLUS
 846: ARRAY
 847: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 848: LD_ADDR_EXP 20
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_EXP 3
 875: PUSH
 876: LD_INT 1
 878: PLUS
 879: ARRAY
 880: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 881: LD_ADDR_EXP 22
 885: PUSH
 886: LD_INT 0
 888: PUSH
 889: LD_INT 0
 891: PUSH
 892: LD_INT 0
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 30
 902: PUSH
 903: LD_INT 0
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 50
 916: PUSH
 917: LD_INT 20
 919: PUSH
 920: LD_INT 0
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PUSH
 928: LD_INT 80
 930: PUSH
 931: LD_INT 40
 933: PUSH
 934: LD_INT 20
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: PUSH
 948: LD_EXP 4
 952: PUSH
 953: LD_INT 1
 955: PLUS
 956: ARRAY
 957: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 958: LD_ADDR_EXP 21
 962: PUSH
 963: LD_INT 10
 965: PUSH
 966: EMPTY
 967: LIST
 968: PUSH
 969: LD_INT 7
 971: PUSH
 972: LD_INT 14
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 6
 981: PUSH
 982: LD_INT 12
 984: PUSH
 985: LD_INT 18
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 10
 998: PUSH
 999: LD_INT 15
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: PUSH
1017: LD_EXP 4
1021: PUSH
1022: LD_INT 1
1024: PLUS
1025: ARRAY
1026: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
1027: LD_ADDR_EXP 23
1031: PUSH
1032: LD_INT 150
1034: PUSH
1035: LD_EXP 5
1039: MINUS
1040: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1041: LD_ADDR_EXP 27
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: LD_INT 10500
1051: PUSH
1052: LD_INT 6300
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: PUSH
1060: LD_EXP 11
1064: PUSH
1065: LD_INT 1
1067: PLUS
1068: ARRAY
1069: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1070: LD_ADDR_EXP 28
1074: PUSH
1075: LD_INT 0
1077: PUSH
1078: LD_INT 31500
1080: PUSH
1081: LD_INT 10500
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_EXP 11
1093: PUSH
1094: LD_INT 1
1096: PLUS
1097: ARRAY
1098: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1099: LD_ADDR_EXP 25
1103: PUSH
1104: LD_INT 0
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 3
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_EXP 12
1126: PUSH
1127: LD_INT 1
1129: PLUS
1130: ARRAY
1131: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1132: LD_ADDR_EXP 24
1136: PUSH
1137: LD_INT 1
1139: NEG
1140: PUSH
1141: LD_INT 350
1143: PUSH
1144: LD_INT 700
1146: PUSH
1147: LD_INT 1400
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_EXP 9
1164: PUSH
1165: LD_INT 1
1167: PLUS
1168: ARRAY
1169: ST_TO_ADDR
// battle_flags_id := [ ] ;
1170: LD_ADDR_EXP 44
1174: PUSH
1175: EMPTY
1176: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1177: LD_EXP 13
1181: PUSH
1182: LD_INT 0
1184: EQUAL
1185: IFFALSE 1197
// siberite_bomb_Delay = 0 else
1187: LD_ADDR_EXP 29
1191: PUSH
1192: LD_INT 0
1194: ST_TO_ADDR
1195: GO 1219
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1197: LD_ADDR_EXP 29
1201: PUSH
1202: LD_EXP 13
1206: PUSH
1207: LD_INT 1
1209: MINUS
1210: PUSH
1211: LD_INT 21000
1213: MUL
1214: PUSH
1215: LD_INT 1
1217: PLUS
1218: ST_TO_ADDR
// end ;
1219: LD_VAR 0 1
1223: RET
// function init_map ; var i , j ; begin
1224: LD_INT 0
1226: PPUSH
1227: PPUSH
1228: PPUSH
// normal_oil_deposits_locations := [ [ 61 , 54 ] , [ 94 , 26 ] , [ 156 , 50 ] , [ 214 , 114 ] , [ 237 , 188 ] , [ 204 , 246 ] , [ 137 , 204 ] , [ 81 , 115 ] ] ;
1229: LD_ADDR_EXP 40
1233: PUSH
1234: LD_INT 61
1236: PUSH
1237: LD_INT 54
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PUSH
1244: LD_INT 94
1246: PUSH
1247: LD_INT 26
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 156
1256: PUSH
1257: LD_INT 50
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 214
1266: PUSH
1267: LD_INT 114
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PUSH
1274: LD_INT 237
1276: PUSH
1277: LD_INT 188
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: PUSH
1284: LD_INT 204
1286: PUSH
1287: LD_INT 246
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 137
1296: PUSH
1297: LD_INT 204
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 81
1306: PUSH
1307: LD_INT 115
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 69 , 46 ] , [ 116 , 26 ] , [ 184 , 67 ] , [ 222 , 144 ] , [ 234 , 214 ] , [ 219 , 232 ] , [ 160 , 212 ] , [ 93 , 148 ] ] ;
1324: LD_ADDR_EXP 41
1328: PUSH
1329: LD_INT 69
1331: PUSH
1332: LD_INT 46
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 116
1341: PUSH
1342: LD_INT 26
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 184
1351: PUSH
1352: LD_INT 67
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 222
1361: PUSH
1362: LD_INT 144
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 234
1371: PUSH
1372: LD_INT 214
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 219
1381: PUSH
1382: LD_INT 232
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 160
1391: PUSH
1392: LD_INT 212
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 93
1401: PUSH
1402: LD_INT 148
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 81 , 48 ] , [ 109 , 18 ] , [ 180 , 77 ] , [ 208 , 119 ] , [ 248 , 197 ] , [ 194 , 223 ] , [ 139 , 209 ] , [ 77 , 123 ] ] ;
1419: LD_ADDR_EXP 42
1423: PUSH
1424: LD_INT 81
1426: PUSH
1427: LD_INT 48
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 109
1436: PUSH
1437: LD_INT 18
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PUSH
1444: LD_INT 180
1446: PUSH
1447: LD_INT 77
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: PUSH
1454: LD_INT 208
1456: PUSH
1457: LD_INT 119
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 248
1466: PUSH
1467: LD_INT 197
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 194
1476: PUSH
1477: LD_INT 223
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 139
1486: PUSH
1487: LD_INT 209
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 77
1496: PUSH
1497: LD_INT 123
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 74 , 72 ] , [ 99 , 38 ] , [ 155 , 58 ] , [ 237 , 141 ] , [ 249 , 218 ] , [ 221 , 247 ] , [ 159 , 204 ] , [ 110 , 151 ] ] ;
1514: LD_ADDR_EXP 43
1518: PUSH
1519: LD_INT 74
1521: PUSH
1522: LD_INT 72
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 99
1531: PUSH
1532: LD_INT 38
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 155
1541: PUSH
1542: LD_INT 58
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 237
1551: PUSH
1552: LD_INT 141
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 249
1561: PUSH
1562: LD_INT 218
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 221
1571: PUSH
1572: LD_INT 247
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 159
1581: PUSH
1582: LD_INT 204
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 110
1591: PUSH
1592: LD_INT 151
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: ST_TO_ADDR
// depot_def := [ [ 79 , 63 , 2 ] , [ 109 , 36 , 3 ] , [ 171 , 60 , 3 ] , [ 222 , 128 , 4 ] , [ 239 , 202 , 5 ] , [ 208 , 233 , 0 ] , [ 145 , 203 , 0 ] , [ 91 , 132 , 1 ] ] ;
1609: LD_ADDR_EXP 37
1613: PUSH
1614: LD_INT 79
1616: PUSH
1617: LD_INT 63
1619: PUSH
1620: LD_INT 2
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 109
1630: PUSH
1631: LD_INT 36
1633: PUSH
1634: LD_INT 3
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 171
1644: PUSH
1645: LD_INT 60
1647: PUSH
1648: LD_INT 3
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 222
1658: PUSH
1659: LD_INT 128
1661: PUSH
1662: LD_INT 4
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 239
1672: PUSH
1673: LD_INT 202
1675: PUSH
1676: LD_INT 5
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: PUSH
1684: LD_INT 208
1686: PUSH
1687: LD_INT 233
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 145
1700: PUSH
1701: LD_INT 203
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: PUSH
1712: LD_INT 91
1714: PUSH
1715: LD_INT 132
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: ST_TO_ADDR
// for i in depot_def do
1736: LD_ADDR_VAR 0 2
1740: PUSH
1741: LD_EXP 37
1745: PUSH
1746: FOR_IN
1747: IFFALSE 1823
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1749: LD_ADDR_EXP 39
1753: PUSH
1754: LD_EXP 39
1758: PUSH
1759: LD_VAR 0 2
1763: PUSH
1764: LD_INT 1
1766: ARRAY
1767: PPUSH
1768: LD_VAR 0 2
1772: PUSH
1773: LD_INT 3
1775: ARRAY
1776: PPUSH
1777: LD_INT 4
1779: NEG
1780: PPUSH
1781: CALL_OW 272
1785: PUSH
1786: LD_VAR 0 2
1790: PUSH
1791: LD_INT 2
1793: ARRAY
1794: PPUSH
1795: LD_VAR 0 2
1799: PUSH
1800: LD_INT 3
1802: ARRAY
1803: PPUSH
1804: LD_INT 4
1806: NEG
1807: PPUSH
1808: CALL_OW 273
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: EMPTY
1818: LIST
1819: ADD
1820: ST_TO_ADDR
1821: GO 1746
1823: POP
1824: POP
// breastworks_def := [ [ [ 90 , 82 , 5 ] , [ 92 , 76 , 5 ] , [ 91 , 66 , 4 ] ] , [ [ 111 , 52 , 5 ] , [ 118 , 52 , 5 ] , [ 123 , 51 , 5 ] ] , [ [ 158 , 69 , 0 ] , [ 165 , 78 , 0 ] , [ 172 , 82 , 0 ] ] , [ [ 206 , 121 , 1 ] , [ 208 , 130 , 1 ] , [ 214 , 139 , 1 ] ] , [ [ 223 , 192 , 2 ] , [ 224 , 187 , 2 ] , [ 232 , 188 , 2 ] ] , [ [ 195 , 218 , 2 ] , [ 200 , 215 , 2 ] , [ 208 , 220 , 3 ] ] , [ [ 141 , 186 , 3 ] , [ 150 , 192 , 2 ] , [ 157 , 199 , 4 ] ] , [ [ 99 , 125 , 4 ] , [ 105 , 136 , 4 ] , [ 108 , 147 , 5 ] ] ] ;
1825: LD_ADDR_EXP 38
1829: PUSH
1830: LD_INT 90
1832: PUSH
1833: LD_INT 82
1835: PUSH
1836: LD_INT 5
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 92
1846: PUSH
1847: LD_INT 76
1849: PUSH
1850: LD_INT 5
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 91
1860: PUSH
1861: LD_INT 66
1863: PUSH
1864: LD_INT 4
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 111
1879: PUSH
1880: LD_INT 52
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: PUSH
1891: LD_INT 118
1893: PUSH
1894: LD_INT 52
1896: PUSH
1897: LD_INT 5
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: PUSH
1905: LD_INT 123
1907: PUSH
1908: LD_INT 51
1910: PUSH
1911: LD_INT 5
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 158
1926: PUSH
1927: LD_INT 69
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: LIST
1937: PUSH
1938: LD_INT 165
1940: PUSH
1941: LD_INT 78
1943: PUSH
1944: LD_INT 0
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 172
1954: PUSH
1955: LD_INT 82
1957: PUSH
1958: LD_INT 0
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: LIST
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 206
1973: PUSH
1974: LD_INT 121
1976: PUSH
1977: LD_INT 1
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 208
1987: PUSH
1988: LD_INT 130
1990: PUSH
1991: LD_INT 1
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 214
2001: PUSH
2002: LD_INT 139
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_INT 223
2020: PUSH
2021: LD_INT 192
2023: PUSH
2024: LD_INT 2
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 224
2034: PUSH
2035: LD_INT 187
2037: PUSH
2038: LD_INT 2
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 232
2048: PUSH
2049: LD_INT 188
2051: PUSH
2052: LD_INT 2
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 195
2067: PUSH
2068: LD_INT 218
2070: PUSH
2071: LD_INT 2
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 200
2081: PUSH
2082: LD_INT 215
2084: PUSH
2085: LD_INT 2
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: LD_INT 208
2095: PUSH
2096: LD_INT 220
2098: PUSH
2099: LD_INT 3
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 141
2114: PUSH
2115: LD_INT 186
2117: PUSH
2118: LD_INT 3
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 150
2128: PUSH
2129: LD_INT 192
2131: PUSH
2132: LD_INT 2
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 157
2142: PUSH
2143: LD_INT 199
2145: PUSH
2146: LD_INT 4
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: LD_INT 99
2161: PUSH
2162: LD_INT 125
2164: PUSH
2165: LD_INT 4
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 105
2175: PUSH
2176: LD_INT 136
2178: PUSH
2179: LD_INT 4
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 108
2189: PUSH
2190: LD_INT 147
2192: PUSH
2193: LD_INT 5
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: ST_TO_ADDR
// for i = 1 to Side_Positions do
2216: LD_ADDR_VAR 0 2
2220: PUSH
2221: DOUBLE
2222: LD_INT 1
2224: DEC
2225: ST_TO_ADDR
2226: LD_EXP 34
2230: PUSH
2231: FOR_TO
2232: IFFALSE 2355
// begin if not Side_Positions [ i ] then
2234: LD_EXP 34
2238: PUSH
2239: LD_VAR 0 2
2243: ARRAY
2244: NOT
2245: IFFALSE 2249
// continue ;
2247: GO 2231
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2249: LD_EXP 40
2253: PUSH
2254: LD_EXP 34
2258: PUSH
2259: LD_VAR 0 2
2263: ARRAY
2264: ARRAY
2265: PUSH
2266: LD_INT 1
2268: ARRAY
2269: PPUSH
2270: LD_EXP 40
2274: PUSH
2275: LD_EXP 34
2279: PUSH
2280: LD_VAR 0 2
2284: ARRAY
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_INT 2
2293: PPUSH
2294: CALL_OW 62
// if def_extra_oil_deposits then
2298: LD_EXP 6
2302: IFFALSE 2353
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2304: LD_EXP 41
2308: PUSH
2309: LD_EXP 34
2313: PUSH
2314: LD_VAR 0 2
2318: ARRAY
2319: ARRAY
2320: PUSH
2321: LD_INT 1
2323: ARRAY
2324: PPUSH
2325: LD_EXP 41
2329: PUSH
2330: LD_EXP 34
2334: PUSH
2335: LD_VAR 0 2
2339: ARRAY
2340: ARRAY
2341: PUSH
2342: LD_INT 2
2344: ARRAY
2345: PPUSH
2346: LD_INT 2
2348: PPUSH
2349: CALL_OW 62
// end ;
2353: GO 2231
2355: POP
2356: POP
// if def_extra_sib_deposits then
2357: LD_EXP 7
2361: IFFALSE 2508
// for i = 1 to Side_Positions do
2363: LD_ADDR_VAR 0 2
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_EXP 34
2377: PUSH
2378: FOR_TO
2379: IFFALSE 2506
// begin if not Side_Positions [ i ] then
2381: LD_EXP 34
2385: PUSH
2386: LD_VAR 0 2
2390: ARRAY
2391: NOT
2392: IFFALSE 2396
// continue ;
2394: GO 2378
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2396: LD_EXP 42
2400: PUSH
2401: LD_EXP 34
2405: PUSH
2406: LD_VAR 0 2
2410: ARRAY
2411: ARRAY
2412: PUSH
2413: LD_INT 1
2415: ARRAY
2416: PPUSH
2417: LD_EXP 42
2421: PUSH
2422: LD_EXP 34
2426: PUSH
2427: LD_VAR 0 2
2431: ARRAY
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 3
2440: PPUSH
2441: CALL_OW 62
// if def_extra_sib_deposits = 2 then
2445: LD_EXP 7
2449: PUSH
2450: LD_INT 2
2452: EQUAL
2453: IFFALSE 2504
// CreateDepositXY ( extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2455: LD_EXP 43
2459: PUSH
2460: LD_EXP 34
2464: PUSH
2465: LD_VAR 0 2
2469: ARRAY
2470: ARRAY
2471: PUSH
2472: LD_INT 1
2474: ARRAY
2475: PPUSH
2476: LD_EXP 43
2480: PUSH
2481: LD_EXP 34
2485: PUSH
2486: LD_VAR 0 2
2490: ARRAY
2491: ARRAY
2492: PUSH
2493: LD_INT 2
2495: ARRAY
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: CALL_OW 62
// end ;
2504: GO 2378
2506: POP
2507: POP
// end ;
2508: LD_VAR 0 1
2512: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2513: LD_INT 0
2515: PPUSH
2516: PPUSH
2517: PPUSH
// if not Team_Game then
2518: LD_EXP 36
2522: NOT
2523: IFFALSE 2621
// begin for i = 1 to 8 do
2525: LD_ADDR_VAR 0 2
2529: PUSH
2530: DOUBLE
2531: LD_INT 1
2533: DEC
2534: ST_TO_ADDR
2535: LD_INT 8
2537: PUSH
2538: FOR_TO
2539: IFFALSE 2617
// for j = 1 to 8 do
2541: LD_ADDR_VAR 0 3
2545: PUSH
2546: DOUBLE
2547: LD_INT 1
2549: DEC
2550: ST_TO_ADDR
2551: LD_INT 8
2553: PUSH
2554: FOR_TO
2555: IFFALSE 2613
// if i <> j then
2557: LD_VAR 0 2
2561: PUSH
2562: LD_VAR 0 3
2566: NONEQUAL
2567: IFFALSE 2591
// SetAttitude ( i , j , att_neutral , true ) else
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_VAR 0 3
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: LD_INT 1
2584: PPUSH
2585: CALL_OW 80
2589: GO 2611
// SetAttitude ( i , j , att_friend , true ) ;
2591: LD_VAR 0 2
2595: PPUSH
2596: LD_VAR 0 3
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: CALL_OW 80
2611: GO 2554
2613: POP
2614: POP
2615: GO 2538
2617: POP
2618: POP
// end else
2619: GO 2796
// begin if def_shared_vision then
2621: LD_EXP 8
2625: IFFALSE 2690
// begin for i in Teams do
2627: LD_ADDR_VAR 0 2
2631: PUSH
2632: LD_EXP 32
2636: PUSH
2637: FOR_IN
2638: IFFALSE 2688
// for j = 2 to i do
2640: LD_ADDR_VAR 0 3
2644: PUSH
2645: DOUBLE
2646: LD_INT 2
2648: DEC
2649: ST_TO_ADDR
2650: LD_VAR 0 2
2654: PUSH
2655: FOR_TO
2656: IFFALSE 2684
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2658: LD_VAR 0 2
2662: PUSH
2663: LD_VAR 0 3
2667: ARRAY
2668: PPUSH
2669: LD_VAR 0 2
2673: PUSH
2674: LD_INT 1
2676: ARRAY
2677: PPUSH
2678: CALL_OW 343
2682: GO 2655
2684: POP
2685: POP
2686: GO 2637
2688: POP
2689: POP
// end ; for i = 1 to 8 do
2690: LD_ADDR_VAR 0 2
2694: PUSH
2695: DOUBLE
2696: LD_INT 1
2698: DEC
2699: ST_TO_ADDR
2700: LD_INT 8
2702: PUSH
2703: FOR_TO
2704: IFFALSE 2794
// for j = 1 to 8 do
2706: LD_ADDR_VAR 0 3
2710: PUSH
2711: DOUBLE
2712: LD_INT 1
2714: DEC
2715: ST_TO_ADDR
2716: LD_INT 8
2718: PUSH
2719: FOR_TO
2720: IFFALSE 2790
// if Side_Teams [ i ] = Side_Teams [ j ] then
2722: LD_EXP 31
2726: PUSH
2727: LD_VAR 0 2
2731: ARRAY
2732: PUSH
2733: LD_EXP 31
2737: PUSH
2738: LD_VAR 0 3
2742: ARRAY
2743: EQUAL
2744: IFFALSE 2768
// SetAttitude ( i , j , att_friend , true ) else
2746: LD_VAR 0 2
2750: PPUSH
2751: LD_VAR 0 3
2755: PPUSH
2756: LD_INT 1
2758: PPUSH
2759: LD_INT 1
2761: PPUSH
2762: CALL_OW 80
2766: GO 2788
// SetAttitude ( i , j , att_enemy , true ) ;
2768: LD_VAR 0 2
2772: PPUSH
2773: LD_VAR 0 3
2777: PPUSH
2778: LD_INT 2
2780: PPUSH
2781: LD_INT 1
2783: PPUSH
2784: CALL_OW 80
2788: GO 2719
2790: POP
2791: POP
2792: GO 2703
2794: POP
2795: POP
// end ; end ;
2796: LD_VAR 0 1
2800: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2801: LD_INT 0
2803: PPUSH
2804: PPUSH
2805: PPUSH
2806: PPUSH
// result := [ ] ;
2807: LD_ADDR_VAR 0 7
2811: PUSH
2812: EMPTY
2813: ST_TO_ADDR
// for i := 1 to count do
2814: LD_ADDR_VAR 0 8
2818: PUSH
2819: DOUBLE
2820: LD_INT 1
2822: DEC
2823: ST_TO_ADDR
2824: LD_VAR 0 1
2828: PUSH
2829: FOR_TO
2830: IFFALSE 3248
// begin uc_direction := Rand ( 0 , 5 ) ;
2832: LD_ADDR_OWVAR 24
2836: PUSH
2837: LD_INT 0
2839: PPUSH
2840: LD_INT 5
2842: PPUSH
2843: CALL_OW 12
2847: ST_TO_ADDR
// if commander then
2848: LD_LOC 1
2852: IFFALSE 2961
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2854: LD_ADDR_OWVAR 26
2858: PUSH
2859: LD_OWVAR 19
2863: PUSH
2864: LD_OWVAR 20
2868: ARRAY
2869: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2870: LD_INT 1
2872: PPUSH
2873: LD_INT 2
2875: PPUSH
2876: CALL_OW 12
2880: PPUSH
2881: LD_VAR 0 2
2885: PPUSH
2886: LD_EXP 20
2890: PUSH
2891: LD_INT 2
2893: PLUS
2894: PPUSH
2895: CALL_OW 380
// hc_importance := 105 ;
2899: LD_ADDR_OWVAR 32
2903: PUSH
2904: LD_INT 105
2906: ST_TO_ADDR
// commander := false ;
2907: LD_ADDR_LOC 1
2911: PUSH
2912: LD_INT 0
2914: ST_TO_ADDR
// if Multiplayer then
2915: LD_OWVAR 4
2919: IFFALSE 2959
// begin hc_gallery := MULTIAVATARS ;
2921: LD_ADDR_OWVAR 33
2925: PUSH
2926: LD_STRING MULTIAVATARS
2928: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2929: LD_ADDR_OWVAR 34
2933: PUSH
2934: LD_OWVAR 20
2938: PPUSH
2939: CALL_OW 525
2943: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2944: LD_ADDR_OWVAR 27
2948: PUSH
2949: LD_OWVAR 20
2953: PPUSH
2954: CALL_OW 526
2958: ST_TO_ADDR
// end ; end else
2959: GO 3024
// begin hc_name :=  ;
2961: LD_ADDR_OWVAR 26
2965: PUSH
2966: LD_STRING 
2968: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2969: LD_INT 1
2971: PPUSH
2972: LD_INT 2
2974: PPUSH
2975: CALL_OW 12
2979: PPUSH
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_EXP 20
2989: PPUSH
2990: CALL_OW 380
// hc_importance := 0 ;
2994: LD_ADDR_OWVAR 32
2998: PUSH
2999: LD_INT 0
3001: ST_TO_ADDR
// if Multiplayer then
3002: LD_OWVAR 4
3006: IFFALSE 3024
// begin hc_gallery :=  ;
3008: LD_ADDR_OWVAR 33
3012: PUSH
3013: LD_STRING 
3015: ST_TO_ADDR
// hc_face_number := 0 ;
3016: LD_ADDR_OWVAR 34
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3024: LD_ADDR_VAR 0 10
3028: PUSH
3029: CALL_OW 44
3033: ST_TO_ADDR
// if global_defined then
3034: LD_LOC 3
3038: IFFALSE 3178
// begin if ( cl = class_soldier ) then
3040: LD_VAR 0 2
3044: PUSH
3045: LD_INT 1
3047: EQUAL
3048: IFFALSE 3068
// j := i + soldiers_created else
3050: LD_ADDR_VAR 0 9
3054: PUSH
3055: LD_VAR 0 8
3059: PUSH
3060: LD_LOC 4
3064: PLUS
3065: ST_TO_ADDR
3066: GO 3078
// j := i ;
3068: LD_ADDR_VAR 0 9
3072: PUSH
3073: LD_VAR 0 8
3077: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3078: LD_LOC 2
3082: PUSH
3083: LD_VAR 0 2
3087: ARRAY
3088: PUSH
3089: LD_VAR 0 9
3093: ARRAY
3094: PPUSH
3095: LD_VAR 0 10
3099: PPUSH
3100: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3104: LD_VAR 0 10
3108: PPUSH
3109: LD_INT 2
3111: PPUSH
3112: LD_LOC 2
3116: PUSH
3117: LD_VAR 0 2
3121: ARRAY
3122: PUSH
3123: LD_VAR 0 9
3127: ARRAY
3128: PPUSH
3129: LD_INT 2
3131: PPUSH
3132: CALL_OW 260
3136: PPUSH
3137: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3141: LD_VAR 0 10
3145: PPUSH
3146: LD_INT 1
3148: PPUSH
3149: LD_LOC 2
3153: PUSH
3154: LD_VAR 0 2
3158: ARRAY
3159: PUSH
3160: LD_VAR 0 9
3164: ARRAY
3165: PPUSH
3166: LD_INT 1
3168: PPUSH
3169: CALL_OW 260
3173: PPUSH
3174: CALL_OW 239
// end ; if building then
3178: LD_VAR 0 6
3182: IFFALSE 3200
// PlaceHumanInUnit ( un , building ) else
3184: LD_VAR 0 10
3188: PPUSH
3189: LD_VAR 0 6
3193: PPUSH
3194: CALL_OW 52
3198: GO 3227
// PlaceUnitXYR ( un , x , y , r , false ) ;
3200: LD_VAR 0 10
3204: PPUSH
3205: LD_VAR 0 3
3209: PPUSH
3210: LD_VAR 0 4
3214: PPUSH
3215: LD_VAR 0 5
3219: PPUSH
3220: LD_INT 0
3222: PPUSH
3223: CALL_OW 50
// result := result ^ [ un ] ;
3227: LD_ADDR_VAR 0 7
3231: PUSH
3232: LD_VAR 0 7
3236: PUSH
3237: LD_VAR 0 10
3241: PUSH
3242: EMPTY
3243: LIST
3244: ADD
3245: ST_TO_ADDR
// end ;
3246: GO 2829
3248: POP
3249: POP
// if not global_defined then
3250: LD_LOC 3
3254: NOT
3255: IFFALSE 3333
// if ( global_units >= cl ) then
3257: LD_LOC 2
3261: PUSH
3262: LD_VAR 0 2
3266: GREATEREQUAL
3267: IFFALSE 3308
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3269: LD_ADDR_LOC 2
3273: PUSH
3274: LD_LOC 2
3278: PPUSH
3279: LD_VAR 0 2
3283: PPUSH
3284: LD_LOC 2
3288: PUSH
3289: LD_VAR 0 2
3293: ARRAY
3294: PUSH
3295: LD_VAR 0 7
3299: ADD
3300: PPUSH
3301: CALL_OW 1
3305: ST_TO_ADDR
3306: GO 3333
// global_units := Replace ( global_units , cl , result ) ;
3308: LD_ADDR_LOC 2
3312: PUSH
3313: LD_LOC 2
3317: PPUSH
3318: LD_VAR 0 2
3322: PPUSH
3323: LD_VAR 0 7
3327: PPUSH
3328: CALL_OW 1
3332: ST_TO_ADDR
// if commander then
3333: LD_LOC 1
3337: IFFALSE 3384
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3339: LD_ADDR_EXP 45
3343: PUSH
3344: LD_EXP 45
3348: PPUSH
3349: LD_OWVAR 20
3353: PPUSH
3354: LD_EXP 45
3358: PUSH
3359: LD_OWVAR 20
3363: ARRAY
3364: PUSH
3365: LD_VAR 0 10
3369: ADD
3370: PPUSH
3371: CALL_OW 1
3375: ST_TO_ADDR
// commander := false ;
3376: LD_ADDR_LOC 1
3380: PUSH
3381: LD_INT 0
3383: ST_TO_ADDR
// end ; end ;
3384: LD_VAR 0 7
3388: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3389: LD_INT 0
3391: PPUSH
3392: PPUSH
3393: PPUSH
3394: PPUSH
3395: PPUSH
3396: PPUSH
3397: PPUSH
3398: PPUSH
3399: PPUSH
// if side in [ 0 , 9 ] then
3400: LD_VAR 0 1
3404: PUSH
3405: LD_INT 0
3407: PUSH
3408: LD_INT 9
3410: PUSH
3411: EMPTY
3412: LIST
3413: LIST
3414: IN
3415: IFFALSE 3419
// exit ;
3417: GO 4469
// pos := Side_Positions [ side ] ;
3419: LD_ADDR_VAR 0 3
3423: PUSH
3424: LD_EXP 34
3428: PUSH
3429: LD_VAR 0 1
3433: ARRAY
3434: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3435: LD_ADDR_OWVAR 21
3439: PUSH
3440: LD_EXP 35
3444: PUSH
3445: LD_VAR 0 1
3449: ARRAY
3450: ST_TO_ADDR
// uc_side := side ;
3451: LD_ADDR_OWVAR 20
3455: PUSH
3456: LD_VAR 0 1
3460: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3461: LD_ADDR_VAR 0 4
3465: PUSH
3466: LD_EXP 37
3470: PUSH
3471: LD_VAR 0 3
3475: ARRAY
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3481: LD_ADDR_VAR 0 5
3485: PUSH
3486: LD_EXP 37
3490: PUSH
3491: LD_VAR 0 3
3495: ARRAY
3496: PUSH
3497: LD_INT 2
3499: ARRAY
3500: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3501: LD_ADDR_VAR 0 6
3505: PUSH
3506: LD_EXP 37
3510: PUSH
3511: LD_VAR 0 3
3515: ARRAY
3516: PUSH
3517: LD_INT 3
3519: ARRAY
3520: ST_TO_ADDR
// if is_depot then
3521: LD_EXP 17
3525: IFFALSE 3658
// begin bc_type = b_depot ;
3527: LD_ADDR_OWVAR 42
3531: PUSH
3532: LD_INT 0
3534: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3535: LD_ADDR_VAR 0 10
3539: PUSH
3540: LD_VAR 0 4
3544: PPUSH
3545: LD_VAR 0 5
3549: PPUSH
3550: LD_VAR 0 6
3554: PPUSH
3555: CALL_OW 47
3559: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3560: LD_VAR 0 10
3564: PPUSH
3565: LD_STRING @
3567: PUSH
3568: LD_VAR 0 1
3572: STR
3573: PPUSH
3574: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3578: LD_VAR 0 10
3582: PPUSH
3583: CALL_OW 274
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: LD_EXP 22
3595: PUSH
3596: LD_INT 1
3598: ARRAY
3599: PPUSH
3600: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3604: LD_VAR 0 10
3608: PPUSH
3609: CALL_OW 274
3613: PPUSH
3614: LD_INT 2
3616: PPUSH
3617: LD_EXP 22
3621: PUSH
3622: LD_INT 2
3624: ARRAY
3625: PPUSH
3626: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3630: LD_VAR 0 10
3634: PPUSH
3635: CALL_OW 274
3639: PPUSH
3640: LD_INT 3
3642: PPUSH
3643: LD_EXP 22
3647: PUSH
3648: LD_INT 3
3650: ARRAY
3651: PPUSH
3652: CALL_OW 277
// end else
3656: GO 3802
// begin for i := 1 to 3 do
3658: LD_ADDR_VAR 0 7
3662: PUSH
3663: DOUBLE
3664: LD_INT 1
3666: DEC
3667: ST_TO_ADDR
3668: LD_INT 3
3670: PUSH
3671: FOR_TO
3672: IFFALSE 3800
// begin r := starting_resources [ i ] ;
3674: LD_ADDR_VAR 0 8
3678: PUSH
3679: LD_EXP 22
3683: PUSH
3684: LD_VAR 0 7
3688: ARRAY
3689: ST_TO_ADDR
// while r >= 10 do
3690: LD_VAR 0 8
3694: PUSH
3695: LD_INT 10
3697: GREATEREQUAL
3698: IFFALSE 3798
// if r > 50 then
3700: LD_VAR 0 8
3704: PUSH
3705: LD_INT 50
3707: GREATER
3708: IFFALSE 3754
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3710: LD_VAR 0 7
3714: PPUSH
3715: LD_INT 5
3717: PPUSH
3718: LD_VAR 0 4
3722: PPUSH
3723: LD_VAR 0 5
3727: PPUSH
3728: LD_INT 4
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 60
// r := r - 50 ;
3738: LD_ADDR_VAR 0 8
3742: PUSH
3743: LD_VAR 0 8
3747: PUSH
3748: LD_INT 50
3750: MINUS
3751: ST_TO_ADDR
// end else
3752: GO 3796
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3754: LD_VAR 0 7
3758: PPUSH
3759: LD_VAR 0 8
3763: PUSH
3764: LD_INT 10
3766: DIV
3767: PPUSH
3768: LD_VAR 0 4
3772: PPUSH
3773: LD_VAR 0 5
3777: PPUSH
3778: LD_INT 4
3780: PPUSH
3781: LD_INT 0
3783: PPUSH
3784: CALL_OW 60
// r := 0 ;
3788: LD_ADDR_VAR 0 8
3792: PUSH
3793: LD_INT 0
3795: ST_TO_ADDR
// end ;
3796: GO 3690
// end ;
3798: GO 3671
3800: POP
3801: POP
// end ; for r in starting_crates do
3802: LD_ADDR_VAR 0 8
3806: PUSH
3807: LD_EXP 21
3811: PUSH
3812: FOR_IN
3813: IFFALSE 3845
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3815: LD_INT 1
3817: PPUSH
3818: LD_INT 5
3820: PPUSH
3821: LD_VAR 0 4
3825: PPUSH
3826: LD_VAR 0 5
3830: PPUSH
3831: LD_VAR 0 8
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: CALL_OW 60
3843: GO 3812
3845: POP
3846: POP
// if def_morale_flags then
3847: LD_EXP 9
3851: IFFALSE 3990
// begin x := start_def [ pos ] [ 1 ] ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_EXP 39
3862: PUSH
3863: LD_VAR 0 3
3867: ARRAY
3868: PUSH
3869: LD_INT 1
3871: ARRAY
3872: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3873: LD_ADDR_VAR 0 5
3877: PUSH
3878: LD_EXP 39
3882: PUSH
3883: LD_VAR 0 3
3887: ARRAY
3888: PUSH
3889: LD_INT 2
3891: ARRAY
3892: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3893: LD_VAR 0 4
3897: PPUSH
3898: LD_VAR 0 5
3902: PPUSH
3903: LD_INT 12
3905: PPUSH
3906: LD_INT 2
3908: PPUSH
3909: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3913: LD_ADDR_EXP 44
3917: PUSH
3918: LD_EXP 44
3922: PUSH
3923: LD_VAR 0 1
3927: PPUSH
3928: LD_VAR 0 4
3932: PPUSH
3933: LD_VAR 0 5
3937: PPUSH
3938: LD_INT 1
3940: PUSH
3941: LD_INT 100
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: PUSH
3948: LD_INT 2
3950: PUSH
3951: LD_INT 50
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 3
3960: PUSH
3961: LD_INT 20
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: PUSH
3968: LD_INT 20
3970: PUSH
3971: LD_INT 100
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: PPUSH
3984: CALL_OW 418
3988: ADD
3989: ST_TO_ADDR
// end ; commander := true ;
3990: LD_ADDR_LOC 1
3994: PUSH
3995: LD_INT 1
3997: ST_TO_ADDR
// soldiers_created := 0 ;
3998: LD_ADDR_LOC 4
4002: PUSH
4003: LD_INT 0
4005: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4006: LD_ADDR_VAR 0 7
4010: PUSH
4011: DOUBLE
4012: LD_INT 1
4014: DEC
4015: ST_TO_ADDR
4016: LD_EXP 18
4020: PUSH
4021: FOR_TO
4022: IFFALSE 4175
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4024: LD_ADDR_VAR 0 4
4028: PUSH
4029: LD_EXP 38
4033: PUSH
4034: LD_VAR 0 3
4038: ARRAY
4039: PUSH
4040: LD_VAR 0 7
4044: ARRAY
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4050: LD_ADDR_VAR 0 5
4054: PUSH
4055: LD_EXP 38
4059: PUSH
4060: LD_VAR 0 3
4064: ARRAY
4065: PUSH
4066: LD_VAR 0 7
4070: ARRAY
4071: PUSH
4072: LD_INT 2
4074: ARRAY
4075: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4076: LD_ADDR_VAR 0 6
4080: PUSH
4081: LD_EXP 38
4085: PUSH
4086: LD_VAR 0 3
4090: ARRAY
4091: PUSH
4092: LD_VAR 0 7
4096: ARRAY
4097: PUSH
4098: LD_INT 3
4100: ARRAY
4101: ST_TO_ADDR
// bc_type := b_breastwork ;
4102: LD_ADDR_OWVAR 42
4106: PUSH
4107: LD_INT 31
4109: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4110: LD_ADDR_VAR 0 9
4114: PUSH
4115: LD_VAR 0 4
4119: PPUSH
4120: LD_VAR 0 5
4124: PPUSH
4125: LD_VAR 0 6
4129: PPUSH
4130: CALL_OW 47
4134: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4135: LD_INT 1
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: LD_INT 0
4146: PPUSH
4147: LD_INT 0
4149: PPUSH
4150: LD_VAR 0 9
4154: PPUSH
4155: CALL 2801 0 6
// soldiers_created := soldiers_created + 1 ;
4159: LD_ADDR_LOC 4
4163: PUSH
4164: LD_LOC 4
4168: PUSH
4169: LD_INT 1
4171: PLUS
4172: ST_TO_ADDR
// end ;
4173: GO 4021
4175: POP
4176: POP
// x := start_def [ pos ] [ 1 ] ;
4177: LD_ADDR_VAR 0 4
4181: PUSH
4182: LD_EXP 39
4186: PUSH
4187: LD_VAR 0 3
4191: ARRAY
4192: PUSH
4193: LD_INT 1
4195: ARRAY
4196: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4197: LD_ADDR_VAR 0 5
4201: PUSH
4202: LD_EXP 39
4206: PUSH
4207: LD_VAR 0 3
4211: ARRAY
4212: PUSH
4213: LD_INT 2
4215: ARRAY
4216: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4217: LD_LOC 8
4221: PUSH
4222: LD_EXP 18
4226: MINUS
4227: PPUSH
4228: LD_INT 1
4230: PPUSH
4231: LD_VAR 0 4
4235: PPUSH
4236: LD_VAR 0 5
4240: PPUSH
4241: LD_INT 5
4243: PPUSH
4244: LD_INT 0
4246: PPUSH
4247: CALL 2801 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4251: LD_LOC 5
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: LD_VAR 0 4
4263: PPUSH
4264: LD_VAR 0 5
4268: PPUSH
4269: LD_INT 5
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL 2801 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4279: LD_LOC 7
4283: PPUSH
4284: LD_INT 3
4286: PPUSH
4287: LD_VAR 0 4
4291: PPUSH
4292: LD_VAR 0 5
4296: PPUSH
4297: LD_INT 5
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL 2801 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4307: LD_LOC 6
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_VAR 0 4
4319: PPUSH
4320: LD_VAR 0 5
4324: PPUSH
4325: LD_INT 5
4327: PPUSH
4328: LD_INT 0
4330: PPUSH
4331: CALL 2801 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4335: LD_EXP 10
4339: PUSH
4340: LD_INT 20
4342: PPUSH
4343: LD_VAR 0 1
4347: PPUSH
4348: CALL_OW 321
4352: PUSH
4353: LD_INT 1
4355: EQUAL
4356: AND
4357: IFFALSE 4374
// SetTech ( tech_SibDet , side , state_researched ) ;
4359: LD_INT 20
4361: PPUSH
4362: LD_VAR 0 1
4366: PPUSH
4367: LD_INT 2
4369: PPUSH
4370: CALL_OW 322
// if def_siberite_bomb = 1 then
4374: LD_EXP 13
4378: PUSH
4379: LD_INT 1
4381: EQUAL
4382: IFFALSE 4416
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4384: LD_INT 25
4386: PPUSH
4387: LD_VAR 0 1
4391: PPUSH
4392: LD_INT 1
4394: PPUSH
4395: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4399: LD_INT 73
4401: PPUSH
4402: LD_VAR 0 1
4406: PPUSH
4407: LD_INT 1
4409: PPUSH
4410: CALL_OW 322
// end else
4414: GO 4446
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4416: LD_INT 25
4418: PPUSH
4419: LD_VAR 0 1
4423: PPUSH
4424: LD_INT 0
4426: PPUSH
4427: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4431: LD_INT 73
4433: PPUSH
4434: LD_VAR 0 1
4438: PPUSH
4439: LD_INT 0
4441: PPUSH
4442: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4446: LD_INT 24
4448: PPUSH
4449: LD_VAR 0 1
4453: PPUSH
4454: LD_INT 0
4456: PPUSH
4457: CALL_OW 322
// global_defined := true ;
4461: LD_ADDR_LOC 3
4465: PUSH
4466: LD_INT 1
4468: ST_TO_ADDR
// end ;
4469: LD_VAR 0 2
4473: RET
// function prepare_sides ; var i ; begin
4474: LD_INT 0
4476: PPUSH
4477: PPUSH
// global_units := [ ] ;
4478: LD_ADDR_LOC 2
4482: PUSH
4483: EMPTY
4484: ST_TO_ADDR
// global_defined := false ;
4485: LD_ADDR_LOC 3
4489: PUSH
4490: LD_INT 0
4492: ST_TO_ADDR
// CountClassMembers ;
4493: CALL 4543 0 0
// for i := 1 to 8 do
4497: LD_ADDR_VAR 0 2
4501: PUSH
4502: DOUBLE
4503: LD_INT 1
4505: DEC
4506: ST_TO_ADDR
4507: LD_INT 8
4509: PUSH
4510: FOR_TO
4511: IFFALSE 4536
// if Side_Positions [ i ] then
4513: LD_EXP 34
4517: PUSH
4518: LD_VAR 0 2
4522: ARRAY
4523: IFFALSE 4534
// prepare_side ( i ) ;
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL 3389 0 1
4534: GO 4510
4536: POP
4537: POP
// end ;
4538: LD_VAR 0 1
4542: RET
// function CountClassMembers ; var Mode ; begin
4543: LD_INT 0
4545: PPUSH
4546: PPUSH
// if No_Mechs then
4547: LD_EXP 15
4551: IFFALSE 4563
// Mode := 2 else
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: LD_INT 2
4560: ST_TO_ADDR
4561: GO 4571
// Mode := 1 ;
4563: LD_ADDR_VAR 0 2
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// neng := number_of_people ;
4571: LD_ADDR_LOC 5
4575: PUSH
4576: LD_EXP 19
4580: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4581: LD_ADDR_LOC 8
4585: PUSH
4586: LD_LOC 5
4590: PUSH
4591: LD_INT 4
4593: PUSH
4594: LD_INT 3
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_VAR 0 2
4605: ARRAY
4606: DIV
4607: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4608: LD_LOC 8
4612: PUSH
4613: LD_EXP 18
4617: LESS
4618: IFFALSE 4630
// nsol := number_of_breastworks ;
4620: LD_ADDR_LOC 8
4624: PUSH
4625: LD_EXP 18
4629: ST_TO_ADDR
// neng := neng - nsol ;
4630: LD_ADDR_LOC 5
4634: PUSH
4635: LD_LOC 5
4639: PUSH
4640: LD_LOC 8
4644: MINUS
4645: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4646: LD_ADDR_LOC 6
4650: PUSH
4651: LD_LOC 5
4655: PUSH
4656: LD_INT 3
4658: PUSH
4659: LD_INT 2
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_VAR 0 2
4670: ARRAY
4671: DIV
4672: ST_TO_ADDR
// if ( nsci < 1 ) then
4673: LD_LOC 6
4677: PUSH
4678: LD_INT 1
4680: LESS
4681: IFFALSE 4691
// nsci := 1 ;
4683: LD_ADDR_LOC 6
4687: PUSH
4688: LD_INT 1
4690: ST_TO_ADDR
// neng := neng - nsci ;
4691: LD_ADDR_LOC 5
4695: PUSH
4696: LD_LOC 5
4700: PUSH
4701: LD_LOC 6
4705: MINUS
4706: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4707: LD_ADDR_LOC 7
4711: PUSH
4712: LD_LOC 5
4716: PUSH
4717: LD_INT 2
4719: DIV
4720: PUSH
4721: LD_INT 0
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PUSH
4728: LD_VAR 0 2
4732: ARRAY
4733: ST_TO_ADDR
// neng := neng - nmech ;
4734: LD_ADDR_LOC 5
4738: PUSH
4739: LD_LOC 5
4743: PUSH
4744: LD_LOC 7
4748: MINUS
4749: ST_TO_ADDR
// if ( neng < 1 ) then
4750: LD_LOC 5
4754: PUSH
4755: LD_INT 1
4757: LESS
4758: IFFALSE 4768
// neng := 1 ;
4760: LD_ADDR_LOC 5
4764: PUSH
4765: LD_INT 1
4767: ST_TO_ADDR
// end ;
4768: LD_VAR 0 1
4772: RET
// starting begin disable ( 98 ) ;
4773: LD_INT 98
4775: DISABLE_MARKED
// disable ( 99 ) ;
4776: LD_INT 99
4778: DISABLE_MARKED
// disable ( 400 ) ;
4779: LD_INT 400
4781: DISABLE_MARKED
// disable ( 401 ) ;
4782: LD_INT 401
4784: DISABLE_MARKED
// mp_selectmsg := true ;
4785: LD_ADDR_OWVAR 13
4789: PUSH
4790: LD_INT 1
4792: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4793: CALL 68 0 0
// init_map ;
4797: CALL 1224 0 0
// init_respawning ;
4801: CALL 14538 0 0
// set_shared_visions_and_alliances ;
4805: CALL 2513 0 0
// ResetFog ;
4809: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4813: LD_OWVAR 2
4817: PPUSH
4818: CALL_OW 520
// AnimateTrees ( true ) ;
4822: LD_INT 1
4824: PPUSH
4825: CALL_OW 573
// prepare_sides ;
4829: CALL 4474 0 0
// Init_Win_Condition ;
4833: CALL 8476 0 0
// ShowTimer ;
4837: CALL 7499 0 0
// music_nat := Side_Nations [ your_side ] ;
4841: LD_ADDR_OWVAR 71
4845: PUSH
4846: LD_EXP 35
4850: PUSH
4851: LD_OWVAR 2
4855: ARRAY
4856: ST_TO_ADDR
// if IAmSpec then
4857: CALL_OW 531
4861: IFFALSE 4885
// begin fogoff ( true ) ;
4863: LD_INT 1
4865: PPUSH
4866: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4870: LD_INT 130
4872: PPUSH
4873: LD_INT 100
4875: PPUSH
4876: CALL_OW 86
// enable ( 400 ) ;
4880: LD_INT 400
4882: ENABLE_MARKED
// end else
4883: GO 4931
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4885: LD_EXP 39
4889: PUSH
4890: LD_EXP 34
4894: PUSH
4895: LD_OWVAR 2
4899: ARRAY
4900: ARRAY
4901: PUSH
4902: LD_INT 1
4904: ARRAY
4905: PPUSH
4906: LD_EXP 39
4910: PUSH
4911: LD_EXP 34
4915: PUSH
4916: LD_OWVAR 2
4920: ARRAY
4921: ARRAY
4922: PUSH
4923: LD_INT 2
4925: ARRAY
4926: PPUSH
4927: CALL_OW 86
// end ; InitApeman ;
4931: CALL 6029 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
4935: LD_ADDR_EXP 55
4939: PUSH
4940: LD_INT 1
4942: PUSH
4943: LD_INT 2
4945: PUSH
4946: LD_INT 3
4948: PUSH
4949: LD_INT 4
4951: PUSH
4952: LD_INT 5
4954: PUSH
4955: LD_INT 6
4957: PUSH
4958: LD_INT 7
4960: PUSH
4961: LD_INT 8
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: ST_TO_ADDR
// BeginBuildUp ;
4974: CALL 13940 0 0
// end ;
4978: END
// every 0 0$1 do
4979: GO 4981
4981: DISABLE
// if ( def_siberite_bomb > 1 ) then
4982: LD_EXP 13
4986: PUSH
4987: LD_INT 1
4989: GREATER
4990: IFFALSE 5005
// begin wait ( siberite_bomb_Delay ) ;
4992: LD_EXP 29
4996: PPUSH
4997: CALL_OW 67
// EnableSibFiss ;
5001: CALL 5006 0 0
// end ;
5005: END
// function EnableSibFiss ; var i ; begin
5006: LD_INT 0
5008: PPUSH
5009: PPUSH
// for i := 1 to 8 do
5010: LD_ADDR_VAR 0 2
5014: PUSH
5015: DOUBLE
5016: LD_INT 1
5018: DEC
5019: ST_TO_ADDR
5020: LD_INT 8
5022: PUSH
5023: FOR_TO
5024: IFFALSE 5070
// if Side_Positions [ i ] then
5026: LD_EXP 34
5030: PUSH
5031: LD_VAR 0 2
5035: ARRAY
5036: IFFALSE 5068
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5038: LD_INT 25
5040: PPUSH
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_INT 1
5048: PPUSH
5049: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5053: LD_INT 73
5055: PPUSH
5056: LD_VAR 0 2
5060: PPUSH
5061: LD_INT 1
5063: PPUSH
5064: CALL_OW 322
// end ;
5068: GO 5023
5070: POP
5071: POP
// end ; end_of_file
5072: LD_VAR 0 1
5076: RET
// every 0 0$25 + 0 0$1.0 do var i , areas , _areas ;
5077: GO 5079
5079: DISABLE
5080: LD_INT 0
5082: PPUSH
5083: PPUSH
5084: PPUSH
// begin _areas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
5085: LD_ADDR_VAR 0 3
5089: PUSH
5090: LD_INT 1
5092: PUSH
5093: LD_INT 2
5095: PUSH
5096: LD_INT 3
5098: PUSH
5099: LD_INT 4
5101: PUSH
5102: LD_INT 5
5104: PUSH
5105: LD_INT 6
5107: PUSH
5108: LD_INT 7
5110: PUSH
5111: LD_INT 8
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: ST_TO_ADDR
// areas := [ Between18 , Between21 , Between32 , Between43 , Between54 , Between65 , Between76 , Between87 ] ;
5124: LD_ADDR_VAR 0 2
5128: PUSH
5129: LD_INT 9
5131: PUSH
5132: LD_INT 10
5134: PUSH
5135: LD_INT 11
5137: PUSH
5138: LD_INT 12
5140: PUSH
5141: LD_INT 13
5143: PUSH
5144: LD_INT 14
5146: PUSH
5147: LD_INT 15
5149: PUSH
5150: LD_INT 16
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: ST_TO_ADDR
// for i := 1 to 8 do
5163: LD_ADDR_VAR 0 1
5167: PUSH
5168: DOUBLE
5169: LD_INT 1
5171: DEC
5172: ST_TO_ADDR
5173: LD_INT 8
5175: PUSH
5176: FOR_TO
5177: IFFALSE 5311
// begin if FilterUnitsInArea ( _areas [ i ] , [ [ f_not , [ f_side , 0 ] ] , [ f_type , unit_building ] ] ) and GetResourceArea ( areas [ i ] , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5179: LD_VAR 0 3
5183: PUSH
5184: LD_VAR 0 1
5188: ARRAY
5189: PPUSH
5190: LD_INT 3
5192: PUSH
5193: LD_INT 22
5195: PUSH
5196: LD_INT 0
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: PUSH
5207: LD_INT 21
5209: PUSH
5210: LD_INT 3
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 70
5225: PUSH
5226: LD_VAR 0 2
5230: PUSH
5231: LD_VAR 0 1
5235: ARRAY
5236: PPUSH
5237: LD_INT 1
5239: PPUSH
5240: CALL_OW 287
5244: PUSH
5245: LD_INT 200
5247: PUSH
5248: LD_EXP 23
5252: MINUS
5253: PUSH
5254: LD_INT 50
5256: DIVREAL
5257: PUSH
5258: LD_INT 5
5260: MUL
5261: LESS
5262: AND
5263: IFFALSE 5309
// begin wait ( rand ( 0 0$2 , 0 0$6 ) ) ;
5265: LD_INT 70
5267: PPUSH
5268: LD_INT 210
5270: PPUSH
5271: CALL_OW 12
5275: PPUSH
5276: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , areas [ i ] , true ) ;
5280: LD_INT 2
5282: PPUSH
5283: LD_INT 5
5285: PPUSH
5286: CALL_OW 12
5290: PPUSH
5291: LD_VAR 0 2
5295: PUSH
5296: LD_VAR 0 1
5300: ARRAY
5301: PPUSH
5302: LD_INT 1
5304: PPUSH
5305: CALL_OW 55
// end ; end ;
5309: GO 5176
5311: POP
5312: POP
// if GetResourceArea ( Center , mat_cans ) < ( ( 700 - shipments_density ) / 25 * 5 ) then
5313: LD_INT 17
5315: PPUSH
5316: LD_INT 1
5318: PPUSH
5319: CALL_OW 287
5323: PUSH
5324: LD_INT 700
5326: PUSH
5327: LD_EXP 23
5331: MINUS
5332: PUSH
5333: LD_INT 25
5335: DIVREAL
5336: PUSH
5337: LD_INT 5
5339: MUL
5340: LESS
5341: IFFALSE 5356
// CreateCratesArea ( 5 , Center , true ) ;
5343: LD_INT 5
5345: PPUSH
5346: LD_INT 17
5348: PPUSH
5349: LD_INT 1
5351: PPUSH
5352: CALL_OW 55
// wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
5356: LD_INT 350
5358: PPUSH
5359: LD_INT 525
5361: PPUSH
5362: CALL_OW 12
5366: PPUSH
5367: CALL_OW 67
// CreateCratesAnyWhere ( rand ( 1 , 5 ) , true ) ;
5371: LD_INT 1
5373: PPUSH
5374: LD_INT 5
5376: PPUSH
5377: CALL_OW 12
5381: PPUSH
5382: LD_INT 1
5384: PPUSH
5385: CALL_OW 57
// enable ;
5389: ENABLE
// end ;
5390: PPOPN 3
5392: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5393: GO 5395
5395: DISABLE
5396: LD_INT 0
5398: PPUSH
5399: PPUSH
// begin case tick of 1 .. 1 1$0 :
5400: LD_OWVAR 1
5404: PUSH
5405: LD_INT 1
5407: DOUBLE
5408: GREATEREQUAL
5409: IFFALSE 5417
5411: LD_INT 2100
5413: DOUBLE
5414: LESSEQUAL
5415: IFTRUE 5419
5417: GO 5447
5419: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5420: LD_EXP 23
5424: PUSH
5425: LD_INT 100
5427: DIVREAL
5428: PUSH
5429: LD_INT 525
5431: PPUSH
5432: LD_INT 1050
5434: PPUSH
5435: CALL_OW 12
5439: MUL
5440: PPUSH
5441: CALL_OW 67
5445: GO 5749
5447: LD_INT 2100
5449: PUSH
5450: LD_INT 1
5452: PLUS
5453: DOUBLE
5454: GREATEREQUAL
5455: IFFALSE 5463
5457: LD_INT 10500
5459: DOUBLE
5460: LESSEQUAL
5461: IFTRUE 5465
5463: GO 5493
5465: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5466: LD_EXP 23
5470: PUSH
5471: LD_INT 100
5473: DIVREAL
5474: PUSH
5475: LD_INT 1050
5477: PPUSH
5478: LD_INT 1750
5480: PPUSH
5481: CALL_OW 12
5485: MUL
5486: PPUSH
5487: CALL_OW 67
5491: GO 5749
5493: LD_INT 10500
5495: PUSH
5496: LD_INT 1
5498: PLUS
5499: DOUBLE
5500: GREATEREQUAL
5501: IFFALSE 5509
5503: LD_INT 21000
5505: DOUBLE
5506: LESSEQUAL
5507: IFTRUE 5511
5509: GO 5539
5511: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5512: LD_EXP 23
5516: PUSH
5517: LD_INT 100
5519: DIVREAL
5520: PUSH
5521: LD_INT 1750
5523: PPUSH
5524: LD_INT 2100
5526: PPUSH
5527: CALL_OW 12
5531: MUL
5532: PPUSH
5533: CALL_OW 67
5537: GO 5749
5539: LD_INT 21000
5541: PUSH
5542: LD_INT 1
5544: PLUS
5545: DOUBLE
5546: GREATEREQUAL
5547: IFFALSE 5555
5549: LD_INT 42000
5551: DOUBLE
5552: LESSEQUAL
5553: IFTRUE 5557
5555: GO 5585
5557: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5558: LD_EXP 23
5562: PUSH
5563: LD_INT 100
5565: DIVREAL
5566: PUSH
5567: LD_INT 2100
5569: PPUSH
5570: LD_INT 2275
5572: PPUSH
5573: CALL_OW 12
5577: MUL
5578: PPUSH
5579: CALL_OW 67
5583: GO 5749
5585: LD_INT 42000
5587: PUSH
5588: LD_INT 1
5590: PLUS
5591: DOUBLE
5592: GREATEREQUAL
5593: IFFALSE 5601
5595: LD_INT 63000
5597: DOUBLE
5598: LESSEQUAL
5599: IFTRUE 5603
5601: GO 5631
5603: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5604: LD_EXP 23
5608: PUSH
5609: LD_INT 100
5611: DIVREAL
5612: PUSH
5613: LD_INT 2275
5615: PPUSH
5616: LD_INT 2450
5618: PPUSH
5619: CALL_OW 12
5623: MUL
5624: PPUSH
5625: CALL_OW 67
5629: GO 5749
5631: LD_INT 63000
5633: PUSH
5634: LD_INT 1
5636: PLUS
5637: DOUBLE
5638: GREATEREQUAL
5639: IFFALSE 5647
5641: LD_INT 105000
5643: DOUBLE
5644: LESSEQUAL
5645: IFTRUE 5649
5647: GO 5677
5649: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5650: LD_EXP 23
5654: PUSH
5655: LD_INT 100
5657: DIVREAL
5658: PUSH
5659: LD_INT 2450
5661: PPUSH
5662: LD_INT 2800
5664: PPUSH
5665: CALL_OW 12
5669: MUL
5670: PPUSH
5671: CALL_OW 67
5675: GO 5749
5677: LD_INT 105000
5679: PUSH
5680: LD_INT 1
5682: PLUS
5683: DOUBLE
5684: GREATEREQUAL
5685: IFFALSE 5693
5687: LD_INT 630000
5689: DOUBLE
5690: LESSEQUAL
5691: IFTRUE 5695
5693: GO 5723
5695: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5696: LD_EXP 23
5700: PUSH
5701: LD_INT 100
5703: DIVREAL
5704: PUSH
5705: LD_INT 2800
5707: PPUSH
5708: LD_INT 3500
5710: PPUSH
5711: CALL_OW 12
5715: MUL
5716: PPUSH
5717: CALL_OW 67
5721: GO 5749
5723: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5724: LD_EXP 23
5728: PUSH
5729: LD_INT 100
5731: DIVREAL
5732: PUSH
5733: LD_INT 3500
5735: PPUSH
5736: LD_INT 3850
5738: PPUSH
5739: CALL_OW 12
5743: MUL
5744: PPUSH
5745: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5749: LD_ADDR_VAR 0 2
5753: PUSH
5754: LD_INT 3
5756: PPUSH
5757: LD_INT 5
5759: PPUSH
5760: CALL_OW 12
5764: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5765: LD_ADDR_VAR 0 1
5769: PUSH
5770: LD_EXP 34
5774: PUSH
5775: LD_INT 0
5777: PUSH
5778: EMPTY
5779: LIST
5780: DIFF
5781: PUSH
5782: FOR_IN
5783: IFFALSE 5832
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5785: LD_VAR 0 2
5789: PPUSH
5790: LD_EXP 39
5794: PUSH
5795: LD_VAR 0 1
5799: ARRAY
5800: PUSH
5801: LD_INT 1
5803: ARRAY
5804: PPUSH
5805: LD_EXP 39
5809: PUSH
5810: LD_VAR 0 1
5814: ARRAY
5815: PUSH
5816: LD_INT 2
5818: ARRAY
5819: PPUSH
5820: LD_INT 20
5822: PPUSH
5823: LD_INT 1
5825: PPUSH
5826: CALL_OW 56
5830: GO 5782
5832: POP
5833: POP
// enable ;
5834: ENABLE
// end ; end_of_file
5835: PPOPN 2
5837: END
// every 20 20$00 trigger apemanNumber do
5838: LD_EXP 46
5842: IFFALSE 5875
5844: GO 5846
5846: DISABLE
// begin enable ;
5847: ENABLE
// if apeLevel >= 8 then
5848: LD_EXP 51
5852: PUSH
5853: LD_INT 8
5855: GREATEREQUAL
5856: IFFALSE 5861
// disable else
5858: DISABLE
5859: GO 5875
// apeLevel := apeLevel + 1 ;
5861: LD_ADDR_EXP 51
5865: PUSH
5866: LD_EXP 51
5870: PUSH
5871: LD_INT 1
5873: PLUS
5874: ST_TO_ADDR
// end ;
5875: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5876: LD_EXP 46
5880: PUSH
5881: LD_EXP 47
5885: LESS
5886: IFFALSE 6026
5888: GO 5890
5890: DISABLE
5891: LD_INT 0
5893: PPUSH
5894: PPUSH
5895: PPUSH
5896: PPUSH
// begin enable ;
5897: ENABLE
// for i := 1 to apemanPos do
5898: LD_ADDR_VAR 0 1
5902: PUSH
5903: DOUBLE
5904: LD_INT 1
5906: DEC
5907: ST_TO_ADDR
5908: LD_EXP 49
5912: PUSH
5913: FOR_TO
5914: IFFALSE 6024
// begin if apemanPlayerCount [ i ] then
5916: LD_EXP 50
5920: PUSH
5921: LD_VAR 0 1
5925: ARRAY
5926: IFFALSE 6022
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5928: LD_EXP 50
5932: PUSH
5933: LD_VAR 0 1
5937: ARRAY
5938: PUSH
5939: LD_EXP 49
5943: PUSH
5944: LD_VAR 0 1
5948: ARRAY
5949: GREATER
5950: IFFALSE 6022
// begin ape := PrepareApeman ;
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: CALL 6545 0 0
5961: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5962: LD_VAR 0 2
5966: PPUSH
5967: LD_EXP 52
5971: PUSH
5972: LD_VAR 0 1
5976: ARRAY
5977: PPUSH
5978: LD_INT 0
5980: PPUSH
5981: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5985: LD_ADDR_EXP 49
5989: PUSH
5990: LD_EXP 49
5994: PPUSH
5995: LD_VAR 0 1
5999: PPUSH
6000: LD_EXP 49
6004: PUSH
6005: LD_VAR 0 1
6009: ARRAY
6010: PUSH
6011: LD_VAR 0 2
6015: UNION
6016: PPUSH
6017: CALL_OW 1
6021: ST_TO_ADDR
// end ; end ; end ;
6022: GO 5913
6024: POP
6025: POP
// end ;
6026: PPOPN 4
6028: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6029: LD_INT 0
6031: PPUSH
6032: PPUSH
6033: PPUSH
6034: PPUSH
6035: PPUSH
6036: PPUSH
6037: PPUSH
// playersAmount := 0 ;
6038: LD_ADDR_VAR 0 3
6042: PUSH
6043: LD_INT 0
6045: ST_TO_ADDR
// _apeAreas := [ Between18 , Between21 , Between32 , Between43 , Between54 , Between65 , Between76 , Between87 ] ;
6046: LD_ADDR_VAR 0 7
6050: PUSH
6051: LD_INT 9
6053: PUSH
6054: LD_INT 10
6056: PUSH
6057: LD_INT 11
6059: PUSH
6060: LD_INT 12
6062: PUSH
6063: LD_INT 13
6065: PUSH
6066: LD_INT 14
6068: PUSH
6069: LD_INT 15
6071: PUSH
6072: LD_INT 16
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6085: LD_ADDR_EXP 52
6089: PUSH
6090: LD_INT 0
6092: PUSH
6093: LD_INT 0
6095: PUSH
6096: LD_INT 0
6098: PUSH
6099: LD_INT 0
6101: PUSH
6102: LD_INT 0
6104: PUSH
6105: LD_INT 0
6107: PUSH
6108: LD_INT 0
6110: PUSH
6111: LD_INT 0
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: ST_TO_ADDR
// for j = 1 to Side_Positions do
6124: LD_ADDR_VAR 0 4
6128: PUSH
6129: DOUBLE
6130: LD_INT 1
6132: DEC
6133: ST_TO_ADDR
6134: LD_EXP 34
6138: PUSH
6139: FOR_TO
6140: IFFALSE 6207
// if Side_Positions [ j ] then
6142: LD_EXP 34
6146: PUSH
6147: LD_VAR 0 4
6151: ARRAY
6152: IFFALSE 6205
// begin playersAmount := playersAmount + 1 ;
6154: LD_ADDR_VAR 0 3
6158: PUSH
6159: LD_VAR 0 3
6163: PUSH
6164: LD_INT 1
6166: PLUS
6167: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6168: LD_ADDR_EXP 52
6172: PUSH
6173: LD_EXP 52
6177: PPUSH
6178: LD_VAR 0 4
6182: PPUSH
6183: LD_VAR 0 7
6187: PUSH
6188: LD_EXP 34
6192: PUSH
6193: LD_VAR 0 4
6197: ARRAY
6198: ARRAY
6199: PPUSH
6200: CALL_OW 1
6204: ST_TO_ADDR
// end ;
6205: GO 6139
6207: POP
6208: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6209: LD_ADDR_EXP 48
6213: PUSH
6214: LD_INT 3
6216: PUSH
6217: LD_EXP 25
6221: MUL
6222: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6223: LD_ADDR_EXP 46
6227: PUSH
6228: LD_VAR 0 3
6232: PUSH
6233: LD_EXP 48
6237: MUL
6238: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6239: LD_ADDR_EXP 47
6243: PUSH
6244: LD_EXP 46
6248: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6249: LD_ADDR_EXP 49
6253: PUSH
6254: LD_INT 0
6256: PUSH
6257: LD_INT 0
6259: PUSH
6260: LD_INT 0
6262: PUSH
6263: LD_INT 0
6265: PUSH
6266: LD_INT 0
6268: PUSH
6269: LD_INT 0
6271: PUSH
6272: LD_INT 0
6274: PUSH
6275: LD_INT 0
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6288: LD_ADDR_EXP 50
6292: PUSH
6293: LD_INT 0
6295: PUSH
6296: LD_INT 0
6298: PUSH
6299: LD_INT 0
6301: PUSH
6302: LD_INT 0
6304: PUSH
6305: LD_INT 0
6307: PUSH
6308: LD_INT 0
6310: PUSH
6311: LD_INT 0
6313: PUSH
6314: LD_INT 0
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: ST_TO_ADDR
// apeLevel := 1 ;
6327: LD_ADDR_EXP 51
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// if not apemanNumber then
6335: LD_EXP 46
6339: NOT
6340: IFFALSE 6344
// exit ;
6342: GO 6540
// for i := 1 to apemanPerPlayer do
6344: LD_ADDR_VAR 0 2
6348: PUSH
6349: DOUBLE
6350: LD_INT 1
6352: DEC
6353: ST_TO_ADDR
6354: LD_EXP 48
6358: PUSH
6359: FOR_TO
6360: IFFALSE 6538
// begin for j := 1 to Side_Positions do
6362: LD_ADDR_VAR 0 4
6366: PUSH
6367: DOUBLE
6368: LD_INT 1
6370: DEC
6371: ST_TO_ADDR
6372: LD_EXP 34
6376: PUSH
6377: FOR_TO
6378: IFFALSE 6534
// if Side_Positions [ j ] then
6380: LD_EXP 34
6384: PUSH
6385: LD_VAR 0 4
6389: ARRAY
6390: IFFALSE 6532
// begin pos := Side_Positions [ j ] ;
6392: LD_ADDR_VAR 0 6
6396: PUSH
6397: LD_EXP 34
6401: PUSH
6402: LD_VAR 0 4
6406: ARRAY
6407: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6408: LD_ADDR_EXP 50
6412: PUSH
6413: LD_EXP 50
6417: PPUSH
6418: LD_VAR 0 4
6422: PPUSH
6423: LD_EXP 50
6427: PUSH
6428: LD_VAR 0 4
6432: ARRAY
6433: PUSH
6434: LD_INT 1
6436: PLUS
6437: PPUSH
6438: CALL_OW 1
6442: ST_TO_ADDR
// ape := PrepareApeman ;
6443: LD_ADDR_VAR 0 5
6447: PUSH
6448: CALL 6545 0 0
6452: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6453: LD_ADDR_EXP 49
6457: PUSH
6458: LD_EXP 49
6462: PPUSH
6463: LD_VAR 0 4
6467: PPUSH
6468: LD_EXP 49
6472: PUSH
6473: LD_VAR 0 4
6477: ARRAY
6478: PPUSH
6479: LD_EXP 49
6483: PUSH
6484: LD_VAR 0 4
6488: ARRAY
6489: PUSH
6490: LD_INT 1
6492: PLUS
6493: PPUSH
6494: LD_VAR 0 5
6498: PPUSH
6499: CALL_OW 1
6503: PPUSH
6504: CALL_OW 1
6508: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6509: LD_VAR 0 5
6513: PPUSH
6514: LD_EXP 52
6518: PUSH
6519: LD_VAR 0 4
6523: ARRAY
6524: PPUSH
6525: LD_INT 0
6527: PPUSH
6528: CALL_OW 49
// end ;
6532: GO 6377
6534: POP
6535: POP
// end ;
6536: GO 6359
6538: POP
6539: POP
// end ;
6540: LD_VAR 0 1
6544: RET
// export function PrepareApeman ; var bonus ; begin
6545: LD_INT 0
6547: PPUSH
6548: PPUSH
// uc_side := 0 ;
6549: LD_ADDR_OWVAR 20
6553: PUSH
6554: LD_INT 0
6556: ST_TO_ADDR
// uc_nation := 0 ;
6557: LD_ADDR_OWVAR 21
6561: PUSH
6562: LD_INT 0
6564: ST_TO_ADDR
// InitHc ;
6565: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6569: LD_ADDR_VAR 0 2
6573: PUSH
6574: LD_INT 1
6576: NEG
6577: PUSH
6578: LD_INT 0
6580: PUSH
6581: LD_INT 1
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 25
6591: PUSH
6592: LD_INT 12
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PPUSH
6599: CALL_OW 69
6603: PUSH
6604: LD_INT 3
6606: MOD
6607: PUSH
6608: LD_INT 1
6610: PLUS
6611: ARRAY
6612: ST_TO_ADDR
// hc_class := class_apeman ;
6613: LD_ADDR_OWVAR 28
6617: PUSH
6618: LD_INT 12
6620: ST_TO_ADDR
// hc_gallery :=  ;
6621: LD_ADDR_OWVAR 33
6625: PUSH
6626: LD_STRING 
6628: ST_TO_ADDR
// hc_name :=  ;
6629: LD_ADDR_OWVAR 26
6633: PUSH
6634: LD_STRING 
6636: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6637: LD_ADDR_OWVAR 31
6641: PUSH
6642: LD_EXP 51
6646: PUSH
6647: LD_VAR 0 2
6651: PLUS
6652: PUSH
6653: LD_EXP 51
6657: PUSH
6658: LD_VAR 0 2
6662: PLUS
6663: PUSH
6664: LD_EXP 51
6668: PUSH
6669: LD_VAR 0 2
6673: PLUS
6674: PUSH
6675: LD_EXP 51
6679: PUSH
6680: LD_VAR 0 2
6684: PLUS
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6692: LD_ADDR_OWVAR 35
6696: PUSH
6697: LD_INT 10
6699: PUSH
6700: LD_VAR 0 2
6704: MUL
6705: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6706: LD_ADDR_OWVAR 29
6710: PUSH
6711: LD_INT 12
6713: PUSH
6714: LD_INT 12
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: ST_TO_ADDR
// result := CreateHuman ;
6721: LD_ADDR_VAR 0 1
6725: PUSH
6726: CALL_OW 44
6730: ST_TO_ADDR
// end ;
6731: LD_VAR 0 1
6735: RET
// export function ApeKilled ( ape ) ; var s , i ; begin
6736: LD_INT 0
6738: PPUSH
6739: PPUSH
6740: PPUSH
// if not ape then
6741: LD_VAR 0 1
6745: NOT
6746: IFFALSE 6750
// exit ;
6748: GO 6853
// for i = 1 to apemanPos do
6750: LD_ADDR_VAR 0 4
6754: PUSH
6755: DOUBLE
6756: LD_INT 1
6758: DEC
6759: ST_TO_ADDR
6760: LD_EXP 49
6764: PUSH
6765: FOR_TO
6766: IFFALSE 6800
// if ape in apemanPos [ i ] then
6768: LD_VAR 0 1
6772: PUSH
6773: LD_EXP 49
6777: PUSH
6778: LD_VAR 0 4
6782: ARRAY
6783: IN
6784: IFFALSE 6798
// begin s := i ;
6786: LD_ADDR_VAR 0 3
6790: PUSH
6791: LD_VAR 0 4
6795: ST_TO_ADDR
// break ;
6796: GO 6800
// end ;
6798: GO 6765
6800: POP
6801: POP
// apemanPos := Replace ( apemanPos , s , apemanPos [ s ] diff ape ) ;
6802: LD_ADDR_EXP 49
6806: PUSH
6807: LD_EXP 49
6811: PPUSH
6812: LD_VAR 0 3
6816: PPUSH
6817: LD_EXP 49
6821: PUSH
6822: LD_VAR 0 3
6826: ARRAY
6827: PUSH
6828: LD_VAR 0 1
6832: DIFF
6833: PPUSH
6834: CALL_OW 1
6838: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6839: LD_ADDR_EXP 46
6843: PUSH
6844: LD_EXP 46
6848: PUSH
6849: LD_INT 1
6851: MINUS
6852: ST_TO_ADDR
// end ; end_of_file
6853: LD_VAR 0 2
6857: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6858: LD_VAR 0 1
6862: PPUSH
6863: CALL_OW 266
6867: PUSH
6868: LD_INT 0
6870: PUSH
6871: LD_INT 1
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: IN
6878: IFFALSE 6903
// SetBName ( b , @ & GetSide ( b ) ) ;
6880: LD_VAR 0 1
6884: PPUSH
6885: LD_STRING @
6887: PUSH
6888: LD_VAR 0 1
6892: PPUSH
6893: CALL_OW 255
6897: STR
6898: PPUSH
6899: CALL_OW 500
// end ;
6903: PPOPN 2
6905: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6906: LD_VAR 0 1
6910: PPUSH
6911: CALL_OW 266
6915: PUSH
6916: LD_INT 0
6918: PUSH
6919: LD_INT 1
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: IN
6926: IFFALSE 6951
// SetBName ( b , @ & GetSide ( b ) ) ;
6928: LD_VAR 0 1
6932: PPUSH
6933: LD_STRING @
6935: PUSH
6936: LD_VAR 0 1
6940: PPUSH
6941: CALL_OW 255
6945: STR
6946: PPUSH
6947: CALL_OW 500
// end ;
6951: PPOPN 3
6953: END
// on VehicleConstructed ( veh , fac ) do var side ;
6954: LD_INT 0
6956: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6957: LD_VAR 0 1
6961: PPUSH
6962: CALL_OW 263
6966: PUSH
6967: LD_INT 5
6969: EQUAL
6970: IFFALSE 7112
// begin side := GetSide ( veh ) ;
6972: LD_ADDR_VAR 0 3
6976: PUSH
6977: LD_VAR 0 1
6981: PPUSH
6982: CALL_OW 255
6986: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6987: LD_ADDR_EXP 49
6991: PUSH
6992: LD_EXP 49
6996: PPUSH
6997: LD_VAR 0 3
7001: PPUSH
7002: LD_EXP 49
7006: PUSH
7007: LD_VAR 0 3
7011: ARRAY
7012: PPUSH
7013: LD_INT 52
7015: PUSH
7016: EMPTY
7017: LIST
7018: PPUSH
7019: CALL_OW 72
7023: PUSH
7024: LD_INT 22
7026: PUSH
7027: LD_VAR 0 3
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: LD_INT 2
7038: PUSH
7039: LD_INT 33
7041: PUSH
7042: LD_INT 5
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: LD_INT 25
7051: PUSH
7052: LD_INT 12
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PUSH
7059: LD_INT 25
7061: PUSH
7062: LD_INT 15
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PUSH
7069: LD_INT 25
7071: PUSH
7072: LD_INT 16
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: LD_INT 25
7081: PUSH
7082: LD_INT 17
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PPUSH
7101: CALL_OW 69
7105: UNION
7106: PPUSH
7107: CALL_OW 1
7111: ST_TO_ADDR
// end ; end ;
7112: PPOPN 3
7114: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7115: LD_INT 0
7117: PPUSH
7118: PPUSH
7119: PPUSH
7120: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7121: LD_VAR 0 1
7125: PPUSH
7126: CALL_OW 257
7130: PUSH
7131: LD_INT 12
7133: PUSH
7134: LD_INT 15
7136: PUSH
7137: LD_INT 17
7139: PUSH
7140: LD_INT 16
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: IN
7149: PUSH
7150: LD_VAR 0 1
7154: PPUSH
7155: CALL_OW 263
7159: PUSH
7160: LD_INT 5
7162: EQUAL
7163: OR
7164: IFFALSE 7175
// ApeKilled ( j ) ;
7166: LD_VAR 0 1
7170: PPUSH
7171: CALL 6736 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7175: LD_VAR 0 1
7179: PPUSH
7180: CALL_OW 266
7184: PUSH
7185: LD_INT 0
7187: PUSH
7188: LD_INT 1
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: IN
7195: IFFALSE 7277
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7197: LD_ADDR_VAR 0 4
7201: PUSH
7202: LD_EXP 34
7206: PUSH
7207: LD_VAR 0 1
7211: PPUSH
7212: CALL_OW 255
7216: ARRAY
7217: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7218: LD_ADDR_VAR 0 2
7222: PUSH
7223: LD_EXP 39
7227: PUSH
7228: LD_VAR 0 4
7232: ARRAY
7233: PUSH
7234: LD_INT 1
7236: ARRAY
7237: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7238: LD_ADDR_VAR 0 3
7242: PUSH
7243: LD_EXP 39
7247: PUSH
7248: LD_VAR 0 4
7252: ARRAY
7253: PUSH
7254: LD_INT 2
7256: ARRAY
7257: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7258: LD_VAR 0 2
7262: PPUSH
7263: LD_VAR 0 3
7267: PPUSH
7268: CALL_OW 420
7272: PPUSH
7273: CALL_OW 419
// end ; end ;
7277: PPOPN 5
7279: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7280: LD_VAR 0 1
7284: PPUSH
7285: LD_VAR 0 2
7289: PPUSH
7290: LD_VAR 0 3
7294: PPUSH
7295: LD_OWVAR 2
7299: PPUSH
7300: CALL 8237 0 4
7304: PPOPN 3
7306: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7307: LD_INT 0
7309: PPUSH
7310: PPUSH
// for un in battle_flags_id do
7311: LD_ADDR_VAR 0 2
7315: PUSH
7316: LD_EXP 44
7320: PUSH
7321: FOR_IN
7322: IFFALSE 7397
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7324: LD_VAR 0 2
7328: PPUSH
7329: LD_INT 1
7331: PUSH
7332: LD_LOC 9
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: LD_INT 2
7343: PUSH
7344: LD_LOC 9
7348: PUSH
7349: LD_INT 2
7351: DIV
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: PUSH
7357: LD_INT 3
7359: PUSH
7360: LD_LOC 9
7364: PUSH
7365: LD_INT 5
7367: DIV
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: PUSH
7373: LD_INT 20
7375: PUSH
7376: LD_LOC 9
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: PPUSH
7391: CALL_OW 423
7395: GO 7321
7397: POP
7398: POP
// end ;
7399: LD_VAR 0 1
7403: RET
// every 1 do var un ;
7404: GO 7406
7406: DISABLE
7407: LD_INT 0
7409: PPUSH
// begin if not def_morale_flags then
7410: LD_EXP 9
7414: NOT
7415: IFFALSE 7419
// exit ;
7417: GO 7496
// if not morale_decreasing_time then
7419: LD_EXP 24
7423: NOT
7424: IFFALSE 7428
// exit ;
7426: GO 7496
// strength = 100 ;
7428: LD_ADDR_LOC 9
7432: PUSH
7433: LD_INT 100
7435: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7436: LD_EXP 24
7440: PPUSH
7441: CALL_OW 67
// strength := strength - 1 ;
7445: LD_ADDR_LOC 9
7449: PUSH
7450: LD_LOC 9
7454: PUSH
7455: LD_INT 1
7457: MINUS
7458: ST_TO_ADDR
// Update_Flags ;
7459: CALL 7307 0 0
// until not strength ;
7463: LD_LOC 9
7467: NOT
7468: IFFALSE 7436
// for un in battle_flags_id do
7470: LD_ADDR_VAR 0 1
7474: PUSH
7475: LD_EXP 44
7479: PUSH
7480: FOR_IN
7481: IFFALSE 7494
// KillBattleFlag ( un ) ;
7483: LD_VAR 0 1
7487: PPUSH
7488: CALL_OW 419
7492: GO 7480
7494: POP
7495: POP
// end ; end_of_file
7496: PPOPN 1
7498: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7499: LD_INT 0
7501: PPUSH
7502: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7503: LD_ADDR_VAR 0 2
7507: PUSH
7508: LD_STRING #Multi1x1-Time
7510: PUSH
7511: LD_OWVAR 1
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: ST_TO_ADDR
// if WaitServerStrings then
7520: LD_EXP 54
7524: IFFALSE 7542
// AllStrings = AllStrings ^ WaitServerStrings ;
7526: LD_ADDR_VAR 0 2
7530: PUSH
7531: LD_VAR 0 2
7535: PUSH
7536: LD_EXP 54
7540: ADD
7541: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7542: LD_INT 0
7544: PUSH
7545: LD_EXP 29
7549: PUSH
7550: LD_OWVAR 1
7554: MINUS
7555: LESSEQUAL
7556: IFFALSE 7587
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7558: LD_ADDR_VAR 0 2
7562: PUSH
7563: LD_VAR 0 2
7567: PUSH
7568: LD_STRING #allowedsibbomb
7570: PUSH
7571: LD_EXP 29
7575: PUSH
7576: LD_OWVAR 1
7580: MINUS
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: ADD
7586: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7587: LD_INT 0
7589: PUSH
7590: LD_EXP 57
7594: PUSH
7595: LD_OWVAR 1
7599: MINUS
7600: LESSEQUAL
7601: IFFALSE 7632
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7603: LD_ADDR_VAR 0 2
7607: PUSH
7608: LD_VAR 0 2
7612: PUSH
7613: LD_STRING #builduptime
7615: PUSH
7616: LD_EXP 57
7620: PUSH
7621: LD_OWVAR 1
7625: MINUS
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: ADD
7631: ST_TO_ADDR
// if ( ExtraStrings ) then
7632: LD_EXP 53
7636: IFFALSE 7658
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7638: LD_ADDR_VAR 0 2
7642: PUSH
7643: LD_VAR 0 2
7647: PUSH
7648: LD_STRING 
7650: ADD
7651: PUSH
7652: LD_EXP 53
7656: ADD
7657: ST_TO_ADDR
// Display_Strings := AllStrings ;
7658: LD_ADDR_OWVAR 47
7662: PUSH
7663: LD_VAR 0 2
7667: ST_TO_ADDR
// end ;
7668: LD_VAR 0 1
7672: RET
// every 0 0$1 do
7673: GO 7675
7675: DISABLE
// begin ShowTimer ;
7676: CALL 7499 0 0
// enable ;
7680: ENABLE
// end ; end_of_file
7681: END
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
7682: LD_INT 0
7684: PPUSH
7685: PPUSH
7686: PPUSH
7687: PPUSH
7688: PPUSH
7689: PPUSH
7690: PPUSH
7691: PPUSH
7692: PPUSH
// for i := 1 to 8 do
7693: LD_ADDR_VAR 0 2
7697: PUSH
7698: DOUBLE
7699: LD_INT 1
7701: DEC
7702: ST_TO_ADDR
7703: LD_INT 8
7705: PUSH
7706: FOR_TO
7707: IFFALSE 8091
// begin if Side_Positions [ i ] then
7709: LD_EXP 34
7713: PUSH
7714: LD_VAR 0 2
7718: ARRAY
7719: IFFALSE 8089
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
7721: LD_ADDR_VAR 0 7
7725: PUSH
7726: LD_INT 22
7728: PUSH
7729: LD_VAR 0 2
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PUSH
7738: LD_INT 21
7740: PUSH
7741: LD_INT 1
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: PPUSH
7752: CALL_OW 69
7756: PUSH
7757: LD_INT 0
7759: PLUS
7760: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7761: LD_ADDR_VAR 0 9
7765: PUSH
7766: LD_INT 22
7768: PUSH
7769: LD_VAR 0 2
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: LD_INT 2
7780: PUSH
7781: LD_INT 30
7783: PUSH
7784: LD_INT 0
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 30
7793: PUSH
7794: LD_INT 1
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: LIST
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PPUSH
7810: CALL_OW 69
7814: ST_TO_ADDR
// crates := 0 ;
7815: LD_ADDR_VAR 0 4
7819: PUSH
7820: LD_INT 0
7822: ST_TO_ADDR
// oil := 0 ;
7823: LD_ADDR_VAR 0 5
7827: PUSH
7828: LD_INT 0
7830: ST_TO_ADDR
// sib := 0 ;
7831: LD_ADDR_VAR 0 6
7835: PUSH
7836: LD_INT 0
7838: ST_TO_ADDR
// if bases then
7839: LD_VAR 0 9
7843: IFFALSE 7949
// begin for j in bases do
7845: LD_ADDR_VAR 0 3
7849: PUSH
7850: LD_VAR 0 9
7854: PUSH
7855: FOR_IN
7856: IFFALSE 7947
// begin base := GetBase ( j ) ;
7858: LD_ADDR_VAR 0 8
7862: PUSH
7863: LD_VAR 0 3
7867: PPUSH
7868: CALL_OW 274
7872: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
7873: LD_ADDR_VAR 0 4
7877: PUSH
7878: LD_VAR 0 4
7882: PUSH
7883: LD_VAR 0 8
7887: PPUSH
7888: LD_INT 1
7890: PPUSH
7891: CALL_OW 275
7895: PLUS
7896: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
7897: LD_ADDR_VAR 0 5
7901: PUSH
7902: LD_VAR 0 5
7906: PUSH
7907: LD_VAR 0 8
7911: PPUSH
7912: LD_INT 2
7914: PPUSH
7915: CALL_OW 275
7919: PLUS
7920: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
7921: LD_ADDR_VAR 0 6
7925: PUSH
7926: LD_VAR 0 6
7930: PUSH
7931: LD_VAR 0 8
7935: PPUSH
7936: LD_INT 3
7938: PPUSH
7939: CALL_OW 275
7943: PLUS
7944: ST_TO_ADDR
// end ;
7945: GO 7855
7947: POP
7948: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
7949: LD_STRING setSpecText(
7951: PUSH
7952: LD_VAR 0 2
7956: STR
7957: PUSH
7958: LD_STRING ,
7960: STR
7961: PUSH
7962: LD_INT 2
7964: STR
7965: PUSH
7966: LD_STRING ,
7968: STR
7969: PUSH
7970: LD_VAR 0 4
7974: STR
7975: PUSH
7976: LD_STRING )
7978: STR
7979: PPUSH
7980: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
7984: LD_STRING setSpecText(
7986: PUSH
7987: LD_VAR 0 2
7991: STR
7992: PUSH
7993: LD_STRING ,
7995: STR
7996: PUSH
7997: LD_INT 3
7999: STR
8000: PUSH
8001: LD_STRING ,
8003: STR
8004: PUSH
8005: LD_VAR 0 5
8009: STR
8010: PUSH
8011: LD_STRING )
8013: STR
8014: PPUSH
8015: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
8019: LD_STRING setSpecText(
8021: PUSH
8022: LD_VAR 0 2
8026: STR
8027: PUSH
8028: LD_STRING ,
8030: STR
8031: PUSH
8032: LD_INT 4
8034: STR
8035: PUSH
8036: LD_STRING ,
8038: STR
8039: PUSH
8040: LD_VAR 0 6
8044: STR
8045: PUSH
8046: LD_STRING )
8048: STR
8049: PPUSH
8050: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
8054: LD_STRING setSpecText(
8056: PUSH
8057: LD_VAR 0 2
8061: STR
8062: PUSH
8063: LD_STRING ,
8065: STR
8066: PUSH
8067: LD_INT 5
8069: STR
8070: PUSH
8071: LD_STRING ,
8073: STR
8074: PUSH
8075: LD_VAR 0 7
8079: STR
8080: PUSH
8081: LD_STRING )
8083: STR
8084: PPUSH
8085: CALL_OW 559
// end ; end ;
8089: GO 7706
8091: POP
8092: POP
// end ;
8093: LD_VAR 0 1
8097: RET
// every 0 0$1 do
8098: GO 8100
8100: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
8101: LD_STRING setSpecLogoNumber(
8103: PUSH
8104: LD_INT 2
8106: STR
8107: PUSH
8108: LD_STRING ,
8110: STR
8111: PUSH
8112: LD_INT 1
8114: STR
8115: PUSH
8116: LD_STRING )
8118: STR
8119: PPUSH
8120: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
8124: LD_STRING setSpecLogoNumber(
8126: PUSH
8127: LD_INT 3
8129: STR
8130: PUSH
8131: LD_STRING ,
8133: STR
8134: PUSH
8135: LD_INT 2
8137: STR
8138: PUSH
8139: LD_STRING )
8141: STR
8142: PPUSH
8143: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
8147: LD_STRING setSpecLogoNumber(
8149: PUSH
8150: LD_INT 4
8152: STR
8153: PUSH
8154: LD_STRING ,
8156: STR
8157: PUSH
8158: LD_INT 3
8160: STR
8161: PUSH
8162: LD_STRING )
8164: STR
8165: PPUSH
8166: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
8170: LD_STRING setSpecLogoNumber(
8172: PUSH
8173: LD_INT 5
8175: STR
8176: PUSH
8177: LD_STRING ,
8179: STR
8180: PUSH
8181: LD_INT 4
8183: STR
8184: PUSH
8185: LD_STRING )
8187: STR
8188: PPUSH
8189: CALL_OW 559
// end ;
8193: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
8194: LD_INT 2
8196: PUSH
8197: LD_INT 30
8199: PUSH
8200: LD_INT 0
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: LD_INT 30
8209: PUSH
8210: LD_INT 1
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: PPUSH
8222: CALL_OW 69
8226: IFFALSE 8236
8228: GO 8230
8230: DISABLE
// begin enable ;
8231: ENABLE
// UpdateSpectatorBar ;
8232: CALL 7682 0 0
// end ; end_of_file
8236: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8237: LD_INT 0
8239: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8240: LD_VAR 0 1
8244: PPUSH
8245: CALL_OW 255
8249: PUSH
8250: LD_VAR 0 4
8254: EQUAL
8255: IFFALSE 8274
// begin SetAchievement ( ACH_RAD ) ;
8257: LD_STRING ACH_RAD
8259: PPUSH
8260: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8264: LD_STRING ACH_NL
8266: PPUSH
8267: LD_INT 1
8269: PPUSH
8270: CALL_OW 564
// end end ;
8274: LD_VAR 0 5
8278: RET
// export function SA_Win ( side ) ; begin
8279: LD_INT 0
8281: PPUSH
// case side of 1 :
8282: LD_VAR 0 1
8286: PUSH
8287: LD_INT 1
8289: DOUBLE
8290: EQUAL
8291: IFTRUE 8295
8293: GO 8308
8295: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8296: LD_STRING ACH_AH
8298: PPUSH
8299: LD_INT 1
8301: PPUSH
8302: CALL_OW 564
8306: GO 8471
8308: LD_INT 2
8310: DOUBLE
8311: EQUAL
8312: IFTRUE 8316
8314: GO 8329
8316: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8317: LD_STRING ACH_E
8319: PPUSH
8320: LD_INT 1
8322: PPUSH
8323: CALL_OW 564
8327: GO 8471
8329: LD_INT 3
8331: DOUBLE
8332: EQUAL
8333: IFTRUE 8337
8335: GO 8350
8337: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8338: LD_STRING ACH_OOL
8340: PPUSH
8341: LD_INT 1
8343: PPUSH
8344: CALL_OW 564
8348: GO 8471
8350: LD_INT 1
8352: PUSH
8353: LD_INT 2
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: DOUBLE
8360: EQUAL
8361: IFTRUE 8365
8363: GO 8390
8365: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8366: LD_STRING ACH_AH
8368: PPUSH
8369: LD_REAL  5.00000000000000E-0001
8372: PPUSH
8373: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8377: LD_STRING ACH_E
8379: PPUSH
8380: LD_REAL  5.00000000000000E-0001
8383: PPUSH
8384: CALL_OW 564
// end ; [ 2 , 3 ] :
8388: GO 8471
8390: LD_INT 2
8392: PUSH
8393: LD_INT 3
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: DOUBLE
8400: EQUAL
8401: IFTRUE 8405
8403: GO 8430
8405: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8406: LD_STRING ACH_OOL
8408: PPUSH
8409: LD_REAL  5.00000000000000E-0001
8412: PPUSH
8413: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8417: LD_STRING ACH_E
8419: PPUSH
8420: LD_REAL  5.00000000000000E-0001
8423: PPUSH
8424: CALL_OW 564
// end ; [ 3 , 1 ] :
8428: GO 8471
8430: LD_INT 3
8432: PUSH
8433: LD_INT 1
8435: PUSH
8436: EMPTY
8437: LIST
8438: LIST
8439: DOUBLE
8440: EQUAL
8441: IFTRUE 8445
8443: GO 8470
8445: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8446: LD_STRING ACH_AH
8448: PPUSH
8449: LD_REAL  5.00000000000000E-0001
8452: PPUSH
8453: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8457: LD_STRING ACH_OOL
8459: PPUSH
8460: LD_REAL  5.00000000000000E-0001
8463: PPUSH
8464: CALL_OW 564
// end ; end ;
8468: GO 8471
8470: POP
// end ; end_of_file
8471: LD_VAR 0 2
8475: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8476: LD_INT 0
8478: PPUSH
8479: PPUSH
// enable ( 98 ) ;
8480: LD_INT 98
8482: ENABLE_MARKED
// GameEnded = false ;
8483: LD_ADDR_LOC 15
8487: PUSH
8488: LD_INT 0
8490: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8491: LD_ADDR_LOC 14
8495: PUSH
8496: LD_INT 0
8498: PUSH
8499: LD_INT 0
8501: PUSH
8502: LD_INT 0
8504: PUSH
8505: LD_INT 0
8507: PUSH
8508: LD_INT 0
8510: PUSH
8511: LD_INT 0
8513: PUSH
8514: LD_INT 0
8516: PUSH
8517: LD_INT 0
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: ST_TO_ADDR
// unfoged = false ;
8530: LD_ADDR_LOC 16
8534: PUSH
8535: LD_INT 0
8537: ST_TO_ADDR
// defeated_specs := [ ] ;
8538: LD_ADDR_LOC 17
8542: PUSH
8543: EMPTY
8544: ST_TO_ADDR
// for i = 1 to side_positions do
8545: LD_ADDR_VAR 0 2
8549: PUSH
8550: DOUBLE
8551: LD_INT 1
8553: DEC
8554: ST_TO_ADDR
8555: LD_EXP 34
8559: PUSH
8560: FOR_TO
8561: IFFALSE 8601
// if not side_positions [ i ] then
8563: LD_EXP 34
8567: PUSH
8568: LD_VAR 0 2
8572: ARRAY
8573: NOT
8574: IFFALSE 8599
// defeated = replace ( defeated , i , true ) ;
8576: LD_ADDR_LOC 14
8580: PUSH
8581: LD_LOC 14
8585: PPUSH
8586: LD_VAR 0 2
8590: PPUSH
8591: LD_INT 1
8593: PPUSH
8594: CALL_OW 1
8598: ST_TO_ADDR
8599: GO 8560
8601: POP
8602: POP
// end ;
8603: LD_VAR 0 1
8607: RET
// function CanWinLoose ; begin
8608: LD_INT 0
8610: PPUSH
// Result := true ;
8611: LD_ADDR_VAR 0 1
8615: PUSH
8616: LD_INT 1
8618: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8619: CALL_OW 518
8623: PUSH
8624: CALL_OW 519
8628: PUSH
8629: LD_INT 0
8631: GREATER
8632: AND
8633: IFFALSE 8643
// Result := false ;
8635: LD_ADDR_VAR 0 1
8639: PUSH
8640: LD_INT 0
8642: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8643: CALL_OW 531
8647: PUSH
8648: CALL_OW 519
8652: PUSH
8653: LD_INT 1
8655: GREATER
8656: AND
8657: IFFALSE 8667
// Result := false ;
8659: LD_ADDR_VAR 0 1
8663: PUSH
8664: LD_INT 0
8666: ST_TO_ADDR
// end ;
8667: LD_VAR 0 1
8671: RET
// export function HasPower ( i ) ; var k , h ; begin
8672: LD_INT 0
8674: PPUSH
8675: PPUSH
8676: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8677: LD_VAR 0 1
8681: PPUSH
8682: CALL_OW 108
8686: NOT
8687: PUSH
8688: LD_EXP 33
8692: PUSH
8693: LD_VAR 0 1
8697: ARRAY
8698: NOT
8699: AND
8700: PUSH
8701: LD_OWVAR 4
8705: AND
8706: IFFALSE 8718
// begin result = false ;
8708: LD_ADDR_VAR 0 2
8712: PUSH
8713: LD_INT 0
8715: ST_TO_ADDR
// end else
8716: GO 9013
// case def_win_rules of 0 :
8718: LD_EXP 30
8722: PUSH
8723: LD_INT 0
8725: DOUBLE
8726: EQUAL
8727: IFTRUE 8731
8729: GO 8894
8731: POP
// if def_people_respawning then
8732: LD_EXP 11
8736: IFFALSE 8827
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8738: LD_ADDR_VAR 0 2
8742: PUSH
8743: LD_INT 22
8745: PUSH
8746: LD_VAR 0 1
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: LD_INT 2
8757: PUSH
8758: LD_INT 21
8760: PUSH
8761: LD_INT 1
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: PUSH
8768: LD_INT 33
8770: PUSH
8771: LD_INT 3
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PUSH
8778: LD_INT 33
8780: PUSH
8781: LD_INT 5
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PUSH
8788: LD_INT 30
8790: PUSH
8791: LD_INT 0
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PUSH
8798: LD_INT 30
8800: PUSH
8801: LD_INT 1
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: PPUSH
8820: CALL_OW 69
8824: ST_TO_ADDR
8825: GO 8892
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8827: LD_ADDR_VAR 0 2
8831: PUSH
8832: LD_INT 22
8834: PUSH
8835: LD_VAR 0 1
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: PUSH
8844: LD_INT 2
8846: PUSH
8847: LD_INT 21
8849: PUSH
8850: LD_INT 1
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: PUSH
8857: LD_INT 33
8859: PUSH
8860: LD_INT 3
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: PUSH
8867: LD_INT 33
8869: PUSH
8870: LD_INT 5
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PPUSH
8887: CALL_OW 69
8891: ST_TO_ADDR
8892: GO 9013
8894: LD_INT 1
8896: DOUBLE
8897: EQUAL
8898: IFTRUE 8902
8900: GO 8941
8902: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8903: LD_ADDR_VAR 0 2
8907: PUSH
8908: LD_INT 22
8910: PUSH
8911: LD_VAR 0 1
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: PUSH
8920: LD_INT 21
8922: PUSH
8923: LD_INT 1
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: PPUSH
8934: CALL_OW 69
8938: ST_TO_ADDR
8939: GO 9013
8941: LD_INT 2
8943: DOUBLE
8944: EQUAL
8945: IFTRUE 8949
8947: GO 9012
8949: POP
// begin h = false ;
8950: LD_ADDR_VAR 0 4
8954: PUSH
8955: LD_INT 0
8957: ST_TO_ADDR
// for k in heroes [ i ] do
8958: LD_ADDR_VAR 0 3
8962: PUSH
8963: LD_EXP 45
8967: PUSH
8968: LD_VAR 0 1
8972: ARRAY
8973: PUSH
8974: FOR_IN
8975: IFFALSE 8998
// if IsLive ( k ) then
8977: LD_VAR 0 3
8981: PPUSH
8982: CALL_OW 300
8986: IFFALSE 8996
// h = true ;
8988: LD_ADDR_VAR 0 4
8992: PUSH
8993: LD_INT 1
8995: ST_TO_ADDR
8996: GO 8974
8998: POP
8999: POP
// Result := h ;
9000: LD_ADDR_VAR 0 2
9004: PUSH
9005: LD_VAR 0 4
9009: ST_TO_ADDR
// end ; end ;
9010: GO 9013
9012: POP
// end ;
9013: LD_VAR 0 2
9017: RET
// function AlliedSides ( i , j ) ; begin
9018: LD_INT 0
9020: PPUSH
// Result := false ;
9021: LD_ADDR_VAR 0 3
9025: PUSH
9026: LD_INT 0
9028: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
9029: LD_VAR 0 1
9033: PPUSH
9034: LD_VAR 0 2
9038: PPUSH
9039: CALL_OW 81
9043: PUSH
9044: LD_INT 1
9046: EQUAL
9047: PUSH
9048: LD_VAR 0 2
9052: PPUSH
9053: LD_VAR 0 1
9057: PPUSH
9058: CALL_OW 81
9062: PUSH
9063: LD_INT 1
9065: EQUAL
9066: AND
9067: PUSH
9068: LD_VAR 0 1
9072: PPUSH
9073: CALL_OW 83
9077: AND
9078: PUSH
9079: LD_VAR 0 2
9083: PPUSH
9084: CALL_OW 83
9088: AND
9089: IFFALSE 9099
// Result := true ;
9091: LD_ADDR_VAR 0 3
9095: PUSH
9096: LD_INT 1
9098: ST_TO_ADDR
// end ;
9099: LD_VAR 0 3
9103: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
9104: CALL 8608 0 0
9108: PUSH
9109: LD_LOC 15
9113: NOT
9114: AND
9115: IFFALSE 9131
9117: GO 9119
9119: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
9120: LD_ADDR_EXP 54
9124: PUSH
9125: LD_STRING #Player-Ended
9127: PUSH
9128: EMPTY
9129: LIST
9130: ST_TO_ADDR
9131: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
9132: CALL 8608 0 0
9136: PUSH
9137: LD_LOC 15
9141: AND
9142: IFFALSE 9151
9144: GO 9146
9146: DISABLE
// YouLostInMultiplayer ;
9147: CALL_OW 107
9151: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
9152: CALL 8608 0 0
9156: NOT
9157: PUSH
9158: CALL_OW 531
9162: NOT
9163: AND
9164: IFFALSE 9180
9166: GO 9168
9168: DISABLE
// WaitServerStrings = [ #server-wait ] ;
9169: LD_ADDR_EXP 54
9173: PUSH
9174: LD_STRING #server-wait
9176: PUSH
9177: EMPTY
9178: LIST
9179: ST_TO_ADDR
9180: END
// every 100 trigger IAmSpec do
9181: CALL_OW 531
9185: IFFALSE 9201
9187: GO 9189
9189: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
9190: LD_ADDR_EXP 54
9194: PUSH
9195: LD_STRING #Player-IAmSpec
9197: PUSH
9198: EMPTY
9199: LIST
9200: ST_TO_ADDR
9201: END
// every 100 trigger GameEnded and IAmSpec do
9202: LD_LOC 15
9206: PUSH
9207: CALL_OW 531
9211: AND
9212: IFFALSE 9221
9214: GO 9216
9216: DISABLE
// YouLostInMultiplayer ;
9217: CALL_OW 107
9221: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
9222: CALL 8608 0 0
9226: PUSH
9227: LD_LOC 15
9231: NOT
9232: AND
9233: IFFALSE 9249
9235: GO 9237
9237: DISABLE
// WaitServerStrings = [ $player-win ] ;
9238: LD_ADDR_EXP 54
9242: PUSH
9243: LD_STRING $player-win
9245: PUSH
9246: EMPTY
9247: LIST
9248: ST_TO_ADDR
9249: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
9250: CALL 8608 0 0
9254: PUSH
9255: LD_LOC 15
9259: AND
9260: IFFALSE 9284
9262: GO 9264
9264: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
9265: LD_EXP 35
9269: PUSH
9270: LD_OWVAR 7
9274: ARRAY
9275: PPUSH
9276: CALL 8279 0 1
// YouWinInMultiplayer ;
9280: CALL_OW 106
// end ;
9284: END
// every 100 trigger isEditor marked 401 do
9285: LD_OWVAR 84
9289: IFFALSE 9305
9291: GO 9293
9293: DISABLE
// Debug_Strings = [ You won ] ;
9294: LD_ADDR_OWVAR 48
9298: PUSH
9299: LD_STRING You won
9301: PUSH
9302: EMPTY
9303: LIST
9304: ST_TO_ADDR
9305: END
// every 100 trigger isEditor marked 400 do
9306: LD_OWVAR 84
9310: IFFALSE 9326
9312: GO 9314
9314: DISABLE
// Debug_Strings = [ You loss ] ;
9315: LD_ADDR_OWVAR 48
9319: PUSH
9320: LD_STRING You loss
9322: PUSH
9323: EMPTY
9324: LIST
9325: ST_TO_ADDR
9326: END
// every 100 marked 98 do var i , un ;
9327: GO 9329
9329: DISABLE
9330: LD_INT 0
9332: PPUSH
9333: PPUSH
// begin for i = 1 to side_positions do
9334: LD_ADDR_VAR 0 1
9338: PUSH
9339: DOUBLE
9340: LD_INT 1
9342: DEC
9343: ST_TO_ADDR
9344: LD_EXP 34
9348: PUSH
9349: FOR_TO
9350: IFFALSE 9437
// begin if side_positions [ i ] then
9352: LD_EXP 34
9356: PUSH
9357: LD_VAR 0 1
9361: ARRAY
9362: IFFALSE 9435
// if not HasPower ( i ) and not defeated [ i ] then
9364: LD_VAR 0 1
9368: PPUSH
9369: CALL 8672 0 1
9373: NOT
9374: PUSH
9375: LD_LOC 14
9379: PUSH
9380: LD_VAR 0 1
9384: ARRAY
9385: NOT
9386: AND
9387: IFFALSE 9435
// begin defeated = replace ( defeated , i , true ) ;
9389: LD_ADDR_LOC 14
9393: PUSH
9394: LD_LOC 14
9398: PPUSH
9399: LD_VAR 0 1
9403: PPUSH
9404: LD_INT 1
9406: PPUSH
9407: CALL_OW 1
9411: ST_TO_ADDR
// if i = mp_player_side then
9412: LD_VAR 0 1
9416: PUSH
9417: LD_OWVAR 7
9421: EQUAL
9422: IFFALSE 9435
// begin Multiplayer_Loose_Message ;
9424: CALL_OW 521
// SetPlayerSpectator ( ) ;
9428: CALL_OW 572
// enable ( 400 ) ;
9432: LD_INT 400
9434: ENABLE_MARKED
// end ; end ; end ;
9435: GO 9349
9437: POP
9438: POP
// DidGameEnd ;
9439: CALL 9454 0 0
// if not GameEnded then
9443: LD_LOC 15
9447: NOT
9448: IFFALSE 9451
// enable ;
9450: ENABLE
// end ;
9451: PPOPN 2
9453: END
// function DidGameEnd ; var i , k , enemy ; begin
9454: LD_INT 0
9456: PPUSH
9457: PPUSH
9458: PPUSH
9459: PPUSH
// enemy = [ ] ;
9460: LD_ADDR_VAR 0 4
9464: PUSH
9465: EMPTY
9466: ST_TO_ADDR
// for i = 1 to side_positions do
9467: LD_ADDR_VAR 0 2
9471: PUSH
9472: DOUBLE
9473: LD_INT 1
9475: DEC
9476: ST_TO_ADDR
9477: LD_EXP 34
9481: PUSH
9482: FOR_TO
9483: IFFALSE 9577
// if not defeated [ i ] then
9485: LD_LOC 14
9489: PUSH
9490: LD_VAR 0 2
9494: ARRAY
9495: NOT
9496: IFFALSE 9575
// for k = 1 to side_positions do
9498: LD_ADDR_VAR 0 3
9502: PUSH
9503: DOUBLE
9504: LD_INT 1
9506: DEC
9507: ST_TO_ADDR
9508: LD_EXP 34
9512: PUSH
9513: FOR_TO
9514: IFFALSE 9573
// if not defeated [ k ] then
9516: LD_LOC 14
9520: PUSH
9521: LD_VAR 0 3
9525: ARRAY
9526: NOT
9527: IFFALSE 9571
// if not AlliedSides ( i , k ) then
9529: LD_VAR 0 2
9533: PPUSH
9534: LD_VAR 0 3
9538: PPUSH
9539: CALL 9018 0 2
9543: NOT
9544: IFFALSE 9571
// enemy = enemy ^ [ i , k ] ;
9546: LD_ADDR_VAR 0 4
9550: PUSH
9551: LD_VAR 0 4
9555: PUSH
9556: LD_VAR 0 2
9560: PUSH
9561: LD_VAR 0 3
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: ADD
9570: ST_TO_ADDR
9571: GO 9513
9573: POP
9574: POP
9575: GO 9482
9577: POP
9578: POP
// if not enemy then
9579: LD_VAR 0 4
9583: NOT
9584: IFFALSE 9610
// begin GameEnded = true ;
9586: LD_ADDR_LOC 15
9590: PUSH
9591: LD_INT 1
9593: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9594: LD_LOC 14
9598: PUSH
9599: LD_OWVAR 7
9603: ARRAY
9604: NOT
9605: IFFALSE 9610
// enable ( 401 ) ;
9607: LD_INT 401
9609: ENABLE_MARKED
// end ; end ;
9610: LD_VAR 0 1
9614: RET
// function unfog ; var k , friends ; begin
9615: LD_INT 0
9617: PPUSH
9618: PPUSH
9619: PPUSH
// for k = 1 to side_positions do
9620: LD_ADDR_VAR 0 2
9624: PUSH
9625: DOUBLE
9626: LD_INT 1
9628: DEC
9629: ST_TO_ADDR
9630: LD_EXP 34
9634: PUSH
9635: FOR_TO
9636: IFFALSE 9692
// if not defeated [ k ] then
9638: LD_LOC 14
9642: PUSH
9643: LD_VAR 0 2
9647: ARRAY
9648: NOT
9649: IFFALSE 9690
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9651: LD_OWVAR 7
9655: PPUSH
9656: LD_VAR 0 2
9660: PPUSH
9661: CALL_OW 81
9665: PUSH
9666: LD_INT 1
9668: PUSH
9669: EMPTY
9670: LIST
9671: IN
9672: IFFALSE 9690
// friends = friends ^ k ;
9674: LD_ADDR_VAR 0 3
9678: PUSH
9679: LD_VAR 0 3
9683: PUSH
9684: LD_VAR 0 2
9688: ADD
9689: ST_TO_ADDR
9690: GO 9635
9692: POP
9693: POP
// if not friends then
9694: LD_VAR 0 3
9698: NOT
9699: IFFALSE 9713
// begin SetPlayerSpectator ( ) ;
9701: CALL_OW 572
// unfoged = true ;
9705: LD_ADDR_LOC 16
9709: PUSH
9710: LD_INT 1
9712: ST_TO_ADDR
// end ; end ;
9713: LD_VAR 0 1
9717: RET
// export function MakeGameEnd ; begin
9718: LD_INT 0
9720: PPUSH
// SetPlayerSpectator ( ) ;
9721: CALL_OW 572
// unfoged = true ;
9725: LD_ADDR_LOC 16
9729: PUSH
9730: LD_INT 1
9732: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9733: LD_INT 175
9735: PPUSH
9736: CALL_OW 67
// GameEnded = true ;
9740: LD_ADDR_LOC 15
9744: PUSH
9745: LD_INT 1
9747: ST_TO_ADDR
// end ;
9748: LD_VAR 0 1
9752: RET
// export function GetGameEnded ; begin
9753: LD_INT 0
9755: PPUSH
// result = GameEnded ;
9756: LD_ADDR_VAR 0 1
9760: PUSH
9761: LD_LOC 15
9765: ST_TO_ADDR
// end ; end_of_file
9766: LD_VAR 0 1
9770: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9771: LD_INT 0
9773: PPUSH
9774: PPUSH
9775: PPUSH
// for side = 1 to 8 do
9776: LD_ADDR_VAR 0 2
9780: PUSH
9781: DOUBLE
9782: LD_INT 1
9784: DEC
9785: ST_TO_ADDR
9786: LD_INT 8
9788: PUSH
9789: FOR_TO
9790: IFFALSE 9911
// begin for i = 1 to 72 do
9792: LD_ADDR_VAR 0 3
9796: PUSH
9797: DOUBLE
9798: LD_INT 1
9800: DEC
9801: ST_TO_ADDR
9802: LD_INT 72
9804: PUSH
9805: FOR_TO
9806: IFFALSE 9837
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9808: LD_VAR 0 3
9812: PPUSH
9813: LD_VAR 0 2
9817: PPUSH
9818: LD_INT 0
9820: PPUSH
9821: LD_VAR 0 3
9825: PPUSH
9826: CALL_OW 565
9830: PPUSH
9831: CALL_OW 322
9835: GO 9805
9837: POP
9838: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9839: LD_INT 73
9841: PPUSH
9842: LD_VAR 0 2
9846: PPUSH
9847: LD_INT 0
9849: PPUSH
9850: LD_INT 25
9852: PPUSH
9853: CALL_OW 565
9857: PPUSH
9858: CALL_OW 322
// for i = 0 to 40 do
9862: LD_ADDR_VAR 0 3
9866: PUSH
9867: DOUBLE
9868: LD_INT 0
9870: DEC
9871: ST_TO_ADDR
9872: LD_INT 40
9874: PUSH
9875: FOR_TO
9876: IFFALSE 9907
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9878: LD_VAR 0 3
9882: PPUSH
9883: LD_VAR 0 2
9887: PPUSH
9888: LD_INT 1
9890: PPUSH
9891: LD_VAR 0 3
9895: PPUSH
9896: CALL_OW 565
9900: PPUSH
9901: CALL_OW 324
9905: GO 9875
9907: POP
9908: POP
// end ;
9909: GO 9789
9911: POP
9912: POP
// end ;
9913: LD_VAR 0 1
9917: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9918: LD_INT 0
9920: PPUSH
9921: PPUSH
9922: PPUSH
// for side = 1 to 8 do
9923: LD_ADDR_VAR 0 3
9927: PUSH
9928: DOUBLE
9929: LD_INT 1
9931: DEC
9932: ST_TO_ADDR
9933: LD_INT 8
9935: PUSH
9936: FOR_TO
9937: IFFALSE 13933
// begin for i = 1 to 73 do
9939: LD_ADDR_VAR 0 4
9943: PUSH
9944: DOUBLE
9945: LD_INT 1
9947: DEC
9948: ST_TO_ADDR
9949: LD_INT 73
9951: PUSH
9952: FOR_TO
9953: IFFALSE 9974
// SetTech ( i , side , state_disabled ) ;
9955: LD_VAR 0 4
9959: PPUSH
9960: LD_VAR 0 3
9964: PPUSH
9965: LD_INT 0
9967: PPUSH
9968: CALL_OW 322
9972: GO 9952
9974: POP
9975: POP
// for i = 0 to 40 do
9976: LD_ADDR_VAR 0 4
9980: PUSH
9981: DOUBLE
9982: LD_INT 0
9984: DEC
9985: ST_TO_ADDR
9986: LD_INT 40
9988: PUSH
9989: FOR_TO
9990: IFFALSE 10011
// SetRestrict ( i , side , false ) ;
9992: LD_VAR 0 4
9996: PPUSH
9997: LD_VAR 0 3
10001: PPUSH
10002: LD_INT 0
10004: PPUSH
10005: CALL_OW 324
10009: GO 9989
10011: POP
10012: POP
// case level of 1 :
10013: LD_VAR 0 1
10017: PUSH
10018: LD_INT 1
10020: DOUBLE
10021: EQUAL
10022: IFTRUE 10026
10024: GO 10179
10026: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10027: LD_INT 35
10029: PPUSH
10030: LD_VAR 0 3
10034: PPUSH
10035: LD_INT 1
10037: PPUSH
10038: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10042: LD_INT 45
10044: PPUSH
10045: LD_VAR 0 3
10049: PPUSH
10050: LD_INT 1
10052: PPUSH
10053: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10057: LD_INT 46
10059: PPUSH
10060: LD_VAR 0 3
10064: PPUSH
10065: LD_INT 1
10067: PPUSH
10068: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10072: LD_INT 47
10074: PPUSH
10075: LD_VAR 0 3
10079: PPUSH
10080: LD_INT 1
10082: PPUSH
10083: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10087: LD_INT 0
10089: PPUSH
10090: LD_VAR 0 3
10094: PPUSH
10095: LD_INT 1
10097: PPUSH
10098: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10102: LD_INT 2
10104: PPUSH
10105: LD_VAR 0 3
10109: PPUSH
10110: LD_INT 1
10112: PPUSH
10113: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10117: LD_INT 4
10119: PPUSH
10120: LD_VAR 0 3
10124: PPUSH
10125: LD_INT 1
10127: PPUSH
10128: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10132: LD_INT 6
10134: PPUSH
10135: LD_VAR 0 3
10139: PPUSH
10140: LD_INT 1
10142: PPUSH
10143: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10147: LD_INT 29
10149: PPUSH
10150: LD_VAR 0 3
10154: PPUSH
10155: LD_INT 1
10157: PPUSH
10158: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10162: LD_INT 31
10164: PPUSH
10165: LD_VAR 0 3
10169: PPUSH
10170: LD_INT 1
10172: PPUSH
10173: CALL_OW 324
// end ; 2 :
10177: GO 13931
10179: LD_INT 2
10181: DOUBLE
10182: EQUAL
10183: IFTRUE 10187
10185: GO 10385
10187: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10188: LD_INT 35
10190: PPUSH
10191: LD_VAR 0 3
10195: PPUSH
10196: LD_INT 1
10198: PPUSH
10199: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10203: LD_INT 45
10205: PPUSH
10206: LD_VAR 0 3
10210: PPUSH
10211: LD_INT 1
10213: PPUSH
10214: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10218: LD_INT 46
10220: PPUSH
10221: LD_VAR 0 3
10225: PPUSH
10226: LD_INT 1
10228: PPUSH
10229: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10233: LD_INT 47
10235: PPUSH
10236: LD_VAR 0 3
10240: PPUSH
10241: LD_INT 1
10243: PPUSH
10244: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10248: LD_INT 1
10250: PPUSH
10251: LD_VAR 0 3
10255: PPUSH
10256: LD_INT 1
10258: PPUSH
10259: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10263: LD_INT 2
10265: PPUSH
10266: LD_VAR 0 3
10270: PPUSH
10271: LD_INT 1
10273: PPUSH
10274: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10278: LD_INT 11
10280: PPUSH
10281: LD_VAR 0 3
10285: PPUSH
10286: LD_INT 1
10288: PPUSH
10289: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10293: LD_INT 0
10295: PPUSH
10296: LD_VAR 0 3
10300: PPUSH
10301: LD_INT 1
10303: PPUSH
10304: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10308: LD_INT 2
10310: PPUSH
10311: LD_VAR 0 3
10315: PPUSH
10316: LD_INT 1
10318: PPUSH
10319: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10323: LD_INT 4
10325: PPUSH
10326: LD_VAR 0 3
10330: PPUSH
10331: LD_INT 1
10333: PPUSH
10334: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10338: LD_INT 6
10340: PPUSH
10341: LD_VAR 0 3
10345: PPUSH
10346: LD_INT 1
10348: PPUSH
10349: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10353: LD_INT 29
10355: PPUSH
10356: LD_VAR 0 3
10360: PPUSH
10361: LD_INT 1
10363: PPUSH
10364: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10368: LD_INT 31
10370: PPUSH
10371: LD_VAR 0 3
10375: PPUSH
10376: LD_INT 1
10378: PPUSH
10379: CALL_OW 324
// end ; 3 :
10383: GO 13931
10385: LD_INT 3
10387: DOUBLE
10388: EQUAL
10389: IFTRUE 10393
10391: GO 10846
10393: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10394: LD_INT 35
10396: PPUSH
10397: LD_VAR 0 3
10401: PPUSH
10402: LD_INT 1
10404: PPUSH
10405: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10409: LD_INT 45
10411: PPUSH
10412: LD_VAR 0 3
10416: PPUSH
10417: LD_INT 1
10419: PPUSH
10420: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10424: LD_INT 46
10426: PPUSH
10427: LD_VAR 0 3
10431: PPUSH
10432: LD_INT 1
10434: PPUSH
10435: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10439: LD_INT 47
10441: PPUSH
10442: LD_VAR 0 3
10446: PPUSH
10447: LD_INT 1
10449: PPUSH
10450: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10454: LD_INT 1
10456: PPUSH
10457: LD_VAR 0 3
10461: PPUSH
10462: LD_INT 1
10464: PPUSH
10465: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10469: LD_INT 2
10471: PPUSH
10472: LD_VAR 0 3
10476: PPUSH
10477: LD_INT 1
10479: PPUSH
10480: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10484: LD_INT 11
10486: PPUSH
10487: LD_VAR 0 3
10491: PPUSH
10492: LD_INT 1
10494: PPUSH
10495: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10499: LD_INT 48
10501: PPUSH
10502: LD_VAR 0 3
10506: PPUSH
10507: LD_INT 1
10509: PPUSH
10510: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10514: LD_INT 69
10516: PPUSH
10517: LD_VAR 0 3
10521: PPUSH
10522: LD_INT 1
10524: PPUSH
10525: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10529: LD_INT 39
10531: PPUSH
10532: LD_VAR 0 3
10536: PPUSH
10537: LD_INT 1
10539: PPUSH
10540: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10544: LD_INT 43
10546: PPUSH
10547: LD_VAR 0 3
10551: PPUSH
10552: LD_INT 1
10554: PPUSH
10555: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10559: LD_INT 51
10561: PPUSH
10562: LD_VAR 0 3
10566: PPUSH
10567: LD_INT 1
10569: PPUSH
10570: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10574: LD_INT 6
10576: PPUSH
10577: LD_VAR 0 3
10581: PPUSH
10582: LD_INT 1
10584: PPUSH
10585: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10589: LD_INT 0
10591: PPUSH
10592: LD_VAR 0 3
10596: PPUSH
10597: LD_INT 1
10599: PPUSH
10600: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10604: LD_INT 2
10606: PPUSH
10607: LD_VAR 0 3
10611: PPUSH
10612: LD_INT 1
10614: PPUSH
10615: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10619: LD_INT 3
10621: PPUSH
10622: LD_VAR 0 3
10626: PPUSH
10627: LD_INT 1
10629: PPUSH
10630: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10634: LD_INT 4
10636: PPUSH
10637: LD_VAR 0 3
10641: PPUSH
10642: LD_INT 1
10644: PPUSH
10645: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10649: LD_INT 6
10651: PPUSH
10652: LD_VAR 0 3
10656: PPUSH
10657: LD_INT 1
10659: PPUSH
10660: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10664: LD_INT 7
10666: PPUSH
10667: LD_VAR 0 3
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10679: LD_INT 8
10681: PPUSH
10682: LD_VAR 0 3
10686: PPUSH
10687: LD_INT 1
10689: PPUSH
10690: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10694: LD_INT 10
10696: PPUSH
10697: LD_VAR 0 3
10701: PPUSH
10702: LD_INT 1
10704: PPUSH
10705: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10709: LD_INT 15
10711: PPUSH
10712: LD_VAR 0 3
10716: PPUSH
10717: LD_INT 1
10719: PPUSH
10720: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10724: LD_INT 16
10726: PPUSH
10727: LD_VAR 0 3
10731: PPUSH
10732: LD_INT 1
10734: PPUSH
10735: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10739: LD_INT 17
10741: PPUSH
10742: LD_VAR 0 3
10746: PPUSH
10747: LD_INT 1
10749: PPUSH
10750: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10754: LD_INT 20
10756: PPUSH
10757: LD_VAR 0 3
10761: PPUSH
10762: LD_INT 1
10764: PPUSH
10765: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10769: LD_INT 26
10771: PPUSH
10772: LD_VAR 0 3
10776: PPUSH
10777: LD_INT 1
10779: PPUSH
10780: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10784: LD_INT 27
10786: PPUSH
10787: LD_VAR 0 3
10791: PPUSH
10792: LD_INT 1
10794: PPUSH
10795: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10799: LD_INT 29
10801: PPUSH
10802: LD_VAR 0 3
10806: PPUSH
10807: LD_INT 1
10809: PPUSH
10810: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10814: LD_INT 31
10816: PPUSH
10817: LD_VAR 0 3
10821: PPUSH
10822: LD_INT 1
10824: PPUSH
10825: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10829: LD_INT 32
10831: PPUSH
10832: LD_VAR 0 3
10836: PPUSH
10837: LD_INT 1
10839: PPUSH
10840: CALL_OW 324
// end ; 4 :
10844: GO 13931
10846: LD_INT 4
10848: DOUBLE
10849: EQUAL
10850: IFTRUE 10854
10852: GO 11802
10854: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10855: LD_INT 35
10857: PPUSH
10858: LD_VAR 0 3
10862: PPUSH
10863: LD_INT 1
10865: PPUSH
10866: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10870: LD_INT 45
10872: PPUSH
10873: LD_VAR 0 3
10877: PPUSH
10878: LD_INT 1
10880: PPUSH
10881: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10885: LD_INT 46
10887: PPUSH
10888: LD_VAR 0 3
10892: PPUSH
10893: LD_INT 1
10895: PPUSH
10896: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10900: LD_INT 47
10902: PPUSH
10903: LD_VAR 0 3
10907: PPUSH
10908: LD_INT 1
10910: PPUSH
10911: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10915: LD_INT 1
10917: PPUSH
10918: LD_VAR 0 3
10922: PPUSH
10923: LD_INT 1
10925: PPUSH
10926: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10930: LD_INT 2
10932: PPUSH
10933: LD_VAR 0 3
10937: PPUSH
10938: LD_INT 1
10940: PPUSH
10941: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10945: LD_INT 11
10947: PPUSH
10948: LD_VAR 0 3
10952: PPUSH
10953: LD_INT 1
10955: PPUSH
10956: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10960: LD_INT 20
10962: PPUSH
10963: LD_VAR 0 3
10967: PPUSH
10968: LD_INT 1
10970: PPUSH
10971: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10975: LD_INT 48
10977: PPUSH
10978: LD_VAR 0 3
10982: PPUSH
10983: LD_INT 1
10985: PPUSH
10986: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10990: LD_INT 49
10992: PPUSH
10993: LD_VAR 0 3
10997: PPUSH
10998: LD_INT 1
11000: PPUSH
11001: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11005: LD_INT 69
11007: PPUSH
11008: LD_VAR 0 3
11012: PPUSH
11013: LD_INT 1
11015: PPUSH
11016: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11020: LD_INT 39
11022: PPUSH
11023: LD_VAR 0 3
11027: PPUSH
11028: LD_INT 1
11030: PPUSH
11031: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11035: LD_INT 34
11037: PPUSH
11038: LD_VAR 0 3
11042: PPUSH
11043: LD_INT 1
11045: PPUSH
11046: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11050: LD_INT 42
11052: PPUSH
11053: LD_VAR 0 3
11057: PPUSH
11058: LD_INT 1
11060: PPUSH
11061: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11065: LD_INT 44
11067: PPUSH
11068: LD_VAR 0 3
11072: PPUSH
11073: LD_INT 1
11075: PPUSH
11076: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11080: LD_INT 41
11082: PPUSH
11083: LD_VAR 0 3
11087: PPUSH
11088: LD_INT 1
11090: PPUSH
11091: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11095: LD_INT 43
11097: PPUSH
11098: LD_VAR 0 3
11102: PPUSH
11103: LD_INT 1
11105: PPUSH
11106: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11110: LD_INT 70
11112: PPUSH
11113: LD_VAR 0 3
11117: PPUSH
11118: LD_INT 1
11120: PPUSH
11121: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11125: LD_INT 51
11127: PPUSH
11128: LD_VAR 0 3
11132: PPUSH
11133: LD_INT 1
11135: PPUSH
11136: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11140: LD_INT 52
11142: PPUSH
11143: LD_VAR 0 3
11147: PPUSH
11148: LD_INT 1
11150: PPUSH
11151: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11155: LD_INT 6
11157: PPUSH
11158: LD_VAR 0 3
11162: PPUSH
11163: LD_INT 1
11165: PPUSH
11166: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11170: LD_INT 15
11172: PPUSH
11173: LD_VAR 0 3
11177: PPUSH
11178: LD_INT 1
11180: PPUSH
11181: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11185: LD_INT 7
11187: PPUSH
11188: LD_VAR 0 3
11192: PPUSH
11193: LD_INT 1
11195: PPUSH
11196: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11200: LD_INT 12
11202: PPUSH
11203: LD_VAR 0 3
11207: PPUSH
11208: LD_INT 1
11210: PPUSH
11211: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11215: LD_INT 18
11217: PPUSH
11218: LD_VAR 0 3
11222: PPUSH
11223: LD_INT 1
11225: PPUSH
11226: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11230: LD_INT 60
11232: PPUSH
11233: LD_VAR 0 3
11237: PPUSH
11238: LD_INT 1
11240: PPUSH
11241: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11245: LD_INT 9
11247: PPUSH
11248: LD_VAR 0 3
11252: PPUSH
11253: LD_INT 1
11255: PPUSH
11256: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11260: LD_INT 30
11262: PPUSH
11263: LD_VAR 0 3
11267: PPUSH
11268: LD_INT 1
11270: PPUSH
11271: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11275: LD_INT 37
11277: PPUSH
11278: LD_VAR 0 3
11282: PPUSH
11283: LD_INT 1
11285: PPUSH
11286: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11290: LD_INT 5
11292: PPUSH
11293: LD_VAR 0 3
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11305: LD_INT 66
11307: PPUSH
11308: LD_VAR 0 3
11312: PPUSH
11313: LD_INT 1
11315: PPUSH
11316: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11320: LD_INT 21
11322: PPUSH
11323: LD_VAR 0 3
11327: PPUSH
11328: LD_INT 1
11330: PPUSH
11331: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11335: LD_INT 22
11337: PPUSH
11338: LD_VAR 0 3
11342: PPUSH
11343: LD_INT 1
11345: PPUSH
11346: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11350: LD_INT 54
11352: PPUSH
11353: LD_VAR 0 3
11357: PPUSH
11358: LD_INT 1
11360: PPUSH
11361: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11365: LD_INT 0
11367: PPUSH
11368: LD_VAR 0 3
11372: PPUSH
11373: LD_INT 1
11375: PPUSH
11376: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11380: LD_INT 1
11382: PPUSH
11383: LD_VAR 0 3
11387: PPUSH
11388: LD_INT 1
11390: PPUSH
11391: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11395: LD_INT 2
11397: PPUSH
11398: LD_VAR 0 3
11402: PPUSH
11403: LD_INT 1
11405: PPUSH
11406: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11410: LD_INT 3
11412: PPUSH
11413: LD_VAR 0 3
11417: PPUSH
11418: LD_INT 1
11420: PPUSH
11421: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11425: LD_INT 4
11427: PPUSH
11428: LD_VAR 0 3
11432: PPUSH
11433: LD_INT 1
11435: PPUSH
11436: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11440: LD_INT 5
11442: PPUSH
11443: LD_VAR 0 3
11447: PPUSH
11448: LD_INT 1
11450: PPUSH
11451: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11455: LD_INT 6
11457: PPUSH
11458: LD_VAR 0 3
11462: PPUSH
11463: LD_INT 1
11465: PPUSH
11466: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11470: LD_INT 7
11472: PPUSH
11473: LD_VAR 0 3
11477: PPUSH
11478: LD_INT 1
11480: PPUSH
11481: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11485: LD_INT 8
11487: PPUSH
11488: LD_VAR 0 3
11492: PPUSH
11493: LD_INT 1
11495: PPUSH
11496: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11500: LD_INT 10
11502: PPUSH
11503: LD_VAR 0 3
11507: PPUSH
11508: LD_INT 1
11510: PPUSH
11511: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11515: LD_INT 11
11517: PPUSH
11518: LD_VAR 0 3
11522: PPUSH
11523: LD_INT 1
11525: PPUSH
11526: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11530: LD_INT 12
11532: PPUSH
11533: LD_VAR 0 3
11537: PPUSH
11538: LD_INT 1
11540: PPUSH
11541: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11545: LD_INT 13
11547: PPUSH
11548: LD_VAR 0 3
11552: PPUSH
11553: LD_INT 1
11555: PPUSH
11556: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11560: LD_INT 14
11562: PPUSH
11563: LD_VAR 0 3
11567: PPUSH
11568: LD_INT 1
11570: PPUSH
11571: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11575: LD_INT 15
11577: PPUSH
11578: LD_VAR 0 3
11582: PPUSH
11583: LD_INT 1
11585: PPUSH
11586: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11590: LD_INT 16
11592: PPUSH
11593: LD_VAR 0 3
11597: PPUSH
11598: LD_INT 1
11600: PPUSH
11601: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11605: LD_INT 17
11607: PPUSH
11608: LD_VAR 0 3
11612: PPUSH
11613: LD_INT 1
11615: PPUSH
11616: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11620: LD_INT 19
11622: PPUSH
11623: LD_VAR 0 3
11627: PPUSH
11628: LD_INT 1
11630: PPUSH
11631: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11635: LD_INT 20
11637: PPUSH
11638: LD_VAR 0 3
11642: PPUSH
11643: LD_INT 1
11645: PPUSH
11646: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11650: LD_INT 21
11652: PPUSH
11653: LD_VAR 0 3
11657: PPUSH
11658: LD_INT 1
11660: PPUSH
11661: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11665: LD_INT 23
11667: PPUSH
11668: LD_VAR 0 3
11672: PPUSH
11673: LD_INT 1
11675: PPUSH
11676: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11680: LD_INT 26
11682: PPUSH
11683: LD_VAR 0 3
11687: PPUSH
11688: LD_INT 1
11690: PPUSH
11691: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11695: LD_INT 27
11697: PPUSH
11698: LD_VAR 0 3
11702: PPUSH
11703: LD_INT 1
11705: PPUSH
11706: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11710: LD_INT 28
11712: PPUSH
11713: LD_VAR 0 3
11717: PPUSH
11718: LD_INT 1
11720: PPUSH
11721: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11725: LD_INT 29
11727: PPUSH
11728: LD_VAR 0 3
11732: PPUSH
11733: LD_INT 1
11735: PPUSH
11736: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11740: LD_INT 30
11742: PPUSH
11743: LD_VAR 0 3
11747: PPUSH
11748: LD_INT 1
11750: PPUSH
11751: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11755: LD_INT 31
11757: PPUSH
11758: LD_VAR 0 3
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11770: LD_INT 32
11772: PPUSH
11773: LD_VAR 0 3
11777: PPUSH
11778: LD_INT 1
11780: PPUSH
11781: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11785: LD_INT 36
11787: PPUSH
11788: LD_VAR 0 3
11792: PPUSH
11793: LD_INT 1
11795: PPUSH
11796: CALL_OW 324
// end ; 5 :
11800: GO 13931
11802: LD_INT 5
11804: DOUBLE
11805: EQUAL
11806: IFTRUE 11810
11808: GO 12923
11810: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11811: LD_INT 35
11813: PPUSH
11814: LD_VAR 0 3
11818: PPUSH
11819: LD_INT 1
11821: PPUSH
11822: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11826: LD_INT 45
11828: PPUSH
11829: LD_VAR 0 3
11833: PPUSH
11834: LD_INT 1
11836: PPUSH
11837: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11841: LD_INT 46
11843: PPUSH
11844: LD_VAR 0 3
11848: PPUSH
11849: LD_INT 1
11851: PPUSH
11852: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11856: LD_INT 47
11858: PPUSH
11859: LD_VAR 0 3
11863: PPUSH
11864: LD_INT 1
11866: PPUSH
11867: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11871: LD_INT 1
11873: PPUSH
11874: LD_VAR 0 3
11878: PPUSH
11879: LD_INT 1
11881: PPUSH
11882: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11886: LD_INT 2
11888: PPUSH
11889: LD_VAR 0 3
11893: PPUSH
11894: LD_INT 1
11896: PPUSH
11897: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11901: LD_INT 11
11903: PPUSH
11904: LD_VAR 0 3
11908: PPUSH
11909: LD_INT 1
11911: PPUSH
11912: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11916: LD_INT 20
11918: PPUSH
11919: LD_VAR 0 3
11923: PPUSH
11924: LD_INT 1
11926: PPUSH
11927: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11931: LD_INT 48
11933: PPUSH
11934: LD_VAR 0 3
11938: PPUSH
11939: LD_INT 1
11941: PPUSH
11942: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11946: LD_INT 49
11948: PPUSH
11949: LD_VAR 0 3
11953: PPUSH
11954: LD_INT 1
11956: PPUSH
11957: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11961: LD_INT 69
11963: PPUSH
11964: LD_VAR 0 3
11968: PPUSH
11969: LD_INT 1
11971: PPUSH
11972: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11976: LD_INT 39
11978: PPUSH
11979: LD_VAR 0 3
11983: PPUSH
11984: LD_INT 1
11986: PPUSH
11987: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11991: LD_INT 34
11993: PPUSH
11994: LD_VAR 0 3
11998: PPUSH
11999: LD_INT 1
12001: PPUSH
12002: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12006: LD_INT 42
12008: PPUSH
12009: LD_VAR 0 3
12013: PPUSH
12014: LD_INT 1
12016: PPUSH
12017: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12021: LD_INT 44
12023: PPUSH
12024: LD_VAR 0 3
12028: PPUSH
12029: LD_INT 1
12031: PPUSH
12032: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12036: LD_INT 41
12038: PPUSH
12039: LD_VAR 0 3
12043: PPUSH
12044: LD_INT 1
12046: PPUSH
12047: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12051: LD_INT 40
12053: PPUSH
12054: LD_VAR 0 3
12058: PPUSH
12059: LD_INT 1
12061: PPUSH
12062: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12066: LD_INT 43
12068: PPUSH
12069: LD_VAR 0 3
12073: PPUSH
12074: LD_INT 1
12076: PPUSH
12077: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12081: LD_INT 70
12083: PPUSH
12084: LD_VAR 0 3
12088: PPUSH
12089: LD_INT 1
12091: PPUSH
12092: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12096: LD_INT 51
12098: PPUSH
12099: LD_VAR 0 3
12103: PPUSH
12104: LD_INT 1
12106: PPUSH
12107: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12111: LD_INT 52
12113: PPUSH
12114: LD_VAR 0 3
12118: PPUSH
12119: LD_INT 1
12121: PPUSH
12122: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12126: LD_INT 6
12128: PPUSH
12129: LD_VAR 0 3
12133: PPUSH
12134: LD_INT 1
12136: PPUSH
12137: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12141: LD_INT 15
12143: PPUSH
12144: LD_VAR 0 3
12148: PPUSH
12149: LD_INT 1
12151: PPUSH
12152: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12156: LD_INT 7
12158: PPUSH
12159: LD_VAR 0 3
12163: PPUSH
12164: LD_INT 1
12166: PPUSH
12167: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12171: LD_INT 12
12173: PPUSH
12174: LD_VAR 0 3
12178: PPUSH
12179: LD_INT 1
12181: PPUSH
12182: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12186: LD_INT 17
12188: PPUSH
12189: LD_VAR 0 3
12193: PPUSH
12194: LD_INT 1
12196: PPUSH
12197: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12201: LD_INT 18
12203: PPUSH
12204: LD_VAR 0 3
12208: PPUSH
12209: LD_INT 1
12211: PPUSH
12212: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12216: LD_INT 60
12218: PPUSH
12219: LD_VAR 0 3
12223: PPUSH
12224: LD_INT 1
12226: PPUSH
12227: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12231: LD_INT 32
12233: PPUSH
12234: LD_VAR 0 3
12238: PPUSH
12239: LD_INT 1
12241: PPUSH
12242: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12246: LD_INT 9
12248: PPUSH
12249: LD_VAR 0 3
12253: PPUSH
12254: LD_INT 1
12256: PPUSH
12257: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12261: LD_INT 57
12263: PPUSH
12264: LD_VAR 0 3
12268: PPUSH
12269: LD_INT 1
12271: PPUSH
12272: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12276: LD_INT 30
12278: PPUSH
12279: LD_VAR 0 3
12283: PPUSH
12284: LD_INT 1
12286: PPUSH
12287: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12291: LD_INT 37
12293: PPUSH
12294: LD_VAR 0 3
12298: PPUSH
12299: LD_INT 1
12301: PPUSH
12302: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12306: LD_INT 63
12308: PPUSH
12309: LD_VAR 0 3
12313: PPUSH
12314: LD_INT 1
12316: PPUSH
12317: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12321: LD_INT 3
12323: PPUSH
12324: LD_VAR 0 3
12328: PPUSH
12329: LD_INT 1
12331: PPUSH
12332: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12336: LD_INT 4
12338: PPUSH
12339: LD_VAR 0 3
12343: PPUSH
12344: LD_INT 1
12346: PPUSH
12347: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12351: LD_INT 5
12353: PPUSH
12354: LD_VAR 0 3
12358: PPUSH
12359: LD_INT 1
12361: PPUSH
12362: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12366: LD_INT 66
12368: PPUSH
12369: LD_VAR 0 3
12373: PPUSH
12374: LD_INT 1
12376: PPUSH
12377: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12381: LD_INT 21
12383: PPUSH
12384: LD_VAR 0 3
12388: PPUSH
12389: LD_INT 1
12391: PPUSH
12392: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12396: LD_INT 22
12398: PPUSH
12399: LD_VAR 0 3
12403: PPUSH
12404: LD_INT 1
12406: PPUSH
12407: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12411: LD_INT 19
12413: PPUSH
12414: LD_VAR 0 3
12418: PPUSH
12419: LD_INT 1
12421: PPUSH
12422: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12426: LD_INT 54
12428: PPUSH
12429: LD_VAR 0 3
12433: PPUSH
12434: LD_INT 1
12436: PPUSH
12437: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12441: LD_INT 55
12443: PPUSH
12444: LD_VAR 0 3
12448: PPUSH
12449: LD_INT 1
12451: PPUSH
12452: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12456: LD_INT 0
12458: PPUSH
12459: LD_VAR 0 3
12463: PPUSH
12464: LD_INT 1
12466: PPUSH
12467: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12471: LD_INT 1
12473: PPUSH
12474: LD_VAR 0 3
12478: PPUSH
12479: LD_INT 1
12481: PPUSH
12482: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12486: LD_INT 2
12488: PPUSH
12489: LD_VAR 0 3
12493: PPUSH
12494: LD_INT 1
12496: PPUSH
12497: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12501: LD_INT 3
12503: PPUSH
12504: LD_VAR 0 3
12508: PPUSH
12509: LD_INT 1
12511: PPUSH
12512: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12516: LD_INT 4
12518: PPUSH
12519: LD_VAR 0 3
12523: PPUSH
12524: LD_INT 1
12526: PPUSH
12527: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12531: LD_INT 5
12533: PPUSH
12534: LD_VAR 0 3
12538: PPUSH
12539: LD_INT 1
12541: PPUSH
12542: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12546: LD_INT 6
12548: PPUSH
12549: LD_VAR 0 3
12553: PPUSH
12554: LD_INT 1
12556: PPUSH
12557: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12561: LD_INT 7
12563: PPUSH
12564: LD_VAR 0 3
12568: PPUSH
12569: LD_INT 1
12571: PPUSH
12572: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12576: LD_INT 8
12578: PPUSH
12579: LD_VAR 0 3
12583: PPUSH
12584: LD_INT 1
12586: PPUSH
12587: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12591: LD_INT 10
12593: PPUSH
12594: LD_VAR 0 3
12598: PPUSH
12599: LD_INT 1
12601: PPUSH
12602: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12606: LD_INT 11
12608: PPUSH
12609: LD_VAR 0 3
12613: PPUSH
12614: LD_INT 1
12616: PPUSH
12617: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12621: LD_INT 12
12623: PPUSH
12624: LD_VAR 0 3
12628: PPUSH
12629: LD_INT 1
12631: PPUSH
12632: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12636: LD_INT 13
12638: PPUSH
12639: LD_VAR 0 3
12643: PPUSH
12644: LD_INT 1
12646: PPUSH
12647: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12651: LD_INT 14
12653: PPUSH
12654: LD_VAR 0 3
12658: PPUSH
12659: LD_INT 1
12661: PPUSH
12662: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12666: LD_INT 15
12668: PPUSH
12669: LD_VAR 0 3
12673: PPUSH
12674: LD_INT 1
12676: PPUSH
12677: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12681: LD_INT 16
12683: PPUSH
12684: LD_VAR 0 3
12688: PPUSH
12689: LD_INT 1
12691: PPUSH
12692: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12696: LD_INT 17
12698: PPUSH
12699: LD_VAR 0 3
12703: PPUSH
12704: LD_INT 1
12706: PPUSH
12707: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12711: LD_INT 18
12713: PPUSH
12714: LD_VAR 0 3
12718: PPUSH
12719: LD_INT 1
12721: PPUSH
12722: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12726: LD_INT 19
12728: PPUSH
12729: LD_VAR 0 3
12733: PPUSH
12734: LD_INT 1
12736: PPUSH
12737: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12741: LD_INT 20
12743: PPUSH
12744: LD_VAR 0 3
12748: PPUSH
12749: LD_INT 1
12751: PPUSH
12752: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12756: LD_INT 21
12758: PPUSH
12759: LD_VAR 0 3
12763: PPUSH
12764: LD_INT 1
12766: PPUSH
12767: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12771: LD_INT 23
12773: PPUSH
12774: LD_VAR 0 3
12778: PPUSH
12779: LD_INT 1
12781: PPUSH
12782: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12786: LD_INT 26
12788: PPUSH
12789: LD_VAR 0 3
12793: PPUSH
12794: LD_INT 1
12796: PPUSH
12797: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12801: LD_INT 27
12803: PPUSH
12804: LD_VAR 0 3
12808: PPUSH
12809: LD_INT 1
12811: PPUSH
12812: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12816: LD_INT 28
12818: PPUSH
12819: LD_VAR 0 3
12823: PPUSH
12824: LD_INT 1
12826: PPUSH
12827: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12831: LD_INT 29
12833: PPUSH
12834: LD_VAR 0 3
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12846: LD_INT 30
12848: PPUSH
12849: LD_VAR 0 3
12853: PPUSH
12854: LD_INT 1
12856: PPUSH
12857: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12861: LD_INT 31
12863: PPUSH
12864: LD_VAR 0 3
12868: PPUSH
12869: LD_INT 1
12871: PPUSH
12872: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12876: LD_INT 32
12878: PPUSH
12879: LD_VAR 0 3
12883: PPUSH
12884: LD_INT 1
12886: PPUSH
12887: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12891: LD_INT 33
12893: PPUSH
12894: LD_VAR 0 3
12898: PPUSH
12899: LD_INT 1
12901: PPUSH
12902: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12906: LD_INT 36
12908: PPUSH
12909: LD_VAR 0 3
12913: PPUSH
12914: LD_INT 1
12916: PPUSH
12917: CALL_OW 324
// end ; 6 :
12921: GO 13931
12923: LD_INT 6
12925: DOUBLE
12926: EQUAL
12927: IFTRUE 12931
12929: GO 13856
12931: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12932: LD_INT 35
12934: PPUSH
12935: LD_VAR 0 3
12939: PPUSH
12940: LD_INT 1
12942: PPUSH
12943: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12947: LD_INT 45
12949: PPUSH
12950: LD_VAR 0 3
12954: PPUSH
12955: LD_INT 1
12957: PPUSH
12958: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12962: LD_INT 46
12964: PPUSH
12965: LD_VAR 0 3
12969: PPUSH
12970: LD_INT 1
12972: PPUSH
12973: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12977: LD_INT 47
12979: PPUSH
12980: LD_VAR 0 3
12984: PPUSH
12985: LD_INT 1
12987: PPUSH
12988: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12992: LD_INT 1
12994: PPUSH
12995: LD_VAR 0 3
12999: PPUSH
13000: LD_INT 1
13002: PPUSH
13003: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13007: LD_INT 2
13009: PPUSH
13010: LD_VAR 0 3
13014: PPUSH
13015: LD_INT 1
13017: PPUSH
13018: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13022: LD_INT 11
13024: PPUSH
13025: LD_VAR 0 3
13029: PPUSH
13030: LD_INT 1
13032: PPUSH
13033: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13037: LD_INT 20
13039: PPUSH
13040: LD_VAR 0 3
13044: PPUSH
13045: LD_INT 1
13047: PPUSH
13048: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13052: LD_INT 48
13054: PPUSH
13055: LD_VAR 0 3
13059: PPUSH
13060: LD_INT 1
13062: PPUSH
13063: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13067: LD_INT 49
13069: PPUSH
13070: LD_VAR 0 3
13074: PPUSH
13075: LD_INT 1
13077: PPUSH
13078: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
13082: LD_INT 50
13084: PPUSH
13085: LD_VAR 0 3
13089: PPUSH
13090: LD_INT 1
13092: PPUSH
13093: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13097: LD_INT 69
13099: PPUSH
13100: LD_VAR 0 3
13104: PPUSH
13105: LD_INT 1
13107: PPUSH
13108: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13112: LD_INT 39
13114: PPUSH
13115: LD_VAR 0 3
13119: PPUSH
13120: LD_INT 1
13122: PPUSH
13123: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13127: LD_INT 34
13129: PPUSH
13130: LD_VAR 0 3
13134: PPUSH
13135: LD_INT 1
13137: PPUSH
13138: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13142: LD_INT 42
13144: PPUSH
13145: LD_VAR 0 3
13149: PPUSH
13150: LD_INT 1
13152: PPUSH
13153: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13157: LD_INT 44
13159: PPUSH
13160: LD_VAR 0 3
13164: PPUSH
13165: LD_INT 1
13167: PPUSH
13168: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13172: LD_INT 41
13174: PPUSH
13175: LD_VAR 0 3
13179: PPUSH
13180: LD_INT 1
13182: PPUSH
13183: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13187: LD_INT 13
13189: PPUSH
13190: LD_VAR 0 3
13194: PPUSH
13195: LD_INT 1
13197: PPUSH
13198: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13202: LD_INT 40
13204: PPUSH
13205: LD_VAR 0 3
13209: PPUSH
13210: LD_INT 1
13212: PPUSH
13213: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13217: LD_INT 43
13219: PPUSH
13220: LD_VAR 0 3
13224: PPUSH
13225: LD_INT 1
13227: PPUSH
13228: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13232: LD_INT 70
13234: PPUSH
13235: LD_VAR 0 3
13239: PPUSH
13240: LD_INT 1
13242: PPUSH
13243: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13247: LD_INT 23
13249: PPUSH
13250: LD_VAR 0 3
13254: PPUSH
13255: LD_INT 1
13257: PPUSH
13258: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13262: LD_INT 51
13264: PPUSH
13265: LD_VAR 0 3
13269: PPUSH
13270: LD_INT 1
13272: PPUSH
13273: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13277: LD_INT 52
13279: PPUSH
13280: LD_VAR 0 3
13284: PPUSH
13285: LD_INT 1
13287: PPUSH
13288: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13292: LD_INT 6
13294: PPUSH
13295: LD_VAR 0 3
13299: PPUSH
13300: LD_INT 1
13302: PPUSH
13303: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13307: LD_INT 15
13309: PPUSH
13310: LD_VAR 0 3
13314: PPUSH
13315: LD_INT 1
13317: PPUSH
13318: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13322: LD_INT 7
13324: PPUSH
13325: LD_VAR 0 3
13329: PPUSH
13330: LD_INT 1
13332: PPUSH
13333: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13337: LD_INT 12
13339: PPUSH
13340: LD_VAR 0 3
13344: PPUSH
13345: LD_INT 1
13347: PPUSH
13348: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13352: LD_INT 10
13354: PPUSH
13355: LD_VAR 0 3
13359: PPUSH
13360: LD_INT 1
13362: PPUSH
13363: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13367: LD_INT 17
13369: PPUSH
13370: LD_VAR 0 3
13374: PPUSH
13375: LD_INT 1
13377: PPUSH
13378: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13382: LD_INT 18
13384: PPUSH
13385: LD_VAR 0 3
13389: PPUSH
13390: LD_INT 1
13392: PPUSH
13393: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13397: LD_INT 60
13399: PPUSH
13400: LD_VAR 0 3
13404: PPUSH
13405: LD_INT 1
13407: PPUSH
13408: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13412: LD_INT 61
13414: PPUSH
13415: LD_VAR 0 3
13419: PPUSH
13420: LD_INT 1
13422: PPUSH
13423: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13427: LD_INT 32
13429: PPUSH
13430: LD_VAR 0 3
13434: PPUSH
13435: LD_INT 1
13437: PPUSH
13438: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13442: LD_INT 27
13444: PPUSH
13445: LD_VAR 0 3
13449: PPUSH
13450: LD_INT 1
13452: PPUSH
13453: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13457: LD_INT 36
13459: PPUSH
13460: LD_VAR 0 3
13464: PPUSH
13465: LD_INT 1
13467: PPUSH
13468: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13472: LD_INT 33
13474: PPUSH
13475: LD_VAR 0 3
13479: PPUSH
13480: LD_INT 1
13482: PPUSH
13483: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13487: LD_INT 9
13489: PPUSH
13490: LD_VAR 0 3
13494: PPUSH
13495: LD_INT 1
13497: PPUSH
13498: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13502: LD_INT 38
13504: PPUSH
13505: LD_VAR 0 3
13509: PPUSH
13510: LD_INT 1
13512: PPUSH
13513: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13517: LD_INT 57
13519: PPUSH
13520: LD_VAR 0 3
13524: PPUSH
13525: LD_INT 1
13527: PPUSH
13528: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13532: LD_INT 58
13534: PPUSH
13535: LD_VAR 0 3
13539: PPUSH
13540: LD_INT 1
13542: PPUSH
13543: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13547: LD_INT 28
13549: PPUSH
13550: LD_VAR 0 3
13554: PPUSH
13555: LD_INT 1
13557: PPUSH
13558: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13562: LD_INT 29
13564: PPUSH
13565: LD_VAR 0 3
13569: PPUSH
13570: LD_INT 1
13572: PPUSH
13573: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13577: LD_INT 30
13579: PPUSH
13580: LD_VAR 0 3
13584: PPUSH
13585: LD_INT 1
13587: PPUSH
13588: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13592: LD_INT 37
13594: PPUSH
13595: LD_VAR 0 3
13599: PPUSH
13600: LD_INT 1
13602: PPUSH
13603: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13607: LD_INT 63
13609: PPUSH
13610: LD_VAR 0 3
13614: PPUSH
13615: LD_INT 1
13617: PPUSH
13618: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13622: LD_INT 64
13624: PPUSH
13625: LD_VAR 0 3
13629: PPUSH
13630: LD_INT 1
13632: PPUSH
13633: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13637: LD_INT 3
13639: PPUSH
13640: LD_VAR 0 3
13644: PPUSH
13645: LD_INT 1
13647: PPUSH
13648: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13652: LD_INT 4
13654: PPUSH
13655: LD_VAR 0 3
13659: PPUSH
13660: LD_INT 1
13662: PPUSH
13663: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13667: LD_INT 5
13669: PPUSH
13670: LD_VAR 0 3
13674: PPUSH
13675: LD_INT 1
13677: PPUSH
13678: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13682: LD_INT 8
13684: PPUSH
13685: LD_VAR 0 3
13689: PPUSH
13690: LD_INT 1
13692: PPUSH
13693: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13697: LD_INT 66
13699: PPUSH
13700: LD_VAR 0 3
13704: PPUSH
13705: LD_INT 1
13707: PPUSH
13708: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13712: LD_INT 67
13714: PPUSH
13715: LD_VAR 0 3
13719: PPUSH
13720: LD_INT 1
13722: PPUSH
13723: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13727: LD_INT 21
13729: PPUSH
13730: LD_VAR 0 3
13734: PPUSH
13735: LD_INT 1
13737: PPUSH
13738: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13742: LD_INT 22
13744: PPUSH
13745: LD_VAR 0 3
13749: PPUSH
13750: LD_INT 1
13752: PPUSH
13753: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13757: LD_INT 19
13759: PPUSH
13760: LD_VAR 0 3
13764: PPUSH
13765: LD_INT 1
13767: PPUSH
13768: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13772: LD_INT 26
13774: PPUSH
13775: LD_VAR 0 3
13779: PPUSH
13780: LD_INT 1
13782: PPUSH
13783: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13787: LD_INT 54
13789: PPUSH
13790: LD_VAR 0 3
13794: PPUSH
13795: LD_INT 1
13797: PPUSH
13798: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13802: LD_INT 55
13804: PPUSH
13805: LD_VAR 0 3
13809: PPUSH
13810: LD_INT 1
13812: PPUSH
13813: CALL_OW 322
// for i = 0 to 39 do
13817: LD_ADDR_VAR 0 4
13821: PUSH
13822: DOUBLE
13823: LD_INT 0
13825: DEC
13826: ST_TO_ADDR
13827: LD_INT 39
13829: PUSH
13830: FOR_TO
13831: IFFALSE 13852
// SetRestrict ( i , side , true ) ;
13833: LD_VAR 0 4
13837: PPUSH
13838: LD_VAR 0 3
13842: PPUSH
13843: LD_INT 1
13845: PPUSH
13846: CALL_OW 324
13850: GO 13830
13852: POP
13853: POP
// end ; else
13854: GO 13931
13856: POP
// begin for i = 1 to 73 do
13857: LD_ADDR_VAR 0 4
13861: PUSH
13862: DOUBLE
13863: LD_INT 1
13865: DEC
13866: ST_TO_ADDR
13867: LD_INT 73
13869: PUSH
13870: FOR_TO
13871: IFFALSE 13892
// SetTech ( i , side , state_enabled ) ;
13873: LD_VAR 0 4
13877: PPUSH
13878: LD_VAR 0 3
13882: PPUSH
13883: LD_INT 1
13885: PPUSH
13886: CALL_OW 322
13890: GO 13870
13892: POP
13893: POP
// for i = 0 to 39 do
13894: LD_ADDR_VAR 0 4
13898: PUSH
13899: DOUBLE
13900: LD_INT 0
13902: DEC
13903: ST_TO_ADDR
13904: LD_INT 39
13906: PUSH
13907: FOR_TO
13908: IFFALSE 13929
// SetRestrict ( i , side , true ) ;
13910: LD_VAR 0 4
13914: PPUSH
13915: LD_VAR 0 3
13919: PPUSH
13920: LD_INT 1
13922: PPUSH
13923: CALL_OW 324
13927: GO 13907
13929: POP
13930: POP
// end ; end ; end ;
13931: GO 9936
13933: POP
13934: POP
// end ; end_of_file
13935: LD_VAR 0 2
13939: RET
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
13940: LD_INT 0
13942: PPUSH
13943: PPUSH
13944: PPUSH
// BuildUpTime_Delay = 0 ;
13945: LD_ADDR_EXP 57
13949: PUSH
13950: LD_INT 0
13952: ST_TO_ADDR
// if not def_builduptime then
13953: LD_EXP 14
13957: NOT
13958: IFFALSE 13962
// exit ;
13960: GO 14145
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
13962: LD_ADDR_EXP 57
13966: PUSH
13967: LD_INT 8400
13969: PUSH
13970: LD_INT 2100
13972: PUSH
13973: LD_EXP 14
13977: MUL
13978: PLUS
13979: ST_TO_ADDR
// BuildUpTimeActive := true ;
13980: LD_ADDR_EXP 56
13984: PUSH
13985: LD_INT 1
13987: ST_TO_ADDR
// for i := 1 to 8 do
13988: LD_ADDR_VAR 0 2
13992: PUSH
13993: DOUBLE
13994: LD_INT 1
13996: DEC
13997: ST_TO_ADDR
13998: LD_INT 8
14000: PUSH
14001: FOR_TO
14002: IFFALSE 14143
// if Side_Positions [ i ] then
14004: LD_EXP 34
14008: PUSH
14009: LD_VAR 0 2
14013: ARRAY
14014: IFFALSE 14141
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14016: LD_EXP 55
14020: PUSH
14021: LD_EXP 34
14025: PUSH
14026: LD_VAR 0 2
14030: ARRAY
14031: ARRAY
14032: PPUSH
14033: LD_INT 5
14035: PPUSH
14036: CALL_OW 424
// for j := 1 to 8 do
14040: LD_ADDR_VAR 0 3
14044: PUSH
14045: DOUBLE
14046: LD_INT 1
14048: DEC
14049: ST_TO_ADDR
14050: LD_INT 8
14052: PUSH
14053: FOR_TO
14054: IFFALSE 14139
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14056: LD_EXP 34
14060: PUSH
14061: LD_VAR 0 3
14065: ARRAY
14066: PUSH
14067: LD_EXP 31
14071: PUSH
14072: LD_VAR 0 2
14076: ARRAY
14077: PUSH
14078: LD_EXP 31
14082: PUSH
14083: LD_VAR 0 3
14087: ARRAY
14088: NONEQUAL
14089: PUSH
14090: LD_EXP 36
14094: NOT
14095: PUSH
14096: LD_VAR 0 2
14100: PUSH
14101: LD_VAR 0 3
14105: NONEQUAL
14106: AND
14107: OR
14108: AND
14109: IFFALSE 14137
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14111: LD_VAR 0 3
14115: PPUSH
14116: LD_EXP 55
14120: PUSH
14121: LD_EXP 34
14125: PUSH
14126: LD_VAR 0 2
14130: ARRAY
14131: ARRAY
14132: PPUSH
14133: CALL_OW 333
14137: GO 14053
14139: POP
14140: POP
// end ;
14141: GO 14001
14143: POP
14144: POP
// end ;
14145: LD_VAR 0 1
14149: RET
// export function EndBuildUp ; var i , j ; begin
14150: LD_INT 0
14152: PPUSH
14153: PPUSH
14154: PPUSH
// BuildUpTimeActive := false ;
14155: LD_ADDR_EXP 56
14159: PUSH
14160: LD_INT 0
14162: ST_TO_ADDR
// for i := 1 to 8 do
14163: LD_ADDR_VAR 0 2
14167: PUSH
14168: DOUBLE
14169: LD_INT 1
14171: DEC
14172: ST_TO_ADDR
14173: LD_INT 8
14175: PUSH
14176: FOR_TO
14177: IFFALSE 14318
// if Side_Positions [ i ] then
14179: LD_EXP 34
14183: PUSH
14184: LD_VAR 0 2
14188: ARRAY
14189: IFFALSE 14316
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14191: LD_EXP 55
14195: PUSH
14196: LD_EXP 34
14200: PUSH
14201: LD_VAR 0 2
14205: ARRAY
14206: ARRAY
14207: PPUSH
14208: LD_INT 0
14210: PPUSH
14211: CALL_OW 424
// for j := 1 to 8 do
14215: LD_ADDR_VAR 0 3
14219: PUSH
14220: DOUBLE
14221: LD_INT 1
14223: DEC
14224: ST_TO_ADDR
14225: LD_INT 8
14227: PUSH
14228: FOR_TO
14229: IFFALSE 14314
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14231: LD_EXP 34
14235: PUSH
14236: LD_VAR 0 3
14240: ARRAY
14241: PUSH
14242: LD_EXP 31
14246: PUSH
14247: LD_VAR 0 2
14251: ARRAY
14252: PUSH
14253: LD_EXP 31
14257: PUSH
14258: LD_VAR 0 3
14262: ARRAY
14263: NONEQUAL
14264: PUSH
14265: LD_EXP 36
14269: NOT
14270: PUSH
14271: LD_VAR 0 2
14275: PUSH
14276: LD_VAR 0 3
14280: NONEQUAL
14281: AND
14282: OR
14283: AND
14284: IFFALSE 14312
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14286: LD_VAR 0 3
14290: PPUSH
14291: LD_EXP 55
14295: PUSH
14296: LD_EXP 34
14300: PUSH
14301: LD_VAR 0 2
14305: ARRAY
14306: ARRAY
14307: PPUSH
14308: CALL_OW 334
14312: GO 14228
14314: POP
14315: POP
// end ;
14316: GO 14176
14318: POP
14319: POP
// end ;
14320: LD_VAR 0 1
14324: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14325: LD_EXP 56
14329: IFFALSE 14504
14331: GO 14333
14333: DISABLE
14334: LD_INT 0
14336: PPUSH
14337: PPUSH
// begin for i := 1 to 8 do
14338: LD_ADDR_VAR 0 1
14342: PUSH
14343: DOUBLE
14344: LD_INT 1
14346: DEC
14347: ST_TO_ADDR
14348: LD_INT 8
14350: PUSH
14351: FOR_TO
14352: IFFALSE 14501
// if Side_Positions [ i ] then
14354: LD_EXP 34
14358: PUSH
14359: LD_VAR 0 1
14363: ARRAY
14364: IFFALSE 14499
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14366: LD_ADDR_VAR 0 2
14370: PUSH
14371: LD_EXP 55
14375: PUSH
14376: LD_EXP 34
14380: PUSH
14381: LD_VAR 0 1
14385: ARRAY
14386: ARRAY
14387: PPUSH
14388: LD_INT 2
14390: PUSH
14391: LD_INT 21
14393: PUSH
14394: LD_INT 1
14396: PUSH
14397: EMPTY
14398: LIST
14399: LIST
14400: PUSH
14401: LD_INT 21
14403: PUSH
14404: LD_INT 2
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 22
14418: PUSH
14419: LD_OWVAR 2
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PPUSH
14432: CALL_OW 70
14436: PUSH
14437: FOR_IN
14438: IFFALSE 14497
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14440: LD_EXP 31
14444: PUSH
14445: LD_VAR 0 1
14449: ARRAY
14450: PUSH
14451: LD_EXP 31
14455: PUSH
14456: LD_OWVAR 2
14460: ARRAY
14461: NONEQUAL
14462: PUSH
14463: LD_EXP 36
14467: NOT
14468: PUSH
14469: LD_VAR 0 1
14473: PUSH
14474: LD_OWVAR 2
14478: NONEQUAL
14479: AND
14480: OR
14481: IFFALSE 14495
// ComMoveToArea ( un , BuildUpEscape ) ;
14483: LD_VAR 0 2
14487: PPUSH
14488: LD_INT 18
14490: PPUSH
14491: CALL_OW 113
14495: GO 14437
14497: POP
14498: POP
14499: GO 14351
14501: POP
14502: POP
// enable ;
14503: ENABLE
// end ;
14504: PPOPN 2
14506: END
// every 0 0$1 trigger def_builduptime do
14507: LD_EXP 14
14511: IFFALSE 14537
14513: GO 14515
14515: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14516: LD_INT 8400
14518: PUSH
14519: LD_EXP 14
14523: PUSH
14524: LD_INT 2100
14526: MUL
14527: PLUS
14528: PPUSH
14529: CALL_OW 67
// EndBuildUp ;
14533: CALL 14150 0 0
// end ; end_of_file
14537: END
// var respawn , inqueue ; export function init_respawning ; begin
14538: LD_INT 0
14540: PPUSH
// respawn := Rand ( 1 , 8 ) ;
14541: LD_ADDR_LOC 18
14545: PUSH
14546: LD_INT 1
14548: PPUSH
14549: LD_INT 8
14551: PPUSH
14552: CALL_OW 12
14556: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14557: LD_ADDR_LOC 19
14561: PUSH
14562: LD_INT 0
14564: PUSH
14565: LD_INT 0
14567: PUSH
14568: LD_INT 0
14570: PUSH
14571: LD_INT 0
14573: PUSH
14574: LD_INT 0
14576: PUSH
14577: LD_INT 0
14579: PUSH
14580: LD_INT 0
14582: PUSH
14583: LD_INT 0
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: ST_TO_ADDR
// end ;
14596: LD_VAR 0 1
14600: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14601: GO 14603
14603: DISABLE
14604: LD_INT 0
14606: PPUSH
14607: PPUSH
14608: PPUSH
// begin if respawning_time_max = 0 then
14609: LD_EXP 28
14613: PUSH
14614: LD_INT 0
14616: EQUAL
14617: IFFALSE 14621
// exit ;
14619: GO 15029
// if respawn = 8 then
14621: LD_LOC 18
14625: PUSH
14626: LD_INT 8
14628: EQUAL
14629: IFFALSE 14641
// respawn := 1 else
14631: LD_ADDR_LOC 18
14635: PUSH
14636: LD_INT 1
14638: ST_TO_ADDR
14639: GO 14655
// respawn := respawn + 1 ;
14641: LD_ADDR_LOC 18
14645: PUSH
14646: LD_LOC 18
14650: PUSH
14651: LD_INT 1
14653: PLUS
14654: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14655: LD_EXP 34
14659: PUSH
14660: LD_LOC 18
14664: ARRAY
14665: PUSH
14666: LD_LOC 19
14670: PUSH
14671: LD_LOC 18
14675: ARRAY
14676: NOT
14677: AND
14678: IFFALSE 15028
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14680: LD_ADDR_VAR 0 1
14684: PUSH
14685: LD_INT 21
14687: PUSH
14688: LD_INT 1
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PUSH
14695: LD_INT 22
14697: PUSH
14698: LD_LOC 18
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: LD_INT 3
14709: PUSH
14710: LD_INT 23
14712: PUSH
14713: LD_INT 0
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: PPUSH
14726: CALL_OW 69
14730: ST_TO_ADDR
// if n < number_of_people then
14731: LD_VAR 0 1
14735: PUSH
14736: LD_EXP 19
14740: LESS
14741: IFFALSE 15025
// begin aktresp := respawn ;
14743: LD_ADDR_VAR 0 3
14747: PUSH
14748: LD_LOC 18
14752: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14753: LD_ADDR_LOC 19
14757: PUSH
14758: LD_LOC 19
14762: PPUSH
14763: LD_VAR 0 3
14767: PPUSH
14768: LD_INT 1
14770: PPUSH
14771: CALL_OW 1
14775: ST_TO_ADDR
// enable ;
14776: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14777: LD_EXP 27
14781: PPUSH
14782: LD_EXP 28
14786: PPUSH
14787: CALL_OW 12
14791: PPUSH
14792: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14796: LD_ADDR_LOC 19
14800: PUSH
14801: LD_LOC 19
14805: PPUSH
14806: LD_VAR 0 3
14810: PPUSH
14811: LD_INT 0
14813: PPUSH
14814: CALL_OW 1
14818: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14819: LD_ADDR_VAR 0 2
14823: PUSH
14824: LD_INT 21
14826: PUSH
14827: LD_INT 3
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 2
14836: PUSH
14837: LD_INT 30
14839: PUSH
14840: LD_INT 0
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PUSH
14847: LD_INT 30
14849: PUSH
14850: LD_INT 1
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: LIST
14861: PUSH
14862: LD_INT 50
14864: PUSH
14865: EMPTY
14866: LIST
14867: PUSH
14868: LD_INT 22
14870: PUSH
14871: LD_VAR 0 3
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: PPUSH
14886: CALL_OW 69
14890: ST_TO_ADDR
// if dep = 0 then
14891: LD_VAR 0 2
14895: PUSH
14896: LD_INT 0
14898: EQUAL
14899: IFFALSE 14903
// exit ;
14901: GO 15029
// hc_name :=  ;
14903: LD_ADDR_OWVAR 26
14907: PUSH
14908: LD_STRING 
14910: ST_TO_ADDR
// hc_importance := 0 ;
14911: LD_ADDR_OWVAR 32
14915: PUSH
14916: LD_INT 0
14918: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14919: LD_INT 0
14921: PPUSH
14922: LD_INT 0
14924: PPUSH
14925: LD_EXP 20
14929: PUSH
14930: LD_INT 2
14932: DIV
14933: PPUSH
14934: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14938: LD_ADDR_OWVAR 21
14942: PUSH
14943: LD_EXP 35
14947: PUSH
14948: LD_VAR 0 3
14952: ARRAY
14953: ST_TO_ADDR
// uc_side := aktresp ;
14954: LD_ADDR_OWVAR 20
14958: PUSH
14959: LD_VAR 0 3
14963: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14964: LD_ADDR_VAR 0 2
14968: PUSH
14969: LD_VAR 0 2
14973: PUSH
14974: LD_INT 1
14976: PPUSH
14977: LD_VAR 0 2
14981: PPUSH
14982: CALL_OW 12
14986: ARRAY
14987: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14988: CALL_OW 44
14992: PPUSH
14993: LD_VAR 0 2
14997: PPUSH
14998: CALL_OW 250
15002: PPUSH
15003: LD_VAR 0 2
15007: PPUSH
15008: CALL_OW 251
15012: PPUSH
15013: LD_INT 7
15015: PPUSH
15016: LD_INT 1
15018: PPUSH
15019: CALL_OW 50
// end else
15023: GO 15026
// enable ;
15025: ENABLE
// end else
15026: GO 15029
// enable ;
15028: ENABLE
// end ;
15029: PPOPN 3
15031: END
