// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 368
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: LD_INT 6
 351: PUSH
 352: LD_INT 7
 354: PUSH
 355: LD_INT 8
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 368: LD_ADDR_EXP 36
 372: PUSH
 373: LD_EXP 31
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: EMPTY
 382: LIST
 383: DIFF
 384: PUSH
 385: LD_INT 1
 387: GREATER
 388: ST_TO_ADDR
// if Multiplayer then
 389: LD_OWVAR 4
 393: IFFALSE 600
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 395: LD_ADDR_EXP 1
 399: PUSH
 400: LD_INT 0
 402: PPUSH
 403: CALL_OW 426
 407: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 408: LD_ADDR_EXP 2
 412: PUSH
 413: LD_INT 1
 415: PPUSH
 416: CALL_OW 426
 420: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 421: LD_ADDR_EXP 3
 425: PUSH
 426: LD_INT 2
 428: PPUSH
 429: CALL_OW 426
 433: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 434: LD_ADDR_EXP 4
 438: PUSH
 439: LD_INT 3
 441: PPUSH
 442: CALL_OW 426
 446: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 447: LD_ADDR_EXP 5
 451: PUSH
 452: LD_INT 4
 454: PPUSH
 455: CALL_OW 426
 459: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 460: LD_ADDR_EXP 6
 464: PUSH
 465: LD_INT 5
 467: PPUSH
 468: CALL_OW 426
 472: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 473: LD_ADDR_EXP 7
 477: PUSH
 478: LD_INT 6
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 486: LD_ADDR_EXP 8
 490: PUSH
 491: LD_INT 10
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 499: LD_ADDR_EXP 9
 503: PUSH
 504: LD_INT 11
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 512: LD_ADDR_EXP 10
 516: PUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 525: LD_ADDR_EXP 11
 529: PUSH
 530: LD_INT 13
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 538: LD_ADDR_EXP 12
 542: PUSH
 543: LD_INT 14
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 551: LD_ADDR_EXP 13
 555: PUSH
 556: LD_INT 17
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 564: LD_ADDR_EXP 14
 568: PUSH
 569: LD_INT 20
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 577: LD_ADDR_VAR 0 3
 581: PUSH
 582: LD_INT 22
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// def_win_rules = 0 ;
 590: LD_ADDR_EXP 30
 594: PUSH
 595: LD_INT 0
 597: ST_TO_ADDR
// end else
 598: GO 732
// begin Randomize ;
 600: CALL_OW 10
// def_base_level := 2 ;
 604: LD_ADDR_EXP 1
 608: PUSH
 609: LD_INT 2
 611: ST_TO_ADDR
// def_amount_of_people := 2 ;
 612: LD_ADDR_EXP 2
 616: PUSH
 617: LD_INT 2
 619: ST_TO_ADDR
// def_skill_level := 1 ;
 620: LD_ADDR_EXP 3
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// def_starting_resources := 2 ;
 628: LD_ADDR_EXP 4
 632: PUSH
 633: LD_INT 2
 635: ST_TO_ADDR
// def_shipments_density := 50 ;
 636: LD_ADDR_EXP 5
 640: PUSH
 641: LD_INT 50
 643: ST_TO_ADDR
// def_extra_oil_deposits := 2 ;
 644: LD_ADDR_EXP 6
 648: PUSH
 649: LD_INT 2
 651: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 2
 659: ST_TO_ADDR
// def_shared_vision := 1 ;
 660: LD_ADDR_EXP 8
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// def_morale_flags := 1 ;
 668: LD_ADDR_EXP 9
 672: PUSH
 673: LD_INT 1
 675: ST_TO_ADDR
// def_siberite_detection := 1 ;
 676: LD_ADDR_EXP 10
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// def_people_respawning := 2 ;
 684: LD_ADDR_EXP 11
 688: PUSH
 689: LD_INT 2
 691: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 692: LD_ADDR_EXP 12
 696: PUSH
 697: LD_INT 3
 699: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 700: LD_ADDR_EXP 13
 704: PUSH
 705: LD_INT 2
 707: ST_TO_ADDR
// def_builduptime := 1 ;
 708: LD_ADDR_EXP 14
 712: PUSH
 713: LD_INT 1
 715: ST_TO_ADDR
// tech_level = 4 ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_INT 4
 723: ST_TO_ADDR
// def_win_rules = 0 ;
 724: LD_ADDR_EXP 30
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// end ; if isSGUI then
 732: LD_OWVAR 83
 736: IFFALSE 744
// setMpTechs ( ) else
 738: CALL 9614 0 0
 742: GO 757
// SetMpTechLevel ( tech_level + 1 ) ;
 744: LD_VAR 0 3
 748: PUSH
 749: LD_INT 1
 751: PLUS
 752: PPUSH
 753: CALL 9761 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 757: LD_ADDR_EXP 17
 761: PUSH
 762: LD_INT 0
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 1
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_EXP 1
 780: PUSH
 781: LD_INT 1
 783: PLUS
 784: ARRAY
 785: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 786: LD_ADDR_EXP 18
 790: PUSH
 791: LD_INT 0
 793: PUSH
 794: LD_INT 0
 796: PUSH
 797: LD_INT 3
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: LIST
 804: PUSH
 805: LD_EXP 1
 809: PUSH
 810: LD_INT 1
 812: PLUS
 813: ARRAY
 814: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 815: LD_ADDR_EXP 19
 819: PUSH
 820: LD_INT 9
 822: PUSH
 823: LD_INT 12
 825: PUSH
 826: LD_INT 15
 828: PUSH
 829: LD_INT 24
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: LD_EXP 2
 842: PUSH
 843: LD_INT 1
 845: PLUS
 846: ARRAY
 847: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 848: LD_ADDR_EXP 20
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_EXP 3
 875: PUSH
 876: LD_INT 1
 878: PLUS
 879: ARRAY
 880: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 881: LD_ADDR_EXP 22
 885: PUSH
 886: LD_INT 0
 888: PUSH
 889: LD_INT 0
 891: PUSH
 892: LD_INT 0
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 30
 902: PUSH
 903: LD_INT 0
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 50
 916: PUSH
 917: LD_INT 20
 919: PUSH
 920: LD_INT 0
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PUSH
 928: LD_INT 80
 930: PUSH
 931: LD_INT 40
 933: PUSH
 934: LD_INT 20
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: PUSH
 948: LD_EXP 4
 952: PUSH
 953: LD_INT 1
 955: PLUS
 956: ARRAY
 957: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 958: LD_ADDR_EXP 21
 962: PUSH
 963: LD_INT 10
 965: PUSH
 966: EMPTY
 967: LIST
 968: PUSH
 969: LD_INT 7
 971: PUSH
 972: LD_INT 14
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 6
 981: PUSH
 982: LD_INT 12
 984: PUSH
 985: LD_INT 18
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 10
 998: PUSH
 999: LD_INT 15
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: PUSH
1017: LD_EXP 4
1021: PUSH
1022: LD_INT 1
1024: PLUS
1025: ARRAY
1026: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
1027: LD_ADDR_EXP 23
1031: PUSH
1032: LD_INT 150
1034: PUSH
1035: LD_EXP 5
1039: MINUS
1040: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1041: LD_ADDR_EXP 27
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: LD_INT 10500
1051: PUSH
1052: LD_INT 6300
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: PUSH
1060: LD_EXP 11
1064: PUSH
1065: LD_INT 1
1067: PLUS
1068: ARRAY
1069: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1070: LD_ADDR_EXP 28
1074: PUSH
1075: LD_INT 0
1077: PUSH
1078: LD_INT 31500
1080: PUSH
1081: LD_INT 10500
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_EXP 11
1093: PUSH
1094: LD_INT 1
1096: PLUS
1097: ARRAY
1098: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1099: LD_ADDR_EXP 25
1103: PUSH
1104: LD_INT 0
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 3
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_EXP 12
1126: PUSH
1127: LD_INT 1
1129: PLUS
1130: ARRAY
1131: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1132: LD_ADDR_EXP 24
1136: PUSH
1137: LD_INT 1
1139: NEG
1140: PUSH
1141: LD_INT 350
1143: PUSH
1144: LD_INT 700
1146: PUSH
1147: LD_INT 1400
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_EXP 9
1164: PUSH
1165: LD_INT 1
1167: PLUS
1168: ARRAY
1169: ST_TO_ADDR
// battle_flags_id := [ ] ;
1170: LD_ADDR_EXP 44
1174: PUSH
1175: EMPTY
1176: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1177: LD_EXP 13
1181: PUSH
1182: LD_INT 0
1184: EQUAL
1185: IFFALSE 1197
// siberite_bomb_Delay = 0 else
1187: LD_ADDR_EXP 29
1191: PUSH
1192: LD_INT 0
1194: ST_TO_ADDR
1195: GO 1219
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1197: LD_ADDR_EXP 29
1201: PUSH
1202: LD_EXP 13
1206: PUSH
1207: LD_INT 1
1209: MINUS
1210: PUSH
1211: LD_INT 21000
1213: MUL
1214: PUSH
1215: LD_INT 1
1217: PLUS
1218: ST_TO_ADDR
// end ;
1219: LD_VAR 0 1
1223: RET
// function init_map ; var i , j ; begin
1224: LD_INT 0
1226: PPUSH
1227: PPUSH
1228: PPUSH
// normal_oil_deposits_locations := [ [ 61 , 54 ] , [ 94 , 26 ] , [ 156 , 50 ] , [ 214 , 114 ] , [ 237 , 188 ] , [ 204 , 246 ] , [ 137 , 204 ] , [ 81 , 115 ] ] ;
1229: LD_ADDR_EXP 40
1233: PUSH
1234: LD_INT 61
1236: PUSH
1237: LD_INT 54
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PUSH
1244: LD_INT 94
1246: PUSH
1247: LD_INT 26
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 156
1256: PUSH
1257: LD_INT 50
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 214
1266: PUSH
1267: LD_INT 114
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PUSH
1274: LD_INT 237
1276: PUSH
1277: LD_INT 188
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: PUSH
1284: LD_INT 204
1286: PUSH
1287: LD_INT 246
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 137
1296: PUSH
1297: LD_INT 204
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 81
1306: PUSH
1307: LD_INT 115
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 69 , 46 ] , [ 116 , 26 ] , [ 184 , 67 ] , [ 222 , 144 ] , [ 234 , 214 ] , [ 219 , 232 ] , [ 160 , 212 ] , [ 93 , 148 ] ] ;
1324: LD_ADDR_EXP 41
1328: PUSH
1329: LD_INT 69
1331: PUSH
1332: LD_INT 46
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 116
1341: PUSH
1342: LD_INT 26
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 184
1351: PUSH
1352: LD_INT 67
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 222
1361: PUSH
1362: LD_INT 144
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 234
1371: PUSH
1372: LD_INT 214
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 219
1381: PUSH
1382: LD_INT 232
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 160
1391: PUSH
1392: LD_INT 212
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 93
1401: PUSH
1402: LD_INT 148
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 81 , 48 ] , [ 109 , 18 ] , [ 180 , 77 ] , [ 208 , 119 ] , [ 248 , 197 ] , [ 194 , 223 ] , [ 139 , 209 ] , [ 77 , 123 ] ] ;
1419: LD_ADDR_EXP 42
1423: PUSH
1424: LD_INT 81
1426: PUSH
1427: LD_INT 48
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 109
1436: PUSH
1437: LD_INT 18
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PUSH
1444: LD_INT 180
1446: PUSH
1447: LD_INT 77
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: PUSH
1454: LD_INT 208
1456: PUSH
1457: LD_INT 119
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 248
1466: PUSH
1467: LD_INT 197
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 194
1476: PUSH
1477: LD_INT 223
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 139
1486: PUSH
1487: LD_INT 209
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 77
1496: PUSH
1497: LD_INT 123
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 74 , 72 ] , [ 99 , 38 ] , [ 155 , 58 ] , [ 237 , 141 ] , [ 249 , 218 ] , [ 221 , 247 ] , [ 159 , 204 ] , [ 110 , 151 ] ] ;
1514: LD_ADDR_EXP 43
1518: PUSH
1519: LD_INT 74
1521: PUSH
1522: LD_INT 72
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 99
1531: PUSH
1532: LD_INT 38
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 155
1541: PUSH
1542: LD_INT 58
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 237
1551: PUSH
1552: LD_INT 141
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 249
1561: PUSH
1562: LD_INT 218
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 221
1571: PUSH
1572: LD_INT 247
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 159
1581: PUSH
1582: LD_INT 204
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 110
1591: PUSH
1592: LD_INT 151
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: ST_TO_ADDR
// depot_def := [ [ 79 , 63 , 2 ] , [ 109 , 36 , 3 ] , [ 171 , 60 , 3 ] , [ 222 , 128 , 4 ] , [ 239 , 202 , 5 ] , [ 208 , 233 , 0 ] , [ 145 , 203 , 0 ] , [ 91 , 132 , 1 ] ] ;
1609: LD_ADDR_EXP 37
1613: PUSH
1614: LD_INT 79
1616: PUSH
1617: LD_INT 63
1619: PUSH
1620: LD_INT 2
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 109
1630: PUSH
1631: LD_INT 36
1633: PUSH
1634: LD_INT 3
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 171
1644: PUSH
1645: LD_INT 60
1647: PUSH
1648: LD_INT 3
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 222
1658: PUSH
1659: LD_INT 128
1661: PUSH
1662: LD_INT 4
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 239
1672: PUSH
1673: LD_INT 202
1675: PUSH
1676: LD_INT 5
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: PUSH
1684: LD_INT 208
1686: PUSH
1687: LD_INT 233
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 145
1700: PUSH
1701: LD_INT 203
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: PUSH
1712: LD_INT 91
1714: PUSH
1715: LD_INT 132
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: ST_TO_ADDR
// for i in depot_def do
1736: LD_ADDR_VAR 0 2
1740: PUSH
1741: LD_EXP 37
1745: PUSH
1746: FOR_IN
1747: IFFALSE 1823
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1749: LD_ADDR_EXP 39
1753: PUSH
1754: LD_EXP 39
1758: PUSH
1759: LD_VAR 0 2
1763: PUSH
1764: LD_INT 1
1766: ARRAY
1767: PPUSH
1768: LD_VAR 0 2
1772: PUSH
1773: LD_INT 3
1775: ARRAY
1776: PPUSH
1777: LD_INT 4
1779: NEG
1780: PPUSH
1781: CALL_OW 272
1785: PUSH
1786: LD_VAR 0 2
1790: PUSH
1791: LD_INT 2
1793: ARRAY
1794: PPUSH
1795: LD_VAR 0 2
1799: PUSH
1800: LD_INT 3
1802: ARRAY
1803: PPUSH
1804: LD_INT 4
1806: NEG
1807: PPUSH
1808: CALL_OW 273
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: EMPTY
1818: LIST
1819: ADD
1820: ST_TO_ADDR
1821: GO 1746
1823: POP
1824: POP
// breastworks_def := [ [ [ 90 , 82 , 5 ] , [ 92 , 76 , 5 ] , [ 91 , 66 , 4 ] ] , [ [ 111 , 52 , 5 ] , [ 118 , 52 , 5 ] , [ 123 , 51 , 5 ] ] , [ [ 158 , 69 , 0 ] , [ 165 , 78 , 0 ] , [ 172 , 82 , 0 ] ] , [ [ 206 , 121 , 1 ] , [ 208 , 130 , 1 ] , [ 214 , 139 , 1 ] ] , [ [ 223 , 192 , 2 ] , [ 224 , 187 , 2 ] , [ 232 , 188 , 2 ] ] , [ [ 195 , 218 , 2 ] , [ 200 , 215 , 2 ] , [ 208 , 220 , 3 ] ] , [ [ 141 , 186 , 3 ] , [ 150 , 192 , 2 ] , [ 157 , 199 , 4 ] ] , [ [ 99 , 125 , 4 ] , [ 105 , 136 , 4 ] , [ 108 , 147 , 5 ] ] ] ;
1825: LD_ADDR_EXP 38
1829: PUSH
1830: LD_INT 90
1832: PUSH
1833: LD_INT 82
1835: PUSH
1836: LD_INT 5
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 92
1846: PUSH
1847: LD_INT 76
1849: PUSH
1850: LD_INT 5
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 91
1860: PUSH
1861: LD_INT 66
1863: PUSH
1864: LD_INT 4
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 111
1879: PUSH
1880: LD_INT 52
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: PUSH
1891: LD_INT 118
1893: PUSH
1894: LD_INT 52
1896: PUSH
1897: LD_INT 5
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: PUSH
1905: LD_INT 123
1907: PUSH
1908: LD_INT 51
1910: PUSH
1911: LD_INT 5
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 158
1926: PUSH
1927: LD_INT 69
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: LIST
1937: PUSH
1938: LD_INT 165
1940: PUSH
1941: LD_INT 78
1943: PUSH
1944: LD_INT 0
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 172
1954: PUSH
1955: LD_INT 82
1957: PUSH
1958: LD_INT 0
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: LIST
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 206
1973: PUSH
1974: LD_INT 121
1976: PUSH
1977: LD_INT 1
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 208
1987: PUSH
1988: LD_INT 130
1990: PUSH
1991: LD_INT 1
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 214
2001: PUSH
2002: LD_INT 139
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_INT 223
2020: PUSH
2021: LD_INT 192
2023: PUSH
2024: LD_INT 2
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 224
2034: PUSH
2035: LD_INT 187
2037: PUSH
2038: LD_INT 2
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 232
2048: PUSH
2049: LD_INT 188
2051: PUSH
2052: LD_INT 2
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 195
2067: PUSH
2068: LD_INT 218
2070: PUSH
2071: LD_INT 2
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 200
2081: PUSH
2082: LD_INT 215
2084: PUSH
2085: LD_INT 2
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: LD_INT 208
2095: PUSH
2096: LD_INT 220
2098: PUSH
2099: LD_INT 3
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 141
2114: PUSH
2115: LD_INT 186
2117: PUSH
2118: LD_INT 3
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 150
2128: PUSH
2129: LD_INT 192
2131: PUSH
2132: LD_INT 2
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 157
2142: PUSH
2143: LD_INT 199
2145: PUSH
2146: LD_INT 4
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: LD_INT 99
2161: PUSH
2162: LD_INT 125
2164: PUSH
2165: LD_INT 4
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 105
2175: PUSH
2176: LD_INT 136
2178: PUSH
2179: LD_INT 4
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 108
2189: PUSH
2190: LD_INT 147
2192: PUSH
2193: LD_INT 5
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: ST_TO_ADDR
// for i = 1 to Side_Positions do
2216: LD_ADDR_VAR 0 2
2220: PUSH
2221: DOUBLE
2222: LD_INT 1
2224: DEC
2225: ST_TO_ADDR
2226: LD_EXP 34
2230: PUSH
2231: FOR_TO
2232: IFFALSE 2355
// begin if not Side_Positions [ i ] then
2234: LD_EXP 34
2238: PUSH
2239: LD_VAR 0 2
2243: ARRAY
2244: NOT
2245: IFFALSE 2249
// continue ;
2247: GO 2231
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2249: LD_EXP 40
2253: PUSH
2254: LD_EXP 34
2258: PUSH
2259: LD_VAR 0 2
2263: ARRAY
2264: ARRAY
2265: PUSH
2266: LD_INT 1
2268: ARRAY
2269: PPUSH
2270: LD_EXP 40
2274: PUSH
2275: LD_EXP 34
2279: PUSH
2280: LD_VAR 0 2
2284: ARRAY
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_INT 2
2293: PPUSH
2294: CALL_OW 62
// if def_extra_oil_deposits then
2298: LD_EXP 6
2302: IFFALSE 2353
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2304: LD_EXP 41
2308: PUSH
2309: LD_EXP 34
2313: PUSH
2314: LD_VAR 0 2
2318: ARRAY
2319: ARRAY
2320: PUSH
2321: LD_INT 1
2323: ARRAY
2324: PPUSH
2325: LD_EXP 41
2329: PUSH
2330: LD_EXP 34
2334: PUSH
2335: LD_VAR 0 2
2339: ARRAY
2340: ARRAY
2341: PUSH
2342: LD_INT 2
2344: ARRAY
2345: PPUSH
2346: LD_INT 2
2348: PPUSH
2349: CALL_OW 62
// end ;
2353: GO 2231
2355: POP
2356: POP
// if def_extra_sib_deposits then
2357: LD_EXP 7
2361: IFFALSE 2508
// for i = 1 to Side_Positions do
2363: LD_ADDR_VAR 0 2
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_EXP 34
2377: PUSH
2378: FOR_TO
2379: IFFALSE 2506
// begin if not Side_Positions [ i ] then
2381: LD_EXP 34
2385: PUSH
2386: LD_VAR 0 2
2390: ARRAY
2391: NOT
2392: IFFALSE 2396
// continue ;
2394: GO 2378
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2396: LD_EXP 42
2400: PUSH
2401: LD_EXP 34
2405: PUSH
2406: LD_VAR 0 2
2410: ARRAY
2411: ARRAY
2412: PUSH
2413: LD_INT 1
2415: ARRAY
2416: PPUSH
2417: LD_EXP 42
2421: PUSH
2422: LD_EXP 34
2426: PUSH
2427: LD_VAR 0 2
2431: ARRAY
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 3
2440: PPUSH
2441: CALL_OW 62
// if def_extra_sib_deposits = 2 then
2445: LD_EXP 7
2449: PUSH
2450: LD_INT 2
2452: EQUAL
2453: IFFALSE 2504
// CreateDepositXY ( extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2455: LD_EXP 43
2459: PUSH
2460: LD_EXP 34
2464: PUSH
2465: LD_VAR 0 2
2469: ARRAY
2470: ARRAY
2471: PUSH
2472: LD_INT 1
2474: ARRAY
2475: PPUSH
2476: LD_EXP 43
2480: PUSH
2481: LD_EXP 34
2485: PUSH
2486: LD_VAR 0 2
2490: ARRAY
2491: ARRAY
2492: PUSH
2493: LD_INT 2
2495: ARRAY
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: CALL_OW 62
// end ;
2504: GO 2378
2506: POP
2507: POP
// end ;
2508: LD_VAR 0 1
2512: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2513: LD_INT 0
2515: PPUSH
2516: PPUSH
2517: PPUSH
// if not Team_Game then
2518: LD_EXP 36
2522: NOT
2523: IFFALSE 2621
// begin for i = 1 to 8 do
2525: LD_ADDR_VAR 0 2
2529: PUSH
2530: DOUBLE
2531: LD_INT 1
2533: DEC
2534: ST_TO_ADDR
2535: LD_INT 8
2537: PUSH
2538: FOR_TO
2539: IFFALSE 2617
// for j = 1 to 8 do
2541: LD_ADDR_VAR 0 3
2545: PUSH
2546: DOUBLE
2547: LD_INT 1
2549: DEC
2550: ST_TO_ADDR
2551: LD_INT 8
2553: PUSH
2554: FOR_TO
2555: IFFALSE 2613
// if i <> j then
2557: LD_VAR 0 2
2561: PUSH
2562: LD_VAR 0 3
2566: NONEQUAL
2567: IFFALSE 2591
// SetAttitude ( i , j , att_neutral , true ) else
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_VAR 0 3
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: LD_INT 1
2584: PPUSH
2585: CALL_OW 80
2589: GO 2611
// SetAttitude ( i , j , att_friend , true ) ;
2591: LD_VAR 0 2
2595: PPUSH
2596: LD_VAR 0 3
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: CALL_OW 80
2611: GO 2554
2613: POP
2614: POP
2615: GO 2538
2617: POP
2618: POP
// end else
2619: GO 2796
// begin if def_shared_vision then
2621: LD_EXP 8
2625: IFFALSE 2690
// begin for i in Teams do
2627: LD_ADDR_VAR 0 2
2631: PUSH
2632: LD_EXP 32
2636: PUSH
2637: FOR_IN
2638: IFFALSE 2688
// for j = 2 to i do
2640: LD_ADDR_VAR 0 3
2644: PUSH
2645: DOUBLE
2646: LD_INT 2
2648: DEC
2649: ST_TO_ADDR
2650: LD_VAR 0 2
2654: PUSH
2655: FOR_TO
2656: IFFALSE 2684
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2658: LD_VAR 0 2
2662: PUSH
2663: LD_VAR 0 3
2667: ARRAY
2668: PPUSH
2669: LD_VAR 0 2
2673: PUSH
2674: LD_INT 1
2676: ARRAY
2677: PPUSH
2678: CALL_OW 343
2682: GO 2655
2684: POP
2685: POP
2686: GO 2637
2688: POP
2689: POP
// end ; for i = 1 to 8 do
2690: LD_ADDR_VAR 0 2
2694: PUSH
2695: DOUBLE
2696: LD_INT 1
2698: DEC
2699: ST_TO_ADDR
2700: LD_INT 8
2702: PUSH
2703: FOR_TO
2704: IFFALSE 2794
// for j = 1 to 8 do
2706: LD_ADDR_VAR 0 3
2710: PUSH
2711: DOUBLE
2712: LD_INT 1
2714: DEC
2715: ST_TO_ADDR
2716: LD_INT 8
2718: PUSH
2719: FOR_TO
2720: IFFALSE 2790
// if Side_Teams [ i ] = Side_Teams [ j ] then
2722: LD_EXP 31
2726: PUSH
2727: LD_VAR 0 2
2731: ARRAY
2732: PUSH
2733: LD_EXP 31
2737: PUSH
2738: LD_VAR 0 3
2742: ARRAY
2743: EQUAL
2744: IFFALSE 2768
// SetAttitude ( i , j , att_friend , true ) else
2746: LD_VAR 0 2
2750: PPUSH
2751: LD_VAR 0 3
2755: PPUSH
2756: LD_INT 1
2758: PPUSH
2759: LD_INT 1
2761: PPUSH
2762: CALL_OW 80
2766: GO 2788
// SetAttitude ( i , j , att_enemy , true ) ;
2768: LD_VAR 0 2
2772: PPUSH
2773: LD_VAR 0 3
2777: PPUSH
2778: LD_INT 2
2780: PPUSH
2781: LD_INT 1
2783: PPUSH
2784: CALL_OW 80
2788: GO 2719
2790: POP
2791: POP
2792: GO 2703
2794: POP
2795: POP
// end ; end ;
2796: LD_VAR 0 1
2800: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2801: LD_INT 0
2803: PPUSH
2804: PPUSH
2805: PPUSH
2806: PPUSH
// result := [ ] ;
2807: LD_ADDR_VAR 0 7
2811: PUSH
2812: EMPTY
2813: ST_TO_ADDR
// for i := 1 to count do
2814: LD_ADDR_VAR 0 8
2818: PUSH
2819: DOUBLE
2820: LD_INT 1
2822: DEC
2823: ST_TO_ADDR
2824: LD_VAR 0 1
2828: PUSH
2829: FOR_TO
2830: IFFALSE 3248
// begin uc_direction := Rand ( 0 , 5 ) ;
2832: LD_ADDR_OWVAR 24
2836: PUSH
2837: LD_INT 0
2839: PPUSH
2840: LD_INT 5
2842: PPUSH
2843: CALL_OW 12
2847: ST_TO_ADDR
// if commander then
2848: LD_LOC 1
2852: IFFALSE 2961
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2854: LD_ADDR_OWVAR 26
2858: PUSH
2859: LD_OWVAR 19
2863: PUSH
2864: LD_OWVAR 20
2868: ARRAY
2869: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2870: LD_INT 1
2872: PPUSH
2873: LD_INT 2
2875: PPUSH
2876: CALL_OW 12
2880: PPUSH
2881: LD_VAR 0 2
2885: PPUSH
2886: LD_EXP 20
2890: PUSH
2891: LD_INT 2
2893: PLUS
2894: PPUSH
2895: CALL_OW 380
// hc_importance := 105 ;
2899: LD_ADDR_OWVAR 32
2903: PUSH
2904: LD_INT 105
2906: ST_TO_ADDR
// commander := false ;
2907: LD_ADDR_LOC 1
2911: PUSH
2912: LD_INT 0
2914: ST_TO_ADDR
// if Multiplayer then
2915: LD_OWVAR 4
2919: IFFALSE 2959
// begin hc_gallery := MULTIAVATARS ;
2921: LD_ADDR_OWVAR 33
2925: PUSH
2926: LD_STRING MULTIAVATARS
2928: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2929: LD_ADDR_OWVAR 34
2933: PUSH
2934: LD_OWVAR 20
2938: PPUSH
2939: CALL_OW 525
2943: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2944: LD_ADDR_OWVAR 27
2948: PUSH
2949: LD_OWVAR 20
2953: PPUSH
2954: CALL_OW 526
2958: ST_TO_ADDR
// end ; end else
2959: GO 3024
// begin hc_name :=  ;
2961: LD_ADDR_OWVAR 26
2965: PUSH
2966: LD_STRING 
2968: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2969: LD_INT 1
2971: PPUSH
2972: LD_INT 2
2974: PPUSH
2975: CALL_OW 12
2979: PPUSH
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_EXP 20
2989: PPUSH
2990: CALL_OW 380
// hc_importance := 0 ;
2994: LD_ADDR_OWVAR 32
2998: PUSH
2999: LD_INT 0
3001: ST_TO_ADDR
// if Multiplayer then
3002: LD_OWVAR 4
3006: IFFALSE 3024
// begin hc_gallery :=  ;
3008: LD_ADDR_OWVAR 33
3012: PUSH
3013: LD_STRING 
3015: ST_TO_ADDR
// hc_face_number := 0 ;
3016: LD_ADDR_OWVAR 34
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3024: LD_ADDR_VAR 0 10
3028: PUSH
3029: CALL_OW 44
3033: ST_TO_ADDR
// if global_defined then
3034: LD_LOC 3
3038: IFFALSE 3178
// begin if ( cl = class_soldier ) then
3040: LD_VAR 0 2
3044: PUSH
3045: LD_INT 1
3047: EQUAL
3048: IFFALSE 3068
// j := i + soldiers_created else
3050: LD_ADDR_VAR 0 9
3054: PUSH
3055: LD_VAR 0 8
3059: PUSH
3060: LD_LOC 4
3064: PLUS
3065: ST_TO_ADDR
3066: GO 3078
// j := i ;
3068: LD_ADDR_VAR 0 9
3072: PUSH
3073: LD_VAR 0 8
3077: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3078: LD_LOC 2
3082: PUSH
3083: LD_VAR 0 2
3087: ARRAY
3088: PUSH
3089: LD_VAR 0 9
3093: ARRAY
3094: PPUSH
3095: LD_VAR 0 10
3099: PPUSH
3100: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3104: LD_VAR 0 10
3108: PPUSH
3109: LD_INT 2
3111: PPUSH
3112: LD_LOC 2
3116: PUSH
3117: LD_VAR 0 2
3121: ARRAY
3122: PUSH
3123: LD_VAR 0 9
3127: ARRAY
3128: PPUSH
3129: LD_INT 2
3131: PPUSH
3132: CALL_OW 260
3136: PPUSH
3137: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3141: LD_VAR 0 10
3145: PPUSH
3146: LD_INT 1
3148: PPUSH
3149: LD_LOC 2
3153: PUSH
3154: LD_VAR 0 2
3158: ARRAY
3159: PUSH
3160: LD_VAR 0 9
3164: ARRAY
3165: PPUSH
3166: LD_INT 1
3168: PPUSH
3169: CALL_OW 260
3173: PPUSH
3174: CALL_OW 239
// end ; if building then
3178: LD_VAR 0 6
3182: IFFALSE 3200
// PlaceHumanInUnit ( un , building ) else
3184: LD_VAR 0 10
3188: PPUSH
3189: LD_VAR 0 6
3193: PPUSH
3194: CALL_OW 52
3198: GO 3227
// PlaceUnitXYR ( un , x , y , r , false ) ;
3200: LD_VAR 0 10
3204: PPUSH
3205: LD_VAR 0 3
3209: PPUSH
3210: LD_VAR 0 4
3214: PPUSH
3215: LD_VAR 0 5
3219: PPUSH
3220: LD_INT 0
3222: PPUSH
3223: CALL_OW 50
// result := result ^ [ un ] ;
3227: LD_ADDR_VAR 0 7
3231: PUSH
3232: LD_VAR 0 7
3236: PUSH
3237: LD_VAR 0 10
3241: PUSH
3242: EMPTY
3243: LIST
3244: ADD
3245: ST_TO_ADDR
// end ;
3246: GO 2829
3248: POP
3249: POP
// if not global_defined then
3250: LD_LOC 3
3254: NOT
3255: IFFALSE 3333
// if ( global_units >= cl ) then
3257: LD_LOC 2
3261: PUSH
3262: LD_VAR 0 2
3266: GREATEREQUAL
3267: IFFALSE 3308
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3269: LD_ADDR_LOC 2
3273: PUSH
3274: LD_LOC 2
3278: PPUSH
3279: LD_VAR 0 2
3283: PPUSH
3284: LD_LOC 2
3288: PUSH
3289: LD_VAR 0 2
3293: ARRAY
3294: PUSH
3295: LD_VAR 0 7
3299: ADD
3300: PPUSH
3301: CALL_OW 1
3305: ST_TO_ADDR
3306: GO 3333
// global_units := Replace ( global_units , cl , result ) ;
3308: LD_ADDR_LOC 2
3312: PUSH
3313: LD_LOC 2
3317: PPUSH
3318: LD_VAR 0 2
3322: PPUSH
3323: LD_VAR 0 7
3327: PPUSH
3328: CALL_OW 1
3332: ST_TO_ADDR
// if commander then
3333: LD_LOC 1
3337: IFFALSE 3384
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3339: LD_ADDR_EXP 45
3343: PUSH
3344: LD_EXP 45
3348: PPUSH
3349: LD_OWVAR 20
3353: PPUSH
3354: LD_EXP 45
3358: PUSH
3359: LD_OWVAR 20
3363: ARRAY
3364: PUSH
3365: LD_VAR 0 10
3369: ADD
3370: PPUSH
3371: CALL_OW 1
3375: ST_TO_ADDR
// commander := false ;
3376: LD_ADDR_LOC 1
3380: PUSH
3381: LD_INT 0
3383: ST_TO_ADDR
// end ; end ;
3384: LD_VAR 0 7
3388: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3389: LD_INT 0
3391: PPUSH
3392: PPUSH
3393: PPUSH
3394: PPUSH
3395: PPUSH
3396: PPUSH
3397: PPUSH
3398: PPUSH
3399: PPUSH
// if side in [ 0 , 9 ] then
3400: LD_VAR 0 1
3404: PUSH
3405: LD_INT 0
3407: PUSH
3408: LD_INT 9
3410: PUSH
3411: EMPTY
3412: LIST
3413: LIST
3414: IN
3415: IFFALSE 3419
// exit ;
3417: GO 4469
// pos := Side_Positions [ side ] ;
3419: LD_ADDR_VAR 0 3
3423: PUSH
3424: LD_EXP 34
3428: PUSH
3429: LD_VAR 0 1
3433: ARRAY
3434: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3435: LD_ADDR_OWVAR 21
3439: PUSH
3440: LD_EXP 35
3444: PUSH
3445: LD_VAR 0 1
3449: ARRAY
3450: ST_TO_ADDR
// uc_side := side ;
3451: LD_ADDR_OWVAR 20
3455: PUSH
3456: LD_VAR 0 1
3460: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3461: LD_ADDR_VAR 0 4
3465: PUSH
3466: LD_EXP 37
3470: PUSH
3471: LD_VAR 0 3
3475: ARRAY
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3481: LD_ADDR_VAR 0 5
3485: PUSH
3486: LD_EXP 37
3490: PUSH
3491: LD_VAR 0 3
3495: ARRAY
3496: PUSH
3497: LD_INT 2
3499: ARRAY
3500: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3501: LD_ADDR_VAR 0 6
3505: PUSH
3506: LD_EXP 37
3510: PUSH
3511: LD_VAR 0 3
3515: ARRAY
3516: PUSH
3517: LD_INT 3
3519: ARRAY
3520: ST_TO_ADDR
// if is_depot then
3521: LD_EXP 17
3525: IFFALSE 3658
// begin bc_type = b_depot ;
3527: LD_ADDR_OWVAR 42
3531: PUSH
3532: LD_INT 0
3534: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3535: LD_ADDR_VAR 0 10
3539: PUSH
3540: LD_VAR 0 4
3544: PPUSH
3545: LD_VAR 0 5
3549: PPUSH
3550: LD_VAR 0 6
3554: PPUSH
3555: CALL_OW 47
3559: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3560: LD_VAR 0 10
3564: PPUSH
3565: LD_STRING @
3567: PUSH
3568: LD_VAR 0 1
3572: STR
3573: PPUSH
3574: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3578: LD_VAR 0 10
3582: PPUSH
3583: CALL_OW 274
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: LD_EXP 22
3595: PUSH
3596: LD_INT 1
3598: ARRAY
3599: PPUSH
3600: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3604: LD_VAR 0 10
3608: PPUSH
3609: CALL_OW 274
3613: PPUSH
3614: LD_INT 2
3616: PPUSH
3617: LD_EXP 22
3621: PUSH
3622: LD_INT 2
3624: ARRAY
3625: PPUSH
3626: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3630: LD_VAR 0 10
3634: PPUSH
3635: CALL_OW 274
3639: PPUSH
3640: LD_INT 3
3642: PPUSH
3643: LD_EXP 22
3647: PUSH
3648: LD_INT 3
3650: ARRAY
3651: PPUSH
3652: CALL_OW 277
// end else
3656: GO 3802
// begin for i := 1 to 3 do
3658: LD_ADDR_VAR 0 7
3662: PUSH
3663: DOUBLE
3664: LD_INT 1
3666: DEC
3667: ST_TO_ADDR
3668: LD_INT 3
3670: PUSH
3671: FOR_TO
3672: IFFALSE 3800
// begin r := starting_resources [ i ] ;
3674: LD_ADDR_VAR 0 8
3678: PUSH
3679: LD_EXP 22
3683: PUSH
3684: LD_VAR 0 7
3688: ARRAY
3689: ST_TO_ADDR
// while r >= 10 do
3690: LD_VAR 0 8
3694: PUSH
3695: LD_INT 10
3697: GREATEREQUAL
3698: IFFALSE 3798
// if r > 50 then
3700: LD_VAR 0 8
3704: PUSH
3705: LD_INT 50
3707: GREATER
3708: IFFALSE 3754
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3710: LD_VAR 0 7
3714: PPUSH
3715: LD_INT 5
3717: PPUSH
3718: LD_VAR 0 4
3722: PPUSH
3723: LD_VAR 0 5
3727: PPUSH
3728: LD_INT 4
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 60
// r := r - 50 ;
3738: LD_ADDR_VAR 0 8
3742: PUSH
3743: LD_VAR 0 8
3747: PUSH
3748: LD_INT 50
3750: MINUS
3751: ST_TO_ADDR
// end else
3752: GO 3796
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3754: LD_VAR 0 7
3758: PPUSH
3759: LD_VAR 0 8
3763: PUSH
3764: LD_INT 10
3766: DIV
3767: PPUSH
3768: LD_VAR 0 4
3772: PPUSH
3773: LD_VAR 0 5
3777: PPUSH
3778: LD_INT 4
3780: PPUSH
3781: LD_INT 0
3783: PPUSH
3784: CALL_OW 60
// r := 0 ;
3788: LD_ADDR_VAR 0 8
3792: PUSH
3793: LD_INT 0
3795: ST_TO_ADDR
// end ;
3796: GO 3690
// end ;
3798: GO 3671
3800: POP
3801: POP
// end ; for r in starting_crates do
3802: LD_ADDR_VAR 0 8
3806: PUSH
3807: LD_EXP 21
3811: PUSH
3812: FOR_IN
3813: IFFALSE 3845
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3815: LD_INT 1
3817: PPUSH
3818: LD_INT 5
3820: PPUSH
3821: LD_VAR 0 4
3825: PPUSH
3826: LD_VAR 0 5
3830: PPUSH
3831: LD_VAR 0 8
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: CALL_OW 60
3843: GO 3812
3845: POP
3846: POP
// if def_morale_flags then
3847: LD_EXP 9
3851: IFFALSE 3990
// begin x := start_def [ pos ] [ 1 ] ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_EXP 39
3862: PUSH
3863: LD_VAR 0 3
3867: ARRAY
3868: PUSH
3869: LD_INT 1
3871: ARRAY
3872: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3873: LD_ADDR_VAR 0 5
3877: PUSH
3878: LD_EXP 39
3882: PUSH
3883: LD_VAR 0 3
3887: ARRAY
3888: PUSH
3889: LD_INT 2
3891: ARRAY
3892: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3893: LD_VAR 0 4
3897: PPUSH
3898: LD_VAR 0 5
3902: PPUSH
3903: LD_INT 12
3905: PPUSH
3906: LD_INT 2
3908: PPUSH
3909: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3913: LD_ADDR_EXP 44
3917: PUSH
3918: LD_EXP 44
3922: PUSH
3923: LD_VAR 0 1
3927: PPUSH
3928: LD_VAR 0 4
3932: PPUSH
3933: LD_VAR 0 5
3937: PPUSH
3938: LD_INT 1
3940: PUSH
3941: LD_INT 100
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: PUSH
3948: LD_INT 2
3950: PUSH
3951: LD_INT 50
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 3
3960: PUSH
3961: LD_INT 20
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: PUSH
3968: LD_INT 20
3970: PUSH
3971: LD_INT 100
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: PPUSH
3984: CALL_OW 418
3988: ADD
3989: ST_TO_ADDR
// end ; commander := true ;
3990: LD_ADDR_LOC 1
3994: PUSH
3995: LD_INT 1
3997: ST_TO_ADDR
// soldiers_created := 0 ;
3998: LD_ADDR_LOC 4
4002: PUSH
4003: LD_INT 0
4005: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4006: LD_ADDR_VAR 0 7
4010: PUSH
4011: DOUBLE
4012: LD_INT 1
4014: DEC
4015: ST_TO_ADDR
4016: LD_EXP 18
4020: PUSH
4021: FOR_TO
4022: IFFALSE 4175
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4024: LD_ADDR_VAR 0 4
4028: PUSH
4029: LD_EXP 38
4033: PUSH
4034: LD_VAR 0 3
4038: ARRAY
4039: PUSH
4040: LD_VAR 0 7
4044: ARRAY
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4050: LD_ADDR_VAR 0 5
4054: PUSH
4055: LD_EXP 38
4059: PUSH
4060: LD_VAR 0 3
4064: ARRAY
4065: PUSH
4066: LD_VAR 0 7
4070: ARRAY
4071: PUSH
4072: LD_INT 2
4074: ARRAY
4075: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4076: LD_ADDR_VAR 0 6
4080: PUSH
4081: LD_EXP 38
4085: PUSH
4086: LD_VAR 0 3
4090: ARRAY
4091: PUSH
4092: LD_VAR 0 7
4096: ARRAY
4097: PUSH
4098: LD_INT 3
4100: ARRAY
4101: ST_TO_ADDR
// bc_type := b_breastwork ;
4102: LD_ADDR_OWVAR 42
4106: PUSH
4107: LD_INT 31
4109: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4110: LD_ADDR_VAR 0 9
4114: PUSH
4115: LD_VAR 0 4
4119: PPUSH
4120: LD_VAR 0 5
4124: PPUSH
4125: LD_VAR 0 6
4129: PPUSH
4130: CALL_OW 47
4134: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4135: LD_INT 1
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: LD_INT 0
4146: PPUSH
4147: LD_INT 0
4149: PPUSH
4150: LD_VAR 0 9
4154: PPUSH
4155: CALL 2801 0 6
// soldiers_created := soldiers_created + 1 ;
4159: LD_ADDR_LOC 4
4163: PUSH
4164: LD_LOC 4
4168: PUSH
4169: LD_INT 1
4171: PLUS
4172: ST_TO_ADDR
// end ;
4173: GO 4021
4175: POP
4176: POP
// x := start_def [ pos ] [ 1 ] ;
4177: LD_ADDR_VAR 0 4
4181: PUSH
4182: LD_EXP 39
4186: PUSH
4187: LD_VAR 0 3
4191: ARRAY
4192: PUSH
4193: LD_INT 1
4195: ARRAY
4196: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4197: LD_ADDR_VAR 0 5
4201: PUSH
4202: LD_EXP 39
4206: PUSH
4207: LD_VAR 0 3
4211: ARRAY
4212: PUSH
4213: LD_INT 2
4215: ARRAY
4216: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4217: LD_LOC 8
4221: PUSH
4222: LD_EXP 18
4226: MINUS
4227: PPUSH
4228: LD_INT 1
4230: PPUSH
4231: LD_VAR 0 4
4235: PPUSH
4236: LD_VAR 0 5
4240: PPUSH
4241: LD_INT 5
4243: PPUSH
4244: LD_INT 0
4246: PPUSH
4247: CALL 2801 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4251: LD_LOC 5
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: LD_VAR 0 4
4263: PPUSH
4264: LD_VAR 0 5
4268: PPUSH
4269: LD_INT 5
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL 2801 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4279: LD_LOC 7
4283: PPUSH
4284: LD_INT 3
4286: PPUSH
4287: LD_VAR 0 4
4291: PPUSH
4292: LD_VAR 0 5
4296: PPUSH
4297: LD_INT 5
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL 2801 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4307: LD_LOC 6
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_VAR 0 4
4319: PPUSH
4320: LD_VAR 0 5
4324: PPUSH
4325: LD_INT 5
4327: PPUSH
4328: LD_INT 0
4330: PPUSH
4331: CALL 2801 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4335: LD_EXP 10
4339: PUSH
4340: LD_INT 20
4342: PPUSH
4343: LD_VAR 0 1
4347: PPUSH
4348: CALL_OW 321
4352: PUSH
4353: LD_INT 1
4355: EQUAL
4356: AND
4357: IFFALSE 4374
// SetTech ( tech_SibDet , side , state_researched ) ;
4359: LD_INT 20
4361: PPUSH
4362: LD_VAR 0 1
4366: PPUSH
4367: LD_INT 2
4369: PPUSH
4370: CALL_OW 322
// if def_siberite_bomb = 1 then
4374: LD_EXP 13
4378: PUSH
4379: LD_INT 1
4381: EQUAL
4382: IFFALSE 4416
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4384: LD_INT 25
4386: PPUSH
4387: LD_VAR 0 1
4391: PPUSH
4392: LD_INT 1
4394: PPUSH
4395: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4399: LD_INT 73
4401: PPUSH
4402: LD_VAR 0 1
4406: PPUSH
4407: LD_INT 1
4409: PPUSH
4410: CALL_OW 322
// end else
4414: GO 4446
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4416: LD_INT 25
4418: PPUSH
4419: LD_VAR 0 1
4423: PPUSH
4424: LD_INT 0
4426: PPUSH
4427: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4431: LD_INT 73
4433: PPUSH
4434: LD_VAR 0 1
4438: PPUSH
4439: LD_INT 0
4441: PPUSH
4442: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4446: LD_INT 24
4448: PPUSH
4449: LD_VAR 0 1
4453: PPUSH
4454: LD_INT 0
4456: PPUSH
4457: CALL_OW 322
// global_defined := true ;
4461: LD_ADDR_LOC 3
4465: PUSH
4466: LD_INT 1
4468: ST_TO_ADDR
// end ;
4469: LD_VAR 0 2
4473: RET
// function prepare_sides ; var i ; begin
4474: LD_INT 0
4476: PPUSH
4477: PPUSH
// global_units := [ ] ;
4478: LD_ADDR_LOC 2
4482: PUSH
4483: EMPTY
4484: ST_TO_ADDR
// global_defined := false ;
4485: LD_ADDR_LOC 3
4489: PUSH
4490: LD_INT 0
4492: ST_TO_ADDR
// CountClassMembers ;
4493: CALL 4543 0 0
// for i := 1 to 8 do
4497: LD_ADDR_VAR 0 2
4501: PUSH
4502: DOUBLE
4503: LD_INT 1
4505: DEC
4506: ST_TO_ADDR
4507: LD_INT 8
4509: PUSH
4510: FOR_TO
4511: IFFALSE 4536
// if Side_Positions [ i ] then
4513: LD_EXP 34
4517: PUSH
4518: LD_VAR 0 2
4522: ARRAY
4523: IFFALSE 4534
// prepare_side ( i ) ;
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL 3389 0 1
4534: GO 4510
4536: POP
4537: POP
// end ;
4538: LD_VAR 0 1
4542: RET
// function CountClassMembers ; var Mode ; begin
4543: LD_INT 0
4545: PPUSH
4546: PPUSH
// if No_Mechs then
4547: LD_EXP 15
4551: IFFALSE 4563
// Mode := 2 else
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: LD_INT 2
4560: ST_TO_ADDR
4561: GO 4571
// Mode := 1 ;
4563: LD_ADDR_VAR 0 2
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// neng := number_of_people ;
4571: LD_ADDR_LOC 5
4575: PUSH
4576: LD_EXP 19
4580: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4581: LD_ADDR_LOC 8
4585: PUSH
4586: LD_LOC 5
4590: PUSH
4591: LD_INT 4
4593: PUSH
4594: LD_INT 3
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_VAR 0 2
4605: ARRAY
4606: DIV
4607: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4608: LD_LOC 8
4612: PUSH
4613: LD_EXP 18
4617: LESS
4618: IFFALSE 4630
// nsol := number_of_breastworks ;
4620: LD_ADDR_LOC 8
4624: PUSH
4625: LD_EXP 18
4629: ST_TO_ADDR
// neng := neng - nsol ;
4630: LD_ADDR_LOC 5
4634: PUSH
4635: LD_LOC 5
4639: PUSH
4640: LD_LOC 8
4644: MINUS
4645: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4646: LD_ADDR_LOC 6
4650: PUSH
4651: LD_LOC 5
4655: PUSH
4656: LD_INT 3
4658: PUSH
4659: LD_INT 2
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_VAR 0 2
4670: ARRAY
4671: DIV
4672: ST_TO_ADDR
// if ( nsci < 1 ) then
4673: LD_LOC 6
4677: PUSH
4678: LD_INT 1
4680: LESS
4681: IFFALSE 4691
// nsci := 1 ;
4683: LD_ADDR_LOC 6
4687: PUSH
4688: LD_INT 1
4690: ST_TO_ADDR
// neng := neng - nsci ;
4691: LD_ADDR_LOC 5
4695: PUSH
4696: LD_LOC 5
4700: PUSH
4701: LD_LOC 6
4705: MINUS
4706: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4707: LD_ADDR_LOC 7
4711: PUSH
4712: LD_LOC 5
4716: PUSH
4717: LD_INT 2
4719: DIV
4720: PUSH
4721: LD_INT 0
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PUSH
4728: LD_VAR 0 2
4732: ARRAY
4733: ST_TO_ADDR
// neng := neng - nmech ;
4734: LD_ADDR_LOC 5
4738: PUSH
4739: LD_LOC 5
4743: PUSH
4744: LD_LOC 7
4748: MINUS
4749: ST_TO_ADDR
// if ( neng < 1 ) then
4750: LD_LOC 5
4754: PUSH
4755: LD_INT 1
4757: LESS
4758: IFFALSE 4768
// neng := 1 ;
4760: LD_ADDR_LOC 5
4764: PUSH
4765: LD_INT 1
4767: ST_TO_ADDR
// end ;
4768: LD_VAR 0 1
4772: RET
// starting begin disable ( 98 ) ;
4773: LD_INT 98
4775: DISABLE_MARKED
// disable ( 99 ) ;
4776: LD_INT 99
4778: DISABLE_MARKED
// disable ( 400 ) ;
4779: LD_INT 400
4781: DISABLE_MARKED
// disable ( 401 ) ;
4782: LD_INT 401
4784: DISABLE_MARKED
// mp_selectmsg := true ;
4785: LD_ADDR_OWVAR 13
4789: PUSH
4790: LD_INT 1
4792: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4793: CALL 68 0 0
// init_map ;
4797: CALL 1224 0 0
// init_respawning ;
4801: CALL 14381 0 0
// set_shared_visions_and_alliances ;
4805: CALL 2513 0 0
// ResetFog ;
4809: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4813: LD_OWVAR 2
4817: PPUSH
4818: CALL_OW 520
// AnimateTrees ( true ) ;
4822: LD_INT 1
4824: PPUSH
4825: CALL_OW 573
// prepare_sides ;
4829: CALL 4474 0 0
// Init_Win_Condition ;
4833: CALL 8319 0 0
// ShowTimer ;
4837: CALL 7481 0 0
// music_nat := Side_Nations [ your_side ] ;
4841: LD_ADDR_OWVAR 71
4845: PUSH
4846: LD_EXP 35
4850: PUSH
4851: LD_OWVAR 2
4855: ARRAY
4856: ST_TO_ADDR
// if IAmSpec then
4857: CALL_OW 531
4861: IFFALSE 4885
// begin fogoff ( true ) ;
4863: LD_INT 1
4865: PPUSH
4866: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4870: LD_INT 130
4872: PPUSH
4873: LD_INT 100
4875: PPUSH
4876: CALL_OW 86
// enable ( 400 ) ;
4880: LD_INT 400
4882: ENABLE_MARKED
// end else
4883: GO 4931
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4885: LD_EXP 39
4889: PUSH
4890: LD_EXP 34
4894: PUSH
4895: LD_OWVAR 2
4899: ARRAY
4900: ARRAY
4901: PUSH
4902: LD_INT 1
4904: ARRAY
4905: PPUSH
4906: LD_EXP 39
4910: PUSH
4911: LD_EXP 34
4915: PUSH
4916: LD_OWVAR 2
4920: ARRAY
4921: ARRAY
4922: PUSH
4923: LD_INT 2
4925: ARRAY
4926: PPUSH
4927: CALL_OW 86
// end ; InitApeman ;
4931: CALL 5989 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
4935: LD_ADDR_EXP 55
4939: PUSH
4940: LD_INT 1
4942: PUSH
4943: LD_INT 2
4945: PUSH
4946: LD_INT 3
4948: PUSH
4949: LD_INT 4
4951: PUSH
4952: LD_INT 5
4954: PUSH
4955: LD_INT 6
4957: PUSH
4958: LD_INT 7
4960: PUSH
4961: LD_INT 8
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: ST_TO_ADDR
// BeginBuildUp ;
4974: CALL 13783 0 0
// end ;
4978: END
// every 0 0$1 do
4979: GO 4981
4981: DISABLE
// if ( def_siberite_bomb > 1 ) then
4982: LD_EXP 13
4986: PUSH
4987: LD_INT 1
4989: GREATER
4990: IFFALSE 5005
// begin wait ( siberite_bomb_Delay ) ;
4992: LD_EXP 29
4996: PPUSH
4997: CALL_OW 67
// EnableSibFiss ;
5001: CALL 5006 0 0
// end ;
5005: END
// function EnableSibFiss ; var i ; begin
5006: LD_INT 0
5008: PPUSH
5009: PPUSH
// for i := 1 to 8 do
5010: LD_ADDR_VAR 0 2
5014: PUSH
5015: DOUBLE
5016: LD_INT 1
5018: DEC
5019: ST_TO_ADDR
5020: LD_INT 8
5022: PUSH
5023: FOR_TO
5024: IFFALSE 5070
// if Side_Positions [ i ] then
5026: LD_EXP 34
5030: PUSH
5031: LD_VAR 0 2
5035: ARRAY
5036: IFFALSE 5068
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5038: LD_INT 25
5040: PPUSH
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_INT 1
5048: PPUSH
5049: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5053: LD_INT 73
5055: PPUSH
5056: LD_VAR 0 2
5060: PPUSH
5061: LD_INT 1
5063: PPUSH
5064: CALL_OW 322
// end ;
5068: GO 5023
5070: POP
5071: POP
// end ; end_of_file
5072: LD_VAR 0 1
5076: RET
// every 0 0$25 + 0 0$1.0 do var i , areas ;
5077: GO 5079
5079: DISABLE
5080: LD_INT 0
5082: PPUSH
5083: PPUSH
// begin areas := [ Between18 , Between21 , Between32 , Between43 , Between54 , Between65 , Between76 , Between87 ] ;
5084: LD_ADDR_VAR 0 2
5088: PUSH
5089: LD_INT 9
5091: PUSH
5092: LD_INT 10
5094: PUSH
5095: LD_INT 11
5097: PUSH
5098: LD_INT 12
5100: PUSH
5101: LD_INT 13
5103: PUSH
5104: LD_INT 14
5106: PUSH
5107: LD_INT 15
5109: PUSH
5110: LD_INT 16
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: ST_TO_ADDR
// for i := 1 to 8 do
5123: LD_ADDR_VAR 0 1
5127: PUSH
5128: DOUBLE
5129: LD_INT 1
5131: DEC
5132: ST_TO_ADDR
5133: LD_INT 8
5135: PUSH
5136: FOR_TO
5137: IFFALSE 5271
// begin if FilterUnitsInArea ( areas [ i ] , [ [ f_not , [ f_side , 0 ] ] , [ f_type , unit_building ] ] ) and GetResourceArea ( areas [ i ] , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5139: LD_VAR 0 2
5143: PUSH
5144: LD_VAR 0 1
5148: ARRAY
5149: PPUSH
5150: LD_INT 3
5152: PUSH
5153: LD_INT 22
5155: PUSH
5156: LD_INT 0
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: LD_INT 21
5169: PUSH
5170: LD_INT 3
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PPUSH
5181: CALL_OW 70
5185: PUSH
5186: LD_VAR 0 2
5190: PUSH
5191: LD_VAR 0 1
5195: ARRAY
5196: PPUSH
5197: LD_INT 1
5199: PPUSH
5200: CALL_OW 287
5204: PUSH
5205: LD_INT 200
5207: PUSH
5208: LD_EXP 23
5212: MINUS
5213: PUSH
5214: LD_INT 50
5216: DIVREAL
5217: PUSH
5218: LD_INT 5
5220: MUL
5221: LESS
5222: AND
5223: IFFALSE 5269
// begin wait ( rand ( 0 0$2 , 0 0$6 ) ) ;
5225: LD_INT 70
5227: PPUSH
5228: LD_INT 210
5230: PPUSH
5231: CALL_OW 12
5235: PPUSH
5236: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , areas [ i ] , true ) ;
5240: LD_INT 2
5242: PPUSH
5243: LD_INT 5
5245: PPUSH
5246: CALL_OW 12
5250: PPUSH
5251: LD_VAR 0 2
5255: PUSH
5256: LD_VAR 0 1
5260: ARRAY
5261: PPUSH
5262: LD_INT 1
5264: PPUSH
5265: CALL_OW 55
// end ; end ;
5269: GO 5136
5271: POP
5272: POP
// if GetResourceArea ( Center , mat_cans ) < ( ( 400 - shipments_density ) / 25 * 5 ) then
5273: LD_INT 17
5275: PPUSH
5276: LD_INT 1
5278: PPUSH
5279: CALL_OW 287
5283: PUSH
5284: LD_INT 400
5286: PUSH
5287: LD_EXP 23
5291: MINUS
5292: PUSH
5293: LD_INT 25
5295: DIVREAL
5296: PUSH
5297: LD_INT 5
5299: MUL
5300: LESS
5301: IFFALSE 5316
// CreateCratesArea ( 5 , Center , true ) ;
5303: LD_INT 5
5305: PPUSH
5306: LD_INT 17
5308: PPUSH
5309: LD_INT 1
5311: PPUSH
5312: CALL_OW 55
// wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
5316: LD_INT 350
5318: PPUSH
5319: LD_INT 525
5321: PPUSH
5322: CALL_OW 12
5326: PPUSH
5327: CALL_OW 67
// CreateCratesAnyWhere ( rand ( 1 , 5 ) , true ) ;
5331: LD_INT 1
5333: PPUSH
5334: LD_INT 5
5336: PPUSH
5337: CALL_OW 12
5341: PPUSH
5342: LD_INT 1
5344: PPUSH
5345: CALL_OW 57
// enable ;
5349: ENABLE
// end ;
5350: PPOPN 2
5352: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5353: GO 5355
5355: DISABLE
5356: LD_INT 0
5358: PPUSH
5359: PPUSH
// begin case tick of 1 .. 1 1$0 :
5360: LD_OWVAR 1
5364: PUSH
5365: LD_INT 1
5367: DOUBLE
5368: GREATEREQUAL
5369: IFFALSE 5377
5371: LD_INT 2100
5373: DOUBLE
5374: LESSEQUAL
5375: IFTRUE 5379
5377: GO 5407
5379: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5380: LD_EXP 23
5384: PUSH
5385: LD_INT 100
5387: DIVREAL
5388: PUSH
5389: LD_INT 525
5391: PPUSH
5392: LD_INT 1050
5394: PPUSH
5395: CALL_OW 12
5399: MUL
5400: PPUSH
5401: CALL_OW 67
5405: GO 5709
5407: LD_INT 2100
5409: PUSH
5410: LD_INT 1
5412: PLUS
5413: DOUBLE
5414: GREATEREQUAL
5415: IFFALSE 5423
5417: LD_INT 10500
5419: DOUBLE
5420: LESSEQUAL
5421: IFTRUE 5425
5423: GO 5453
5425: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5426: LD_EXP 23
5430: PUSH
5431: LD_INT 100
5433: DIVREAL
5434: PUSH
5435: LD_INT 1050
5437: PPUSH
5438: LD_INT 1750
5440: PPUSH
5441: CALL_OW 12
5445: MUL
5446: PPUSH
5447: CALL_OW 67
5451: GO 5709
5453: LD_INT 10500
5455: PUSH
5456: LD_INT 1
5458: PLUS
5459: DOUBLE
5460: GREATEREQUAL
5461: IFFALSE 5469
5463: LD_INT 21000
5465: DOUBLE
5466: LESSEQUAL
5467: IFTRUE 5471
5469: GO 5499
5471: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5472: LD_EXP 23
5476: PUSH
5477: LD_INT 100
5479: DIVREAL
5480: PUSH
5481: LD_INT 1750
5483: PPUSH
5484: LD_INT 2100
5486: PPUSH
5487: CALL_OW 12
5491: MUL
5492: PPUSH
5493: CALL_OW 67
5497: GO 5709
5499: LD_INT 21000
5501: PUSH
5502: LD_INT 1
5504: PLUS
5505: DOUBLE
5506: GREATEREQUAL
5507: IFFALSE 5515
5509: LD_INT 42000
5511: DOUBLE
5512: LESSEQUAL
5513: IFTRUE 5517
5515: GO 5545
5517: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5518: LD_EXP 23
5522: PUSH
5523: LD_INT 100
5525: DIVREAL
5526: PUSH
5527: LD_INT 2100
5529: PPUSH
5530: LD_INT 2275
5532: PPUSH
5533: CALL_OW 12
5537: MUL
5538: PPUSH
5539: CALL_OW 67
5543: GO 5709
5545: LD_INT 42000
5547: PUSH
5548: LD_INT 1
5550: PLUS
5551: DOUBLE
5552: GREATEREQUAL
5553: IFFALSE 5561
5555: LD_INT 63000
5557: DOUBLE
5558: LESSEQUAL
5559: IFTRUE 5563
5561: GO 5591
5563: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5564: LD_EXP 23
5568: PUSH
5569: LD_INT 100
5571: DIVREAL
5572: PUSH
5573: LD_INT 2275
5575: PPUSH
5576: LD_INT 2450
5578: PPUSH
5579: CALL_OW 12
5583: MUL
5584: PPUSH
5585: CALL_OW 67
5589: GO 5709
5591: LD_INT 63000
5593: PUSH
5594: LD_INT 1
5596: PLUS
5597: DOUBLE
5598: GREATEREQUAL
5599: IFFALSE 5607
5601: LD_INT 105000
5603: DOUBLE
5604: LESSEQUAL
5605: IFTRUE 5609
5607: GO 5637
5609: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5610: LD_EXP 23
5614: PUSH
5615: LD_INT 100
5617: DIVREAL
5618: PUSH
5619: LD_INT 2450
5621: PPUSH
5622: LD_INT 2800
5624: PPUSH
5625: CALL_OW 12
5629: MUL
5630: PPUSH
5631: CALL_OW 67
5635: GO 5709
5637: LD_INT 105000
5639: PUSH
5640: LD_INT 1
5642: PLUS
5643: DOUBLE
5644: GREATEREQUAL
5645: IFFALSE 5653
5647: LD_INT 630000
5649: DOUBLE
5650: LESSEQUAL
5651: IFTRUE 5655
5653: GO 5683
5655: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5656: LD_EXP 23
5660: PUSH
5661: LD_INT 100
5663: DIVREAL
5664: PUSH
5665: LD_INT 2800
5667: PPUSH
5668: LD_INT 3500
5670: PPUSH
5671: CALL_OW 12
5675: MUL
5676: PPUSH
5677: CALL_OW 67
5681: GO 5709
5683: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5684: LD_EXP 23
5688: PUSH
5689: LD_INT 100
5691: DIVREAL
5692: PUSH
5693: LD_INT 3500
5695: PPUSH
5696: LD_INT 3850
5698: PPUSH
5699: CALL_OW 12
5703: MUL
5704: PPUSH
5705: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5709: LD_ADDR_VAR 0 2
5713: PUSH
5714: LD_INT 3
5716: PPUSH
5717: LD_INT 5
5719: PPUSH
5720: CALL_OW 12
5724: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5725: LD_ADDR_VAR 0 1
5729: PUSH
5730: LD_EXP 34
5734: PUSH
5735: LD_INT 0
5737: PUSH
5738: EMPTY
5739: LIST
5740: DIFF
5741: PUSH
5742: FOR_IN
5743: IFFALSE 5792
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5745: LD_VAR 0 2
5749: PPUSH
5750: LD_EXP 39
5754: PUSH
5755: LD_VAR 0 1
5759: ARRAY
5760: PUSH
5761: LD_INT 1
5763: ARRAY
5764: PPUSH
5765: LD_EXP 39
5769: PUSH
5770: LD_VAR 0 1
5774: ARRAY
5775: PUSH
5776: LD_INT 2
5778: ARRAY
5779: PPUSH
5780: LD_INT 20
5782: PPUSH
5783: LD_INT 1
5785: PPUSH
5786: CALL_OW 56
5790: GO 5742
5792: POP
5793: POP
// enable ;
5794: ENABLE
// end ; end_of_file
5795: PPOPN 2
5797: END
// every 20 20$00 trigger apemanNumber do
5798: LD_EXP 46
5802: IFFALSE 5835
5804: GO 5806
5806: DISABLE
// begin enable ;
5807: ENABLE
// if apeLevel >= 8 then
5808: LD_EXP 51
5812: PUSH
5813: LD_INT 8
5815: GREATEREQUAL
5816: IFFALSE 5821
// disable else
5818: DISABLE
5819: GO 5835
// apeLevel := apeLevel + 1 ;
5821: LD_ADDR_EXP 51
5825: PUSH
5826: LD_EXP 51
5830: PUSH
5831: LD_INT 1
5833: PLUS
5834: ST_TO_ADDR
// end ;
5835: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5836: LD_EXP 46
5840: PUSH
5841: LD_EXP 47
5845: LESS
5846: IFFALSE 5986
5848: GO 5850
5850: DISABLE
5851: LD_INT 0
5853: PPUSH
5854: PPUSH
5855: PPUSH
5856: PPUSH
// begin enable ;
5857: ENABLE
// for i := 1 to apemanPos do
5858: LD_ADDR_VAR 0 1
5862: PUSH
5863: DOUBLE
5864: LD_INT 1
5866: DEC
5867: ST_TO_ADDR
5868: LD_EXP 49
5872: PUSH
5873: FOR_TO
5874: IFFALSE 5984
// begin if apemanPlayerCount [ i ] then
5876: LD_EXP 50
5880: PUSH
5881: LD_VAR 0 1
5885: ARRAY
5886: IFFALSE 5982
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5888: LD_EXP 50
5892: PUSH
5893: LD_VAR 0 1
5897: ARRAY
5898: PUSH
5899: LD_EXP 49
5903: PUSH
5904: LD_VAR 0 1
5908: ARRAY
5909: GREATER
5910: IFFALSE 5982
// begin ape := PrepareApeman ;
5912: LD_ADDR_VAR 0 2
5916: PUSH
5917: CALL 6505 0 0
5921: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5922: LD_VAR 0 2
5926: PPUSH
5927: LD_EXP 52
5931: PUSH
5932: LD_VAR 0 1
5936: ARRAY
5937: PPUSH
5938: LD_INT 0
5940: PPUSH
5941: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5945: LD_ADDR_EXP 49
5949: PUSH
5950: LD_EXP 49
5954: PPUSH
5955: LD_VAR 0 1
5959: PPUSH
5960: LD_EXP 49
5964: PUSH
5965: LD_VAR 0 1
5969: ARRAY
5970: PUSH
5971: LD_VAR 0 2
5975: UNION
5976: PPUSH
5977: CALL_OW 1
5981: ST_TO_ADDR
// end ; end ; end ;
5982: GO 5873
5984: POP
5985: POP
// end ;
5986: PPOPN 4
5988: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5989: LD_INT 0
5991: PPUSH
5992: PPUSH
5993: PPUSH
5994: PPUSH
5995: PPUSH
5996: PPUSH
5997: PPUSH
// playersAmount := 0 ;
5998: LD_ADDR_VAR 0 3
6002: PUSH
6003: LD_INT 0
6005: ST_TO_ADDR
// _apeAreas := [ Between18 , Between21 , Between32 , Between43 , Between54 , Between65 , Between76 , Between87 ] ;
6006: LD_ADDR_VAR 0 7
6010: PUSH
6011: LD_INT 9
6013: PUSH
6014: LD_INT 10
6016: PUSH
6017: LD_INT 11
6019: PUSH
6020: LD_INT 12
6022: PUSH
6023: LD_INT 13
6025: PUSH
6026: LD_INT 14
6028: PUSH
6029: LD_INT 15
6031: PUSH
6032: LD_INT 16
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6045: LD_ADDR_EXP 52
6049: PUSH
6050: LD_INT 0
6052: PUSH
6053: LD_INT 0
6055: PUSH
6056: LD_INT 0
6058: PUSH
6059: LD_INT 0
6061: PUSH
6062: LD_INT 0
6064: PUSH
6065: LD_INT 0
6067: PUSH
6068: LD_INT 0
6070: PUSH
6071: LD_INT 0
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: ST_TO_ADDR
// for j = 1 to Side_Positions do
6084: LD_ADDR_VAR 0 4
6088: PUSH
6089: DOUBLE
6090: LD_INT 1
6092: DEC
6093: ST_TO_ADDR
6094: LD_EXP 34
6098: PUSH
6099: FOR_TO
6100: IFFALSE 6167
// if Side_Positions [ j ] then
6102: LD_EXP 34
6106: PUSH
6107: LD_VAR 0 4
6111: ARRAY
6112: IFFALSE 6165
// begin playersAmount := playersAmount + 1 ;
6114: LD_ADDR_VAR 0 3
6118: PUSH
6119: LD_VAR 0 3
6123: PUSH
6124: LD_INT 1
6126: PLUS
6127: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6128: LD_ADDR_EXP 52
6132: PUSH
6133: LD_EXP 52
6137: PPUSH
6138: LD_VAR 0 4
6142: PPUSH
6143: LD_VAR 0 7
6147: PUSH
6148: LD_EXP 34
6152: PUSH
6153: LD_VAR 0 4
6157: ARRAY
6158: ARRAY
6159: PPUSH
6160: CALL_OW 1
6164: ST_TO_ADDR
// end ;
6165: GO 6099
6167: POP
6168: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6169: LD_ADDR_EXP 48
6173: PUSH
6174: LD_INT 3
6176: PUSH
6177: LD_EXP 25
6181: MUL
6182: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6183: LD_ADDR_EXP 46
6187: PUSH
6188: LD_VAR 0 3
6192: PUSH
6193: LD_EXP 48
6197: MUL
6198: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6199: LD_ADDR_EXP 47
6203: PUSH
6204: LD_EXP 46
6208: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6209: LD_ADDR_EXP 49
6213: PUSH
6214: LD_INT 0
6216: PUSH
6217: LD_INT 0
6219: PUSH
6220: LD_INT 0
6222: PUSH
6223: LD_INT 0
6225: PUSH
6226: LD_INT 0
6228: PUSH
6229: LD_INT 0
6231: PUSH
6232: LD_INT 0
6234: PUSH
6235: LD_INT 0
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6248: LD_ADDR_EXP 50
6252: PUSH
6253: LD_INT 0
6255: PUSH
6256: LD_INT 0
6258: PUSH
6259: LD_INT 0
6261: PUSH
6262: LD_INT 0
6264: PUSH
6265: LD_INT 0
6267: PUSH
6268: LD_INT 0
6270: PUSH
6271: LD_INT 0
6273: PUSH
6274: LD_INT 0
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: ST_TO_ADDR
// apeLevel := 1 ;
6287: LD_ADDR_EXP 51
6291: PUSH
6292: LD_INT 1
6294: ST_TO_ADDR
// if not apemanNumber then
6295: LD_EXP 46
6299: NOT
6300: IFFALSE 6304
// exit ;
6302: GO 6500
// for i := 1 to apemanPerPlayer do
6304: LD_ADDR_VAR 0 2
6308: PUSH
6309: DOUBLE
6310: LD_INT 1
6312: DEC
6313: ST_TO_ADDR
6314: LD_EXP 48
6318: PUSH
6319: FOR_TO
6320: IFFALSE 6498
// begin for j := 1 to Side_Positions do
6322: LD_ADDR_VAR 0 4
6326: PUSH
6327: DOUBLE
6328: LD_INT 1
6330: DEC
6331: ST_TO_ADDR
6332: LD_EXP 34
6336: PUSH
6337: FOR_TO
6338: IFFALSE 6494
// if Side_Positions [ j ] then
6340: LD_EXP 34
6344: PUSH
6345: LD_VAR 0 4
6349: ARRAY
6350: IFFALSE 6492
// begin pos := Side_Positions [ j ] ;
6352: LD_ADDR_VAR 0 6
6356: PUSH
6357: LD_EXP 34
6361: PUSH
6362: LD_VAR 0 4
6366: ARRAY
6367: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6368: LD_ADDR_EXP 50
6372: PUSH
6373: LD_EXP 50
6377: PPUSH
6378: LD_VAR 0 4
6382: PPUSH
6383: LD_EXP 50
6387: PUSH
6388: LD_VAR 0 4
6392: ARRAY
6393: PUSH
6394: LD_INT 1
6396: PLUS
6397: PPUSH
6398: CALL_OW 1
6402: ST_TO_ADDR
// ape := PrepareApeman ;
6403: LD_ADDR_VAR 0 5
6407: PUSH
6408: CALL 6505 0 0
6412: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6413: LD_ADDR_EXP 49
6417: PUSH
6418: LD_EXP 49
6422: PPUSH
6423: LD_VAR 0 4
6427: PPUSH
6428: LD_EXP 49
6432: PUSH
6433: LD_VAR 0 4
6437: ARRAY
6438: PPUSH
6439: LD_EXP 49
6443: PUSH
6444: LD_VAR 0 4
6448: ARRAY
6449: PUSH
6450: LD_INT 1
6452: PLUS
6453: PPUSH
6454: LD_VAR 0 5
6458: PPUSH
6459: CALL_OW 1
6463: PPUSH
6464: CALL_OW 1
6468: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6469: LD_VAR 0 5
6473: PPUSH
6474: LD_EXP 52
6478: PUSH
6479: LD_VAR 0 4
6483: ARRAY
6484: PPUSH
6485: LD_INT 0
6487: PPUSH
6488: CALL_OW 49
// end ;
6492: GO 6337
6494: POP
6495: POP
// end ;
6496: GO 6319
6498: POP
6499: POP
// end ;
6500: LD_VAR 0 1
6504: RET
// export function PrepareApeman ; var bonus ; begin
6505: LD_INT 0
6507: PPUSH
6508: PPUSH
// uc_side := 0 ;
6509: LD_ADDR_OWVAR 20
6513: PUSH
6514: LD_INT 0
6516: ST_TO_ADDR
// uc_nation := 0 ;
6517: LD_ADDR_OWVAR 21
6521: PUSH
6522: LD_INT 0
6524: ST_TO_ADDR
// InitHc ;
6525: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6529: LD_ADDR_VAR 0 2
6533: PUSH
6534: LD_INT 1
6536: NEG
6537: PUSH
6538: LD_INT 0
6540: PUSH
6541: LD_INT 1
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: LIST
6548: PUSH
6549: LD_INT 25
6551: PUSH
6552: LD_INT 12
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: PPUSH
6559: CALL_OW 69
6563: PUSH
6564: LD_INT 3
6566: MOD
6567: PUSH
6568: LD_INT 1
6570: PLUS
6571: ARRAY
6572: ST_TO_ADDR
// hc_class := class_apeman ;
6573: LD_ADDR_OWVAR 28
6577: PUSH
6578: LD_INT 12
6580: ST_TO_ADDR
// hc_gallery :=  ;
6581: LD_ADDR_OWVAR 33
6585: PUSH
6586: LD_STRING 
6588: ST_TO_ADDR
// hc_name :=  ;
6589: LD_ADDR_OWVAR 26
6593: PUSH
6594: LD_STRING 
6596: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6597: LD_ADDR_OWVAR 31
6601: PUSH
6602: LD_EXP 51
6606: PUSH
6607: LD_VAR 0 2
6611: PLUS
6612: PUSH
6613: LD_EXP 51
6617: PUSH
6618: LD_VAR 0 2
6622: PLUS
6623: PUSH
6624: LD_EXP 51
6628: PUSH
6629: LD_VAR 0 2
6633: PLUS
6634: PUSH
6635: LD_EXP 51
6639: PUSH
6640: LD_VAR 0 2
6644: PLUS
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6652: LD_ADDR_OWVAR 35
6656: PUSH
6657: LD_INT 10
6659: PUSH
6660: LD_VAR 0 2
6664: MUL
6665: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6666: LD_ADDR_OWVAR 29
6670: PUSH
6671: LD_INT 12
6673: PUSH
6674: LD_INT 12
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: ST_TO_ADDR
// result := CreateHuman ;
6681: LD_ADDR_VAR 0 1
6685: PUSH
6686: CALL_OW 44
6690: ST_TO_ADDR
// end ;
6691: LD_VAR 0 1
6695: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6696: LD_INT 0
6698: PPUSH
6699: PPUSH
6700: PPUSH
// if not ape then
6701: LD_VAR 0 1
6705: NOT
6706: IFFALSE 6710
// exit ;
6708: GO 6835
// side := GetSide ( ape ) ;
6710: LD_ADDR_VAR 0 3
6714: PUSH
6715: LD_VAR 0 1
6719: PPUSH
6720: CALL_OW 255
6724: ST_TO_ADDR
// if not side then
6725: LD_VAR 0 3
6729: NOT
6730: IFFALSE 6784
// begin for i = 1 to apemanPos do
6732: LD_ADDR_VAR 0 4
6736: PUSH
6737: DOUBLE
6738: LD_INT 1
6740: DEC
6741: ST_TO_ADDR
6742: LD_EXP 49
6746: PUSH
6747: FOR_TO
6748: IFFALSE 6782
// if ape in apemanPos [ i ] then
6750: LD_VAR 0 1
6754: PUSH
6755: LD_EXP 49
6759: PUSH
6760: LD_VAR 0 4
6764: ARRAY
6765: IN
6766: IFFALSE 6780
// begin side := i ;
6768: LD_ADDR_VAR 0 3
6772: PUSH
6773: LD_VAR 0 4
6777: ST_TO_ADDR
// break ;
6778: GO 6782
// end ;
6780: GO 6747
6782: POP
6783: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6784: LD_ADDR_EXP 49
6788: PUSH
6789: LD_EXP 49
6793: PPUSH
6794: LD_VAR 0 3
6798: PPUSH
6799: LD_EXP 49
6803: PUSH
6804: LD_VAR 0 3
6808: ARRAY
6809: PUSH
6810: LD_VAR 0 1
6814: DIFF
6815: PPUSH
6816: CALL_OW 1
6820: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6821: LD_ADDR_EXP 46
6825: PUSH
6826: LD_EXP 46
6830: PUSH
6831: LD_INT 1
6833: MINUS
6834: ST_TO_ADDR
// end ; end_of_file
6835: LD_VAR 0 2
6839: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6840: LD_VAR 0 1
6844: PPUSH
6845: CALL_OW 266
6849: PUSH
6850: LD_INT 0
6852: PUSH
6853: LD_INT 1
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: IN
6860: IFFALSE 6885
// SetBName ( b , @ & GetSide ( b ) ) ;
6862: LD_VAR 0 1
6866: PPUSH
6867: LD_STRING @
6869: PUSH
6870: LD_VAR 0 1
6874: PPUSH
6875: CALL_OW 255
6879: STR
6880: PPUSH
6881: CALL_OW 500
// end ;
6885: PPOPN 2
6887: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6888: LD_VAR 0 1
6892: PPUSH
6893: CALL_OW 266
6897: PUSH
6898: LD_INT 0
6900: PUSH
6901: LD_INT 1
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: IN
6908: IFFALSE 6933
// SetBName ( b , @ & GetSide ( b ) ) ;
6910: LD_VAR 0 1
6914: PPUSH
6915: LD_STRING @
6917: PUSH
6918: LD_VAR 0 1
6922: PPUSH
6923: CALL_OW 255
6927: STR
6928: PPUSH
6929: CALL_OW 500
// end ;
6933: PPOPN 3
6935: END
// on VehicleConstructed ( veh , fac ) do var side ;
6936: LD_INT 0
6938: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6939: LD_VAR 0 1
6943: PPUSH
6944: CALL_OW 263
6948: PUSH
6949: LD_INT 5
6951: EQUAL
6952: IFFALSE 7094
// begin side := GetSide ( veh ) ;
6954: LD_ADDR_VAR 0 3
6958: PUSH
6959: LD_VAR 0 1
6963: PPUSH
6964: CALL_OW 255
6968: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6969: LD_ADDR_EXP 49
6973: PUSH
6974: LD_EXP 49
6978: PPUSH
6979: LD_VAR 0 3
6983: PPUSH
6984: LD_EXP 49
6988: PUSH
6989: LD_VAR 0 3
6993: ARRAY
6994: PPUSH
6995: LD_INT 52
6997: PUSH
6998: EMPTY
6999: LIST
7000: PPUSH
7001: CALL_OW 72
7005: PUSH
7006: LD_INT 22
7008: PUSH
7009: LD_VAR 0 3
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PUSH
7018: LD_INT 2
7020: PUSH
7021: LD_INT 33
7023: PUSH
7024: LD_INT 5
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PUSH
7031: LD_INT 25
7033: PUSH
7034: LD_INT 12
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 25
7043: PUSH
7044: LD_INT 15
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: PUSH
7051: LD_INT 25
7053: PUSH
7054: LD_INT 16
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 25
7063: PUSH
7064: LD_INT 17
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PPUSH
7083: CALL_OW 69
7087: UNION
7088: PPUSH
7089: CALL_OW 1
7093: ST_TO_ADDR
// end ; end ;
7094: PPOPN 3
7096: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7097: LD_INT 0
7099: PPUSH
7100: PPUSH
7101: PPUSH
7102: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7103: LD_VAR 0 1
7107: PPUSH
7108: CALL_OW 257
7112: PUSH
7113: LD_INT 12
7115: PUSH
7116: LD_INT 15
7118: PUSH
7119: LD_INT 17
7121: PUSH
7122: LD_INT 16
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: IN
7131: PUSH
7132: LD_VAR 0 1
7136: PPUSH
7137: CALL_OW 263
7141: PUSH
7142: LD_INT 5
7144: EQUAL
7145: OR
7146: IFFALSE 7157
// ApeKilled ( j ) ;
7148: LD_VAR 0 1
7152: PPUSH
7153: CALL 6696 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7157: LD_VAR 0 1
7161: PPUSH
7162: CALL_OW 266
7166: PUSH
7167: LD_INT 0
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: IN
7177: IFFALSE 7259
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7179: LD_ADDR_VAR 0 4
7183: PUSH
7184: LD_EXP 34
7188: PUSH
7189: LD_VAR 0 1
7193: PPUSH
7194: CALL_OW 255
7198: ARRAY
7199: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7200: LD_ADDR_VAR 0 2
7204: PUSH
7205: LD_EXP 39
7209: PUSH
7210: LD_VAR 0 4
7214: ARRAY
7215: PUSH
7216: LD_INT 1
7218: ARRAY
7219: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7220: LD_ADDR_VAR 0 3
7224: PUSH
7225: LD_EXP 39
7229: PUSH
7230: LD_VAR 0 4
7234: ARRAY
7235: PUSH
7236: LD_INT 2
7238: ARRAY
7239: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7240: LD_VAR 0 2
7244: PPUSH
7245: LD_VAR 0 3
7249: PPUSH
7250: CALL_OW 420
7254: PPUSH
7255: CALL_OW 419
// end ; end ;
7259: PPOPN 5
7261: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7262: LD_VAR 0 1
7266: PPUSH
7267: LD_VAR 0 2
7271: PPUSH
7272: LD_VAR 0 3
7276: PPUSH
7277: LD_OWVAR 2
7281: PPUSH
7282: CALL 8080 0 4
7286: PPOPN 3
7288: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7289: LD_INT 0
7291: PPUSH
7292: PPUSH
// for un in battle_flags_id do
7293: LD_ADDR_VAR 0 2
7297: PUSH
7298: LD_EXP 44
7302: PUSH
7303: FOR_IN
7304: IFFALSE 7379
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7306: LD_VAR 0 2
7310: PPUSH
7311: LD_INT 1
7313: PUSH
7314: LD_LOC 9
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 2
7325: PUSH
7326: LD_LOC 9
7330: PUSH
7331: LD_INT 2
7333: DIV
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: LD_INT 3
7341: PUSH
7342: LD_LOC 9
7346: PUSH
7347: LD_INT 5
7349: DIV
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: LD_INT 20
7357: PUSH
7358: LD_LOC 9
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: PPUSH
7373: CALL_OW 423
7377: GO 7303
7379: POP
7380: POP
// end ;
7381: LD_VAR 0 1
7385: RET
// every 1 do var un ;
7386: GO 7388
7388: DISABLE
7389: LD_INT 0
7391: PPUSH
// begin if not def_morale_flags then
7392: LD_EXP 9
7396: NOT
7397: IFFALSE 7401
// exit ;
7399: GO 7478
// if not morale_decreasing_time then
7401: LD_EXP 24
7405: NOT
7406: IFFALSE 7410
// exit ;
7408: GO 7478
// strength = 100 ;
7410: LD_ADDR_LOC 9
7414: PUSH
7415: LD_INT 100
7417: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7418: LD_EXP 24
7422: PPUSH
7423: CALL_OW 67
// strength := strength - 1 ;
7427: LD_ADDR_LOC 9
7431: PUSH
7432: LD_LOC 9
7436: PUSH
7437: LD_INT 1
7439: MINUS
7440: ST_TO_ADDR
// Update_Flags ;
7441: CALL 7289 0 0
// until not strength ;
7445: LD_LOC 9
7449: NOT
7450: IFFALSE 7418
// for un in battle_flags_id do
7452: LD_ADDR_VAR 0 1
7456: PUSH
7457: LD_EXP 44
7461: PUSH
7462: FOR_IN
7463: IFFALSE 7476
// KillBattleFlag ( un ) ;
7465: LD_VAR 0 1
7469: PPUSH
7470: CALL_OW 419
7474: GO 7462
7476: POP
7477: POP
// end ; end_of_file
7478: PPOPN 1
7480: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7481: LD_INT 0
7483: PPUSH
7484: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7485: LD_ADDR_VAR 0 2
7489: PUSH
7490: LD_STRING #Multi1x1-Time
7492: PUSH
7493: LD_OWVAR 1
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: ST_TO_ADDR
// if WaitServerStrings then
7502: LD_EXP 54
7506: IFFALSE 7524
// AllStrings = AllStrings ^ WaitServerStrings ;
7508: LD_ADDR_VAR 0 2
7512: PUSH
7513: LD_VAR 0 2
7517: PUSH
7518: LD_EXP 54
7522: ADD
7523: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7524: LD_INT 0
7526: PUSH
7527: LD_EXP 29
7531: PUSH
7532: LD_OWVAR 1
7536: MINUS
7537: LESSEQUAL
7538: IFFALSE 7569
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7540: LD_ADDR_VAR 0 2
7544: PUSH
7545: LD_VAR 0 2
7549: PUSH
7550: LD_STRING #allowedsibbomb
7552: PUSH
7553: LD_EXP 29
7557: PUSH
7558: LD_OWVAR 1
7562: MINUS
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: ADD
7568: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7569: LD_INT 0
7571: PUSH
7572: LD_EXP 57
7576: PUSH
7577: LD_OWVAR 1
7581: MINUS
7582: LESSEQUAL
7583: IFFALSE 7614
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7585: LD_ADDR_VAR 0 2
7589: PUSH
7590: LD_VAR 0 2
7594: PUSH
7595: LD_STRING #builduptime
7597: PUSH
7598: LD_EXP 57
7602: PUSH
7603: LD_OWVAR 1
7607: MINUS
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: ADD
7613: ST_TO_ADDR
// if ( ExtraStrings ) then
7614: LD_EXP 53
7618: IFFALSE 7640
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7620: LD_ADDR_VAR 0 2
7624: PUSH
7625: LD_VAR 0 2
7629: PUSH
7630: LD_STRING 
7632: ADD
7633: PUSH
7634: LD_EXP 53
7638: ADD
7639: ST_TO_ADDR
// Display_Strings := AllStrings ;
7640: LD_ADDR_OWVAR 47
7644: PUSH
7645: LD_VAR 0 2
7649: ST_TO_ADDR
// end ;
7650: LD_VAR 0 1
7654: RET
// every 0 0$1 do
7655: GO 7657
7657: DISABLE
// begin ShowTimer ;
7658: CALL 7481 0 0
// enable ;
7662: ENABLE
// end ; end_of_file
7663: END
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
7664: LD_INT 0
7666: PPUSH
7667: PPUSH
7668: PPUSH
7669: PPUSH
7670: PPUSH
7671: PPUSH
7672: PPUSH
7673: PPUSH
7674: PPUSH
// for i := 1 to 8 do
7675: LD_ADDR_VAR 0 2
7679: PUSH
7680: DOUBLE
7681: LD_INT 1
7683: DEC
7684: ST_TO_ADDR
7685: LD_INT 8
7687: PUSH
7688: FOR_TO
7689: IFFALSE 8073
// begin if Side_Positions [ i ] then
7691: LD_EXP 34
7695: PUSH
7696: LD_VAR 0 2
7700: ARRAY
7701: IFFALSE 8071
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
7703: LD_ADDR_VAR 0 7
7707: PUSH
7708: LD_INT 22
7710: PUSH
7711: LD_VAR 0 2
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PUSH
7720: LD_INT 21
7722: PUSH
7723: LD_INT 1
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PPUSH
7734: CALL_OW 69
7738: PUSH
7739: LD_INT 0
7741: PLUS
7742: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7743: LD_ADDR_VAR 0 9
7747: PUSH
7748: LD_INT 22
7750: PUSH
7751: LD_VAR 0 2
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 2
7762: PUSH
7763: LD_INT 30
7765: PUSH
7766: LD_INT 0
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 30
7775: PUSH
7776: LD_INT 1
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: LIST
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PPUSH
7792: CALL_OW 69
7796: ST_TO_ADDR
// crates := 0 ;
7797: LD_ADDR_VAR 0 4
7801: PUSH
7802: LD_INT 0
7804: ST_TO_ADDR
// oil := 0 ;
7805: LD_ADDR_VAR 0 5
7809: PUSH
7810: LD_INT 0
7812: ST_TO_ADDR
// sib := 0 ;
7813: LD_ADDR_VAR 0 6
7817: PUSH
7818: LD_INT 0
7820: ST_TO_ADDR
// if bases then
7821: LD_VAR 0 9
7825: IFFALSE 7931
// begin for j in bases do
7827: LD_ADDR_VAR 0 3
7831: PUSH
7832: LD_VAR 0 9
7836: PUSH
7837: FOR_IN
7838: IFFALSE 7929
// begin base := GetBase ( j ) ;
7840: LD_ADDR_VAR 0 8
7844: PUSH
7845: LD_VAR 0 3
7849: PPUSH
7850: CALL_OW 274
7854: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
7855: LD_ADDR_VAR 0 4
7859: PUSH
7860: LD_VAR 0 4
7864: PUSH
7865: LD_VAR 0 8
7869: PPUSH
7870: LD_INT 1
7872: PPUSH
7873: CALL_OW 275
7877: PLUS
7878: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
7879: LD_ADDR_VAR 0 5
7883: PUSH
7884: LD_VAR 0 5
7888: PUSH
7889: LD_VAR 0 8
7893: PPUSH
7894: LD_INT 2
7896: PPUSH
7897: CALL_OW 275
7901: PLUS
7902: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
7903: LD_ADDR_VAR 0 6
7907: PUSH
7908: LD_VAR 0 6
7912: PUSH
7913: LD_VAR 0 8
7917: PPUSH
7918: LD_INT 3
7920: PPUSH
7921: CALL_OW 275
7925: PLUS
7926: ST_TO_ADDR
// end ;
7927: GO 7837
7929: POP
7930: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
7931: LD_STRING setSpecText(
7933: PUSH
7934: LD_VAR 0 2
7938: STR
7939: PUSH
7940: LD_STRING ,
7942: STR
7943: PUSH
7944: LD_INT 2
7946: STR
7947: PUSH
7948: LD_STRING ,
7950: STR
7951: PUSH
7952: LD_VAR 0 4
7956: STR
7957: PUSH
7958: LD_STRING )
7960: STR
7961: PPUSH
7962: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
7966: LD_STRING setSpecText(
7968: PUSH
7969: LD_VAR 0 2
7973: STR
7974: PUSH
7975: LD_STRING ,
7977: STR
7978: PUSH
7979: LD_INT 3
7981: STR
7982: PUSH
7983: LD_STRING ,
7985: STR
7986: PUSH
7987: LD_VAR 0 5
7991: STR
7992: PUSH
7993: LD_STRING )
7995: STR
7996: PPUSH
7997: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
8001: LD_STRING setSpecText(
8003: PUSH
8004: LD_VAR 0 2
8008: STR
8009: PUSH
8010: LD_STRING ,
8012: STR
8013: PUSH
8014: LD_INT 4
8016: STR
8017: PUSH
8018: LD_STRING ,
8020: STR
8021: PUSH
8022: LD_VAR 0 6
8026: STR
8027: PUSH
8028: LD_STRING )
8030: STR
8031: PPUSH
8032: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
8036: LD_STRING setSpecText(
8038: PUSH
8039: LD_VAR 0 2
8043: STR
8044: PUSH
8045: LD_STRING ,
8047: STR
8048: PUSH
8049: LD_INT 5
8051: STR
8052: PUSH
8053: LD_STRING ,
8055: STR
8056: PUSH
8057: LD_VAR 0 7
8061: STR
8062: PUSH
8063: LD_STRING )
8065: STR
8066: PPUSH
8067: CALL_OW 559
// end ; end ;
8071: GO 7688
8073: POP
8074: POP
// end ; end_of_file
8075: LD_VAR 0 1
8079: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8080: LD_INT 0
8082: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8083: LD_VAR 0 1
8087: PPUSH
8088: CALL_OW 255
8092: PUSH
8093: LD_VAR 0 4
8097: EQUAL
8098: IFFALSE 8117
// begin SetAchievement ( ACH_RAD ) ;
8100: LD_STRING ACH_RAD
8102: PPUSH
8103: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8107: LD_STRING ACH_NL
8109: PPUSH
8110: LD_INT 1
8112: PPUSH
8113: CALL_OW 564
// end end ;
8117: LD_VAR 0 5
8121: RET
// export function SA_Win ( side ) ; begin
8122: LD_INT 0
8124: PPUSH
// case side of 1 :
8125: LD_VAR 0 1
8129: PUSH
8130: LD_INT 1
8132: DOUBLE
8133: EQUAL
8134: IFTRUE 8138
8136: GO 8151
8138: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8139: LD_STRING ACH_AH
8141: PPUSH
8142: LD_INT 1
8144: PPUSH
8145: CALL_OW 564
8149: GO 8314
8151: LD_INT 2
8153: DOUBLE
8154: EQUAL
8155: IFTRUE 8159
8157: GO 8172
8159: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8160: LD_STRING ACH_E
8162: PPUSH
8163: LD_INT 1
8165: PPUSH
8166: CALL_OW 564
8170: GO 8314
8172: LD_INT 3
8174: DOUBLE
8175: EQUAL
8176: IFTRUE 8180
8178: GO 8193
8180: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8181: LD_STRING ACH_OOL
8183: PPUSH
8184: LD_INT 1
8186: PPUSH
8187: CALL_OW 564
8191: GO 8314
8193: LD_INT 1
8195: PUSH
8196: LD_INT 2
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: DOUBLE
8203: EQUAL
8204: IFTRUE 8208
8206: GO 8233
8208: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8209: LD_STRING ACH_AH
8211: PPUSH
8212: LD_REAL  5.00000000000000E-0001
8215: PPUSH
8216: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8220: LD_STRING ACH_E
8222: PPUSH
8223: LD_REAL  5.00000000000000E-0001
8226: PPUSH
8227: CALL_OW 564
// end ; [ 2 , 3 ] :
8231: GO 8314
8233: LD_INT 2
8235: PUSH
8236: LD_INT 3
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: DOUBLE
8243: EQUAL
8244: IFTRUE 8248
8246: GO 8273
8248: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8249: LD_STRING ACH_OOL
8251: PPUSH
8252: LD_REAL  5.00000000000000E-0001
8255: PPUSH
8256: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8260: LD_STRING ACH_E
8262: PPUSH
8263: LD_REAL  5.00000000000000E-0001
8266: PPUSH
8267: CALL_OW 564
// end ; [ 3 , 1 ] :
8271: GO 8314
8273: LD_INT 3
8275: PUSH
8276: LD_INT 1
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: DOUBLE
8283: EQUAL
8284: IFTRUE 8288
8286: GO 8313
8288: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8289: LD_STRING ACH_AH
8291: PPUSH
8292: LD_REAL  5.00000000000000E-0001
8295: PPUSH
8296: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8300: LD_STRING ACH_OOL
8302: PPUSH
8303: LD_REAL  5.00000000000000E-0001
8306: PPUSH
8307: CALL_OW 564
// end ; end ;
8311: GO 8314
8313: POP
// end ; end_of_file
8314: LD_VAR 0 2
8318: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8319: LD_INT 0
8321: PPUSH
8322: PPUSH
// enable ( 98 ) ;
8323: LD_INT 98
8325: ENABLE_MARKED
// GameEnded = false ;
8326: LD_ADDR_LOC 15
8330: PUSH
8331: LD_INT 0
8333: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8334: LD_ADDR_LOC 14
8338: PUSH
8339: LD_INT 0
8341: PUSH
8342: LD_INT 0
8344: PUSH
8345: LD_INT 0
8347: PUSH
8348: LD_INT 0
8350: PUSH
8351: LD_INT 0
8353: PUSH
8354: LD_INT 0
8356: PUSH
8357: LD_INT 0
8359: PUSH
8360: LD_INT 0
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: ST_TO_ADDR
// unfoged = false ;
8373: LD_ADDR_LOC 16
8377: PUSH
8378: LD_INT 0
8380: ST_TO_ADDR
// defeated_specs := [ ] ;
8381: LD_ADDR_LOC 17
8385: PUSH
8386: EMPTY
8387: ST_TO_ADDR
// for i = 1 to side_positions do
8388: LD_ADDR_VAR 0 2
8392: PUSH
8393: DOUBLE
8394: LD_INT 1
8396: DEC
8397: ST_TO_ADDR
8398: LD_EXP 34
8402: PUSH
8403: FOR_TO
8404: IFFALSE 8444
// if not side_positions [ i ] then
8406: LD_EXP 34
8410: PUSH
8411: LD_VAR 0 2
8415: ARRAY
8416: NOT
8417: IFFALSE 8442
// defeated = replace ( defeated , i , true ) ;
8419: LD_ADDR_LOC 14
8423: PUSH
8424: LD_LOC 14
8428: PPUSH
8429: LD_VAR 0 2
8433: PPUSH
8434: LD_INT 1
8436: PPUSH
8437: CALL_OW 1
8441: ST_TO_ADDR
8442: GO 8403
8444: POP
8445: POP
// end ;
8446: LD_VAR 0 1
8450: RET
// function CanWinLoose ; begin
8451: LD_INT 0
8453: PPUSH
// Result := true ;
8454: LD_ADDR_VAR 0 1
8458: PUSH
8459: LD_INT 1
8461: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8462: CALL_OW 518
8466: PUSH
8467: CALL_OW 519
8471: PUSH
8472: LD_INT 0
8474: GREATER
8475: AND
8476: IFFALSE 8486
// Result := false ;
8478: LD_ADDR_VAR 0 1
8482: PUSH
8483: LD_INT 0
8485: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8486: CALL_OW 531
8490: PUSH
8491: CALL_OW 519
8495: PUSH
8496: LD_INT 1
8498: GREATER
8499: AND
8500: IFFALSE 8510
// Result := false ;
8502: LD_ADDR_VAR 0 1
8506: PUSH
8507: LD_INT 0
8509: ST_TO_ADDR
// end ;
8510: LD_VAR 0 1
8514: RET
// export function HasPower ( i ) ; var k , h ; begin
8515: LD_INT 0
8517: PPUSH
8518: PPUSH
8519: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8520: LD_VAR 0 1
8524: PPUSH
8525: CALL_OW 108
8529: NOT
8530: PUSH
8531: LD_EXP 33
8535: PUSH
8536: LD_VAR 0 1
8540: ARRAY
8541: NOT
8542: AND
8543: PUSH
8544: LD_OWVAR 4
8548: AND
8549: IFFALSE 8561
// begin result = false ;
8551: LD_ADDR_VAR 0 2
8555: PUSH
8556: LD_INT 0
8558: ST_TO_ADDR
// end else
8559: GO 8856
// case def_win_rules of 0 :
8561: LD_EXP 30
8565: PUSH
8566: LD_INT 0
8568: DOUBLE
8569: EQUAL
8570: IFTRUE 8574
8572: GO 8737
8574: POP
// if def_people_respawning then
8575: LD_EXP 11
8579: IFFALSE 8670
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8581: LD_ADDR_VAR 0 2
8585: PUSH
8586: LD_INT 22
8588: PUSH
8589: LD_VAR 0 1
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: LD_INT 2
8600: PUSH
8601: LD_INT 21
8603: PUSH
8604: LD_INT 1
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PUSH
8611: LD_INT 33
8613: PUSH
8614: LD_INT 3
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: PUSH
8621: LD_INT 33
8623: PUSH
8624: LD_INT 5
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: PUSH
8631: LD_INT 30
8633: PUSH
8634: LD_INT 0
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 30
8643: PUSH
8644: LD_INT 1
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PPUSH
8663: CALL_OW 69
8667: ST_TO_ADDR
8668: GO 8735
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8670: LD_ADDR_VAR 0 2
8674: PUSH
8675: LD_INT 22
8677: PUSH
8678: LD_VAR 0 1
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 2
8689: PUSH
8690: LD_INT 21
8692: PUSH
8693: LD_INT 1
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: PUSH
8700: LD_INT 33
8702: PUSH
8703: LD_INT 3
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PUSH
8710: LD_INT 33
8712: PUSH
8713: LD_INT 5
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: PPUSH
8730: CALL_OW 69
8734: ST_TO_ADDR
8735: GO 8856
8737: LD_INT 1
8739: DOUBLE
8740: EQUAL
8741: IFTRUE 8745
8743: GO 8784
8745: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8746: LD_ADDR_VAR 0 2
8750: PUSH
8751: LD_INT 22
8753: PUSH
8754: LD_VAR 0 1
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: PUSH
8763: LD_INT 21
8765: PUSH
8766: LD_INT 1
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PPUSH
8777: CALL_OW 69
8781: ST_TO_ADDR
8782: GO 8856
8784: LD_INT 2
8786: DOUBLE
8787: EQUAL
8788: IFTRUE 8792
8790: GO 8855
8792: POP
// begin h = false ;
8793: LD_ADDR_VAR 0 4
8797: PUSH
8798: LD_INT 0
8800: ST_TO_ADDR
// for k in heroes [ i ] do
8801: LD_ADDR_VAR 0 3
8805: PUSH
8806: LD_EXP 45
8810: PUSH
8811: LD_VAR 0 1
8815: ARRAY
8816: PUSH
8817: FOR_IN
8818: IFFALSE 8841
// if IsLive ( k ) then
8820: LD_VAR 0 3
8824: PPUSH
8825: CALL_OW 300
8829: IFFALSE 8839
// h = true ;
8831: LD_ADDR_VAR 0 4
8835: PUSH
8836: LD_INT 1
8838: ST_TO_ADDR
8839: GO 8817
8841: POP
8842: POP
// Result := h ;
8843: LD_ADDR_VAR 0 2
8847: PUSH
8848: LD_VAR 0 4
8852: ST_TO_ADDR
// end ; end ;
8853: GO 8856
8855: POP
// end ;
8856: LD_VAR 0 2
8860: RET
// function AlliedSides ( i , j ) ; begin
8861: LD_INT 0
8863: PPUSH
// Result := false ;
8864: LD_ADDR_VAR 0 3
8868: PUSH
8869: LD_INT 0
8871: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8872: LD_VAR 0 1
8876: PPUSH
8877: LD_VAR 0 2
8881: PPUSH
8882: CALL_OW 81
8886: PUSH
8887: LD_INT 1
8889: EQUAL
8890: PUSH
8891: LD_VAR 0 2
8895: PPUSH
8896: LD_VAR 0 1
8900: PPUSH
8901: CALL_OW 81
8905: PUSH
8906: LD_INT 1
8908: EQUAL
8909: AND
8910: PUSH
8911: LD_VAR 0 1
8915: PPUSH
8916: CALL_OW 83
8920: AND
8921: PUSH
8922: LD_VAR 0 2
8926: PPUSH
8927: CALL_OW 83
8931: AND
8932: IFFALSE 8942
// Result := true ;
8934: LD_ADDR_VAR 0 3
8938: PUSH
8939: LD_INT 1
8941: ST_TO_ADDR
// end ;
8942: LD_VAR 0 3
8946: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8947: CALL 8451 0 0
8951: PUSH
8952: LD_LOC 15
8956: NOT
8957: AND
8958: IFFALSE 8974
8960: GO 8962
8962: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8963: LD_ADDR_EXP 54
8967: PUSH
8968: LD_STRING #Player-Ended
8970: PUSH
8971: EMPTY
8972: LIST
8973: ST_TO_ADDR
8974: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8975: CALL 8451 0 0
8979: PUSH
8980: LD_LOC 15
8984: AND
8985: IFFALSE 8994
8987: GO 8989
8989: DISABLE
// YouLostInMultiplayer ;
8990: CALL_OW 107
8994: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8995: CALL 8451 0 0
8999: NOT
9000: PUSH
9001: CALL_OW 531
9005: NOT
9006: AND
9007: IFFALSE 9023
9009: GO 9011
9011: DISABLE
// WaitServerStrings = [ #server-wait ] ;
9012: LD_ADDR_EXP 54
9016: PUSH
9017: LD_STRING #server-wait
9019: PUSH
9020: EMPTY
9021: LIST
9022: ST_TO_ADDR
9023: END
// every 100 trigger IAmSpec do
9024: CALL_OW 531
9028: IFFALSE 9044
9030: GO 9032
9032: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
9033: LD_ADDR_EXP 54
9037: PUSH
9038: LD_STRING #Player-IAmSpec
9040: PUSH
9041: EMPTY
9042: LIST
9043: ST_TO_ADDR
9044: END
// every 100 trigger GameEnded and IAmSpec do
9045: LD_LOC 15
9049: PUSH
9050: CALL_OW 531
9054: AND
9055: IFFALSE 9064
9057: GO 9059
9059: DISABLE
// YouLostInMultiplayer ;
9060: CALL_OW 107
9064: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
9065: CALL 8451 0 0
9069: PUSH
9070: LD_LOC 15
9074: NOT
9075: AND
9076: IFFALSE 9092
9078: GO 9080
9080: DISABLE
// WaitServerStrings = [ $player-win ] ;
9081: LD_ADDR_EXP 54
9085: PUSH
9086: LD_STRING $player-win
9088: PUSH
9089: EMPTY
9090: LIST
9091: ST_TO_ADDR
9092: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
9093: CALL 8451 0 0
9097: PUSH
9098: LD_LOC 15
9102: AND
9103: IFFALSE 9127
9105: GO 9107
9107: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
9108: LD_EXP 35
9112: PUSH
9113: LD_OWVAR 7
9117: ARRAY
9118: PPUSH
9119: CALL 8122 0 1
// YouWinInMultiplayer ;
9123: CALL_OW 106
// end ;
9127: END
// every 100 trigger isEditor marked 401 do
9128: LD_OWVAR 84
9132: IFFALSE 9148
9134: GO 9136
9136: DISABLE
// Debug_Strings = [ You won ] ;
9137: LD_ADDR_OWVAR 48
9141: PUSH
9142: LD_STRING You won
9144: PUSH
9145: EMPTY
9146: LIST
9147: ST_TO_ADDR
9148: END
// every 100 trigger isEditor marked 400 do
9149: LD_OWVAR 84
9153: IFFALSE 9169
9155: GO 9157
9157: DISABLE
// Debug_Strings = [ You loss ] ;
9158: LD_ADDR_OWVAR 48
9162: PUSH
9163: LD_STRING You loss
9165: PUSH
9166: EMPTY
9167: LIST
9168: ST_TO_ADDR
9169: END
// every 100 marked 98 do var i , un ;
9170: GO 9172
9172: DISABLE
9173: LD_INT 0
9175: PPUSH
9176: PPUSH
// begin for i = 1 to side_positions do
9177: LD_ADDR_VAR 0 1
9181: PUSH
9182: DOUBLE
9183: LD_INT 1
9185: DEC
9186: ST_TO_ADDR
9187: LD_EXP 34
9191: PUSH
9192: FOR_TO
9193: IFFALSE 9280
// begin if side_positions [ i ] then
9195: LD_EXP 34
9199: PUSH
9200: LD_VAR 0 1
9204: ARRAY
9205: IFFALSE 9278
// if not HasPower ( i ) and not defeated [ i ] then
9207: LD_VAR 0 1
9211: PPUSH
9212: CALL 8515 0 1
9216: NOT
9217: PUSH
9218: LD_LOC 14
9222: PUSH
9223: LD_VAR 0 1
9227: ARRAY
9228: NOT
9229: AND
9230: IFFALSE 9278
// begin defeated = replace ( defeated , i , true ) ;
9232: LD_ADDR_LOC 14
9236: PUSH
9237: LD_LOC 14
9241: PPUSH
9242: LD_VAR 0 1
9246: PPUSH
9247: LD_INT 1
9249: PPUSH
9250: CALL_OW 1
9254: ST_TO_ADDR
// if i = mp_player_side then
9255: LD_VAR 0 1
9259: PUSH
9260: LD_OWVAR 7
9264: EQUAL
9265: IFFALSE 9278
// begin Multiplayer_Loose_Message ;
9267: CALL_OW 521
// SetPlayerSpectator ( ) ;
9271: CALL_OW 572
// enable ( 400 ) ;
9275: LD_INT 400
9277: ENABLE_MARKED
// end ; end ; end ;
9278: GO 9192
9280: POP
9281: POP
// DidGameEnd ;
9282: CALL 9297 0 0
// if not GameEnded then
9286: LD_LOC 15
9290: NOT
9291: IFFALSE 9294
// enable ;
9293: ENABLE
// end ;
9294: PPOPN 2
9296: END
// function DidGameEnd ; var i , k , enemy ; begin
9297: LD_INT 0
9299: PPUSH
9300: PPUSH
9301: PPUSH
9302: PPUSH
// enemy = [ ] ;
9303: LD_ADDR_VAR 0 4
9307: PUSH
9308: EMPTY
9309: ST_TO_ADDR
// for i = 1 to side_positions do
9310: LD_ADDR_VAR 0 2
9314: PUSH
9315: DOUBLE
9316: LD_INT 1
9318: DEC
9319: ST_TO_ADDR
9320: LD_EXP 34
9324: PUSH
9325: FOR_TO
9326: IFFALSE 9420
// if not defeated [ i ] then
9328: LD_LOC 14
9332: PUSH
9333: LD_VAR 0 2
9337: ARRAY
9338: NOT
9339: IFFALSE 9418
// for k = 1 to side_positions do
9341: LD_ADDR_VAR 0 3
9345: PUSH
9346: DOUBLE
9347: LD_INT 1
9349: DEC
9350: ST_TO_ADDR
9351: LD_EXP 34
9355: PUSH
9356: FOR_TO
9357: IFFALSE 9416
// if not defeated [ k ] then
9359: LD_LOC 14
9363: PUSH
9364: LD_VAR 0 3
9368: ARRAY
9369: NOT
9370: IFFALSE 9414
// if not AlliedSides ( i , k ) then
9372: LD_VAR 0 2
9376: PPUSH
9377: LD_VAR 0 3
9381: PPUSH
9382: CALL 8861 0 2
9386: NOT
9387: IFFALSE 9414
// enemy = enemy ^ [ i , k ] ;
9389: LD_ADDR_VAR 0 4
9393: PUSH
9394: LD_VAR 0 4
9398: PUSH
9399: LD_VAR 0 2
9403: PUSH
9404: LD_VAR 0 3
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: ADD
9413: ST_TO_ADDR
9414: GO 9356
9416: POP
9417: POP
9418: GO 9325
9420: POP
9421: POP
// if not enemy then
9422: LD_VAR 0 4
9426: NOT
9427: IFFALSE 9453
// begin GameEnded = true ;
9429: LD_ADDR_LOC 15
9433: PUSH
9434: LD_INT 1
9436: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9437: LD_LOC 14
9441: PUSH
9442: LD_OWVAR 7
9446: ARRAY
9447: NOT
9448: IFFALSE 9453
// enable ( 401 ) ;
9450: LD_INT 401
9452: ENABLE_MARKED
// end ; end ;
9453: LD_VAR 0 1
9457: RET
// function unfog ; var k , friends ; begin
9458: LD_INT 0
9460: PPUSH
9461: PPUSH
9462: PPUSH
// for k = 1 to side_positions do
9463: LD_ADDR_VAR 0 2
9467: PUSH
9468: DOUBLE
9469: LD_INT 1
9471: DEC
9472: ST_TO_ADDR
9473: LD_EXP 34
9477: PUSH
9478: FOR_TO
9479: IFFALSE 9535
// if not defeated [ k ] then
9481: LD_LOC 14
9485: PUSH
9486: LD_VAR 0 2
9490: ARRAY
9491: NOT
9492: IFFALSE 9533
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9494: LD_OWVAR 7
9498: PPUSH
9499: LD_VAR 0 2
9503: PPUSH
9504: CALL_OW 81
9508: PUSH
9509: LD_INT 1
9511: PUSH
9512: EMPTY
9513: LIST
9514: IN
9515: IFFALSE 9533
// friends = friends ^ k ;
9517: LD_ADDR_VAR 0 3
9521: PUSH
9522: LD_VAR 0 3
9526: PUSH
9527: LD_VAR 0 2
9531: ADD
9532: ST_TO_ADDR
9533: GO 9478
9535: POP
9536: POP
// if not friends then
9537: LD_VAR 0 3
9541: NOT
9542: IFFALSE 9556
// begin SetPlayerSpectator ( ) ;
9544: CALL_OW 572
// unfoged = true ;
9548: LD_ADDR_LOC 16
9552: PUSH
9553: LD_INT 1
9555: ST_TO_ADDR
// end ; end ;
9556: LD_VAR 0 1
9560: RET
// export function MakeGameEnd ; begin
9561: LD_INT 0
9563: PPUSH
// SetPlayerSpectator ( ) ;
9564: CALL_OW 572
// unfoged = true ;
9568: LD_ADDR_LOC 16
9572: PUSH
9573: LD_INT 1
9575: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9576: LD_INT 175
9578: PPUSH
9579: CALL_OW 67
// GameEnded = true ;
9583: LD_ADDR_LOC 15
9587: PUSH
9588: LD_INT 1
9590: ST_TO_ADDR
// end ;
9591: LD_VAR 0 1
9595: RET
// export function GetGameEnded ; begin
9596: LD_INT 0
9598: PPUSH
// result = GameEnded ;
9599: LD_ADDR_VAR 0 1
9603: PUSH
9604: LD_LOC 15
9608: ST_TO_ADDR
// end ; end_of_file
9609: LD_VAR 0 1
9613: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9614: LD_INT 0
9616: PPUSH
9617: PPUSH
9618: PPUSH
// for side = 1 to 8 do
9619: LD_ADDR_VAR 0 2
9623: PUSH
9624: DOUBLE
9625: LD_INT 1
9627: DEC
9628: ST_TO_ADDR
9629: LD_INT 8
9631: PUSH
9632: FOR_TO
9633: IFFALSE 9754
// begin for i = 1 to 72 do
9635: LD_ADDR_VAR 0 3
9639: PUSH
9640: DOUBLE
9641: LD_INT 1
9643: DEC
9644: ST_TO_ADDR
9645: LD_INT 72
9647: PUSH
9648: FOR_TO
9649: IFFALSE 9680
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9651: LD_VAR 0 3
9655: PPUSH
9656: LD_VAR 0 2
9660: PPUSH
9661: LD_INT 0
9663: PPUSH
9664: LD_VAR 0 3
9668: PPUSH
9669: CALL_OW 565
9673: PPUSH
9674: CALL_OW 322
9678: GO 9648
9680: POP
9681: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9682: LD_INT 73
9684: PPUSH
9685: LD_VAR 0 2
9689: PPUSH
9690: LD_INT 0
9692: PPUSH
9693: LD_INT 25
9695: PPUSH
9696: CALL_OW 565
9700: PPUSH
9701: CALL_OW 322
// for i = 0 to 40 do
9705: LD_ADDR_VAR 0 3
9709: PUSH
9710: DOUBLE
9711: LD_INT 0
9713: DEC
9714: ST_TO_ADDR
9715: LD_INT 40
9717: PUSH
9718: FOR_TO
9719: IFFALSE 9750
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9721: LD_VAR 0 3
9725: PPUSH
9726: LD_VAR 0 2
9730: PPUSH
9731: LD_INT 1
9733: PPUSH
9734: LD_VAR 0 3
9738: PPUSH
9739: CALL_OW 565
9743: PPUSH
9744: CALL_OW 324
9748: GO 9718
9750: POP
9751: POP
// end ;
9752: GO 9632
9754: POP
9755: POP
// end ;
9756: LD_VAR 0 1
9760: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9761: LD_INT 0
9763: PPUSH
9764: PPUSH
9765: PPUSH
// for side = 1 to 8 do
9766: LD_ADDR_VAR 0 3
9770: PUSH
9771: DOUBLE
9772: LD_INT 1
9774: DEC
9775: ST_TO_ADDR
9776: LD_INT 8
9778: PUSH
9779: FOR_TO
9780: IFFALSE 13776
// begin for i = 1 to 73 do
9782: LD_ADDR_VAR 0 4
9786: PUSH
9787: DOUBLE
9788: LD_INT 1
9790: DEC
9791: ST_TO_ADDR
9792: LD_INT 73
9794: PUSH
9795: FOR_TO
9796: IFFALSE 9817
// SetTech ( i , side , state_disabled ) ;
9798: LD_VAR 0 4
9802: PPUSH
9803: LD_VAR 0 3
9807: PPUSH
9808: LD_INT 0
9810: PPUSH
9811: CALL_OW 322
9815: GO 9795
9817: POP
9818: POP
// for i = 0 to 40 do
9819: LD_ADDR_VAR 0 4
9823: PUSH
9824: DOUBLE
9825: LD_INT 0
9827: DEC
9828: ST_TO_ADDR
9829: LD_INT 40
9831: PUSH
9832: FOR_TO
9833: IFFALSE 9854
// SetRestrict ( i , side , false ) ;
9835: LD_VAR 0 4
9839: PPUSH
9840: LD_VAR 0 3
9844: PPUSH
9845: LD_INT 0
9847: PPUSH
9848: CALL_OW 324
9852: GO 9832
9854: POP
9855: POP
// case level of 1 :
9856: LD_VAR 0 1
9860: PUSH
9861: LD_INT 1
9863: DOUBLE
9864: EQUAL
9865: IFTRUE 9869
9867: GO 10022
9869: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9870: LD_INT 35
9872: PPUSH
9873: LD_VAR 0 3
9877: PPUSH
9878: LD_INT 1
9880: PPUSH
9881: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9885: LD_INT 45
9887: PPUSH
9888: LD_VAR 0 3
9892: PPUSH
9893: LD_INT 1
9895: PPUSH
9896: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9900: LD_INT 46
9902: PPUSH
9903: LD_VAR 0 3
9907: PPUSH
9908: LD_INT 1
9910: PPUSH
9911: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9915: LD_INT 47
9917: PPUSH
9918: LD_VAR 0 3
9922: PPUSH
9923: LD_INT 1
9925: PPUSH
9926: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9930: LD_INT 0
9932: PPUSH
9933: LD_VAR 0 3
9937: PPUSH
9938: LD_INT 1
9940: PPUSH
9941: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9945: LD_INT 2
9947: PPUSH
9948: LD_VAR 0 3
9952: PPUSH
9953: LD_INT 1
9955: PPUSH
9956: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9960: LD_INT 4
9962: PPUSH
9963: LD_VAR 0 3
9967: PPUSH
9968: LD_INT 1
9970: PPUSH
9971: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9975: LD_INT 6
9977: PPUSH
9978: LD_VAR 0 3
9982: PPUSH
9983: LD_INT 1
9985: PPUSH
9986: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9990: LD_INT 29
9992: PPUSH
9993: LD_VAR 0 3
9997: PPUSH
9998: LD_INT 1
10000: PPUSH
10001: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10005: LD_INT 31
10007: PPUSH
10008: LD_VAR 0 3
10012: PPUSH
10013: LD_INT 1
10015: PPUSH
10016: CALL_OW 324
// end ; 2 :
10020: GO 13774
10022: LD_INT 2
10024: DOUBLE
10025: EQUAL
10026: IFTRUE 10030
10028: GO 10228
10030: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10031: LD_INT 35
10033: PPUSH
10034: LD_VAR 0 3
10038: PPUSH
10039: LD_INT 1
10041: PPUSH
10042: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10046: LD_INT 45
10048: PPUSH
10049: LD_VAR 0 3
10053: PPUSH
10054: LD_INT 1
10056: PPUSH
10057: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10061: LD_INT 46
10063: PPUSH
10064: LD_VAR 0 3
10068: PPUSH
10069: LD_INT 1
10071: PPUSH
10072: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10076: LD_INT 47
10078: PPUSH
10079: LD_VAR 0 3
10083: PPUSH
10084: LD_INT 1
10086: PPUSH
10087: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10091: LD_INT 1
10093: PPUSH
10094: LD_VAR 0 3
10098: PPUSH
10099: LD_INT 1
10101: PPUSH
10102: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10106: LD_INT 2
10108: PPUSH
10109: LD_VAR 0 3
10113: PPUSH
10114: LD_INT 1
10116: PPUSH
10117: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10121: LD_INT 11
10123: PPUSH
10124: LD_VAR 0 3
10128: PPUSH
10129: LD_INT 1
10131: PPUSH
10132: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10136: LD_INT 0
10138: PPUSH
10139: LD_VAR 0 3
10143: PPUSH
10144: LD_INT 1
10146: PPUSH
10147: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10151: LD_INT 2
10153: PPUSH
10154: LD_VAR 0 3
10158: PPUSH
10159: LD_INT 1
10161: PPUSH
10162: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10166: LD_INT 4
10168: PPUSH
10169: LD_VAR 0 3
10173: PPUSH
10174: LD_INT 1
10176: PPUSH
10177: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10181: LD_INT 6
10183: PPUSH
10184: LD_VAR 0 3
10188: PPUSH
10189: LD_INT 1
10191: PPUSH
10192: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10196: LD_INT 29
10198: PPUSH
10199: LD_VAR 0 3
10203: PPUSH
10204: LD_INT 1
10206: PPUSH
10207: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10211: LD_INT 31
10213: PPUSH
10214: LD_VAR 0 3
10218: PPUSH
10219: LD_INT 1
10221: PPUSH
10222: CALL_OW 324
// end ; 3 :
10226: GO 13774
10228: LD_INT 3
10230: DOUBLE
10231: EQUAL
10232: IFTRUE 10236
10234: GO 10689
10236: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10237: LD_INT 35
10239: PPUSH
10240: LD_VAR 0 3
10244: PPUSH
10245: LD_INT 1
10247: PPUSH
10248: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10252: LD_INT 45
10254: PPUSH
10255: LD_VAR 0 3
10259: PPUSH
10260: LD_INT 1
10262: PPUSH
10263: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10267: LD_INT 46
10269: PPUSH
10270: LD_VAR 0 3
10274: PPUSH
10275: LD_INT 1
10277: PPUSH
10278: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10282: LD_INT 47
10284: PPUSH
10285: LD_VAR 0 3
10289: PPUSH
10290: LD_INT 1
10292: PPUSH
10293: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10297: LD_INT 1
10299: PPUSH
10300: LD_VAR 0 3
10304: PPUSH
10305: LD_INT 1
10307: PPUSH
10308: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10312: LD_INT 2
10314: PPUSH
10315: LD_VAR 0 3
10319: PPUSH
10320: LD_INT 1
10322: PPUSH
10323: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10327: LD_INT 11
10329: PPUSH
10330: LD_VAR 0 3
10334: PPUSH
10335: LD_INT 1
10337: PPUSH
10338: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10342: LD_INT 48
10344: PPUSH
10345: LD_VAR 0 3
10349: PPUSH
10350: LD_INT 1
10352: PPUSH
10353: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10357: LD_INT 69
10359: PPUSH
10360: LD_VAR 0 3
10364: PPUSH
10365: LD_INT 1
10367: PPUSH
10368: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10372: LD_INT 39
10374: PPUSH
10375: LD_VAR 0 3
10379: PPUSH
10380: LD_INT 1
10382: PPUSH
10383: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10387: LD_INT 43
10389: PPUSH
10390: LD_VAR 0 3
10394: PPUSH
10395: LD_INT 1
10397: PPUSH
10398: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10402: LD_INT 51
10404: PPUSH
10405: LD_VAR 0 3
10409: PPUSH
10410: LD_INT 1
10412: PPUSH
10413: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10417: LD_INT 6
10419: PPUSH
10420: LD_VAR 0 3
10424: PPUSH
10425: LD_INT 1
10427: PPUSH
10428: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10432: LD_INT 0
10434: PPUSH
10435: LD_VAR 0 3
10439: PPUSH
10440: LD_INT 1
10442: PPUSH
10443: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10447: LD_INT 2
10449: PPUSH
10450: LD_VAR 0 3
10454: PPUSH
10455: LD_INT 1
10457: PPUSH
10458: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10462: LD_INT 3
10464: PPUSH
10465: LD_VAR 0 3
10469: PPUSH
10470: LD_INT 1
10472: PPUSH
10473: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10477: LD_INT 4
10479: PPUSH
10480: LD_VAR 0 3
10484: PPUSH
10485: LD_INT 1
10487: PPUSH
10488: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10492: LD_INT 6
10494: PPUSH
10495: LD_VAR 0 3
10499: PPUSH
10500: LD_INT 1
10502: PPUSH
10503: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10507: LD_INT 7
10509: PPUSH
10510: LD_VAR 0 3
10514: PPUSH
10515: LD_INT 1
10517: PPUSH
10518: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10522: LD_INT 8
10524: PPUSH
10525: LD_VAR 0 3
10529: PPUSH
10530: LD_INT 1
10532: PPUSH
10533: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10537: LD_INT 10
10539: PPUSH
10540: LD_VAR 0 3
10544: PPUSH
10545: LD_INT 1
10547: PPUSH
10548: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10552: LD_INT 15
10554: PPUSH
10555: LD_VAR 0 3
10559: PPUSH
10560: LD_INT 1
10562: PPUSH
10563: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10567: LD_INT 16
10569: PPUSH
10570: LD_VAR 0 3
10574: PPUSH
10575: LD_INT 1
10577: PPUSH
10578: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10582: LD_INT 17
10584: PPUSH
10585: LD_VAR 0 3
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10597: LD_INT 20
10599: PPUSH
10600: LD_VAR 0 3
10604: PPUSH
10605: LD_INT 1
10607: PPUSH
10608: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10612: LD_INT 26
10614: PPUSH
10615: LD_VAR 0 3
10619: PPUSH
10620: LD_INT 1
10622: PPUSH
10623: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10627: LD_INT 27
10629: PPUSH
10630: LD_VAR 0 3
10634: PPUSH
10635: LD_INT 1
10637: PPUSH
10638: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10642: LD_INT 29
10644: PPUSH
10645: LD_VAR 0 3
10649: PPUSH
10650: LD_INT 1
10652: PPUSH
10653: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10657: LD_INT 31
10659: PPUSH
10660: LD_VAR 0 3
10664: PPUSH
10665: LD_INT 1
10667: PPUSH
10668: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10672: LD_INT 32
10674: PPUSH
10675: LD_VAR 0 3
10679: PPUSH
10680: LD_INT 1
10682: PPUSH
10683: CALL_OW 324
// end ; 4 :
10687: GO 13774
10689: LD_INT 4
10691: DOUBLE
10692: EQUAL
10693: IFTRUE 10697
10695: GO 11645
10697: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10698: LD_INT 35
10700: PPUSH
10701: LD_VAR 0 3
10705: PPUSH
10706: LD_INT 1
10708: PPUSH
10709: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10713: LD_INT 45
10715: PPUSH
10716: LD_VAR 0 3
10720: PPUSH
10721: LD_INT 1
10723: PPUSH
10724: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10728: LD_INT 46
10730: PPUSH
10731: LD_VAR 0 3
10735: PPUSH
10736: LD_INT 1
10738: PPUSH
10739: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10743: LD_INT 47
10745: PPUSH
10746: LD_VAR 0 3
10750: PPUSH
10751: LD_INT 1
10753: PPUSH
10754: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10758: LD_INT 1
10760: PPUSH
10761: LD_VAR 0 3
10765: PPUSH
10766: LD_INT 1
10768: PPUSH
10769: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10773: LD_INT 2
10775: PPUSH
10776: LD_VAR 0 3
10780: PPUSH
10781: LD_INT 1
10783: PPUSH
10784: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10788: LD_INT 11
10790: PPUSH
10791: LD_VAR 0 3
10795: PPUSH
10796: LD_INT 1
10798: PPUSH
10799: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10803: LD_INT 20
10805: PPUSH
10806: LD_VAR 0 3
10810: PPUSH
10811: LD_INT 1
10813: PPUSH
10814: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10818: LD_INT 48
10820: PPUSH
10821: LD_VAR 0 3
10825: PPUSH
10826: LD_INT 1
10828: PPUSH
10829: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10833: LD_INT 49
10835: PPUSH
10836: LD_VAR 0 3
10840: PPUSH
10841: LD_INT 1
10843: PPUSH
10844: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10848: LD_INT 69
10850: PPUSH
10851: LD_VAR 0 3
10855: PPUSH
10856: LD_INT 1
10858: PPUSH
10859: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10863: LD_INT 39
10865: PPUSH
10866: LD_VAR 0 3
10870: PPUSH
10871: LD_INT 1
10873: PPUSH
10874: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10878: LD_INT 34
10880: PPUSH
10881: LD_VAR 0 3
10885: PPUSH
10886: LD_INT 1
10888: PPUSH
10889: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10893: LD_INT 42
10895: PPUSH
10896: LD_VAR 0 3
10900: PPUSH
10901: LD_INT 1
10903: PPUSH
10904: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10908: LD_INT 44
10910: PPUSH
10911: LD_VAR 0 3
10915: PPUSH
10916: LD_INT 1
10918: PPUSH
10919: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10923: LD_INT 41
10925: PPUSH
10926: LD_VAR 0 3
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10938: LD_INT 43
10940: PPUSH
10941: LD_VAR 0 3
10945: PPUSH
10946: LD_INT 1
10948: PPUSH
10949: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10953: LD_INT 70
10955: PPUSH
10956: LD_VAR 0 3
10960: PPUSH
10961: LD_INT 1
10963: PPUSH
10964: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10968: LD_INT 51
10970: PPUSH
10971: LD_VAR 0 3
10975: PPUSH
10976: LD_INT 1
10978: PPUSH
10979: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10983: LD_INT 52
10985: PPUSH
10986: LD_VAR 0 3
10990: PPUSH
10991: LD_INT 1
10993: PPUSH
10994: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10998: LD_INT 6
11000: PPUSH
11001: LD_VAR 0 3
11005: PPUSH
11006: LD_INT 1
11008: PPUSH
11009: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11013: LD_INT 15
11015: PPUSH
11016: LD_VAR 0 3
11020: PPUSH
11021: LD_INT 1
11023: PPUSH
11024: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11028: LD_INT 7
11030: PPUSH
11031: LD_VAR 0 3
11035: PPUSH
11036: LD_INT 1
11038: PPUSH
11039: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11043: LD_INT 12
11045: PPUSH
11046: LD_VAR 0 3
11050: PPUSH
11051: LD_INT 1
11053: PPUSH
11054: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11058: LD_INT 18
11060: PPUSH
11061: LD_VAR 0 3
11065: PPUSH
11066: LD_INT 1
11068: PPUSH
11069: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11073: LD_INT 60
11075: PPUSH
11076: LD_VAR 0 3
11080: PPUSH
11081: LD_INT 1
11083: PPUSH
11084: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11088: LD_INT 9
11090: PPUSH
11091: LD_VAR 0 3
11095: PPUSH
11096: LD_INT 1
11098: PPUSH
11099: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11103: LD_INT 30
11105: PPUSH
11106: LD_VAR 0 3
11110: PPUSH
11111: LD_INT 1
11113: PPUSH
11114: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11118: LD_INT 37
11120: PPUSH
11121: LD_VAR 0 3
11125: PPUSH
11126: LD_INT 1
11128: PPUSH
11129: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11133: LD_INT 5
11135: PPUSH
11136: LD_VAR 0 3
11140: PPUSH
11141: LD_INT 1
11143: PPUSH
11144: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11148: LD_INT 66
11150: PPUSH
11151: LD_VAR 0 3
11155: PPUSH
11156: LD_INT 1
11158: PPUSH
11159: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11163: LD_INT 21
11165: PPUSH
11166: LD_VAR 0 3
11170: PPUSH
11171: LD_INT 1
11173: PPUSH
11174: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11178: LD_INT 22
11180: PPUSH
11181: LD_VAR 0 3
11185: PPUSH
11186: LD_INT 1
11188: PPUSH
11189: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11193: LD_INT 54
11195: PPUSH
11196: LD_VAR 0 3
11200: PPUSH
11201: LD_INT 1
11203: PPUSH
11204: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11208: LD_INT 0
11210: PPUSH
11211: LD_VAR 0 3
11215: PPUSH
11216: LD_INT 1
11218: PPUSH
11219: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11223: LD_INT 1
11225: PPUSH
11226: LD_VAR 0 3
11230: PPUSH
11231: LD_INT 1
11233: PPUSH
11234: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11238: LD_INT 2
11240: PPUSH
11241: LD_VAR 0 3
11245: PPUSH
11246: LD_INT 1
11248: PPUSH
11249: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11253: LD_INT 3
11255: PPUSH
11256: LD_VAR 0 3
11260: PPUSH
11261: LD_INT 1
11263: PPUSH
11264: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11268: LD_INT 4
11270: PPUSH
11271: LD_VAR 0 3
11275: PPUSH
11276: LD_INT 1
11278: PPUSH
11279: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11283: LD_INT 5
11285: PPUSH
11286: LD_VAR 0 3
11290: PPUSH
11291: LD_INT 1
11293: PPUSH
11294: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11298: LD_INT 6
11300: PPUSH
11301: LD_VAR 0 3
11305: PPUSH
11306: LD_INT 1
11308: PPUSH
11309: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11313: LD_INT 7
11315: PPUSH
11316: LD_VAR 0 3
11320: PPUSH
11321: LD_INT 1
11323: PPUSH
11324: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11328: LD_INT 8
11330: PPUSH
11331: LD_VAR 0 3
11335: PPUSH
11336: LD_INT 1
11338: PPUSH
11339: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11343: LD_INT 10
11345: PPUSH
11346: LD_VAR 0 3
11350: PPUSH
11351: LD_INT 1
11353: PPUSH
11354: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11358: LD_INT 11
11360: PPUSH
11361: LD_VAR 0 3
11365: PPUSH
11366: LD_INT 1
11368: PPUSH
11369: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11373: LD_INT 12
11375: PPUSH
11376: LD_VAR 0 3
11380: PPUSH
11381: LD_INT 1
11383: PPUSH
11384: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11388: LD_INT 13
11390: PPUSH
11391: LD_VAR 0 3
11395: PPUSH
11396: LD_INT 1
11398: PPUSH
11399: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11403: LD_INT 14
11405: PPUSH
11406: LD_VAR 0 3
11410: PPUSH
11411: LD_INT 1
11413: PPUSH
11414: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11418: LD_INT 15
11420: PPUSH
11421: LD_VAR 0 3
11425: PPUSH
11426: LD_INT 1
11428: PPUSH
11429: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11433: LD_INT 16
11435: PPUSH
11436: LD_VAR 0 3
11440: PPUSH
11441: LD_INT 1
11443: PPUSH
11444: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11448: LD_INT 17
11450: PPUSH
11451: LD_VAR 0 3
11455: PPUSH
11456: LD_INT 1
11458: PPUSH
11459: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11463: LD_INT 19
11465: PPUSH
11466: LD_VAR 0 3
11470: PPUSH
11471: LD_INT 1
11473: PPUSH
11474: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11478: LD_INT 20
11480: PPUSH
11481: LD_VAR 0 3
11485: PPUSH
11486: LD_INT 1
11488: PPUSH
11489: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11493: LD_INT 21
11495: PPUSH
11496: LD_VAR 0 3
11500: PPUSH
11501: LD_INT 1
11503: PPUSH
11504: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11508: LD_INT 23
11510: PPUSH
11511: LD_VAR 0 3
11515: PPUSH
11516: LD_INT 1
11518: PPUSH
11519: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11523: LD_INT 26
11525: PPUSH
11526: LD_VAR 0 3
11530: PPUSH
11531: LD_INT 1
11533: PPUSH
11534: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11538: LD_INT 27
11540: PPUSH
11541: LD_VAR 0 3
11545: PPUSH
11546: LD_INT 1
11548: PPUSH
11549: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11553: LD_INT 28
11555: PPUSH
11556: LD_VAR 0 3
11560: PPUSH
11561: LD_INT 1
11563: PPUSH
11564: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11568: LD_INT 29
11570: PPUSH
11571: LD_VAR 0 3
11575: PPUSH
11576: LD_INT 1
11578: PPUSH
11579: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11583: LD_INT 30
11585: PPUSH
11586: LD_VAR 0 3
11590: PPUSH
11591: LD_INT 1
11593: PPUSH
11594: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11598: LD_INT 31
11600: PPUSH
11601: LD_VAR 0 3
11605: PPUSH
11606: LD_INT 1
11608: PPUSH
11609: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11613: LD_INT 32
11615: PPUSH
11616: LD_VAR 0 3
11620: PPUSH
11621: LD_INT 1
11623: PPUSH
11624: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11628: LD_INT 36
11630: PPUSH
11631: LD_VAR 0 3
11635: PPUSH
11636: LD_INT 1
11638: PPUSH
11639: CALL_OW 324
// end ; 5 :
11643: GO 13774
11645: LD_INT 5
11647: DOUBLE
11648: EQUAL
11649: IFTRUE 11653
11651: GO 12766
11653: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11654: LD_INT 35
11656: PPUSH
11657: LD_VAR 0 3
11661: PPUSH
11662: LD_INT 1
11664: PPUSH
11665: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11669: LD_INT 45
11671: PPUSH
11672: LD_VAR 0 3
11676: PPUSH
11677: LD_INT 1
11679: PPUSH
11680: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11684: LD_INT 46
11686: PPUSH
11687: LD_VAR 0 3
11691: PPUSH
11692: LD_INT 1
11694: PPUSH
11695: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11699: LD_INT 47
11701: PPUSH
11702: LD_VAR 0 3
11706: PPUSH
11707: LD_INT 1
11709: PPUSH
11710: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11714: LD_INT 1
11716: PPUSH
11717: LD_VAR 0 3
11721: PPUSH
11722: LD_INT 1
11724: PPUSH
11725: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11729: LD_INT 2
11731: PPUSH
11732: LD_VAR 0 3
11736: PPUSH
11737: LD_INT 1
11739: PPUSH
11740: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11744: LD_INT 11
11746: PPUSH
11747: LD_VAR 0 3
11751: PPUSH
11752: LD_INT 1
11754: PPUSH
11755: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11759: LD_INT 20
11761: PPUSH
11762: LD_VAR 0 3
11766: PPUSH
11767: LD_INT 1
11769: PPUSH
11770: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11774: LD_INT 48
11776: PPUSH
11777: LD_VAR 0 3
11781: PPUSH
11782: LD_INT 1
11784: PPUSH
11785: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11789: LD_INT 49
11791: PPUSH
11792: LD_VAR 0 3
11796: PPUSH
11797: LD_INT 1
11799: PPUSH
11800: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11804: LD_INT 69
11806: PPUSH
11807: LD_VAR 0 3
11811: PPUSH
11812: LD_INT 1
11814: PPUSH
11815: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11819: LD_INT 39
11821: PPUSH
11822: LD_VAR 0 3
11826: PPUSH
11827: LD_INT 1
11829: PPUSH
11830: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11834: LD_INT 34
11836: PPUSH
11837: LD_VAR 0 3
11841: PPUSH
11842: LD_INT 1
11844: PPUSH
11845: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11849: LD_INT 42
11851: PPUSH
11852: LD_VAR 0 3
11856: PPUSH
11857: LD_INT 1
11859: PPUSH
11860: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11864: LD_INT 44
11866: PPUSH
11867: LD_VAR 0 3
11871: PPUSH
11872: LD_INT 1
11874: PPUSH
11875: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11879: LD_INT 41
11881: PPUSH
11882: LD_VAR 0 3
11886: PPUSH
11887: LD_INT 1
11889: PPUSH
11890: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11894: LD_INT 40
11896: PPUSH
11897: LD_VAR 0 3
11901: PPUSH
11902: LD_INT 1
11904: PPUSH
11905: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11909: LD_INT 43
11911: PPUSH
11912: LD_VAR 0 3
11916: PPUSH
11917: LD_INT 1
11919: PPUSH
11920: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11924: LD_INT 70
11926: PPUSH
11927: LD_VAR 0 3
11931: PPUSH
11932: LD_INT 1
11934: PPUSH
11935: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11939: LD_INT 51
11941: PPUSH
11942: LD_VAR 0 3
11946: PPUSH
11947: LD_INT 1
11949: PPUSH
11950: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11954: LD_INT 52
11956: PPUSH
11957: LD_VAR 0 3
11961: PPUSH
11962: LD_INT 1
11964: PPUSH
11965: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11969: LD_INT 6
11971: PPUSH
11972: LD_VAR 0 3
11976: PPUSH
11977: LD_INT 1
11979: PPUSH
11980: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11984: LD_INT 15
11986: PPUSH
11987: LD_VAR 0 3
11991: PPUSH
11992: LD_INT 1
11994: PPUSH
11995: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11999: LD_INT 7
12001: PPUSH
12002: LD_VAR 0 3
12006: PPUSH
12007: LD_INT 1
12009: PPUSH
12010: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12014: LD_INT 12
12016: PPUSH
12017: LD_VAR 0 3
12021: PPUSH
12022: LD_INT 1
12024: PPUSH
12025: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12029: LD_INT 17
12031: PPUSH
12032: LD_VAR 0 3
12036: PPUSH
12037: LD_INT 1
12039: PPUSH
12040: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12044: LD_INT 18
12046: PPUSH
12047: LD_VAR 0 3
12051: PPUSH
12052: LD_INT 1
12054: PPUSH
12055: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12059: LD_INT 60
12061: PPUSH
12062: LD_VAR 0 3
12066: PPUSH
12067: LD_INT 1
12069: PPUSH
12070: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12074: LD_INT 32
12076: PPUSH
12077: LD_VAR 0 3
12081: PPUSH
12082: LD_INT 1
12084: PPUSH
12085: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12089: LD_INT 9
12091: PPUSH
12092: LD_VAR 0 3
12096: PPUSH
12097: LD_INT 1
12099: PPUSH
12100: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12104: LD_INT 57
12106: PPUSH
12107: LD_VAR 0 3
12111: PPUSH
12112: LD_INT 1
12114: PPUSH
12115: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12119: LD_INT 30
12121: PPUSH
12122: LD_VAR 0 3
12126: PPUSH
12127: LD_INT 1
12129: PPUSH
12130: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12134: LD_INT 37
12136: PPUSH
12137: LD_VAR 0 3
12141: PPUSH
12142: LD_INT 1
12144: PPUSH
12145: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12149: LD_INT 63
12151: PPUSH
12152: LD_VAR 0 3
12156: PPUSH
12157: LD_INT 1
12159: PPUSH
12160: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12164: LD_INT 3
12166: PPUSH
12167: LD_VAR 0 3
12171: PPUSH
12172: LD_INT 1
12174: PPUSH
12175: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12179: LD_INT 4
12181: PPUSH
12182: LD_VAR 0 3
12186: PPUSH
12187: LD_INT 1
12189: PPUSH
12190: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12194: LD_INT 5
12196: PPUSH
12197: LD_VAR 0 3
12201: PPUSH
12202: LD_INT 1
12204: PPUSH
12205: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12209: LD_INT 66
12211: PPUSH
12212: LD_VAR 0 3
12216: PPUSH
12217: LD_INT 1
12219: PPUSH
12220: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12224: LD_INT 21
12226: PPUSH
12227: LD_VAR 0 3
12231: PPUSH
12232: LD_INT 1
12234: PPUSH
12235: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12239: LD_INT 22
12241: PPUSH
12242: LD_VAR 0 3
12246: PPUSH
12247: LD_INT 1
12249: PPUSH
12250: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12254: LD_INT 19
12256: PPUSH
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 1
12264: PPUSH
12265: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12269: LD_INT 54
12271: PPUSH
12272: LD_VAR 0 3
12276: PPUSH
12277: LD_INT 1
12279: PPUSH
12280: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12284: LD_INT 55
12286: PPUSH
12287: LD_VAR 0 3
12291: PPUSH
12292: LD_INT 1
12294: PPUSH
12295: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12299: LD_INT 0
12301: PPUSH
12302: LD_VAR 0 3
12306: PPUSH
12307: LD_INT 1
12309: PPUSH
12310: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12314: LD_INT 1
12316: PPUSH
12317: LD_VAR 0 3
12321: PPUSH
12322: LD_INT 1
12324: PPUSH
12325: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12329: LD_INT 2
12331: PPUSH
12332: LD_VAR 0 3
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12344: LD_INT 3
12346: PPUSH
12347: LD_VAR 0 3
12351: PPUSH
12352: LD_INT 1
12354: PPUSH
12355: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12359: LD_INT 4
12361: PPUSH
12362: LD_VAR 0 3
12366: PPUSH
12367: LD_INT 1
12369: PPUSH
12370: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12374: LD_INT 5
12376: PPUSH
12377: LD_VAR 0 3
12381: PPUSH
12382: LD_INT 1
12384: PPUSH
12385: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12389: LD_INT 6
12391: PPUSH
12392: LD_VAR 0 3
12396: PPUSH
12397: LD_INT 1
12399: PPUSH
12400: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12404: LD_INT 7
12406: PPUSH
12407: LD_VAR 0 3
12411: PPUSH
12412: LD_INT 1
12414: PPUSH
12415: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12419: LD_INT 8
12421: PPUSH
12422: LD_VAR 0 3
12426: PPUSH
12427: LD_INT 1
12429: PPUSH
12430: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12434: LD_INT 10
12436: PPUSH
12437: LD_VAR 0 3
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12449: LD_INT 11
12451: PPUSH
12452: LD_VAR 0 3
12456: PPUSH
12457: LD_INT 1
12459: PPUSH
12460: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12464: LD_INT 12
12466: PPUSH
12467: LD_VAR 0 3
12471: PPUSH
12472: LD_INT 1
12474: PPUSH
12475: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12479: LD_INT 13
12481: PPUSH
12482: LD_VAR 0 3
12486: PPUSH
12487: LD_INT 1
12489: PPUSH
12490: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12494: LD_INT 14
12496: PPUSH
12497: LD_VAR 0 3
12501: PPUSH
12502: LD_INT 1
12504: PPUSH
12505: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12509: LD_INT 15
12511: PPUSH
12512: LD_VAR 0 3
12516: PPUSH
12517: LD_INT 1
12519: PPUSH
12520: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12524: LD_INT 16
12526: PPUSH
12527: LD_VAR 0 3
12531: PPUSH
12532: LD_INT 1
12534: PPUSH
12535: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12539: LD_INT 17
12541: PPUSH
12542: LD_VAR 0 3
12546: PPUSH
12547: LD_INT 1
12549: PPUSH
12550: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12554: LD_INT 18
12556: PPUSH
12557: LD_VAR 0 3
12561: PPUSH
12562: LD_INT 1
12564: PPUSH
12565: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12569: LD_INT 19
12571: PPUSH
12572: LD_VAR 0 3
12576: PPUSH
12577: LD_INT 1
12579: PPUSH
12580: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12584: LD_INT 20
12586: PPUSH
12587: LD_VAR 0 3
12591: PPUSH
12592: LD_INT 1
12594: PPUSH
12595: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12599: LD_INT 21
12601: PPUSH
12602: LD_VAR 0 3
12606: PPUSH
12607: LD_INT 1
12609: PPUSH
12610: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12614: LD_INT 23
12616: PPUSH
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 1
12624: PPUSH
12625: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12629: LD_INT 26
12631: PPUSH
12632: LD_VAR 0 3
12636: PPUSH
12637: LD_INT 1
12639: PPUSH
12640: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12644: LD_INT 27
12646: PPUSH
12647: LD_VAR 0 3
12651: PPUSH
12652: LD_INT 1
12654: PPUSH
12655: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12659: LD_INT 28
12661: PPUSH
12662: LD_VAR 0 3
12666: PPUSH
12667: LD_INT 1
12669: PPUSH
12670: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12674: LD_INT 29
12676: PPUSH
12677: LD_VAR 0 3
12681: PPUSH
12682: LD_INT 1
12684: PPUSH
12685: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12689: LD_INT 30
12691: PPUSH
12692: LD_VAR 0 3
12696: PPUSH
12697: LD_INT 1
12699: PPUSH
12700: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12704: LD_INT 31
12706: PPUSH
12707: LD_VAR 0 3
12711: PPUSH
12712: LD_INT 1
12714: PPUSH
12715: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12719: LD_INT 32
12721: PPUSH
12722: LD_VAR 0 3
12726: PPUSH
12727: LD_INT 1
12729: PPUSH
12730: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12734: LD_INT 33
12736: PPUSH
12737: LD_VAR 0 3
12741: PPUSH
12742: LD_INT 1
12744: PPUSH
12745: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12749: LD_INT 36
12751: PPUSH
12752: LD_VAR 0 3
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: CALL_OW 324
// end ; 6 :
12764: GO 13774
12766: LD_INT 6
12768: DOUBLE
12769: EQUAL
12770: IFTRUE 12774
12772: GO 13699
12774: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12775: LD_INT 35
12777: PPUSH
12778: LD_VAR 0 3
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12790: LD_INT 45
12792: PPUSH
12793: LD_VAR 0 3
12797: PPUSH
12798: LD_INT 1
12800: PPUSH
12801: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12805: LD_INT 46
12807: PPUSH
12808: LD_VAR 0 3
12812: PPUSH
12813: LD_INT 1
12815: PPUSH
12816: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12820: LD_INT 47
12822: PPUSH
12823: LD_VAR 0 3
12827: PPUSH
12828: LD_INT 1
12830: PPUSH
12831: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12835: LD_INT 1
12837: PPUSH
12838: LD_VAR 0 3
12842: PPUSH
12843: LD_INT 1
12845: PPUSH
12846: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12850: LD_INT 2
12852: PPUSH
12853: LD_VAR 0 3
12857: PPUSH
12858: LD_INT 1
12860: PPUSH
12861: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12865: LD_INT 11
12867: PPUSH
12868: LD_VAR 0 3
12872: PPUSH
12873: LD_INT 1
12875: PPUSH
12876: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12880: LD_INT 20
12882: PPUSH
12883: LD_VAR 0 3
12887: PPUSH
12888: LD_INT 1
12890: PPUSH
12891: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12895: LD_INT 48
12897: PPUSH
12898: LD_VAR 0 3
12902: PPUSH
12903: LD_INT 1
12905: PPUSH
12906: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12910: LD_INT 49
12912: PPUSH
12913: LD_VAR 0 3
12917: PPUSH
12918: LD_INT 1
12920: PPUSH
12921: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12925: LD_INT 50
12927: PPUSH
12928: LD_VAR 0 3
12932: PPUSH
12933: LD_INT 1
12935: PPUSH
12936: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12940: LD_INT 69
12942: PPUSH
12943: LD_VAR 0 3
12947: PPUSH
12948: LD_INT 1
12950: PPUSH
12951: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12955: LD_INT 39
12957: PPUSH
12958: LD_VAR 0 3
12962: PPUSH
12963: LD_INT 1
12965: PPUSH
12966: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12970: LD_INT 34
12972: PPUSH
12973: LD_VAR 0 3
12977: PPUSH
12978: LD_INT 1
12980: PPUSH
12981: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12985: LD_INT 42
12987: PPUSH
12988: LD_VAR 0 3
12992: PPUSH
12993: LD_INT 1
12995: PPUSH
12996: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13000: LD_INT 44
13002: PPUSH
13003: LD_VAR 0 3
13007: PPUSH
13008: LD_INT 1
13010: PPUSH
13011: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13015: LD_INT 41
13017: PPUSH
13018: LD_VAR 0 3
13022: PPUSH
13023: LD_INT 1
13025: PPUSH
13026: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13030: LD_INT 13
13032: PPUSH
13033: LD_VAR 0 3
13037: PPUSH
13038: LD_INT 1
13040: PPUSH
13041: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13045: LD_INT 40
13047: PPUSH
13048: LD_VAR 0 3
13052: PPUSH
13053: LD_INT 1
13055: PPUSH
13056: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13060: LD_INT 43
13062: PPUSH
13063: LD_VAR 0 3
13067: PPUSH
13068: LD_INT 1
13070: PPUSH
13071: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13075: LD_INT 70
13077: PPUSH
13078: LD_VAR 0 3
13082: PPUSH
13083: LD_INT 1
13085: PPUSH
13086: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13090: LD_INT 23
13092: PPUSH
13093: LD_VAR 0 3
13097: PPUSH
13098: LD_INT 1
13100: PPUSH
13101: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13105: LD_INT 51
13107: PPUSH
13108: LD_VAR 0 3
13112: PPUSH
13113: LD_INT 1
13115: PPUSH
13116: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13120: LD_INT 52
13122: PPUSH
13123: LD_VAR 0 3
13127: PPUSH
13128: LD_INT 1
13130: PPUSH
13131: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13135: LD_INT 6
13137: PPUSH
13138: LD_VAR 0 3
13142: PPUSH
13143: LD_INT 1
13145: PPUSH
13146: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13150: LD_INT 15
13152: PPUSH
13153: LD_VAR 0 3
13157: PPUSH
13158: LD_INT 1
13160: PPUSH
13161: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13165: LD_INT 7
13167: PPUSH
13168: LD_VAR 0 3
13172: PPUSH
13173: LD_INT 1
13175: PPUSH
13176: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13180: LD_INT 12
13182: PPUSH
13183: LD_VAR 0 3
13187: PPUSH
13188: LD_INT 1
13190: PPUSH
13191: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13195: LD_INT 10
13197: PPUSH
13198: LD_VAR 0 3
13202: PPUSH
13203: LD_INT 1
13205: PPUSH
13206: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13210: LD_INT 17
13212: PPUSH
13213: LD_VAR 0 3
13217: PPUSH
13218: LD_INT 1
13220: PPUSH
13221: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13225: LD_INT 18
13227: PPUSH
13228: LD_VAR 0 3
13232: PPUSH
13233: LD_INT 1
13235: PPUSH
13236: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13240: LD_INT 60
13242: PPUSH
13243: LD_VAR 0 3
13247: PPUSH
13248: LD_INT 1
13250: PPUSH
13251: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13255: LD_INT 61
13257: PPUSH
13258: LD_VAR 0 3
13262: PPUSH
13263: LD_INT 1
13265: PPUSH
13266: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13270: LD_INT 32
13272: PPUSH
13273: LD_VAR 0 3
13277: PPUSH
13278: LD_INT 1
13280: PPUSH
13281: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13285: LD_INT 27
13287: PPUSH
13288: LD_VAR 0 3
13292: PPUSH
13293: LD_INT 1
13295: PPUSH
13296: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13300: LD_INT 36
13302: PPUSH
13303: LD_VAR 0 3
13307: PPUSH
13308: LD_INT 1
13310: PPUSH
13311: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13315: LD_INT 33
13317: PPUSH
13318: LD_VAR 0 3
13322: PPUSH
13323: LD_INT 1
13325: PPUSH
13326: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13330: LD_INT 9
13332: PPUSH
13333: LD_VAR 0 3
13337: PPUSH
13338: LD_INT 1
13340: PPUSH
13341: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13345: LD_INT 38
13347: PPUSH
13348: LD_VAR 0 3
13352: PPUSH
13353: LD_INT 1
13355: PPUSH
13356: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13360: LD_INT 57
13362: PPUSH
13363: LD_VAR 0 3
13367: PPUSH
13368: LD_INT 1
13370: PPUSH
13371: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13375: LD_INT 58
13377: PPUSH
13378: LD_VAR 0 3
13382: PPUSH
13383: LD_INT 1
13385: PPUSH
13386: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13390: LD_INT 28
13392: PPUSH
13393: LD_VAR 0 3
13397: PPUSH
13398: LD_INT 1
13400: PPUSH
13401: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13405: LD_INT 29
13407: PPUSH
13408: LD_VAR 0 3
13412: PPUSH
13413: LD_INT 1
13415: PPUSH
13416: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13420: LD_INT 30
13422: PPUSH
13423: LD_VAR 0 3
13427: PPUSH
13428: LD_INT 1
13430: PPUSH
13431: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13435: LD_INT 37
13437: PPUSH
13438: LD_VAR 0 3
13442: PPUSH
13443: LD_INT 1
13445: PPUSH
13446: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13450: LD_INT 63
13452: PPUSH
13453: LD_VAR 0 3
13457: PPUSH
13458: LD_INT 1
13460: PPUSH
13461: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13465: LD_INT 64
13467: PPUSH
13468: LD_VAR 0 3
13472: PPUSH
13473: LD_INT 1
13475: PPUSH
13476: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13480: LD_INT 3
13482: PPUSH
13483: LD_VAR 0 3
13487: PPUSH
13488: LD_INT 1
13490: PPUSH
13491: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13495: LD_INT 4
13497: PPUSH
13498: LD_VAR 0 3
13502: PPUSH
13503: LD_INT 1
13505: PPUSH
13506: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13510: LD_INT 5
13512: PPUSH
13513: LD_VAR 0 3
13517: PPUSH
13518: LD_INT 1
13520: PPUSH
13521: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13525: LD_INT 8
13527: PPUSH
13528: LD_VAR 0 3
13532: PPUSH
13533: LD_INT 1
13535: PPUSH
13536: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13540: LD_INT 66
13542: PPUSH
13543: LD_VAR 0 3
13547: PPUSH
13548: LD_INT 1
13550: PPUSH
13551: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13555: LD_INT 67
13557: PPUSH
13558: LD_VAR 0 3
13562: PPUSH
13563: LD_INT 1
13565: PPUSH
13566: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13570: LD_INT 21
13572: PPUSH
13573: LD_VAR 0 3
13577: PPUSH
13578: LD_INT 1
13580: PPUSH
13581: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13585: LD_INT 22
13587: PPUSH
13588: LD_VAR 0 3
13592: PPUSH
13593: LD_INT 1
13595: PPUSH
13596: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13600: LD_INT 19
13602: PPUSH
13603: LD_VAR 0 3
13607: PPUSH
13608: LD_INT 1
13610: PPUSH
13611: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13615: LD_INT 26
13617: PPUSH
13618: LD_VAR 0 3
13622: PPUSH
13623: LD_INT 1
13625: PPUSH
13626: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13630: LD_INT 54
13632: PPUSH
13633: LD_VAR 0 3
13637: PPUSH
13638: LD_INT 1
13640: PPUSH
13641: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13645: LD_INT 55
13647: PPUSH
13648: LD_VAR 0 3
13652: PPUSH
13653: LD_INT 1
13655: PPUSH
13656: CALL_OW 322
// for i = 0 to 39 do
13660: LD_ADDR_VAR 0 4
13664: PUSH
13665: DOUBLE
13666: LD_INT 0
13668: DEC
13669: ST_TO_ADDR
13670: LD_INT 39
13672: PUSH
13673: FOR_TO
13674: IFFALSE 13695
// SetRestrict ( i , side , true ) ;
13676: LD_VAR 0 4
13680: PPUSH
13681: LD_VAR 0 3
13685: PPUSH
13686: LD_INT 1
13688: PPUSH
13689: CALL_OW 324
13693: GO 13673
13695: POP
13696: POP
// end ; else
13697: GO 13774
13699: POP
// begin for i = 1 to 73 do
13700: LD_ADDR_VAR 0 4
13704: PUSH
13705: DOUBLE
13706: LD_INT 1
13708: DEC
13709: ST_TO_ADDR
13710: LD_INT 73
13712: PUSH
13713: FOR_TO
13714: IFFALSE 13735
// SetTech ( i , side , state_enabled ) ;
13716: LD_VAR 0 4
13720: PPUSH
13721: LD_VAR 0 3
13725: PPUSH
13726: LD_INT 1
13728: PPUSH
13729: CALL_OW 322
13733: GO 13713
13735: POP
13736: POP
// for i = 0 to 39 do
13737: LD_ADDR_VAR 0 4
13741: PUSH
13742: DOUBLE
13743: LD_INT 0
13745: DEC
13746: ST_TO_ADDR
13747: LD_INT 39
13749: PUSH
13750: FOR_TO
13751: IFFALSE 13772
// SetRestrict ( i , side , true ) ;
13753: LD_VAR 0 4
13757: PPUSH
13758: LD_VAR 0 3
13762: PPUSH
13763: LD_INT 1
13765: PPUSH
13766: CALL_OW 324
13770: GO 13750
13772: POP
13773: POP
// end ; end ; end ;
13774: GO 9779
13776: POP
13777: POP
// end ; end_of_file
13778: LD_VAR 0 2
13782: RET
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
13783: LD_INT 0
13785: PPUSH
13786: PPUSH
13787: PPUSH
// BuildUpTime_Delay = 0 ;
13788: LD_ADDR_EXP 57
13792: PUSH
13793: LD_INT 0
13795: ST_TO_ADDR
// if not def_builduptime then
13796: LD_EXP 14
13800: NOT
13801: IFFALSE 13805
// exit ;
13803: GO 13988
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
13805: LD_ADDR_EXP 57
13809: PUSH
13810: LD_INT 8400
13812: PUSH
13813: LD_INT 2100
13815: PUSH
13816: LD_EXP 14
13820: MUL
13821: PLUS
13822: ST_TO_ADDR
// BuildUpTimeActive := true ;
13823: LD_ADDR_EXP 56
13827: PUSH
13828: LD_INT 1
13830: ST_TO_ADDR
// for i := 1 to 8 do
13831: LD_ADDR_VAR 0 2
13835: PUSH
13836: DOUBLE
13837: LD_INT 1
13839: DEC
13840: ST_TO_ADDR
13841: LD_INT 8
13843: PUSH
13844: FOR_TO
13845: IFFALSE 13986
// if Side_Positions [ i ] then
13847: LD_EXP 34
13851: PUSH
13852: LD_VAR 0 2
13856: ARRAY
13857: IFFALSE 13984
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
13859: LD_EXP 55
13863: PUSH
13864: LD_EXP 34
13868: PUSH
13869: LD_VAR 0 2
13873: ARRAY
13874: ARRAY
13875: PPUSH
13876: LD_INT 5
13878: PPUSH
13879: CALL_OW 424
// for j := 1 to 8 do
13883: LD_ADDR_VAR 0 3
13887: PUSH
13888: DOUBLE
13889: LD_INT 1
13891: DEC
13892: ST_TO_ADDR
13893: LD_INT 8
13895: PUSH
13896: FOR_TO
13897: IFFALSE 13982
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13899: LD_EXP 34
13903: PUSH
13904: LD_VAR 0 3
13908: ARRAY
13909: PUSH
13910: LD_EXP 31
13914: PUSH
13915: LD_VAR 0 2
13919: ARRAY
13920: PUSH
13921: LD_EXP 31
13925: PUSH
13926: LD_VAR 0 3
13930: ARRAY
13931: NONEQUAL
13932: PUSH
13933: LD_EXP 36
13937: NOT
13938: PUSH
13939: LD_VAR 0 2
13943: PUSH
13944: LD_VAR 0 3
13948: NONEQUAL
13949: AND
13950: OR
13951: AND
13952: IFFALSE 13980
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13954: LD_VAR 0 3
13958: PPUSH
13959: LD_EXP 55
13963: PUSH
13964: LD_EXP 34
13968: PUSH
13969: LD_VAR 0 2
13973: ARRAY
13974: ARRAY
13975: PPUSH
13976: CALL_OW 333
13980: GO 13896
13982: POP
13983: POP
// end ;
13984: GO 13844
13986: POP
13987: POP
// end ;
13988: LD_VAR 0 1
13992: RET
// export function EndBuildUp ; var i , j ; begin
13993: LD_INT 0
13995: PPUSH
13996: PPUSH
13997: PPUSH
// BuildUpTimeActive := false ;
13998: LD_ADDR_EXP 56
14002: PUSH
14003: LD_INT 0
14005: ST_TO_ADDR
// for i := 1 to 8 do
14006: LD_ADDR_VAR 0 2
14010: PUSH
14011: DOUBLE
14012: LD_INT 1
14014: DEC
14015: ST_TO_ADDR
14016: LD_INT 8
14018: PUSH
14019: FOR_TO
14020: IFFALSE 14161
// if Side_Positions [ i ] then
14022: LD_EXP 34
14026: PUSH
14027: LD_VAR 0 2
14031: ARRAY
14032: IFFALSE 14159
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14034: LD_EXP 55
14038: PUSH
14039: LD_EXP 34
14043: PUSH
14044: LD_VAR 0 2
14048: ARRAY
14049: ARRAY
14050: PPUSH
14051: LD_INT 0
14053: PPUSH
14054: CALL_OW 424
// for j := 1 to 8 do
14058: LD_ADDR_VAR 0 3
14062: PUSH
14063: DOUBLE
14064: LD_INT 1
14066: DEC
14067: ST_TO_ADDR
14068: LD_INT 8
14070: PUSH
14071: FOR_TO
14072: IFFALSE 14157
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14074: LD_EXP 34
14078: PUSH
14079: LD_VAR 0 3
14083: ARRAY
14084: PUSH
14085: LD_EXP 31
14089: PUSH
14090: LD_VAR 0 2
14094: ARRAY
14095: PUSH
14096: LD_EXP 31
14100: PUSH
14101: LD_VAR 0 3
14105: ARRAY
14106: NONEQUAL
14107: PUSH
14108: LD_EXP 36
14112: NOT
14113: PUSH
14114: LD_VAR 0 2
14118: PUSH
14119: LD_VAR 0 3
14123: NONEQUAL
14124: AND
14125: OR
14126: AND
14127: IFFALSE 14155
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14129: LD_VAR 0 3
14133: PPUSH
14134: LD_EXP 55
14138: PUSH
14139: LD_EXP 34
14143: PUSH
14144: LD_VAR 0 2
14148: ARRAY
14149: ARRAY
14150: PPUSH
14151: CALL_OW 334
14155: GO 14071
14157: POP
14158: POP
// end ;
14159: GO 14019
14161: POP
14162: POP
// end ;
14163: LD_VAR 0 1
14167: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14168: LD_EXP 56
14172: IFFALSE 14347
14174: GO 14176
14176: DISABLE
14177: LD_INT 0
14179: PPUSH
14180: PPUSH
// begin for i := 1 to 8 do
14181: LD_ADDR_VAR 0 1
14185: PUSH
14186: DOUBLE
14187: LD_INT 1
14189: DEC
14190: ST_TO_ADDR
14191: LD_INT 8
14193: PUSH
14194: FOR_TO
14195: IFFALSE 14344
// if Side_Positions [ i ] then
14197: LD_EXP 34
14201: PUSH
14202: LD_VAR 0 1
14206: ARRAY
14207: IFFALSE 14342
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14209: LD_ADDR_VAR 0 2
14213: PUSH
14214: LD_EXP 55
14218: PUSH
14219: LD_EXP 34
14223: PUSH
14224: LD_VAR 0 1
14228: ARRAY
14229: ARRAY
14230: PPUSH
14231: LD_INT 2
14233: PUSH
14234: LD_INT 21
14236: PUSH
14237: LD_INT 1
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 21
14246: PUSH
14247: LD_INT 2
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: LIST
14258: PUSH
14259: LD_INT 22
14261: PUSH
14262: LD_OWVAR 2
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PPUSH
14275: CALL_OW 70
14279: PUSH
14280: FOR_IN
14281: IFFALSE 14340
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14283: LD_EXP 31
14287: PUSH
14288: LD_VAR 0 1
14292: ARRAY
14293: PUSH
14294: LD_EXP 31
14298: PUSH
14299: LD_OWVAR 2
14303: ARRAY
14304: NONEQUAL
14305: PUSH
14306: LD_EXP 36
14310: NOT
14311: PUSH
14312: LD_VAR 0 1
14316: PUSH
14317: LD_OWVAR 2
14321: NONEQUAL
14322: AND
14323: OR
14324: IFFALSE 14338
// ComMoveToArea ( un , BuildUpEscape ) ;
14326: LD_VAR 0 2
14330: PPUSH
14331: LD_INT 18
14333: PPUSH
14334: CALL_OW 113
14338: GO 14280
14340: POP
14341: POP
14342: GO 14194
14344: POP
14345: POP
// enable ;
14346: ENABLE
// end ;
14347: PPOPN 2
14349: END
// every 0 0$1 trigger def_builduptime do
14350: LD_EXP 14
14354: IFFALSE 14380
14356: GO 14358
14358: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14359: LD_INT 8400
14361: PUSH
14362: LD_EXP 14
14366: PUSH
14367: LD_INT 2100
14369: MUL
14370: PLUS
14371: PPUSH
14372: CALL_OW 67
// EndBuildUp ;
14376: CALL 13993 0 0
// end ; end_of_file
14380: END
// var respawn , inqueue ; export function init_respawning ; begin
14381: LD_INT 0
14383: PPUSH
// respawn := Rand ( 1 , 8 ) ;
14384: LD_ADDR_LOC 18
14388: PUSH
14389: LD_INT 1
14391: PPUSH
14392: LD_INT 8
14394: PPUSH
14395: CALL_OW 12
14399: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14400: LD_ADDR_LOC 19
14404: PUSH
14405: LD_INT 0
14407: PUSH
14408: LD_INT 0
14410: PUSH
14411: LD_INT 0
14413: PUSH
14414: LD_INT 0
14416: PUSH
14417: LD_INT 0
14419: PUSH
14420: LD_INT 0
14422: PUSH
14423: LD_INT 0
14425: PUSH
14426: LD_INT 0
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: ST_TO_ADDR
// end ;
14439: LD_VAR 0 1
14443: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14444: GO 14446
14446: DISABLE
14447: LD_INT 0
14449: PPUSH
14450: PPUSH
14451: PPUSH
// begin if respawning_time_max = 0 then
14452: LD_EXP 28
14456: PUSH
14457: LD_INT 0
14459: EQUAL
14460: IFFALSE 14464
// exit ;
14462: GO 14872
// if respawn = 8 then
14464: LD_LOC 18
14468: PUSH
14469: LD_INT 8
14471: EQUAL
14472: IFFALSE 14484
// respawn := 1 else
14474: LD_ADDR_LOC 18
14478: PUSH
14479: LD_INT 1
14481: ST_TO_ADDR
14482: GO 14498
// respawn := respawn + 1 ;
14484: LD_ADDR_LOC 18
14488: PUSH
14489: LD_LOC 18
14493: PUSH
14494: LD_INT 1
14496: PLUS
14497: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14498: LD_EXP 34
14502: PUSH
14503: LD_LOC 18
14507: ARRAY
14508: PUSH
14509: LD_LOC 19
14513: PUSH
14514: LD_LOC 18
14518: ARRAY
14519: NOT
14520: AND
14521: IFFALSE 14871
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14523: LD_ADDR_VAR 0 1
14527: PUSH
14528: LD_INT 21
14530: PUSH
14531: LD_INT 1
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: LD_INT 22
14540: PUSH
14541: LD_LOC 18
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PUSH
14550: LD_INT 3
14552: PUSH
14553: LD_INT 23
14555: PUSH
14556: LD_INT 0
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: PPUSH
14569: CALL_OW 69
14573: ST_TO_ADDR
// if n < number_of_people then
14574: LD_VAR 0 1
14578: PUSH
14579: LD_EXP 19
14583: LESS
14584: IFFALSE 14868
// begin aktresp := respawn ;
14586: LD_ADDR_VAR 0 3
14590: PUSH
14591: LD_LOC 18
14595: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14596: LD_ADDR_LOC 19
14600: PUSH
14601: LD_LOC 19
14605: PPUSH
14606: LD_VAR 0 3
14610: PPUSH
14611: LD_INT 1
14613: PPUSH
14614: CALL_OW 1
14618: ST_TO_ADDR
// enable ;
14619: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14620: LD_EXP 27
14624: PPUSH
14625: LD_EXP 28
14629: PPUSH
14630: CALL_OW 12
14634: PPUSH
14635: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14639: LD_ADDR_LOC 19
14643: PUSH
14644: LD_LOC 19
14648: PPUSH
14649: LD_VAR 0 3
14653: PPUSH
14654: LD_INT 0
14656: PPUSH
14657: CALL_OW 1
14661: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14662: LD_ADDR_VAR 0 2
14666: PUSH
14667: LD_INT 21
14669: PUSH
14670: LD_INT 3
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 2
14679: PUSH
14680: LD_INT 30
14682: PUSH
14683: LD_INT 0
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: LD_INT 30
14692: PUSH
14693: LD_INT 1
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: LIST
14704: PUSH
14705: LD_INT 50
14707: PUSH
14708: EMPTY
14709: LIST
14710: PUSH
14711: LD_INT 22
14713: PUSH
14714: LD_VAR 0 3
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: PPUSH
14729: CALL_OW 69
14733: ST_TO_ADDR
// if dep = 0 then
14734: LD_VAR 0 2
14738: PUSH
14739: LD_INT 0
14741: EQUAL
14742: IFFALSE 14746
// exit ;
14744: GO 14872
// hc_name :=  ;
14746: LD_ADDR_OWVAR 26
14750: PUSH
14751: LD_STRING 
14753: ST_TO_ADDR
// hc_importance := 0 ;
14754: LD_ADDR_OWVAR 32
14758: PUSH
14759: LD_INT 0
14761: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14762: LD_INT 0
14764: PPUSH
14765: LD_INT 0
14767: PPUSH
14768: LD_EXP 20
14772: PUSH
14773: LD_INT 2
14775: DIV
14776: PPUSH
14777: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14781: LD_ADDR_OWVAR 21
14785: PUSH
14786: LD_EXP 35
14790: PUSH
14791: LD_VAR 0 3
14795: ARRAY
14796: ST_TO_ADDR
// uc_side := aktresp ;
14797: LD_ADDR_OWVAR 20
14801: PUSH
14802: LD_VAR 0 3
14806: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14807: LD_ADDR_VAR 0 2
14811: PUSH
14812: LD_VAR 0 2
14816: PUSH
14817: LD_INT 1
14819: PPUSH
14820: LD_VAR 0 2
14824: PPUSH
14825: CALL_OW 12
14829: ARRAY
14830: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14831: CALL_OW 44
14835: PPUSH
14836: LD_VAR 0 2
14840: PPUSH
14841: CALL_OW 250
14845: PPUSH
14846: LD_VAR 0 2
14850: PPUSH
14851: CALL_OW 251
14855: PPUSH
14856: LD_INT 7
14858: PPUSH
14859: LD_INT 1
14861: PPUSH
14862: CALL_OW 50
// end else
14866: GO 14869
// enable ;
14868: ENABLE
// end else
14869: GO 14872
// enable ;
14871: ENABLE
// end ;
14872: PPOPN 3
14874: END
