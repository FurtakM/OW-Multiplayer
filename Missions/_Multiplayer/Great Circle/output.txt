// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 368
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 1 , 2 , 2 , 2 , 2 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 2
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 , 4 ] , [ 5 , 6 , 7 , 8 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: LD_INT 4
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: LD_INT 6
 351: PUSH
 352: LD_INT 7
 354: PUSH
 355: LD_INT 8
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 368: LD_ADDR_EXP 36
 372: PUSH
 373: LD_EXP 31
 377: PUSH
 378: LD_INT 0
 380: PUSH
 381: EMPTY
 382: LIST
 383: DIFF
 384: PUSH
 385: LD_INT 1
 387: GREATER
 388: ST_TO_ADDR
// if Multiplayer then
 389: LD_OWVAR 4
 393: IFFALSE 600
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 395: LD_ADDR_EXP 1
 399: PUSH
 400: LD_INT 0
 402: PPUSH
 403: CALL_OW 426
 407: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 408: LD_ADDR_EXP 2
 412: PUSH
 413: LD_INT 1
 415: PPUSH
 416: CALL_OW 426
 420: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 421: LD_ADDR_EXP 3
 425: PUSH
 426: LD_INT 2
 428: PPUSH
 429: CALL_OW 426
 433: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 434: LD_ADDR_EXP 4
 438: PUSH
 439: LD_INT 3
 441: PPUSH
 442: CALL_OW 426
 446: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 447: LD_ADDR_EXP 5
 451: PUSH
 452: LD_INT 4
 454: PPUSH
 455: CALL_OW 426
 459: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 460: LD_ADDR_EXP 6
 464: PUSH
 465: LD_INT 5
 467: PPUSH
 468: CALL_OW 426
 472: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 473: LD_ADDR_EXP 7
 477: PUSH
 478: LD_INT 6
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 486: LD_ADDR_EXP 8
 490: PUSH
 491: LD_INT 10
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 499: LD_ADDR_EXP 9
 503: PUSH
 504: LD_INT 11
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 512: LD_ADDR_EXP 10
 516: PUSH
 517: LD_INT 12
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 525: LD_ADDR_EXP 11
 529: PUSH
 530: LD_INT 13
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 538: LD_ADDR_EXP 12
 542: PUSH
 543: LD_INT 14
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 551: LD_ADDR_EXP 13
 555: PUSH
 556: LD_INT 17
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 564: LD_ADDR_EXP 14
 568: PUSH
 569: LD_INT 20
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 577: LD_ADDR_VAR 0 3
 581: PUSH
 582: LD_INT 22
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// def_win_rules = 0 ;
 590: LD_ADDR_EXP 30
 594: PUSH
 595: LD_INT 0
 597: ST_TO_ADDR
// end else
 598: GO 732
// begin Randomize ;
 600: CALL_OW 10
// def_base_level := 2 ;
 604: LD_ADDR_EXP 1
 608: PUSH
 609: LD_INT 2
 611: ST_TO_ADDR
// def_amount_of_people := 2 ;
 612: LD_ADDR_EXP 2
 616: PUSH
 617: LD_INT 2
 619: ST_TO_ADDR
// def_skill_level := 1 ;
 620: LD_ADDR_EXP 3
 624: PUSH
 625: LD_INT 1
 627: ST_TO_ADDR
// def_starting_resources := 2 ;
 628: LD_ADDR_EXP 4
 632: PUSH
 633: LD_INT 2
 635: ST_TO_ADDR
// def_shipments_density := 50 ;
 636: LD_ADDR_EXP 5
 640: PUSH
 641: LD_INT 50
 643: ST_TO_ADDR
// def_extra_oil_deposits := 2 ;
 644: LD_ADDR_EXP 6
 648: PUSH
 649: LD_INT 2
 651: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 652: LD_ADDR_EXP 7
 656: PUSH
 657: LD_INT 2
 659: ST_TO_ADDR
// def_shared_vision := 1 ;
 660: LD_ADDR_EXP 8
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// def_morale_flags := 1 ;
 668: LD_ADDR_EXP 9
 672: PUSH
 673: LD_INT 1
 675: ST_TO_ADDR
// def_siberite_detection := 1 ;
 676: LD_ADDR_EXP 10
 680: PUSH
 681: LD_INT 1
 683: ST_TO_ADDR
// def_people_respawning := 2 ;
 684: LD_ADDR_EXP 11
 688: PUSH
 689: LD_INT 2
 691: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 692: LD_ADDR_EXP 12
 696: PUSH
 697: LD_INT 3
 699: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 700: LD_ADDR_EXP 13
 704: PUSH
 705: LD_INT 2
 707: ST_TO_ADDR
// def_builduptime := 1 ;
 708: LD_ADDR_EXP 14
 712: PUSH
 713: LD_INT 1
 715: ST_TO_ADDR
// tech_level = 4 ;
 716: LD_ADDR_VAR 0 3
 720: PUSH
 721: LD_INT 4
 723: ST_TO_ADDR
// def_win_rules = 0 ;
 724: LD_ADDR_EXP 30
 728: PUSH
 729: LD_INT 0
 731: ST_TO_ADDR
// end ; if isSGUI then
 732: LD_OWVAR 83
 736: IFFALSE 744
// setMpTechs ( ) else
 738: CALL 9654 0 0
 742: GO 757
// SetMpTechLevel ( tech_level + 1 ) ;
 744: LD_VAR 0 3
 748: PUSH
 749: LD_INT 1
 751: PLUS
 752: PPUSH
 753: CALL 9801 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 757: LD_ADDR_EXP 17
 761: PUSH
 762: LD_INT 0
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 1
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_EXP 1
 780: PUSH
 781: LD_INT 1
 783: PLUS
 784: ARRAY
 785: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 786: LD_ADDR_EXP 18
 790: PUSH
 791: LD_INT 0
 793: PUSH
 794: LD_INT 0
 796: PUSH
 797: LD_INT 3
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: LIST
 804: PUSH
 805: LD_EXP 1
 809: PUSH
 810: LD_INT 1
 812: PLUS
 813: ARRAY
 814: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 815: LD_ADDR_EXP 19
 819: PUSH
 820: LD_INT 9
 822: PUSH
 823: LD_INT 12
 825: PUSH
 826: LD_INT 15
 828: PUSH
 829: LD_INT 24
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PUSH
 838: LD_EXP 2
 842: PUSH
 843: LD_INT 1
 845: PLUS
 846: ARRAY
 847: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 848: LD_ADDR_EXP 20
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: LIST
 869: LIST
 870: PUSH
 871: LD_EXP 3
 875: PUSH
 876: LD_INT 1
 878: PLUS
 879: ARRAY
 880: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 881: LD_ADDR_EXP 22
 885: PUSH
 886: LD_INT 0
 888: PUSH
 889: LD_INT 0
 891: PUSH
 892: LD_INT 0
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 30
 902: PUSH
 903: LD_INT 0
 905: PUSH
 906: LD_INT 0
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: LIST
 913: PUSH
 914: LD_INT 50
 916: PUSH
 917: LD_INT 20
 919: PUSH
 920: LD_INT 0
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PUSH
 928: LD_INT 80
 930: PUSH
 931: LD_INT 40
 933: PUSH
 934: LD_INT 20
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: PUSH
 948: LD_EXP 4
 952: PUSH
 953: LD_INT 1
 955: PLUS
 956: ARRAY
 957: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 958: LD_ADDR_EXP 21
 962: PUSH
 963: LD_INT 10
 965: PUSH
 966: EMPTY
 967: LIST
 968: PUSH
 969: LD_INT 7
 971: PUSH
 972: LD_INT 14
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 6
 981: PUSH
 982: LD_INT 12
 984: PUSH
 985: LD_INT 18
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 5
 995: PUSH
 996: LD_INT 10
 998: PUSH
 999: LD_INT 15
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: PUSH
1017: LD_EXP 4
1021: PUSH
1022: LD_INT 1
1024: PLUS
1025: ARRAY
1026: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
1027: LD_ADDR_EXP 23
1031: PUSH
1032: LD_INT 150
1034: PUSH
1035: LD_EXP 5
1039: MINUS
1040: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1041: LD_ADDR_EXP 27
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: LD_INT 10500
1051: PUSH
1052: LD_INT 6300
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: PUSH
1060: LD_EXP 11
1064: PUSH
1065: LD_INT 1
1067: PLUS
1068: ARRAY
1069: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1070: LD_ADDR_EXP 28
1074: PUSH
1075: LD_INT 0
1077: PUSH
1078: LD_INT 31500
1080: PUSH
1081: LD_INT 10500
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_EXP 11
1093: PUSH
1094: LD_INT 1
1096: PLUS
1097: ARRAY
1098: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1099: LD_ADDR_EXP 25
1103: PUSH
1104: LD_INT 0
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 3
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_EXP 12
1126: PUSH
1127: LD_INT 1
1129: PLUS
1130: ARRAY
1131: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1132: LD_ADDR_EXP 24
1136: PUSH
1137: LD_INT 1
1139: NEG
1140: PUSH
1141: LD_INT 350
1143: PUSH
1144: LD_INT 700
1146: PUSH
1147: LD_INT 1400
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: LD_EXP 9
1164: PUSH
1165: LD_INT 1
1167: PLUS
1168: ARRAY
1169: ST_TO_ADDR
// battle_flags_id := [ ] ;
1170: LD_ADDR_EXP 44
1174: PUSH
1175: EMPTY
1176: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1177: LD_EXP 13
1181: PUSH
1182: LD_INT 0
1184: EQUAL
1185: IFFALSE 1197
// siberite_bomb_Delay = 0 else
1187: LD_ADDR_EXP 29
1191: PUSH
1192: LD_INT 0
1194: ST_TO_ADDR
1195: GO 1219
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1197: LD_ADDR_EXP 29
1201: PUSH
1202: LD_EXP 13
1206: PUSH
1207: LD_INT 1
1209: MINUS
1210: PUSH
1211: LD_INT 21000
1213: MUL
1214: PUSH
1215: LD_INT 1
1217: PLUS
1218: ST_TO_ADDR
// end ;
1219: LD_VAR 0 1
1223: RET
// function init_map ; var i , j ; begin
1224: LD_INT 0
1226: PPUSH
1227: PPUSH
1228: PPUSH
// normal_oil_deposits_locations := [ [ 61 , 54 ] , [ 94 , 26 ] , [ 156 , 50 ] , [ 214 , 114 ] , [ 237 , 188 ] , [ 204 , 246 ] , [ 137 , 204 ] , [ 81 , 115 ] ] ;
1229: LD_ADDR_EXP 40
1233: PUSH
1234: LD_INT 61
1236: PUSH
1237: LD_INT 54
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PUSH
1244: LD_INT 94
1246: PUSH
1247: LD_INT 26
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: LD_INT 156
1256: PUSH
1257: LD_INT 50
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 214
1266: PUSH
1267: LD_INT 114
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PUSH
1274: LD_INT 237
1276: PUSH
1277: LD_INT 188
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: PUSH
1284: LD_INT 204
1286: PUSH
1287: LD_INT 246
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 137
1296: PUSH
1297: LD_INT 204
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 81
1306: PUSH
1307: LD_INT 115
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 69 , 46 ] , [ 116 , 26 ] , [ 184 , 67 ] , [ 222 , 144 ] , [ 234 , 214 ] , [ 219 , 232 ] , [ 160 , 212 ] , [ 93 , 148 ] ] ;
1324: LD_ADDR_EXP 41
1328: PUSH
1329: LD_INT 69
1331: PUSH
1332: LD_INT 46
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 116
1341: PUSH
1342: LD_INT 26
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 184
1351: PUSH
1352: LD_INT 67
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 222
1361: PUSH
1362: LD_INT 144
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 234
1371: PUSH
1372: LD_INT 214
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 219
1381: PUSH
1382: LD_INT 232
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 160
1391: PUSH
1392: LD_INT 212
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 93
1401: PUSH
1402: LD_INT 148
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 81 , 48 ] , [ 109 , 18 ] , [ 180 , 77 ] , [ 208 , 119 ] , [ 248 , 197 ] , [ 194 , 223 ] , [ 139 , 209 ] , [ 77 , 123 ] ] ;
1419: LD_ADDR_EXP 42
1423: PUSH
1424: LD_INT 81
1426: PUSH
1427: LD_INT 48
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 109
1436: PUSH
1437: LD_INT 18
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PUSH
1444: LD_INT 180
1446: PUSH
1447: LD_INT 77
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: PUSH
1454: LD_INT 208
1456: PUSH
1457: LD_INT 119
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 248
1466: PUSH
1467: LD_INT 197
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 194
1476: PUSH
1477: LD_INT 223
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 139
1486: PUSH
1487: LD_INT 209
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 77
1496: PUSH
1497: LD_INT 123
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 74 , 72 ] , [ 99 , 38 ] , [ 155 , 58 ] , [ 237 , 141 ] , [ 249 , 218 ] , [ 221 , 247 ] , [ 159 , 204 ] , [ 110 , 151 ] ] ;
1514: LD_ADDR_EXP 43
1518: PUSH
1519: LD_INT 74
1521: PUSH
1522: LD_INT 72
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 99
1531: PUSH
1532: LD_INT 38
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 155
1541: PUSH
1542: LD_INT 58
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 237
1551: PUSH
1552: LD_INT 141
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 249
1561: PUSH
1562: LD_INT 218
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 221
1571: PUSH
1572: LD_INT 247
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 159
1581: PUSH
1582: LD_INT 204
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 110
1591: PUSH
1592: LD_INT 151
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: ST_TO_ADDR
// depot_def := [ [ 79 , 63 , 2 ] , [ 109 , 36 , 3 ] , [ 171 , 60 , 3 ] , [ 222 , 128 , 4 ] , [ 239 , 202 , 5 ] , [ 208 , 233 , 0 ] , [ 145 , 203 , 0 ] , [ 91 , 132 , 1 ] ] ;
1609: LD_ADDR_EXP 37
1613: PUSH
1614: LD_INT 79
1616: PUSH
1617: LD_INT 63
1619: PUSH
1620: LD_INT 2
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: LIST
1627: PUSH
1628: LD_INT 109
1630: PUSH
1631: LD_INT 36
1633: PUSH
1634: LD_INT 3
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 171
1644: PUSH
1645: LD_INT 60
1647: PUSH
1648: LD_INT 3
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 222
1658: PUSH
1659: LD_INT 128
1661: PUSH
1662: LD_INT 4
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 239
1672: PUSH
1673: LD_INT 202
1675: PUSH
1676: LD_INT 5
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: PUSH
1684: LD_INT 208
1686: PUSH
1687: LD_INT 233
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 145
1700: PUSH
1701: LD_INT 203
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: PUSH
1712: LD_INT 91
1714: PUSH
1715: LD_INT 132
1717: PUSH
1718: LD_INT 1
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: ST_TO_ADDR
// for i in depot_def do
1736: LD_ADDR_VAR 0 2
1740: PUSH
1741: LD_EXP 37
1745: PUSH
1746: FOR_IN
1747: IFFALSE 1823
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1749: LD_ADDR_EXP 39
1753: PUSH
1754: LD_EXP 39
1758: PUSH
1759: LD_VAR 0 2
1763: PUSH
1764: LD_INT 1
1766: ARRAY
1767: PPUSH
1768: LD_VAR 0 2
1772: PUSH
1773: LD_INT 3
1775: ARRAY
1776: PPUSH
1777: LD_INT 4
1779: NEG
1780: PPUSH
1781: CALL_OW 272
1785: PUSH
1786: LD_VAR 0 2
1790: PUSH
1791: LD_INT 2
1793: ARRAY
1794: PPUSH
1795: LD_VAR 0 2
1799: PUSH
1800: LD_INT 3
1802: ARRAY
1803: PPUSH
1804: LD_INT 4
1806: NEG
1807: PPUSH
1808: CALL_OW 273
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: EMPTY
1818: LIST
1819: ADD
1820: ST_TO_ADDR
1821: GO 1746
1823: POP
1824: POP
// breastworks_def := [ [ [ 90 , 82 , 5 ] , [ 92 , 76 , 5 ] , [ 91 , 66 , 4 ] ] , [ [ 111 , 52 , 5 ] , [ 118 , 52 , 5 ] , [ 123 , 51 , 5 ] ] , [ [ 158 , 69 , 0 ] , [ 165 , 78 , 0 ] , [ 172 , 82 , 0 ] ] , [ [ 206 , 121 , 1 ] , [ 208 , 130 , 1 ] , [ 214 , 139 , 1 ] ] , [ [ 223 , 192 , 2 ] , [ 224 , 187 , 2 ] , [ 232 , 188 , 2 ] ] , [ [ 195 , 218 , 2 ] , [ 200 , 215 , 2 ] , [ 208 , 220 , 3 ] ] , [ [ 141 , 186 , 3 ] , [ 150 , 192 , 2 ] , [ 157 , 199 , 4 ] ] , [ [ 99 , 125 , 4 ] , [ 105 , 136 , 4 ] , [ 108 , 147 , 5 ] ] ] ;
1825: LD_ADDR_EXP 38
1829: PUSH
1830: LD_INT 90
1832: PUSH
1833: LD_INT 82
1835: PUSH
1836: LD_INT 5
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 92
1846: PUSH
1847: LD_INT 76
1849: PUSH
1850: LD_INT 5
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PUSH
1858: LD_INT 91
1860: PUSH
1861: LD_INT 66
1863: PUSH
1864: LD_INT 4
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 111
1879: PUSH
1880: LD_INT 52
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: PUSH
1891: LD_INT 118
1893: PUSH
1894: LD_INT 52
1896: PUSH
1897: LD_INT 5
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: PUSH
1905: LD_INT 123
1907: PUSH
1908: LD_INT 51
1910: PUSH
1911: LD_INT 5
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 158
1926: PUSH
1927: LD_INT 69
1929: PUSH
1930: LD_INT 0
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: LIST
1937: PUSH
1938: LD_INT 165
1940: PUSH
1941: LD_INT 78
1943: PUSH
1944: LD_INT 0
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: LD_INT 172
1954: PUSH
1955: LD_INT 82
1957: PUSH
1958: LD_INT 0
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: LIST
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 206
1973: PUSH
1974: LD_INT 121
1976: PUSH
1977: LD_INT 1
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 208
1987: PUSH
1988: LD_INT 130
1990: PUSH
1991: LD_INT 1
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: PUSH
1999: LD_INT 214
2001: PUSH
2002: LD_INT 139
2004: PUSH
2005: LD_INT 1
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_INT 223
2020: PUSH
2021: LD_INT 192
2023: PUSH
2024: LD_INT 2
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: PUSH
2032: LD_INT 224
2034: PUSH
2035: LD_INT 187
2037: PUSH
2038: LD_INT 2
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: PUSH
2046: LD_INT 232
2048: PUSH
2049: LD_INT 188
2051: PUSH
2052: LD_INT 2
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 195
2067: PUSH
2068: LD_INT 218
2070: PUSH
2071: LD_INT 2
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 200
2081: PUSH
2082: LD_INT 215
2084: PUSH
2085: LD_INT 2
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: PUSH
2093: LD_INT 208
2095: PUSH
2096: LD_INT 220
2098: PUSH
2099: LD_INT 3
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 141
2114: PUSH
2115: LD_INT 186
2117: PUSH
2118: LD_INT 3
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: LIST
2125: PUSH
2126: LD_INT 150
2128: PUSH
2129: LD_INT 192
2131: PUSH
2132: LD_INT 2
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 157
2142: PUSH
2143: LD_INT 199
2145: PUSH
2146: LD_INT 4
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: LD_INT 99
2161: PUSH
2162: LD_INT 125
2164: PUSH
2165: LD_INT 4
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 105
2175: PUSH
2176: LD_INT 136
2178: PUSH
2179: LD_INT 4
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 108
2189: PUSH
2190: LD_INT 147
2192: PUSH
2193: LD_INT 5
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: LIST
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: ST_TO_ADDR
// for i = 1 to Side_Positions do
2216: LD_ADDR_VAR 0 2
2220: PUSH
2221: DOUBLE
2222: LD_INT 1
2224: DEC
2225: ST_TO_ADDR
2226: LD_EXP 34
2230: PUSH
2231: FOR_TO
2232: IFFALSE 2355
// begin if not Side_Positions [ i ] then
2234: LD_EXP 34
2238: PUSH
2239: LD_VAR 0 2
2243: ARRAY
2244: NOT
2245: IFFALSE 2249
// continue ;
2247: GO 2231
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2249: LD_EXP 40
2253: PUSH
2254: LD_EXP 34
2258: PUSH
2259: LD_VAR 0 2
2263: ARRAY
2264: ARRAY
2265: PUSH
2266: LD_INT 1
2268: ARRAY
2269: PPUSH
2270: LD_EXP 40
2274: PUSH
2275: LD_EXP 34
2279: PUSH
2280: LD_VAR 0 2
2284: ARRAY
2285: ARRAY
2286: PUSH
2287: LD_INT 2
2289: ARRAY
2290: PPUSH
2291: LD_INT 2
2293: PPUSH
2294: CALL_OW 62
// if def_extra_oil_deposits then
2298: LD_EXP 6
2302: IFFALSE 2353
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2304: LD_EXP 41
2308: PUSH
2309: LD_EXP 34
2313: PUSH
2314: LD_VAR 0 2
2318: ARRAY
2319: ARRAY
2320: PUSH
2321: LD_INT 1
2323: ARRAY
2324: PPUSH
2325: LD_EXP 41
2329: PUSH
2330: LD_EXP 34
2334: PUSH
2335: LD_VAR 0 2
2339: ARRAY
2340: ARRAY
2341: PUSH
2342: LD_INT 2
2344: ARRAY
2345: PPUSH
2346: LD_INT 2
2348: PPUSH
2349: CALL_OW 62
// end ;
2353: GO 2231
2355: POP
2356: POP
// if def_extra_sib_deposits then
2357: LD_EXP 7
2361: IFFALSE 2508
// for i = 1 to Side_Positions do
2363: LD_ADDR_VAR 0 2
2367: PUSH
2368: DOUBLE
2369: LD_INT 1
2371: DEC
2372: ST_TO_ADDR
2373: LD_EXP 34
2377: PUSH
2378: FOR_TO
2379: IFFALSE 2506
// begin if not Side_Positions [ i ] then
2381: LD_EXP 34
2385: PUSH
2386: LD_VAR 0 2
2390: ARRAY
2391: NOT
2392: IFFALSE 2396
// continue ;
2394: GO 2378
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2396: LD_EXP 42
2400: PUSH
2401: LD_EXP 34
2405: PUSH
2406: LD_VAR 0 2
2410: ARRAY
2411: ARRAY
2412: PUSH
2413: LD_INT 1
2415: ARRAY
2416: PPUSH
2417: LD_EXP 42
2421: PUSH
2422: LD_EXP 34
2426: PUSH
2427: LD_VAR 0 2
2431: ARRAY
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_INT 3
2440: PPUSH
2441: CALL_OW 62
// if def_extra_sib_deposits = 2 then
2445: LD_EXP 7
2449: PUSH
2450: LD_INT 2
2452: EQUAL
2453: IFFALSE 2504
// CreateDepositXY ( extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2455: LD_EXP 43
2459: PUSH
2460: LD_EXP 34
2464: PUSH
2465: LD_VAR 0 2
2469: ARRAY
2470: ARRAY
2471: PUSH
2472: LD_INT 1
2474: ARRAY
2475: PPUSH
2476: LD_EXP 43
2480: PUSH
2481: LD_EXP 34
2485: PUSH
2486: LD_VAR 0 2
2490: ARRAY
2491: ARRAY
2492: PUSH
2493: LD_INT 2
2495: ARRAY
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: CALL_OW 62
// end ;
2504: GO 2378
2506: POP
2507: POP
// end ;
2508: LD_VAR 0 1
2512: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2513: LD_INT 0
2515: PPUSH
2516: PPUSH
2517: PPUSH
// if not Team_Game then
2518: LD_EXP 36
2522: NOT
2523: IFFALSE 2621
// begin for i = 1 to 8 do
2525: LD_ADDR_VAR 0 2
2529: PUSH
2530: DOUBLE
2531: LD_INT 1
2533: DEC
2534: ST_TO_ADDR
2535: LD_INT 8
2537: PUSH
2538: FOR_TO
2539: IFFALSE 2617
// for j = 1 to 8 do
2541: LD_ADDR_VAR 0 3
2545: PUSH
2546: DOUBLE
2547: LD_INT 1
2549: DEC
2550: ST_TO_ADDR
2551: LD_INT 8
2553: PUSH
2554: FOR_TO
2555: IFFALSE 2613
// if i <> j then
2557: LD_VAR 0 2
2561: PUSH
2562: LD_VAR 0 3
2566: NONEQUAL
2567: IFFALSE 2591
// SetAttitude ( i , j , att_neutral , true ) else
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_VAR 0 3
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: LD_INT 1
2584: PPUSH
2585: CALL_OW 80
2589: GO 2611
// SetAttitude ( i , j , att_friend , true ) ;
2591: LD_VAR 0 2
2595: PPUSH
2596: LD_VAR 0 3
2600: PPUSH
2601: LD_INT 1
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: CALL_OW 80
2611: GO 2554
2613: POP
2614: POP
2615: GO 2538
2617: POP
2618: POP
// end else
2619: GO 2796
// begin if def_shared_vision then
2621: LD_EXP 8
2625: IFFALSE 2690
// begin for i in Teams do
2627: LD_ADDR_VAR 0 2
2631: PUSH
2632: LD_EXP 32
2636: PUSH
2637: FOR_IN
2638: IFFALSE 2688
// for j = 2 to i do
2640: LD_ADDR_VAR 0 3
2644: PUSH
2645: DOUBLE
2646: LD_INT 2
2648: DEC
2649: ST_TO_ADDR
2650: LD_VAR 0 2
2654: PUSH
2655: FOR_TO
2656: IFFALSE 2684
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2658: LD_VAR 0 2
2662: PUSH
2663: LD_VAR 0 3
2667: ARRAY
2668: PPUSH
2669: LD_VAR 0 2
2673: PUSH
2674: LD_INT 1
2676: ARRAY
2677: PPUSH
2678: CALL_OW 343
2682: GO 2655
2684: POP
2685: POP
2686: GO 2637
2688: POP
2689: POP
// end ; for i = 1 to 8 do
2690: LD_ADDR_VAR 0 2
2694: PUSH
2695: DOUBLE
2696: LD_INT 1
2698: DEC
2699: ST_TO_ADDR
2700: LD_INT 8
2702: PUSH
2703: FOR_TO
2704: IFFALSE 2794
// for j = 1 to 8 do
2706: LD_ADDR_VAR 0 3
2710: PUSH
2711: DOUBLE
2712: LD_INT 1
2714: DEC
2715: ST_TO_ADDR
2716: LD_INT 8
2718: PUSH
2719: FOR_TO
2720: IFFALSE 2790
// if Side_Teams [ i ] = Side_Teams [ j ] then
2722: LD_EXP 31
2726: PUSH
2727: LD_VAR 0 2
2731: ARRAY
2732: PUSH
2733: LD_EXP 31
2737: PUSH
2738: LD_VAR 0 3
2742: ARRAY
2743: EQUAL
2744: IFFALSE 2768
// SetAttitude ( i , j , att_friend , true ) else
2746: LD_VAR 0 2
2750: PPUSH
2751: LD_VAR 0 3
2755: PPUSH
2756: LD_INT 1
2758: PPUSH
2759: LD_INT 1
2761: PPUSH
2762: CALL_OW 80
2766: GO 2788
// SetAttitude ( i , j , att_enemy , true ) ;
2768: LD_VAR 0 2
2772: PPUSH
2773: LD_VAR 0 3
2777: PPUSH
2778: LD_INT 2
2780: PPUSH
2781: LD_INT 1
2783: PPUSH
2784: CALL_OW 80
2788: GO 2719
2790: POP
2791: POP
2792: GO 2703
2794: POP
2795: POP
// end ; end ;
2796: LD_VAR 0 1
2800: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2801: LD_INT 0
2803: PPUSH
2804: PPUSH
2805: PPUSH
2806: PPUSH
// result := [ ] ;
2807: LD_ADDR_VAR 0 7
2811: PUSH
2812: EMPTY
2813: ST_TO_ADDR
// for i := 1 to count do
2814: LD_ADDR_VAR 0 8
2818: PUSH
2819: DOUBLE
2820: LD_INT 1
2822: DEC
2823: ST_TO_ADDR
2824: LD_VAR 0 1
2828: PUSH
2829: FOR_TO
2830: IFFALSE 3248
// begin uc_direction := Rand ( 0 , 5 ) ;
2832: LD_ADDR_OWVAR 24
2836: PUSH
2837: LD_INT 0
2839: PPUSH
2840: LD_INT 5
2842: PPUSH
2843: CALL_OW 12
2847: ST_TO_ADDR
// if commander then
2848: LD_LOC 1
2852: IFFALSE 2961
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2854: LD_ADDR_OWVAR 26
2858: PUSH
2859: LD_OWVAR 19
2863: PUSH
2864: LD_OWVAR 20
2868: ARRAY
2869: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2870: LD_INT 1
2872: PPUSH
2873: LD_INT 2
2875: PPUSH
2876: CALL_OW 12
2880: PPUSH
2881: LD_VAR 0 2
2885: PPUSH
2886: LD_EXP 20
2890: PUSH
2891: LD_INT 2
2893: PLUS
2894: PPUSH
2895: CALL_OW 380
// hc_importance := 105 ;
2899: LD_ADDR_OWVAR 32
2903: PUSH
2904: LD_INT 105
2906: ST_TO_ADDR
// commander := false ;
2907: LD_ADDR_LOC 1
2911: PUSH
2912: LD_INT 0
2914: ST_TO_ADDR
// if Multiplayer then
2915: LD_OWVAR 4
2919: IFFALSE 2959
// begin hc_gallery := MULTIAVATARS ;
2921: LD_ADDR_OWVAR 33
2925: PUSH
2926: LD_STRING MULTIAVATARS
2928: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2929: LD_ADDR_OWVAR 34
2933: PUSH
2934: LD_OWVAR 20
2938: PPUSH
2939: CALL_OW 525
2943: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2944: LD_ADDR_OWVAR 27
2948: PUSH
2949: LD_OWVAR 20
2953: PPUSH
2954: CALL_OW 526
2958: ST_TO_ADDR
// end ; end else
2959: GO 3024
// begin hc_name :=  ;
2961: LD_ADDR_OWVAR 26
2965: PUSH
2966: LD_STRING 
2968: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2969: LD_INT 1
2971: PPUSH
2972: LD_INT 2
2974: PPUSH
2975: CALL_OW 12
2979: PPUSH
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_EXP 20
2989: PPUSH
2990: CALL_OW 380
// hc_importance := 0 ;
2994: LD_ADDR_OWVAR 32
2998: PUSH
2999: LD_INT 0
3001: ST_TO_ADDR
// if Multiplayer then
3002: LD_OWVAR 4
3006: IFFALSE 3024
// begin hc_gallery :=  ;
3008: LD_ADDR_OWVAR 33
3012: PUSH
3013: LD_STRING 
3015: ST_TO_ADDR
// hc_face_number := 0 ;
3016: LD_ADDR_OWVAR 34
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3024: LD_ADDR_VAR 0 10
3028: PUSH
3029: CALL_OW 44
3033: ST_TO_ADDR
// if global_defined then
3034: LD_LOC 3
3038: IFFALSE 3178
// begin if ( cl = class_soldier ) then
3040: LD_VAR 0 2
3044: PUSH
3045: LD_INT 1
3047: EQUAL
3048: IFFALSE 3068
// j := i + soldiers_created else
3050: LD_ADDR_VAR 0 9
3054: PUSH
3055: LD_VAR 0 8
3059: PUSH
3060: LD_LOC 4
3064: PLUS
3065: ST_TO_ADDR
3066: GO 3078
// j := i ;
3068: LD_ADDR_VAR 0 9
3072: PUSH
3073: LD_VAR 0 8
3077: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3078: LD_LOC 2
3082: PUSH
3083: LD_VAR 0 2
3087: ARRAY
3088: PUSH
3089: LD_VAR 0 9
3093: ARRAY
3094: PPUSH
3095: LD_VAR 0 10
3099: PPUSH
3100: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3104: LD_VAR 0 10
3108: PPUSH
3109: LD_INT 2
3111: PPUSH
3112: LD_LOC 2
3116: PUSH
3117: LD_VAR 0 2
3121: ARRAY
3122: PUSH
3123: LD_VAR 0 9
3127: ARRAY
3128: PPUSH
3129: LD_INT 2
3131: PPUSH
3132: CALL_OW 260
3136: PPUSH
3137: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3141: LD_VAR 0 10
3145: PPUSH
3146: LD_INT 1
3148: PPUSH
3149: LD_LOC 2
3153: PUSH
3154: LD_VAR 0 2
3158: ARRAY
3159: PUSH
3160: LD_VAR 0 9
3164: ARRAY
3165: PPUSH
3166: LD_INT 1
3168: PPUSH
3169: CALL_OW 260
3173: PPUSH
3174: CALL_OW 239
// end ; if building then
3178: LD_VAR 0 6
3182: IFFALSE 3200
// PlaceHumanInUnit ( un , building ) else
3184: LD_VAR 0 10
3188: PPUSH
3189: LD_VAR 0 6
3193: PPUSH
3194: CALL_OW 52
3198: GO 3227
// PlaceUnitXYR ( un , x , y , r , false ) ;
3200: LD_VAR 0 10
3204: PPUSH
3205: LD_VAR 0 3
3209: PPUSH
3210: LD_VAR 0 4
3214: PPUSH
3215: LD_VAR 0 5
3219: PPUSH
3220: LD_INT 0
3222: PPUSH
3223: CALL_OW 50
// result := result ^ [ un ] ;
3227: LD_ADDR_VAR 0 7
3231: PUSH
3232: LD_VAR 0 7
3236: PUSH
3237: LD_VAR 0 10
3241: PUSH
3242: EMPTY
3243: LIST
3244: ADD
3245: ST_TO_ADDR
// end ;
3246: GO 2829
3248: POP
3249: POP
// if not global_defined then
3250: LD_LOC 3
3254: NOT
3255: IFFALSE 3333
// if ( global_units >= cl ) then
3257: LD_LOC 2
3261: PUSH
3262: LD_VAR 0 2
3266: GREATEREQUAL
3267: IFFALSE 3308
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3269: LD_ADDR_LOC 2
3273: PUSH
3274: LD_LOC 2
3278: PPUSH
3279: LD_VAR 0 2
3283: PPUSH
3284: LD_LOC 2
3288: PUSH
3289: LD_VAR 0 2
3293: ARRAY
3294: PUSH
3295: LD_VAR 0 7
3299: ADD
3300: PPUSH
3301: CALL_OW 1
3305: ST_TO_ADDR
3306: GO 3333
// global_units := Replace ( global_units , cl , result ) ;
3308: LD_ADDR_LOC 2
3312: PUSH
3313: LD_LOC 2
3317: PPUSH
3318: LD_VAR 0 2
3322: PPUSH
3323: LD_VAR 0 7
3327: PPUSH
3328: CALL_OW 1
3332: ST_TO_ADDR
// if commander then
3333: LD_LOC 1
3337: IFFALSE 3384
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3339: LD_ADDR_EXP 45
3343: PUSH
3344: LD_EXP 45
3348: PPUSH
3349: LD_OWVAR 20
3353: PPUSH
3354: LD_EXP 45
3358: PUSH
3359: LD_OWVAR 20
3363: ARRAY
3364: PUSH
3365: LD_VAR 0 10
3369: ADD
3370: PPUSH
3371: CALL_OW 1
3375: ST_TO_ADDR
// commander := false ;
3376: LD_ADDR_LOC 1
3380: PUSH
3381: LD_INT 0
3383: ST_TO_ADDR
// end ; end ;
3384: LD_VAR 0 7
3388: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3389: LD_INT 0
3391: PPUSH
3392: PPUSH
3393: PPUSH
3394: PPUSH
3395: PPUSH
3396: PPUSH
3397: PPUSH
3398: PPUSH
3399: PPUSH
// if side in [ 0 , 9 ] then
3400: LD_VAR 0 1
3404: PUSH
3405: LD_INT 0
3407: PUSH
3408: LD_INT 9
3410: PUSH
3411: EMPTY
3412: LIST
3413: LIST
3414: IN
3415: IFFALSE 3419
// exit ;
3417: GO 4469
// pos := Side_Positions [ side ] ;
3419: LD_ADDR_VAR 0 3
3423: PUSH
3424: LD_EXP 34
3428: PUSH
3429: LD_VAR 0 1
3433: ARRAY
3434: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3435: LD_ADDR_OWVAR 21
3439: PUSH
3440: LD_EXP 35
3444: PUSH
3445: LD_VAR 0 1
3449: ARRAY
3450: ST_TO_ADDR
// uc_side := side ;
3451: LD_ADDR_OWVAR 20
3455: PUSH
3456: LD_VAR 0 1
3460: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3461: LD_ADDR_VAR 0 4
3465: PUSH
3466: LD_EXP 37
3470: PUSH
3471: LD_VAR 0 3
3475: ARRAY
3476: PUSH
3477: LD_INT 1
3479: ARRAY
3480: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3481: LD_ADDR_VAR 0 5
3485: PUSH
3486: LD_EXP 37
3490: PUSH
3491: LD_VAR 0 3
3495: ARRAY
3496: PUSH
3497: LD_INT 2
3499: ARRAY
3500: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3501: LD_ADDR_VAR 0 6
3505: PUSH
3506: LD_EXP 37
3510: PUSH
3511: LD_VAR 0 3
3515: ARRAY
3516: PUSH
3517: LD_INT 3
3519: ARRAY
3520: ST_TO_ADDR
// if is_depot then
3521: LD_EXP 17
3525: IFFALSE 3658
// begin bc_type = b_depot ;
3527: LD_ADDR_OWVAR 42
3531: PUSH
3532: LD_INT 0
3534: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3535: LD_ADDR_VAR 0 10
3539: PUSH
3540: LD_VAR 0 4
3544: PPUSH
3545: LD_VAR 0 5
3549: PPUSH
3550: LD_VAR 0 6
3554: PPUSH
3555: CALL_OW 47
3559: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3560: LD_VAR 0 10
3564: PPUSH
3565: LD_STRING @
3567: PUSH
3568: LD_VAR 0 1
3572: STR
3573: PPUSH
3574: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3578: LD_VAR 0 10
3582: PPUSH
3583: CALL_OW 274
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: LD_EXP 22
3595: PUSH
3596: LD_INT 1
3598: ARRAY
3599: PPUSH
3600: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3604: LD_VAR 0 10
3608: PPUSH
3609: CALL_OW 274
3613: PPUSH
3614: LD_INT 2
3616: PPUSH
3617: LD_EXP 22
3621: PUSH
3622: LD_INT 2
3624: ARRAY
3625: PPUSH
3626: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3630: LD_VAR 0 10
3634: PPUSH
3635: CALL_OW 274
3639: PPUSH
3640: LD_INT 3
3642: PPUSH
3643: LD_EXP 22
3647: PUSH
3648: LD_INT 3
3650: ARRAY
3651: PPUSH
3652: CALL_OW 277
// end else
3656: GO 3802
// begin for i := 1 to 3 do
3658: LD_ADDR_VAR 0 7
3662: PUSH
3663: DOUBLE
3664: LD_INT 1
3666: DEC
3667: ST_TO_ADDR
3668: LD_INT 3
3670: PUSH
3671: FOR_TO
3672: IFFALSE 3800
// begin r := starting_resources [ i ] ;
3674: LD_ADDR_VAR 0 8
3678: PUSH
3679: LD_EXP 22
3683: PUSH
3684: LD_VAR 0 7
3688: ARRAY
3689: ST_TO_ADDR
// while r >= 10 do
3690: LD_VAR 0 8
3694: PUSH
3695: LD_INT 10
3697: GREATEREQUAL
3698: IFFALSE 3798
// if r > 50 then
3700: LD_VAR 0 8
3704: PUSH
3705: LD_INT 50
3707: GREATER
3708: IFFALSE 3754
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3710: LD_VAR 0 7
3714: PPUSH
3715: LD_INT 5
3717: PPUSH
3718: LD_VAR 0 4
3722: PPUSH
3723: LD_VAR 0 5
3727: PPUSH
3728: LD_INT 4
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 60
// r := r - 50 ;
3738: LD_ADDR_VAR 0 8
3742: PUSH
3743: LD_VAR 0 8
3747: PUSH
3748: LD_INT 50
3750: MINUS
3751: ST_TO_ADDR
// end else
3752: GO 3796
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3754: LD_VAR 0 7
3758: PPUSH
3759: LD_VAR 0 8
3763: PUSH
3764: LD_INT 10
3766: DIV
3767: PPUSH
3768: LD_VAR 0 4
3772: PPUSH
3773: LD_VAR 0 5
3777: PPUSH
3778: LD_INT 4
3780: PPUSH
3781: LD_INT 0
3783: PPUSH
3784: CALL_OW 60
// r := 0 ;
3788: LD_ADDR_VAR 0 8
3792: PUSH
3793: LD_INT 0
3795: ST_TO_ADDR
// end ;
3796: GO 3690
// end ;
3798: GO 3671
3800: POP
3801: POP
// end ; for r in starting_crates do
3802: LD_ADDR_VAR 0 8
3806: PUSH
3807: LD_EXP 21
3811: PUSH
3812: FOR_IN
3813: IFFALSE 3845
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3815: LD_INT 1
3817: PPUSH
3818: LD_INT 5
3820: PPUSH
3821: LD_VAR 0 4
3825: PPUSH
3826: LD_VAR 0 5
3830: PPUSH
3831: LD_VAR 0 8
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: CALL_OW 60
3843: GO 3812
3845: POP
3846: POP
// if def_morale_flags then
3847: LD_EXP 9
3851: IFFALSE 3990
// begin x := start_def [ pos ] [ 1 ] ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_EXP 39
3862: PUSH
3863: LD_VAR 0 3
3867: ARRAY
3868: PUSH
3869: LD_INT 1
3871: ARRAY
3872: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3873: LD_ADDR_VAR 0 5
3877: PUSH
3878: LD_EXP 39
3882: PUSH
3883: LD_VAR 0 3
3887: ARRAY
3888: PUSH
3889: LD_INT 2
3891: ARRAY
3892: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3893: LD_VAR 0 4
3897: PPUSH
3898: LD_VAR 0 5
3902: PPUSH
3903: LD_INT 12
3905: PPUSH
3906: LD_INT 2
3908: PPUSH
3909: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3913: LD_ADDR_EXP 44
3917: PUSH
3918: LD_EXP 44
3922: PUSH
3923: LD_VAR 0 1
3927: PPUSH
3928: LD_VAR 0 4
3932: PPUSH
3933: LD_VAR 0 5
3937: PPUSH
3938: LD_INT 1
3940: PUSH
3941: LD_INT 100
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: PUSH
3948: LD_INT 2
3950: PUSH
3951: LD_INT 50
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 3
3960: PUSH
3961: LD_INT 20
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: PUSH
3968: LD_INT 20
3970: PUSH
3971: LD_INT 100
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: PPUSH
3984: CALL_OW 418
3988: ADD
3989: ST_TO_ADDR
// end ; commander := true ;
3990: LD_ADDR_LOC 1
3994: PUSH
3995: LD_INT 1
3997: ST_TO_ADDR
// soldiers_created := 0 ;
3998: LD_ADDR_LOC 4
4002: PUSH
4003: LD_INT 0
4005: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4006: LD_ADDR_VAR 0 7
4010: PUSH
4011: DOUBLE
4012: LD_INT 1
4014: DEC
4015: ST_TO_ADDR
4016: LD_EXP 18
4020: PUSH
4021: FOR_TO
4022: IFFALSE 4175
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4024: LD_ADDR_VAR 0 4
4028: PUSH
4029: LD_EXP 38
4033: PUSH
4034: LD_VAR 0 3
4038: ARRAY
4039: PUSH
4040: LD_VAR 0 7
4044: ARRAY
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4050: LD_ADDR_VAR 0 5
4054: PUSH
4055: LD_EXP 38
4059: PUSH
4060: LD_VAR 0 3
4064: ARRAY
4065: PUSH
4066: LD_VAR 0 7
4070: ARRAY
4071: PUSH
4072: LD_INT 2
4074: ARRAY
4075: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4076: LD_ADDR_VAR 0 6
4080: PUSH
4081: LD_EXP 38
4085: PUSH
4086: LD_VAR 0 3
4090: ARRAY
4091: PUSH
4092: LD_VAR 0 7
4096: ARRAY
4097: PUSH
4098: LD_INT 3
4100: ARRAY
4101: ST_TO_ADDR
// bc_type := b_breastwork ;
4102: LD_ADDR_OWVAR 42
4106: PUSH
4107: LD_INT 31
4109: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4110: LD_ADDR_VAR 0 9
4114: PUSH
4115: LD_VAR 0 4
4119: PPUSH
4120: LD_VAR 0 5
4124: PPUSH
4125: LD_VAR 0 6
4129: PPUSH
4130: CALL_OW 47
4134: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4135: LD_INT 1
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: LD_INT 0
4146: PPUSH
4147: LD_INT 0
4149: PPUSH
4150: LD_VAR 0 9
4154: PPUSH
4155: CALL 2801 0 6
// soldiers_created := soldiers_created + 1 ;
4159: LD_ADDR_LOC 4
4163: PUSH
4164: LD_LOC 4
4168: PUSH
4169: LD_INT 1
4171: PLUS
4172: ST_TO_ADDR
// end ;
4173: GO 4021
4175: POP
4176: POP
// x := start_def [ pos ] [ 1 ] ;
4177: LD_ADDR_VAR 0 4
4181: PUSH
4182: LD_EXP 39
4186: PUSH
4187: LD_VAR 0 3
4191: ARRAY
4192: PUSH
4193: LD_INT 1
4195: ARRAY
4196: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4197: LD_ADDR_VAR 0 5
4201: PUSH
4202: LD_EXP 39
4206: PUSH
4207: LD_VAR 0 3
4211: ARRAY
4212: PUSH
4213: LD_INT 2
4215: ARRAY
4216: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4217: LD_LOC 8
4221: PUSH
4222: LD_EXP 18
4226: MINUS
4227: PPUSH
4228: LD_INT 1
4230: PPUSH
4231: LD_VAR 0 4
4235: PPUSH
4236: LD_VAR 0 5
4240: PPUSH
4241: LD_INT 5
4243: PPUSH
4244: LD_INT 0
4246: PPUSH
4247: CALL 2801 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4251: LD_LOC 5
4255: PPUSH
4256: LD_INT 2
4258: PPUSH
4259: LD_VAR 0 4
4263: PPUSH
4264: LD_VAR 0 5
4268: PPUSH
4269: LD_INT 5
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL 2801 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4279: LD_LOC 7
4283: PPUSH
4284: LD_INT 3
4286: PPUSH
4287: LD_VAR 0 4
4291: PPUSH
4292: LD_VAR 0 5
4296: PPUSH
4297: LD_INT 5
4299: PPUSH
4300: LD_INT 0
4302: PPUSH
4303: CALL 2801 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4307: LD_LOC 6
4311: PPUSH
4312: LD_INT 4
4314: PPUSH
4315: LD_VAR 0 4
4319: PPUSH
4320: LD_VAR 0 5
4324: PPUSH
4325: LD_INT 5
4327: PPUSH
4328: LD_INT 0
4330: PPUSH
4331: CALL 2801 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4335: LD_EXP 10
4339: PUSH
4340: LD_INT 20
4342: PPUSH
4343: LD_VAR 0 1
4347: PPUSH
4348: CALL_OW 321
4352: PUSH
4353: LD_INT 1
4355: EQUAL
4356: AND
4357: IFFALSE 4374
// SetTech ( tech_SibDet , side , state_researched ) ;
4359: LD_INT 20
4361: PPUSH
4362: LD_VAR 0 1
4366: PPUSH
4367: LD_INT 2
4369: PPUSH
4370: CALL_OW 322
// if def_siberite_bomb = 1 then
4374: LD_EXP 13
4378: PUSH
4379: LD_INT 1
4381: EQUAL
4382: IFFALSE 4416
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4384: LD_INT 25
4386: PPUSH
4387: LD_VAR 0 1
4391: PPUSH
4392: LD_INT 1
4394: PPUSH
4395: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4399: LD_INT 73
4401: PPUSH
4402: LD_VAR 0 1
4406: PPUSH
4407: LD_INT 1
4409: PPUSH
4410: CALL_OW 322
// end else
4414: GO 4446
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4416: LD_INT 25
4418: PPUSH
4419: LD_VAR 0 1
4423: PPUSH
4424: LD_INT 0
4426: PPUSH
4427: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4431: LD_INT 73
4433: PPUSH
4434: LD_VAR 0 1
4438: PPUSH
4439: LD_INT 0
4441: PPUSH
4442: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4446: LD_INT 24
4448: PPUSH
4449: LD_VAR 0 1
4453: PPUSH
4454: LD_INT 0
4456: PPUSH
4457: CALL_OW 322
// global_defined := true ;
4461: LD_ADDR_LOC 3
4465: PUSH
4466: LD_INT 1
4468: ST_TO_ADDR
// end ;
4469: LD_VAR 0 2
4473: RET
// function prepare_sides ; var i ; begin
4474: LD_INT 0
4476: PPUSH
4477: PPUSH
// global_units := [ ] ;
4478: LD_ADDR_LOC 2
4482: PUSH
4483: EMPTY
4484: ST_TO_ADDR
// global_defined := false ;
4485: LD_ADDR_LOC 3
4489: PUSH
4490: LD_INT 0
4492: ST_TO_ADDR
// CountClassMembers ;
4493: CALL 4543 0 0
// for i := 1 to 8 do
4497: LD_ADDR_VAR 0 2
4501: PUSH
4502: DOUBLE
4503: LD_INT 1
4505: DEC
4506: ST_TO_ADDR
4507: LD_INT 8
4509: PUSH
4510: FOR_TO
4511: IFFALSE 4536
// if Side_Positions [ i ] then
4513: LD_EXP 34
4517: PUSH
4518: LD_VAR 0 2
4522: ARRAY
4523: IFFALSE 4534
// prepare_side ( i ) ;
4525: LD_VAR 0 2
4529: PPUSH
4530: CALL 3389 0 1
4534: GO 4510
4536: POP
4537: POP
// end ;
4538: LD_VAR 0 1
4542: RET
// function CountClassMembers ; var Mode ; begin
4543: LD_INT 0
4545: PPUSH
4546: PPUSH
// if No_Mechs then
4547: LD_EXP 15
4551: IFFALSE 4563
// Mode := 2 else
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: LD_INT 2
4560: ST_TO_ADDR
4561: GO 4571
// Mode := 1 ;
4563: LD_ADDR_VAR 0 2
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// neng := number_of_people ;
4571: LD_ADDR_LOC 5
4575: PUSH
4576: LD_EXP 19
4580: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4581: LD_ADDR_LOC 8
4585: PUSH
4586: LD_LOC 5
4590: PUSH
4591: LD_INT 4
4593: PUSH
4594: LD_INT 3
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_VAR 0 2
4605: ARRAY
4606: DIV
4607: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4608: LD_LOC 8
4612: PUSH
4613: LD_EXP 18
4617: LESS
4618: IFFALSE 4630
// nsol := number_of_breastworks ;
4620: LD_ADDR_LOC 8
4624: PUSH
4625: LD_EXP 18
4629: ST_TO_ADDR
// neng := neng - nsol ;
4630: LD_ADDR_LOC 5
4634: PUSH
4635: LD_LOC 5
4639: PUSH
4640: LD_LOC 8
4644: MINUS
4645: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4646: LD_ADDR_LOC 6
4650: PUSH
4651: LD_LOC 5
4655: PUSH
4656: LD_INT 3
4658: PUSH
4659: LD_INT 2
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_VAR 0 2
4670: ARRAY
4671: DIV
4672: ST_TO_ADDR
// if ( nsci < 1 ) then
4673: LD_LOC 6
4677: PUSH
4678: LD_INT 1
4680: LESS
4681: IFFALSE 4691
// nsci := 1 ;
4683: LD_ADDR_LOC 6
4687: PUSH
4688: LD_INT 1
4690: ST_TO_ADDR
// neng := neng - nsci ;
4691: LD_ADDR_LOC 5
4695: PUSH
4696: LD_LOC 5
4700: PUSH
4701: LD_LOC 6
4705: MINUS
4706: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4707: LD_ADDR_LOC 7
4711: PUSH
4712: LD_LOC 5
4716: PUSH
4717: LD_INT 2
4719: DIV
4720: PUSH
4721: LD_INT 0
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PUSH
4728: LD_VAR 0 2
4732: ARRAY
4733: ST_TO_ADDR
// neng := neng - nmech ;
4734: LD_ADDR_LOC 5
4738: PUSH
4739: LD_LOC 5
4743: PUSH
4744: LD_LOC 7
4748: MINUS
4749: ST_TO_ADDR
// if ( neng < 1 ) then
4750: LD_LOC 5
4754: PUSH
4755: LD_INT 1
4757: LESS
4758: IFFALSE 4768
// neng := 1 ;
4760: LD_ADDR_LOC 5
4764: PUSH
4765: LD_INT 1
4767: ST_TO_ADDR
// end ;
4768: LD_VAR 0 1
4772: RET
// starting begin disable ( 98 ) ;
4773: LD_INT 98
4775: DISABLE_MARKED
// disable ( 99 ) ;
4776: LD_INT 99
4778: DISABLE_MARKED
// disable ( 400 ) ;
4779: LD_INT 400
4781: DISABLE_MARKED
// disable ( 401 ) ;
4782: LD_INT 401
4784: DISABLE_MARKED
// mp_selectmsg := true ;
4785: LD_ADDR_OWVAR 13
4789: PUSH
4790: LD_INT 1
4792: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4793: CALL 68 0 0
// init_map ;
4797: CALL 1224 0 0
// init_respawning ;
4801: CALL 14421 0 0
// set_shared_visions_and_alliances ;
4805: CALL 2513 0 0
// ResetFog ;
4809: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4813: LD_OWVAR 2
4817: PPUSH
4818: CALL_OW 520
// AnimateTrees ( true ) ;
4822: LD_INT 1
4824: PPUSH
4825: CALL_OW 573
// prepare_sides ;
4829: CALL 4474 0 0
// Init_Win_Condition ;
4833: CALL 8359 0 0
// ShowTimer ;
4837: CALL 7521 0 0
// music_nat := Side_Nations [ your_side ] ;
4841: LD_ADDR_OWVAR 71
4845: PUSH
4846: LD_EXP 35
4850: PUSH
4851: LD_OWVAR 2
4855: ARRAY
4856: ST_TO_ADDR
// if IAmSpec then
4857: CALL_OW 531
4861: IFFALSE 4885
// begin fogoff ( true ) ;
4863: LD_INT 1
4865: PPUSH
4866: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4870: LD_INT 130
4872: PPUSH
4873: LD_INT 100
4875: PPUSH
4876: CALL_OW 86
// enable ( 400 ) ;
4880: LD_INT 400
4882: ENABLE_MARKED
// end else
4883: GO 4931
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4885: LD_EXP 39
4889: PUSH
4890: LD_EXP 34
4894: PUSH
4895: LD_OWVAR 2
4899: ARRAY
4900: ARRAY
4901: PUSH
4902: LD_INT 1
4904: ARRAY
4905: PPUSH
4906: LD_EXP 39
4910: PUSH
4911: LD_EXP 34
4915: PUSH
4916: LD_OWVAR 2
4920: ARRAY
4921: ARRAY
4922: PUSH
4923: LD_INT 2
4925: ARRAY
4926: PPUSH
4927: CALL_OW 86
// end ; InitApeman ;
4931: CALL 6029 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
4935: LD_ADDR_EXP 55
4939: PUSH
4940: LD_INT 1
4942: PUSH
4943: LD_INT 2
4945: PUSH
4946: LD_INT 3
4948: PUSH
4949: LD_INT 4
4951: PUSH
4952: LD_INT 5
4954: PUSH
4955: LD_INT 6
4957: PUSH
4958: LD_INT 7
4960: PUSH
4961: LD_INT 8
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: ST_TO_ADDR
// BeginBuildUp ;
4974: CALL 13823 0 0
// end ;
4978: END
// every 0 0$1 do
4979: GO 4981
4981: DISABLE
// if ( def_siberite_bomb > 1 ) then
4982: LD_EXP 13
4986: PUSH
4987: LD_INT 1
4989: GREATER
4990: IFFALSE 5005
// begin wait ( siberite_bomb_Delay ) ;
4992: LD_EXP 29
4996: PPUSH
4997: CALL_OW 67
// EnableSibFiss ;
5001: CALL 5006 0 0
// end ;
5005: END
// function EnableSibFiss ; var i ; begin
5006: LD_INT 0
5008: PPUSH
5009: PPUSH
// for i := 1 to 8 do
5010: LD_ADDR_VAR 0 2
5014: PUSH
5015: DOUBLE
5016: LD_INT 1
5018: DEC
5019: ST_TO_ADDR
5020: LD_INT 8
5022: PUSH
5023: FOR_TO
5024: IFFALSE 5070
// if Side_Positions [ i ] then
5026: LD_EXP 34
5030: PUSH
5031: LD_VAR 0 2
5035: ARRAY
5036: IFFALSE 5068
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5038: LD_INT 25
5040: PPUSH
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_INT 1
5048: PPUSH
5049: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5053: LD_INT 73
5055: PPUSH
5056: LD_VAR 0 2
5060: PPUSH
5061: LD_INT 1
5063: PPUSH
5064: CALL_OW 322
// end ;
5068: GO 5023
5070: POP
5071: POP
// end ; end_of_file
5072: LD_VAR 0 1
5076: RET
// every 0 0$25 + 0 0$1.0 do var i , areas , _areas ;
5077: GO 5079
5079: DISABLE
5080: LD_INT 0
5082: PPUSH
5083: PPUSH
5084: PPUSH
// begin _areas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 , BuildUp7 , BuildUp8 ] ;
5085: LD_ADDR_VAR 0 3
5089: PUSH
5090: LD_INT 1
5092: PUSH
5093: LD_INT 2
5095: PUSH
5096: LD_INT 3
5098: PUSH
5099: LD_INT 4
5101: PUSH
5102: LD_INT 5
5104: PUSH
5105: LD_INT 6
5107: PUSH
5108: LD_INT 7
5110: PUSH
5111: LD_INT 8
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: ST_TO_ADDR
// areas := [ Between18 , Between21 , Between32 , Between43 , Between54 , Between65 , Between76 , Between87 ] ;
5124: LD_ADDR_VAR 0 2
5128: PUSH
5129: LD_INT 9
5131: PUSH
5132: LD_INT 10
5134: PUSH
5135: LD_INT 11
5137: PUSH
5138: LD_INT 12
5140: PUSH
5141: LD_INT 13
5143: PUSH
5144: LD_INT 14
5146: PUSH
5147: LD_INT 15
5149: PUSH
5150: LD_INT 16
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: ST_TO_ADDR
// for i := 1 to 8 do
5163: LD_ADDR_VAR 0 1
5167: PUSH
5168: DOUBLE
5169: LD_INT 1
5171: DEC
5172: ST_TO_ADDR
5173: LD_INT 8
5175: PUSH
5176: FOR_TO
5177: IFFALSE 5311
// begin if FilterUnitsInArea ( _areas [ i ] , [ [ f_not , [ f_side , 0 ] ] , [ f_type , unit_building ] ] ) and GetResourceArea ( areas [ i ] , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5179: LD_VAR 0 3
5183: PUSH
5184: LD_VAR 0 1
5188: ARRAY
5189: PPUSH
5190: LD_INT 3
5192: PUSH
5193: LD_INT 22
5195: PUSH
5196: LD_INT 0
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: PUSH
5207: LD_INT 21
5209: PUSH
5210: LD_INT 3
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PPUSH
5221: CALL_OW 70
5225: PUSH
5226: LD_VAR 0 2
5230: PUSH
5231: LD_VAR 0 1
5235: ARRAY
5236: PPUSH
5237: LD_INT 1
5239: PPUSH
5240: CALL_OW 287
5244: PUSH
5245: LD_INT 200
5247: PUSH
5248: LD_EXP 23
5252: MINUS
5253: PUSH
5254: LD_INT 50
5256: DIVREAL
5257: PUSH
5258: LD_INT 5
5260: MUL
5261: LESS
5262: AND
5263: IFFALSE 5309
// begin wait ( rand ( 0 0$2 , 0 0$6 ) ) ;
5265: LD_INT 70
5267: PPUSH
5268: LD_INT 210
5270: PPUSH
5271: CALL_OW 12
5275: PPUSH
5276: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , areas [ i ] , true ) ;
5280: LD_INT 2
5282: PPUSH
5283: LD_INT 5
5285: PPUSH
5286: CALL_OW 12
5290: PPUSH
5291: LD_VAR 0 2
5295: PUSH
5296: LD_VAR 0 1
5300: ARRAY
5301: PPUSH
5302: LD_INT 1
5304: PPUSH
5305: CALL_OW 55
// end ; end ;
5309: GO 5176
5311: POP
5312: POP
// if GetResourceArea ( Center , mat_cans ) < ( ( 700 - shipments_density ) / 25 * 5 ) then
5313: LD_INT 17
5315: PPUSH
5316: LD_INT 1
5318: PPUSH
5319: CALL_OW 287
5323: PUSH
5324: LD_INT 700
5326: PUSH
5327: LD_EXP 23
5331: MINUS
5332: PUSH
5333: LD_INT 25
5335: DIVREAL
5336: PUSH
5337: LD_INT 5
5339: MUL
5340: LESS
5341: IFFALSE 5356
// CreateCratesArea ( 5 , Center , true ) ;
5343: LD_INT 5
5345: PPUSH
5346: LD_INT 17
5348: PPUSH
5349: LD_INT 1
5351: PPUSH
5352: CALL_OW 55
// wait ( rand ( 0 0$10 , 0 0$15 ) ) ;
5356: LD_INT 350
5358: PPUSH
5359: LD_INT 525
5361: PPUSH
5362: CALL_OW 12
5366: PPUSH
5367: CALL_OW 67
// CreateCratesAnyWhere ( rand ( 1 , 5 ) , true ) ;
5371: LD_INT 1
5373: PPUSH
5374: LD_INT 5
5376: PPUSH
5377: CALL_OW 12
5381: PPUSH
5382: LD_INT 1
5384: PPUSH
5385: CALL_OW 57
// enable ;
5389: ENABLE
// end ;
5390: PPOPN 3
5392: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5393: GO 5395
5395: DISABLE
5396: LD_INT 0
5398: PPUSH
5399: PPUSH
// begin case tick of 1 .. 1 1$0 :
5400: LD_OWVAR 1
5404: PUSH
5405: LD_INT 1
5407: DOUBLE
5408: GREATEREQUAL
5409: IFFALSE 5417
5411: LD_INT 2100
5413: DOUBLE
5414: LESSEQUAL
5415: IFTRUE 5419
5417: GO 5447
5419: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5420: LD_EXP 23
5424: PUSH
5425: LD_INT 100
5427: DIVREAL
5428: PUSH
5429: LD_INT 525
5431: PPUSH
5432: LD_INT 1050
5434: PPUSH
5435: CALL_OW 12
5439: MUL
5440: PPUSH
5441: CALL_OW 67
5445: GO 5749
5447: LD_INT 2100
5449: PUSH
5450: LD_INT 1
5452: PLUS
5453: DOUBLE
5454: GREATEREQUAL
5455: IFFALSE 5463
5457: LD_INT 10500
5459: DOUBLE
5460: LESSEQUAL
5461: IFTRUE 5465
5463: GO 5493
5465: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5466: LD_EXP 23
5470: PUSH
5471: LD_INT 100
5473: DIVREAL
5474: PUSH
5475: LD_INT 1050
5477: PPUSH
5478: LD_INT 1750
5480: PPUSH
5481: CALL_OW 12
5485: MUL
5486: PPUSH
5487: CALL_OW 67
5491: GO 5749
5493: LD_INT 10500
5495: PUSH
5496: LD_INT 1
5498: PLUS
5499: DOUBLE
5500: GREATEREQUAL
5501: IFFALSE 5509
5503: LD_INT 21000
5505: DOUBLE
5506: LESSEQUAL
5507: IFTRUE 5511
5509: GO 5539
5511: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5512: LD_EXP 23
5516: PUSH
5517: LD_INT 100
5519: DIVREAL
5520: PUSH
5521: LD_INT 1750
5523: PPUSH
5524: LD_INT 2100
5526: PPUSH
5527: CALL_OW 12
5531: MUL
5532: PPUSH
5533: CALL_OW 67
5537: GO 5749
5539: LD_INT 21000
5541: PUSH
5542: LD_INT 1
5544: PLUS
5545: DOUBLE
5546: GREATEREQUAL
5547: IFFALSE 5555
5549: LD_INT 42000
5551: DOUBLE
5552: LESSEQUAL
5553: IFTRUE 5557
5555: GO 5585
5557: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5558: LD_EXP 23
5562: PUSH
5563: LD_INT 100
5565: DIVREAL
5566: PUSH
5567: LD_INT 2100
5569: PPUSH
5570: LD_INT 2275
5572: PPUSH
5573: CALL_OW 12
5577: MUL
5578: PPUSH
5579: CALL_OW 67
5583: GO 5749
5585: LD_INT 42000
5587: PUSH
5588: LD_INT 1
5590: PLUS
5591: DOUBLE
5592: GREATEREQUAL
5593: IFFALSE 5601
5595: LD_INT 63000
5597: DOUBLE
5598: LESSEQUAL
5599: IFTRUE 5603
5601: GO 5631
5603: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5604: LD_EXP 23
5608: PUSH
5609: LD_INT 100
5611: DIVREAL
5612: PUSH
5613: LD_INT 2275
5615: PPUSH
5616: LD_INT 2450
5618: PPUSH
5619: CALL_OW 12
5623: MUL
5624: PPUSH
5625: CALL_OW 67
5629: GO 5749
5631: LD_INT 63000
5633: PUSH
5634: LD_INT 1
5636: PLUS
5637: DOUBLE
5638: GREATEREQUAL
5639: IFFALSE 5647
5641: LD_INT 105000
5643: DOUBLE
5644: LESSEQUAL
5645: IFTRUE 5649
5647: GO 5677
5649: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5650: LD_EXP 23
5654: PUSH
5655: LD_INT 100
5657: DIVREAL
5658: PUSH
5659: LD_INT 2450
5661: PPUSH
5662: LD_INT 2800
5664: PPUSH
5665: CALL_OW 12
5669: MUL
5670: PPUSH
5671: CALL_OW 67
5675: GO 5749
5677: LD_INT 105000
5679: PUSH
5680: LD_INT 1
5682: PLUS
5683: DOUBLE
5684: GREATEREQUAL
5685: IFFALSE 5693
5687: LD_INT 630000
5689: DOUBLE
5690: LESSEQUAL
5691: IFTRUE 5695
5693: GO 5723
5695: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5696: LD_EXP 23
5700: PUSH
5701: LD_INT 100
5703: DIVREAL
5704: PUSH
5705: LD_INT 2800
5707: PPUSH
5708: LD_INT 3500
5710: PPUSH
5711: CALL_OW 12
5715: MUL
5716: PPUSH
5717: CALL_OW 67
5721: GO 5749
5723: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5724: LD_EXP 23
5728: PUSH
5729: LD_INT 100
5731: DIVREAL
5732: PUSH
5733: LD_INT 3500
5735: PPUSH
5736: LD_INT 3850
5738: PPUSH
5739: CALL_OW 12
5743: MUL
5744: PPUSH
5745: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5749: LD_ADDR_VAR 0 2
5753: PUSH
5754: LD_INT 3
5756: PPUSH
5757: LD_INT 5
5759: PPUSH
5760: CALL_OW 12
5764: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5765: LD_ADDR_VAR 0 1
5769: PUSH
5770: LD_EXP 34
5774: PUSH
5775: LD_INT 0
5777: PUSH
5778: EMPTY
5779: LIST
5780: DIFF
5781: PUSH
5782: FOR_IN
5783: IFFALSE 5832
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5785: LD_VAR 0 2
5789: PPUSH
5790: LD_EXP 39
5794: PUSH
5795: LD_VAR 0 1
5799: ARRAY
5800: PUSH
5801: LD_INT 1
5803: ARRAY
5804: PPUSH
5805: LD_EXP 39
5809: PUSH
5810: LD_VAR 0 1
5814: ARRAY
5815: PUSH
5816: LD_INT 2
5818: ARRAY
5819: PPUSH
5820: LD_INT 20
5822: PPUSH
5823: LD_INT 1
5825: PPUSH
5826: CALL_OW 56
5830: GO 5782
5832: POP
5833: POP
// enable ;
5834: ENABLE
// end ; end_of_file
5835: PPOPN 2
5837: END
// every 20 20$00 trigger apemanNumber do
5838: LD_EXP 46
5842: IFFALSE 5875
5844: GO 5846
5846: DISABLE
// begin enable ;
5847: ENABLE
// if apeLevel >= 8 then
5848: LD_EXP 51
5852: PUSH
5853: LD_INT 8
5855: GREATEREQUAL
5856: IFFALSE 5861
// disable else
5858: DISABLE
5859: GO 5875
// apeLevel := apeLevel + 1 ;
5861: LD_ADDR_EXP 51
5865: PUSH
5866: LD_EXP 51
5870: PUSH
5871: LD_INT 1
5873: PLUS
5874: ST_TO_ADDR
// end ;
5875: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5876: LD_EXP 46
5880: PUSH
5881: LD_EXP 47
5885: LESS
5886: IFFALSE 6026
5888: GO 5890
5890: DISABLE
5891: LD_INT 0
5893: PPUSH
5894: PPUSH
5895: PPUSH
5896: PPUSH
// begin enable ;
5897: ENABLE
// for i := 1 to apemanPos do
5898: LD_ADDR_VAR 0 1
5902: PUSH
5903: DOUBLE
5904: LD_INT 1
5906: DEC
5907: ST_TO_ADDR
5908: LD_EXP 49
5912: PUSH
5913: FOR_TO
5914: IFFALSE 6024
// begin if apemanPlayerCount [ i ] then
5916: LD_EXP 50
5920: PUSH
5921: LD_VAR 0 1
5925: ARRAY
5926: IFFALSE 6022
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5928: LD_EXP 50
5932: PUSH
5933: LD_VAR 0 1
5937: ARRAY
5938: PUSH
5939: LD_EXP 49
5943: PUSH
5944: LD_VAR 0 1
5948: ARRAY
5949: GREATER
5950: IFFALSE 6022
// begin ape := PrepareApeman ;
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: CALL 6545 0 0
5961: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5962: LD_VAR 0 2
5966: PPUSH
5967: LD_EXP 52
5971: PUSH
5972: LD_VAR 0 1
5976: ARRAY
5977: PPUSH
5978: LD_INT 0
5980: PPUSH
5981: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5985: LD_ADDR_EXP 49
5989: PUSH
5990: LD_EXP 49
5994: PPUSH
5995: LD_VAR 0 1
5999: PPUSH
6000: LD_EXP 49
6004: PUSH
6005: LD_VAR 0 1
6009: ARRAY
6010: PUSH
6011: LD_VAR 0 2
6015: UNION
6016: PPUSH
6017: CALL_OW 1
6021: ST_TO_ADDR
// end ; end ; end ;
6022: GO 5913
6024: POP
6025: POP
// end ;
6026: PPOPN 4
6028: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6029: LD_INT 0
6031: PPUSH
6032: PPUSH
6033: PPUSH
6034: PPUSH
6035: PPUSH
6036: PPUSH
6037: PPUSH
// playersAmount := 0 ;
6038: LD_ADDR_VAR 0 3
6042: PUSH
6043: LD_INT 0
6045: ST_TO_ADDR
// _apeAreas := [ Between18 , Between21 , Between32 , Between43 , Between54 , Between65 , Between76 , Between87 ] ;
6046: LD_ADDR_VAR 0 7
6050: PUSH
6051: LD_INT 9
6053: PUSH
6054: LD_INT 10
6056: PUSH
6057: LD_INT 11
6059: PUSH
6060: LD_INT 12
6062: PUSH
6063: LD_INT 13
6065: PUSH
6066: LD_INT 14
6068: PUSH
6069: LD_INT 15
6071: PUSH
6072: LD_INT 16
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6085: LD_ADDR_EXP 52
6089: PUSH
6090: LD_INT 0
6092: PUSH
6093: LD_INT 0
6095: PUSH
6096: LD_INT 0
6098: PUSH
6099: LD_INT 0
6101: PUSH
6102: LD_INT 0
6104: PUSH
6105: LD_INT 0
6107: PUSH
6108: LD_INT 0
6110: PUSH
6111: LD_INT 0
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: ST_TO_ADDR
// for j = 1 to Side_Positions do
6124: LD_ADDR_VAR 0 4
6128: PUSH
6129: DOUBLE
6130: LD_INT 1
6132: DEC
6133: ST_TO_ADDR
6134: LD_EXP 34
6138: PUSH
6139: FOR_TO
6140: IFFALSE 6207
// if Side_Positions [ j ] then
6142: LD_EXP 34
6146: PUSH
6147: LD_VAR 0 4
6151: ARRAY
6152: IFFALSE 6205
// begin playersAmount := playersAmount + 1 ;
6154: LD_ADDR_VAR 0 3
6158: PUSH
6159: LD_VAR 0 3
6163: PUSH
6164: LD_INT 1
6166: PLUS
6167: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6168: LD_ADDR_EXP 52
6172: PUSH
6173: LD_EXP 52
6177: PPUSH
6178: LD_VAR 0 4
6182: PPUSH
6183: LD_VAR 0 7
6187: PUSH
6188: LD_EXP 34
6192: PUSH
6193: LD_VAR 0 4
6197: ARRAY
6198: ARRAY
6199: PPUSH
6200: CALL_OW 1
6204: ST_TO_ADDR
// end ;
6205: GO 6139
6207: POP
6208: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6209: LD_ADDR_EXP 48
6213: PUSH
6214: LD_INT 3
6216: PUSH
6217: LD_EXP 25
6221: MUL
6222: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6223: LD_ADDR_EXP 46
6227: PUSH
6228: LD_VAR 0 3
6232: PUSH
6233: LD_EXP 48
6237: MUL
6238: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6239: LD_ADDR_EXP 47
6243: PUSH
6244: LD_EXP 46
6248: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6249: LD_ADDR_EXP 49
6253: PUSH
6254: LD_INT 0
6256: PUSH
6257: LD_INT 0
6259: PUSH
6260: LD_INT 0
6262: PUSH
6263: LD_INT 0
6265: PUSH
6266: LD_INT 0
6268: PUSH
6269: LD_INT 0
6271: PUSH
6272: LD_INT 0
6274: PUSH
6275: LD_INT 0
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6288: LD_ADDR_EXP 50
6292: PUSH
6293: LD_INT 0
6295: PUSH
6296: LD_INT 0
6298: PUSH
6299: LD_INT 0
6301: PUSH
6302: LD_INT 0
6304: PUSH
6305: LD_INT 0
6307: PUSH
6308: LD_INT 0
6310: PUSH
6311: LD_INT 0
6313: PUSH
6314: LD_INT 0
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: ST_TO_ADDR
// apeLevel := 1 ;
6327: LD_ADDR_EXP 51
6331: PUSH
6332: LD_INT 1
6334: ST_TO_ADDR
// if not apemanNumber then
6335: LD_EXP 46
6339: NOT
6340: IFFALSE 6344
// exit ;
6342: GO 6540
// for i := 1 to apemanPerPlayer do
6344: LD_ADDR_VAR 0 2
6348: PUSH
6349: DOUBLE
6350: LD_INT 1
6352: DEC
6353: ST_TO_ADDR
6354: LD_EXP 48
6358: PUSH
6359: FOR_TO
6360: IFFALSE 6538
// begin for j := 1 to Side_Positions do
6362: LD_ADDR_VAR 0 4
6366: PUSH
6367: DOUBLE
6368: LD_INT 1
6370: DEC
6371: ST_TO_ADDR
6372: LD_EXP 34
6376: PUSH
6377: FOR_TO
6378: IFFALSE 6534
// if Side_Positions [ j ] then
6380: LD_EXP 34
6384: PUSH
6385: LD_VAR 0 4
6389: ARRAY
6390: IFFALSE 6532
// begin pos := Side_Positions [ j ] ;
6392: LD_ADDR_VAR 0 6
6396: PUSH
6397: LD_EXP 34
6401: PUSH
6402: LD_VAR 0 4
6406: ARRAY
6407: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6408: LD_ADDR_EXP 50
6412: PUSH
6413: LD_EXP 50
6417: PPUSH
6418: LD_VAR 0 4
6422: PPUSH
6423: LD_EXP 50
6427: PUSH
6428: LD_VAR 0 4
6432: ARRAY
6433: PUSH
6434: LD_INT 1
6436: PLUS
6437: PPUSH
6438: CALL_OW 1
6442: ST_TO_ADDR
// ape := PrepareApeman ;
6443: LD_ADDR_VAR 0 5
6447: PUSH
6448: CALL 6545 0 0
6452: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6453: LD_ADDR_EXP 49
6457: PUSH
6458: LD_EXP 49
6462: PPUSH
6463: LD_VAR 0 4
6467: PPUSH
6468: LD_EXP 49
6472: PUSH
6473: LD_VAR 0 4
6477: ARRAY
6478: PPUSH
6479: LD_EXP 49
6483: PUSH
6484: LD_VAR 0 4
6488: ARRAY
6489: PUSH
6490: LD_INT 1
6492: PLUS
6493: PPUSH
6494: LD_VAR 0 5
6498: PPUSH
6499: CALL_OW 1
6503: PPUSH
6504: CALL_OW 1
6508: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6509: LD_VAR 0 5
6513: PPUSH
6514: LD_EXP 52
6518: PUSH
6519: LD_VAR 0 4
6523: ARRAY
6524: PPUSH
6525: LD_INT 0
6527: PPUSH
6528: CALL_OW 49
// end ;
6532: GO 6377
6534: POP
6535: POP
// end ;
6536: GO 6359
6538: POP
6539: POP
// end ;
6540: LD_VAR 0 1
6544: RET
// export function PrepareApeman ; var bonus ; begin
6545: LD_INT 0
6547: PPUSH
6548: PPUSH
// uc_side := 0 ;
6549: LD_ADDR_OWVAR 20
6553: PUSH
6554: LD_INT 0
6556: ST_TO_ADDR
// uc_nation := 0 ;
6557: LD_ADDR_OWVAR 21
6561: PUSH
6562: LD_INT 0
6564: ST_TO_ADDR
// InitHc ;
6565: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6569: LD_ADDR_VAR 0 2
6573: PUSH
6574: LD_INT 1
6576: NEG
6577: PUSH
6578: LD_INT 0
6580: PUSH
6581: LD_INT 1
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 25
6591: PUSH
6592: LD_INT 12
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PPUSH
6599: CALL_OW 69
6603: PUSH
6604: LD_INT 3
6606: MOD
6607: PUSH
6608: LD_INT 1
6610: PLUS
6611: ARRAY
6612: ST_TO_ADDR
// hc_class := class_apeman ;
6613: LD_ADDR_OWVAR 28
6617: PUSH
6618: LD_INT 12
6620: ST_TO_ADDR
// hc_gallery :=  ;
6621: LD_ADDR_OWVAR 33
6625: PUSH
6626: LD_STRING 
6628: ST_TO_ADDR
// hc_name :=  ;
6629: LD_ADDR_OWVAR 26
6633: PUSH
6634: LD_STRING 
6636: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6637: LD_ADDR_OWVAR 31
6641: PUSH
6642: LD_EXP 51
6646: PUSH
6647: LD_VAR 0 2
6651: PLUS
6652: PUSH
6653: LD_EXP 51
6657: PUSH
6658: LD_VAR 0 2
6662: PLUS
6663: PUSH
6664: LD_EXP 51
6668: PUSH
6669: LD_VAR 0 2
6673: PLUS
6674: PUSH
6675: LD_EXP 51
6679: PUSH
6680: LD_VAR 0 2
6684: PLUS
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6692: LD_ADDR_OWVAR 35
6696: PUSH
6697: LD_INT 10
6699: PUSH
6700: LD_VAR 0 2
6704: MUL
6705: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6706: LD_ADDR_OWVAR 29
6710: PUSH
6711: LD_INT 12
6713: PUSH
6714: LD_INT 12
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: ST_TO_ADDR
// result := CreateHuman ;
6721: LD_ADDR_VAR 0 1
6725: PUSH
6726: CALL_OW 44
6730: ST_TO_ADDR
// end ;
6731: LD_VAR 0 1
6735: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6736: LD_INT 0
6738: PPUSH
6739: PPUSH
6740: PPUSH
// if not ape then
6741: LD_VAR 0 1
6745: NOT
6746: IFFALSE 6750
// exit ;
6748: GO 6875
// side := GetSide ( ape ) ;
6750: LD_ADDR_VAR 0 3
6754: PUSH
6755: LD_VAR 0 1
6759: PPUSH
6760: CALL_OW 255
6764: ST_TO_ADDR
// if not side then
6765: LD_VAR 0 3
6769: NOT
6770: IFFALSE 6824
// begin for i = 1 to apemanPos do
6772: LD_ADDR_VAR 0 4
6776: PUSH
6777: DOUBLE
6778: LD_INT 1
6780: DEC
6781: ST_TO_ADDR
6782: LD_EXP 49
6786: PUSH
6787: FOR_TO
6788: IFFALSE 6822
// if ape in apemanPos [ i ] then
6790: LD_VAR 0 1
6794: PUSH
6795: LD_EXP 49
6799: PUSH
6800: LD_VAR 0 4
6804: ARRAY
6805: IN
6806: IFFALSE 6820
// begin side := i ;
6808: LD_ADDR_VAR 0 3
6812: PUSH
6813: LD_VAR 0 4
6817: ST_TO_ADDR
// break ;
6818: GO 6822
// end ;
6820: GO 6787
6822: POP
6823: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6824: LD_ADDR_EXP 49
6828: PUSH
6829: LD_EXP 49
6833: PPUSH
6834: LD_VAR 0 3
6838: PPUSH
6839: LD_EXP 49
6843: PUSH
6844: LD_VAR 0 3
6848: ARRAY
6849: PUSH
6850: LD_VAR 0 1
6854: DIFF
6855: PPUSH
6856: CALL_OW 1
6860: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6861: LD_ADDR_EXP 46
6865: PUSH
6866: LD_EXP 46
6870: PUSH
6871: LD_INT 1
6873: MINUS
6874: ST_TO_ADDR
// end ; end_of_file
6875: LD_VAR 0 2
6879: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6880: LD_VAR 0 1
6884: PPUSH
6885: CALL_OW 266
6889: PUSH
6890: LD_INT 0
6892: PUSH
6893: LD_INT 1
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: IN
6900: IFFALSE 6925
// SetBName ( b , @ & GetSide ( b ) ) ;
6902: LD_VAR 0 1
6906: PPUSH
6907: LD_STRING @
6909: PUSH
6910: LD_VAR 0 1
6914: PPUSH
6915: CALL_OW 255
6919: STR
6920: PPUSH
6921: CALL_OW 500
// end ;
6925: PPOPN 2
6927: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6928: LD_VAR 0 1
6932: PPUSH
6933: CALL_OW 266
6937: PUSH
6938: LD_INT 0
6940: PUSH
6941: LD_INT 1
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: IN
6948: IFFALSE 6973
// SetBName ( b , @ & GetSide ( b ) ) ;
6950: LD_VAR 0 1
6954: PPUSH
6955: LD_STRING @
6957: PUSH
6958: LD_VAR 0 1
6962: PPUSH
6963: CALL_OW 255
6967: STR
6968: PPUSH
6969: CALL_OW 500
// end ;
6973: PPOPN 3
6975: END
// on VehicleConstructed ( veh , fac ) do var side ;
6976: LD_INT 0
6978: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6979: LD_VAR 0 1
6983: PPUSH
6984: CALL_OW 263
6988: PUSH
6989: LD_INT 5
6991: EQUAL
6992: IFFALSE 7134
// begin side := GetSide ( veh ) ;
6994: LD_ADDR_VAR 0 3
6998: PUSH
6999: LD_VAR 0 1
7003: PPUSH
7004: CALL_OW 255
7008: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7009: LD_ADDR_EXP 49
7013: PUSH
7014: LD_EXP 49
7018: PPUSH
7019: LD_VAR 0 3
7023: PPUSH
7024: LD_EXP 49
7028: PUSH
7029: LD_VAR 0 3
7033: ARRAY
7034: PPUSH
7035: LD_INT 52
7037: PUSH
7038: EMPTY
7039: LIST
7040: PPUSH
7041: CALL_OW 72
7045: PUSH
7046: LD_INT 22
7048: PUSH
7049: LD_VAR 0 3
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: LD_INT 2
7060: PUSH
7061: LD_INT 33
7063: PUSH
7064: LD_INT 5
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: LD_INT 25
7073: PUSH
7074: LD_INT 12
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PUSH
7081: LD_INT 25
7083: PUSH
7084: LD_INT 15
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_INT 25
7093: PUSH
7094: LD_INT 16
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 25
7103: PUSH
7104: LD_INT 17
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PPUSH
7123: CALL_OW 69
7127: UNION
7128: PPUSH
7129: CALL_OW 1
7133: ST_TO_ADDR
// end ; end ;
7134: PPOPN 3
7136: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7137: LD_INT 0
7139: PPUSH
7140: PPUSH
7141: PPUSH
7142: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7143: LD_VAR 0 1
7147: PPUSH
7148: CALL_OW 257
7152: PUSH
7153: LD_INT 12
7155: PUSH
7156: LD_INT 15
7158: PUSH
7159: LD_INT 17
7161: PUSH
7162: LD_INT 16
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: IN
7171: PUSH
7172: LD_VAR 0 1
7176: PPUSH
7177: CALL_OW 263
7181: PUSH
7182: LD_INT 5
7184: EQUAL
7185: OR
7186: IFFALSE 7197
// ApeKilled ( j ) ;
7188: LD_VAR 0 1
7192: PPUSH
7193: CALL 6736 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7197: LD_VAR 0 1
7201: PPUSH
7202: CALL_OW 266
7206: PUSH
7207: LD_INT 0
7209: PUSH
7210: LD_INT 1
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: IN
7217: IFFALSE 7299
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7219: LD_ADDR_VAR 0 4
7223: PUSH
7224: LD_EXP 34
7228: PUSH
7229: LD_VAR 0 1
7233: PPUSH
7234: CALL_OW 255
7238: ARRAY
7239: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7240: LD_ADDR_VAR 0 2
7244: PUSH
7245: LD_EXP 39
7249: PUSH
7250: LD_VAR 0 4
7254: ARRAY
7255: PUSH
7256: LD_INT 1
7258: ARRAY
7259: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7260: LD_ADDR_VAR 0 3
7264: PUSH
7265: LD_EXP 39
7269: PUSH
7270: LD_VAR 0 4
7274: ARRAY
7275: PUSH
7276: LD_INT 2
7278: ARRAY
7279: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7280: LD_VAR 0 2
7284: PPUSH
7285: LD_VAR 0 3
7289: PPUSH
7290: CALL_OW 420
7294: PPUSH
7295: CALL_OW 419
// end ; end ;
7299: PPOPN 5
7301: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7302: LD_VAR 0 1
7306: PPUSH
7307: LD_VAR 0 2
7311: PPUSH
7312: LD_VAR 0 3
7316: PPUSH
7317: LD_OWVAR 2
7321: PPUSH
7322: CALL 8120 0 4
7326: PPOPN 3
7328: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7329: LD_INT 0
7331: PPUSH
7332: PPUSH
// for un in battle_flags_id do
7333: LD_ADDR_VAR 0 2
7337: PUSH
7338: LD_EXP 44
7342: PUSH
7343: FOR_IN
7344: IFFALSE 7419
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7346: LD_VAR 0 2
7350: PPUSH
7351: LD_INT 1
7353: PUSH
7354: LD_LOC 9
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: LD_INT 2
7365: PUSH
7366: LD_LOC 9
7370: PUSH
7371: LD_INT 2
7373: DIV
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 3
7381: PUSH
7382: LD_LOC 9
7386: PUSH
7387: LD_INT 5
7389: DIV
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: PUSH
7395: LD_INT 20
7397: PUSH
7398: LD_LOC 9
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: PPUSH
7413: CALL_OW 423
7417: GO 7343
7419: POP
7420: POP
// end ;
7421: LD_VAR 0 1
7425: RET
// every 1 do var un ;
7426: GO 7428
7428: DISABLE
7429: LD_INT 0
7431: PPUSH
// begin if not def_morale_flags then
7432: LD_EXP 9
7436: NOT
7437: IFFALSE 7441
// exit ;
7439: GO 7518
// if not morale_decreasing_time then
7441: LD_EXP 24
7445: NOT
7446: IFFALSE 7450
// exit ;
7448: GO 7518
// strength = 100 ;
7450: LD_ADDR_LOC 9
7454: PUSH
7455: LD_INT 100
7457: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7458: LD_EXP 24
7462: PPUSH
7463: CALL_OW 67
// strength := strength - 1 ;
7467: LD_ADDR_LOC 9
7471: PUSH
7472: LD_LOC 9
7476: PUSH
7477: LD_INT 1
7479: MINUS
7480: ST_TO_ADDR
// Update_Flags ;
7481: CALL 7329 0 0
// until not strength ;
7485: LD_LOC 9
7489: NOT
7490: IFFALSE 7458
// for un in battle_flags_id do
7492: LD_ADDR_VAR 0 1
7496: PUSH
7497: LD_EXP 44
7501: PUSH
7502: FOR_IN
7503: IFFALSE 7516
// KillBattleFlag ( un ) ;
7505: LD_VAR 0 1
7509: PPUSH
7510: CALL_OW 419
7514: GO 7502
7516: POP
7517: POP
// end ; end_of_file
7518: PPOPN 1
7520: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7521: LD_INT 0
7523: PPUSH
7524: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7525: LD_ADDR_VAR 0 2
7529: PUSH
7530: LD_STRING #Multi1x1-Time
7532: PUSH
7533: LD_OWVAR 1
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: ST_TO_ADDR
// if WaitServerStrings then
7542: LD_EXP 54
7546: IFFALSE 7564
// AllStrings = AllStrings ^ WaitServerStrings ;
7548: LD_ADDR_VAR 0 2
7552: PUSH
7553: LD_VAR 0 2
7557: PUSH
7558: LD_EXP 54
7562: ADD
7563: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7564: LD_INT 0
7566: PUSH
7567: LD_EXP 29
7571: PUSH
7572: LD_OWVAR 1
7576: MINUS
7577: LESSEQUAL
7578: IFFALSE 7609
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7580: LD_ADDR_VAR 0 2
7584: PUSH
7585: LD_VAR 0 2
7589: PUSH
7590: LD_STRING #allowedsibbomb
7592: PUSH
7593: LD_EXP 29
7597: PUSH
7598: LD_OWVAR 1
7602: MINUS
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: ADD
7608: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7609: LD_INT 0
7611: PUSH
7612: LD_EXP 57
7616: PUSH
7617: LD_OWVAR 1
7621: MINUS
7622: LESSEQUAL
7623: IFFALSE 7654
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7625: LD_ADDR_VAR 0 2
7629: PUSH
7630: LD_VAR 0 2
7634: PUSH
7635: LD_STRING #builduptime
7637: PUSH
7638: LD_EXP 57
7642: PUSH
7643: LD_OWVAR 1
7647: MINUS
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: ADD
7653: ST_TO_ADDR
// if ( ExtraStrings ) then
7654: LD_EXP 53
7658: IFFALSE 7680
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7660: LD_ADDR_VAR 0 2
7664: PUSH
7665: LD_VAR 0 2
7669: PUSH
7670: LD_STRING 
7672: ADD
7673: PUSH
7674: LD_EXP 53
7678: ADD
7679: ST_TO_ADDR
// Display_Strings := AllStrings ;
7680: LD_ADDR_OWVAR 47
7684: PUSH
7685: LD_VAR 0 2
7689: ST_TO_ADDR
// end ;
7690: LD_VAR 0 1
7694: RET
// every 0 0$1 do
7695: GO 7697
7697: DISABLE
// begin ShowTimer ;
7698: CALL 7521 0 0
// enable ;
7702: ENABLE
// end ; end_of_file
7703: END
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
7704: LD_INT 0
7706: PPUSH
7707: PPUSH
7708: PPUSH
7709: PPUSH
7710: PPUSH
7711: PPUSH
7712: PPUSH
7713: PPUSH
7714: PPUSH
// for i := 1 to 8 do
7715: LD_ADDR_VAR 0 2
7719: PUSH
7720: DOUBLE
7721: LD_INT 1
7723: DEC
7724: ST_TO_ADDR
7725: LD_INT 8
7727: PUSH
7728: FOR_TO
7729: IFFALSE 8113
// begin if Side_Positions [ i ] then
7731: LD_EXP 34
7735: PUSH
7736: LD_VAR 0 2
7740: ARRAY
7741: IFFALSE 8111
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
7743: LD_ADDR_VAR 0 7
7747: PUSH
7748: LD_INT 22
7750: PUSH
7751: LD_VAR 0 2
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 21
7762: PUSH
7763: LD_INT 1
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PPUSH
7774: CALL_OW 69
7778: PUSH
7779: LD_INT 0
7781: PLUS
7782: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7783: LD_ADDR_VAR 0 9
7787: PUSH
7788: LD_INT 22
7790: PUSH
7791: LD_VAR 0 2
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: LD_INT 2
7802: PUSH
7803: LD_INT 30
7805: PUSH
7806: LD_INT 0
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: PUSH
7813: LD_INT 30
7815: PUSH
7816: LD_INT 1
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: LIST
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PPUSH
7832: CALL_OW 69
7836: ST_TO_ADDR
// crates := 0 ;
7837: LD_ADDR_VAR 0 4
7841: PUSH
7842: LD_INT 0
7844: ST_TO_ADDR
// oil := 0 ;
7845: LD_ADDR_VAR 0 5
7849: PUSH
7850: LD_INT 0
7852: ST_TO_ADDR
// sib := 0 ;
7853: LD_ADDR_VAR 0 6
7857: PUSH
7858: LD_INT 0
7860: ST_TO_ADDR
// if bases then
7861: LD_VAR 0 9
7865: IFFALSE 7971
// begin for j in bases do
7867: LD_ADDR_VAR 0 3
7871: PUSH
7872: LD_VAR 0 9
7876: PUSH
7877: FOR_IN
7878: IFFALSE 7969
// begin base := GetBase ( j ) ;
7880: LD_ADDR_VAR 0 8
7884: PUSH
7885: LD_VAR 0 3
7889: PPUSH
7890: CALL_OW 274
7894: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
7895: LD_ADDR_VAR 0 4
7899: PUSH
7900: LD_VAR 0 4
7904: PUSH
7905: LD_VAR 0 8
7909: PPUSH
7910: LD_INT 1
7912: PPUSH
7913: CALL_OW 275
7917: PLUS
7918: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
7919: LD_ADDR_VAR 0 5
7923: PUSH
7924: LD_VAR 0 5
7928: PUSH
7929: LD_VAR 0 8
7933: PPUSH
7934: LD_INT 2
7936: PPUSH
7937: CALL_OW 275
7941: PLUS
7942: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
7943: LD_ADDR_VAR 0 6
7947: PUSH
7948: LD_VAR 0 6
7952: PUSH
7953: LD_VAR 0 8
7957: PPUSH
7958: LD_INT 3
7960: PPUSH
7961: CALL_OW 275
7965: PLUS
7966: ST_TO_ADDR
// end ;
7967: GO 7877
7969: POP
7970: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
7971: LD_STRING setSpecText(
7973: PUSH
7974: LD_VAR 0 2
7978: STR
7979: PUSH
7980: LD_STRING ,
7982: STR
7983: PUSH
7984: LD_INT 2
7986: STR
7987: PUSH
7988: LD_STRING ,
7990: STR
7991: PUSH
7992: LD_VAR 0 4
7996: STR
7997: PUSH
7998: LD_STRING )
8000: STR
8001: PPUSH
8002: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
8006: LD_STRING setSpecText(
8008: PUSH
8009: LD_VAR 0 2
8013: STR
8014: PUSH
8015: LD_STRING ,
8017: STR
8018: PUSH
8019: LD_INT 3
8021: STR
8022: PUSH
8023: LD_STRING ,
8025: STR
8026: PUSH
8027: LD_VAR 0 5
8031: STR
8032: PUSH
8033: LD_STRING )
8035: STR
8036: PPUSH
8037: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
8041: LD_STRING setSpecText(
8043: PUSH
8044: LD_VAR 0 2
8048: STR
8049: PUSH
8050: LD_STRING ,
8052: STR
8053: PUSH
8054: LD_INT 4
8056: STR
8057: PUSH
8058: LD_STRING ,
8060: STR
8061: PUSH
8062: LD_VAR 0 6
8066: STR
8067: PUSH
8068: LD_STRING )
8070: STR
8071: PPUSH
8072: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
8076: LD_STRING setSpecText(
8078: PUSH
8079: LD_VAR 0 2
8083: STR
8084: PUSH
8085: LD_STRING ,
8087: STR
8088: PUSH
8089: LD_INT 5
8091: STR
8092: PUSH
8093: LD_STRING ,
8095: STR
8096: PUSH
8097: LD_VAR 0 7
8101: STR
8102: PUSH
8103: LD_STRING )
8105: STR
8106: PPUSH
8107: CALL_OW 559
// end ; end ;
8111: GO 7728
8113: POP
8114: POP
// end ; end_of_file
8115: LD_VAR 0 1
8119: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8120: LD_INT 0
8122: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8123: LD_VAR 0 1
8127: PPUSH
8128: CALL_OW 255
8132: PUSH
8133: LD_VAR 0 4
8137: EQUAL
8138: IFFALSE 8157
// begin SetAchievement ( ACH_RAD ) ;
8140: LD_STRING ACH_RAD
8142: PPUSH
8143: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8147: LD_STRING ACH_NL
8149: PPUSH
8150: LD_INT 1
8152: PPUSH
8153: CALL_OW 564
// end end ;
8157: LD_VAR 0 5
8161: RET
// export function SA_Win ( side ) ; begin
8162: LD_INT 0
8164: PPUSH
// case side of 1 :
8165: LD_VAR 0 1
8169: PUSH
8170: LD_INT 1
8172: DOUBLE
8173: EQUAL
8174: IFTRUE 8178
8176: GO 8191
8178: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8179: LD_STRING ACH_AH
8181: PPUSH
8182: LD_INT 1
8184: PPUSH
8185: CALL_OW 564
8189: GO 8354
8191: LD_INT 2
8193: DOUBLE
8194: EQUAL
8195: IFTRUE 8199
8197: GO 8212
8199: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8200: LD_STRING ACH_E
8202: PPUSH
8203: LD_INT 1
8205: PPUSH
8206: CALL_OW 564
8210: GO 8354
8212: LD_INT 3
8214: DOUBLE
8215: EQUAL
8216: IFTRUE 8220
8218: GO 8233
8220: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8221: LD_STRING ACH_OOL
8223: PPUSH
8224: LD_INT 1
8226: PPUSH
8227: CALL_OW 564
8231: GO 8354
8233: LD_INT 1
8235: PUSH
8236: LD_INT 2
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: DOUBLE
8243: EQUAL
8244: IFTRUE 8248
8246: GO 8273
8248: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8249: LD_STRING ACH_AH
8251: PPUSH
8252: LD_REAL  5.00000000000000E-0001
8255: PPUSH
8256: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8260: LD_STRING ACH_E
8262: PPUSH
8263: LD_REAL  5.00000000000000E-0001
8266: PPUSH
8267: CALL_OW 564
// end ; [ 2 , 3 ] :
8271: GO 8354
8273: LD_INT 2
8275: PUSH
8276: LD_INT 3
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: DOUBLE
8283: EQUAL
8284: IFTRUE 8288
8286: GO 8313
8288: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8289: LD_STRING ACH_OOL
8291: PPUSH
8292: LD_REAL  5.00000000000000E-0001
8295: PPUSH
8296: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8300: LD_STRING ACH_E
8302: PPUSH
8303: LD_REAL  5.00000000000000E-0001
8306: PPUSH
8307: CALL_OW 564
// end ; [ 3 , 1 ] :
8311: GO 8354
8313: LD_INT 3
8315: PUSH
8316: LD_INT 1
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: DOUBLE
8323: EQUAL
8324: IFTRUE 8328
8326: GO 8353
8328: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8329: LD_STRING ACH_AH
8331: PPUSH
8332: LD_REAL  5.00000000000000E-0001
8335: PPUSH
8336: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8340: LD_STRING ACH_OOL
8342: PPUSH
8343: LD_REAL  5.00000000000000E-0001
8346: PPUSH
8347: CALL_OW 564
// end ; end ;
8351: GO 8354
8353: POP
// end ; end_of_file
8354: LD_VAR 0 2
8358: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
8359: LD_INT 0
8361: PPUSH
8362: PPUSH
// enable ( 98 ) ;
8363: LD_INT 98
8365: ENABLE_MARKED
// GameEnded = false ;
8366: LD_ADDR_LOC 15
8370: PUSH
8371: LD_INT 0
8373: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8374: LD_ADDR_LOC 14
8378: PUSH
8379: LD_INT 0
8381: PUSH
8382: LD_INT 0
8384: PUSH
8385: LD_INT 0
8387: PUSH
8388: LD_INT 0
8390: PUSH
8391: LD_INT 0
8393: PUSH
8394: LD_INT 0
8396: PUSH
8397: LD_INT 0
8399: PUSH
8400: LD_INT 0
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: ST_TO_ADDR
// unfoged = false ;
8413: LD_ADDR_LOC 16
8417: PUSH
8418: LD_INT 0
8420: ST_TO_ADDR
// defeated_specs := [ ] ;
8421: LD_ADDR_LOC 17
8425: PUSH
8426: EMPTY
8427: ST_TO_ADDR
// for i = 1 to side_positions do
8428: LD_ADDR_VAR 0 2
8432: PUSH
8433: DOUBLE
8434: LD_INT 1
8436: DEC
8437: ST_TO_ADDR
8438: LD_EXP 34
8442: PUSH
8443: FOR_TO
8444: IFFALSE 8484
// if not side_positions [ i ] then
8446: LD_EXP 34
8450: PUSH
8451: LD_VAR 0 2
8455: ARRAY
8456: NOT
8457: IFFALSE 8482
// defeated = replace ( defeated , i , true ) ;
8459: LD_ADDR_LOC 14
8463: PUSH
8464: LD_LOC 14
8468: PPUSH
8469: LD_VAR 0 2
8473: PPUSH
8474: LD_INT 1
8476: PPUSH
8477: CALL_OW 1
8481: ST_TO_ADDR
8482: GO 8443
8484: POP
8485: POP
// end ;
8486: LD_VAR 0 1
8490: RET
// function CanWinLoose ; begin
8491: LD_INT 0
8493: PPUSH
// Result := true ;
8494: LD_ADDR_VAR 0 1
8498: PUSH
8499: LD_INT 1
8501: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8502: CALL_OW 518
8506: PUSH
8507: CALL_OW 519
8511: PUSH
8512: LD_INT 0
8514: GREATER
8515: AND
8516: IFFALSE 8526
// Result := false ;
8518: LD_ADDR_VAR 0 1
8522: PUSH
8523: LD_INT 0
8525: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8526: CALL_OW 531
8530: PUSH
8531: CALL_OW 519
8535: PUSH
8536: LD_INT 1
8538: GREATER
8539: AND
8540: IFFALSE 8550
// Result := false ;
8542: LD_ADDR_VAR 0 1
8546: PUSH
8547: LD_INT 0
8549: ST_TO_ADDR
// end ;
8550: LD_VAR 0 1
8554: RET
// export function HasPower ( i ) ; var k , h ; begin
8555: LD_INT 0
8557: PPUSH
8558: PPUSH
8559: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8560: LD_VAR 0 1
8564: PPUSH
8565: CALL_OW 108
8569: NOT
8570: PUSH
8571: LD_EXP 33
8575: PUSH
8576: LD_VAR 0 1
8580: ARRAY
8581: NOT
8582: AND
8583: PUSH
8584: LD_OWVAR 4
8588: AND
8589: IFFALSE 8601
// begin result = false ;
8591: LD_ADDR_VAR 0 2
8595: PUSH
8596: LD_INT 0
8598: ST_TO_ADDR
// end else
8599: GO 8896
// case def_win_rules of 0 :
8601: LD_EXP 30
8605: PUSH
8606: LD_INT 0
8608: DOUBLE
8609: EQUAL
8610: IFTRUE 8614
8612: GO 8777
8614: POP
// if def_people_respawning then
8615: LD_EXP 11
8619: IFFALSE 8710
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8621: LD_ADDR_VAR 0 2
8625: PUSH
8626: LD_INT 22
8628: PUSH
8629: LD_VAR 0 1
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: PUSH
8638: LD_INT 2
8640: PUSH
8641: LD_INT 21
8643: PUSH
8644: LD_INT 1
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: LD_INT 33
8653: PUSH
8654: LD_INT 3
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: PUSH
8661: LD_INT 33
8663: PUSH
8664: LD_INT 5
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: PUSH
8671: LD_INT 30
8673: PUSH
8674: LD_INT 0
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PUSH
8681: LD_INT 30
8683: PUSH
8684: LD_INT 1
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PPUSH
8703: CALL_OW 69
8707: ST_TO_ADDR
8708: GO 8775
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8710: LD_ADDR_VAR 0 2
8714: PUSH
8715: LD_INT 22
8717: PUSH
8718: LD_VAR 0 1
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: LD_INT 2
8729: PUSH
8730: LD_INT 21
8732: PUSH
8733: LD_INT 1
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PUSH
8740: LD_INT 33
8742: PUSH
8743: LD_INT 3
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PUSH
8750: LD_INT 33
8752: PUSH
8753: LD_INT 5
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PPUSH
8770: CALL_OW 69
8774: ST_TO_ADDR
8775: GO 8896
8777: LD_INT 1
8779: DOUBLE
8780: EQUAL
8781: IFTRUE 8785
8783: GO 8824
8785: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8786: LD_ADDR_VAR 0 2
8790: PUSH
8791: LD_INT 22
8793: PUSH
8794: LD_VAR 0 1
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: LD_INT 21
8805: PUSH
8806: LD_INT 1
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PPUSH
8817: CALL_OW 69
8821: ST_TO_ADDR
8822: GO 8896
8824: LD_INT 2
8826: DOUBLE
8827: EQUAL
8828: IFTRUE 8832
8830: GO 8895
8832: POP
// begin h = false ;
8833: LD_ADDR_VAR 0 4
8837: PUSH
8838: LD_INT 0
8840: ST_TO_ADDR
// for k in heroes [ i ] do
8841: LD_ADDR_VAR 0 3
8845: PUSH
8846: LD_EXP 45
8850: PUSH
8851: LD_VAR 0 1
8855: ARRAY
8856: PUSH
8857: FOR_IN
8858: IFFALSE 8881
// if IsLive ( k ) then
8860: LD_VAR 0 3
8864: PPUSH
8865: CALL_OW 300
8869: IFFALSE 8879
// h = true ;
8871: LD_ADDR_VAR 0 4
8875: PUSH
8876: LD_INT 1
8878: ST_TO_ADDR
8879: GO 8857
8881: POP
8882: POP
// Result := h ;
8883: LD_ADDR_VAR 0 2
8887: PUSH
8888: LD_VAR 0 4
8892: ST_TO_ADDR
// end ; end ;
8893: GO 8896
8895: POP
// end ;
8896: LD_VAR 0 2
8900: RET
// function AlliedSides ( i , j ) ; begin
8901: LD_INT 0
8903: PPUSH
// Result := false ;
8904: LD_ADDR_VAR 0 3
8908: PUSH
8909: LD_INT 0
8911: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8912: LD_VAR 0 1
8916: PPUSH
8917: LD_VAR 0 2
8921: PPUSH
8922: CALL_OW 81
8926: PUSH
8927: LD_INT 1
8929: EQUAL
8930: PUSH
8931: LD_VAR 0 2
8935: PPUSH
8936: LD_VAR 0 1
8940: PPUSH
8941: CALL_OW 81
8945: PUSH
8946: LD_INT 1
8948: EQUAL
8949: AND
8950: PUSH
8951: LD_VAR 0 1
8955: PPUSH
8956: CALL_OW 83
8960: AND
8961: PUSH
8962: LD_VAR 0 2
8966: PPUSH
8967: CALL_OW 83
8971: AND
8972: IFFALSE 8982
// Result := true ;
8974: LD_ADDR_VAR 0 3
8978: PUSH
8979: LD_INT 1
8981: ST_TO_ADDR
// end ;
8982: LD_VAR 0 3
8986: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8987: CALL 8491 0 0
8991: PUSH
8992: LD_LOC 15
8996: NOT
8997: AND
8998: IFFALSE 9014
9000: GO 9002
9002: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
9003: LD_ADDR_EXP 54
9007: PUSH
9008: LD_STRING #Player-Ended
9010: PUSH
9011: EMPTY
9012: LIST
9013: ST_TO_ADDR
9014: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
9015: CALL 8491 0 0
9019: PUSH
9020: LD_LOC 15
9024: AND
9025: IFFALSE 9034
9027: GO 9029
9029: DISABLE
// YouLostInMultiplayer ;
9030: CALL_OW 107
9034: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
9035: CALL 8491 0 0
9039: NOT
9040: PUSH
9041: CALL_OW 531
9045: NOT
9046: AND
9047: IFFALSE 9063
9049: GO 9051
9051: DISABLE
// WaitServerStrings = [ #server-wait ] ;
9052: LD_ADDR_EXP 54
9056: PUSH
9057: LD_STRING #server-wait
9059: PUSH
9060: EMPTY
9061: LIST
9062: ST_TO_ADDR
9063: END
// every 100 trigger IAmSpec do
9064: CALL_OW 531
9068: IFFALSE 9084
9070: GO 9072
9072: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
9073: LD_ADDR_EXP 54
9077: PUSH
9078: LD_STRING #Player-IAmSpec
9080: PUSH
9081: EMPTY
9082: LIST
9083: ST_TO_ADDR
9084: END
// every 100 trigger GameEnded and IAmSpec do
9085: LD_LOC 15
9089: PUSH
9090: CALL_OW 531
9094: AND
9095: IFFALSE 9104
9097: GO 9099
9099: DISABLE
// YouLostInMultiplayer ;
9100: CALL_OW 107
9104: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
9105: CALL 8491 0 0
9109: PUSH
9110: LD_LOC 15
9114: NOT
9115: AND
9116: IFFALSE 9132
9118: GO 9120
9120: DISABLE
// WaitServerStrings = [ $player-win ] ;
9121: LD_ADDR_EXP 54
9125: PUSH
9126: LD_STRING $player-win
9128: PUSH
9129: EMPTY
9130: LIST
9131: ST_TO_ADDR
9132: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
9133: CALL 8491 0 0
9137: PUSH
9138: LD_LOC 15
9142: AND
9143: IFFALSE 9167
9145: GO 9147
9147: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
9148: LD_EXP 35
9152: PUSH
9153: LD_OWVAR 7
9157: ARRAY
9158: PPUSH
9159: CALL 8162 0 1
// YouWinInMultiplayer ;
9163: CALL_OW 106
// end ;
9167: END
// every 100 trigger isEditor marked 401 do
9168: LD_OWVAR 84
9172: IFFALSE 9188
9174: GO 9176
9176: DISABLE
// Debug_Strings = [ You won ] ;
9177: LD_ADDR_OWVAR 48
9181: PUSH
9182: LD_STRING You won
9184: PUSH
9185: EMPTY
9186: LIST
9187: ST_TO_ADDR
9188: END
// every 100 trigger isEditor marked 400 do
9189: LD_OWVAR 84
9193: IFFALSE 9209
9195: GO 9197
9197: DISABLE
// Debug_Strings = [ You loss ] ;
9198: LD_ADDR_OWVAR 48
9202: PUSH
9203: LD_STRING You loss
9205: PUSH
9206: EMPTY
9207: LIST
9208: ST_TO_ADDR
9209: END
// every 100 marked 98 do var i , un ;
9210: GO 9212
9212: DISABLE
9213: LD_INT 0
9215: PPUSH
9216: PPUSH
// begin for i = 1 to side_positions do
9217: LD_ADDR_VAR 0 1
9221: PUSH
9222: DOUBLE
9223: LD_INT 1
9225: DEC
9226: ST_TO_ADDR
9227: LD_EXP 34
9231: PUSH
9232: FOR_TO
9233: IFFALSE 9320
// begin if side_positions [ i ] then
9235: LD_EXP 34
9239: PUSH
9240: LD_VAR 0 1
9244: ARRAY
9245: IFFALSE 9318
// if not HasPower ( i ) and not defeated [ i ] then
9247: LD_VAR 0 1
9251: PPUSH
9252: CALL 8555 0 1
9256: NOT
9257: PUSH
9258: LD_LOC 14
9262: PUSH
9263: LD_VAR 0 1
9267: ARRAY
9268: NOT
9269: AND
9270: IFFALSE 9318
// begin defeated = replace ( defeated , i , true ) ;
9272: LD_ADDR_LOC 14
9276: PUSH
9277: LD_LOC 14
9281: PPUSH
9282: LD_VAR 0 1
9286: PPUSH
9287: LD_INT 1
9289: PPUSH
9290: CALL_OW 1
9294: ST_TO_ADDR
// if i = mp_player_side then
9295: LD_VAR 0 1
9299: PUSH
9300: LD_OWVAR 7
9304: EQUAL
9305: IFFALSE 9318
// begin Multiplayer_Loose_Message ;
9307: CALL_OW 521
// SetPlayerSpectator ( ) ;
9311: CALL_OW 572
// enable ( 400 ) ;
9315: LD_INT 400
9317: ENABLE_MARKED
// end ; end ; end ;
9318: GO 9232
9320: POP
9321: POP
// DidGameEnd ;
9322: CALL 9337 0 0
// if not GameEnded then
9326: LD_LOC 15
9330: NOT
9331: IFFALSE 9334
// enable ;
9333: ENABLE
// end ;
9334: PPOPN 2
9336: END
// function DidGameEnd ; var i , k , enemy ; begin
9337: LD_INT 0
9339: PPUSH
9340: PPUSH
9341: PPUSH
9342: PPUSH
// enemy = [ ] ;
9343: LD_ADDR_VAR 0 4
9347: PUSH
9348: EMPTY
9349: ST_TO_ADDR
// for i = 1 to side_positions do
9350: LD_ADDR_VAR 0 2
9354: PUSH
9355: DOUBLE
9356: LD_INT 1
9358: DEC
9359: ST_TO_ADDR
9360: LD_EXP 34
9364: PUSH
9365: FOR_TO
9366: IFFALSE 9460
// if not defeated [ i ] then
9368: LD_LOC 14
9372: PUSH
9373: LD_VAR 0 2
9377: ARRAY
9378: NOT
9379: IFFALSE 9458
// for k = 1 to side_positions do
9381: LD_ADDR_VAR 0 3
9385: PUSH
9386: DOUBLE
9387: LD_INT 1
9389: DEC
9390: ST_TO_ADDR
9391: LD_EXP 34
9395: PUSH
9396: FOR_TO
9397: IFFALSE 9456
// if not defeated [ k ] then
9399: LD_LOC 14
9403: PUSH
9404: LD_VAR 0 3
9408: ARRAY
9409: NOT
9410: IFFALSE 9454
// if not AlliedSides ( i , k ) then
9412: LD_VAR 0 2
9416: PPUSH
9417: LD_VAR 0 3
9421: PPUSH
9422: CALL 8901 0 2
9426: NOT
9427: IFFALSE 9454
// enemy = enemy ^ [ i , k ] ;
9429: LD_ADDR_VAR 0 4
9433: PUSH
9434: LD_VAR 0 4
9438: PUSH
9439: LD_VAR 0 2
9443: PUSH
9444: LD_VAR 0 3
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: ADD
9453: ST_TO_ADDR
9454: GO 9396
9456: POP
9457: POP
9458: GO 9365
9460: POP
9461: POP
// if not enemy then
9462: LD_VAR 0 4
9466: NOT
9467: IFFALSE 9493
// begin GameEnded = true ;
9469: LD_ADDR_LOC 15
9473: PUSH
9474: LD_INT 1
9476: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9477: LD_LOC 14
9481: PUSH
9482: LD_OWVAR 7
9486: ARRAY
9487: NOT
9488: IFFALSE 9493
// enable ( 401 ) ;
9490: LD_INT 401
9492: ENABLE_MARKED
// end ; end ;
9493: LD_VAR 0 1
9497: RET
// function unfog ; var k , friends ; begin
9498: LD_INT 0
9500: PPUSH
9501: PPUSH
9502: PPUSH
// for k = 1 to side_positions do
9503: LD_ADDR_VAR 0 2
9507: PUSH
9508: DOUBLE
9509: LD_INT 1
9511: DEC
9512: ST_TO_ADDR
9513: LD_EXP 34
9517: PUSH
9518: FOR_TO
9519: IFFALSE 9575
// if not defeated [ k ] then
9521: LD_LOC 14
9525: PUSH
9526: LD_VAR 0 2
9530: ARRAY
9531: NOT
9532: IFFALSE 9573
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9534: LD_OWVAR 7
9538: PPUSH
9539: LD_VAR 0 2
9543: PPUSH
9544: CALL_OW 81
9548: PUSH
9549: LD_INT 1
9551: PUSH
9552: EMPTY
9553: LIST
9554: IN
9555: IFFALSE 9573
// friends = friends ^ k ;
9557: LD_ADDR_VAR 0 3
9561: PUSH
9562: LD_VAR 0 3
9566: PUSH
9567: LD_VAR 0 2
9571: ADD
9572: ST_TO_ADDR
9573: GO 9518
9575: POP
9576: POP
// if not friends then
9577: LD_VAR 0 3
9581: NOT
9582: IFFALSE 9596
// begin SetPlayerSpectator ( ) ;
9584: CALL_OW 572
// unfoged = true ;
9588: LD_ADDR_LOC 16
9592: PUSH
9593: LD_INT 1
9595: ST_TO_ADDR
// end ; end ;
9596: LD_VAR 0 1
9600: RET
// export function MakeGameEnd ; begin
9601: LD_INT 0
9603: PPUSH
// SetPlayerSpectator ( ) ;
9604: CALL_OW 572
// unfoged = true ;
9608: LD_ADDR_LOC 16
9612: PUSH
9613: LD_INT 1
9615: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9616: LD_INT 175
9618: PPUSH
9619: CALL_OW 67
// GameEnded = true ;
9623: LD_ADDR_LOC 15
9627: PUSH
9628: LD_INT 1
9630: ST_TO_ADDR
// end ;
9631: LD_VAR 0 1
9635: RET
// export function GetGameEnded ; begin
9636: LD_INT 0
9638: PPUSH
// result = GameEnded ;
9639: LD_ADDR_VAR 0 1
9643: PUSH
9644: LD_LOC 15
9648: ST_TO_ADDR
// end ; end_of_file
9649: LD_VAR 0 1
9653: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9654: LD_INT 0
9656: PPUSH
9657: PPUSH
9658: PPUSH
// for side = 1 to 8 do
9659: LD_ADDR_VAR 0 2
9663: PUSH
9664: DOUBLE
9665: LD_INT 1
9667: DEC
9668: ST_TO_ADDR
9669: LD_INT 8
9671: PUSH
9672: FOR_TO
9673: IFFALSE 9794
// begin for i = 1 to 72 do
9675: LD_ADDR_VAR 0 3
9679: PUSH
9680: DOUBLE
9681: LD_INT 1
9683: DEC
9684: ST_TO_ADDR
9685: LD_INT 72
9687: PUSH
9688: FOR_TO
9689: IFFALSE 9720
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9691: LD_VAR 0 3
9695: PPUSH
9696: LD_VAR 0 2
9700: PPUSH
9701: LD_INT 0
9703: PPUSH
9704: LD_VAR 0 3
9708: PPUSH
9709: CALL_OW 565
9713: PPUSH
9714: CALL_OW 322
9718: GO 9688
9720: POP
9721: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9722: LD_INT 73
9724: PPUSH
9725: LD_VAR 0 2
9729: PPUSH
9730: LD_INT 0
9732: PPUSH
9733: LD_INT 25
9735: PPUSH
9736: CALL_OW 565
9740: PPUSH
9741: CALL_OW 322
// for i = 0 to 40 do
9745: LD_ADDR_VAR 0 3
9749: PUSH
9750: DOUBLE
9751: LD_INT 0
9753: DEC
9754: ST_TO_ADDR
9755: LD_INT 40
9757: PUSH
9758: FOR_TO
9759: IFFALSE 9790
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9761: LD_VAR 0 3
9765: PPUSH
9766: LD_VAR 0 2
9770: PPUSH
9771: LD_INT 1
9773: PPUSH
9774: LD_VAR 0 3
9778: PPUSH
9779: CALL_OW 565
9783: PPUSH
9784: CALL_OW 324
9788: GO 9758
9790: POP
9791: POP
// end ;
9792: GO 9672
9794: POP
9795: POP
// end ;
9796: LD_VAR 0 1
9800: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9801: LD_INT 0
9803: PPUSH
9804: PPUSH
9805: PPUSH
// for side = 1 to 8 do
9806: LD_ADDR_VAR 0 3
9810: PUSH
9811: DOUBLE
9812: LD_INT 1
9814: DEC
9815: ST_TO_ADDR
9816: LD_INT 8
9818: PUSH
9819: FOR_TO
9820: IFFALSE 13816
// begin for i = 1 to 73 do
9822: LD_ADDR_VAR 0 4
9826: PUSH
9827: DOUBLE
9828: LD_INT 1
9830: DEC
9831: ST_TO_ADDR
9832: LD_INT 73
9834: PUSH
9835: FOR_TO
9836: IFFALSE 9857
// SetTech ( i , side , state_disabled ) ;
9838: LD_VAR 0 4
9842: PPUSH
9843: LD_VAR 0 3
9847: PPUSH
9848: LD_INT 0
9850: PPUSH
9851: CALL_OW 322
9855: GO 9835
9857: POP
9858: POP
// for i = 0 to 40 do
9859: LD_ADDR_VAR 0 4
9863: PUSH
9864: DOUBLE
9865: LD_INT 0
9867: DEC
9868: ST_TO_ADDR
9869: LD_INT 40
9871: PUSH
9872: FOR_TO
9873: IFFALSE 9894
// SetRestrict ( i , side , false ) ;
9875: LD_VAR 0 4
9879: PPUSH
9880: LD_VAR 0 3
9884: PPUSH
9885: LD_INT 0
9887: PPUSH
9888: CALL_OW 324
9892: GO 9872
9894: POP
9895: POP
// case level of 1 :
9896: LD_VAR 0 1
9900: PUSH
9901: LD_INT 1
9903: DOUBLE
9904: EQUAL
9905: IFTRUE 9909
9907: GO 10062
9909: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9910: LD_INT 35
9912: PPUSH
9913: LD_VAR 0 3
9917: PPUSH
9918: LD_INT 1
9920: PPUSH
9921: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9925: LD_INT 45
9927: PPUSH
9928: LD_VAR 0 3
9932: PPUSH
9933: LD_INT 1
9935: PPUSH
9936: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9940: LD_INT 46
9942: PPUSH
9943: LD_VAR 0 3
9947: PPUSH
9948: LD_INT 1
9950: PPUSH
9951: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9955: LD_INT 47
9957: PPUSH
9958: LD_VAR 0 3
9962: PPUSH
9963: LD_INT 1
9965: PPUSH
9966: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9970: LD_INT 0
9972: PPUSH
9973: LD_VAR 0 3
9977: PPUSH
9978: LD_INT 1
9980: PPUSH
9981: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9985: LD_INT 2
9987: PPUSH
9988: LD_VAR 0 3
9992: PPUSH
9993: LD_INT 1
9995: PPUSH
9996: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10000: LD_INT 4
10002: PPUSH
10003: LD_VAR 0 3
10007: PPUSH
10008: LD_INT 1
10010: PPUSH
10011: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10015: LD_INT 6
10017: PPUSH
10018: LD_VAR 0 3
10022: PPUSH
10023: LD_INT 1
10025: PPUSH
10026: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10030: LD_INT 29
10032: PPUSH
10033: LD_VAR 0 3
10037: PPUSH
10038: LD_INT 1
10040: PPUSH
10041: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10045: LD_INT 31
10047: PPUSH
10048: LD_VAR 0 3
10052: PPUSH
10053: LD_INT 1
10055: PPUSH
10056: CALL_OW 324
// end ; 2 :
10060: GO 13814
10062: LD_INT 2
10064: DOUBLE
10065: EQUAL
10066: IFTRUE 10070
10068: GO 10268
10070: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10071: LD_INT 35
10073: PPUSH
10074: LD_VAR 0 3
10078: PPUSH
10079: LD_INT 1
10081: PPUSH
10082: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10086: LD_INT 45
10088: PPUSH
10089: LD_VAR 0 3
10093: PPUSH
10094: LD_INT 1
10096: PPUSH
10097: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10101: LD_INT 46
10103: PPUSH
10104: LD_VAR 0 3
10108: PPUSH
10109: LD_INT 1
10111: PPUSH
10112: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10116: LD_INT 47
10118: PPUSH
10119: LD_VAR 0 3
10123: PPUSH
10124: LD_INT 1
10126: PPUSH
10127: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10131: LD_INT 1
10133: PPUSH
10134: LD_VAR 0 3
10138: PPUSH
10139: LD_INT 1
10141: PPUSH
10142: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10146: LD_INT 2
10148: PPUSH
10149: LD_VAR 0 3
10153: PPUSH
10154: LD_INT 1
10156: PPUSH
10157: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10161: LD_INT 11
10163: PPUSH
10164: LD_VAR 0 3
10168: PPUSH
10169: LD_INT 1
10171: PPUSH
10172: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10176: LD_INT 0
10178: PPUSH
10179: LD_VAR 0 3
10183: PPUSH
10184: LD_INT 1
10186: PPUSH
10187: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10191: LD_INT 2
10193: PPUSH
10194: LD_VAR 0 3
10198: PPUSH
10199: LD_INT 1
10201: PPUSH
10202: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10206: LD_INT 4
10208: PPUSH
10209: LD_VAR 0 3
10213: PPUSH
10214: LD_INT 1
10216: PPUSH
10217: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10221: LD_INT 6
10223: PPUSH
10224: LD_VAR 0 3
10228: PPUSH
10229: LD_INT 1
10231: PPUSH
10232: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10236: LD_INT 29
10238: PPUSH
10239: LD_VAR 0 3
10243: PPUSH
10244: LD_INT 1
10246: PPUSH
10247: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10251: LD_INT 31
10253: PPUSH
10254: LD_VAR 0 3
10258: PPUSH
10259: LD_INT 1
10261: PPUSH
10262: CALL_OW 324
// end ; 3 :
10266: GO 13814
10268: LD_INT 3
10270: DOUBLE
10271: EQUAL
10272: IFTRUE 10276
10274: GO 10729
10276: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10277: LD_INT 35
10279: PPUSH
10280: LD_VAR 0 3
10284: PPUSH
10285: LD_INT 1
10287: PPUSH
10288: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10292: LD_INT 45
10294: PPUSH
10295: LD_VAR 0 3
10299: PPUSH
10300: LD_INT 1
10302: PPUSH
10303: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10307: LD_INT 46
10309: PPUSH
10310: LD_VAR 0 3
10314: PPUSH
10315: LD_INT 1
10317: PPUSH
10318: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10322: LD_INT 47
10324: PPUSH
10325: LD_VAR 0 3
10329: PPUSH
10330: LD_INT 1
10332: PPUSH
10333: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10337: LD_INT 1
10339: PPUSH
10340: LD_VAR 0 3
10344: PPUSH
10345: LD_INT 1
10347: PPUSH
10348: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10352: LD_INT 2
10354: PPUSH
10355: LD_VAR 0 3
10359: PPUSH
10360: LD_INT 1
10362: PPUSH
10363: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10367: LD_INT 11
10369: PPUSH
10370: LD_VAR 0 3
10374: PPUSH
10375: LD_INT 1
10377: PPUSH
10378: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10382: LD_INT 48
10384: PPUSH
10385: LD_VAR 0 3
10389: PPUSH
10390: LD_INT 1
10392: PPUSH
10393: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10397: LD_INT 69
10399: PPUSH
10400: LD_VAR 0 3
10404: PPUSH
10405: LD_INT 1
10407: PPUSH
10408: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10412: LD_INT 39
10414: PPUSH
10415: LD_VAR 0 3
10419: PPUSH
10420: LD_INT 1
10422: PPUSH
10423: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10427: LD_INT 43
10429: PPUSH
10430: LD_VAR 0 3
10434: PPUSH
10435: LD_INT 1
10437: PPUSH
10438: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10442: LD_INT 51
10444: PPUSH
10445: LD_VAR 0 3
10449: PPUSH
10450: LD_INT 1
10452: PPUSH
10453: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10457: LD_INT 6
10459: PPUSH
10460: LD_VAR 0 3
10464: PPUSH
10465: LD_INT 1
10467: PPUSH
10468: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10472: LD_INT 0
10474: PPUSH
10475: LD_VAR 0 3
10479: PPUSH
10480: LD_INT 1
10482: PPUSH
10483: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10487: LD_INT 2
10489: PPUSH
10490: LD_VAR 0 3
10494: PPUSH
10495: LD_INT 1
10497: PPUSH
10498: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10502: LD_INT 3
10504: PPUSH
10505: LD_VAR 0 3
10509: PPUSH
10510: LD_INT 1
10512: PPUSH
10513: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10517: LD_INT 4
10519: PPUSH
10520: LD_VAR 0 3
10524: PPUSH
10525: LD_INT 1
10527: PPUSH
10528: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10532: LD_INT 6
10534: PPUSH
10535: LD_VAR 0 3
10539: PPUSH
10540: LD_INT 1
10542: PPUSH
10543: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10547: LD_INT 7
10549: PPUSH
10550: LD_VAR 0 3
10554: PPUSH
10555: LD_INT 1
10557: PPUSH
10558: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10562: LD_INT 8
10564: PPUSH
10565: LD_VAR 0 3
10569: PPUSH
10570: LD_INT 1
10572: PPUSH
10573: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10577: LD_INT 10
10579: PPUSH
10580: LD_VAR 0 3
10584: PPUSH
10585: LD_INT 1
10587: PPUSH
10588: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10592: LD_INT 15
10594: PPUSH
10595: LD_VAR 0 3
10599: PPUSH
10600: LD_INT 1
10602: PPUSH
10603: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10607: LD_INT 16
10609: PPUSH
10610: LD_VAR 0 3
10614: PPUSH
10615: LD_INT 1
10617: PPUSH
10618: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10622: LD_INT 17
10624: PPUSH
10625: LD_VAR 0 3
10629: PPUSH
10630: LD_INT 1
10632: PPUSH
10633: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10637: LD_INT 20
10639: PPUSH
10640: LD_VAR 0 3
10644: PPUSH
10645: LD_INT 1
10647: PPUSH
10648: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10652: LD_INT 26
10654: PPUSH
10655: LD_VAR 0 3
10659: PPUSH
10660: LD_INT 1
10662: PPUSH
10663: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10667: LD_INT 27
10669: PPUSH
10670: LD_VAR 0 3
10674: PPUSH
10675: LD_INT 1
10677: PPUSH
10678: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10682: LD_INT 29
10684: PPUSH
10685: LD_VAR 0 3
10689: PPUSH
10690: LD_INT 1
10692: PPUSH
10693: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10697: LD_INT 31
10699: PPUSH
10700: LD_VAR 0 3
10704: PPUSH
10705: LD_INT 1
10707: PPUSH
10708: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10712: LD_INT 32
10714: PPUSH
10715: LD_VAR 0 3
10719: PPUSH
10720: LD_INT 1
10722: PPUSH
10723: CALL_OW 324
// end ; 4 :
10727: GO 13814
10729: LD_INT 4
10731: DOUBLE
10732: EQUAL
10733: IFTRUE 10737
10735: GO 11685
10737: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10738: LD_INT 35
10740: PPUSH
10741: LD_VAR 0 3
10745: PPUSH
10746: LD_INT 1
10748: PPUSH
10749: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10753: LD_INT 45
10755: PPUSH
10756: LD_VAR 0 3
10760: PPUSH
10761: LD_INT 1
10763: PPUSH
10764: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10768: LD_INT 46
10770: PPUSH
10771: LD_VAR 0 3
10775: PPUSH
10776: LD_INT 1
10778: PPUSH
10779: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10783: LD_INT 47
10785: PPUSH
10786: LD_VAR 0 3
10790: PPUSH
10791: LD_INT 1
10793: PPUSH
10794: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10798: LD_INT 1
10800: PPUSH
10801: LD_VAR 0 3
10805: PPUSH
10806: LD_INT 1
10808: PPUSH
10809: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10813: LD_INT 2
10815: PPUSH
10816: LD_VAR 0 3
10820: PPUSH
10821: LD_INT 1
10823: PPUSH
10824: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10828: LD_INT 11
10830: PPUSH
10831: LD_VAR 0 3
10835: PPUSH
10836: LD_INT 1
10838: PPUSH
10839: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10843: LD_INT 20
10845: PPUSH
10846: LD_VAR 0 3
10850: PPUSH
10851: LD_INT 1
10853: PPUSH
10854: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10858: LD_INT 48
10860: PPUSH
10861: LD_VAR 0 3
10865: PPUSH
10866: LD_INT 1
10868: PPUSH
10869: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10873: LD_INT 49
10875: PPUSH
10876: LD_VAR 0 3
10880: PPUSH
10881: LD_INT 1
10883: PPUSH
10884: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10888: LD_INT 69
10890: PPUSH
10891: LD_VAR 0 3
10895: PPUSH
10896: LD_INT 1
10898: PPUSH
10899: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10903: LD_INT 39
10905: PPUSH
10906: LD_VAR 0 3
10910: PPUSH
10911: LD_INT 1
10913: PPUSH
10914: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10918: LD_INT 34
10920: PPUSH
10921: LD_VAR 0 3
10925: PPUSH
10926: LD_INT 1
10928: PPUSH
10929: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10933: LD_INT 42
10935: PPUSH
10936: LD_VAR 0 3
10940: PPUSH
10941: LD_INT 1
10943: PPUSH
10944: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10948: LD_INT 44
10950: PPUSH
10951: LD_VAR 0 3
10955: PPUSH
10956: LD_INT 1
10958: PPUSH
10959: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10963: LD_INT 41
10965: PPUSH
10966: LD_VAR 0 3
10970: PPUSH
10971: LD_INT 1
10973: PPUSH
10974: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10978: LD_INT 43
10980: PPUSH
10981: LD_VAR 0 3
10985: PPUSH
10986: LD_INT 1
10988: PPUSH
10989: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10993: LD_INT 70
10995: PPUSH
10996: LD_VAR 0 3
11000: PPUSH
11001: LD_INT 1
11003: PPUSH
11004: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11008: LD_INT 51
11010: PPUSH
11011: LD_VAR 0 3
11015: PPUSH
11016: LD_INT 1
11018: PPUSH
11019: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11023: LD_INT 52
11025: PPUSH
11026: LD_VAR 0 3
11030: PPUSH
11031: LD_INT 1
11033: PPUSH
11034: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11038: LD_INT 6
11040: PPUSH
11041: LD_VAR 0 3
11045: PPUSH
11046: LD_INT 1
11048: PPUSH
11049: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11053: LD_INT 15
11055: PPUSH
11056: LD_VAR 0 3
11060: PPUSH
11061: LD_INT 1
11063: PPUSH
11064: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11068: LD_INT 7
11070: PPUSH
11071: LD_VAR 0 3
11075: PPUSH
11076: LD_INT 1
11078: PPUSH
11079: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11083: LD_INT 12
11085: PPUSH
11086: LD_VAR 0 3
11090: PPUSH
11091: LD_INT 1
11093: PPUSH
11094: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11098: LD_INT 18
11100: PPUSH
11101: LD_VAR 0 3
11105: PPUSH
11106: LD_INT 1
11108: PPUSH
11109: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11113: LD_INT 60
11115: PPUSH
11116: LD_VAR 0 3
11120: PPUSH
11121: LD_INT 1
11123: PPUSH
11124: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11128: LD_INT 9
11130: PPUSH
11131: LD_VAR 0 3
11135: PPUSH
11136: LD_INT 1
11138: PPUSH
11139: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11143: LD_INT 30
11145: PPUSH
11146: LD_VAR 0 3
11150: PPUSH
11151: LD_INT 1
11153: PPUSH
11154: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11158: LD_INT 37
11160: PPUSH
11161: LD_VAR 0 3
11165: PPUSH
11166: LD_INT 1
11168: PPUSH
11169: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11173: LD_INT 5
11175: PPUSH
11176: LD_VAR 0 3
11180: PPUSH
11181: LD_INT 1
11183: PPUSH
11184: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11188: LD_INT 66
11190: PPUSH
11191: LD_VAR 0 3
11195: PPUSH
11196: LD_INT 1
11198: PPUSH
11199: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11203: LD_INT 21
11205: PPUSH
11206: LD_VAR 0 3
11210: PPUSH
11211: LD_INT 1
11213: PPUSH
11214: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11218: LD_INT 22
11220: PPUSH
11221: LD_VAR 0 3
11225: PPUSH
11226: LD_INT 1
11228: PPUSH
11229: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11233: LD_INT 54
11235: PPUSH
11236: LD_VAR 0 3
11240: PPUSH
11241: LD_INT 1
11243: PPUSH
11244: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11248: LD_INT 0
11250: PPUSH
11251: LD_VAR 0 3
11255: PPUSH
11256: LD_INT 1
11258: PPUSH
11259: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11263: LD_INT 1
11265: PPUSH
11266: LD_VAR 0 3
11270: PPUSH
11271: LD_INT 1
11273: PPUSH
11274: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11278: LD_INT 2
11280: PPUSH
11281: LD_VAR 0 3
11285: PPUSH
11286: LD_INT 1
11288: PPUSH
11289: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11293: LD_INT 3
11295: PPUSH
11296: LD_VAR 0 3
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11308: LD_INT 4
11310: PPUSH
11311: LD_VAR 0 3
11315: PPUSH
11316: LD_INT 1
11318: PPUSH
11319: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11323: LD_INT 5
11325: PPUSH
11326: LD_VAR 0 3
11330: PPUSH
11331: LD_INT 1
11333: PPUSH
11334: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11338: LD_INT 6
11340: PPUSH
11341: LD_VAR 0 3
11345: PPUSH
11346: LD_INT 1
11348: PPUSH
11349: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11353: LD_INT 7
11355: PPUSH
11356: LD_VAR 0 3
11360: PPUSH
11361: LD_INT 1
11363: PPUSH
11364: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11368: LD_INT 8
11370: PPUSH
11371: LD_VAR 0 3
11375: PPUSH
11376: LD_INT 1
11378: PPUSH
11379: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11383: LD_INT 10
11385: PPUSH
11386: LD_VAR 0 3
11390: PPUSH
11391: LD_INT 1
11393: PPUSH
11394: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11398: LD_INT 11
11400: PPUSH
11401: LD_VAR 0 3
11405: PPUSH
11406: LD_INT 1
11408: PPUSH
11409: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11413: LD_INT 12
11415: PPUSH
11416: LD_VAR 0 3
11420: PPUSH
11421: LD_INT 1
11423: PPUSH
11424: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11428: LD_INT 13
11430: PPUSH
11431: LD_VAR 0 3
11435: PPUSH
11436: LD_INT 1
11438: PPUSH
11439: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11443: LD_INT 14
11445: PPUSH
11446: LD_VAR 0 3
11450: PPUSH
11451: LD_INT 1
11453: PPUSH
11454: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11458: LD_INT 15
11460: PPUSH
11461: LD_VAR 0 3
11465: PPUSH
11466: LD_INT 1
11468: PPUSH
11469: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11473: LD_INT 16
11475: PPUSH
11476: LD_VAR 0 3
11480: PPUSH
11481: LD_INT 1
11483: PPUSH
11484: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11488: LD_INT 17
11490: PPUSH
11491: LD_VAR 0 3
11495: PPUSH
11496: LD_INT 1
11498: PPUSH
11499: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11503: LD_INT 19
11505: PPUSH
11506: LD_VAR 0 3
11510: PPUSH
11511: LD_INT 1
11513: PPUSH
11514: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11518: LD_INT 20
11520: PPUSH
11521: LD_VAR 0 3
11525: PPUSH
11526: LD_INT 1
11528: PPUSH
11529: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11533: LD_INT 21
11535: PPUSH
11536: LD_VAR 0 3
11540: PPUSH
11541: LD_INT 1
11543: PPUSH
11544: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11548: LD_INT 23
11550: PPUSH
11551: LD_VAR 0 3
11555: PPUSH
11556: LD_INT 1
11558: PPUSH
11559: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11563: LD_INT 26
11565: PPUSH
11566: LD_VAR 0 3
11570: PPUSH
11571: LD_INT 1
11573: PPUSH
11574: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11578: LD_INT 27
11580: PPUSH
11581: LD_VAR 0 3
11585: PPUSH
11586: LD_INT 1
11588: PPUSH
11589: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11593: LD_INT 28
11595: PPUSH
11596: LD_VAR 0 3
11600: PPUSH
11601: LD_INT 1
11603: PPUSH
11604: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11608: LD_INT 29
11610: PPUSH
11611: LD_VAR 0 3
11615: PPUSH
11616: LD_INT 1
11618: PPUSH
11619: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11623: LD_INT 30
11625: PPUSH
11626: LD_VAR 0 3
11630: PPUSH
11631: LD_INT 1
11633: PPUSH
11634: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11638: LD_INT 31
11640: PPUSH
11641: LD_VAR 0 3
11645: PPUSH
11646: LD_INT 1
11648: PPUSH
11649: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11653: LD_INT 32
11655: PPUSH
11656: LD_VAR 0 3
11660: PPUSH
11661: LD_INT 1
11663: PPUSH
11664: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11668: LD_INT 36
11670: PPUSH
11671: LD_VAR 0 3
11675: PPUSH
11676: LD_INT 1
11678: PPUSH
11679: CALL_OW 324
// end ; 5 :
11683: GO 13814
11685: LD_INT 5
11687: DOUBLE
11688: EQUAL
11689: IFTRUE 11693
11691: GO 12806
11693: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11694: LD_INT 35
11696: PPUSH
11697: LD_VAR 0 3
11701: PPUSH
11702: LD_INT 1
11704: PPUSH
11705: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11709: LD_INT 45
11711: PPUSH
11712: LD_VAR 0 3
11716: PPUSH
11717: LD_INT 1
11719: PPUSH
11720: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11724: LD_INT 46
11726: PPUSH
11727: LD_VAR 0 3
11731: PPUSH
11732: LD_INT 1
11734: PPUSH
11735: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11739: LD_INT 47
11741: PPUSH
11742: LD_VAR 0 3
11746: PPUSH
11747: LD_INT 1
11749: PPUSH
11750: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11754: LD_INT 1
11756: PPUSH
11757: LD_VAR 0 3
11761: PPUSH
11762: LD_INT 1
11764: PPUSH
11765: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11769: LD_INT 2
11771: PPUSH
11772: LD_VAR 0 3
11776: PPUSH
11777: LD_INT 1
11779: PPUSH
11780: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11784: LD_INT 11
11786: PPUSH
11787: LD_VAR 0 3
11791: PPUSH
11792: LD_INT 1
11794: PPUSH
11795: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11799: LD_INT 20
11801: PPUSH
11802: LD_VAR 0 3
11806: PPUSH
11807: LD_INT 1
11809: PPUSH
11810: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11814: LD_INT 48
11816: PPUSH
11817: LD_VAR 0 3
11821: PPUSH
11822: LD_INT 1
11824: PPUSH
11825: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11829: LD_INT 49
11831: PPUSH
11832: LD_VAR 0 3
11836: PPUSH
11837: LD_INT 1
11839: PPUSH
11840: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11844: LD_INT 69
11846: PPUSH
11847: LD_VAR 0 3
11851: PPUSH
11852: LD_INT 1
11854: PPUSH
11855: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11859: LD_INT 39
11861: PPUSH
11862: LD_VAR 0 3
11866: PPUSH
11867: LD_INT 1
11869: PPUSH
11870: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11874: LD_INT 34
11876: PPUSH
11877: LD_VAR 0 3
11881: PPUSH
11882: LD_INT 1
11884: PPUSH
11885: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11889: LD_INT 42
11891: PPUSH
11892: LD_VAR 0 3
11896: PPUSH
11897: LD_INT 1
11899: PPUSH
11900: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11904: LD_INT 44
11906: PPUSH
11907: LD_VAR 0 3
11911: PPUSH
11912: LD_INT 1
11914: PPUSH
11915: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11919: LD_INT 41
11921: PPUSH
11922: LD_VAR 0 3
11926: PPUSH
11927: LD_INT 1
11929: PPUSH
11930: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11934: LD_INT 40
11936: PPUSH
11937: LD_VAR 0 3
11941: PPUSH
11942: LD_INT 1
11944: PPUSH
11945: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11949: LD_INT 43
11951: PPUSH
11952: LD_VAR 0 3
11956: PPUSH
11957: LD_INT 1
11959: PPUSH
11960: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11964: LD_INT 70
11966: PPUSH
11967: LD_VAR 0 3
11971: PPUSH
11972: LD_INT 1
11974: PPUSH
11975: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11979: LD_INT 51
11981: PPUSH
11982: LD_VAR 0 3
11986: PPUSH
11987: LD_INT 1
11989: PPUSH
11990: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11994: LD_INT 52
11996: PPUSH
11997: LD_VAR 0 3
12001: PPUSH
12002: LD_INT 1
12004: PPUSH
12005: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12009: LD_INT 6
12011: PPUSH
12012: LD_VAR 0 3
12016: PPUSH
12017: LD_INT 1
12019: PPUSH
12020: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12024: LD_INT 15
12026: PPUSH
12027: LD_VAR 0 3
12031: PPUSH
12032: LD_INT 1
12034: PPUSH
12035: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12039: LD_INT 7
12041: PPUSH
12042: LD_VAR 0 3
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12054: LD_INT 12
12056: PPUSH
12057: LD_VAR 0 3
12061: PPUSH
12062: LD_INT 1
12064: PPUSH
12065: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12069: LD_INT 17
12071: PPUSH
12072: LD_VAR 0 3
12076: PPUSH
12077: LD_INT 1
12079: PPUSH
12080: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12084: LD_INT 18
12086: PPUSH
12087: LD_VAR 0 3
12091: PPUSH
12092: LD_INT 1
12094: PPUSH
12095: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12099: LD_INT 60
12101: PPUSH
12102: LD_VAR 0 3
12106: PPUSH
12107: LD_INT 1
12109: PPUSH
12110: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12114: LD_INT 32
12116: PPUSH
12117: LD_VAR 0 3
12121: PPUSH
12122: LD_INT 1
12124: PPUSH
12125: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12129: LD_INT 9
12131: PPUSH
12132: LD_VAR 0 3
12136: PPUSH
12137: LD_INT 1
12139: PPUSH
12140: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12144: LD_INT 57
12146: PPUSH
12147: LD_VAR 0 3
12151: PPUSH
12152: LD_INT 1
12154: PPUSH
12155: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12159: LD_INT 30
12161: PPUSH
12162: LD_VAR 0 3
12166: PPUSH
12167: LD_INT 1
12169: PPUSH
12170: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12174: LD_INT 37
12176: PPUSH
12177: LD_VAR 0 3
12181: PPUSH
12182: LD_INT 1
12184: PPUSH
12185: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12189: LD_INT 63
12191: PPUSH
12192: LD_VAR 0 3
12196: PPUSH
12197: LD_INT 1
12199: PPUSH
12200: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12204: LD_INT 3
12206: PPUSH
12207: LD_VAR 0 3
12211: PPUSH
12212: LD_INT 1
12214: PPUSH
12215: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12219: LD_INT 4
12221: PPUSH
12222: LD_VAR 0 3
12226: PPUSH
12227: LD_INT 1
12229: PPUSH
12230: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12234: LD_INT 5
12236: PPUSH
12237: LD_VAR 0 3
12241: PPUSH
12242: LD_INT 1
12244: PPUSH
12245: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12249: LD_INT 66
12251: PPUSH
12252: LD_VAR 0 3
12256: PPUSH
12257: LD_INT 1
12259: PPUSH
12260: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12264: LD_INT 21
12266: PPUSH
12267: LD_VAR 0 3
12271: PPUSH
12272: LD_INT 1
12274: PPUSH
12275: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12279: LD_INT 22
12281: PPUSH
12282: LD_VAR 0 3
12286: PPUSH
12287: LD_INT 1
12289: PPUSH
12290: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12294: LD_INT 19
12296: PPUSH
12297: LD_VAR 0 3
12301: PPUSH
12302: LD_INT 1
12304: PPUSH
12305: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12309: LD_INT 54
12311: PPUSH
12312: LD_VAR 0 3
12316: PPUSH
12317: LD_INT 1
12319: PPUSH
12320: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12324: LD_INT 55
12326: PPUSH
12327: LD_VAR 0 3
12331: PPUSH
12332: LD_INT 1
12334: PPUSH
12335: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12339: LD_INT 0
12341: PPUSH
12342: LD_VAR 0 3
12346: PPUSH
12347: LD_INT 1
12349: PPUSH
12350: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12354: LD_INT 1
12356: PPUSH
12357: LD_VAR 0 3
12361: PPUSH
12362: LD_INT 1
12364: PPUSH
12365: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12369: LD_INT 2
12371: PPUSH
12372: LD_VAR 0 3
12376: PPUSH
12377: LD_INT 1
12379: PPUSH
12380: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12384: LD_INT 3
12386: PPUSH
12387: LD_VAR 0 3
12391: PPUSH
12392: LD_INT 1
12394: PPUSH
12395: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12399: LD_INT 4
12401: PPUSH
12402: LD_VAR 0 3
12406: PPUSH
12407: LD_INT 1
12409: PPUSH
12410: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12414: LD_INT 5
12416: PPUSH
12417: LD_VAR 0 3
12421: PPUSH
12422: LD_INT 1
12424: PPUSH
12425: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12429: LD_INT 6
12431: PPUSH
12432: LD_VAR 0 3
12436: PPUSH
12437: LD_INT 1
12439: PPUSH
12440: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12444: LD_INT 7
12446: PPUSH
12447: LD_VAR 0 3
12451: PPUSH
12452: LD_INT 1
12454: PPUSH
12455: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12459: LD_INT 8
12461: PPUSH
12462: LD_VAR 0 3
12466: PPUSH
12467: LD_INT 1
12469: PPUSH
12470: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12474: LD_INT 10
12476: PPUSH
12477: LD_VAR 0 3
12481: PPUSH
12482: LD_INT 1
12484: PPUSH
12485: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12489: LD_INT 11
12491: PPUSH
12492: LD_VAR 0 3
12496: PPUSH
12497: LD_INT 1
12499: PPUSH
12500: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12504: LD_INT 12
12506: PPUSH
12507: LD_VAR 0 3
12511: PPUSH
12512: LD_INT 1
12514: PPUSH
12515: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12519: LD_INT 13
12521: PPUSH
12522: LD_VAR 0 3
12526: PPUSH
12527: LD_INT 1
12529: PPUSH
12530: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12534: LD_INT 14
12536: PPUSH
12537: LD_VAR 0 3
12541: PPUSH
12542: LD_INT 1
12544: PPUSH
12545: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12549: LD_INT 15
12551: PPUSH
12552: LD_VAR 0 3
12556: PPUSH
12557: LD_INT 1
12559: PPUSH
12560: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12564: LD_INT 16
12566: PPUSH
12567: LD_VAR 0 3
12571: PPUSH
12572: LD_INT 1
12574: PPUSH
12575: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12579: LD_INT 17
12581: PPUSH
12582: LD_VAR 0 3
12586: PPUSH
12587: LD_INT 1
12589: PPUSH
12590: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12594: LD_INT 18
12596: PPUSH
12597: LD_VAR 0 3
12601: PPUSH
12602: LD_INT 1
12604: PPUSH
12605: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12609: LD_INT 19
12611: PPUSH
12612: LD_VAR 0 3
12616: PPUSH
12617: LD_INT 1
12619: PPUSH
12620: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12624: LD_INT 20
12626: PPUSH
12627: LD_VAR 0 3
12631: PPUSH
12632: LD_INT 1
12634: PPUSH
12635: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12639: LD_INT 21
12641: PPUSH
12642: LD_VAR 0 3
12646: PPUSH
12647: LD_INT 1
12649: PPUSH
12650: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12654: LD_INT 23
12656: PPUSH
12657: LD_VAR 0 3
12661: PPUSH
12662: LD_INT 1
12664: PPUSH
12665: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12669: LD_INT 26
12671: PPUSH
12672: LD_VAR 0 3
12676: PPUSH
12677: LD_INT 1
12679: PPUSH
12680: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12684: LD_INT 27
12686: PPUSH
12687: LD_VAR 0 3
12691: PPUSH
12692: LD_INT 1
12694: PPUSH
12695: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12699: LD_INT 28
12701: PPUSH
12702: LD_VAR 0 3
12706: PPUSH
12707: LD_INT 1
12709: PPUSH
12710: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12714: LD_INT 29
12716: PPUSH
12717: LD_VAR 0 3
12721: PPUSH
12722: LD_INT 1
12724: PPUSH
12725: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12729: LD_INT 30
12731: PPUSH
12732: LD_VAR 0 3
12736: PPUSH
12737: LD_INT 1
12739: PPUSH
12740: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12744: LD_INT 31
12746: PPUSH
12747: LD_VAR 0 3
12751: PPUSH
12752: LD_INT 1
12754: PPUSH
12755: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12759: LD_INT 32
12761: PPUSH
12762: LD_VAR 0 3
12766: PPUSH
12767: LD_INT 1
12769: PPUSH
12770: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12774: LD_INT 33
12776: PPUSH
12777: LD_VAR 0 3
12781: PPUSH
12782: LD_INT 1
12784: PPUSH
12785: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12789: LD_INT 36
12791: PPUSH
12792: LD_VAR 0 3
12796: PPUSH
12797: LD_INT 1
12799: PPUSH
12800: CALL_OW 324
// end ; 6 :
12804: GO 13814
12806: LD_INT 6
12808: DOUBLE
12809: EQUAL
12810: IFTRUE 12814
12812: GO 13739
12814: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12815: LD_INT 35
12817: PPUSH
12818: LD_VAR 0 3
12822: PPUSH
12823: LD_INT 1
12825: PPUSH
12826: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12830: LD_INT 45
12832: PPUSH
12833: LD_VAR 0 3
12837: PPUSH
12838: LD_INT 1
12840: PPUSH
12841: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12845: LD_INT 46
12847: PPUSH
12848: LD_VAR 0 3
12852: PPUSH
12853: LD_INT 1
12855: PPUSH
12856: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12860: LD_INT 47
12862: PPUSH
12863: LD_VAR 0 3
12867: PPUSH
12868: LD_INT 1
12870: PPUSH
12871: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12875: LD_INT 1
12877: PPUSH
12878: LD_VAR 0 3
12882: PPUSH
12883: LD_INT 1
12885: PPUSH
12886: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12890: LD_INT 2
12892: PPUSH
12893: LD_VAR 0 3
12897: PPUSH
12898: LD_INT 1
12900: PPUSH
12901: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12905: LD_INT 11
12907: PPUSH
12908: LD_VAR 0 3
12912: PPUSH
12913: LD_INT 1
12915: PPUSH
12916: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12920: LD_INT 20
12922: PPUSH
12923: LD_VAR 0 3
12927: PPUSH
12928: LD_INT 1
12930: PPUSH
12931: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12935: LD_INT 48
12937: PPUSH
12938: LD_VAR 0 3
12942: PPUSH
12943: LD_INT 1
12945: PPUSH
12946: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12950: LD_INT 49
12952: PPUSH
12953: LD_VAR 0 3
12957: PPUSH
12958: LD_INT 1
12960: PPUSH
12961: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12965: LD_INT 50
12967: PPUSH
12968: LD_VAR 0 3
12972: PPUSH
12973: LD_INT 1
12975: PPUSH
12976: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12980: LD_INT 69
12982: PPUSH
12983: LD_VAR 0 3
12987: PPUSH
12988: LD_INT 1
12990: PPUSH
12991: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12995: LD_INT 39
12997: PPUSH
12998: LD_VAR 0 3
13002: PPUSH
13003: LD_INT 1
13005: PPUSH
13006: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13010: LD_INT 34
13012: PPUSH
13013: LD_VAR 0 3
13017: PPUSH
13018: LD_INT 1
13020: PPUSH
13021: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13025: LD_INT 42
13027: PPUSH
13028: LD_VAR 0 3
13032: PPUSH
13033: LD_INT 1
13035: PPUSH
13036: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13040: LD_INT 44
13042: PPUSH
13043: LD_VAR 0 3
13047: PPUSH
13048: LD_INT 1
13050: PPUSH
13051: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13055: LD_INT 41
13057: PPUSH
13058: LD_VAR 0 3
13062: PPUSH
13063: LD_INT 1
13065: PPUSH
13066: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13070: LD_INT 13
13072: PPUSH
13073: LD_VAR 0 3
13077: PPUSH
13078: LD_INT 1
13080: PPUSH
13081: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13085: LD_INT 40
13087: PPUSH
13088: LD_VAR 0 3
13092: PPUSH
13093: LD_INT 1
13095: PPUSH
13096: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13100: LD_INT 43
13102: PPUSH
13103: LD_VAR 0 3
13107: PPUSH
13108: LD_INT 1
13110: PPUSH
13111: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13115: LD_INT 70
13117: PPUSH
13118: LD_VAR 0 3
13122: PPUSH
13123: LD_INT 1
13125: PPUSH
13126: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13130: LD_INT 23
13132: PPUSH
13133: LD_VAR 0 3
13137: PPUSH
13138: LD_INT 1
13140: PPUSH
13141: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13145: LD_INT 51
13147: PPUSH
13148: LD_VAR 0 3
13152: PPUSH
13153: LD_INT 1
13155: PPUSH
13156: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13160: LD_INT 52
13162: PPUSH
13163: LD_VAR 0 3
13167: PPUSH
13168: LD_INT 1
13170: PPUSH
13171: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13175: LD_INT 6
13177: PPUSH
13178: LD_VAR 0 3
13182: PPUSH
13183: LD_INT 1
13185: PPUSH
13186: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13190: LD_INT 15
13192: PPUSH
13193: LD_VAR 0 3
13197: PPUSH
13198: LD_INT 1
13200: PPUSH
13201: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13205: LD_INT 7
13207: PPUSH
13208: LD_VAR 0 3
13212: PPUSH
13213: LD_INT 1
13215: PPUSH
13216: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13220: LD_INT 12
13222: PPUSH
13223: LD_VAR 0 3
13227: PPUSH
13228: LD_INT 1
13230: PPUSH
13231: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13235: LD_INT 10
13237: PPUSH
13238: LD_VAR 0 3
13242: PPUSH
13243: LD_INT 1
13245: PPUSH
13246: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13250: LD_INT 17
13252: PPUSH
13253: LD_VAR 0 3
13257: PPUSH
13258: LD_INT 1
13260: PPUSH
13261: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13265: LD_INT 18
13267: PPUSH
13268: LD_VAR 0 3
13272: PPUSH
13273: LD_INT 1
13275: PPUSH
13276: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13280: LD_INT 60
13282: PPUSH
13283: LD_VAR 0 3
13287: PPUSH
13288: LD_INT 1
13290: PPUSH
13291: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13295: LD_INT 61
13297: PPUSH
13298: LD_VAR 0 3
13302: PPUSH
13303: LD_INT 1
13305: PPUSH
13306: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13310: LD_INT 32
13312: PPUSH
13313: LD_VAR 0 3
13317: PPUSH
13318: LD_INT 1
13320: PPUSH
13321: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13325: LD_INT 27
13327: PPUSH
13328: LD_VAR 0 3
13332: PPUSH
13333: LD_INT 1
13335: PPUSH
13336: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13340: LD_INT 36
13342: PPUSH
13343: LD_VAR 0 3
13347: PPUSH
13348: LD_INT 1
13350: PPUSH
13351: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13355: LD_INT 33
13357: PPUSH
13358: LD_VAR 0 3
13362: PPUSH
13363: LD_INT 1
13365: PPUSH
13366: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13370: LD_INT 9
13372: PPUSH
13373: LD_VAR 0 3
13377: PPUSH
13378: LD_INT 1
13380: PPUSH
13381: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13385: LD_INT 38
13387: PPUSH
13388: LD_VAR 0 3
13392: PPUSH
13393: LD_INT 1
13395: PPUSH
13396: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13400: LD_INT 57
13402: PPUSH
13403: LD_VAR 0 3
13407: PPUSH
13408: LD_INT 1
13410: PPUSH
13411: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13415: LD_INT 58
13417: PPUSH
13418: LD_VAR 0 3
13422: PPUSH
13423: LD_INT 1
13425: PPUSH
13426: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13430: LD_INT 28
13432: PPUSH
13433: LD_VAR 0 3
13437: PPUSH
13438: LD_INT 1
13440: PPUSH
13441: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13445: LD_INT 29
13447: PPUSH
13448: LD_VAR 0 3
13452: PPUSH
13453: LD_INT 1
13455: PPUSH
13456: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13460: LD_INT 30
13462: PPUSH
13463: LD_VAR 0 3
13467: PPUSH
13468: LD_INT 1
13470: PPUSH
13471: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13475: LD_INT 37
13477: PPUSH
13478: LD_VAR 0 3
13482: PPUSH
13483: LD_INT 1
13485: PPUSH
13486: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13490: LD_INT 63
13492: PPUSH
13493: LD_VAR 0 3
13497: PPUSH
13498: LD_INT 1
13500: PPUSH
13501: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13505: LD_INT 64
13507: PPUSH
13508: LD_VAR 0 3
13512: PPUSH
13513: LD_INT 1
13515: PPUSH
13516: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13520: LD_INT 3
13522: PPUSH
13523: LD_VAR 0 3
13527: PPUSH
13528: LD_INT 1
13530: PPUSH
13531: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13535: LD_INT 4
13537: PPUSH
13538: LD_VAR 0 3
13542: PPUSH
13543: LD_INT 1
13545: PPUSH
13546: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13550: LD_INT 5
13552: PPUSH
13553: LD_VAR 0 3
13557: PPUSH
13558: LD_INT 1
13560: PPUSH
13561: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13565: LD_INT 8
13567: PPUSH
13568: LD_VAR 0 3
13572: PPUSH
13573: LD_INT 1
13575: PPUSH
13576: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13580: LD_INT 66
13582: PPUSH
13583: LD_VAR 0 3
13587: PPUSH
13588: LD_INT 1
13590: PPUSH
13591: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13595: LD_INT 67
13597: PPUSH
13598: LD_VAR 0 3
13602: PPUSH
13603: LD_INT 1
13605: PPUSH
13606: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13610: LD_INT 21
13612: PPUSH
13613: LD_VAR 0 3
13617: PPUSH
13618: LD_INT 1
13620: PPUSH
13621: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13625: LD_INT 22
13627: PPUSH
13628: LD_VAR 0 3
13632: PPUSH
13633: LD_INT 1
13635: PPUSH
13636: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13640: LD_INT 19
13642: PPUSH
13643: LD_VAR 0 3
13647: PPUSH
13648: LD_INT 1
13650: PPUSH
13651: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13655: LD_INT 26
13657: PPUSH
13658: LD_VAR 0 3
13662: PPUSH
13663: LD_INT 1
13665: PPUSH
13666: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13670: LD_INT 54
13672: PPUSH
13673: LD_VAR 0 3
13677: PPUSH
13678: LD_INT 1
13680: PPUSH
13681: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13685: LD_INT 55
13687: PPUSH
13688: LD_VAR 0 3
13692: PPUSH
13693: LD_INT 1
13695: PPUSH
13696: CALL_OW 322
// for i = 0 to 39 do
13700: LD_ADDR_VAR 0 4
13704: PUSH
13705: DOUBLE
13706: LD_INT 0
13708: DEC
13709: ST_TO_ADDR
13710: LD_INT 39
13712: PUSH
13713: FOR_TO
13714: IFFALSE 13735
// SetRestrict ( i , side , true ) ;
13716: LD_VAR 0 4
13720: PPUSH
13721: LD_VAR 0 3
13725: PPUSH
13726: LD_INT 1
13728: PPUSH
13729: CALL_OW 324
13733: GO 13713
13735: POP
13736: POP
// end ; else
13737: GO 13814
13739: POP
// begin for i = 1 to 73 do
13740: LD_ADDR_VAR 0 4
13744: PUSH
13745: DOUBLE
13746: LD_INT 1
13748: DEC
13749: ST_TO_ADDR
13750: LD_INT 73
13752: PUSH
13753: FOR_TO
13754: IFFALSE 13775
// SetTech ( i , side , state_enabled ) ;
13756: LD_VAR 0 4
13760: PPUSH
13761: LD_VAR 0 3
13765: PPUSH
13766: LD_INT 1
13768: PPUSH
13769: CALL_OW 322
13773: GO 13753
13775: POP
13776: POP
// for i = 0 to 39 do
13777: LD_ADDR_VAR 0 4
13781: PUSH
13782: DOUBLE
13783: LD_INT 0
13785: DEC
13786: ST_TO_ADDR
13787: LD_INT 39
13789: PUSH
13790: FOR_TO
13791: IFFALSE 13812
// SetRestrict ( i , side , true ) ;
13793: LD_VAR 0 4
13797: PPUSH
13798: LD_VAR 0 3
13802: PPUSH
13803: LD_INT 1
13805: PPUSH
13806: CALL_OW 324
13810: GO 13790
13812: POP
13813: POP
// end ; end ; end ;
13814: GO 9819
13816: POP
13817: POP
// end ; end_of_file
13818: LD_VAR 0 2
13822: RET
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
13823: LD_INT 0
13825: PPUSH
13826: PPUSH
13827: PPUSH
// BuildUpTime_Delay = 0 ;
13828: LD_ADDR_EXP 57
13832: PUSH
13833: LD_INT 0
13835: ST_TO_ADDR
// if not def_builduptime then
13836: LD_EXP 14
13840: NOT
13841: IFFALSE 13845
// exit ;
13843: GO 14028
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
13845: LD_ADDR_EXP 57
13849: PUSH
13850: LD_INT 8400
13852: PUSH
13853: LD_INT 2100
13855: PUSH
13856: LD_EXP 14
13860: MUL
13861: PLUS
13862: ST_TO_ADDR
// BuildUpTimeActive := true ;
13863: LD_ADDR_EXP 56
13867: PUSH
13868: LD_INT 1
13870: ST_TO_ADDR
// for i := 1 to 8 do
13871: LD_ADDR_VAR 0 2
13875: PUSH
13876: DOUBLE
13877: LD_INT 1
13879: DEC
13880: ST_TO_ADDR
13881: LD_INT 8
13883: PUSH
13884: FOR_TO
13885: IFFALSE 14026
// if Side_Positions [ i ] then
13887: LD_EXP 34
13891: PUSH
13892: LD_VAR 0 2
13896: ARRAY
13897: IFFALSE 14024
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
13899: LD_EXP 55
13903: PUSH
13904: LD_EXP 34
13908: PUSH
13909: LD_VAR 0 2
13913: ARRAY
13914: ARRAY
13915: PPUSH
13916: LD_INT 5
13918: PPUSH
13919: CALL_OW 424
// for j := 1 to 8 do
13923: LD_ADDR_VAR 0 3
13927: PUSH
13928: DOUBLE
13929: LD_INT 1
13931: DEC
13932: ST_TO_ADDR
13933: LD_INT 8
13935: PUSH
13936: FOR_TO
13937: IFFALSE 14022
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13939: LD_EXP 34
13943: PUSH
13944: LD_VAR 0 3
13948: ARRAY
13949: PUSH
13950: LD_EXP 31
13954: PUSH
13955: LD_VAR 0 2
13959: ARRAY
13960: PUSH
13961: LD_EXP 31
13965: PUSH
13966: LD_VAR 0 3
13970: ARRAY
13971: NONEQUAL
13972: PUSH
13973: LD_EXP 36
13977: NOT
13978: PUSH
13979: LD_VAR 0 2
13983: PUSH
13984: LD_VAR 0 3
13988: NONEQUAL
13989: AND
13990: OR
13991: AND
13992: IFFALSE 14020
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13994: LD_VAR 0 3
13998: PPUSH
13999: LD_EXP 55
14003: PUSH
14004: LD_EXP 34
14008: PUSH
14009: LD_VAR 0 2
14013: ARRAY
14014: ARRAY
14015: PPUSH
14016: CALL_OW 333
14020: GO 13936
14022: POP
14023: POP
// end ;
14024: GO 13884
14026: POP
14027: POP
// end ;
14028: LD_VAR 0 1
14032: RET
// export function EndBuildUp ; var i , j ; begin
14033: LD_INT 0
14035: PPUSH
14036: PPUSH
14037: PPUSH
// BuildUpTimeActive := false ;
14038: LD_ADDR_EXP 56
14042: PUSH
14043: LD_INT 0
14045: ST_TO_ADDR
// for i := 1 to 8 do
14046: LD_ADDR_VAR 0 2
14050: PUSH
14051: DOUBLE
14052: LD_INT 1
14054: DEC
14055: ST_TO_ADDR
14056: LD_INT 8
14058: PUSH
14059: FOR_TO
14060: IFFALSE 14201
// if Side_Positions [ i ] then
14062: LD_EXP 34
14066: PUSH
14067: LD_VAR 0 2
14071: ARRAY
14072: IFFALSE 14199
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14074: LD_EXP 55
14078: PUSH
14079: LD_EXP 34
14083: PUSH
14084: LD_VAR 0 2
14088: ARRAY
14089: ARRAY
14090: PPUSH
14091: LD_INT 0
14093: PPUSH
14094: CALL_OW 424
// for j := 1 to 8 do
14098: LD_ADDR_VAR 0 3
14102: PUSH
14103: DOUBLE
14104: LD_INT 1
14106: DEC
14107: ST_TO_ADDR
14108: LD_INT 8
14110: PUSH
14111: FOR_TO
14112: IFFALSE 14197
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14114: LD_EXP 34
14118: PUSH
14119: LD_VAR 0 3
14123: ARRAY
14124: PUSH
14125: LD_EXP 31
14129: PUSH
14130: LD_VAR 0 2
14134: ARRAY
14135: PUSH
14136: LD_EXP 31
14140: PUSH
14141: LD_VAR 0 3
14145: ARRAY
14146: NONEQUAL
14147: PUSH
14148: LD_EXP 36
14152: NOT
14153: PUSH
14154: LD_VAR 0 2
14158: PUSH
14159: LD_VAR 0 3
14163: NONEQUAL
14164: AND
14165: OR
14166: AND
14167: IFFALSE 14195
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14169: LD_VAR 0 3
14173: PPUSH
14174: LD_EXP 55
14178: PUSH
14179: LD_EXP 34
14183: PUSH
14184: LD_VAR 0 2
14188: ARRAY
14189: ARRAY
14190: PPUSH
14191: CALL_OW 334
14195: GO 14111
14197: POP
14198: POP
// end ;
14199: GO 14059
14201: POP
14202: POP
// end ;
14203: LD_VAR 0 1
14207: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14208: LD_EXP 56
14212: IFFALSE 14387
14214: GO 14216
14216: DISABLE
14217: LD_INT 0
14219: PPUSH
14220: PPUSH
// begin for i := 1 to 8 do
14221: LD_ADDR_VAR 0 1
14225: PUSH
14226: DOUBLE
14227: LD_INT 1
14229: DEC
14230: ST_TO_ADDR
14231: LD_INT 8
14233: PUSH
14234: FOR_TO
14235: IFFALSE 14384
// if Side_Positions [ i ] then
14237: LD_EXP 34
14241: PUSH
14242: LD_VAR 0 1
14246: ARRAY
14247: IFFALSE 14382
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14249: LD_ADDR_VAR 0 2
14253: PUSH
14254: LD_EXP 55
14258: PUSH
14259: LD_EXP 34
14263: PUSH
14264: LD_VAR 0 1
14268: ARRAY
14269: ARRAY
14270: PPUSH
14271: LD_INT 2
14273: PUSH
14274: LD_INT 21
14276: PUSH
14277: LD_INT 1
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PUSH
14284: LD_INT 21
14286: PUSH
14287: LD_INT 2
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 22
14301: PUSH
14302: LD_OWVAR 2
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PPUSH
14315: CALL_OW 70
14319: PUSH
14320: FOR_IN
14321: IFFALSE 14380
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14323: LD_EXP 31
14327: PUSH
14328: LD_VAR 0 1
14332: ARRAY
14333: PUSH
14334: LD_EXP 31
14338: PUSH
14339: LD_OWVAR 2
14343: ARRAY
14344: NONEQUAL
14345: PUSH
14346: LD_EXP 36
14350: NOT
14351: PUSH
14352: LD_VAR 0 1
14356: PUSH
14357: LD_OWVAR 2
14361: NONEQUAL
14362: AND
14363: OR
14364: IFFALSE 14378
// ComMoveToArea ( un , BuildUpEscape ) ;
14366: LD_VAR 0 2
14370: PPUSH
14371: LD_INT 18
14373: PPUSH
14374: CALL_OW 113
14378: GO 14320
14380: POP
14381: POP
14382: GO 14234
14384: POP
14385: POP
// enable ;
14386: ENABLE
// end ;
14387: PPOPN 2
14389: END
// every 0 0$1 trigger def_builduptime do
14390: LD_EXP 14
14394: IFFALSE 14420
14396: GO 14398
14398: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14399: LD_INT 8400
14401: PUSH
14402: LD_EXP 14
14406: PUSH
14407: LD_INT 2100
14409: MUL
14410: PLUS
14411: PPUSH
14412: CALL_OW 67
// EndBuildUp ;
14416: CALL 14033 0 0
// end ; end_of_file
14420: END
// var respawn , inqueue ; export function init_respawning ; begin
14421: LD_INT 0
14423: PPUSH
// respawn := Rand ( 1 , 8 ) ;
14424: LD_ADDR_LOC 18
14428: PUSH
14429: LD_INT 1
14431: PPUSH
14432: LD_INT 8
14434: PPUSH
14435: CALL_OW 12
14439: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14440: LD_ADDR_LOC 19
14444: PUSH
14445: LD_INT 0
14447: PUSH
14448: LD_INT 0
14450: PUSH
14451: LD_INT 0
14453: PUSH
14454: LD_INT 0
14456: PUSH
14457: LD_INT 0
14459: PUSH
14460: LD_INT 0
14462: PUSH
14463: LD_INT 0
14465: PUSH
14466: LD_INT 0
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: ST_TO_ADDR
// end ;
14479: LD_VAR 0 1
14483: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14484: GO 14486
14486: DISABLE
14487: LD_INT 0
14489: PPUSH
14490: PPUSH
14491: PPUSH
// begin if respawning_time_max = 0 then
14492: LD_EXP 28
14496: PUSH
14497: LD_INT 0
14499: EQUAL
14500: IFFALSE 14504
// exit ;
14502: GO 14912
// if respawn = 8 then
14504: LD_LOC 18
14508: PUSH
14509: LD_INT 8
14511: EQUAL
14512: IFFALSE 14524
// respawn := 1 else
14514: LD_ADDR_LOC 18
14518: PUSH
14519: LD_INT 1
14521: ST_TO_ADDR
14522: GO 14538
// respawn := respawn + 1 ;
14524: LD_ADDR_LOC 18
14528: PUSH
14529: LD_LOC 18
14533: PUSH
14534: LD_INT 1
14536: PLUS
14537: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14538: LD_EXP 34
14542: PUSH
14543: LD_LOC 18
14547: ARRAY
14548: PUSH
14549: LD_LOC 19
14553: PUSH
14554: LD_LOC 18
14558: ARRAY
14559: NOT
14560: AND
14561: IFFALSE 14911
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14563: LD_ADDR_VAR 0 1
14567: PUSH
14568: LD_INT 21
14570: PUSH
14571: LD_INT 1
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: PUSH
14578: LD_INT 22
14580: PUSH
14581: LD_LOC 18
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: PUSH
14590: LD_INT 3
14592: PUSH
14593: LD_INT 23
14595: PUSH
14596: LD_INT 0
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: PPUSH
14609: CALL_OW 69
14613: ST_TO_ADDR
// if n < number_of_people then
14614: LD_VAR 0 1
14618: PUSH
14619: LD_EXP 19
14623: LESS
14624: IFFALSE 14908
// begin aktresp := respawn ;
14626: LD_ADDR_VAR 0 3
14630: PUSH
14631: LD_LOC 18
14635: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14636: LD_ADDR_LOC 19
14640: PUSH
14641: LD_LOC 19
14645: PPUSH
14646: LD_VAR 0 3
14650: PPUSH
14651: LD_INT 1
14653: PPUSH
14654: CALL_OW 1
14658: ST_TO_ADDR
// enable ;
14659: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14660: LD_EXP 27
14664: PPUSH
14665: LD_EXP 28
14669: PPUSH
14670: CALL_OW 12
14674: PPUSH
14675: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14679: LD_ADDR_LOC 19
14683: PUSH
14684: LD_LOC 19
14688: PPUSH
14689: LD_VAR 0 3
14693: PPUSH
14694: LD_INT 0
14696: PPUSH
14697: CALL_OW 1
14701: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14702: LD_ADDR_VAR 0 2
14706: PUSH
14707: LD_INT 21
14709: PUSH
14710: LD_INT 3
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: LD_INT 2
14719: PUSH
14720: LD_INT 30
14722: PUSH
14723: LD_INT 0
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: LD_INT 30
14732: PUSH
14733: LD_INT 1
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 50
14747: PUSH
14748: EMPTY
14749: LIST
14750: PUSH
14751: LD_INT 22
14753: PUSH
14754: LD_VAR 0 3
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 69
14773: ST_TO_ADDR
// if dep = 0 then
14774: LD_VAR 0 2
14778: PUSH
14779: LD_INT 0
14781: EQUAL
14782: IFFALSE 14786
// exit ;
14784: GO 14912
// hc_name :=  ;
14786: LD_ADDR_OWVAR 26
14790: PUSH
14791: LD_STRING 
14793: ST_TO_ADDR
// hc_importance := 0 ;
14794: LD_ADDR_OWVAR 32
14798: PUSH
14799: LD_INT 0
14801: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14802: LD_INT 0
14804: PPUSH
14805: LD_INT 0
14807: PPUSH
14808: LD_EXP 20
14812: PUSH
14813: LD_INT 2
14815: DIV
14816: PPUSH
14817: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14821: LD_ADDR_OWVAR 21
14825: PUSH
14826: LD_EXP 35
14830: PUSH
14831: LD_VAR 0 3
14835: ARRAY
14836: ST_TO_ADDR
// uc_side := aktresp ;
14837: LD_ADDR_OWVAR 20
14841: PUSH
14842: LD_VAR 0 3
14846: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14847: LD_ADDR_VAR 0 2
14851: PUSH
14852: LD_VAR 0 2
14856: PUSH
14857: LD_INT 1
14859: PPUSH
14860: LD_VAR 0 2
14864: PPUSH
14865: CALL_OW 12
14869: ARRAY
14870: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14871: CALL_OW 44
14875: PPUSH
14876: LD_VAR 0 2
14880: PPUSH
14881: CALL_OW 250
14885: PPUSH
14886: LD_VAR 0 2
14890: PPUSH
14891: CALL_OW 251
14895: PPUSH
14896: LD_INT 7
14898: PPUSH
14899: LD_INT 1
14901: PPUSH
14902: CALL_OW 50
// end else
14906: GO 14909
// enable ;
14908: ENABLE
// end else
14909: GO 14912
// enable ;
14911: ENABLE
// end ;
14912: PPOPN 3
14914: END
