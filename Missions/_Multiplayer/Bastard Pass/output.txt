// export def_main_base , def_secondary_base , def_defence_level , def_amount_of_people , def_initial_level , def_main_deposits , def_secondary_deposits , def_siberite_detection , def_starting_resources , def_shipments_density , def_people_arrivals , def_people_loyality , def_people_info , def_morale_flags , def_siberite_bomb , def_amount_of_apemen , def_builduptime , def_win_rules , def_people_respawning ; export is_depot , number_of_people , number_of_pplants , are_mines , is_lab , is_fact , is_arm , are_breastworks , deposits , initial_level , starting_crates , starting_resources , shipments_density , max_arriving_times , text_info , fog_info , def_bf_params , amount_of_apemen , siberite_bomb_Delay ; export Positions , Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export second_side , third_nation ; export start_def , depots_def , breastworks_def , labs_def , factories_def , armories_def , pplants_def , deposits_def ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i ; var u1 , u2 , pom_tab , p1 , p2 , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
  73: PPUSH
  74: PPUSH
  75: PPUSH
  76: PPUSH
  77: PPUSH
  78: PPUSH
  79: PPUSH
  80: PPUSH
  81: PPUSH
  82: PPUSH
  83: PPUSH
// if MultiPlayer then
  84: LD_OWVAR 4
  88: IFFALSE 162
// begin Game_Type = mp_game_type ;
  90: LD_ADDR_EXP 66
  94: PUSH
  95: LD_OWVAR 6
  99: ST_TO_ADDR
// Your_Side = mp_player_side ;
 100: LD_ADDR_OWVAR 2
 104: PUSH
 105: LD_OWVAR 7
 109: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_OWVAR 17
 119: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 120: LD_ADDR_EXP 40
 124: PUSH
 125: LD_OWVAR 15
 129: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 130: LD_ADDR_EXP 44
 134: PUSH
 135: LD_OWVAR 16
 139: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 140: LD_ADDR_EXP 42
 144: PUSH
 145: CALL 0 0 0
 149: ST_TO_ADDR
// Teams = mp_teams ;
 150: LD_ADDR_EXP 41
 154: PUSH
 155: LD_OWVAR 12
 159: ST_TO_ADDR
// end else
 160: GO 333
// begin Your_Side = 3 ;
 162: LD_ADDR_OWVAR 2
 166: PUSH
 167: LD_INT 3
 169: ST_TO_ADDR
// Side_Positions = [ 0 , 0 , 2 , 0 , 1 , 0 , 0 , 0 ] ;
 170: LD_ADDR_EXP 43
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 2
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 1
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: LD_INT 0
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: LIST
 208: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 209: LD_ADDR_EXP 40
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: LD_INT 0
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: LIST
 246: LIST
 247: ST_TO_ADDR
// Side_Nations = [ 0 , 0 , 3 , 0 , 2 , 0 , 0 , 0 ] ;
 248: LD_ADDR_EXP 44
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 3
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 2
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: LIST
 286: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 287: LD_ADDR_EXP 42
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: ST_TO_ADDR
// Teams = [ ] ;
 326: LD_ADDR_EXP 41
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ; for i := 1 to 8 do
 333: LD_ADDR_VAR 0 8
 337: PUSH
 338: DOUBLE
 339: LD_INT 1
 341: DEC
 342: ST_TO_ADDR
 343: LD_INT 8
 345: PUSH
 346: FOR_TO
 347: IFFALSE 434
// if Multiplayer_GetPlayerIsSpec ( i ) then
 349: LD_VAR 0 8
 353: PPUSH
 354: CALL_OW 530
 358: IFFALSE 432
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 360: LD_ADDR_EXP 43
 364: PUSH
 365: LD_EXP 43
 369: PPUSH
 370: LD_VAR 0 8
 374: PPUSH
 375: LD_INT 0
 377: PPUSH
 378: CALL_OW 1
 382: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 383: LD_ADDR_EXP 41
 387: PUSH
 388: LD_EXP 41
 392: PPUSH
 393: LD_EXP 40
 397: PUSH
 398: LD_VAR 0 8
 402: ARRAY
 403: PPUSH
 404: LD_EXP 41
 408: PUSH
 409: LD_EXP 40
 413: PUSH
 414: LD_VAR 0 8
 418: ARRAY
 419: ARRAY
 420: PUSH
 421: LD_VAR 0 8
 425: DIFF
 426: PPUSH
 427: CALL_OW 1
 431: ST_TO_ADDR
// end ;
 432: GO 346
 434: POP
 435: POP
// Position_Sides := [ 0 , 0 ] ;
 436: LD_ADDR_EXP 46
 440: PUSH
 441: LD_INT 0
 443: PUSH
 444: LD_INT 0
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// for i := 1 to 8 do
 451: LD_ADDR_VAR 0 8
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_INT 8
 463: PUSH
 464: FOR_TO
 465: IFFALSE 512
// if Side_Positions [ i ] then
 467: LD_EXP 43
 471: PUSH
 472: LD_VAR 0 8
 476: ARRAY
 477: IFFALSE 510
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 479: LD_ADDR_EXP 46
 483: PUSH
 484: LD_EXP 46
 488: PPUSH
 489: LD_EXP 43
 493: PUSH
 494: LD_VAR 0 8
 498: ARRAY
 499: PPUSH
 500: LD_VAR 0 8
 504: PPUSH
 505: CALL_OW 1
 509: ST_TO_ADDR
 510: GO 464
 512: POP
 513: POP
// Team_Game := Side_Teams [ your_side ] ;
 514: LD_ADDR_EXP 45
 518: PUSH
 519: LD_EXP 40
 523: PUSH
 524: LD_OWVAR 2
 528: ARRAY
 529: ST_TO_ADDR
// p1 := 0 ;
 530: LD_ADDR_VAR 0 12
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// p2 := 0 ;
 538: LD_ADDR_VAR 0 13
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// for i := 1 to 8 do
 546: LD_ADDR_VAR 0 8
 550: PUSH
 551: DOUBLE
 552: LD_INT 1
 554: DEC
 555: ST_TO_ADDR
 556: LD_INT 8
 558: PUSH
 559: FOR_TO
 560: IFFALSE 618
// if Side_Positions [ i ] = 1 then
 562: LD_EXP 43
 566: PUSH
 567: LD_VAR 0 8
 571: ARRAY
 572: PUSH
 573: LD_INT 1
 575: EQUAL
 576: IFFALSE 590
// p1 := i else
 578: LD_ADDR_VAR 0 12
 582: PUSH
 583: LD_VAR 0 8
 587: ST_TO_ADDR
 588: GO 616
// if Side_Positions [ i ] = 2 then
 590: LD_EXP 43
 594: PUSH
 595: LD_VAR 0 8
 599: ARRAY
 600: PUSH
 601: LD_INT 2
 603: EQUAL
 604: IFFALSE 616
// p2 := i ;
 606: LD_ADDR_VAR 0 13
 610: PUSH
 611: LD_VAR 0 8
 615: ST_TO_ADDR
 616: GO 559
 618: POP
 619: POP
// Positions := [ p1 , p2 ] ;
 620: LD_ADDR_EXP 39
 624: PUSH
 625: LD_VAR 0 12
 629: PUSH
 630: LD_VAR 0 13
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: ST_TO_ADDR
// if MultiPlayer then
 639: LD_OWVAR 4
 643: IFFALSE 897
// begin def_main_base = GetMultiplayerSetting ( 0 ) ;
 645: LD_ADDR_EXP 1
 649: PUSH
 650: LD_INT 0
 652: PPUSH
 653: CALL_OW 426
 657: ST_TO_ADDR
// def_secondary_base = GetMultiplayerSetting ( 1 ) ;
 658: LD_ADDR_EXP 2
 662: PUSH
 663: LD_INT 1
 665: PPUSH
 666: CALL_OW 426
 670: ST_TO_ADDR
// def_defence_level = GetMultiplayerSetting ( 2 ) ;
 671: LD_ADDR_EXP 3
 675: PUSH
 676: LD_INT 2
 678: PPUSH
 679: CALL_OW 426
 683: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 3 ) ;
 684: LD_ADDR_EXP 4
 688: PUSH
 689: LD_INT 3
 691: PPUSH
 692: CALL_OW 426
 696: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 4 ) ;
 697: LD_ADDR_EXP 5
 701: PUSH
 702: LD_INT 4
 704: PPUSH
 705: CALL_OW 426
 709: ST_TO_ADDR
// def_main_deposits = GetMultiplayerSetting ( 5 ) ;
 710: LD_ADDR_EXP 6
 714: PUSH
 715: LD_INT 5
 717: PPUSH
 718: CALL_OW 426
 722: ST_TO_ADDR
// def_secondary_deposits = GetMultiplayerSetting ( 6 ) ;
 723: LD_ADDR_EXP 7
 727: PUSH
 728: LD_INT 6
 730: PPUSH
 731: CALL_OW 426
 735: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 7 ) ;
 736: LD_ADDR_EXP 8
 740: PUSH
 741: LD_INT 7
 743: PPUSH
 744: CALL_OW 426
 748: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 8 ) ;
 749: LD_ADDR_EXP 9
 753: PUSH
 754: LD_INT 8
 756: PPUSH
 757: CALL_OW 426
 761: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 9 ) ;
 762: LD_ADDR_EXP 10
 766: PUSH
 767: LD_INT 9
 769: PPUSH
 770: CALL_OW 426
 774: ST_TO_ADDR
// def_people_arrivals = GetMultiplayerSetting ( 10 ) ;
 775: LD_ADDR_EXP 11
 779: PUSH
 780: LD_INT 10
 782: PPUSH
 783: CALL_OW 426
 787: ST_TO_ADDR
// def_people_loyality = GetMultiplayerSetting ( 11 ) ;
 788: LD_ADDR_EXP 12
 792: PUSH
 793: LD_INT 11
 795: PPUSH
 796: CALL_OW 426
 800: ST_TO_ADDR
// def_people_info = GetMultiplayerSetting ( 12 ) ;
 801: LD_ADDR_EXP 13
 805: PUSH
 806: LD_INT 12
 808: PPUSH
 809: CALL_OW 426
 813: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 15 ) ;
 814: LD_ADDR_EXP 14
 818: PUSH
 819: LD_INT 15
 821: PPUSH
 822: CALL_OW 426
 826: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 16 ) ;
 827: LD_ADDR_EXP 15
 831: PUSH
 832: LD_INT 16
 834: PPUSH
 835: CALL_OW 426
 839: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 17 ) ;
 840: LD_ADDR_EXP 16
 844: PUSH
 845: LD_INT 17
 847: PPUSH
 848: CALL_OW 426
 852: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 853: LD_ADDR_EXP 17
 857: PUSH
 858: LD_INT 20
 860: PPUSH
 861: CALL_OW 426
 865: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 866: LD_ADDR_VAR 0 14
 870: PUSH
 871: LD_INT 22
 873: PPUSH
 874: CALL_OW 426
 878: ST_TO_ADDR
// def_people_respawning = 0 ;
 879: LD_ADDR_EXP 19
 883: PUSH
 884: LD_INT 0
 886: ST_TO_ADDR
// def_win_rules = 0 ;
 887: LD_ADDR_EXP 18
 891: PUSH
 892: LD_INT 0
 894: ST_TO_ADDR
// end else
 895: GO 1069
// begin randomize ;
 897: CALL_OW 10
// def_main_base = 4 ;
 901: LD_ADDR_EXP 1
 905: PUSH
 906: LD_INT 4
 908: ST_TO_ADDR
// def_secondary_base = 2 ;
 909: LD_ADDR_EXP 2
 913: PUSH
 914: LD_INT 2
 916: ST_TO_ADDR
// def_defence_level = 1 ;
 917: LD_ADDR_EXP 3
 921: PUSH
 922: LD_INT 1
 924: ST_TO_ADDR
// def_amount_of_people = 2 ;
 925: LD_ADDR_EXP 4
 929: PUSH
 930: LD_INT 2
 932: ST_TO_ADDR
// def_initial_level = 1 ;
 933: LD_ADDR_EXP 5
 937: PUSH
 938: LD_INT 1
 940: ST_TO_ADDR
// def_main_deposits = 2 ;
 941: LD_ADDR_EXP 6
 945: PUSH
 946: LD_INT 2
 948: ST_TO_ADDR
// def_secondary_deposits = 1 ;
 949: LD_ADDR_EXP 7
 953: PUSH
 954: LD_INT 1
 956: ST_TO_ADDR
// def_siberite_detection = 1 ;
 957: LD_ADDR_EXP 8
 961: PUSH
 962: LD_INT 1
 964: ST_TO_ADDR
// def_starting_resources = 2 ;
 965: LD_ADDR_EXP 9
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// def_shipments_density = 1 ;
 973: LD_ADDR_EXP 10
 977: PUSH
 978: LD_INT 1
 980: ST_TO_ADDR
// def_people_arrivals = 3 ;
 981: LD_ADDR_EXP 11
 985: PUSH
 986: LD_INT 3
 988: ST_TO_ADDR
// def_people_loyality = 1 ;
 989: LD_ADDR_EXP 12
 993: PUSH
 994: LD_INT 1
 996: ST_TO_ADDR
// def_people_info = 1 ;
 997: LD_ADDR_EXP 13
1001: PUSH
1002: LD_INT 1
1004: ST_TO_ADDR
// def_morale_flags = 2 ;
1005: LD_ADDR_EXP 14
1009: PUSH
1010: LD_INT 2
1012: ST_TO_ADDR
// def_siberite_bomb = 1 ;
1013: LD_ADDR_EXP 15
1017: PUSH
1018: LD_INT 1
1020: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
1021: LD_ADDR_EXP 16
1025: PUSH
1026: LD_INT 3
1028: ST_TO_ADDR
// def_builduptime = 1 ;
1029: LD_ADDR_EXP 17
1033: PUSH
1034: LD_INT 1
1036: ST_TO_ADDR
// def_game_rules = 0 ;
1037: LD_ADDR_EXP 67
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// tech_level = 4 ;
1045: LD_ADDR_VAR 0 14
1049: PUSH
1050: LD_INT 4
1052: ST_TO_ADDR
// def_people_respawning = 0 ;
1053: LD_ADDR_EXP 19
1057: PUSH
1058: LD_INT 0
1060: ST_TO_ADDR
// def_win_rules = 0 ;
1061: LD_ADDR_EXP 18
1065: PUSH
1066: LD_INT 0
1068: ST_TO_ADDR
// end ; InitGameRules ;
1069: CALL 14117 0 0
// if def_game_rules = 0 then
1073: LD_EXP 67
1077: PUSH
1078: LD_INT 0
1080: EQUAL
1081: IFFALSE 1108
// begin if isSGUI then
1083: LD_OWVAR 83
1087: IFFALSE 1095
// setMpTechs ( ) else
1089: CALL 17502 0 0
1093: GO 1108
// begin SetMpTechLevel ( tech_level + 1 ) ;
1095: LD_VAR 0 14
1099: PUSH
1100: LD_INT 1
1102: PLUS
1103: PPUSH
1104: CALL 17649 0 1
// end ; end ; u1 = [ 0 , 1 , 1 , 1 , 2 ] [ def_main_base + 1 ] ;
1108: LD_ADDR_VAR 0 9
1112: PUSH
1113: LD_INT 0
1115: PUSH
1116: LD_INT 1
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: LD_INT 1
1124: PUSH
1125: LD_INT 2
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: PUSH
1135: LD_EXP 1
1139: PUSH
1140: LD_INT 1
1142: PLUS
1143: ARRAY
1144: ST_TO_ADDR
// u2 = [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] ;
1145: LD_ADDR_VAR 0 10
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: LD_INT 1
1158: PUSH
1159: LD_INT 2
1161: PUSH
1162: LD_INT 2
1164: PUSH
1165: EMPTY
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: LD_EXP 1
1176: PUSH
1177: LD_INT 1
1179: PLUS
1180: ARRAY
1181: ST_TO_ADDR
// is_depot = [ [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] , [ 0 , 1 , 1 ] [ def_secondary_base + 1 ] ] ;
1182: LD_ADDR_EXP 20
1186: PUSH
1187: LD_INT 0
1189: PUSH
1190: LD_INT 1
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 2
1198: PUSH
1199: LD_INT 2
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: LIST
1208: PUSH
1209: LD_EXP 1
1213: PUSH
1214: LD_INT 1
1216: PLUS
1217: ARRAY
1218: PUSH
1219: LD_INT 0
1221: PUSH
1222: LD_INT 1
1224: PUSH
1225: LD_INT 1
1227: PUSH
1228: EMPTY
1229: LIST
1230: LIST
1231: LIST
1232: PUSH
1233: LD_EXP 2
1237: PUSH
1238: LD_INT 1
1240: PLUS
1241: ARRAY
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: ST_TO_ADDR
// if is_depot [ 2 ] then
1247: LD_EXP 20
1251: PUSH
1252: LD_INT 2
1254: ARRAY
1255: IFFALSE 1394
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ [ ] , [ 1 ] , [ 1 , 1 ] , [ 1 , 1 , 1 ] ] [ def_defence_level + 1 ] ] else
1257: LD_ADDR_EXP 27
1261: PUSH
1262: EMPTY
1263: PUSH
1264: LD_VAR 0 10
1268: PUSH
1269: LD_VAR 0 9
1273: PUSH
1274: EMPTY
1275: LIST
1276: LIST
1277: PUSH
1278: LD_VAR 0 10
1282: PUSH
1283: LD_VAR 0 10
1287: PUSH
1288: LD_VAR 0 9
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: PUSH
1298: LD_VAR 0 10
1302: PUSH
1303: LD_VAR 0 10
1307: PUSH
1308: LD_VAR 0 9
1312: PUSH
1313: LD_VAR 0 9
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: PUSH
1324: EMPTY
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: PUSH
1330: LD_EXP 3
1334: PUSH
1335: LD_INT 1
1337: PLUS
1338: ARRAY
1339: PUSH
1340: EMPTY
1341: PUSH
1342: LD_INT 1
1344: PUSH
1345: EMPTY
1346: LIST
1347: PUSH
1348: LD_INT 1
1350: PUSH
1351: LD_INT 1
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: LD_INT 1
1360: PUSH
1361: LD_INT 1
1363: PUSH
1364: LD_INT 1
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: PUSH
1378: LD_EXP 3
1382: PUSH
1383: LD_INT 1
1385: PLUS
1386: ARRAY
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: ST_TO_ADDR
1392: GO 1483
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ ] ] ;
1394: LD_ADDR_EXP 27
1398: PUSH
1399: EMPTY
1400: PUSH
1401: LD_VAR 0 10
1405: PUSH
1406: LD_VAR 0 9
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: PUSH
1415: LD_VAR 0 10
1419: PUSH
1420: LD_VAR 0 10
1424: PUSH
1425: LD_VAR 0 9
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: LIST
1434: PUSH
1435: LD_VAR 0 10
1439: PUSH
1440: LD_VAR 0 10
1444: PUSH
1445: LD_VAR 0 9
1449: PUSH
1450: LD_VAR 0 9
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: PUSH
1467: LD_EXP 3
1471: PUSH
1472: LD_INT 1
1474: PLUS
1475: ARRAY
1476: PUSH
1477: EMPTY
1478: PUSH
1479: EMPTY
1480: LIST
1481: LIST
1482: ST_TO_ADDR
// is_fact = [ [ 0 , 0 , 1 , 2 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1483: LD_ADDR_EXP 25
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 0
1493: PUSH
1494: LD_INT 1
1496: PUSH
1497: LD_INT 2
1499: PUSH
1500: LD_INT 2
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: PUSH
1510: LD_EXP 1
1514: PUSH
1515: LD_INT 1
1517: PLUS
1518: ARRAY
1519: PUSH
1520: LD_INT 0
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: ST_TO_ADDR
// is_lab = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1527: LD_ADDR_EXP 24
1531: PUSH
1532: LD_INT 0
1534: PUSH
1535: LD_INT 0
1537: PUSH
1538: LD_INT 1
1540: PUSH
1541: LD_INT 1
1543: PUSH
1544: LD_INT 2
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_EXP 1
1558: PUSH
1559: LD_INT 1
1561: PLUS
1562: ARRAY
1563: PUSH
1564: LD_INT 0
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: ST_TO_ADDR
// is_arm = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1571: LD_ADDR_EXP 26
1575: PUSH
1576: LD_INT 0
1578: PUSH
1579: LD_INT 0
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 2
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: PUSH
1598: LD_EXP 1
1602: PUSH
1603: LD_INT 1
1605: PLUS
1606: ARRAY
1607: PUSH
1608: LD_INT 0
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: ST_TO_ADDR
// are_mines = [ [ 0 , 0 , 0 , 1 , 1 ] [ def_main_base + 1 ] , [ 0 , 0 , 1 ] [ def_secondary_base + 1 ] ] ;
1615: LD_ADDR_EXP 23
1619: PUSH
1620: LD_INT 0
1622: PUSH
1623: LD_INT 0
1625: PUSH
1626: LD_INT 0
1628: PUSH
1629: LD_INT 1
1631: PUSH
1632: LD_INT 1
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_EXP 1
1646: PUSH
1647: LD_INT 1
1649: PLUS
1650: ARRAY
1651: PUSH
1652: LD_INT 0
1654: PUSH
1655: LD_INT 0
1657: PUSH
1658: LD_INT 1
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: LIST
1665: PUSH
1666: LD_EXP 2
1670: PUSH
1671: LD_INT 1
1673: PLUS
1674: ARRAY
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: ST_TO_ADDR
// number_of_pplants = [ [ 0 , 0 , 0 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1680: LD_ADDR_EXP 22
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 0
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: LD_INT 1
1696: PUSH
1697: LD_INT 2
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: PUSH
1707: LD_EXP 1
1711: PUSH
1712: LD_INT 1
1714: PLUS
1715: ARRAY
1716: PUSH
1717: LD_INT 0
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: ST_TO_ADDR
// number_of_people = [ [ 5 , 8 , 11 ] [ def_amount_of_people + 1 ] , ( [ 2 , 3 , 4 ] [ def_amount_of_people + 1 ] ) * is_depot [ 2 ] ] ;
1724: LD_ADDR_EXP 21
1728: PUSH
1729: LD_INT 5
1731: PUSH
1732: LD_INT 8
1734: PUSH
1735: LD_INT 11
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: PUSH
1743: LD_EXP 4
1747: PUSH
1748: LD_INT 1
1750: PLUS
1751: ARRAY
1752: PUSH
1753: LD_INT 2
1755: PUSH
1756: LD_INT 3
1758: PUSH
1759: LD_INT 4
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: LD_EXP 4
1771: PUSH
1772: LD_INT 1
1774: PLUS
1775: ARRAY
1776: PUSH
1777: LD_EXP 20
1781: PUSH
1782: LD_INT 2
1784: ARRAY
1785: MUL
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
1791: LD_ADDR_EXP 29
1795: PUSH
1796: LD_INT 2
1798: PUSH
1799: LD_INT 3
1801: PUSH
1802: LD_INT 4
1804: PUSH
1805: LD_INT 5
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: PUSH
1814: LD_EXP 5
1818: PUSH
1819: LD_INT 1
1821: PLUS
1822: ARRAY
1823: ST_TO_ADDR
// starting_resources = [ [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] , [ [ 50 , 0 , 0 ] , [ 20 , 0 , 0 ] ] , [ [ 150 , 30 , 0 ] , [ 60 , 0 , 0 ] ] , [ [ 250 , 50 , 10 ] , [ 100 , 30 , 0 ] ] ] [ def_starting_resources + 1 ] ;
1824: LD_ADDR_EXP 31
1828: PUSH
1829: LD_INT 0
1831: PUSH
1832: LD_INT 0
1834: PUSH
1835: LD_INT 0
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 0
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: LD_INT 0
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: PUSH
1861: LD_INT 50
1863: PUSH
1864: LD_INT 0
1866: PUSH
1867: LD_INT 0
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: LIST
1874: PUSH
1875: LD_INT 20
1877: PUSH
1878: LD_INT 0
1880: PUSH
1881: LD_INT 0
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: LIST
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 150
1895: PUSH
1896: LD_INT 30
1898: PUSH
1899: LD_INT 0
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: PUSH
1907: LD_INT 60
1909: PUSH
1910: LD_INT 0
1912: PUSH
1913: LD_INT 0
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: LD_INT 250
1927: PUSH
1928: LD_INT 50
1930: PUSH
1931: LD_INT 10
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: PUSH
1939: LD_INT 100
1941: PUSH
1942: LD_INT 30
1944: PUSH
1945: LD_INT 0
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: PUSH
1963: LD_EXP 9
1967: PUSH
1968: LD_INT 1
1970: PLUS
1971: ARRAY
1972: ST_TO_ADDR
// shipments_density := 190 - ( def_shipments_density + 1 ) ;
1973: LD_ADDR_EXP 32
1977: PUSH
1978: LD_INT 190
1980: PUSH
1981: LD_EXP 10
1985: PUSH
1986: LD_INT 1
1988: PLUS
1989: MINUS
1990: ST_TO_ADDR
// max_arriving_times = [ [ ] , [ 10 , 17 , 26 , 36 , 48 , 60 ] , [ 6 , 10 , 15 , 20 , 26 , 32 , 38 , 45 , 52 , 60 ] , [ 4 , 6 , 9 , 12 , 16 , 20 , 24 , 28 , 32 , 36 , 40 , 45 , 50 , 55 , 60 ] ] [ def_people_arrivals + 1 ] ;
1991: LD_ADDR_EXP 33
1995: PUSH
1996: EMPTY
1997: PUSH
1998: LD_INT 10
2000: PUSH
2001: LD_INT 17
2003: PUSH
2004: LD_INT 26
2006: PUSH
2007: LD_INT 36
2009: PUSH
2010: LD_INT 48
2012: PUSH
2013: LD_INT 60
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: PUSH
2024: LD_INT 6
2026: PUSH
2027: LD_INT 10
2029: PUSH
2030: LD_INT 15
2032: PUSH
2033: LD_INT 20
2035: PUSH
2036: LD_INT 26
2038: PUSH
2039: LD_INT 32
2041: PUSH
2042: LD_INT 38
2044: PUSH
2045: LD_INT 45
2047: PUSH
2048: LD_INT 52
2050: PUSH
2051: LD_INT 60
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: PUSH
2066: LD_INT 4
2068: PUSH
2069: LD_INT 6
2071: PUSH
2072: LD_INT 9
2074: PUSH
2075: LD_INT 12
2077: PUSH
2078: LD_INT 16
2080: PUSH
2081: LD_INT 20
2083: PUSH
2084: LD_INT 24
2086: PUSH
2087: LD_INT 28
2089: PUSH
2090: LD_INT 32
2092: PUSH
2093: LD_INT 36
2095: PUSH
2096: LD_INT 40
2098: PUSH
2099: LD_INT 45
2101: PUSH
2102: LD_INT 50
2104: PUSH
2105: LD_INT 55
2107: PUSH
2108: LD_INT 60
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: PUSH
2134: LD_EXP 11
2138: PUSH
2139: LD_INT 1
2141: PLUS
2142: ARRAY
2143: ST_TO_ADDR
// text_info = [ 0 , 1 , 0 , 1 ] [ def_people_info + 1 ] ;
2144: LD_ADDR_EXP 34
2148: PUSH
2149: LD_INT 0
2151: PUSH
2152: LD_INT 1
2154: PUSH
2155: LD_INT 0
2157: PUSH
2158: LD_INT 1
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_EXP 13
2171: PUSH
2172: LD_INT 1
2174: PLUS
2175: ARRAY
2176: ST_TO_ADDR
// fog_info = [ 0 , 0 , 1 , 1 ] [ def_people_info + 1 ] ;
2177: LD_ADDR_EXP 35
2181: PUSH
2182: LD_INT 0
2184: PUSH
2185: LD_INT 0
2187: PUSH
2188: LD_INT 1
2190: PUSH
2191: LD_INT 1
2193: PUSH
2194: EMPTY
2195: LIST
2196: LIST
2197: LIST
2198: LIST
2199: PUSH
2200: LD_EXP 13
2204: PUSH
2205: LD_INT 1
2207: PLUS
2208: ARRAY
2209: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
2210: LD_ADDR_EXP 37
2214: PUSH
2215: LD_INT 0
2217: PUSH
2218: LD_INT 3
2220: PUSH
2221: LD_INT 6
2223: PUSH
2224: LD_INT 9
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: LIST
2232: PUSH
2233: LD_EXP 16
2237: PUSH
2238: LD_INT 1
2240: PLUS
2241: ARRAY
2242: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2243: LD_ADDR_EXP 38
2247: PUSH
2248: LD_INT 0
2250: PUSH
2251: LD_INT 1
2253: PUSH
2254: LD_INT 63000
2256: PUSH
2257: LD_INT 126000
2259: PUSH
2260: LD_INT 189000
2262: PUSH
2263: LD_INT 252000
2265: PUSH
2266: EMPTY
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: PUSH
2274: LD_EXP 15
2278: PUSH
2279: LD_INT 1
2281: PLUS
2282: ARRAY
2283: ST_TO_ADDR
// deposits = [ [ [ 1 , 0 , 1 , 2 , 0 ] [ def_main_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_main_deposits + 1 ] ] , [ [ 1 , 0 , 1 , 2 , 0 ] [ def_secondary_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_secondary_deposits + 1 ] ] ] ;
2284: LD_ADDR_EXP 28
2288: PUSH
2289: LD_INT 1
2291: PUSH
2292: LD_INT 0
2294: PUSH
2295: LD_INT 1
2297: PUSH
2298: LD_INT 2
2300: PUSH
2301: LD_INT 0
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: PUSH
2311: LD_EXP 6
2315: PUSH
2316: LD_INT 1
2318: PLUS
2319: ARRAY
2320: PUSH
2321: LD_INT 0
2323: PUSH
2324: LD_INT 1
2326: PUSH
2327: LD_INT 1
2329: PUSH
2330: LD_INT 0
2332: PUSH
2333: LD_INT 2
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: PUSH
2343: LD_EXP 6
2347: PUSH
2348: LD_INT 1
2350: PLUS
2351: ARRAY
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: LD_INT 0
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: LD_INT 2
2368: PUSH
2369: LD_INT 0
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: PUSH
2379: LD_EXP 7
2383: PUSH
2384: LD_INT 1
2386: PLUS
2387: ARRAY
2388: PUSH
2389: LD_INT 0
2391: PUSH
2392: LD_INT 1
2394: PUSH
2395: LD_INT 1
2397: PUSH
2398: LD_INT 0
2400: PUSH
2401: LD_INT 2
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: PUSH
2411: LD_EXP 7
2415: PUSH
2416: LD_INT 1
2418: PLUS
2419: ARRAY
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: ST_TO_ADDR
// def_bf_params = [ [ 0 , 0 , 0 , 0 ] , [ 50 , 25 , 0 , 50 ] , [ 75 , 50 , 25 , 75 ] , [ 100 , 75 , 50 , 100 ] ] [ def_morale_flags + 1 ] ;
2429: LD_ADDR_EXP 36
2433: PUSH
2434: LD_INT 0
2436: PUSH
2437: LD_INT 0
2439: PUSH
2440: LD_INT 0
2442: PUSH
2443: LD_INT 0
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 50
2454: PUSH
2455: LD_INT 25
2457: PUSH
2458: LD_INT 0
2460: PUSH
2461: LD_INT 50
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: LIST
2468: LIST
2469: PUSH
2470: LD_INT 75
2472: PUSH
2473: LD_INT 50
2475: PUSH
2476: LD_INT 25
2478: PUSH
2479: LD_INT 75
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: PUSH
2488: LD_INT 100
2490: PUSH
2491: LD_INT 75
2493: PUSH
2494: LD_INT 50
2496: PUSH
2497: LD_INT 100
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: PUSH
2512: LD_EXP 14
2516: PUSH
2517: LD_INT 1
2519: PLUS
2520: ARRAY
2521: ST_TO_ADDR
// prepare_arrivals ;
2522: CALL 11221 0 0
// if def_people_loyality then
2526: LD_EXP 12
2530: IFFALSE 3395
// begin second_side = [ [ [ 0 , 0 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 6 , 7 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 4 , 2 ] , [ 4 , 2 ] ] , [ [ 5 , 4 ] , [ 0 , 0 ] , [ 5 , 6 ] , [ 5 , 1 ] , [ 7 , 3 ] , [ 5 , 3 ] , [ 5 , 4 ] , [ 5 , 4 ] ] , [ [ 6 , 4 ] , [ 6 , 5 ] , [ 0 , 0 ] , [ 6 , 1 ] , [ 6 , 2 ] , [ 5 , 1 ] , [ 6 , 4 ] , [ 6 , 2 ] ] , [ [ 7 , 6 ] , [ 1 , 5 ] , [ 1 , 6 ] , [ 0 , 0 ] , [ 1 , 2 ] , [ 1 , 3 ] , [ 1 , 2 ] , [ 1 , 2 ] ] , [ [ 2 , 4 ] , [ 3 , 7 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 0 , 0 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 2 , 4 ] ] , [ [ 3 , 4 ] , [ 3 , 5 ] , [ 1 , 5 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 0 , 0 ] , [ 3 , 4 ] , [ 3 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 0 , 0 ] , [ 4 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 0 , 0 ] ] ] [ positions [ 1 ] ] [ positions [ 2 ] ] ;
2532: LD_ADDR_EXP 47
2536: PUSH
2537: LD_INT 0
2539: PUSH
2540: LD_INT 0
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: PUSH
2547: LD_INT 4
2549: PUSH
2550: LD_INT 5
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: PUSH
2557: LD_INT 4
2559: PUSH
2560: LD_INT 6
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: LD_INT 6
2569: PUSH
2570: LD_INT 7
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 4
2579: PUSH
2580: LD_INT 2
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: LD_INT 4
2589: PUSH
2590: LD_INT 3
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: PUSH
2597: LD_INT 4
2599: PUSH
2600: LD_INT 2
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: PUSH
2607: LD_INT 4
2609: PUSH
2610: LD_INT 2
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 5
2629: PUSH
2630: LD_INT 4
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: LD_INT 0
2639: PUSH
2640: LD_INT 0
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: PUSH
2647: LD_INT 5
2649: PUSH
2650: LD_INT 6
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PUSH
2657: LD_INT 5
2659: PUSH
2660: LD_INT 1
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: PUSH
2667: LD_INT 7
2669: PUSH
2670: LD_INT 3
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: PUSH
2677: LD_INT 5
2679: PUSH
2680: LD_INT 3
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_INT 5
2689: PUSH
2690: LD_INT 4
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PUSH
2697: LD_INT 5
2699: PUSH
2700: LD_INT 4
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: LIST
2711: LIST
2712: LIST
2713: LIST
2714: LIST
2715: LIST
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: LD_INT 4
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: PUSH
2727: LD_INT 6
2729: PUSH
2730: LD_INT 5
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 0
2739: PUSH
2740: LD_INT 0
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PUSH
2747: LD_INT 6
2749: PUSH
2750: LD_INT 1
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PUSH
2757: LD_INT 6
2759: PUSH
2760: LD_INT 2
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 5
2769: PUSH
2770: LD_INT 1
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: LD_INT 6
2779: PUSH
2780: LD_INT 4
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 6
2789: PUSH
2790: LD_INT 2
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 7
2809: PUSH
2810: LD_INT 6
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PUSH
2817: LD_INT 1
2819: PUSH
2820: LD_INT 5
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 1
2829: PUSH
2830: LD_INT 6
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: LD_INT 0
2839: PUSH
2840: LD_INT 0
2842: PUSH
2843: EMPTY
2844: LIST
2845: LIST
2846: PUSH
2847: LD_INT 1
2849: PUSH
2850: LD_INT 2
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_INT 1
2859: PUSH
2860: LD_INT 3
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: LD_INT 2
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: LD_INT 1
2879: PUSH
2880: LD_INT 2
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: LIST
2891: LIST
2892: LIST
2893: LIST
2894: LIST
2895: LIST
2896: PUSH
2897: LD_INT 2
2899: PUSH
2900: LD_INT 4
2902: PUSH
2903: EMPTY
2904: LIST
2905: LIST
2906: PUSH
2907: LD_INT 3
2909: PUSH
2910: LD_INT 7
2912: PUSH
2913: EMPTY
2914: LIST
2915: LIST
2916: PUSH
2917: LD_INT 2
2919: PUSH
2920: LD_INT 6
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PUSH
2927: LD_INT 2
2929: PUSH
2930: LD_INT 1
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: LD_INT 0
2939: PUSH
2940: LD_INT 0
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: PUSH
2947: LD_INT 2
2949: PUSH
2950: LD_INT 3
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: PUSH
2957: LD_INT 2
2959: PUSH
2960: LD_INT 4
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: LD_INT 4
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: PUSH
2987: LD_INT 3
2989: PUSH
2990: LD_INT 4
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: PUSH
2997: LD_INT 3
2999: PUSH
3000: LD_INT 5
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PUSH
3007: LD_INT 1
3009: PUSH
3010: LD_INT 5
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PUSH
3017: LD_INT 3
3019: PUSH
3020: LD_INT 1
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: PUSH
3027: LD_INT 3
3029: PUSH
3030: LD_INT 2
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 0
3039: PUSH
3040: LD_INT 0
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PUSH
3047: LD_INT 3
3049: PUSH
3050: LD_INT 4
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: PUSH
3057: LD_INT 3
3059: PUSH
3060: LD_INT 2
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: PUSH
3077: LD_INT 2
3079: PUSH
3080: LD_INT 4
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: PUSH
3087: LD_INT 4
3089: PUSH
3090: LD_INT 5
3092: PUSH
3093: EMPTY
3094: LIST
3095: LIST
3096: PUSH
3097: LD_INT 4
3099: PUSH
3100: LD_INT 6
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 2
3109: PUSH
3110: LD_INT 1
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: LD_INT 4
3119: PUSH
3120: LD_INT 2
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: LD_INT 4
3129: PUSH
3130: LD_INT 3
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: PUSH
3137: LD_INT 0
3139: PUSH
3140: LD_INT 0
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 4
3149: PUSH
3150: LD_INT 2
3152: PUSH
3153: EMPTY
3154: LIST
3155: LIST
3156: PUSH
3157: EMPTY
3158: LIST
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: PUSH
3167: LD_INT 2
3169: PUSH
3170: LD_INT 4
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 4
3179: PUSH
3180: LD_INT 5
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: PUSH
3187: LD_INT 2
3189: PUSH
3190: LD_INT 6
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PUSH
3197: LD_INT 2
3199: PUSH
3200: LD_INT 1
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PUSH
3207: LD_INT 4
3209: PUSH
3210: LD_INT 2
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: PUSH
3217: LD_INT 2
3219: PUSH
3220: LD_INT 3
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PUSH
3227: LD_INT 2
3229: PUSH
3230: LD_INT 4
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: LD_INT 0
3239: PUSH
3240: LD_INT 0
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: PUSH
3267: LD_EXP 39
3271: PUSH
3272: LD_INT 1
3274: ARRAY
3275: ARRAY
3276: PUSH
3277: LD_EXP 39
3281: PUSH
3282: LD_INT 2
3284: ARRAY
3285: ARRAY
3286: ST_TO_ADDR
// SetAttitude ( second_side [ 1 ] , positions [ 1 ] , att_friend , true ) ;
3287: LD_EXP 47
3291: PUSH
3292: LD_INT 1
3294: ARRAY
3295: PPUSH
3296: LD_EXP 39
3300: PUSH
3301: LD_INT 1
3303: ARRAY
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: LD_INT 1
3310: PPUSH
3311: CALL_OW 80
// SetAttitude ( second_side [ 2 ] , positions [ 2 ] , att_friend , true ) ;
3315: LD_EXP 47
3319: PUSH
3320: LD_INT 2
3322: ARRAY
3323: PPUSH
3324: LD_EXP 39
3328: PUSH
3329: LD_INT 2
3331: ARRAY
3332: PPUSH
3333: LD_INT 1
3335: PPUSH
3336: LD_INT 1
3338: PPUSH
3339: CALL_OW 80
// if fog_info then
3343: LD_EXP 35
3347: IFFALSE 3393
// begin ChangeSideFog ( second_side [ 1 ] , positions [ 1 ] ) ;
3349: LD_EXP 47
3353: PUSH
3354: LD_INT 1
3356: ARRAY
3357: PPUSH
3358: LD_EXP 39
3362: PUSH
3363: LD_INT 1
3365: ARRAY
3366: PPUSH
3367: CALL_OW 343
// ChangeSideFog ( second_side [ 2 ] , positions [ 2 ] ) ;
3371: LD_EXP 47
3375: PUSH
3376: LD_INT 2
3378: ARRAY
3379: PPUSH
3380: LD_EXP 39
3384: PUSH
3385: LD_INT 2
3387: ARRAY
3388: PPUSH
3389: CALL_OW 343
// end ; end else
3393: GO 3675
// begin pom_tab = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] diff ( positions union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 1 ] ] union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 2 ] ] ) ;
3395: LD_ADDR_VAR 0 11
3399: PUSH
3400: LD_INT 1
3402: PUSH
3403: LD_INT 2
3405: PUSH
3406: LD_INT 3
3408: PUSH
3409: LD_INT 4
3411: PUSH
3412: LD_INT 5
3414: PUSH
3415: LD_INT 6
3417: PUSH
3418: LD_INT 7
3420: PUSH
3421: LD_INT 8
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: PUSH
3434: LD_EXP 39
3438: PUSH
3439: LD_INT 4
3441: PUSH
3442: LD_INT 5
3444: PUSH
3445: LD_INT 7
3447: PUSH
3448: LD_INT 8
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: LIST
3455: PUSH
3456: LD_INT 6
3458: PUSH
3459: LD_INT 1
3461: PUSH
3462: LD_INT 7
3464: PUSH
3465: LD_INT 8
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 2
3475: PUSH
3476: LD_INT 3
3478: PUSH
3479: LD_INT 2
3481: PUSH
3482: LD_INT 4
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: PUSH
3489: LD_INT 2
3491: PUSH
3492: LD_INT 4
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: LD_EXP 39
3513: PUSH
3514: LD_INT 1
3516: ARRAY
3517: ARRAY
3518: UNION
3519: PUSH
3520: LD_INT 4
3522: PUSH
3523: LD_INT 5
3525: PUSH
3526: LD_INT 7
3528: PUSH
3529: LD_INT 8
3531: PUSH
3532: EMPTY
3533: LIST
3534: LIST
3535: LIST
3536: PUSH
3537: LD_INT 6
3539: PUSH
3540: LD_INT 1
3542: PUSH
3543: LD_INT 7
3545: PUSH
3546: LD_INT 8
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: LIST
3553: PUSH
3554: LD_INT 2
3556: PUSH
3557: LD_INT 3
3559: PUSH
3560: LD_INT 2
3562: PUSH
3563: LD_INT 4
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: PUSH
3570: LD_INT 2
3572: PUSH
3573: LD_INT 4
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: PUSH
3590: LD_EXP 39
3594: PUSH
3595: LD_INT 2
3597: ARRAY
3598: ARRAY
3599: UNION
3600: DIFF
3601: ST_TO_ADDR
// second_side = pom_tab [ Rand ( 1 , pom_tab ) ] ;
3602: LD_ADDR_EXP 47
3606: PUSH
3607: LD_VAR 0 11
3611: PUSH
3612: LD_INT 1
3614: PPUSH
3615: LD_VAR 0 11
3619: PPUSH
3620: CALL_OW 12
3624: ARRAY
3625: ST_TO_ADDR
// third_nation = [ 1 , 2 , 3 ] diff side_nations ;
3626: LD_ADDR_EXP 48
3630: PUSH
3631: LD_INT 1
3633: PUSH
3634: LD_INT 2
3636: PUSH
3637: LD_INT 3
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: LIST
3644: PUSH
3645: LD_EXP 44
3649: DIFF
3650: ST_TO_ADDR
// third_nation = third_nation [ Rand ( 1 , third_nation ) ] ;
3651: LD_ADDR_EXP 48
3655: PUSH
3656: LD_EXP 48
3660: PUSH
3661: LD_INT 1
3663: PPUSH
3664: LD_EXP 48
3668: PPUSH
3669: CALL_OW 12
3673: ARRAY
3674: ST_TO_ADDR
// end ; BuildUpAreas := [ BuildUp1 , BuildUp2 ] ;
3675: LD_ADDR_EXP 65
3679: PUSH
3680: LD_INT 26
3682: PUSH
3683: LD_INT 27
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: ST_TO_ADDR
// end ;
3690: LD_VAR 0 1
3694: RET
// function prepare_map_coordinates ; var side , dep2 , br2 , dep1 , br1 , lab , fac , arm , pplant , un , i , k11 , k12 , k21 , k22 ; begin
3695: LD_INT 0
3697: PPUSH
3698: PPUSH
3699: PPUSH
3700: PPUSH
3701: PPUSH
3702: PPUSH
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
3710: PPUSH
3711: PPUSH
3712: PPUSH
// start_def = [ ] ;
3713: LD_ADDR_EXP 49
3717: PUSH
3718: EMPTY
3719: ST_TO_ADDR
// depots_def = [ ] ;
3720: LD_ADDR_EXP 50
3724: PUSH
3725: EMPTY
3726: ST_TO_ADDR
// breastworks_def = [ ] ;
3727: LD_ADDR_EXP 51
3731: PUSH
3732: EMPTY
3733: ST_TO_ADDR
// labs_def = [ ] ;
3734: LD_ADDR_EXP 52
3738: PUSH
3739: EMPTY
3740: ST_TO_ADDR
// factories_def = [ ] ;
3741: LD_ADDR_EXP 53
3745: PUSH
3746: EMPTY
3747: ST_TO_ADDR
// armories_def = [ ] ;
3748: LD_ADDR_EXP 54
3752: PUSH
3753: EMPTY
3754: ST_TO_ADDR
// pplants_def = [ ] ;
3755: LD_ADDR_EXP 55
3759: PUSH
3760: EMPTY
3761: ST_TO_ADDR
// deposits_def = [ ] ;
3762: LD_ADDR_EXP 56
3766: PUSH
3767: EMPTY
3768: ST_TO_ADDR
// k11 := Rand ( 1 , 2 ) ;
3769: LD_ADDR_VAR 0 13
3773: PUSH
3774: LD_INT 1
3776: PPUSH
3777: LD_INT 2
3779: PPUSH
3780: CALL_OW 12
3784: ST_TO_ADDR
// k12 := Rand ( 1 , 2 ) ;
3785: LD_ADDR_VAR 0 14
3789: PUSH
3790: LD_INT 1
3792: PPUSH
3793: LD_INT 2
3795: PPUSH
3796: CALL_OW 12
3800: ST_TO_ADDR
// k21 := Rand ( 1 , 2 ) ;
3801: LD_ADDR_VAR 0 15
3805: PUSH
3806: LD_INT 1
3808: PPUSH
3809: LD_INT 2
3811: PPUSH
3812: CALL_OW 12
3816: ST_TO_ADDR
// k22 := Rand ( 1 , 2 ) ;
3817: LD_ADDR_VAR 0 16
3821: PUSH
3822: LD_INT 1
3824: PPUSH
3825: LD_INT 2
3827: PPUSH
3828: CALL_OW 12
3832: ST_TO_ADDR
// deposits_def := [ [ [ [ Res111 , Res112 ] [ k11 ] , [ Res111 , Res112 ] [ 3 - k11 ] ] , [ [ Res121 , Res122 ] [ k12 ] , [ Res121 , Res122 ] [ 3 - k12 ] ] ] , [ [ [ Res211 , Res212 ] [ k21 ] , [ Res211 , Res212 ] [ 3 - k21 ] ] , [ [ Res221 , Res222 ] [ k22 ] , [ Res221 , Res222 ] [ 3 - k22 ] ] ] ] ;
3833: LD_ADDR_EXP 56
3837: PUSH
3838: LD_INT 4
3840: PUSH
3841: LD_INT 5
3843: PUSH
3844: EMPTY
3845: LIST
3846: LIST
3847: PUSH
3848: LD_VAR 0 13
3852: ARRAY
3853: PUSH
3854: LD_INT 4
3856: PUSH
3857: LD_INT 5
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: PUSH
3864: LD_INT 3
3866: PUSH
3867: LD_VAR 0 13
3871: MINUS
3872: ARRAY
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: PUSH
3878: LD_INT 6
3880: PUSH
3881: LD_INT 7
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PUSH
3888: LD_VAR 0 14
3892: ARRAY
3893: PUSH
3894: LD_INT 6
3896: PUSH
3897: LD_INT 7
3899: PUSH
3900: EMPTY
3901: LIST
3902: LIST
3903: PUSH
3904: LD_INT 3
3906: PUSH
3907: LD_VAR 0 14
3911: MINUS
3912: ARRAY
3913: PUSH
3914: EMPTY
3915: LIST
3916: LIST
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_INT 8
3924: PUSH
3925: LD_INT 9
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: PUSH
3932: LD_VAR 0 15
3936: ARRAY
3937: PUSH
3938: LD_INT 8
3940: PUSH
3941: LD_INT 9
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: PUSH
3948: LD_INT 3
3950: PUSH
3951: LD_VAR 0 15
3955: MINUS
3956: ARRAY
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: PUSH
3962: LD_INT 10
3964: PUSH
3965: LD_INT 11
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PUSH
3972: LD_VAR 0 16
3976: ARRAY
3977: PUSH
3978: LD_INT 10
3980: PUSH
3981: LD_INT 11
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: PUSH
3988: LD_INT 3
3990: PUSH
3991: LD_VAR 0 16
3995: MINUS
3996: ARRAY
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: ST_TO_ADDR
// for side := 1 to 2 do
4010: LD_ADDR_VAR 0 2
4014: PUSH
4015: DOUBLE
4016: LD_INT 1
4018: DEC
4019: ST_TO_ADDR
4020: LD_INT 2
4022: PUSH
4023: FOR_TO
4024: IFFALSE 5156
// begin dep1 := side * 10 - 9 ;
4026: LD_ADDR_VAR 0 5
4030: PUSH
4031: LD_VAR 0 2
4035: PUSH
4036: LD_INT 10
4038: MUL
4039: PUSH
4040: LD_INT 9
4042: MINUS
4043: ST_TO_ADDR
// dep2 := 20 + side * 4 - 3 ;
4044: LD_ADDR_VAR 0 3
4048: PUSH
4049: LD_INT 20
4051: PUSH
4052: LD_VAR 0 2
4056: PUSH
4057: LD_INT 4
4059: MUL
4060: PLUS
4061: PUSH
4062: LD_INT 3
4064: MINUS
4065: ST_TO_ADDR
// br1 := [ side * 10 - 8 , side * 10 - 7 , side * 10 - 6 , side * 10 - 5 ] ;
4066: LD_ADDR_VAR 0 6
4070: PUSH
4071: LD_VAR 0 2
4075: PUSH
4076: LD_INT 10
4078: MUL
4079: PUSH
4080: LD_INT 8
4082: MINUS
4083: PUSH
4084: LD_VAR 0 2
4088: PUSH
4089: LD_INT 10
4091: MUL
4092: PUSH
4093: LD_INT 7
4095: MINUS
4096: PUSH
4097: LD_VAR 0 2
4101: PUSH
4102: LD_INT 10
4104: MUL
4105: PUSH
4106: LD_INT 6
4108: MINUS
4109: PUSH
4110: LD_VAR 0 2
4114: PUSH
4115: LD_INT 10
4117: MUL
4118: PUSH
4119: LD_INT 5
4121: MINUS
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: ST_TO_ADDR
// br2 := [ 20 + side * 4 - 2 , 20 + side * 4 - 1 , 20 + side * 4 ] ;
4129: LD_ADDR_VAR 0 4
4133: PUSH
4134: LD_INT 20
4136: PUSH
4137: LD_VAR 0 2
4141: PUSH
4142: LD_INT 4
4144: MUL
4145: PLUS
4146: PUSH
4147: LD_INT 2
4149: MINUS
4150: PUSH
4151: LD_INT 20
4153: PUSH
4154: LD_VAR 0 2
4158: PUSH
4159: LD_INT 4
4161: MUL
4162: PLUS
4163: PUSH
4164: LD_INT 1
4166: MINUS
4167: PUSH
4168: LD_INT 20
4170: PUSH
4171: LD_VAR 0 2
4175: PUSH
4176: LD_INT 4
4178: MUL
4179: PLUS
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// lab := side * 10 - 4 ;
4186: LD_ADDR_VAR 0 7
4190: PUSH
4191: LD_VAR 0 2
4195: PUSH
4196: LD_INT 10
4198: MUL
4199: PUSH
4200: LD_INT 4
4202: MINUS
4203: ST_TO_ADDR
// fac := side * 10 - 3 ;
4204: LD_ADDR_VAR 0 8
4208: PUSH
4209: LD_VAR 0 2
4213: PUSH
4214: LD_INT 10
4216: MUL
4217: PUSH
4218: LD_INT 3
4220: MINUS
4221: ST_TO_ADDR
// arm := side * 10 - 2 ;
4222: LD_ADDR_VAR 0 9
4226: PUSH
4227: LD_VAR 0 2
4231: PUSH
4232: LD_INT 10
4234: MUL
4235: PUSH
4236: LD_INT 2
4238: MINUS
4239: ST_TO_ADDR
// pplant := [ side * 10 - 1 , side * 10 ] ;
4240: LD_ADDR_VAR 0 10
4244: PUSH
4245: LD_VAR 0 2
4249: PUSH
4250: LD_INT 10
4252: MUL
4253: PUSH
4254: LD_INT 1
4256: MINUS
4257: PUSH
4258: LD_VAR 0 2
4262: PUSH
4263: LD_INT 10
4265: MUL
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: ST_TO_ADDR
// depots_def := depots_def ^ [ [ [ GetX ( dep1 ) , GetY ( dep1 ) , GetDir ( dep1 ) ] , [ GetX ( dep2 ) , GetY ( dep2 ) , GetDir ( dep2 ) ] ] ] ;
4271: LD_ADDR_EXP 50
4275: PUSH
4276: LD_EXP 50
4280: PUSH
4281: LD_VAR 0 5
4285: PPUSH
4286: CALL_OW 250
4290: PUSH
4291: LD_VAR 0 5
4295: PPUSH
4296: CALL_OW 251
4300: PUSH
4301: LD_VAR 0 5
4305: PPUSH
4306: CALL_OW 254
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: LIST
4315: PUSH
4316: LD_VAR 0 3
4320: PPUSH
4321: CALL_OW 250
4325: PUSH
4326: LD_VAR 0 3
4330: PPUSH
4331: CALL_OW 251
4335: PUSH
4336: LD_VAR 0 3
4340: PPUSH
4341: CALL_OW 254
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: LIST
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: PUSH
4355: EMPTY
4356: LIST
4357: ADD
4358: ST_TO_ADDR
// start_def := start_def ^ [ [ [ ShiftX ( GetX ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) ] , [ ShiftX ( GetX ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) ] ] ] ;
4359: LD_ADDR_EXP 49
4363: PUSH
4364: LD_EXP 49
4368: PUSH
4369: LD_VAR 0 5
4373: PPUSH
4374: CALL_OW 250
4378: PPUSH
4379: LD_VAR 0 5
4383: PPUSH
4384: CALL_OW 254
4388: PUSH
4389: LD_INT 6
4391: MOD
4392: PPUSH
4393: LD_INT 6
4395: PPUSH
4396: CALL_OW 272
4400: PUSH
4401: LD_VAR 0 5
4405: PPUSH
4406: CALL_OW 251
4410: PPUSH
4411: LD_VAR 0 5
4415: PPUSH
4416: CALL_OW 254
4420: PUSH
4421: LD_INT 6
4423: MOD
4424: PPUSH
4425: LD_INT 6
4427: PPUSH
4428: CALL_OW 273
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: PUSH
4437: LD_VAR 0 3
4441: PPUSH
4442: CALL_OW 250
4446: PPUSH
4447: LD_VAR 0 3
4451: PPUSH
4452: CALL_OW 254
4456: PUSH
4457: LD_INT 6
4459: MOD
4460: PPUSH
4461: LD_INT 6
4463: PPUSH
4464: CALL_OW 272
4468: PUSH
4469: LD_VAR 0 3
4473: PPUSH
4474: CALL_OW 251
4478: PPUSH
4479: LD_VAR 0 3
4483: PPUSH
4484: CALL_OW 254
4488: PUSH
4489: LD_INT 6
4491: MOD
4492: PPUSH
4493: LD_INT 6
4495: PPUSH
4496: CALL_OW 273
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: PUSH
4509: EMPTY
4510: LIST
4511: ADD
4512: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ [ GetX ( br1 [ 1 ] ) , GetY ( br1 [ 1 ] ) , GetDir ( br1 [ 1 ] ) ] , [ GetX ( br1 [ 2 ] ) , GetY ( br1 [ 2 ] ) , GetDir ( br1 [ 2 ] ) ] , [ GetX ( br1 [ 3 ] ) , GetY ( br1 [ 3 ] ) , GetDir ( br1 [ 3 ] ) ] , [ GetX ( br1 [ 4 ] ) , GetY ( br1 [ 4 ] ) , GetDir ( br1 [ 4 ] ) ] ] , [ [ GetX ( br2 [ 1 ] ) , GetY ( br2 [ 1 ] ) , GetDir ( br2 [ 1 ] ) ] , [ GetX ( br2 [ 2 ] ) , GetY ( br2 [ 2 ] ) , GetDir ( br2 [ 2 ] ) ] , [ GetX ( br2 [ 3 ] ) , GetY ( br2 [ 3 ] ) , GetDir ( br2 [ 3 ] ) ] ] ] ] ;
4513: LD_ADDR_EXP 51
4517: PUSH
4518: LD_EXP 51
4522: PUSH
4523: LD_VAR 0 6
4527: PUSH
4528: LD_INT 1
4530: ARRAY
4531: PPUSH
4532: CALL_OW 250
4536: PUSH
4537: LD_VAR 0 6
4541: PUSH
4542: LD_INT 1
4544: ARRAY
4545: PPUSH
4546: CALL_OW 251
4550: PUSH
4551: LD_VAR 0 6
4555: PUSH
4556: LD_INT 1
4558: ARRAY
4559: PPUSH
4560: CALL_OW 254
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: LIST
4569: PUSH
4570: LD_VAR 0 6
4574: PUSH
4575: LD_INT 2
4577: ARRAY
4578: PPUSH
4579: CALL_OW 250
4583: PUSH
4584: LD_VAR 0 6
4588: PUSH
4589: LD_INT 2
4591: ARRAY
4592: PPUSH
4593: CALL_OW 251
4597: PUSH
4598: LD_VAR 0 6
4602: PUSH
4603: LD_INT 2
4605: ARRAY
4606: PPUSH
4607: CALL_OW 254
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: LIST
4616: PUSH
4617: LD_VAR 0 6
4621: PUSH
4622: LD_INT 3
4624: ARRAY
4625: PPUSH
4626: CALL_OW 250
4630: PUSH
4631: LD_VAR 0 6
4635: PUSH
4636: LD_INT 3
4638: ARRAY
4639: PPUSH
4640: CALL_OW 251
4644: PUSH
4645: LD_VAR 0 6
4649: PUSH
4650: LD_INT 3
4652: ARRAY
4653: PPUSH
4654: CALL_OW 254
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: LIST
4663: PUSH
4664: LD_VAR 0 6
4668: PUSH
4669: LD_INT 4
4671: ARRAY
4672: PPUSH
4673: CALL_OW 250
4677: PUSH
4678: LD_VAR 0 6
4682: PUSH
4683: LD_INT 4
4685: ARRAY
4686: PPUSH
4687: CALL_OW 251
4691: PUSH
4692: LD_VAR 0 6
4696: PUSH
4697: LD_INT 4
4699: ARRAY
4700: PPUSH
4701: CALL_OW 254
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: PUSH
4717: LD_VAR 0 4
4721: PUSH
4722: LD_INT 1
4724: ARRAY
4725: PPUSH
4726: CALL_OW 250
4730: PUSH
4731: LD_VAR 0 4
4735: PUSH
4736: LD_INT 1
4738: ARRAY
4739: PPUSH
4740: CALL_OW 251
4744: PUSH
4745: LD_VAR 0 4
4749: PUSH
4750: LD_INT 1
4752: ARRAY
4753: PPUSH
4754: CALL_OW 254
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: LIST
4763: PUSH
4764: LD_VAR 0 4
4768: PUSH
4769: LD_INT 2
4771: ARRAY
4772: PPUSH
4773: CALL_OW 250
4777: PUSH
4778: LD_VAR 0 4
4782: PUSH
4783: LD_INT 2
4785: ARRAY
4786: PPUSH
4787: CALL_OW 251
4791: PUSH
4792: LD_VAR 0 4
4796: PUSH
4797: LD_INT 2
4799: ARRAY
4800: PPUSH
4801: CALL_OW 254
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: LIST
4810: PUSH
4811: LD_VAR 0 4
4815: PUSH
4816: LD_INT 3
4818: ARRAY
4819: PPUSH
4820: CALL_OW 250
4824: PUSH
4825: LD_VAR 0 4
4829: PUSH
4830: LD_INT 3
4832: ARRAY
4833: PPUSH
4834: CALL_OW 251
4838: PUSH
4839: LD_VAR 0 4
4843: PUSH
4844: LD_INT 3
4846: ARRAY
4847: PPUSH
4848: CALL_OW 254
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: LIST
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PUSH
4867: EMPTY
4868: LIST
4869: ADD
4870: ST_TO_ADDR
// labs_def := labs_def ^ [ [ [ GetX ( lab ) , GetY ( lab ) , GetDir ( lab ) ] , [ ] ] ] ;
4871: LD_ADDR_EXP 52
4875: PUSH
4876: LD_EXP 52
4880: PUSH
4881: LD_VAR 0 7
4885: PPUSH
4886: CALL_OW 250
4890: PUSH
4891: LD_VAR 0 7
4895: PPUSH
4896: CALL_OW 251
4900: PUSH
4901: LD_VAR 0 7
4905: PPUSH
4906: CALL_OW 254
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: PUSH
4916: EMPTY
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PUSH
4922: EMPTY
4923: LIST
4924: ADD
4925: ST_TO_ADDR
// factories_def := factories_def ^ [ [ [ GetX ( fac ) , GetY ( fac ) , GetDir ( fac ) ] , [ ] ] ] ;
4926: LD_ADDR_EXP 53
4930: PUSH
4931: LD_EXP 53
4935: PUSH
4936: LD_VAR 0 8
4940: PPUSH
4941: CALL_OW 250
4945: PUSH
4946: LD_VAR 0 8
4950: PPUSH
4951: CALL_OW 251
4955: PUSH
4956: LD_VAR 0 8
4960: PPUSH
4961: CALL_OW 254
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: LIST
4970: PUSH
4971: EMPTY
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PUSH
4977: EMPTY
4978: LIST
4979: ADD
4980: ST_TO_ADDR
// armories_def := armories_def ^ [ [ [ GetX ( arm ) , GetY ( arm ) , GetDir ( arm ) ] , [ ] ] ] ;
4981: LD_ADDR_EXP 54
4985: PUSH
4986: LD_EXP 54
4990: PUSH
4991: LD_VAR 0 9
4995: PPUSH
4996: CALL_OW 250
5000: PUSH
5001: LD_VAR 0 9
5005: PPUSH
5006: CALL_OW 251
5010: PUSH
5011: LD_VAR 0 9
5015: PPUSH
5016: CALL_OW 254
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: LIST
5025: PUSH
5026: EMPTY
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: PUSH
5032: EMPTY
5033: LIST
5034: ADD
5035: ST_TO_ADDR
// pplants_def := pplants_def ^ [ [ [ [ GetX ( pplant [ 1 ] ) , GetY ( pplant [ 1 ] ) , GetDir ( pplant [ 1 ] ) ] , [ GetX ( pplant [ 2 ] ) , GetY ( pplant [ 2 ] ) , GetDir ( pplant [ 2 ] ) ] ] , [ ] ] ] ;
5036: LD_ADDR_EXP 55
5040: PUSH
5041: LD_EXP 55
5045: PUSH
5046: LD_VAR 0 10
5050: PUSH
5051: LD_INT 1
5053: ARRAY
5054: PPUSH
5055: CALL_OW 250
5059: PUSH
5060: LD_VAR 0 10
5064: PUSH
5065: LD_INT 1
5067: ARRAY
5068: PPUSH
5069: CALL_OW 251
5073: PUSH
5074: LD_VAR 0 10
5078: PUSH
5079: LD_INT 1
5081: ARRAY
5082: PPUSH
5083: CALL_OW 254
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: LIST
5092: PUSH
5093: LD_VAR 0 10
5097: PUSH
5098: LD_INT 2
5100: ARRAY
5101: PPUSH
5102: CALL_OW 250
5106: PUSH
5107: LD_VAR 0 10
5111: PUSH
5112: LD_INT 2
5114: ARRAY
5115: PPUSH
5116: CALL_OW 251
5120: PUSH
5121: LD_VAR 0 10
5125: PUSH
5126: LD_INT 2
5128: ARRAY
5129: PPUSH
5130: CALL_OW 254
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: LIST
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PUSH
5144: EMPTY
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: PUSH
5150: EMPTY
5151: LIST
5152: ADD
5153: ST_TO_ADDR
// end ;
5154: GO 4023
5156: POP
5157: POP
// for un := 1 to 28 do
5158: LD_ADDR_VAR 0 11
5162: PUSH
5163: DOUBLE
5164: LD_INT 1
5166: DEC
5167: ST_TO_ADDR
5168: LD_INT 28
5170: PUSH
5171: FOR_TO
5172: IFFALSE 5185
// DestroyUnit ( un ) ;
5174: LD_VAR 0 11
5178: PPUSH
5179: CALL_OW 65
5183: GO 5171
5185: POP
5186: POP
// end ;
5187: LD_VAR 0 1
5191: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
5192: LD_INT 0
5194: PPUSH
5195: PPUSH
5196: PPUSH
5197: PPUSH
// result := [ ] ;
5198: LD_ADDR_VAR 0 7
5202: PUSH
5203: EMPTY
5204: ST_TO_ADDR
// for i := 1 to count do
5205: LD_ADDR_VAR 0 8
5209: PUSH
5210: DOUBLE
5211: LD_INT 1
5213: DEC
5214: ST_TO_ADDR
5215: LD_VAR 0 1
5219: PUSH
5220: FOR_TO
5221: IFFALSE 5639
// begin uc_direction := Rand ( 0 , 5 ) ;
5223: LD_ADDR_OWVAR 24
5227: PUSH
5228: LD_INT 0
5230: PPUSH
5231: LD_INT 5
5233: PPUSH
5234: CALL_OW 12
5238: ST_TO_ADDR
// if commander then
5239: LD_LOC 1
5243: IFFALSE 5352
// begin hc_name := mp_sides_players_names [ uc_side ] ;
5245: LD_ADDR_OWVAR 26
5249: PUSH
5250: LD_OWVAR 19
5254: PUSH
5255: LD_OWVAR 20
5259: ARRAY
5260: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
5261: LD_INT 1
5263: PPUSH
5264: LD_INT 2
5266: PPUSH
5267: CALL_OW 12
5271: PPUSH
5272: LD_VAR 0 2
5276: PPUSH
5277: LD_EXP 29
5281: PUSH
5282: LD_INT 2
5284: PLUS
5285: PPUSH
5286: CALL_OW 380
// hc_importance := 105 ;
5290: LD_ADDR_OWVAR 32
5294: PUSH
5295: LD_INT 105
5297: ST_TO_ADDR
// commander := false ;
5298: LD_ADDR_LOC 1
5302: PUSH
5303: LD_INT 0
5305: ST_TO_ADDR
// if Multiplayer then
5306: LD_OWVAR 4
5310: IFFALSE 5350
// begin hc_gallery := MULTIAVATARS ;
5312: LD_ADDR_OWVAR 33
5316: PUSH
5317: LD_STRING MULTIAVATARS
5319: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
5320: LD_ADDR_OWVAR 34
5324: PUSH
5325: LD_OWVAR 20
5329: PPUSH
5330: CALL_OW 525
5334: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
5335: LD_ADDR_OWVAR 27
5339: PUSH
5340: LD_OWVAR 20
5344: PPUSH
5345: CALL_OW 526
5349: ST_TO_ADDR
// end ; end else
5350: GO 5415
// begin hc_name :=  ;
5352: LD_ADDR_OWVAR 26
5356: PUSH
5357: LD_STRING 
5359: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
5360: LD_INT 1
5362: PPUSH
5363: LD_INT 2
5365: PPUSH
5366: CALL_OW 12
5370: PPUSH
5371: LD_VAR 0 2
5375: PPUSH
5376: LD_EXP 29
5380: PPUSH
5381: CALL_OW 380
// hc_importance := 0 ;
5385: LD_ADDR_OWVAR 32
5389: PUSH
5390: LD_INT 0
5392: ST_TO_ADDR
// if Multiplayer then
5393: LD_OWVAR 4
5397: IFFALSE 5415
// begin hc_gallery :=  ;
5399: LD_ADDR_OWVAR 33
5403: PUSH
5404: LD_STRING 
5406: ST_TO_ADDR
// hc_face_number := 0 ;
5407: LD_ADDR_OWVAR 34
5411: PUSH
5412: LD_INT 0
5414: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
5415: LD_ADDR_VAR 0 10
5419: PUSH
5420: CALL_OW 44
5424: ST_TO_ADDR
// if global_defined then
5425: LD_LOC 3
5429: IFFALSE 5569
// begin if ( cl = class_soldier ) then
5431: LD_VAR 0 2
5435: PUSH
5436: LD_INT 1
5438: EQUAL
5439: IFFALSE 5459
// j := i + soldiers_created else
5441: LD_ADDR_VAR 0 9
5445: PUSH
5446: LD_VAR 0 8
5450: PUSH
5451: LD_LOC 4
5455: PLUS
5456: ST_TO_ADDR
5457: GO 5469
// j := i ;
5459: LD_ADDR_VAR 0 9
5463: PUSH
5464: LD_VAR 0 8
5468: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
5469: LD_LOC 2
5473: PUSH
5474: LD_VAR 0 2
5478: ARRAY
5479: PUSH
5480: LD_VAR 0 9
5484: ARRAY
5485: PPUSH
5486: LD_VAR 0 10
5490: PPUSH
5491: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
5495: LD_VAR 0 10
5499: PPUSH
5500: LD_INT 2
5502: PPUSH
5503: LD_LOC 2
5507: PUSH
5508: LD_VAR 0 2
5512: ARRAY
5513: PUSH
5514: LD_VAR 0 9
5518: ARRAY
5519: PPUSH
5520: LD_INT 2
5522: PPUSH
5523: CALL_OW 260
5527: PPUSH
5528: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
5532: LD_VAR 0 10
5536: PPUSH
5537: LD_INT 1
5539: PPUSH
5540: LD_LOC 2
5544: PUSH
5545: LD_VAR 0 2
5549: ARRAY
5550: PUSH
5551: LD_VAR 0 9
5555: ARRAY
5556: PPUSH
5557: LD_INT 1
5559: PPUSH
5560: CALL_OW 260
5564: PPUSH
5565: CALL_OW 239
// end ; if building then
5569: LD_VAR 0 6
5573: IFFALSE 5591
// PlaceHumanInUnit ( un , building ) else
5575: LD_VAR 0 10
5579: PPUSH
5580: LD_VAR 0 6
5584: PPUSH
5585: CALL_OW 52
5589: GO 5618
// PlaceUnitXYR ( un , x , y , r , false ) ;
5591: LD_VAR 0 10
5595: PPUSH
5596: LD_VAR 0 3
5600: PPUSH
5601: LD_VAR 0 4
5605: PPUSH
5606: LD_VAR 0 5
5610: PPUSH
5611: LD_INT 0
5613: PPUSH
5614: CALL_OW 50
// result := result ^ [ un ] ;
5618: LD_ADDR_VAR 0 7
5622: PUSH
5623: LD_VAR 0 7
5627: PUSH
5628: LD_VAR 0 10
5632: PUSH
5633: EMPTY
5634: LIST
5635: ADD
5636: ST_TO_ADDR
// end ;
5637: GO 5220
5639: POP
5640: POP
// if not global_defined then
5641: LD_LOC 3
5645: NOT
5646: IFFALSE 5724
// if ( global_units >= cl ) then
5648: LD_LOC 2
5652: PUSH
5653: LD_VAR 0 2
5657: GREATEREQUAL
5658: IFFALSE 5699
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
5660: LD_ADDR_LOC 2
5664: PUSH
5665: LD_LOC 2
5669: PPUSH
5670: LD_VAR 0 2
5674: PPUSH
5675: LD_LOC 2
5679: PUSH
5680: LD_VAR 0 2
5684: ARRAY
5685: PUSH
5686: LD_VAR 0 7
5690: ADD
5691: PPUSH
5692: CALL_OW 1
5696: ST_TO_ADDR
5697: GO 5724
// global_units := Replace ( global_units , cl , result ) ;
5699: LD_ADDR_LOC 2
5703: PUSH
5704: LD_LOC 2
5708: PPUSH
5709: LD_VAR 0 2
5713: PPUSH
5714: LD_VAR 0 7
5718: PPUSH
5719: CALL_OW 1
5723: ST_TO_ADDR
// if commander then
5724: LD_LOC 1
5728: IFFALSE 5775
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
5730: LD_ADDR_EXP 57
5734: PUSH
5735: LD_EXP 57
5739: PPUSH
5740: LD_OWVAR 20
5744: PPUSH
5745: LD_EXP 57
5749: PUSH
5750: LD_OWVAR 20
5754: ARRAY
5755: PUSH
5756: LD_VAR 0 10
5760: ADD
5761: PPUSH
5762: CALL_OW 1
5766: ST_TO_ADDR
// commander := false ;
5767: LD_ADDR_LOC 1
5771: PUSH
5772: LD_INT 0
5774: ST_TO_ADDR
// end ; end ;
5775: LD_VAR 0 7
5779: RET
// function prepare_side_base ( side , base ) ; var pos , x , y , dir , i , r , un , br , dep , lab , fact , arm , mode , coord , max ; begin
5780: LD_INT 0
5782: PPUSH
5783: PPUSH
5784: PPUSH
5785: PPUSH
5786: PPUSH
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
5796: PPUSH
5797: PPUSH
// pos := Side_Positions [ side ] ;
5798: LD_ADDR_VAR 0 4
5802: PUSH
5803: LD_EXP 43
5807: PUSH
5808: LD_VAR 0 1
5812: ARRAY
5813: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
5814: LD_ADDR_OWVAR 21
5818: PUSH
5819: LD_EXP 44
5823: PUSH
5824: LD_VAR 0 1
5828: ARRAY
5829: ST_TO_ADDR
// uc_side := side ;
5830: LD_ADDR_OWVAR 20
5834: PUSH
5835: LD_VAR 0 1
5839: ST_TO_ADDR
// x := depots_def [ pos ] [ base ] [ 1 ] ;
5840: LD_ADDR_VAR 0 5
5844: PUSH
5845: LD_EXP 50
5849: PUSH
5850: LD_VAR 0 4
5854: ARRAY
5855: PUSH
5856: LD_VAR 0 2
5860: ARRAY
5861: PUSH
5862: LD_INT 1
5864: ARRAY
5865: ST_TO_ADDR
// y := depots_def [ pos ] [ base ] [ 2 ] ;
5866: LD_ADDR_VAR 0 6
5870: PUSH
5871: LD_EXP 50
5875: PUSH
5876: LD_VAR 0 4
5880: ARRAY
5881: PUSH
5882: LD_VAR 0 2
5886: ARRAY
5887: PUSH
5888: LD_INT 2
5890: ARRAY
5891: ST_TO_ADDR
// dir := depots_def [ pos ] [ base ] [ 3 ] ;
5892: LD_ADDR_VAR 0 7
5896: PUSH
5897: LD_EXP 50
5901: PUSH
5902: LD_VAR 0 4
5906: ARRAY
5907: PUSH
5908: LD_VAR 0 2
5912: ARRAY
5913: PUSH
5914: LD_INT 3
5916: ARRAY
5917: ST_TO_ADDR
// if is_depot [ base ] then
5918: LD_EXP 20
5922: PUSH
5923: LD_VAR 0 2
5927: ARRAY
5928: IFFALSE 6105
// begin if is_depot [ base ] = 1 then
5930: LD_EXP 20
5934: PUSH
5935: LD_VAR 0 2
5939: ARRAY
5940: PUSH
5941: LD_INT 1
5943: EQUAL
5944: IFFALSE 5956
// bc_type = b_depot else
5946: LD_ADDR_OWVAR 42
5950: PUSH
5951: LD_INT 0
5953: ST_TO_ADDR
5954: GO 5964
// bc_type = b_warehouse ;
5956: LD_ADDR_OWVAR 42
5960: PUSH
5961: LD_INT 1
5963: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
5964: LD_ADDR_VAR 0 12
5968: PUSH
5969: LD_VAR 0 5
5973: PPUSH
5974: LD_VAR 0 6
5978: PPUSH
5979: LD_VAR 0 7
5983: PPUSH
5984: CALL_OW 47
5988: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
5989: LD_VAR 0 12
5993: PPUSH
5994: LD_STRING @
5996: PUSH
5997: LD_VAR 0 1
6001: STR
6002: PPUSH
6003: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ base ] [ mat_cans ] ) ;
6007: LD_VAR 0 12
6011: PPUSH
6012: CALL_OW 274
6016: PPUSH
6017: LD_INT 1
6019: PPUSH
6020: LD_EXP 31
6024: PUSH
6025: LD_VAR 0 2
6029: ARRAY
6030: PUSH
6031: LD_INT 1
6033: ARRAY
6034: PPUSH
6035: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ base ] [ mat_oil ] ) ;
6039: LD_VAR 0 12
6043: PPUSH
6044: CALL_OW 274
6048: PPUSH
6049: LD_INT 2
6051: PPUSH
6052: LD_EXP 31
6056: PUSH
6057: LD_VAR 0 2
6061: ARRAY
6062: PUSH
6063: LD_INT 2
6065: ARRAY
6066: PPUSH
6067: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ base ] [ mat_siberit ] ) ;
6071: LD_VAR 0 12
6075: PPUSH
6076: CALL_OW 274
6080: PPUSH
6081: LD_INT 3
6083: PPUSH
6084: LD_EXP 31
6088: PUSH
6089: LD_VAR 0 2
6093: ARRAY
6094: PUSH
6095: LD_INT 3
6097: ARRAY
6098: PPUSH
6099: CALL_OW 277
// end else
6103: GO 6255
// begin for i := 1 to 3 do
6105: LD_ADDR_VAR 0 8
6109: PUSH
6110: DOUBLE
6111: LD_INT 1
6113: DEC
6114: ST_TO_ADDR
6115: LD_INT 3
6117: PUSH
6118: FOR_TO
6119: IFFALSE 6253
// begin r := starting_resources [ base ] [ i ] ;
6121: LD_ADDR_VAR 0 9
6125: PUSH
6126: LD_EXP 31
6130: PUSH
6131: LD_VAR 0 2
6135: ARRAY
6136: PUSH
6137: LD_VAR 0 8
6141: ARRAY
6142: ST_TO_ADDR
// while r >= 10 do
6143: LD_VAR 0 9
6147: PUSH
6148: LD_INT 10
6150: GREATEREQUAL
6151: IFFALSE 6251
// if r > 50 then
6153: LD_VAR 0 9
6157: PUSH
6158: LD_INT 50
6160: GREATER
6161: IFFALSE 6207
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
6163: LD_VAR 0 8
6167: PPUSH
6168: LD_INT 5
6170: PPUSH
6171: LD_VAR 0 5
6175: PPUSH
6176: LD_VAR 0 6
6180: PPUSH
6181: LD_INT 4
6183: PPUSH
6184: LD_INT 0
6186: PPUSH
6187: CALL_OW 60
// r := r - 50 ;
6191: LD_ADDR_VAR 0 9
6195: PUSH
6196: LD_VAR 0 9
6200: PUSH
6201: LD_INT 50
6203: MINUS
6204: ST_TO_ADDR
// end else
6205: GO 6249
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
6207: LD_VAR 0 8
6211: PPUSH
6212: LD_VAR 0 9
6216: PUSH
6217: LD_INT 10
6219: DIV
6220: PPUSH
6221: LD_VAR 0 5
6225: PPUSH
6226: LD_VAR 0 6
6230: PPUSH
6231: LD_INT 4
6233: PPUSH
6234: LD_INT 0
6236: PPUSH
6237: CALL_OW 60
// r := 0 ;
6241: LD_ADDR_VAR 0 9
6245: PUSH
6246: LD_INT 0
6248: ST_TO_ADDR
// end ;
6249: GO 6143
// end ;
6251: GO 6118
6253: POP
6254: POP
// end ; if is_lab [ base ] then
6255: LD_EXP 24
6259: PUSH
6260: LD_VAR 0 2
6264: ARRAY
6265: IFFALSE 6406
// begin if is_lab [ base ] = 1 then
6267: LD_EXP 24
6271: PUSH
6272: LD_VAR 0 2
6276: ARRAY
6277: PUSH
6278: LD_INT 1
6280: EQUAL
6281: IFFALSE 6309
// begin bc_type = b_lab ;
6283: LD_ADDR_OWVAR 42
6287: PUSH
6288: LD_INT 6
6290: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
6291: LD_ADDR_OWVAR 44
6295: PUSH
6296: LD_INT 9
6298: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
6299: LD_ADDR_OWVAR 45
6303: PUSH
6304: LD_INT 9
6306: ST_TO_ADDR
// end else
6307: GO 6333
// begin bc_type = b_lab_full ;
6309: LD_ADDR_OWVAR 42
6313: PUSH
6314: LD_INT 8
6316: ST_TO_ADDR
// bc_kind1 = b_lab_siberium ;
6317: LD_ADDR_OWVAR 44
6321: PUSH
6322: LD_INT 11
6324: ST_TO_ADDR
// bc_kind2 = b_lab_weapon ;
6325: LD_ADDR_OWVAR 45
6329: PUSH
6330: LD_INT 10
6332: ST_TO_ADDR
// end ; lab := CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ base ] [ 1 ] , labs_def [ pos ] [ base ] [ 2 ] , labs_def [ pos ] [ base ] [ 3 ] ) ;
6333: LD_ADDR_VAR 0 13
6337: PUSH
6338: LD_EXP 52
6342: PUSH
6343: LD_VAR 0 4
6347: ARRAY
6348: PUSH
6349: LD_VAR 0 2
6353: ARRAY
6354: PUSH
6355: LD_INT 1
6357: ARRAY
6358: PPUSH
6359: LD_EXP 52
6363: PUSH
6364: LD_VAR 0 4
6368: ARRAY
6369: PUSH
6370: LD_VAR 0 2
6374: ARRAY
6375: PUSH
6376: LD_INT 2
6378: ARRAY
6379: PPUSH
6380: LD_EXP 52
6384: PUSH
6385: LD_VAR 0 4
6389: ARRAY
6390: PUSH
6391: LD_VAR 0 2
6395: ARRAY
6396: PUSH
6397: LD_INT 3
6399: ARRAY
6400: PPUSH
6401: CALL_OW 47
6405: ST_TO_ADDR
// end ; if is_fact [ base ] then
6406: LD_EXP 25
6410: PUSH
6411: LD_VAR 0 2
6415: ARRAY
6416: IFFALSE 6525
// begin if is_fact [ base ] = 1 then
6418: LD_EXP 25
6422: PUSH
6423: LD_VAR 0 2
6427: ARRAY
6428: PUSH
6429: LD_INT 1
6431: EQUAL
6432: IFFALSE 6444
// bc_type = b_workshop else
6434: LD_ADDR_OWVAR 42
6438: PUSH
6439: LD_INT 2
6441: ST_TO_ADDR
6442: GO 6452
// bc_type = b_factory ;
6444: LD_ADDR_OWVAR 42
6448: PUSH
6449: LD_INT 3
6451: ST_TO_ADDR
// fact := CreateAndPlaceBuildingXYD ( factories_def [ pos ] [ base ] [ 1 ] , factories_def [ pos ] [ base ] [ 2 ] , factories_def [ pos ] [ base ] [ 3 ] ) ;
6452: LD_ADDR_VAR 0 14
6456: PUSH
6457: LD_EXP 53
6461: PUSH
6462: LD_VAR 0 4
6466: ARRAY
6467: PUSH
6468: LD_VAR 0 2
6472: ARRAY
6473: PUSH
6474: LD_INT 1
6476: ARRAY
6477: PPUSH
6478: LD_EXP 53
6482: PUSH
6483: LD_VAR 0 4
6487: ARRAY
6488: PUSH
6489: LD_VAR 0 2
6493: ARRAY
6494: PUSH
6495: LD_INT 2
6497: ARRAY
6498: PPUSH
6499: LD_EXP 53
6503: PUSH
6504: LD_VAR 0 4
6508: ARRAY
6509: PUSH
6510: LD_VAR 0 2
6514: ARRAY
6515: PUSH
6516: LD_INT 3
6518: ARRAY
6519: PPUSH
6520: CALL_OW 47
6524: ST_TO_ADDR
// end ; if is_arm [ base ] then
6525: LD_EXP 26
6529: PUSH
6530: LD_VAR 0 2
6534: ARRAY
6535: IFFALSE 6644
// begin if is_arm [ base ] = 1 then
6537: LD_EXP 26
6541: PUSH
6542: LD_VAR 0 2
6546: ARRAY
6547: PUSH
6548: LD_INT 1
6550: EQUAL
6551: IFFALSE 6563
// bc_type = b_armoury else
6553: LD_ADDR_OWVAR 42
6557: PUSH
6558: LD_INT 4
6560: ST_TO_ADDR
6561: GO 6571
// bc_type = b_barracks ;
6563: LD_ADDR_OWVAR 42
6567: PUSH
6568: LD_INT 5
6570: ST_TO_ADDR
// arm := CreateAndPlaceBuildingXYD ( armories_def [ pos ] [ base ] [ 1 ] , armories_def [ pos ] [ base ] [ 2 ] , armories_def [ pos ] [ base ] [ 3 ] ) ;
6571: LD_ADDR_VAR 0 15
6575: PUSH
6576: LD_EXP 54
6580: PUSH
6581: LD_VAR 0 4
6585: ARRAY
6586: PUSH
6587: LD_VAR 0 2
6591: ARRAY
6592: PUSH
6593: LD_INT 1
6595: ARRAY
6596: PPUSH
6597: LD_EXP 54
6601: PUSH
6602: LD_VAR 0 4
6606: ARRAY
6607: PUSH
6608: LD_VAR 0 2
6612: ARRAY
6613: PUSH
6614: LD_INT 2
6616: ARRAY
6617: PPUSH
6618: LD_EXP 54
6622: PUSH
6623: LD_VAR 0 4
6627: ARRAY
6628: PUSH
6629: LD_VAR 0 2
6633: ARRAY
6634: PUSH
6635: LD_INT 3
6637: ARRAY
6638: PPUSH
6639: CALL_OW 47
6643: ST_TO_ADDR
// end ; for i := 1 to number_of_pplants [ base ] do
6644: LD_ADDR_VAR 0 8
6648: PUSH
6649: DOUBLE
6650: LD_INT 1
6652: DEC
6653: ST_TO_ADDR
6654: LD_EXP 22
6658: PUSH
6659: LD_VAR 0 2
6663: ARRAY
6664: PUSH
6665: FOR_TO
6666: IFFALSE 6763
// begin bc_type = b_oil_power ;
6668: LD_ADDR_OWVAR 42
6672: PUSH
6673: LD_INT 26
6675: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( pplants_def [ pos ] [ base ] [ i ] [ 1 ] , pplants_def [ pos ] [ base ] [ i ] [ 2 ] , pplants_def [ pos ] [ base ] [ i ] [ 3 ] ) ;
6676: LD_EXP 55
6680: PUSH
6681: LD_VAR 0 4
6685: ARRAY
6686: PUSH
6687: LD_VAR 0 2
6691: ARRAY
6692: PUSH
6693: LD_VAR 0 8
6697: ARRAY
6698: PUSH
6699: LD_INT 1
6701: ARRAY
6702: PPUSH
6703: LD_EXP 55
6707: PUSH
6708: LD_VAR 0 4
6712: ARRAY
6713: PUSH
6714: LD_VAR 0 2
6718: ARRAY
6719: PUSH
6720: LD_VAR 0 8
6724: ARRAY
6725: PUSH
6726: LD_INT 2
6728: ARRAY
6729: PPUSH
6730: LD_EXP 55
6734: PUSH
6735: LD_VAR 0 4
6739: ARRAY
6740: PUSH
6741: LD_VAR 0 2
6745: ARRAY
6746: PUSH
6747: LD_VAR 0 8
6751: ARRAY
6752: PUSH
6753: LD_INT 3
6755: ARRAY
6756: PPUSH
6757: CALL_OW 47
// end ;
6761: GO 6665
6763: POP
6764: POP
// for i := 1 to deposits [ base ] [ 1 ] do
6765: LD_ADDR_VAR 0 8
6769: PUSH
6770: DOUBLE
6771: LD_INT 1
6773: DEC
6774: ST_TO_ADDR
6775: LD_EXP 28
6779: PUSH
6780: LD_VAR 0 2
6784: ARRAY
6785: PUSH
6786: LD_INT 1
6788: ARRAY
6789: PUSH
6790: FOR_TO
6791: IFFALSE 6928
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i ] , false ) ;
6793: LD_ADDR_VAR 0 17
6797: PUSH
6798: LD_EXP 56
6802: PUSH
6803: LD_VAR 0 4
6807: ARRAY
6808: PUSH
6809: LD_VAR 0 2
6813: ARRAY
6814: PUSH
6815: LD_VAR 0 8
6819: ARRAY
6820: PPUSH
6821: LD_INT 0
6823: PPUSH
6824: CALL_OW 16
6828: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_oil ) ;
6829: LD_VAR 0 17
6833: PUSH
6834: LD_INT 1
6836: ARRAY
6837: PPUSH
6838: LD_VAR 0 17
6842: PUSH
6843: LD_INT 2
6845: ARRAY
6846: PPUSH
6847: LD_INT 2
6849: PPUSH
6850: CALL_OW 62
// if are_mines [ base ] then
6854: LD_EXP 23
6858: PUSH
6859: LD_VAR 0 2
6863: ARRAY
6864: IFFALSE 6926
// begin bc_type = b_oil_mine ;
6866: LD_ADDR_OWVAR 42
6870: PUSH
6871: LD_INT 29
6873: ST_TO_ADDR
// SetResourceVisibility ( coord [ 1 ] , coord [ 2 ] , uc_side ) ;
6874: LD_VAR 0 17
6878: PUSH
6879: LD_INT 1
6881: ARRAY
6882: PPUSH
6883: LD_VAR 0 17
6887: PUSH
6888: LD_INT 2
6890: ARRAY
6891: PPUSH
6892: LD_OWVAR 20
6896: PPUSH
6897: CALL_OW 441
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
6901: LD_VAR 0 17
6905: PUSH
6906: LD_INT 1
6908: ARRAY
6909: PPUSH
6910: LD_VAR 0 17
6914: PUSH
6915: LD_INT 2
6917: ARRAY
6918: PPUSH
6919: LD_INT 0
6921: PPUSH
6922: CALL_OW 47
// end ; end ;
6926: GO 6790
6928: POP
6929: POP
// for i := 1 to deposits [ base ] [ 2 ] do
6930: LD_ADDR_VAR 0 8
6934: PUSH
6935: DOUBLE
6936: LD_INT 1
6938: DEC
6939: ST_TO_ADDR
6940: LD_EXP 28
6944: PUSH
6945: LD_VAR 0 2
6949: ARRAY
6950: PUSH
6951: LD_INT 2
6953: ARRAY
6954: PUSH
6955: FOR_TO
6956: IFFALSE 7115
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i + deposits [ base ] [ 1 ] ] , false ) ;
6958: LD_ADDR_VAR 0 17
6962: PUSH
6963: LD_EXP 56
6967: PUSH
6968: LD_VAR 0 4
6972: ARRAY
6973: PUSH
6974: LD_VAR 0 2
6978: ARRAY
6979: PUSH
6980: LD_VAR 0 8
6984: PUSH
6985: LD_EXP 28
6989: PUSH
6990: LD_VAR 0 2
6994: ARRAY
6995: PUSH
6996: LD_INT 1
6998: ARRAY
6999: PLUS
7000: ARRAY
7001: PPUSH
7002: LD_INT 0
7004: PPUSH
7005: CALL_OW 16
7009: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_siberit ) ;
7010: LD_VAR 0 17
7014: PUSH
7015: LD_INT 1
7017: ARRAY
7018: PPUSH
7019: LD_VAR 0 17
7023: PUSH
7024: LD_INT 2
7026: ARRAY
7027: PPUSH
7028: LD_INT 3
7030: PPUSH
7031: CALL_OW 62
// if are_mines [ base ] and def_siberite_detection then
7035: LD_EXP 23
7039: PUSH
7040: LD_VAR 0 2
7044: ARRAY
7045: PUSH
7046: LD_EXP 8
7050: AND
7051: IFFALSE 7113
// begin bc_type = b_siberite_mine ;
7053: LD_ADDR_OWVAR 42
7057: PUSH
7058: LD_INT 30
7060: ST_TO_ADDR
// SetResourceVisibility ( coord [ 1 ] , coord [ 2 ] , uc_side ) ;
7061: LD_VAR 0 17
7065: PUSH
7066: LD_INT 1
7068: ARRAY
7069: PPUSH
7070: LD_VAR 0 17
7074: PUSH
7075: LD_INT 2
7077: ARRAY
7078: PPUSH
7079: LD_OWVAR 20
7083: PPUSH
7084: CALL_OW 441
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
7088: LD_VAR 0 17
7092: PUSH
7093: LD_INT 1
7095: ARRAY
7096: PPUSH
7097: LD_VAR 0 17
7101: PUSH
7102: LD_INT 2
7104: ARRAY
7105: PPUSH
7106: LD_INT 0
7108: PPUSH
7109: CALL_OW 47
// end ; end ;
7113: GO 6955
7115: POP
7116: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
7117: LD_ADDR_VAR 0 5
7121: PUSH
7122: LD_EXP 49
7126: PUSH
7127: LD_VAR 0 4
7131: ARRAY
7132: PUSH
7133: LD_VAR 0 2
7137: ARRAY
7138: PUSH
7139: LD_INT 1
7141: ARRAY
7142: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
7143: LD_ADDR_VAR 0 6
7147: PUSH
7148: LD_EXP 49
7152: PUSH
7153: LD_VAR 0 4
7157: ARRAY
7158: PUSH
7159: LD_VAR 0 2
7163: ARRAY
7164: PUSH
7165: LD_INT 2
7167: ARRAY
7168: ST_TO_ADDR
// if base = 1 then
7169: LD_VAR 0 2
7173: PUSH
7174: LD_INT 1
7176: EQUAL
7177: IFFALSE 7285
// if def_morale_flags then
7179: LD_EXP 14
7183: IFFALSE 7285
// SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , def_bf_params [ 1 ] ] , [ bfo_defend_bonus_vehicle , def_bf_params [ 2 ] ] , [ bfo_defend_bonus_building , def_bf_params [ 3 ] ] , [ bfo_range , 17 ] , [ bfo_height , def_bf_params [ 4 ] ] ] ) ;
7185: LD_VAR 0 1
7189: PPUSH
7190: LD_VAR 0 5
7194: PPUSH
7195: LD_VAR 0 6
7199: PPUSH
7200: LD_INT 1
7202: PUSH
7203: LD_EXP 36
7207: PUSH
7208: LD_INT 1
7210: ARRAY
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: LD_INT 2
7218: PUSH
7219: LD_EXP 36
7223: PUSH
7224: LD_INT 2
7226: ARRAY
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: LD_INT 3
7234: PUSH
7235: LD_EXP 36
7239: PUSH
7240: LD_INT 3
7242: ARRAY
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PUSH
7248: LD_INT 10
7250: PUSH
7251: LD_INT 17
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PUSH
7258: LD_INT 20
7260: PUSH
7261: LD_EXP 36
7265: PUSH
7266: LD_INT 4
7268: ARRAY
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: PPUSH
7281: CALL_OW 418
// if number_of_people [ base ] then
7285: LD_EXP 21
7289: PUSH
7290: LD_VAR 0 2
7294: ARRAY
7295: IFFALSE 7504
// begin if No_Mechs then
7297: LD_EXP 68
7301: IFFALSE 7313
// Mode := 2 else
7303: LD_ADDR_VAR 0 16
7307: PUSH
7308: LD_INT 2
7310: ST_TO_ADDR
7311: GO 7321
// Mode := 1 ;
7313: LD_ADDR_VAR 0 16
7317: PUSH
7318: LD_INT 1
7320: ST_TO_ADDR
// neng := number_of_people [ base ] ;
7321: LD_ADDR_LOC 5
7325: PUSH
7326: LD_EXP 21
7330: PUSH
7331: LD_VAR 0 2
7335: ARRAY
7336: ST_TO_ADDR
// nmech := neng div [ 4 , 3 ] [ Mode ] ;
7337: LD_ADDR_LOC 7
7341: PUSH
7342: LD_LOC 5
7346: PUSH
7347: LD_INT 4
7349: PUSH
7350: LD_INT 3
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: PUSH
7357: LD_VAR 0 16
7361: ARRAY
7362: DIV
7363: ST_TO_ADDR
// neng := neng - nmech ;
7364: LD_ADDR_LOC 5
7368: PUSH
7369: LD_LOC 5
7373: PUSH
7374: LD_LOC 7
7378: MINUS
7379: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
7380: LD_ADDR_LOC 6
7384: PUSH
7385: LD_LOC 5
7389: PUSH
7390: LD_INT 3
7392: PUSH
7393: LD_INT 2
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: PUSH
7400: LD_VAR 0 16
7404: ARRAY
7405: DIV
7406: ST_TO_ADDR
// if ( nsci < 1 ) then
7407: LD_LOC 6
7411: PUSH
7412: LD_INT 1
7414: LESS
7415: IFFALSE 7425
// nsci := 1 ;
7417: LD_ADDR_LOC 6
7421: PUSH
7422: LD_INT 1
7424: ST_TO_ADDR
// neng := neng - nsci ;
7425: LD_ADDR_LOC 5
7429: PUSH
7430: LD_LOC 5
7434: PUSH
7435: LD_LOC 6
7439: MINUS
7440: ST_TO_ADDR
// nsol := [ neng div 2 , 0 ] [ Mode ] ;
7441: LD_ADDR_LOC 8
7445: PUSH
7446: LD_LOC 5
7450: PUSH
7451: LD_INT 2
7453: DIV
7454: PUSH
7455: LD_INT 0
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: LD_VAR 0 16
7466: ARRAY
7467: ST_TO_ADDR
// neng := neng - nsol ;
7468: LD_ADDR_LOC 5
7472: PUSH
7473: LD_LOC 5
7477: PUSH
7478: LD_LOC 8
7482: MINUS
7483: ST_TO_ADDR
// if ( neng < 1 ) then
7484: LD_LOC 5
7488: PUSH
7489: LD_INT 1
7491: LESS
7492: IFFALSE 7502
// neng := 1 ;
7494: LD_ADDR_LOC 5
7498: PUSH
7499: LD_INT 1
7501: ST_TO_ADDR
// end else
7502: GO 7536
// begin neng := 0 ;
7504: LD_ADDR_LOC 5
7508: PUSH
7509: LD_INT 0
7511: ST_TO_ADDR
// nsci := 0 ;
7512: LD_ADDR_LOC 6
7516: PUSH
7517: LD_INT 0
7519: ST_TO_ADDR
// nmech := 0 ;
7520: LD_ADDR_LOC 7
7524: PUSH
7525: LD_INT 0
7527: ST_TO_ADDR
// nsol := 0 ;
7528: LD_ADDR_LOC 8
7532: PUSH
7533: LD_INT 0
7535: ST_TO_ADDR
// end ; commander := true ;
7536: LD_ADDR_LOC 1
7540: PUSH
7541: LD_INT 1
7543: ST_TO_ADDR
// soldiers_created := 0 ;
7544: LD_ADDR_LOC 4
7548: PUSH
7549: LD_INT 0
7551: ST_TO_ADDR
// for i := 1 to are_breastworks [ base ] do
7552: LD_ADDR_VAR 0 8
7556: PUSH
7557: DOUBLE
7558: LD_INT 1
7560: DEC
7561: ST_TO_ADDR
7562: LD_EXP 27
7566: PUSH
7567: LD_VAR 0 2
7571: ARRAY
7572: PUSH
7573: FOR_TO
7574: IFFALSE 7860
// begin if are_breastworks [ base ] [ i ] = 1 then
7576: LD_EXP 27
7580: PUSH
7581: LD_VAR 0 2
7585: ARRAY
7586: PUSH
7587: LD_VAR 0 8
7591: ARRAY
7592: PUSH
7593: LD_INT 1
7595: EQUAL
7596: IFFALSE 7608
// bc_type := b_breastwork else
7598: LD_ADDR_OWVAR 42
7602: PUSH
7603: LD_INT 31
7605: ST_TO_ADDR
7606: GO 7616
// bc_type := b_bunker ;
7608: LD_ADDR_OWVAR 42
7612: PUSH
7613: LD_INT 32
7615: ST_TO_ADDR
// x := breastworks_def [ pos ] [ base ] [ i ] [ 1 ] ;
7616: LD_ADDR_VAR 0 5
7620: PUSH
7621: LD_EXP 51
7625: PUSH
7626: LD_VAR 0 4
7630: ARRAY
7631: PUSH
7632: LD_VAR 0 2
7636: ARRAY
7637: PUSH
7638: LD_VAR 0 8
7642: ARRAY
7643: PUSH
7644: LD_INT 1
7646: ARRAY
7647: ST_TO_ADDR
// y := breastworks_def [ pos ] [ base ] [ i ] [ 2 ] ;
7648: LD_ADDR_VAR 0 6
7652: PUSH
7653: LD_EXP 51
7657: PUSH
7658: LD_VAR 0 4
7662: ARRAY
7663: PUSH
7664: LD_VAR 0 2
7668: ARRAY
7669: PUSH
7670: LD_VAR 0 8
7674: ARRAY
7675: PUSH
7676: LD_INT 2
7678: ARRAY
7679: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ base ] [ i ] [ 3 ] ;
7680: LD_ADDR_VAR 0 7
7684: PUSH
7685: LD_EXP 51
7689: PUSH
7690: LD_VAR 0 4
7694: ARRAY
7695: PUSH
7696: LD_VAR 0 2
7700: ARRAY
7701: PUSH
7702: LD_VAR 0 8
7706: ARRAY
7707: PUSH
7708: LD_INT 3
7710: ARRAY
7711: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
7712: LD_ADDR_VAR 0 11
7716: PUSH
7717: LD_VAR 0 5
7721: PPUSH
7722: LD_VAR 0 6
7726: PPUSH
7727: LD_VAR 0 7
7731: PPUSH
7732: CALL_OW 47
7736: ST_TO_ADDR
// if bc_type = b_bunker then
7737: LD_OWVAR 42
7741: PUSH
7742: LD_INT 32
7744: EQUAL
7745: IFFALSE 7822
// case uc_nation of nation_american :
7747: LD_OWVAR 21
7751: PUSH
7752: LD_INT 1
7754: DOUBLE
7755: EQUAL
7756: IFTRUE 7760
7758: GO 7775
7760: POP
// PlaceWeaponTurret ( br , us_machine_gun ) ; nation_arabian :
7761: LD_VAR 0 11
7765: PPUSH
7766: LD_INT 2
7768: PPUSH
7769: CALL_OW 431
7773: GO 7822
7775: LD_INT 2
7777: DOUBLE
7778: EQUAL
7779: IFTRUE 7783
7781: GO 7798
7783: POP
// PlaceWeaponTurret ( br , ar_double_machine_gun ) ; nation_russian :
7784: LD_VAR 0 11
7788: PPUSH
7789: LD_INT 24
7791: PPUSH
7792: CALL_OW 431
7796: GO 7822
7798: LD_INT 3
7800: DOUBLE
7801: EQUAL
7802: IFTRUE 7806
7804: GO 7821
7806: POP
// PlaceWeaponTurret ( br , ru_heavy_machine_gun ) ; end ;
7807: LD_VAR 0 11
7811: PPUSH
7812: LD_INT 42
7814: PPUSH
7815: CALL_OW 431
7819: GO 7822
7821: POP
// if i <= nsol then
7822: LD_VAR 0 8
7826: PUSH
7827: LD_LOC 8
7831: LESSEQUAL
7832: IFFALSE 7858
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
7834: LD_INT 1
7836: PPUSH
7837: LD_INT 1
7839: PPUSH
7840: LD_INT 0
7842: PPUSH
7843: LD_INT 0
7845: PPUSH
7846: LD_INT 0
7848: PPUSH
7849: LD_VAR 0 11
7853: PPUSH
7854: CALL 5192 0 6
// end ;
7858: GO 7573
7860: POP
7861: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
7862: LD_ADDR_VAR 0 5
7866: PUSH
7867: LD_EXP 49
7871: PUSH
7872: LD_VAR 0 4
7876: ARRAY
7877: PUSH
7878: LD_VAR 0 2
7882: ARRAY
7883: PUSH
7884: LD_INT 1
7886: ARRAY
7887: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
7888: LD_ADDR_VAR 0 6
7892: PUSH
7893: LD_EXP 49
7897: PUSH
7898: LD_VAR 0 4
7902: ARRAY
7903: PUSH
7904: LD_VAR 0 2
7908: ARRAY
7909: PUSH
7910: LD_INT 2
7912: ARRAY
7913: ST_TO_ADDR
// if nsol > are_breastworks [ base ] then
7914: LD_LOC 8
7918: PUSH
7919: LD_EXP 27
7923: PUSH
7924: LD_VAR 0 2
7928: ARRAY
7929: GREATER
7930: IFFALSE 8018
// if arm then
7932: LD_VAR 0 15
7936: IFFALSE 7978
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , 0 , 0 , 0 , arm ) else
7938: LD_LOC 8
7942: PUSH
7943: LD_EXP 27
7947: PUSH
7948: LD_VAR 0 2
7952: ARRAY
7953: MINUS
7954: PPUSH
7955: LD_INT 1
7957: PPUSH
7958: LD_INT 0
7960: PPUSH
7961: LD_INT 0
7963: PPUSH
7964: LD_INT 0
7966: PPUSH
7967: LD_VAR 0 15
7971: PPUSH
7972: CALL 5192 0 6
7976: GO 8018
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , x , y , 5 , 0 ) ;
7978: LD_LOC 8
7982: PUSH
7983: LD_EXP 27
7987: PUSH
7988: LD_VAR 0 2
7992: ARRAY
7993: MINUS
7994: PPUSH
7995: LD_INT 1
7997: PPUSH
7998: LD_VAR 0 5
8002: PPUSH
8003: LD_VAR 0 6
8007: PPUSH
8008: LD_INT 5
8010: PPUSH
8011: LD_INT 0
8013: PPUSH
8014: CALL 5192 0 6
// if dep then
8018: LD_VAR 0 12
8022: IFFALSE 8052
// prepare_people ( neng , class_engineer , 0 , 0 , 0 , dep ) else
8024: LD_LOC 5
8028: PPUSH
8029: LD_INT 2
8031: PPUSH
8032: LD_INT 0
8034: PPUSH
8035: LD_INT 0
8037: PPUSH
8038: LD_INT 0
8040: PPUSH
8041: LD_VAR 0 12
8045: PPUSH
8046: CALL 5192 0 6
8050: GO 8080
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
8052: LD_LOC 5
8056: PPUSH
8057: LD_INT 2
8059: PPUSH
8060: LD_VAR 0 5
8064: PPUSH
8065: LD_VAR 0 6
8069: PPUSH
8070: LD_INT 5
8072: PPUSH
8073: LD_INT 0
8075: PPUSH
8076: CALL 5192 0 6
// if fact then
8080: LD_VAR 0 14
8084: IFFALSE 8114
// prepare_people ( nmech , class_mechanic , 0 , 0 , 0 , fact ) else
8086: LD_LOC 7
8090: PPUSH
8091: LD_INT 3
8093: PPUSH
8094: LD_INT 0
8096: PPUSH
8097: LD_INT 0
8099: PPUSH
8100: LD_INT 0
8102: PPUSH
8103: LD_VAR 0 14
8107: PPUSH
8108: CALL 5192 0 6
8112: GO 8142
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
8114: LD_LOC 7
8118: PPUSH
8119: LD_INT 3
8121: PPUSH
8122: LD_VAR 0 5
8126: PPUSH
8127: LD_VAR 0 6
8131: PPUSH
8132: LD_INT 5
8134: PPUSH
8135: LD_INT 0
8137: PPUSH
8138: CALL 5192 0 6
// if lab then
8142: LD_VAR 0 13
8146: IFFALSE 8176
// prepare_people ( nsci , class_scientistic , 0 , 0 , 0 , lab ) else
8148: LD_LOC 6
8152: PPUSH
8153: LD_INT 4
8155: PPUSH
8156: LD_INT 0
8158: PPUSH
8159: LD_INT 0
8161: PPUSH
8162: LD_INT 0
8164: PPUSH
8165: LD_VAR 0 13
8169: PPUSH
8170: CALL 5192 0 6
8174: GO 8204
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
8176: LD_LOC 6
8180: PPUSH
8181: LD_INT 4
8183: PPUSH
8184: LD_VAR 0 5
8188: PPUSH
8189: LD_VAR 0 6
8193: PPUSH
8194: LD_INT 5
8196: PPUSH
8197: LD_INT 0
8199: PPUSH
8200: CALL 5192 0 6
// max = 0 ;
8204: LD_ADDR_VAR 0 18
8208: PUSH
8209: LD_INT 0
8211: ST_TO_ADDR
// for un in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
8212: LD_ADDR_VAR 0 10
8216: PUSH
8217: LD_INT 22
8219: PUSH
8220: LD_VAR 0 1
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PUSH
8229: LD_INT 21
8231: PUSH
8232: LD_INT 1
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: PPUSH
8243: CALL_OW 69
8247: PUSH
8248: FOR_IN
8249: IFFALSE 8291
// begin if GetSkill ( un , skill_engineering ) > max then
8251: LD_VAR 0 10
8255: PPUSH
8256: LD_INT 2
8258: PPUSH
8259: CALL_OW 259
8263: PUSH
8264: LD_VAR 0 18
8268: GREATER
8269: IFFALSE 8289
// max := GetSkill ( un , skill_engineering ) ;
8271: LD_ADDR_VAR 0 18
8275: PUSH
8276: LD_VAR 0 10
8280: PPUSH
8281: LD_INT 2
8283: PPUSH
8284: CALL_OW 259
8288: ST_TO_ADDR
// end ;
8289: GO 8248
8291: POP
8292: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) , max ) ;
8293: LD_INT 22
8295: PUSH
8296: LD_VAR 0 1
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: PUSH
8305: LD_INT 21
8307: PUSH
8308: LD_INT 3
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: PPUSH
8319: CALL_OW 69
8323: PPUSH
8324: LD_VAR 0 18
8328: PPUSH
8329: CALL_OW 241
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
8333: LD_EXP 8
8337: PUSH
8338: LD_INT 20
8340: PPUSH
8341: LD_VAR 0 1
8345: PPUSH
8346: CALL_OW 321
8350: PUSH
8351: LD_INT 1
8353: EQUAL
8354: AND
8355: IFFALSE 8372
// SetTech ( tech_SibDet , side , state_researched ) ;
8357: LD_INT 20
8359: PPUSH
8360: LD_VAR 0 1
8364: PPUSH
8365: LD_INT 2
8367: PPUSH
8368: CALL_OW 322
// if def_siberite_bomb = 1 then
8372: LD_EXP 15
8376: PUSH
8377: LD_INT 1
8379: EQUAL
8380: IFFALSE 8414
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
8382: LD_INT 25
8384: PPUSH
8385: LD_VAR 0 1
8389: PPUSH
8390: LD_INT 1
8392: PPUSH
8393: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
8397: LD_INT 73
8399: PPUSH
8400: LD_VAR 0 1
8404: PPUSH
8405: LD_INT 1
8407: PPUSH
8408: CALL_OW 322
// end else
8412: GO 8444
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
8414: LD_INT 25
8416: PPUSH
8417: LD_VAR 0 1
8421: PPUSH
8422: LD_INT 0
8424: PPUSH
8425: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
8429: LD_INT 73
8431: PPUSH
8432: LD_VAR 0 1
8436: PPUSH
8437: LD_INT 0
8439: PPUSH
8440: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
8444: LD_INT 24
8446: PPUSH
8447: LD_VAR 0 1
8451: PPUSH
8452: LD_INT 0
8454: PPUSH
8455: CALL_OW 322
// global_defined := true ;
8459: LD_ADDR_LOC 3
8463: PUSH
8464: LD_INT 1
8466: ST_TO_ADDR
// end ;
8467: LD_VAR 0 3
8471: RET
// every 0 0$1 do
8472: GO 8474
8474: DISABLE
// if ( def_siberite_bomb > 1 ) then
8475: LD_EXP 15
8479: PUSH
8480: LD_INT 1
8482: GREATER
8483: IFFALSE 8498
// begin wait ( siberite_bomb_Delay ) ;
8485: LD_EXP 38
8489: PPUSH
8490: CALL_OW 67
// EnableSibFiss ;
8494: CALL 8499 0 0
// end ;
8498: END
// function EnableSibFiss ; var i ; begin
8499: LD_INT 0
8501: PPUSH
8502: PPUSH
// for i := 1 to 8 do
8503: LD_ADDR_VAR 0 2
8507: PUSH
8508: DOUBLE
8509: LD_INT 1
8511: DEC
8512: ST_TO_ADDR
8513: LD_INT 8
8515: PUSH
8516: FOR_TO
8517: IFFALSE 8548
// if Side_Positions [ i ] then
8519: LD_EXP 43
8523: PUSH
8524: LD_VAR 0 2
8528: ARRAY
8529: IFFALSE 8546
// SetTech ( tech_SibFiss , i , state_enabled ) ;
8531: LD_INT 25
8533: PPUSH
8534: LD_VAR 0 2
8538: PPUSH
8539: LD_INT 1
8541: PPUSH
8542: CALL_OW 322
8546: GO 8516
8548: POP
8549: POP
// end ;
8550: LD_VAR 0 1
8554: RET
// function prepare_sides ; var i ; begin
8555: LD_INT 0
8557: PPUSH
8558: PPUSH
// global_units := [ ] ;
8559: LD_ADDR_LOC 2
8563: PUSH
8564: EMPTY
8565: ST_TO_ADDR
// global_defined := false ;
8566: LD_ADDR_LOC 3
8570: PUSH
8571: LD_INT 0
8573: ST_TO_ADDR
// for i := 1 to Side_Positions do
8574: LD_ADDR_VAR 0 2
8578: PUSH
8579: DOUBLE
8580: LD_INT 1
8582: DEC
8583: ST_TO_ADDR
8584: LD_EXP 43
8588: PUSH
8589: FOR_TO
8590: IFFALSE 8630
// if Side_Positions [ i ] then
8592: LD_EXP 43
8596: PUSH
8597: LD_VAR 0 2
8601: ARRAY
8602: IFFALSE 8628
// begin prepare_side_base ( i , 1 ) ;
8604: LD_VAR 0 2
8608: PPUSH
8609: LD_INT 1
8611: PPUSH
8612: CALL 5780 0 2
// prepare_side_base ( i , 2 ) ;
8616: LD_VAR 0 2
8620: PPUSH
8621: LD_INT 2
8623: PPUSH
8624: CALL 5780 0 2
// end ;
8628: GO 8589
8630: POP
8631: POP
// end ;
8632: LD_VAR 0 1
8636: RET
// starting begin disable ( 98 ) ;
8637: LD_INT 98
8639: DISABLE_MARKED
// disable ( 400 ) ;
8640: LD_INT 400
8642: DISABLE_MARKED
// disable ( 401 ) ;
8643: LD_INT 401
8645: DISABLE_MARKED
// disable ( 600 ) ;
8646: LD_INT 600
8648: DISABLE_MARKED
// enable_human_prediction := true ;
8649: LD_ADDR_OWVAR 51
8653: PUSH
8654: LD_INT 1
8656: ST_TO_ADDR
// mp_selectmsg := true ;
8657: LD_ADDR_OWVAR 13
8661: PUSH
8662: LD_INT 1
8664: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
8665: CALL 68 0 0
// prepare_map_coordinates ;
8669: CALL 3695 0 0
// ResetFog ;
8673: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
8677: LD_OWVAR 2
8681: PPUSH
8682: CALL_OW 520
// prepare_sides ;
8686: CALL 8555 0 0
// Init_Win_Condition ;
8690: CALL 16139 0 0
// InitLimits ;
8694: CALL 14799 0 0
// ShowTimer ;
8698: CALL 15736 0 0
// music_nat := Side_Nations [ your_side ] ;
8702: LD_ADDR_OWVAR 71
8706: PUSH
8707: LD_EXP 44
8711: PUSH
8712: LD_OWVAR 2
8716: ARRAY
8717: ST_TO_ADDR
// if IAmSpec then
8718: CALL_OW 531
8722: IFFALSE 8746
// begin fogoff ( true ) ;
8724: LD_INT 1
8726: PPUSH
8727: CALL_OW 344
// CenterNowOnXY ( 109 , 61 ) ;
8731: LD_INT 109
8733: PPUSH
8734: LD_INT 61
8736: PPUSH
8737: CALL_OW 86
// enable ( 400 ) ;
8741: LD_INT 400
8743: ENABLE_MARKED
// end else
8744: GO 8800
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 2 ] ) ;
8746: LD_EXP 49
8750: PUSH
8751: LD_EXP 43
8755: PUSH
8756: LD_OWVAR 2
8760: ARRAY
8761: ARRAY
8762: PUSH
8763: LD_INT 1
8765: ARRAY
8766: PUSH
8767: LD_INT 1
8769: ARRAY
8770: PPUSH
8771: LD_EXP 49
8775: PUSH
8776: LD_EXP 43
8780: PUSH
8781: LD_OWVAR 2
8785: ARRAY
8786: ARRAY
8787: PUSH
8788: LD_INT 1
8790: ARRAY
8791: PUSH
8792: LD_INT 2
8794: ARRAY
8795: PPUSH
8796: CALL_OW 86
// end ; InitApeman ;
8800: CALL 10226 0 0
// if def_builduptime then
8804: LD_EXP 17
8808: IFFALSE 8814
// BeginBuildUp ;
8810: CALL 13416 0 0
// end ; end_of_file
8814: END
// every 1 1$0 + 0 0$0.3 do
8815: GO 8817
8817: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
8818: LD_INT 4
8820: PPUSH
8821: LD_INT 5
8823: PPUSH
8824: CALL_OW 12
8828: PPUSH
8829: LD_INT 1
8831: PPUSH
8832: CALL_OW 57
// enable ;
8836: ENABLE
// end ;
8837: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
8838: GO 8840
8840: DISABLE
8841: LD_INT 0
8843: PPUSH
8844: PPUSH
// begin case tick of 1 .. 1 1$0 :
8845: LD_OWVAR 1
8849: PUSH
8850: LD_INT 1
8852: DOUBLE
8853: GREATEREQUAL
8854: IFFALSE 8862
8856: LD_INT 2100
8858: DOUBLE
8859: LESSEQUAL
8860: IFTRUE 8864
8862: GO 8892
8864: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
8865: LD_EXP 32
8869: PUSH
8870: LD_INT 100
8872: DIVREAL
8873: PUSH
8874: LD_INT 350
8876: PPUSH
8877: LD_INT 700
8879: PPUSH
8880: CALL_OW 12
8884: MUL
8885: PPUSH
8886: CALL_OW 67
8890: GO 9194
8892: LD_INT 2100
8894: PUSH
8895: LD_INT 1
8897: PLUS
8898: DOUBLE
8899: GREATEREQUAL
8900: IFFALSE 8908
8902: LD_INT 10500
8904: DOUBLE
8905: LESSEQUAL
8906: IFTRUE 8910
8908: GO 8938
8910: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
8911: LD_EXP 32
8915: PUSH
8916: LD_INT 100
8918: DIVREAL
8919: PUSH
8920: LD_INT 700
8922: PPUSH
8923: LD_INT 1225
8925: PPUSH
8926: CALL_OW 12
8930: MUL
8931: PPUSH
8932: CALL_OW 67
8936: GO 9194
8938: LD_INT 10500
8940: PUSH
8941: LD_INT 1
8943: PLUS
8944: DOUBLE
8945: GREATEREQUAL
8946: IFFALSE 8954
8948: LD_INT 21000
8950: DOUBLE
8951: LESSEQUAL
8952: IFTRUE 8956
8954: GO 8984
8956: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
8957: LD_EXP 32
8961: PUSH
8962: LD_INT 100
8964: DIVREAL
8965: PUSH
8966: LD_INT 1225
8968: PPUSH
8969: LD_INT 1750
8971: PPUSH
8972: CALL_OW 12
8976: MUL
8977: PPUSH
8978: CALL_OW 67
8982: GO 9194
8984: LD_INT 21000
8986: PUSH
8987: LD_INT 1
8989: PLUS
8990: DOUBLE
8991: GREATEREQUAL
8992: IFFALSE 9000
8994: LD_INT 42000
8996: DOUBLE
8997: LESSEQUAL
8998: IFTRUE 9002
9000: GO 9030
9002: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
9003: LD_EXP 32
9007: PUSH
9008: LD_INT 100
9010: DIVREAL
9011: PUSH
9012: LD_INT 1750
9014: PPUSH
9015: LD_INT 2450
9017: PPUSH
9018: CALL_OW 12
9022: MUL
9023: PPUSH
9024: CALL_OW 67
9028: GO 9194
9030: LD_INT 42000
9032: PUSH
9033: LD_INT 1
9035: PLUS
9036: DOUBLE
9037: GREATEREQUAL
9038: IFFALSE 9046
9040: LD_INT 63000
9042: DOUBLE
9043: LESSEQUAL
9044: IFTRUE 9048
9046: GO 9076
9048: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
9049: LD_EXP 32
9053: PUSH
9054: LD_INT 100
9056: DIVREAL
9057: PUSH
9058: LD_INT 2450
9060: PPUSH
9061: LD_INT 2800
9063: PPUSH
9064: CALL_OW 12
9068: MUL
9069: PPUSH
9070: CALL_OW 67
9074: GO 9194
9076: LD_INT 63000
9078: PUSH
9079: LD_INT 1
9081: PLUS
9082: DOUBLE
9083: GREATEREQUAL
9084: IFFALSE 9092
9086: LD_INT 105000
9088: DOUBLE
9089: LESSEQUAL
9090: IFTRUE 9094
9092: GO 9122
9094: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
9095: LD_EXP 32
9099: PUSH
9100: LD_INT 100
9102: DIVREAL
9103: PUSH
9104: LD_INT 2800
9106: PPUSH
9107: LD_INT 3325
9109: PPUSH
9110: CALL_OW 12
9114: MUL
9115: PPUSH
9116: CALL_OW 67
9120: GO 9194
9122: LD_INT 105000
9124: PUSH
9125: LD_INT 1
9127: PLUS
9128: DOUBLE
9129: GREATEREQUAL
9130: IFFALSE 9138
9132: LD_INT 630000
9134: DOUBLE
9135: LESSEQUAL
9136: IFTRUE 9140
9138: GO 9168
9140: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
9141: LD_EXP 32
9145: PUSH
9146: LD_INT 100
9148: DIVREAL
9149: PUSH
9150: LD_INT 3325
9152: PPUSH
9153: LD_INT 4200
9155: PPUSH
9156: CALL_OW 12
9160: MUL
9161: PPUSH
9162: CALL_OW 67
9166: GO 9194
9168: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
9169: LD_EXP 32
9173: PUSH
9174: LD_INT 100
9176: DIVREAL
9177: PUSH
9178: LD_INT 4200
9180: PPUSH
9181: LD_INT 5250
9183: PPUSH
9184: CALL_OW 12
9188: MUL
9189: PPUSH
9190: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
9194: LD_ADDR_VAR 0 2
9198: PUSH
9199: LD_INT 3
9201: PPUSH
9202: LD_INT 5
9204: PPUSH
9205: CALL_OW 12
9209: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
9210: LD_ADDR_VAR 0 1
9214: PUSH
9215: LD_EXP 43
9219: PUSH
9220: LD_INT 0
9222: PUSH
9223: EMPTY
9224: LIST
9225: DIFF
9226: PUSH
9227: FOR_IN
9228: IFFALSE 9277
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
9230: LD_VAR 0 2
9234: PPUSH
9235: LD_EXP 49
9239: PUSH
9240: LD_VAR 0 1
9244: ARRAY
9245: PUSH
9246: LD_INT 1
9248: ARRAY
9249: PPUSH
9250: LD_EXP 49
9254: PUSH
9255: LD_VAR 0 1
9259: ARRAY
9260: PUSH
9261: LD_INT 2
9263: ARRAY
9264: PPUSH
9265: LD_INT 20
9267: PPUSH
9268: LD_INT 1
9270: PPUSH
9271: CALL_OW 56
9275: GO 9227
9277: POP
9278: POP
// enable ;
9279: ENABLE
// end ;
9280: PPOPN 2
9282: END
// every 0 0$20 + 0 0$0.9 do var i , filter ;
9283: GO 9285
9285: DISABLE
9286: LD_INT 0
9288: PPUSH
9289: PPUSH
// begin if GetResourceArea ( Valley , mat_cans ) < ( ( 300 - shipments_density ) / 100 * 5 ) then
9290: LD_INT 12
9292: PPUSH
9293: LD_INT 1
9295: PPUSH
9296: CALL_OW 287
9300: PUSH
9301: LD_INT 300
9303: PUSH
9304: LD_EXP 32
9308: MINUS
9309: PUSH
9310: LD_INT 100
9312: DIVREAL
9313: PUSH
9314: LD_INT 5
9316: MUL
9317: LESS
9318: IFFALSE 9341
// CreateCratesArea ( Rand ( 3 , 5 ) , Valley , true ) ;
9320: LD_INT 3
9322: PPUSH
9323: LD_INT 5
9325: PPUSH
9326: CALL_OW 12
9330: PPUSH
9331: LD_INT 12
9333: PPUSH
9334: LD_INT 1
9336: PPUSH
9337: CALL_OW 55
// enable ;
9341: ENABLE
// end ; end_of_file
9342: PPOPN 2
9344: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
9345: LD_VAR 0 1
9349: PPUSH
9350: CALL_OW 266
9354: PUSH
9355: LD_INT 0
9357: PUSH
9358: LD_INT 1
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: IN
9365: IFFALSE 9390
// SetBName ( b , @ & GetSide ( b ) ) ;
9367: LD_VAR 0 1
9371: PPUSH
9372: LD_STRING @
9374: PUSH
9375: LD_VAR 0 1
9379: PPUSH
9380: CALL_OW 255
9384: STR
9385: PPUSH
9386: CALL_OW 500
// if def_game_rules then
9390: LD_EXP 67
9394: IFFALSE 9431
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
9396: LD_VAR 0 1
9400: PPUSH
9401: LD_VAR 0 1
9405: PPUSH
9406: CALL_OW 266
9410: PPUSH
9411: LD_VAR 0 1
9415: PPUSH
9416: CALL_OW 255
9420: PPUSH
9421: LD_INT 0
9423: PPUSH
9424: LD_INT 1
9426: PPUSH
9427: CALL 15200 0 5
// end ;
9431: PPOPN 2
9433: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
9434: LD_VAR 0 1
9438: PPUSH
9439: CALL_OW 266
9443: PUSH
9444: LD_INT 0
9446: PUSH
9447: LD_INT 1
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: IN
9454: IFFALSE 9479
// SetBName ( b , @ & GetSide ( b ) ) ;
9456: LD_VAR 0 1
9460: PPUSH
9461: LD_STRING @
9463: PUSH
9464: LD_VAR 0 1
9468: PPUSH
9469: CALL_OW 255
9473: STR
9474: PPUSH
9475: CALL_OW 500
// if def_game_rules then
9479: LD_EXP 67
9483: IFFALSE 9522
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
9485: LD_VAR 0 1
9489: PPUSH
9490: LD_VAR 0 1
9494: PPUSH
9495: CALL_OW 266
9499: PPUSH
9500: LD_VAR 0 1
9504: PPUSH
9505: CALL_OW 255
9509: PPUSH
9510: LD_VAR 0 2
9514: PPUSH
9515: LD_INT 1
9517: PPUSH
9518: CALL 15200 0 5
// end ;
9522: PPOPN 3
9524: END
// on VehicleConstructed ( veh , fac ) do var side ;
9525: LD_INT 0
9527: PPUSH
// begin if GetControl ( veh ) = control_apeman then
9528: LD_VAR 0 1
9532: PPUSH
9533: CALL_OW 263
9537: PUSH
9538: LD_INT 5
9540: EQUAL
9541: IFFALSE 9683
// begin side := GetSide ( veh ) ;
9543: LD_ADDR_VAR 0 3
9547: PUSH
9548: LD_VAR 0 1
9552: PPUSH
9553: CALL_OW 255
9557: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
9558: LD_ADDR_EXP 61
9562: PUSH
9563: LD_EXP 61
9567: PPUSH
9568: LD_VAR 0 3
9572: PPUSH
9573: LD_EXP 61
9577: PUSH
9578: LD_VAR 0 3
9582: ARRAY
9583: PPUSH
9584: LD_INT 52
9586: PUSH
9587: EMPTY
9588: LIST
9589: PPUSH
9590: CALL_OW 72
9594: PUSH
9595: LD_INT 22
9597: PUSH
9598: LD_VAR 0 3
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 2
9609: PUSH
9610: LD_INT 33
9612: PUSH
9613: LD_INT 5
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 25
9622: PUSH
9623: LD_INT 12
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 25
9632: PUSH
9633: LD_INT 15
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: LD_INT 25
9642: PUSH
9643: LD_INT 16
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PUSH
9650: LD_INT 25
9652: PUSH
9653: LD_INT 17
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: PPUSH
9672: CALL_OW 69
9676: UNION
9677: PPUSH
9678: CALL_OW 1
9682: ST_TO_ADDR
// end ; end ;
9683: PPOPN 3
9685: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
9686: LD_INT 0
9688: PPUSH
9689: PPUSH
9690: PPUSH
9691: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
9692: LD_VAR 0 1
9696: PPUSH
9697: CALL_OW 257
9701: PUSH
9702: LD_INT 12
9704: PUSH
9705: LD_INT 15
9707: PUSH
9708: LD_INT 17
9710: PUSH
9711: LD_INT 16
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: IN
9720: PUSH
9721: LD_VAR 0 1
9725: PPUSH
9726: CALL_OW 263
9730: PUSH
9731: LD_INT 5
9733: EQUAL
9734: OR
9735: IFFALSE 9746
// ApeKilled ( j ) ;
9737: LD_VAR 0 1
9741: PPUSH
9742: CALL 10899 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
9746: LD_VAR 0 1
9750: PPUSH
9751: CALL_OW 266
9755: PUSH
9756: LD_INT 0
9758: PUSH
9759: LD_INT 1
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: IN
9766: IFFALSE 9848
// begin pos := Side_Positions [ GetSide ( j ) ] ;
9768: LD_ADDR_VAR 0 4
9772: PUSH
9773: LD_EXP 43
9777: PUSH
9778: LD_VAR 0 1
9782: PPUSH
9783: CALL_OW 255
9787: ARRAY
9788: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
9789: LD_ADDR_VAR 0 2
9793: PUSH
9794: LD_EXP 49
9798: PUSH
9799: LD_VAR 0 4
9803: ARRAY
9804: PUSH
9805: LD_INT 1
9807: ARRAY
9808: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
9809: LD_ADDR_VAR 0 3
9813: PUSH
9814: LD_EXP 49
9818: PUSH
9819: LD_VAR 0 4
9823: ARRAY
9824: PUSH
9825: LD_INT 2
9827: ARRAY
9828: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
9829: LD_VAR 0 2
9833: PPUSH
9834: LD_VAR 0 3
9838: PPUSH
9839: CALL_OW 420
9843: PPUSH
9844: CALL_OW 419
// end ; if def_game_rules then
9848: LD_EXP 67
9852: IFFALSE 9951
// if ( GetType ( j ) = 3 ) then
9854: LD_VAR 0 1
9858: PPUSH
9859: CALL_OW 247
9863: PUSH
9864: LD_INT 3
9866: EQUAL
9867: IFFALSE 9907
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
9869: LD_VAR 0 1
9873: PPUSH
9874: LD_VAR 0 1
9878: PPUSH
9879: CALL_OW 266
9883: PPUSH
9884: LD_VAR 0 1
9888: PPUSH
9889: CALL_OW 255
9893: PPUSH
9894: LD_INT 0
9896: PPUSH
9897: LD_INT 1
9899: NEG
9900: PPUSH
9901: CALL 15200 0 5
9905: GO 9951
// if ( GetChassis ( j ) = 25 ) then
9907: LD_VAR 0 1
9911: PPUSH
9912: CALL_OW 265
9916: PUSH
9917: LD_INT 25
9919: EQUAL
9920: IFFALSE 9951
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
9922: LD_VAR 0 1
9926: PPUSH
9927: LD_INT 37
9929: PPUSH
9930: LD_VAR 0 1
9934: PPUSH
9935: CALL_OW 255
9939: PPUSH
9940: LD_INT 0
9942: PPUSH
9943: LD_INT 1
9945: NEG
9946: PPUSH
9947: CALL 15200 0 5
// end ;
9951: PPOPN 5
9953: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
9954: LD_EXP 67
9958: PUSH
9959: LD_VAR 0 1
9963: PPUSH
9964: CALL_OW 265
9968: PUSH
9969: LD_INT 25
9971: EQUAL
9972: AND
9973: IFFALSE 10005
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
9975: LD_VAR 0 1
9979: PPUSH
9980: LD_INT 37
9982: PPUSH
9983: LD_VAR 0 1
9987: PPUSH
9988: CALL_OW 255
9992: PPUSH
9993: LD_VAR 0 3
9997: PPUSH
9998: LD_INT 1
10000: PPUSH
10001: CALL 15200 0 5
// end ;
10005: PPOPN 4
10007: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
10008: LD_VAR 0 1
10012: PPUSH
10013: LD_VAR 0 2
10017: PPUSH
10018: LD_VAR 0 3
10022: PPUSH
10023: LD_OWVAR 2
10027: PPUSH
10028: CALL 15900 0 4
10032: PPOPN 3
10034: END
// every 20 20$00 trigger apemanNumber do
10035: LD_EXP 58
10039: IFFALSE 10072
10041: GO 10043
10043: DISABLE
// begin enable ;
10044: ENABLE
// if apeLevel >= 8 then
10045: LD_EXP 63
10049: PUSH
10050: LD_INT 8
10052: GREATEREQUAL
10053: IFFALSE 10058
// disable else
10055: DISABLE
10056: GO 10072
// apeLevel := apeLevel + 1 ;
10058: LD_ADDR_EXP 63
10062: PUSH
10063: LD_EXP 63
10067: PUSH
10068: LD_INT 1
10070: PLUS
10071: ST_TO_ADDR
// end ;
10072: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
10073: LD_EXP 58
10077: PUSH
10078: LD_EXP 59
10082: LESS
10083: IFFALSE 10223
10085: GO 10087
10087: DISABLE
10088: LD_INT 0
10090: PPUSH
10091: PPUSH
10092: PPUSH
10093: PPUSH
// begin enable ;
10094: ENABLE
// for i := 1 to apemanPos do
10095: LD_ADDR_VAR 0 1
10099: PUSH
10100: DOUBLE
10101: LD_INT 1
10103: DEC
10104: ST_TO_ADDR
10105: LD_EXP 61
10109: PUSH
10110: FOR_TO
10111: IFFALSE 10221
// begin if apemanPlayerCount [ i ] then
10113: LD_EXP 62
10117: PUSH
10118: LD_VAR 0 1
10122: ARRAY
10123: IFFALSE 10219
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
10125: LD_EXP 62
10129: PUSH
10130: LD_VAR 0 1
10134: ARRAY
10135: PUSH
10136: LD_EXP 61
10140: PUSH
10141: LD_VAR 0 1
10145: ARRAY
10146: GREATER
10147: IFFALSE 10219
// begin ape := PrepareApeman ;
10149: LD_ADDR_VAR 0 2
10153: PUSH
10154: CALL 10718 0 0
10158: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
10159: LD_VAR 0 2
10163: PPUSH
10164: LD_EXP 64
10168: PUSH
10169: LD_VAR 0 1
10173: ARRAY
10174: PPUSH
10175: LD_INT 0
10177: PPUSH
10178: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
10182: LD_ADDR_EXP 61
10186: PUSH
10187: LD_EXP 61
10191: PPUSH
10192: LD_VAR 0 1
10196: PPUSH
10197: LD_EXP 61
10201: PUSH
10202: LD_VAR 0 1
10206: ARRAY
10207: PUSH
10208: LD_VAR 0 2
10212: UNION
10213: PPUSH
10214: CALL_OW 1
10218: ST_TO_ADDR
// end ; end ; end ;
10219: GO 10110
10221: POP
10222: POP
// end ;
10223: PPOPN 4
10225: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
10226: LD_INT 0
10228: PPUSH
10229: PPUSH
10230: PPUSH
10231: PPUSH
10232: PPUSH
10233: PPUSH
10234: PPUSH
// playersAmount := 0 ;
10235: LD_ADDR_VAR 0 3
10239: PUSH
10240: LD_INT 0
10242: ST_TO_ADDR
// _apeAreas := [ Ar1Out3 , Ar2Out3 ] ;
10243: LD_ADDR_VAR 0 7
10247: PUSH
10248: LD_INT 24
10250: PUSH
10251: LD_INT 18
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10258: LD_ADDR_EXP 64
10262: PUSH
10263: LD_INT 0
10265: PUSH
10266: LD_INT 0
10268: PUSH
10269: LD_INT 0
10271: PUSH
10272: LD_INT 0
10274: PUSH
10275: LD_INT 0
10277: PUSH
10278: LD_INT 0
10280: PUSH
10281: LD_INT 0
10283: PUSH
10284: LD_INT 0
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: ST_TO_ADDR
// for j = 1 to Side_Positions do
10297: LD_ADDR_VAR 0 4
10301: PUSH
10302: DOUBLE
10303: LD_INT 1
10305: DEC
10306: ST_TO_ADDR
10307: LD_EXP 43
10311: PUSH
10312: FOR_TO
10313: IFFALSE 10380
// if Side_Positions [ j ] then
10315: LD_EXP 43
10319: PUSH
10320: LD_VAR 0 4
10324: ARRAY
10325: IFFALSE 10378
// begin playersAmount := playersAmount + 1 ;
10327: LD_ADDR_VAR 0 3
10331: PUSH
10332: LD_VAR 0 3
10336: PUSH
10337: LD_INT 1
10339: PLUS
10340: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
10341: LD_ADDR_EXP 64
10345: PUSH
10346: LD_EXP 64
10350: PPUSH
10351: LD_VAR 0 4
10355: PPUSH
10356: LD_VAR 0 7
10360: PUSH
10361: LD_EXP 43
10365: PUSH
10366: LD_VAR 0 4
10370: ARRAY
10371: ARRAY
10372: PPUSH
10373: CALL_OW 1
10377: ST_TO_ADDR
// end ;
10378: GO 10312
10380: POP
10381: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
10382: LD_ADDR_EXP 60
10386: PUSH
10387: LD_INT 3
10389: PUSH
10390: LD_EXP 37
10394: MUL
10395: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
10396: LD_ADDR_EXP 58
10400: PUSH
10401: LD_VAR 0 3
10405: PUSH
10406: LD_EXP 60
10410: MUL
10411: ST_TO_ADDR
// apemanLimit := apemanNumber ;
10412: LD_ADDR_EXP 59
10416: PUSH
10417: LD_EXP 58
10421: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10422: LD_ADDR_EXP 61
10426: PUSH
10427: LD_INT 0
10429: PUSH
10430: LD_INT 0
10432: PUSH
10433: LD_INT 0
10435: PUSH
10436: LD_INT 0
10438: PUSH
10439: LD_INT 0
10441: PUSH
10442: LD_INT 0
10444: PUSH
10445: LD_INT 0
10447: PUSH
10448: LD_INT 0
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10461: LD_ADDR_EXP 62
10465: PUSH
10466: LD_INT 0
10468: PUSH
10469: LD_INT 0
10471: PUSH
10472: LD_INT 0
10474: PUSH
10475: LD_INT 0
10477: PUSH
10478: LD_INT 0
10480: PUSH
10481: LD_INT 0
10483: PUSH
10484: LD_INT 0
10486: PUSH
10487: LD_INT 0
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: ST_TO_ADDR
// apeLevel := 1 ;
10500: LD_ADDR_EXP 63
10504: PUSH
10505: LD_INT 1
10507: ST_TO_ADDR
// if not apemanNumber then
10508: LD_EXP 58
10512: NOT
10513: IFFALSE 10517
// exit ;
10515: GO 10713
// for i := 1 to apemanPerPlayer do
10517: LD_ADDR_VAR 0 2
10521: PUSH
10522: DOUBLE
10523: LD_INT 1
10525: DEC
10526: ST_TO_ADDR
10527: LD_EXP 60
10531: PUSH
10532: FOR_TO
10533: IFFALSE 10711
// begin for j := 1 to Side_Positions do
10535: LD_ADDR_VAR 0 4
10539: PUSH
10540: DOUBLE
10541: LD_INT 1
10543: DEC
10544: ST_TO_ADDR
10545: LD_EXP 43
10549: PUSH
10550: FOR_TO
10551: IFFALSE 10707
// if Side_Positions [ j ] then
10553: LD_EXP 43
10557: PUSH
10558: LD_VAR 0 4
10562: ARRAY
10563: IFFALSE 10705
// begin pos := Side_Positions [ j ] ;
10565: LD_ADDR_VAR 0 6
10569: PUSH
10570: LD_EXP 43
10574: PUSH
10575: LD_VAR 0 4
10579: ARRAY
10580: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
10581: LD_ADDR_EXP 62
10585: PUSH
10586: LD_EXP 62
10590: PPUSH
10591: LD_VAR 0 4
10595: PPUSH
10596: LD_EXP 62
10600: PUSH
10601: LD_VAR 0 4
10605: ARRAY
10606: PUSH
10607: LD_INT 1
10609: PLUS
10610: PPUSH
10611: CALL_OW 1
10615: ST_TO_ADDR
// ape := PrepareApeman ;
10616: LD_ADDR_VAR 0 5
10620: PUSH
10621: CALL 10718 0 0
10625: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
10626: LD_ADDR_EXP 61
10630: PUSH
10631: LD_EXP 61
10635: PPUSH
10636: LD_VAR 0 4
10640: PPUSH
10641: LD_EXP 61
10645: PUSH
10646: LD_VAR 0 4
10650: ARRAY
10651: PPUSH
10652: LD_EXP 61
10656: PUSH
10657: LD_VAR 0 4
10661: ARRAY
10662: PUSH
10663: LD_INT 1
10665: PLUS
10666: PPUSH
10667: LD_VAR 0 5
10671: PPUSH
10672: CALL_OW 1
10676: PPUSH
10677: CALL_OW 1
10681: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
10682: LD_VAR 0 5
10686: PPUSH
10687: LD_EXP 64
10691: PUSH
10692: LD_VAR 0 4
10696: ARRAY
10697: PPUSH
10698: LD_INT 0
10700: PPUSH
10701: CALL_OW 49
// end ;
10705: GO 10550
10707: POP
10708: POP
// end ;
10709: GO 10532
10711: POP
10712: POP
// end ;
10713: LD_VAR 0 1
10717: RET
// export function PrepareApeman ; var bonus ; begin
10718: LD_INT 0
10720: PPUSH
10721: PPUSH
// uc_side := 0 ;
10722: LD_ADDR_OWVAR 20
10726: PUSH
10727: LD_INT 0
10729: ST_TO_ADDR
// uc_nation := 0 ;
10730: LD_ADDR_OWVAR 21
10734: PUSH
10735: LD_INT 0
10737: ST_TO_ADDR
// InitHc ;
10738: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
10742: LD_ADDR_VAR 0 2
10746: PUSH
10747: LD_INT 1
10749: NEG
10750: PUSH
10751: LD_INT 0
10753: PUSH
10754: LD_INT 1
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: LIST
10761: PUSH
10762: LD_OWVAR 1
10766: PUSH
10767: LD_INT 3
10769: MOD
10770: PUSH
10771: LD_INT 1
10773: PLUS
10774: ARRAY
10775: ST_TO_ADDR
// hc_class := class_apeman ;
10776: LD_ADDR_OWVAR 28
10780: PUSH
10781: LD_INT 12
10783: ST_TO_ADDR
// hc_gallery :=  ;
10784: LD_ADDR_OWVAR 33
10788: PUSH
10789: LD_STRING 
10791: ST_TO_ADDR
// hc_name :=  ;
10792: LD_ADDR_OWVAR 26
10796: PUSH
10797: LD_STRING 
10799: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
10800: LD_ADDR_OWVAR 31
10804: PUSH
10805: LD_EXP 63
10809: PUSH
10810: LD_VAR 0 2
10814: PLUS
10815: PUSH
10816: LD_EXP 63
10820: PUSH
10821: LD_VAR 0 2
10825: PLUS
10826: PUSH
10827: LD_EXP 63
10831: PUSH
10832: LD_VAR 0 2
10836: PLUS
10837: PUSH
10838: LD_EXP 63
10842: PUSH
10843: LD_VAR 0 2
10847: PLUS
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
10855: LD_ADDR_OWVAR 35
10859: PUSH
10860: LD_INT 10
10862: PUSH
10863: LD_VAR 0 2
10867: MUL
10868: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
10869: LD_ADDR_OWVAR 29
10873: PUSH
10874: LD_INT 12
10876: PUSH
10877: LD_INT 10
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: ST_TO_ADDR
// result := CreateHuman ;
10884: LD_ADDR_VAR 0 1
10888: PUSH
10889: CALL_OW 44
10893: ST_TO_ADDR
// end ;
10894: LD_VAR 0 1
10898: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
10899: LD_INT 0
10901: PPUSH
10902: PPUSH
10903: PPUSH
// if not ape then
10904: LD_VAR 0 1
10908: NOT
10909: IFFALSE 10913
// exit ;
10911: GO 11038
// side := GetSide ( ape ) ;
10913: LD_ADDR_VAR 0 3
10917: PUSH
10918: LD_VAR 0 1
10922: PPUSH
10923: CALL_OW 255
10927: ST_TO_ADDR
// if not side then
10928: LD_VAR 0 3
10932: NOT
10933: IFFALSE 10987
// begin for i = 1 to apemanPos do
10935: LD_ADDR_VAR 0 4
10939: PUSH
10940: DOUBLE
10941: LD_INT 1
10943: DEC
10944: ST_TO_ADDR
10945: LD_EXP 61
10949: PUSH
10950: FOR_TO
10951: IFFALSE 10985
// if ape in apemanPos [ i ] then
10953: LD_VAR 0 1
10957: PUSH
10958: LD_EXP 61
10962: PUSH
10963: LD_VAR 0 4
10967: ARRAY
10968: IN
10969: IFFALSE 10983
// begin side := i ;
10971: LD_ADDR_VAR 0 3
10975: PUSH
10976: LD_VAR 0 4
10980: ST_TO_ADDR
// break ;
10981: GO 10985
// end ;
10983: GO 10950
10985: POP
10986: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
10987: LD_ADDR_EXP 61
10991: PUSH
10992: LD_EXP 61
10996: PPUSH
10997: LD_VAR 0 3
11001: PPUSH
11002: LD_EXP 61
11006: PUSH
11007: LD_VAR 0 3
11011: ARRAY
11012: PUSH
11013: LD_VAR 0 1
11017: DIFF
11018: PPUSH
11019: CALL_OW 1
11023: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
11024: LD_ADDR_EXP 58
11028: PUSH
11029: LD_EXP 58
11033: PUSH
11034: LD_INT 1
11036: MINUS
11037: ST_TO_ADDR
// end ; end_of_file
11038: LD_VAR 0 2
11042: RET
// var free , free1 , free2 , new1 , new2 , arr1 , arr2 , seenby1 , seenby2 ; function displ_status ; var s1 , s2 ; begin
11043: LD_INT 0
11045: PPUSH
11046: PPUSH
11047: PPUSH
// if not def_people_arrivals then
11048: LD_EXP 11
11052: NOT
11053: IFFALSE 11057
// exit ;
11055: GO 11198
// if def_people_loyality then
11057: LD_EXP 12
11061: IFFALSE 11177
// begin s1 := [ #Multi1x1-InfoL , Position_Sides [ 1 ] , ( free1 + 0 ) ] ;
11063: LD_ADDR_VAR 0 2
11067: PUSH
11068: LD_STRING #Multi1x1-InfoL
11070: PUSH
11071: LD_EXP 46
11075: PUSH
11076: LD_INT 1
11078: ARRAY
11079: PUSH
11080: LD_LOC 10
11084: PUSH
11085: LD_INT 0
11087: PLUS
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: LIST
11093: ST_TO_ADDR
// s2 := [ #Multi1x1-InfoL , Position_Sides [ 2 ] , ( free2 + 0 ) ] ;
11094: LD_ADDR_VAR 0 3
11098: PUSH
11099: LD_STRING #Multi1x1-InfoL
11101: PUSH
11102: LD_EXP 46
11106: PUSH
11107: LD_INT 2
11109: ARRAY
11110: PUSH
11111: LD_LOC 11
11115: PUSH
11116: LD_INT 0
11118: PLUS
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: LIST
11124: ST_TO_ADDR
// if Side_Positions [ your_side ] <> 2 then
11125: LD_EXP 43
11129: PUSH
11130: LD_OWVAR 2
11134: ARRAY
11135: PUSH
11136: LD_INT 2
11138: NONEQUAL
11139: IFFALSE 11159
// ExtraStrings := s1 ^ s2 else
11141: LD_ADDR_EXP 69
11145: PUSH
11146: LD_VAR 0 2
11150: PUSH
11151: LD_VAR 0 3
11155: ADD
11156: ST_TO_ADDR
11157: GO 11175
// ExtraStrings := s2 ^ s1 ;
11159: LD_ADDR_EXP 69
11163: PUSH
11164: LD_VAR 0 3
11168: PUSH
11169: LD_VAR 0 2
11173: ADD
11174: ST_TO_ADDR
// end else
11175: GO 11198
// begin ExtraStrings := [ #Multi1x1-InfoNonL , ( free + 0 ) ] ;
11177: LD_ADDR_EXP 69
11181: PUSH
11182: LD_STRING #Multi1x1-InfoNonL
11184: PUSH
11185: LD_LOC 9
11189: PUSH
11190: LD_INT 0
11192: PLUS
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: ST_TO_ADDR
// end ; end ;
11198: LD_VAR 0 1
11202: RET
// every 0 0$1 do
11203: GO 11205
11205: DISABLE
// begin if not text_info then
11206: LD_EXP 34
11210: NOT
11211: IFFALSE 11215
// exit ;
11213: GO 11220
// displ_status ;
11215: CALL 11043 0 0
// enable ;
11219: ENABLE
// end ;
11220: END
// export function prepare_arrivals ; var i , ar , p1 , p2 , pom1 , pom2 ; begin
11221: LD_INT 0
11223: PPUSH
11224: PPUSH
11225: PPUSH
11226: PPUSH
11227: PPUSH
11228: PPUSH
11229: PPUSH
// arr1 := [ ] ;
11230: LD_ADDR_LOC 14
11234: PUSH
11235: EMPTY
11236: ST_TO_ADDR
// arr2 := [ ] ;
11237: LD_ADDR_LOC 15
11241: PUSH
11242: EMPTY
11243: ST_TO_ADDR
// for i := 1 to max_arriving_times do
11244: LD_ADDR_VAR 0 2
11248: PUSH
11249: DOUBLE
11250: LD_INT 1
11252: DEC
11253: ST_TO_ADDR
11254: LD_EXP 33
11258: PUSH
11259: FOR_TO
11260: IFFALSE 11796
// begin case rand ( 1 , 100 ) of 1 .. 45 :
11262: LD_INT 1
11264: PPUSH
11265: LD_INT 100
11267: PPUSH
11268: CALL_OW 12
11272: PUSH
11273: LD_INT 1
11275: DOUBLE
11276: GREATEREQUAL
11277: IFFALSE 11285
11279: LD_INT 45
11281: DOUBLE
11282: LESSEQUAL
11283: IFTRUE 11287
11285: GO 11494
11287: POP
// case rand ( 1 , 100 ) of 1 .. 10 :
11288: LD_INT 1
11290: PPUSH
11291: LD_INT 100
11293: PPUSH
11294: CALL_OW 12
11298: PUSH
11299: LD_INT 1
11301: DOUBLE
11302: GREATEREQUAL
11303: IFFALSE 11311
11305: LD_INT 10
11307: DOUBLE
11308: LESSEQUAL
11309: IFTRUE 11313
11311: GO 11331
11313: POP
// ar := [ Ar1Base1 , Ar2Base1 ] ; 11 .. 20 :
11314: LD_ADDR_VAR 0 3
11318: PUSH
11319: LD_INT 19
11321: PUSH
11322: LD_INT 15
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: ST_TO_ADDR
11329: GO 11492
11331: LD_INT 11
11333: DOUBLE
11334: GREATEREQUAL
11335: IFFALSE 11343
11337: LD_INT 20
11339: DOUBLE
11340: LESSEQUAL
11341: IFTRUE 11345
11343: GO 11363
11345: POP
// ar := [ Ar1Base2 , Ar2Base2 ] ; 21 .. 30 :
11346: LD_ADDR_VAR 0 3
11350: PUSH
11351: LD_INT 20
11353: PUSH
11354: LD_INT 14
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: ST_TO_ADDR
11361: GO 11492
11363: LD_INT 21
11365: DOUBLE
11366: GREATEREQUAL
11367: IFFALSE 11375
11369: LD_INT 30
11371: DOUBLE
11372: LESSEQUAL
11373: IFTRUE 11377
11375: GO 11395
11377: POP
// ar := [ Ar1Between , Ar2Between ] ; 31 .. 55 :
11378: LD_ADDR_VAR 0 3
11382: PUSH
11383: LD_INT 22
11385: PUSH
11386: LD_INT 16
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: ST_TO_ADDR
11393: GO 11492
11395: LD_INT 31
11397: DOUBLE
11398: GREATEREQUAL
11399: IFFALSE 11407
11401: LD_INT 55
11403: DOUBLE
11404: LESSEQUAL
11405: IFTRUE 11409
11407: GO 11427
11409: POP
// ar := [ Ar1Out2 , Ar2Out2 ] ; 56 .. 80 :
11410: LD_ADDR_VAR 0 3
11414: PUSH
11415: LD_INT 23
11417: PUSH
11418: LD_INT 17
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: ST_TO_ADDR
11425: GO 11492
11427: LD_INT 56
11429: DOUBLE
11430: GREATEREQUAL
11431: IFFALSE 11439
11433: LD_INT 80
11435: DOUBLE
11436: LESSEQUAL
11437: IFTRUE 11441
11439: GO 11459
11441: POP
// ar := [ Ar1Out1 , Ar2Out1 ] ; 81 .. 100 :
11442: LD_ADDR_VAR 0 3
11446: PUSH
11447: LD_INT 21
11449: PUSH
11450: LD_INT 13
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: ST_TO_ADDR
11457: GO 11492
11459: LD_INT 81
11461: DOUBLE
11462: GREATEREQUAL
11463: IFFALSE 11471
11465: LD_INT 100
11467: DOUBLE
11468: LESSEQUAL
11469: IFTRUE 11473
11471: GO 11491
11473: POP
// ar := [ Ar1Out3 , Ar2Out3 ] ; end ; 46 .. 85 :
11474: LD_ADDR_VAR 0 3
11478: PUSH
11479: LD_INT 24
11481: PUSH
11482: LD_INT 18
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: ST_TO_ADDR
11489: GO 11492
11491: POP
11492: GO 11748
11494: LD_INT 46
11496: DOUBLE
11497: GREATEREQUAL
11498: IFFALSE 11506
11500: LD_INT 85
11502: DOUBLE
11503: LESSEQUAL
11504: IFTRUE 11508
11506: GO 11715
11508: POP
// case rand ( 1 , 100 ) of 1 .. 5 :
11509: LD_INT 1
11511: PPUSH
11512: LD_INT 100
11514: PPUSH
11515: CALL_OW 12
11519: PUSH
11520: LD_INT 1
11522: DOUBLE
11523: GREATEREQUAL
11524: IFFALSE 11532
11526: LD_INT 5
11528: DOUBLE
11529: LESSEQUAL
11530: IFTRUE 11534
11532: GO 11552
11534: POP
// ar := [ Ar2Base1 , Ar1Base1 ] ; 6 .. 15 :
11535: LD_ADDR_VAR 0 3
11539: PUSH
11540: LD_INT 15
11542: PUSH
11543: LD_INT 19
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: ST_TO_ADDR
11550: GO 11713
11552: LD_INT 6
11554: DOUBLE
11555: GREATEREQUAL
11556: IFFALSE 11564
11558: LD_INT 15
11560: DOUBLE
11561: LESSEQUAL
11562: IFTRUE 11566
11564: GO 11584
11566: POP
// ar := [ Ar2Base2 , Ar1Base2 ] ; 16 .. 30 :
11567: LD_ADDR_VAR 0 3
11571: PUSH
11572: LD_INT 14
11574: PUSH
11575: LD_INT 20
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: ST_TO_ADDR
11582: GO 11713
11584: LD_INT 16
11586: DOUBLE
11587: GREATEREQUAL
11588: IFFALSE 11596
11590: LD_INT 30
11592: DOUBLE
11593: LESSEQUAL
11594: IFTRUE 11598
11596: GO 11616
11598: POP
// ar := [ Ar2Between , Ar1Between ] ; 31 .. 50 :
11599: LD_ADDR_VAR 0 3
11603: PUSH
11604: LD_INT 16
11606: PUSH
11607: LD_INT 22
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: ST_TO_ADDR
11614: GO 11713
11616: LD_INT 31
11618: DOUBLE
11619: GREATEREQUAL
11620: IFFALSE 11628
11622: LD_INT 50
11624: DOUBLE
11625: LESSEQUAL
11626: IFTRUE 11630
11628: GO 11648
11630: POP
// ar := [ Ar2Out2 , Ar1Out2 ] ; 51 .. 75 :
11631: LD_ADDR_VAR 0 3
11635: PUSH
11636: LD_INT 17
11638: PUSH
11639: LD_INT 23
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: ST_TO_ADDR
11646: GO 11713
11648: LD_INT 51
11650: DOUBLE
11651: GREATEREQUAL
11652: IFFALSE 11660
11654: LD_INT 75
11656: DOUBLE
11657: LESSEQUAL
11658: IFTRUE 11662
11660: GO 11680
11662: POP
// ar := [ Ar2Out1 , Ar1Out1 ] ; 76 .. 100 :
11663: LD_ADDR_VAR 0 3
11667: PUSH
11668: LD_INT 13
11670: PUSH
11671: LD_INT 21
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: ST_TO_ADDR
11678: GO 11713
11680: LD_INT 76
11682: DOUBLE
11683: GREATEREQUAL
11684: IFFALSE 11692
11686: LD_INT 100
11688: DOUBLE
11689: LESSEQUAL
11690: IFTRUE 11694
11692: GO 11712
11694: POP
// ar := [ Ar2Out3 , Ar1Out3 ] ; end ; 86 .. 100 :
11695: LD_ADDR_VAR 0 3
11699: PUSH
11700: LD_INT 18
11702: PUSH
11703: LD_INT 24
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: ST_TO_ADDR
11710: GO 11713
11712: POP
11713: GO 11748
11715: LD_INT 86
11717: DOUBLE
11718: GREATEREQUAL
11719: IFFALSE 11727
11721: LD_INT 100
11723: DOUBLE
11724: LESSEQUAL
11725: IFTRUE 11729
11727: GO 11747
11729: POP
// ar := [ valley , valley ] ; end ;
11730: LD_ADDR_VAR 0 3
11734: PUSH
11735: LD_INT 12
11737: PUSH
11738: LD_INT 12
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: ST_TO_ADDR
11745: GO 11748
11747: POP
// arr1 := arr1 ^ [ ar [ 1 ] ] ;
11748: LD_ADDR_LOC 14
11752: PUSH
11753: LD_LOC 14
11757: PUSH
11758: LD_VAR 0 3
11762: PUSH
11763: LD_INT 1
11765: ARRAY
11766: PUSH
11767: EMPTY
11768: LIST
11769: ADD
11770: ST_TO_ADDR
// arr2 := arr2 ^ [ ar [ 2 ] ] ;
11771: LD_ADDR_LOC 15
11775: PUSH
11776: LD_LOC 15
11780: PUSH
11781: LD_VAR 0 3
11785: PUSH
11786: LD_INT 2
11788: ARRAY
11789: PUSH
11790: EMPTY
11791: LIST
11792: ADD
11793: ST_TO_ADDR
// end ;
11794: GO 11259
11796: POP
11797: POP
// for i := 1 to max_arriving_times div 2 do
11798: LD_ADDR_VAR 0 2
11802: PUSH
11803: DOUBLE
11804: LD_INT 1
11806: DEC
11807: ST_TO_ADDR
11808: LD_EXP 33
11812: PUSH
11813: LD_INT 2
11815: DIV
11816: PUSH
11817: FOR_TO
11818: IFFALSE 11930
// begin p1 := Rand ( 1 , max_arriving_times ) ;
11820: LD_ADDR_VAR 0 4
11824: PUSH
11825: LD_INT 1
11827: PPUSH
11828: LD_EXP 33
11832: PPUSH
11833: CALL_OW 12
11837: ST_TO_ADDR
// p2 := Rand ( 1 , max_arriving_times ) ;
11838: LD_ADDR_VAR 0 5
11842: PUSH
11843: LD_INT 1
11845: PPUSH
11846: LD_EXP 33
11850: PPUSH
11851: CALL_OW 12
11855: ST_TO_ADDR
// pom1 := arr2 [ p1 ] ;
11856: LD_ADDR_VAR 0 6
11860: PUSH
11861: LD_LOC 15
11865: PUSH
11866: LD_VAR 0 4
11870: ARRAY
11871: ST_TO_ADDR
// pom2 := arr2 [ p2 ] ;
11872: LD_ADDR_VAR 0 7
11876: PUSH
11877: LD_LOC 15
11881: PUSH
11882: LD_VAR 0 5
11886: ARRAY
11887: ST_TO_ADDR
// arr2 := Replace ( Replace ( arr2 , p2 , pom1 ) , p1 , pom2 ) ;
11888: LD_ADDR_LOC 15
11892: PUSH
11893: LD_LOC 15
11897: PPUSH
11898: LD_VAR 0 5
11902: PPUSH
11903: LD_VAR 0 6
11907: PPUSH
11908: CALL_OW 1
11912: PPUSH
11913: LD_VAR 0 4
11917: PPUSH
11918: LD_VAR 0 7
11922: PPUSH
11923: CALL_OW 1
11927: ST_TO_ADDR
// end ;
11928: GO 11817
11930: POP
11931: POP
// end ;
11932: LD_VAR 0 1
11936: RET
// every 0 0$1 do
11937: GO 11939
11939: DISABLE
// begin if not max_arriving_times then
11940: LD_EXP 33
11944: NOT
11945: IFFALSE 11949
// exit ;
11947: GO 12032
// if tick >= max_arriving_times [ 1 ] * 0 0$30 then
11949: LD_OWVAR 1
11953: PUSH
11954: LD_EXP 33
11958: PUSH
11959: LD_INT 1
11961: ARRAY
11962: PUSH
11963: LD_INT 1050
11965: MUL
11966: GREATEREQUAL
11967: IFFALSE 12031
// begin new1 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11969: LD_ADDR_LOC 12
11973: PUSH
11974: LD_INT 1
11976: PPUSH
11977: LD_EXP 33
11981: PUSH
11982: LD_INT 1050
11984: MUL
11985: PPUSH
11986: CALL_OW 12
11990: ST_TO_ADDR
// new2 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11991: LD_ADDR_LOC 13
11995: PUSH
11996: LD_INT 1
11998: PPUSH
11999: LD_EXP 33
12003: PUSH
12004: LD_INT 1050
12006: MUL
12007: PPUSH
12008: CALL_OW 12
12012: ST_TO_ADDR
// max_arriving_times := delete ( max_arriving_times , 1 ) ;
12013: LD_ADDR_EXP 33
12017: PUSH
12018: LD_EXP 33
12022: PPUSH
12023: LD_INT 1
12025: PPUSH
12026: CALL_OW 3
12030: ST_TO_ADDR
// end ; enable ;
12031: ENABLE
// end ;
12032: END
// function new_arrival ( pos ) ; var hum ; begin
12033: LD_INT 0
12035: PPUSH
12036: PPUSH
// if def_people_loyality then
12037: LD_EXP 12
12041: IFFALSE 12083
// begin uc_side := second_side [ pos ] ;
12043: LD_ADDR_OWVAR 20
12047: PUSH
12048: LD_EXP 47
12052: PUSH
12053: LD_VAR 0 1
12057: ARRAY
12058: ST_TO_ADDR
// uc_nation := Side_Nations [ positions [ pos ] ] ;
12059: LD_ADDR_OWVAR 21
12063: PUSH
12064: LD_EXP 44
12068: PUSH
12069: LD_EXP 39
12073: PUSH
12074: LD_VAR 0 1
12078: ARRAY
12079: ARRAY
12080: ST_TO_ADDR
// end else
12081: GO 12103
// begin uc_side := second_side ;
12083: LD_ADDR_OWVAR 20
12087: PUSH
12088: LD_EXP 47
12092: ST_TO_ADDR
// uc_nation := third_nation ;
12093: LD_ADDR_OWVAR 21
12097: PUSH
12098: LD_EXP 48
12102: ST_TO_ADDR
// end ; PrepareHuman ( 0 , 0 , initial_level + 1 ) ;
12103: LD_INT 0
12105: PPUSH
12106: LD_INT 0
12108: PPUSH
12109: LD_EXP 29
12113: PUSH
12114: LD_INT 1
12116: PLUS
12117: PPUSH
12118: CALL_OW 380
// hc_class := class_soldier ;
12122: LD_ADDR_OWVAR 28
12126: PUSH
12127: LD_INT 1
12129: ST_TO_ADDR
// hum := CreateHuman ;
12130: LD_ADDR_VAR 0 3
12134: PUSH
12135: CALL_OW 44
12139: ST_TO_ADDR
// if pos = 1 then
12140: LD_VAR 0 1
12144: PUSH
12145: LD_INT 1
12147: EQUAL
12148: IFFALSE 12191
// begin PlaceUnitArea ( hum , arr1 [ 1 ] , true ) ;
12150: LD_VAR 0 3
12154: PPUSH
12155: LD_LOC 14
12159: PUSH
12160: LD_INT 1
12162: ARRAY
12163: PPUSH
12164: LD_INT 1
12166: PPUSH
12167: CALL_OW 49
// arr1 := delete ( arr1 , 1 ) ;
12171: LD_ADDR_LOC 14
12175: PUSH
12176: LD_LOC 14
12180: PPUSH
12181: LD_INT 1
12183: PPUSH
12184: CALL_OW 3
12188: ST_TO_ADDR
// end else
12189: GO 12230
// begin PlaceUnitArea ( hum , arr2 [ 1 ] , true ) ;
12191: LD_VAR 0 3
12195: PPUSH
12196: LD_LOC 15
12200: PUSH
12201: LD_INT 1
12203: ARRAY
12204: PPUSH
12205: LD_INT 1
12207: PPUSH
12208: CALL_OW 49
// arr2 := delete ( arr2 , 1 ) ;
12212: LD_ADDR_LOC 15
12216: PUSH
12217: LD_LOC 15
12221: PPUSH
12222: LD_INT 1
12224: PPUSH
12225: CALL_OW 3
12229: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) until IsPlaced ( hum ) ;
12230: LD_INT 35
12232: PPUSH
12233: CALL_OW 67
12237: LD_VAR 0 3
12241: PPUSH
12242: CALL_OW 305
12246: IFFALSE 12230
// if def_people_loyality then
12248: LD_EXP 12
12252: IFFALSE 12312
// if pos = 1 then
12254: LD_VAR 0 1
12258: PUSH
12259: LD_INT 1
12261: EQUAL
12262: IFFALSE 12282
// free1 := free1 ^ hum else
12264: LD_ADDR_LOC 10
12268: PUSH
12269: LD_LOC 10
12273: PUSH
12274: LD_VAR 0 3
12278: ADD
12279: ST_TO_ADDR
12280: GO 12310
// if pos = 2 then
12282: LD_VAR 0 1
12286: PUSH
12287: LD_INT 2
12289: EQUAL
12290: IFFALSE 12310
// free2 := free2 ^ hum else
12292: LD_ADDR_LOC 11
12296: PUSH
12297: LD_LOC 11
12301: PUSH
12302: LD_VAR 0 3
12306: ADD
12307: ST_TO_ADDR
12308: GO 12310
// else
12310: GO 12328
// free := free ^ hum ;
12312: LD_ADDR_LOC 9
12316: PUSH
12317: LD_LOC 9
12321: PUSH
12322: LD_VAR 0 3
12326: ADD
12327: ST_TO_ADDR
// end ;
12328: LD_VAR 0 2
12332: RET
// every 0 0$0.5 trigger new1 do var d ;
12333: LD_LOC 12
12337: IFFALSE 12370
12339: GO 12341
12341: DISABLE
12342: LD_INT 0
12344: PPUSH
// begin enable ;
12345: ENABLE
// new1 := 0 ;
12346: LD_ADDR_LOC 12
12350: PUSH
12351: LD_INT 0
12353: ST_TO_ADDR
// wait ( d ) ;
12354: LD_VAR 0 1
12358: PPUSH
12359: CALL_OW 67
// new_arrival ( 1 ) ;
12363: LD_INT 1
12365: PPUSH
12366: CALL 12033 0 1
// end ;
12370: PPOPN 1
12372: END
// every 0 0$0.5 trigger new2 do var d ;
12373: LD_LOC 13
12377: IFFALSE 12410
12379: GO 12381
12381: DISABLE
12382: LD_INT 0
12384: PPUSH
// begin enable ;
12385: ENABLE
// new2 := 0 ;
12386: LD_ADDR_LOC 13
12390: PUSH
12391: LD_INT 0
12393: ST_TO_ADDR
// wait ( d ) ;
12394: LD_VAR 0 1
12398: PPUSH
12399: CALL_OW 67
// new_arrival ( 2 ) ;
12403: LD_INT 2
12405: PPUSH
12406: CALL 12033 0 1
// end ;
12410: PPOPN 1
12412: END
// function check_one_side ( un , side ) ; begin
12413: LD_INT 0
12415: PPUSH
// if FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , side ] , [ f_dist , un , 3 ] ] ) then
12416: LD_INT 21
12418: PUSH
12419: LD_INT 1
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 22
12428: PUSH
12429: LD_VAR 0 2
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: LD_INT 91
12440: PUSH
12441: LD_VAR 0 1
12445: PUSH
12446: LD_INT 3
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: LIST
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: LIST
12458: PPUSH
12459: CALL_OW 69
12463: IFFALSE 12477
// result := side else
12465: LD_ADDR_VAR 0 3
12469: PUSH
12470: LD_VAR 0 2
12474: ST_TO_ADDR
12475: GO 12485
// result := 0 ;
12477: LD_ADDR_VAR 0 3
12481: PUSH
12482: LD_INT 0
12484: ST_TO_ADDR
// end ;
12485: LD_VAR 0 3
12489: RET
// function check_two_sides ( un , side1 , side2 ) ; var un1 , s1 , s2 ; begin
12490: LD_INT 0
12492: PPUSH
12493: PPUSH
12494: PPUSH
12495: PPUSH
// s1 := 0 ;
12496: LD_ADDR_VAR 0 6
12500: PUSH
12501: LD_INT 0
12503: ST_TO_ADDR
// s2 := 0 ;
12504: LD_ADDR_VAR 0 7
12508: PUSH
12509: LD_INT 0
12511: ST_TO_ADDR
// for un1 in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_dist , un , 3 ] ] ) do
12512: LD_ADDR_VAR 0 5
12516: PUSH
12517: LD_INT 21
12519: PUSH
12520: LD_INT 1
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PUSH
12527: LD_INT 91
12529: PUSH
12530: LD_VAR 0 1
12534: PUSH
12535: LD_INT 3
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: LIST
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PPUSH
12547: CALL_OW 69
12551: PUSH
12552: FOR_IN
12553: IFFALSE 12621
// begin if GetSide ( un1 ) = side1 then
12555: LD_VAR 0 5
12559: PPUSH
12560: CALL_OW 255
12564: PUSH
12565: LD_VAR 0 2
12569: EQUAL
12570: IFFALSE 12588
// s1 := s1 + 1 else
12572: LD_ADDR_VAR 0 6
12576: PUSH
12577: LD_VAR 0 6
12581: PUSH
12582: LD_INT 1
12584: PLUS
12585: ST_TO_ADDR
12586: GO 12619
// if GetSide ( un1 ) = side2 then
12588: LD_VAR 0 5
12592: PPUSH
12593: CALL_OW 255
12597: PUSH
12598: LD_VAR 0 3
12602: EQUAL
12603: IFFALSE 12619
// s2 := s2 + 1 ;
12605: LD_ADDR_VAR 0 7
12609: PUSH
12610: LD_VAR 0 7
12614: PUSH
12615: LD_INT 1
12617: PLUS
12618: ST_TO_ADDR
// end ;
12619: GO 12552
12621: POP
12622: POP
// if s1 = s2 then
12623: LD_VAR 0 6
12627: PUSH
12628: LD_VAR 0 7
12632: EQUAL
12633: IFFALSE 12645
// result := 0 else
12635: LD_ADDR_VAR 0 4
12639: PUSH
12640: LD_INT 0
12642: ST_TO_ADDR
12643: GO 12675
// if s1 > s2 then
12645: LD_VAR 0 6
12649: PUSH
12650: LD_VAR 0 7
12654: GREATER
12655: IFFALSE 12667
// result := 1 else
12657: LD_ADDR_VAR 0 4
12661: PUSH
12662: LD_INT 1
12664: ST_TO_ADDR
12665: GO 12675
// result := 2 ;
12667: LD_ADDR_VAR 0 4
12671: PUSH
12672: LD_INT 2
12674: ST_TO_ADDR
// end ;
12675: LD_VAR 0 4
12679: RET
// every 0 0$2 do var un ;
12680: GO 12682
12682: DISABLE
12683: LD_INT 0
12685: PPUSH
// begin if def_people_loyality then
12686: LD_EXP 12
12690: IFFALSE 13069
// if not fog_info then
12692: LD_EXP 35
12696: NOT
12697: IFFALSE 12885
// begin if your_side then
12699: LD_OWVAR 2
12703: IFFALSE 12883
// if side_positions [ your_side ] = 1 then
12705: LD_EXP 43
12709: PUSH
12710: LD_OWVAR 2
12714: ARRAY
12715: PUSH
12716: LD_INT 1
12718: EQUAL
12719: IFFALSE 12795
// begin un := UnitFilter ( free1 diff seenby1 , [ f_see , your_side ] ) ;
12721: LD_ADDR_VAR 0 1
12725: PUSH
12726: LD_LOC 10
12730: PUSH
12731: LD_LOC 16
12735: DIFF
12736: PPUSH
12737: LD_INT 101
12739: PUSH
12740: LD_OWVAR 2
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: PPUSH
12749: CALL_OW 72
12753: ST_TO_ADDR
// if un then
12754: LD_VAR 0 1
12758: IFFALSE 12793
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12760: LD_VAR 0 1
12764: PUSH
12765: LD_INT 1
12767: ARRAY
12768: PPUSH
12769: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12773: LD_ADDR_LOC 16
12777: PUSH
12778: LD_LOC 16
12782: PUSH
12783: LD_VAR 0 1
12787: PUSH
12788: LD_INT 1
12790: ARRAY
12791: ADD
12792: ST_TO_ADDR
// end ; end else
12793: GO 12883
// if side_positions [ your_side ] = 2 then
12795: LD_EXP 43
12799: PUSH
12800: LD_OWVAR 2
12804: ARRAY
12805: PUSH
12806: LD_INT 2
12808: EQUAL
12809: IFFALSE 12883
// begin un := UnitFilter ( free2 diff seenby2 , [ f_see , your_side ] ) ;
12811: LD_ADDR_VAR 0 1
12815: PUSH
12816: LD_LOC 11
12820: PUSH
12821: LD_LOC 17
12825: DIFF
12826: PPUSH
12827: LD_INT 101
12829: PUSH
12830: LD_OWVAR 2
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PPUSH
12839: CALL_OW 72
12843: ST_TO_ADDR
// if un then
12844: LD_VAR 0 1
12848: IFFALSE 12883
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12850: LD_VAR 0 1
12854: PUSH
12855: LD_INT 1
12857: ARRAY
12858: PPUSH
12859: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
12863: LD_ADDR_LOC 17
12867: PUSH
12868: LD_LOC 17
12872: PUSH
12873: LD_VAR 0 1
12877: PUSH
12878: LD_INT 1
12880: ARRAY
12881: ADD
12882: ST_TO_ADDR
// end ; end ; end else
12883: GO 13069
// begin if your_side then
12885: LD_OWVAR 2
12889: IFFALSE 13069
// if side_positions [ your_side ] = 1 then
12891: LD_EXP 43
12895: PUSH
12896: LD_OWVAR 2
12900: ARRAY
12901: PUSH
12902: LD_INT 1
12904: EQUAL
12905: IFFALSE 12981
// begin un := UnitFilter ( free diff seenby1 , [ f_see , your_side ] ) ;
12907: LD_ADDR_VAR 0 1
12911: PUSH
12912: LD_LOC 9
12916: PUSH
12917: LD_LOC 16
12921: DIFF
12922: PPUSH
12923: LD_INT 101
12925: PUSH
12926: LD_OWVAR 2
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PPUSH
12935: CALL_OW 72
12939: ST_TO_ADDR
// if un then
12940: LD_VAR 0 1
12944: IFFALSE 12979
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12946: LD_VAR 0 1
12950: PUSH
12951: LD_INT 1
12953: ARRAY
12954: PPUSH
12955: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12959: LD_ADDR_LOC 16
12963: PUSH
12964: LD_LOC 16
12968: PUSH
12969: LD_VAR 0 1
12973: PUSH
12974: LD_INT 1
12976: ARRAY
12977: ADD
12978: ST_TO_ADDR
// end ; end else
12979: GO 13069
// if side_positions [ your_side ] = 2 then
12981: LD_EXP 43
12985: PUSH
12986: LD_OWVAR 2
12990: ARRAY
12991: PUSH
12992: LD_INT 2
12994: EQUAL
12995: IFFALSE 13069
// begin un := UnitFilter ( free diff seenby2 , [ f_see , your_side ] ) ;
12997: LD_ADDR_VAR 0 1
13001: PUSH
13002: LD_LOC 9
13006: PUSH
13007: LD_LOC 17
13011: DIFF
13012: PPUSH
13013: LD_INT 101
13015: PUSH
13016: LD_OWVAR 2
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PPUSH
13025: CALL_OW 72
13029: ST_TO_ADDR
// if un then
13030: LD_VAR 0 1
13034: IFFALSE 13069
// begin CenterNowOnUnits ( un [ 1 ] ) ;
13036: LD_VAR 0 1
13040: PUSH
13041: LD_INT 1
13043: ARRAY
13044: PPUSH
13045: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
13049: LD_ADDR_LOC 17
13053: PUSH
13054: LD_LOC 17
13058: PUSH
13059: LD_VAR 0 1
13063: PUSH
13064: LD_INT 1
13066: ARRAY
13067: ADD
13068: ST_TO_ADDR
// end ; end ; end ; enable ;
13069: ENABLE
// end ;
13070: PPOPN 1
13072: END
// every 0 0$0.5 do var un , s ;
13073: GO 13075
13075: DISABLE
13076: LD_INT 0
13078: PPUSH
13079: PPUSH
// begin if def_people_loyality then
13080: LD_EXP 12
13084: IFFALSE 13290
// begin for un in free1 do
13086: LD_ADDR_VAR 0 1
13090: PUSH
13091: LD_LOC 10
13095: PUSH
13096: FOR_IN
13097: IFFALSE 13185
// if not IsLive ( un ) then
13099: LD_VAR 0 1
13103: PPUSH
13104: CALL_OW 300
13108: NOT
13109: IFFALSE 13129
// free1 := free1 diff un else
13111: LD_ADDR_LOC 10
13115: PUSH
13116: LD_LOC 10
13120: PUSH
13121: LD_VAR 0 1
13125: DIFF
13126: ST_TO_ADDR
13127: GO 13183
// if check_one_side ( un , positions [ 1 ] ) then
13129: LD_VAR 0 1
13133: PPUSH
13134: LD_EXP 39
13138: PUSH
13139: LD_INT 1
13141: ARRAY
13142: PPUSH
13143: CALL 12413 0 2
13147: IFFALSE 13183
// begin SetSide ( un , positions [ 1 ] ) ;
13149: LD_VAR 0 1
13153: PPUSH
13154: LD_EXP 39
13158: PUSH
13159: LD_INT 1
13161: ARRAY
13162: PPUSH
13163: CALL_OW 235
// free1 := free1 diff un ;
13167: LD_ADDR_LOC 10
13171: PUSH
13172: LD_LOC 10
13176: PUSH
13177: LD_VAR 0 1
13181: DIFF
13182: ST_TO_ADDR
// end ;
13183: GO 13096
13185: POP
13186: POP
// for un in free2 do
13187: LD_ADDR_VAR 0 1
13191: PUSH
13192: LD_LOC 11
13196: PUSH
13197: FOR_IN
13198: IFFALSE 13286
// if not IsLive ( un ) then
13200: LD_VAR 0 1
13204: PPUSH
13205: CALL_OW 300
13209: NOT
13210: IFFALSE 13230
// free2 := free2 diff un else
13212: LD_ADDR_LOC 11
13216: PUSH
13217: LD_LOC 11
13221: PUSH
13222: LD_VAR 0 1
13226: DIFF
13227: ST_TO_ADDR
13228: GO 13284
// if check_one_side ( un , positions [ 2 ] ) then
13230: LD_VAR 0 1
13234: PPUSH
13235: LD_EXP 39
13239: PUSH
13240: LD_INT 2
13242: ARRAY
13243: PPUSH
13244: CALL 12413 0 2
13248: IFFALSE 13284
// begin SetSide ( un , positions [ 2 ] ) ;
13250: LD_VAR 0 1
13254: PPUSH
13255: LD_EXP 39
13259: PUSH
13260: LD_INT 2
13262: ARRAY
13263: PPUSH
13264: CALL_OW 235
// free2 := free2 diff un ;
13268: LD_ADDR_LOC 11
13272: PUSH
13273: LD_LOC 11
13277: PUSH
13278: LD_VAR 0 1
13282: DIFF
13283: ST_TO_ADDR
// end ;
13284: GO 13197
13286: POP
13287: POP
// end else
13288: GO 13412
// begin for un in free do
13290: LD_ADDR_VAR 0 1
13294: PUSH
13295: LD_LOC 9
13299: PUSH
13300: FOR_IN
13301: IFFALSE 13410
// if not IsLive ( un ) then
13303: LD_VAR 0 1
13307: PPUSH
13308: CALL_OW 300
13312: NOT
13313: IFFALSE 13333
// free := free diff un else
13315: LD_ADDR_LOC 9
13319: PUSH
13320: LD_LOC 9
13324: PUSH
13325: LD_VAR 0 1
13329: DIFF
13330: ST_TO_ADDR
13331: GO 13408
// begin s := check_two_sides ( un , positions [ 1 ] , positions [ 2 ] ) ;
13333: LD_ADDR_VAR 0 2
13337: PUSH
13338: LD_VAR 0 1
13342: PPUSH
13343: LD_EXP 39
13347: PUSH
13348: LD_INT 1
13350: ARRAY
13351: PPUSH
13352: LD_EXP 39
13356: PUSH
13357: LD_INT 2
13359: ARRAY
13360: PPUSH
13361: CALL 12490 0 3
13365: ST_TO_ADDR
// if s then
13366: LD_VAR 0 2
13370: IFFALSE 13408
// begin SetSide ( un , positions [ s ] ) ;
13372: LD_VAR 0 1
13376: PPUSH
13377: LD_EXP 39
13381: PUSH
13382: LD_VAR 0 2
13386: ARRAY
13387: PPUSH
13388: CALL_OW 235
// free := free diff un ;
13392: LD_ADDR_LOC 9
13396: PUSH
13397: LD_LOC 9
13401: PUSH
13402: LD_VAR 0 1
13406: DIFF
13407: ST_TO_ADDR
// end ; end ;
13408: GO 13300
13410: POP
13411: POP
// end ; enable ;
13412: ENABLE
// end ; end_of_file
13413: PPOPN 2
13415: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
13416: LD_INT 0
13418: PPUSH
13419: PPUSH
13420: PPUSH
// enable ( 600 ) ;
13421: LD_INT 600
13423: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
13424: LD_ADDR_VAR 0 2
13428: PUSH
13429: DOUBLE
13430: LD_INT 1
13432: DEC
13433: ST_TO_ADDR
13434: LD_EXP 65
13438: PUSH
13439: FOR_TO
13440: IFFALSE 13595
// if Position_Sides [ i ] then
13442: LD_EXP 46
13446: PUSH
13447: LD_VAR 0 2
13451: ARRAY
13452: IFFALSE 13593
// for j := 1 to 8 do
13454: LD_ADDR_VAR 0 3
13458: PUSH
13459: DOUBLE
13460: LD_INT 1
13462: DEC
13463: ST_TO_ADDR
13464: LD_INT 8
13466: PUSH
13467: FOR_TO
13468: IFFALSE 13591
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13470: LD_EXP 43
13474: PUSH
13475: LD_VAR 0 3
13479: ARRAY
13480: PUSH
13481: LD_EXP 40
13485: PUSH
13486: LD_EXP 46
13490: PUSH
13491: LD_VAR 0 2
13495: ARRAY
13496: ARRAY
13497: PUSH
13498: LD_EXP 40
13502: PUSH
13503: LD_VAR 0 3
13507: ARRAY
13508: NONEQUAL
13509: PUSH
13510: LD_EXP 45
13514: NOT
13515: PUSH
13516: LD_EXP 46
13520: PUSH
13521: LD_VAR 0 2
13525: ARRAY
13526: PUSH
13527: LD_VAR 0 3
13531: NONEQUAL
13532: AND
13533: OR
13534: AND
13535: IFFALSE 13559
// HideArea ( j , BuildUpAreas [ i ] ) else
13537: LD_VAR 0 3
13541: PPUSH
13542: LD_EXP 65
13546: PUSH
13547: LD_VAR 0 2
13551: ARRAY
13552: PPUSH
13553: CALL_OW 333
13557: GO 13589
// if ( j = your_side ) then
13559: LD_VAR 0 3
13563: PUSH
13564: LD_OWVAR 2
13568: EQUAL
13569: IFFALSE 13589
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
13571: LD_EXP 65
13575: PUSH
13576: LD_VAR 0 2
13580: ARRAY
13581: PPUSH
13582: LD_INT 5
13584: PPUSH
13585: CALL_OW 424
13589: GO 13467
13591: POP
13592: POP
13593: GO 13439
13595: POP
13596: POP
// end ;
13597: LD_VAR 0 1
13601: RET
// export function EndBuildUp ; var i , j ; begin
13602: LD_INT 0
13604: PPUSH
13605: PPUSH
13606: PPUSH
// disable ( 600 ) ;
13607: LD_INT 600
13609: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
13610: LD_ADDR_VAR 0 2
13614: PUSH
13615: DOUBLE
13616: LD_INT 1
13618: DEC
13619: ST_TO_ADDR
13620: LD_EXP 65
13624: PUSH
13625: FOR_TO
13626: IFFALSE 13781
// if Position_Sides [ i ] then
13628: LD_EXP 46
13632: PUSH
13633: LD_VAR 0 2
13637: ARRAY
13638: IFFALSE 13779
// for j := 1 to 8 do
13640: LD_ADDR_VAR 0 3
13644: PUSH
13645: DOUBLE
13646: LD_INT 1
13648: DEC
13649: ST_TO_ADDR
13650: LD_INT 8
13652: PUSH
13653: FOR_TO
13654: IFFALSE 13777
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13656: LD_EXP 43
13660: PUSH
13661: LD_VAR 0 3
13665: ARRAY
13666: PUSH
13667: LD_EXP 40
13671: PUSH
13672: LD_EXP 46
13676: PUSH
13677: LD_VAR 0 2
13681: ARRAY
13682: ARRAY
13683: PUSH
13684: LD_EXP 40
13688: PUSH
13689: LD_VAR 0 3
13693: ARRAY
13694: NONEQUAL
13695: PUSH
13696: LD_EXP 45
13700: NOT
13701: PUSH
13702: LD_EXP 46
13706: PUSH
13707: LD_VAR 0 2
13711: ARRAY
13712: PUSH
13713: LD_VAR 0 3
13717: NONEQUAL
13718: AND
13719: OR
13720: AND
13721: IFFALSE 13745
// ShowArea ( j , BuildUpAreas [ i ] ) else
13723: LD_VAR 0 3
13727: PPUSH
13728: LD_EXP 65
13732: PUSH
13733: LD_VAR 0 2
13737: ARRAY
13738: PPUSH
13739: CALL_OW 334
13743: GO 13775
// if ( j = your_side ) then
13745: LD_VAR 0 3
13749: PUSH
13750: LD_OWVAR 2
13754: EQUAL
13755: IFFALSE 13775
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
13757: LD_EXP 65
13761: PUSH
13762: LD_VAR 0 2
13766: ARRAY
13767: PPUSH
13768: LD_INT 0
13770: PPUSH
13771: CALL_OW 424
13775: GO 13653
13777: POP
13778: POP
13779: GO 13625
13781: POP
13782: POP
// end ;
13783: LD_VAR 0 1
13787: RET
// every 5 marked 600 do var i , un ;
13788: GO 13790
13790: DISABLE
13791: LD_INT 0
13793: PPUSH
13794: PPUSH
// begin for i := 1 to BuildUpAreas do
13795: LD_ADDR_VAR 0 1
13799: PUSH
13800: DOUBLE
13801: LD_INT 1
13803: DEC
13804: ST_TO_ADDR
13805: LD_EXP 65
13809: PUSH
13810: FOR_TO
13811: IFFALSE 13966
// if Position_Sides [ i ] then
13813: LD_EXP 46
13817: PUSH
13818: LD_VAR 0 1
13822: ARRAY
13823: IFFALSE 13964
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13825: LD_ADDR_VAR 0 2
13829: PUSH
13830: LD_EXP 65
13834: PUSH
13835: LD_VAR 0 1
13839: ARRAY
13840: PPUSH
13841: LD_INT 2
13843: PUSH
13844: LD_INT 21
13846: PUSH
13847: LD_INT 1
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 21
13856: PUSH
13857: LD_INT 2
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: LIST
13868: PUSH
13869: LD_INT 22
13871: PUSH
13872: LD_OWVAR 2
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: PPUSH
13885: CALL_OW 70
13889: PUSH
13890: FOR_IN
13891: IFFALSE 13962
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
13893: LD_EXP 40
13897: PUSH
13898: LD_EXP 46
13902: PUSH
13903: LD_VAR 0 1
13907: ARRAY
13908: ARRAY
13909: PUSH
13910: LD_EXP 40
13914: PUSH
13915: LD_OWVAR 2
13919: ARRAY
13920: NONEQUAL
13921: PUSH
13922: LD_EXP 45
13926: NOT
13927: PUSH
13928: LD_EXP 46
13932: PUSH
13933: LD_VAR 0 1
13937: ARRAY
13938: PUSH
13939: LD_OWVAR 2
13943: NONEQUAL
13944: AND
13945: OR
13946: IFFALSE 13960
// ComMoveToArea ( un , BuildUpEscape ) ;
13948: LD_VAR 0 2
13952: PPUSH
13953: LD_INT 28
13955: PPUSH
13956: CALL_OW 113
13960: GO 13890
13962: POP
13963: POP
13964: GO 13810
13966: POP
13967: POP
// enable ;
13968: ENABLE
// end ;
13969: PPOPN 2
13971: END
// every 5 5$00 do
13972: GO 13974
13974: DISABLE
// if ( def_builduptime = 1 ) then
13975: LD_EXP 17
13979: PUSH
13980: LD_INT 1
13982: EQUAL
13983: IFFALSE 13989
// EndBuildUp ;
13985: CALL 13602 0 0
13989: END
// every 10 10$00 do
13990: GO 13992
13992: DISABLE
// if ( def_builduptime = 2 ) then
13993: LD_EXP 17
13997: PUSH
13998: LD_INT 2
14000: EQUAL
14001: IFFALSE 14007
// EndBuildUp ;
14003: CALL 13602 0 0
14007: END
// every 15 15$00 do
14008: GO 14010
14010: DISABLE
// if ( def_builduptime = 3 ) then
14011: LD_EXP 17
14015: PUSH
14016: LD_INT 3
14018: EQUAL
14019: IFFALSE 14025
// EndBuildUp ; end_of_file
14021: CALL 13602 0 0
14025: END
// export Game_Type , def_game_rules ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
14026: LD_INT 0
14028: PPUSH
14029: PPUSH
// if ( not IAmSpec ) then
14030: CALL_OW 531
14034: NOT
14035: IFFALSE 14051
// Result := Limits_Info ^  ;
14037: LD_ADDR_VAR 0 1
14041: PUSH
14042: LD_LOC 25
14046: PUSH
14047: LD_STRING 
14049: ADD
14050: ST_TO_ADDR
// for i := 1 to 8 do
14051: LD_ADDR_VAR 0 2
14055: PUSH
14056: DOUBLE
14057: LD_INT 1
14059: DEC
14060: ST_TO_ADDR
14061: LD_INT 8
14063: PUSH
14064: FOR_TO
14065: IFFALSE 14110
// if Cheaters [ i ] then
14067: LD_LOC 26
14071: PUSH
14072: LD_VAR 0 2
14076: ARRAY
14077: IFFALSE 14108
// Result := Result ^ [ #Cheater , i , i ] ;
14079: LD_ADDR_VAR 0 1
14083: PUSH
14084: LD_VAR 0 1
14088: PUSH
14089: LD_STRING #Cheater
14091: PUSH
14092: LD_VAR 0 2
14096: PUSH
14097: LD_VAR 0 2
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: LIST
14106: ADD
14107: ST_TO_ADDR
14108: GO 14064
14110: POP
14111: POP
// end ;
14112: LD_VAR 0 1
14116: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
14117: LD_INT 0
14119: PPUSH
14120: PPUSH
14121: PPUSH
14122: PPUSH
14123: PPUSH
// case Game_Type of 10 :
14124: LD_EXP 66
14128: PUSH
14129: LD_INT 10
14131: DOUBLE
14132: EQUAL
14133: IFTRUE 14137
14135: GO 14148
14137: POP
// def_game_rules := 1 ; 11 :
14138: LD_ADDR_EXP 67
14142: PUSH
14143: LD_INT 1
14145: ST_TO_ADDR
14146: GO 14168
14148: LD_INT 11
14150: DOUBLE
14151: EQUAL
14152: IFTRUE 14156
14154: GO 14167
14156: POP
// def_game_rules := 3 ; end ;
14157: LD_ADDR_EXP 67
14161: PUSH
14162: LD_INT 3
14164: ST_TO_ADDR
14165: GO 14168
14167: POP
// case def_game_rules of 0 :
14168: LD_EXP 67
14172: PUSH
14173: LD_INT 0
14175: DOUBLE
14176: EQUAL
14177: IFTRUE 14181
14179: GO 14186
14181: POP
// exit ; 1 :
14182: GO 14794
14184: GO 14694
14186: LD_INT 1
14188: DOUBLE
14189: EQUAL
14190: IFTRUE 14194
14192: GO 14426
14194: POP
// begin def_main_base = 1 ;
14195: LD_ADDR_EXP 1
14199: PUSH
14200: LD_INT 1
14202: ST_TO_ADDR
// def_secondary_base = 0 ;
14203: LD_ADDR_EXP 2
14207: PUSH
14208: LD_INT 0
14210: ST_TO_ADDR
// def_defence_level = 1 ;
14211: LD_ADDR_EXP 3
14215: PUSH
14216: LD_INT 1
14218: ST_TO_ADDR
// def_amount_of_people = 2 ;
14219: LD_ADDR_EXP 4
14223: PUSH
14224: LD_INT 2
14226: ST_TO_ADDR
// def_initial_level = 1 ;
14227: LD_ADDR_EXP 5
14231: PUSH
14232: LD_INT 1
14234: ST_TO_ADDR
// def_main_deposits = 2 ;
14235: LD_ADDR_EXP 6
14239: PUSH
14240: LD_INT 2
14242: ST_TO_ADDR
// def_secondary_deposits = 1 ;
14243: LD_ADDR_EXP 7
14247: PUSH
14248: LD_INT 1
14250: ST_TO_ADDR
// def_siberite_detection = 1 ;
14251: LD_ADDR_EXP 8
14255: PUSH
14256: LD_INT 1
14258: ST_TO_ADDR
// def_starting_resources = 2 ;
14259: LD_ADDR_EXP 9
14263: PUSH
14264: LD_INT 2
14266: ST_TO_ADDR
// def_shipments_density = 1 ;
14267: LD_ADDR_EXP 10
14271: PUSH
14272: LD_INT 1
14274: ST_TO_ADDR
// def_people_arrivals = 0 ;
14275: LD_ADDR_EXP 11
14279: PUSH
14280: LD_INT 0
14282: ST_TO_ADDR
// def_people_loyality = 0 ;
14283: LD_ADDR_EXP 12
14287: PUSH
14288: LD_INT 0
14290: ST_TO_ADDR
// def_people_info = 0 ;
14291: LD_ADDR_EXP 13
14295: PUSH
14296: LD_INT 0
14298: ST_TO_ADDR
// def_morale_flags = 1 ;
14299: LD_ADDR_EXP 14
14303: PUSH
14304: LD_INT 1
14306: ST_TO_ADDR
// def_siberite_bomb = 0 ;
14307: LD_ADDR_EXP 15
14311: PUSH
14312: LD_INT 0
14314: ST_TO_ADDR
// def_builduptime = 2 ;
14315: LD_ADDR_EXP 17
14319: PUSH
14320: LD_INT 2
14322: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
14323: LD_ADDR_VAR 0 2
14327: PUSH
14328: EMPTY
14329: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14330: LD_ADDR_VAR 0 3
14334: PUSH
14335: EMPTY
14336: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14337: LD_ADDR_LOC 20
14341: PUSH
14342: EMPTY
14343: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14344: LD_ADDR_LOC 21
14348: PUSH
14349: EMPTY
14350: ST_TO_ADDR
// Banned_Controls := [ ] ;
14351: LD_ADDR_LOC 22
14355: PUSH
14356: EMPTY
14357: ST_TO_ADDR
// Banned_Engines := [ ] ;
14358: LD_ADDR_LOC 23
14362: PUSH
14363: EMPTY
14364: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14365: LD_ADDR_LOC 18
14369: PUSH
14370: LD_INT 37
14372: PUSH
14373: EMPTY
14374: LIST
14375: PUSH
14376: LD_INT 4
14378: PUSH
14379: LD_INT 5
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: PUSH
14386: LD_INT 31
14388: PUSH
14389: LD_INT 32
14391: PUSH
14392: LD_INT 33
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: LIST
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: LIST
14404: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
14405: LD_ADDR_LOC 19
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: LD_INT 2
14415: PUSH
14416: LD_INT 4
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: LIST
14423: ST_TO_ADDR
// end ; 3 :
14424: GO 14694
14426: LD_INT 3
14428: DOUBLE
14429: EQUAL
14430: IFTRUE 14434
14432: GO 14693
14434: POP
// begin def_main_base = 1 ;
14435: LD_ADDR_EXP 1
14439: PUSH
14440: LD_INT 1
14442: ST_TO_ADDR
// def_secondary_base = 0 ;
14443: LD_ADDR_EXP 2
14447: PUSH
14448: LD_INT 0
14450: ST_TO_ADDR
// def_defence_level = 0 ;
14451: LD_ADDR_EXP 3
14455: PUSH
14456: LD_INT 0
14458: ST_TO_ADDR
// def_amount_of_people = 2 ;
14459: LD_ADDR_EXP 4
14463: PUSH
14464: LD_INT 2
14466: ST_TO_ADDR
// def_initial_level = 3 ;
14467: LD_ADDR_EXP 5
14471: PUSH
14472: LD_INT 3
14474: ST_TO_ADDR
// def_main_deposits = 2 ;
14475: LD_ADDR_EXP 6
14479: PUSH
14480: LD_INT 2
14482: ST_TO_ADDR
// def_secondary_deposits = 1 ;
14483: LD_ADDR_EXP 7
14487: PUSH
14488: LD_INT 1
14490: ST_TO_ADDR
// def_siberite_detection = 1 ;
14491: LD_ADDR_EXP 8
14495: PUSH
14496: LD_INT 1
14498: ST_TO_ADDR
// def_starting_resources = 3 ;
14499: LD_ADDR_EXP 9
14503: PUSH
14504: LD_INT 3
14506: ST_TO_ADDR
// def_shipments_density = 1 ;
14507: LD_ADDR_EXP 10
14511: PUSH
14512: LD_INT 1
14514: ST_TO_ADDR
// def_people_arrivals = 0 ;
14515: LD_ADDR_EXP 11
14519: PUSH
14520: LD_INT 0
14522: ST_TO_ADDR
// def_people_loyality = 0 ;
14523: LD_ADDR_EXP 12
14527: PUSH
14528: LD_INT 0
14530: ST_TO_ADDR
// def_people_info = 0 ;
14531: LD_ADDR_EXP 13
14535: PUSH
14536: LD_INT 0
14538: ST_TO_ADDR
// def_morale_flags = 0 ;
14539: LD_ADDR_EXP 14
14543: PUSH
14544: LD_INT 0
14546: ST_TO_ADDR
// def_siberite_bomb = 0 ;
14547: LD_ADDR_EXP 15
14551: PUSH
14552: LD_INT 0
14554: ST_TO_ADDR
// def_builduptime = 1 ;
14555: LD_ADDR_EXP 17
14559: PUSH
14560: LD_INT 1
14562: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14563: LD_ADDR_VAR 0 2
14567: PUSH
14568: LD_INT 23
14570: PUSH
14571: EMPTY
14572: LIST
14573: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
14574: LD_ADDR_VAR 0 3
14578: PUSH
14579: LD_INT 2
14581: PUSH
14582: LD_INT 37
14584: PUSH
14585: LD_INT 32
14587: PUSH
14588: LD_INT 33
14590: PUSH
14591: LD_INT 36
14593: PUSH
14594: LD_INT 16
14596: PUSH
14597: LD_INT 23
14599: PUSH
14600: LD_INT 21
14602: PUSH
14603: LD_INT 18
14605: PUSH
14606: LD_INT 22
14608: PUSH
14609: LD_INT 20
14611: PUSH
14612: LD_INT 19
14614: PUSH
14615: LD_INT 25
14617: PUSH
14618: LD_INT 17
14620: PUSH
14621: LD_INT 24
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14641: LD_ADDR_LOC 20
14645: PUSH
14646: EMPTY
14647: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14648: LD_ADDR_LOC 21
14652: PUSH
14653: EMPTY
14654: ST_TO_ADDR
// Banned_Controls := [ ] ;
14655: LD_ADDR_LOC 22
14659: PUSH
14660: EMPTY
14661: ST_TO_ADDR
// Banned_Engines := [ ] ;
14662: LD_ADDR_LOC 23
14666: PUSH
14667: EMPTY
14668: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14669: LD_ADDR_LOC 18
14673: PUSH
14674: EMPTY
14675: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14676: LD_ADDR_LOC 19
14680: PUSH
14681: EMPTY
14682: ST_TO_ADDR
// No_Mechs := true ;
14683: LD_ADDR_EXP 68
14687: PUSH
14688: LD_INT 1
14690: ST_TO_ADDR
// end ; end ;
14691: GO 14694
14693: POP
// for i := 1 to 8 do
14694: LD_ADDR_VAR 0 4
14698: PUSH
14699: DOUBLE
14700: LD_INT 1
14702: DEC
14703: ST_TO_ADDR
14704: LD_INT 8
14706: PUSH
14707: FOR_TO
14708: IFFALSE 14792
// if Side_Positions [ i ] then
14710: LD_EXP 43
14714: PUSH
14715: LD_VAR 0 4
14719: ARRAY
14720: IFFALSE 14790
// begin for j in Unavailable_Techs do
14722: LD_ADDR_VAR 0 5
14726: PUSH
14727: LD_VAR 0 2
14731: PUSH
14732: FOR_IN
14733: IFFALSE 14754
// SetTech ( j , i , 0 ) ;
14735: LD_VAR 0 5
14739: PPUSH
14740: LD_VAR 0 4
14744: PPUSH
14745: LD_INT 0
14747: PPUSH
14748: CALL_OW 322
14752: GO 14732
14754: POP
14755: POP
// for j in Unavailable_Builds do
14756: LD_ADDR_VAR 0 5
14760: PUSH
14761: LD_VAR 0 3
14765: PUSH
14766: FOR_IN
14767: IFFALSE 14788
// SetRestrict ( j , i , 0 ) ;
14769: LD_VAR 0 5
14773: PPUSH
14774: LD_VAR 0 4
14778: PPUSH
14779: LD_INT 0
14781: PPUSH
14782: CALL_OW 324
14786: GO 14766
14788: POP
14789: POP
// end ;
14790: GO 14707
14792: POP
14793: POP
// end ;
14794: LD_VAR 0 1
14798: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
14799: LD_INT 0
14801: PPUSH
14802: PPUSH
14803: PPUSH
14804: PPUSH
14805: PPUSH
14806: PPUSH
14807: PPUSH
// for i := 1 to Restricted_Builds do
14808: LD_ADDR_VAR 0 2
14812: PUSH
14813: DOUBLE
14814: LD_INT 1
14816: DEC
14817: ST_TO_ADDR
14818: LD_LOC 18
14822: PUSH
14823: FOR_TO
14824: IFFALSE 15134
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
14826: LD_LOC 18
14830: PUSH
14831: LD_VAR 0 2
14835: ARRAY
14836: PUSH
14837: LD_INT 1
14839: ARRAY
14840: PUSH
14841: LD_INT 31
14843: DOUBLE
14844: EQUAL
14845: IFTRUE 14861
14847: LD_INT 32
14849: DOUBLE
14850: EQUAL
14851: IFTRUE 14861
14853: LD_INT 33
14855: DOUBLE
14856: EQUAL
14857: IFTRUE 14861
14859: GO 14872
14861: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
14862: LD_ADDR_VAR 0 6
14866: PUSH
14867: LD_STRING #Turrets
14869: ST_TO_ADDR
14870: GO 14917
14872: LD_INT 4
14874: DOUBLE
14875: EQUAL
14876: IFTRUE 14886
14878: LD_INT 5
14880: DOUBLE
14881: EQUAL
14882: IFTRUE 14886
14884: GO 14897
14886: POP
// btype := #Armouries ; b_Behemoth :
14887: LD_ADDR_VAR 0 6
14891: PUSH
14892: LD_STRING #Armouries
14894: ST_TO_ADDR
14895: GO 14917
14897: LD_INT 37
14899: DOUBLE
14900: EQUAL
14901: IFTRUE 14905
14903: GO 14916
14905: POP
// btype := #Behemoths ; end ;
14906: LD_ADDR_VAR 0 6
14910: PUSH
14911: LD_STRING #Behemoths
14913: ST_TO_ADDR
14914: GO 14917
14916: POP
// list := [ ] ;
14917: LD_ADDR_VAR 0 7
14921: PUSH
14922: EMPTY
14923: ST_TO_ADDR
// for j := 1 to 8 do
14924: LD_ADDR_VAR 0 3
14928: PUSH
14929: DOUBLE
14930: LD_INT 1
14932: DEC
14933: ST_TO_ADDR
14934: LD_INT 8
14936: PUSH
14937: FOR_TO
14938: IFFALSE 15031
// if Side_Positions [ j ] then
14940: LD_EXP 43
14944: PUSH
14945: LD_VAR 0 3
14949: ARRAY
14950: IFFALSE 15029
// begin amount := 0 ;
14952: LD_ADDR_VAR 0 5
14956: PUSH
14957: LD_INT 0
14959: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
14960: LD_ADDR_VAR 0 4
14964: PUSH
14965: LD_LOC 18
14969: PUSH
14970: LD_VAR 0 2
14974: ARRAY
14975: PUSH
14976: FOR_IN
14977: IFFALSE 15025
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
14979: LD_ADDR_VAR 0 5
14983: PUSH
14984: LD_VAR 0 5
14988: PUSH
14989: LD_INT 22
14991: PUSH
14992: LD_VAR 0 3
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 30
15003: PUSH
15004: LD_VAR 0 4
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PPUSH
15017: CALL_OW 69
15021: PLUS
15022: ST_TO_ADDR
15023: GO 14976
15025: POP
15026: POP
// break ;
15027: GO 15031
// end ;
15029: GO 14937
15031: POP
15032: POP
// list := [ ] ;
15033: LD_ADDR_VAR 0 7
15037: PUSH
15038: EMPTY
15039: ST_TO_ADDR
// for j := 1 to 8 do
15040: LD_ADDR_VAR 0 3
15044: PUSH
15045: DOUBLE
15046: LD_INT 1
15048: DEC
15049: ST_TO_ADDR
15050: LD_INT 8
15052: PUSH
15053: FOR_TO
15054: IFFALSE 15074
// list := list ^ amount ;
15056: LD_ADDR_VAR 0 7
15060: PUSH
15061: LD_VAR 0 7
15065: PUSH
15066: LD_VAR 0 5
15070: ADD
15071: ST_TO_ADDR
15072: GO 15053
15074: POP
15075: POP
// Already_Built := Already_Built ^ [ list ] ;
15076: LD_ADDR_LOC 24
15080: PUSH
15081: LD_LOC 24
15085: PUSH
15086: LD_VAR 0 7
15090: PUSH
15091: EMPTY
15092: LIST
15093: ADD
15094: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
15095: LD_ADDR_LOC 25
15099: PUSH
15100: LD_LOC 25
15104: PUSH
15105: LD_VAR 0 6
15109: PUSH
15110: LD_VAR 0 5
15114: PUSH
15115: LD_LOC 19
15119: PUSH
15120: LD_VAR 0 2
15124: ARRAY
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: LIST
15130: ADD
15131: ST_TO_ADDR
// end ;
15132: GO 14823
15134: POP
15135: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15136: LD_ADDR_LOC 26
15140: PUSH
15141: LD_INT 0
15143: PUSH
15144: LD_INT 0
15146: PUSH
15147: LD_INT 0
15149: PUSH
15150: LD_INT 0
15152: PUSH
15153: LD_INT 0
15155: PUSH
15156: LD_INT 0
15158: PUSH
15159: LD_INT 0
15161: PUSH
15162: LD_INT 0
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: ST_TO_ADDR
// if Limits_Info then
15175: LD_LOC 25
15179: IFFALSE 15195
// Limits_Info := #Limits ^ Limits_Info ;
15181: LD_ADDR_LOC 25
15185: PUSH
15186: LD_STRING #Limits
15188: PUSH
15189: LD_LOC 25
15193: ADD
15194: ST_TO_ADDR
// end ;
15195: LD_VAR 0 1
15199: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
15200: LD_INT 0
15202: PPUSH
15203: PPUSH
15204: PPUSH
15205: PPUSH
// for i := 1 to Restricted_Builds do
15206: LD_ADDR_VAR 0 7
15210: PUSH
15211: DOUBLE
15212: LD_INT 1
15214: DEC
15215: ST_TO_ADDR
15216: LD_LOC 18
15220: PUSH
15221: FOR_TO
15222: IFFALSE 15645
// if BType in Restricted_Builds [ i ] then
15224: LD_VAR 0 2
15228: PUSH
15229: LD_LOC 18
15233: PUSH
15234: LD_VAR 0 7
15238: ARRAY
15239: IN
15240: IFFALSE 15643
// begin if old_side then
15242: LD_VAR 0 4
15246: IFFALSE 15372
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
15248: LD_LOC 24
15252: PUSH
15253: LD_VAR 0 7
15257: ARRAY
15258: PUSH
15259: LD_VAR 0 3
15263: ARRAY
15264: PUSH
15265: LD_VAR 0 5
15269: PLUS
15270: PUSH
15271: LD_LOC 19
15275: PUSH
15276: LD_VAR 0 7
15280: ARRAY
15281: GREATER
15282: IFFALSE 15308
// begin SetSide ( un , old_side ) ;
15284: LD_VAR 0 1
15288: PPUSH
15289: LD_VAR 0 4
15293: PPUSH
15294: CALL_OW 235
// count := 0 ;
15298: LD_ADDR_VAR 0 5
15302: PUSH
15303: LD_INT 0
15305: ST_TO_ADDR
// end else
15306: GO 15372
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
15308: LD_ADDR_LOC 24
15312: PUSH
15313: LD_LOC 24
15317: PPUSH
15318: LD_VAR 0 7
15322: PPUSH
15323: LD_LOC 24
15327: PUSH
15328: LD_VAR 0 7
15332: ARRAY
15333: PPUSH
15334: LD_VAR 0 4
15338: PPUSH
15339: LD_LOC 24
15343: PUSH
15344: LD_VAR 0 7
15348: ARRAY
15349: PUSH
15350: LD_VAR 0 4
15354: ARRAY
15355: PUSH
15356: LD_VAR 0 5
15360: MINUS
15361: PPUSH
15362: CALL_OW 1
15366: PPUSH
15367: CALL_OW 1
15371: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
15372: LD_ADDR_LOC 24
15376: PUSH
15377: LD_LOC 24
15381: PPUSH
15382: LD_VAR 0 7
15386: PPUSH
15387: LD_LOC 24
15391: PUSH
15392: LD_VAR 0 7
15396: ARRAY
15397: PPUSH
15398: LD_VAR 0 3
15402: PPUSH
15403: LD_LOC 24
15407: PUSH
15408: LD_VAR 0 7
15412: ARRAY
15413: PUSH
15414: LD_VAR 0 3
15418: ARRAY
15419: PUSH
15420: LD_VAR 0 5
15424: PLUS
15425: PPUSH
15426: CALL_OW 1
15430: PPUSH
15431: CALL_OW 1
15435: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
15436: LD_VAR 0 5
15440: PUSH
15441: LD_INT 0
15443: NONEQUAL
15444: PUSH
15445: LD_VAR 0 3
15449: PUSH
15450: LD_OWVAR 2
15454: EQUAL
15455: AND
15456: IFFALSE 15499
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
15458: LD_ADDR_LOC 25
15462: PUSH
15463: LD_LOC 25
15467: PPUSH
15468: LD_INT 3
15470: PUSH
15471: LD_VAR 0 7
15475: MUL
15476: PPUSH
15477: LD_LOC 24
15481: PUSH
15482: LD_VAR 0 7
15486: ARRAY
15487: PUSH
15488: LD_VAR 0 3
15492: ARRAY
15493: PPUSH
15494: CALL_OW 1
15498: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
15499: LD_LOC 24
15503: PUSH
15504: LD_VAR 0 7
15508: ARRAY
15509: PUSH
15510: LD_VAR 0 3
15514: ARRAY
15515: PUSH
15516: LD_LOC 19
15520: PUSH
15521: LD_VAR 0 7
15525: ARRAY
15526: GREATER
15527: IFFALSE 15554
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
15529: LD_ADDR_LOC 26
15533: PUSH
15534: LD_LOC 26
15538: PPUSH
15539: LD_VAR 0 3
15543: PPUSH
15544: LD_INT 1
15546: PPUSH
15547: CALL_OW 1
15551: ST_TO_ADDR
// end else
15552: GO 15641
// begin for j := 1 to Restricted_Builds do
15554: LD_ADDR_VAR 0 8
15558: PUSH
15559: DOUBLE
15560: LD_INT 1
15562: DEC
15563: ST_TO_ADDR
15564: LD_LOC 18
15568: PUSH
15569: FOR_TO
15570: IFFALSE 15614
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
15572: LD_LOC 24
15576: PUSH
15577: LD_VAR 0 8
15581: ARRAY
15582: PUSH
15583: LD_VAR 0 3
15587: ARRAY
15588: PUSH
15589: LD_LOC 19
15593: PUSH
15594: LD_VAR 0 8
15598: ARRAY
15599: GREATER
15600: IFFALSE 15612
// begin Is_Cheater := true ;
15602: LD_ADDR_VAR 0 9
15606: PUSH
15607: LD_INT 1
15609: ST_TO_ADDR
// break ;
15610: GO 15614
// end ;
15612: GO 15569
15614: POP
15615: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
15616: LD_ADDR_LOC 26
15620: PUSH
15621: LD_LOC 26
15625: PPUSH
15626: LD_VAR 0 3
15630: PPUSH
15631: LD_VAR 0 9
15635: PPUSH
15636: CALL_OW 1
15640: ST_TO_ADDR
// end ; break ;
15641: GO 15645
// end ;
15643: GO 15221
15645: POP
15646: POP
// end ;
15647: LD_VAR 0 6
15651: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
15652: LD_VAR 0 5
15656: PUSH
15657: LD_LOC 20
15661: IN
15662: PUSH
15663: LD_VAR 0 2
15667: PUSH
15668: LD_LOC 21
15672: IN
15673: OR
15674: PUSH
15675: LD_VAR 0 4
15679: PUSH
15680: LD_LOC 22
15684: IN
15685: OR
15686: PUSH
15687: LD_VAR 0 3
15691: PUSH
15692: LD_LOC 23
15696: IN
15697: OR
15698: IFFALSE 15709
// ComCancel ( factory ) ;
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 127
// end ;
15709: PPOPN 5
15711: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
15712: LD_VAR 0 2
15716: PUSH
15717: LD_LOC 20
15721: IN
15722: IFFALSE 15733
// ComCancel ( building ) ;
15724: LD_VAR 0 1
15728: PPUSH
15729: CALL_OW 127
// end ; end_of_file
15733: PPOPN 2
15735: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
15736: LD_INT 0
15738: PPUSH
15739: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
15740: LD_ADDR_VAR 0 2
15744: PUSH
15745: LD_STRING #Multi1x1-Time
15747: PUSH
15748: LD_OWVAR 1
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: ST_TO_ADDR
// if WaitServerStrings then
15757: LD_EXP 70
15761: IFFALSE 15779
// AllStrings = AllStrings ^ WaitServerStrings ;
15763: LD_ADDR_VAR 0 2
15767: PUSH
15768: LD_VAR 0 2
15772: PUSH
15773: LD_EXP 70
15777: ADD
15778: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
15779: LD_INT 0
15781: PUSH
15782: LD_EXP 38
15786: PUSH
15787: LD_OWVAR 1
15791: MINUS
15792: LESSEQUAL
15793: IFFALSE 15824
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
15795: LD_ADDR_VAR 0 2
15799: PUSH
15800: LD_VAR 0 2
15804: PUSH
15805: LD_STRING #allowedsibbomb
15807: PUSH
15808: LD_EXP 38
15812: PUSH
15813: LD_OWVAR 1
15817: MINUS
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: ADD
15823: ST_TO_ADDR
// if ( ExtraStrings ) then
15824: LD_EXP 69
15828: IFFALSE 15850
// AllStrings := AllStrings ^  ^ ExtraStrings ;
15830: LD_ADDR_VAR 0 2
15834: PUSH
15835: LD_VAR 0 2
15839: PUSH
15840: LD_STRING 
15842: ADD
15843: PUSH
15844: LD_EXP 69
15848: ADD
15849: ST_TO_ADDR
// if ( LimitsStrings ) then
15850: CALL 14026 0 0
15854: IFFALSE 15876
// AllStrings := AllStrings ^  ^ LimitsStrings ;
15856: LD_ADDR_VAR 0 2
15860: PUSH
15861: LD_VAR 0 2
15865: PUSH
15866: LD_STRING 
15868: ADD
15869: PUSH
15870: CALL 14026 0 0
15874: ADD
15875: ST_TO_ADDR
// Display_Strings := AllStrings ;
15876: LD_ADDR_OWVAR 47
15880: PUSH
15881: LD_VAR 0 2
15885: ST_TO_ADDR
// end ;
15886: LD_VAR 0 1
15890: RET
// every 0 0$1 do
15891: GO 15893
15893: DISABLE
// begin ShowTimer ;
15894: CALL 15736 0 0
// enable ;
15898: ENABLE
// end ; end_of_file
15899: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
15900: LD_INT 0
15902: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
15903: LD_VAR 0 1
15907: PPUSH
15908: CALL_OW 255
15912: PUSH
15913: LD_VAR 0 4
15917: EQUAL
15918: IFFALSE 15937
// begin SetAchievement ( ACH_RAD ) ;
15920: LD_STRING ACH_RAD
15922: PPUSH
15923: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
15927: LD_STRING ACH_NL
15929: PPUSH
15930: LD_INT 1
15932: PPUSH
15933: CALL_OW 564
// end end ;
15937: LD_VAR 0 5
15941: RET
// export function SA_Win ( side ) ; begin
15942: LD_INT 0
15944: PPUSH
// case side of 1 :
15945: LD_VAR 0 1
15949: PUSH
15950: LD_INT 1
15952: DOUBLE
15953: EQUAL
15954: IFTRUE 15958
15956: GO 15971
15958: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
15959: LD_STRING ACH_AH
15961: PPUSH
15962: LD_INT 1
15964: PPUSH
15965: CALL_OW 564
15969: GO 16134
15971: LD_INT 2
15973: DOUBLE
15974: EQUAL
15975: IFTRUE 15979
15977: GO 15992
15979: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
15980: LD_STRING ACH_E
15982: PPUSH
15983: LD_INT 1
15985: PPUSH
15986: CALL_OW 564
15990: GO 16134
15992: LD_INT 3
15994: DOUBLE
15995: EQUAL
15996: IFTRUE 16000
15998: GO 16013
16000: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
16001: LD_STRING ACH_OOL
16003: PPUSH
16004: LD_INT 1
16006: PPUSH
16007: CALL_OW 564
16011: GO 16134
16013: LD_INT 1
16015: PUSH
16016: LD_INT 2
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: DOUBLE
16023: EQUAL
16024: IFTRUE 16028
16026: GO 16053
16028: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
16029: LD_STRING ACH_AH
16031: PPUSH
16032: LD_REAL  5.00000000000000E-0001
16035: PPUSH
16036: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
16040: LD_STRING ACH_E
16042: PPUSH
16043: LD_REAL  5.00000000000000E-0001
16046: PPUSH
16047: CALL_OW 564
// end ; [ 2 , 3 ] :
16051: GO 16134
16053: LD_INT 2
16055: PUSH
16056: LD_INT 3
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: DOUBLE
16063: EQUAL
16064: IFTRUE 16068
16066: GO 16093
16068: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
16069: LD_STRING ACH_OOL
16071: PPUSH
16072: LD_REAL  5.00000000000000E-0001
16075: PPUSH
16076: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
16080: LD_STRING ACH_E
16082: PPUSH
16083: LD_REAL  5.00000000000000E-0001
16086: PPUSH
16087: CALL_OW 564
// end ; [ 3 , 1 ] :
16091: GO 16134
16093: LD_INT 3
16095: PUSH
16096: LD_INT 1
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: DOUBLE
16103: EQUAL
16104: IFTRUE 16108
16106: GO 16133
16108: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
16109: LD_STRING ACH_AH
16111: PPUSH
16112: LD_REAL  5.00000000000000E-0001
16115: PPUSH
16116: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
16120: LD_STRING ACH_OOL
16122: PPUSH
16123: LD_REAL  5.00000000000000E-0001
16126: PPUSH
16127: CALL_OW 564
// end ; end ;
16131: GO 16134
16133: POP
// end ; end_of_file
16134: LD_VAR 0 2
16138: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
16139: LD_INT 0
16141: PPUSH
16142: PPUSH
// enable ( 98 ) ;
16143: LD_INT 98
16145: ENABLE_MARKED
// GameEnded = false ;
16146: LD_ADDR_LOC 28
16150: PUSH
16151: LD_INT 0
16153: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16154: LD_ADDR_LOC 27
16158: PUSH
16159: LD_INT 0
16161: PUSH
16162: LD_INT 0
16164: PUSH
16165: LD_INT 0
16167: PUSH
16168: LD_INT 0
16170: PUSH
16171: LD_INT 0
16173: PUSH
16174: LD_INT 0
16176: PUSH
16177: LD_INT 0
16179: PUSH
16180: LD_INT 0
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: ST_TO_ADDR
// unfoged = false ;
16193: LD_ADDR_LOC 29
16197: PUSH
16198: LD_INT 0
16200: ST_TO_ADDR
// for i = 1 to side_positions do
16201: LD_ADDR_VAR 0 2
16205: PUSH
16206: DOUBLE
16207: LD_INT 1
16209: DEC
16210: ST_TO_ADDR
16211: LD_EXP 43
16215: PUSH
16216: FOR_TO
16217: IFFALSE 16257
// if not side_positions [ i ] then
16219: LD_EXP 43
16223: PUSH
16224: LD_VAR 0 2
16228: ARRAY
16229: NOT
16230: IFFALSE 16255
// defaited = replace ( defaited , i , true ) ;
16232: LD_ADDR_LOC 27
16236: PUSH
16237: LD_LOC 27
16241: PPUSH
16242: LD_VAR 0 2
16246: PPUSH
16247: LD_INT 1
16249: PPUSH
16250: CALL_OW 1
16254: ST_TO_ADDR
16255: GO 16216
16257: POP
16258: POP
// end ;
16259: LD_VAR 0 1
16263: RET
// function CanWinLoose ; begin
16264: LD_INT 0
16266: PPUSH
// Result := true ;
16267: LD_ADDR_VAR 0 1
16271: PUSH
16272: LD_INT 1
16274: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
16275: CALL_OW 518
16279: PUSH
16280: CALL_OW 519
16284: PUSH
16285: LD_INT 0
16287: GREATER
16288: AND
16289: IFFALSE 16299
// Result := false ;
16291: LD_ADDR_VAR 0 1
16295: PUSH
16296: LD_INT 0
16298: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
16299: CALL_OW 531
16303: PUSH
16304: CALL_OW 519
16308: PUSH
16309: LD_INT 1
16311: GREATER
16312: AND
16313: IFFALSE 16323
// Result := false ;
16315: LD_ADDR_VAR 0 1
16319: PUSH
16320: LD_INT 0
16322: ST_TO_ADDR
// end ;
16323: LD_VAR 0 1
16327: RET
// export function HasPower ( i ) ; var k , h ; begin
16328: LD_INT 0
16330: PPUSH
16331: PPUSH
16332: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
16333: LD_VAR 0 1
16337: PPUSH
16338: CALL_OW 108
16342: NOT
16343: PUSH
16344: LD_EXP 42
16348: PUSH
16349: LD_VAR 0 1
16353: ARRAY
16354: NOT
16355: AND
16356: PUSH
16357: LD_OWVAR 4
16361: AND
16362: IFFALSE 16374
// begin result = false ;
16364: LD_ADDR_VAR 0 2
16368: PUSH
16369: LD_INT 0
16371: ST_TO_ADDR
// end else
16372: GO 16669
// case def_win_rules of 0 :
16374: LD_EXP 18
16378: PUSH
16379: LD_INT 0
16381: DOUBLE
16382: EQUAL
16383: IFTRUE 16387
16385: GO 16550
16387: POP
// if def_people_respawning then
16388: LD_EXP 19
16392: IFFALSE 16483
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
16394: LD_ADDR_VAR 0 2
16398: PUSH
16399: LD_INT 22
16401: PUSH
16402: LD_VAR 0 1
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 2
16413: PUSH
16414: LD_INT 21
16416: PUSH
16417: LD_INT 1
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 33
16426: PUSH
16427: LD_INT 3
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 33
16436: PUSH
16437: LD_INT 5
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: LD_INT 30
16446: PUSH
16447: LD_INT 0
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: LD_INT 30
16456: PUSH
16457: LD_INT 1
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PPUSH
16476: CALL_OW 69
16480: ST_TO_ADDR
16481: GO 16548
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
16483: LD_ADDR_VAR 0 2
16487: PUSH
16488: LD_INT 22
16490: PUSH
16491: LD_VAR 0 1
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 2
16502: PUSH
16503: LD_INT 21
16505: PUSH
16506: LD_INT 1
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 33
16515: PUSH
16516: LD_INT 3
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 33
16525: PUSH
16526: LD_INT 5
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PPUSH
16543: CALL_OW 69
16547: ST_TO_ADDR
16548: GO 16669
16550: LD_INT 1
16552: DOUBLE
16553: EQUAL
16554: IFTRUE 16558
16556: GO 16597
16558: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
16559: LD_ADDR_VAR 0 2
16563: PUSH
16564: LD_INT 22
16566: PUSH
16567: LD_VAR 0 1
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 21
16578: PUSH
16579: LD_INT 1
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PPUSH
16590: CALL_OW 69
16594: ST_TO_ADDR
16595: GO 16669
16597: LD_INT 2
16599: DOUBLE
16600: EQUAL
16601: IFTRUE 16605
16603: GO 16668
16605: POP
// begin h = false ;
16606: LD_ADDR_VAR 0 4
16610: PUSH
16611: LD_INT 0
16613: ST_TO_ADDR
// for k in heroes [ i ] do
16614: LD_ADDR_VAR 0 3
16618: PUSH
16619: LD_EXP 57
16623: PUSH
16624: LD_VAR 0 1
16628: ARRAY
16629: PUSH
16630: FOR_IN
16631: IFFALSE 16654
// if IsLive ( k ) then
16633: LD_VAR 0 3
16637: PPUSH
16638: CALL_OW 300
16642: IFFALSE 16652
// h = true ;
16644: LD_ADDR_VAR 0 4
16648: PUSH
16649: LD_INT 1
16651: ST_TO_ADDR
16652: GO 16630
16654: POP
16655: POP
// Result := h ;
16656: LD_ADDR_VAR 0 2
16660: PUSH
16661: LD_VAR 0 4
16665: ST_TO_ADDR
// end ; end ;
16666: GO 16669
16668: POP
// end ;
16669: LD_VAR 0 2
16673: RET
// function AlliedSides ( i , j ) ; begin
16674: LD_INT 0
16676: PPUSH
// Result := false ;
16677: LD_ADDR_VAR 0 3
16681: PUSH
16682: LD_INT 0
16684: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
16685: LD_VAR 0 1
16689: PPUSH
16690: LD_VAR 0 2
16694: PPUSH
16695: CALL_OW 81
16699: PUSH
16700: LD_INT 1
16702: EQUAL
16703: PUSH
16704: LD_VAR 0 2
16708: PPUSH
16709: LD_VAR 0 1
16713: PPUSH
16714: CALL_OW 81
16718: PUSH
16719: LD_INT 1
16721: EQUAL
16722: AND
16723: PUSH
16724: LD_VAR 0 1
16728: PPUSH
16729: CALL_OW 83
16733: AND
16734: PUSH
16735: LD_VAR 0 2
16739: PPUSH
16740: CALL_OW 83
16744: AND
16745: IFFALSE 16755
// Result := true ;
16747: LD_ADDR_VAR 0 3
16751: PUSH
16752: LD_INT 1
16754: ST_TO_ADDR
// end ;
16755: LD_VAR 0 3
16759: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
16760: CALL 16264 0 0
16764: PUSH
16765: LD_LOC 28
16769: NOT
16770: AND
16771: IFFALSE 16787
16773: GO 16775
16775: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
16776: LD_ADDR_EXP 70
16780: PUSH
16781: LD_STRING #Player-Ended
16783: PUSH
16784: EMPTY
16785: LIST
16786: ST_TO_ADDR
16787: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
16788: CALL 16264 0 0
16792: PUSH
16793: LD_LOC 28
16797: AND
16798: IFFALSE 16807
16800: GO 16802
16802: DISABLE
// YouLostInMultiplayer ;
16803: CALL_OW 107
16807: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
16808: CALL 16264 0 0
16812: NOT
16813: PUSH
16814: CALL_OW 531
16818: NOT
16819: AND
16820: IFFALSE 16836
16822: GO 16824
16824: DISABLE
// WaitServerStrings = [ #server-wait ] ;
16825: LD_ADDR_EXP 70
16829: PUSH
16830: LD_STRING #server-wait
16832: PUSH
16833: EMPTY
16834: LIST
16835: ST_TO_ADDR
16836: END
// every 100 trigger IAmSpec do
16837: CALL_OW 531
16841: IFFALSE 16857
16843: GO 16845
16845: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
16846: LD_ADDR_EXP 70
16850: PUSH
16851: LD_STRING #Player-IAmSpec
16853: PUSH
16854: EMPTY
16855: LIST
16856: ST_TO_ADDR
16857: END
// every 100 trigger GameEnded and IAmSpec do
16858: LD_LOC 28
16862: PUSH
16863: CALL_OW 531
16867: AND
16868: IFFALSE 16877
16870: GO 16872
16872: DISABLE
// YouLostInMultiplayer ;
16873: CALL_OW 107
16877: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
16878: CALL 16264 0 0
16882: PUSH
16883: LD_LOC 28
16887: NOT
16888: AND
16889: IFFALSE 16905
16891: GO 16893
16893: DISABLE
// WaitServerStrings = [ $player-win ] ;
16894: LD_ADDR_EXP 70
16898: PUSH
16899: LD_STRING $player-win
16901: PUSH
16902: EMPTY
16903: LIST
16904: ST_TO_ADDR
16905: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
16906: CALL 16264 0 0
16910: PUSH
16911: LD_LOC 28
16915: AND
16916: IFFALSE 16940
16918: GO 16920
16920: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
16921: LD_EXP 44
16925: PUSH
16926: LD_OWVAR 2
16930: ARRAY
16931: PPUSH
16932: CALL 15942 0 1
// YouWinInMultiplayer ;
16936: CALL_OW 106
// end ;
16940: END
// every 100 trigger isEditor marked 401 do
16941: LD_OWVAR 84
16945: IFFALSE 16961
16947: GO 16949
16949: DISABLE
// Debug_Strings = [ You won ] ;
16950: LD_ADDR_OWVAR 48
16954: PUSH
16955: LD_STRING You won
16957: PUSH
16958: EMPTY
16959: LIST
16960: ST_TO_ADDR
16961: END
// every 100 trigger isEditor marked 400 do
16962: LD_OWVAR 84
16966: IFFALSE 16982
16968: GO 16970
16970: DISABLE
// Debug_Strings = [ You loss ] ;
16971: LD_ADDR_OWVAR 48
16975: PUSH
16976: LD_STRING You loss
16978: PUSH
16979: EMPTY
16980: LIST
16981: ST_TO_ADDR
16982: END
// every 100 marked 98 do var i , un ;
16983: GO 16985
16985: DISABLE
16986: LD_INT 0
16988: PPUSH
16989: PPUSH
// begin for i = 1 to side_positions do
16990: LD_ADDR_VAR 0 1
16994: PUSH
16995: DOUBLE
16996: LD_INT 1
16998: DEC
16999: ST_TO_ADDR
17000: LD_EXP 43
17004: PUSH
17005: FOR_TO
17006: IFFALSE 17129
// if side_positions [ i ] then
17008: LD_EXP 43
17012: PUSH
17013: LD_VAR 0 1
17017: ARRAY
17018: IFFALSE 17127
// if not HasPower ( i ) and not Defaited [ i ] then
17020: LD_VAR 0 1
17024: PPUSH
17025: CALL 16328 0 1
17029: NOT
17030: PUSH
17031: LD_LOC 27
17035: PUSH
17036: LD_VAR 0 1
17040: ARRAY
17041: NOT
17042: AND
17043: IFFALSE 17127
// begin un = filterallunits ( [ f_side , i ] ) ;
17045: LD_ADDR_VAR 0 2
17049: PUSH
17050: LD_INT 22
17052: PUSH
17053: LD_VAR 0 1
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PPUSH
17062: CALL_OW 69
17066: ST_TO_ADDR
// if un then
17067: LD_VAR 0 2
17071: IFFALSE 17085
// SetSide ( un , 0 ) ;
17073: LD_VAR 0 2
17077: PPUSH
17078: LD_INT 0
17080: PPUSH
17081: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
17085: LD_ADDR_LOC 27
17089: PUSH
17090: LD_LOC 27
17094: PPUSH
17095: LD_VAR 0 1
17099: PPUSH
17100: LD_INT 1
17102: PPUSH
17103: CALL_OW 1
17107: ST_TO_ADDR
// if i = your_side then
17108: LD_VAR 0 1
17112: PUSH
17113: LD_OWVAR 2
17117: EQUAL
17118: IFFALSE 17127
// begin Multiplayer_Loose_Message ;
17120: CALL_OW 521
// enable ( 400 ) ;
17124: LD_INT 400
17126: ENABLE_MARKED
// end ; end ;
17127: GO 17005
17129: POP
17130: POP
// if not Unfoged and defaited [ your_side ] then
17131: LD_LOC 29
17135: NOT
17136: PUSH
17137: LD_LOC 27
17141: PUSH
17142: LD_OWVAR 2
17146: ARRAY
17147: AND
17148: IFFALSE 17154
// Unfog ;
17150: CALL 17340 0 0
// DidGameEnd ;
17154: CALL 17169 0 0
// if not GameEnded then
17158: LD_LOC 28
17162: NOT
17163: IFFALSE 17166
// enable ;
17165: ENABLE
// end ;
17166: PPOPN 2
17168: END
// function DidGameEnd ; var i , k , enemy ; begin
17169: LD_INT 0
17171: PPUSH
17172: PPUSH
17173: PPUSH
17174: PPUSH
// enemy = [ ] ;
17175: LD_ADDR_VAR 0 4
17179: PUSH
17180: EMPTY
17181: ST_TO_ADDR
// for i = 1 to side_positions do
17182: LD_ADDR_VAR 0 2
17186: PUSH
17187: DOUBLE
17188: LD_INT 1
17190: DEC
17191: ST_TO_ADDR
17192: LD_EXP 43
17196: PUSH
17197: FOR_TO
17198: IFFALSE 17302
// if not defaited [ i ] then
17200: LD_LOC 27
17204: PUSH
17205: LD_VAR 0 2
17209: ARRAY
17210: NOT
17211: IFFALSE 17300
// for k = 1 to side_positions do
17213: LD_ADDR_VAR 0 3
17217: PUSH
17218: DOUBLE
17219: LD_INT 1
17221: DEC
17222: ST_TO_ADDR
17223: LD_EXP 43
17227: PUSH
17228: FOR_TO
17229: IFFALSE 17298
// if not defaited [ k ] then
17231: LD_LOC 27
17235: PUSH
17236: LD_VAR 0 3
17240: ARRAY
17241: NOT
17242: IFFALSE 17296
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
17244: LD_VAR 0 2
17248: PPUSH
17249: LD_VAR 0 3
17253: PPUSH
17254: CALL_OW 81
17258: PUSH
17259: LD_INT 2
17261: PUSH
17262: LD_INT 0
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: IN
17269: IFFALSE 17296
// enemy = enemy ^ [ i , k ] ;
17271: LD_ADDR_VAR 0 4
17275: PUSH
17276: LD_VAR 0 4
17280: PUSH
17281: LD_VAR 0 2
17285: PUSH
17286: LD_VAR 0 3
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: ADD
17295: ST_TO_ADDR
17296: GO 17228
17298: POP
17299: POP
17300: GO 17197
17302: POP
17303: POP
// if not enemy then
17304: LD_VAR 0 4
17308: NOT
17309: IFFALSE 17335
// begin GameEnded = true ;
17311: LD_ADDR_LOC 28
17315: PUSH
17316: LD_INT 1
17318: ST_TO_ADDR
// if not defaited [ your_side ] then
17319: LD_LOC 27
17323: PUSH
17324: LD_OWVAR 2
17328: ARRAY
17329: NOT
17330: IFFALSE 17335
// enable ( 401 ) ;
17332: LD_INT 401
17334: ENABLE_MARKED
// end ; end ;
17335: LD_VAR 0 1
17339: RET
// function unfog ; var k , friends ; begin
17340: LD_INT 0
17342: PPUSH
17343: PPUSH
17344: PPUSH
// for k = 1 to side_positions do
17345: LD_ADDR_VAR 0 2
17349: PUSH
17350: DOUBLE
17351: LD_INT 1
17353: DEC
17354: ST_TO_ADDR
17355: LD_EXP 43
17359: PUSH
17360: FOR_TO
17361: IFFALSE 17417
// if not defaited [ k ] then
17363: LD_LOC 27
17367: PUSH
17368: LD_VAR 0 2
17372: ARRAY
17373: NOT
17374: IFFALSE 17415
// if GetAttitude ( your_side , k ) in [ att_friend ] then
17376: LD_OWVAR 2
17380: PPUSH
17381: LD_VAR 0 2
17385: PPUSH
17386: CALL_OW 81
17390: PUSH
17391: LD_INT 1
17393: PUSH
17394: EMPTY
17395: LIST
17396: IN
17397: IFFALSE 17415
// friends = friends ^ k ;
17399: LD_ADDR_VAR 0 3
17403: PUSH
17404: LD_VAR 0 3
17408: PUSH
17409: LD_VAR 0 2
17413: ADD
17414: ST_TO_ADDR
17415: GO 17360
17417: POP
17418: POP
// if not friends then
17419: LD_VAR 0 3
17423: NOT
17424: IFFALSE 17441
// begin fogoff ( true ) ;
17426: LD_INT 1
17428: PPUSH
17429: CALL_OW 344
// unfoged = true ;
17433: LD_ADDR_LOC 29
17437: PUSH
17438: LD_INT 1
17440: ST_TO_ADDR
// end ; end ;
17441: LD_VAR 0 1
17445: RET
// export function MakeGameEnd ; begin
17446: LD_INT 0
17448: PPUSH
// fogoff ( true ) ;
17449: LD_INT 1
17451: PPUSH
17452: CALL_OW 344
// unfoged = true ;
17456: LD_ADDR_LOC 29
17460: PUSH
17461: LD_INT 1
17463: ST_TO_ADDR
// wait ( 0 0$5 ) ;
17464: LD_INT 175
17466: PPUSH
17467: CALL_OW 67
// GameEnded = true ;
17471: LD_ADDR_LOC 28
17475: PUSH
17476: LD_INT 1
17478: ST_TO_ADDR
// end ;
17479: LD_VAR 0 1
17483: RET
// export function GetGameEnded ; begin
17484: LD_INT 0
17486: PPUSH
// result = GameEnded ;
17487: LD_ADDR_VAR 0 1
17491: PUSH
17492: LD_LOC 28
17496: ST_TO_ADDR
// end ; end_of_file
17497: LD_VAR 0 1
17501: RET
// export function SetMpTechs ( ) ; var side , i ; begin
17502: LD_INT 0
17504: PPUSH
17505: PPUSH
17506: PPUSH
// for side = 1 to 8 do
17507: LD_ADDR_VAR 0 2
17511: PUSH
17512: DOUBLE
17513: LD_INT 1
17515: DEC
17516: ST_TO_ADDR
17517: LD_INT 8
17519: PUSH
17520: FOR_TO
17521: IFFALSE 17642
// begin for i = 1 to 72 do
17523: LD_ADDR_VAR 0 3
17527: PUSH
17528: DOUBLE
17529: LD_INT 1
17531: DEC
17532: ST_TO_ADDR
17533: LD_INT 72
17535: PUSH
17536: FOR_TO
17537: IFFALSE 17568
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
17539: LD_VAR 0 3
17543: PPUSH
17544: LD_VAR 0 2
17548: PPUSH
17549: LD_INT 0
17551: PPUSH
17552: LD_VAR 0 3
17556: PPUSH
17557: CALL_OW 565
17561: PPUSH
17562: CALL_OW 322
17566: GO 17536
17568: POP
17569: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
17570: LD_INT 73
17572: PPUSH
17573: LD_VAR 0 2
17577: PPUSH
17578: LD_INT 0
17580: PPUSH
17581: LD_INT 25
17583: PPUSH
17584: CALL_OW 565
17588: PPUSH
17589: CALL_OW 322
// for i = 0 to 40 do
17593: LD_ADDR_VAR 0 3
17597: PUSH
17598: DOUBLE
17599: LD_INT 0
17601: DEC
17602: ST_TO_ADDR
17603: LD_INT 40
17605: PUSH
17606: FOR_TO
17607: IFFALSE 17638
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
17609: LD_VAR 0 3
17613: PPUSH
17614: LD_VAR 0 2
17618: PPUSH
17619: LD_INT 1
17621: PPUSH
17622: LD_VAR 0 3
17626: PPUSH
17627: CALL_OW 565
17631: PPUSH
17632: CALL_OW 324
17636: GO 17606
17638: POP
17639: POP
// end ;
17640: GO 17520
17642: POP
17643: POP
// end ;
17644: LD_VAR 0 1
17648: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
17649: LD_INT 0
17651: PPUSH
17652: PPUSH
17653: PPUSH
// for side = 1 to 8 do
17654: LD_ADDR_VAR 0 3
17658: PUSH
17659: DOUBLE
17660: LD_INT 1
17662: DEC
17663: ST_TO_ADDR
17664: LD_INT 8
17666: PUSH
17667: FOR_TO
17668: IFFALSE 21664
// begin for i = 1 to 73 do
17670: LD_ADDR_VAR 0 4
17674: PUSH
17675: DOUBLE
17676: LD_INT 1
17678: DEC
17679: ST_TO_ADDR
17680: LD_INT 73
17682: PUSH
17683: FOR_TO
17684: IFFALSE 17705
// SetTech ( i , side , state_disabled ) ;
17686: LD_VAR 0 4
17690: PPUSH
17691: LD_VAR 0 3
17695: PPUSH
17696: LD_INT 0
17698: PPUSH
17699: CALL_OW 322
17703: GO 17683
17705: POP
17706: POP
// for i = 0 to 40 do
17707: LD_ADDR_VAR 0 4
17711: PUSH
17712: DOUBLE
17713: LD_INT 0
17715: DEC
17716: ST_TO_ADDR
17717: LD_INT 40
17719: PUSH
17720: FOR_TO
17721: IFFALSE 17742
// SetRestrict ( i , side , false ) ;
17723: LD_VAR 0 4
17727: PPUSH
17728: LD_VAR 0 3
17732: PPUSH
17733: LD_INT 0
17735: PPUSH
17736: CALL_OW 324
17740: GO 17720
17742: POP
17743: POP
// case level of 1 :
17744: LD_VAR 0 1
17748: PUSH
17749: LD_INT 1
17751: DOUBLE
17752: EQUAL
17753: IFTRUE 17757
17755: GO 17910
17757: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17758: LD_INT 35
17760: PPUSH
17761: LD_VAR 0 3
17765: PPUSH
17766: LD_INT 1
17768: PPUSH
17769: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17773: LD_INT 45
17775: PPUSH
17776: LD_VAR 0 3
17780: PPUSH
17781: LD_INT 1
17783: PPUSH
17784: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17788: LD_INT 46
17790: PPUSH
17791: LD_VAR 0 3
17795: PPUSH
17796: LD_INT 1
17798: PPUSH
17799: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17803: LD_INT 47
17805: PPUSH
17806: LD_VAR 0 3
17810: PPUSH
17811: LD_INT 1
17813: PPUSH
17814: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17818: LD_INT 0
17820: PPUSH
17821: LD_VAR 0 3
17825: PPUSH
17826: LD_INT 1
17828: PPUSH
17829: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17833: LD_INT 2
17835: PPUSH
17836: LD_VAR 0 3
17840: PPUSH
17841: LD_INT 1
17843: PPUSH
17844: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17848: LD_INT 4
17850: PPUSH
17851: LD_VAR 0 3
17855: PPUSH
17856: LD_INT 1
17858: PPUSH
17859: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17863: LD_INT 6
17865: PPUSH
17866: LD_VAR 0 3
17870: PPUSH
17871: LD_INT 1
17873: PPUSH
17874: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17878: LD_INT 29
17880: PPUSH
17881: LD_VAR 0 3
17885: PPUSH
17886: LD_INT 1
17888: PPUSH
17889: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17893: LD_INT 31
17895: PPUSH
17896: LD_VAR 0 3
17900: PPUSH
17901: LD_INT 1
17903: PPUSH
17904: CALL_OW 324
// end ; 2 :
17908: GO 21662
17910: LD_INT 2
17912: DOUBLE
17913: EQUAL
17914: IFTRUE 17918
17916: GO 18116
17918: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17919: LD_INT 35
17921: PPUSH
17922: LD_VAR 0 3
17926: PPUSH
17927: LD_INT 1
17929: PPUSH
17930: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17934: LD_INT 45
17936: PPUSH
17937: LD_VAR 0 3
17941: PPUSH
17942: LD_INT 1
17944: PPUSH
17945: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17949: LD_INT 46
17951: PPUSH
17952: LD_VAR 0 3
17956: PPUSH
17957: LD_INT 1
17959: PPUSH
17960: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17964: LD_INT 47
17966: PPUSH
17967: LD_VAR 0 3
17971: PPUSH
17972: LD_INT 1
17974: PPUSH
17975: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17979: LD_INT 1
17981: PPUSH
17982: LD_VAR 0 3
17986: PPUSH
17987: LD_INT 1
17989: PPUSH
17990: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17994: LD_INT 2
17996: PPUSH
17997: LD_VAR 0 3
18001: PPUSH
18002: LD_INT 1
18004: PPUSH
18005: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18009: LD_INT 11
18011: PPUSH
18012: LD_VAR 0 3
18016: PPUSH
18017: LD_INT 1
18019: PPUSH
18020: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18024: LD_INT 0
18026: PPUSH
18027: LD_VAR 0 3
18031: PPUSH
18032: LD_INT 1
18034: PPUSH
18035: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18039: LD_INT 2
18041: PPUSH
18042: LD_VAR 0 3
18046: PPUSH
18047: LD_INT 1
18049: PPUSH
18050: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18054: LD_INT 4
18056: PPUSH
18057: LD_VAR 0 3
18061: PPUSH
18062: LD_INT 1
18064: PPUSH
18065: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18069: LD_INT 6
18071: PPUSH
18072: LD_VAR 0 3
18076: PPUSH
18077: LD_INT 1
18079: PPUSH
18080: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18084: LD_INT 29
18086: PPUSH
18087: LD_VAR 0 3
18091: PPUSH
18092: LD_INT 1
18094: PPUSH
18095: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18099: LD_INT 31
18101: PPUSH
18102: LD_VAR 0 3
18106: PPUSH
18107: LD_INT 1
18109: PPUSH
18110: CALL_OW 324
// end ; 3 :
18114: GO 21662
18116: LD_INT 3
18118: DOUBLE
18119: EQUAL
18120: IFTRUE 18124
18122: GO 18577
18124: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18125: LD_INT 35
18127: PPUSH
18128: LD_VAR 0 3
18132: PPUSH
18133: LD_INT 1
18135: PPUSH
18136: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18140: LD_INT 45
18142: PPUSH
18143: LD_VAR 0 3
18147: PPUSH
18148: LD_INT 1
18150: PPUSH
18151: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18155: LD_INT 46
18157: PPUSH
18158: LD_VAR 0 3
18162: PPUSH
18163: LD_INT 1
18165: PPUSH
18166: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18170: LD_INT 47
18172: PPUSH
18173: LD_VAR 0 3
18177: PPUSH
18178: LD_INT 1
18180: PPUSH
18181: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18185: LD_INT 1
18187: PPUSH
18188: LD_VAR 0 3
18192: PPUSH
18193: LD_INT 1
18195: PPUSH
18196: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18200: LD_INT 2
18202: PPUSH
18203: LD_VAR 0 3
18207: PPUSH
18208: LD_INT 1
18210: PPUSH
18211: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18215: LD_INT 11
18217: PPUSH
18218: LD_VAR 0 3
18222: PPUSH
18223: LD_INT 1
18225: PPUSH
18226: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18230: LD_INT 48
18232: PPUSH
18233: LD_VAR 0 3
18237: PPUSH
18238: LD_INT 1
18240: PPUSH
18241: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18245: LD_INT 69
18247: PPUSH
18248: LD_VAR 0 3
18252: PPUSH
18253: LD_INT 1
18255: PPUSH
18256: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18260: LD_INT 39
18262: PPUSH
18263: LD_VAR 0 3
18267: PPUSH
18268: LD_INT 1
18270: PPUSH
18271: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18275: LD_INT 43
18277: PPUSH
18278: LD_VAR 0 3
18282: PPUSH
18283: LD_INT 1
18285: PPUSH
18286: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18290: LD_INT 51
18292: PPUSH
18293: LD_VAR 0 3
18297: PPUSH
18298: LD_INT 1
18300: PPUSH
18301: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18305: LD_INT 6
18307: PPUSH
18308: LD_VAR 0 3
18312: PPUSH
18313: LD_INT 1
18315: PPUSH
18316: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18320: LD_INT 0
18322: PPUSH
18323: LD_VAR 0 3
18327: PPUSH
18328: LD_INT 1
18330: PPUSH
18331: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18335: LD_INT 2
18337: PPUSH
18338: LD_VAR 0 3
18342: PPUSH
18343: LD_INT 1
18345: PPUSH
18346: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18350: LD_INT 3
18352: PPUSH
18353: LD_VAR 0 3
18357: PPUSH
18358: LD_INT 1
18360: PPUSH
18361: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18365: LD_INT 4
18367: PPUSH
18368: LD_VAR 0 3
18372: PPUSH
18373: LD_INT 1
18375: PPUSH
18376: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18380: LD_INT 6
18382: PPUSH
18383: LD_VAR 0 3
18387: PPUSH
18388: LD_INT 1
18390: PPUSH
18391: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18395: LD_INT 7
18397: PPUSH
18398: LD_VAR 0 3
18402: PPUSH
18403: LD_INT 1
18405: PPUSH
18406: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18410: LD_INT 8
18412: PPUSH
18413: LD_VAR 0 3
18417: PPUSH
18418: LD_INT 1
18420: PPUSH
18421: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18425: LD_INT 10
18427: PPUSH
18428: LD_VAR 0 3
18432: PPUSH
18433: LD_INT 1
18435: PPUSH
18436: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18440: LD_INT 15
18442: PPUSH
18443: LD_VAR 0 3
18447: PPUSH
18448: LD_INT 1
18450: PPUSH
18451: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18455: LD_INT 16
18457: PPUSH
18458: LD_VAR 0 3
18462: PPUSH
18463: LD_INT 1
18465: PPUSH
18466: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18470: LD_INT 17
18472: PPUSH
18473: LD_VAR 0 3
18477: PPUSH
18478: LD_INT 1
18480: PPUSH
18481: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18485: LD_INT 20
18487: PPUSH
18488: LD_VAR 0 3
18492: PPUSH
18493: LD_INT 1
18495: PPUSH
18496: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18500: LD_INT 26
18502: PPUSH
18503: LD_VAR 0 3
18507: PPUSH
18508: LD_INT 1
18510: PPUSH
18511: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18515: LD_INT 27
18517: PPUSH
18518: LD_VAR 0 3
18522: PPUSH
18523: LD_INT 1
18525: PPUSH
18526: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18530: LD_INT 29
18532: PPUSH
18533: LD_VAR 0 3
18537: PPUSH
18538: LD_INT 1
18540: PPUSH
18541: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18545: LD_INT 31
18547: PPUSH
18548: LD_VAR 0 3
18552: PPUSH
18553: LD_INT 1
18555: PPUSH
18556: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18560: LD_INT 32
18562: PPUSH
18563: LD_VAR 0 3
18567: PPUSH
18568: LD_INT 1
18570: PPUSH
18571: CALL_OW 324
// end ; 4 :
18575: GO 21662
18577: LD_INT 4
18579: DOUBLE
18580: EQUAL
18581: IFTRUE 18585
18583: GO 19533
18585: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18586: LD_INT 35
18588: PPUSH
18589: LD_VAR 0 3
18593: PPUSH
18594: LD_INT 1
18596: PPUSH
18597: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18601: LD_INT 45
18603: PPUSH
18604: LD_VAR 0 3
18608: PPUSH
18609: LD_INT 1
18611: PPUSH
18612: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18616: LD_INT 46
18618: PPUSH
18619: LD_VAR 0 3
18623: PPUSH
18624: LD_INT 1
18626: PPUSH
18627: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18631: LD_INT 47
18633: PPUSH
18634: LD_VAR 0 3
18638: PPUSH
18639: LD_INT 1
18641: PPUSH
18642: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18646: LD_INT 1
18648: PPUSH
18649: LD_VAR 0 3
18653: PPUSH
18654: LD_INT 1
18656: PPUSH
18657: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18661: LD_INT 2
18663: PPUSH
18664: LD_VAR 0 3
18668: PPUSH
18669: LD_INT 1
18671: PPUSH
18672: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18676: LD_INT 11
18678: PPUSH
18679: LD_VAR 0 3
18683: PPUSH
18684: LD_INT 1
18686: PPUSH
18687: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18691: LD_INT 20
18693: PPUSH
18694: LD_VAR 0 3
18698: PPUSH
18699: LD_INT 1
18701: PPUSH
18702: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18706: LD_INT 48
18708: PPUSH
18709: LD_VAR 0 3
18713: PPUSH
18714: LD_INT 1
18716: PPUSH
18717: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18721: LD_INT 49
18723: PPUSH
18724: LD_VAR 0 3
18728: PPUSH
18729: LD_INT 1
18731: PPUSH
18732: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18736: LD_INT 69
18738: PPUSH
18739: LD_VAR 0 3
18743: PPUSH
18744: LD_INT 1
18746: PPUSH
18747: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18751: LD_INT 39
18753: PPUSH
18754: LD_VAR 0 3
18758: PPUSH
18759: LD_INT 1
18761: PPUSH
18762: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18766: LD_INT 34
18768: PPUSH
18769: LD_VAR 0 3
18773: PPUSH
18774: LD_INT 1
18776: PPUSH
18777: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18781: LD_INT 42
18783: PPUSH
18784: LD_VAR 0 3
18788: PPUSH
18789: LD_INT 1
18791: PPUSH
18792: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18796: LD_INT 44
18798: PPUSH
18799: LD_VAR 0 3
18803: PPUSH
18804: LD_INT 1
18806: PPUSH
18807: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18811: LD_INT 41
18813: PPUSH
18814: LD_VAR 0 3
18818: PPUSH
18819: LD_INT 1
18821: PPUSH
18822: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18826: LD_INT 43
18828: PPUSH
18829: LD_VAR 0 3
18833: PPUSH
18834: LD_INT 1
18836: PPUSH
18837: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18841: LD_INT 70
18843: PPUSH
18844: LD_VAR 0 3
18848: PPUSH
18849: LD_INT 1
18851: PPUSH
18852: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18856: LD_INT 51
18858: PPUSH
18859: LD_VAR 0 3
18863: PPUSH
18864: LD_INT 1
18866: PPUSH
18867: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18871: LD_INT 52
18873: PPUSH
18874: LD_VAR 0 3
18878: PPUSH
18879: LD_INT 1
18881: PPUSH
18882: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18886: LD_INT 6
18888: PPUSH
18889: LD_VAR 0 3
18893: PPUSH
18894: LD_INT 1
18896: PPUSH
18897: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18901: LD_INT 15
18903: PPUSH
18904: LD_VAR 0 3
18908: PPUSH
18909: LD_INT 1
18911: PPUSH
18912: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18916: LD_INT 7
18918: PPUSH
18919: LD_VAR 0 3
18923: PPUSH
18924: LD_INT 1
18926: PPUSH
18927: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18931: LD_INT 12
18933: PPUSH
18934: LD_VAR 0 3
18938: PPUSH
18939: LD_INT 1
18941: PPUSH
18942: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18946: LD_INT 18
18948: PPUSH
18949: LD_VAR 0 3
18953: PPUSH
18954: LD_INT 1
18956: PPUSH
18957: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18961: LD_INT 60
18963: PPUSH
18964: LD_VAR 0 3
18968: PPUSH
18969: LD_INT 1
18971: PPUSH
18972: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18976: LD_INT 9
18978: PPUSH
18979: LD_VAR 0 3
18983: PPUSH
18984: LD_INT 1
18986: PPUSH
18987: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18991: LD_INT 30
18993: PPUSH
18994: LD_VAR 0 3
18998: PPUSH
18999: LD_INT 1
19001: PPUSH
19002: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19006: LD_INT 37
19008: PPUSH
19009: LD_VAR 0 3
19013: PPUSH
19014: LD_INT 1
19016: PPUSH
19017: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19021: LD_INT 5
19023: PPUSH
19024: LD_VAR 0 3
19028: PPUSH
19029: LD_INT 1
19031: PPUSH
19032: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19036: LD_INT 66
19038: PPUSH
19039: LD_VAR 0 3
19043: PPUSH
19044: LD_INT 1
19046: PPUSH
19047: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19051: LD_INT 21
19053: PPUSH
19054: LD_VAR 0 3
19058: PPUSH
19059: LD_INT 1
19061: PPUSH
19062: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19066: LD_INT 22
19068: PPUSH
19069: LD_VAR 0 3
19073: PPUSH
19074: LD_INT 1
19076: PPUSH
19077: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19081: LD_INT 54
19083: PPUSH
19084: LD_VAR 0 3
19088: PPUSH
19089: LD_INT 1
19091: PPUSH
19092: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19096: LD_INT 0
19098: PPUSH
19099: LD_VAR 0 3
19103: PPUSH
19104: LD_INT 1
19106: PPUSH
19107: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
19111: LD_INT 1
19113: PPUSH
19114: LD_VAR 0 3
19118: PPUSH
19119: LD_INT 1
19121: PPUSH
19122: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19126: LD_INT 2
19128: PPUSH
19129: LD_VAR 0 3
19133: PPUSH
19134: LD_INT 1
19136: PPUSH
19137: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
19141: LD_INT 3
19143: PPUSH
19144: LD_VAR 0 3
19148: PPUSH
19149: LD_INT 1
19151: PPUSH
19152: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19156: LD_INT 4
19158: PPUSH
19159: LD_VAR 0 3
19163: PPUSH
19164: LD_INT 1
19166: PPUSH
19167: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
19171: LD_INT 5
19173: PPUSH
19174: LD_VAR 0 3
19178: PPUSH
19179: LD_INT 1
19181: PPUSH
19182: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19186: LD_INT 6
19188: PPUSH
19189: LD_VAR 0 3
19193: PPUSH
19194: LD_INT 1
19196: PPUSH
19197: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
19201: LD_INT 7
19203: PPUSH
19204: LD_VAR 0 3
19208: PPUSH
19209: LD_INT 1
19211: PPUSH
19212: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
19216: LD_INT 8
19218: PPUSH
19219: LD_VAR 0 3
19223: PPUSH
19224: LD_INT 1
19226: PPUSH
19227: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
19231: LD_INT 10
19233: PPUSH
19234: LD_VAR 0 3
19238: PPUSH
19239: LD_INT 1
19241: PPUSH
19242: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
19246: LD_INT 11
19248: PPUSH
19249: LD_VAR 0 3
19253: PPUSH
19254: LD_INT 1
19256: PPUSH
19257: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
19261: LD_INT 12
19263: PPUSH
19264: LD_VAR 0 3
19268: PPUSH
19269: LD_INT 1
19271: PPUSH
19272: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
19276: LD_INT 13
19278: PPUSH
19279: LD_VAR 0 3
19283: PPUSH
19284: LD_INT 1
19286: PPUSH
19287: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
19291: LD_INT 14
19293: PPUSH
19294: LD_VAR 0 3
19298: PPUSH
19299: LD_INT 1
19301: PPUSH
19302: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
19306: LD_INT 15
19308: PPUSH
19309: LD_VAR 0 3
19313: PPUSH
19314: LD_INT 1
19316: PPUSH
19317: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
19321: LD_INT 16
19323: PPUSH
19324: LD_VAR 0 3
19328: PPUSH
19329: LD_INT 1
19331: PPUSH
19332: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
19336: LD_INT 17
19338: PPUSH
19339: LD_VAR 0 3
19343: PPUSH
19344: LD_INT 1
19346: PPUSH
19347: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
19351: LD_INT 19
19353: PPUSH
19354: LD_VAR 0 3
19358: PPUSH
19359: LD_INT 1
19361: PPUSH
19362: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
19366: LD_INT 20
19368: PPUSH
19369: LD_VAR 0 3
19373: PPUSH
19374: LD_INT 1
19376: PPUSH
19377: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
19381: LD_INT 21
19383: PPUSH
19384: LD_VAR 0 3
19388: PPUSH
19389: LD_INT 1
19391: PPUSH
19392: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
19396: LD_INT 23
19398: PPUSH
19399: LD_VAR 0 3
19403: PPUSH
19404: LD_INT 1
19406: PPUSH
19407: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
19411: LD_INT 26
19413: PPUSH
19414: LD_VAR 0 3
19418: PPUSH
19419: LD_INT 1
19421: PPUSH
19422: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
19426: LD_INT 27
19428: PPUSH
19429: LD_VAR 0 3
19433: PPUSH
19434: LD_INT 1
19436: PPUSH
19437: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
19441: LD_INT 28
19443: PPUSH
19444: LD_VAR 0 3
19448: PPUSH
19449: LD_INT 1
19451: PPUSH
19452: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19456: LD_INT 29
19458: PPUSH
19459: LD_VAR 0 3
19463: PPUSH
19464: LD_INT 1
19466: PPUSH
19467: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
19471: LD_INT 30
19473: PPUSH
19474: LD_VAR 0 3
19478: PPUSH
19479: LD_INT 1
19481: PPUSH
19482: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19486: LD_INT 31
19488: PPUSH
19489: LD_VAR 0 3
19493: PPUSH
19494: LD_INT 1
19496: PPUSH
19497: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
19501: LD_INT 32
19503: PPUSH
19504: LD_VAR 0 3
19508: PPUSH
19509: LD_INT 1
19511: PPUSH
19512: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
19516: LD_INT 36
19518: PPUSH
19519: LD_VAR 0 3
19523: PPUSH
19524: LD_INT 1
19526: PPUSH
19527: CALL_OW 324
// end ; 5 :
19531: GO 21662
19533: LD_INT 5
19535: DOUBLE
19536: EQUAL
19537: IFTRUE 19541
19539: GO 20654
19541: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19542: LD_INT 35
19544: PPUSH
19545: LD_VAR 0 3
19549: PPUSH
19550: LD_INT 1
19552: PPUSH
19553: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19557: LD_INT 45
19559: PPUSH
19560: LD_VAR 0 3
19564: PPUSH
19565: LD_INT 1
19567: PPUSH
19568: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19572: LD_INT 46
19574: PPUSH
19575: LD_VAR 0 3
19579: PPUSH
19580: LD_INT 1
19582: PPUSH
19583: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19587: LD_INT 47
19589: PPUSH
19590: LD_VAR 0 3
19594: PPUSH
19595: LD_INT 1
19597: PPUSH
19598: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19602: LD_INT 1
19604: PPUSH
19605: LD_VAR 0 3
19609: PPUSH
19610: LD_INT 1
19612: PPUSH
19613: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19617: LD_INT 2
19619: PPUSH
19620: LD_VAR 0 3
19624: PPUSH
19625: LD_INT 1
19627: PPUSH
19628: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19632: LD_INT 11
19634: PPUSH
19635: LD_VAR 0 3
19639: PPUSH
19640: LD_INT 1
19642: PPUSH
19643: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
19647: LD_INT 20
19649: PPUSH
19650: LD_VAR 0 3
19654: PPUSH
19655: LD_INT 1
19657: PPUSH
19658: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
19662: LD_INT 48
19664: PPUSH
19665: LD_VAR 0 3
19669: PPUSH
19670: LD_INT 1
19672: PPUSH
19673: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
19677: LD_INT 49
19679: PPUSH
19680: LD_VAR 0 3
19684: PPUSH
19685: LD_INT 1
19687: PPUSH
19688: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
19692: LD_INT 69
19694: PPUSH
19695: LD_VAR 0 3
19699: PPUSH
19700: LD_INT 1
19702: PPUSH
19703: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
19707: LD_INT 39
19709: PPUSH
19710: LD_VAR 0 3
19714: PPUSH
19715: LD_INT 1
19717: PPUSH
19718: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
19722: LD_INT 34
19724: PPUSH
19725: LD_VAR 0 3
19729: PPUSH
19730: LD_INT 1
19732: PPUSH
19733: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
19737: LD_INT 42
19739: PPUSH
19740: LD_VAR 0 3
19744: PPUSH
19745: LD_INT 1
19747: PPUSH
19748: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
19752: LD_INT 44
19754: PPUSH
19755: LD_VAR 0 3
19759: PPUSH
19760: LD_INT 1
19762: PPUSH
19763: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
19767: LD_INT 41
19769: PPUSH
19770: LD_VAR 0 3
19774: PPUSH
19775: LD_INT 1
19777: PPUSH
19778: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
19782: LD_INT 40
19784: PPUSH
19785: LD_VAR 0 3
19789: PPUSH
19790: LD_INT 1
19792: PPUSH
19793: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
19797: LD_INT 43
19799: PPUSH
19800: LD_VAR 0 3
19804: PPUSH
19805: LD_INT 1
19807: PPUSH
19808: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
19812: LD_INT 70
19814: PPUSH
19815: LD_VAR 0 3
19819: PPUSH
19820: LD_INT 1
19822: PPUSH
19823: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
19827: LD_INT 51
19829: PPUSH
19830: LD_VAR 0 3
19834: PPUSH
19835: LD_INT 1
19837: PPUSH
19838: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19842: LD_INT 52
19844: PPUSH
19845: LD_VAR 0 3
19849: PPUSH
19850: LD_INT 1
19852: PPUSH
19853: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19857: LD_INT 6
19859: PPUSH
19860: LD_VAR 0 3
19864: PPUSH
19865: LD_INT 1
19867: PPUSH
19868: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19872: LD_INT 15
19874: PPUSH
19875: LD_VAR 0 3
19879: PPUSH
19880: LD_INT 1
19882: PPUSH
19883: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19887: LD_INT 7
19889: PPUSH
19890: LD_VAR 0 3
19894: PPUSH
19895: LD_INT 1
19897: PPUSH
19898: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19902: LD_INT 12
19904: PPUSH
19905: LD_VAR 0 3
19909: PPUSH
19910: LD_INT 1
19912: PPUSH
19913: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19917: LD_INT 17
19919: PPUSH
19920: LD_VAR 0 3
19924: PPUSH
19925: LD_INT 1
19927: PPUSH
19928: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19932: LD_INT 18
19934: PPUSH
19935: LD_VAR 0 3
19939: PPUSH
19940: LD_INT 1
19942: PPUSH
19943: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19947: LD_INT 60
19949: PPUSH
19950: LD_VAR 0 3
19954: PPUSH
19955: LD_INT 1
19957: PPUSH
19958: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19962: LD_INT 32
19964: PPUSH
19965: LD_VAR 0 3
19969: PPUSH
19970: LD_INT 1
19972: PPUSH
19973: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19977: LD_INT 9
19979: PPUSH
19980: LD_VAR 0 3
19984: PPUSH
19985: LD_INT 1
19987: PPUSH
19988: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19992: LD_INT 57
19994: PPUSH
19995: LD_VAR 0 3
19999: PPUSH
20000: LD_INT 1
20002: PPUSH
20003: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
20007: LD_INT 30
20009: PPUSH
20010: LD_VAR 0 3
20014: PPUSH
20015: LD_INT 1
20017: PPUSH
20018: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
20022: LD_INT 37
20024: PPUSH
20025: LD_VAR 0 3
20029: PPUSH
20030: LD_INT 1
20032: PPUSH
20033: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
20037: LD_INT 63
20039: PPUSH
20040: LD_VAR 0 3
20044: PPUSH
20045: LD_INT 1
20047: PPUSH
20048: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
20052: LD_INT 3
20054: PPUSH
20055: LD_VAR 0 3
20059: PPUSH
20060: LD_INT 1
20062: PPUSH
20063: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
20067: LD_INT 4
20069: PPUSH
20070: LD_VAR 0 3
20074: PPUSH
20075: LD_INT 1
20077: PPUSH
20078: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20082: LD_INT 5
20084: PPUSH
20085: LD_VAR 0 3
20089: PPUSH
20090: LD_INT 1
20092: PPUSH
20093: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20097: LD_INT 66
20099: PPUSH
20100: LD_VAR 0 3
20104: PPUSH
20105: LD_INT 1
20107: PPUSH
20108: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20112: LD_INT 21
20114: PPUSH
20115: LD_VAR 0 3
20119: PPUSH
20120: LD_INT 1
20122: PPUSH
20123: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20127: LD_INT 22
20129: PPUSH
20130: LD_VAR 0 3
20134: PPUSH
20135: LD_INT 1
20137: PPUSH
20138: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
20142: LD_INT 19
20144: PPUSH
20145: LD_VAR 0 3
20149: PPUSH
20150: LD_INT 1
20152: PPUSH
20153: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20157: LD_INT 54
20159: PPUSH
20160: LD_VAR 0 3
20164: PPUSH
20165: LD_INT 1
20167: PPUSH
20168: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
20172: LD_INT 55
20174: PPUSH
20175: LD_VAR 0 3
20179: PPUSH
20180: LD_INT 1
20182: PPUSH
20183: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20187: LD_INT 0
20189: PPUSH
20190: LD_VAR 0 3
20194: PPUSH
20195: LD_INT 1
20197: PPUSH
20198: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
20202: LD_INT 1
20204: PPUSH
20205: LD_VAR 0 3
20209: PPUSH
20210: LD_INT 1
20212: PPUSH
20213: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20217: LD_INT 2
20219: PPUSH
20220: LD_VAR 0 3
20224: PPUSH
20225: LD_INT 1
20227: PPUSH
20228: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
20232: LD_INT 3
20234: PPUSH
20235: LD_VAR 0 3
20239: PPUSH
20240: LD_INT 1
20242: PPUSH
20243: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
20247: LD_INT 4
20249: PPUSH
20250: LD_VAR 0 3
20254: PPUSH
20255: LD_INT 1
20257: PPUSH
20258: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
20262: LD_INT 5
20264: PPUSH
20265: LD_VAR 0 3
20269: PPUSH
20270: LD_INT 1
20272: PPUSH
20273: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
20277: LD_INT 6
20279: PPUSH
20280: LD_VAR 0 3
20284: PPUSH
20285: LD_INT 1
20287: PPUSH
20288: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
20292: LD_INT 7
20294: PPUSH
20295: LD_VAR 0 3
20299: PPUSH
20300: LD_INT 1
20302: PPUSH
20303: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
20307: LD_INT 8
20309: PPUSH
20310: LD_VAR 0 3
20314: PPUSH
20315: LD_INT 1
20317: PPUSH
20318: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
20322: LD_INT 10
20324: PPUSH
20325: LD_VAR 0 3
20329: PPUSH
20330: LD_INT 1
20332: PPUSH
20333: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
20337: LD_INT 11
20339: PPUSH
20340: LD_VAR 0 3
20344: PPUSH
20345: LD_INT 1
20347: PPUSH
20348: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
20352: LD_INT 12
20354: PPUSH
20355: LD_VAR 0 3
20359: PPUSH
20360: LD_INT 1
20362: PPUSH
20363: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
20367: LD_INT 13
20369: PPUSH
20370: LD_VAR 0 3
20374: PPUSH
20375: LD_INT 1
20377: PPUSH
20378: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
20382: LD_INT 14
20384: PPUSH
20385: LD_VAR 0 3
20389: PPUSH
20390: LD_INT 1
20392: PPUSH
20393: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
20397: LD_INT 15
20399: PPUSH
20400: LD_VAR 0 3
20404: PPUSH
20405: LD_INT 1
20407: PPUSH
20408: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
20412: LD_INT 16
20414: PPUSH
20415: LD_VAR 0 3
20419: PPUSH
20420: LD_INT 1
20422: PPUSH
20423: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
20427: LD_INT 17
20429: PPUSH
20430: LD_VAR 0 3
20434: PPUSH
20435: LD_INT 1
20437: PPUSH
20438: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
20442: LD_INT 18
20444: PPUSH
20445: LD_VAR 0 3
20449: PPUSH
20450: LD_INT 1
20452: PPUSH
20453: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
20457: LD_INT 19
20459: PPUSH
20460: LD_VAR 0 3
20464: PPUSH
20465: LD_INT 1
20467: PPUSH
20468: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
20472: LD_INT 20
20474: PPUSH
20475: LD_VAR 0 3
20479: PPUSH
20480: LD_INT 1
20482: PPUSH
20483: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
20487: LD_INT 21
20489: PPUSH
20490: LD_VAR 0 3
20494: PPUSH
20495: LD_INT 1
20497: PPUSH
20498: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
20502: LD_INT 23
20504: PPUSH
20505: LD_VAR 0 3
20509: PPUSH
20510: LD_INT 1
20512: PPUSH
20513: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
20517: LD_INT 26
20519: PPUSH
20520: LD_VAR 0 3
20524: PPUSH
20525: LD_INT 1
20527: PPUSH
20528: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
20532: LD_INT 27
20534: PPUSH
20535: LD_VAR 0 3
20539: PPUSH
20540: LD_INT 1
20542: PPUSH
20543: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
20547: LD_INT 28
20549: PPUSH
20550: LD_VAR 0 3
20554: PPUSH
20555: LD_INT 1
20557: PPUSH
20558: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
20562: LD_INT 29
20564: PPUSH
20565: LD_VAR 0 3
20569: PPUSH
20570: LD_INT 1
20572: PPUSH
20573: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
20577: LD_INT 30
20579: PPUSH
20580: LD_VAR 0 3
20584: PPUSH
20585: LD_INT 1
20587: PPUSH
20588: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
20592: LD_INT 31
20594: PPUSH
20595: LD_VAR 0 3
20599: PPUSH
20600: LD_INT 1
20602: PPUSH
20603: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
20607: LD_INT 32
20609: PPUSH
20610: LD_VAR 0 3
20614: PPUSH
20615: LD_INT 1
20617: PPUSH
20618: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
20622: LD_INT 33
20624: PPUSH
20625: LD_VAR 0 3
20629: PPUSH
20630: LD_INT 1
20632: PPUSH
20633: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
20637: LD_INT 36
20639: PPUSH
20640: LD_VAR 0 3
20644: PPUSH
20645: LD_INT 1
20647: PPUSH
20648: CALL_OW 324
// end ; 6 :
20652: GO 21662
20654: LD_INT 6
20656: DOUBLE
20657: EQUAL
20658: IFTRUE 20662
20660: GO 21587
20662: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20663: LD_INT 35
20665: PPUSH
20666: LD_VAR 0 3
20670: PPUSH
20671: LD_INT 1
20673: PPUSH
20674: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20678: LD_INT 45
20680: PPUSH
20681: LD_VAR 0 3
20685: PPUSH
20686: LD_INT 1
20688: PPUSH
20689: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20693: LD_INT 46
20695: PPUSH
20696: LD_VAR 0 3
20700: PPUSH
20701: LD_INT 1
20703: PPUSH
20704: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20708: LD_INT 47
20710: PPUSH
20711: LD_VAR 0 3
20715: PPUSH
20716: LD_INT 1
20718: PPUSH
20719: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20723: LD_INT 1
20725: PPUSH
20726: LD_VAR 0 3
20730: PPUSH
20731: LD_INT 1
20733: PPUSH
20734: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20738: LD_INT 2
20740: PPUSH
20741: LD_VAR 0 3
20745: PPUSH
20746: LD_INT 1
20748: PPUSH
20749: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20753: LD_INT 11
20755: PPUSH
20756: LD_VAR 0 3
20760: PPUSH
20761: LD_INT 1
20763: PPUSH
20764: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
20768: LD_INT 20
20770: PPUSH
20771: LD_VAR 0 3
20775: PPUSH
20776: LD_INT 1
20778: PPUSH
20779: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20783: LD_INT 48
20785: PPUSH
20786: LD_VAR 0 3
20790: PPUSH
20791: LD_INT 1
20793: PPUSH
20794: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
20798: LD_INT 49
20800: PPUSH
20801: LD_VAR 0 3
20805: PPUSH
20806: LD_INT 1
20808: PPUSH
20809: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
20813: LD_INT 50
20815: PPUSH
20816: LD_VAR 0 3
20820: PPUSH
20821: LD_INT 1
20823: PPUSH
20824: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20828: LD_INT 69
20830: PPUSH
20831: LD_VAR 0 3
20835: PPUSH
20836: LD_INT 1
20838: PPUSH
20839: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20843: LD_INT 39
20845: PPUSH
20846: LD_VAR 0 3
20850: PPUSH
20851: LD_INT 1
20853: PPUSH
20854: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
20858: LD_INT 34
20860: PPUSH
20861: LD_VAR 0 3
20865: PPUSH
20866: LD_INT 1
20868: PPUSH
20869: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20873: LD_INT 42
20875: PPUSH
20876: LD_VAR 0 3
20880: PPUSH
20881: LD_INT 1
20883: PPUSH
20884: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20888: LD_INT 44
20890: PPUSH
20891: LD_VAR 0 3
20895: PPUSH
20896: LD_INT 1
20898: PPUSH
20899: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20903: LD_INT 41
20905: PPUSH
20906: LD_VAR 0 3
20910: PPUSH
20911: LD_INT 1
20913: PPUSH
20914: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
20918: LD_INT 13
20920: PPUSH
20921: LD_VAR 0 3
20925: PPUSH
20926: LD_INT 1
20928: PPUSH
20929: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
20933: LD_INT 40
20935: PPUSH
20936: LD_VAR 0 3
20940: PPUSH
20941: LD_INT 1
20943: PPUSH
20944: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20948: LD_INT 43
20950: PPUSH
20951: LD_VAR 0 3
20955: PPUSH
20956: LD_INT 1
20958: PPUSH
20959: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20963: LD_INT 70
20965: PPUSH
20966: LD_VAR 0 3
20970: PPUSH
20971: LD_INT 1
20973: PPUSH
20974: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
20978: LD_INT 23
20980: PPUSH
20981: LD_VAR 0 3
20985: PPUSH
20986: LD_INT 1
20988: PPUSH
20989: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20993: LD_INT 51
20995: PPUSH
20996: LD_VAR 0 3
21000: PPUSH
21001: LD_INT 1
21003: PPUSH
21004: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
21008: LD_INT 52
21010: PPUSH
21011: LD_VAR 0 3
21015: PPUSH
21016: LD_INT 1
21018: PPUSH
21019: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
21023: LD_INT 6
21025: PPUSH
21026: LD_VAR 0 3
21030: PPUSH
21031: LD_INT 1
21033: PPUSH
21034: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
21038: LD_INT 15
21040: PPUSH
21041: LD_VAR 0 3
21045: PPUSH
21046: LD_INT 1
21048: PPUSH
21049: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
21053: LD_INT 7
21055: PPUSH
21056: LD_VAR 0 3
21060: PPUSH
21061: LD_INT 1
21063: PPUSH
21064: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
21068: LD_INT 12
21070: PPUSH
21071: LD_VAR 0 3
21075: PPUSH
21076: LD_INT 1
21078: PPUSH
21079: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
21083: LD_INT 10
21085: PPUSH
21086: LD_VAR 0 3
21090: PPUSH
21091: LD_INT 1
21093: PPUSH
21094: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
21098: LD_INT 17
21100: PPUSH
21101: LD_VAR 0 3
21105: PPUSH
21106: LD_INT 1
21108: PPUSH
21109: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
21113: LD_INT 18
21115: PPUSH
21116: LD_VAR 0 3
21120: PPUSH
21121: LD_INT 1
21123: PPUSH
21124: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
21128: LD_INT 60
21130: PPUSH
21131: LD_VAR 0 3
21135: PPUSH
21136: LD_INT 1
21138: PPUSH
21139: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
21143: LD_INT 61
21145: PPUSH
21146: LD_VAR 0 3
21150: PPUSH
21151: LD_INT 1
21153: PPUSH
21154: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
21158: LD_INT 32
21160: PPUSH
21161: LD_VAR 0 3
21165: PPUSH
21166: LD_INT 1
21168: PPUSH
21169: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
21173: LD_INT 27
21175: PPUSH
21176: LD_VAR 0 3
21180: PPUSH
21181: LD_INT 1
21183: PPUSH
21184: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
21188: LD_INT 36
21190: PPUSH
21191: LD_VAR 0 3
21195: PPUSH
21196: LD_INT 1
21198: PPUSH
21199: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
21203: LD_INT 33
21205: PPUSH
21206: LD_VAR 0 3
21210: PPUSH
21211: LD_INT 1
21213: PPUSH
21214: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
21218: LD_INT 9
21220: PPUSH
21221: LD_VAR 0 3
21225: PPUSH
21226: LD_INT 1
21228: PPUSH
21229: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
21233: LD_INT 38
21235: PPUSH
21236: LD_VAR 0 3
21240: PPUSH
21241: LD_INT 1
21243: PPUSH
21244: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
21248: LD_INT 57
21250: PPUSH
21251: LD_VAR 0 3
21255: PPUSH
21256: LD_INT 1
21258: PPUSH
21259: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
21263: LD_INT 58
21265: PPUSH
21266: LD_VAR 0 3
21270: PPUSH
21271: LD_INT 1
21273: PPUSH
21274: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
21278: LD_INT 28
21280: PPUSH
21281: LD_VAR 0 3
21285: PPUSH
21286: LD_INT 1
21288: PPUSH
21289: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
21293: LD_INT 29
21295: PPUSH
21296: LD_VAR 0 3
21300: PPUSH
21301: LD_INT 1
21303: PPUSH
21304: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
21308: LD_INT 30
21310: PPUSH
21311: LD_VAR 0 3
21315: PPUSH
21316: LD_INT 1
21318: PPUSH
21319: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
21323: LD_INT 37
21325: PPUSH
21326: LD_VAR 0 3
21330: PPUSH
21331: LD_INT 1
21333: PPUSH
21334: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
21338: LD_INT 63
21340: PPUSH
21341: LD_VAR 0 3
21345: PPUSH
21346: LD_INT 1
21348: PPUSH
21349: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
21353: LD_INT 64
21355: PPUSH
21356: LD_VAR 0 3
21360: PPUSH
21361: LD_INT 1
21363: PPUSH
21364: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
21368: LD_INT 3
21370: PPUSH
21371: LD_VAR 0 3
21375: PPUSH
21376: LD_INT 1
21378: PPUSH
21379: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
21383: LD_INT 4
21385: PPUSH
21386: LD_VAR 0 3
21390: PPUSH
21391: LD_INT 1
21393: PPUSH
21394: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
21398: LD_INT 5
21400: PPUSH
21401: LD_VAR 0 3
21405: PPUSH
21406: LD_INT 1
21408: PPUSH
21409: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
21413: LD_INT 8
21415: PPUSH
21416: LD_VAR 0 3
21420: PPUSH
21421: LD_INT 1
21423: PPUSH
21424: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
21428: LD_INT 66
21430: PPUSH
21431: LD_VAR 0 3
21435: PPUSH
21436: LD_INT 1
21438: PPUSH
21439: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
21443: LD_INT 67
21445: PPUSH
21446: LD_VAR 0 3
21450: PPUSH
21451: LD_INT 1
21453: PPUSH
21454: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
21458: LD_INT 21
21460: PPUSH
21461: LD_VAR 0 3
21465: PPUSH
21466: LD_INT 1
21468: PPUSH
21469: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
21473: LD_INT 22
21475: PPUSH
21476: LD_VAR 0 3
21480: PPUSH
21481: LD_INT 1
21483: PPUSH
21484: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
21488: LD_INT 19
21490: PPUSH
21491: LD_VAR 0 3
21495: PPUSH
21496: LD_INT 1
21498: PPUSH
21499: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
21503: LD_INT 26
21505: PPUSH
21506: LD_VAR 0 3
21510: PPUSH
21511: LD_INT 1
21513: PPUSH
21514: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
21518: LD_INT 54
21520: PPUSH
21521: LD_VAR 0 3
21525: PPUSH
21526: LD_INT 1
21528: PPUSH
21529: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
21533: LD_INT 55
21535: PPUSH
21536: LD_VAR 0 3
21540: PPUSH
21541: LD_INT 1
21543: PPUSH
21544: CALL_OW 322
// for i = 0 to 39 do
21548: LD_ADDR_VAR 0 4
21552: PUSH
21553: DOUBLE
21554: LD_INT 0
21556: DEC
21557: ST_TO_ADDR
21558: LD_INT 39
21560: PUSH
21561: FOR_TO
21562: IFFALSE 21583
// SetRestrict ( i , side , true ) ;
21564: LD_VAR 0 4
21568: PPUSH
21569: LD_VAR 0 3
21573: PPUSH
21574: LD_INT 1
21576: PPUSH
21577: CALL_OW 324
21581: GO 21561
21583: POP
21584: POP
// end ; else
21585: GO 21662
21587: POP
// begin for i = 1 to 73 do
21588: LD_ADDR_VAR 0 4
21592: PUSH
21593: DOUBLE
21594: LD_INT 1
21596: DEC
21597: ST_TO_ADDR
21598: LD_INT 73
21600: PUSH
21601: FOR_TO
21602: IFFALSE 21623
// SetTech ( i , side , state_enabled ) ;
21604: LD_VAR 0 4
21608: PPUSH
21609: LD_VAR 0 3
21613: PPUSH
21614: LD_INT 1
21616: PPUSH
21617: CALL_OW 322
21621: GO 21601
21623: POP
21624: POP
// for i = 0 to 39 do
21625: LD_ADDR_VAR 0 4
21629: PUSH
21630: DOUBLE
21631: LD_INT 0
21633: DEC
21634: ST_TO_ADDR
21635: LD_INT 39
21637: PUSH
21638: FOR_TO
21639: IFFALSE 21660
// SetRestrict ( i , side , true ) ;
21641: LD_VAR 0 4
21645: PPUSH
21646: LD_VAR 0 3
21650: PPUSH
21651: LD_INT 1
21653: PPUSH
21654: CALL_OW 324
21658: GO 21638
21660: POP
21661: POP
// end ; end ; end ;
21662: GO 17667
21664: POP
21665: POP
// end ;
21666: LD_VAR 0 2
21670: RET
