// export def_main_base , def_secondary_base , def_defence_level , def_amount_of_people , def_initial_level , def_main_deposits , def_secondary_deposits , def_siberite_detection , def_starting_resources , def_shipments_density , def_people_arrivals , def_people_loyality , def_people_info , def_morale_flags , def_siberite_bomb , def_amount_of_apemen , def_builduptime , def_win_rules , def_people_respawning ; export is_depot , number_of_people , number_of_pplants , are_mines , is_lab , is_fact , is_arm , are_breastworks , deposits , initial_level , starting_crates , starting_resources , shipments_density , max_arriving_times , text_info , fog_info , def_bf_params , amount_of_apemen , siberite_bomb_Delay ; export Positions , Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export second_side , third_nation ; export start_def , depots_def , breastworks_def , labs_def , factories_def , armories_def , pplants_def , deposits_def ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i ; var u1 , u2 , pom_tab , p1 , p2 , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
  73: PPUSH
  74: PPUSH
  75: PPUSH
  76: PPUSH
  77: PPUSH
  78: PPUSH
  79: PPUSH
  80: PPUSH
  81: PPUSH
  82: PPUSH
  83: PPUSH
// if MultiPlayer then
  84: LD_OWVAR 4
  88: IFFALSE 162
// begin Game_Type = mp_game_type ;
  90: LD_ADDR_EXP 59
  94: PUSH
  95: LD_OWVAR 6
  99: ST_TO_ADDR
// Your_Side = mp_player_side ;
 100: LD_ADDR_OWVAR 2
 104: PUSH
 105: LD_OWVAR 7
 109: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_OWVAR 17
 119: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 120: LD_ADDR_EXP 40
 124: PUSH
 125: LD_OWVAR 15
 129: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 130: LD_ADDR_EXP 44
 134: PUSH
 135: LD_OWVAR 16
 139: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 140: LD_ADDR_EXP 42
 144: PUSH
 145: CALL 0 0 0
 149: ST_TO_ADDR
// Teams = mp_teams ;
 150: LD_ADDR_EXP 41
 154: PUSH
 155: LD_OWVAR 12
 159: ST_TO_ADDR
// end else
 160: GO 333
// begin Your_Side = 3 ;
 162: LD_ADDR_OWVAR 2
 166: PUSH
 167: LD_INT 3
 169: ST_TO_ADDR
// Side_Positions = [ 0 , 0 , 2 , 0 , 1 , 0 , 0 , 0 ] ;
 170: LD_ADDR_EXP 43
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 2
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 1
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: LD_INT 0
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: LIST
 208: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 209: LD_ADDR_EXP 40
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: LD_INT 0
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: LIST
 246: LIST
 247: ST_TO_ADDR
// Side_Nations = [ 0 , 0 , 3 , 0 , 2 , 0 , 0 , 0 ] ;
 248: LD_ADDR_EXP 44
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 3
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 2
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: LIST
 286: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 287: LD_ADDR_EXP 42
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: ST_TO_ADDR
// Teams = [ ] ;
 326: LD_ADDR_EXP 41
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ; for i := 1 to 8 do
 333: LD_ADDR_VAR 0 8
 337: PUSH
 338: DOUBLE
 339: LD_INT 1
 341: DEC
 342: ST_TO_ADDR
 343: LD_INT 8
 345: PUSH
 346: FOR_TO
 347: IFFALSE 434
// if Multiplayer_GetPlayerIsSpec ( i ) then
 349: LD_VAR 0 8
 353: PPUSH
 354: CALL_OW 530
 358: IFFALSE 432
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 360: LD_ADDR_EXP 43
 364: PUSH
 365: LD_EXP 43
 369: PPUSH
 370: LD_VAR 0 8
 374: PPUSH
 375: LD_INT 0
 377: PPUSH
 378: CALL_OW 1
 382: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 383: LD_ADDR_EXP 41
 387: PUSH
 388: LD_EXP 41
 392: PPUSH
 393: LD_EXP 40
 397: PUSH
 398: LD_VAR 0 8
 402: ARRAY
 403: PPUSH
 404: LD_EXP 41
 408: PUSH
 409: LD_EXP 40
 413: PUSH
 414: LD_VAR 0 8
 418: ARRAY
 419: ARRAY
 420: PUSH
 421: LD_VAR 0 8
 425: DIFF
 426: PPUSH
 427: CALL_OW 1
 431: ST_TO_ADDR
// end ;
 432: GO 346
 434: POP
 435: POP
// Position_Sides := [ 0 , 0 ] ;
 436: LD_ADDR_EXP 46
 440: PUSH
 441: LD_INT 0
 443: PUSH
 444: LD_INT 0
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// for i := 1 to 8 do
 451: LD_ADDR_VAR 0 8
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_INT 8
 463: PUSH
 464: FOR_TO
 465: IFFALSE 512
// if Side_Positions [ i ] then
 467: LD_EXP 43
 471: PUSH
 472: LD_VAR 0 8
 476: ARRAY
 477: IFFALSE 510
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 479: LD_ADDR_EXP 46
 483: PUSH
 484: LD_EXP 46
 488: PPUSH
 489: LD_EXP 43
 493: PUSH
 494: LD_VAR 0 8
 498: ARRAY
 499: PPUSH
 500: LD_VAR 0 8
 504: PPUSH
 505: CALL_OW 1
 509: ST_TO_ADDR
 510: GO 464
 512: POP
 513: POP
// Team_Game := Side_Teams [ your_side ] ;
 514: LD_ADDR_EXP 45
 518: PUSH
 519: LD_EXP 40
 523: PUSH
 524: LD_OWVAR 2
 528: ARRAY
 529: ST_TO_ADDR
// p1 := 0 ;
 530: LD_ADDR_VAR 0 12
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// p2 := 0 ;
 538: LD_ADDR_VAR 0 13
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// for i := 1 to 8 do
 546: LD_ADDR_VAR 0 8
 550: PUSH
 551: DOUBLE
 552: LD_INT 1
 554: DEC
 555: ST_TO_ADDR
 556: LD_INT 8
 558: PUSH
 559: FOR_TO
 560: IFFALSE 618
// if Side_Positions [ i ] = 1 then
 562: LD_EXP 43
 566: PUSH
 567: LD_VAR 0 8
 571: ARRAY
 572: PUSH
 573: LD_INT 1
 575: EQUAL
 576: IFFALSE 590
// p1 := i else
 578: LD_ADDR_VAR 0 12
 582: PUSH
 583: LD_VAR 0 8
 587: ST_TO_ADDR
 588: GO 616
// if Side_Positions [ i ] = 2 then
 590: LD_EXP 43
 594: PUSH
 595: LD_VAR 0 8
 599: ARRAY
 600: PUSH
 601: LD_INT 2
 603: EQUAL
 604: IFFALSE 616
// p2 := i ;
 606: LD_ADDR_VAR 0 13
 610: PUSH
 611: LD_VAR 0 8
 615: ST_TO_ADDR
 616: GO 559
 618: POP
 619: POP
// Positions := [ p1 , p2 ] ;
 620: LD_ADDR_EXP 39
 624: PUSH
 625: LD_VAR 0 12
 629: PUSH
 630: LD_VAR 0 13
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: ST_TO_ADDR
// if MultiPlayer then
 639: LD_OWVAR 4
 643: IFFALSE 897
// begin def_main_base = GetMultiplayerSetting ( 0 ) ;
 645: LD_ADDR_EXP 1
 649: PUSH
 650: LD_INT 0
 652: PPUSH
 653: CALL_OW 426
 657: ST_TO_ADDR
// def_secondary_base = GetMultiplayerSetting ( 1 ) ;
 658: LD_ADDR_EXP 2
 662: PUSH
 663: LD_INT 1
 665: PPUSH
 666: CALL_OW 426
 670: ST_TO_ADDR
// def_defence_level = GetMultiplayerSetting ( 2 ) ;
 671: LD_ADDR_EXP 3
 675: PUSH
 676: LD_INT 2
 678: PPUSH
 679: CALL_OW 426
 683: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 3 ) ;
 684: LD_ADDR_EXP 4
 688: PUSH
 689: LD_INT 3
 691: PPUSH
 692: CALL_OW 426
 696: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 4 ) ;
 697: LD_ADDR_EXP 5
 701: PUSH
 702: LD_INT 4
 704: PPUSH
 705: CALL_OW 426
 709: ST_TO_ADDR
// def_main_deposits = GetMultiplayerSetting ( 5 ) ;
 710: LD_ADDR_EXP 6
 714: PUSH
 715: LD_INT 5
 717: PPUSH
 718: CALL_OW 426
 722: ST_TO_ADDR
// def_secondary_deposits = GetMultiplayerSetting ( 6 ) ;
 723: LD_ADDR_EXP 7
 727: PUSH
 728: LD_INT 6
 730: PPUSH
 731: CALL_OW 426
 735: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 7 ) ;
 736: LD_ADDR_EXP 8
 740: PUSH
 741: LD_INT 7
 743: PPUSH
 744: CALL_OW 426
 748: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 8 ) ;
 749: LD_ADDR_EXP 9
 753: PUSH
 754: LD_INT 8
 756: PPUSH
 757: CALL_OW 426
 761: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 9 ) ;
 762: LD_ADDR_EXP 10
 766: PUSH
 767: LD_INT 9
 769: PPUSH
 770: CALL_OW 426
 774: ST_TO_ADDR
// def_people_arrivals = GetMultiplayerSetting ( 10 ) ;
 775: LD_ADDR_EXP 11
 779: PUSH
 780: LD_INT 10
 782: PPUSH
 783: CALL_OW 426
 787: ST_TO_ADDR
// def_people_loyality = GetMultiplayerSetting ( 11 ) ;
 788: LD_ADDR_EXP 12
 792: PUSH
 793: LD_INT 11
 795: PPUSH
 796: CALL_OW 426
 800: ST_TO_ADDR
// def_people_info = GetMultiplayerSetting ( 12 ) ;
 801: LD_ADDR_EXP 13
 805: PUSH
 806: LD_INT 12
 808: PPUSH
 809: CALL_OW 426
 813: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 15 ) ;
 814: LD_ADDR_EXP 14
 818: PUSH
 819: LD_INT 15
 821: PPUSH
 822: CALL_OW 426
 826: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 16 ) ;
 827: LD_ADDR_EXP 15
 831: PUSH
 832: LD_INT 16
 834: PPUSH
 835: CALL_OW 426
 839: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 17 ) ;
 840: LD_ADDR_EXP 16
 844: PUSH
 845: LD_INT 17
 847: PPUSH
 848: CALL_OW 426
 852: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 853: LD_ADDR_EXP 17
 857: PUSH
 858: LD_INT 20
 860: PPUSH
 861: CALL_OW 426
 865: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 866: LD_ADDR_VAR 0 14
 870: PUSH
 871: LD_INT 22
 873: PPUSH
 874: CALL_OW 426
 878: ST_TO_ADDR
// def_people_respawning = 0 ;
 879: LD_ADDR_EXP 19
 883: PUSH
 884: LD_INT 0
 886: ST_TO_ADDR
// def_win_rules = 0 ;
 887: LD_ADDR_EXP 18
 891: PUSH
 892: LD_INT 0
 894: ST_TO_ADDR
// end else
 895: GO 1069
// begin randomize ;
 897: CALL_OW 10
// def_main_base = 4 ;
 901: LD_ADDR_EXP 1
 905: PUSH
 906: LD_INT 4
 908: ST_TO_ADDR
// def_secondary_base = 2 ;
 909: LD_ADDR_EXP 2
 913: PUSH
 914: LD_INT 2
 916: ST_TO_ADDR
// def_defence_level = 1 ;
 917: LD_ADDR_EXP 3
 921: PUSH
 922: LD_INT 1
 924: ST_TO_ADDR
// def_amount_of_people = 2 ;
 925: LD_ADDR_EXP 4
 929: PUSH
 930: LD_INT 2
 932: ST_TO_ADDR
// def_initial_level = 1 ;
 933: LD_ADDR_EXP 5
 937: PUSH
 938: LD_INT 1
 940: ST_TO_ADDR
// def_main_deposits = 2 ;
 941: LD_ADDR_EXP 6
 945: PUSH
 946: LD_INT 2
 948: ST_TO_ADDR
// def_secondary_deposits = 1 ;
 949: LD_ADDR_EXP 7
 953: PUSH
 954: LD_INT 1
 956: ST_TO_ADDR
// def_siberite_detection = 1 ;
 957: LD_ADDR_EXP 8
 961: PUSH
 962: LD_INT 1
 964: ST_TO_ADDR
// def_starting_resources = 2 ;
 965: LD_ADDR_EXP 9
 969: PUSH
 970: LD_INT 2
 972: ST_TO_ADDR
// def_shipments_density = 1 ;
 973: LD_ADDR_EXP 10
 977: PUSH
 978: LD_INT 1
 980: ST_TO_ADDR
// def_people_arrivals = 3 ;
 981: LD_ADDR_EXP 11
 985: PUSH
 986: LD_INT 3
 988: ST_TO_ADDR
// def_people_loyality = 1 ;
 989: LD_ADDR_EXP 12
 993: PUSH
 994: LD_INT 1
 996: ST_TO_ADDR
// def_people_info = 1 ;
 997: LD_ADDR_EXP 13
1001: PUSH
1002: LD_INT 1
1004: ST_TO_ADDR
// def_morale_flags = 2 ;
1005: LD_ADDR_EXP 14
1009: PUSH
1010: LD_INT 2
1012: ST_TO_ADDR
// def_siberite_bomb = 1 ;
1013: LD_ADDR_EXP 15
1017: PUSH
1018: LD_INT 1
1020: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
1021: LD_ADDR_EXP 16
1025: PUSH
1026: LD_INT 3
1028: ST_TO_ADDR
// def_builduptime = 1 ;
1029: LD_ADDR_EXP 17
1033: PUSH
1034: LD_INT 1
1036: ST_TO_ADDR
// def_game_rules = 0 ;
1037: LD_ADDR_EXP 60
1041: PUSH
1042: LD_INT 0
1044: ST_TO_ADDR
// tech_level = 4 ;
1045: LD_ADDR_VAR 0 14
1049: PUSH
1050: LD_INT 4
1052: ST_TO_ADDR
// def_people_respawning = 0 ;
1053: LD_ADDR_EXP 19
1057: PUSH
1058: LD_INT 0
1060: ST_TO_ADDR
// def_win_rules = 0 ;
1061: LD_ADDR_EXP 18
1065: PUSH
1066: LD_INT 0
1068: ST_TO_ADDR
// end ; InitGameRules ;
1069: CALL 13907 0 0
// if def_game_rules = 0 then
1073: LD_EXP 60
1077: PUSH
1078: LD_INT 0
1080: EQUAL
1081: IFFALSE 1108
// begin if isSGUI then
1083: LD_OWVAR 83
1087: IFFALSE 1095
// setMpTechs ( ) else
1089: CALL 17292 0 0
1093: GO 1108
// begin SetMpTechLevel ( tech_level + 1 ) ;
1095: LD_VAR 0 14
1099: PUSH
1100: LD_INT 1
1102: PLUS
1103: PPUSH
1104: CALL 17439 0 1
// end ; end ; u1 = [ 0 , 1 , 1 , 1 , 2 ] [ def_main_base + 1 ] ;
1108: LD_ADDR_VAR 0 9
1112: PUSH
1113: LD_INT 0
1115: PUSH
1116: LD_INT 1
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: LD_INT 1
1124: PUSH
1125: LD_INT 2
1127: PUSH
1128: EMPTY
1129: LIST
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: PUSH
1135: LD_EXP 1
1139: PUSH
1140: LD_INT 1
1142: PLUS
1143: ARRAY
1144: ST_TO_ADDR
// u2 = [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] ;
1145: LD_ADDR_VAR 0 10
1149: PUSH
1150: LD_INT 0
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: LD_INT 1
1158: PUSH
1159: LD_INT 2
1161: PUSH
1162: LD_INT 2
1164: PUSH
1165: EMPTY
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: LD_EXP 1
1176: PUSH
1177: LD_INT 1
1179: PLUS
1180: ARRAY
1181: ST_TO_ADDR
// is_depot = [ [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] , [ 0 , 1 , 1 ] [ def_secondary_base + 1 ] ] ;
1182: LD_ADDR_EXP 20
1186: PUSH
1187: LD_INT 0
1189: PUSH
1190: LD_INT 1
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 2
1198: PUSH
1199: LD_INT 2
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: LIST
1208: PUSH
1209: LD_EXP 1
1213: PUSH
1214: LD_INT 1
1216: PLUS
1217: ARRAY
1218: PUSH
1219: LD_INT 0
1221: PUSH
1222: LD_INT 1
1224: PUSH
1225: LD_INT 1
1227: PUSH
1228: EMPTY
1229: LIST
1230: LIST
1231: LIST
1232: PUSH
1233: LD_EXP 2
1237: PUSH
1238: LD_INT 1
1240: PLUS
1241: ARRAY
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: ST_TO_ADDR
// if is_depot [ 2 ] then
1247: LD_EXP 20
1251: PUSH
1252: LD_INT 2
1254: ARRAY
1255: IFFALSE 1394
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ [ ] , [ 1 ] , [ 1 , 1 ] , [ 1 , 1 , 1 ] ] [ def_defence_level + 1 ] ] else
1257: LD_ADDR_EXP 27
1261: PUSH
1262: EMPTY
1263: PUSH
1264: LD_VAR 0 10
1268: PUSH
1269: LD_VAR 0 9
1273: PUSH
1274: EMPTY
1275: LIST
1276: LIST
1277: PUSH
1278: LD_VAR 0 10
1282: PUSH
1283: LD_VAR 0 10
1287: PUSH
1288: LD_VAR 0 9
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: LIST
1297: PUSH
1298: LD_VAR 0 10
1302: PUSH
1303: LD_VAR 0 10
1307: PUSH
1308: LD_VAR 0 9
1312: PUSH
1313: LD_VAR 0 9
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: PUSH
1324: EMPTY
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: PUSH
1330: LD_EXP 3
1334: PUSH
1335: LD_INT 1
1337: PLUS
1338: ARRAY
1339: PUSH
1340: EMPTY
1341: PUSH
1342: LD_INT 1
1344: PUSH
1345: EMPTY
1346: LIST
1347: PUSH
1348: LD_INT 1
1350: PUSH
1351: LD_INT 1
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: LD_INT 1
1360: PUSH
1361: LD_INT 1
1363: PUSH
1364: LD_INT 1
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: PUSH
1378: LD_EXP 3
1382: PUSH
1383: LD_INT 1
1385: PLUS
1386: ARRAY
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: ST_TO_ADDR
1392: GO 1483
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ ] ] ;
1394: LD_ADDR_EXP 27
1398: PUSH
1399: EMPTY
1400: PUSH
1401: LD_VAR 0 10
1405: PUSH
1406: LD_VAR 0 9
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: PUSH
1415: LD_VAR 0 10
1419: PUSH
1420: LD_VAR 0 10
1424: PUSH
1425: LD_VAR 0 9
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: LIST
1434: PUSH
1435: LD_VAR 0 10
1439: PUSH
1440: LD_VAR 0 10
1444: PUSH
1445: LD_VAR 0 9
1449: PUSH
1450: LD_VAR 0 9
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: PUSH
1467: LD_EXP 3
1471: PUSH
1472: LD_INT 1
1474: PLUS
1475: ARRAY
1476: PUSH
1477: EMPTY
1478: PUSH
1479: EMPTY
1480: LIST
1481: LIST
1482: ST_TO_ADDR
// is_fact = [ [ 0 , 0 , 1 , 2 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1483: LD_ADDR_EXP 25
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 0
1493: PUSH
1494: LD_INT 1
1496: PUSH
1497: LD_INT 2
1499: PUSH
1500: LD_INT 2
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: PUSH
1510: LD_EXP 1
1514: PUSH
1515: LD_INT 1
1517: PLUS
1518: ARRAY
1519: PUSH
1520: LD_INT 0
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: ST_TO_ADDR
// is_lab = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1527: LD_ADDR_EXP 24
1531: PUSH
1532: LD_INT 0
1534: PUSH
1535: LD_INT 0
1537: PUSH
1538: LD_INT 1
1540: PUSH
1541: LD_INT 1
1543: PUSH
1544: LD_INT 2
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_EXP 1
1558: PUSH
1559: LD_INT 1
1561: PLUS
1562: ARRAY
1563: PUSH
1564: LD_INT 0
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: ST_TO_ADDR
// is_arm = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1571: LD_ADDR_EXP 26
1575: PUSH
1576: LD_INT 0
1578: PUSH
1579: LD_INT 0
1581: PUSH
1582: LD_INT 1
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 2
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: PUSH
1598: LD_EXP 1
1602: PUSH
1603: LD_INT 1
1605: PLUS
1606: ARRAY
1607: PUSH
1608: LD_INT 0
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: ST_TO_ADDR
// are_mines = [ [ 0 , 0 , 0 , 1 , 1 ] [ def_main_base + 1 ] , [ 0 , 0 , 1 ] [ def_secondary_base + 1 ] ] ;
1615: LD_ADDR_EXP 23
1619: PUSH
1620: LD_INT 0
1622: PUSH
1623: LD_INT 0
1625: PUSH
1626: LD_INT 0
1628: PUSH
1629: LD_INT 1
1631: PUSH
1632: LD_INT 1
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_EXP 1
1646: PUSH
1647: LD_INT 1
1649: PLUS
1650: ARRAY
1651: PUSH
1652: LD_INT 0
1654: PUSH
1655: LD_INT 0
1657: PUSH
1658: LD_INT 1
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: LIST
1665: PUSH
1666: LD_EXP 2
1670: PUSH
1671: LD_INT 1
1673: PLUS
1674: ARRAY
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: ST_TO_ADDR
// number_of_pplants = [ [ 0 , 0 , 0 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1680: LD_ADDR_EXP 22
1684: PUSH
1685: LD_INT 0
1687: PUSH
1688: LD_INT 0
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: LD_INT 1
1696: PUSH
1697: LD_INT 2
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: PUSH
1707: LD_EXP 1
1711: PUSH
1712: LD_INT 1
1714: PLUS
1715: ARRAY
1716: PUSH
1717: LD_INT 0
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: ST_TO_ADDR
// number_of_people = [ [ 5 , 8 , 11 ] [ def_amount_of_people + 1 ] , ( [ 2 , 3 , 4 ] [ def_amount_of_people + 1 ] ) * is_depot [ 2 ] ] ;
1724: LD_ADDR_EXP 21
1728: PUSH
1729: LD_INT 5
1731: PUSH
1732: LD_INT 8
1734: PUSH
1735: LD_INT 11
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: PUSH
1743: LD_EXP 4
1747: PUSH
1748: LD_INT 1
1750: PLUS
1751: ARRAY
1752: PUSH
1753: LD_INT 2
1755: PUSH
1756: LD_INT 3
1758: PUSH
1759: LD_INT 4
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: LD_EXP 4
1771: PUSH
1772: LD_INT 1
1774: PLUS
1775: ARRAY
1776: PUSH
1777: LD_EXP 20
1781: PUSH
1782: LD_INT 2
1784: ARRAY
1785: MUL
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
1791: LD_ADDR_EXP 29
1795: PUSH
1796: LD_INT 2
1798: PUSH
1799: LD_INT 3
1801: PUSH
1802: LD_INT 4
1804: PUSH
1805: LD_INT 5
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: PUSH
1814: LD_EXP 5
1818: PUSH
1819: LD_INT 1
1821: PLUS
1822: ARRAY
1823: ST_TO_ADDR
// starting_resources = [ [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] , [ [ 50 , 0 , 0 ] , [ 20 , 0 , 0 ] ] , [ [ 150 , 30 , 0 ] , [ 60 , 0 , 0 ] ] , [ [ 250 , 50 , 10 ] , [ 100 , 30 , 0 ] ] ] [ def_starting_resources + 1 ] ;
1824: LD_ADDR_EXP 31
1828: PUSH
1829: LD_INT 0
1831: PUSH
1832: LD_INT 0
1834: PUSH
1835: LD_INT 0
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 0
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: LD_INT 0
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: PUSH
1861: LD_INT 50
1863: PUSH
1864: LD_INT 0
1866: PUSH
1867: LD_INT 0
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: LIST
1874: PUSH
1875: LD_INT 20
1877: PUSH
1878: LD_INT 0
1880: PUSH
1881: LD_INT 0
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: LIST
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 150
1895: PUSH
1896: LD_INT 30
1898: PUSH
1899: LD_INT 0
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: PUSH
1907: LD_INT 60
1909: PUSH
1910: LD_INT 0
1912: PUSH
1913: LD_INT 0
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: LD_INT 250
1927: PUSH
1928: LD_INT 50
1930: PUSH
1931: LD_INT 10
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: PUSH
1939: LD_INT 100
1941: PUSH
1942: LD_INT 30
1944: PUSH
1945: LD_INT 0
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: PUSH
1963: LD_EXP 9
1967: PUSH
1968: LD_INT 1
1970: PLUS
1971: ARRAY
1972: ST_TO_ADDR
// shipments_density := 20 + ( def_shipments_density ) * 28 ;
1973: LD_ADDR_EXP 32
1977: PUSH
1978: LD_INT 20
1980: PUSH
1981: LD_EXP 10
1985: PUSH
1986: LD_INT 28
1988: MUL
1989: PLUS
1990: ST_TO_ADDR
// max_arriving_times = [ [ ] , [ 10 , 17 , 26 , 36 , 48 , 60 ] , [ 6 , 10 , 15 , 20 , 26 , 32 , 38 , 45 , 52 , 60 ] , [ 4 , 6 , 9 , 12 , 16 , 20 , 24 , 28 , 32 , 36 , 40 , 45 , 50 , 55 , 60 ] ] [ def_people_arrivals + 1 ] ;
1991: LD_ADDR_EXP 33
1995: PUSH
1996: EMPTY
1997: PUSH
1998: LD_INT 10
2000: PUSH
2001: LD_INT 17
2003: PUSH
2004: LD_INT 26
2006: PUSH
2007: LD_INT 36
2009: PUSH
2010: LD_INT 48
2012: PUSH
2013: LD_INT 60
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: PUSH
2024: LD_INT 6
2026: PUSH
2027: LD_INT 10
2029: PUSH
2030: LD_INT 15
2032: PUSH
2033: LD_INT 20
2035: PUSH
2036: LD_INT 26
2038: PUSH
2039: LD_INT 32
2041: PUSH
2042: LD_INT 38
2044: PUSH
2045: LD_INT 45
2047: PUSH
2048: LD_INT 52
2050: PUSH
2051: LD_INT 60
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: PUSH
2066: LD_INT 4
2068: PUSH
2069: LD_INT 6
2071: PUSH
2072: LD_INT 9
2074: PUSH
2075: LD_INT 12
2077: PUSH
2078: LD_INT 16
2080: PUSH
2081: LD_INT 20
2083: PUSH
2084: LD_INT 24
2086: PUSH
2087: LD_INT 28
2089: PUSH
2090: LD_INT 32
2092: PUSH
2093: LD_INT 36
2095: PUSH
2096: LD_INT 40
2098: PUSH
2099: LD_INT 45
2101: PUSH
2102: LD_INT 50
2104: PUSH
2105: LD_INT 55
2107: PUSH
2108: LD_INT 60
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: PUSH
2134: LD_EXP 11
2138: PUSH
2139: LD_INT 1
2141: PLUS
2142: ARRAY
2143: ST_TO_ADDR
// text_info = [ 0 , 1 , 0 , 1 ] [ def_people_info + 1 ] ;
2144: LD_ADDR_EXP 34
2148: PUSH
2149: LD_INT 0
2151: PUSH
2152: LD_INT 1
2154: PUSH
2155: LD_INT 0
2157: PUSH
2158: LD_INT 1
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_EXP 13
2171: PUSH
2172: LD_INT 1
2174: PLUS
2175: ARRAY
2176: ST_TO_ADDR
// fog_info = [ 0 , 0 , 1 , 1 ] [ def_people_info + 1 ] ;
2177: LD_ADDR_EXP 35
2181: PUSH
2182: LD_INT 0
2184: PUSH
2185: LD_INT 0
2187: PUSH
2188: LD_INT 1
2190: PUSH
2191: LD_INT 1
2193: PUSH
2194: EMPTY
2195: LIST
2196: LIST
2197: LIST
2198: LIST
2199: PUSH
2200: LD_EXP 13
2204: PUSH
2205: LD_INT 1
2207: PLUS
2208: ARRAY
2209: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
2210: LD_ADDR_EXP 37
2214: PUSH
2215: LD_INT 0
2217: PUSH
2218: LD_INT 3
2220: PUSH
2221: LD_INT 6
2223: PUSH
2224: LD_INT 9
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: LIST
2232: PUSH
2233: LD_EXP 16
2237: PUSH
2238: LD_INT 1
2240: PLUS
2241: ARRAY
2242: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2243: LD_ADDR_EXP 38
2247: PUSH
2248: LD_INT 0
2250: PUSH
2251: LD_INT 1
2253: PUSH
2254: LD_INT 63000
2256: PUSH
2257: LD_INT 126000
2259: PUSH
2260: LD_INT 189000
2262: PUSH
2263: LD_INT 252000
2265: PUSH
2266: EMPTY
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: PUSH
2274: LD_EXP 15
2278: PUSH
2279: LD_INT 1
2281: PLUS
2282: ARRAY
2283: ST_TO_ADDR
// deposits = [ [ [ 1 , 0 , 1 , 2 , 0 ] [ def_main_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_main_deposits + 1 ] ] , [ [ 1 , 0 , 1 , 2 , 0 ] [ def_secondary_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_secondary_deposits + 1 ] ] ] ;
2284: LD_ADDR_EXP 28
2288: PUSH
2289: LD_INT 1
2291: PUSH
2292: LD_INT 0
2294: PUSH
2295: LD_INT 1
2297: PUSH
2298: LD_INT 2
2300: PUSH
2301: LD_INT 0
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: PUSH
2311: LD_EXP 6
2315: PUSH
2316: LD_INT 1
2318: PLUS
2319: ARRAY
2320: PUSH
2321: LD_INT 0
2323: PUSH
2324: LD_INT 1
2326: PUSH
2327: LD_INT 1
2329: PUSH
2330: LD_INT 0
2332: PUSH
2333: LD_INT 2
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: PUSH
2343: LD_EXP 6
2347: PUSH
2348: LD_INT 1
2350: PLUS
2351: ARRAY
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: LD_INT 0
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: LD_INT 2
2368: PUSH
2369: LD_INT 0
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: PUSH
2379: LD_EXP 7
2383: PUSH
2384: LD_INT 1
2386: PLUS
2387: ARRAY
2388: PUSH
2389: LD_INT 0
2391: PUSH
2392: LD_INT 1
2394: PUSH
2395: LD_INT 1
2397: PUSH
2398: LD_INT 0
2400: PUSH
2401: LD_INT 2
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: LIST
2408: LIST
2409: LIST
2410: PUSH
2411: LD_EXP 7
2415: PUSH
2416: LD_INT 1
2418: PLUS
2419: ARRAY
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: ST_TO_ADDR
// def_bf_params = [ [ 0 , 0 , 0 , 0 ] , [ 50 , 25 , 0 , 50 ] , [ 75 , 50 , 25 , 75 ] , [ 100 , 75 , 50 , 100 ] ] [ def_morale_flags + 1 ] ;
2429: LD_ADDR_EXP 36
2433: PUSH
2434: LD_INT 0
2436: PUSH
2437: LD_INT 0
2439: PUSH
2440: LD_INT 0
2442: PUSH
2443: LD_INT 0
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 50
2454: PUSH
2455: LD_INT 25
2457: PUSH
2458: LD_INT 0
2460: PUSH
2461: LD_INT 50
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: LIST
2468: LIST
2469: PUSH
2470: LD_INT 75
2472: PUSH
2473: LD_INT 50
2475: PUSH
2476: LD_INT 25
2478: PUSH
2479: LD_INT 75
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: LIST
2486: LIST
2487: PUSH
2488: LD_INT 100
2490: PUSH
2491: LD_INT 75
2493: PUSH
2494: LD_INT 50
2496: PUSH
2497: LD_INT 100
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: PUSH
2512: LD_EXP 14
2516: PUSH
2517: LD_INT 1
2519: PLUS
2520: ARRAY
2521: ST_TO_ADDR
// prepare_arrivals ;
2522: CALL 11011 0 0
// if def_people_loyality then
2526: LD_EXP 12
2530: IFFALSE 3395
// begin second_side = [ [ [ 0 , 0 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 6 , 7 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 4 , 2 ] , [ 4 , 2 ] ] , [ [ 5 , 4 ] , [ 0 , 0 ] , [ 5 , 6 ] , [ 5 , 1 ] , [ 7 , 3 ] , [ 5 , 3 ] , [ 5 , 4 ] , [ 5 , 4 ] ] , [ [ 6 , 4 ] , [ 6 , 5 ] , [ 0 , 0 ] , [ 6 , 1 ] , [ 6 , 2 ] , [ 5 , 1 ] , [ 6 , 4 ] , [ 6 , 2 ] ] , [ [ 7 , 6 ] , [ 1 , 5 ] , [ 1 , 6 ] , [ 0 , 0 ] , [ 1 , 2 ] , [ 1 , 3 ] , [ 1 , 2 ] , [ 1 , 2 ] ] , [ [ 2 , 4 ] , [ 3 , 7 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 0 , 0 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 2 , 4 ] ] , [ [ 3 , 4 ] , [ 3 , 5 ] , [ 1 , 5 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 0 , 0 ] , [ 3 , 4 ] , [ 3 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 0 , 0 ] , [ 4 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 0 , 0 ] ] ] [ positions [ 1 ] ] [ positions [ 2 ] ] ;
2532: LD_ADDR_EXP 47
2536: PUSH
2537: LD_INT 0
2539: PUSH
2540: LD_INT 0
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: PUSH
2547: LD_INT 4
2549: PUSH
2550: LD_INT 5
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: PUSH
2557: LD_INT 4
2559: PUSH
2560: LD_INT 6
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: LD_INT 6
2569: PUSH
2570: LD_INT 7
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 4
2579: PUSH
2580: LD_INT 2
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: LD_INT 4
2589: PUSH
2590: LD_INT 3
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: PUSH
2597: LD_INT 4
2599: PUSH
2600: LD_INT 2
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: PUSH
2607: LD_INT 4
2609: PUSH
2610: LD_INT 2
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 5
2629: PUSH
2630: LD_INT 4
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: LD_INT 0
2639: PUSH
2640: LD_INT 0
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: PUSH
2647: LD_INT 5
2649: PUSH
2650: LD_INT 6
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PUSH
2657: LD_INT 5
2659: PUSH
2660: LD_INT 1
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: PUSH
2667: LD_INT 7
2669: PUSH
2670: LD_INT 3
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: PUSH
2677: LD_INT 5
2679: PUSH
2680: LD_INT 3
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_INT 5
2689: PUSH
2690: LD_INT 4
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PUSH
2697: LD_INT 5
2699: PUSH
2700: LD_INT 4
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: LIST
2711: LIST
2712: LIST
2713: LIST
2714: LIST
2715: LIST
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: LD_INT 4
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: PUSH
2727: LD_INT 6
2729: PUSH
2730: LD_INT 5
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 0
2739: PUSH
2740: LD_INT 0
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PUSH
2747: LD_INT 6
2749: PUSH
2750: LD_INT 1
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PUSH
2757: LD_INT 6
2759: PUSH
2760: LD_INT 2
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 5
2769: PUSH
2770: LD_INT 1
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: LD_INT 6
2779: PUSH
2780: LD_INT 4
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 6
2789: PUSH
2790: LD_INT 2
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 7
2809: PUSH
2810: LD_INT 6
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: PUSH
2817: LD_INT 1
2819: PUSH
2820: LD_INT 5
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 1
2829: PUSH
2830: LD_INT 6
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: PUSH
2837: LD_INT 0
2839: PUSH
2840: LD_INT 0
2842: PUSH
2843: EMPTY
2844: LIST
2845: LIST
2846: PUSH
2847: LD_INT 1
2849: PUSH
2850: LD_INT 2
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: LD_INT 1
2859: PUSH
2860: LD_INT 3
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: LD_INT 2
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: LD_INT 1
2879: PUSH
2880: LD_INT 2
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: LIST
2891: LIST
2892: LIST
2893: LIST
2894: LIST
2895: LIST
2896: PUSH
2897: LD_INT 2
2899: PUSH
2900: LD_INT 4
2902: PUSH
2903: EMPTY
2904: LIST
2905: LIST
2906: PUSH
2907: LD_INT 3
2909: PUSH
2910: LD_INT 7
2912: PUSH
2913: EMPTY
2914: LIST
2915: LIST
2916: PUSH
2917: LD_INT 2
2919: PUSH
2920: LD_INT 6
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: PUSH
2927: LD_INT 2
2929: PUSH
2930: LD_INT 1
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: PUSH
2937: LD_INT 0
2939: PUSH
2940: LD_INT 0
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: PUSH
2947: LD_INT 2
2949: PUSH
2950: LD_INT 3
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: PUSH
2957: LD_INT 2
2959: PUSH
2960: LD_INT 4
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: LD_INT 4
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: PUSH
2987: LD_INT 3
2989: PUSH
2990: LD_INT 4
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: PUSH
2997: LD_INT 3
2999: PUSH
3000: LD_INT 5
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PUSH
3007: LD_INT 1
3009: PUSH
3010: LD_INT 5
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PUSH
3017: LD_INT 3
3019: PUSH
3020: LD_INT 1
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: PUSH
3027: LD_INT 3
3029: PUSH
3030: LD_INT 2
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 0
3039: PUSH
3040: LD_INT 0
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PUSH
3047: LD_INT 3
3049: PUSH
3050: LD_INT 4
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: PUSH
3057: LD_INT 3
3059: PUSH
3060: LD_INT 2
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: PUSH
3077: LD_INT 2
3079: PUSH
3080: LD_INT 4
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: PUSH
3087: LD_INT 4
3089: PUSH
3090: LD_INT 5
3092: PUSH
3093: EMPTY
3094: LIST
3095: LIST
3096: PUSH
3097: LD_INT 4
3099: PUSH
3100: LD_INT 6
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 2
3109: PUSH
3110: LD_INT 1
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: LD_INT 4
3119: PUSH
3120: LD_INT 2
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: LD_INT 4
3129: PUSH
3130: LD_INT 3
3132: PUSH
3133: EMPTY
3134: LIST
3135: LIST
3136: PUSH
3137: LD_INT 0
3139: PUSH
3140: LD_INT 0
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 4
3149: PUSH
3150: LD_INT 2
3152: PUSH
3153: EMPTY
3154: LIST
3155: LIST
3156: PUSH
3157: EMPTY
3158: LIST
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: PUSH
3167: LD_INT 2
3169: PUSH
3170: LD_INT 4
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 4
3179: PUSH
3180: LD_INT 5
3182: PUSH
3183: EMPTY
3184: LIST
3185: LIST
3186: PUSH
3187: LD_INT 2
3189: PUSH
3190: LD_INT 6
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PUSH
3197: LD_INT 2
3199: PUSH
3200: LD_INT 1
3202: PUSH
3203: EMPTY
3204: LIST
3205: LIST
3206: PUSH
3207: LD_INT 4
3209: PUSH
3210: LD_INT 2
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: PUSH
3217: LD_INT 2
3219: PUSH
3220: LD_INT 3
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PUSH
3227: LD_INT 2
3229: PUSH
3230: LD_INT 4
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: LD_INT 0
3239: PUSH
3240: LD_INT 0
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: PUSH
3267: LD_EXP 39
3271: PUSH
3272: LD_INT 1
3274: ARRAY
3275: ARRAY
3276: PUSH
3277: LD_EXP 39
3281: PUSH
3282: LD_INT 2
3284: ARRAY
3285: ARRAY
3286: ST_TO_ADDR
// SetAttitude ( second_side [ 1 ] , positions [ 1 ] , att_friend , true ) ;
3287: LD_EXP 47
3291: PUSH
3292: LD_INT 1
3294: ARRAY
3295: PPUSH
3296: LD_EXP 39
3300: PUSH
3301: LD_INT 1
3303: ARRAY
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: LD_INT 1
3310: PPUSH
3311: CALL_OW 80
// SetAttitude ( second_side [ 2 ] , positions [ 2 ] , att_friend , true ) ;
3315: LD_EXP 47
3319: PUSH
3320: LD_INT 2
3322: ARRAY
3323: PPUSH
3324: LD_EXP 39
3328: PUSH
3329: LD_INT 2
3331: ARRAY
3332: PPUSH
3333: LD_INT 1
3335: PPUSH
3336: LD_INT 1
3338: PPUSH
3339: CALL_OW 80
// if fog_info then
3343: LD_EXP 35
3347: IFFALSE 3393
// begin ChangeSideFog ( second_side [ 1 ] , positions [ 1 ] ) ;
3349: LD_EXP 47
3353: PUSH
3354: LD_INT 1
3356: ARRAY
3357: PPUSH
3358: LD_EXP 39
3362: PUSH
3363: LD_INT 1
3365: ARRAY
3366: PPUSH
3367: CALL_OW 343
// ChangeSideFog ( second_side [ 2 ] , positions [ 2 ] ) ;
3371: LD_EXP 47
3375: PUSH
3376: LD_INT 2
3378: ARRAY
3379: PPUSH
3380: LD_EXP 39
3384: PUSH
3385: LD_INT 2
3387: ARRAY
3388: PPUSH
3389: CALL_OW 343
// end ; end else
3393: GO 3675
// begin pom_tab = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] diff ( positions union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 1 ] ] union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 2 ] ] ) ;
3395: LD_ADDR_VAR 0 11
3399: PUSH
3400: LD_INT 1
3402: PUSH
3403: LD_INT 2
3405: PUSH
3406: LD_INT 3
3408: PUSH
3409: LD_INT 4
3411: PUSH
3412: LD_INT 5
3414: PUSH
3415: LD_INT 6
3417: PUSH
3418: LD_INT 7
3420: PUSH
3421: LD_INT 8
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: PUSH
3434: LD_EXP 39
3438: PUSH
3439: LD_INT 4
3441: PUSH
3442: LD_INT 5
3444: PUSH
3445: LD_INT 7
3447: PUSH
3448: LD_INT 8
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: LIST
3455: PUSH
3456: LD_INT 6
3458: PUSH
3459: LD_INT 1
3461: PUSH
3462: LD_INT 7
3464: PUSH
3465: LD_INT 8
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 2
3475: PUSH
3476: LD_INT 3
3478: PUSH
3479: LD_INT 2
3481: PUSH
3482: LD_INT 4
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: PUSH
3489: LD_INT 2
3491: PUSH
3492: LD_INT 4
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: LD_EXP 39
3513: PUSH
3514: LD_INT 1
3516: ARRAY
3517: ARRAY
3518: UNION
3519: PUSH
3520: LD_INT 4
3522: PUSH
3523: LD_INT 5
3525: PUSH
3526: LD_INT 7
3528: PUSH
3529: LD_INT 8
3531: PUSH
3532: EMPTY
3533: LIST
3534: LIST
3535: LIST
3536: PUSH
3537: LD_INT 6
3539: PUSH
3540: LD_INT 1
3542: PUSH
3543: LD_INT 7
3545: PUSH
3546: LD_INT 8
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: LIST
3553: PUSH
3554: LD_INT 2
3556: PUSH
3557: LD_INT 3
3559: PUSH
3560: LD_INT 2
3562: PUSH
3563: LD_INT 4
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: PUSH
3570: LD_INT 2
3572: PUSH
3573: LD_INT 4
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: PUSH
3590: LD_EXP 39
3594: PUSH
3595: LD_INT 2
3597: ARRAY
3598: ARRAY
3599: UNION
3600: DIFF
3601: ST_TO_ADDR
// second_side = pom_tab [ Rand ( 1 , pom_tab ) ] ;
3602: LD_ADDR_EXP 47
3606: PUSH
3607: LD_VAR 0 11
3611: PUSH
3612: LD_INT 1
3614: PPUSH
3615: LD_VAR 0 11
3619: PPUSH
3620: CALL_OW 12
3624: ARRAY
3625: ST_TO_ADDR
// third_nation = [ 1 , 2 , 3 ] diff side_nations ;
3626: LD_ADDR_EXP 48
3630: PUSH
3631: LD_INT 1
3633: PUSH
3634: LD_INT 2
3636: PUSH
3637: LD_INT 3
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: LIST
3644: PUSH
3645: LD_EXP 44
3649: DIFF
3650: ST_TO_ADDR
// third_nation = third_nation [ Rand ( 1 , third_nation ) ] ;
3651: LD_ADDR_EXP 48
3655: PUSH
3656: LD_EXP 48
3660: PUSH
3661: LD_INT 1
3663: PPUSH
3664: LD_EXP 48
3668: PPUSH
3669: CALL_OW 12
3673: ARRAY
3674: ST_TO_ADDR
// end ; BuildUpAreas := [ BuildUp1 , BuildUp2 ] ;
3675: LD_ADDR_EXP 58
3679: PUSH
3680: LD_INT 26
3682: PUSH
3683: LD_INT 27
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: ST_TO_ADDR
// end ;
3690: LD_VAR 0 1
3694: RET
// function prepare_map_coordinates ; var side , dep2 , br2 , dep1 , br1 , lab , fac , arm , pplant , un , i , k11 , k12 , k21 , k22 ; begin
3695: LD_INT 0
3697: PPUSH
3698: PPUSH
3699: PPUSH
3700: PPUSH
3701: PPUSH
3702: PPUSH
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
3710: PPUSH
3711: PPUSH
3712: PPUSH
// start_def = [ ] ;
3713: LD_ADDR_EXP 49
3717: PUSH
3718: EMPTY
3719: ST_TO_ADDR
// depots_def = [ ] ;
3720: LD_ADDR_EXP 50
3724: PUSH
3725: EMPTY
3726: ST_TO_ADDR
// breastworks_def = [ ] ;
3727: LD_ADDR_EXP 51
3731: PUSH
3732: EMPTY
3733: ST_TO_ADDR
// labs_def = [ ] ;
3734: LD_ADDR_EXP 52
3738: PUSH
3739: EMPTY
3740: ST_TO_ADDR
// factories_def = [ ] ;
3741: LD_ADDR_EXP 53
3745: PUSH
3746: EMPTY
3747: ST_TO_ADDR
// armories_def = [ ] ;
3748: LD_ADDR_EXP 54
3752: PUSH
3753: EMPTY
3754: ST_TO_ADDR
// pplants_def = [ ] ;
3755: LD_ADDR_EXP 55
3759: PUSH
3760: EMPTY
3761: ST_TO_ADDR
// deposits_def = [ ] ;
3762: LD_ADDR_EXP 56
3766: PUSH
3767: EMPTY
3768: ST_TO_ADDR
// k11 := Rand ( 1 , 2 ) ;
3769: LD_ADDR_VAR 0 13
3773: PUSH
3774: LD_INT 1
3776: PPUSH
3777: LD_INT 2
3779: PPUSH
3780: CALL_OW 12
3784: ST_TO_ADDR
// k12 := Rand ( 1 , 2 ) ;
3785: LD_ADDR_VAR 0 14
3789: PUSH
3790: LD_INT 1
3792: PPUSH
3793: LD_INT 2
3795: PPUSH
3796: CALL_OW 12
3800: ST_TO_ADDR
// k21 := Rand ( 1 , 2 ) ;
3801: LD_ADDR_VAR 0 15
3805: PUSH
3806: LD_INT 1
3808: PPUSH
3809: LD_INT 2
3811: PPUSH
3812: CALL_OW 12
3816: ST_TO_ADDR
// k22 := Rand ( 1 , 2 ) ;
3817: LD_ADDR_VAR 0 16
3821: PUSH
3822: LD_INT 1
3824: PPUSH
3825: LD_INT 2
3827: PPUSH
3828: CALL_OW 12
3832: ST_TO_ADDR
// deposits_def := [ [ [ [ Res111 , Res112 ] [ k11 ] , [ Res111 , Res112 ] [ 3 - k11 ] ] , [ [ Res121 , Res122 ] [ k12 ] , [ Res121 , Res122 ] [ 3 - k12 ] ] ] , [ [ [ Res211 , Res212 ] [ k21 ] , [ Res211 , Res212 ] [ 3 - k21 ] ] , [ [ Res221 , Res222 ] [ k22 ] , [ Res221 , Res222 ] [ 3 - k22 ] ] ] ] ;
3833: LD_ADDR_EXP 56
3837: PUSH
3838: LD_INT 4
3840: PUSH
3841: LD_INT 5
3843: PUSH
3844: EMPTY
3845: LIST
3846: LIST
3847: PUSH
3848: LD_VAR 0 13
3852: ARRAY
3853: PUSH
3854: LD_INT 4
3856: PUSH
3857: LD_INT 5
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: PUSH
3864: LD_INT 3
3866: PUSH
3867: LD_VAR 0 13
3871: MINUS
3872: ARRAY
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: PUSH
3878: LD_INT 6
3880: PUSH
3881: LD_INT 7
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PUSH
3888: LD_VAR 0 14
3892: ARRAY
3893: PUSH
3894: LD_INT 6
3896: PUSH
3897: LD_INT 7
3899: PUSH
3900: EMPTY
3901: LIST
3902: LIST
3903: PUSH
3904: LD_INT 3
3906: PUSH
3907: LD_VAR 0 14
3911: MINUS
3912: ARRAY
3913: PUSH
3914: EMPTY
3915: LIST
3916: LIST
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_INT 8
3924: PUSH
3925: LD_INT 9
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: PUSH
3932: LD_VAR 0 15
3936: ARRAY
3937: PUSH
3938: LD_INT 8
3940: PUSH
3941: LD_INT 9
3943: PUSH
3944: EMPTY
3945: LIST
3946: LIST
3947: PUSH
3948: LD_INT 3
3950: PUSH
3951: LD_VAR 0 15
3955: MINUS
3956: ARRAY
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: PUSH
3962: LD_INT 10
3964: PUSH
3965: LD_INT 11
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PUSH
3972: LD_VAR 0 16
3976: ARRAY
3977: PUSH
3978: LD_INT 10
3980: PUSH
3981: LD_INT 11
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: PUSH
3988: LD_INT 3
3990: PUSH
3991: LD_VAR 0 16
3995: MINUS
3996: ARRAY
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: ST_TO_ADDR
// for side := 1 to 2 do
4010: LD_ADDR_VAR 0 2
4014: PUSH
4015: DOUBLE
4016: LD_INT 1
4018: DEC
4019: ST_TO_ADDR
4020: LD_INT 2
4022: PUSH
4023: FOR_TO
4024: IFFALSE 5156
// begin dep1 := side * 10 - 9 ;
4026: LD_ADDR_VAR 0 5
4030: PUSH
4031: LD_VAR 0 2
4035: PUSH
4036: LD_INT 10
4038: MUL
4039: PUSH
4040: LD_INT 9
4042: MINUS
4043: ST_TO_ADDR
// dep2 := 20 + side * 4 - 3 ;
4044: LD_ADDR_VAR 0 3
4048: PUSH
4049: LD_INT 20
4051: PUSH
4052: LD_VAR 0 2
4056: PUSH
4057: LD_INT 4
4059: MUL
4060: PLUS
4061: PUSH
4062: LD_INT 3
4064: MINUS
4065: ST_TO_ADDR
// br1 := [ side * 10 - 8 , side * 10 - 7 , side * 10 - 6 , side * 10 - 5 ] ;
4066: LD_ADDR_VAR 0 6
4070: PUSH
4071: LD_VAR 0 2
4075: PUSH
4076: LD_INT 10
4078: MUL
4079: PUSH
4080: LD_INT 8
4082: MINUS
4083: PUSH
4084: LD_VAR 0 2
4088: PUSH
4089: LD_INT 10
4091: MUL
4092: PUSH
4093: LD_INT 7
4095: MINUS
4096: PUSH
4097: LD_VAR 0 2
4101: PUSH
4102: LD_INT 10
4104: MUL
4105: PUSH
4106: LD_INT 6
4108: MINUS
4109: PUSH
4110: LD_VAR 0 2
4114: PUSH
4115: LD_INT 10
4117: MUL
4118: PUSH
4119: LD_INT 5
4121: MINUS
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: ST_TO_ADDR
// br2 := [ 20 + side * 4 - 2 , 20 + side * 4 - 1 , 20 + side * 4 ] ;
4129: LD_ADDR_VAR 0 4
4133: PUSH
4134: LD_INT 20
4136: PUSH
4137: LD_VAR 0 2
4141: PUSH
4142: LD_INT 4
4144: MUL
4145: PLUS
4146: PUSH
4147: LD_INT 2
4149: MINUS
4150: PUSH
4151: LD_INT 20
4153: PUSH
4154: LD_VAR 0 2
4158: PUSH
4159: LD_INT 4
4161: MUL
4162: PLUS
4163: PUSH
4164: LD_INT 1
4166: MINUS
4167: PUSH
4168: LD_INT 20
4170: PUSH
4171: LD_VAR 0 2
4175: PUSH
4176: LD_INT 4
4178: MUL
4179: PLUS
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// lab := side * 10 - 4 ;
4186: LD_ADDR_VAR 0 7
4190: PUSH
4191: LD_VAR 0 2
4195: PUSH
4196: LD_INT 10
4198: MUL
4199: PUSH
4200: LD_INT 4
4202: MINUS
4203: ST_TO_ADDR
// fac := side * 10 - 3 ;
4204: LD_ADDR_VAR 0 8
4208: PUSH
4209: LD_VAR 0 2
4213: PUSH
4214: LD_INT 10
4216: MUL
4217: PUSH
4218: LD_INT 3
4220: MINUS
4221: ST_TO_ADDR
// arm := side * 10 - 2 ;
4222: LD_ADDR_VAR 0 9
4226: PUSH
4227: LD_VAR 0 2
4231: PUSH
4232: LD_INT 10
4234: MUL
4235: PUSH
4236: LD_INT 2
4238: MINUS
4239: ST_TO_ADDR
// pplant := [ side * 10 - 1 , side * 10 ] ;
4240: LD_ADDR_VAR 0 10
4244: PUSH
4245: LD_VAR 0 2
4249: PUSH
4250: LD_INT 10
4252: MUL
4253: PUSH
4254: LD_INT 1
4256: MINUS
4257: PUSH
4258: LD_VAR 0 2
4262: PUSH
4263: LD_INT 10
4265: MUL
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: ST_TO_ADDR
// depots_def := depots_def ^ [ [ [ GetX ( dep1 ) , GetY ( dep1 ) , GetDir ( dep1 ) ] , [ GetX ( dep2 ) , GetY ( dep2 ) , GetDir ( dep2 ) ] ] ] ;
4271: LD_ADDR_EXP 50
4275: PUSH
4276: LD_EXP 50
4280: PUSH
4281: LD_VAR 0 5
4285: PPUSH
4286: CALL_OW 250
4290: PUSH
4291: LD_VAR 0 5
4295: PPUSH
4296: CALL_OW 251
4300: PUSH
4301: LD_VAR 0 5
4305: PPUSH
4306: CALL_OW 254
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: LIST
4315: PUSH
4316: LD_VAR 0 3
4320: PPUSH
4321: CALL_OW 250
4325: PUSH
4326: LD_VAR 0 3
4330: PPUSH
4331: CALL_OW 251
4335: PUSH
4336: LD_VAR 0 3
4340: PPUSH
4341: CALL_OW 254
4345: PUSH
4346: EMPTY
4347: LIST
4348: LIST
4349: LIST
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: PUSH
4355: EMPTY
4356: LIST
4357: ADD
4358: ST_TO_ADDR
// start_def := start_def ^ [ [ [ ShiftX ( GetX ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) ] , [ ShiftX ( GetX ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) ] ] ] ;
4359: LD_ADDR_EXP 49
4363: PUSH
4364: LD_EXP 49
4368: PUSH
4369: LD_VAR 0 5
4373: PPUSH
4374: CALL_OW 250
4378: PPUSH
4379: LD_VAR 0 5
4383: PPUSH
4384: CALL_OW 254
4388: PUSH
4389: LD_INT 6
4391: MOD
4392: PPUSH
4393: LD_INT 6
4395: PPUSH
4396: CALL_OW 272
4400: PUSH
4401: LD_VAR 0 5
4405: PPUSH
4406: CALL_OW 251
4410: PPUSH
4411: LD_VAR 0 5
4415: PPUSH
4416: CALL_OW 254
4420: PUSH
4421: LD_INT 6
4423: MOD
4424: PPUSH
4425: LD_INT 6
4427: PPUSH
4428: CALL_OW 273
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: PUSH
4437: LD_VAR 0 3
4441: PPUSH
4442: CALL_OW 250
4446: PPUSH
4447: LD_VAR 0 3
4451: PPUSH
4452: CALL_OW 254
4456: PUSH
4457: LD_INT 6
4459: MOD
4460: PPUSH
4461: LD_INT 6
4463: PPUSH
4464: CALL_OW 272
4468: PUSH
4469: LD_VAR 0 3
4473: PPUSH
4474: CALL_OW 251
4478: PPUSH
4479: LD_VAR 0 3
4483: PPUSH
4484: CALL_OW 254
4488: PUSH
4489: LD_INT 6
4491: MOD
4492: PPUSH
4493: LD_INT 6
4495: PPUSH
4496: CALL_OW 273
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: PUSH
4509: EMPTY
4510: LIST
4511: ADD
4512: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ [ GetX ( br1 [ 1 ] ) , GetY ( br1 [ 1 ] ) , GetDir ( br1 [ 1 ] ) ] , [ GetX ( br1 [ 2 ] ) , GetY ( br1 [ 2 ] ) , GetDir ( br1 [ 2 ] ) ] , [ GetX ( br1 [ 3 ] ) , GetY ( br1 [ 3 ] ) , GetDir ( br1 [ 3 ] ) ] , [ GetX ( br1 [ 4 ] ) , GetY ( br1 [ 4 ] ) , GetDir ( br1 [ 4 ] ) ] ] , [ [ GetX ( br2 [ 1 ] ) , GetY ( br2 [ 1 ] ) , GetDir ( br2 [ 1 ] ) ] , [ GetX ( br2 [ 2 ] ) , GetY ( br2 [ 2 ] ) , GetDir ( br2 [ 2 ] ) ] , [ GetX ( br2 [ 3 ] ) , GetY ( br2 [ 3 ] ) , GetDir ( br2 [ 3 ] ) ] ] ] ] ;
4513: LD_ADDR_EXP 51
4517: PUSH
4518: LD_EXP 51
4522: PUSH
4523: LD_VAR 0 6
4527: PUSH
4528: LD_INT 1
4530: ARRAY
4531: PPUSH
4532: CALL_OW 250
4536: PUSH
4537: LD_VAR 0 6
4541: PUSH
4542: LD_INT 1
4544: ARRAY
4545: PPUSH
4546: CALL_OW 251
4550: PUSH
4551: LD_VAR 0 6
4555: PUSH
4556: LD_INT 1
4558: ARRAY
4559: PPUSH
4560: CALL_OW 254
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: LIST
4569: PUSH
4570: LD_VAR 0 6
4574: PUSH
4575: LD_INT 2
4577: ARRAY
4578: PPUSH
4579: CALL_OW 250
4583: PUSH
4584: LD_VAR 0 6
4588: PUSH
4589: LD_INT 2
4591: ARRAY
4592: PPUSH
4593: CALL_OW 251
4597: PUSH
4598: LD_VAR 0 6
4602: PUSH
4603: LD_INT 2
4605: ARRAY
4606: PPUSH
4607: CALL_OW 254
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: LIST
4616: PUSH
4617: LD_VAR 0 6
4621: PUSH
4622: LD_INT 3
4624: ARRAY
4625: PPUSH
4626: CALL_OW 250
4630: PUSH
4631: LD_VAR 0 6
4635: PUSH
4636: LD_INT 3
4638: ARRAY
4639: PPUSH
4640: CALL_OW 251
4644: PUSH
4645: LD_VAR 0 6
4649: PUSH
4650: LD_INT 3
4652: ARRAY
4653: PPUSH
4654: CALL_OW 254
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: LIST
4663: PUSH
4664: LD_VAR 0 6
4668: PUSH
4669: LD_INT 4
4671: ARRAY
4672: PPUSH
4673: CALL_OW 250
4677: PUSH
4678: LD_VAR 0 6
4682: PUSH
4683: LD_INT 4
4685: ARRAY
4686: PPUSH
4687: CALL_OW 251
4691: PUSH
4692: LD_VAR 0 6
4696: PUSH
4697: LD_INT 4
4699: ARRAY
4700: PPUSH
4701: CALL_OW 254
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: PUSH
4717: LD_VAR 0 4
4721: PUSH
4722: LD_INT 1
4724: ARRAY
4725: PPUSH
4726: CALL_OW 250
4730: PUSH
4731: LD_VAR 0 4
4735: PUSH
4736: LD_INT 1
4738: ARRAY
4739: PPUSH
4740: CALL_OW 251
4744: PUSH
4745: LD_VAR 0 4
4749: PUSH
4750: LD_INT 1
4752: ARRAY
4753: PPUSH
4754: CALL_OW 254
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: LIST
4763: PUSH
4764: LD_VAR 0 4
4768: PUSH
4769: LD_INT 2
4771: ARRAY
4772: PPUSH
4773: CALL_OW 250
4777: PUSH
4778: LD_VAR 0 4
4782: PUSH
4783: LD_INT 2
4785: ARRAY
4786: PPUSH
4787: CALL_OW 251
4791: PUSH
4792: LD_VAR 0 4
4796: PUSH
4797: LD_INT 2
4799: ARRAY
4800: PPUSH
4801: CALL_OW 254
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: LIST
4810: PUSH
4811: LD_VAR 0 4
4815: PUSH
4816: LD_INT 3
4818: ARRAY
4819: PPUSH
4820: CALL_OW 250
4824: PUSH
4825: LD_VAR 0 4
4829: PUSH
4830: LD_INT 3
4832: ARRAY
4833: PPUSH
4834: CALL_OW 251
4838: PUSH
4839: LD_VAR 0 4
4843: PUSH
4844: LD_INT 3
4846: ARRAY
4847: PPUSH
4848: CALL_OW 254
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: LIST
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PUSH
4867: EMPTY
4868: LIST
4869: ADD
4870: ST_TO_ADDR
// labs_def := labs_def ^ [ [ [ GetX ( lab ) , GetY ( lab ) , GetDir ( lab ) ] , [ ] ] ] ;
4871: LD_ADDR_EXP 52
4875: PUSH
4876: LD_EXP 52
4880: PUSH
4881: LD_VAR 0 7
4885: PPUSH
4886: CALL_OW 250
4890: PUSH
4891: LD_VAR 0 7
4895: PPUSH
4896: CALL_OW 251
4900: PUSH
4901: LD_VAR 0 7
4905: PPUSH
4906: CALL_OW 254
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: PUSH
4916: EMPTY
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PUSH
4922: EMPTY
4923: LIST
4924: ADD
4925: ST_TO_ADDR
// factories_def := factories_def ^ [ [ [ GetX ( fac ) , GetY ( fac ) , GetDir ( fac ) ] , [ ] ] ] ;
4926: LD_ADDR_EXP 53
4930: PUSH
4931: LD_EXP 53
4935: PUSH
4936: LD_VAR 0 8
4940: PPUSH
4941: CALL_OW 250
4945: PUSH
4946: LD_VAR 0 8
4950: PPUSH
4951: CALL_OW 251
4955: PUSH
4956: LD_VAR 0 8
4960: PPUSH
4961: CALL_OW 254
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: LIST
4970: PUSH
4971: EMPTY
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PUSH
4977: EMPTY
4978: LIST
4979: ADD
4980: ST_TO_ADDR
// armories_def := armories_def ^ [ [ [ GetX ( arm ) , GetY ( arm ) , GetDir ( arm ) ] , [ ] ] ] ;
4981: LD_ADDR_EXP 54
4985: PUSH
4986: LD_EXP 54
4990: PUSH
4991: LD_VAR 0 9
4995: PPUSH
4996: CALL_OW 250
5000: PUSH
5001: LD_VAR 0 9
5005: PPUSH
5006: CALL_OW 251
5010: PUSH
5011: LD_VAR 0 9
5015: PPUSH
5016: CALL_OW 254
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: LIST
5025: PUSH
5026: EMPTY
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: PUSH
5032: EMPTY
5033: LIST
5034: ADD
5035: ST_TO_ADDR
// pplants_def := pplants_def ^ [ [ [ [ GetX ( pplant [ 1 ] ) , GetY ( pplant [ 1 ] ) , GetDir ( pplant [ 1 ] ) ] , [ GetX ( pplant [ 2 ] ) , GetY ( pplant [ 2 ] ) , GetDir ( pplant [ 2 ] ) ] ] , [ ] ] ] ;
5036: LD_ADDR_EXP 55
5040: PUSH
5041: LD_EXP 55
5045: PUSH
5046: LD_VAR 0 10
5050: PUSH
5051: LD_INT 1
5053: ARRAY
5054: PPUSH
5055: CALL_OW 250
5059: PUSH
5060: LD_VAR 0 10
5064: PUSH
5065: LD_INT 1
5067: ARRAY
5068: PPUSH
5069: CALL_OW 251
5073: PUSH
5074: LD_VAR 0 10
5078: PUSH
5079: LD_INT 1
5081: ARRAY
5082: PPUSH
5083: CALL_OW 254
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: LIST
5092: PUSH
5093: LD_VAR 0 10
5097: PUSH
5098: LD_INT 2
5100: ARRAY
5101: PPUSH
5102: CALL_OW 250
5106: PUSH
5107: LD_VAR 0 10
5111: PUSH
5112: LD_INT 2
5114: ARRAY
5115: PPUSH
5116: CALL_OW 251
5120: PUSH
5121: LD_VAR 0 10
5125: PUSH
5126: LD_INT 2
5128: ARRAY
5129: PPUSH
5130: CALL_OW 254
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: LIST
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PUSH
5144: EMPTY
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: PUSH
5150: EMPTY
5151: LIST
5152: ADD
5153: ST_TO_ADDR
// end ;
5154: GO 4023
5156: POP
5157: POP
// for un := 1 to 28 do
5158: LD_ADDR_VAR 0 11
5162: PUSH
5163: DOUBLE
5164: LD_INT 1
5166: DEC
5167: ST_TO_ADDR
5168: LD_INT 28
5170: PUSH
5171: FOR_TO
5172: IFFALSE 5185
// DestroyUnit ( un ) ;
5174: LD_VAR 0 11
5178: PPUSH
5179: CALL_OW 65
5183: GO 5171
5185: POP
5186: POP
// end ;
5187: LD_VAR 0 1
5191: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
5192: LD_INT 0
5194: PPUSH
5195: PPUSH
5196: PPUSH
5197: PPUSH
// result := [ ] ;
5198: LD_ADDR_VAR 0 7
5202: PUSH
5203: EMPTY
5204: ST_TO_ADDR
// for i := 1 to count do
5205: LD_ADDR_VAR 0 8
5209: PUSH
5210: DOUBLE
5211: LD_INT 1
5213: DEC
5214: ST_TO_ADDR
5215: LD_VAR 0 1
5219: PUSH
5220: FOR_TO
5221: IFFALSE 5639
// begin uc_direction := Rand ( 0 , 5 ) ;
5223: LD_ADDR_OWVAR 24
5227: PUSH
5228: LD_INT 0
5230: PPUSH
5231: LD_INT 5
5233: PPUSH
5234: CALL_OW 12
5238: ST_TO_ADDR
// if commander then
5239: LD_LOC 1
5243: IFFALSE 5352
// begin hc_name := mp_sides_players_names [ uc_side ] ;
5245: LD_ADDR_OWVAR 26
5249: PUSH
5250: LD_OWVAR 19
5254: PUSH
5255: LD_OWVAR 20
5259: ARRAY
5260: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
5261: LD_INT 1
5263: PPUSH
5264: LD_INT 2
5266: PPUSH
5267: CALL_OW 12
5271: PPUSH
5272: LD_VAR 0 2
5276: PPUSH
5277: LD_EXP 29
5281: PUSH
5282: LD_INT 2
5284: PLUS
5285: PPUSH
5286: CALL_OW 380
// hc_importance := 105 ;
5290: LD_ADDR_OWVAR 32
5294: PUSH
5295: LD_INT 105
5297: ST_TO_ADDR
// commander := false ;
5298: LD_ADDR_LOC 1
5302: PUSH
5303: LD_INT 0
5305: ST_TO_ADDR
// if Multiplayer then
5306: LD_OWVAR 4
5310: IFFALSE 5350
// begin hc_gallery := MULTIAVATARS ;
5312: LD_ADDR_OWVAR 33
5316: PUSH
5317: LD_STRING MULTIAVATARS
5319: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
5320: LD_ADDR_OWVAR 34
5324: PUSH
5325: LD_OWVAR 20
5329: PPUSH
5330: CALL_OW 525
5334: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
5335: LD_ADDR_OWVAR 27
5339: PUSH
5340: LD_OWVAR 20
5344: PPUSH
5345: CALL_OW 526
5349: ST_TO_ADDR
// end ; end else
5350: GO 5415
// begin hc_name :=  ;
5352: LD_ADDR_OWVAR 26
5356: PUSH
5357: LD_STRING 
5359: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
5360: LD_INT 1
5362: PPUSH
5363: LD_INT 2
5365: PPUSH
5366: CALL_OW 12
5370: PPUSH
5371: LD_VAR 0 2
5375: PPUSH
5376: LD_EXP 29
5380: PPUSH
5381: CALL_OW 380
// hc_importance := 0 ;
5385: LD_ADDR_OWVAR 32
5389: PUSH
5390: LD_INT 0
5392: ST_TO_ADDR
// if Multiplayer then
5393: LD_OWVAR 4
5397: IFFALSE 5415
// begin hc_gallery :=  ;
5399: LD_ADDR_OWVAR 33
5403: PUSH
5404: LD_STRING 
5406: ST_TO_ADDR
// hc_face_number := 0 ;
5407: LD_ADDR_OWVAR 34
5411: PUSH
5412: LD_INT 0
5414: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
5415: LD_ADDR_VAR 0 10
5419: PUSH
5420: CALL_OW 44
5424: ST_TO_ADDR
// if global_defined then
5425: LD_LOC 3
5429: IFFALSE 5569
// begin if ( cl = class_soldier ) then
5431: LD_VAR 0 2
5435: PUSH
5436: LD_INT 1
5438: EQUAL
5439: IFFALSE 5459
// j := i + soldiers_created else
5441: LD_ADDR_VAR 0 9
5445: PUSH
5446: LD_VAR 0 8
5450: PUSH
5451: LD_LOC 4
5455: PLUS
5456: ST_TO_ADDR
5457: GO 5469
// j := i ;
5459: LD_ADDR_VAR 0 9
5463: PUSH
5464: LD_VAR 0 8
5468: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
5469: LD_LOC 2
5473: PUSH
5474: LD_VAR 0 2
5478: ARRAY
5479: PUSH
5480: LD_VAR 0 9
5484: ARRAY
5485: PPUSH
5486: LD_VAR 0 10
5490: PPUSH
5491: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
5495: LD_VAR 0 10
5499: PPUSH
5500: LD_INT 2
5502: PPUSH
5503: LD_LOC 2
5507: PUSH
5508: LD_VAR 0 2
5512: ARRAY
5513: PUSH
5514: LD_VAR 0 9
5518: ARRAY
5519: PPUSH
5520: LD_INT 2
5522: PPUSH
5523: CALL_OW 260
5527: PPUSH
5528: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
5532: LD_VAR 0 10
5536: PPUSH
5537: LD_INT 1
5539: PPUSH
5540: LD_LOC 2
5544: PUSH
5545: LD_VAR 0 2
5549: ARRAY
5550: PUSH
5551: LD_VAR 0 9
5555: ARRAY
5556: PPUSH
5557: LD_INT 1
5559: PPUSH
5560: CALL_OW 260
5564: PPUSH
5565: CALL_OW 239
// end ; if building then
5569: LD_VAR 0 6
5573: IFFALSE 5591
// PlaceHumanInUnit ( un , building ) else
5575: LD_VAR 0 10
5579: PPUSH
5580: LD_VAR 0 6
5584: PPUSH
5585: CALL_OW 52
5589: GO 5618
// PlaceUnitXYR ( un , x , y , r , false ) ;
5591: LD_VAR 0 10
5595: PPUSH
5596: LD_VAR 0 3
5600: PPUSH
5601: LD_VAR 0 4
5605: PPUSH
5606: LD_VAR 0 5
5610: PPUSH
5611: LD_INT 0
5613: PPUSH
5614: CALL_OW 50
// result := result ^ [ un ] ;
5618: LD_ADDR_VAR 0 7
5622: PUSH
5623: LD_VAR 0 7
5627: PUSH
5628: LD_VAR 0 10
5632: PUSH
5633: EMPTY
5634: LIST
5635: ADD
5636: ST_TO_ADDR
// end ;
5637: GO 5220
5639: POP
5640: POP
// if not global_defined then
5641: LD_LOC 3
5645: NOT
5646: IFFALSE 5724
// if ( global_units >= cl ) then
5648: LD_LOC 2
5652: PUSH
5653: LD_VAR 0 2
5657: GREATEREQUAL
5658: IFFALSE 5699
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
5660: LD_ADDR_LOC 2
5664: PUSH
5665: LD_LOC 2
5669: PPUSH
5670: LD_VAR 0 2
5674: PPUSH
5675: LD_LOC 2
5679: PUSH
5680: LD_VAR 0 2
5684: ARRAY
5685: PUSH
5686: LD_VAR 0 7
5690: ADD
5691: PPUSH
5692: CALL_OW 1
5696: ST_TO_ADDR
5697: GO 5724
// global_units := Replace ( global_units , cl , result ) ;
5699: LD_ADDR_LOC 2
5703: PUSH
5704: LD_LOC 2
5708: PPUSH
5709: LD_VAR 0 2
5713: PPUSH
5714: LD_VAR 0 7
5718: PPUSH
5719: CALL_OW 1
5723: ST_TO_ADDR
// if commander then
5724: LD_LOC 1
5728: IFFALSE 5775
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
5730: LD_ADDR_EXP 57
5734: PUSH
5735: LD_EXP 57
5739: PPUSH
5740: LD_OWVAR 20
5744: PPUSH
5745: LD_EXP 57
5749: PUSH
5750: LD_OWVAR 20
5754: ARRAY
5755: PUSH
5756: LD_VAR 0 10
5760: ADD
5761: PPUSH
5762: CALL_OW 1
5766: ST_TO_ADDR
// commander := false ;
5767: LD_ADDR_LOC 1
5771: PUSH
5772: LD_INT 0
5774: ST_TO_ADDR
// end ; end ;
5775: LD_VAR 0 7
5779: RET
// function prepare_side_base ( side , base ) ; var pos , x , y , dir , i , r , un , br , dep , lab , fact , arm , mode , coord , max ; begin
5780: LD_INT 0
5782: PPUSH
5783: PPUSH
5784: PPUSH
5785: PPUSH
5786: PPUSH
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
5796: PPUSH
5797: PPUSH
// pos := Side_Positions [ side ] ;
5798: LD_ADDR_VAR 0 4
5802: PUSH
5803: LD_EXP 43
5807: PUSH
5808: LD_VAR 0 1
5812: ARRAY
5813: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
5814: LD_ADDR_OWVAR 21
5818: PUSH
5819: LD_EXP 44
5823: PUSH
5824: LD_VAR 0 1
5828: ARRAY
5829: ST_TO_ADDR
// uc_side := side ;
5830: LD_ADDR_OWVAR 20
5834: PUSH
5835: LD_VAR 0 1
5839: ST_TO_ADDR
// x := depots_def [ pos ] [ base ] [ 1 ] ;
5840: LD_ADDR_VAR 0 5
5844: PUSH
5845: LD_EXP 50
5849: PUSH
5850: LD_VAR 0 4
5854: ARRAY
5855: PUSH
5856: LD_VAR 0 2
5860: ARRAY
5861: PUSH
5862: LD_INT 1
5864: ARRAY
5865: ST_TO_ADDR
// y := depots_def [ pos ] [ base ] [ 2 ] ;
5866: LD_ADDR_VAR 0 6
5870: PUSH
5871: LD_EXP 50
5875: PUSH
5876: LD_VAR 0 4
5880: ARRAY
5881: PUSH
5882: LD_VAR 0 2
5886: ARRAY
5887: PUSH
5888: LD_INT 2
5890: ARRAY
5891: ST_TO_ADDR
// dir := depots_def [ pos ] [ base ] [ 3 ] ;
5892: LD_ADDR_VAR 0 7
5896: PUSH
5897: LD_EXP 50
5901: PUSH
5902: LD_VAR 0 4
5906: ARRAY
5907: PUSH
5908: LD_VAR 0 2
5912: ARRAY
5913: PUSH
5914: LD_INT 3
5916: ARRAY
5917: ST_TO_ADDR
// if is_depot [ base ] then
5918: LD_EXP 20
5922: PUSH
5923: LD_VAR 0 2
5927: ARRAY
5928: IFFALSE 6105
// begin if is_depot [ base ] = 1 then
5930: LD_EXP 20
5934: PUSH
5935: LD_VAR 0 2
5939: ARRAY
5940: PUSH
5941: LD_INT 1
5943: EQUAL
5944: IFFALSE 5956
// bc_type = b_depot else
5946: LD_ADDR_OWVAR 42
5950: PUSH
5951: LD_INT 0
5953: ST_TO_ADDR
5954: GO 5964
// bc_type = b_warehouse ;
5956: LD_ADDR_OWVAR 42
5960: PUSH
5961: LD_INT 1
5963: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
5964: LD_ADDR_VAR 0 12
5968: PUSH
5969: LD_VAR 0 5
5973: PPUSH
5974: LD_VAR 0 6
5978: PPUSH
5979: LD_VAR 0 7
5983: PPUSH
5984: CALL_OW 47
5988: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
5989: LD_VAR 0 12
5993: PPUSH
5994: LD_STRING @
5996: PUSH
5997: LD_VAR 0 1
6001: STR
6002: PPUSH
6003: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ base ] [ mat_cans ] ) ;
6007: LD_VAR 0 12
6011: PPUSH
6012: CALL_OW 274
6016: PPUSH
6017: LD_INT 1
6019: PPUSH
6020: LD_EXP 31
6024: PUSH
6025: LD_VAR 0 2
6029: ARRAY
6030: PUSH
6031: LD_INT 1
6033: ARRAY
6034: PPUSH
6035: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ base ] [ mat_oil ] ) ;
6039: LD_VAR 0 12
6043: PPUSH
6044: CALL_OW 274
6048: PPUSH
6049: LD_INT 2
6051: PPUSH
6052: LD_EXP 31
6056: PUSH
6057: LD_VAR 0 2
6061: ARRAY
6062: PUSH
6063: LD_INT 2
6065: ARRAY
6066: PPUSH
6067: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ base ] [ mat_siberit ] ) ;
6071: LD_VAR 0 12
6075: PPUSH
6076: CALL_OW 274
6080: PPUSH
6081: LD_INT 3
6083: PPUSH
6084: LD_EXP 31
6088: PUSH
6089: LD_VAR 0 2
6093: ARRAY
6094: PUSH
6095: LD_INT 3
6097: ARRAY
6098: PPUSH
6099: CALL_OW 277
// end else
6103: GO 6255
// begin for i := 1 to 3 do
6105: LD_ADDR_VAR 0 8
6109: PUSH
6110: DOUBLE
6111: LD_INT 1
6113: DEC
6114: ST_TO_ADDR
6115: LD_INT 3
6117: PUSH
6118: FOR_TO
6119: IFFALSE 6253
// begin r := starting_resources [ base ] [ i ] ;
6121: LD_ADDR_VAR 0 9
6125: PUSH
6126: LD_EXP 31
6130: PUSH
6131: LD_VAR 0 2
6135: ARRAY
6136: PUSH
6137: LD_VAR 0 8
6141: ARRAY
6142: ST_TO_ADDR
// while r >= 10 do
6143: LD_VAR 0 9
6147: PUSH
6148: LD_INT 10
6150: GREATEREQUAL
6151: IFFALSE 6251
// if r > 50 then
6153: LD_VAR 0 9
6157: PUSH
6158: LD_INT 50
6160: GREATER
6161: IFFALSE 6207
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
6163: LD_VAR 0 8
6167: PPUSH
6168: LD_INT 5
6170: PPUSH
6171: LD_VAR 0 5
6175: PPUSH
6176: LD_VAR 0 6
6180: PPUSH
6181: LD_INT 4
6183: PPUSH
6184: LD_INT 0
6186: PPUSH
6187: CALL_OW 60
// r := r - 50 ;
6191: LD_ADDR_VAR 0 9
6195: PUSH
6196: LD_VAR 0 9
6200: PUSH
6201: LD_INT 50
6203: MINUS
6204: ST_TO_ADDR
// end else
6205: GO 6249
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
6207: LD_VAR 0 8
6211: PPUSH
6212: LD_VAR 0 9
6216: PUSH
6217: LD_INT 10
6219: DIV
6220: PPUSH
6221: LD_VAR 0 5
6225: PPUSH
6226: LD_VAR 0 6
6230: PPUSH
6231: LD_INT 4
6233: PPUSH
6234: LD_INT 0
6236: PPUSH
6237: CALL_OW 60
// r := 0 ;
6241: LD_ADDR_VAR 0 9
6245: PUSH
6246: LD_INT 0
6248: ST_TO_ADDR
// end ;
6249: GO 6143
// end ;
6251: GO 6118
6253: POP
6254: POP
// end ; if is_lab [ base ] then
6255: LD_EXP 24
6259: PUSH
6260: LD_VAR 0 2
6264: ARRAY
6265: IFFALSE 6406
// begin if is_lab [ base ] = 1 then
6267: LD_EXP 24
6271: PUSH
6272: LD_VAR 0 2
6276: ARRAY
6277: PUSH
6278: LD_INT 1
6280: EQUAL
6281: IFFALSE 6309
// begin bc_type = b_lab ;
6283: LD_ADDR_OWVAR 42
6287: PUSH
6288: LD_INT 6
6290: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
6291: LD_ADDR_OWVAR 44
6295: PUSH
6296: LD_INT 9
6298: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
6299: LD_ADDR_OWVAR 45
6303: PUSH
6304: LD_INT 9
6306: ST_TO_ADDR
// end else
6307: GO 6333
// begin bc_type = b_lab_full ;
6309: LD_ADDR_OWVAR 42
6313: PUSH
6314: LD_INT 8
6316: ST_TO_ADDR
// bc_kind1 = b_lab_siberium ;
6317: LD_ADDR_OWVAR 44
6321: PUSH
6322: LD_INT 11
6324: ST_TO_ADDR
// bc_kind2 = b_lab_weapon ;
6325: LD_ADDR_OWVAR 45
6329: PUSH
6330: LD_INT 10
6332: ST_TO_ADDR
// end ; lab := CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ base ] [ 1 ] , labs_def [ pos ] [ base ] [ 2 ] , labs_def [ pos ] [ base ] [ 3 ] ) ;
6333: LD_ADDR_VAR 0 13
6337: PUSH
6338: LD_EXP 52
6342: PUSH
6343: LD_VAR 0 4
6347: ARRAY
6348: PUSH
6349: LD_VAR 0 2
6353: ARRAY
6354: PUSH
6355: LD_INT 1
6357: ARRAY
6358: PPUSH
6359: LD_EXP 52
6363: PUSH
6364: LD_VAR 0 4
6368: ARRAY
6369: PUSH
6370: LD_VAR 0 2
6374: ARRAY
6375: PUSH
6376: LD_INT 2
6378: ARRAY
6379: PPUSH
6380: LD_EXP 52
6384: PUSH
6385: LD_VAR 0 4
6389: ARRAY
6390: PUSH
6391: LD_VAR 0 2
6395: ARRAY
6396: PUSH
6397: LD_INT 3
6399: ARRAY
6400: PPUSH
6401: CALL_OW 47
6405: ST_TO_ADDR
// end ; if is_fact [ base ] then
6406: LD_EXP 25
6410: PUSH
6411: LD_VAR 0 2
6415: ARRAY
6416: IFFALSE 6525
// begin if is_fact [ base ] = 1 then
6418: LD_EXP 25
6422: PUSH
6423: LD_VAR 0 2
6427: ARRAY
6428: PUSH
6429: LD_INT 1
6431: EQUAL
6432: IFFALSE 6444
// bc_type = b_workshop else
6434: LD_ADDR_OWVAR 42
6438: PUSH
6439: LD_INT 2
6441: ST_TO_ADDR
6442: GO 6452
// bc_type = b_factory ;
6444: LD_ADDR_OWVAR 42
6448: PUSH
6449: LD_INT 3
6451: ST_TO_ADDR
// fact := CreateAndPlaceBuildingXYD ( factories_def [ pos ] [ base ] [ 1 ] , factories_def [ pos ] [ base ] [ 2 ] , factories_def [ pos ] [ base ] [ 3 ] ) ;
6452: LD_ADDR_VAR 0 14
6456: PUSH
6457: LD_EXP 53
6461: PUSH
6462: LD_VAR 0 4
6466: ARRAY
6467: PUSH
6468: LD_VAR 0 2
6472: ARRAY
6473: PUSH
6474: LD_INT 1
6476: ARRAY
6477: PPUSH
6478: LD_EXP 53
6482: PUSH
6483: LD_VAR 0 4
6487: ARRAY
6488: PUSH
6489: LD_VAR 0 2
6493: ARRAY
6494: PUSH
6495: LD_INT 2
6497: ARRAY
6498: PPUSH
6499: LD_EXP 53
6503: PUSH
6504: LD_VAR 0 4
6508: ARRAY
6509: PUSH
6510: LD_VAR 0 2
6514: ARRAY
6515: PUSH
6516: LD_INT 3
6518: ARRAY
6519: PPUSH
6520: CALL_OW 47
6524: ST_TO_ADDR
// end ; if is_arm [ base ] then
6525: LD_EXP 26
6529: PUSH
6530: LD_VAR 0 2
6534: ARRAY
6535: IFFALSE 6644
// begin if is_arm [ base ] = 1 then
6537: LD_EXP 26
6541: PUSH
6542: LD_VAR 0 2
6546: ARRAY
6547: PUSH
6548: LD_INT 1
6550: EQUAL
6551: IFFALSE 6563
// bc_type = b_armoury else
6553: LD_ADDR_OWVAR 42
6557: PUSH
6558: LD_INT 4
6560: ST_TO_ADDR
6561: GO 6571
// bc_type = b_barracks ;
6563: LD_ADDR_OWVAR 42
6567: PUSH
6568: LD_INT 5
6570: ST_TO_ADDR
// arm := CreateAndPlaceBuildingXYD ( armories_def [ pos ] [ base ] [ 1 ] , armories_def [ pos ] [ base ] [ 2 ] , armories_def [ pos ] [ base ] [ 3 ] ) ;
6571: LD_ADDR_VAR 0 15
6575: PUSH
6576: LD_EXP 54
6580: PUSH
6581: LD_VAR 0 4
6585: ARRAY
6586: PUSH
6587: LD_VAR 0 2
6591: ARRAY
6592: PUSH
6593: LD_INT 1
6595: ARRAY
6596: PPUSH
6597: LD_EXP 54
6601: PUSH
6602: LD_VAR 0 4
6606: ARRAY
6607: PUSH
6608: LD_VAR 0 2
6612: ARRAY
6613: PUSH
6614: LD_INT 2
6616: ARRAY
6617: PPUSH
6618: LD_EXP 54
6622: PUSH
6623: LD_VAR 0 4
6627: ARRAY
6628: PUSH
6629: LD_VAR 0 2
6633: ARRAY
6634: PUSH
6635: LD_INT 3
6637: ARRAY
6638: PPUSH
6639: CALL_OW 47
6643: ST_TO_ADDR
// end ; for i := 1 to number_of_pplants [ base ] do
6644: LD_ADDR_VAR 0 8
6648: PUSH
6649: DOUBLE
6650: LD_INT 1
6652: DEC
6653: ST_TO_ADDR
6654: LD_EXP 22
6658: PUSH
6659: LD_VAR 0 2
6663: ARRAY
6664: PUSH
6665: FOR_TO
6666: IFFALSE 6763
// begin bc_type = b_oil_power ;
6668: LD_ADDR_OWVAR 42
6672: PUSH
6673: LD_INT 26
6675: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( pplants_def [ pos ] [ base ] [ i ] [ 1 ] , pplants_def [ pos ] [ base ] [ i ] [ 2 ] , pplants_def [ pos ] [ base ] [ i ] [ 3 ] ) ;
6676: LD_EXP 55
6680: PUSH
6681: LD_VAR 0 4
6685: ARRAY
6686: PUSH
6687: LD_VAR 0 2
6691: ARRAY
6692: PUSH
6693: LD_VAR 0 8
6697: ARRAY
6698: PUSH
6699: LD_INT 1
6701: ARRAY
6702: PPUSH
6703: LD_EXP 55
6707: PUSH
6708: LD_VAR 0 4
6712: ARRAY
6713: PUSH
6714: LD_VAR 0 2
6718: ARRAY
6719: PUSH
6720: LD_VAR 0 8
6724: ARRAY
6725: PUSH
6726: LD_INT 2
6728: ARRAY
6729: PPUSH
6730: LD_EXP 55
6734: PUSH
6735: LD_VAR 0 4
6739: ARRAY
6740: PUSH
6741: LD_VAR 0 2
6745: ARRAY
6746: PUSH
6747: LD_VAR 0 8
6751: ARRAY
6752: PUSH
6753: LD_INT 3
6755: ARRAY
6756: PPUSH
6757: CALL_OW 47
// end ;
6761: GO 6665
6763: POP
6764: POP
// for i := 1 to deposits [ base ] [ 1 ] do
6765: LD_ADDR_VAR 0 8
6769: PUSH
6770: DOUBLE
6771: LD_INT 1
6773: DEC
6774: ST_TO_ADDR
6775: LD_EXP 28
6779: PUSH
6780: LD_VAR 0 2
6784: ARRAY
6785: PUSH
6786: LD_INT 1
6788: ARRAY
6789: PUSH
6790: FOR_TO
6791: IFFALSE 6928
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i ] , false ) ;
6793: LD_ADDR_VAR 0 17
6797: PUSH
6798: LD_EXP 56
6802: PUSH
6803: LD_VAR 0 4
6807: ARRAY
6808: PUSH
6809: LD_VAR 0 2
6813: ARRAY
6814: PUSH
6815: LD_VAR 0 8
6819: ARRAY
6820: PPUSH
6821: LD_INT 0
6823: PPUSH
6824: CALL_OW 16
6828: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_oil ) ;
6829: LD_VAR 0 17
6833: PUSH
6834: LD_INT 1
6836: ARRAY
6837: PPUSH
6838: LD_VAR 0 17
6842: PUSH
6843: LD_INT 2
6845: ARRAY
6846: PPUSH
6847: LD_INT 2
6849: PPUSH
6850: CALL_OW 62
// if are_mines [ base ] then
6854: LD_EXP 23
6858: PUSH
6859: LD_VAR 0 2
6863: ARRAY
6864: IFFALSE 6926
// begin bc_type = b_oil_mine ;
6866: LD_ADDR_OWVAR 42
6870: PUSH
6871: LD_INT 29
6873: ST_TO_ADDR
// SetResourceVisibility ( coord [ 1 ] , coord [ 2 ] , uc_side ) ;
6874: LD_VAR 0 17
6878: PUSH
6879: LD_INT 1
6881: ARRAY
6882: PPUSH
6883: LD_VAR 0 17
6887: PUSH
6888: LD_INT 2
6890: ARRAY
6891: PPUSH
6892: LD_OWVAR 20
6896: PPUSH
6897: CALL_OW 441
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
6901: LD_VAR 0 17
6905: PUSH
6906: LD_INT 1
6908: ARRAY
6909: PPUSH
6910: LD_VAR 0 17
6914: PUSH
6915: LD_INT 2
6917: ARRAY
6918: PPUSH
6919: LD_INT 0
6921: PPUSH
6922: CALL_OW 47
// end ; end ;
6926: GO 6790
6928: POP
6929: POP
// for i := 1 to deposits [ base ] [ 2 ] do
6930: LD_ADDR_VAR 0 8
6934: PUSH
6935: DOUBLE
6936: LD_INT 1
6938: DEC
6939: ST_TO_ADDR
6940: LD_EXP 28
6944: PUSH
6945: LD_VAR 0 2
6949: ARRAY
6950: PUSH
6951: LD_INT 2
6953: ARRAY
6954: PUSH
6955: FOR_TO
6956: IFFALSE 7115
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i + deposits [ base ] [ 1 ] ] , false ) ;
6958: LD_ADDR_VAR 0 17
6962: PUSH
6963: LD_EXP 56
6967: PUSH
6968: LD_VAR 0 4
6972: ARRAY
6973: PUSH
6974: LD_VAR 0 2
6978: ARRAY
6979: PUSH
6980: LD_VAR 0 8
6984: PUSH
6985: LD_EXP 28
6989: PUSH
6990: LD_VAR 0 2
6994: ARRAY
6995: PUSH
6996: LD_INT 1
6998: ARRAY
6999: PLUS
7000: ARRAY
7001: PPUSH
7002: LD_INT 0
7004: PPUSH
7005: CALL_OW 16
7009: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_siberit ) ;
7010: LD_VAR 0 17
7014: PUSH
7015: LD_INT 1
7017: ARRAY
7018: PPUSH
7019: LD_VAR 0 17
7023: PUSH
7024: LD_INT 2
7026: ARRAY
7027: PPUSH
7028: LD_INT 3
7030: PPUSH
7031: CALL_OW 62
// if are_mines [ base ] and def_siberite_detection then
7035: LD_EXP 23
7039: PUSH
7040: LD_VAR 0 2
7044: ARRAY
7045: PUSH
7046: LD_EXP 8
7050: AND
7051: IFFALSE 7113
// begin bc_type = b_siberite_mine ;
7053: LD_ADDR_OWVAR 42
7057: PUSH
7058: LD_INT 30
7060: ST_TO_ADDR
// SetResourceVisibility ( coord [ 1 ] , coord [ 2 ] , uc_side ) ;
7061: LD_VAR 0 17
7065: PUSH
7066: LD_INT 1
7068: ARRAY
7069: PPUSH
7070: LD_VAR 0 17
7074: PUSH
7075: LD_INT 2
7077: ARRAY
7078: PPUSH
7079: LD_OWVAR 20
7083: PPUSH
7084: CALL_OW 441
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
7088: LD_VAR 0 17
7092: PUSH
7093: LD_INT 1
7095: ARRAY
7096: PPUSH
7097: LD_VAR 0 17
7101: PUSH
7102: LD_INT 2
7104: ARRAY
7105: PPUSH
7106: LD_INT 0
7108: PPUSH
7109: CALL_OW 47
// end ; end ;
7113: GO 6955
7115: POP
7116: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
7117: LD_ADDR_VAR 0 5
7121: PUSH
7122: LD_EXP 49
7126: PUSH
7127: LD_VAR 0 4
7131: ARRAY
7132: PUSH
7133: LD_VAR 0 2
7137: ARRAY
7138: PUSH
7139: LD_INT 1
7141: ARRAY
7142: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
7143: LD_ADDR_VAR 0 6
7147: PUSH
7148: LD_EXP 49
7152: PUSH
7153: LD_VAR 0 4
7157: ARRAY
7158: PUSH
7159: LD_VAR 0 2
7163: ARRAY
7164: PUSH
7165: LD_INT 2
7167: ARRAY
7168: ST_TO_ADDR
// if base = 1 then
7169: LD_VAR 0 2
7173: PUSH
7174: LD_INT 1
7176: EQUAL
7177: IFFALSE 7285
// if def_morale_flags then
7179: LD_EXP 14
7183: IFFALSE 7285
// SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , def_bf_params [ 1 ] ] , [ bfo_defend_bonus_vehicle , def_bf_params [ 2 ] ] , [ bfo_defend_bonus_building , def_bf_params [ 3 ] ] , [ bfo_range , 17 ] , [ bfo_height , def_bf_params [ 4 ] ] ] ) ;
7185: LD_VAR 0 1
7189: PPUSH
7190: LD_VAR 0 5
7194: PPUSH
7195: LD_VAR 0 6
7199: PPUSH
7200: LD_INT 1
7202: PUSH
7203: LD_EXP 36
7207: PUSH
7208: LD_INT 1
7210: ARRAY
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: LD_INT 2
7218: PUSH
7219: LD_EXP 36
7223: PUSH
7224: LD_INT 2
7226: ARRAY
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: LD_INT 3
7234: PUSH
7235: LD_EXP 36
7239: PUSH
7240: LD_INT 3
7242: ARRAY
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PUSH
7248: LD_INT 10
7250: PUSH
7251: LD_INT 17
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PUSH
7258: LD_INT 20
7260: PUSH
7261: LD_EXP 36
7265: PUSH
7266: LD_INT 4
7268: ARRAY
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: PPUSH
7281: CALL_OW 418
// if number_of_people [ base ] then
7285: LD_EXP 21
7289: PUSH
7290: LD_VAR 0 2
7294: ARRAY
7295: IFFALSE 7504
// begin if No_Mechs then
7297: LD_EXP 61
7301: IFFALSE 7313
// Mode := 2 else
7303: LD_ADDR_VAR 0 16
7307: PUSH
7308: LD_INT 2
7310: ST_TO_ADDR
7311: GO 7321
// Mode := 1 ;
7313: LD_ADDR_VAR 0 16
7317: PUSH
7318: LD_INT 1
7320: ST_TO_ADDR
// neng := number_of_people [ base ] ;
7321: LD_ADDR_LOC 5
7325: PUSH
7326: LD_EXP 21
7330: PUSH
7331: LD_VAR 0 2
7335: ARRAY
7336: ST_TO_ADDR
// nmech := neng div [ 4 , 3 ] [ Mode ] ;
7337: LD_ADDR_LOC 7
7341: PUSH
7342: LD_LOC 5
7346: PUSH
7347: LD_INT 4
7349: PUSH
7350: LD_INT 3
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: PUSH
7357: LD_VAR 0 16
7361: ARRAY
7362: DIV
7363: ST_TO_ADDR
// neng := neng - nmech ;
7364: LD_ADDR_LOC 5
7368: PUSH
7369: LD_LOC 5
7373: PUSH
7374: LD_LOC 7
7378: MINUS
7379: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
7380: LD_ADDR_LOC 6
7384: PUSH
7385: LD_LOC 5
7389: PUSH
7390: LD_INT 3
7392: PUSH
7393: LD_INT 2
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: PUSH
7400: LD_VAR 0 16
7404: ARRAY
7405: DIV
7406: ST_TO_ADDR
// if ( nsci < 1 ) then
7407: LD_LOC 6
7411: PUSH
7412: LD_INT 1
7414: LESS
7415: IFFALSE 7425
// nsci := 1 ;
7417: LD_ADDR_LOC 6
7421: PUSH
7422: LD_INT 1
7424: ST_TO_ADDR
// neng := neng - nsci ;
7425: LD_ADDR_LOC 5
7429: PUSH
7430: LD_LOC 5
7434: PUSH
7435: LD_LOC 6
7439: MINUS
7440: ST_TO_ADDR
// nsol := [ neng div 2 , 0 ] [ Mode ] ;
7441: LD_ADDR_LOC 8
7445: PUSH
7446: LD_LOC 5
7450: PUSH
7451: LD_INT 2
7453: DIV
7454: PUSH
7455: LD_INT 0
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: LD_VAR 0 16
7466: ARRAY
7467: ST_TO_ADDR
// neng := neng - nsol ;
7468: LD_ADDR_LOC 5
7472: PUSH
7473: LD_LOC 5
7477: PUSH
7478: LD_LOC 8
7482: MINUS
7483: ST_TO_ADDR
// if ( neng < 1 ) then
7484: LD_LOC 5
7488: PUSH
7489: LD_INT 1
7491: LESS
7492: IFFALSE 7502
// neng := 1 ;
7494: LD_ADDR_LOC 5
7498: PUSH
7499: LD_INT 1
7501: ST_TO_ADDR
// end else
7502: GO 7536
// begin neng := 0 ;
7504: LD_ADDR_LOC 5
7508: PUSH
7509: LD_INT 0
7511: ST_TO_ADDR
// nsci := 0 ;
7512: LD_ADDR_LOC 6
7516: PUSH
7517: LD_INT 0
7519: ST_TO_ADDR
// nmech := 0 ;
7520: LD_ADDR_LOC 7
7524: PUSH
7525: LD_INT 0
7527: ST_TO_ADDR
// nsol := 0 ;
7528: LD_ADDR_LOC 8
7532: PUSH
7533: LD_INT 0
7535: ST_TO_ADDR
// end ; commander := true ;
7536: LD_ADDR_LOC 1
7540: PUSH
7541: LD_INT 1
7543: ST_TO_ADDR
// soldiers_created := 0 ;
7544: LD_ADDR_LOC 4
7548: PUSH
7549: LD_INT 0
7551: ST_TO_ADDR
// for i := 1 to are_breastworks [ base ] do
7552: LD_ADDR_VAR 0 8
7556: PUSH
7557: DOUBLE
7558: LD_INT 1
7560: DEC
7561: ST_TO_ADDR
7562: LD_EXP 27
7566: PUSH
7567: LD_VAR 0 2
7571: ARRAY
7572: PUSH
7573: FOR_TO
7574: IFFALSE 7860
// begin if are_breastworks [ base ] [ i ] = 1 then
7576: LD_EXP 27
7580: PUSH
7581: LD_VAR 0 2
7585: ARRAY
7586: PUSH
7587: LD_VAR 0 8
7591: ARRAY
7592: PUSH
7593: LD_INT 1
7595: EQUAL
7596: IFFALSE 7608
// bc_type := b_breastwork else
7598: LD_ADDR_OWVAR 42
7602: PUSH
7603: LD_INT 31
7605: ST_TO_ADDR
7606: GO 7616
// bc_type := b_bunker ;
7608: LD_ADDR_OWVAR 42
7612: PUSH
7613: LD_INT 32
7615: ST_TO_ADDR
// x := breastworks_def [ pos ] [ base ] [ i ] [ 1 ] ;
7616: LD_ADDR_VAR 0 5
7620: PUSH
7621: LD_EXP 51
7625: PUSH
7626: LD_VAR 0 4
7630: ARRAY
7631: PUSH
7632: LD_VAR 0 2
7636: ARRAY
7637: PUSH
7638: LD_VAR 0 8
7642: ARRAY
7643: PUSH
7644: LD_INT 1
7646: ARRAY
7647: ST_TO_ADDR
// y := breastworks_def [ pos ] [ base ] [ i ] [ 2 ] ;
7648: LD_ADDR_VAR 0 6
7652: PUSH
7653: LD_EXP 51
7657: PUSH
7658: LD_VAR 0 4
7662: ARRAY
7663: PUSH
7664: LD_VAR 0 2
7668: ARRAY
7669: PUSH
7670: LD_VAR 0 8
7674: ARRAY
7675: PUSH
7676: LD_INT 2
7678: ARRAY
7679: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ base ] [ i ] [ 3 ] ;
7680: LD_ADDR_VAR 0 7
7684: PUSH
7685: LD_EXP 51
7689: PUSH
7690: LD_VAR 0 4
7694: ARRAY
7695: PUSH
7696: LD_VAR 0 2
7700: ARRAY
7701: PUSH
7702: LD_VAR 0 8
7706: ARRAY
7707: PUSH
7708: LD_INT 3
7710: ARRAY
7711: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
7712: LD_ADDR_VAR 0 11
7716: PUSH
7717: LD_VAR 0 5
7721: PPUSH
7722: LD_VAR 0 6
7726: PPUSH
7727: LD_VAR 0 7
7731: PPUSH
7732: CALL_OW 47
7736: ST_TO_ADDR
// if bc_type = b_bunker then
7737: LD_OWVAR 42
7741: PUSH
7742: LD_INT 32
7744: EQUAL
7745: IFFALSE 7822
// case uc_nation of nation_american :
7747: LD_OWVAR 21
7751: PUSH
7752: LD_INT 1
7754: DOUBLE
7755: EQUAL
7756: IFTRUE 7760
7758: GO 7775
7760: POP
// PlaceWeaponTurret ( br , us_machine_gun ) ; nation_arabian :
7761: LD_VAR 0 11
7765: PPUSH
7766: LD_INT 2
7768: PPUSH
7769: CALL_OW 431
7773: GO 7822
7775: LD_INT 2
7777: DOUBLE
7778: EQUAL
7779: IFTRUE 7783
7781: GO 7798
7783: POP
// PlaceWeaponTurret ( br , ar_double_machine_gun ) ; nation_russian :
7784: LD_VAR 0 11
7788: PPUSH
7789: LD_INT 24
7791: PPUSH
7792: CALL_OW 431
7796: GO 7822
7798: LD_INT 3
7800: DOUBLE
7801: EQUAL
7802: IFTRUE 7806
7804: GO 7821
7806: POP
// PlaceWeaponTurret ( br , ru_heavy_machine_gun ) ; end ;
7807: LD_VAR 0 11
7811: PPUSH
7812: LD_INT 42
7814: PPUSH
7815: CALL_OW 431
7819: GO 7822
7821: POP
// if i <= nsol then
7822: LD_VAR 0 8
7826: PUSH
7827: LD_LOC 8
7831: LESSEQUAL
7832: IFFALSE 7858
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
7834: LD_INT 1
7836: PPUSH
7837: LD_INT 1
7839: PPUSH
7840: LD_INT 0
7842: PPUSH
7843: LD_INT 0
7845: PPUSH
7846: LD_INT 0
7848: PPUSH
7849: LD_VAR 0 11
7853: PPUSH
7854: CALL 5192 0 6
// end ;
7858: GO 7573
7860: POP
7861: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
7862: LD_ADDR_VAR 0 5
7866: PUSH
7867: LD_EXP 49
7871: PUSH
7872: LD_VAR 0 4
7876: ARRAY
7877: PUSH
7878: LD_VAR 0 2
7882: ARRAY
7883: PUSH
7884: LD_INT 1
7886: ARRAY
7887: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
7888: LD_ADDR_VAR 0 6
7892: PUSH
7893: LD_EXP 49
7897: PUSH
7898: LD_VAR 0 4
7902: ARRAY
7903: PUSH
7904: LD_VAR 0 2
7908: ARRAY
7909: PUSH
7910: LD_INT 2
7912: ARRAY
7913: ST_TO_ADDR
// if nsol > are_breastworks [ base ] then
7914: LD_LOC 8
7918: PUSH
7919: LD_EXP 27
7923: PUSH
7924: LD_VAR 0 2
7928: ARRAY
7929: GREATER
7930: IFFALSE 8018
// if arm then
7932: LD_VAR 0 15
7936: IFFALSE 7978
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , 0 , 0 , 0 , arm ) else
7938: LD_LOC 8
7942: PUSH
7943: LD_EXP 27
7947: PUSH
7948: LD_VAR 0 2
7952: ARRAY
7953: MINUS
7954: PPUSH
7955: LD_INT 1
7957: PPUSH
7958: LD_INT 0
7960: PPUSH
7961: LD_INT 0
7963: PPUSH
7964: LD_INT 0
7966: PPUSH
7967: LD_VAR 0 15
7971: PPUSH
7972: CALL 5192 0 6
7976: GO 8018
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , x , y , 5 , 0 ) ;
7978: LD_LOC 8
7982: PUSH
7983: LD_EXP 27
7987: PUSH
7988: LD_VAR 0 2
7992: ARRAY
7993: MINUS
7994: PPUSH
7995: LD_INT 1
7997: PPUSH
7998: LD_VAR 0 5
8002: PPUSH
8003: LD_VAR 0 6
8007: PPUSH
8008: LD_INT 5
8010: PPUSH
8011: LD_INT 0
8013: PPUSH
8014: CALL 5192 0 6
// if dep then
8018: LD_VAR 0 12
8022: IFFALSE 8052
// prepare_people ( neng , class_engineer , 0 , 0 , 0 , dep ) else
8024: LD_LOC 5
8028: PPUSH
8029: LD_INT 2
8031: PPUSH
8032: LD_INT 0
8034: PPUSH
8035: LD_INT 0
8037: PPUSH
8038: LD_INT 0
8040: PPUSH
8041: LD_VAR 0 12
8045: PPUSH
8046: CALL 5192 0 6
8050: GO 8080
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
8052: LD_LOC 5
8056: PPUSH
8057: LD_INT 2
8059: PPUSH
8060: LD_VAR 0 5
8064: PPUSH
8065: LD_VAR 0 6
8069: PPUSH
8070: LD_INT 5
8072: PPUSH
8073: LD_INT 0
8075: PPUSH
8076: CALL 5192 0 6
// if fact then
8080: LD_VAR 0 14
8084: IFFALSE 8114
// prepare_people ( nmech , class_mechanic , 0 , 0 , 0 , fact ) else
8086: LD_LOC 7
8090: PPUSH
8091: LD_INT 3
8093: PPUSH
8094: LD_INT 0
8096: PPUSH
8097: LD_INT 0
8099: PPUSH
8100: LD_INT 0
8102: PPUSH
8103: LD_VAR 0 14
8107: PPUSH
8108: CALL 5192 0 6
8112: GO 8142
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
8114: LD_LOC 7
8118: PPUSH
8119: LD_INT 3
8121: PPUSH
8122: LD_VAR 0 5
8126: PPUSH
8127: LD_VAR 0 6
8131: PPUSH
8132: LD_INT 5
8134: PPUSH
8135: LD_INT 0
8137: PPUSH
8138: CALL 5192 0 6
// if lab then
8142: LD_VAR 0 13
8146: IFFALSE 8176
// prepare_people ( nsci , class_scientistic , 0 , 0 , 0 , lab ) else
8148: LD_LOC 6
8152: PPUSH
8153: LD_INT 4
8155: PPUSH
8156: LD_INT 0
8158: PPUSH
8159: LD_INT 0
8161: PPUSH
8162: LD_INT 0
8164: PPUSH
8165: LD_VAR 0 13
8169: PPUSH
8170: CALL 5192 0 6
8174: GO 8204
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
8176: LD_LOC 6
8180: PPUSH
8181: LD_INT 4
8183: PPUSH
8184: LD_VAR 0 5
8188: PPUSH
8189: LD_VAR 0 6
8193: PPUSH
8194: LD_INT 5
8196: PPUSH
8197: LD_INT 0
8199: PPUSH
8200: CALL 5192 0 6
// max = 0 ;
8204: LD_ADDR_VAR 0 18
8208: PUSH
8209: LD_INT 0
8211: ST_TO_ADDR
// for un in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
8212: LD_ADDR_VAR 0 10
8216: PUSH
8217: LD_INT 22
8219: PUSH
8220: LD_VAR 0 1
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PUSH
8229: LD_INT 21
8231: PUSH
8232: LD_INT 1
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: PPUSH
8243: CALL_OW 69
8247: PUSH
8248: FOR_IN
8249: IFFALSE 8291
// begin if GetSkill ( un , skill_engineering ) > max then
8251: LD_VAR 0 10
8255: PPUSH
8256: LD_INT 2
8258: PPUSH
8259: CALL_OW 259
8263: PUSH
8264: LD_VAR 0 18
8268: GREATER
8269: IFFALSE 8289
// max := GetSkill ( un , skill_engineering ) ;
8271: LD_ADDR_VAR 0 18
8275: PUSH
8276: LD_VAR 0 10
8280: PPUSH
8281: LD_INT 2
8283: PPUSH
8284: CALL_OW 259
8288: ST_TO_ADDR
// end ;
8289: GO 8248
8291: POP
8292: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) , max ) ;
8293: LD_INT 22
8295: PUSH
8296: LD_VAR 0 1
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: PUSH
8305: LD_INT 21
8307: PUSH
8308: LD_INT 3
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: PPUSH
8319: CALL_OW 69
8323: PPUSH
8324: LD_VAR 0 18
8328: PPUSH
8329: CALL_OW 241
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
8333: LD_EXP 8
8337: PUSH
8338: LD_INT 20
8340: PPUSH
8341: LD_VAR 0 1
8345: PPUSH
8346: CALL_OW 321
8350: PUSH
8351: LD_INT 1
8353: EQUAL
8354: AND
8355: IFFALSE 8372
// SetTech ( tech_SibDet , side , state_researched ) ;
8357: LD_INT 20
8359: PPUSH
8360: LD_VAR 0 1
8364: PPUSH
8365: LD_INT 2
8367: PPUSH
8368: CALL_OW 322
// if def_siberite_bomb = 1 then
8372: LD_EXP 15
8376: PUSH
8377: LD_INT 1
8379: EQUAL
8380: IFFALSE 8414
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
8382: LD_INT 25
8384: PPUSH
8385: LD_VAR 0 1
8389: PPUSH
8390: LD_INT 1
8392: PPUSH
8393: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
8397: LD_INT 73
8399: PPUSH
8400: LD_VAR 0 1
8404: PPUSH
8405: LD_INT 1
8407: PPUSH
8408: CALL_OW 322
// end else
8412: GO 8444
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
8414: LD_INT 25
8416: PPUSH
8417: LD_VAR 0 1
8421: PPUSH
8422: LD_INT 0
8424: PPUSH
8425: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
8429: LD_INT 73
8431: PPUSH
8432: LD_VAR 0 1
8436: PPUSH
8437: LD_INT 0
8439: PPUSH
8440: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
8444: LD_INT 24
8446: PPUSH
8447: LD_VAR 0 1
8451: PPUSH
8452: LD_INT 0
8454: PPUSH
8455: CALL_OW 322
// global_defined := true ;
8459: LD_ADDR_LOC 3
8463: PUSH
8464: LD_INT 1
8466: ST_TO_ADDR
// end ;
8467: LD_VAR 0 3
8471: RET
// every 0 0$1 do
8472: GO 8474
8474: DISABLE
// if ( def_siberite_bomb > 1 ) then
8475: LD_EXP 15
8479: PUSH
8480: LD_INT 1
8482: GREATER
8483: IFFALSE 8498
// begin wait ( siberite_bomb_Delay ) ;
8485: LD_EXP 38
8489: PPUSH
8490: CALL_OW 67
// EnableSibFiss ;
8494: CALL 8499 0 0
// end ;
8498: END
// function EnableSibFiss ; var i ; begin
8499: LD_INT 0
8501: PPUSH
8502: PPUSH
// for i := 1 to 8 do
8503: LD_ADDR_VAR 0 2
8507: PUSH
8508: DOUBLE
8509: LD_INT 1
8511: DEC
8512: ST_TO_ADDR
8513: LD_INT 8
8515: PUSH
8516: FOR_TO
8517: IFFALSE 8548
// if Side_Positions [ i ] then
8519: LD_EXP 43
8523: PUSH
8524: LD_VAR 0 2
8528: ARRAY
8529: IFFALSE 8546
// SetTech ( tech_SibFiss , i , state_enabled ) ;
8531: LD_INT 25
8533: PPUSH
8534: LD_VAR 0 2
8538: PPUSH
8539: LD_INT 1
8541: PPUSH
8542: CALL_OW 322
8546: GO 8516
8548: POP
8549: POP
// end ;
8550: LD_VAR 0 1
8554: RET
// function prepare_sides ; var i ; begin
8555: LD_INT 0
8557: PPUSH
8558: PPUSH
// global_units := [ ] ;
8559: LD_ADDR_LOC 2
8563: PUSH
8564: EMPTY
8565: ST_TO_ADDR
// global_defined := false ;
8566: LD_ADDR_LOC 3
8570: PUSH
8571: LD_INT 0
8573: ST_TO_ADDR
// for i := 1 to Side_Positions do
8574: LD_ADDR_VAR 0 2
8578: PUSH
8579: DOUBLE
8580: LD_INT 1
8582: DEC
8583: ST_TO_ADDR
8584: LD_EXP 43
8588: PUSH
8589: FOR_TO
8590: IFFALSE 8630
// if Side_Positions [ i ] then
8592: LD_EXP 43
8596: PUSH
8597: LD_VAR 0 2
8601: ARRAY
8602: IFFALSE 8628
// begin prepare_side_base ( i , 1 ) ;
8604: LD_VAR 0 2
8608: PPUSH
8609: LD_INT 1
8611: PPUSH
8612: CALL 5780 0 2
// prepare_side_base ( i , 2 ) ;
8616: LD_VAR 0 2
8620: PPUSH
8621: LD_INT 2
8623: PPUSH
8624: CALL 5780 0 2
// end ;
8628: GO 8589
8630: POP
8631: POP
// end ;
8632: LD_VAR 0 1
8636: RET
// starting begin disable ( 98 ) ;
8637: LD_INT 98
8639: DISABLE_MARKED
// disable ( 400 ) ;
8640: LD_INT 400
8642: DISABLE_MARKED
// disable ( 401 ) ;
8643: LD_INT 401
8645: DISABLE_MARKED
// disable ( 600 ) ;
8646: LD_INT 600
8648: DISABLE_MARKED
// enable_human_prediction := true ;
8649: LD_ADDR_OWVAR 51
8653: PUSH
8654: LD_INT 1
8656: ST_TO_ADDR
// mp_selectmsg := true ;
8657: LD_ADDR_OWVAR 13
8661: PUSH
8662: LD_INT 1
8664: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
8665: CALL 68 0 0
// prepare_map_coordinates ;
8669: CALL 3695 0 0
// ResetFog ;
8673: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
8677: LD_OWVAR 2
8681: PPUSH
8682: CALL_OW 520
// prepare_sides ;
8686: CALL 8555 0 0
// Init_Win_Condition ;
8690: CALL 15929 0 0
// InitLimits ;
8694: CALL 14589 0 0
// ShowTimer ;
8698: CALL 15526 0 0
// music_nat := Side_Nations [ your_side ] ;
8702: LD_ADDR_OWVAR 71
8706: PUSH
8707: LD_EXP 44
8711: PUSH
8712: LD_OWVAR 2
8716: ARRAY
8717: ST_TO_ADDR
// if IAmSpec then
8718: CALL_OW 531
8722: IFFALSE 8746
// begin fogoff ( true ) ;
8724: LD_INT 1
8726: PPUSH
8727: CALL_OW 344
// CenterNowOnXY ( 109 , 61 ) ;
8731: LD_INT 109
8733: PPUSH
8734: LD_INT 61
8736: PPUSH
8737: CALL_OW 86
// enable ( 400 ) ;
8741: LD_INT 400
8743: ENABLE_MARKED
// end else
8744: GO 8800
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 2 ] ) ;
8746: LD_EXP 49
8750: PUSH
8751: LD_EXP 43
8755: PUSH
8756: LD_OWVAR 2
8760: ARRAY
8761: ARRAY
8762: PUSH
8763: LD_INT 1
8765: ARRAY
8766: PUSH
8767: LD_INT 1
8769: ARRAY
8770: PPUSH
8771: LD_EXP 49
8775: PUSH
8776: LD_EXP 43
8780: PUSH
8781: LD_OWVAR 2
8785: ARRAY
8786: ARRAY
8787: PUSH
8788: LD_INT 1
8790: ARRAY
8791: PUSH
8792: LD_INT 2
8794: ARRAY
8795: PPUSH
8796: CALL_OW 86
// end ; if def_builduptime then
8800: LD_EXP 17
8804: IFFALSE 8810
// BeginBuildUp ;
8806: CALL 13206 0 0
// end ; end_of_file
8810: END
// var shipment1 , shipment2 , shipment3 , respawn , inqueue ; export function init_shipments_and_respawning ; begin
8811: LD_INT 0
8813: PPUSH
// shipment1 := [ ] ;
8814: LD_ADDR_LOC 9
8818: PUSH
8819: EMPTY
8820: ST_TO_ADDR
// shipment2 := [ ] ;
8821: LD_ADDR_LOC 10
8825: PUSH
8826: EMPTY
8827: ST_TO_ADDR
// shipment3 := [ ] ;
8828: LD_ADDR_LOC 11
8832: PUSH
8833: EMPTY
8834: ST_TO_ADDR
// end ;
8835: LD_VAR 0 1
8839: RET
// every 0 0$5 + 0 0$1.1 do var d , q ;
8840: GO 8842
8842: DISABLE
8843: LD_INT 0
8845: PPUSH
8846: PPUSH
// begin case tick of 1 .. 1 1$0 :
8847: LD_OWVAR 1
8851: PUSH
8852: LD_INT 1
8854: DOUBLE
8855: GREATEREQUAL
8856: IFFALSE 8864
8858: LD_INT 2100
8860: DOUBLE
8861: LESSEQUAL
8862: IFTRUE 8866
8864: GO 8877
8866: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
8867: LD_ADDR_VAR 0 1
8871: PUSH
8872: LD_INT 150
8874: ST_TO_ADDR
8875: GO 9060
8877: LD_INT 2100
8879: PUSH
8880: LD_INT 1
8882: PLUS
8883: DOUBLE
8884: GREATEREQUAL
8885: IFFALSE 8893
8887: LD_INT 10500
8889: DOUBLE
8890: LESSEQUAL
8891: IFTRUE 8895
8893: GO 8906
8895: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
8896: LD_ADDR_VAR 0 1
8900: PUSH
8901: LD_INT 100
8903: ST_TO_ADDR
8904: GO 9060
8906: LD_INT 10500
8908: PUSH
8909: LD_INT 1
8911: PLUS
8912: DOUBLE
8913: GREATEREQUAL
8914: IFFALSE 8922
8916: LD_INT 21000
8918: DOUBLE
8919: LESSEQUAL
8920: IFTRUE 8924
8922: GO 8935
8924: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
8925: LD_ADDR_VAR 0 1
8929: PUSH
8930: LD_INT 90
8932: ST_TO_ADDR
8933: GO 9060
8935: LD_INT 21000
8937: PUSH
8938: LD_INT 1
8940: PLUS
8941: DOUBLE
8942: GREATEREQUAL
8943: IFFALSE 8951
8945: LD_INT 42000
8947: DOUBLE
8948: LESSEQUAL
8949: IFTRUE 8953
8951: GO 8964
8953: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
8954: LD_ADDR_VAR 0 1
8958: PUSH
8959: LD_INT 70
8961: ST_TO_ADDR
8962: GO 9060
8964: LD_INT 42000
8966: PUSH
8967: LD_INT 1
8969: PLUS
8970: DOUBLE
8971: GREATEREQUAL
8972: IFFALSE 8980
8974: LD_INT 63000
8976: DOUBLE
8977: LESSEQUAL
8978: IFTRUE 8982
8980: GO 8993
8982: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
8983: LD_ADDR_VAR 0 1
8987: PUSH
8988: LD_INT 60
8990: ST_TO_ADDR
8991: GO 9060
8993: LD_INT 63000
8995: PUSH
8996: LD_INT 1
8998: PLUS
8999: DOUBLE
9000: GREATEREQUAL
9001: IFFALSE 9009
9003: LD_INT 105000
9005: DOUBLE
9006: LESSEQUAL
9007: IFTRUE 9011
9009: GO 9022
9011: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
9012: LD_ADDR_VAR 0 1
9016: PUSH
9017: LD_INT 35
9019: ST_TO_ADDR
9020: GO 9060
9022: LD_INT 105000
9024: PUSH
9025: LD_INT 1
9027: PLUS
9028: DOUBLE
9029: GREATEREQUAL
9030: IFFALSE 9038
9032: LD_INT 630000
9034: DOUBLE
9035: LESSEQUAL
9036: IFTRUE 9040
9038: GO 9051
9040: POP
// d := 20 ; else
9041: LD_ADDR_VAR 0 1
9045: PUSH
9046: LD_INT 20
9048: ST_TO_ADDR
9049: GO 9060
9051: POP
// d := 0 ; end ;
9052: LD_ADDR_VAR 0 1
9056: PUSH
9057: LD_INT 0
9059: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 3 then
9060: LD_INT 1
9062: PPUSH
9063: LD_INT 10000
9065: PPUSH
9066: CALL_OW 12
9070: PUSH
9071: LD_VAR 0 1
9075: PUSH
9076: LD_EXP 32
9080: MUL
9081: PUSH
9082: LD_INT 3
9084: DIV
9085: LESSEQUAL
9086: IFFALSE 9201
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
9088: LD_INT 1
9090: PPUSH
9091: LD_INT 140
9093: PPUSH
9094: CALL_OW 12
9098: PPUSH
9099: CALL_OW 67
// if shipment1 = [ ] then
9103: LD_LOC 9
9107: PUSH
9108: EMPTY
9109: EQUAL
9110: IFFALSE 9143
// shipment1 := [ Ar1Base1 , Ar1Base2 , Ar2Base1 , Ar2Base2 , Ar1Between , Ar2Between ] ;
9112: LD_ADDR_LOC 9
9116: PUSH
9117: LD_INT 19
9119: PUSH
9120: LD_INT 20
9122: PUSH
9123: LD_INT 15
9125: PUSH
9126: LD_INT 14
9128: PUSH
9129: LD_INT 22
9131: PUSH
9132: LD_INT 16
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: ST_TO_ADDR
// q := shipment1 [ Rand ( 1 , shipment1 ) ] ;
9143: LD_ADDR_VAR 0 2
9147: PUSH
9148: LD_LOC 9
9152: PUSH
9153: LD_INT 1
9155: PPUSH
9156: LD_LOC 9
9160: PPUSH
9161: CALL_OW 12
9165: ARRAY
9166: ST_TO_ADDR
// shipment1 := shipment1 diff [ q ] ;
9167: LD_ADDR_LOC 9
9171: PUSH
9172: LD_LOC 9
9176: PUSH
9177: LD_VAR 0 2
9181: PUSH
9182: EMPTY
9183: LIST
9184: DIFF
9185: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
9186: LD_INT 5
9188: PPUSH
9189: LD_VAR 0 2
9193: PPUSH
9194: LD_INT 1
9196: PPUSH
9197: CALL_OW 55
// end ; enable ;
9201: ENABLE
// end ;
9202: PPOPN 2
9204: END
// every 0 0$5 + 0 0$1.1 do var d , q ;
9205: GO 9207
9207: DISABLE
9208: LD_INT 0
9210: PPUSH
9211: PPUSH
// begin case tick of 1 .. 1 1$0 :
9212: LD_OWVAR 1
9216: PUSH
9217: LD_INT 1
9219: DOUBLE
9220: GREATEREQUAL
9221: IFFALSE 9229
9223: LD_INT 2100
9225: DOUBLE
9226: LESSEQUAL
9227: IFTRUE 9231
9229: GO 9242
9231: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
9232: LD_ADDR_VAR 0 1
9236: PUSH
9237: LD_INT 150
9239: ST_TO_ADDR
9240: GO 9425
9242: LD_INT 2100
9244: PUSH
9245: LD_INT 1
9247: PLUS
9248: DOUBLE
9249: GREATEREQUAL
9250: IFFALSE 9258
9252: LD_INT 10500
9254: DOUBLE
9255: LESSEQUAL
9256: IFTRUE 9260
9258: GO 9271
9260: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
9261: LD_ADDR_VAR 0 1
9265: PUSH
9266: LD_INT 100
9268: ST_TO_ADDR
9269: GO 9425
9271: LD_INT 10500
9273: PUSH
9274: LD_INT 1
9276: PLUS
9277: DOUBLE
9278: GREATEREQUAL
9279: IFFALSE 9287
9281: LD_INT 21000
9283: DOUBLE
9284: LESSEQUAL
9285: IFTRUE 9289
9287: GO 9300
9289: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
9290: LD_ADDR_VAR 0 1
9294: PUSH
9295: LD_INT 90
9297: ST_TO_ADDR
9298: GO 9425
9300: LD_INT 21000
9302: PUSH
9303: LD_INT 1
9305: PLUS
9306: DOUBLE
9307: GREATEREQUAL
9308: IFFALSE 9316
9310: LD_INT 42000
9312: DOUBLE
9313: LESSEQUAL
9314: IFTRUE 9318
9316: GO 9329
9318: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
9319: LD_ADDR_VAR 0 1
9323: PUSH
9324: LD_INT 70
9326: ST_TO_ADDR
9327: GO 9425
9329: LD_INT 42000
9331: PUSH
9332: LD_INT 1
9334: PLUS
9335: DOUBLE
9336: GREATEREQUAL
9337: IFFALSE 9345
9339: LD_INT 63000
9341: DOUBLE
9342: LESSEQUAL
9343: IFTRUE 9347
9345: GO 9358
9347: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
9348: LD_ADDR_VAR 0 1
9352: PUSH
9353: LD_INT 60
9355: ST_TO_ADDR
9356: GO 9425
9358: LD_INT 63000
9360: PUSH
9361: LD_INT 1
9363: PLUS
9364: DOUBLE
9365: GREATEREQUAL
9366: IFFALSE 9374
9368: LD_INT 105000
9370: DOUBLE
9371: LESSEQUAL
9372: IFTRUE 9376
9374: GO 9387
9376: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
9377: LD_ADDR_VAR 0 1
9381: PUSH
9382: LD_INT 35
9384: ST_TO_ADDR
9385: GO 9425
9387: LD_INT 105000
9389: PUSH
9390: LD_INT 1
9392: PLUS
9393: DOUBLE
9394: GREATEREQUAL
9395: IFFALSE 9403
9397: LD_INT 630000
9399: DOUBLE
9400: LESSEQUAL
9401: IFTRUE 9405
9403: GO 9416
9405: POP
// d := 20 ; else
9406: LD_ADDR_VAR 0 1
9410: PUSH
9411: LD_INT 20
9413: ST_TO_ADDR
9414: GO 9425
9416: POP
// d := 0 ; end ;
9417: LD_ADDR_VAR 0 1
9421: PUSH
9422: LD_INT 0
9424: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 4 then
9425: LD_INT 1
9427: PPUSH
9428: LD_INT 10000
9430: PPUSH
9431: CALL_OW 12
9435: PUSH
9436: LD_VAR 0 1
9440: PUSH
9441: LD_EXP 32
9445: MUL
9446: PUSH
9447: LD_INT 4
9449: DIV
9450: LESSEQUAL
9451: IFFALSE 9566
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
9453: LD_INT 1
9455: PPUSH
9456: LD_INT 140
9458: PPUSH
9459: CALL_OW 12
9463: PPUSH
9464: CALL_OW 67
// if shipment2 = [ ] then
9468: LD_LOC 10
9472: PUSH
9473: EMPTY
9474: EQUAL
9475: IFFALSE 9508
// shipment2 := [ Ar1Out1 , Ar1Out2 , Ar1Out3 , Ar2Out1 , Ar2Out2 , Ar2Out3 ] ;
9477: LD_ADDR_LOC 10
9481: PUSH
9482: LD_INT 21
9484: PUSH
9485: LD_INT 23
9487: PUSH
9488: LD_INT 24
9490: PUSH
9491: LD_INT 13
9493: PUSH
9494: LD_INT 17
9496: PUSH
9497: LD_INT 18
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: ST_TO_ADDR
// q := shipment2 [ Rand ( 1 , shipment2 ) ] ;
9508: LD_ADDR_VAR 0 2
9512: PUSH
9513: LD_LOC 10
9517: PUSH
9518: LD_INT 1
9520: PPUSH
9521: LD_LOC 10
9525: PPUSH
9526: CALL_OW 12
9530: ARRAY
9531: ST_TO_ADDR
// shipment2 := shipment2 diff [ q ] ;
9532: LD_ADDR_LOC 10
9536: PUSH
9537: LD_LOC 10
9541: PUSH
9542: LD_VAR 0 2
9546: PUSH
9547: EMPTY
9548: LIST
9549: DIFF
9550: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
9551: LD_INT 5
9553: PPUSH
9554: LD_VAR 0 2
9558: PPUSH
9559: LD_INT 1
9561: PPUSH
9562: CALL_OW 55
// end ; enable ;
9566: ENABLE
// end ;
9567: PPOPN 2
9569: END
// every 0 0$5 + 0 0$1.1 do var d , q ;
9570: GO 9572
9572: DISABLE
9573: LD_INT 0
9575: PPUSH
9576: PPUSH
// begin case tick of 1 .. 1 1$0 :
9577: LD_OWVAR 1
9581: PUSH
9582: LD_INT 1
9584: DOUBLE
9585: GREATEREQUAL
9586: IFFALSE 9594
9588: LD_INT 2100
9590: DOUBLE
9591: LESSEQUAL
9592: IFTRUE 9596
9594: GO 9607
9596: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
9597: LD_ADDR_VAR 0 1
9601: PUSH
9602: LD_INT 150
9604: ST_TO_ADDR
9605: GO 9790
9607: LD_INT 2100
9609: PUSH
9610: LD_INT 1
9612: PLUS
9613: DOUBLE
9614: GREATEREQUAL
9615: IFFALSE 9623
9617: LD_INT 10500
9619: DOUBLE
9620: LESSEQUAL
9621: IFTRUE 9625
9623: GO 9636
9625: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
9626: LD_ADDR_VAR 0 1
9630: PUSH
9631: LD_INT 100
9633: ST_TO_ADDR
9634: GO 9790
9636: LD_INT 10500
9638: PUSH
9639: LD_INT 1
9641: PLUS
9642: DOUBLE
9643: GREATEREQUAL
9644: IFFALSE 9652
9646: LD_INT 21000
9648: DOUBLE
9649: LESSEQUAL
9650: IFTRUE 9654
9652: GO 9665
9654: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
9655: LD_ADDR_VAR 0 1
9659: PUSH
9660: LD_INT 90
9662: ST_TO_ADDR
9663: GO 9790
9665: LD_INT 21000
9667: PUSH
9668: LD_INT 1
9670: PLUS
9671: DOUBLE
9672: GREATEREQUAL
9673: IFFALSE 9681
9675: LD_INT 42000
9677: DOUBLE
9678: LESSEQUAL
9679: IFTRUE 9683
9681: GO 9694
9683: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
9684: LD_ADDR_VAR 0 1
9688: PUSH
9689: LD_INT 70
9691: ST_TO_ADDR
9692: GO 9790
9694: LD_INT 42000
9696: PUSH
9697: LD_INT 1
9699: PLUS
9700: DOUBLE
9701: GREATEREQUAL
9702: IFFALSE 9710
9704: LD_INT 63000
9706: DOUBLE
9707: LESSEQUAL
9708: IFTRUE 9712
9710: GO 9723
9712: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
9713: LD_ADDR_VAR 0 1
9717: PUSH
9718: LD_INT 60
9720: ST_TO_ADDR
9721: GO 9790
9723: LD_INT 63000
9725: PUSH
9726: LD_INT 1
9728: PLUS
9729: DOUBLE
9730: GREATEREQUAL
9731: IFFALSE 9739
9733: LD_INT 105000
9735: DOUBLE
9736: LESSEQUAL
9737: IFTRUE 9741
9739: GO 9752
9741: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
9742: LD_ADDR_VAR 0 1
9746: PUSH
9747: LD_INT 35
9749: ST_TO_ADDR
9750: GO 9790
9752: LD_INT 105000
9754: PUSH
9755: LD_INT 1
9757: PLUS
9758: DOUBLE
9759: GREATEREQUAL
9760: IFFALSE 9768
9762: LD_INT 630000
9764: DOUBLE
9765: LESSEQUAL
9766: IFTRUE 9770
9768: GO 9781
9770: POP
// d := 20 ; else
9771: LD_ADDR_VAR 0 1
9775: PUSH
9776: LD_INT 20
9778: ST_TO_ADDR
9779: GO 9790
9781: POP
// d := 0 ; end ;
9782: LD_ADDR_VAR 0 1
9786: PUSH
9787: LD_INT 0
9789: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 5 then
9790: LD_INT 1
9792: PPUSH
9793: LD_INT 10000
9795: PPUSH
9796: CALL_OW 12
9800: PUSH
9801: LD_VAR 0 1
9805: PUSH
9806: LD_EXP 32
9810: MUL
9811: PUSH
9812: LD_INT 5
9814: DIV
9815: LESSEQUAL
9816: IFFALSE 9911
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
9818: LD_INT 1
9820: PPUSH
9821: LD_INT 140
9823: PPUSH
9824: CALL_OW 12
9828: PPUSH
9829: CALL_OW 67
// if shipment3 = [ ] then
9833: LD_LOC 11
9837: PUSH
9838: EMPTY
9839: EQUAL
9840: IFFALSE 9853
// shipment3 := [ valley ] ;
9842: LD_ADDR_LOC 11
9846: PUSH
9847: LD_INT 12
9849: PUSH
9850: EMPTY
9851: LIST
9852: ST_TO_ADDR
// q := shipment3 [ Rand ( 1 , shipment3 ) ] ;
9853: LD_ADDR_VAR 0 2
9857: PUSH
9858: LD_LOC 11
9862: PUSH
9863: LD_INT 1
9865: PPUSH
9866: LD_LOC 11
9870: PPUSH
9871: CALL_OW 12
9875: ARRAY
9876: ST_TO_ADDR
// shipment3 := shipment3 diff [ q ] ;
9877: LD_ADDR_LOC 11
9881: PUSH
9882: LD_LOC 11
9886: PUSH
9887: LD_VAR 0 2
9891: PUSH
9892: EMPTY
9893: LIST
9894: DIFF
9895: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
9896: LD_INT 5
9898: PPUSH
9899: LD_VAR 0 2
9903: PPUSH
9904: LD_INT 1
9906: PPUSH
9907: CALL_OW 55
// end ; enable ;
9911: ENABLE
// end ; end_of_file
9912: PPOPN 2
9914: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
9915: LD_VAR 0 1
9919: PPUSH
9920: CALL_OW 266
9924: PUSH
9925: LD_INT 0
9927: PUSH
9928: LD_INT 1
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: IN
9935: IFFALSE 9960
// SetBName ( b , @ & GetSide ( b ) ) ;
9937: LD_VAR 0 1
9941: PPUSH
9942: LD_STRING @
9944: PUSH
9945: LD_VAR 0 1
9949: PPUSH
9950: CALL_OW 255
9954: STR
9955: PPUSH
9956: CALL_OW 500
// if def_game_rules then
9960: LD_EXP 60
9964: IFFALSE 10001
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
9966: LD_VAR 0 1
9970: PPUSH
9971: LD_VAR 0 1
9975: PPUSH
9976: CALL_OW 266
9980: PPUSH
9981: LD_VAR 0 1
9985: PPUSH
9986: CALL_OW 255
9990: PPUSH
9991: LD_INT 0
9993: PPUSH
9994: LD_INT 1
9996: PPUSH
9997: CALL 14990 0 5
// end ;
10001: PPOPN 2
10003: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
10004: LD_VAR 0 1
10008: PPUSH
10009: CALL_OW 266
10013: PUSH
10014: LD_INT 0
10016: PUSH
10017: LD_INT 1
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: IN
10024: IFFALSE 10049
// SetBName ( b , @ & GetSide ( b ) ) ;
10026: LD_VAR 0 1
10030: PPUSH
10031: LD_STRING @
10033: PUSH
10034: LD_VAR 0 1
10038: PPUSH
10039: CALL_OW 255
10043: STR
10044: PPUSH
10045: CALL_OW 500
// if def_game_rules then
10049: LD_EXP 60
10053: IFFALSE 10092
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
10055: LD_VAR 0 1
10059: PPUSH
10060: LD_VAR 0 1
10064: PPUSH
10065: CALL_OW 266
10069: PPUSH
10070: LD_VAR 0 1
10074: PPUSH
10075: CALL_OW 255
10079: PPUSH
10080: LD_VAR 0 2
10084: PPUSH
10085: LD_INT 1
10087: PPUSH
10088: CALL 14990 0 5
// end ;
10092: PPOPN 3
10094: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
10095: LD_INT 0
10097: PPUSH
10098: PPUSH
10099: PPUSH
10100: PPUSH
// begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
10101: LD_VAR 0 1
10105: PPUSH
10106: CALL_OW 255
10110: PUSH
10111: LD_INT 0
10113: EQUAL
10114: PUSH
10115: LD_VAR 0 1
10119: PPUSH
10120: CALL_OW 257
10124: PUSH
10125: LD_INT 12
10127: EQUAL
10128: AND
10129: IFFALSE 10135
// CheckApemenAmount ;
10131: CALL 10463 0 0
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
10135: LD_VAR 0 1
10139: PPUSH
10140: CALL_OW 266
10144: PUSH
10145: LD_INT 0
10147: PUSH
10148: LD_INT 1
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: IN
10155: IFFALSE 10237
// begin pos := Side_Positions [ GetSide ( j ) ] ;
10157: LD_ADDR_VAR 0 4
10161: PUSH
10162: LD_EXP 43
10166: PUSH
10167: LD_VAR 0 1
10171: PPUSH
10172: CALL_OW 255
10176: ARRAY
10177: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
10178: LD_ADDR_VAR 0 2
10182: PUSH
10183: LD_EXP 49
10187: PUSH
10188: LD_VAR 0 4
10192: ARRAY
10193: PUSH
10194: LD_INT 1
10196: ARRAY
10197: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
10198: LD_ADDR_VAR 0 3
10202: PUSH
10203: LD_EXP 49
10207: PUSH
10208: LD_VAR 0 4
10212: ARRAY
10213: PUSH
10214: LD_INT 2
10216: ARRAY
10217: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
10218: LD_VAR 0 2
10222: PPUSH
10223: LD_VAR 0 3
10227: PPUSH
10228: CALL_OW 420
10232: PPUSH
10233: CALL_OW 419
// end ; if def_game_rules then
10237: LD_EXP 60
10241: IFFALSE 10340
// if ( GetType ( j ) = 3 ) then
10243: LD_VAR 0 1
10247: PPUSH
10248: CALL_OW 247
10252: PUSH
10253: LD_INT 3
10255: EQUAL
10256: IFFALSE 10296
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
10258: LD_VAR 0 1
10262: PPUSH
10263: LD_VAR 0 1
10267: PPUSH
10268: CALL_OW 266
10272: PPUSH
10273: LD_VAR 0 1
10277: PPUSH
10278: CALL_OW 255
10282: PPUSH
10283: LD_INT 0
10285: PPUSH
10286: LD_INT 1
10288: NEG
10289: PPUSH
10290: CALL 14990 0 5
10294: GO 10340
// if ( GetChassis ( j ) = 25 ) then
10296: LD_VAR 0 1
10300: PPUSH
10301: CALL_OW 265
10305: PUSH
10306: LD_INT 25
10308: EQUAL
10309: IFFALSE 10340
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
10311: LD_VAR 0 1
10315: PPUSH
10316: LD_INT 37
10318: PPUSH
10319: LD_VAR 0 1
10323: PPUSH
10324: CALL_OW 255
10328: PPUSH
10329: LD_INT 0
10331: PPUSH
10332: LD_INT 1
10334: NEG
10335: PPUSH
10336: CALL 14990 0 5
// end ;
10340: PPOPN 5
10342: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
10343: LD_EXP 60
10347: PUSH
10348: LD_VAR 0 1
10352: PPUSH
10353: CALL_OW 265
10357: PUSH
10358: LD_INT 25
10360: EQUAL
10361: AND
10362: IFFALSE 10394
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
10364: LD_VAR 0 1
10368: PPUSH
10369: LD_INT 37
10371: PPUSH
10372: LD_VAR 0 1
10376: PPUSH
10377: CALL_OW 255
10381: PPUSH
10382: LD_VAR 0 3
10386: PPUSH
10387: LD_INT 1
10389: PPUSH
10390: CALL 14990 0 5
// end ;
10394: PPOPN 4
10396: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
10397: LD_VAR 0 1
10401: PPUSH
10402: LD_VAR 0 2
10406: PPUSH
10407: LD_VAR 0 3
10411: PPUSH
10412: LD_OWVAR 2
10416: PPUSH
10417: CALL 15690 0 4
10421: PPOPN 3
10423: END
// var _apemenSkillLevel , _isSpawning , _wildApemenAmount ; every 0 0$15 do
10424: GO 10426
10426: DISABLE
// begin _apemenSkillLevel := 0 ;
10427: LD_ADDR_LOC 14
10431: PUSH
10432: LD_INT 0
10434: ST_TO_ADDR
// _isSpawning := true ;
10435: LD_ADDR_LOC 15
10439: PUSH
10440: LD_INT 1
10442: ST_TO_ADDR
// _wildApemenAmount := 0 ;
10443: LD_ADDR_LOC 16
10447: PUSH
10448: LD_INT 0
10450: ST_TO_ADDR
// prepare_apemen ;
10451: CALL 10541 0 0
// end ;
10455: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
10456: CALL 10463 0 0
// end ;
10460: PPOPN 2
10462: END
// export function CheckApemenAmount ; begin
10463: LD_INT 0
10465: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
10466: LD_ADDR_LOC 16
10470: PUSH
10471: LD_LOC 16
10475: PUSH
10476: LD_INT 1
10478: MINUS
10479: ST_TO_ADDR
// if _isSpawning then
10480: LD_LOC 15
10484: IFFALSE 10488
// exit ;
10486: GO 10536
// if _wildApemenAmount <= ( amount_of_apemen ) then
10488: LD_LOC 16
10492: PUSH
10493: LD_EXP 37
10497: LESSEQUAL
10498: IFFALSE 10536
// begin if _apemenSkillLevel < 8 then
10500: LD_LOC 14
10504: PUSH
10505: LD_INT 8
10507: LESS
10508: IFFALSE 10524
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
10510: LD_ADDR_LOC 14
10514: PUSH
10515: LD_LOC 14
10519: PUSH
10520: LD_INT 1
10522: PLUS
10523: ST_TO_ADDR
// _isSpawning := true ;
10524: LD_ADDR_LOC 15
10528: PUSH
10529: LD_INT 1
10531: ST_TO_ADDR
// prepare_apemen ;
10532: CALL 10541 0 0
// end ; end ;
10536: LD_VAR 0 1
10540: RET
// function prepare_apemen ; var i , j , un , first , d1 , d2 ; begin
10541: LD_INT 0
10543: PPUSH
10544: PPUSH
10545: PPUSH
10546: PPUSH
10547: PPUSH
10548: PPUSH
10549: PPUSH
// if not amount_of_apemen then
10550: LD_EXP 37
10554: NOT
10555: IFFALSE 10559
// exit ;
10557: GO 10646
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
10559: LD_INT 1050
10561: PPUSH
10562: LD_INT 3150
10564: PPUSH
10565: CALL_OW 12
10569: PPUSH
10570: CALL_OW 67
// apeman_init ;
10574: CALL 10651 0 0
// PlaceUnitArea ( CreateHuman , Ar1Out3 , false ) ;
10578: CALL_OW 44
10582: PPUSH
10583: LD_INT 24
10585: PPUSH
10586: LD_INT 0
10588: PPUSH
10589: CALL_OW 49
// PlaceUnitArea ( CreateHuman , Ar2Out3 , false ) ;
10593: CALL_OW 44
10597: PPUSH
10598: LD_INT 18
10600: PPUSH
10601: LD_INT 0
10603: PPUSH
10604: CALL_OW 49
// _wildApemenAmount := _wildApemenAmount + 2 ;
10608: LD_ADDR_LOC 16
10612: PUSH
10613: LD_LOC 16
10617: PUSH
10618: LD_INT 2
10620: PLUS
10621: ST_TO_ADDR
// until _wildApemenAmount >= ( amount_of_apemen * 2 ) ;
10622: LD_LOC 16
10626: PUSH
10627: LD_EXP 37
10631: PUSH
10632: LD_INT 2
10634: MUL
10635: GREATEREQUAL
10636: IFFALSE 10559
// _isSpawning := false ;
10638: LD_ADDR_LOC 15
10642: PUSH
10643: LD_INT 0
10645: ST_TO_ADDR
// end ;
10646: LD_VAR 0 1
10650: RET
// function apeman_init ; begin
10651: LD_INT 0
10653: PPUSH
// uc_side := 0 ;
10654: LD_ADDR_OWVAR 20
10658: PUSH
10659: LD_INT 0
10661: ST_TO_ADDR
// uc_nation := nation_nature ;
10662: LD_ADDR_OWVAR 21
10666: PUSH
10667: LD_INT 0
10669: ST_TO_ADDR
// hc_class := class_apeman ;
10670: LD_ADDR_OWVAR 28
10674: PUSH
10675: LD_INT 12
10677: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
10678: LD_ADDR_OWVAR 30
10682: PUSH
10683: LD_INT 2
10685: PUSH
10686: LD_INT 2
10688: PUSH
10689: LD_INT 2
10691: PUSH
10692: LD_INT 2
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
10701: LD_ADDR_OWVAR 31
10705: PUSH
10706: LD_INT 0
10708: PPUSH
10709: LD_INT 2
10711: PPUSH
10712: CALL_OW 12
10716: PUSH
10717: LD_LOC 14
10721: PLUS
10722: PUSH
10723: LD_INT 0
10725: PPUSH
10726: LD_INT 2
10728: PPUSH
10729: CALL_OW 12
10733: PUSH
10734: LD_LOC 14
10738: PLUS
10739: PUSH
10740: LD_INT 0
10742: PPUSH
10743: LD_INT 2
10745: PPUSH
10746: CALL_OW 12
10750: PUSH
10751: LD_LOC 14
10755: PLUS
10756: PUSH
10757: LD_INT 0
10759: PPUSH
10760: LD_INT 2
10762: PPUSH
10763: CALL_OW 12
10767: PUSH
10768: LD_LOC 14
10772: PLUS
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
10780: LD_ADDR_OWVAR 29
10784: PUSH
10785: LD_INT 10
10787: PUSH
10788: LD_INT 12
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: ST_TO_ADDR
// hc_sex := sex_male ;
10795: LD_ADDR_OWVAR 27
10799: PUSH
10800: LD_INT 1
10802: ST_TO_ADDR
// hc_importance := 0 ;
10803: LD_ADDR_OWVAR 32
10807: PUSH
10808: LD_INT 0
10810: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
10811: LD_ADDR_OWVAR 35
10815: PUSH
10816: LD_INT 20
10818: NEG
10819: PPUSH
10820: LD_INT 20
10822: PPUSH
10823: CALL_OW 12
10827: ST_TO_ADDR
// end ; end_of_file
10828: LD_VAR 0 1
10832: RET
// var free , free1 , free2 , new1 , new2 , arr1 , arr2 , seenby1 , seenby2 ; function displ_status ; var s1 , s2 ; begin
10833: LD_INT 0
10835: PPUSH
10836: PPUSH
10837: PPUSH
// if not def_people_arrivals then
10838: LD_EXP 11
10842: NOT
10843: IFFALSE 10847
// exit ;
10845: GO 10988
// if def_people_loyality then
10847: LD_EXP 12
10851: IFFALSE 10967
// begin s1 := [ #Multi1x1-InfoL , Position_Sides [ 1 ] , ( free1 + 0 ) ] ;
10853: LD_ADDR_VAR 0 2
10857: PUSH
10858: LD_STRING #Multi1x1-InfoL
10860: PUSH
10861: LD_EXP 46
10865: PUSH
10866: LD_INT 1
10868: ARRAY
10869: PUSH
10870: LD_LOC 18
10874: PUSH
10875: LD_INT 0
10877: PLUS
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: LIST
10883: ST_TO_ADDR
// s2 := [ #Multi1x1-InfoL , Position_Sides [ 2 ] , ( free2 + 0 ) ] ;
10884: LD_ADDR_VAR 0 3
10888: PUSH
10889: LD_STRING #Multi1x1-InfoL
10891: PUSH
10892: LD_EXP 46
10896: PUSH
10897: LD_INT 2
10899: ARRAY
10900: PUSH
10901: LD_LOC 19
10905: PUSH
10906: LD_INT 0
10908: PLUS
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: LIST
10914: ST_TO_ADDR
// if Side_Positions [ your_side ] <> 2 then
10915: LD_EXP 43
10919: PUSH
10920: LD_OWVAR 2
10924: ARRAY
10925: PUSH
10926: LD_INT 2
10928: NONEQUAL
10929: IFFALSE 10949
// ExtraStrings := s1 ^ s2 else
10931: LD_ADDR_EXP 62
10935: PUSH
10936: LD_VAR 0 2
10940: PUSH
10941: LD_VAR 0 3
10945: ADD
10946: ST_TO_ADDR
10947: GO 10965
// ExtraStrings := s2 ^ s1 ;
10949: LD_ADDR_EXP 62
10953: PUSH
10954: LD_VAR 0 3
10958: PUSH
10959: LD_VAR 0 2
10963: ADD
10964: ST_TO_ADDR
// end else
10965: GO 10988
// begin ExtraStrings := [ #Multi1x1-InfoNonL , ( free + 0 ) ] ;
10967: LD_ADDR_EXP 62
10971: PUSH
10972: LD_STRING #Multi1x1-InfoNonL
10974: PUSH
10975: LD_LOC 17
10979: PUSH
10980: LD_INT 0
10982: PLUS
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: ST_TO_ADDR
// end ; end ;
10988: LD_VAR 0 1
10992: RET
// every 0 0$1 do
10993: GO 10995
10995: DISABLE
// begin if not text_info then
10996: LD_EXP 34
11000: NOT
11001: IFFALSE 11005
// exit ;
11003: GO 11010
// displ_status ;
11005: CALL 10833 0 0
// enable ;
11009: ENABLE
// end ;
11010: END
// export function prepare_arrivals ; var i , ar , p1 , p2 , pom1 , pom2 ; begin
11011: LD_INT 0
11013: PPUSH
11014: PPUSH
11015: PPUSH
11016: PPUSH
11017: PPUSH
11018: PPUSH
11019: PPUSH
// arr1 := [ ] ;
11020: LD_ADDR_LOC 22
11024: PUSH
11025: EMPTY
11026: ST_TO_ADDR
// arr2 := [ ] ;
11027: LD_ADDR_LOC 23
11031: PUSH
11032: EMPTY
11033: ST_TO_ADDR
// for i := 1 to max_arriving_times do
11034: LD_ADDR_VAR 0 2
11038: PUSH
11039: DOUBLE
11040: LD_INT 1
11042: DEC
11043: ST_TO_ADDR
11044: LD_EXP 33
11048: PUSH
11049: FOR_TO
11050: IFFALSE 11586
// begin case rand ( 1 , 100 ) of 1 .. 45 :
11052: LD_INT 1
11054: PPUSH
11055: LD_INT 100
11057: PPUSH
11058: CALL_OW 12
11062: PUSH
11063: LD_INT 1
11065: DOUBLE
11066: GREATEREQUAL
11067: IFFALSE 11075
11069: LD_INT 45
11071: DOUBLE
11072: LESSEQUAL
11073: IFTRUE 11077
11075: GO 11284
11077: POP
// case rand ( 1 , 100 ) of 1 .. 10 :
11078: LD_INT 1
11080: PPUSH
11081: LD_INT 100
11083: PPUSH
11084: CALL_OW 12
11088: PUSH
11089: LD_INT 1
11091: DOUBLE
11092: GREATEREQUAL
11093: IFFALSE 11101
11095: LD_INT 10
11097: DOUBLE
11098: LESSEQUAL
11099: IFTRUE 11103
11101: GO 11121
11103: POP
// ar := [ Ar1Base1 , Ar2Base1 ] ; 11 .. 20 :
11104: LD_ADDR_VAR 0 3
11108: PUSH
11109: LD_INT 19
11111: PUSH
11112: LD_INT 15
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: ST_TO_ADDR
11119: GO 11282
11121: LD_INT 11
11123: DOUBLE
11124: GREATEREQUAL
11125: IFFALSE 11133
11127: LD_INT 20
11129: DOUBLE
11130: LESSEQUAL
11131: IFTRUE 11135
11133: GO 11153
11135: POP
// ar := [ Ar1Base2 , Ar2Base2 ] ; 21 .. 30 :
11136: LD_ADDR_VAR 0 3
11140: PUSH
11141: LD_INT 20
11143: PUSH
11144: LD_INT 14
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: ST_TO_ADDR
11151: GO 11282
11153: LD_INT 21
11155: DOUBLE
11156: GREATEREQUAL
11157: IFFALSE 11165
11159: LD_INT 30
11161: DOUBLE
11162: LESSEQUAL
11163: IFTRUE 11167
11165: GO 11185
11167: POP
// ar := [ Ar1Between , Ar2Between ] ; 31 .. 55 :
11168: LD_ADDR_VAR 0 3
11172: PUSH
11173: LD_INT 22
11175: PUSH
11176: LD_INT 16
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: ST_TO_ADDR
11183: GO 11282
11185: LD_INT 31
11187: DOUBLE
11188: GREATEREQUAL
11189: IFFALSE 11197
11191: LD_INT 55
11193: DOUBLE
11194: LESSEQUAL
11195: IFTRUE 11199
11197: GO 11217
11199: POP
// ar := [ Ar1Out2 , Ar2Out2 ] ; 56 .. 80 :
11200: LD_ADDR_VAR 0 3
11204: PUSH
11205: LD_INT 23
11207: PUSH
11208: LD_INT 17
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: ST_TO_ADDR
11215: GO 11282
11217: LD_INT 56
11219: DOUBLE
11220: GREATEREQUAL
11221: IFFALSE 11229
11223: LD_INT 80
11225: DOUBLE
11226: LESSEQUAL
11227: IFTRUE 11231
11229: GO 11249
11231: POP
// ar := [ Ar1Out1 , Ar2Out1 ] ; 81 .. 100 :
11232: LD_ADDR_VAR 0 3
11236: PUSH
11237: LD_INT 21
11239: PUSH
11240: LD_INT 13
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: ST_TO_ADDR
11247: GO 11282
11249: LD_INT 81
11251: DOUBLE
11252: GREATEREQUAL
11253: IFFALSE 11261
11255: LD_INT 100
11257: DOUBLE
11258: LESSEQUAL
11259: IFTRUE 11263
11261: GO 11281
11263: POP
// ar := [ Ar1Out3 , Ar2Out3 ] ; end ; 46 .. 85 :
11264: LD_ADDR_VAR 0 3
11268: PUSH
11269: LD_INT 24
11271: PUSH
11272: LD_INT 18
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: ST_TO_ADDR
11279: GO 11282
11281: POP
11282: GO 11538
11284: LD_INT 46
11286: DOUBLE
11287: GREATEREQUAL
11288: IFFALSE 11296
11290: LD_INT 85
11292: DOUBLE
11293: LESSEQUAL
11294: IFTRUE 11298
11296: GO 11505
11298: POP
// case rand ( 1 , 100 ) of 1 .. 5 :
11299: LD_INT 1
11301: PPUSH
11302: LD_INT 100
11304: PPUSH
11305: CALL_OW 12
11309: PUSH
11310: LD_INT 1
11312: DOUBLE
11313: GREATEREQUAL
11314: IFFALSE 11322
11316: LD_INT 5
11318: DOUBLE
11319: LESSEQUAL
11320: IFTRUE 11324
11322: GO 11342
11324: POP
// ar := [ Ar2Base1 , Ar1Base1 ] ; 6 .. 15 :
11325: LD_ADDR_VAR 0 3
11329: PUSH
11330: LD_INT 15
11332: PUSH
11333: LD_INT 19
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: ST_TO_ADDR
11340: GO 11503
11342: LD_INT 6
11344: DOUBLE
11345: GREATEREQUAL
11346: IFFALSE 11354
11348: LD_INT 15
11350: DOUBLE
11351: LESSEQUAL
11352: IFTRUE 11356
11354: GO 11374
11356: POP
// ar := [ Ar2Base2 , Ar1Base2 ] ; 16 .. 30 :
11357: LD_ADDR_VAR 0 3
11361: PUSH
11362: LD_INT 14
11364: PUSH
11365: LD_INT 20
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: ST_TO_ADDR
11372: GO 11503
11374: LD_INT 16
11376: DOUBLE
11377: GREATEREQUAL
11378: IFFALSE 11386
11380: LD_INT 30
11382: DOUBLE
11383: LESSEQUAL
11384: IFTRUE 11388
11386: GO 11406
11388: POP
// ar := [ Ar2Between , Ar1Between ] ; 31 .. 50 :
11389: LD_ADDR_VAR 0 3
11393: PUSH
11394: LD_INT 16
11396: PUSH
11397: LD_INT 22
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: ST_TO_ADDR
11404: GO 11503
11406: LD_INT 31
11408: DOUBLE
11409: GREATEREQUAL
11410: IFFALSE 11418
11412: LD_INT 50
11414: DOUBLE
11415: LESSEQUAL
11416: IFTRUE 11420
11418: GO 11438
11420: POP
// ar := [ Ar2Out2 , Ar1Out2 ] ; 51 .. 75 :
11421: LD_ADDR_VAR 0 3
11425: PUSH
11426: LD_INT 17
11428: PUSH
11429: LD_INT 23
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: ST_TO_ADDR
11436: GO 11503
11438: LD_INT 51
11440: DOUBLE
11441: GREATEREQUAL
11442: IFFALSE 11450
11444: LD_INT 75
11446: DOUBLE
11447: LESSEQUAL
11448: IFTRUE 11452
11450: GO 11470
11452: POP
// ar := [ Ar2Out1 , Ar1Out1 ] ; 76 .. 100 :
11453: LD_ADDR_VAR 0 3
11457: PUSH
11458: LD_INT 13
11460: PUSH
11461: LD_INT 21
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: ST_TO_ADDR
11468: GO 11503
11470: LD_INT 76
11472: DOUBLE
11473: GREATEREQUAL
11474: IFFALSE 11482
11476: LD_INT 100
11478: DOUBLE
11479: LESSEQUAL
11480: IFTRUE 11484
11482: GO 11502
11484: POP
// ar := [ Ar2Out3 , Ar1Out3 ] ; end ; 86 .. 100 :
11485: LD_ADDR_VAR 0 3
11489: PUSH
11490: LD_INT 18
11492: PUSH
11493: LD_INT 24
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: ST_TO_ADDR
11500: GO 11503
11502: POP
11503: GO 11538
11505: LD_INT 86
11507: DOUBLE
11508: GREATEREQUAL
11509: IFFALSE 11517
11511: LD_INT 100
11513: DOUBLE
11514: LESSEQUAL
11515: IFTRUE 11519
11517: GO 11537
11519: POP
// ar := [ valley , valley ] ; end ;
11520: LD_ADDR_VAR 0 3
11524: PUSH
11525: LD_INT 12
11527: PUSH
11528: LD_INT 12
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: ST_TO_ADDR
11535: GO 11538
11537: POP
// arr1 := arr1 ^ [ ar [ 1 ] ] ;
11538: LD_ADDR_LOC 22
11542: PUSH
11543: LD_LOC 22
11547: PUSH
11548: LD_VAR 0 3
11552: PUSH
11553: LD_INT 1
11555: ARRAY
11556: PUSH
11557: EMPTY
11558: LIST
11559: ADD
11560: ST_TO_ADDR
// arr2 := arr2 ^ [ ar [ 2 ] ] ;
11561: LD_ADDR_LOC 23
11565: PUSH
11566: LD_LOC 23
11570: PUSH
11571: LD_VAR 0 3
11575: PUSH
11576: LD_INT 2
11578: ARRAY
11579: PUSH
11580: EMPTY
11581: LIST
11582: ADD
11583: ST_TO_ADDR
// end ;
11584: GO 11049
11586: POP
11587: POP
// for i := 1 to max_arriving_times div 2 do
11588: LD_ADDR_VAR 0 2
11592: PUSH
11593: DOUBLE
11594: LD_INT 1
11596: DEC
11597: ST_TO_ADDR
11598: LD_EXP 33
11602: PUSH
11603: LD_INT 2
11605: DIV
11606: PUSH
11607: FOR_TO
11608: IFFALSE 11720
// begin p1 := Rand ( 1 , max_arriving_times ) ;
11610: LD_ADDR_VAR 0 4
11614: PUSH
11615: LD_INT 1
11617: PPUSH
11618: LD_EXP 33
11622: PPUSH
11623: CALL_OW 12
11627: ST_TO_ADDR
// p2 := Rand ( 1 , max_arriving_times ) ;
11628: LD_ADDR_VAR 0 5
11632: PUSH
11633: LD_INT 1
11635: PPUSH
11636: LD_EXP 33
11640: PPUSH
11641: CALL_OW 12
11645: ST_TO_ADDR
// pom1 := arr2 [ p1 ] ;
11646: LD_ADDR_VAR 0 6
11650: PUSH
11651: LD_LOC 23
11655: PUSH
11656: LD_VAR 0 4
11660: ARRAY
11661: ST_TO_ADDR
// pom2 := arr2 [ p2 ] ;
11662: LD_ADDR_VAR 0 7
11666: PUSH
11667: LD_LOC 23
11671: PUSH
11672: LD_VAR 0 5
11676: ARRAY
11677: ST_TO_ADDR
// arr2 := Replace ( Replace ( arr2 , p2 , pom1 ) , p1 , pom2 ) ;
11678: LD_ADDR_LOC 23
11682: PUSH
11683: LD_LOC 23
11687: PPUSH
11688: LD_VAR 0 5
11692: PPUSH
11693: LD_VAR 0 6
11697: PPUSH
11698: CALL_OW 1
11702: PPUSH
11703: LD_VAR 0 4
11707: PPUSH
11708: LD_VAR 0 7
11712: PPUSH
11713: CALL_OW 1
11717: ST_TO_ADDR
// end ;
11718: GO 11607
11720: POP
11721: POP
// end ;
11722: LD_VAR 0 1
11726: RET
// every 0 0$1 do
11727: GO 11729
11729: DISABLE
// begin if not max_arriving_times then
11730: LD_EXP 33
11734: NOT
11735: IFFALSE 11739
// exit ;
11737: GO 11822
// if tick >= max_arriving_times [ 1 ] * 0 0$30 then
11739: LD_OWVAR 1
11743: PUSH
11744: LD_EXP 33
11748: PUSH
11749: LD_INT 1
11751: ARRAY
11752: PUSH
11753: LD_INT 1050
11755: MUL
11756: GREATEREQUAL
11757: IFFALSE 11821
// begin new1 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11759: LD_ADDR_LOC 20
11763: PUSH
11764: LD_INT 1
11766: PPUSH
11767: LD_EXP 33
11771: PUSH
11772: LD_INT 1050
11774: MUL
11775: PPUSH
11776: CALL_OW 12
11780: ST_TO_ADDR
// new2 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11781: LD_ADDR_LOC 21
11785: PUSH
11786: LD_INT 1
11788: PPUSH
11789: LD_EXP 33
11793: PUSH
11794: LD_INT 1050
11796: MUL
11797: PPUSH
11798: CALL_OW 12
11802: ST_TO_ADDR
// max_arriving_times := delete ( max_arriving_times , 1 ) ;
11803: LD_ADDR_EXP 33
11807: PUSH
11808: LD_EXP 33
11812: PPUSH
11813: LD_INT 1
11815: PPUSH
11816: CALL_OW 3
11820: ST_TO_ADDR
// end ; enable ;
11821: ENABLE
// end ;
11822: END
// function new_arrival ( pos ) ; var hum ; begin
11823: LD_INT 0
11825: PPUSH
11826: PPUSH
// if def_people_loyality then
11827: LD_EXP 12
11831: IFFALSE 11873
// begin uc_side := second_side [ pos ] ;
11833: LD_ADDR_OWVAR 20
11837: PUSH
11838: LD_EXP 47
11842: PUSH
11843: LD_VAR 0 1
11847: ARRAY
11848: ST_TO_ADDR
// uc_nation := Side_Nations [ positions [ pos ] ] ;
11849: LD_ADDR_OWVAR 21
11853: PUSH
11854: LD_EXP 44
11858: PUSH
11859: LD_EXP 39
11863: PUSH
11864: LD_VAR 0 1
11868: ARRAY
11869: ARRAY
11870: ST_TO_ADDR
// end else
11871: GO 11893
// begin uc_side := second_side ;
11873: LD_ADDR_OWVAR 20
11877: PUSH
11878: LD_EXP 47
11882: ST_TO_ADDR
// uc_nation := third_nation ;
11883: LD_ADDR_OWVAR 21
11887: PUSH
11888: LD_EXP 48
11892: ST_TO_ADDR
// end ; PrepareHuman ( 0 , 0 , initial_level + 1 ) ;
11893: LD_INT 0
11895: PPUSH
11896: LD_INT 0
11898: PPUSH
11899: LD_EXP 29
11903: PUSH
11904: LD_INT 1
11906: PLUS
11907: PPUSH
11908: CALL_OW 380
// hc_class := class_soldier ;
11912: LD_ADDR_OWVAR 28
11916: PUSH
11917: LD_INT 1
11919: ST_TO_ADDR
// hum := CreateHuman ;
11920: LD_ADDR_VAR 0 3
11924: PUSH
11925: CALL_OW 44
11929: ST_TO_ADDR
// if pos = 1 then
11930: LD_VAR 0 1
11934: PUSH
11935: LD_INT 1
11937: EQUAL
11938: IFFALSE 11981
// begin PlaceUnitArea ( hum , arr1 [ 1 ] , true ) ;
11940: LD_VAR 0 3
11944: PPUSH
11945: LD_LOC 22
11949: PUSH
11950: LD_INT 1
11952: ARRAY
11953: PPUSH
11954: LD_INT 1
11956: PPUSH
11957: CALL_OW 49
// arr1 := delete ( arr1 , 1 ) ;
11961: LD_ADDR_LOC 22
11965: PUSH
11966: LD_LOC 22
11970: PPUSH
11971: LD_INT 1
11973: PPUSH
11974: CALL_OW 3
11978: ST_TO_ADDR
// end else
11979: GO 12020
// begin PlaceUnitArea ( hum , arr2 [ 1 ] , true ) ;
11981: LD_VAR 0 3
11985: PPUSH
11986: LD_LOC 23
11990: PUSH
11991: LD_INT 1
11993: ARRAY
11994: PPUSH
11995: LD_INT 1
11997: PPUSH
11998: CALL_OW 49
// arr2 := delete ( arr2 , 1 ) ;
12002: LD_ADDR_LOC 23
12006: PUSH
12007: LD_LOC 23
12011: PPUSH
12012: LD_INT 1
12014: PPUSH
12015: CALL_OW 3
12019: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) until IsPlaced ( hum ) ;
12020: LD_INT 35
12022: PPUSH
12023: CALL_OW 67
12027: LD_VAR 0 3
12031: PPUSH
12032: CALL_OW 305
12036: IFFALSE 12020
// if def_people_loyality then
12038: LD_EXP 12
12042: IFFALSE 12102
// if pos = 1 then
12044: LD_VAR 0 1
12048: PUSH
12049: LD_INT 1
12051: EQUAL
12052: IFFALSE 12072
// free1 := free1 ^ hum else
12054: LD_ADDR_LOC 18
12058: PUSH
12059: LD_LOC 18
12063: PUSH
12064: LD_VAR 0 3
12068: ADD
12069: ST_TO_ADDR
12070: GO 12100
// if pos = 2 then
12072: LD_VAR 0 1
12076: PUSH
12077: LD_INT 2
12079: EQUAL
12080: IFFALSE 12100
// free2 := free2 ^ hum else
12082: LD_ADDR_LOC 19
12086: PUSH
12087: LD_LOC 19
12091: PUSH
12092: LD_VAR 0 3
12096: ADD
12097: ST_TO_ADDR
12098: GO 12100
// else
12100: GO 12118
// free := free ^ hum ;
12102: LD_ADDR_LOC 17
12106: PUSH
12107: LD_LOC 17
12111: PUSH
12112: LD_VAR 0 3
12116: ADD
12117: ST_TO_ADDR
// end ;
12118: LD_VAR 0 2
12122: RET
// every 0 0$0.5 trigger new1 do var d ;
12123: LD_LOC 20
12127: IFFALSE 12160
12129: GO 12131
12131: DISABLE
12132: LD_INT 0
12134: PPUSH
// begin enable ;
12135: ENABLE
// new1 := 0 ;
12136: LD_ADDR_LOC 20
12140: PUSH
12141: LD_INT 0
12143: ST_TO_ADDR
// wait ( d ) ;
12144: LD_VAR 0 1
12148: PPUSH
12149: CALL_OW 67
// new_arrival ( 1 ) ;
12153: LD_INT 1
12155: PPUSH
12156: CALL 11823 0 1
// end ;
12160: PPOPN 1
12162: END
// every 0 0$0.5 trigger new2 do var d ;
12163: LD_LOC 21
12167: IFFALSE 12200
12169: GO 12171
12171: DISABLE
12172: LD_INT 0
12174: PPUSH
// begin enable ;
12175: ENABLE
// new2 := 0 ;
12176: LD_ADDR_LOC 21
12180: PUSH
12181: LD_INT 0
12183: ST_TO_ADDR
// wait ( d ) ;
12184: LD_VAR 0 1
12188: PPUSH
12189: CALL_OW 67
// new_arrival ( 2 ) ;
12193: LD_INT 2
12195: PPUSH
12196: CALL 11823 0 1
// end ;
12200: PPOPN 1
12202: END
// function check_one_side ( un , side ) ; begin
12203: LD_INT 0
12205: PPUSH
// if FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , side ] , [ f_dist , un , 3 ] ] ) then
12206: LD_INT 21
12208: PUSH
12209: LD_INT 1
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: LD_INT 22
12218: PUSH
12219: LD_VAR 0 2
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: LD_INT 91
12230: PUSH
12231: LD_VAR 0 1
12235: PUSH
12236: LD_INT 3
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: LIST
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: LIST
12248: PPUSH
12249: CALL_OW 69
12253: IFFALSE 12267
// result := side else
12255: LD_ADDR_VAR 0 3
12259: PUSH
12260: LD_VAR 0 2
12264: ST_TO_ADDR
12265: GO 12275
// result := 0 ;
12267: LD_ADDR_VAR 0 3
12271: PUSH
12272: LD_INT 0
12274: ST_TO_ADDR
// end ;
12275: LD_VAR 0 3
12279: RET
// function check_two_sides ( un , side1 , side2 ) ; var un1 , s1 , s2 ; begin
12280: LD_INT 0
12282: PPUSH
12283: PPUSH
12284: PPUSH
12285: PPUSH
// s1 := 0 ;
12286: LD_ADDR_VAR 0 6
12290: PUSH
12291: LD_INT 0
12293: ST_TO_ADDR
// s2 := 0 ;
12294: LD_ADDR_VAR 0 7
12298: PUSH
12299: LD_INT 0
12301: ST_TO_ADDR
// for un1 in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_dist , un , 3 ] ] ) do
12302: LD_ADDR_VAR 0 5
12306: PUSH
12307: LD_INT 21
12309: PUSH
12310: LD_INT 1
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: LD_INT 91
12319: PUSH
12320: LD_VAR 0 1
12324: PUSH
12325: LD_INT 3
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: LIST
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PPUSH
12337: CALL_OW 69
12341: PUSH
12342: FOR_IN
12343: IFFALSE 12411
// begin if GetSide ( un1 ) = side1 then
12345: LD_VAR 0 5
12349: PPUSH
12350: CALL_OW 255
12354: PUSH
12355: LD_VAR 0 2
12359: EQUAL
12360: IFFALSE 12378
// s1 := s1 + 1 else
12362: LD_ADDR_VAR 0 6
12366: PUSH
12367: LD_VAR 0 6
12371: PUSH
12372: LD_INT 1
12374: PLUS
12375: ST_TO_ADDR
12376: GO 12409
// if GetSide ( un1 ) = side2 then
12378: LD_VAR 0 5
12382: PPUSH
12383: CALL_OW 255
12387: PUSH
12388: LD_VAR 0 3
12392: EQUAL
12393: IFFALSE 12409
// s2 := s2 + 1 ;
12395: LD_ADDR_VAR 0 7
12399: PUSH
12400: LD_VAR 0 7
12404: PUSH
12405: LD_INT 1
12407: PLUS
12408: ST_TO_ADDR
// end ;
12409: GO 12342
12411: POP
12412: POP
// if s1 = s2 then
12413: LD_VAR 0 6
12417: PUSH
12418: LD_VAR 0 7
12422: EQUAL
12423: IFFALSE 12435
// result := 0 else
12425: LD_ADDR_VAR 0 4
12429: PUSH
12430: LD_INT 0
12432: ST_TO_ADDR
12433: GO 12465
// if s1 > s2 then
12435: LD_VAR 0 6
12439: PUSH
12440: LD_VAR 0 7
12444: GREATER
12445: IFFALSE 12457
// result := 1 else
12447: LD_ADDR_VAR 0 4
12451: PUSH
12452: LD_INT 1
12454: ST_TO_ADDR
12455: GO 12465
// result := 2 ;
12457: LD_ADDR_VAR 0 4
12461: PUSH
12462: LD_INT 2
12464: ST_TO_ADDR
// end ;
12465: LD_VAR 0 4
12469: RET
// every 0 0$2 do var un ;
12470: GO 12472
12472: DISABLE
12473: LD_INT 0
12475: PPUSH
// begin if def_people_loyality then
12476: LD_EXP 12
12480: IFFALSE 12859
// if not fog_info then
12482: LD_EXP 35
12486: NOT
12487: IFFALSE 12675
// begin if your_side then
12489: LD_OWVAR 2
12493: IFFALSE 12673
// if side_positions [ your_side ] = 1 then
12495: LD_EXP 43
12499: PUSH
12500: LD_OWVAR 2
12504: ARRAY
12505: PUSH
12506: LD_INT 1
12508: EQUAL
12509: IFFALSE 12585
// begin un := UnitFilter ( free1 diff seenby1 , [ f_see , your_side ] ) ;
12511: LD_ADDR_VAR 0 1
12515: PUSH
12516: LD_LOC 18
12520: PUSH
12521: LD_LOC 24
12525: DIFF
12526: PPUSH
12527: LD_INT 101
12529: PUSH
12530: LD_OWVAR 2
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PPUSH
12539: CALL_OW 72
12543: ST_TO_ADDR
// if un then
12544: LD_VAR 0 1
12548: IFFALSE 12583
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12550: LD_VAR 0 1
12554: PUSH
12555: LD_INT 1
12557: ARRAY
12558: PPUSH
12559: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12563: LD_ADDR_LOC 24
12567: PUSH
12568: LD_LOC 24
12572: PUSH
12573: LD_VAR 0 1
12577: PUSH
12578: LD_INT 1
12580: ARRAY
12581: ADD
12582: ST_TO_ADDR
// end ; end else
12583: GO 12673
// if side_positions [ your_side ] = 2 then
12585: LD_EXP 43
12589: PUSH
12590: LD_OWVAR 2
12594: ARRAY
12595: PUSH
12596: LD_INT 2
12598: EQUAL
12599: IFFALSE 12673
// begin un := UnitFilter ( free2 diff seenby2 , [ f_see , your_side ] ) ;
12601: LD_ADDR_VAR 0 1
12605: PUSH
12606: LD_LOC 19
12610: PUSH
12611: LD_LOC 25
12615: DIFF
12616: PPUSH
12617: LD_INT 101
12619: PUSH
12620: LD_OWVAR 2
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PPUSH
12629: CALL_OW 72
12633: ST_TO_ADDR
// if un then
12634: LD_VAR 0 1
12638: IFFALSE 12673
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12640: LD_VAR 0 1
12644: PUSH
12645: LD_INT 1
12647: ARRAY
12648: PPUSH
12649: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
12653: LD_ADDR_LOC 25
12657: PUSH
12658: LD_LOC 25
12662: PUSH
12663: LD_VAR 0 1
12667: PUSH
12668: LD_INT 1
12670: ARRAY
12671: ADD
12672: ST_TO_ADDR
// end ; end ; end else
12673: GO 12859
// begin if your_side then
12675: LD_OWVAR 2
12679: IFFALSE 12859
// if side_positions [ your_side ] = 1 then
12681: LD_EXP 43
12685: PUSH
12686: LD_OWVAR 2
12690: ARRAY
12691: PUSH
12692: LD_INT 1
12694: EQUAL
12695: IFFALSE 12771
// begin un := UnitFilter ( free diff seenby1 , [ f_see , your_side ] ) ;
12697: LD_ADDR_VAR 0 1
12701: PUSH
12702: LD_LOC 17
12706: PUSH
12707: LD_LOC 24
12711: DIFF
12712: PPUSH
12713: LD_INT 101
12715: PUSH
12716: LD_OWVAR 2
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PPUSH
12725: CALL_OW 72
12729: ST_TO_ADDR
// if un then
12730: LD_VAR 0 1
12734: IFFALSE 12769
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12736: LD_VAR 0 1
12740: PUSH
12741: LD_INT 1
12743: ARRAY
12744: PPUSH
12745: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12749: LD_ADDR_LOC 24
12753: PUSH
12754: LD_LOC 24
12758: PUSH
12759: LD_VAR 0 1
12763: PUSH
12764: LD_INT 1
12766: ARRAY
12767: ADD
12768: ST_TO_ADDR
// end ; end else
12769: GO 12859
// if side_positions [ your_side ] = 2 then
12771: LD_EXP 43
12775: PUSH
12776: LD_OWVAR 2
12780: ARRAY
12781: PUSH
12782: LD_INT 2
12784: EQUAL
12785: IFFALSE 12859
// begin un := UnitFilter ( free diff seenby2 , [ f_see , your_side ] ) ;
12787: LD_ADDR_VAR 0 1
12791: PUSH
12792: LD_LOC 17
12796: PUSH
12797: LD_LOC 25
12801: DIFF
12802: PPUSH
12803: LD_INT 101
12805: PUSH
12806: LD_OWVAR 2
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PPUSH
12815: CALL_OW 72
12819: ST_TO_ADDR
// if un then
12820: LD_VAR 0 1
12824: IFFALSE 12859
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12826: LD_VAR 0 1
12830: PUSH
12831: LD_INT 1
12833: ARRAY
12834: PPUSH
12835: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
12839: LD_ADDR_LOC 25
12843: PUSH
12844: LD_LOC 25
12848: PUSH
12849: LD_VAR 0 1
12853: PUSH
12854: LD_INT 1
12856: ARRAY
12857: ADD
12858: ST_TO_ADDR
// end ; end ; end ; enable ;
12859: ENABLE
// end ;
12860: PPOPN 1
12862: END
// every 0 0$0.5 do var un , s ;
12863: GO 12865
12865: DISABLE
12866: LD_INT 0
12868: PPUSH
12869: PPUSH
// begin if def_people_loyality then
12870: LD_EXP 12
12874: IFFALSE 13080
// begin for un in free1 do
12876: LD_ADDR_VAR 0 1
12880: PUSH
12881: LD_LOC 18
12885: PUSH
12886: FOR_IN
12887: IFFALSE 12975
// if not IsLive ( un ) then
12889: LD_VAR 0 1
12893: PPUSH
12894: CALL_OW 300
12898: NOT
12899: IFFALSE 12919
// free1 := free1 diff un else
12901: LD_ADDR_LOC 18
12905: PUSH
12906: LD_LOC 18
12910: PUSH
12911: LD_VAR 0 1
12915: DIFF
12916: ST_TO_ADDR
12917: GO 12973
// if check_one_side ( un , positions [ 1 ] ) then
12919: LD_VAR 0 1
12923: PPUSH
12924: LD_EXP 39
12928: PUSH
12929: LD_INT 1
12931: ARRAY
12932: PPUSH
12933: CALL 12203 0 2
12937: IFFALSE 12973
// begin SetSide ( un , positions [ 1 ] ) ;
12939: LD_VAR 0 1
12943: PPUSH
12944: LD_EXP 39
12948: PUSH
12949: LD_INT 1
12951: ARRAY
12952: PPUSH
12953: CALL_OW 235
// free1 := free1 diff un ;
12957: LD_ADDR_LOC 18
12961: PUSH
12962: LD_LOC 18
12966: PUSH
12967: LD_VAR 0 1
12971: DIFF
12972: ST_TO_ADDR
// end ;
12973: GO 12886
12975: POP
12976: POP
// for un in free2 do
12977: LD_ADDR_VAR 0 1
12981: PUSH
12982: LD_LOC 19
12986: PUSH
12987: FOR_IN
12988: IFFALSE 13076
// if not IsLive ( un ) then
12990: LD_VAR 0 1
12994: PPUSH
12995: CALL_OW 300
12999: NOT
13000: IFFALSE 13020
// free2 := free2 diff un else
13002: LD_ADDR_LOC 19
13006: PUSH
13007: LD_LOC 19
13011: PUSH
13012: LD_VAR 0 1
13016: DIFF
13017: ST_TO_ADDR
13018: GO 13074
// if check_one_side ( un , positions [ 2 ] ) then
13020: LD_VAR 0 1
13024: PPUSH
13025: LD_EXP 39
13029: PUSH
13030: LD_INT 2
13032: ARRAY
13033: PPUSH
13034: CALL 12203 0 2
13038: IFFALSE 13074
// begin SetSide ( un , positions [ 2 ] ) ;
13040: LD_VAR 0 1
13044: PPUSH
13045: LD_EXP 39
13049: PUSH
13050: LD_INT 2
13052: ARRAY
13053: PPUSH
13054: CALL_OW 235
// free2 := free2 diff un ;
13058: LD_ADDR_LOC 19
13062: PUSH
13063: LD_LOC 19
13067: PUSH
13068: LD_VAR 0 1
13072: DIFF
13073: ST_TO_ADDR
// end ;
13074: GO 12987
13076: POP
13077: POP
// end else
13078: GO 13202
// begin for un in free do
13080: LD_ADDR_VAR 0 1
13084: PUSH
13085: LD_LOC 17
13089: PUSH
13090: FOR_IN
13091: IFFALSE 13200
// if not IsLive ( un ) then
13093: LD_VAR 0 1
13097: PPUSH
13098: CALL_OW 300
13102: NOT
13103: IFFALSE 13123
// free := free diff un else
13105: LD_ADDR_LOC 17
13109: PUSH
13110: LD_LOC 17
13114: PUSH
13115: LD_VAR 0 1
13119: DIFF
13120: ST_TO_ADDR
13121: GO 13198
// begin s := check_two_sides ( un , positions [ 1 ] , positions [ 2 ] ) ;
13123: LD_ADDR_VAR 0 2
13127: PUSH
13128: LD_VAR 0 1
13132: PPUSH
13133: LD_EXP 39
13137: PUSH
13138: LD_INT 1
13140: ARRAY
13141: PPUSH
13142: LD_EXP 39
13146: PUSH
13147: LD_INT 2
13149: ARRAY
13150: PPUSH
13151: CALL 12280 0 3
13155: ST_TO_ADDR
// if s then
13156: LD_VAR 0 2
13160: IFFALSE 13198
// begin SetSide ( un , positions [ s ] ) ;
13162: LD_VAR 0 1
13166: PPUSH
13167: LD_EXP 39
13171: PUSH
13172: LD_VAR 0 2
13176: ARRAY
13177: PPUSH
13178: CALL_OW 235
// free := free diff un ;
13182: LD_ADDR_LOC 17
13186: PUSH
13187: LD_LOC 17
13191: PUSH
13192: LD_VAR 0 1
13196: DIFF
13197: ST_TO_ADDR
// end ; end ;
13198: GO 13090
13200: POP
13201: POP
// end ; enable ;
13202: ENABLE
// end ; end_of_file
13203: PPOPN 2
13205: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
13206: LD_INT 0
13208: PPUSH
13209: PPUSH
13210: PPUSH
// enable ( 600 ) ;
13211: LD_INT 600
13213: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
13214: LD_ADDR_VAR 0 2
13218: PUSH
13219: DOUBLE
13220: LD_INT 1
13222: DEC
13223: ST_TO_ADDR
13224: LD_EXP 58
13228: PUSH
13229: FOR_TO
13230: IFFALSE 13385
// if Position_Sides [ i ] then
13232: LD_EXP 46
13236: PUSH
13237: LD_VAR 0 2
13241: ARRAY
13242: IFFALSE 13383
// for j := 1 to 8 do
13244: LD_ADDR_VAR 0 3
13248: PUSH
13249: DOUBLE
13250: LD_INT 1
13252: DEC
13253: ST_TO_ADDR
13254: LD_INT 8
13256: PUSH
13257: FOR_TO
13258: IFFALSE 13381
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13260: LD_EXP 43
13264: PUSH
13265: LD_VAR 0 3
13269: ARRAY
13270: PUSH
13271: LD_EXP 40
13275: PUSH
13276: LD_EXP 46
13280: PUSH
13281: LD_VAR 0 2
13285: ARRAY
13286: ARRAY
13287: PUSH
13288: LD_EXP 40
13292: PUSH
13293: LD_VAR 0 3
13297: ARRAY
13298: NONEQUAL
13299: PUSH
13300: LD_EXP 45
13304: NOT
13305: PUSH
13306: LD_EXP 46
13310: PUSH
13311: LD_VAR 0 2
13315: ARRAY
13316: PUSH
13317: LD_VAR 0 3
13321: NONEQUAL
13322: AND
13323: OR
13324: AND
13325: IFFALSE 13349
// HideArea ( j , BuildUpAreas [ i ] ) else
13327: LD_VAR 0 3
13331: PPUSH
13332: LD_EXP 58
13336: PUSH
13337: LD_VAR 0 2
13341: ARRAY
13342: PPUSH
13343: CALL_OW 333
13347: GO 13379
// if ( j = your_side ) then
13349: LD_VAR 0 3
13353: PUSH
13354: LD_OWVAR 2
13358: EQUAL
13359: IFFALSE 13379
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
13361: LD_EXP 58
13365: PUSH
13366: LD_VAR 0 2
13370: ARRAY
13371: PPUSH
13372: LD_INT 5
13374: PPUSH
13375: CALL_OW 424
13379: GO 13257
13381: POP
13382: POP
13383: GO 13229
13385: POP
13386: POP
// end ;
13387: LD_VAR 0 1
13391: RET
// export function EndBuildUp ; var i , j ; begin
13392: LD_INT 0
13394: PPUSH
13395: PPUSH
13396: PPUSH
// disable ( 600 ) ;
13397: LD_INT 600
13399: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
13400: LD_ADDR_VAR 0 2
13404: PUSH
13405: DOUBLE
13406: LD_INT 1
13408: DEC
13409: ST_TO_ADDR
13410: LD_EXP 58
13414: PUSH
13415: FOR_TO
13416: IFFALSE 13571
// if Position_Sides [ i ] then
13418: LD_EXP 46
13422: PUSH
13423: LD_VAR 0 2
13427: ARRAY
13428: IFFALSE 13569
// for j := 1 to 8 do
13430: LD_ADDR_VAR 0 3
13434: PUSH
13435: DOUBLE
13436: LD_INT 1
13438: DEC
13439: ST_TO_ADDR
13440: LD_INT 8
13442: PUSH
13443: FOR_TO
13444: IFFALSE 13567
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13446: LD_EXP 43
13450: PUSH
13451: LD_VAR 0 3
13455: ARRAY
13456: PUSH
13457: LD_EXP 40
13461: PUSH
13462: LD_EXP 46
13466: PUSH
13467: LD_VAR 0 2
13471: ARRAY
13472: ARRAY
13473: PUSH
13474: LD_EXP 40
13478: PUSH
13479: LD_VAR 0 3
13483: ARRAY
13484: NONEQUAL
13485: PUSH
13486: LD_EXP 45
13490: NOT
13491: PUSH
13492: LD_EXP 46
13496: PUSH
13497: LD_VAR 0 2
13501: ARRAY
13502: PUSH
13503: LD_VAR 0 3
13507: NONEQUAL
13508: AND
13509: OR
13510: AND
13511: IFFALSE 13535
// ShowArea ( j , BuildUpAreas [ i ] ) else
13513: LD_VAR 0 3
13517: PPUSH
13518: LD_EXP 58
13522: PUSH
13523: LD_VAR 0 2
13527: ARRAY
13528: PPUSH
13529: CALL_OW 334
13533: GO 13565
// if ( j = your_side ) then
13535: LD_VAR 0 3
13539: PUSH
13540: LD_OWVAR 2
13544: EQUAL
13545: IFFALSE 13565
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
13547: LD_EXP 58
13551: PUSH
13552: LD_VAR 0 2
13556: ARRAY
13557: PPUSH
13558: LD_INT 0
13560: PPUSH
13561: CALL_OW 424
13565: GO 13443
13567: POP
13568: POP
13569: GO 13415
13571: POP
13572: POP
// end ;
13573: LD_VAR 0 1
13577: RET
// every 5 marked 600 do var i , un ;
13578: GO 13580
13580: DISABLE
13581: LD_INT 0
13583: PPUSH
13584: PPUSH
// begin for i := 1 to BuildUpAreas do
13585: LD_ADDR_VAR 0 1
13589: PUSH
13590: DOUBLE
13591: LD_INT 1
13593: DEC
13594: ST_TO_ADDR
13595: LD_EXP 58
13599: PUSH
13600: FOR_TO
13601: IFFALSE 13756
// if Position_Sides [ i ] then
13603: LD_EXP 46
13607: PUSH
13608: LD_VAR 0 1
13612: ARRAY
13613: IFFALSE 13754
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13615: LD_ADDR_VAR 0 2
13619: PUSH
13620: LD_EXP 58
13624: PUSH
13625: LD_VAR 0 1
13629: ARRAY
13630: PPUSH
13631: LD_INT 2
13633: PUSH
13634: LD_INT 21
13636: PUSH
13637: LD_INT 1
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 21
13646: PUSH
13647: LD_INT 2
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: LIST
13658: PUSH
13659: LD_INT 22
13661: PUSH
13662: LD_OWVAR 2
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PPUSH
13675: CALL_OW 70
13679: PUSH
13680: FOR_IN
13681: IFFALSE 13752
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
13683: LD_EXP 40
13687: PUSH
13688: LD_EXP 46
13692: PUSH
13693: LD_VAR 0 1
13697: ARRAY
13698: ARRAY
13699: PUSH
13700: LD_EXP 40
13704: PUSH
13705: LD_OWVAR 2
13709: ARRAY
13710: NONEQUAL
13711: PUSH
13712: LD_EXP 45
13716: NOT
13717: PUSH
13718: LD_EXP 46
13722: PUSH
13723: LD_VAR 0 1
13727: ARRAY
13728: PUSH
13729: LD_OWVAR 2
13733: NONEQUAL
13734: AND
13735: OR
13736: IFFALSE 13750
// ComMoveToArea ( un , BuildUpEscape ) ;
13738: LD_VAR 0 2
13742: PPUSH
13743: LD_INT 28
13745: PPUSH
13746: CALL_OW 113
13750: GO 13680
13752: POP
13753: POP
13754: GO 13600
13756: POP
13757: POP
// enable ;
13758: ENABLE
// end ;
13759: PPOPN 2
13761: END
// every 5 5$00 do
13762: GO 13764
13764: DISABLE
// if ( def_builduptime = 1 ) then
13765: LD_EXP 17
13769: PUSH
13770: LD_INT 1
13772: EQUAL
13773: IFFALSE 13779
// EndBuildUp ;
13775: CALL 13392 0 0
13779: END
// every 10 10$00 do
13780: GO 13782
13782: DISABLE
// if ( def_builduptime = 2 ) then
13783: LD_EXP 17
13787: PUSH
13788: LD_INT 2
13790: EQUAL
13791: IFFALSE 13797
// EndBuildUp ;
13793: CALL 13392 0 0
13797: END
// every 15 15$00 do
13798: GO 13800
13800: DISABLE
// if ( def_builduptime = 3 ) then
13801: LD_EXP 17
13805: PUSH
13806: LD_INT 3
13808: EQUAL
13809: IFFALSE 13815
// EndBuildUp ; end_of_file
13811: CALL 13392 0 0
13815: END
// export Game_Type , def_game_rules ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
13816: LD_INT 0
13818: PPUSH
13819: PPUSH
// if ( not IAmSpec ) then
13820: CALL_OW 531
13824: NOT
13825: IFFALSE 13841
// Result := Limits_Info ^  ;
13827: LD_ADDR_VAR 0 1
13831: PUSH
13832: LD_LOC 33
13836: PUSH
13837: LD_STRING 
13839: ADD
13840: ST_TO_ADDR
// for i := 1 to 8 do
13841: LD_ADDR_VAR 0 2
13845: PUSH
13846: DOUBLE
13847: LD_INT 1
13849: DEC
13850: ST_TO_ADDR
13851: LD_INT 8
13853: PUSH
13854: FOR_TO
13855: IFFALSE 13900
// if Cheaters [ i ] then
13857: LD_LOC 34
13861: PUSH
13862: LD_VAR 0 2
13866: ARRAY
13867: IFFALSE 13898
// Result := Result ^ [ #Cheater , i , i ] ;
13869: LD_ADDR_VAR 0 1
13873: PUSH
13874: LD_VAR 0 1
13878: PUSH
13879: LD_STRING #Cheater
13881: PUSH
13882: LD_VAR 0 2
13886: PUSH
13887: LD_VAR 0 2
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: LIST
13896: ADD
13897: ST_TO_ADDR
13898: GO 13854
13900: POP
13901: POP
// end ;
13902: LD_VAR 0 1
13906: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
13907: LD_INT 0
13909: PPUSH
13910: PPUSH
13911: PPUSH
13912: PPUSH
13913: PPUSH
// case Game_Type of 10 :
13914: LD_EXP 59
13918: PUSH
13919: LD_INT 10
13921: DOUBLE
13922: EQUAL
13923: IFTRUE 13927
13925: GO 13938
13927: POP
// def_game_rules := 1 ; 11 :
13928: LD_ADDR_EXP 60
13932: PUSH
13933: LD_INT 1
13935: ST_TO_ADDR
13936: GO 13958
13938: LD_INT 11
13940: DOUBLE
13941: EQUAL
13942: IFTRUE 13946
13944: GO 13957
13946: POP
// def_game_rules := 3 ; end ;
13947: LD_ADDR_EXP 60
13951: PUSH
13952: LD_INT 3
13954: ST_TO_ADDR
13955: GO 13958
13957: POP
// case def_game_rules of 0 :
13958: LD_EXP 60
13962: PUSH
13963: LD_INT 0
13965: DOUBLE
13966: EQUAL
13967: IFTRUE 13971
13969: GO 13976
13971: POP
// exit ; 1 :
13972: GO 14584
13974: GO 14484
13976: LD_INT 1
13978: DOUBLE
13979: EQUAL
13980: IFTRUE 13984
13982: GO 14216
13984: POP
// begin def_main_base = 1 ;
13985: LD_ADDR_EXP 1
13989: PUSH
13990: LD_INT 1
13992: ST_TO_ADDR
// def_secondary_base = 0 ;
13993: LD_ADDR_EXP 2
13997: PUSH
13998: LD_INT 0
14000: ST_TO_ADDR
// def_defence_level = 1 ;
14001: LD_ADDR_EXP 3
14005: PUSH
14006: LD_INT 1
14008: ST_TO_ADDR
// def_amount_of_people = 2 ;
14009: LD_ADDR_EXP 4
14013: PUSH
14014: LD_INT 2
14016: ST_TO_ADDR
// def_initial_level = 1 ;
14017: LD_ADDR_EXP 5
14021: PUSH
14022: LD_INT 1
14024: ST_TO_ADDR
// def_main_deposits = 2 ;
14025: LD_ADDR_EXP 6
14029: PUSH
14030: LD_INT 2
14032: ST_TO_ADDR
// def_secondary_deposits = 1 ;
14033: LD_ADDR_EXP 7
14037: PUSH
14038: LD_INT 1
14040: ST_TO_ADDR
// def_siberite_detection = 1 ;
14041: LD_ADDR_EXP 8
14045: PUSH
14046: LD_INT 1
14048: ST_TO_ADDR
// def_starting_resources = 2 ;
14049: LD_ADDR_EXP 9
14053: PUSH
14054: LD_INT 2
14056: ST_TO_ADDR
// def_shipments_density = 1 ;
14057: LD_ADDR_EXP 10
14061: PUSH
14062: LD_INT 1
14064: ST_TO_ADDR
// def_people_arrivals = 0 ;
14065: LD_ADDR_EXP 11
14069: PUSH
14070: LD_INT 0
14072: ST_TO_ADDR
// def_people_loyality = 0 ;
14073: LD_ADDR_EXP 12
14077: PUSH
14078: LD_INT 0
14080: ST_TO_ADDR
// def_people_info = 0 ;
14081: LD_ADDR_EXP 13
14085: PUSH
14086: LD_INT 0
14088: ST_TO_ADDR
// def_morale_flags = 1 ;
14089: LD_ADDR_EXP 14
14093: PUSH
14094: LD_INT 1
14096: ST_TO_ADDR
// def_siberite_bomb = 0 ;
14097: LD_ADDR_EXP 15
14101: PUSH
14102: LD_INT 0
14104: ST_TO_ADDR
// def_builduptime = 2 ;
14105: LD_ADDR_EXP 17
14109: PUSH
14110: LD_INT 2
14112: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
14113: LD_ADDR_VAR 0 2
14117: PUSH
14118: EMPTY
14119: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14120: LD_ADDR_VAR 0 3
14124: PUSH
14125: EMPTY
14126: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14127: LD_ADDR_LOC 28
14131: PUSH
14132: EMPTY
14133: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14134: LD_ADDR_LOC 29
14138: PUSH
14139: EMPTY
14140: ST_TO_ADDR
// Banned_Controls := [ ] ;
14141: LD_ADDR_LOC 30
14145: PUSH
14146: EMPTY
14147: ST_TO_ADDR
// Banned_Engines := [ ] ;
14148: LD_ADDR_LOC 31
14152: PUSH
14153: EMPTY
14154: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14155: LD_ADDR_LOC 26
14159: PUSH
14160: LD_INT 37
14162: PUSH
14163: EMPTY
14164: LIST
14165: PUSH
14166: LD_INT 4
14168: PUSH
14169: LD_INT 5
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: LD_INT 31
14178: PUSH
14179: LD_INT 32
14181: PUSH
14182: LD_INT 33
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: LIST
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: LIST
14194: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
14195: LD_ADDR_LOC 27
14199: PUSH
14200: LD_INT 2
14202: PUSH
14203: LD_INT 2
14205: PUSH
14206: LD_INT 4
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: LIST
14213: ST_TO_ADDR
// end ; 3 :
14214: GO 14484
14216: LD_INT 3
14218: DOUBLE
14219: EQUAL
14220: IFTRUE 14224
14222: GO 14483
14224: POP
// begin def_main_base = 1 ;
14225: LD_ADDR_EXP 1
14229: PUSH
14230: LD_INT 1
14232: ST_TO_ADDR
// def_secondary_base = 0 ;
14233: LD_ADDR_EXP 2
14237: PUSH
14238: LD_INT 0
14240: ST_TO_ADDR
// def_defence_level = 0 ;
14241: LD_ADDR_EXP 3
14245: PUSH
14246: LD_INT 0
14248: ST_TO_ADDR
// def_amount_of_people = 2 ;
14249: LD_ADDR_EXP 4
14253: PUSH
14254: LD_INT 2
14256: ST_TO_ADDR
// def_initial_level = 3 ;
14257: LD_ADDR_EXP 5
14261: PUSH
14262: LD_INT 3
14264: ST_TO_ADDR
// def_main_deposits = 2 ;
14265: LD_ADDR_EXP 6
14269: PUSH
14270: LD_INT 2
14272: ST_TO_ADDR
// def_secondary_deposits = 1 ;
14273: LD_ADDR_EXP 7
14277: PUSH
14278: LD_INT 1
14280: ST_TO_ADDR
// def_siberite_detection = 1 ;
14281: LD_ADDR_EXP 8
14285: PUSH
14286: LD_INT 1
14288: ST_TO_ADDR
// def_starting_resources = 3 ;
14289: LD_ADDR_EXP 9
14293: PUSH
14294: LD_INT 3
14296: ST_TO_ADDR
// def_shipments_density = 1 ;
14297: LD_ADDR_EXP 10
14301: PUSH
14302: LD_INT 1
14304: ST_TO_ADDR
// def_people_arrivals = 0 ;
14305: LD_ADDR_EXP 11
14309: PUSH
14310: LD_INT 0
14312: ST_TO_ADDR
// def_people_loyality = 0 ;
14313: LD_ADDR_EXP 12
14317: PUSH
14318: LD_INT 0
14320: ST_TO_ADDR
// def_people_info = 0 ;
14321: LD_ADDR_EXP 13
14325: PUSH
14326: LD_INT 0
14328: ST_TO_ADDR
// def_morale_flags = 0 ;
14329: LD_ADDR_EXP 14
14333: PUSH
14334: LD_INT 0
14336: ST_TO_ADDR
// def_siberite_bomb = 0 ;
14337: LD_ADDR_EXP 15
14341: PUSH
14342: LD_INT 0
14344: ST_TO_ADDR
// def_builduptime = 1 ;
14345: LD_ADDR_EXP 17
14349: PUSH
14350: LD_INT 1
14352: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14353: LD_ADDR_VAR 0 2
14357: PUSH
14358: LD_INT 23
14360: PUSH
14361: EMPTY
14362: LIST
14363: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
14364: LD_ADDR_VAR 0 3
14368: PUSH
14369: LD_INT 2
14371: PUSH
14372: LD_INT 37
14374: PUSH
14375: LD_INT 32
14377: PUSH
14378: LD_INT 33
14380: PUSH
14381: LD_INT 36
14383: PUSH
14384: LD_INT 16
14386: PUSH
14387: LD_INT 23
14389: PUSH
14390: LD_INT 21
14392: PUSH
14393: LD_INT 18
14395: PUSH
14396: LD_INT 22
14398: PUSH
14399: LD_INT 20
14401: PUSH
14402: LD_INT 19
14404: PUSH
14405: LD_INT 25
14407: PUSH
14408: LD_INT 17
14410: PUSH
14411: LD_INT 24
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14431: LD_ADDR_LOC 28
14435: PUSH
14436: EMPTY
14437: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14438: LD_ADDR_LOC 29
14442: PUSH
14443: EMPTY
14444: ST_TO_ADDR
// Banned_Controls := [ ] ;
14445: LD_ADDR_LOC 30
14449: PUSH
14450: EMPTY
14451: ST_TO_ADDR
// Banned_Engines := [ ] ;
14452: LD_ADDR_LOC 31
14456: PUSH
14457: EMPTY
14458: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14459: LD_ADDR_LOC 26
14463: PUSH
14464: EMPTY
14465: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14466: LD_ADDR_LOC 27
14470: PUSH
14471: EMPTY
14472: ST_TO_ADDR
// No_Mechs := true ;
14473: LD_ADDR_EXP 61
14477: PUSH
14478: LD_INT 1
14480: ST_TO_ADDR
// end ; end ;
14481: GO 14484
14483: POP
// for i := 1 to 8 do
14484: LD_ADDR_VAR 0 4
14488: PUSH
14489: DOUBLE
14490: LD_INT 1
14492: DEC
14493: ST_TO_ADDR
14494: LD_INT 8
14496: PUSH
14497: FOR_TO
14498: IFFALSE 14582
// if Side_Positions [ i ] then
14500: LD_EXP 43
14504: PUSH
14505: LD_VAR 0 4
14509: ARRAY
14510: IFFALSE 14580
// begin for j in Unavailable_Techs do
14512: LD_ADDR_VAR 0 5
14516: PUSH
14517: LD_VAR 0 2
14521: PUSH
14522: FOR_IN
14523: IFFALSE 14544
// SetTech ( j , i , 0 ) ;
14525: LD_VAR 0 5
14529: PPUSH
14530: LD_VAR 0 4
14534: PPUSH
14535: LD_INT 0
14537: PPUSH
14538: CALL_OW 322
14542: GO 14522
14544: POP
14545: POP
// for j in Unavailable_Builds do
14546: LD_ADDR_VAR 0 5
14550: PUSH
14551: LD_VAR 0 3
14555: PUSH
14556: FOR_IN
14557: IFFALSE 14578
// SetRestrict ( j , i , 0 ) ;
14559: LD_VAR 0 5
14563: PPUSH
14564: LD_VAR 0 4
14568: PPUSH
14569: LD_INT 0
14571: PPUSH
14572: CALL_OW 324
14576: GO 14556
14578: POP
14579: POP
// end ;
14580: GO 14497
14582: POP
14583: POP
// end ;
14584: LD_VAR 0 1
14588: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
14589: LD_INT 0
14591: PPUSH
14592: PPUSH
14593: PPUSH
14594: PPUSH
14595: PPUSH
14596: PPUSH
14597: PPUSH
// for i := 1 to Restricted_Builds do
14598: LD_ADDR_VAR 0 2
14602: PUSH
14603: DOUBLE
14604: LD_INT 1
14606: DEC
14607: ST_TO_ADDR
14608: LD_LOC 26
14612: PUSH
14613: FOR_TO
14614: IFFALSE 14924
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
14616: LD_LOC 26
14620: PUSH
14621: LD_VAR 0 2
14625: ARRAY
14626: PUSH
14627: LD_INT 1
14629: ARRAY
14630: PUSH
14631: LD_INT 31
14633: DOUBLE
14634: EQUAL
14635: IFTRUE 14651
14637: LD_INT 32
14639: DOUBLE
14640: EQUAL
14641: IFTRUE 14651
14643: LD_INT 33
14645: DOUBLE
14646: EQUAL
14647: IFTRUE 14651
14649: GO 14662
14651: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
14652: LD_ADDR_VAR 0 6
14656: PUSH
14657: LD_STRING #Turrets
14659: ST_TO_ADDR
14660: GO 14707
14662: LD_INT 4
14664: DOUBLE
14665: EQUAL
14666: IFTRUE 14676
14668: LD_INT 5
14670: DOUBLE
14671: EQUAL
14672: IFTRUE 14676
14674: GO 14687
14676: POP
// btype := #Armouries ; b_Behemoth :
14677: LD_ADDR_VAR 0 6
14681: PUSH
14682: LD_STRING #Armouries
14684: ST_TO_ADDR
14685: GO 14707
14687: LD_INT 37
14689: DOUBLE
14690: EQUAL
14691: IFTRUE 14695
14693: GO 14706
14695: POP
// btype := #Behemoths ; end ;
14696: LD_ADDR_VAR 0 6
14700: PUSH
14701: LD_STRING #Behemoths
14703: ST_TO_ADDR
14704: GO 14707
14706: POP
// list := [ ] ;
14707: LD_ADDR_VAR 0 7
14711: PUSH
14712: EMPTY
14713: ST_TO_ADDR
// for j := 1 to 8 do
14714: LD_ADDR_VAR 0 3
14718: PUSH
14719: DOUBLE
14720: LD_INT 1
14722: DEC
14723: ST_TO_ADDR
14724: LD_INT 8
14726: PUSH
14727: FOR_TO
14728: IFFALSE 14821
// if Side_Positions [ j ] then
14730: LD_EXP 43
14734: PUSH
14735: LD_VAR 0 3
14739: ARRAY
14740: IFFALSE 14819
// begin amount := 0 ;
14742: LD_ADDR_VAR 0 5
14746: PUSH
14747: LD_INT 0
14749: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
14750: LD_ADDR_VAR 0 4
14754: PUSH
14755: LD_LOC 26
14759: PUSH
14760: LD_VAR 0 2
14764: ARRAY
14765: PUSH
14766: FOR_IN
14767: IFFALSE 14815
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
14769: LD_ADDR_VAR 0 5
14773: PUSH
14774: LD_VAR 0 5
14778: PUSH
14779: LD_INT 22
14781: PUSH
14782: LD_VAR 0 3
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: PUSH
14791: LD_INT 30
14793: PUSH
14794: LD_VAR 0 4
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PPUSH
14807: CALL_OW 69
14811: PLUS
14812: ST_TO_ADDR
14813: GO 14766
14815: POP
14816: POP
// break ;
14817: GO 14821
// end ;
14819: GO 14727
14821: POP
14822: POP
// list := [ ] ;
14823: LD_ADDR_VAR 0 7
14827: PUSH
14828: EMPTY
14829: ST_TO_ADDR
// for j := 1 to 8 do
14830: LD_ADDR_VAR 0 3
14834: PUSH
14835: DOUBLE
14836: LD_INT 1
14838: DEC
14839: ST_TO_ADDR
14840: LD_INT 8
14842: PUSH
14843: FOR_TO
14844: IFFALSE 14864
// list := list ^ amount ;
14846: LD_ADDR_VAR 0 7
14850: PUSH
14851: LD_VAR 0 7
14855: PUSH
14856: LD_VAR 0 5
14860: ADD
14861: ST_TO_ADDR
14862: GO 14843
14864: POP
14865: POP
// Already_Built := Already_Built ^ [ list ] ;
14866: LD_ADDR_LOC 32
14870: PUSH
14871: LD_LOC 32
14875: PUSH
14876: LD_VAR 0 7
14880: PUSH
14881: EMPTY
14882: LIST
14883: ADD
14884: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
14885: LD_ADDR_LOC 33
14889: PUSH
14890: LD_LOC 33
14894: PUSH
14895: LD_VAR 0 6
14899: PUSH
14900: LD_VAR 0 5
14904: PUSH
14905: LD_LOC 27
14909: PUSH
14910: LD_VAR 0 2
14914: ARRAY
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: LIST
14920: ADD
14921: ST_TO_ADDR
// end ;
14922: GO 14613
14924: POP
14925: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14926: LD_ADDR_LOC 34
14930: PUSH
14931: LD_INT 0
14933: PUSH
14934: LD_INT 0
14936: PUSH
14937: LD_INT 0
14939: PUSH
14940: LD_INT 0
14942: PUSH
14943: LD_INT 0
14945: PUSH
14946: LD_INT 0
14948: PUSH
14949: LD_INT 0
14951: PUSH
14952: LD_INT 0
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: ST_TO_ADDR
// if Limits_Info then
14965: LD_LOC 33
14969: IFFALSE 14985
// Limits_Info := #Limits ^ Limits_Info ;
14971: LD_ADDR_LOC 33
14975: PUSH
14976: LD_STRING #Limits
14978: PUSH
14979: LD_LOC 33
14983: ADD
14984: ST_TO_ADDR
// end ;
14985: LD_VAR 0 1
14989: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
14990: LD_INT 0
14992: PPUSH
14993: PPUSH
14994: PPUSH
14995: PPUSH
// for i := 1 to Restricted_Builds do
14996: LD_ADDR_VAR 0 7
15000: PUSH
15001: DOUBLE
15002: LD_INT 1
15004: DEC
15005: ST_TO_ADDR
15006: LD_LOC 26
15010: PUSH
15011: FOR_TO
15012: IFFALSE 15435
// if BType in Restricted_Builds [ i ] then
15014: LD_VAR 0 2
15018: PUSH
15019: LD_LOC 26
15023: PUSH
15024: LD_VAR 0 7
15028: ARRAY
15029: IN
15030: IFFALSE 15433
// begin if old_side then
15032: LD_VAR 0 4
15036: IFFALSE 15162
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
15038: LD_LOC 32
15042: PUSH
15043: LD_VAR 0 7
15047: ARRAY
15048: PUSH
15049: LD_VAR 0 3
15053: ARRAY
15054: PUSH
15055: LD_VAR 0 5
15059: PLUS
15060: PUSH
15061: LD_LOC 27
15065: PUSH
15066: LD_VAR 0 7
15070: ARRAY
15071: GREATER
15072: IFFALSE 15098
// begin SetSide ( un , old_side ) ;
15074: LD_VAR 0 1
15078: PPUSH
15079: LD_VAR 0 4
15083: PPUSH
15084: CALL_OW 235
// count := 0 ;
15088: LD_ADDR_VAR 0 5
15092: PUSH
15093: LD_INT 0
15095: ST_TO_ADDR
// end else
15096: GO 15162
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
15098: LD_ADDR_LOC 32
15102: PUSH
15103: LD_LOC 32
15107: PPUSH
15108: LD_VAR 0 7
15112: PPUSH
15113: LD_LOC 32
15117: PUSH
15118: LD_VAR 0 7
15122: ARRAY
15123: PPUSH
15124: LD_VAR 0 4
15128: PPUSH
15129: LD_LOC 32
15133: PUSH
15134: LD_VAR 0 7
15138: ARRAY
15139: PUSH
15140: LD_VAR 0 4
15144: ARRAY
15145: PUSH
15146: LD_VAR 0 5
15150: MINUS
15151: PPUSH
15152: CALL_OW 1
15156: PPUSH
15157: CALL_OW 1
15161: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
15162: LD_ADDR_LOC 32
15166: PUSH
15167: LD_LOC 32
15171: PPUSH
15172: LD_VAR 0 7
15176: PPUSH
15177: LD_LOC 32
15181: PUSH
15182: LD_VAR 0 7
15186: ARRAY
15187: PPUSH
15188: LD_VAR 0 3
15192: PPUSH
15193: LD_LOC 32
15197: PUSH
15198: LD_VAR 0 7
15202: ARRAY
15203: PUSH
15204: LD_VAR 0 3
15208: ARRAY
15209: PUSH
15210: LD_VAR 0 5
15214: PLUS
15215: PPUSH
15216: CALL_OW 1
15220: PPUSH
15221: CALL_OW 1
15225: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
15226: LD_VAR 0 5
15230: PUSH
15231: LD_INT 0
15233: NONEQUAL
15234: PUSH
15235: LD_VAR 0 3
15239: PUSH
15240: LD_OWVAR 2
15244: EQUAL
15245: AND
15246: IFFALSE 15289
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
15248: LD_ADDR_LOC 33
15252: PUSH
15253: LD_LOC 33
15257: PPUSH
15258: LD_INT 3
15260: PUSH
15261: LD_VAR 0 7
15265: MUL
15266: PPUSH
15267: LD_LOC 32
15271: PUSH
15272: LD_VAR 0 7
15276: ARRAY
15277: PUSH
15278: LD_VAR 0 3
15282: ARRAY
15283: PPUSH
15284: CALL_OW 1
15288: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
15289: LD_LOC 32
15293: PUSH
15294: LD_VAR 0 7
15298: ARRAY
15299: PUSH
15300: LD_VAR 0 3
15304: ARRAY
15305: PUSH
15306: LD_LOC 27
15310: PUSH
15311: LD_VAR 0 7
15315: ARRAY
15316: GREATER
15317: IFFALSE 15344
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
15319: LD_ADDR_LOC 34
15323: PUSH
15324: LD_LOC 34
15328: PPUSH
15329: LD_VAR 0 3
15333: PPUSH
15334: LD_INT 1
15336: PPUSH
15337: CALL_OW 1
15341: ST_TO_ADDR
// end else
15342: GO 15431
// begin for j := 1 to Restricted_Builds do
15344: LD_ADDR_VAR 0 8
15348: PUSH
15349: DOUBLE
15350: LD_INT 1
15352: DEC
15353: ST_TO_ADDR
15354: LD_LOC 26
15358: PUSH
15359: FOR_TO
15360: IFFALSE 15404
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
15362: LD_LOC 32
15366: PUSH
15367: LD_VAR 0 8
15371: ARRAY
15372: PUSH
15373: LD_VAR 0 3
15377: ARRAY
15378: PUSH
15379: LD_LOC 27
15383: PUSH
15384: LD_VAR 0 8
15388: ARRAY
15389: GREATER
15390: IFFALSE 15402
// begin Is_Cheater := true ;
15392: LD_ADDR_VAR 0 9
15396: PUSH
15397: LD_INT 1
15399: ST_TO_ADDR
// break ;
15400: GO 15404
// end ;
15402: GO 15359
15404: POP
15405: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
15406: LD_ADDR_LOC 34
15410: PUSH
15411: LD_LOC 34
15415: PPUSH
15416: LD_VAR 0 3
15420: PPUSH
15421: LD_VAR 0 9
15425: PPUSH
15426: CALL_OW 1
15430: ST_TO_ADDR
// end ; break ;
15431: GO 15435
// end ;
15433: GO 15011
15435: POP
15436: POP
// end ;
15437: LD_VAR 0 6
15441: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
15442: LD_VAR 0 5
15446: PUSH
15447: LD_LOC 28
15451: IN
15452: PUSH
15453: LD_VAR 0 2
15457: PUSH
15458: LD_LOC 29
15462: IN
15463: OR
15464: PUSH
15465: LD_VAR 0 4
15469: PUSH
15470: LD_LOC 30
15474: IN
15475: OR
15476: PUSH
15477: LD_VAR 0 3
15481: PUSH
15482: LD_LOC 31
15486: IN
15487: OR
15488: IFFALSE 15499
// ComCancel ( factory ) ;
15490: LD_VAR 0 1
15494: PPUSH
15495: CALL_OW 127
// end ;
15499: PPOPN 5
15501: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
15502: LD_VAR 0 2
15506: PUSH
15507: LD_LOC 28
15511: IN
15512: IFFALSE 15523
// ComCancel ( building ) ;
15514: LD_VAR 0 1
15518: PPUSH
15519: CALL_OW 127
// end ; end_of_file
15523: PPOPN 2
15525: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
15526: LD_INT 0
15528: PPUSH
15529: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
15530: LD_ADDR_VAR 0 2
15534: PUSH
15535: LD_STRING #Multi1x1-Time
15537: PUSH
15538: LD_OWVAR 1
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: ST_TO_ADDR
// if WaitServerStrings then
15547: LD_EXP 63
15551: IFFALSE 15569
// AllStrings = AllStrings ^ WaitServerStrings ;
15553: LD_ADDR_VAR 0 2
15557: PUSH
15558: LD_VAR 0 2
15562: PUSH
15563: LD_EXP 63
15567: ADD
15568: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
15569: LD_INT 0
15571: PUSH
15572: LD_EXP 38
15576: PUSH
15577: LD_OWVAR 1
15581: MINUS
15582: LESSEQUAL
15583: IFFALSE 15614
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
15585: LD_ADDR_VAR 0 2
15589: PUSH
15590: LD_VAR 0 2
15594: PUSH
15595: LD_STRING #allowedsibbomb
15597: PUSH
15598: LD_EXP 38
15602: PUSH
15603: LD_OWVAR 1
15607: MINUS
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: ADD
15613: ST_TO_ADDR
// if ( ExtraStrings ) then
15614: LD_EXP 62
15618: IFFALSE 15640
// AllStrings := AllStrings ^  ^ ExtraStrings ;
15620: LD_ADDR_VAR 0 2
15624: PUSH
15625: LD_VAR 0 2
15629: PUSH
15630: LD_STRING 
15632: ADD
15633: PUSH
15634: LD_EXP 62
15638: ADD
15639: ST_TO_ADDR
// if ( LimitsStrings ) then
15640: CALL 13816 0 0
15644: IFFALSE 15666
// AllStrings := AllStrings ^  ^ LimitsStrings ;
15646: LD_ADDR_VAR 0 2
15650: PUSH
15651: LD_VAR 0 2
15655: PUSH
15656: LD_STRING 
15658: ADD
15659: PUSH
15660: CALL 13816 0 0
15664: ADD
15665: ST_TO_ADDR
// Display_Strings := AllStrings ;
15666: LD_ADDR_OWVAR 47
15670: PUSH
15671: LD_VAR 0 2
15675: ST_TO_ADDR
// end ;
15676: LD_VAR 0 1
15680: RET
// every 0 0$1 do
15681: GO 15683
15683: DISABLE
// begin ShowTimer ;
15684: CALL 15526 0 0
// enable ;
15688: ENABLE
// end ; end_of_file
15689: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
15690: LD_INT 0
15692: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
15693: LD_VAR 0 1
15697: PPUSH
15698: CALL_OW 255
15702: PUSH
15703: LD_VAR 0 4
15707: EQUAL
15708: IFFALSE 15727
// begin SetAchievement ( ACH_RAD ) ;
15710: LD_STRING ACH_RAD
15712: PPUSH
15713: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
15717: LD_STRING ACH_NL
15719: PPUSH
15720: LD_INT 1
15722: PPUSH
15723: CALL_OW 564
// end end ;
15727: LD_VAR 0 5
15731: RET
// export function SA_Win ( side ) ; begin
15732: LD_INT 0
15734: PPUSH
// case side of 1 :
15735: LD_VAR 0 1
15739: PUSH
15740: LD_INT 1
15742: DOUBLE
15743: EQUAL
15744: IFTRUE 15748
15746: GO 15761
15748: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
15749: LD_STRING ACH_AH
15751: PPUSH
15752: LD_INT 1
15754: PPUSH
15755: CALL_OW 564
15759: GO 15924
15761: LD_INT 2
15763: DOUBLE
15764: EQUAL
15765: IFTRUE 15769
15767: GO 15782
15769: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
15770: LD_STRING ACH_E
15772: PPUSH
15773: LD_INT 1
15775: PPUSH
15776: CALL_OW 564
15780: GO 15924
15782: LD_INT 3
15784: DOUBLE
15785: EQUAL
15786: IFTRUE 15790
15788: GO 15803
15790: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
15791: LD_STRING ACH_OOL
15793: PPUSH
15794: LD_INT 1
15796: PPUSH
15797: CALL_OW 564
15801: GO 15924
15803: LD_INT 1
15805: PUSH
15806: LD_INT 2
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: DOUBLE
15813: EQUAL
15814: IFTRUE 15818
15816: GO 15843
15818: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
15819: LD_STRING ACH_AH
15821: PPUSH
15822: LD_REAL  5.00000000000000E-0001
15825: PPUSH
15826: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
15830: LD_STRING ACH_E
15832: PPUSH
15833: LD_REAL  5.00000000000000E-0001
15836: PPUSH
15837: CALL_OW 564
// end ; [ 2 , 3 ] :
15841: GO 15924
15843: LD_INT 2
15845: PUSH
15846: LD_INT 3
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: DOUBLE
15853: EQUAL
15854: IFTRUE 15858
15856: GO 15883
15858: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
15859: LD_STRING ACH_OOL
15861: PPUSH
15862: LD_REAL  5.00000000000000E-0001
15865: PPUSH
15866: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
15870: LD_STRING ACH_E
15872: PPUSH
15873: LD_REAL  5.00000000000000E-0001
15876: PPUSH
15877: CALL_OW 564
// end ; [ 3 , 1 ] :
15881: GO 15924
15883: LD_INT 3
15885: PUSH
15886: LD_INT 1
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: DOUBLE
15893: EQUAL
15894: IFTRUE 15898
15896: GO 15923
15898: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
15899: LD_STRING ACH_AH
15901: PPUSH
15902: LD_REAL  5.00000000000000E-0001
15905: PPUSH
15906: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
15910: LD_STRING ACH_OOL
15912: PPUSH
15913: LD_REAL  5.00000000000000E-0001
15916: PPUSH
15917: CALL_OW 564
// end ; end ;
15921: GO 15924
15923: POP
// end ; end_of_file
15924: LD_VAR 0 2
15928: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
15929: LD_INT 0
15931: PPUSH
15932: PPUSH
// enable ( 98 ) ;
15933: LD_INT 98
15935: ENABLE_MARKED
// GameEnded = false ;
15936: LD_ADDR_LOC 36
15940: PUSH
15941: LD_INT 0
15943: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15944: LD_ADDR_LOC 35
15948: PUSH
15949: LD_INT 0
15951: PUSH
15952: LD_INT 0
15954: PUSH
15955: LD_INT 0
15957: PUSH
15958: LD_INT 0
15960: PUSH
15961: LD_INT 0
15963: PUSH
15964: LD_INT 0
15966: PUSH
15967: LD_INT 0
15969: PUSH
15970: LD_INT 0
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: ST_TO_ADDR
// unfoged = false ;
15983: LD_ADDR_LOC 37
15987: PUSH
15988: LD_INT 0
15990: ST_TO_ADDR
// for i = 1 to side_positions do
15991: LD_ADDR_VAR 0 2
15995: PUSH
15996: DOUBLE
15997: LD_INT 1
15999: DEC
16000: ST_TO_ADDR
16001: LD_EXP 43
16005: PUSH
16006: FOR_TO
16007: IFFALSE 16047
// if not side_positions [ i ] then
16009: LD_EXP 43
16013: PUSH
16014: LD_VAR 0 2
16018: ARRAY
16019: NOT
16020: IFFALSE 16045
// defaited = replace ( defaited , i , true ) ;
16022: LD_ADDR_LOC 35
16026: PUSH
16027: LD_LOC 35
16031: PPUSH
16032: LD_VAR 0 2
16036: PPUSH
16037: LD_INT 1
16039: PPUSH
16040: CALL_OW 1
16044: ST_TO_ADDR
16045: GO 16006
16047: POP
16048: POP
// end ;
16049: LD_VAR 0 1
16053: RET
// function CanWinLoose ; begin
16054: LD_INT 0
16056: PPUSH
// Result := true ;
16057: LD_ADDR_VAR 0 1
16061: PUSH
16062: LD_INT 1
16064: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
16065: CALL_OW 518
16069: PUSH
16070: CALL_OW 519
16074: PUSH
16075: LD_INT 0
16077: GREATER
16078: AND
16079: IFFALSE 16089
// Result := false ;
16081: LD_ADDR_VAR 0 1
16085: PUSH
16086: LD_INT 0
16088: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
16089: CALL_OW 531
16093: PUSH
16094: CALL_OW 519
16098: PUSH
16099: LD_INT 1
16101: GREATER
16102: AND
16103: IFFALSE 16113
// Result := false ;
16105: LD_ADDR_VAR 0 1
16109: PUSH
16110: LD_INT 0
16112: ST_TO_ADDR
// end ;
16113: LD_VAR 0 1
16117: RET
// export function HasPower ( i ) ; var k , h ; begin
16118: LD_INT 0
16120: PPUSH
16121: PPUSH
16122: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
16123: LD_VAR 0 1
16127: PPUSH
16128: CALL_OW 108
16132: NOT
16133: PUSH
16134: LD_EXP 42
16138: PUSH
16139: LD_VAR 0 1
16143: ARRAY
16144: NOT
16145: AND
16146: PUSH
16147: LD_OWVAR 4
16151: AND
16152: IFFALSE 16164
// begin result = false ;
16154: LD_ADDR_VAR 0 2
16158: PUSH
16159: LD_INT 0
16161: ST_TO_ADDR
// end else
16162: GO 16459
// case def_win_rules of 0 :
16164: LD_EXP 18
16168: PUSH
16169: LD_INT 0
16171: DOUBLE
16172: EQUAL
16173: IFTRUE 16177
16175: GO 16340
16177: POP
// if def_people_respawning then
16178: LD_EXP 19
16182: IFFALSE 16273
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
16184: LD_ADDR_VAR 0 2
16188: PUSH
16189: LD_INT 22
16191: PUSH
16192: LD_VAR 0 1
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 2
16203: PUSH
16204: LD_INT 21
16206: PUSH
16207: LD_INT 1
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: LD_INT 33
16216: PUSH
16217: LD_INT 3
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: LD_INT 33
16226: PUSH
16227: LD_INT 5
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PUSH
16234: LD_INT 30
16236: PUSH
16237: LD_INT 0
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: LD_INT 30
16246: PUSH
16247: LD_INT 1
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PPUSH
16266: CALL_OW 69
16270: ST_TO_ADDR
16271: GO 16338
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
16273: LD_ADDR_VAR 0 2
16277: PUSH
16278: LD_INT 22
16280: PUSH
16281: LD_VAR 0 1
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 2
16292: PUSH
16293: LD_INT 21
16295: PUSH
16296: LD_INT 1
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: LD_INT 33
16305: PUSH
16306: LD_INT 3
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: LD_INT 33
16315: PUSH
16316: LD_INT 5
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PPUSH
16333: CALL_OW 69
16337: ST_TO_ADDR
16338: GO 16459
16340: LD_INT 1
16342: DOUBLE
16343: EQUAL
16344: IFTRUE 16348
16346: GO 16387
16348: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
16349: LD_ADDR_VAR 0 2
16353: PUSH
16354: LD_INT 22
16356: PUSH
16357: LD_VAR 0 1
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PUSH
16366: LD_INT 21
16368: PUSH
16369: LD_INT 1
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PPUSH
16380: CALL_OW 69
16384: ST_TO_ADDR
16385: GO 16459
16387: LD_INT 2
16389: DOUBLE
16390: EQUAL
16391: IFTRUE 16395
16393: GO 16458
16395: POP
// begin h = false ;
16396: LD_ADDR_VAR 0 4
16400: PUSH
16401: LD_INT 0
16403: ST_TO_ADDR
// for k in heroes [ i ] do
16404: LD_ADDR_VAR 0 3
16408: PUSH
16409: LD_EXP 57
16413: PUSH
16414: LD_VAR 0 1
16418: ARRAY
16419: PUSH
16420: FOR_IN
16421: IFFALSE 16444
// if IsLive ( k ) then
16423: LD_VAR 0 3
16427: PPUSH
16428: CALL_OW 300
16432: IFFALSE 16442
// h = true ;
16434: LD_ADDR_VAR 0 4
16438: PUSH
16439: LD_INT 1
16441: ST_TO_ADDR
16442: GO 16420
16444: POP
16445: POP
// Result := h ;
16446: LD_ADDR_VAR 0 2
16450: PUSH
16451: LD_VAR 0 4
16455: ST_TO_ADDR
// end ; end ;
16456: GO 16459
16458: POP
// end ;
16459: LD_VAR 0 2
16463: RET
// function AlliedSides ( i , j ) ; begin
16464: LD_INT 0
16466: PPUSH
// Result := false ;
16467: LD_ADDR_VAR 0 3
16471: PUSH
16472: LD_INT 0
16474: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
16475: LD_VAR 0 1
16479: PPUSH
16480: LD_VAR 0 2
16484: PPUSH
16485: CALL_OW 81
16489: PUSH
16490: LD_INT 1
16492: EQUAL
16493: PUSH
16494: LD_VAR 0 2
16498: PPUSH
16499: LD_VAR 0 1
16503: PPUSH
16504: CALL_OW 81
16508: PUSH
16509: LD_INT 1
16511: EQUAL
16512: AND
16513: PUSH
16514: LD_VAR 0 1
16518: PPUSH
16519: CALL_OW 83
16523: AND
16524: PUSH
16525: LD_VAR 0 2
16529: PPUSH
16530: CALL_OW 83
16534: AND
16535: IFFALSE 16545
// Result := true ;
16537: LD_ADDR_VAR 0 3
16541: PUSH
16542: LD_INT 1
16544: ST_TO_ADDR
// end ;
16545: LD_VAR 0 3
16549: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
16550: CALL 16054 0 0
16554: PUSH
16555: LD_LOC 36
16559: NOT
16560: AND
16561: IFFALSE 16577
16563: GO 16565
16565: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
16566: LD_ADDR_EXP 63
16570: PUSH
16571: LD_STRING #Player-Ended
16573: PUSH
16574: EMPTY
16575: LIST
16576: ST_TO_ADDR
16577: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
16578: CALL 16054 0 0
16582: PUSH
16583: LD_LOC 36
16587: AND
16588: IFFALSE 16597
16590: GO 16592
16592: DISABLE
// YouLostInMultiplayer ;
16593: CALL_OW 107
16597: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
16598: CALL 16054 0 0
16602: NOT
16603: PUSH
16604: CALL_OW 531
16608: NOT
16609: AND
16610: IFFALSE 16626
16612: GO 16614
16614: DISABLE
// WaitServerStrings = [ #server-wait ] ;
16615: LD_ADDR_EXP 63
16619: PUSH
16620: LD_STRING #server-wait
16622: PUSH
16623: EMPTY
16624: LIST
16625: ST_TO_ADDR
16626: END
// every 100 trigger IAmSpec do
16627: CALL_OW 531
16631: IFFALSE 16647
16633: GO 16635
16635: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
16636: LD_ADDR_EXP 63
16640: PUSH
16641: LD_STRING #Player-IAmSpec
16643: PUSH
16644: EMPTY
16645: LIST
16646: ST_TO_ADDR
16647: END
// every 100 trigger GameEnded and IAmSpec do
16648: LD_LOC 36
16652: PUSH
16653: CALL_OW 531
16657: AND
16658: IFFALSE 16667
16660: GO 16662
16662: DISABLE
// YouLostInMultiplayer ;
16663: CALL_OW 107
16667: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
16668: CALL 16054 0 0
16672: PUSH
16673: LD_LOC 36
16677: NOT
16678: AND
16679: IFFALSE 16695
16681: GO 16683
16683: DISABLE
// WaitServerStrings = [ $player-win ] ;
16684: LD_ADDR_EXP 63
16688: PUSH
16689: LD_STRING $player-win
16691: PUSH
16692: EMPTY
16693: LIST
16694: ST_TO_ADDR
16695: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
16696: CALL 16054 0 0
16700: PUSH
16701: LD_LOC 36
16705: AND
16706: IFFALSE 16730
16708: GO 16710
16710: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
16711: LD_EXP 44
16715: PUSH
16716: LD_OWVAR 2
16720: ARRAY
16721: PPUSH
16722: CALL 15732 0 1
// YouWinInMultiplayer ;
16726: CALL_OW 106
// end ;
16730: END
// every 100 trigger isEditor marked 401 do
16731: LD_OWVAR 84
16735: IFFALSE 16751
16737: GO 16739
16739: DISABLE
// Debug_Strings = [ You won ] ;
16740: LD_ADDR_OWVAR 48
16744: PUSH
16745: LD_STRING You won
16747: PUSH
16748: EMPTY
16749: LIST
16750: ST_TO_ADDR
16751: END
// every 100 trigger isEditor marked 400 do
16752: LD_OWVAR 84
16756: IFFALSE 16772
16758: GO 16760
16760: DISABLE
// Debug_Strings = [ You loss ] ;
16761: LD_ADDR_OWVAR 48
16765: PUSH
16766: LD_STRING You loss
16768: PUSH
16769: EMPTY
16770: LIST
16771: ST_TO_ADDR
16772: END
// every 100 marked 98 do var i , un ;
16773: GO 16775
16775: DISABLE
16776: LD_INT 0
16778: PPUSH
16779: PPUSH
// begin for i = 1 to side_positions do
16780: LD_ADDR_VAR 0 1
16784: PUSH
16785: DOUBLE
16786: LD_INT 1
16788: DEC
16789: ST_TO_ADDR
16790: LD_EXP 43
16794: PUSH
16795: FOR_TO
16796: IFFALSE 16919
// if side_positions [ i ] then
16798: LD_EXP 43
16802: PUSH
16803: LD_VAR 0 1
16807: ARRAY
16808: IFFALSE 16917
// if not HasPower ( i ) and not Defaited [ i ] then
16810: LD_VAR 0 1
16814: PPUSH
16815: CALL 16118 0 1
16819: NOT
16820: PUSH
16821: LD_LOC 35
16825: PUSH
16826: LD_VAR 0 1
16830: ARRAY
16831: NOT
16832: AND
16833: IFFALSE 16917
// begin un = filterallunits ( [ f_side , i ] ) ;
16835: LD_ADDR_VAR 0 2
16839: PUSH
16840: LD_INT 22
16842: PUSH
16843: LD_VAR 0 1
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PPUSH
16852: CALL_OW 69
16856: ST_TO_ADDR
// if un then
16857: LD_VAR 0 2
16861: IFFALSE 16875
// SetSide ( un , 0 ) ;
16863: LD_VAR 0 2
16867: PPUSH
16868: LD_INT 0
16870: PPUSH
16871: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
16875: LD_ADDR_LOC 35
16879: PUSH
16880: LD_LOC 35
16884: PPUSH
16885: LD_VAR 0 1
16889: PPUSH
16890: LD_INT 1
16892: PPUSH
16893: CALL_OW 1
16897: ST_TO_ADDR
// if i = your_side then
16898: LD_VAR 0 1
16902: PUSH
16903: LD_OWVAR 2
16907: EQUAL
16908: IFFALSE 16917
// begin Multiplayer_Loose_Message ;
16910: CALL_OW 521
// enable ( 400 ) ;
16914: LD_INT 400
16916: ENABLE_MARKED
// end ; end ;
16917: GO 16795
16919: POP
16920: POP
// if not Unfoged and defaited [ your_side ] then
16921: LD_LOC 37
16925: NOT
16926: PUSH
16927: LD_LOC 35
16931: PUSH
16932: LD_OWVAR 2
16936: ARRAY
16937: AND
16938: IFFALSE 16944
// Unfog ;
16940: CALL 17130 0 0
// DidGameEnd ;
16944: CALL 16959 0 0
// if not GameEnded then
16948: LD_LOC 36
16952: NOT
16953: IFFALSE 16956
// enable ;
16955: ENABLE
// end ;
16956: PPOPN 2
16958: END
// function DidGameEnd ; var i , k , enemy ; begin
16959: LD_INT 0
16961: PPUSH
16962: PPUSH
16963: PPUSH
16964: PPUSH
// enemy = [ ] ;
16965: LD_ADDR_VAR 0 4
16969: PUSH
16970: EMPTY
16971: ST_TO_ADDR
// for i = 1 to side_positions do
16972: LD_ADDR_VAR 0 2
16976: PUSH
16977: DOUBLE
16978: LD_INT 1
16980: DEC
16981: ST_TO_ADDR
16982: LD_EXP 43
16986: PUSH
16987: FOR_TO
16988: IFFALSE 17092
// if not defaited [ i ] then
16990: LD_LOC 35
16994: PUSH
16995: LD_VAR 0 2
16999: ARRAY
17000: NOT
17001: IFFALSE 17090
// for k = 1 to side_positions do
17003: LD_ADDR_VAR 0 3
17007: PUSH
17008: DOUBLE
17009: LD_INT 1
17011: DEC
17012: ST_TO_ADDR
17013: LD_EXP 43
17017: PUSH
17018: FOR_TO
17019: IFFALSE 17088
// if not defaited [ k ] then
17021: LD_LOC 35
17025: PUSH
17026: LD_VAR 0 3
17030: ARRAY
17031: NOT
17032: IFFALSE 17086
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
17034: LD_VAR 0 2
17038: PPUSH
17039: LD_VAR 0 3
17043: PPUSH
17044: CALL_OW 81
17048: PUSH
17049: LD_INT 2
17051: PUSH
17052: LD_INT 0
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: IN
17059: IFFALSE 17086
// enemy = enemy ^ [ i , k ] ;
17061: LD_ADDR_VAR 0 4
17065: PUSH
17066: LD_VAR 0 4
17070: PUSH
17071: LD_VAR 0 2
17075: PUSH
17076: LD_VAR 0 3
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: ADD
17085: ST_TO_ADDR
17086: GO 17018
17088: POP
17089: POP
17090: GO 16987
17092: POP
17093: POP
// if not enemy then
17094: LD_VAR 0 4
17098: NOT
17099: IFFALSE 17125
// begin GameEnded = true ;
17101: LD_ADDR_LOC 36
17105: PUSH
17106: LD_INT 1
17108: ST_TO_ADDR
// if not defaited [ your_side ] then
17109: LD_LOC 35
17113: PUSH
17114: LD_OWVAR 2
17118: ARRAY
17119: NOT
17120: IFFALSE 17125
// enable ( 401 ) ;
17122: LD_INT 401
17124: ENABLE_MARKED
// end ; end ;
17125: LD_VAR 0 1
17129: RET
// function unfog ; var k , friends ; begin
17130: LD_INT 0
17132: PPUSH
17133: PPUSH
17134: PPUSH
// for k = 1 to side_positions do
17135: LD_ADDR_VAR 0 2
17139: PUSH
17140: DOUBLE
17141: LD_INT 1
17143: DEC
17144: ST_TO_ADDR
17145: LD_EXP 43
17149: PUSH
17150: FOR_TO
17151: IFFALSE 17207
// if not defaited [ k ] then
17153: LD_LOC 35
17157: PUSH
17158: LD_VAR 0 2
17162: ARRAY
17163: NOT
17164: IFFALSE 17205
// if GetAttitude ( your_side , k ) in [ att_friend ] then
17166: LD_OWVAR 2
17170: PPUSH
17171: LD_VAR 0 2
17175: PPUSH
17176: CALL_OW 81
17180: PUSH
17181: LD_INT 1
17183: PUSH
17184: EMPTY
17185: LIST
17186: IN
17187: IFFALSE 17205
// friends = friends ^ k ;
17189: LD_ADDR_VAR 0 3
17193: PUSH
17194: LD_VAR 0 3
17198: PUSH
17199: LD_VAR 0 2
17203: ADD
17204: ST_TO_ADDR
17205: GO 17150
17207: POP
17208: POP
// if not friends then
17209: LD_VAR 0 3
17213: NOT
17214: IFFALSE 17231
// begin fogoff ( true ) ;
17216: LD_INT 1
17218: PPUSH
17219: CALL_OW 344
// unfoged = true ;
17223: LD_ADDR_LOC 37
17227: PUSH
17228: LD_INT 1
17230: ST_TO_ADDR
// end ; end ;
17231: LD_VAR 0 1
17235: RET
// export function MakeGameEnd ; begin
17236: LD_INT 0
17238: PPUSH
// fogoff ( true ) ;
17239: LD_INT 1
17241: PPUSH
17242: CALL_OW 344
// unfoged = true ;
17246: LD_ADDR_LOC 37
17250: PUSH
17251: LD_INT 1
17253: ST_TO_ADDR
// wait ( 0 0$5 ) ;
17254: LD_INT 175
17256: PPUSH
17257: CALL_OW 67
// GameEnded = true ;
17261: LD_ADDR_LOC 36
17265: PUSH
17266: LD_INT 1
17268: ST_TO_ADDR
// end ;
17269: LD_VAR 0 1
17273: RET
// export function GetGameEnded ; begin
17274: LD_INT 0
17276: PPUSH
// result = GameEnded ;
17277: LD_ADDR_VAR 0 1
17281: PUSH
17282: LD_LOC 36
17286: ST_TO_ADDR
// end ; end_of_file
17287: LD_VAR 0 1
17291: RET
// export function SetMpTechs ( ) ; var side , i ; begin
17292: LD_INT 0
17294: PPUSH
17295: PPUSH
17296: PPUSH
// for side = 1 to 8 do
17297: LD_ADDR_VAR 0 2
17301: PUSH
17302: DOUBLE
17303: LD_INT 1
17305: DEC
17306: ST_TO_ADDR
17307: LD_INT 8
17309: PUSH
17310: FOR_TO
17311: IFFALSE 17432
// begin for i = 1 to 72 do
17313: LD_ADDR_VAR 0 3
17317: PUSH
17318: DOUBLE
17319: LD_INT 1
17321: DEC
17322: ST_TO_ADDR
17323: LD_INT 72
17325: PUSH
17326: FOR_TO
17327: IFFALSE 17358
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
17329: LD_VAR 0 3
17333: PPUSH
17334: LD_VAR 0 2
17338: PPUSH
17339: LD_INT 0
17341: PPUSH
17342: LD_VAR 0 3
17346: PPUSH
17347: CALL_OW 565
17351: PPUSH
17352: CALL_OW 322
17356: GO 17326
17358: POP
17359: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
17360: LD_INT 73
17362: PPUSH
17363: LD_VAR 0 2
17367: PPUSH
17368: LD_INT 0
17370: PPUSH
17371: LD_INT 25
17373: PPUSH
17374: CALL_OW 565
17378: PPUSH
17379: CALL_OW 322
// for i = 0 to 40 do
17383: LD_ADDR_VAR 0 3
17387: PUSH
17388: DOUBLE
17389: LD_INT 0
17391: DEC
17392: ST_TO_ADDR
17393: LD_INT 40
17395: PUSH
17396: FOR_TO
17397: IFFALSE 17428
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
17399: LD_VAR 0 3
17403: PPUSH
17404: LD_VAR 0 2
17408: PPUSH
17409: LD_INT 1
17411: PPUSH
17412: LD_VAR 0 3
17416: PPUSH
17417: CALL_OW 565
17421: PPUSH
17422: CALL_OW 324
17426: GO 17396
17428: POP
17429: POP
// end ;
17430: GO 17310
17432: POP
17433: POP
// end ;
17434: LD_VAR 0 1
17438: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
17439: LD_INT 0
17441: PPUSH
17442: PPUSH
17443: PPUSH
// for side = 1 to 8 do
17444: LD_ADDR_VAR 0 3
17448: PUSH
17449: DOUBLE
17450: LD_INT 1
17452: DEC
17453: ST_TO_ADDR
17454: LD_INT 8
17456: PUSH
17457: FOR_TO
17458: IFFALSE 21454
// begin for i = 1 to 73 do
17460: LD_ADDR_VAR 0 4
17464: PUSH
17465: DOUBLE
17466: LD_INT 1
17468: DEC
17469: ST_TO_ADDR
17470: LD_INT 73
17472: PUSH
17473: FOR_TO
17474: IFFALSE 17495
// SetTech ( i , side , state_disabled ) ;
17476: LD_VAR 0 4
17480: PPUSH
17481: LD_VAR 0 3
17485: PPUSH
17486: LD_INT 0
17488: PPUSH
17489: CALL_OW 322
17493: GO 17473
17495: POP
17496: POP
// for i = 0 to 40 do
17497: LD_ADDR_VAR 0 4
17501: PUSH
17502: DOUBLE
17503: LD_INT 0
17505: DEC
17506: ST_TO_ADDR
17507: LD_INT 40
17509: PUSH
17510: FOR_TO
17511: IFFALSE 17532
// SetRestrict ( i , side , false ) ;
17513: LD_VAR 0 4
17517: PPUSH
17518: LD_VAR 0 3
17522: PPUSH
17523: LD_INT 0
17525: PPUSH
17526: CALL_OW 324
17530: GO 17510
17532: POP
17533: POP
// case level of 1 :
17534: LD_VAR 0 1
17538: PUSH
17539: LD_INT 1
17541: DOUBLE
17542: EQUAL
17543: IFTRUE 17547
17545: GO 17700
17547: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17548: LD_INT 35
17550: PPUSH
17551: LD_VAR 0 3
17555: PPUSH
17556: LD_INT 1
17558: PPUSH
17559: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17563: LD_INT 45
17565: PPUSH
17566: LD_VAR 0 3
17570: PPUSH
17571: LD_INT 1
17573: PPUSH
17574: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17578: LD_INT 46
17580: PPUSH
17581: LD_VAR 0 3
17585: PPUSH
17586: LD_INT 1
17588: PPUSH
17589: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17593: LD_INT 47
17595: PPUSH
17596: LD_VAR 0 3
17600: PPUSH
17601: LD_INT 1
17603: PPUSH
17604: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17608: LD_INT 0
17610: PPUSH
17611: LD_VAR 0 3
17615: PPUSH
17616: LD_INT 1
17618: PPUSH
17619: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17623: LD_INT 2
17625: PPUSH
17626: LD_VAR 0 3
17630: PPUSH
17631: LD_INT 1
17633: PPUSH
17634: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17638: LD_INT 4
17640: PPUSH
17641: LD_VAR 0 3
17645: PPUSH
17646: LD_INT 1
17648: PPUSH
17649: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17653: LD_INT 6
17655: PPUSH
17656: LD_VAR 0 3
17660: PPUSH
17661: LD_INT 1
17663: PPUSH
17664: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17668: LD_INT 29
17670: PPUSH
17671: LD_VAR 0 3
17675: PPUSH
17676: LD_INT 1
17678: PPUSH
17679: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17683: LD_INT 31
17685: PPUSH
17686: LD_VAR 0 3
17690: PPUSH
17691: LD_INT 1
17693: PPUSH
17694: CALL_OW 324
// end ; 2 :
17698: GO 21452
17700: LD_INT 2
17702: DOUBLE
17703: EQUAL
17704: IFTRUE 17708
17706: GO 17906
17708: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17709: LD_INT 35
17711: PPUSH
17712: LD_VAR 0 3
17716: PPUSH
17717: LD_INT 1
17719: PPUSH
17720: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17724: LD_INT 45
17726: PPUSH
17727: LD_VAR 0 3
17731: PPUSH
17732: LD_INT 1
17734: PPUSH
17735: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17739: LD_INT 46
17741: PPUSH
17742: LD_VAR 0 3
17746: PPUSH
17747: LD_INT 1
17749: PPUSH
17750: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17754: LD_INT 47
17756: PPUSH
17757: LD_VAR 0 3
17761: PPUSH
17762: LD_INT 1
17764: PPUSH
17765: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17769: LD_INT 1
17771: PPUSH
17772: LD_VAR 0 3
17776: PPUSH
17777: LD_INT 1
17779: PPUSH
17780: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17784: LD_INT 2
17786: PPUSH
17787: LD_VAR 0 3
17791: PPUSH
17792: LD_INT 1
17794: PPUSH
17795: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17799: LD_INT 11
17801: PPUSH
17802: LD_VAR 0 3
17806: PPUSH
17807: LD_INT 1
17809: PPUSH
17810: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17814: LD_INT 0
17816: PPUSH
17817: LD_VAR 0 3
17821: PPUSH
17822: LD_INT 1
17824: PPUSH
17825: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17829: LD_INT 2
17831: PPUSH
17832: LD_VAR 0 3
17836: PPUSH
17837: LD_INT 1
17839: PPUSH
17840: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17844: LD_INT 4
17846: PPUSH
17847: LD_VAR 0 3
17851: PPUSH
17852: LD_INT 1
17854: PPUSH
17855: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17859: LD_INT 6
17861: PPUSH
17862: LD_VAR 0 3
17866: PPUSH
17867: LD_INT 1
17869: PPUSH
17870: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17874: LD_INT 29
17876: PPUSH
17877: LD_VAR 0 3
17881: PPUSH
17882: LD_INT 1
17884: PPUSH
17885: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17889: LD_INT 31
17891: PPUSH
17892: LD_VAR 0 3
17896: PPUSH
17897: LD_INT 1
17899: PPUSH
17900: CALL_OW 324
// end ; 3 :
17904: GO 21452
17906: LD_INT 3
17908: DOUBLE
17909: EQUAL
17910: IFTRUE 17914
17912: GO 18367
17914: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17915: LD_INT 35
17917: PPUSH
17918: LD_VAR 0 3
17922: PPUSH
17923: LD_INT 1
17925: PPUSH
17926: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17930: LD_INT 45
17932: PPUSH
17933: LD_VAR 0 3
17937: PPUSH
17938: LD_INT 1
17940: PPUSH
17941: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17945: LD_INT 46
17947: PPUSH
17948: LD_VAR 0 3
17952: PPUSH
17953: LD_INT 1
17955: PPUSH
17956: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17960: LD_INT 47
17962: PPUSH
17963: LD_VAR 0 3
17967: PPUSH
17968: LD_INT 1
17970: PPUSH
17971: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17975: LD_INT 1
17977: PPUSH
17978: LD_VAR 0 3
17982: PPUSH
17983: LD_INT 1
17985: PPUSH
17986: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17990: LD_INT 2
17992: PPUSH
17993: LD_VAR 0 3
17997: PPUSH
17998: LD_INT 1
18000: PPUSH
18001: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18005: LD_INT 11
18007: PPUSH
18008: LD_VAR 0 3
18012: PPUSH
18013: LD_INT 1
18015: PPUSH
18016: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18020: LD_INT 48
18022: PPUSH
18023: LD_VAR 0 3
18027: PPUSH
18028: LD_INT 1
18030: PPUSH
18031: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18035: LD_INT 69
18037: PPUSH
18038: LD_VAR 0 3
18042: PPUSH
18043: LD_INT 1
18045: PPUSH
18046: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18050: LD_INT 39
18052: PPUSH
18053: LD_VAR 0 3
18057: PPUSH
18058: LD_INT 1
18060: PPUSH
18061: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18065: LD_INT 43
18067: PPUSH
18068: LD_VAR 0 3
18072: PPUSH
18073: LD_INT 1
18075: PPUSH
18076: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18080: LD_INT 51
18082: PPUSH
18083: LD_VAR 0 3
18087: PPUSH
18088: LD_INT 1
18090: PPUSH
18091: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18095: LD_INT 6
18097: PPUSH
18098: LD_VAR 0 3
18102: PPUSH
18103: LD_INT 1
18105: PPUSH
18106: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18110: LD_INT 0
18112: PPUSH
18113: LD_VAR 0 3
18117: PPUSH
18118: LD_INT 1
18120: PPUSH
18121: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18125: LD_INT 2
18127: PPUSH
18128: LD_VAR 0 3
18132: PPUSH
18133: LD_INT 1
18135: PPUSH
18136: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18140: LD_INT 3
18142: PPUSH
18143: LD_VAR 0 3
18147: PPUSH
18148: LD_INT 1
18150: PPUSH
18151: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18155: LD_INT 4
18157: PPUSH
18158: LD_VAR 0 3
18162: PPUSH
18163: LD_INT 1
18165: PPUSH
18166: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18170: LD_INT 6
18172: PPUSH
18173: LD_VAR 0 3
18177: PPUSH
18178: LD_INT 1
18180: PPUSH
18181: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18185: LD_INT 7
18187: PPUSH
18188: LD_VAR 0 3
18192: PPUSH
18193: LD_INT 1
18195: PPUSH
18196: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18200: LD_INT 8
18202: PPUSH
18203: LD_VAR 0 3
18207: PPUSH
18208: LD_INT 1
18210: PPUSH
18211: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18215: LD_INT 10
18217: PPUSH
18218: LD_VAR 0 3
18222: PPUSH
18223: LD_INT 1
18225: PPUSH
18226: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18230: LD_INT 15
18232: PPUSH
18233: LD_VAR 0 3
18237: PPUSH
18238: LD_INT 1
18240: PPUSH
18241: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18245: LD_INT 16
18247: PPUSH
18248: LD_VAR 0 3
18252: PPUSH
18253: LD_INT 1
18255: PPUSH
18256: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18260: LD_INT 17
18262: PPUSH
18263: LD_VAR 0 3
18267: PPUSH
18268: LD_INT 1
18270: PPUSH
18271: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18275: LD_INT 20
18277: PPUSH
18278: LD_VAR 0 3
18282: PPUSH
18283: LD_INT 1
18285: PPUSH
18286: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18290: LD_INT 26
18292: PPUSH
18293: LD_VAR 0 3
18297: PPUSH
18298: LD_INT 1
18300: PPUSH
18301: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18305: LD_INT 27
18307: PPUSH
18308: LD_VAR 0 3
18312: PPUSH
18313: LD_INT 1
18315: PPUSH
18316: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18320: LD_INT 29
18322: PPUSH
18323: LD_VAR 0 3
18327: PPUSH
18328: LD_INT 1
18330: PPUSH
18331: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18335: LD_INT 31
18337: PPUSH
18338: LD_VAR 0 3
18342: PPUSH
18343: LD_INT 1
18345: PPUSH
18346: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18350: LD_INT 32
18352: PPUSH
18353: LD_VAR 0 3
18357: PPUSH
18358: LD_INT 1
18360: PPUSH
18361: CALL_OW 324
// end ; 4 :
18365: GO 21452
18367: LD_INT 4
18369: DOUBLE
18370: EQUAL
18371: IFTRUE 18375
18373: GO 19323
18375: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18376: LD_INT 35
18378: PPUSH
18379: LD_VAR 0 3
18383: PPUSH
18384: LD_INT 1
18386: PPUSH
18387: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18391: LD_INT 45
18393: PPUSH
18394: LD_VAR 0 3
18398: PPUSH
18399: LD_INT 1
18401: PPUSH
18402: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18406: LD_INT 46
18408: PPUSH
18409: LD_VAR 0 3
18413: PPUSH
18414: LD_INT 1
18416: PPUSH
18417: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18421: LD_INT 47
18423: PPUSH
18424: LD_VAR 0 3
18428: PPUSH
18429: LD_INT 1
18431: PPUSH
18432: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18436: LD_INT 1
18438: PPUSH
18439: LD_VAR 0 3
18443: PPUSH
18444: LD_INT 1
18446: PPUSH
18447: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18451: LD_INT 2
18453: PPUSH
18454: LD_VAR 0 3
18458: PPUSH
18459: LD_INT 1
18461: PPUSH
18462: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18466: LD_INT 11
18468: PPUSH
18469: LD_VAR 0 3
18473: PPUSH
18474: LD_INT 1
18476: PPUSH
18477: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18481: LD_INT 20
18483: PPUSH
18484: LD_VAR 0 3
18488: PPUSH
18489: LD_INT 1
18491: PPUSH
18492: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18496: LD_INT 48
18498: PPUSH
18499: LD_VAR 0 3
18503: PPUSH
18504: LD_INT 1
18506: PPUSH
18507: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18511: LD_INT 49
18513: PPUSH
18514: LD_VAR 0 3
18518: PPUSH
18519: LD_INT 1
18521: PPUSH
18522: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18526: LD_INT 69
18528: PPUSH
18529: LD_VAR 0 3
18533: PPUSH
18534: LD_INT 1
18536: PPUSH
18537: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18541: LD_INT 39
18543: PPUSH
18544: LD_VAR 0 3
18548: PPUSH
18549: LD_INT 1
18551: PPUSH
18552: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18556: LD_INT 34
18558: PPUSH
18559: LD_VAR 0 3
18563: PPUSH
18564: LD_INT 1
18566: PPUSH
18567: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18571: LD_INT 42
18573: PPUSH
18574: LD_VAR 0 3
18578: PPUSH
18579: LD_INT 1
18581: PPUSH
18582: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18586: LD_INT 44
18588: PPUSH
18589: LD_VAR 0 3
18593: PPUSH
18594: LD_INT 1
18596: PPUSH
18597: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18601: LD_INT 41
18603: PPUSH
18604: LD_VAR 0 3
18608: PPUSH
18609: LD_INT 1
18611: PPUSH
18612: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18616: LD_INT 43
18618: PPUSH
18619: LD_VAR 0 3
18623: PPUSH
18624: LD_INT 1
18626: PPUSH
18627: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18631: LD_INT 70
18633: PPUSH
18634: LD_VAR 0 3
18638: PPUSH
18639: LD_INT 1
18641: PPUSH
18642: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18646: LD_INT 51
18648: PPUSH
18649: LD_VAR 0 3
18653: PPUSH
18654: LD_INT 1
18656: PPUSH
18657: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18661: LD_INT 52
18663: PPUSH
18664: LD_VAR 0 3
18668: PPUSH
18669: LD_INT 1
18671: PPUSH
18672: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18676: LD_INT 6
18678: PPUSH
18679: LD_VAR 0 3
18683: PPUSH
18684: LD_INT 1
18686: PPUSH
18687: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18691: LD_INT 15
18693: PPUSH
18694: LD_VAR 0 3
18698: PPUSH
18699: LD_INT 1
18701: PPUSH
18702: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18706: LD_INT 7
18708: PPUSH
18709: LD_VAR 0 3
18713: PPUSH
18714: LD_INT 1
18716: PPUSH
18717: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18721: LD_INT 12
18723: PPUSH
18724: LD_VAR 0 3
18728: PPUSH
18729: LD_INT 1
18731: PPUSH
18732: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18736: LD_INT 18
18738: PPUSH
18739: LD_VAR 0 3
18743: PPUSH
18744: LD_INT 1
18746: PPUSH
18747: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18751: LD_INT 60
18753: PPUSH
18754: LD_VAR 0 3
18758: PPUSH
18759: LD_INT 1
18761: PPUSH
18762: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18766: LD_INT 9
18768: PPUSH
18769: LD_VAR 0 3
18773: PPUSH
18774: LD_INT 1
18776: PPUSH
18777: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18781: LD_INT 30
18783: PPUSH
18784: LD_VAR 0 3
18788: PPUSH
18789: LD_INT 1
18791: PPUSH
18792: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18796: LD_INT 37
18798: PPUSH
18799: LD_VAR 0 3
18803: PPUSH
18804: LD_INT 1
18806: PPUSH
18807: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18811: LD_INT 5
18813: PPUSH
18814: LD_VAR 0 3
18818: PPUSH
18819: LD_INT 1
18821: PPUSH
18822: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18826: LD_INT 66
18828: PPUSH
18829: LD_VAR 0 3
18833: PPUSH
18834: LD_INT 1
18836: PPUSH
18837: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18841: LD_INT 21
18843: PPUSH
18844: LD_VAR 0 3
18848: PPUSH
18849: LD_INT 1
18851: PPUSH
18852: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18856: LD_INT 22
18858: PPUSH
18859: LD_VAR 0 3
18863: PPUSH
18864: LD_INT 1
18866: PPUSH
18867: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18871: LD_INT 54
18873: PPUSH
18874: LD_VAR 0 3
18878: PPUSH
18879: LD_INT 1
18881: PPUSH
18882: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18886: LD_INT 0
18888: PPUSH
18889: LD_VAR 0 3
18893: PPUSH
18894: LD_INT 1
18896: PPUSH
18897: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18901: LD_INT 1
18903: PPUSH
18904: LD_VAR 0 3
18908: PPUSH
18909: LD_INT 1
18911: PPUSH
18912: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18916: LD_INT 2
18918: PPUSH
18919: LD_VAR 0 3
18923: PPUSH
18924: LD_INT 1
18926: PPUSH
18927: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18931: LD_INT 3
18933: PPUSH
18934: LD_VAR 0 3
18938: PPUSH
18939: LD_INT 1
18941: PPUSH
18942: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18946: LD_INT 4
18948: PPUSH
18949: LD_VAR 0 3
18953: PPUSH
18954: LD_INT 1
18956: PPUSH
18957: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18961: LD_INT 5
18963: PPUSH
18964: LD_VAR 0 3
18968: PPUSH
18969: LD_INT 1
18971: PPUSH
18972: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18976: LD_INT 6
18978: PPUSH
18979: LD_VAR 0 3
18983: PPUSH
18984: LD_INT 1
18986: PPUSH
18987: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18991: LD_INT 7
18993: PPUSH
18994: LD_VAR 0 3
18998: PPUSH
18999: LD_INT 1
19001: PPUSH
19002: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
19006: LD_INT 8
19008: PPUSH
19009: LD_VAR 0 3
19013: PPUSH
19014: LD_INT 1
19016: PPUSH
19017: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
19021: LD_INT 10
19023: PPUSH
19024: LD_VAR 0 3
19028: PPUSH
19029: LD_INT 1
19031: PPUSH
19032: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
19036: LD_INT 11
19038: PPUSH
19039: LD_VAR 0 3
19043: PPUSH
19044: LD_INT 1
19046: PPUSH
19047: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
19051: LD_INT 12
19053: PPUSH
19054: LD_VAR 0 3
19058: PPUSH
19059: LD_INT 1
19061: PPUSH
19062: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
19066: LD_INT 13
19068: PPUSH
19069: LD_VAR 0 3
19073: PPUSH
19074: LD_INT 1
19076: PPUSH
19077: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
19081: LD_INT 14
19083: PPUSH
19084: LD_VAR 0 3
19088: PPUSH
19089: LD_INT 1
19091: PPUSH
19092: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
19096: LD_INT 15
19098: PPUSH
19099: LD_VAR 0 3
19103: PPUSH
19104: LD_INT 1
19106: PPUSH
19107: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
19111: LD_INT 16
19113: PPUSH
19114: LD_VAR 0 3
19118: PPUSH
19119: LD_INT 1
19121: PPUSH
19122: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
19126: LD_INT 17
19128: PPUSH
19129: LD_VAR 0 3
19133: PPUSH
19134: LD_INT 1
19136: PPUSH
19137: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
19141: LD_INT 19
19143: PPUSH
19144: LD_VAR 0 3
19148: PPUSH
19149: LD_INT 1
19151: PPUSH
19152: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
19156: LD_INT 20
19158: PPUSH
19159: LD_VAR 0 3
19163: PPUSH
19164: LD_INT 1
19166: PPUSH
19167: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
19171: LD_INT 21
19173: PPUSH
19174: LD_VAR 0 3
19178: PPUSH
19179: LD_INT 1
19181: PPUSH
19182: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
19186: LD_INT 23
19188: PPUSH
19189: LD_VAR 0 3
19193: PPUSH
19194: LD_INT 1
19196: PPUSH
19197: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
19201: LD_INT 26
19203: PPUSH
19204: LD_VAR 0 3
19208: PPUSH
19209: LD_INT 1
19211: PPUSH
19212: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
19216: LD_INT 27
19218: PPUSH
19219: LD_VAR 0 3
19223: PPUSH
19224: LD_INT 1
19226: PPUSH
19227: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
19231: LD_INT 28
19233: PPUSH
19234: LD_VAR 0 3
19238: PPUSH
19239: LD_INT 1
19241: PPUSH
19242: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19246: LD_INT 29
19248: PPUSH
19249: LD_VAR 0 3
19253: PPUSH
19254: LD_INT 1
19256: PPUSH
19257: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
19261: LD_INT 30
19263: PPUSH
19264: LD_VAR 0 3
19268: PPUSH
19269: LD_INT 1
19271: PPUSH
19272: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19276: LD_INT 31
19278: PPUSH
19279: LD_VAR 0 3
19283: PPUSH
19284: LD_INT 1
19286: PPUSH
19287: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
19291: LD_INT 32
19293: PPUSH
19294: LD_VAR 0 3
19298: PPUSH
19299: LD_INT 1
19301: PPUSH
19302: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
19306: LD_INT 36
19308: PPUSH
19309: LD_VAR 0 3
19313: PPUSH
19314: LD_INT 1
19316: PPUSH
19317: CALL_OW 324
// end ; 5 :
19321: GO 21452
19323: LD_INT 5
19325: DOUBLE
19326: EQUAL
19327: IFTRUE 19331
19329: GO 20444
19331: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19332: LD_INT 35
19334: PPUSH
19335: LD_VAR 0 3
19339: PPUSH
19340: LD_INT 1
19342: PPUSH
19343: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19347: LD_INT 45
19349: PPUSH
19350: LD_VAR 0 3
19354: PPUSH
19355: LD_INT 1
19357: PPUSH
19358: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19362: LD_INT 46
19364: PPUSH
19365: LD_VAR 0 3
19369: PPUSH
19370: LD_INT 1
19372: PPUSH
19373: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19377: LD_INT 47
19379: PPUSH
19380: LD_VAR 0 3
19384: PPUSH
19385: LD_INT 1
19387: PPUSH
19388: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19392: LD_INT 1
19394: PPUSH
19395: LD_VAR 0 3
19399: PPUSH
19400: LD_INT 1
19402: PPUSH
19403: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19407: LD_INT 2
19409: PPUSH
19410: LD_VAR 0 3
19414: PPUSH
19415: LD_INT 1
19417: PPUSH
19418: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19422: LD_INT 11
19424: PPUSH
19425: LD_VAR 0 3
19429: PPUSH
19430: LD_INT 1
19432: PPUSH
19433: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
19437: LD_INT 20
19439: PPUSH
19440: LD_VAR 0 3
19444: PPUSH
19445: LD_INT 1
19447: PPUSH
19448: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
19452: LD_INT 48
19454: PPUSH
19455: LD_VAR 0 3
19459: PPUSH
19460: LD_INT 1
19462: PPUSH
19463: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
19467: LD_INT 49
19469: PPUSH
19470: LD_VAR 0 3
19474: PPUSH
19475: LD_INT 1
19477: PPUSH
19478: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
19482: LD_INT 69
19484: PPUSH
19485: LD_VAR 0 3
19489: PPUSH
19490: LD_INT 1
19492: PPUSH
19493: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
19497: LD_INT 39
19499: PPUSH
19500: LD_VAR 0 3
19504: PPUSH
19505: LD_INT 1
19507: PPUSH
19508: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
19512: LD_INT 34
19514: PPUSH
19515: LD_VAR 0 3
19519: PPUSH
19520: LD_INT 1
19522: PPUSH
19523: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
19527: LD_INT 42
19529: PPUSH
19530: LD_VAR 0 3
19534: PPUSH
19535: LD_INT 1
19537: PPUSH
19538: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
19542: LD_INT 44
19544: PPUSH
19545: LD_VAR 0 3
19549: PPUSH
19550: LD_INT 1
19552: PPUSH
19553: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
19557: LD_INT 41
19559: PPUSH
19560: LD_VAR 0 3
19564: PPUSH
19565: LD_INT 1
19567: PPUSH
19568: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
19572: LD_INT 40
19574: PPUSH
19575: LD_VAR 0 3
19579: PPUSH
19580: LD_INT 1
19582: PPUSH
19583: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
19587: LD_INT 43
19589: PPUSH
19590: LD_VAR 0 3
19594: PPUSH
19595: LD_INT 1
19597: PPUSH
19598: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
19602: LD_INT 70
19604: PPUSH
19605: LD_VAR 0 3
19609: PPUSH
19610: LD_INT 1
19612: PPUSH
19613: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
19617: LD_INT 51
19619: PPUSH
19620: LD_VAR 0 3
19624: PPUSH
19625: LD_INT 1
19627: PPUSH
19628: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19632: LD_INT 52
19634: PPUSH
19635: LD_VAR 0 3
19639: PPUSH
19640: LD_INT 1
19642: PPUSH
19643: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19647: LD_INT 6
19649: PPUSH
19650: LD_VAR 0 3
19654: PPUSH
19655: LD_INT 1
19657: PPUSH
19658: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19662: LD_INT 15
19664: PPUSH
19665: LD_VAR 0 3
19669: PPUSH
19670: LD_INT 1
19672: PPUSH
19673: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19677: LD_INT 7
19679: PPUSH
19680: LD_VAR 0 3
19684: PPUSH
19685: LD_INT 1
19687: PPUSH
19688: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19692: LD_INT 12
19694: PPUSH
19695: LD_VAR 0 3
19699: PPUSH
19700: LD_INT 1
19702: PPUSH
19703: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19707: LD_INT 17
19709: PPUSH
19710: LD_VAR 0 3
19714: PPUSH
19715: LD_INT 1
19717: PPUSH
19718: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19722: LD_INT 18
19724: PPUSH
19725: LD_VAR 0 3
19729: PPUSH
19730: LD_INT 1
19732: PPUSH
19733: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19737: LD_INT 60
19739: PPUSH
19740: LD_VAR 0 3
19744: PPUSH
19745: LD_INT 1
19747: PPUSH
19748: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19752: LD_INT 32
19754: PPUSH
19755: LD_VAR 0 3
19759: PPUSH
19760: LD_INT 1
19762: PPUSH
19763: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19767: LD_INT 9
19769: PPUSH
19770: LD_VAR 0 3
19774: PPUSH
19775: LD_INT 1
19777: PPUSH
19778: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19782: LD_INT 57
19784: PPUSH
19785: LD_VAR 0 3
19789: PPUSH
19790: LD_INT 1
19792: PPUSH
19793: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19797: LD_INT 30
19799: PPUSH
19800: LD_VAR 0 3
19804: PPUSH
19805: LD_INT 1
19807: PPUSH
19808: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19812: LD_INT 37
19814: PPUSH
19815: LD_VAR 0 3
19819: PPUSH
19820: LD_INT 1
19822: PPUSH
19823: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19827: LD_INT 63
19829: PPUSH
19830: LD_VAR 0 3
19834: PPUSH
19835: LD_INT 1
19837: PPUSH
19838: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19842: LD_INT 3
19844: PPUSH
19845: LD_VAR 0 3
19849: PPUSH
19850: LD_INT 1
19852: PPUSH
19853: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19857: LD_INT 4
19859: PPUSH
19860: LD_VAR 0 3
19864: PPUSH
19865: LD_INT 1
19867: PPUSH
19868: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19872: LD_INT 5
19874: PPUSH
19875: LD_VAR 0 3
19879: PPUSH
19880: LD_INT 1
19882: PPUSH
19883: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19887: LD_INT 66
19889: PPUSH
19890: LD_VAR 0 3
19894: PPUSH
19895: LD_INT 1
19897: PPUSH
19898: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19902: LD_INT 21
19904: PPUSH
19905: LD_VAR 0 3
19909: PPUSH
19910: LD_INT 1
19912: PPUSH
19913: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19917: LD_INT 22
19919: PPUSH
19920: LD_VAR 0 3
19924: PPUSH
19925: LD_INT 1
19927: PPUSH
19928: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19932: LD_INT 19
19934: PPUSH
19935: LD_VAR 0 3
19939: PPUSH
19940: LD_INT 1
19942: PPUSH
19943: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19947: LD_INT 54
19949: PPUSH
19950: LD_VAR 0 3
19954: PPUSH
19955: LD_INT 1
19957: PPUSH
19958: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19962: LD_INT 55
19964: PPUSH
19965: LD_VAR 0 3
19969: PPUSH
19970: LD_INT 1
19972: PPUSH
19973: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19977: LD_INT 0
19979: PPUSH
19980: LD_VAR 0 3
19984: PPUSH
19985: LD_INT 1
19987: PPUSH
19988: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
19992: LD_INT 1
19994: PPUSH
19995: LD_VAR 0 3
19999: PPUSH
20000: LD_INT 1
20002: PPUSH
20003: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20007: LD_INT 2
20009: PPUSH
20010: LD_VAR 0 3
20014: PPUSH
20015: LD_INT 1
20017: PPUSH
20018: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
20022: LD_INT 3
20024: PPUSH
20025: LD_VAR 0 3
20029: PPUSH
20030: LD_INT 1
20032: PPUSH
20033: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
20037: LD_INT 4
20039: PPUSH
20040: LD_VAR 0 3
20044: PPUSH
20045: LD_INT 1
20047: PPUSH
20048: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
20052: LD_INT 5
20054: PPUSH
20055: LD_VAR 0 3
20059: PPUSH
20060: LD_INT 1
20062: PPUSH
20063: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
20067: LD_INT 6
20069: PPUSH
20070: LD_VAR 0 3
20074: PPUSH
20075: LD_INT 1
20077: PPUSH
20078: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
20082: LD_INT 7
20084: PPUSH
20085: LD_VAR 0 3
20089: PPUSH
20090: LD_INT 1
20092: PPUSH
20093: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
20097: LD_INT 8
20099: PPUSH
20100: LD_VAR 0 3
20104: PPUSH
20105: LD_INT 1
20107: PPUSH
20108: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
20112: LD_INT 10
20114: PPUSH
20115: LD_VAR 0 3
20119: PPUSH
20120: LD_INT 1
20122: PPUSH
20123: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
20127: LD_INT 11
20129: PPUSH
20130: LD_VAR 0 3
20134: PPUSH
20135: LD_INT 1
20137: PPUSH
20138: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
20142: LD_INT 12
20144: PPUSH
20145: LD_VAR 0 3
20149: PPUSH
20150: LD_INT 1
20152: PPUSH
20153: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
20157: LD_INT 13
20159: PPUSH
20160: LD_VAR 0 3
20164: PPUSH
20165: LD_INT 1
20167: PPUSH
20168: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
20172: LD_INT 14
20174: PPUSH
20175: LD_VAR 0 3
20179: PPUSH
20180: LD_INT 1
20182: PPUSH
20183: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
20187: LD_INT 15
20189: PPUSH
20190: LD_VAR 0 3
20194: PPUSH
20195: LD_INT 1
20197: PPUSH
20198: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
20202: LD_INT 16
20204: PPUSH
20205: LD_VAR 0 3
20209: PPUSH
20210: LD_INT 1
20212: PPUSH
20213: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
20217: LD_INT 17
20219: PPUSH
20220: LD_VAR 0 3
20224: PPUSH
20225: LD_INT 1
20227: PPUSH
20228: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
20232: LD_INT 18
20234: PPUSH
20235: LD_VAR 0 3
20239: PPUSH
20240: LD_INT 1
20242: PPUSH
20243: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
20247: LD_INT 19
20249: PPUSH
20250: LD_VAR 0 3
20254: PPUSH
20255: LD_INT 1
20257: PPUSH
20258: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
20262: LD_INT 20
20264: PPUSH
20265: LD_VAR 0 3
20269: PPUSH
20270: LD_INT 1
20272: PPUSH
20273: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
20277: LD_INT 21
20279: PPUSH
20280: LD_VAR 0 3
20284: PPUSH
20285: LD_INT 1
20287: PPUSH
20288: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
20292: LD_INT 23
20294: PPUSH
20295: LD_VAR 0 3
20299: PPUSH
20300: LD_INT 1
20302: PPUSH
20303: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
20307: LD_INT 26
20309: PPUSH
20310: LD_VAR 0 3
20314: PPUSH
20315: LD_INT 1
20317: PPUSH
20318: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
20322: LD_INT 27
20324: PPUSH
20325: LD_VAR 0 3
20329: PPUSH
20330: LD_INT 1
20332: PPUSH
20333: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
20337: LD_INT 28
20339: PPUSH
20340: LD_VAR 0 3
20344: PPUSH
20345: LD_INT 1
20347: PPUSH
20348: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
20352: LD_INT 29
20354: PPUSH
20355: LD_VAR 0 3
20359: PPUSH
20360: LD_INT 1
20362: PPUSH
20363: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
20367: LD_INT 30
20369: PPUSH
20370: LD_VAR 0 3
20374: PPUSH
20375: LD_INT 1
20377: PPUSH
20378: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
20382: LD_INT 31
20384: PPUSH
20385: LD_VAR 0 3
20389: PPUSH
20390: LD_INT 1
20392: PPUSH
20393: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
20397: LD_INT 32
20399: PPUSH
20400: LD_VAR 0 3
20404: PPUSH
20405: LD_INT 1
20407: PPUSH
20408: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
20412: LD_INT 33
20414: PPUSH
20415: LD_VAR 0 3
20419: PPUSH
20420: LD_INT 1
20422: PPUSH
20423: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
20427: LD_INT 36
20429: PPUSH
20430: LD_VAR 0 3
20434: PPUSH
20435: LD_INT 1
20437: PPUSH
20438: CALL_OW 324
// end ; 6 :
20442: GO 21452
20444: LD_INT 6
20446: DOUBLE
20447: EQUAL
20448: IFTRUE 20452
20450: GO 21377
20452: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20453: LD_INT 35
20455: PPUSH
20456: LD_VAR 0 3
20460: PPUSH
20461: LD_INT 1
20463: PPUSH
20464: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20468: LD_INT 45
20470: PPUSH
20471: LD_VAR 0 3
20475: PPUSH
20476: LD_INT 1
20478: PPUSH
20479: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20483: LD_INT 46
20485: PPUSH
20486: LD_VAR 0 3
20490: PPUSH
20491: LD_INT 1
20493: PPUSH
20494: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20498: LD_INT 47
20500: PPUSH
20501: LD_VAR 0 3
20505: PPUSH
20506: LD_INT 1
20508: PPUSH
20509: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20513: LD_INT 1
20515: PPUSH
20516: LD_VAR 0 3
20520: PPUSH
20521: LD_INT 1
20523: PPUSH
20524: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20528: LD_INT 2
20530: PPUSH
20531: LD_VAR 0 3
20535: PPUSH
20536: LD_INT 1
20538: PPUSH
20539: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20543: LD_INT 11
20545: PPUSH
20546: LD_VAR 0 3
20550: PPUSH
20551: LD_INT 1
20553: PPUSH
20554: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
20558: LD_INT 20
20560: PPUSH
20561: LD_VAR 0 3
20565: PPUSH
20566: LD_INT 1
20568: PPUSH
20569: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20573: LD_INT 48
20575: PPUSH
20576: LD_VAR 0 3
20580: PPUSH
20581: LD_INT 1
20583: PPUSH
20584: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
20588: LD_INT 49
20590: PPUSH
20591: LD_VAR 0 3
20595: PPUSH
20596: LD_INT 1
20598: PPUSH
20599: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
20603: LD_INT 50
20605: PPUSH
20606: LD_VAR 0 3
20610: PPUSH
20611: LD_INT 1
20613: PPUSH
20614: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20618: LD_INT 69
20620: PPUSH
20621: LD_VAR 0 3
20625: PPUSH
20626: LD_INT 1
20628: PPUSH
20629: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20633: LD_INT 39
20635: PPUSH
20636: LD_VAR 0 3
20640: PPUSH
20641: LD_INT 1
20643: PPUSH
20644: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
20648: LD_INT 34
20650: PPUSH
20651: LD_VAR 0 3
20655: PPUSH
20656: LD_INT 1
20658: PPUSH
20659: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20663: LD_INT 42
20665: PPUSH
20666: LD_VAR 0 3
20670: PPUSH
20671: LD_INT 1
20673: PPUSH
20674: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20678: LD_INT 44
20680: PPUSH
20681: LD_VAR 0 3
20685: PPUSH
20686: LD_INT 1
20688: PPUSH
20689: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20693: LD_INT 41
20695: PPUSH
20696: LD_VAR 0 3
20700: PPUSH
20701: LD_INT 1
20703: PPUSH
20704: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
20708: LD_INT 13
20710: PPUSH
20711: LD_VAR 0 3
20715: PPUSH
20716: LD_INT 1
20718: PPUSH
20719: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
20723: LD_INT 40
20725: PPUSH
20726: LD_VAR 0 3
20730: PPUSH
20731: LD_INT 1
20733: PPUSH
20734: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20738: LD_INT 43
20740: PPUSH
20741: LD_VAR 0 3
20745: PPUSH
20746: LD_INT 1
20748: PPUSH
20749: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20753: LD_INT 70
20755: PPUSH
20756: LD_VAR 0 3
20760: PPUSH
20761: LD_INT 1
20763: PPUSH
20764: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
20768: LD_INT 23
20770: PPUSH
20771: LD_VAR 0 3
20775: PPUSH
20776: LD_INT 1
20778: PPUSH
20779: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20783: LD_INT 51
20785: PPUSH
20786: LD_VAR 0 3
20790: PPUSH
20791: LD_INT 1
20793: PPUSH
20794: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
20798: LD_INT 52
20800: PPUSH
20801: LD_VAR 0 3
20805: PPUSH
20806: LD_INT 1
20808: PPUSH
20809: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20813: LD_INT 6
20815: PPUSH
20816: LD_VAR 0 3
20820: PPUSH
20821: LD_INT 1
20823: PPUSH
20824: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
20828: LD_INT 15
20830: PPUSH
20831: LD_VAR 0 3
20835: PPUSH
20836: LD_INT 1
20838: PPUSH
20839: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
20843: LD_INT 7
20845: PPUSH
20846: LD_VAR 0 3
20850: PPUSH
20851: LD_INT 1
20853: PPUSH
20854: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
20858: LD_INT 12
20860: PPUSH
20861: LD_VAR 0 3
20865: PPUSH
20866: LD_INT 1
20868: PPUSH
20869: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
20873: LD_INT 10
20875: PPUSH
20876: LD_VAR 0 3
20880: PPUSH
20881: LD_INT 1
20883: PPUSH
20884: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
20888: LD_INT 17
20890: PPUSH
20891: LD_VAR 0 3
20895: PPUSH
20896: LD_INT 1
20898: PPUSH
20899: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
20903: LD_INT 18
20905: PPUSH
20906: LD_VAR 0 3
20910: PPUSH
20911: LD_INT 1
20913: PPUSH
20914: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
20918: LD_INT 60
20920: PPUSH
20921: LD_VAR 0 3
20925: PPUSH
20926: LD_INT 1
20928: PPUSH
20929: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
20933: LD_INT 61
20935: PPUSH
20936: LD_VAR 0 3
20940: PPUSH
20941: LD_INT 1
20943: PPUSH
20944: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
20948: LD_INT 32
20950: PPUSH
20951: LD_VAR 0 3
20955: PPUSH
20956: LD_INT 1
20958: PPUSH
20959: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
20963: LD_INT 27
20965: PPUSH
20966: LD_VAR 0 3
20970: PPUSH
20971: LD_INT 1
20973: PPUSH
20974: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
20978: LD_INT 36
20980: PPUSH
20981: LD_VAR 0 3
20985: PPUSH
20986: LD_INT 1
20988: PPUSH
20989: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
20993: LD_INT 33
20995: PPUSH
20996: LD_VAR 0 3
21000: PPUSH
21001: LD_INT 1
21003: PPUSH
21004: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
21008: LD_INT 9
21010: PPUSH
21011: LD_VAR 0 3
21015: PPUSH
21016: LD_INT 1
21018: PPUSH
21019: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
21023: LD_INT 38
21025: PPUSH
21026: LD_VAR 0 3
21030: PPUSH
21031: LD_INT 1
21033: PPUSH
21034: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
21038: LD_INT 57
21040: PPUSH
21041: LD_VAR 0 3
21045: PPUSH
21046: LD_INT 1
21048: PPUSH
21049: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
21053: LD_INT 58
21055: PPUSH
21056: LD_VAR 0 3
21060: PPUSH
21061: LD_INT 1
21063: PPUSH
21064: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
21068: LD_INT 28
21070: PPUSH
21071: LD_VAR 0 3
21075: PPUSH
21076: LD_INT 1
21078: PPUSH
21079: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
21083: LD_INT 29
21085: PPUSH
21086: LD_VAR 0 3
21090: PPUSH
21091: LD_INT 1
21093: PPUSH
21094: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
21098: LD_INT 30
21100: PPUSH
21101: LD_VAR 0 3
21105: PPUSH
21106: LD_INT 1
21108: PPUSH
21109: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
21113: LD_INT 37
21115: PPUSH
21116: LD_VAR 0 3
21120: PPUSH
21121: LD_INT 1
21123: PPUSH
21124: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
21128: LD_INT 63
21130: PPUSH
21131: LD_VAR 0 3
21135: PPUSH
21136: LD_INT 1
21138: PPUSH
21139: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
21143: LD_INT 64
21145: PPUSH
21146: LD_VAR 0 3
21150: PPUSH
21151: LD_INT 1
21153: PPUSH
21154: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
21158: LD_INT 3
21160: PPUSH
21161: LD_VAR 0 3
21165: PPUSH
21166: LD_INT 1
21168: PPUSH
21169: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
21173: LD_INT 4
21175: PPUSH
21176: LD_VAR 0 3
21180: PPUSH
21181: LD_INT 1
21183: PPUSH
21184: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
21188: LD_INT 5
21190: PPUSH
21191: LD_VAR 0 3
21195: PPUSH
21196: LD_INT 1
21198: PPUSH
21199: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
21203: LD_INT 8
21205: PPUSH
21206: LD_VAR 0 3
21210: PPUSH
21211: LD_INT 1
21213: PPUSH
21214: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
21218: LD_INT 66
21220: PPUSH
21221: LD_VAR 0 3
21225: PPUSH
21226: LD_INT 1
21228: PPUSH
21229: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
21233: LD_INT 67
21235: PPUSH
21236: LD_VAR 0 3
21240: PPUSH
21241: LD_INT 1
21243: PPUSH
21244: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
21248: LD_INT 21
21250: PPUSH
21251: LD_VAR 0 3
21255: PPUSH
21256: LD_INT 1
21258: PPUSH
21259: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
21263: LD_INT 22
21265: PPUSH
21266: LD_VAR 0 3
21270: PPUSH
21271: LD_INT 1
21273: PPUSH
21274: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
21278: LD_INT 19
21280: PPUSH
21281: LD_VAR 0 3
21285: PPUSH
21286: LD_INT 1
21288: PPUSH
21289: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
21293: LD_INT 26
21295: PPUSH
21296: LD_VAR 0 3
21300: PPUSH
21301: LD_INT 1
21303: PPUSH
21304: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
21308: LD_INT 54
21310: PPUSH
21311: LD_VAR 0 3
21315: PPUSH
21316: LD_INT 1
21318: PPUSH
21319: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
21323: LD_INT 55
21325: PPUSH
21326: LD_VAR 0 3
21330: PPUSH
21331: LD_INT 1
21333: PPUSH
21334: CALL_OW 322
// for i = 0 to 39 do
21338: LD_ADDR_VAR 0 4
21342: PUSH
21343: DOUBLE
21344: LD_INT 0
21346: DEC
21347: ST_TO_ADDR
21348: LD_INT 39
21350: PUSH
21351: FOR_TO
21352: IFFALSE 21373
// SetRestrict ( i , side , true ) ;
21354: LD_VAR 0 4
21358: PPUSH
21359: LD_VAR 0 3
21363: PPUSH
21364: LD_INT 1
21366: PPUSH
21367: CALL_OW 324
21371: GO 21351
21373: POP
21374: POP
// end ; else
21375: GO 21452
21377: POP
// begin for i = 1 to 73 do
21378: LD_ADDR_VAR 0 4
21382: PUSH
21383: DOUBLE
21384: LD_INT 1
21386: DEC
21387: ST_TO_ADDR
21388: LD_INT 73
21390: PUSH
21391: FOR_TO
21392: IFFALSE 21413
// SetTech ( i , side , state_enabled ) ;
21394: LD_VAR 0 4
21398: PPUSH
21399: LD_VAR 0 3
21403: PPUSH
21404: LD_INT 1
21406: PPUSH
21407: CALL_OW 322
21411: GO 21391
21413: POP
21414: POP
// for i = 0 to 39 do
21415: LD_ADDR_VAR 0 4
21419: PUSH
21420: DOUBLE
21421: LD_INT 0
21423: DEC
21424: ST_TO_ADDR
21425: LD_INT 39
21427: PUSH
21428: FOR_TO
21429: IFFALSE 21450
// SetRestrict ( i , side , true ) ;
21431: LD_VAR 0 4
21435: PPUSH
21436: LD_VAR 0 3
21440: PPUSH
21441: LD_INT 1
21443: PPUSH
21444: CALL_OW 324
21448: GO 21428
21450: POP
21451: POP
// end ; end ; end ;
21452: GO 17457
21454: POP
21455: POP
// end ;
21456: LD_VAR 0 2
21460: RET
