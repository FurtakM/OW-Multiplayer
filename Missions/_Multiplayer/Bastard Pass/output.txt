// export def_main_base , def_secondary_base , def_defence_level , def_amount_of_people , def_initial_level , def_main_deposits , def_secondary_deposits , def_siberite_detection , def_starting_resources , def_shipments_density , def_people_arrivals , def_people_loyality , def_people_info , def_morale_flags , def_siberite_bomb , def_amount_of_apemen , def_builduptime , def_win_rules , def_people_respawning ; export is_depot , number_of_people , number_of_pplants , are_mines , is_lab , is_fact , is_arm , are_breastworks , deposits , initial_level , starting_crates , starting_resources , shipments_density , max_arriving_times , text_info , fog_info , def_bf_params , amount_of_apemen , siberite_bomb_Delay ; export Positions , Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export second_side , third_nation ; export start_def , depots_def , breastworks_def , labs_def , factories_def , armories_def , pplants_def , deposits_def ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i ; var u1 , u2 , pom_tab , p1 , p2 , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
  73: PPUSH
  74: PPUSH
  75: PPUSH
  76: PPUSH
  77: PPUSH
  78: PPUSH
  79: PPUSH
  80: PPUSH
  81: PPUSH
  82: PPUSH
  83: PPUSH
// if MultiPlayer then
  84: LD_OWVAR 4
  88: IFFALSE 162
// begin Game_Type = mp_game_type ;
  90: LD_ADDR_EXP 66
  94: PUSH
  95: LD_OWVAR 6
  99: ST_TO_ADDR
// Your_Side = mp_player_side ;
 100: LD_ADDR_OWVAR 2
 104: PUSH
 105: LD_OWVAR 7
 109: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_OWVAR 17
 119: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 120: LD_ADDR_EXP 40
 124: PUSH
 125: LD_OWVAR 15
 129: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 130: LD_ADDR_EXP 44
 134: PUSH
 135: LD_OWVAR 16
 139: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 140: LD_ADDR_EXP 42
 144: PUSH
 145: CALL 0 0 0
 149: ST_TO_ADDR
// Teams = mp_teams ;
 150: LD_ADDR_EXP 41
 154: PUSH
 155: LD_OWVAR 12
 159: ST_TO_ADDR
// end else
 160: GO 333
// begin Your_Side = 3 ;
 162: LD_ADDR_OWVAR 2
 166: PUSH
 167: LD_INT 3
 169: ST_TO_ADDR
// Side_Positions = [ 0 , 0 , 2 , 0 , 1 , 0 , 0 , 0 ] ;
 170: LD_ADDR_EXP 43
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 2
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 1
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: LD_INT 0
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: LIST
 208: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 209: LD_ADDR_EXP 40
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: LD_INT 0
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: LIST
 246: LIST
 247: ST_TO_ADDR
// Side_Nations = [ 0 , 0 , 3 , 0 , 2 , 0 , 0 , 0 ] ;
 248: LD_ADDR_EXP 44
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 3
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 2
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: LIST
 286: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 287: LD_ADDR_EXP 42
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: ST_TO_ADDR
// Teams = [ ] ;
 326: LD_ADDR_EXP 41
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ; for i := 1 to 8 do
 333: LD_ADDR_VAR 0 8
 337: PUSH
 338: DOUBLE
 339: LD_INT 1
 341: DEC
 342: ST_TO_ADDR
 343: LD_INT 8
 345: PUSH
 346: FOR_TO
 347: IFFALSE 434
// if Multiplayer_GetPlayerIsSpec ( i ) then
 349: LD_VAR 0 8
 353: PPUSH
 354: CALL_OW 530
 358: IFFALSE 432
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 360: LD_ADDR_EXP 43
 364: PUSH
 365: LD_EXP 43
 369: PPUSH
 370: LD_VAR 0 8
 374: PPUSH
 375: LD_INT 0
 377: PPUSH
 378: CALL_OW 1
 382: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 383: LD_ADDR_EXP 41
 387: PUSH
 388: LD_EXP 41
 392: PPUSH
 393: LD_EXP 40
 397: PUSH
 398: LD_VAR 0 8
 402: ARRAY
 403: PPUSH
 404: LD_EXP 41
 408: PUSH
 409: LD_EXP 40
 413: PUSH
 414: LD_VAR 0 8
 418: ARRAY
 419: ARRAY
 420: PUSH
 421: LD_VAR 0 8
 425: DIFF
 426: PPUSH
 427: CALL_OW 1
 431: ST_TO_ADDR
// end ;
 432: GO 346
 434: POP
 435: POP
// Position_Sides := [ 0 , 0 ] ;
 436: LD_ADDR_EXP 46
 440: PUSH
 441: LD_INT 0
 443: PUSH
 444: LD_INT 0
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// for i := 1 to 8 do
 451: LD_ADDR_VAR 0 8
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_INT 8
 463: PUSH
 464: FOR_TO
 465: IFFALSE 512
// if Side_Positions [ i ] then
 467: LD_EXP 43
 471: PUSH
 472: LD_VAR 0 8
 476: ARRAY
 477: IFFALSE 510
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 479: LD_ADDR_EXP 46
 483: PUSH
 484: LD_EXP 46
 488: PPUSH
 489: LD_EXP 43
 493: PUSH
 494: LD_VAR 0 8
 498: ARRAY
 499: PPUSH
 500: LD_VAR 0 8
 504: PPUSH
 505: CALL_OW 1
 509: ST_TO_ADDR
 510: GO 464
 512: POP
 513: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 514: LD_ADDR_EXP 45
 518: PUSH
 519: LD_EXP 40
 523: PUSH
 524: LD_INT 0
 526: PUSH
 527: EMPTY
 528: LIST
 529: DIFF
 530: PUSH
 531: LD_INT 1
 533: GREATER
 534: ST_TO_ADDR
// p1 := 0 ;
 535: LD_ADDR_VAR 0 12
 539: PUSH
 540: LD_INT 0
 542: ST_TO_ADDR
// p2 := 0 ;
 543: LD_ADDR_VAR 0 13
 547: PUSH
 548: LD_INT 0
 550: ST_TO_ADDR
// for i := 1 to 8 do
 551: LD_ADDR_VAR 0 8
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 8
 563: PUSH
 564: FOR_TO
 565: IFFALSE 623
// if Side_Positions [ i ] = 1 then
 567: LD_EXP 43
 571: PUSH
 572: LD_VAR 0 8
 576: ARRAY
 577: PUSH
 578: LD_INT 1
 580: EQUAL
 581: IFFALSE 595
// p1 := i else
 583: LD_ADDR_VAR 0 12
 587: PUSH
 588: LD_VAR 0 8
 592: ST_TO_ADDR
 593: GO 621
// if Side_Positions [ i ] = 2 then
 595: LD_EXP 43
 599: PUSH
 600: LD_VAR 0 8
 604: ARRAY
 605: PUSH
 606: LD_INT 2
 608: EQUAL
 609: IFFALSE 621
// p2 := i ;
 611: LD_ADDR_VAR 0 13
 615: PUSH
 616: LD_VAR 0 8
 620: ST_TO_ADDR
 621: GO 564
 623: POP
 624: POP
// Positions := [ p1 , p2 ] ;
 625: LD_ADDR_EXP 39
 629: PUSH
 630: LD_VAR 0 12
 634: PUSH
 635: LD_VAR 0 13
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: ST_TO_ADDR
// if MultiPlayer then
 644: LD_OWVAR 4
 648: IFFALSE 902
// begin def_main_base = GetMultiplayerSetting ( 0 ) ;
 650: LD_ADDR_EXP 1
 654: PUSH
 655: LD_INT 0
 657: PPUSH
 658: CALL_OW 426
 662: ST_TO_ADDR
// def_secondary_base = GetMultiplayerSetting ( 1 ) ;
 663: LD_ADDR_EXP 2
 667: PUSH
 668: LD_INT 1
 670: PPUSH
 671: CALL_OW 426
 675: ST_TO_ADDR
// def_defence_level = GetMultiplayerSetting ( 2 ) ;
 676: LD_ADDR_EXP 3
 680: PUSH
 681: LD_INT 2
 683: PPUSH
 684: CALL_OW 426
 688: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 3 ) ;
 689: LD_ADDR_EXP 4
 693: PUSH
 694: LD_INT 3
 696: PPUSH
 697: CALL_OW 426
 701: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 4 ) ;
 702: LD_ADDR_EXP 5
 706: PUSH
 707: LD_INT 4
 709: PPUSH
 710: CALL_OW 426
 714: ST_TO_ADDR
// def_main_deposits = GetMultiplayerSetting ( 5 ) ;
 715: LD_ADDR_EXP 6
 719: PUSH
 720: LD_INT 5
 722: PPUSH
 723: CALL_OW 426
 727: ST_TO_ADDR
// def_secondary_deposits = GetMultiplayerSetting ( 6 ) ;
 728: LD_ADDR_EXP 7
 732: PUSH
 733: LD_INT 6
 735: PPUSH
 736: CALL_OW 426
 740: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 7 ) ;
 741: LD_ADDR_EXP 8
 745: PUSH
 746: LD_INT 7
 748: PPUSH
 749: CALL_OW 426
 753: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 8 ) ;
 754: LD_ADDR_EXP 9
 758: PUSH
 759: LD_INT 8
 761: PPUSH
 762: CALL_OW 426
 766: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 9 ) ;
 767: LD_ADDR_EXP 10
 771: PUSH
 772: LD_INT 9
 774: PPUSH
 775: CALL_OW 426
 779: ST_TO_ADDR
// def_people_arrivals = GetMultiplayerSetting ( 10 ) ;
 780: LD_ADDR_EXP 11
 784: PUSH
 785: LD_INT 10
 787: PPUSH
 788: CALL_OW 426
 792: ST_TO_ADDR
// def_people_loyality = GetMultiplayerSetting ( 11 ) ;
 793: LD_ADDR_EXP 12
 797: PUSH
 798: LD_INT 11
 800: PPUSH
 801: CALL_OW 426
 805: ST_TO_ADDR
// def_people_info = GetMultiplayerSetting ( 12 ) ;
 806: LD_ADDR_EXP 13
 810: PUSH
 811: LD_INT 12
 813: PPUSH
 814: CALL_OW 426
 818: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 15 ) ;
 819: LD_ADDR_EXP 14
 823: PUSH
 824: LD_INT 15
 826: PPUSH
 827: CALL_OW 426
 831: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 16 ) ;
 832: LD_ADDR_EXP 15
 836: PUSH
 837: LD_INT 16
 839: PPUSH
 840: CALL_OW 426
 844: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 17 ) ;
 845: LD_ADDR_EXP 16
 849: PUSH
 850: LD_INT 17
 852: PPUSH
 853: CALL_OW 426
 857: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 858: LD_ADDR_EXP 17
 862: PUSH
 863: LD_INT 20
 865: PPUSH
 866: CALL_OW 426
 870: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 871: LD_ADDR_VAR 0 14
 875: PUSH
 876: LD_INT 22
 878: PPUSH
 879: CALL_OW 426
 883: ST_TO_ADDR
// def_people_respawning = 0 ;
 884: LD_ADDR_EXP 19
 888: PUSH
 889: LD_INT 0
 891: ST_TO_ADDR
// def_win_rules = 0 ;
 892: LD_ADDR_EXP 18
 896: PUSH
 897: LD_INT 0
 899: ST_TO_ADDR
// end else
 900: GO 1074
// begin randomize ;
 902: CALL_OW 10
// def_main_base = 1 ;
 906: LD_ADDR_EXP 1
 910: PUSH
 911: LD_INT 1
 913: ST_TO_ADDR
// def_secondary_base = 1 ;
 914: LD_ADDR_EXP 2
 918: PUSH
 919: LD_INT 1
 921: ST_TO_ADDR
// def_defence_level = 1 ;
 922: LD_ADDR_EXP 3
 926: PUSH
 927: LD_INT 1
 929: ST_TO_ADDR
// def_amount_of_people = 2 ;
 930: LD_ADDR_EXP 4
 934: PUSH
 935: LD_INT 2
 937: ST_TO_ADDR
// def_initial_level = 1 ;
 938: LD_ADDR_EXP 5
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// def_main_deposits = 2 ;
 946: LD_ADDR_EXP 6
 950: PUSH
 951: LD_INT 2
 953: ST_TO_ADDR
// def_secondary_deposits = 1 ;
 954: LD_ADDR_EXP 7
 958: PUSH
 959: LD_INT 1
 961: ST_TO_ADDR
// def_siberite_detection = 1 ;
 962: LD_ADDR_EXP 8
 966: PUSH
 967: LD_INT 1
 969: ST_TO_ADDR
// def_starting_resources = 2 ;
 970: LD_ADDR_EXP 9
 974: PUSH
 975: LD_INT 2
 977: ST_TO_ADDR
// def_shipments_density = 70 ;
 978: LD_ADDR_EXP 10
 982: PUSH
 983: LD_INT 70
 985: ST_TO_ADDR
// def_people_arrivals = 3 ;
 986: LD_ADDR_EXP 11
 990: PUSH
 991: LD_INT 3
 993: ST_TO_ADDR
// def_people_loyality = 1 ;
 994: LD_ADDR_EXP 12
 998: PUSH
 999: LD_INT 1
1001: ST_TO_ADDR
// def_people_info = 1 ;
1002: LD_ADDR_EXP 13
1006: PUSH
1007: LD_INT 1
1009: ST_TO_ADDR
// def_morale_flags = 2 ;
1010: LD_ADDR_EXP 14
1014: PUSH
1015: LD_INT 2
1017: ST_TO_ADDR
// def_siberite_bomb = 1 ;
1018: LD_ADDR_EXP 15
1022: PUSH
1023: LD_INT 1
1025: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
1026: LD_ADDR_EXP 16
1030: PUSH
1031: LD_INT 3
1033: ST_TO_ADDR
// def_builduptime = 1 ;
1034: LD_ADDR_EXP 17
1038: PUSH
1039: LD_INT 1
1041: ST_TO_ADDR
// def_game_rules = 0 ;
1042: LD_ADDR_EXP 67
1046: PUSH
1047: LD_INT 0
1049: ST_TO_ADDR
// tech_level = 4 ;
1050: LD_ADDR_VAR 0 14
1054: PUSH
1055: LD_INT 4
1057: ST_TO_ADDR
// def_people_respawning = 0 ;
1058: LD_ADDR_EXP 19
1062: PUSH
1063: LD_INT 0
1065: ST_TO_ADDR
// def_win_rules = 0 ;
1066: LD_ADDR_EXP 18
1070: PUSH
1071: LD_INT 0
1073: ST_TO_ADDR
// end ; InitGameRules ;
1074: CALL 14073 0 0
// if def_game_rules = 0 then
1078: LD_EXP 67
1082: PUSH
1083: LD_INT 0
1085: EQUAL
1086: IFFALSE 1113
// begin if isSGUI then
1088: LD_OWVAR 83
1092: IFFALSE 1100
// setMpTechs ( ) else
1094: CALL 17458 0 0
1098: GO 1113
// begin SetMpTechLevel ( tech_level + 1 ) ;
1100: LD_VAR 0 14
1104: PUSH
1105: LD_INT 1
1107: PLUS
1108: PPUSH
1109: CALL 17605 0 1
// end ; end ; u1 = [ 0 , 1 , 1 , 1 , 2 ] [ def_main_base + 1 ] ;
1113: LD_ADDR_VAR 0 9
1117: PUSH
1118: LD_INT 0
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 1
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: PUSH
1140: LD_EXP 1
1144: PUSH
1145: LD_INT 1
1147: PLUS
1148: ARRAY
1149: ST_TO_ADDR
// u2 = [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] ;
1150: LD_ADDR_VAR 0 10
1154: PUSH
1155: LD_INT 0
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 1
1163: PUSH
1164: LD_INT 2
1166: PUSH
1167: LD_INT 2
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: PUSH
1177: LD_EXP 1
1181: PUSH
1182: LD_INT 1
1184: PLUS
1185: ARRAY
1186: ST_TO_ADDR
// is_depot = [ [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] , [ 0 , 1 , 1 ] [ def_secondary_base + 1 ] ] ;
1187: LD_ADDR_EXP 20
1191: PUSH
1192: LD_INT 0
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: LD_INT 2
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: LIST
1211: LIST
1212: LIST
1213: PUSH
1214: LD_EXP 1
1218: PUSH
1219: LD_INT 1
1221: PLUS
1222: ARRAY
1223: PUSH
1224: LD_INT 0
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: LD_INT 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: LIST
1237: PUSH
1238: LD_EXP 2
1242: PUSH
1243: LD_INT 1
1245: PLUS
1246: ARRAY
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: ST_TO_ADDR
// if is_depot [ 2 ] then
1252: LD_EXP 20
1256: PUSH
1257: LD_INT 2
1259: ARRAY
1260: IFFALSE 1399
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ [ ] , [ 1 ] , [ 1 , 1 ] , [ 1 , 1 , 1 ] ] [ def_defence_level + 1 ] ] else
1262: LD_ADDR_EXP 27
1266: PUSH
1267: EMPTY
1268: PUSH
1269: LD_VAR 0 10
1273: PUSH
1274: LD_VAR 0 9
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: PUSH
1283: LD_VAR 0 10
1287: PUSH
1288: LD_VAR 0 10
1292: PUSH
1293: LD_VAR 0 9
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: LIST
1302: PUSH
1303: LD_VAR 0 10
1307: PUSH
1308: LD_VAR 0 10
1312: PUSH
1313: LD_VAR 0 9
1317: PUSH
1318: LD_VAR 0 9
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: PUSH
1335: LD_EXP 3
1339: PUSH
1340: LD_INT 1
1342: PLUS
1343: ARRAY
1344: PUSH
1345: EMPTY
1346: PUSH
1347: LD_INT 1
1349: PUSH
1350: EMPTY
1351: LIST
1352: PUSH
1353: LD_INT 1
1355: PUSH
1356: LD_INT 1
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: PUSH
1363: LD_INT 1
1365: PUSH
1366: LD_INT 1
1368: PUSH
1369: LD_INT 1
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: PUSH
1383: LD_EXP 3
1387: PUSH
1388: LD_INT 1
1390: PLUS
1391: ARRAY
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: ST_TO_ADDR
1397: GO 1488
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ ] ] ;
1399: LD_ADDR_EXP 27
1403: PUSH
1404: EMPTY
1405: PUSH
1406: LD_VAR 0 10
1410: PUSH
1411: LD_VAR 0 9
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: PUSH
1420: LD_VAR 0 10
1424: PUSH
1425: LD_VAR 0 10
1429: PUSH
1430: LD_VAR 0 9
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PUSH
1440: LD_VAR 0 10
1444: PUSH
1445: LD_VAR 0 10
1449: PUSH
1450: LD_VAR 0 9
1454: PUSH
1455: LD_VAR 0 9
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_EXP 3
1476: PUSH
1477: LD_INT 1
1479: PLUS
1480: ARRAY
1481: PUSH
1482: EMPTY
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: ST_TO_ADDR
// is_fact = [ [ 0 , 0 , 1 , 2 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1488: LD_ADDR_EXP 25
1492: PUSH
1493: LD_INT 0
1495: PUSH
1496: LD_INT 0
1498: PUSH
1499: LD_INT 1
1501: PUSH
1502: LD_INT 2
1504: PUSH
1505: LD_INT 2
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: PUSH
1515: LD_EXP 1
1519: PUSH
1520: LD_INT 1
1522: PLUS
1523: ARRAY
1524: PUSH
1525: LD_INT 0
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: ST_TO_ADDR
// is_lab = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1532: LD_ADDR_EXP 24
1536: PUSH
1537: LD_INT 0
1539: PUSH
1540: LD_INT 0
1542: PUSH
1543: LD_INT 1
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: LD_INT 2
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: PUSH
1559: LD_EXP 1
1563: PUSH
1564: LD_INT 1
1566: PLUS
1567: ARRAY
1568: PUSH
1569: LD_INT 0
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: ST_TO_ADDR
// is_arm = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1576: LD_ADDR_EXP 26
1580: PUSH
1581: LD_INT 0
1583: PUSH
1584: LD_INT 0
1586: PUSH
1587: LD_INT 1
1589: PUSH
1590: LD_INT 1
1592: PUSH
1593: LD_INT 2
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: LD_EXP 1
1607: PUSH
1608: LD_INT 1
1610: PLUS
1611: ARRAY
1612: PUSH
1613: LD_INT 0
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: ST_TO_ADDR
// are_mines = [ [ 0 , 0 , 0 , 1 , 1 ] [ def_main_base + 1 ] , [ 0 , 0 , 1 ] [ def_secondary_base + 1 ] ] ;
1620: LD_ADDR_EXP 23
1624: PUSH
1625: LD_INT 0
1627: PUSH
1628: LD_INT 0
1630: PUSH
1631: LD_INT 0
1633: PUSH
1634: LD_INT 1
1636: PUSH
1637: LD_INT 1
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: PUSH
1647: LD_EXP 1
1651: PUSH
1652: LD_INT 1
1654: PLUS
1655: ARRAY
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: LD_INT 0
1662: PUSH
1663: LD_INT 1
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_EXP 2
1675: PUSH
1676: LD_INT 1
1678: PLUS
1679: ARRAY
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: ST_TO_ADDR
// number_of_pplants = [ [ 0 , 0 , 0 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1685: LD_ADDR_EXP 22
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: LD_INT 0
1695: PUSH
1696: LD_INT 0
1698: PUSH
1699: LD_INT 1
1701: PUSH
1702: LD_INT 2
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: PUSH
1712: LD_EXP 1
1716: PUSH
1717: LD_INT 1
1719: PLUS
1720: ARRAY
1721: PUSH
1722: LD_INT 0
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: ST_TO_ADDR
// number_of_people = [ [ 5 , 8 , 11 ] [ def_amount_of_people + 1 ] , ( [ 2 , 3 , 4 ] [ def_amount_of_people + 1 ] ) * is_depot [ 2 ] ] ;
1729: LD_ADDR_EXP 21
1733: PUSH
1734: LD_INT 5
1736: PUSH
1737: LD_INT 8
1739: PUSH
1740: LD_INT 11
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: LD_EXP 4
1752: PUSH
1753: LD_INT 1
1755: PLUS
1756: ARRAY
1757: PUSH
1758: LD_INT 2
1760: PUSH
1761: LD_INT 3
1763: PUSH
1764: LD_INT 4
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_EXP 4
1776: PUSH
1777: LD_INT 1
1779: PLUS
1780: ARRAY
1781: PUSH
1782: LD_EXP 20
1786: PUSH
1787: LD_INT 2
1789: ARRAY
1790: MUL
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
1796: LD_ADDR_EXP 29
1800: PUSH
1801: LD_INT 2
1803: PUSH
1804: LD_INT 3
1806: PUSH
1807: LD_INT 4
1809: PUSH
1810: LD_INT 5
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_EXP 5
1823: PUSH
1824: LD_INT 1
1826: PLUS
1827: ARRAY
1828: ST_TO_ADDR
// starting_resources = [ [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] , [ [ 50 , 0 , 0 ] , [ 20 , 0 , 0 ] ] , [ [ 150 , 30 , 0 ] , [ 60 , 0 , 0 ] ] , [ [ 250 , 50 , 10 ] , [ 100 , 30 , 0 ] ] ] [ def_starting_resources + 1 ] ;
1829: LD_ADDR_EXP 31
1833: PUSH
1834: LD_INT 0
1836: PUSH
1837: LD_INT 0
1839: PUSH
1840: LD_INT 0
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: LIST
1847: PUSH
1848: LD_INT 0
1850: PUSH
1851: LD_INT 0
1853: PUSH
1854: LD_INT 0
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: PUSH
1866: LD_INT 50
1868: PUSH
1869: LD_INT 0
1871: PUSH
1872: LD_INT 0
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 20
1882: PUSH
1883: LD_INT 0
1885: PUSH
1886: LD_INT 0
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: LD_INT 150
1900: PUSH
1901: LD_INT 30
1903: PUSH
1904: LD_INT 0
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: LIST
1911: PUSH
1912: LD_INT 60
1914: PUSH
1915: LD_INT 0
1917: PUSH
1918: LD_INT 0
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: LIST
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: PUSH
1930: LD_INT 250
1932: PUSH
1933: LD_INT 50
1935: PUSH
1936: LD_INT 10
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: LIST
1943: PUSH
1944: LD_INT 100
1946: PUSH
1947: LD_INT 30
1949: PUSH
1950: LD_INT 0
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: LIST
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: PUSH
1968: LD_EXP 9
1972: PUSH
1973: LD_INT 1
1975: PLUS
1976: ARRAY
1977: ST_TO_ADDR
// shipments_density := 360 - ( def_shipments_density * 2 ) ;
1978: LD_ADDR_EXP 32
1982: PUSH
1983: LD_INT 360
1985: PUSH
1986: LD_EXP 10
1990: PUSH
1991: LD_INT 2
1993: MUL
1994: MINUS
1995: ST_TO_ADDR
// max_arriving_times = [ [ ] , [ 10 , 17 , 26 , 36 , 48 , 60 ] , [ 6 , 10 , 15 , 20 , 26 , 32 , 38 , 45 , 52 , 60 ] , [ 4 , 6 , 9 , 12 , 16 , 20 , 24 , 28 , 32 , 36 , 40 , 45 , 50 , 55 , 60 ] ] [ def_people_arrivals + 1 ] ;
1996: LD_ADDR_EXP 33
2000: PUSH
2001: EMPTY
2002: PUSH
2003: LD_INT 10
2005: PUSH
2006: LD_INT 17
2008: PUSH
2009: LD_INT 26
2011: PUSH
2012: LD_INT 36
2014: PUSH
2015: LD_INT 48
2017: PUSH
2018: LD_INT 60
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 6
2031: PUSH
2032: LD_INT 10
2034: PUSH
2035: LD_INT 15
2037: PUSH
2038: LD_INT 20
2040: PUSH
2041: LD_INT 26
2043: PUSH
2044: LD_INT 32
2046: PUSH
2047: LD_INT 38
2049: PUSH
2050: LD_INT 45
2052: PUSH
2053: LD_INT 52
2055: PUSH
2056: LD_INT 60
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: PUSH
2071: LD_INT 4
2073: PUSH
2074: LD_INT 6
2076: PUSH
2077: LD_INT 9
2079: PUSH
2080: LD_INT 12
2082: PUSH
2083: LD_INT 16
2085: PUSH
2086: LD_INT 20
2088: PUSH
2089: LD_INT 24
2091: PUSH
2092: LD_INT 28
2094: PUSH
2095: LD_INT 32
2097: PUSH
2098: LD_INT 36
2100: PUSH
2101: LD_INT 40
2103: PUSH
2104: LD_INT 45
2106: PUSH
2107: LD_INT 50
2109: PUSH
2110: LD_INT 55
2112: PUSH
2113: LD_INT 60
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: PUSH
2139: LD_EXP 11
2143: PUSH
2144: LD_INT 1
2146: PLUS
2147: ARRAY
2148: ST_TO_ADDR
// text_info = [ 0 , 1 , 0 , 1 ] [ def_people_info + 1 ] ;
2149: LD_ADDR_EXP 34
2153: PUSH
2154: LD_INT 0
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: LD_INT 0
2162: PUSH
2163: LD_INT 1
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: PUSH
2172: LD_EXP 13
2176: PUSH
2177: LD_INT 1
2179: PLUS
2180: ARRAY
2181: ST_TO_ADDR
// fog_info = [ 0 , 0 , 1 , 1 ] [ def_people_info + 1 ] ;
2182: LD_ADDR_EXP 35
2186: PUSH
2187: LD_INT 0
2189: PUSH
2190: LD_INT 0
2192: PUSH
2193: LD_INT 1
2195: PUSH
2196: LD_INT 1
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_EXP 13
2209: PUSH
2210: LD_INT 1
2212: PLUS
2213: ARRAY
2214: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
2215: LD_ADDR_EXP 37
2219: PUSH
2220: LD_INT 0
2222: PUSH
2223: LD_INT 1
2225: PUSH
2226: LD_INT 2
2228: PUSH
2229: LD_INT 3
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: LD_EXP 16
2242: PUSH
2243: LD_INT 1
2245: PLUS
2246: ARRAY
2247: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2248: LD_ADDR_EXP 38
2252: PUSH
2253: LD_INT 0
2255: PUSH
2256: LD_INT 1
2258: PUSH
2259: LD_INT 63000
2261: PUSH
2262: LD_INT 126000
2264: PUSH
2265: LD_INT 189000
2267: PUSH
2268: LD_INT 252000
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: PUSH
2279: LD_EXP 15
2283: PUSH
2284: LD_INT 1
2286: PLUS
2287: ARRAY
2288: ST_TO_ADDR
// deposits = [ [ [ 1 , 0 , 1 , 2 , 0 ] [ def_main_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_main_deposits + 1 ] ] , [ [ 1 , 0 , 1 , 2 , 0 ] [ def_secondary_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_secondary_deposits + 1 ] ] ] ;
2289: LD_ADDR_EXP 28
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: LD_INT 0
2299: PUSH
2300: LD_INT 1
2302: PUSH
2303: LD_INT 2
2305: PUSH
2306: LD_INT 0
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: PUSH
2316: LD_EXP 6
2320: PUSH
2321: LD_INT 1
2323: PLUS
2324: ARRAY
2325: PUSH
2326: LD_INT 0
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: LD_INT 1
2334: PUSH
2335: LD_INT 0
2337: PUSH
2338: LD_INT 2
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: PUSH
2348: LD_EXP 6
2352: PUSH
2353: LD_INT 1
2355: PLUS
2356: ARRAY
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 1
2364: PUSH
2365: LD_INT 0
2367: PUSH
2368: LD_INT 1
2370: PUSH
2371: LD_INT 2
2373: PUSH
2374: LD_INT 0
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: PUSH
2384: LD_EXP 7
2388: PUSH
2389: LD_INT 1
2391: PLUS
2392: ARRAY
2393: PUSH
2394: LD_INT 0
2396: PUSH
2397: LD_INT 1
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: LD_INT 0
2405: PUSH
2406: LD_INT 2
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: PUSH
2416: LD_EXP 7
2420: PUSH
2421: LD_INT 1
2423: PLUS
2424: ARRAY
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: ST_TO_ADDR
// def_bf_params = [ [ 0 , 0 , 0 , 0 ] , [ 50 , 25 , 0 , 50 ] , [ 75 , 50 , 25 , 75 ] , [ 100 , 75 , 50 , 100 ] ] [ def_morale_flags + 1 ] ;
2434: LD_ADDR_EXP 36
2438: PUSH
2439: LD_INT 0
2441: PUSH
2442: LD_INT 0
2444: PUSH
2445: LD_INT 0
2447: PUSH
2448: LD_INT 0
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: LIST
2455: LIST
2456: PUSH
2457: LD_INT 50
2459: PUSH
2460: LD_INT 25
2462: PUSH
2463: LD_INT 0
2465: PUSH
2466: LD_INT 50
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: PUSH
2475: LD_INT 75
2477: PUSH
2478: LD_INT 50
2480: PUSH
2481: LD_INT 25
2483: PUSH
2484: LD_INT 75
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: PUSH
2493: LD_INT 100
2495: PUSH
2496: LD_INT 75
2498: PUSH
2499: LD_INT 50
2501: PUSH
2502: LD_INT 100
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: PUSH
2517: LD_EXP 14
2521: PUSH
2522: LD_INT 1
2524: PLUS
2525: ARRAY
2526: ST_TO_ADDR
// prepare_arrivals ;
2527: CALL 11200 0 0
// if def_people_loyality then
2531: LD_EXP 12
2535: IFFALSE 3400
// begin second_side = [ [ [ 0 , 0 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 6 , 7 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 4 , 2 ] , [ 4 , 2 ] ] , [ [ 5 , 4 ] , [ 0 , 0 ] , [ 5 , 6 ] , [ 5 , 1 ] , [ 7 , 3 ] , [ 5 , 3 ] , [ 5 , 4 ] , [ 5 , 4 ] ] , [ [ 6 , 4 ] , [ 6 , 5 ] , [ 0 , 0 ] , [ 6 , 1 ] , [ 6 , 2 ] , [ 5 , 1 ] , [ 6 , 4 ] , [ 6 , 2 ] ] , [ [ 7 , 6 ] , [ 1 , 5 ] , [ 1 , 6 ] , [ 0 , 0 ] , [ 1 , 2 ] , [ 1 , 3 ] , [ 1 , 2 ] , [ 1 , 2 ] ] , [ [ 2 , 4 ] , [ 3 , 7 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 0 , 0 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 2 , 4 ] ] , [ [ 3 , 4 ] , [ 3 , 5 ] , [ 1 , 5 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 0 , 0 ] , [ 3 , 4 ] , [ 3 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 0 , 0 ] , [ 4 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 0 , 0 ] ] ] [ positions [ 1 ] ] [ positions [ 2 ] ] ;
2537: LD_ADDR_EXP 47
2541: PUSH
2542: LD_INT 0
2544: PUSH
2545: LD_INT 0
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 4
2554: PUSH
2555: LD_INT 5
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 4
2564: PUSH
2565: LD_INT 6
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: LD_INT 6
2574: PUSH
2575: LD_INT 7
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: PUSH
2582: LD_INT 4
2584: PUSH
2585: LD_INT 2
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: PUSH
2592: LD_INT 4
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: LD_INT 4
2604: PUSH
2605: LD_INT 2
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: LD_INT 4
2614: PUSH
2615: LD_INT 2
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: PUSH
2632: LD_INT 5
2634: PUSH
2635: LD_INT 4
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: PUSH
2642: LD_INT 0
2644: PUSH
2645: LD_INT 0
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 5
2654: PUSH
2655: LD_INT 6
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: PUSH
2662: LD_INT 5
2664: PUSH
2665: LD_INT 1
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_INT 7
2674: PUSH
2675: LD_INT 3
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: PUSH
2682: LD_INT 5
2684: PUSH
2685: LD_INT 3
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: LD_INT 5
2694: PUSH
2695: LD_INT 4
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: LD_INT 5
2704: PUSH
2705: LD_INT 4
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 6
2724: PUSH
2725: LD_INT 4
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: LD_INT 6
2734: PUSH
2735: LD_INT 5
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 0
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 6
2754: PUSH
2755: LD_INT 1
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: PUSH
2762: LD_INT 6
2764: PUSH
2765: LD_INT 2
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: LD_INT 5
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 6
2784: PUSH
2785: LD_INT 4
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 6
2794: PUSH
2795: LD_INT 2
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: PUSH
2812: LD_INT 7
2814: PUSH
2815: LD_INT 6
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 1
2824: PUSH
2825: LD_INT 5
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: LD_INT 1
2834: PUSH
2835: LD_INT 6
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 0
2844: PUSH
2845: LD_INT 0
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_INT 1
2854: PUSH
2855: LD_INT 2
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: PUSH
2862: LD_INT 1
2864: PUSH
2865: LD_INT 3
2867: PUSH
2868: EMPTY
2869: LIST
2870: LIST
2871: PUSH
2872: LD_INT 1
2874: PUSH
2875: LD_INT 2
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: LD_INT 2
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: LIST
2896: LIST
2897: LIST
2898: LIST
2899: LIST
2900: LIST
2901: PUSH
2902: LD_INT 2
2904: PUSH
2905: LD_INT 4
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 3
2914: PUSH
2915: LD_INT 7
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PUSH
2922: LD_INT 2
2924: PUSH
2925: LD_INT 6
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PUSH
2932: LD_INT 2
2934: PUSH
2935: LD_INT 1
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PUSH
2942: LD_INT 0
2944: PUSH
2945: LD_INT 0
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PUSH
2952: LD_INT 2
2954: PUSH
2955: LD_INT 3
2957: PUSH
2958: EMPTY
2959: LIST
2960: LIST
2961: PUSH
2962: LD_INT 2
2964: PUSH
2965: LD_INT 4
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: PUSH
2972: LD_INT 2
2974: PUSH
2975: LD_INT 4
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: LIST
2990: LIST
2991: PUSH
2992: LD_INT 3
2994: PUSH
2995: LD_INT 4
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 3
3004: PUSH
3005: LD_INT 5
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: LD_INT 1
3014: PUSH
3015: LD_INT 5
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 3
3024: PUSH
3025: LD_INT 1
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: LD_INT 3
3034: PUSH
3035: LD_INT 2
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PUSH
3042: LD_INT 0
3044: PUSH
3045: LD_INT 0
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: PUSH
3052: LD_INT 3
3054: PUSH
3055: LD_INT 4
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PUSH
3062: LD_INT 3
3064: PUSH
3065: LD_INT 2
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PUSH
3072: EMPTY
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: PUSH
3082: LD_INT 2
3084: PUSH
3085: LD_INT 4
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: LD_INT 4
3094: PUSH
3095: LD_INT 5
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: PUSH
3102: LD_INT 4
3104: PUSH
3105: LD_INT 6
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PUSH
3112: LD_INT 2
3114: PUSH
3115: LD_INT 1
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: PUSH
3122: LD_INT 4
3124: PUSH
3125: LD_INT 2
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PUSH
3132: LD_INT 4
3134: PUSH
3135: LD_INT 3
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PUSH
3142: LD_INT 0
3144: PUSH
3145: LD_INT 0
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PUSH
3152: LD_INT 4
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 2
3174: PUSH
3175: LD_INT 4
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 4
3184: PUSH
3185: LD_INT 5
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 2
3194: PUSH
3195: LD_INT 6
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 1
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: LD_INT 4
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: LD_INT 2
3224: PUSH
3225: LD_INT 3
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: LD_INT 2
3234: PUSH
3235: LD_INT 4
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: LD_INT 0
3244: PUSH
3245: LD_INT 0
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: PUSH
3272: LD_EXP 39
3276: PUSH
3277: LD_INT 1
3279: ARRAY
3280: ARRAY
3281: PUSH
3282: LD_EXP 39
3286: PUSH
3287: LD_INT 2
3289: ARRAY
3290: ARRAY
3291: ST_TO_ADDR
// SetAttitude ( second_side [ 1 ] , positions [ 1 ] , att_friend , true ) ;
3292: LD_EXP 47
3296: PUSH
3297: LD_INT 1
3299: ARRAY
3300: PPUSH
3301: LD_EXP 39
3305: PUSH
3306: LD_INT 1
3308: ARRAY
3309: PPUSH
3310: LD_INT 1
3312: PPUSH
3313: LD_INT 1
3315: PPUSH
3316: CALL_OW 80
// SetAttitude ( second_side [ 2 ] , positions [ 2 ] , att_friend , true ) ;
3320: LD_EXP 47
3324: PUSH
3325: LD_INT 2
3327: ARRAY
3328: PPUSH
3329: LD_EXP 39
3333: PUSH
3334: LD_INT 2
3336: ARRAY
3337: PPUSH
3338: LD_INT 1
3340: PPUSH
3341: LD_INT 1
3343: PPUSH
3344: CALL_OW 80
// if fog_info then
3348: LD_EXP 35
3352: IFFALSE 3398
// begin ChangeSideFog ( second_side [ 1 ] , positions [ 1 ] ) ;
3354: LD_EXP 47
3358: PUSH
3359: LD_INT 1
3361: ARRAY
3362: PPUSH
3363: LD_EXP 39
3367: PUSH
3368: LD_INT 1
3370: ARRAY
3371: PPUSH
3372: CALL_OW 343
// ChangeSideFog ( second_side [ 2 ] , positions [ 2 ] ) ;
3376: LD_EXP 47
3380: PUSH
3381: LD_INT 2
3383: ARRAY
3384: PPUSH
3385: LD_EXP 39
3389: PUSH
3390: LD_INT 2
3392: ARRAY
3393: PPUSH
3394: CALL_OW 343
// end ; end else
3398: GO 3680
// begin pom_tab = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] diff ( positions union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 1 ] ] union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 2 ] ] ) ;
3400: LD_ADDR_VAR 0 11
3404: PUSH
3405: LD_INT 1
3407: PUSH
3408: LD_INT 2
3410: PUSH
3411: LD_INT 3
3413: PUSH
3414: LD_INT 4
3416: PUSH
3417: LD_INT 5
3419: PUSH
3420: LD_INT 6
3422: PUSH
3423: LD_INT 7
3425: PUSH
3426: LD_INT 8
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: PUSH
3439: LD_EXP 39
3443: PUSH
3444: LD_INT 4
3446: PUSH
3447: LD_INT 5
3449: PUSH
3450: LD_INT 7
3452: PUSH
3453: LD_INT 8
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: LIST
3460: PUSH
3461: LD_INT 6
3463: PUSH
3464: LD_INT 1
3466: PUSH
3467: LD_INT 7
3469: PUSH
3470: LD_INT 8
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: LIST
3477: PUSH
3478: LD_INT 2
3480: PUSH
3481: LD_INT 3
3483: PUSH
3484: LD_INT 2
3486: PUSH
3487: LD_INT 4
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: LD_INT 2
3496: PUSH
3497: LD_INT 4
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: PUSH
3514: LD_EXP 39
3518: PUSH
3519: LD_INT 1
3521: ARRAY
3522: ARRAY
3523: UNION
3524: PUSH
3525: LD_INT 4
3527: PUSH
3528: LD_INT 5
3530: PUSH
3531: LD_INT 7
3533: PUSH
3534: LD_INT 8
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 6
3544: PUSH
3545: LD_INT 1
3547: PUSH
3548: LD_INT 7
3550: PUSH
3551: LD_INT 8
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: LIST
3558: PUSH
3559: LD_INT 2
3561: PUSH
3562: LD_INT 3
3564: PUSH
3565: LD_INT 2
3567: PUSH
3568: LD_INT 4
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PUSH
3575: LD_INT 2
3577: PUSH
3578: LD_INT 4
3580: PUSH
3581: EMPTY
3582: LIST
3583: LIST
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: PUSH
3595: LD_EXP 39
3599: PUSH
3600: LD_INT 2
3602: ARRAY
3603: ARRAY
3604: UNION
3605: DIFF
3606: ST_TO_ADDR
// second_side = pom_tab [ Rand ( 1 , pom_tab ) ] ;
3607: LD_ADDR_EXP 47
3611: PUSH
3612: LD_VAR 0 11
3616: PUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_VAR 0 11
3624: PPUSH
3625: CALL_OW 12
3629: ARRAY
3630: ST_TO_ADDR
// third_nation = [ 1 , 2 , 3 ] diff side_nations ;
3631: LD_ADDR_EXP 48
3635: PUSH
3636: LD_INT 1
3638: PUSH
3639: LD_INT 2
3641: PUSH
3642: LD_INT 3
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: LIST
3649: PUSH
3650: LD_EXP 44
3654: DIFF
3655: ST_TO_ADDR
// third_nation = third_nation [ Rand ( 1 , third_nation ) ] ;
3656: LD_ADDR_EXP 48
3660: PUSH
3661: LD_EXP 48
3665: PUSH
3666: LD_INT 1
3668: PPUSH
3669: LD_EXP 48
3673: PPUSH
3674: CALL_OW 12
3678: ARRAY
3679: ST_TO_ADDR
// end ; BuildUpAreas := [ BuildUp1 , BuildUp2 ] ;
3680: LD_ADDR_EXP 65
3684: PUSH
3685: LD_INT 26
3687: PUSH
3688: LD_INT 27
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: ST_TO_ADDR
// end ;
3695: LD_VAR 0 1
3699: RET
// function prepare_map_coordinates ; var side , dep2 , br2 , dep1 , br1 , lab , fac , arm , pplant , un , i , k11 , k12 , k21 , k22 ; begin
3700: LD_INT 0
3702: PPUSH
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
3710: PPUSH
3711: PPUSH
3712: PPUSH
3713: PPUSH
3714: PPUSH
3715: PPUSH
3716: PPUSH
3717: PPUSH
// start_def = [ ] ;
3718: LD_ADDR_EXP 49
3722: PUSH
3723: EMPTY
3724: ST_TO_ADDR
// depots_def = [ ] ;
3725: LD_ADDR_EXP 50
3729: PUSH
3730: EMPTY
3731: ST_TO_ADDR
// breastworks_def = [ ] ;
3732: LD_ADDR_EXP 51
3736: PUSH
3737: EMPTY
3738: ST_TO_ADDR
// labs_def = [ ] ;
3739: LD_ADDR_EXP 52
3743: PUSH
3744: EMPTY
3745: ST_TO_ADDR
// factories_def = [ ] ;
3746: LD_ADDR_EXP 53
3750: PUSH
3751: EMPTY
3752: ST_TO_ADDR
// armories_def = [ ] ;
3753: LD_ADDR_EXP 54
3757: PUSH
3758: EMPTY
3759: ST_TO_ADDR
// pplants_def = [ ] ;
3760: LD_ADDR_EXP 55
3764: PUSH
3765: EMPTY
3766: ST_TO_ADDR
// deposits_def = [ ] ;
3767: LD_ADDR_EXP 56
3771: PUSH
3772: EMPTY
3773: ST_TO_ADDR
// k11 := Rand ( 1 , 2 ) ;
3774: LD_ADDR_VAR 0 13
3778: PUSH
3779: LD_INT 1
3781: PPUSH
3782: LD_INT 2
3784: PPUSH
3785: CALL_OW 12
3789: ST_TO_ADDR
// k12 := Rand ( 1 , 2 ) ;
3790: LD_ADDR_VAR 0 14
3794: PUSH
3795: LD_INT 1
3797: PPUSH
3798: LD_INT 2
3800: PPUSH
3801: CALL_OW 12
3805: ST_TO_ADDR
// k21 := Rand ( 1 , 2 ) ;
3806: LD_ADDR_VAR 0 15
3810: PUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_INT 2
3816: PPUSH
3817: CALL_OW 12
3821: ST_TO_ADDR
// k22 := Rand ( 1 , 2 ) ;
3822: LD_ADDR_VAR 0 16
3826: PUSH
3827: LD_INT 1
3829: PPUSH
3830: LD_INT 2
3832: PPUSH
3833: CALL_OW 12
3837: ST_TO_ADDR
// deposits_def := [ [ [ [ Res111 , Res112 ] [ k11 ] , [ Res111 , Res112 ] [ 3 - k11 ] ] , [ [ Res121 , Res122 ] [ k12 ] , [ Res121 , Res122 ] [ 3 - k12 ] ] ] , [ [ [ Res211 , Res212 ] [ k21 ] , [ Res211 , Res212 ] [ 3 - k21 ] ] , [ [ Res221 , Res222 ] [ k22 ] , [ Res221 , Res222 ] [ 3 - k22 ] ] ] ] ;
3838: LD_ADDR_EXP 56
3842: PUSH
3843: LD_INT 4
3845: PUSH
3846: LD_INT 5
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: LD_VAR 0 13
3857: ARRAY
3858: PUSH
3859: LD_INT 4
3861: PUSH
3862: LD_INT 5
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: PUSH
3869: LD_INT 3
3871: PUSH
3872: LD_VAR 0 13
3876: MINUS
3877: ARRAY
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: PUSH
3883: LD_INT 6
3885: PUSH
3886: LD_INT 7
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: PUSH
3893: LD_VAR 0 14
3897: ARRAY
3898: PUSH
3899: LD_INT 6
3901: PUSH
3902: LD_INT 7
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: PUSH
3909: LD_INT 3
3911: PUSH
3912: LD_VAR 0 14
3916: MINUS
3917: ARRAY
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PUSH
3927: LD_INT 8
3929: PUSH
3930: LD_INT 9
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: PUSH
3937: LD_VAR 0 15
3941: ARRAY
3942: PUSH
3943: LD_INT 8
3945: PUSH
3946: LD_INT 9
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PUSH
3953: LD_INT 3
3955: PUSH
3956: LD_VAR 0 15
3960: MINUS
3961: ARRAY
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: PUSH
3967: LD_INT 10
3969: PUSH
3970: LD_INT 11
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: PUSH
3977: LD_VAR 0 16
3981: ARRAY
3982: PUSH
3983: LD_INT 10
3985: PUSH
3986: LD_INT 11
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: LD_INT 3
3995: PUSH
3996: LD_VAR 0 16
4000: MINUS
4001: ARRAY
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PUSH
4011: EMPTY
4012: LIST
4013: LIST
4014: ST_TO_ADDR
// for side := 1 to 2 do
4015: LD_ADDR_VAR 0 2
4019: PUSH
4020: DOUBLE
4021: LD_INT 1
4023: DEC
4024: ST_TO_ADDR
4025: LD_INT 2
4027: PUSH
4028: FOR_TO
4029: IFFALSE 5161
// begin dep1 := side * 10 - 9 ;
4031: LD_ADDR_VAR 0 5
4035: PUSH
4036: LD_VAR 0 2
4040: PUSH
4041: LD_INT 10
4043: MUL
4044: PUSH
4045: LD_INT 9
4047: MINUS
4048: ST_TO_ADDR
// dep2 := 20 + side * 4 - 3 ;
4049: LD_ADDR_VAR 0 3
4053: PUSH
4054: LD_INT 20
4056: PUSH
4057: LD_VAR 0 2
4061: PUSH
4062: LD_INT 4
4064: MUL
4065: PLUS
4066: PUSH
4067: LD_INT 3
4069: MINUS
4070: ST_TO_ADDR
// br1 := [ side * 10 - 8 , side * 10 - 7 , side * 10 - 6 , side * 10 - 5 ] ;
4071: LD_ADDR_VAR 0 6
4075: PUSH
4076: LD_VAR 0 2
4080: PUSH
4081: LD_INT 10
4083: MUL
4084: PUSH
4085: LD_INT 8
4087: MINUS
4088: PUSH
4089: LD_VAR 0 2
4093: PUSH
4094: LD_INT 10
4096: MUL
4097: PUSH
4098: LD_INT 7
4100: MINUS
4101: PUSH
4102: LD_VAR 0 2
4106: PUSH
4107: LD_INT 10
4109: MUL
4110: PUSH
4111: LD_INT 6
4113: MINUS
4114: PUSH
4115: LD_VAR 0 2
4119: PUSH
4120: LD_INT 10
4122: MUL
4123: PUSH
4124: LD_INT 5
4126: MINUS
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: ST_TO_ADDR
// br2 := [ 20 + side * 4 - 2 , 20 + side * 4 - 1 , 20 + side * 4 ] ;
4134: LD_ADDR_VAR 0 4
4138: PUSH
4139: LD_INT 20
4141: PUSH
4142: LD_VAR 0 2
4146: PUSH
4147: LD_INT 4
4149: MUL
4150: PLUS
4151: PUSH
4152: LD_INT 2
4154: MINUS
4155: PUSH
4156: LD_INT 20
4158: PUSH
4159: LD_VAR 0 2
4163: PUSH
4164: LD_INT 4
4166: MUL
4167: PLUS
4168: PUSH
4169: LD_INT 1
4171: MINUS
4172: PUSH
4173: LD_INT 20
4175: PUSH
4176: LD_VAR 0 2
4180: PUSH
4181: LD_INT 4
4183: MUL
4184: PLUS
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: LIST
4190: ST_TO_ADDR
// lab := side * 10 - 4 ;
4191: LD_ADDR_VAR 0 7
4195: PUSH
4196: LD_VAR 0 2
4200: PUSH
4201: LD_INT 10
4203: MUL
4204: PUSH
4205: LD_INT 4
4207: MINUS
4208: ST_TO_ADDR
// fac := side * 10 - 3 ;
4209: LD_ADDR_VAR 0 8
4213: PUSH
4214: LD_VAR 0 2
4218: PUSH
4219: LD_INT 10
4221: MUL
4222: PUSH
4223: LD_INT 3
4225: MINUS
4226: ST_TO_ADDR
// arm := side * 10 - 2 ;
4227: LD_ADDR_VAR 0 9
4231: PUSH
4232: LD_VAR 0 2
4236: PUSH
4237: LD_INT 10
4239: MUL
4240: PUSH
4241: LD_INT 2
4243: MINUS
4244: ST_TO_ADDR
// pplant := [ side * 10 - 1 , side * 10 ] ;
4245: LD_ADDR_VAR 0 10
4249: PUSH
4250: LD_VAR 0 2
4254: PUSH
4255: LD_INT 10
4257: MUL
4258: PUSH
4259: LD_INT 1
4261: MINUS
4262: PUSH
4263: LD_VAR 0 2
4267: PUSH
4268: LD_INT 10
4270: MUL
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: ST_TO_ADDR
// depots_def := depots_def ^ [ [ [ GetX ( dep1 ) , GetY ( dep1 ) , GetDir ( dep1 ) ] , [ GetX ( dep2 ) , GetY ( dep2 ) , GetDir ( dep2 ) ] ] ] ;
4276: LD_ADDR_EXP 50
4280: PUSH
4281: LD_EXP 50
4285: PUSH
4286: LD_VAR 0 5
4290: PPUSH
4291: CALL_OW 250
4295: PUSH
4296: LD_VAR 0 5
4300: PPUSH
4301: CALL_OW 251
4305: PUSH
4306: LD_VAR 0 5
4310: PPUSH
4311: CALL_OW 254
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: LIST
4320: PUSH
4321: LD_VAR 0 3
4325: PPUSH
4326: CALL_OW 250
4330: PUSH
4331: LD_VAR 0 3
4335: PPUSH
4336: CALL_OW 251
4340: PUSH
4341: LD_VAR 0 3
4345: PPUSH
4346: CALL_OW 254
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: LIST
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: EMPTY
4361: LIST
4362: ADD
4363: ST_TO_ADDR
// start_def := start_def ^ [ [ [ ShiftX ( GetX ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) ] , [ ShiftX ( GetX ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) ] ] ] ;
4364: LD_ADDR_EXP 49
4368: PUSH
4369: LD_EXP 49
4373: PUSH
4374: LD_VAR 0 5
4378: PPUSH
4379: CALL_OW 250
4383: PPUSH
4384: LD_VAR 0 5
4388: PPUSH
4389: CALL_OW 254
4393: PUSH
4394: LD_INT 6
4396: MOD
4397: PPUSH
4398: LD_INT 6
4400: PPUSH
4401: CALL_OW 272
4405: PUSH
4406: LD_VAR 0 5
4410: PPUSH
4411: CALL_OW 251
4415: PPUSH
4416: LD_VAR 0 5
4420: PPUSH
4421: CALL_OW 254
4425: PUSH
4426: LD_INT 6
4428: MOD
4429: PPUSH
4430: LD_INT 6
4432: PPUSH
4433: CALL_OW 273
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PUSH
4442: LD_VAR 0 3
4446: PPUSH
4447: CALL_OW 250
4451: PPUSH
4452: LD_VAR 0 3
4456: PPUSH
4457: CALL_OW 254
4461: PUSH
4462: LD_INT 6
4464: MOD
4465: PPUSH
4466: LD_INT 6
4468: PPUSH
4469: CALL_OW 272
4473: PUSH
4474: LD_VAR 0 3
4478: PPUSH
4479: CALL_OW 251
4483: PPUSH
4484: LD_VAR 0 3
4488: PPUSH
4489: CALL_OW 254
4493: PUSH
4494: LD_INT 6
4496: MOD
4497: PPUSH
4498: LD_INT 6
4500: PPUSH
4501: CALL_OW 273
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: EMPTY
4515: LIST
4516: ADD
4517: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ [ GetX ( br1 [ 1 ] ) , GetY ( br1 [ 1 ] ) , GetDir ( br1 [ 1 ] ) ] , [ GetX ( br1 [ 2 ] ) , GetY ( br1 [ 2 ] ) , GetDir ( br1 [ 2 ] ) ] , [ GetX ( br1 [ 3 ] ) , GetY ( br1 [ 3 ] ) , GetDir ( br1 [ 3 ] ) ] , [ GetX ( br1 [ 4 ] ) , GetY ( br1 [ 4 ] ) , GetDir ( br1 [ 4 ] ) ] ] , [ [ GetX ( br2 [ 1 ] ) , GetY ( br2 [ 1 ] ) , GetDir ( br2 [ 1 ] ) ] , [ GetX ( br2 [ 2 ] ) , GetY ( br2 [ 2 ] ) , GetDir ( br2 [ 2 ] ) ] , [ GetX ( br2 [ 3 ] ) , GetY ( br2 [ 3 ] ) , GetDir ( br2 [ 3 ] ) ] ] ] ] ;
4518: LD_ADDR_EXP 51
4522: PUSH
4523: LD_EXP 51
4527: PUSH
4528: LD_VAR 0 6
4532: PUSH
4533: LD_INT 1
4535: ARRAY
4536: PPUSH
4537: CALL_OW 250
4541: PUSH
4542: LD_VAR 0 6
4546: PUSH
4547: LD_INT 1
4549: ARRAY
4550: PPUSH
4551: CALL_OW 251
4555: PUSH
4556: LD_VAR 0 6
4560: PUSH
4561: LD_INT 1
4563: ARRAY
4564: PPUSH
4565: CALL_OW 254
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: LIST
4574: PUSH
4575: LD_VAR 0 6
4579: PUSH
4580: LD_INT 2
4582: ARRAY
4583: PPUSH
4584: CALL_OW 250
4588: PUSH
4589: LD_VAR 0 6
4593: PUSH
4594: LD_INT 2
4596: ARRAY
4597: PPUSH
4598: CALL_OW 251
4602: PUSH
4603: LD_VAR 0 6
4607: PUSH
4608: LD_INT 2
4610: ARRAY
4611: PPUSH
4612: CALL_OW 254
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: LIST
4621: PUSH
4622: LD_VAR 0 6
4626: PUSH
4627: LD_INT 3
4629: ARRAY
4630: PPUSH
4631: CALL_OW 250
4635: PUSH
4636: LD_VAR 0 6
4640: PUSH
4641: LD_INT 3
4643: ARRAY
4644: PPUSH
4645: CALL_OW 251
4649: PUSH
4650: LD_VAR 0 6
4654: PUSH
4655: LD_INT 3
4657: ARRAY
4658: PPUSH
4659: CALL_OW 254
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: LIST
4668: PUSH
4669: LD_VAR 0 6
4673: PUSH
4674: LD_INT 4
4676: ARRAY
4677: PPUSH
4678: CALL_OW 250
4682: PUSH
4683: LD_VAR 0 6
4687: PUSH
4688: LD_INT 4
4690: ARRAY
4691: PPUSH
4692: CALL_OW 251
4696: PUSH
4697: LD_VAR 0 6
4701: PUSH
4702: LD_INT 4
4704: ARRAY
4705: PPUSH
4706: CALL_OW 254
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: LIST
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: PUSH
4722: LD_VAR 0 4
4726: PUSH
4727: LD_INT 1
4729: ARRAY
4730: PPUSH
4731: CALL_OW 250
4735: PUSH
4736: LD_VAR 0 4
4740: PUSH
4741: LD_INT 1
4743: ARRAY
4744: PPUSH
4745: CALL_OW 251
4749: PUSH
4750: LD_VAR 0 4
4754: PUSH
4755: LD_INT 1
4757: ARRAY
4758: PPUSH
4759: CALL_OW 254
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: LIST
4768: PUSH
4769: LD_VAR 0 4
4773: PUSH
4774: LD_INT 2
4776: ARRAY
4777: PPUSH
4778: CALL_OW 250
4782: PUSH
4783: LD_VAR 0 4
4787: PUSH
4788: LD_INT 2
4790: ARRAY
4791: PPUSH
4792: CALL_OW 251
4796: PUSH
4797: LD_VAR 0 4
4801: PUSH
4802: LD_INT 2
4804: ARRAY
4805: PPUSH
4806: CALL_OW 254
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: PUSH
4816: LD_VAR 0 4
4820: PUSH
4821: LD_INT 3
4823: ARRAY
4824: PPUSH
4825: CALL_OW 250
4829: PUSH
4830: LD_VAR 0 4
4834: PUSH
4835: LD_INT 3
4837: ARRAY
4838: PPUSH
4839: CALL_OW 251
4843: PUSH
4844: LD_VAR 0 4
4848: PUSH
4849: LD_INT 3
4851: ARRAY
4852: PPUSH
4853: CALL_OW 254
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: EMPTY
4873: LIST
4874: ADD
4875: ST_TO_ADDR
// labs_def := labs_def ^ [ [ [ GetX ( lab ) , GetY ( lab ) , GetDir ( lab ) ] , [ ] ] ] ;
4876: LD_ADDR_EXP 52
4880: PUSH
4881: LD_EXP 52
4885: PUSH
4886: LD_VAR 0 7
4890: PPUSH
4891: CALL_OW 250
4895: PUSH
4896: LD_VAR 0 7
4900: PPUSH
4901: CALL_OW 251
4905: PUSH
4906: LD_VAR 0 7
4910: PPUSH
4911: CALL_OW 254
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: PUSH
4921: EMPTY
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: EMPTY
4928: LIST
4929: ADD
4930: ST_TO_ADDR
// factories_def := factories_def ^ [ [ [ GetX ( fac ) , GetY ( fac ) , GetDir ( fac ) ] , [ ] ] ] ;
4931: LD_ADDR_EXP 53
4935: PUSH
4936: LD_EXP 53
4940: PUSH
4941: LD_VAR 0 8
4945: PPUSH
4946: CALL_OW 250
4950: PUSH
4951: LD_VAR 0 8
4955: PPUSH
4956: CALL_OW 251
4960: PUSH
4961: LD_VAR 0 8
4965: PPUSH
4966: CALL_OW 254
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: EMPTY
4983: LIST
4984: ADD
4985: ST_TO_ADDR
// armories_def := armories_def ^ [ [ [ GetX ( arm ) , GetY ( arm ) , GetDir ( arm ) ] , [ ] ] ] ;
4986: LD_ADDR_EXP 54
4990: PUSH
4991: LD_EXP 54
4995: PUSH
4996: LD_VAR 0 9
5000: PPUSH
5001: CALL_OW 250
5005: PUSH
5006: LD_VAR 0 9
5010: PPUSH
5011: CALL_OW 251
5015: PUSH
5016: LD_VAR 0 9
5020: PPUSH
5021: CALL_OW 254
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: PUSH
5037: EMPTY
5038: LIST
5039: ADD
5040: ST_TO_ADDR
// pplants_def := pplants_def ^ [ [ [ [ GetX ( pplant [ 1 ] ) , GetY ( pplant [ 1 ] ) , GetDir ( pplant [ 1 ] ) ] , [ GetX ( pplant [ 2 ] ) , GetY ( pplant [ 2 ] ) , GetDir ( pplant [ 2 ] ) ] ] , [ ] ] ] ;
5041: LD_ADDR_EXP 55
5045: PUSH
5046: LD_EXP 55
5050: PUSH
5051: LD_VAR 0 10
5055: PUSH
5056: LD_INT 1
5058: ARRAY
5059: PPUSH
5060: CALL_OW 250
5064: PUSH
5065: LD_VAR 0 10
5069: PUSH
5070: LD_INT 1
5072: ARRAY
5073: PPUSH
5074: CALL_OW 251
5078: PUSH
5079: LD_VAR 0 10
5083: PUSH
5084: LD_INT 1
5086: ARRAY
5087: PPUSH
5088: CALL_OW 254
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: PUSH
5098: LD_VAR 0 10
5102: PUSH
5103: LD_INT 2
5105: ARRAY
5106: PPUSH
5107: CALL_OW 250
5111: PUSH
5112: LD_VAR 0 10
5116: PUSH
5117: LD_INT 2
5119: ARRAY
5120: PPUSH
5121: CALL_OW 251
5125: PUSH
5126: LD_VAR 0 10
5130: PUSH
5131: LD_INT 2
5133: ARRAY
5134: PPUSH
5135: CALL_OW 254
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: LIST
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: EMPTY
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PUSH
5155: EMPTY
5156: LIST
5157: ADD
5158: ST_TO_ADDR
// end ;
5159: GO 4028
5161: POP
5162: POP
// for un := 1 to 28 do
5163: LD_ADDR_VAR 0 11
5167: PUSH
5168: DOUBLE
5169: LD_INT 1
5171: DEC
5172: ST_TO_ADDR
5173: LD_INT 28
5175: PUSH
5176: FOR_TO
5177: IFFALSE 5190
// DestroyUnit ( un ) ;
5179: LD_VAR 0 11
5183: PPUSH
5184: CALL_OW 65
5188: GO 5176
5190: POP
5191: POP
// end ;
5192: LD_VAR 0 1
5196: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
5197: LD_INT 0
5199: PPUSH
5200: PPUSH
5201: PPUSH
5202: PPUSH
// result := [ ] ;
5203: LD_ADDR_VAR 0 7
5207: PUSH
5208: EMPTY
5209: ST_TO_ADDR
// for i := 1 to count do
5210: LD_ADDR_VAR 0 8
5214: PUSH
5215: DOUBLE
5216: LD_INT 1
5218: DEC
5219: ST_TO_ADDR
5220: LD_VAR 0 1
5224: PUSH
5225: FOR_TO
5226: IFFALSE 5644
// begin uc_direction := Rand ( 0 , 5 ) ;
5228: LD_ADDR_OWVAR 24
5232: PUSH
5233: LD_INT 0
5235: PPUSH
5236: LD_INT 5
5238: PPUSH
5239: CALL_OW 12
5243: ST_TO_ADDR
// if commander then
5244: LD_LOC 1
5248: IFFALSE 5357
// begin hc_name := mp_sides_players_names [ uc_side ] ;
5250: LD_ADDR_OWVAR 26
5254: PUSH
5255: LD_OWVAR 19
5259: PUSH
5260: LD_OWVAR 20
5264: ARRAY
5265: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
5266: LD_INT 1
5268: PPUSH
5269: LD_INT 2
5271: PPUSH
5272: CALL_OW 12
5276: PPUSH
5277: LD_VAR 0 2
5281: PPUSH
5282: LD_EXP 29
5286: PUSH
5287: LD_INT 2
5289: PLUS
5290: PPUSH
5291: CALL_OW 380
// hc_importance := 105 ;
5295: LD_ADDR_OWVAR 32
5299: PUSH
5300: LD_INT 105
5302: ST_TO_ADDR
// commander := false ;
5303: LD_ADDR_LOC 1
5307: PUSH
5308: LD_INT 0
5310: ST_TO_ADDR
// if Multiplayer then
5311: LD_OWVAR 4
5315: IFFALSE 5355
// begin hc_gallery := MULTIAVATARS ;
5317: LD_ADDR_OWVAR 33
5321: PUSH
5322: LD_STRING MULTIAVATARS
5324: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
5325: LD_ADDR_OWVAR 34
5329: PUSH
5330: LD_OWVAR 20
5334: PPUSH
5335: CALL_OW 525
5339: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
5340: LD_ADDR_OWVAR 27
5344: PUSH
5345: LD_OWVAR 20
5349: PPUSH
5350: CALL_OW 526
5354: ST_TO_ADDR
// end ; end else
5355: GO 5420
// begin hc_name :=  ;
5357: LD_ADDR_OWVAR 26
5361: PUSH
5362: LD_STRING 
5364: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
5365: LD_INT 1
5367: PPUSH
5368: LD_INT 2
5370: PPUSH
5371: CALL_OW 12
5375: PPUSH
5376: LD_VAR 0 2
5380: PPUSH
5381: LD_EXP 29
5385: PPUSH
5386: CALL_OW 380
// hc_importance := 0 ;
5390: LD_ADDR_OWVAR 32
5394: PUSH
5395: LD_INT 0
5397: ST_TO_ADDR
// if Multiplayer then
5398: LD_OWVAR 4
5402: IFFALSE 5420
// begin hc_gallery :=  ;
5404: LD_ADDR_OWVAR 33
5408: PUSH
5409: LD_STRING 
5411: ST_TO_ADDR
// hc_face_number := 0 ;
5412: LD_ADDR_OWVAR 34
5416: PUSH
5417: LD_INT 0
5419: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
5420: LD_ADDR_VAR 0 10
5424: PUSH
5425: CALL_OW 44
5429: ST_TO_ADDR
// if global_defined then
5430: LD_LOC 3
5434: IFFALSE 5574
// begin if ( cl = class_soldier ) then
5436: LD_VAR 0 2
5440: PUSH
5441: LD_INT 1
5443: EQUAL
5444: IFFALSE 5464
// j := i + soldiers_created else
5446: LD_ADDR_VAR 0 9
5450: PUSH
5451: LD_VAR 0 8
5455: PUSH
5456: LD_LOC 4
5460: PLUS
5461: ST_TO_ADDR
5462: GO 5474
// j := i ;
5464: LD_ADDR_VAR 0 9
5468: PUSH
5469: LD_VAR 0 8
5473: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
5474: LD_LOC 2
5478: PUSH
5479: LD_VAR 0 2
5483: ARRAY
5484: PUSH
5485: LD_VAR 0 9
5489: ARRAY
5490: PPUSH
5491: LD_VAR 0 10
5495: PPUSH
5496: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
5500: LD_VAR 0 10
5504: PPUSH
5505: LD_INT 2
5507: PPUSH
5508: LD_LOC 2
5512: PUSH
5513: LD_VAR 0 2
5517: ARRAY
5518: PUSH
5519: LD_VAR 0 9
5523: ARRAY
5524: PPUSH
5525: LD_INT 2
5527: PPUSH
5528: CALL_OW 260
5532: PPUSH
5533: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
5537: LD_VAR 0 10
5541: PPUSH
5542: LD_INT 1
5544: PPUSH
5545: LD_LOC 2
5549: PUSH
5550: LD_VAR 0 2
5554: ARRAY
5555: PUSH
5556: LD_VAR 0 9
5560: ARRAY
5561: PPUSH
5562: LD_INT 1
5564: PPUSH
5565: CALL_OW 260
5569: PPUSH
5570: CALL_OW 239
// end ; if building then
5574: LD_VAR 0 6
5578: IFFALSE 5596
// PlaceHumanInUnit ( un , building ) else
5580: LD_VAR 0 10
5584: PPUSH
5585: LD_VAR 0 6
5589: PPUSH
5590: CALL_OW 52
5594: GO 5623
// PlaceUnitXYR ( un , x , y , r , false ) ;
5596: LD_VAR 0 10
5600: PPUSH
5601: LD_VAR 0 3
5605: PPUSH
5606: LD_VAR 0 4
5610: PPUSH
5611: LD_VAR 0 5
5615: PPUSH
5616: LD_INT 0
5618: PPUSH
5619: CALL_OW 50
// result := result ^ [ un ] ;
5623: LD_ADDR_VAR 0 7
5627: PUSH
5628: LD_VAR 0 7
5632: PUSH
5633: LD_VAR 0 10
5637: PUSH
5638: EMPTY
5639: LIST
5640: ADD
5641: ST_TO_ADDR
// end ;
5642: GO 5225
5644: POP
5645: POP
// if not global_defined then
5646: LD_LOC 3
5650: NOT
5651: IFFALSE 5729
// if ( global_units >= cl ) then
5653: LD_LOC 2
5657: PUSH
5658: LD_VAR 0 2
5662: GREATEREQUAL
5663: IFFALSE 5704
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
5665: LD_ADDR_LOC 2
5669: PUSH
5670: LD_LOC 2
5674: PPUSH
5675: LD_VAR 0 2
5679: PPUSH
5680: LD_LOC 2
5684: PUSH
5685: LD_VAR 0 2
5689: ARRAY
5690: PUSH
5691: LD_VAR 0 7
5695: ADD
5696: PPUSH
5697: CALL_OW 1
5701: ST_TO_ADDR
5702: GO 5729
// global_units := Replace ( global_units , cl , result ) ;
5704: LD_ADDR_LOC 2
5708: PUSH
5709: LD_LOC 2
5713: PPUSH
5714: LD_VAR 0 2
5718: PPUSH
5719: LD_VAR 0 7
5723: PPUSH
5724: CALL_OW 1
5728: ST_TO_ADDR
// if commander then
5729: LD_LOC 1
5733: IFFALSE 5780
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
5735: LD_ADDR_EXP 57
5739: PUSH
5740: LD_EXP 57
5744: PPUSH
5745: LD_OWVAR 20
5749: PPUSH
5750: LD_EXP 57
5754: PUSH
5755: LD_OWVAR 20
5759: ARRAY
5760: PUSH
5761: LD_VAR 0 10
5765: ADD
5766: PPUSH
5767: CALL_OW 1
5771: ST_TO_ADDR
// commander := false ;
5772: LD_ADDR_LOC 1
5776: PUSH
5777: LD_INT 0
5779: ST_TO_ADDR
// end ; end ;
5780: LD_VAR 0 7
5784: RET
// function prepare_side_base ( side , base ) ; var pos , x , y , dir , i , r , un , br , dep , lab , fact , arm , mode , coord , max ; begin
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
5796: PPUSH
5797: PPUSH
5798: PPUSH
5799: PPUSH
5800: PPUSH
5801: PPUSH
5802: PPUSH
// pos := Side_Positions [ side ] ;
5803: LD_ADDR_VAR 0 4
5807: PUSH
5808: LD_EXP 43
5812: PUSH
5813: LD_VAR 0 1
5817: ARRAY
5818: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
5819: LD_ADDR_OWVAR 21
5823: PUSH
5824: LD_EXP 44
5828: PUSH
5829: LD_VAR 0 1
5833: ARRAY
5834: ST_TO_ADDR
// uc_side := side ;
5835: LD_ADDR_OWVAR 20
5839: PUSH
5840: LD_VAR 0 1
5844: ST_TO_ADDR
// x := depots_def [ pos ] [ base ] [ 1 ] ;
5845: LD_ADDR_VAR 0 5
5849: PUSH
5850: LD_EXP 50
5854: PUSH
5855: LD_VAR 0 4
5859: ARRAY
5860: PUSH
5861: LD_VAR 0 2
5865: ARRAY
5866: PUSH
5867: LD_INT 1
5869: ARRAY
5870: ST_TO_ADDR
// y := depots_def [ pos ] [ base ] [ 2 ] ;
5871: LD_ADDR_VAR 0 6
5875: PUSH
5876: LD_EXP 50
5880: PUSH
5881: LD_VAR 0 4
5885: ARRAY
5886: PUSH
5887: LD_VAR 0 2
5891: ARRAY
5892: PUSH
5893: LD_INT 2
5895: ARRAY
5896: ST_TO_ADDR
// dir := depots_def [ pos ] [ base ] [ 3 ] ;
5897: LD_ADDR_VAR 0 7
5901: PUSH
5902: LD_EXP 50
5906: PUSH
5907: LD_VAR 0 4
5911: ARRAY
5912: PUSH
5913: LD_VAR 0 2
5917: ARRAY
5918: PUSH
5919: LD_INT 3
5921: ARRAY
5922: ST_TO_ADDR
// if is_depot [ base ] then
5923: LD_EXP 20
5927: PUSH
5928: LD_VAR 0 2
5932: ARRAY
5933: IFFALSE 6110
// begin if is_depot [ base ] = 1 then
5935: LD_EXP 20
5939: PUSH
5940: LD_VAR 0 2
5944: ARRAY
5945: PUSH
5946: LD_INT 1
5948: EQUAL
5949: IFFALSE 5961
// bc_type = b_depot else
5951: LD_ADDR_OWVAR 42
5955: PUSH
5956: LD_INT 0
5958: ST_TO_ADDR
5959: GO 5969
// bc_type = b_warehouse ;
5961: LD_ADDR_OWVAR 42
5965: PUSH
5966: LD_INT 1
5968: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
5969: LD_ADDR_VAR 0 12
5973: PUSH
5974: LD_VAR 0 5
5978: PPUSH
5979: LD_VAR 0 6
5983: PPUSH
5984: LD_VAR 0 7
5988: PPUSH
5989: CALL_OW 47
5993: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
5994: LD_VAR 0 12
5998: PPUSH
5999: LD_STRING @
6001: PUSH
6002: LD_VAR 0 1
6006: STR
6007: PPUSH
6008: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ base ] [ mat_cans ] ) ;
6012: LD_VAR 0 12
6016: PPUSH
6017: CALL_OW 274
6021: PPUSH
6022: LD_INT 1
6024: PPUSH
6025: LD_EXP 31
6029: PUSH
6030: LD_VAR 0 2
6034: ARRAY
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ base ] [ mat_oil ] ) ;
6044: LD_VAR 0 12
6048: PPUSH
6049: CALL_OW 274
6053: PPUSH
6054: LD_INT 2
6056: PPUSH
6057: LD_EXP 31
6061: PUSH
6062: LD_VAR 0 2
6066: ARRAY
6067: PUSH
6068: LD_INT 2
6070: ARRAY
6071: PPUSH
6072: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ base ] [ mat_siberit ] ) ;
6076: LD_VAR 0 12
6080: PPUSH
6081: CALL_OW 274
6085: PPUSH
6086: LD_INT 3
6088: PPUSH
6089: LD_EXP 31
6093: PUSH
6094: LD_VAR 0 2
6098: ARRAY
6099: PUSH
6100: LD_INT 3
6102: ARRAY
6103: PPUSH
6104: CALL_OW 277
// end else
6108: GO 6260
// begin for i := 1 to 3 do
6110: LD_ADDR_VAR 0 8
6114: PUSH
6115: DOUBLE
6116: LD_INT 1
6118: DEC
6119: ST_TO_ADDR
6120: LD_INT 3
6122: PUSH
6123: FOR_TO
6124: IFFALSE 6258
// begin r := starting_resources [ base ] [ i ] ;
6126: LD_ADDR_VAR 0 9
6130: PUSH
6131: LD_EXP 31
6135: PUSH
6136: LD_VAR 0 2
6140: ARRAY
6141: PUSH
6142: LD_VAR 0 8
6146: ARRAY
6147: ST_TO_ADDR
// while r >= 10 do
6148: LD_VAR 0 9
6152: PUSH
6153: LD_INT 10
6155: GREATEREQUAL
6156: IFFALSE 6256
// if r > 50 then
6158: LD_VAR 0 9
6162: PUSH
6163: LD_INT 50
6165: GREATER
6166: IFFALSE 6212
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
6168: LD_VAR 0 8
6172: PPUSH
6173: LD_INT 5
6175: PPUSH
6176: LD_VAR 0 5
6180: PPUSH
6181: LD_VAR 0 6
6185: PPUSH
6186: LD_INT 4
6188: PPUSH
6189: LD_INT 0
6191: PPUSH
6192: CALL_OW 60
// r := r - 50 ;
6196: LD_ADDR_VAR 0 9
6200: PUSH
6201: LD_VAR 0 9
6205: PUSH
6206: LD_INT 50
6208: MINUS
6209: ST_TO_ADDR
// end else
6210: GO 6254
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
6212: LD_VAR 0 8
6216: PPUSH
6217: LD_VAR 0 9
6221: PUSH
6222: LD_INT 10
6224: DIV
6225: PPUSH
6226: LD_VAR 0 5
6230: PPUSH
6231: LD_VAR 0 6
6235: PPUSH
6236: LD_INT 4
6238: PPUSH
6239: LD_INT 0
6241: PPUSH
6242: CALL_OW 60
// r := 0 ;
6246: LD_ADDR_VAR 0 9
6250: PUSH
6251: LD_INT 0
6253: ST_TO_ADDR
// end ;
6254: GO 6148
// end ;
6256: GO 6123
6258: POP
6259: POP
// end ; if is_lab [ base ] then
6260: LD_EXP 24
6264: PUSH
6265: LD_VAR 0 2
6269: ARRAY
6270: IFFALSE 6411
// begin if is_lab [ base ] = 1 then
6272: LD_EXP 24
6276: PUSH
6277: LD_VAR 0 2
6281: ARRAY
6282: PUSH
6283: LD_INT 1
6285: EQUAL
6286: IFFALSE 6314
// begin bc_type = b_lab ;
6288: LD_ADDR_OWVAR 42
6292: PUSH
6293: LD_INT 6
6295: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
6296: LD_ADDR_OWVAR 44
6300: PUSH
6301: LD_INT 9
6303: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
6304: LD_ADDR_OWVAR 45
6308: PUSH
6309: LD_INT 9
6311: ST_TO_ADDR
// end else
6312: GO 6338
// begin bc_type = b_lab_full ;
6314: LD_ADDR_OWVAR 42
6318: PUSH
6319: LD_INT 8
6321: ST_TO_ADDR
// bc_kind1 = b_lab_siberium ;
6322: LD_ADDR_OWVAR 44
6326: PUSH
6327: LD_INT 11
6329: ST_TO_ADDR
// bc_kind2 = b_lab_weapon ;
6330: LD_ADDR_OWVAR 45
6334: PUSH
6335: LD_INT 10
6337: ST_TO_ADDR
// end ; lab := CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ base ] [ 1 ] , labs_def [ pos ] [ base ] [ 2 ] , labs_def [ pos ] [ base ] [ 3 ] ) ;
6338: LD_ADDR_VAR 0 13
6342: PUSH
6343: LD_EXP 52
6347: PUSH
6348: LD_VAR 0 4
6352: ARRAY
6353: PUSH
6354: LD_VAR 0 2
6358: ARRAY
6359: PUSH
6360: LD_INT 1
6362: ARRAY
6363: PPUSH
6364: LD_EXP 52
6368: PUSH
6369: LD_VAR 0 4
6373: ARRAY
6374: PUSH
6375: LD_VAR 0 2
6379: ARRAY
6380: PUSH
6381: LD_INT 2
6383: ARRAY
6384: PPUSH
6385: LD_EXP 52
6389: PUSH
6390: LD_VAR 0 4
6394: ARRAY
6395: PUSH
6396: LD_VAR 0 2
6400: ARRAY
6401: PUSH
6402: LD_INT 3
6404: ARRAY
6405: PPUSH
6406: CALL_OW 47
6410: ST_TO_ADDR
// end ; if is_fact [ base ] then
6411: LD_EXP 25
6415: PUSH
6416: LD_VAR 0 2
6420: ARRAY
6421: IFFALSE 6530
// begin if is_fact [ base ] = 1 then
6423: LD_EXP 25
6427: PUSH
6428: LD_VAR 0 2
6432: ARRAY
6433: PUSH
6434: LD_INT 1
6436: EQUAL
6437: IFFALSE 6449
// bc_type = b_workshop else
6439: LD_ADDR_OWVAR 42
6443: PUSH
6444: LD_INT 2
6446: ST_TO_ADDR
6447: GO 6457
// bc_type = b_factory ;
6449: LD_ADDR_OWVAR 42
6453: PUSH
6454: LD_INT 3
6456: ST_TO_ADDR
// fact := CreateAndPlaceBuildingXYD ( factories_def [ pos ] [ base ] [ 1 ] , factories_def [ pos ] [ base ] [ 2 ] , factories_def [ pos ] [ base ] [ 3 ] ) ;
6457: LD_ADDR_VAR 0 14
6461: PUSH
6462: LD_EXP 53
6466: PUSH
6467: LD_VAR 0 4
6471: ARRAY
6472: PUSH
6473: LD_VAR 0 2
6477: ARRAY
6478: PUSH
6479: LD_INT 1
6481: ARRAY
6482: PPUSH
6483: LD_EXP 53
6487: PUSH
6488: LD_VAR 0 4
6492: ARRAY
6493: PUSH
6494: LD_VAR 0 2
6498: ARRAY
6499: PUSH
6500: LD_INT 2
6502: ARRAY
6503: PPUSH
6504: LD_EXP 53
6508: PUSH
6509: LD_VAR 0 4
6513: ARRAY
6514: PUSH
6515: LD_VAR 0 2
6519: ARRAY
6520: PUSH
6521: LD_INT 3
6523: ARRAY
6524: PPUSH
6525: CALL_OW 47
6529: ST_TO_ADDR
// end ; if is_arm [ base ] then
6530: LD_EXP 26
6534: PUSH
6535: LD_VAR 0 2
6539: ARRAY
6540: IFFALSE 6649
// begin if is_arm [ base ] = 1 then
6542: LD_EXP 26
6546: PUSH
6547: LD_VAR 0 2
6551: ARRAY
6552: PUSH
6553: LD_INT 1
6555: EQUAL
6556: IFFALSE 6568
// bc_type = b_armoury else
6558: LD_ADDR_OWVAR 42
6562: PUSH
6563: LD_INT 4
6565: ST_TO_ADDR
6566: GO 6576
// bc_type = b_barracks ;
6568: LD_ADDR_OWVAR 42
6572: PUSH
6573: LD_INT 5
6575: ST_TO_ADDR
// arm := CreateAndPlaceBuildingXYD ( armories_def [ pos ] [ base ] [ 1 ] , armories_def [ pos ] [ base ] [ 2 ] , armories_def [ pos ] [ base ] [ 3 ] ) ;
6576: LD_ADDR_VAR 0 15
6580: PUSH
6581: LD_EXP 54
6585: PUSH
6586: LD_VAR 0 4
6590: ARRAY
6591: PUSH
6592: LD_VAR 0 2
6596: ARRAY
6597: PUSH
6598: LD_INT 1
6600: ARRAY
6601: PPUSH
6602: LD_EXP 54
6606: PUSH
6607: LD_VAR 0 4
6611: ARRAY
6612: PUSH
6613: LD_VAR 0 2
6617: ARRAY
6618: PUSH
6619: LD_INT 2
6621: ARRAY
6622: PPUSH
6623: LD_EXP 54
6627: PUSH
6628: LD_VAR 0 4
6632: ARRAY
6633: PUSH
6634: LD_VAR 0 2
6638: ARRAY
6639: PUSH
6640: LD_INT 3
6642: ARRAY
6643: PPUSH
6644: CALL_OW 47
6648: ST_TO_ADDR
// end ; for i := 1 to number_of_pplants [ base ] do
6649: LD_ADDR_VAR 0 8
6653: PUSH
6654: DOUBLE
6655: LD_INT 1
6657: DEC
6658: ST_TO_ADDR
6659: LD_EXP 22
6663: PUSH
6664: LD_VAR 0 2
6668: ARRAY
6669: PUSH
6670: FOR_TO
6671: IFFALSE 6768
// begin bc_type = b_oil_power ;
6673: LD_ADDR_OWVAR 42
6677: PUSH
6678: LD_INT 26
6680: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( pplants_def [ pos ] [ base ] [ i ] [ 1 ] , pplants_def [ pos ] [ base ] [ i ] [ 2 ] , pplants_def [ pos ] [ base ] [ i ] [ 3 ] ) ;
6681: LD_EXP 55
6685: PUSH
6686: LD_VAR 0 4
6690: ARRAY
6691: PUSH
6692: LD_VAR 0 2
6696: ARRAY
6697: PUSH
6698: LD_VAR 0 8
6702: ARRAY
6703: PUSH
6704: LD_INT 1
6706: ARRAY
6707: PPUSH
6708: LD_EXP 55
6712: PUSH
6713: LD_VAR 0 4
6717: ARRAY
6718: PUSH
6719: LD_VAR 0 2
6723: ARRAY
6724: PUSH
6725: LD_VAR 0 8
6729: ARRAY
6730: PUSH
6731: LD_INT 2
6733: ARRAY
6734: PPUSH
6735: LD_EXP 55
6739: PUSH
6740: LD_VAR 0 4
6744: ARRAY
6745: PUSH
6746: LD_VAR 0 2
6750: ARRAY
6751: PUSH
6752: LD_VAR 0 8
6756: ARRAY
6757: PUSH
6758: LD_INT 3
6760: ARRAY
6761: PPUSH
6762: CALL_OW 47
// end ;
6766: GO 6670
6768: POP
6769: POP
// for i := 1 to deposits [ base ] [ 1 ] do
6770: LD_ADDR_VAR 0 8
6774: PUSH
6775: DOUBLE
6776: LD_INT 1
6778: DEC
6779: ST_TO_ADDR
6780: LD_EXP 28
6784: PUSH
6785: LD_VAR 0 2
6789: ARRAY
6790: PUSH
6791: LD_INT 1
6793: ARRAY
6794: PUSH
6795: FOR_TO
6796: IFFALSE 6933
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i ] , false ) ;
6798: LD_ADDR_VAR 0 17
6802: PUSH
6803: LD_EXP 56
6807: PUSH
6808: LD_VAR 0 4
6812: ARRAY
6813: PUSH
6814: LD_VAR 0 2
6818: ARRAY
6819: PUSH
6820: LD_VAR 0 8
6824: ARRAY
6825: PPUSH
6826: LD_INT 0
6828: PPUSH
6829: CALL_OW 16
6833: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_oil ) ;
6834: LD_VAR 0 17
6838: PUSH
6839: LD_INT 1
6841: ARRAY
6842: PPUSH
6843: LD_VAR 0 17
6847: PUSH
6848: LD_INT 2
6850: ARRAY
6851: PPUSH
6852: LD_INT 2
6854: PPUSH
6855: CALL_OW 62
// if are_mines [ base ] then
6859: LD_EXP 23
6863: PUSH
6864: LD_VAR 0 2
6868: ARRAY
6869: IFFALSE 6931
// begin bc_type = b_oil_mine ;
6871: LD_ADDR_OWVAR 42
6875: PUSH
6876: LD_INT 29
6878: ST_TO_ADDR
// SetResourceVisibility ( coord [ 1 ] , coord [ 2 ] , uc_side ) ;
6879: LD_VAR 0 17
6883: PUSH
6884: LD_INT 1
6886: ARRAY
6887: PPUSH
6888: LD_VAR 0 17
6892: PUSH
6893: LD_INT 2
6895: ARRAY
6896: PPUSH
6897: LD_OWVAR 20
6901: PPUSH
6902: CALL_OW 441
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
6906: LD_VAR 0 17
6910: PUSH
6911: LD_INT 1
6913: ARRAY
6914: PPUSH
6915: LD_VAR 0 17
6919: PUSH
6920: LD_INT 2
6922: ARRAY
6923: PPUSH
6924: LD_INT 0
6926: PPUSH
6927: CALL_OW 47
// end ; end ;
6931: GO 6795
6933: POP
6934: POP
// for i := 1 to deposits [ base ] [ 2 ] do
6935: LD_ADDR_VAR 0 8
6939: PUSH
6940: DOUBLE
6941: LD_INT 1
6943: DEC
6944: ST_TO_ADDR
6945: LD_EXP 28
6949: PUSH
6950: LD_VAR 0 2
6954: ARRAY
6955: PUSH
6956: LD_INT 2
6958: ARRAY
6959: PUSH
6960: FOR_TO
6961: IFFALSE 7120
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i + deposits [ base ] [ 1 ] ] , false ) ;
6963: LD_ADDR_VAR 0 17
6967: PUSH
6968: LD_EXP 56
6972: PUSH
6973: LD_VAR 0 4
6977: ARRAY
6978: PUSH
6979: LD_VAR 0 2
6983: ARRAY
6984: PUSH
6985: LD_VAR 0 8
6989: PUSH
6990: LD_EXP 28
6994: PUSH
6995: LD_VAR 0 2
6999: ARRAY
7000: PUSH
7001: LD_INT 1
7003: ARRAY
7004: PLUS
7005: ARRAY
7006: PPUSH
7007: LD_INT 0
7009: PPUSH
7010: CALL_OW 16
7014: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_siberit ) ;
7015: LD_VAR 0 17
7019: PUSH
7020: LD_INT 1
7022: ARRAY
7023: PPUSH
7024: LD_VAR 0 17
7028: PUSH
7029: LD_INT 2
7031: ARRAY
7032: PPUSH
7033: LD_INT 3
7035: PPUSH
7036: CALL_OW 62
// if are_mines [ base ] and def_siberite_detection then
7040: LD_EXP 23
7044: PUSH
7045: LD_VAR 0 2
7049: ARRAY
7050: PUSH
7051: LD_EXP 8
7055: AND
7056: IFFALSE 7118
// begin bc_type = b_siberite_mine ;
7058: LD_ADDR_OWVAR 42
7062: PUSH
7063: LD_INT 30
7065: ST_TO_ADDR
// SetResourceVisibility ( coord [ 1 ] , coord [ 2 ] , uc_side ) ;
7066: LD_VAR 0 17
7070: PUSH
7071: LD_INT 1
7073: ARRAY
7074: PPUSH
7075: LD_VAR 0 17
7079: PUSH
7080: LD_INT 2
7082: ARRAY
7083: PPUSH
7084: LD_OWVAR 20
7088: PPUSH
7089: CALL_OW 441
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
7093: LD_VAR 0 17
7097: PUSH
7098: LD_INT 1
7100: ARRAY
7101: PPUSH
7102: LD_VAR 0 17
7106: PUSH
7107: LD_INT 2
7109: ARRAY
7110: PPUSH
7111: LD_INT 0
7113: PPUSH
7114: CALL_OW 47
// end ; end ;
7118: GO 6960
7120: POP
7121: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
7122: LD_ADDR_VAR 0 5
7126: PUSH
7127: LD_EXP 49
7131: PUSH
7132: LD_VAR 0 4
7136: ARRAY
7137: PUSH
7138: LD_VAR 0 2
7142: ARRAY
7143: PUSH
7144: LD_INT 1
7146: ARRAY
7147: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
7148: LD_ADDR_VAR 0 6
7152: PUSH
7153: LD_EXP 49
7157: PUSH
7158: LD_VAR 0 4
7162: ARRAY
7163: PUSH
7164: LD_VAR 0 2
7168: ARRAY
7169: PUSH
7170: LD_INT 2
7172: ARRAY
7173: ST_TO_ADDR
// if base = 1 then
7174: LD_VAR 0 2
7178: PUSH
7179: LD_INT 1
7181: EQUAL
7182: IFFALSE 7290
// if def_morale_flags then
7184: LD_EXP 14
7188: IFFALSE 7290
// SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , def_bf_params [ 1 ] ] , [ bfo_defend_bonus_vehicle , def_bf_params [ 2 ] ] , [ bfo_defend_bonus_building , def_bf_params [ 3 ] ] , [ bfo_range , 17 ] , [ bfo_height , def_bf_params [ 4 ] ] ] ) ;
7190: LD_VAR 0 1
7194: PPUSH
7195: LD_VAR 0 5
7199: PPUSH
7200: LD_VAR 0 6
7204: PPUSH
7205: LD_INT 1
7207: PUSH
7208: LD_EXP 36
7212: PUSH
7213: LD_INT 1
7215: ARRAY
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 2
7223: PUSH
7224: LD_EXP 36
7228: PUSH
7229: LD_INT 2
7231: ARRAY
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 3
7239: PUSH
7240: LD_EXP 36
7244: PUSH
7245: LD_INT 3
7247: ARRAY
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 10
7255: PUSH
7256: LD_INT 17
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 20
7265: PUSH
7266: LD_EXP 36
7270: PUSH
7271: LD_INT 4
7273: ARRAY
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: PPUSH
7286: CALL_OW 418
// if number_of_people [ base ] then
7290: LD_EXP 21
7294: PUSH
7295: LD_VAR 0 2
7299: ARRAY
7300: IFFALSE 7509
// begin if No_Mechs then
7302: LD_EXP 68
7306: IFFALSE 7318
// Mode := 2 else
7308: LD_ADDR_VAR 0 16
7312: PUSH
7313: LD_INT 2
7315: ST_TO_ADDR
7316: GO 7326
// Mode := 1 ;
7318: LD_ADDR_VAR 0 16
7322: PUSH
7323: LD_INT 1
7325: ST_TO_ADDR
// neng := number_of_people [ base ] ;
7326: LD_ADDR_LOC 5
7330: PUSH
7331: LD_EXP 21
7335: PUSH
7336: LD_VAR 0 2
7340: ARRAY
7341: ST_TO_ADDR
// nmech := neng div [ 4 , 3 ] [ Mode ] ;
7342: LD_ADDR_LOC 7
7346: PUSH
7347: LD_LOC 5
7351: PUSH
7352: LD_INT 4
7354: PUSH
7355: LD_INT 3
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: LD_VAR 0 16
7366: ARRAY
7367: DIV
7368: ST_TO_ADDR
// neng := neng - nmech ;
7369: LD_ADDR_LOC 5
7373: PUSH
7374: LD_LOC 5
7378: PUSH
7379: LD_LOC 7
7383: MINUS
7384: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
7385: LD_ADDR_LOC 6
7389: PUSH
7390: LD_LOC 5
7394: PUSH
7395: LD_INT 3
7397: PUSH
7398: LD_INT 2
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PUSH
7405: LD_VAR 0 16
7409: ARRAY
7410: DIV
7411: ST_TO_ADDR
// if ( nsci < 1 ) then
7412: LD_LOC 6
7416: PUSH
7417: LD_INT 1
7419: LESS
7420: IFFALSE 7430
// nsci := 1 ;
7422: LD_ADDR_LOC 6
7426: PUSH
7427: LD_INT 1
7429: ST_TO_ADDR
// neng := neng - nsci ;
7430: LD_ADDR_LOC 5
7434: PUSH
7435: LD_LOC 5
7439: PUSH
7440: LD_LOC 6
7444: MINUS
7445: ST_TO_ADDR
// nsol := [ neng div 2 , 0 ] [ Mode ] ;
7446: LD_ADDR_LOC 8
7450: PUSH
7451: LD_LOC 5
7455: PUSH
7456: LD_INT 2
7458: DIV
7459: PUSH
7460: LD_INT 0
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: PUSH
7467: LD_VAR 0 16
7471: ARRAY
7472: ST_TO_ADDR
// neng := neng - nsol ;
7473: LD_ADDR_LOC 5
7477: PUSH
7478: LD_LOC 5
7482: PUSH
7483: LD_LOC 8
7487: MINUS
7488: ST_TO_ADDR
// if ( neng < 1 ) then
7489: LD_LOC 5
7493: PUSH
7494: LD_INT 1
7496: LESS
7497: IFFALSE 7507
// neng := 1 ;
7499: LD_ADDR_LOC 5
7503: PUSH
7504: LD_INT 1
7506: ST_TO_ADDR
// end else
7507: GO 7541
// begin neng := 0 ;
7509: LD_ADDR_LOC 5
7513: PUSH
7514: LD_INT 0
7516: ST_TO_ADDR
// nsci := 0 ;
7517: LD_ADDR_LOC 6
7521: PUSH
7522: LD_INT 0
7524: ST_TO_ADDR
// nmech := 0 ;
7525: LD_ADDR_LOC 7
7529: PUSH
7530: LD_INT 0
7532: ST_TO_ADDR
// nsol := 0 ;
7533: LD_ADDR_LOC 8
7537: PUSH
7538: LD_INT 0
7540: ST_TO_ADDR
// end ; commander := true ;
7541: LD_ADDR_LOC 1
7545: PUSH
7546: LD_INT 1
7548: ST_TO_ADDR
// soldiers_created := 0 ;
7549: LD_ADDR_LOC 4
7553: PUSH
7554: LD_INT 0
7556: ST_TO_ADDR
// for i := 1 to are_breastworks [ base ] do
7557: LD_ADDR_VAR 0 8
7561: PUSH
7562: DOUBLE
7563: LD_INT 1
7565: DEC
7566: ST_TO_ADDR
7567: LD_EXP 27
7571: PUSH
7572: LD_VAR 0 2
7576: ARRAY
7577: PUSH
7578: FOR_TO
7579: IFFALSE 7865
// begin if are_breastworks [ base ] [ i ] = 1 then
7581: LD_EXP 27
7585: PUSH
7586: LD_VAR 0 2
7590: ARRAY
7591: PUSH
7592: LD_VAR 0 8
7596: ARRAY
7597: PUSH
7598: LD_INT 1
7600: EQUAL
7601: IFFALSE 7613
// bc_type := b_breastwork else
7603: LD_ADDR_OWVAR 42
7607: PUSH
7608: LD_INT 31
7610: ST_TO_ADDR
7611: GO 7621
// bc_type := b_bunker ;
7613: LD_ADDR_OWVAR 42
7617: PUSH
7618: LD_INT 32
7620: ST_TO_ADDR
// x := breastworks_def [ pos ] [ base ] [ i ] [ 1 ] ;
7621: LD_ADDR_VAR 0 5
7625: PUSH
7626: LD_EXP 51
7630: PUSH
7631: LD_VAR 0 4
7635: ARRAY
7636: PUSH
7637: LD_VAR 0 2
7641: ARRAY
7642: PUSH
7643: LD_VAR 0 8
7647: ARRAY
7648: PUSH
7649: LD_INT 1
7651: ARRAY
7652: ST_TO_ADDR
// y := breastworks_def [ pos ] [ base ] [ i ] [ 2 ] ;
7653: LD_ADDR_VAR 0 6
7657: PUSH
7658: LD_EXP 51
7662: PUSH
7663: LD_VAR 0 4
7667: ARRAY
7668: PUSH
7669: LD_VAR 0 2
7673: ARRAY
7674: PUSH
7675: LD_VAR 0 8
7679: ARRAY
7680: PUSH
7681: LD_INT 2
7683: ARRAY
7684: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ base ] [ i ] [ 3 ] ;
7685: LD_ADDR_VAR 0 7
7689: PUSH
7690: LD_EXP 51
7694: PUSH
7695: LD_VAR 0 4
7699: ARRAY
7700: PUSH
7701: LD_VAR 0 2
7705: ARRAY
7706: PUSH
7707: LD_VAR 0 8
7711: ARRAY
7712: PUSH
7713: LD_INT 3
7715: ARRAY
7716: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
7717: LD_ADDR_VAR 0 11
7721: PUSH
7722: LD_VAR 0 5
7726: PPUSH
7727: LD_VAR 0 6
7731: PPUSH
7732: LD_VAR 0 7
7736: PPUSH
7737: CALL_OW 47
7741: ST_TO_ADDR
// if bc_type = b_bunker then
7742: LD_OWVAR 42
7746: PUSH
7747: LD_INT 32
7749: EQUAL
7750: IFFALSE 7827
// case uc_nation of nation_american :
7752: LD_OWVAR 21
7756: PUSH
7757: LD_INT 1
7759: DOUBLE
7760: EQUAL
7761: IFTRUE 7765
7763: GO 7780
7765: POP
// PlaceWeaponTurret ( br , us_machine_gun ) ; nation_arabian :
7766: LD_VAR 0 11
7770: PPUSH
7771: LD_INT 2
7773: PPUSH
7774: CALL_OW 431
7778: GO 7827
7780: LD_INT 2
7782: DOUBLE
7783: EQUAL
7784: IFTRUE 7788
7786: GO 7803
7788: POP
// PlaceWeaponTurret ( br , ar_double_machine_gun ) ; nation_russian :
7789: LD_VAR 0 11
7793: PPUSH
7794: LD_INT 24
7796: PPUSH
7797: CALL_OW 431
7801: GO 7827
7803: LD_INT 3
7805: DOUBLE
7806: EQUAL
7807: IFTRUE 7811
7809: GO 7826
7811: POP
// PlaceWeaponTurret ( br , ru_heavy_machine_gun ) ; end ;
7812: LD_VAR 0 11
7816: PPUSH
7817: LD_INT 42
7819: PPUSH
7820: CALL_OW 431
7824: GO 7827
7826: POP
// if i <= nsol then
7827: LD_VAR 0 8
7831: PUSH
7832: LD_LOC 8
7836: LESSEQUAL
7837: IFFALSE 7863
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
7839: LD_INT 1
7841: PPUSH
7842: LD_INT 1
7844: PPUSH
7845: LD_INT 0
7847: PPUSH
7848: LD_INT 0
7850: PPUSH
7851: LD_INT 0
7853: PPUSH
7854: LD_VAR 0 11
7858: PPUSH
7859: CALL 5197 0 6
// end ;
7863: GO 7578
7865: POP
7866: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
7867: LD_ADDR_VAR 0 5
7871: PUSH
7872: LD_EXP 49
7876: PUSH
7877: LD_VAR 0 4
7881: ARRAY
7882: PUSH
7883: LD_VAR 0 2
7887: ARRAY
7888: PUSH
7889: LD_INT 1
7891: ARRAY
7892: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
7893: LD_ADDR_VAR 0 6
7897: PUSH
7898: LD_EXP 49
7902: PUSH
7903: LD_VAR 0 4
7907: ARRAY
7908: PUSH
7909: LD_VAR 0 2
7913: ARRAY
7914: PUSH
7915: LD_INT 2
7917: ARRAY
7918: ST_TO_ADDR
// if nsol > are_breastworks [ base ] then
7919: LD_LOC 8
7923: PUSH
7924: LD_EXP 27
7928: PUSH
7929: LD_VAR 0 2
7933: ARRAY
7934: GREATER
7935: IFFALSE 8023
// if arm then
7937: LD_VAR 0 15
7941: IFFALSE 7983
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , 0 , 0 , 0 , arm ) else
7943: LD_LOC 8
7947: PUSH
7948: LD_EXP 27
7952: PUSH
7953: LD_VAR 0 2
7957: ARRAY
7958: MINUS
7959: PPUSH
7960: LD_INT 1
7962: PPUSH
7963: LD_INT 0
7965: PPUSH
7966: LD_INT 0
7968: PPUSH
7969: LD_INT 0
7971: PPUSH
7972: LD_VAR 0 15
7976: PPUSH
7977: CALL 5197 0 6
7981: GO 8023
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , x , y , 5 , 0 ) ;
7983: LD_LOC 8
7987: PUSH
7988: LD_EXP 27
7992: PUSH
7993: LD_VAR 0 2
7997: ARRAY
7998: MINUS
7999: PPUSH
8000: LD_INT 1
8002: PPUSH
8003: LD_VAR 0 5
8007: PPUSH
8008: LD_VAR 0 6
8012: PPUSH
8013: LD_INT 5
8015: PPUSH
8016: LD_INT 0
8018: PPUSH
8019: CALL 5197 0 6
// if dep then
8023: LD_VAR 0 12
8027: IFFALSE 8057
// prepare_people ( neng , class_engineer , 0 , 0 , 0 , dep ) else
8029: LD_LOC 5
8033: PPUSH
8034: LD_INT 2
8036: PPUSH
8037: LD_INT 0
8039: PPUSH
8040: LD_INT 0
8042: PPUSH
8043: LD_INT 0
8045: PPUSH
8046: LD_VAR 0 12
8050: PPUSH
8051: CALL 5197 0 6
8055: GO 8085
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
8057: LD_LOC 5
8061: PPUSH
8062: LD_INT 2
8064: PPUSH
8065: LD_VAR 0 5
8069: PPUSH
8070: LD_VAR 0 6
8074: PPUSH
8075: LD_INT 5
8077: PPUSH
8078: LD_INT 0
8080: PPUSH
8081: CALL 5197 0 6
// if fact then
8085: LD_VAR 0 14
8089: IFFALSE 8119
// prepare_people ( nmech , class_mechanic , 0 , 0 , 0 , fact ) else
8091: LD_LOC 7
8095: PPUSH
8096: LD_INT 3
8098: PPUSH
8099: LD_INT 0
8101: PPUSH
8102: LD_INT 0
8104: PPUSH
8105: LD_INT 0
8107: PPUSH
8108: LD_VAR 0 14
8112: PPUSH
8113: CALL 5197 0 6
8117: GO 8147
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
8119: LD_LOC 7
8123: PPUSH
8124: LD_INT 3
8126: PPUSH
8127: LD_VAR 0 5
8131: PPUSH
8132: LD_VAR 0 6
8136: PPUSH
8137: LD_INT 5
8139: PPUSH
8140: LD_INT 0
8142: PPUSH
8143: CALL 5197 0 6
// if lab then
8147: LD_VAR 0 13
8151: IFFALSE 8181
// prepare_people ( nsci , class_scientistic , 0 , 0 , 0 , lab ) else
8153: LD_LOC 6
8157: PPUSH
8158: LD_INT 4
8160: PPUSH
8161: LD_INT 0
8163: PPUSH
8164: LD_INT 0
8166: PPUSH
8167: LD_INT 0
8169: PPUSH
8170: LD_VAR 0 13
8174: PPUSH
8175: CALL 5197 0 6
8179: GO 8209
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
8181: LD_LOC 6
8185: PPUSH
8186: LD_INT 4
8188: PPUSH
8189: LD_VAR 0 5
8193: PPUSH
8194: LD_VAR 0 6
8198: PPUSH
8199: LD_INT 5
8201: PPUSH
8202: LD_INT 0
8204: PPUSH
8205: CALL 5197 0 6
// max = 0 ;
8209: LD_ADDR_VAR 0 18
8213: PUSH
8214: LD_INT 0
8216: ST_TO_ADDR
// for un in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
8217: LD_ADDR_VAR 0 10
8221: PUSH
8222: LD_INT 22
8224: PUSH
8225: LD_VAR 0 1
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PUSH
8234: LD_INT 21
8236: PUSH
8237: LD_INT 1
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PPUSH
8248: CALL_OW 69
8252: PUSH
8253: FOR_IN
8254: IFFALSE 8296
// begin if GetSkill ( un , skill_engineering ) > max then
8256: LD_VAR 0 10
8260: PPUSH
8261: LD_INT 2
8263: PPUSH
8264: CALL_OW 259
8268: PUSH
8269: LD_VAR 0 18
8273: GREATER
8274: IFFALSE 8294
// max := GetSkill ( un , skill_engineering ) ;
8276: LD_ADDR_VAR 0 18
8280: PUSH
8281: LD_VAR 0 10
8285: PPUSH
8286: LD_INT 2
8288: PPUSH
8289: CALL_OW 259
8293: ST_TO_ADDR
// end ;
8294: GO 8253
8296: POP
8297: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) , max ) ;
8298: LD_INT 22
8300: PUSH
8301: LD_VAR 0 1
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: LD_INT 21
8312: PUSH
8313: LD_INT 3
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PPUSH
8324: CALL_OW 69
8328: PPUSH
8329: LD_VAR 0 18
8333: PPUSH
8334: CALL_OW 241
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
8338: LD_EXP 8
8342: PUSH
8343: LD_INT 20
8345: PPUSH
8346: LD_VAR 0 1
8350: PPUSH
8351: CALL_OW 321
8355: PUSH
8356: LD_INT 1
8358: EQUAL
8359: AND
8360: IFFALSE 8377
// SetTech ( tech_SibDet , side , state_researched ) ;
8362: LD_INT 20
8364: PPUSH
8365: LD_VAR 0 1
8369: PPUSH
8370: LD_INT 2
8372: PPUSH
8373: CALL_OW 322
// if def_siberite_bomb = 1 then
8377: LD_EXP 15
8381: PUSH
8382: LD_INT 1
8384: EQUAL
8385: IFFALSE 8419
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
8387: LD_INT 25
8389: PPUSH
8390: LD_VAR 0 1
8394: PPUSH
8395: LD_INT 1
8397: PPUSH
8398: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
8402: LD_INT 73
8404: PPUSH
8405: LD_VAR 0 1
8409: PPUSH
8410: LD_INT 1
8412: PPUSH
8413: CALL_OW 322
// end else
8417: GO 8449
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
8419: LD_INT 25
8421: PPUSH
8422: LD_VAR 0 1
8426: PPUSH
8427: LD_INT 0
8429: PPUSH
8430: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
8434: LD_INT 73
8436: PPUSH
8437: LD_VAR 0 1
8441: PPUSH
8442: LD_INT 0
8444: PPUSH
8445: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
8449: LD_INT 24
8451: PPUSH
8452: LD_VAR 0 1
8456: PPUSH
8457: LD_INT 0
8459: PPUSH
8460: CALL_OW 322
// global_defined := true ;
8464: LD_ADDR_LOC 3
8468: PUSH
8469: LD_INT 1
8471: ST_TO_ADDR
// end ;
8472: LD_VAR 0 3
8476: RET
// every 0 0$1 do
8477: GO 8479
8479: DISABLE
// if ( def_siberite_bomb > 1 ) then
8480: LD_EXP 15
8484: PUSH
8485: LD_INT 1
8487: GREATER
8488: IFFALSE 8503
// begin wait ( siberite_bomb_Delay ) ;
8490: LD_EXP 38
8494: PPUSH
8495: CALL_OW 67
// EnableSibFiss ;
8499: CALL 8504 0 0
// end ;
8503: END
// function EnableSibFiss ; var i ; begin
8504: LD_INT 0
8506: PPUSH
8507: PPUSH
// for i := 1 to 8 do
8508: LD_ADDR_VAR 0 2
8512: PUSH
8513: DOUBLE
8514: LD_INT 1
8516: DEC
8517: ST_TO_ADDR
8518: LD_INT 8
8520: PUSH
8521: FOR_TO
8522: IFFALSE 8553
// if Side_Positions [ i ] then
8524: LD_EXP 43
8528: PUSH
8529: LD_VAR 0 2
8533: ARRAY
8534: IFFALSE 8551
// SetTech ( tech_SibFiss , i , state_enabled ) ;
8536: LD_INT 25
8538: PPUSH
8539: LD_VAR 0 2
8543: PPUSH
8544: LD_INT 1
8546: PPUSH
8547: CALL_OW 322
8551: GO 8521
8553: POP
8554: POP
// end ;
8555: LD_VAR 0 1
8559: RET
// function prepare_sides ; var i ; begin
8560: LD_INT 0
8562: PPUSH
8563: PPUSH
// global_units := [ ] ;
8564: LD_ADDR_LOC 2
8568: PUSH
8569: EMPTY
8570: ST_TO_ADDR
// global_defined := false ;
8571: LD_ADDR_LOC 3
8575: PUSH
8576: LD_INT 0
8578: ST_TO_ADDR
// for i := 1 to Side_Positions do
8579: LD_ADDR_VAR 0 2
8583: PUSH
8584: DOUBLE
8585: LD_INT 1
8587: DEC
8588: ST_TO_ADDR
8589: LD_EXP 43
8593: PUSH
8594: FOR_TO
8595: IFFALSE 8635
// if Side_Positions [ i ] then
8597: LD_EXP 43
8601: PUSH
8602: LD_VAR 0 2
8606: ARRAY
8607: IFFALSE 8633
// begin prepare_side_base ( i , 1 ) ;
8609: LD_VAR 0 2
8613: PPUSH
8614: LD_INT 1
8616: PPUSH
8617: CALL 5785 0 2
// prepare_side_base ( i , 2 ) ;
8621: LD_VAR 0 2
8625: PPUSH
8626: LD_INT 2
8628: PPUSH
8629: CALL 5785 0 2
// end ;
8633: GO 8594
8635: POP
8636: POP
// end ;
8637: LD_VAR 0 1
8641: RET
// starting begin disable ( 98 ) ;
8642: LD_INT 98
8644: DISABLE_MARKED
// disable ( 400 ) ;
8645: LD_INT 400
8647: DISABLE_MARKED
// disable ( 401 ) ;
8648: LD_INT 401
8650: DISABLE_MARKED
// disable ( 600 ) ;
8651: LD_INT 600
8653: DISABLE_MARKED
// enable_human_prediction := true ;
8654: LD_ADDR_OWVAR 51
8658: PUSH
8659: LD_INT 1
8661: ST_TO_ADDR
// mp_selectmsg := true ;
8662: LD_ADDR_OWVAR 13
8666: PUSH
8667: LD_INT 1
8669: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
8670: CALL 68 0 0
// prepare_map_coordinates ;
8674: CALL 3700 0 0
// ResetFog ;
8678: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
8682: LD_OWVAR 2
8686: PPUSH
8687: CALL_OW 520
// prepare_sides ;
8691: CALL 8560 0 0
// Init_Win_Condition ;
8695: CALL 16095 0 0
// InitLimits ;
8699: CALL 14755 0 0
// ShowTimer ;
8703: CALL 15692 0 0
// music_nat := Side_Nations [ your_side ] ;
8707: LD_ADDR_OWVAR 71
8711: PUSH
8712: LD_EXP 44
8716: PUSH
8717: LD_OWVAR 2
8721: ARRAY
8722: ST_TO_ADDR
// if IAmSpec then
8723: CALL_OW 531
8727: IFFALSE 8751
// begin fogoff ( true ) ;
8729: LD_INT 1
8731: PPUSH
8732: CALL_OW 344
// CenterNowOnXY ( 109 , 61 ) ;
8736: LD_INT 109
8738: PPUSH
8739: LD_INT 61
8741: PPUSH
8742: CALL_OW 86
// enable ( 400 ) ;
8746: LD_INT 400
8748: ENABLE_MARKED
// end else
8749: GO 8805
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 2 ] ) ;
8751: LD_EXP 49
8755: PUSH
8756: LD_EXP 43
8760: PUSH
8761: LD_OWVAR 2
8765: ARRAY
8766: ARRAY
8767: PUSH
8768: LD_INT 1
8770: ARRAY
8771: PUSH
8772: LD_INT 1
8774: ARRAY
8775: PPUSH
8776: LD_EXP 49
8780: PUSH
8781: LD_EXP 43
8785: PUSH
8786: LD_OWVAR 2
8790: ARRAY
8791: ARRAY
8792: PUSH
8793: LD_INT 1
8795: ARRAY
8796: PUSH
8797: LD_INT 2
8799: ARRAY
8800: PPUSH
8801: CALL_OW 86
// end ; InitApeman ;
8805: CALL 10205 0 0
// if def_builduptime then
8809: LD_EXP 17
8813: IFFALSE 8819
// BeginBuildUp ;
8815: CALL 13395 0 0
// end ; end_of_file
8819: END
// every 1 1$0 + 0 0$0.3 do
8820: GO 8822
8822: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
8823: LD_INT 4
8825: PPUSH
8826: LD_INT 5
8828: PPUSH
8829: CALL_OW 12
8833: PPUSH
8834: LD_INT 1
8836: PPUSH
8837: CALL_OW 57
// enable ;
8841: ENABLE
// end ;
8842: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
8843: GO 8845
8845: DISABLE
8846: LD_INT 0
8848: PPUSH
8849: PPUSH
// begin case tick of 1 .. 1 1$0 :
8850: LD_OWVAR 1
8854: PUSH
8855: LD_INT 1
8857: DOUBLE
8858: GREATEREQUAL
8859: IFFALSE 8867
8861: LD_INT 2100
8863: DOUBLE
8864: LESSEQUAL
8865: IFTRUE 8869
8867: GO 8897
8869: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
8870: LD_EXP 32
8874: PUSH
8875: LD_INT 100
8877: DIVREAL
8878: PUSH
8879: LD_INT 350
8881: PPUSH
8882: LD_INT 700
8884: PPUSH
8885: CALL_OW 12
8889: MUL
8890: PPUSH
8891: CALL_OW 67
8895: GO 9199
8897: LD_INT 2100
8899: PUSH
8900: LD_INT 1
8902: PLUS
8903: DOUBLE
8904: GREATEREQUAL
8905: IFFALSE 8913
8907: LD_INT 10500
8909: DOUBLE
8910: LESSEQUAL
8911: IFTRUE 8915
8913: GO 8943
8915: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
8916: LD_EXP 32
8920: PUSH
8921: LD_INT 100
8923: DIVREAL
8924: PUSH
8925: LD_INT 700
8927: PPUSH
8928: LD_INT 1225
8930: PPUSH
8931: CALL_OW 12
8935: MUL
8936: PPUSH
8937: CALL_OW 67
8941: GO 9199
8943: LD_INT 10500
8945: PUSH
8946: LD_INT 1
8948: PLUS
8949: DOUBLE
8950: GREATEREQUAL
8951: IFFALSE 8959
8953: LD_INT 21000
8955: DOUBLE
8956: LESSEQUAL
8957: IFTRUE 8961
8959: GO 8989
8961: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
8962: LD_EXP 32
8966: PUSH
8967: LD_INT 100
8969: DIVREAL
8970: PUSH
8971: LD_INT 1225
8973: PPUSH
8974: LD_INT 1750
8976: PPUSH
8977: CALL_OW 12
8981: MUL
8982: PPUSH
8983: CALL_OW 67
8987: GO 9199
8989: LD_INT 21000
8991: PUSH
8992: LD_INT 1
8994: PLUS
8995: DOUBLE
8996: GREATEREQUAL
8997: IFFALSE 9005
8999: LD_INT 42000
9001: DOUBLE
9002: LESSEQUAL
9003: IFTRUE 9007
9005: GO 9035
9007: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
9008: LD_EXP 32
9012: PUSH
9013: LD_INT 100
9015: DIVREAL
9016: PUSH
9017: LD_INT 1750
9019: PPUSH
9020: LD_INT 2450
9022: PPUSH
9023: CALL_OW 12
9027: MUL
9028: PPUSH
9029: CALL_OW 67
9033: GO 9199
9035: LD_INT 42000
9037: PUSH
9038: LD_INT 1
9040: PLUS
9041: DOUBLE
9042: GREATEREQUAL
9043: IFFALSE 9051
9045: LD_INT 63000
9047: DOUBLE
9048: LESSEQUAL
9049: IFTRUE 9053
9051: GO 9081
9053: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
9054: LD_EXP 32
9058: PUSH
9059: LD_INT 100
9061: DIVREAL
9062: PUSH
9063: LD_INT 2450
9065: PPUSH
9066: LD_INT 2800
9068: PPUSH
9069: CALL_OW 12
9073: MUL
9074: PPUSH
9075: CALL_OW 67
9079: GO 9199
9081: LD_INT 63000
9083: PUSH
9084: LD_INT 1
9086: PLUS
9087: DOUBLE
9088: GREATEREQUAL
9089: IFFALSE 9097
9091: LD_INT 105000
9093: DOUBLE
9094: LESSEQUAL
9095: IFTRUE 9099
9097: GO 9127
9099: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
9100: LD_EXP 32
9104: PUSH
9105: LD_INT 100
9107: DIVREAL
9108: PUSH
9109: LD_INT 2800
9111: PPUSH
9112: LD_INT 3325
9114: PPUSH
9115: CALL_OW 12
9119: MUL
9120: PPUSH
9121: CALL_OW 67
9125: GO 9199
9127: LD_INT 105000
9129: PUSH
9130: LD_INT 1
9132: PLUS
9133: DOUBLE
9134: GREATEREQUAL
9135: IFFALSE 9143
9137: LD_INT 630000
9139: DOUBLE
9140: LESSEQUAL
9141: IFTRUE 9145
9143: GO 9173
9145: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
9146: LD_EXP 32
9150: PUSH
9151: LD_INT 100
9153: DIVREAL
9154: PUSH
9155: LD_INT 3325
9157: PPUSH
9158: LD_INT 4200
9160: PPUSH
9161: CALL_OW 12
9165: MUL
9166: PPUSH
9167: CALL_OW 67
9171: GO 9199
9173: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
9174: LD_EXP 32
9178: PUSH
9179: LD_INT 100
9181: DIVREAL
9182: PUSH
9183: LD_INT 4200
9185: PPUSH
9186: LD_INT 5250
9188: PPUSH
9189: CALL_OW 12
9193: MUL
9194: PPUSH
9195: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
9199: LD_ADDR_VAR 0 2
9203: PUSH
9204: LD_INT 3
9206: PPUSH
9207: LD_INT 5
9209: PPUSH
9210: CALL_OW 12
9214: ST_TO_ADDR
// for i = 1 to 2 do
9215: LD_ADDR_VAR 0 1
9219: PUSH
9220: DOUBLE
9221: LD_INT 1
9223: DEC
9224: ST_TO_ADDR
9225: LD_INT 2
9227: PUSH
9228: FOR_TO
9229: IFFALSE 9256
// CreateCratesArea ( amount , BuildUpAreas [ i ] , true ) ;
9231: LD_VAR 0 2
9235: PPUSH
9236: LD_EXP 65
9240: PUSH
9241: LD_VAR 0 1
9245: ARRAY
9246: PPUSH
9247: LD_INT 1
9249: PPUSH
9250: CALL_OW 55
9254: GO 9228
9256: POP
9257: POP
// enable ;
9258: ENABLE
// end ;
9259: PPOPN 2
9261: END
// every 0 0$20 + 0 0$0.9 do var i , filter ;
9262: GO 9264
9264: DISABLE
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
// begin if GetResourceArea ( Valley , mat_cans ) < ( ( 300 - shipments_density ) / 100 * 5 ) then
9269: LD_INT 12
9271: PPUSH
9272: LD_INT 1
9274: PPUSH
9275: CALL_OW 287
9279: PUSH
9280: LD_INT 300
9282: PUSH
9283: LD_EXP 32
9287: MINUS
9288: PUSH
9289: LD_INT 100
9291: DIVREAL
9292: PUSH
9293: LD_INT 5
9295: MUL
9296: LESS
9297: IFFALSE 9320
// CreateCratesArea ( Rand ( 3 , 5 ) , Valley , true ) ;
9299: LD_INT 3
9301: PPUSH
9302: LD_INT 5
9304: PPUSH
9305: CALL_OW 12
9309: PPUSH
9310: LD_INT 12
9312: PPUSH
9313: LD_INT 1
9315: PPUSH
9316: CALL_OW 55
// enable ;
9320: ENABLE
// end ; end_of_file
9321: PPOPN 2
9323: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
9324: LD_VAR 0 1
9328: PPUSH
9329: CALL_OW 266
9333: PUSH
9334: LD_INT 0
9336: PUSH
9337: LD_INT 1
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: IN
9344: IFFALSE 9369
// SetBName ( b , @ & GetSide ( b ) ) ;
9346: LD_VAR 0 1
9350: PPUSH
9351: LD_STRING @
9353: PUSH
9354: LD_VAR 0 1
9358: PPUSH
9359: CALL_OW 255
9363: STR
9364: PPUSH
9365: CALL_OW 500
// if def_game_rules then
9369: LD_EXP 67
9373: IFFALSE 9410
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
9375: LD_VAR 0 1
9379: PPUSH
9380: LD_VAR 0 1
9384: PPUSH
9385: CALL_OW 266
9389: PPUSH
9390: LD_VAR 0 1
9394: PPUSH
9395: CALL_OW 255
9399: PPUSH
9400: LD_INT 0
9402: PPUSH
9403: LD_INT 1
9405: PPUSH
9406: CALL 15156 0 5
// end ;
9410: PPOPN 2
9412: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
9413: LD_VAR 0 1
9417: PPUSH
9418: CALL_OW 266
9422: PUSH
9423: LD_INT 0
9425: PUSH
9426: LD_INT 1
9428: PUSH
9429: EMPTY
9430: LIST
9431: LIST
9432: IN
9433: IFFALSE 9458
// SetBName ( b , @ & GetSide ( b ) ) ;
9435: LD_VAR 0 1
9439: PPUSH
9440: LD_STRING @
9442: PUSH
9443: LD_VAR 0 1
9447: PPUSH
9448: CALL_OW 255
9452: STR
9453: PPUSH
9454: CALL_OW 500
// if def_game_rules then
9458: LD_EXP 67
9462: IFFALSE 9501
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
9464: LD_VAR 0 1
9468: PPUSH
9469: LD_VAR 0 1
9473: PPUSH
9474: CALL_OW 266
9478: PPUSH
9479: LD_VAR 0 1
9483: PPUSH
9484: CALL_OW 255
9488: PPUSH
9489: LD_VAR 0 2
9493: PPUSH
9494: LD_INT 1
9496: PPUSH
9497: CALL 15156 0 5
// end ;
9501: PPOPN 3
9503: END
// on VehicleConstructed ( veh , fac ) do var side ;
9504: LD_INT 0
9506: PPUSH
// begin if GetControl ( veh ) = control_apeman then
9507: LD_VAR 0 1
9511: PPUSH
9512: CALL_OW 263
9516: PUSH
9517: LD_INT 5
9519: EQUAL
9520: IFFALSE 9662
// begin side := GetSide ( veh ) ;
9522: LD_ADDR_VAR 0 3
9526: PUSH
9527: LD_VAR 0 1
9531: PPUSH
9532: CALL_OW 255
9536: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
9537: LD_ADDR_EXP 61
9541: PUSH
9542: LD_EXP 61
9546: PPUSH
9547: LD_VAR 0 3
9551: PPUSH
9552: LD_EXP 61
9556: PUSH
9557: LD_VAR 0 3
9561: ARRAY
9562: PPUSH
9563: LD_INT 52
9565: PUSH
9566: EMPTY
9567: LIST
9568: PPUSH
9569: CALL_OW 72
9573: PUSH
9574: LD_INT 22
9576: PUSH
9577: LD_VAR 0 3
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 2
9588: PUSH
9589: LD_INT 33
9591: PUSH
9592: LD_INT 5
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: LD_INT 25
9601: PUSH
9602: LD_INT 12
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: LD_INT 25
9611: PUSH
9612: LD_INT 15
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PUSH
9619: LD_INT 25
9621: PUSH
9622: LD_INT 16
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 25
9631: PUSH
9632: LD_INT 17
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PPUSH
9651: CALL_OW 69
9655: UNION
9656: PPUSH
9657: CALL_OW 1
9661: ST_TO_ADDR
// end ; end ;
9662: PPOPN 3
9664: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
9665: LD_INT 0
9667: PPUSH
9668: PPUSH
9669: PPUSH
9670: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
9671: LD_VAR 0 1
9675: PPUSH
9676: CALL_OW 257
9680: PUSH
9681: LD_INT 12
9683: PUSH
9684: LD_INT 15
9686: PUSH
9687: LD_INT 17
9689: PUSH
9690: LD_INT 16
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: IN
9699: PUSH
9700: LD_VAR 0 1
9704: PPUSH
9705: CALL_OW 263
9709: PUSH
9710: LD_INT 5
9712: EQUAL
9713: OR
9714: IFFALSE 9725
// ApeKilled ( j ) ;
9716: LD_VAR 0 1
9720: PPUSH
9721: CALL 10878 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
9725: LD_VAR 0 1
9729: PPUSH
9730: CALL_OW 266
9734: PUSH
9735: LD_INT 0
9737: PUSH
9738: LD_INT 1
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: IN
9745: IFFALSE 9827
// begin pos := Side_Positions [ GetSide ( j ) ] ;
9747: LD_ADDR_VAR 0 4
9751: PUSH
9752: LD_EXP 43
9756: PUSH
9757: LD_VAR 0 1
9761: PPUSH
9762: CALL_OW 255
9766: ARRAY
9767: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
9768: LD_ADDR_VAR 0 2
9772: PUSH
9773: LD_EXP 49
9777: PUSH
9778: LD_VAR 0 4
9782: ARRAY
9783: PUSH
9784: LD_INT 1
9786: ARRAY
9787: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
9788: LD_ADDR_VAR 0 3
9792: PUSH
9793: LD_EXP 49
9797: PUSH
9798: LD_VAR 0 4
9802: ARRAY
9803: PUSH
9804: LD_INT 2
9806: ARRAY
9807: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
9808: LD_VAR 0 2
9812: PPUSH
9813: LD_VAR 0 3
9817: PPUSH
9818: CALL_OW 420
9822: PPUSH
9823: CALL_OW 419
// end ; if def_game_rules then
9827: LD_EXP 67
9831: IFFALSE 9930
// if ( GetType ( j ) = 3 ) then
9833: LD_VAR 0 1
9837: PPUSH
9838: CALL_OW 247
9842: PUSH
9843: LD_INT 3
9845: EQUAL
9846: IFFALSE 9886
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
9848: LD_VAR 0 1
9852: PPUSH
9853: LD_VAR 0 1
9857: PPUSH
9858: CALL_OW 266
9862: PPUSH
9863: LD_VAR 0 1
9867: PPUSH
9868: CALL_OW 255
9872: PPUSH
9873: LD_INT 0
9875: PPUSH
9876: LD_INT 1
9878: NEG
9879: PPUSH
9880: CALL 15156 0 5
9884: GO 9930
// if ( GetChassis ( j ) = 25 ) then
9886: LD_VAR 0 1
9890: PPUSH
9891: CALL_OW 265
9895: PUSH
9896: LD_INT 25
9898: EQUAL
9899: IFFALSE 9930
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
9901: LD_VAR 0 1
9905: PPUSH
9906: LD_INT 37
9908: PPUSH
9909: LD_VAR 0 1
9913: PPUSH
9914: CALL_OW 255
9918: PPUSH
9919: LD_INT 0
9921: PPUSH
9922: LD_INT 1
9924: NEG
9925: PPUSH
9926: CALL 15156 0 5
// end ;
9930: PPOPN 5
9932: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
9933: LD_EXP 67
9937: PUSH
9938: LD_VAR 0 1
9942: PPUSH
9943: CALL_OW 265
9947: PUSH
9948: LD_INT 25
9950: EQUAL
9951: AND
9952: IFFALSE 9984
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
9954: LD_VAR 0 1
9958: PPUSH
9959: LD_INT 37
9961: PPUSH
9962: LD_VAR 0 1
9966: PPUSH
9967: CALL_OW 255
9971: PPUSH
9972: LD_VAR 0 3
9976: PPUSH
9977: LD_INT 1
9979: PPUSH
9980: CALL 15156 0 5
// end ;
9984: PPOPN 4
9986: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
9987: LD_VAR 0 1
9991: PPUSH
9992: LD_VAR 0 2
9996: PPUSH
9997: LD_VAR 0 3
10001: PPUSH
10002: LD_OWVAR 2
10006: PPUSH
10007: CALL 15856 0 4
10011: PPOPN 3
10013: END
// every 20 20$00 trigger apemanNumber do
10014: LD_EXP 58
10018: IFFALSE 10051
10020: GO 10022
10022: DISABLE
// begin enable ;
10023: ENABLE
// if apeLevel >= 8 then
10024: LD_EXP 63
10028: PUSH
10029: LD_INT 8
10031: GREATEREQUAL
10032: IFFALSE 10037
// disable else
10034: DISABLE
10035: GO 10051
// apeLevel := apeLevel + 1 ;
10037: LD_ADDR_EXP 63
10041: PUSH
10042: LD_EXP 63
10046: PUSH
10047: LD_INT 1
10049: PLUS
10050: ST_TO_ADDR
// end ;
10051: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
10052: LD_EXP 58
10056: PUSH
10057: LD_EXP 59
10061: LESS
10062: IFFALSE 10202
10064: GO 10066
10066: DISABLE
10067: LD_INT 0
10069: PPUSH
10070: PPUSH
10071: PPUSH
10072: PPUSH
// begin enable ;
10073: ENABLE
// for i := 1 to apemanPos do
10074: LD_ADDR_VAR 0 1
10078: PUSH
10079: DOUBLE
10080: LD_INT 1
10082: DEC
10083: ST_TO_ADDR
10084: LD_EXP 61
10088: PUSH
10089: FOR_TO
10090: IFFALSE 10200
// begin if apemanPlayerCount [ i ] then
10092: LD_EXP 62
10096: PUSH
10097: LD_VAR 0 1
10101: ARRAY
10102: IFFALSE 10198
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
10104: LD_EXP 62
10108: PUSH
10109: LD_VAR 0 1
10113: ARRAY
10114: PUSH
10115: LD_EXP 61
10119: PUSH
10120: LD_VAR 0 1
10124: ARRAY
10125: GREATER
10126: IFFALSE 10198
// begin ape := PrepareApeman ;
10128: LD_ADDR_VAR 0 2
10132: PUSH
10133: CALL 10697 0 0
10137: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
10138: LD_VAR 0 2
10142: PPUSH
10143: LD_EXP 64
10147: PUSH
10148: LD_VAR 0 1
10152: ARRAY
10153: PPUSH
10154: LD_INT 0
10156: PPUSH
10157: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
10161: LD_ADDR_EXP 61
10165: PUSH
10166: LD_EXP 61
10170: PPUSH
10171: LD_VAR 0 1
10175: PPUSH
10176: LD_EXP 61
10180: PUSH
10181: LD_VAR 0 1
10185: ARRAY
10186: PUSH
10187: LD_VAR 0 2
10191: UNION
10192: PPUSH
10193: CALL_OW 1
10197: ST_TO_ADDR
// end ; end ; end ;
10198: GO 10089
10200: POP
10201: POP
// end ;
10202: PPOPN 4
10204: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
10205: LD_INT 0
10207: PPUSH
10208: PPUSH
10209: PPUSH
10210: PPUSH
10211: PPUSH
10212: PPUSH
10213: PPUSH
// playersAmount := 0 ;
10214: LD_ADDR_VAR 0 3
10218: PUSH
10219: LD_INT 0
10221: ST_TO_ADDR
// _apeAreas := [ Ar1Out3 , Ar2Out3 ] ;
10222: LD_ADDR_VAR 0 7
10226: PUSH
10227: LD_INT 24
10229: PUSH
10230: LD_INT 18
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10237: LD_ADDR_EXP 64
10241: PUSH
10242: LD_INT 0
10244: PUSH
10245: LD_INT 0
10247: PUSH
10248: LD_INT 0
10250: PUSH
10251: LD_INT 0
10253: PUSH
10254: LD_INT 0
10256: PUSH
10257: LD_INT 0
10259: PUSH
10260: LD_INT 0
10262: PUSH
10263: LD_INT 0
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: ST_TO_ADDR
// for j = 1 to Side_Positions do
10276: LD_ADDR_VAR 0 4
10280: PUSH
10281: DOUBLE
10282: LD_INT 1
10284: DEC
10285: ST_TO_ADDR
10286: LD_EXP 43
10290: PUSH
10291: FOR_TO
10292: IFFALSE 10359
// if Side_Positions [ j ] then
10294: LD_EXP 43
10298: PUSH
10299: LD_VAR 0 4
10303: ARRAY
10304: IFFALSE 10357
// begin playersAmount := playersAmount + 1 ;
10306: LD_ADDR_VAR 0 3
10310: PUSH
10311: LD_VAR 0 3
10315: PUSH
10316: LD_INT 1
10318: PLUS
10319: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
10320: LD_ADDR_EXP 64
10324: PUSH
10325: LD_EXP 64
10329: PPUSH
10330: LD_VAR 0 4
10334: PPUSH
10335: LD_VAR 0 7
10339: PUSH
10340: LD_EXP 43
10344: PUSH
10345: LD_VAR 0 4
10349: ARRAY
10350: ARRAY
10351: PPUSH
10352: CALL_OW 1
10356: ST_TO_ADDR
// end ;
10357: GO 10291
10359: POP
10360: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
10361: LD_ADDR_EXP 60
10365: PUSH
10366: LD_INT 3
10368: PUSH
10369: LD_EXP 37
10373: MUL
10374: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
10375: LD_ADDR_EXP 58
10379: PUSH
10380: LD_VAR 0 3
10384: PUSH
10385: LD_EXP 60
10389: MUL
10390: ST_TO_ADDR
// apemanLimit := apemanNumber ;
10391: LD_ADDR_EXP 59
10395: PUSH
10396: LD_EXP 58
10400: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10401: LD_ADDR_EXP 61
10405: PUSH
10406: LD_INT 0
10408: PUSH
10409: LD_INT 0
10411: PUSH
10412: LD_INT 0
10414: PUSH
10415: LD_INT 0
10417: PUSH
10418: LD_INT 0
10420: PUSH
10421: LD_INT 0
10423: PUSH
10424: LD_INT 0
10426: PUSH
10427: LD_INT 0
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10440: LD_ADDR_EXP 62
10444: PUSH
10445: LD_INT 0
10447: PUSH
10448: LD_INT 0
10450: PUSH
10451: LD_INT 0
10453: PUSH
10454: LD_INT 0
10456: PUSH
10457: LD_INT 0
10459: PUSH
10460: LD_INT 0
10462: PUSH
10463: LD_INT 0
10465: PUSH
10466: LD_INT 0
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: ST_TO_ADDR
// apeLevel := 1 ;
10479: LD_ADDR_EXP 63
10483: PUSH
10484: LD_INT 1
10486: ST_TO_ADDR
// if not apemanNumber then
10487: LD_EXP 58
10491: NOT
10492: IFFALSE 10496
// exit ;
10494: GO 10692
// for i := 1 to apemanPerPlayer do
10496: LD_ADDR_VAR 0 2
10500: PUSH
10501: DOUBLE
10502: LD_INT 1
10504: DEC
10505: ST_TO_ADDR
10506: LD_EXP 60
10510: PUSH
10511: FOR_TO
10512: IFFALSE 10690
// begin for j := 1 to Side_Positions do
10514: LD_ADDR_VAR 0 4
10518: PUSH
10519: DOUBLE
10520: LD_INT 1
10522: DEC
10523: ST_TO_ADDR
10524: LD_EXP 43
10528: PUSH
10529: FOR_TO
10530: IFFALSE 10686
// if Side_Positions [ j ] then
10532: LD_EXP 43
10536: PUSH
10537: LD_VAR 0 4
10541: ARRAY
10542: IFFALSE 10684
// begin pos := Side_Positions [ j ] ;
10544: LD_ADDR_VAR 0 6
10548: PUSH
10549: LD_EXP 43
10553: PUSH
10554: LD_VAR 0 4
10558: ARRAY
10559: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
10560: LD_ADDR_EXP 62
10564: PUSH
10565: LD_EXP 62
10569: PPUSH
10570: LD_VAR 0 4
10574: PPUSH
10575: LD_EXP 62
10579: PUSH
10580: LD_VAR 0 4
10584: ARRAY
10585: PUSH
10586: LD_INT 1
10588: PLUS
10589: PPUSH
10590: CALL_OW 1
10594: ST_TO_ADDR
// ape := PrepareApeman ;
10595: LD_ADDR_VAR 0 5
10599: PUSH
10600: CALL 10697 0 0
10604: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
10605: LD_ADDR_EXP 61
10609: PUSH
10610: LD_EXP 61
10614: PPUSH
10615: LD_VAR 0 4
10619: PPUSH
10620: LD_EXP 61
10624: PUSH
10625: LD_VAR 0 4
10629: ARRAY
10630: PPUSH
10631: LD_EXP 61
10635: PUSH
10636: LD_VAR 0 4
10640: ARRAY
10641: PUSH
10642: LD_INT 1
10644: PLUS
10645: PPUSH
10646: LD_VAR 0 5
10650: PPUSH
10651: CALL_OW 1
10655: PPUSH
10656: CALL_OW 1
10660: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
10661: LD_VAR 0 5
10665: PPUSH
10666: LD_EXP 64
10670: PUSH
10671: LD_VAR 0 4
10675: ARRAY
10676: PPUSH
10677: LD_INT 0
10679: PPUSH
10680: CALL_OW 49
// end ;
10684: GO 10529
10686: POP
10687: POP
// end ;
10688: GO 10511
10690: POP
10691: POP
// end ;
10692: LD_VAR 0 1
10696: RET
// export function PrepareApeman ; var bonus ; begin
10697: LD_INT 0
10699: PPUSH
10700: PPUSH
// uc_side := 0 ;
10701: LD_ADDR_OWVAR 20
10705: PUSH
10706: LD_INT 0
10708: ST_TO_ADDR
// uc_nation := 0 ;
10709: LD_ADDR_OWVAR 21
10713: PUSH
10714: LD_INT 0
10716: ST_TO_ADDR
// InitHc ;
10717: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
10721: LD_ADDR_VAR 0 2
10725: PUSH
10726: LD_INT 1
10728: NEG
10729: PUSH
10730: LD_INT 0
10732: PUSH
10733: LD_INT 1
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: PUSH
10741: LD_OWVAR 1
10745: PUSH
10746: LD_INT 3
10748: MOD
10749: PUSH
10750: LD_INT 1
10752: PLUS
10753: ARRAY
10754: ST_TO_ADDR
// hc_class := class_apeman ;
10755: LD_ADDR_OWVAR 28
10759: PUSH
10760: LD_INT 12
10762: ST_TO_ADDR
// hc_gallery :=  ;
10763: LD_ADDR_OWVAR 33
10767: PUSH
10768: LD_STRING 
10770: ST_TO_ADDR
// hc_name :=  ;
10771: LD_ADDR_OWVAR 26
10775: PUSH
10776: LD_STRING 
10778: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
10779: LD_ADDR_OWVAR 31
10783: PUSH
10784: LD_EXP 63
10788: PUSH
10789: LD_VAR 0 2
10793: PLUS
10794: PUSH
10795: LD_EXP 63
10799: PUSH
10800: LD_VAR 0 2
10804: PLUS
10805: PUSH
10806: LD_EXP 63
10810: PUSH
10811: LD_VAR 0 2
10815: PLUS
10816: PUSH
10817: LD_EXP 63
10821: PUSH
10822: LD_VAR 0 2
10826: PLUS
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
10834: LD_ADDR_OWVAR 35
10838: PUSH
10839: LD_INT 10
10841: PUSH
10842: LD_VAR 0 2
10846: MUL
10847: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
10848: LD_ADDR_OWVAR 29
10852: PUSH
10853: LD_INT 12
10855: PUSH
10856: LD_INT 10
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: ST_TO_ADDR
// result := CreateHuman ;
10863: LD_ADDR_VAR 0 1
10867: PUSH
10868: CALL_OW 44
10872: ST_TO_ADDR
// end ;
10873: LD_VAR 0 1
10877: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
10878: LD_INT 0
10880: PPUSH
10881: PPUSH
10882: PPUSH
// if not ape then
10883: LD_VAR 0 1
10887: NOT
10888: IFFALSE 10892
// exit ;
10890: GO 11017
// side := GetSide ( ape ) ;
10892: LD_ADDR_VAR 0 3
10896: PUSH
10897: LD_VAR 0 1
10901: PPUSH
10902: CALL_OW 255
10906: ST_TO_ADDR
// if not side then
10907: LD_VAR 0 3
10911: NOT
10912: IFFALSE 10966
// begin for i = 1 to apemanPos do
10914: LD_ADDR_VAR 0 4
10918: PUSH
10919: DOUBLE
10920: LD_INT 1
10922: DEC
10923: ST_TO_ADDR
10924: LD_EXP 61
10928: PUSH
10929: FOR_TO
10930: IFFALSE 10964
// if ape in apemanPos [ i ] then
10932: LD_VAR 0 1
10936: PUSH
10937: LD_EXP 61
10941: PUSH
10942: LD_VAR 0 4
10946: ARRAY
10947: IN
10948: IFFALSE 10962
// begin side := i ;
10950: LD_ADDR_VAR 0 3
10954: PUSH
10955: LD_VAR 0 4
10959: ST_TO_ADDR
// break ;
10960: GO 10964
// end ;
10962: GO 10929
10964: POP
10965: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
10966: LD_ADDR_EXP 61
10970: PUSH
10971: LD_EXP 61
10975: PPUSH
10976: LD_VAR 0 3
10980: PPUSH
10981: LD_EXP 61
10985: PUSH
10986: LD_VAR 0 3
10990: ARRAY
10991: PUSH
10992: LD_VAR 0 1
10996: DIFF
10997: PPUSH
10998: CALL_OW 1
11002: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
11003: LD_ADDR_EXP 58
11007: PUSH
11008: LD_EXP 58
11012: PUSH
11013: LD_INT 1
11015: MINUS
11016: ST_TO_ADDR
// end ; end_of_file
11017: LD_VAR 0 2
11021: RET
// var free , free1 , free2 , new1 , new2 , arr1 , arr2 , seenby1 , seenby2 ; function displ_status ; var s1 , s2 ; begin
11022: LD_INT 0
11024: PPUSH
11025: PPUSH
11026: PPUSH
// if not def_people_arrivals then
11027: LD_EXP 11
11031: NOT
11032: IFFALSE 11036
// exit ;
11034: GO 11177
// if def_people_loyality then
11036: LD_EXP 12
11040: IFFALSE 11156
// begin s1 := [ #Multi1x1-InfoL , Position_Sides [ 1 ] , ( free1 + 0 ) ] ;
11042: LD_ADDR_VAR 0 2
11046: PUSH
11047: LD_STRING #Multi1x1-InfoL
11049: PUSH
11050: LD_EXP 46
11054: PUSH
11055: LD_INT 1
11057: ARRAY
11058: PUSH
11059: LD_LOC 10
11063: PUSH
11064: LD_INT 0
11066: PLUS
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: LIST
11072: ST_TO_ADDR
// s2 := [ #Multi1x1-InfoL , Position_Sides [ 2 ] , ( free2 + 0 ) ] ;
11073: LD_ADDR_VAR 0 3
11077: PUSH
11078: LD_STRING #Multi1x1-InfoL
11080: PUSH
11081: LD_EXP 46
11085: PUSH
11086: LD_INT 2
11088: ARRAY
11089: PUSH
11090: LD_LOC 11
11094: PUSH
11095: LD_INT 0
11097: PLUS
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: LIST
11103: ST_TO_ADDR
// if Side_Positions [ your_side ] <> 2 then
11104: LD_EXP 43
11108: PUSH
11109: LD_OWVAR 2
11113: ARRAY
11114: PUSH
11115: LD_INT 2
11117: NONEQUAL
11118: IFFALSE 11138
// ExtraStrings := s1 ^ s2 else
11120: LD_ADDR_EXP 69
11124: PUSH
11125: LD_VAR 0 2
11129: PUSH
11130: LD_VAR 0 3
11134: ADD
11135: ST_TO_ADDR
11136: GO 11154
// ExtraStrings := s2 ^ s1 ;
11138: LD_ADDR_EXP 69
11142: PUSH
11143: LD_VAR 0 3
11147: PUSH
11148: LD_VAR 0 2
11152: ADD
11153: ST_TO_ADDR
// end else
11154: GO 11177
// begin ExtraStrings := [ #Multi1x1-InfoNonL , ( free + 0 ) ] ;
11156: LD_ADDR_EXP 69
11160: PUSH
11161: LD_STRING #Multi1x1-InfoNonL
11163: PUSH
11164: LD_LOC 9
11168: PUSH
11169: LD_INT 0
11171: PLUS
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: ST_TO_ADDR
// end ; end ;
11177: LD_VAR 0 1
11181: RET
// every 0 0$1 do
11182: GO 11184
11184: DISABLE
// begin if not text_info then
11185: LD_EXP 34
11189: NOT
11190: IFFALSE 11194
// exit ;
11192: GO 11199
// displ_status ;
11194: CALL 11022 0 0
// enable ;
11198: ENABLE
// end ;
11199: END
// export function prepare_arrivals ; var i , ar , p1 , p2 , pom1 , pom2 ; begin
11200: LD_INT 0
11202: PPUSH
11203: PPUSH
11204: PPUSH
11205: PPUSH
11206: PPUSH
11207: PPUSH
11208: PPUSH
// arr1 := [ ] ;
11209: LD_ADDR_LOC 14
11213: PUSH
11214: EMPTY
11215: ST_TO_ADDR
// arr2 := [ ] ;
11216: LD_ADDR_LOC 15
11220: PUSH
11221: EMPTY
11222: ST_TO_ADDR
// for i := 1 to max_arriving_times do
11223: LD_ADDR_VAR 0 2
11227: PUSH
11228: DOUBLE
11229: LD_INT 1
11231: DEC
11232: ST_TO_ADDR
11233: LD_EXP 33
11237: PUSH
11238: FOR_TO
11239: IFFALSE 11775
// begin case rand ( 1 , 100 ) of 1 .. 45 :
11241: LD_INT 1
11243: PPUSH
11244: LD_INT 100
11246: PPUSH
11247: CALL_OW 12
11251: PUSH
11252: LD_INT 1
11254: DOUBLE
11255: GREATEREQUAL
11256: IFFALSE 11264
11258: LD_INT 45
11260: DOUBLE
11261: LESSEQUAL
11262: IFTRUE 11266
11264: GO 11473
11266: POP
// case rand ( 1 , 100 ) of 1 .. 10 :
11267: LD_INT 1
11269: PPUSH
11270: LD_INT 100
11272: PPUSH
11273: CALL_OW 12
11277: PUSH
11278: LD_INT 1
11280: DOUBLE
11281: GREATEREQUAL
11282: IFFALSE 11290
11284: LD_INT 10
11286: DOUBLE
11287: LESSEQUAL
11288: IFTRUE 11292
11290: GO 11310
11292: POP
// ar := [ Ar1Base1 , Ar2Base1 ] ; 11 .. 20 :
11293: LD_ADDR_VAR 0 3
11297: PUSH
11298: LD_INT 19
11300: PUSH
11301: LD_INT 15
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: ST_TO_ADDR
11308: GO 11471
11310: LD_INT 11
11312: DOUBLE
11313: GREATEREQUAL
11314: IFFALSE 11322
11316: LD_INT 20
11318: DOUBLE
11319: LESSEQUAL
11320: IFTRUE 11324
11322: GO 11342
11324: POP
// ar := [ Ar1Base2 , Ar2Base2 ] ; 21 .. 30 :
11325: LD_ADDR_VAR 0 3
11329: PUSH
11330: LD_INT 20
11332: PUSH
11333: LD_INT 14
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: ST_TO_ADDR
11340: GO 11471
11342: LD_INT 21
11344: DOUBLE
11345: GREATEREQUAL
11346: IFFALSE 11354
11348: LD_INT 30
11350: DOUBLE
11351: LESSEQUAL
11352: IFTRUE 11356
11354: GO 11374
11356: POP
// ar := [ Ar1Between , Ar2Between ] ; 31 .. 55 :
11357: LD_ADDR_VAR 0 3
11361: PUSH
11362: LD_INT 22
11364: PUSH
11365: LD_INT 16
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: ST_TO_ADDR
11372: GO 11471
11374: LD_INT 31
11376: DOUBLE
11377: GREATEREQUAL
11378: IFFALSE 11386
11380: LD_INT 55
11382: DOUBLE
11383: LESSEQUAL
11384: IFTRUE 11388
11386: GO 11406
11388: POP
// ar := [ Ar1Out2 , Ar2Out2 ] ; 56 .. 80 :
11389: LD_ADDR_VAR 0 3
11393: PUSH
11394: LD_INT 23
11396: PUSH
11397: LD_INT 17
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: ST_TO_ADDR
11404: GO 11471
11406: LD_INT 56
11408: DOUBLE
11409: GREATEREQUAL
11410: IFFALSE 11418
11412: LD_INT 80
11414: DOUBLE
11415: LESSEQUAL
11416: IFTRUE 11420
11418: GO 11438
11420: POP
// ar := [ Ar1Out1 , Ar2Out1 ] ; 81 .. 100 :
11421: LD_ADDR_VAR 0 3
11425: PUSH
11426: LD_INT 21
11428: PUSH
11429: LD_INT 13
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: ST_TO_ADDR
11436: GO 11471
11438: LD_INT 81
11440: DOUBLE
11441: GREATEREQUAL
11442: IFFALSE 11450
11444: LD_INT 100
11446: DOUBLE
11447: LESSEQUAL
11448: IFTRUE 11452
11450: GO 11470
11452: POP
// ar := [ Ar1Out3 , Ar2Out3 ] ; end ; 46 .. 85 :
11453: LD_ADDR_VAR 0 3
11457: PUSH
11458: LD_INT 24
11460: PUSH
11461: LD_INT 18
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: ST_TO_ADDR
11468: GO 11471
11470: POP
11471: GO 11727
11473: LD_INT 46
11475: DOUBLE
11476: GREATEREQUAL
11477: IFFALSE 11485
11479: LD_INT 85
11481: DOUBLE
11482: LESSEQUAL
11483: IFTRUE 11487
11485: GO 11694
11487: POP
// case rand ( 1 , 100 ) of 1 .. 5 :
11488: LD_INT 1
11490: PPUSH
11491: LD_INT 100
11493: PPUSH
11494: CALL_OW 12
11498: PUSH
11499: LD_INT 1
11501: DOUBLE
11502: GREATEREQUAL
11503: IFFALSE 11511
11505: LD_INT 5
11507: DOUBLE
11508: LESSEQUAL
11509: IFTRUE 11513
11511: GO 11531
11513: POP
// ar := [ Ar2Base1 , Ar1Base1 ] ; 6 .. 15 :
11514: LD_ADDR_VAR 0 3
11518: PUSH
11519: LD_INT 15
11521: PUSH
11522: LD_INT 19
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: ST_TO_ADDR
11529: GO 11692
11531: LD_INT 6
11533: DOUBLE
11534: GREATEREQUAL
11535: IFFALSE 11543
11537: LD_INT 15
11539: DOUBLE
11540: LESSEQUAL
11541: IFTRUE 11545
11543: GO 11563
11545: POP
// ar := [ Ar2Base2 , Ar1Base2 ] ; 16 .. 30 :
11546: LD_ADDR_VAR 0 3
11550: PUSH
11551: LD_INT 14
11553: PUSH
11554: LD_INT 20
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: ST_TO_ADDR
11561: GO 11692
11563: LD_INT 16
11565: DOUBLE
11566: GREATEREQUAL
11567: IFFALSE 11575
11569: LD_INT 30
11571: DOUBLE
11572: LESSEQUAL
11573: IFTRUE 11577
11575: GO 11595
11577: POP
// ar := [ Ar2Between , Ar1Between ] ; 31 .. 50 :
11578: LD_ADDR_VAR 0 3
11582: PUSH
11583: LD_INT 16
11585: PUSH
11586: LD_INT 22
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: ST_TO_ADDR
11593: GO 11692
11595: LD_INT 31
11597: DOUBLE
11598: GREATEREQUAL
11599: IFFALSE 11607
11601: LD_INT 50
11603: DOUBLE
11604: LESSEQUAL
11605: IFTRUE 11609
11607: GO 11627
11609: POP
// ar := [ Ar2Out2 , Ar1Out2 ] ; 51 .. 75 :
11610: LD_ADDR_VAR 0 3
11614: PUSH
11615: LD_INT 17
11617: PUSH
11618: LD_INT 23
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: ST_TO_ADDR
11625: GO 11692
11627: LD_INT 51
11629: DOUBLE
11630: GREATEREQUAL
11631: IFFALSE 11639
11633: LD_INT 75
11635: DOUBLE
11636: LESSEQUAL
11637: IFTRUE 11641
11639: GO 11659
11641: POP
// ar := [ Ar2Out1 , Ar1Out1 ] ; 76 .. 100 :
11642: LD_ADDR_VAR 0 3
11646: PUSH
11647: LD_INT 13
11649: PUSH
11650: LD_INT 21
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: ST_TO_ADDR
11657: GO 11692
11659: LD_INT 76
11661: DOUBLE
11662: GREATEREQUAL
11663: IFFALSE 11671
11665: LD_INT 100
11667: DOUBLE
11668: LESSEQUAL
11669: IFTRUE 11673
11671: GO 11691
11673: POP
// ar := [ Ar2Out3 , Ar1Out3 ] ; end ; 86 .. 100 :
11674: LD_ADDR_VAR 0 3
11678: PUSH
11679: LD_INT 18
11681: PUSH
11682: LD_INT 24
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: ST_TO_ADDR
11689: GO 11692
11691: POP
11692: GO 11727
11694: LD_INT 86
11696: DOUBLE
11697: GREATEREQUAL
11698: IFFALSE 11706
11700: LD_INT 100
11702: DOUBLE
11703: LESSEQUAL
11704: IFTRUE 11708
11706: GO 11726
11708: POP
// ar := [ valley , valley ] ; end ;
11709: LD_ADDR_VAR 0 3
11713: PUSH
11714: LD_INT 12
11716: PUSH
11717: LD_INT 12
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: ST_TO_ADDR
11724: GO 11727
11726: POP
// arr1 := arr1 ^ [ ar [ 1 ] ] ;
11727: LD_ADDR_LOC 14
11731: PUSH
11732: LD_LOC 14
11736: PUSH
11737: LD_VAR 0 3
11741: PUSH
11742: LD_INT 1
11744: ARRAY
11745: PUSH
11746: EMPTY
11747: LIST
11748: ADD
11749: ST_TO_ADDR
// arr2 := arr2 ^ [ ar [ 2 ] ] ;
11750: LD_ADDR_LOC 15
11754: PUSH
11755: LD_LOC 15
11759: PUSH
11760: LD_VAR 0 3
11764: PUSH
11765: LD_INT 2
11767: ARRAY
11768: PUSH
11769: EMPTY
11770: LIST
11771: ADD
11772: ST_TO_ADDR
// end ;
11773: GO 11238
11775: POP
11776: POP
// for i := 1 to max_arriving_times div 2 do
11777: LD_ADDR_VAR 0 2
11781: PUSH
11782: DOUBLE
11783: LD_INT 1
11785: DEC
11786: ST_TO_ADDR
11787: LD_EXP 33
11791: PUSH
11792: LD_INT 2
11794: DIV
11795: PUSH
11796: FOR_TO
11797: IFFALSE 11909
// begin p1 := Rand ( 1 , max_arriving_times ) ;
11799: LD_ADDR_VAR 0 4
11803: PUSH
11804: LD_INT 1
11806: PPUSH
11807: LD_EXP 33
11811: PPUSH
11812: CALL_OW 12
11816: ST_TO_ADDR
// p2 := Rand ( 1 , max_arriving_times ) ;
11817: LD_ADDR_VAR 0 5
11821: PUSH
11822: LD_INT 1
11824: PPUSH
11825: LD_EXP 33
11829: PPUSH
11830: CALL_OW 12
11834: ST_TO_ADDR
// pom1 := arr2 [ p1 ] ;
11835: LD_ADDR_VAR 0 6
11839: PUSH
11840: LD_LOC 15
11844: PUSH
11845: LD_VAR 0 4
11849: ARRAY
11850: ST_TO_ADDR
// pom2 := arr2 [ p2 ] ;
11851: LD_ADDR_VAR 0 7
11855: PUSH
11856: LD_LOC 15
11860: PUSH
11861: LD_VAR 0 5
11865: ARRAY
11866: ST_TO_ADDR
// arr2 := Replace ( Replace ( arr2 , p2 , pom1 ) , p1 , pom2 ) ;
11867: LD_ADDR_LOC 15
11871: PUSH
11872: LD_LOC 15
11876: PPUSH
11877: LD_VAR 0 5
11881: PPUSH
11882: LD_VAR 0 6
11886: PPUSH
11887: CALL_OW 1
11891: PPUSH
11892: LD_VAR 0 4
11896: PPUSH
11897: LD_VAR 0 7
11901: PPUSH
11902: CALL_OW 1
11906: ST_TO_ADDR
// end ;
11907: GO 11796
11909: POP
11910: POP
// end ;
11911: LD_VAR 0 1
11915: RET
// every 0 0$1 do
11916: GO 11918
11918: DISABLE
// begin if not max_arriving_times then
11919: LD_EXP 33
11923: NOT
11924: IFFALSE 11928
// exit ;
11926: GO 12011
// if tick >= max_arriving_times [ 1 ] * 0 0$30 then
11928: LD_OWVAR 1
11932: PUSH
11933: LD_EXP 33
11937: PUSH
11938: LD_INT 1
11940: ARRAY
11941: PUSH
11942: LD_INT 1050
11944: MUL
11945: GREATEREQUAL
11946: IFFALSE 12010
// begin new1 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11948: LD_ADDR_LOC 12
11952: PUSH
11953: LD_INT 1
11955: PPUSH
11956: LD_EXP 33
11960: PUSH
11961: LD_INT 1050
11963: MUL
11964: PPUSH
11965: CALL_OW 12
11969: ST_TO_ADDR
// new2 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11970: LD_ADDR_LOC 13
11974: PUSH
11975: LD_INT 1
11977: PPUSH
11978: LD_EXP 33
11982: PUSH
11983: LD_INT 1050
11985: MUL
11986: PPUSH
11987: CALL_OW 12
11991: ST_TO_ADDR
// max_arriving_times := delete ( max_arriving_times , 1 ) ;
11992: LD_ADDR_EXP 33
11996: PUSH
11997: LD_EXP 33
12001: PPUSH
12002: LD_INT 1
12004: PPUSH
12005: CALL_OW 3
12009: ST_TO_ADDR
// end ; enable ;
12010: ENABLE
// end ;
12011: END
// function new_arrival ( pos ) ; var hum ; begin
12012: LD_INT 0
12014: PPUSH
12015: PPUSH
// if def_people_loyality then
12016: LD_EXP 12
12020: IFFALSE 12062
// begin uc_side := second_side [ pos ] ;
12022: LD_ADDR_OWVAR 20
12026: PUSH
12027: LD_EXP 47
12031: PUSH
12032: LD_VAR 0 1
12036: ARRAY
12037: ST_TO_ADDR
// uc_nation := Side_Nations [ positions [ pos ] ] ;
12038: LD_ADDR_OWVAR 21
12042: PUSH
12043: LD_EXP 44
12047: PUSH
12048: LD_EXP 39
12052: PUSH
12053: LD_VAR 0 1
12057: ARRAY
12058: ARRAY
12059: ST_TO_ADDR
// end else
12060: GO 12082
// begin uc_side := second_side ;
12062: LD_ADDR_OWVAR 20
12066: PUSH
12067: LD_EXP 47
12071: ST_TO_ADDR
// uc_nation := third_nation ;
12072: LD_ADDR_OWVAR 21
12076: PUSH
12077: LD_EXP 48
12081: ST_TO_ADDR
// end ; PrepareHuman ( 0 , 0 , initial_level + 1 ) ;
12082: LD_INT 0
12084: PPUSH
12085: LD_INT 0
12087: PPUSH
12088: LD_EXP 29
12092: PUSH
12093: LD_INT 1
12095: PLUS
12096: PPUSH
12097: CALL_OW 380
// hc_class := class_soldier ;
12101: LD_ADDR_OWVAR 28
12105: PUSH
12106: LD_INT 1
12108: ST_TO_ADDR
// hum := CreateHuman ;
12109: LD_ADDR_VAR 0 3
12113: PUSH
12114: CALL_OW 44
12118: ST_TO_ADDR
// if pos = 1 then
12119: LD_VAR 0 1
12123: PUSH
12124: LD_INT 1
12126: EQUAL
12127: IFFALSE 12170
// begin PlaceUnitArea ( hum , arr1 [ 1 ] , true ) ;
12129: LD_VAR 0 3
12133: PPUSH
12134: LD_LOC 14
12138: PUSH
12139: LD_INT 1
12141: ARRAY
12142: PPUSH
12143: LD_INT 1
12145: PPUSH
12146: CALL_OW 49
// arr1 := delete ( arr1 , 1 ) ;
12150: LD_ADDR_LOC 14
12154: PUSH
12155: LD_LOC 14
12159: PPUSH
12160: LD_INT 1
12162: PPUSH
12163: CALL_OW 3
12167: ST_TO_ADDR
// end else
12168: GO 12209
// begin PlaceUnitArea ( hum , arr2 [ 1 ] , true ) ;
12170: LD_VAR 0 3
12174: PPUSH
12175: LD_LOC 15
12179: PUSH
12180: LD_INT 1
12182: ARRAY
12183: PPUSH
12184: LD_INT 1
12186: PPUSH
12187: CALL_OW 49
// arr2 := delete ( arr2 , 1 ) ;
12191: LD_ADDR_LOC 15
12195: PUSH
12196: LD_LOC 15
12200: PPUSH
12201: LD_INT 1
12203: PPUSH
12204: CALL_OW 3
12208: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) until IsPlaced ( hum ) ;
12209: LD_INT 35
12211: PPUSH
12212: CALL_OW 67
12216: LD_VAR 0 3
12220: PPUSH
12221: CALL_OW 305
12225: IFFALSE 12209
// if def_people_loyality then
12227: LD_EXP 12
12231: IFFALSE 12291
// if pos = 1 then
12233: LD_VAR 0 1
12237: PUSH
12238: LD_INT 1
12240: EQUAL
12241: IFFALSE 12261
// free1 := free1 ^ hum else
12243: LD_ADDR_LOC 10
12247: PUSH
12248: LD_LOC 10
12252: PUSH
12253: LD_VAR 0 3
12257: ADD
12258: ST_TO_ADDR
12259: GO 12289
// if pos = 2 then
12261: LD_VAR 0 1
12265: PUSH
12266: LD_INT 2
12268: EQUAL
12269: IFFALSE 12289
// free2 := free2 ^ hum else
12271: LD_ADDR_LOC 11
12275: PUSH
12276: LD_LOC 11
12280: PUSH
12281: LD_VAR 0 3
12285: ADD
12286: ST_TO_ADDR
12287: GO 12289
// else
12289: GO 12307
// free := free ^ hum ;
12291: LD_ADDR_LOC 9
12295: PUSH
12296: LD_LOC 9
12300: PUSH
12301: LD_VAR 0 3
12305: ADD
12306: ST_TO_ADDR
// end ;
12307: LD_VAR 0 2
12311: RET
// every 0 0$0.5 trigger new1 do var d ;
12312: LD_LOC 12
12316: IFFALSE 12349
12318: GO 12320
12320: DISABLE
12321: LD_INT 0
12323: PPUSH
// begin enable ;
12324: ENABLE
// new1 := 0 ;
12325: LD_ADDR_LOC 12
12329: PUSH
12330: LD_INT 0
12332: ST_TO_ADDR
// wait ( d ) ;
12333: LD_VAR 0 1
12337: PPUSH
12338: CALL_OW 67
// new_arrival ( 1 ) ;
12342: LD_INT 1
12344: PPUSH
12345: CALL 12012 0 1
// end ;
12349: PPOPN 1
12351: END
// every 0 0$0.5 trigger new2 do var d ;
12352: LD_LOC 13
12356: IFFALSE 12389
12358: GO 12360
12360: DISABLE
12361: LD_INT 0
12363: PPUSH
// begin enable ;
12364: ENABLE
// new2 := 0 ;
12365: LD_ADDR_LOC 13
12369: PUSH
12370: LD_INT 0
12372: ST_TO_ADDR
// wait ( d ) ;
12373: LD_VAR 0 1
12377: PPUSH
12378: CALL_OW 67
// new_arrival ( 2 ) ;
12382: LD_INT 2
12384: PPUSH
12385: CALL 12012 0 1
// end ;
12389: PPOPN 1
12391: END
// function check_one_side ( un , side ) ; begin
12392: LD_INT 0
12394: PPUSH
// if FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , side ] , [ f_dist , un , 3 ] ] ) then
12395: LD_INT 21
12397: PUSH
12398: LD_INT 1
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: LD_INT 22
12407: PUSH
12408: LD_VAR 0 2
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: LD_INT 91
12419: PUSH
12420: LD_VAR 0 1
12424: PUSH
12425: LD_INT 3
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: LIST
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: LIST
12437: PPUSH
12438: CALL_OW 69
12442: IFFALSE 12456
// result := side else
12444: LD_ADDR_VAR 0 3
12448: PUSH
12449: LD_VAR 0 2
12453: ST_TO_ADDR
12454: GO 12464
// result := 0 ;
12456: LD_ADDR_VAR 0 3
12460: PUSH
12461: LD_INT 0
12463: ST_TO_ADDR
// end ;
12464: LD_VAR 0 3
12468: RET
// function check_two_sides ( un , side1 , side2 ) ; var un1 , s1 , s2 ; begin
12469: LD_INT 0
12471: PPUSH
12472: PPUSH
12473: PPUSH
12474: PPUSH
// s1 := 0 ;
12475: LD_ADDR_VAR 0 6
12479: PUSH
12480: LD_INT 0
12482: ST_TO_ADDR
// s2 := 0 ;
12483: LD_ADDR_VAR 0 7
12487: PUSH
12488: LD_INT 0
12490: ST_TO_ADDR
// for un1 in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_dist , un , 3 ] ] ) do
12491: LD_ADDR_VAR 0 5
12495: PUSH
12496: LD_INT 21
12498: PUSH
12499: LD_INT 1
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: LD_INT 91
12508: PUSH
12509: LD_VAR 0 1
12513: PUSH
12514: LD_INT 3
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: LIST
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PPUSH
12526: CALL_OW 69
12530: PUSH
12531: FOR_IN
12532: IFFALSE 12600
// begin if GetSide ( un1 ) = side1 then
12534: LD_VAR 0 5
12538: PPUSH
12539: CALL_OW 255
12543: PUSH
12544: LD_VAR 0 2
12548: EQUAL
12549: IFFALSE 12567
// s1 := s1 + 1 else
12551: LD_ADDR_VAR 0 6
12555: PUSH
12556: LD_VAR 0 6
12560: PUSH
12561: LD_INT 1
12563: PLUS
12564: ST_TO_ADDR
12565: GO 12598
// if GetSide ( un1 ) = side2 then
12567: LD_VAR 0 5
12571: PPUSH
12572: CALL_OW 255
12576: PUSH
12577: LD_VAR 0 3
12581: EQUAL
12582: IFFALSE 12598
// s2 := s2 + 1 ;
12584: LD_ADDR_VAR 0 7
12588: PUSH
12589: LD_VAR 0 7
12593: PUSH
12594: LD_INT 1
12596: PLUS
12597: ST_TO_ADDR
// end ;
12598: GO 12531
12600: POP
12601: POP
// if s1 = s2 then
12602: LD_VAR 0 6
12606: PUSH
12607: LD_VAR 0 7
12611: EQUAL
12612: IFFALSE 12624
// result := 0 else
12614: LD_ADDR_VAR 0 4
12618: PUSH
12619: LD_INT 0
12621: ST_TO_ADDR
12622: GO 12654
// if s1 > s2 then
12624: LD_VAR 0 6
12628: PUSH
12629: LD_VAR 0 7
12633: GREATER
12634: IFFALSE 12646
// result := 1 else
12636: LD_ADDR_VAR 0 4
12640: PUSH
12641: LD_INT 1
12643: ST_TO_ADDR
12644: GO 12654
// result := 2 ;
12646: LD_ADDR_VAR 0 4
12650: PUSH
12651: LD_INT 2
12653: ST_TO_ADDR
// end ;
12654: LD_VAR 0 4
12658: RET
// every 0 0$2 do var un ;
12659: GO 12661
12661: DISABLE
12662: LD_INT 0
12664: PPUSH
// begin if def_people_loyality then
12665: LD_EXP 12
12669: IFFALSE 13048
// if not fog_info then
12671: LD_EXP 35
12675: NOT
12676: IFFALSE 12864
// begin if your_side then
12678: LD_OWVAR 2
12682: IFFALSE 12862
// if side_positions [ your_side ] = 1 then
12684: LD_EXP 43
12688: PUSH
12689: LD_OWVAR 2
12693: ARRAY
12694: PUSH
12695: LD_INT 1
12697: EQUAL
12698: IFFALSE 12774
// begin un := UnitFilter ( free1 diff seenby1 , [ f_see , your_side ] ) ;
12700: LD_ADDR_VAR 0 1
12704: PUSH
12705: LD_LOC 10
12709: PUSH
12710: LD_LOC 16
12714: DIFF
12715: PPUSH
12716: LD_INT 101
12718: PUSH
12719: LD_OWVAR 2
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PPUSH
12728: CALL_OW 72
12732: ST_TO_ADDR
// if un then
12733: LD_VAR 0 1
12737: IFFALSE 12772
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12739: LD_VAR 0 1
12743: PUSH
12744: LD_INT 1
12746: ARRAY
12747: PPUSH
12748: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12752: LD_ADDR_LOC 16
12756: PUSH
12757: LD_LOC 16
12761: PUSH
12762: LD_VAR 0 1
12766: PUSH
12767: LD_INT 1
12769: ARRAY
12770: ADD
12771: ST_TO_ADDR
// end ; end else
12772: GO 12862
// if side_positions [ your_side ] = 2 then
12774: LD_EXP 43
12778: PUSH
12779: LD_OWVAR 2
12783: ARRAY
12784: PUSH
12785: LD_INT 2
12787: EQUAL
12788: IFFALSE 12862
// begin un := UnitFilter ( free2 diff seenby2 , [ f_see , your_side ] ) ;
12790: LD_ADDR_VAR 0 1
12794: PUSH
12795: LD_LOC 11
12799: PUSH
12800: LD_LOC 17
12804: DIFF
12805: PPUSH
12806: LD_INT 101
12808: PUSH
12809: LD_OWVAR 2
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PPUSH
12818: CALL_OW 72
12822: ST_TO_ADDR
// if un then
12823: LD_VAR 0 1
12827: IFFALSE 12862
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12829: LD_VAR 0 1
12833: PUSH
12834: LD_INT 1
12836: ARRAY
12837: PPUSH
12838: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
12842: LD_ADDR_LOC 17
12846: PUSH
12847: LD_LOC 17
12851: PUSH
12852: LD_VAR 0 1
12856: PUSH
12857: LD_INT 1
12859: ARRAY
12860: ADD
12861: ST_TO_ADDR
// end ; end ; end else
12862: GO 13048
// begin if your_side then
12864: LD_OWVAR 2
12868: IFFALSE 13048
// if side_positions [ your_side ] = 1 then
12870: LD_EXP 43
12874: PUSH
12875: LD_OWVAR 2
12879: ARRAY
12880: PUSH
12881: LD_INT 1
12883: EQUAL
12884: IFFALSE 12960
// begin un := UnitFilter ( free diff seenby1 , [ f_see , your_side ] ) ;
12886: LD_ADDR_VAR 0 1
12890: PUSH
12891: LD_LOC 9
12895: PUSH
12896: LD_LOC 16
12900: DIFF
12901: PPUSH
12902: LD_INT 101
12904: PUSH
12905: LD_OWVAR 2
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PPUSH
12914: CALL_OW 72
12918: ST_TO_ADDR
// if un then
12919: LD_VAR 0 1
12923: IFFALSE 12958
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12925: LD_VAR 0 1
12929: PUSH
12930: LD_INT 1
12932: ARRAY
12933: PPUSH
12934: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12938: LD_ADDR_LOC 16
12942: PUSH
12943: LD_LOC 16
12947: PUSH
12948: LD_VAR 0 1
12952: PUSH
12953: LD_INT 1
12955: ARRAY
12956: ADD
12957: ST_TO_ADDR
// end ; end else
12958: GO 13048
// if side_positions [ your_side ] = 2 then
12960: LD_EXP 43
12964: PUSH
12965: LD_OWVAR 2
12969: ARRAY
12970: PUSH
12971: LD_INT 2
12973: EQUAL
12974: IFFALSE 13048
// begin un := UnitFilter ( free diff seenby2 , [ f_see , your_side ] ) ;
12976: LD_ADDR_VAR 0 1
12980: PUSH
12981: LD_LOC 9
12985: PUSH
12986: LD_LOC 17
12990: DIFF
12991: PPUSH
12992: LD_INT 101
12994: PUSH
12995: LD_OWVAR 2
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: PPUSH
13004: CALL_OW 72
13008: ST_TO_ADDR
// if un then
13009: LD_VAR 0 1
13013: IFFALSE 13048
// begin CenterNowOnUnits ( un [ 1 ] ) ;
13015: LD_VAR 0 1
13019: PUSH
13020: LD_INT 1
13022: ARRAY
13023: PPUSH
13024: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
13028: LD_ADDR_LOC 17
13032: PUSH
13033: LD_LOC 17
13037: PUSH
13038: LD_VAR 0 1
13042: PUSH
13043: LD_INT 1
13045: ARRAY
13046: ADD
13047: ST_TO_ADDR
// end ; end ; end ; enable ;
13048: ENABLE
// end ;
13049: PPOPN 1
13051: END
// every 0 0$0.5 do var un , s ;
13052: GO 13054
13054: DISABLE
13055: LD_INT 0
13057: PPUSH
13058: PPUSH
// begin if def_people_loyality then
13059: LD_EXP 12
13063: IFFALSE 13269
// begin for un in free1 do
13065: LD_ADDR_VAR 0 1
13069: PUSH
13070: LD_LOC 10
13074: PUSH
13075: FOR_IN
13076: IFFALSE 13164
// if not IsLive ( un ) then
13078: LD_VAR 0 1
13082: PPUSH
13083: CALL_OW 300
13087: NOT
13088: IFFALSE 13108
// free1 := free1 diff un else
13090: LD_ADDR_LOC 10
13094: PUSH
13095: LD_LOC 10
13099: PUSH
13100: LD_VAR 0 1
13104: DIFF
13105: ST_TO_ADDR
13106: GO 13162
// if check_one_side ( un , positions [ 1 ] ) then
13108: LD_VAR 0 1
13112: PPUSH
13113: LD_EXP 39
13117: PUSH
13118: LD_INT 1
13120: ARRAY
13121: PPUSH
13122: CALL 12392 0 2
13126: IFFALSE 13162
// begin SetSide ( un , positions [ 1 ] ) ;
13128: LD_VAR 0 1
13132: PPUSH
13133: LD_EXP 39
13137: PUSH
13138: LD_INT 1
13140: ARRAY
13141: PPUSH
13142: CALL_OW 235
// free1 := free1 diff un ;
13146: LD_ADDR_LOC 10
13150: PUSH
13151: LD_LOC 10
13155: PUSH
13156: LD_VAR 0 1
13160: DIFF
13161: ST_TO_ADDR
// end ;
13162: GO 13075
13164: POP
13165: POP
// for un in free2 do
13166: LD_ADDR_VAR 0 1
13170: PUSH
13171: LD_LOC 11
13175: PUSH
13176: FOR_IN
13177: IFFALSE 13265
// if not IsLive ( un ) then
13179: LD_VAR 0 1
13183: PPUSH
13184: CALL_OW 300
13188: NOT
13189: IFFALSE 13209
// free2 := free2 diff un else
13191: LD_ADDR_LOC 11
13195: PUSH
13196: LD_LOC 11
13200: PUSH
13201: LD_VAR 0 1
13205: DIFF
13206: ST_TO_ADDR
13207: GO 13263
// if check_one_side ( un , positions [ 2 ] ) then
13209: LD_VAR 0 1
13213: PPUSH
13214: LD_EXP 39
13218: PUSH
13219: LD_INT 2
13221: ARRAY
13222: PPUSH
13223: CALL 12392 0 2
13227: IFFALSE 13263
// begin SetSide ( un , positions [ 2 ] ) ;
13229: LD_VAR 0 1
13233: PPUSH
13234: LD_EXP 39
13238: PUSH
13239: LD_INT 2
13241: ARRAY
13242: PPUSH
13243: CALL_OW 235
// free2 := free2 diff un ;
13247: LD_ADDR_LOC 11
13251: PUSH
13252: LD_LOC 11
13256: PUSH
13257: LD_VAR 0 1
13261: DIFF
13262: ST_TO_ADDR
// end ;
13263: GO 13176
13265: POP
13266: POP
// end else
13267: GO 13391
// begin for un in free do
13269: LD_ADDR_VAR 0 1
13273: PUSH
13274: LD_LOC 9
13278: PUSH
13279: FOR_IN
13280: IFFALSE 13389
// if not IsLive ( un ) then
13282: LD_VAR 0 1
13286: PPUSH
13287: CALL_OW 300
13291: NOT
13292: IFFALSE 13312
// free := free diff un else
13294: LD_ADDR_LOC 9
13298: PUSH
13299: LD_LOC 9
13303: PUSH
13304: LD_VAR 0 1
13308: DIFF
13309: ST_TO_ADDR
13310: GO 13387
// begin s := check_two_sides ( un , positions [ 1 ] , positions [ 2 ] ) ;
13312: LD_ADDR_VAR 0 2
13316: PUSH
13317: LD_VAR 0 1
13321: PPUSH
13322: LD_EXP 39
13326: PUSH
13327: LD_INT 1
13329: ARRAY
13330: PPUSH
13331: LD_EXP 39
13335: PUSH
13336: LD_INT 2
13338: ARRAY
13339: PPUSH
13340: CALL 12469 0 3
13344: ST_TO_ADDR
// if s then
13345: LD_VAR 0 2
13349: IFFALSE 13387
// begin SetSide ( un , positions [ s ] ) ;
13351: LD_VAR 0 1
13355: PPUSH
13356: LD_EXP 39
13360: PUSH
13361: LD_VAR 0 2
13365: ARRAY
13366: PPUSH
13367: CALL_OW 235
// free := free diff un ;
13371: LD_ADDR_LOC 9
13375: PUSH
13376: LD_LOC 9
13380: PUSH
13381: LD_VAR 0 1
13385: DIFF
13386: ST_TO_ADDR
// end ; end ;
13387: GO 13279
13389: POP
13390: POP
// end ; enable ;
13391: ENABLE
// end ; end_of_file
13392: PPOPN 2
13394: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
13395: LD_INT 0
13397: PPUSH
13398: PPUSH
13399: PPUSH
// enable ( 600 ) ;
13400: LD_INT 600
13402: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
13403: LD_ADDR_VAR 0 2
13407: PUSH
13408: DOUBLE
13409: LD_INT 1
13411: DEC
13412: ST_TO_ADDR
13413: LD_EXP 65
13417: PUSH
13418: FOR_TO
13419: IFFALSE 13574
// if Position_Sides [ i ] then
13421: LD_EXP 46
13425: PUSH
13426: LD_VAR 0 2
13430: ARRAY
13431: IFFALSE 13572
// for j := 1 to 8 do
13433: LD_ADDR_VAR 0 3
13437: PUSH
13438: DOUBLE
13439: LD_INT 1
13441: DEC
13442: ST_TO_ADDR
13443: LD_INT 8
13445: PUSH
13446: FOR_TO
13447: IFFALSE 13570
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13449: LD_EXP 43
13453: PUSH
13454: LD_VAR 0 3
13458: ARRAY
13459: PUSH
13460: LD_EXP 40
13464: PUSH
13465: LD_EXP 46
13469: PUSH
13470: LD_VAR 0 2
13474: ARRAY
13475: ARRAY
13476: PUSH
13477: LD_EXP 40
13481: PUSH
13482: LD_VAR 0 3
13486: ARRAY
13487: NONEQUAL
13488: PUSH
13489: LD_EXP 45
13493: NOT
13494: PUSH
13495: LD_EXP 46
13499: PUSH
13500: LD_VAR 0 2
13504: ARRAY
13505: PUSH
13506: LD_VAR 0 3
13510: NONEQUAL
13511: AND
13512: OR
13513: AND
13514: IFFALSE 13538
// HideArea ( j , BuildUpAreas [ i ] ) else
13516: LD_VAR 0 3
13520: PPUSH
13521: LD_EXP 65
13525: PUSH
13526: LD_VAR 0 2
13530: ARRAY
13531: PPUSH
13532: CALL_OW 333
13536: GO 13568
// if ( j = your_side ) then
13538: LD_VAR 0 3
13542: PUSH
13543: LD_OWVAR 2
13547: EQUAL
13548: IFFALSE 13568
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
13550: LD_EXP 65
13554: PUSH
13555: LD_VAR 0 2
13559: ARRAY
13560: PPUSH
13561: LD_INT 5
13563: PPUSH
13564: CALL_OW 424
13568: GO 13446
13570: POP
13571: POP
13572: GO 13418
13574: POP
13575: POP
// end ;
13576: LD_VAR 0 1
13580: RET
// export function EndBuildUp ; var i , j ; begin
13581: LD_INT 0
13583: PPUSH
13584: PPUSH
13585: PPUSH
// disable ( 600 ) ;
13586: LD_INT 600
13588: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
13589: LD_ADDR_VAR 0 2
13593: PUSH
13594: DOUBLE
13595: LD_INT 1
13597: DEC
13598: ST_TO_ADDR
13599: LD_EXP 65
13603: PUSH
13604: FOR_TO
13605: IFFALSE 13760
// if Position_Sides [ i ] then
13607: LD_EXP 46
13611: PUSH
13612: LD_VAR 0 2
13616: ARRAY
13617: IFFALSE 13758
// for j := 1 to 8 do
13619: LD_ADDR_VAR 0 3
13623: PUSH
13624: DOUBLE
13625: LD_INT 1
13627: DEC
13628: ST_TO_ADDR
13629: LD_INT 8
13631: PUSH
13632: FOR_TO
13633: IFFALSE 13756
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13635: LD_EXP 43
13639: PUSH
13640: LD_VAR 0 3
13644: ARRAY
13645: PUSH
13646: LD_EXP 40
13650: PUSH
13651: LD_EXP 46
13655: PUSH
13656: LD_VAR 0 2
13660: ARRAY
13661: ARRAY
13662: PUSH
13663: LD_EXP 40
13667: PUSH
13668: LD_VAR 0 3
13672: ARRAY
13673: NONEQUAL
13674: PUSH
13675: LD_EXP 45
13679: NOT
13680: PUSH
13681: LD_EXP 46
13685: PUSH
13686: LD_VAR 0 2
13690: ARRAY
13691: PUSH
13692: LD_VAR 0 3
13696: NONEQUAL
13697: AND
13698: OR
13699: AND
13700: IFFALSE 13724
// ShowArea ( j , BuildUpAreas [ i ] ) else
13702: LD_VAR 0 3
13706: PPUSH
13707: LD_EXP 65
13711: PUSH
13712: LD_VAR 0 2
13716: ARRAY
13717: PPUSH
13718: CALL_OW 334
13722: GO 13754
// if ( j = your_side ) then
13724: LD_VAR 0 3
13728: PUSH
13729: LD_OWVAR 2
13733: EQUAL
13734: IFFALSE 13754
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
13736: LD_EXP 65
13740: PUSH
13741: LD_VAR 0 2
13745: ARRAY
13746: PPUSH
13747: LD_INT 0
13749: PPUSH
13750: CALL_OW 424
13754: GO 13632
13756: POP
13757: POP
13758: GO 13604
13760: POP
13761: POP
// end ;
13762: LD_VAR 0 1
13766: RET
// every 5 marked 600 do var i , un ;
13767: GO 13769
13769: DISABLE
13770: LD_INT 0
13772: PPUSH
13773: PPUSH
// begin for i := 1 to BuildUpAreas do
13774: LD_ADDR_VAR 0 1
13778: PUSH
13779: DOUBLE
13780: LD_INT 1
13782: DEC
13783: ST_TO_ADDR
13784: LD_EXP 65
13788: PUSH
13789: FOR_TO
13790: IFFALSE 13945
// if Position_Sides [ i ] then
13792: LD_EXP 46
13796: PUSH
13797: LD_VAR 0 1
13801: ARRAY
13802: IFFALSE 13943
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13804: LD_ADDR_VAR 0 2
13808: PUSH
13809: LD_EXP 65
13813: PUSH
13814: LD_VAR 0 1
13818: ARRAY
13819: PPUSH
13820: LD_INT 2
13822: PUSH
13823: LD_INT 21
13825: PUSH
13826: LD_INT 1
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: PUSH
13833: LD_INT 21
13835: PUSH
13836: LD_INT 2
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 22
13850: PUSH
13851: LD_OWVAR 2
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PPUSH
13864: CALL_OW 70
13868: PUSH
13869: FOR_IN
13870: IFFALSE 13941
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
13872: LD_EXP 40
13876: PUSH
13877: LD_EXP 46
13881: PUSH
13882: LD_VAR 0 1
13886: ARRAY
13887: ARRAY
13888: PUSH
13889: LD_EXP 40
13893: PUSH
13894: LD_OWVAR 2
13898: ARRAY
13899: NONEQUAL
13900: PUSH
13901: LD_EXP 45
13905: NOT
13906: PUSH
13907: LD_EXP 46
13911: PUSH
13912: LD_VAR 0 1
13916: ARRAY
13917: PUSH
13918: LD_OWVAR 2
13922: NONEQUAL
13923: AND
13924: OR
13925: IFFALSE 13939
// ComMoveToArea ( un , BuildUpEscape ) ;
13927: LD_VAR 0 2
13931: PPUSH
13932: LD_INT 28
13934: PPUSH
13935: CALL_OW 113
13939: GO 13869
13941: POP
13942: POP
13943: GO 13789
13945: POP
13946: POP
// enable ;
13947: ENABLE
// end ;
13948: PPOPN 2
13950: END
// every 0 0$1 trigger def_builduptime do
13951: LD_EXP 17
13955: IFFALSE 13981
13957: GO 13959
13959: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
13960: LD_INT 8400
13962: PUSH
13963: LD_EXP 17
13967: PUSH
13968: LD_INT 2100
13970: MUL
13971: PLUS
13972: PPUSH
13973: CALL_OW 67
// EndBuildUp ;
13977: CALL 13581 0 0
// end ; end_of_file
13981: END
// export Game_Type , def_game_rules ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
13982: LD_INT 0
13984: PPUSH
13985: PPUSH
// if ( not IAmSpec ) then
13986: CALL_OW 531
13990: NOT
13991: IFFALSE 14007
// Result := Limits_Info ^  ;
13993: LD_ADDR_VAR 0 1
13997: PUSH
13998: LD_LOC 25
14002: PUSH
14003: LD_STRING 
14005: ADD
14006: ST_TO_ADDR
// for i := 1 to 8 do
14007: LD_ADDR_VAR 0 2
14011: PUSH
14012: DOUBLE
14013: LD_INT 1
14015: DEC
14016: ST_TO_ADDR
14017: LD_INT 8
14019: PUSH
14020: FOR_TO
14021: IFFALSE 14066
// if Cheaters [ i ] then
14023: LD_LOC 26
14027: PUSH
14028: LD_VAR 0 2
14032: ARRAY
14033: IFFALSE 14064
// Result := Result ^ [ #Cheater , i , i ] ;
14035: LD_ADDR_VAR 0 1
14039: PUSH
14040: LD_VAR 0 1
14044: PUSH
14045: LD_STRING #Cheater
14047: PUSH
14048: LD_VAR 0 2
14052: PUSH
14053: LD_VAR 0 2
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: LIST
14062: ADD
14063: ST_TO_ADDR
14064: GO 14020
14066: POP
14067: POP
// end ;
14068: LD_VAR 0 1
14072: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
14073: LD_INT 0
14075: PPUSH
14076: PPUSH
14077: PPUSH
14078: PPUSH
14079: PPUSH
// case Game_Type of 10 :
14080: LD_EXP 66
14084: PUSH
14085: LD_INT 10
14087: DOUBLE
14088: EQUAL
14089: IFTRUE 14093
14091: GO 14104
14093: POP
// def_game_rules := 1 ; 11 :
14094: LD_ADDR_EXP 67
14098: PUSH
14099: LD_INT 1
14101: ST_TO_ADDR
14102: GO 14124
14104: LD_INT 11
14106: DOUBLE
14107: EQUAL
14108: IFTRUE 14112
14110: GO 14123
14112: POP
// def_game_rules := 3 ; end ;
14113: LD_ADDR_EXP 67
14117: PUSH
14118: LD_INT 3
14120: ST_TO_ADDR
14121: GO 14124
14123: POP
// case def_game_rules of 0 :
14124: LD_EXP 67
14128: PUSH
14129: LD_INT 0
14131: DOUBLE
14132: EQUAL
14133: IFTRUE 14137
14135: GO 14142
14137: POP
// exit ; 1 :
14138: GO 14750
14140: GO 14650
14142: LD_INT 1
14144: DOUBLE
14145: EQUAL
14146: IFTRUE 14150
14148: GO 14382
14150: POP
// begin def_main_base = 1 ;
14151: LD_ADDR_EXP 1
14155: PUSH
14156: LD_INT 1
14158: ST_TO_ADDR
// def_secondary_base = 0 ;
14159: LD_ADDR_EXP 2
14163: PUSH
14164: LD_INT 0
14166: ST_TO_ADDR
// def_defence_level = 1 ;
14167: LD_ADDR_EXP 3
14171: PUSH
14172: LD_INT 1
14174: ST_TO_ADDR
// def_amount_of_people = 2 ;
14175: LD_ADDR_EXP 4
14179: PUSH
14180: LD_INT 2
14182: ST_TO_ADDR
// def_initial_level = 1 ;
14183: LD_ADDR_EXP 5
14187: PUSH
14188: LD_INT 1
14190: ST_TO_ADDR
// def_main_deposits = 2 ;
14191: LD_ADDR_EXP 6
14195: PUSH
14196: LD_INT 2
14198: ST_TO_ADDR
// def_secondary_deposits = 1 ;
14199: LD_ADDR_EXP 7
14203: PUSH
14204: LD_INT 1
14206: ST_TO_ADDR
// def_siberite_detection = 1 ;
14207: LD_ADDR_EXP 8
14211: PUSH
14212: LD_INT 1
14214: ST_TO_ADDR
// def_starting_resources = 2 ;
14215: LD_ADDR_EXP 9
14219: PUSH
14220: LD_INT 2
14222: ST_TO_ADDR
// def_shipments_density = 1 ;
14223: LD_ADDR_EXP 10
14227: PUSH
14228: LD_INT 1
14230: ST_TO_ADDR
// def_people_arrivals = 0 ;
14231: LD_ADDR_EXP 11
14235: PUSH
14236: LD_INT 0
14238: ST_TO_ADDR
// def_people_loyality = 0 ;
14239: LD_ADDR_EXP 12
14243: PUSH
14244: LD_INT 0
14246: ST_TO_ADDR
// def_people_info = 0 ;
14247: LD_ADDR_EXP 13
14251: PUSH
14252: LD_INT 0
14254: ST_TO_ADDR
// def_morale_flags = 1 ;
14255: LD_ADDR_EXP 14
14259: PUSH
14260: LD_INT 1
14262: ST_TO_ADDR
// def_siberite_bomb = 0 ;
14263: LD_ADDR_EXP 15
14267: PUSH
14268: LD_INT 0
14270: ST_TO_ADDR
// def_builduptime = 2 ;
14271: LD_ADDR_EXP 17
14275: PUSH
14276: LD_INT 2
14278: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
14279: LD_ADDR_VAR 0 2
14283: PUSH
14284: EMPTY
14285: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14286: LD_ADDR_VAR 0 3
14290: PUSH
14291: EMPTY
14292: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14293: LD_ADDR_LOC 20
14297: PUSH
14298: EMPTY
14299: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14300: LD_ADDR_LOC 21
14304: PUSH
14305: EMPTY
14306: ST_TO_ADDR
// Banned_Controls := [ ] ;
14307: LD_ADDR_LOC 22
14311: PUSH
14312: EMPTY
14313: ST_TO_ADDR
// Banned_Engines := [ ] ;
14314: LD_ADDR_LOC 23
14318: PUSH
14319: EMPTY
14320: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14321: LD_ADDR_LOC 18
14325: PUSH
14326: LD_INT 37
14328: PUSH
14329: EMPTY
14330: LIST
14331: PUSH
14332: LD_INT 4
14334: PUSH
14335: LD_INT 5
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: LD_INT 31
14344: PUSH
14345: LD_INT 32
14347: PUSH
14348: LD_INT 33
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: LIST
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: LIST
14360: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
14361: LD_ADDR_LOC 19
14365: PUSH
14366: LD_INT 2
14368: PUSH
14369: LD_INT 2
14371: PUSH
14372: LD_INT 4
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: ST_TO_ADDR
// end ; 3 :
14380: GO 14650
14382: LD_INT 3
14384: DOUBLE
14385: EQUAL
14386: IFTRUE 14390
14388: GO 14649
14390: POP
// begin def_main_base = 1 ;
14391: LD_ADDR_EXP 1
14395: PUSH
14396: LD_INT 1
14398: ST_TO_ADDR
// def_secondary_base = 0 ;
14399: LD_ADDR_EXP 2
14403: PUSH
14404: LD_INT 0
14406: ST_TO_ADDR
// def_defence_level = 0 ;
14407: LD_ADDR_EXP 3
14411: PUSH
14412: LD_INT 0
14414: ST_TO_ADDR
// def_amount_of_people = 2 ;
14415: LD_ADDR_EXP 4
14419: PUSH
14420: LD_INT 2
14422: ST_TO_ADDR
// def_initial_level = 3 ;
14423: LD_ADDR_EXP 5
14427: PUSH
14428: LD_INT 3
14430: ST_TO_ADDR
// def_main_deposits = 2 ;
14431: LD_ADDR_EXP 6
14435: PUSH
14436: LD_INT 2
14438: ST_TO_ADDR
// def_secondary_deposits = 1 ;
14439: LD_ADDR_EXP 7
14443: PUSH
14444: LD_INT 1
14446: ST_TO_ADDR
// def_siberite_detection = 1 ;
14447: LD_ADDR_EXP 8
14451: PUSH
14452: LD_INT 1
14454: ST_TO_ADDR
// def_starting_resources = 3 ;
14455: LD_ADDR_EXP 9
14459: PUSH
14460: LD_INT 3
14462: ST_TO_ADDR
// def_shipments_density = 1 ;
14463: LD_ADDR_EXP 10
14467: PUSH
14468: LD_INT 1
14470: ST_TO_ADDR
// def_people_arrivals = 0 ;
14471: LD_ADDR_EXP 11
14475: PUSH
14476: LD_INT 0
14478: ST_TO_ADDR
// def_people_loyality = 0 ;
14479: LD_ADDR_EXP 12
14483: PUSH
14484: LD_INT 0
14486: ST_TO_ADDR
// def_people_info = 0 ;
14487: LD_ADDR_EXP 13
14491: PUSH
14492: LD_INT 0
14494: ST_TO_ADDR
// def_morale_flags = 0 ;
14495: LD_ADDR_EXP 14
14499: PUSH
14500: LD_INT 0
14502: ST_TO_ADDR
// def_siberite_bomb = 0 ;
14503: LD_ADDR_EXP 15
14507: PUSH
14508: LD_INT 0
14510: ST_TO_ADDR
// def_builduptime = 1 ;
14511: LD_ADDR_EXP 17
14515: PUSH
14516: LD_INT 1
14518: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14519: LD_ADDR_VAR 0 2
14523: PUSH
14524: LD_INT 23
14526: PUSH
14527: EMPTY
14528: LIST
14529: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
14530: LD_ADDR_VAR 0 3
14534: PUSH
14535: LD_INT 2
14537: PUSH
14538: LD_INT 37
14540: PUSH
14541: LD_INT 32
14543: PUSH
14544: LD_INT 33
14546: PUSH
14547: LD_INT 36
14549: PUSH
14550: LD_INT 16
14552: PUSH
14553: LD_INT 23
14555: PUSH
14556: LD_INT 21
14558: PUSH
14559: LD_INT 18
14561: PUSH
14562: LD_INT 22
14564: PUSH
14565: LD_INT 20
14567: PUSH
14568: LD_INT 19
14570: PUSH
14571: LD_INT 25
14573: PUSH
14574: LD_INT 17
14576: PUSH
14577: LD_INT 24
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14597: LD_ADDR_LOC 20
14601: PUSH
14602: EMPTY
14603: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14604: LD_ADDR_LOC 21
14608: PUSH
14609: EMPTY
14610: ST_TO_ADDR
// Banned_Controls := [ ] ;
14611: LD_ADDR_LOC 22
14615: PUSH
14616: EMPTY
14617: ST_TO_ADDR
// Banned_Engines := [ ] ;
14618: LD_ADDR_LOC 23
14622: PUSH
14623: EMPTY
14624: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14625: LD_ADDR_LOC 18
14629: PUSH
14630: EMPTY
14631: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14632: LD_ADDR_LOC 19
14636: PUSH
14637: EMPTY
14638: ST_TO_ADDR
// No_Mechs := true ;
14639: LD_ADDR_EXP 68
14643: PUSH
14644: LD_INT 1
14646: ST_TO_ADDR
// end ; end ;
14647: GO 14650
14649: POP
// for i := 1 to 8 do
14650: LD_ADDR_VAR 0 4
14654: PUSH
14655: DOUBLE
14656: LD_INT 1
14658: DEC
14659: ST_TO_ADDR
14660: LD_INT 8
14662: PUSH
14663: FOR_TO
14664: IFFALSE 14748
// if Side_Positions [ i ] then
14666: LD_EXP 43
14670: PUSH
14671: LD_VAR 0 4
14675: ARRAY
14676: IFFALSE 14746
// begin for j in Unavailable_Techs do
14678: LD_ADDR_VAR 0 5
14682: PUSH
14683: LD_VAR 0 2
14687: PUSH
14688: FOR_IN
14689: IFFALSE 14710
// SetTech ( j , i , 0 ) ;
14691: LD_VAR 0 5
14695: PPUSH
14696: LD_VAR 0 4
14700: PPUSH
14701: LD_INT 0
14703: PPUSH
14704: CALL_OW 322
14708: GO 14688
14710: POP
14711: POP
// for j in Unavailable_Builds do
14712: LD_ADDR_VAR 0 5
14716: PUSH
14717: LD_VAR 0 3
14721: PUSH
14722: FOR_IN
14723: IFFALSE 14744
// SetRestrict ( j , i , 0 ) ;
14725: LD_VAR 0 5
14729: PPUSH
14730: LD_VAR 0 4
14734: PPUSH
14735: LD_INT 0
14737: PPUSH
14738: CALL_OW 324
14742: GO 14722
14744: POP
14745: POP
// end ;
14746: GO 14663
14748: POP
14749: POP
// end ;
14750: LD_VAR 0 1
14754: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
14755: LD_INT 0
14757: PPUSH
14758: PPUSH
14759: PPUSH
14760: PPUSH
14761: PPUSH
14762: PPUSH
14763: PPUSH
// for i := 1 to Restricted_Builds do
14764: LD_ADDR_VAR 0 2
14768: PUSH
14769: DOUBLE
14770: LD_INT 1
14772: DEC
14773: ST_TO_ADDR
14774: LD_LOC 18
14778: PUSH
14779: FOR_TO
14780: IFFALSE 15090
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
14782: LD_LOC 18
14786: PUSH
14787: LD_VAR 0 2
14791: ARRAY
14792: PUSH
14793: LD_INT 1
14795: ARRAY
14796: PUSH
14797: LD_INT 31
14799: DOUBLE
14800: EQUAL
14801: IFTRUE 14817
14803: LD_INT 32
14805: DOUBLE
14806: EQUAL
14807: IFTRUE 14817
14809: LD_INT 33
14811: DOUBLE
14812: EQUAL
14813: IFTRUE 14817
14815: GO 14828
14817: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
14818: LD_ADDR_VAR 0 6
14822: PUSH
14823: LD_STRING #Turrets
14825: ST_TO_ADDR
14826: GO 14873
14828: LD_INT 4
14830: DOUBLE
14831: EQUAL
14832: IFTRUE 14842
14834: LD_INT 5
14836: DOUBLE
14837: EQUAL
14838: IFTRUE 14842
14840: GO 14853
14842: POP
// btype := #Armouries ; b_Behemoth :
14843: LD_ADDR_VAR 0 6
14847: PUSH
14848: LD_STRING #Armouries
14850: ST_TO_ADDR
14851: GO 14873
14853: LD_INT 37
14855: DOUBLE
14856: EQUAL
14857: IFTRUE 14861
14859: GO 14872
14861: POP
// btype := #Behemoths ; end ;
14862: LD_ADDR_VAR 0 6
14866: PUSH
14867: LD_STRING #Behemoths
14869: ST_TO_ADDR
14870: GO 14873
14872: POP
// list := [ ] ;
14873: LD_ADDR_VAR 0 7
14877: PUSH
14878: EMPTY
14879: ST_TO_ADDR
// for j := 1 to 8 do
14880: LD_ADDR_VAR 0 3
14884: PUSH
14885: DOUBLE
14886: LD_INT 1
14888: DEC
14889: ST_TO_ADDR
14890: LD_INT 8
14892: PUSH
14893: FOR_TO
14894: IFFALSE 14987
// if Side_Positions [ j ] then
14896: LD_EXP 43
14900: PUSH
14901: LD_VAR 0 3
14905: ARRAY
14906: IFFALSE 14985
// begin amount := 0 ;
14908: LD_ADDR_VAR 0 5
14912: PUSH
14913: LD_INT 0
14915: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
14916: LD_ADDR_VAR 0 4
14920: PUSH
14921: LD_LOC 18
14925: PUSH
14926: LD_VAR 0 2
14930: ARRAY
14931: PUSH
14932: FOR_IN
14933: IFFALSE 14981
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
14935: LD_ADDR_VAR 0 5
14939: PUSH
14940: LD_VAR 0 5
14944: PUSH
14945: LD_INT 22
14947: PUSH
14948: LD_VAR 0 3
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 30
14959: PUSH
14960: LD_VAR 0 4
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PPUSH
14973: CALL_OW 69
14977: PLUS
14978: ST_TO_ADDR
14979: GO 14932
14981: POP
14982: POP
// break ;
14983: GO 14987
// end ;
14985: GO 14893
14987: POP
14988: POP
// list := [ ] ;
14989: LD_ADDR_VAR 0 7
14993: PUSH
14994: EMPTY
14995: ST_TO_ADDR
// for j := 1 to 8 do
14996: LD_ADDR_VAR 0 3
15000: PUSH
15001: DOUBLE
15002: LD_INT 1
15004: DEC
15005: ST_TO_ADDR
15006: LD_INT 8
15008: PUSH
15009: FOR_TO
15010: IFFALSE 15030
// list := list ^ amount ;
15012: LD_ADDR_VAR 0 7
15016: PUSH
15017: LD_VAR 0 7
15021: PUSH
15022: LD_VAR 0 5
15026: ADD
15027: ST_TO_ADDR
15028: GO 15009
15030: POP
15031: POP
// Already_Built := Already_Built ^ [ list ] ;
15032: LD_ADDR_LOC 24
15036: PUSH
15037: LD_LOC 24
15041: PUSH
15042: LD_VAR 0 7
15046: PUSH
15047: EMPTY
15048: LIST
15049: ADD
15050: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
15051: LD_ADDR_LOC 25
15055: PUSH
15056: LD_LOC 25
15060: PUSH
15061: LD_VAR 0 6
15065: PUSH
15066: LD_VAR 0 5
15070: PUSH
15071: LD_LOC 19
15075: PUSH
15076: LD_VAR 0 2
15080: ARRAY
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: LIST
15086: ADD
15087: ST_TO_ADDR
// end ;
15088: GO 14779
15090: POP
15091: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15092: LD_ADDR_LOC 26
15096: PUSH
15097: LD_INT 0
15099: PUSH
15100: LD_INT 0
15102: PUSH
15103: LD_INT 0
15105: PUSH
15106: LD_INT 0
15108: PUSH
15109: LD_INT 0
15111: PUSH
15112: LD_INT 0
15114: PUSH
15115: LD_INT 0
15117: PUSH
15118: LD_INT 0
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: ST_TO_ADDR
// if Limits_Info then
15131: LD_LOC 25
15135: IFFALSE 15151
// Limits_Info := #Limits ^ Limits_Info ;
15137: LD_ADDR_LOC 25
15141: PUSH
15142: LD_STRING #Limits
15144: PUSH
15145: LD_LOC 25
15149: ADD
15150: ST_TO_ADDR
// end ;
15151: LD_VAR 0 1
15155: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
15156: LD_INT 0
15158: PPUSH
15159: PPUSH
15160: PPUSH
15161: PPUSH
// for i := 1 to Restricted_Builds do
15162: LD_ADDR_VAR 0 7
15166: PUSH
15167: DOUBLE
15168: LD_INT 1
15170: DEC
15171: ST_TO_ADDR
15172: LD_LOC 18
15176: PUSH
15177: FOR_TO
15178: IFFALSE 15601
// if BType in Restricted_Builds [ i ] then
15180: LD_VAR 0 2
15184: PUSH
15185: LD_LOC 18
15189: PUSH
15190: LD_VAR 0 7
15194: ARRAY
15195: IN
15196: IFFALSE 15599
// begin if old_side then
15198: LD_VAR 0 4
15202: IFFALSE 15328
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
15204: LD_LOC 24
15208: PUSH
15209: LD_VAR 0 7
15213: ARRAY
15214: PUSH
15215: LD_VAR 0 3
15219: ARRAY
15220: PUSH
15221: LD_VAR 0 5
15225: PLUS
15226: PUSH
15227: LD_LOC 19
15231: PUSH
15232: LD_VAR 0 7
15236: ARRAY
15237: GREATER
15238: IFFALSE 15264
// begin SetSide ( un , old_side ) ;
15240: LD_VAR 0 1
15244: PPUSH
15245: LD_VAR 0 4
15249: PPUSH
15250: CALL_OW 235
// count := 0 ;
15254: LD_ADDR_VAR 0 5
15258: PUSH
15259: LD_INT 0
15261: ST_TO_ADDR
// end else
15262: GO 15328
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
15264: LD_ADDR_LOC 24
15268: PUSH
15269: LD_LOC 24
15273: PPUSH
15274: LD_VAR 0 7
15278: PPUSH
15279: LD_LOC 24
15283: PUSH
15284: LD_VAR 0 7
15288: ARRAY
15289: PPUSH
15290: LD_VAR 0 4
15294: PPUSH
15295: LD_LOC 24
15299: PUSH
15300: LD_VAR 0 7
15304: ARRAY
15305: PUSH
15306: LD_VAR 0 4
15310: ARRAY
15311: PUSH
15312: LD_VAR 0 5
15316: MINUS
15317: PPUSH
15318: CALL_OW 1
15322: PPUSH
15323: CALL_OW 1
15327: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
15328: LD_ADDR_LOC 24
15332: PUSH
15333: LD_LOC 24
15337: PPUSH
15338: LD_VAR 0 7
15342: PPUSH
15343: LD_LOC 24
15347: PUSH
15348: LD_VAR 0 7
15352: ARRAY
15353: PPUSH
15354: LD_VAR 0 3
15358: PPUSH
15359: LD_LOC 24
15363: PUSH
15364: LD_VAR 0 7
15368: ARRAY
15369: PUSH
15370: LD_VAR 0 3
15374: ARRAY
15375: PUSH
15376: LD_VAR 0 5
15380: PLUS
15381: PPUSH
15382: CALL_OW 1
15386: PPUSH
15387: CALL_OW 1
15391: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
15392: LD_VAR 0 5
15396: PUSH
15397: LD_INT 0
15399: NONEQUAL
15400: PUSH
15401: LD_VAR 0 3
15405: PUSH
15406: LD_OWVAR 2
15410: EQUAL
15411: AND
15412: IFFALSE 15455
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
15414: LD_ADDR_LOC 25
15418: PUSH
15419: LD_LOC 25
15423: PPUSH
15424: LD_INT 3
15426: PUSH
15427: LD_VAR 0 7
15431: MUL
15432: PPUSH
15433: LD_LOC 24
15437: PUSH
15438: LD_VAR 0 7
15442: ARRAY
15443: PUSH
15444: LD_VAR 0 3
15448: ARRAY
15449: PPUSH
15450: CALL_OW 1
15454: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
15455: LD_LOC 24
15459: PUSH
15460: LD_VAR 0 7
15464: ARRAY
15465: PUSH
15466: LD_VAR 0 3
15470: ARRAY
15471: PUSH
15472: LD_LOC 19
15476: PUSH
15477: LD_VAR 0 7
15481: ARRAY
15482: GREATER
15483: IFFALSE 15510
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
15485: LD_ADDR_LOC 26
15489: PUSH
15490: LD_LOC 26
15494: PPUSH
15495: LD_VAR 0 3
15499: PPUSH
15500: LD_INT 1
15502: PPUSH
15503: CALL_OW 1
15507: ST_TO_ADDR
// end else
15508: GO 15597
// begin for j := 1 to Restricted_Builds do
15510: LD_ADDR_VAR 0 8
15514: PUSH
15515: DOUBLE
15516: LD_INT 1
15518: DEC
15519: ST_TO_ADDR
15520: LD_LOC 18
15524: PUSH
15525: FOR_TO
15526: IFFALSE 15570
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
15528: LD_LOC 24
15532: PUSH
15533: LD_VAR 0 8
15537: ARRAY
15538: PUSH
15539: LD_VAR 0 3
15543: ARRAY
15544: PUSH
15545: LD_LOC 19
15549: PUSH
15550: LD_VAR 0 8
15554: ARRAY
15555: GREATER
15556: IFFALSE 15568
// begin Is_Cheater := true ;
15558: LD_ADDR_VAR 0 9
15562: PUSH
15563: LD_INT 1
15565: ST_TO_ADDR
// break ;
15566: GO 15570
// end ;
15568: GO 15525
15570: POP
15571: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
15572: LD_ADDR_LOC 26
15576: PUSH
15577: LD_LOC 26
15581: PPUSH
15582: LD_VAR 0 3
15586: PPUSH
15587: LD_VAR 0 9
15591: PPUSH
15592: CALL_OW 1
15596: ST_TO_ADDR
// end ; break ;
15597: GO 15601
// end ;
15599: GO 15177
15601: POP
15602: POP
// end ;
15603: LD_VAR 0 6
15607: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
15608: LD_VAR 0 5
15612: PUSH
15613: LD_LOC 20
15617: IN
15618: PUSH
15619: LD_VAR 0 2
15623: PUSH
15624: LD_LOC 21
15628: IN
15629: OR
15630: PUSH
15631: LD_VAR 0 4
15635: PUSH
15636: LD_LOC 22
15640: IN
15641: OR
15642: PUSH
15643: LD_VAR 0 3
15647: PUSH
15648: LD_LOC 23
15652: IN
15653: OR
15654: IFFALSE 15665
// ComCancel ( factory ) ;
15656: LD_VAR 0 1
15660: PPUSH
15661: CALL_OW 127
// end ;
15665: PPOPN 5
15667: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
15668: LD_VAR 0 2
15672: PUSH
15673: LD_LOC 20
15677: IN
15678: IFFALSE 15689
// ComCancel ( building ) ;
15680: LD_VAR 0 1
15684: PPUSH
15685: CALL_OW 127
// end ; end_of_file
15689: PPOPN 2
15691: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
15692: LD_INT 0
15694: PPUSH
15695: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
15696: LD_ADDR_VAR 0 2
15700: PUSH
15701: LD_STRING #Multi1x1-Time
15703: PUSH
15704: LD_OWVAR 1
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: ST_TO_ADDR
// if WaitServerStrings then
15713: LD_EXP 70
15717: IFFALSE 15735
// AllStrings = AllStrings ^ WaitServerStrings ;
15719: LD_ADDR_VAR 0 2
15723: PUSH
15724: LD_VAR 0 2
15728: PUSH
15729: LD_EXP 70
15733: ADD
15734: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
15735: LD_INT 0
15737: PUSH
15738: LD_EXP 38
15742: PUSH
15743: LD_OWVAR 1
15747: MINUS
15748: LESSEQUAL
15749: IFFALSE 15780
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
15751: LD_ADDR_VAR 0 2
15755: PUSH
15756: LD_VAR 0 2
15760: PUSH
15761: LD_STRING #allowedsibbomb
15763: PUSH
15764: LD_EXP 38
15768: PUSH
15769: LD_OWVAR 1
15773: MINUS
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: ADD
15779: ST_TO_ADDR
// if ( ExtraStrings ) then
15780: LD_EXP 69
15784: IFFALSE 15806
// AllStrings := AllStrings ^  ^ ExtraStrings ;
15786: LD_ADDR_VAR 0 2
15790: PUSH
15791: LD_VAR 0 2
15795: PUSH
15796: LD_STRING 
15798: ADD
15799: PUSH
15800: LD_EXP 69
15804: ADD
15805: ST_TO_ADDR
// if ( LimitsStrings ) then
15806: CALL 13982 0 0
15810: IFFALSE 15832
// AllStrings := AllStrings ^  ^ LimitsStrings ;
15812: LD_ADDR_VAR 0 2
15816: PUSH
15817: LD_VAR 0 2
15821: PUSH
15822: LD_STRING 
15824: ADD
15825: PUSH
15826: CALL 13982 0 0
15830: ADD
15831: ST_TO_ADDR
// Display_Strings := AllStrings ;
15832: LD_ADDR_OWVAR 47
15836: PUSH
15837: LD_VAR 0 2
15841: ST_TO_ADDR
// end ;
15842: LD_VAR 0 1
15846: RET
// every 0 0$1 do
15847: GO 15849
15849: DISABLE
// begin ShowTimer ;
15850: CALL 15692 0 0
// enable ;
15854: ENABLE
// end ; end_of_file
15855: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
15856: LD_INT 0
15858: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
15859: LD_VAR 0 1
15863: PPUSH
15864: CALL_OW 255
15868: PUSH
15869: LD_VAR 0 4
15873: EQUAL
15874: IFFALSE 15893
// begin SetAchievement ( ACH_RAD ) ;
15876: LD_STRING ACH_RAD
15878: PPUSH
15879: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
15883: LD_STRING ACH_NL
15885: PPUSH
15886: LD_INT 1
15888: PPUSH
15889: CALL_OW 564
// end end ;
15893: LD_VAR 0 5
15897: RET
// export function SA_Win ( side ) ; begin
15898: LD_INT 0
15900: PPUSH
// case side of 1 :
15901: LD_VAR 0 1
15905: PUSH
15906: LD_INT 1
15908: DOUBLE
15909: EQUAL
15910: IFTRUE 15914
15912: GO 15927
15914: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
15915: LD_STRING ACH_AH
15917: PPUSH
15918: LD_INT 1
15920: PPUSH
15921: CALL_OW 564
15925: GO 16090
15927: LD_INT 2
15929: DOUBLE
15930: EQUAL
15931: IFTRUE 15935
15933: GO 15948
15935: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
15936: LD_STRING ACH_E
15938: PPUSH
15939: LD_INT 1
15941: PPUSH
15942: CALL_OW 564
15946: GO 16090
15948: LD_INT 3
15950: DOUBLE
15951: EQUAL
15952: IFTRUE 15956
15954: GO 15969
15956: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
15957: LD_STRING ACH_OOL
15959: PPUSH
15960: LD_INT 1
15962: PPUSH
15963: CALL_OW 564
15967: GO 16090
15969: LD_INT 1
15971: PUSH
15972: LD_INT 2
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: DOUBLE
15979: EQUAL
15980: IFTRUE 15984
15982: GO 16009
15984: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
15985: LD_STRING ACH_AH
15987: PPUSH
15988: LD_REAL  5.00000000000000E-0001
15991: PPUSH
15992: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
15996: LD_STRING ACH_E
15998: PPUSH
15999: LD_REAL  5.00000000000000E-0001
16002: PPUSH
16003: CALL_OW 564
// end ; [ 2 , 3 ] :
16007: GO 16090
16009: LD_INT 2
16011: PUSH
16012: LD_INT 3
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: DOUBLE
16019: EQUAL
16020: IFTRUE 16024
16022: GO 16049
16024: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
16025: LD_STRING ACH_OOL
16027: PPUSH
16028: LD_REAL  5.00000000000000E-0001
16031: PPUSH
16032: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
16036: LD_STRING ACH_E
16038: PPUSH
16039: LD_REAL  5.00000000000000E-0001
16042: PPUSH
16043: CALL_OW 564
// end ; [ 3 , 1 ] :
16047: GO 16090
16049: LD_INT 3
16051: PUSH
16052: LD_INT 1
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: DOUBLE
16059: EQUAL
16060: IFTRUE 16064
16062: GO 16089
16064: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
16065: LD_STRING ACH_AH
16067: PPUSH
16068: LD_REAL  5.00000000000000E-0001
16071: PPUSH
16072: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
16076: LD_STRING ACH_OOL
16078: PPUSH
16079: LD_REAL  5.00000000000000E-0001
16082: PPUSH
16083: CALL_OW 564
// end ; end ;
16087: GO 16090
16089: POP
// end ; end_of_file
16090: LD_VAR 0 2
16094: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
16095: LD_INT 0
16097: PPUSH
16098: PPUSH
// enable ( 98 ) ;
16099: LD_INT 98
16101: ENABLE_MARKED
// GameEnded = false ;
16102: LD_ADDR_LOC 28
16106: PUSH
16107: LD_INT 0
16109: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16110: LD_ADDR_LOC 27
16114: PUSH
16115: LD_INT 0
16117: PUSH
16118: LD_INT 0
16120: PUSH
16121: LD_INT 0
16123: PUSH
16124: LD_INT 0
16126: PUSH
16127: LD_INT 0
16129: PUSH
16130: LD_INT 0
16132: PUSH
16133: LD_INT 0
16135: PUSH
16136: LD_INT 0
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: ST_TO_ADDR
// unfoged = false ;
16149: LD_ADDR_LOC 29
16153: PUSH
16154: LD_INT 0
16156: ST_TO_ADDR
// for i = 1 to side_positions do
16157: LD_ADDR_VAR 0 2
16161: PUSH
16162: DOUBLE
16163: LD_INT 1
16165: DEC
16166: ST_TO_ADDR
16167: LD_EXP 43
16171: PUSH
16172: FOR_TO
16173: IFFALSE 16213
// if not side_positions [ i ] then
16175: LD_EXP 43
16179: PUSH
16180: LD_VAR 0 2
16184: ARRAY
16185: NOT
16186: IFFALSE 16211
// defaited = replace ( defaited , i , true ) ;
16188: LD_ADDR_LOC 27
16192: PUSH
16193: LD_LOC 27
16197: PPUSH
16198: LD_VAR 0 2
16202: PPUSH
16203: LD_INT 1
16205: PPUSH
16206: CALL_OW 1
16210: ST_TO_ADDR
16211: GO 16172
16213: POP
16214: POP
// end ;
16215: LD_VAR 0 1
16219: RET
// function CanWinLoose ; begin
16220: LD_INT 0
16222: PPUSH
// Result := true ;
16223: LD_ADDR_VAR 0 1
16227: PUSH
16228: LD_INT 1
16230: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
16231: CALL_OW 518
16235: PUSH
16236: CALL_OW 519
16240: PUSH
16241: LD_INT 0
16243: GREATER
16244: AND
16245: IFFALSE 16255
// Result := false ;
16247: LD_ADDR_VAR 0 1
16251: PUSH
16252: LD_INT 0
16254: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
16255: CALL_OW 531
16259: PUSH
16260: CALL_OW 519
16264: PUSH
16265: LD_INT 1
16267: GREATER
16268: AND
16269: IFFALSE 16279
// Result := false ;
16271: LD_ADDR_VAR 0 1
16275: PUSH
16276: LD_INT 0
16278: ST_TO_ADDR
// end ;
16279: LD_VAR 0 1
16283: RET
// export function HasPower ( i ) ; var k , h ; begin
16284: LD_INT 0
16286: PPUSH
16287: PPUSH
16288: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
16289: LD_VAR 0 1
16293: PPUSH
16294: CALL_OW 108
16298: NOT
16299: PUSH
16300: LD_EXP 42
16304: PUSH
16305: LD_VAR 0 1
16309: ARRAY
16310: NOT
16311: AND
16312: PUSH
16313: LD_OWVAR 4
16317: AND
16318: IFFALSE 16330
// begin result = false ;
16320: LD_ADDR_VAR 0 2
16324: PUSH
16325: LD_INT 0
16327: ST_TO_ADDR
// end else
16328: GO 16625
// case def_win_rules of 0 :
16330: LD_EXP 18
16334: PUSH
16335: LD_INT 0
16337: DOUBLE
16338: EQUAL
16339: IFTRUE 16343
16341: GO 16506
16343: POP
// if def_people_respawning then
16344: LD_EXP 19
16348: IFFALSE 16439
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
16350: LD_ADDR_VAR 0 2
16354: PUSH
16355: LD_INT 22
16357: PUSH
16358: LD_VAR 0 1
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 2
16369: PUSH
16370: LD_INT 21
16372: PUSH
16373: LD_INT 1
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 33
16382: PUSH
16383: LD_INT 3
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 33
16392: PUSH
16393: LD_INT 5
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: LD_INT 30
16402: PUSH
16403: LD_INT 0
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PUSH
16410: LD_INT 30
16412: PUSH
16413: LD_INT 1
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PPUSH
16432: CALL_OW 69
16436: ST_TO_ADDR
16437: GO 16504
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
16439: LD_ADDR_VAR 0 2
16443: PUSH
16444: LD_INT 22
16446: PUSH
16447: LD_VAR 0 1
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 2
16458: PUSH
16459: LD_INT 21
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 33
16471: PUSH
16472: LD_INT 3
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 33
16481: PUSH
16482: LD_INT 5
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PPUSH
16499: CALL_OW 69
16503: ST_TO_ADDR
16504: GO 16625
16506: LD_INT 1
16508: DOUBLE
16509: EQUAL
16510: IFTRUE 16514
16512: GO 16553
16514: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
16515: LD_ADDR_VAR 0 2
16519: PUSH
16520: LD_INT 22
16522: PUSH
16523: LD_VAR 0 1
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 21
16534: PUSH
16535: LD_INT 1
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PPUSH
16546: CALL_OW 69
16550: ST_TO_ADDR
16551: GO 16625
16553: LD_INT 2
16555: DOUBLE
16556: EQUAL
16557: IFTRUE 16561
16559: GO 16624
16561: POP
// begin h = false ;
16562: LD_ADDR_VAR 0 4
16566: PUSH
16567: LD_INT 0
16569: ST_TO_ADDR
// for k in heroes [ i ] do
16570: LD_ADDR_VAR 0 3
16574: PUSH
16575: LD_EXP 57
16579: PUSH
16580: LD_VAR 0 1
16584: ARRAY
16585: PUSH
16586: FOR_IN
16587: IFFALSE 16610
// if IsLive ( k ) then
16589: LD_VAR 0 3
16593: PPUSH
16594: CALL_OW 300
16598: IFFALSE 16608
// h = true ;
16600: LD_ADDR_VAR 0 4
16604: PUSH
16605: LD_INT 1
16607: ST_TO_ADDR
16608: GO 16586
16610: POP
16611: POP
// Result := h ;
16612: LD_ADDR_VAR 0 2
16616: PUSH
16617: LD_VAR 0 4
16621: ST_TO_ADDR
// end ; end ;
16622: GO 16625
16624: POP
// end ;
16625: LD_VAR 0 2
16629: RET
// function AlliedSides ( i , j ) ; begin
16630: LD_INT 0
16632: PPUSH
// Result := false ;
16633: LD_ADDR_VAR 0 3
16637: PUSH
16638: LD_INT 0
16640: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
16641: LD_VAR 0 1
16645: PPUSH
16646: LD_VAR 0 2
16650: PPUSH
16651: CALL_OW 81
16655: PUSH
16656: LD_INT 1
16658: EQUAL
16659: PUSH
16660: LD_VAR 0 2
16664: PPUSH
16665: LD_VAR 0 1
16669: PPUSH
16670: CALL_OW 81
16674: PUSH
16675: LD_INT 1
16677: EQUAL
16678: AND
16679: PUSH
16680: LD_VAR 0 1
16684: PPUSH
16685: CALL_OW 83
16689: AND
16690: PUSH
16691: LD_VAR 0 2
16695: PPUSH
16696: CALL_OW 83
16700: AND
16701: IFFALSE 16711
// Result := true ;
16703: LD_ADDR_VAR 0 3
16707: PUSH
16708: LD_INT 1
16710: ST_TO_ADDR
// end ;
16711: LD_VAR 0 3
16715: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
16716: CALL 16220 0 0
16720: PUSH
16721: LD_LOC 28
16725: NOT
16726: AND
16727: IFFALSE 16743
16729: GO 16731
16731: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
16732: LD_ADDR_EXP 70
16736: PUSH
16737: LD_STRING #Player-Ended
16739: PUSH
16740: EMPTY
16741: LIST
16742: ST_TO_ADDR
16743: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
16744: CALL 16220 0 0
16748: PUSH
16749: LD_LOC 28
16753: AND
16754: IFFALSE 16763
16756: GO 16758
16758: DISABLE
// YouLostInMultiplayer ;
16759: CALL_OW 107
16763: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
16764: CALL 16220 0 0
16768: NOT
16769: PUSH
16770: CALL_OW 531
16774: NOT
16775: AND
16776: IFFALSE 16792
16778: GO 16780
16780: DISABLE
// WaitServerStrings = [ #server-wait ] ;
16781: LD_ADDR_EXP 70
16785: PUSH
16786: LD_STRING #server-wait
16788: PUSH
16789: EMPTY
16790: LIST
16791: ST_TO_ADDR
16792: END
// every 100 trigger IAmSpec do
16793: CALL_OW 531
16797: IFFALSE 16813
16799: GO 16801
16801: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
16802: LD_ADDR_EXP 70
16806: PUSH
16807: LD_STRING #Player-IAmSpec
16809: PUSH
16810: EMPTY
16811: LIST
16812: ST_TO_ADDR
16813: END
// every 100 trigger GameEnded and IAmSpec do
16814: LD_LOC 28
16818: PUSH
16819: CALL_OW 531
16823: AND
16824: IFFALSE 16833
16826: GO 16828
16828: DISABLE
// YouLostInMultiplayer ;
16829: CALL_OW 107
16833: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
16834: CALL 16220 0 0
16838: PUSH
16839: LD_LOC 28
16843: NOT
16844: AND
16845: IFFALSE 16861
16847: GO 16849
16849: DISABLE
// WaitServerStrings = [ $player-win ] ;
16850: LD_ADDR_EXP 70
16854: PUSH
16855: LD_STRING $player-win
16857: PUSH
16858: EMPTY
16859: LIST
16860: ST_TO_ADDR
16861: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
16862: CALL 16220 0 0
16866: PUSH
16867: LD_LOC 28
16871: AND
16872: IFFALSE 16896
16874: GO 16876
16876: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
16877: LD_EXP 44
16881: PUSH
16882: LD_OWVAR 2
16886: ARRAY
16887: PPUSH
16888: CALL 15898 0 1
// YouWinInMultiplayer ;
16892: CALL_OW 106
// end ;
16896: END
// every 100 trigger isEditor marked 401 do
16897: LD_OWVAR 84
16901: IFFALSE 16917
16903: GO 16905
16905: DISABLE
// Debug_Strings = [ You won ] ;
16906: LD_ADDR_OWVAR 48
16910: PUSH
16911: LD_STRING You won
16913: PUSH
16914: EMPTY
16915: LIST
16916: ST_TO_ADDR
16917: END
// every 100 trigger isEditor marked 400 do
16918: LD_OWVAR 84
16922: IFFALSE 16938
16924: GO 16926
16926: DISABLE
// Debug_Strings = [ You loss ] ;
16927: LD_ADDR_OWVAR 48
16931: PUSH
16932: LD_STRING You loss
16934: PUSH
16935: EMPTY
16936: LIST
16937: ST_TO_ADDR
16938: END
// every 100 marked 98 do var i , un ;
16939: GO 16941
16941: DISABLE
16942: LD_INT 0
16944: PPUSH
16945: PPUSH
// begin for i = 1 to side_positions do
16946: LD_ADDR_VAR 0 1
16950: PUSH
16951: DOUBLE
16952: LD_INT 1
16954: DEC
16955: ST_TO_ADDR
16956: LD_EXP 43
16960: PUSH
16961: FOR_TO
16962: IFFALSE 17085
// if side_positions [ i ] then
16964: LD_EXP 43
16968: PUSH
16969: LD_VAR 0 1
16973: ARRAY
16974: IFFALSE 17083
// if not HasPower ( i ) and not Defaited [ i ] then
16976: LD_VAR 0 1
16980: PPUSH
16981: CALL 16284 0 1
16985: NOT
16986: PUSH
16987: LD_LOC 27
16991: PUSH
16992: LD_VAR 0 1
16996: ARRAY
16997: NOT
16998: AND
16999: IFFALSE 17083
// begin un = filterallunits ( [ f_side , i ] ) ;
17001: LD_ADDR_VAR 0 2
17005: PUSH
17006: LD_INT 22
17008: PUSH
17009: LD_VAR 0 1
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PPUSH
17018: CALL_OW 69
17022: ST_TO_ADDR
// if un then
17023: LD_VAR 0 2
17027: IFFALSE 17041
// SetSide ( un , 0 ) ;
17029: LD_VAR 0 2
17033: PPUSH
17034: LD_INT 0
17036: PPUSH
17037: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
17041: LD_ADDR_LOC 27
17045: PUSH
17046: LD_LOC 27
17050: PPUSH
17051: LD_VAR 0 1
17055: PPUSH
17056: LD_INT 1
17058: PPUSH
17059: CALL_OW 1
17063: ST_TO_ADDR
// if i = your_side then
17064: LD_VAR 0 1
17068: PUSH
17069: LD_OWVAR 2
17073: EQUAL
17074: IFFALSE 17083
// begin Multiplayer_Loose_Message ;
17076: CALL_OW 521
// enable ( 400 ) ;
17080: LD_INT 400
17082: ENABLE_MARKED
// end ; end ;
17083: GO 16961
17085: POP
17086: POP
// if not Unfoged and defaited [ your_side ] then
17087: LD_LOC 29
17091: NOT
17092: PUSH
17093: LD_LOC 27
17097: PUSH
17098: LD_OWVAR 2
17102: ARRAY
17103: AND
17104: IFFALSE 17110
// Unfog ;
17106: CALL 17296 0 0
// DidGameEnd ;
17110: CALL 17125 0 0
// if not GameEnded then
17114: LD_LOC 28
17118: NOT
17119: IFFALSE 17122
// enable ;
17121: ENABLE
// end ;
17122: PPOPN 2
17124: END
// function DidGameEnd ; var i , k , enemy ; begin
17125: LD_INT 0
17127: PPUSH
17128: PPUSH
17129: PPUSH
17130: PPUSH
// enemy = [ ] ;
17131: LD_ADDR_VAR 0 4
17135: PUSH
17136: EMPTY
17137: ST_TO_ADDR
// for i = 1 to side_positions do
17138: LD_ADDR_VAR 0 2
17142: PUSH
17143: DOUBLE
17144: LD_INT 1
17146: DEC
17147: ST_TO_ADDR
17148: LD_EXP 43
17152: PUSH
17153: FOR_TO
17154: IFFALSE 17258
// if not defaited [ i ] then
17156: LD_LOC 27
17160: PUSH
17161: LD_VAR 0 2
17165: ARRAY
17166: NOT
17167: IFFALSE 17256
// for k = 1 to side_positions do
17169: LD_ADDR_VAR 0 3
17173: PUSH
17174: DOUBLE
17175: LD_INT 1
17177: DEC
17178: ST_TO_ADDR
17179: LD_EXP 43
17183: PUSH
17184: FOR_TO
17185: IFFALSE 17254
// if not defaited [ k ] then
17187: LD_LOC 27
17191: PUSH
17192: LD_VAR 0 3
17196: ARRAY
17197: NOT
17198: IFFALSE 17252
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
17200: LD_VAR 0 2
17204: PPUSH
17205: LD_VAR 0 3
17209: PPUSH
17210: CALL_OW 81
17214: PUSH
17215: LD_INT 2
17217: PUSH
17218: LD_INT 0
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: IN
17225: IFFALSE 17252
// enemy = enemy ^ [ i , k ] ;
17227: LD_ADDR_VAR 0 4
17231: PUSH
17232: LD_VAR 0 4
17236: PUSH
17237: LD_VAR 0 2
17241: PUSH
17242: LD_VAR 0 3
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: ADD
17251: ST_TO_ADDR
17252: GO 17184
17254: POP
17255: POP
17256: GO 17153
17258: POP
17259: POP
// if not enemy then
17260: LD_VAR 0 4
17264: NOT
17265: IFFALSE 17291
// begin GameEnded = true ;
17267: LD_ADDR_LOC 28
17271: PUSH
17272: LD_INT 1
17274: ST_TO_ADDR
// if not defaited [ your_side ] then
17275: LD_LOC 27
17279: PUSH
17280: LD_OWVAR 2
17284: ARRAY
17285: NOT
17286: IFFALSE 17291
// enable ( 401 ) ;
17288: LD_INT 401
17290: ENABLE_MARKED
// end ; end ;
17291: LD_VAR 0 1
17295: RET
// function unfog ; var k , friends ; begin
17296: LD_INT 0
17298: PPUSH
17299: PPUSH
17300: PPUSH
// for k = 1 to side_positions do
17301: LD_ADDR_VAR 0 2
17305: PUSH
17306: DOUBLE
17307: LD_INT 1
17309: DEC
17310: ST_TO_ADDR
17311: LD_EXP 43
17315: PUSH
17316: FOR_TO
17317: IFFALSE 17373
// if not defaited [ k ] then
17319: LD_LOC 27
17323: PUSH
17324: LD_VAR 0 2
17328: ARRAY
17329: NOT
17330: IFFALSE 17371
// if GetAttitude ( your_side , k ) in [ att_friend ] then
17332: LD_OWVAR 2
17336: PPUSH
17337: LD_VAR 0 2
17341: PPUSH
17342: CALL_OW 81
17346: PUSH
17347: LD_INT 1
17349: PUSH
17350: EMPTY
17351: LIST
17352: IN
17353: IFFALSE 17371
// friends = friends ^ k ;
17355: LD_ADDR_VAR 0 3
17359: PUSH
17360: LD_VAR 0 3
17364: PUSH
17365: LD_VAR 0 2
17369: ADD
17370: ST_TO_ADDR
17371: GO 17316
17373: POP
17374: POP
// if not friends then
17375: LD_VAR 0 3
17379: NOT
17380: IFFALSE 17397
// begin fogoff ( true ) ;
17382: LD_INT 1
17384: PPUSH
17385: CALL_OW 344
// unfoged = true ;
17389: LD_ADDR_LOC 29
17393: PUSH
17394: LD_INT 1
17396: ST_TO_ADDR
// end ; end ;
17397: LD_VAR 0 1
17401: RET
// export function MakeGameEnd ; begin
17402: LD_INT 0
17404: PPUSH
// fogoff ( true ) ;
17405: LD_INT 1
17407: PPUSH
17408: CALL_OW 344
// unfoged = true ;
17412: LD_ADDR_LOC 29
17416: PUSH
17417: LD_INT 1
17419: ST_TO_ADDR
// wait ( 0 0$5 ) ;
17420: LD_INT 175
17422: PPUSH
17423: CALL_OW 67
// GameEnded = true ;
17427: LD_ADDR_LOC 28
17431: PUSH
17432: LD_INT 1
17434: ST_TO_ADDR
// end ;
17435: LD_VAR 0 1
17439: RET
// export function GetGameEnded ; begin
17440: LD_INT 0
17442: PPUSH
// result = GameEnded ;
17443: LD_ADDR_VAR 0 1
17447: PUSH
17448: LD_LOC 28
17452: ST_TO_ADDR
// end ; end_of_file
17453: LD_VAR 0 1
17457: RET
// export function SetMpTechs ( ) ; var side , i ; begin
17458: LD_INT 0
17460: PPUSH
17461: PPUSH
17462: PPUSH
// for side = 1 to 8 do
17463: LD_ADDR_VAR 0 2
17467: PUSH
17468: DOUBLE
17469: LD_INT 1
17471: DEC
17472: ST_TO_ADDR
17473: LD_INT 8
17475: PUSH
17476: FOR_TO
17477: IFFALSE 17598
// begin for i = 1 to 72 do
17479: LD_ADDR_VAR 0 3
17483: PUSH
17484: DOUBLE
17485: LD_INT 1
17487: DEC
17488: ST_TO_ADDR
17489: LD_INT 72
17491: PUSH
17492: FOR_TO
17493: IFFALSE 17524
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
17495: LD_VAR 0 3
17499: PPUSH
17500: LD_VAR 0 2
17504: PPUSH
17505: LD_INT 0
17507: PPUSH
17508: LD_VAR 0 3
17512: PPUSH
17513: CALL_OW 565
17517: PPUSH
17518: CALL_OW 322
17522: GO 17492
17524: POP
17525: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
17526: LD_INT 73
17528: PPUSH
17529: LD_VAR 0 2
17533: PPUSH
17534: LD_INT 0
17536: PPUSH
17537: LD_INT 25
17539: PPUSH
17540: CALL_OW 565
17544: PPUSH
17545: CALL_OW 322
// for i = 0 to 40 do
17549: LD_ADDR_VAR 0 3
17553: PUSH
17554: DOUBLE
17555: LD_INT 0
17557: DEC
17558: ST_TO_ADDR
17559: LD_INT 40
17561: PUSH
17562: FOR_TO
17563: IFFALSE 17594
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
17565: LD_VAR 0 3
17569: PPUSH
17570: LD_VAR 0 2
17574: PPUSH
17575: LD_INT 1
17577: PPUSH
17578: LD_VAR 0 3
17582: PPUSH
17583: CALL_OW 565
17587: PPUSH
17588: CALL_OW 324
17592: GO 17562
17594: POP
17595: POP
// end ;
17596: GO 17476
17598: POP
17599: POP
// end ;
17600: LD_VAR 0 1
17604: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
17605: LD_INT 0
17607: PPUSH
17608: PPUSH
17609: PPUSH
// for side = 1 to 8 do
17610: LD_ADDR_VAR 0 3
17614: PUSH
17615: DOUBLE
17616: LD_INT 1
17618: DEC
17619: ST_TO_ADDR
17620: LD_INT 8
17622: PUSH
17623: FOR_TO
17624: IFFALSE 21620
// begin for i = 1 to 73 do
17626: LD_ADDR_VAR 0 4
17630: PUSH
17631: DOUBLE
17632: LD_INT 1
17634: DEC
17635: ST_TO_ADDR
17636: LD_INT 73
17638: PUSH
17639: FOR_TO
17640: IFFALSE 17661
// SetTech ( i , side , state_disabled ) ;
17642: LD_VAR 0 4
17646: PPUSH
17647: LD_VAR 0 3
17651: PPUSH
17652: LD_INT 0
17654: PPUSH
17655: CALL_OW 322
17659: GO 17639
17661: POP
17662: POP
// for i = 0 to 40 do
17663: LD_ADDR_VAR 0 4
17667: PUSH
17668: DOUBLE
17669: LD_INT 0
17671: DEC
17672: ST_TO_ADDR
17673: LD_INT 40
17675: PUSH
17676: FOR_TO
17677: IFFALSE 17698
// SetRestrict ( i , side , false ) ;
17679: LD_VAR 0 4
17683: PPUSH
17684: LD_VAR 0 3
17688: PPUSH
17689: LD_INT 0
17691: PPUSH
17692: CALL_OW 324
17696: GO 17676
17698: POP
17699: POP
// case level of 1 :
17700: LD_VAR 0 1
17704: PUSH
17705: LD_INT 1
17707: DOUBLE
17708: EQUAL
17709: IFTRUE 17713
17711: GO 17866
17713: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17714: LD_INT 35
17716: PPUSH
17717: LD_VAR 0 3
17721: PPUSH
17722: LD_INT 1
17724: PPUSH
17725: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17729: LD_INT 45
17731: PPUSH
17732: LD_VAR 0 3
17736: PPUSH
17737: LD_INT 1
17739: PPUSH
17740: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17744: LD_INT 46
17746: PPUSH
17747: LD_VAR 0 3
17751: PPUSH
17752: LD_INT 1
17754: PPUSH
17755: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17759: LD_INT 47
17761: PPUSH
17762: LD_VAR 0 3
17766: PPUSH
17767: LD_INT 1
17769: PPUSH
17770: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17774: LD_INT 0
17776: PPUSH
17777: LD_VAR 0 3
17781: PPUSH
17782: LD_INT 1
17784: PPUSH
17785: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17789: LD_INT 2
17791: PPUSH
17792: LD_VAR 0 3
17796: PPUSH
17797: LD_INT 1
17799: PPUSH
17800: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17804: LD_INT 4
17806: PPUSH
17807: LD_VAR 0 3
17811: PPUSH
17812: LD_INT 1
17814: PPUSH
17815: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17819: LD_INT 6
17821: PPUSH
17822: LD_VAR 0 3
17826: PPUSH
17827: LD_INT 1
17829: PPUSH
17830: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17834: LD_INT 29
17836: PPUSH
17837: LD_VAR 0 3
17841: PPUSH
17842: LD_INT 1
17844: PPUSH
17845: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17849: LD_INT 31
17851: PPUSH
17852: LD_VAR 0 3
17856: PPUSH
17857: LD_INT 1
17859: PPUSH
17860: CALL_OW 324
// end ; 2 :
17864: GO 21618
17866: LD_INT 2
17868: DOUBLE
17869: EQUAL
17870: IFTRUE 17874
17872: GO 18072
17874: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17875: LD_INT 35
17877: PPUSH
17878: LD_VAR 0 3
17882: PPUSH
17883: LD_INT 1
17885: PPUSH
17886: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17890: LD_INT 45
17892: PPUSH
17893: LD_VAR 0 3
17897: PPUSH
17898: LD_INT 1
17900: PPUSH
17901: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17905: LD_INT 46
17907: PPUSH
17908: LD_VAR 0 3
17912: PPUSH
17913: LD_INT 1
17915: PPUSH
17916: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17920: LD_INT 47
17922: PPUSH
17923: LD_VAR 0 3
17927: PPUSH
17928: LD_INT 1
17930: PPUSH
17931: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17935: LD_INT 1
17937: PPUSH
17938: LD_VAR 0 3
17942: PPUSH
17943: LD_INT 1
17945: PPUSH
17946: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17950: LD_INT 2
17952: PPUSH
17953: LD_VAR 0 3
17957: PPUSH
17958: LD_INT 1
17960: PPUSH
17961: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17965: LD_INT 11
17967: PPUSH
17968: LD_VAR 0 3
17972: PPUSH
17973: LD_INT 1
17975: PPUSH
17976: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17980: LD_INT 0
17982: PPUSH
17983: LD_VAR 0 3
17987: PPUSH
17988: LD_INT 1
17990: PPUSH
17991: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17995: LD_INT 2
17997: PPUSH
17998: LD_VAR 0 3
18002: PPUSH
18003: LD_INT 1
18005: PPUSH
18006: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18010: LD_INT 4
18012: PPUSH
18013: LD_VAR 0 3
18017: PPUSH
18018: LD_INT 1
18020: PPUSH
18021: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18025: LD_INT 6
18027: PPUSH
18028: LD_VAR 0 3
18032: PPUSH
18033: LD_INT 1
18035: PPUSH
18036: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18040: LD_INT 29
18042: PPUSH
18043: LD_VAR 0 3
18047: PPUSH
18048: LD_INT 1
18050: PPUSH
18051: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18055: LD_INT 31
18057: PPUSH
18058: LD_VAR 0 3
18062: PPUSH
18063: LD_INT 1
18065: PPUSH
18066: CALL_OW 324
// end ; 3 :
18070: GO 21618
18072: LD_INT 3
18074: DOUBLE
18075: EQUAL
18076: IFTRUE 18080
18078: GO 18533
18080: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18081: LD_INT 35
18083: PPUSH
18084: LD_VAR 0 3
18088: PPUSH
18089: LD_INT 1
18091: PPUSH
18092: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18096: LD_INT 45
18098: PPUSH
18099: LD_VAR 0 3
18103: PPUSH
18104: LD_INT 1
18106: PPUSH
18107: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18111: LD_INT 46
18113: PPUSH
18114: LD_VAR 0 3
18118: PPUSH
18119: LD_INT 1
18121: PPUSH
18122: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18126: LD_INT 47
18128: PPUSH
18129: LD_VAR 0 3
18133: PPUSH
18134: LD_INT 1
18136: PPUSH
18137: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18141: LD_INT 1
18143: PPUSH
18144: LD_VAR 0 3
18148: PPUSH
18149: LD_INT 1
18151: PPUSH
18152: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18156: LD_INT 2
18158: PPUSH
18159: LD_VAR 0 3
18163: PPUSH
18164: LD_INT 1
18166: PPUSH
18167: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18171: LD_INT 11
18173: PPUSH
18174: LD_VAR 0 3
18178: PPUSH
18179: LD_INT 1
18181: PPUSH
18182: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18186: LD_INT 48
18188: PPUSH
18189: LD_VAR 0 3
18193: PPUSH
18194: LD_INT 1
18196: PPUSH
18197: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18201: LD_INT 69
18203: PPUSH
18204: LD_VAR 0 3
18208: PPUSH
18209: LD_INT 1
18211: PPUSH
18212: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18216: LD_INT 39
18218: PPUSH
18219: LD_VAR 0 3
18223: PPUSH
18224: LD_INT 1
18226: PPUSH
18227: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18231: LD_INT 43
18233: PPUSH
18234: LD_VAR 0 3
18238: PPUSH
18239: LD_INT 1
18241: PPUSH
18242: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18246: LD_INT 51
18248: PPUSH
18249: LD_VAR 0 3
18253: PPUSH
18254: LD_INT 1
18256: PPUSH
18257: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18261: LD_INT 6
18263: PPUSH
18264: LD_VAR 0 3
18268: PPUSH
18269: LD_INT 1
18271: PPUSH
18272: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18276: LD_INT 0
18278: PPUSH
18279: LD_VAR 0 3
18283: PPUSH
18284: LD_INT 1
18286: PPUSH
18287: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18291: LD_INT 2
18293: PPUSH
18294: LD_VAR 0 3
18298: PPUSH
18299: LD_INT 1
18301: PPUSH
18302: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18306: LD_INT 3
18308: PPUSH
18309: LD_VAR 0 3
18313: PPUSH
18314: LD_INT 1
18316: PPUSH
18317: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18321: LD_INT 4
18323: PPUSH
18324: LD_VAR 0 3
18328: PPUSH
18329: LD_INT 1
18331: PPUSH
18332: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18336: LD_INT 6
18338: PPUSH
18339: LD_VAR 0 3
18343: PPUSH
18344: LD_INT 1
18346: PPUSH
18347: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18351: LD_INT 7
18353: PPUSH
18354: LD_VAR 0 3
18358: PPUSH
18359: LD_INT 1
18361: PPUSH
18362: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18366: LD_INT 8
18368: PPUSH
18369: LD_VAR 0 3
18373: PPUSH
18374: LD_INT 1
18376: PPUSH
18377: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18381: LD_INT 10
18383: PPUSH
18384: LD_VAR 0 3
18388: PPUSH
18389: LD_INT 1
18391: PPUSH
18392: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18396: LD_INT 15
18398: PPUSH
18399: LD_VAR 0 3
18403: PPUSH
18404: LD_INT 1
18406: PPUSH
18407: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18411: LD_INT 16
18413: PPUSH
18414: LD_VAR 0 3
18418: PPUSH
18419: LD_INT 1
18421: PPUSH
18422: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18426: LD_INT 17
18428: PPUSH
18429: LD_VAR 0 3
18433: PPUSH
18434: LD_INT 1
18436: PPUSH
18437: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18441: LD_INT 20
18443: PPUSH
18444: LD_VAR 0 3
18448: PPUSH
18449: LD_INT 1
18451: PPUSH
18452: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18456: LD_INT 26
18458: PPUSH
18459: LD_VAR 0 3
18463: PPUSH
18464: LD_INT 1
18466: PPUSH
18467: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18471: LD_INT 27
18473: PPUSH
18474: LD_VAR 0 3
18478: PPUSH
18479: LD_INT 1
18481: PPUSH
18482: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18486: LD_INT 29
18488: PPUSH
18489: LD_VAR 0 3
18493: PPUSH
18494: LD_INT 1
18496: PPUSH
18497: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18501: LD_INT 31
18503: PPUSH
18504: LD_VAR 0 3
18508: PPUSH
18509: LD_INT 1
18511: PPUSH
18512: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18516: LD_INT 32
18518: PPUSH
18519: LD_VAR 0 3
18523: PPUSH
18524: LD_INT 1
18526: PPUSH
18527: CALL_OW 324
// end ; 4 :
18531: GO 21618
18533: LD_INT 4
18535: DOUBLE
18536: EQUAL
18537: IFTRUE 18541
18539: GO 19489
18541: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18542: LD_INT 35
18544: PPUSH
18545: LD_VAR 0 3
18549: PPUSH
18550: LD_INT 1
18552: PPUSH
18553: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18557: LD_INT 45
18559: PPUSH
18560: LD_VAR 0 3
18564: PPUSH
18565: LD_INT 1
18567: PPUSH
18568: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18572: LD_INT 46
18574: PPUSH
18575: LD_VAR 0 3
18579: PPUSH
18580: LD_INT 1
18582: PPUSH
18583: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18587: LD_INT 47
18589: PPUSH
18590: LD_VAR 0 3
18594: PPUSH
18595: LD_INT 1
18597: PPUSH
18598: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18602: LD_INT 1
18604: PPUSH
18605: LD_VAR 0 3
18609: PPUSH
18610: LD_INT 1
18612: PPUSH
18613: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18617: LD_INT 2
18619: PPUSH
18620: LD_VAR 0 3
18624: PPUSH
18625: LD_INT 1
18627: PPUSH
18628: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18632: LD_INT 11
18634: PPUSH
18635: LD_VAR 0 3
18639: PPUSH
18640: LD_INT 1
18642: PPUSH
18643: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18647: LD_INT 20
18649: PPUSH
18650: LD_VAR 0 3
18654: PPUSH
18655: LD_INT 1
18657: PPUSH
18658: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18662: LD_INT 48
18664: PPUSH
18665: LD_VAR 0 3
18669: PPUSH
18670: LD_INT 1
18672: PPUSH
18673: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18677: LD_INT 49
18679: PPUSH
18680: LD_VAR 0 3
18684: PPUSH
18685: LD_INT 1
18687: PPUSH
18688: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18692: LD_INT 69
18694: PPUSH
18695: LD_VAR 0 3
18699: PPUSH
18700: LD_INT 1
18702: PPUSH
18703: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18707: LD_INT 39
18709: PPUSH
18710: LD_VAR 0 3
18714: PPUSH
18715: LD_INT 1
18717: PPUSH
18718: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18722: LD_INT 34
18724: PPUSH
18725: LD_VAR 0 3
18729: PPUSH
18730: LD_INT 1
18732: PPUSH
18733: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18737: LD_INT 42
18739: PPUSH
18740: LD_VAR 0 3
18744: PPUSH
18745: LD_INT 1
18747: PPUSH
18748: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18752: LD_INT 44
18754: PPUSH
18755: LD_VAR 0 3
18759: PPUSH
18760: LD_INT 1
18762: PPUSH
18763: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18767: LD_INT 41
18769: PPUSH
18770: LD_VAR 0 3
18774: PPUSH
18775: LD_INT 1
18777: PPUSH
18778: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18782: LD_INT 43
18784: PPUSH
18785: LD_VAR 0 3
18789: PPUSH
18790: LD_INT 1
18792: PPUSH
18793: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18797: LD_INT 70
18799: PPUSH
18800: LD_VAR 0 3
18804: PPUSH
18805: LD_INT 1
18807: PPUSH
18808: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18812: LD_INT 51
18814: PPUSH
18815: LD_VAR 0 3
18819: PPUSH
18820: LD_INT 1
18822: PPUSH
18823: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18827: LD_INT 52
18829: PPUSH
18830: LD_VAR 0 3
18834: PPUSH
18835: LD_INT 1
18837: PPUSH
18838: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18842: LD_INT 6
18844: PPUSH
18845: LD_VAR 0 3
18849: PPUSH
18850: LD_INT 1
18852: PPUSH
18853: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18857: LD_INT 15
18859: PPUSH
18860: LD_VAR 0 3
18864: PPUSH
18865: LD_INT 1
18867: PPUSH
18868: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18872: LD_INT 7
18874: PPUSH
18875: LD_VAR 0 3
18879: PPUSH
18880: LD_INT 1
18882: PPUSH
18883: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18887: LD_INT 12
18889: PPUSH
18890: LD_VAR 0 3
18894: PPUSH
18895: LD_INT 1
18897: PPUSH
18898: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18902: LD_INT 18
18904: PPUSH
18905: LD_VAR 0 3
18909: PPUSH
18910: LD_INT 1
18912: PPUSH
18913: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18917: LD_INT 60
18919: PPUSH
18920: LD_VAR 0 3
18924: PPUSH
18925: LD_INT 1
18927: PPUSH
18928: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18932: LD_INT 9
18934: PPUSH
18935: LD_VAR 0 3
18939: PPUSH
18940: LD_INT 1
18942: PPUSH
18943: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18947: LD_INT 30
18949: PPUSH
18950: LD_VAR 0 3
18954: PPUSH
18955: LD_INT 1
18957: PPUSH
18958: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18962: LD_INT 37
18964: PPUSH
18965: LD_VAR 0 3
18969: PPUSH
18970: LD_INT 1
18972: PPUSH
18973: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18977: LD_INT 5
18979: PPUSH
18980: LD_VAR 0 3
18984: PPUSH
18985: LD_INT 1
18987: PPUSH
18988: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18992: LD_INT 66
18994: PPUSH
18995: LD_VAR 0 3
18999: PPUSH
19000: LD_INT 1
19002: PPUSH
19003: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19007: LD_INT 21
19009: PPUSH
19010: LD_VAR 0 3
19014: PPUSH
19015: LD_INT 1
19017: PPUSH
19018: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19022: LD_INT 22
19024: PPUSH
19025: LD_VAR 0 3
19029: PPUSH
19030: LD_INT 1
19032: PPUSH
19033: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19037: LD_INT 54
19039: PPUSH
19040: LD_VAR 0 3
19044: PPUSH
19045: LD_INT 1
19047: PPUSH
19048: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19052: LD_INT 0
19054: PPUSH
19055: LD_VAR 0 3
19059: PPUSH
19060: LD_INT 1
19062: PPUSH
19063: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
19067: LD_INT 1
19069: PPUSH
19070: LD_VAR 0 3
19074: PPUSH
19075: LD_INT 1
19077: PPUSH
19078: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19082: LD_INT 2
19084: PPUSH
19085: LD_VAR 0 3
19089: PPUSH
19090: LD_INT 1
19092: PPUSH
19093: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
19097: LD_INT 3
19099: PPUSH
19100: LD_VAR 0 3
19104: PPUSH
19105: LD_INT 1
19107: PPUSH
19108: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19112: LD_INT 4
19114: PPUSH
19115: LD_VAR 0 3
19119: PPUSH
19120: LD_INT 1
19122: PPUSH
19123: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
19127: LD_INT 5
19129: PPUSH
19130: LD_VAR 0 3
19134: PPUSH
19135: LD_INT 1
19137: PPUSH
19138: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19142: LD_INT 6
19144: PPUSH
19145: LD_VAR 0 3
19149: PPUSH
19150: LD_INT 1
19152: PPUSH
19153: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
19157: LD_INT 7
19159: PPUSH
19160: LD_VAR 0 3
19164: PPUSH
19165: LD_INT 1
19167: PPUSH
19168: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
19172: LD_INT 8
19174: PPUSH
19175: LD_VAR 0 3
19179: PPUSH
19180: LD_INT 1
19182: PPUSH
19183: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
19187: LD_INT 10
19189: PPUSH
19190: LD_VAR 0 3
19194: PPUSH
19195: LD_INT 1
19197: PPUSH
19198: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
19202: LD_INT 11
19204: PPUSH
19205: LD_VAR 0 3
19209: PPUSH
19210: LD_INT 1
19212: PPUSH
19213: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
19217: LD_INT 12
19219: PPUSH
19220: LD_VAR 0 3
19224: PPUSH
19225: LD_INT 1
19227: PPUSH
19228: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
19232: LD_INT 13
19234: PPUSH
19235: LD_VAR 0 3
19239: PPUSH
19240: LD_INT 1
19242: PPUSH
19243: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
19247: LD_INT 14
19249: PPUSH
19250: LD_VAR 0 3
19254: PPUSH
19255: LD_INT 1
19257: PPUSH
19258: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
19262: LD_INT 15
19264: PPUSH
19265: LD_VAR 0 3
19269: PPUSH
19270: LD_INT 1
19272: PPUSH
19273: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
19277: LD_INT 16
19279: PPUSH
19280: LD_VAR 0 3
19284: PPUSH
19285: LD_INT 1
19287: PPUSH
19288: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
19292: LD_INT 17
19294: PPUSH
19295: LD_VAR 0 3
19299: PPUSH
19300: LD_INT 1
19302: PPUSH
19303: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
19307: LD_INT 19
19309: PPUSH
19310: LD_VAR 0 3
19314: PPUSH
19315: LD_INT 1
19317: PPUSH
19318: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
19322: LD_INT 20
19324: PPUSH
19325: LD_VAR 0 3
19329: PPUSH
19330: LD_INT 1
19332: PPUSH
19333: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
19337: LD_INT 21
19339: PPUSH
19340: LD_VAR 0 3
19344: PPUSH
19345: LD_INT 1
19347: PPUSH
19348: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
19352: LD_INT 23
19354: PPUSH
19355: LD_VAR 0 3
19359: PPUSH
19360: LD_INT 1
19362: PPUSH
19363: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
19367: LD_INT 26
19369: PPUSH
19370: LD_VAR 0 3
19374: PPUSH
19375: LD_INT 1
19377: PPUSH
19378: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
19382: LD_INT 27
19384: PPUSH
19385: LD_VAR 0 3
19389: PPUSH
19390: LD_INT 1
19392: PPUSH
19393: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
19397: LD_INT 28
19399: PPUSH
19400: LD_VAR 0 3
19404: PPUSH
19405: LD_INT 1
19407: PPUSH
19408: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19412: LD_INT 29
19414: PPUSH
19415: LD_VAR 0 3
19419: PPUSH
19420: LD_INT 1
19422: PPUSH
19423: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
19427: LD_INT 30
19429: PPUSH
19430: LD_VAR 0 3
19434: PPUSH
19435: LD_INT 1
19437: PPUSH
19438: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19442: LD_INT 31
19444: PPUSH
19445: LD_VAR 0 3
19449: PPUSH
19450: LD_INT 1
19452: PPUSH
19453: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
19457: LD_INT 32
19459: PPUSH
19460: LD_VAR 0 3
19464: PPUSH
19465: LD_INT 1
19467: PPUSH
19468: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
19472: LD_INT 36
19474: PPUSH
19475: LD_VAR 0 3
19479: PPUSH
19480: LD_INT 1
19482: PPUSH
19483: CALL_OW 324
// end ; 5 :
19487: GO 21618
19489: LD_INT 5
19491: DOUBLE
19492: EQUAL
19493: IFTRUE 19497
19495: GO 20610
19497: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19498: LD_INT 35
19500: PPUSH
19501: LD_VAR 0 3
19505: PPUSH
19506: LD_INT 1
19508: PPUSH
19509: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19513: LD_INT 45
19515: PPUSH
19516: LD_VAR 0 3
19520: PPUSH
19521: LD_INT 1
19523: PPUSH
19524: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19528: LD_INT 46
19530: PPUSH
19531: LD_VAR 0 3
19535: PPUSH
19536: LD_INT 1
19538: PPUSH
19539: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19543: LD_INT 47
19545: PPUSH
19546: LD_VAR 0 3
19550: PPUSH
19551: LD_INT 1
19553: PPUSH
19554: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19558: LD_INT 1
19560: PPUSH
19561: LD_VAR 0 3
19565: PPUSH
19566: LD_INT 1
19568: PPUSH
19569: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19573: LD_INT 2
19575: PPUSH
19576: LD_VAR 0 3
19580: PPUSH
19581: LD_INT 1
19583: PPUSH
19584: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19588: LD_INT 11
19590: PPUSH
19591: LD_VAR 0 3
19595: PPUSH
19596: LD_INT 1
19598: PPUSH
19599: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
19603: LD_INT 20
19605: PPUSH
19606: LD_VAR 0 3
19610: PPUSH
19611: LD_INT 1
19613: PPUSH
19614: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
19618: LD_INT 48
19620: PPUSH
19621: LD_VAR 0 3
19625: PPUSH
19626: LD_INT 1
19628: PPUSH
19629: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
19633: LD_INT 49
19635: PPUSH
19636: LD_VAR 0 3
19640: PPUSH
19641: LD_INT 1
19643: PPUSH
19644: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
19648: LD_INT 69
19650: PPUSH
19651: LD_VAR 0 3
19655: PPUSH
19656: LD_INT 1
19658: PPUSH
19659: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
19663: LD_INT 39
19665: PPUSH
19666: LD_VAR 0 3
19670: PPUSH
19671: LD_INT 1
19673: PPUSH
19674: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
19678: LD_INT 34
19680: PPUSH
19681: LD_VAR 0 3
19685: PPUSH
19686: LD_INT 1
19688: PPUSH
19689: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
19693: LD_INT 42
19695: PPUSH
19696: LD_VAR 0 3
19700: PPUSH
19701: LD_INT 1
19703: PPUSH
19704: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
19708: LD_INT 44
19710: PPUSH
19711: LD_VAR 0 3
19715: PPUSH
19716: LD_INT 1
19718: PPUSH
19719: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
19723: LD_INT 41
19725: PPUSH
19726: LD_VAR 0 3
19730: PPUSH
19731: LD_INT 1
19733: PPUSH
19734: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
19738: LD_INT 40
19740: PPUSH
19741: LD_VAR 0 3
19745: PPUSH
19746: LD_INT 1
19748: PPUSH
19749: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
19753: LD_INT 43
19755: PPUSH
19756: LD_VAR 0 3
19760: PPUSH
19761: LD_INT 1
19763: PPUSH
19764: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
19768: LD_INT 70
19770: PPUSH
19771: LD_VAR 0 3
19775: PPUSH
19776: LD_INT 1
19778: PPUSH
19779: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
19783: LD_INT 51
19785: PPUSH
19786: LD_VAR 0 3
19790: PPUSH
19791: LD_INT 1
19793: PPUSH
19794: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19798: LD_INT 52
19800: PPUSH
19801: LD_VAR 0 3
19805: PPUSH
19806: LD_INT 1
19808: PPUSH
19809: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19813: LD_INT 6
19815: PPUSH
19816: LD_VAR 0 3
19820: PPUSH
19821: LD_INT 1
19823: PPUSH
19824: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19828: LD_INT 15
19830: PPUSH
19831: LD_VAR 0 3
19835: PPUSH
19836: LD_INT 1
19838: PPUSH
19839: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19843: LD_INT 7
19845: PPUSH
19846: LD_VAR 0 3
19850: PPUSH
19851: LD_INT 1
19853: PPUSH
19854: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19858: LD_INT 12
19860: PPUSH
19861: LD_VAR 0 3
19865: PPUSH
19866: LD_INT 1
19868: PPUSH
19869: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19873: LD_INT 17
19875: PPUSH
19876: LD_VAR 0 3
19880: PPUSH
19881: LD_INT 1
19883: PPUSH
19884: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19888: LD_INT 18
19890: PPUSH
19891: LD_VAR 0 3
19895: PPUSH
19896: LD_INT 1
19898: PPUSH
19899: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19903: LD_INT 60
19905: PPUSH
19906: LD_VAR 0 3
19910: PPUSH
19911: LD_INT 1
19913: PPUSH
19914: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19918: LD_INT 32
19920: PPUSH
19921: LD_VAR 0 3
19925: PPUSH
19926: LD_INT 1
19928: PPUSH
19929: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19933: LD_INT 9
19935: PPUSH
19936: LD_VAR 0 3
19940: PPUSH
19941: LD_INT 1
19943: PPUSH
19944: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19948: LD_INT 57
19950: PPUSH
19951: LD_VAR 0 3
19955: PPUSH
19956: LD_INT 1
19958: PPUSH
19959: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19963: LD_INT 30
19965: PPUSH
19966: LD_VAR 0 3
19970: PPUSH
19971: LD_INT 1
19973: PPUSH
19974: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19978: LD_INT 37
19980: PPUSH
19981: LD_VAR 0 3
19985: PPUSH
19986: LD_INT 1
19988: PPUSH
19989: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19993: LD_INT 63
19995: PPUSH
19996: LD_VAR 0 3
20000: PPUSH
20001: LD_INT 1
20003: PPUSH
20004: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
20008: LD_INT 3
20010: PPUSH
20011: LD_VAR 0 3
20015: PPUSH
20016: LD_INT 1
20018: PPUSH
20019: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
20023: LD_INT 4
20025: PPUSH
20026: LD_VAR 0 3
20030: PPUSH
20031: LD_INT 1
20033: PPUSH
20034: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20038: LD_INT 5
20040: PPUSH
20041: LD_VAR 0 3
20045: PPUSH
20046: LD_INT 1
20048: PPUSH
20049: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20053: LD_INT 66
20055: PPUSH
20056: LD_VAR 0 3
20060: PPUSH
20061: LD_INT 1
20063: PPUSH
20064: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20068: LD_INT 21
20070: PPUSH
20071: LD_VAR 0 3
20075: PPUSH
20076: LD_INT 1
20078: PPUSH
20079: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20083: LD_INT 22
20085: PPUSH
20086: LD_VAR 0 3
20090: PPUSH
20091: LD_INT 1
20093: PPUSH
20094: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
20098: LD_INT 19
20100: PPUSH
20101: LD_VAR 0 3
20105: PPUSH
20106: LD_INT 1
20108: PPUSH
20109: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20113: LD_INT 54
20115: PPUSH
20116: LD_VAR 0 3
20120: PPUSH
20121: LD_INT 1
20123: PPUSH
20124: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
20128: LD_INT 55
20130: PPUSH
20131: LD_VAR 0 3
20135: PPUSH
20136: LD_INT 1
20138: PPUSH
20139: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20143: LD_INT 0
20145: PPUSH
20146: LD_VAR 0 3
20150: PPUSH
20151: LD_INT 1
20153: PPUSH
20154: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
20158: LD_INT 1
20160: PPUSH
20161: LD_VAR 0 3
20165: PPUSH
20166: LD_INT 1
20168: PPUSH
20169: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20173: LD_INT 2
20175: PPUSH
20176: LD_VAR 0 3
20180: PPUSH
20181: LD_INT 1
20183: PPUSH
20184: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
20188: LD_INT 3
20190: PPUSH
20191: LD_VAR 0 3
20195: PPUSH
20196: LD_INT 1
20198: PPUSH
20199: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
20203: LD_INT 4
20205: PPUSH
20206: LD_VAR 0 3
20210: PPUSH
20211: LD_INT 1
20213: PPUSH
20214: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
20218: LD_INT 5
20220: PPUSH
20221: LD_VAR 0 3
20225: PPUSH
20226: LD_INT 1
20228: PPUSH
20229: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
20233: LD_INT 6
20235: PPUSH
20236: LD_VAR 0 3
20240: PPUSH
20241: LD_INT 1
20243: PPUSH
20244: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
20248: LD_INT 7
20250: PPUSH
20251: LD_VAR 0 3
20255: PPUSH
20256: LD_INT 1
20258: PPUSH
20259: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
20263: LD_INT 8
20265: PPUSH
20266: LD_VAR 0 3
20270: PPUSH
20271: LD_INT 1
20273: PPUSH
20274: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
20278: LD_INT 10
20280: PPUSH
20281: LD_VAR 0 3
20285: PPUSH
20286: LD_INT 1
20288: PPUSH
20289: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
20293: LD_INT 11
20295: PPUSH
20296: LD_VAR 0 3
20300: PPUSH
20301: LD_INT 1
20303: PPUSH
20304: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
20308: LD_INT 12
20310: PPUSH
20311: LD_VAR 0 3
20315: PPUSH
20316: LD_INT 1
20318: PPUSH
20319: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
20323: LD_INT 13
20325: PPUSH
20326: LD_VAR 0 3
20330: PPUSH
20331: LD_INT 1
20333: PPUSH
20334: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
20338: LD_INT 14
20340: PPUSH
20341: LD_VAR 0 3
20345: PPUSH
20346: LD_INT 1
20348: PPUSH
20349: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
20353: LD_INT 15
20355: PPUSH
20356: LD_VAR 0 3
20360: PPUSH
20361: LD_INT 1
20363: PPUSH
20364: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
20368: LD_INT 16
20370: PPUSH
20371: LD_VAR 0 3
20375: PPUSH
20376: LD_INT 1
20378: PPUSH
20379: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
20383: LD_INT 17
20385: PPUSH
20386: LD_VAR 0 3
20390: PPUSH
20391: LD_INT 1
20393: PPUSH
20394: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
20398: LD_INT 18
20400: PPUSH
20401: LD_VAR 0 3
20405: PPUSH
20406: LD_INT 1
20408: PPUSH
20409: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
20413: LD_INT 19
20415: PPUSH
20416: LD_VAR 0 3
20420: PPUSH
20421: LD_INT 1
20423: PPUSH
20424: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
20428: LD_INT 20
20430: PPUSH
20431: LD_VAR 0 3
20435: PPUSH
20436: LD_INT 1
20438: PPUSH
20439: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
20443: LD_INT 21
20445: PPUSH
20446: LD_VAR 0 3
20450: PPUSH
20451: LD_INT 1
20453: PPUSH
20454: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
20458: LD_INT 23
20460: PPUSH
20461: LD_VAR 0 3
20465: PPUSH
20466: LD_INT 1
20468: PPUSH
20469: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
20473: LD_INT 26
20475: PPUSH
20476: LD_VAR 0 3
20480: PPUSH
20481: LD_INT 1
20483: PPUSH
20484: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
20488: LD_INT 27
20490: PPUSH
20491: LD_VAR 0 3
20495: PPUSH
20496: LD_INT 1
20498: PPUSH
20499: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
20503: LD_INT 28
20505: PPUSH
20506: LD_VAR 0 3
20510: PPUSH
20511: LD_INT 1
20513: PPUSH
20514: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
20518: LD_INT 29
20520: PPUSH
20521: LD_VAR 0 3
20525: PPUSH
20526: LD_INT 1
20528: PPUSH
20529: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
20533: LD_INT 30
20535: PPUSH
20536: LD_VAR 0 3
20540: PPUSH
20541: LD_INT 1
20543: PPUSH
20544: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
20548: LD_INT 31
20550: PPUSH
20551: LD_VAR 0 3
20555: PPUSH
20556: LD_INT 1
20558: PPUSH
20559: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
20563: LD_INT 32
20565: PPUSH
20566: LD_VAR 0 3
20570: PPUSH
20571: LD_INT 1
20573: PPUSH
20574: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
20578: LD_INT 33
20580: PPUSH
20581: LD_VAR 0 3
20585: PPUSH
20586: LD_INT 1
20588: PPUSH
20589: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
20593: LD_INT 36
20595: PPUSH
20596: LD_VAR 0 3
20600: PPUSH
20601: LD_INT 1
20603: PPUSH
20604: CALL_OW 324
// end ; 6 :
20608: GO 21618
20610: LD_INT 6
20612: DOUBLE
20613: EQUAL
20614: IFTRUE 20618
20616: GO 21543
20618: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20619: LD_INT 35
20621: PPUSH
20622: LD_VAR 0 3
20626: PPUSH
20627: LD_INT 1
20629: PPUSH
20630: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20634: LD_INT 45
20636: PPUSH
20637: LD_VAR 0 3
20641: PPUSH
20642: LD_INT 1
20644: PPUSH
20645: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20649: LD_INT 46
20651: PPUSH
20652: LD_VAR 0 3
20656: PPUSH
20657: LD_INT 1
20659: PPUSH
20660: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20664: LD_INT 47
20666: PPUSH
20667: LD_VAR 0 3
20671: PPUSH
20672: LD_INT 1
20674: PPUSH
20675: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20679: LD_INT 1
20681: PPUSH
20682: LD_VAR 0 3
20686: PPUSH
20687: LD_INT 1
20689: PPUSH
20690: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20694: LD_INT 2
20696: PPUSH
20697: LD_VAR 0 3
20701: PPUSH
20702: LD_INT 1
20704: PPUSH
20705: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20709: LD_INT 11
20711: PPUSH
20712: LD_VAR 0 3
20716: PPUSH
20717: LD_INT 1
20719: PPUSH
20720: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
20724: LD_INT 20
20726: PPUSH
20727: LD_VAR 0 3
20731: PPUSH
20732: LD_INT 1
20734: PPUSH
20735: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20739: LD_INT 48
20741: PPUSH
20742: LD_VAR 0 3
20746: PPUSH
20747: LD_INT 1
20749: PPUSH
20750: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
20754: LD_INT 49
20756: PPUSH
20757: LD_VAR 0 3
20761: PPUSH
20762: LD_INT 1
20764: PPUSH
20765: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
20769: LD_INT 50
20771: PPUSH
20772: LD_VAR 0 3
20776: PPUSH
20777: LD_INT 1
20779: PPUSH
20780: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20784: LD_INT 69
20786: PPUSH
20787: LD_VAR 0 3
20791: PPUSH
20792: LD_INT 1
20794: PPUSH
20795: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20799: LD_INT 39
20801: PPUSH
20802: LD_VAR 0 3
20806: PPUSH
20807: LD_INT 1
20809: PPUSH
20810: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
20814: LD_INT 34
20816: PPUSH
20817: LD_VAR 0 3
20821: PPUSH
20822: LD_INT 1
20824: PPUSH
20825: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20829: LD_INT 42
20831: PPUSH
20832: LD_VAR 0 3
20836: PPUSH
20837: LD_INT 1
20839: PPUSH
20840: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20844: LD_INT 44
20846: PPUSH
20847: LD_VAR 0 3
20851: PPUSH
20852: LD_INT 1
20854: PPUSH
20855: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20859: LD_INT 41
20861: PPUSH
20862: LD_VAR 0 3
20866: PPUSH
20867: LD_INT 1
20869: PPUSH
20870: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
20874: LD_INT 13
20876: PPUSH
20877: LD_VAR 0 3
20881: PPUSH
20882: LD_INT 1
20884: PPUSH
20885: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
20889: LD_INT 40
20891: PPUSH
20892: LD_VAR 0 3
20896: PPUSH
20897: LD_INT 1
20899: PPUSH
20900: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20904: LD_INT 43
20906: PPUSH
20907: LD_VAR 0 3
20911: PPUSH
20912: LD_INT 1
20914: PPUSH
20915: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20919: LD_INT 70
20921: PPUSH
20922: LD_VAR 0 3
20926: PPUSH
20927: LD_INT 1
20929: PPUSH
20930: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
20934: LD_INT 23
20936: PPUSH
20937: LD_VAR 0 3
20941: PPUSH
20942: LD_INT 1
20944: PPUSH
20945: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20949: LD_INT 51
20951: PPUSH
20952: LD_VAR 0 3
20956: PPUSH
20957: LD_INT 1
20959: PPUSH
20960: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
20964: LD_INT 52
20966: PPUSH
20967: LD_VAR 0 3
20971: PPUSH
20972: LD_INT 1
20974: PPUSH
20975: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20979: LD_INT 6
20981: PPUSH
20982: LD_VAR 0 3
20986: PPUSH
20987: LD_INT 1
20989: PPUSH
20990: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
20994: LD_INT 15
20996: PPUSH
20997: LD_VAR 0 3
21001: PPUSH
21002: LD_INT 1
21004: PPUSH
21005: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
21009: LD_INT 7
21011: PPUSH
21012: LD_VAR 0 3
21016: PPUSH
21017: LD_INT 1
21019: PPUSH
21020: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
21024: LD_INT 12
21026: PPUSH
21027: LD_VAR 0 3
21031: PPUSH
21032: LD_INT 1
21034: PPUSH
21035: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
21039: LD_INT 10
21041: PPUSH
21042: LD_VAR 0 3
21046: PPUSH
21047: LD_INT 1
21049: PPUSH
21050: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
21054: LD_INT 17
21056: PPUSH
21057: LD_VAR 0 3
21061: PPUSH
21062: LD_INT 1
21064: PPUSH
21065: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
21069: LD_INT 18
21071: PPUSH
21072: LD_VAR 0 3
21076: PPUSH
21077: LD_INT 1
21079: PPUSH
21080: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
21084: LD_INT 60
21086: PPUSH
21087: LD_VAR 0 3
21091: PPUSH
21092: LD_INT 1
21094: PPUSH
21095: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
21099: LD_INT 61
21101: PPUSH
21102: LD_VAR 0 3
21106: PPUSH
21107: LD_INT 1
21109: PPUSH
21110: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
21114: LD_INT 32
21116: PPUSH
21117: LD_VAR 0 3
21121: PPUSH
21122: LD_INT 1
21124: PPUSH
21125: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
21129: LD_INT 27
21131: PPUSH
21132: LD_VAR 0 3
21136: PPUSH
21137: LD_INT 1
21139: PPUSH
21140: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
21144: LD_INT 36
21146: PPUSH
21147: LD_VAR 0 3
21151: PPUSH
21152: LD_INT 1
21154: PPUSH
21155: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
21159: LD_INT 33
21161: PPUSH
21162: LD_VAR 0 3
21166: PPUSH
21167: LD_INT 1
21169: PPUSH
21170: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
21174: LD_INT 9
21176: PPUSH
21177: LD_VAR 0 3
21181: PPUSH
21182: LD_INT 1
21184: PPUSH
21185: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
21189: LD_INT 38
21191: PPUSH
21192: LD_VAR 0 3
21196: PPUSH
21197: LD_INT 1
21199: PPUSH
21200: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
21204: LD_INT 57
21206: PPUSH
21207: LD_VAR 0 3
21211: PPUSH
21212: LD_INT 1
21214: PPUSH
21215: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
21219: LD_INT 58
21221: PPUSH
21222: LD_VAR 0 3
21226: PPUSH
21227: LD_INT 1
21229: PPUSH
21230: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
21234: LD_INT 28
21236: PPUSH
21237: LD_VAR 0 3
21241: PPUSH
21242: LD_INT 1
21244: PPUSH
21245: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
21249: LD_INT 29
21251: PPUSH
21252: LD_VAR 0 3
21256: PPUSH
21257: LD_INT 1
21259: PPUSH
21260: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
21264: LD_INT 30
21266: PPUSH
21267: LD_VAR 0 3
21271: PPUSH
21272: LD_INT 1
21274: PPUSH
21275: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
21279: LD_INT 37
21281: PPUSH
21282: LD_VAR 0 3
21286: PPUSH
21287: LD_INT 1
21289: PPUSH
21290: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
21294: LD_INT 63
21296: PPUSH
21297: LD_VAR 0 3
21301: PPUSH
21302: LD_INT 1
21304: PPUSH
21305: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
21309: LD_INT 64
21311: PPUSH
21312: LD_VAR 0 3
21316: PPUSH
21317: LD_INT 1
21319: PPUSH
21320: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
21324: LD_INT 3
21326: PPUSH
21327: LD_VAR 0 3
21331: PPUSH
21332: LD_INT 1
21334: PPUSH
21335: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
21339: LD_INT 4
21341: PPUSH
21342: LD_VAR 0 3
21346: PPUSH
21347: LD_INT 1
21349: PPUSH
21350: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
21354: LD_INT 5
21356: PPUSH
21357: LD_VAR 0 3
21361: PPUSH
21362: LD_INT 1
21364: PPUSH
21365: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
21369: LD_INT 8
21371: PPUSH
21372: LD_VAR 0 3
21376: PPUSH
21377: LD_INT 1
21379: PPUSH
21380: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
21384: LD_INT 66
21386: PPUSH
21387: LD_VAR 0 3
21391: PPUSH
21392: LD_INT 1
21394: PPUSH
21395: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
21399: LD_INT 67
21401: PPUSH
21402: LD_VAR 0 3
21406: PPUSH
21407: LD_INT 1
21409: PPUSH
21410: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
21414: LD_INT 21
21416: PPUSH
21417: LD_VAR 0 3
21421: PPUSH
21422: LD_INT 1
21424: PPUSH
21425: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
21429: LD_INT 22
21431: PPUSH
21432: LD_VAR 0 3
21436: PPUSH
21437: LD_INT 1
21439: PPUSH
21440: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
21444: LD_INT 19
21446: PPUSH
21447: LD_VAR 0 3
21451: PPUSH
21452: LD_INT 1
21454: PPUSH
21455: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
21459: LD_INT 26
21461: PPUSH
21462: LD_VAR 0 3
21466: PPUSH
21467: LD_INT 1
21469: PPUSH
21470: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
21474: LD_INT 54
21476: PPUSH
21477: LD_VAR 0 3
21481: PPUSH
21482: LD_INT 1
21484: PPUSH
21485: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
21489: LD_INT 55
21491: PPUSH
21492: LD_VAR 0 3
21496: PPUSH
21497: LD_INT 1
21499: PPUSH
21500: CALL_OW 322
// for i = 0 to 39 do
21504: LD_ADDR_VAR 0 4
21508: PUSH
21509: DOUBLE
21510: LD_INT 0
21512: DEC
21513: ST_TO_ADDR
21514: LD_INT 39
21516: PUSH
21517: FOR_TO
21518: IFFALSE 21539
// SetRestrict ( i , side , true ) ;
21520: LD_VAR 0 4
21524: PPUSH
21525: LD_VAR 0 3
21529: PPUSH
21530: LD_INT 1
21532: PPUSH
21533: CALL_OW 324
21537: GO 21517
21539: POP
21540: POP
// end ; else
21541: GO 21618
21543: POP
// begin for i = 1 to 73 do
21544: LD_ADDR_VAR 0 4
21548: PUSH
21549: DOUBLE
21550: LD_INT 1
21552: DEC
21553: ST_TO_ADDR
21554: LD_INT 73
21556: PUSH
21557: FOR_TO
21558: IFFALSE 21579
// SetTech ( i , side , state_enabled ) ;
21560: LD_VAR 0 4
21564: PPUSH
21565: LD_VAR 0 3
21569: PPUSH
21570: LD_INT 1
21572: PPUSH
21573: CALL_OW 322
21577: GO 21557
21579: POP
21580: POP
// for i = 0 to 39 do
21581: LD_ADDR_VAR 0 4
21585: PUSH
21586: DOUBLE
21587: LD_INT 0
21589: DEC
21590: ST_TO_ADDR
21591: LD_INT 39
21593: PUSH
21594: FOR_TO
21595: IFFALSE 21616
// SetRestrict ( i , side , true ) ;
21597: LD_VAR 0 4
21601: PPUSH
21602: LD_VAR 0 3
21606: PPUSH
21607: LD_INT 1
21609: PPUSH
21610: CALL_OW 324
21614: GO 21594
21616: POP
21617: POP
// end ; end ; end ;
21618: GO 17623
21620: POP
21621: POP
// end ;
21622: LD_VAR 0 2
21626: RET
