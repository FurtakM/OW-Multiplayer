// export def_main_base , def_secondary_base , def_defence_level , def_amount_of_people , def_initial_level , def_main_deposits , def_secondary_deposits , def_siberite_detection , def_starting_resources , def_shipments_density , def_people_arrivals , def_people_loyality , def_people_info , def_morale_flags , def_siberite_bomb , def_amount_of_apemen , def_builduptime , def_win_rules , def_people_respawning ; export is_depot , number_of_people , number_of_pplants , are_mines , is_lab , is_fact , is_arm , are_breastworks , deposits , initial_level , starting_crates , starting_resources , shipments_density , max_arriving_times , text_info , fog_info , def_bf_params , amount_of_apemen , siberite_bomb_Delay ; export Positions , Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export second_side , third_nation ; export start_def , depots_def , breastworks_def , labs_def , factories_def , armories_def , pplants_def , deposits_def ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i ; var u1 , u2 , pom_tab , p1 , p2 , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
  73: PPUSH
  74: PPUSH
  75: PPUSH
  76: PPUSH
  77: PPUSH
  78: PPUSH
  79: PPUSH
  80: PPUSH
  81: PPUSH
  82: PPUSH
  83: PPUSH
// if MultiPlayer then
  84: LD_OWVAR 4
  88: IFFALSE 162
// begin Game_Type = mp_game_type ;
  90: LD_ADDR_EXP 67
  94: PUSH
  95: LD_OWVAR 6
  99: ST_TO_ADDR
// Your_Side = mp_player_side ;
 100: LD_ADDR_OWVAR 2
 104: PUSH
 105: LD_OWVAR 7
 109: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_OWVAR 17
 119: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 120: LD_ADDR_EXP 40
 124: PUSH
 125: LD_OWVAR 15
 129: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 130: LD_ADDR_EXP 44
 134: PUSH
 135: LD_OWVAR 16
 139: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 140: LD_ADDR_EXP 42
 144: PUSH
 145: CALL 0 0 0
 149: ST_TO_ADDR
// Teams = mp_teams ;
 150: LD_ADDR_EXP 41
 154: PUSH
 155: LD_OWVAR 12
 159: ST_TO_ADDR
// end else
 160: GO 333
// begin Your_Side = 3 ;
 162: LD_ADDR_OWVAR 2
 166: PUSH
 167: LD_INT 3
 169: ST_TO_ADDR
// Side_Positions = [ 0 , 0 , 2 , 0 , 1 , 0 , 0 , 0 ] ;
 170: LD_ADDR_EXP 43
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 2
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 1
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: LD_INT 0
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: LIST
 208: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 209: LD_ADDR_EXP 40
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: LD_INT 0
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: LIST
 246: LIST
 247: ST_TO_ADDR
// Side_Nations = [ 0 , 0 , 3 , 0 , 2 , 0 , 0 , 0 ] ;
 248: LD_ADDR_EXP 44
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 3
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 2
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: LIST
 286: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 287: LD_ADDR_EXP 42
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: ST_TO_ADDR
// Teams = [ ] ;
 326: LD_ADDR_EXP 41
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ; for i := 1 to 8 do
 333: LD_ADDR_VAR 0 8
 337: PUSH
 338: DOUBLE
 339: LD_INT 1
 341: DEC
 342: ST_TO_ADDR
 343: LD_INT 8
 345: PUSH
 346: FOR_TO
 347: IFFALSE 434
// if Multiplayer_GetPlayerIsSpec ( i ) then
 349: LD_VAR 0 8
 353: PPUSH
 354: CALL_OW 530
 358: IFFALSE 432
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 360: LD_ADDR_EXP 43
 364: PUSH
 365: LD_EXP 43
 369: PPUSH
 370: LD_VAR 0 8
 374: PPUSH
 375: LD_INT 0
 377: PPUSH
 378: CALL_OW 1
 382: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 383: LD_ADDR_EXP 41
 387: PUSH
 388: LD_EXP 41
 392: PPUSH
 393: LD_EXP 40
 397: PUSH
 398: LD_VAR 0 8
 402: ARRAY
 403: PPUSH
 404: LD_EXP 41
 408: PUSH
 409: LD_EXP 40
 413: PUSH
 414: LD_VAR 0 8
 418: ARRAY
 419: ARRAY
 420: PUSH
 421: LD_VAR 0 8
 425: DIFF
 426: PPUSH
 427: CALL_OW 1
 431: ST_TO_ADDR
// end ;
 432: GO 346
 434: POP
 435: POP
// Position_Sides := [ 0 , 0 ] ;
 436: LD_ADDR_EXP 46
 440: PUSH
 441: LD_INT 0
 443: PUSH
 444: LD_INT 0
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// for i := 1 to 8 do
 451: LD_ADDR_VAR 0 8
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_INT 8
 463: PUSH
 464: FOR_TO
 465: IFFALSE 512
// if Side_Positions [ i ] then
 467: LD_EXP 43
 471: PUSH
 472: LD_VAR 0 8
 476: ARRAY
 477: IFFALSE 510
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 479: LD_ADDR_EXP 46
 483: PUSH
 484: LD_EXP 46
 488: PPUSH
 489: LD_EXP 43
 493: PUSH
 494: LD_VAR 0 8
 498: ARRAY
 499: PPUSH
 500: LD_VAR 0 8
 504: PPUSH
 505: CALL_OW 1
 509: ST_TO_ADDR
 510: GO 464
 512: POP
 513: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 514: LD_ADDR_EXP 45
 518: PUSH
 519: LD_EXP 40
 523: PUSH
 524: LD_INT 0
 526: PUSH
 527: EMPTY
 528: LIST
 529: DIFF
 530: PUSH
 531: LD_INT 1
 533: GREATER
 534: ST_TO_ADDR
// p1 := 0 ;
 535: LD_ADDR_VAR 0 12
 539: PUSH
 540: LD_INT 0
 542: ST_TO_ADDR
// p2 := 0 ;
 543: LD_ADDR_VAR 0 13
 547: PUSH
 548: LD_INT 0
 550: ST_TO_ADDR
// for i := 1 to 8 do
 551: LD_ADDR_VAR 0 8
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 8
 563: PUSH
 564: FOR_TO
 565: IFFALSE 623
// if Side_Positions [ i ] = 1 then
 567: LD_EXP 43
 571: PUSH
 572: LD_VAR 0 8
 576: ARRAY
 577: PUSH
 578: LD_INT 1
 580: EQUAL
 581: IFFALSE 595
// p1 := i else
 583: LD_ADDR_VAR 0 12
 587: PUSH
 588: LD_VAR 0 8
 592: ST_TO_ADDR
 593: GO 621
// if Side_Positions [ i ] = 2 then
 595: LD_EXP 43
 599: PUSH
 600: LD_VAR 0 8
 604: ARRAY
 605: PUSH
 606: LD_INT 2
 608: EQUAL
 609: IFFALSE 621
// p2 := i ;
 611: LD_ADDR_VAR 0 13
 615: PUSH
 616: LD_VAR 0 8
 620: ST_TO_ADDR
 621: GO 564
 623: POP
 624: POP
// Positions := [ p1 , p2 ] ;
 625: LD_ADDR_EXP 39
 629: PUSH
 630: LD_VAR 0 12
 634: PUSH
 635: LD_VAR 0 13
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: ST_TO_ADDR
// if MultiPlayer then
 644: LD_OWVAR 4
 648: IFFALSE 902
// begin def_main_base = GetMultiplayerSetting ( 0 ) ;
 650: LD_ADDR_EXP 1
 654: PUSH
 655: LD_INT 0
 657: PPUSH
 658: CALL_OW 426
 662: ST_TO_ADDR
// def_secondary_base = GetMultiplayerSetting ( 1 ) ;
 663: LD_ADDR_EXP 2
 667: PUSH
 668: LD_INT 1
 670: PPUSH
 671: CALL_OW 426
 675: ST_TO_ADDR
// def_defence_level = GetMultiplayerSetting ( 2 ) ;
 676: LD_ADDR_EXP 3
 680: PUSH
 681: LD_INT 2
 683: PPUSH
 684: CALL_OW 426
 688: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 3 ) ;
 689: LD_ADDR_EXP 4
 693: PUSH
 694: LD_INT 3
 696: PPUSH
 697: CALL_OW 426
 701: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 4 ) ;
 702: LD_ADDR_EXP 5
 706: PUSH
 707: LD_INT 4
 709: PPUSH
 710: CALL_OW 426
 714: ST_TO_ADDR
// def_main_deposits = GetMultiplayerSetting ( 5 ) ;
 715: LD_ADDR_EXP 6
 719: PUSH
 720: LD_INT 5
 722: PPUSH
 723: CALL_OW 426
 727: ST_TO_ADDR
// def_secondary_deposits = GetMultiplayerSetting ( 6 ) ;
 728: LD_ADDR_EXP 7
 732: PUSH
 733: LD_INT 6
 735: PPUSH
 736: CALL_OW 426
 740: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 7 ) ;
 741: LD_ADDR_EXP 8
 745: PUSH
 746: LD_INT 7
 748: PPUSH
 749: CALL_OW 426
 753: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 8 ) ;
 754: LD_ADDR_EXP 9
 758: PUSH
 759: LD_INT 8
 761: PPUSH
 762: CALL_OW 426
 766: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 9 ) ;
 767: LD_ADDR_EXP 10
 771: PUSH
 772: LD_INT 9
 774: PPUSH
 775: CALL_OW 426
 779: ST_TO_ADDR
// def_people_arrivals = GetMultiplayerSetting ( 10 ) ;
 780: LD_ADDR_EXP 11
 784: PUSH
 785: LD_INT 10
 787: PPUSH
 788: CALL_OW 426
 792: ST_TO_ADDR
// def_people_loyality = GetMultiplayerSetting ( 11 ) ;
 793: LD_ADDR_EXP 12
 797: PUSH
 798: LD_INT 11
 800: PPUSH
 801: CALL_OW 426
 805: ST_TO_ADDR
// def_people_info = GetMultiplayerSetting ( 12 ) ;
 806: LD_ADDR_EXP 13
 810: PUSH
 811: LD_INT 12
 813: PPUSH
 814: CALL_OW 426
 818: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 15 ) ;
 819: LD_ADDR_EXP 14
 823: PUSH
 824: LD_INT 15
 826: PPUSH
 827: CALL_OW 426
 831: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 16 ) ;
 832: LD_ADDR_EXP 15
 836: PUSH
 837: LD_INT 16
 839: PPUSH
 840: CALL_OW 426
 844: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 17 ) ;
 845: LD_ADDR_EXP 16
 849: PUSH
 850: LD_INT 17
 852: PPUSH
 853: CALL_OW 426
 857: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 858: LD_ADDR_EXP 17
 862: PUSH
 863: LD_INT 20
 865: PPUSH
 866: CALL_OW 426
 870: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 871: LD_ADDR_VAR 0 14
 875: PUSH
 876: LD_INT 22
 878: PPUSH
 879: CALL_OW 426
 883: ST_TO_ADDR
// def_people_respawning = 0 ;
 884: LD_ADDR_EXP 19
 888: PUSH
 889: LD_INT 0
 891: ST_TO_ADDR
// def_win_rules = 0 ;
 892: LD_ADDR_EXP 18
 896: PUSH
 897: LD_INT 0
 899: ST_TO_ADDR
// end else
 900: GO 1074
// begin randomize ;
 902: CALL_OW 10
// def_main_base = 1 ;
 906: LD_ADDR_EXP 1
 910: PUSH
 911: LD_INT 1
 913: ST_TO_ADDR
// def_secondary_base = 1 ;
 914: LD_ADDR_EXP 2
 918: PUSH
 919: LD_INT 1
 921: ST_TO_ADDR
// def_defence_level = 1 ;
 922: LD_ADDR_EXP 3
 926: PUSH
 927: LD_INT 1
 929: ST_TO_ADDR
// def_amount_of_people = 2 ;
 930: LD_ADDR_EXP 4
 934: PUSH
 935: LD_INT 2
 937: ST_TO_ADDR
// def_initial_level = 1 ;
 938: LD_ADDR_EXP 5
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// def_main_deposits = 2 ;
 946: LD_ADDR_EXP 6
 950: PUSH
 951: LD_INT 2
 953: ST_TO_ADDR
// def_secondary_deposits = 1 ;
 954: LD_ADDR_EXP 7
 958: PUSH
 959: LD_INT 1
 961: ST_TO_ADDR
// def_siberite_detection = 1 ;
 962: LD_ADDR_EXP 8
 966: PUSH
 967: LD_INT 1
 969: ST_TO_ADDR
// def_starting_resources = 2 ;
 970: LD_ADDR_EXP 9
 974: PUSH
 975: LD_INT 2
 977: ST_TO_ADDR
// def_shipments_density = 70 ;
 978: LD_ADDR_EXP 10
 982: PUSH
 983: LD_INT 70
 985: ST_TO_ADDR
// def_people_arrivals = 3 ;
 986: LD_ADDR_EXP 11
 990: PUSH
 991: LD_INT 3
 993: ST_TO_ADDR
// def_people_loyality = 1 ;
 994: LD_ADDR_EXP 12
 998: PUSH
 999: LD_INT 1
1001: ST_TO_ADDR
// def_people_info = 1 ;
1002: LD_ADDR_EXP 13
1006: PUSH
1007: LD_INT 1
1009: ST_TO_ADDR
// def_morale_flags = 2 ;
1010: LD_ADDR_EXP 14
1014: PUSH
1015: LD_INT 2
1017: ST_TO_ADDR
// def_siberite_bomb = 1 ;
1018: LD_ADDR_EXP 15
1022: PUSH
1023: LD_INT 1
1025: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
1026: LD_ADDR_EXP 16
1030: PUSH
1031: LD_INT 3
1033: ST_TO_ADDR
// def_builduptime = 1 ;
1034: LD_ADDR_EXP 17
1038: PUSH
1039: LD_INT 1
1041: ST_TO_ADDR
// def_game_rules = 0 ;
1042: LD_ADDR_EXP 68
1046: PUSH
1047: LD_INT 0
1049: ST_TO_ADDR
// tech_level = 4 ;
1050: LD_ADDR_VAR 0 14
1054: PUSH
1055: LD_INT 4
1057: ST_TO_ADDR
// def_people_respawning = 0 ;
1058: LD_ADDR_EXP 19
1062: PUSH
1063: LD_INT 0
1065: ST_TO_ADDR
// def_win_rules = 0 ;
1066: LD_ADDR_EXP 18
1070: PUSH
1071: LD_INT 0
1073: ST_TO_ADDR
// end ; InitGameRules ;
1074: CALL 14115 0 0
// if def_game_rules = 0 then
1078: LD_EXP 68
1082: PUSH
1083: LD_INT 0
1085: EQUAL
1086: IFFALSE 1113
// begin if isSGUI then
1088: LD_OWVAR 83
1092: IFFALSE 1100
// setMpTechs ( ) else
1094: CALL 17432 0 0
1098: GO 1113
// begin SetMpTechLevel ( tech_level + 1 ) ;
1100: LD_VAR 0 14
1104: PUSH
1105: LD_INT 1
1107: PLUS
1108: PPUSH
1109: CALL 17579 0 1
// end ; end ; u1 = [ 0 , 1 , 1 , 1 , 2 ] [ def_main_base + 1 ] ;
1113: LD_ADDR_VAR 0 9
1117: PUSH
1118: LD_INT 0
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 1
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: PUSH
1140: LD_EXP 1
1144: PUSH
1145: LD_INT 1
1147: PLUS
1148: ARRAY
1149: ST_TO_ADDR
// u2 = [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] ;
1150: LD_ADDR_VAR 0 10
1154: PUSH
1155: LD_INT 0
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 1
1163: PUSH
1164: LD_INT 2
1166: PUSH
1167: LD_INT 2
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: PUSH
1177: LD_EXP 1
1181: PUSH
1182: LD_INT 1
1184: PLUS
1185: ARRAY
1186: ST_TO_ADDR
// is_depot = [ [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] , [ 0 , 1 , 1 ] [ def_secondary_base + 1 ] ] ;
1187: LD_ADDR_EXP 20
1191: PUSH
1192: LD_INT 0
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: LD_INT 2
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: LIST
1211: LIST
1212: LIST
1213: PUSH
1214: LD_EXP 1
1218: PUSH
1219: LD_INT 1
1221: PLUS
1222: ARRAY
1223: PUSH
1224: LD_INT 0
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: LD_INT 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: LIST
1237: PUSH
1238: LD_EXP 2
1242: PUSH
1243: LD_INT 1
1245: PLUS
1246: ARRAY
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: ST_TO_ADDR
// if is_depot [ 2 ] then
1252: LD_EXP 20
1256: PUSH
1257: LD_INT 2
1259: ARRAY
1260: IFFALSE 1399
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ [ ] , [ 1 ] , [ 1 , 1 ] , [ 1 , 1 , 1 ] ] [ def_defence_level + 1 ] ] else
1262: LD_ADDR_EXP 27
1266: PUSH
1267: EMPTY
1268: PUSH
1269: LD_VAR 0 10
1273: PUSH
1274: LD_VAR 0 9
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: PUSH
1283: LD_VAR 0 10
1287: PUSH
1288: LD_VAR 0 10
1292: PUSH
1293: LD_VAR 0 9
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: LIST
1302: PUSH
1303: LD_VAR 0 10
1307: PUSH
1308: LD_VAR 0 10
1312: PUSH
1313: LD_VAR 0 9
1317: PUSH
1318: LD_VAR 0 9
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: PUSH
1335: LD_EXP 3
1339: PUSH
1340: LD_INT 1
1342: PLUS
1343: ARRAY
1344: PUSH
1345: EMPTY
1346: PUSH
1347: LD_INT 1
1349: PUSH
1350: EMPTY
1351: LIST
1352: PUSH
1353: LD_INT 1
1355: PUSH
1356: LD_INT 1
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: PUSH
1363: LD_INT 1
1365: PUSH
1366: LD_INT 1
1368: PUSH
1369: LD_INT 1
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: PUSH
1383: LD_EXP 3
1387: PUSH
1388: LD_INT 1
1390: PLUS
1391: ARRAY
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: ST_TO_ADDR
1397: GO 1488
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ ] ] ;
1399: LD_ADDR_EXP 27
1403: PUSH
1404: EMPTY
1405: PUSH
1406: LD_VAR 0 10
1410: PUSH
1411: LD_VAR 0 9
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: PUSH
1420: LD_VAR 0 10
1424: PUSH
1425: LD_VAR 0 10
1429: PUSH
1430: LD_VAR 0 9
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PUSH
1440: LD_VAR 0 10
1444: PUSH
1445: LD_VAR 0 10
1449: PUSH
1450: LD_VAR 0 9
1454: PUSH
1455: LD_VAR 0 9
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_EXP 3
1476: PUSH
1477: LD_INT 1
1479: PLUS
1480: ARRAY
1481: PUSH
1482: EMPTY
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: ST_TO_ADDR
// is_fact = [ [ 0 , 0 , 1 , 2 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1488: LD_ADDR_EXP 25
1492: PUSH
1493: LD_INT 0
1495: PUSH
1496: LD_INT 0
1498: PUSH
1499: LD_INT 1
1501: PUSH
1502: LD_INT 2
1504: PUSH
1505: LD_INT 2
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: PUSH
1515: LD_EXP 1
1519: PUSH
1520: LD_INT 1
1522: PLUS
1523: ARRAY
1524: PUSH
1525: LD_INT 0
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: ST_TO_ADDR
// is_lab = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1532: LD_ADDR_EXP 24
1536: PUSH
1537: LD_INT 0
1539: PUSH
1540: LD_INT 0
1542: PUSH
1543: LD_INT 1
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: LD_INT 2
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: PUSH
1559: LD_EXP 1
1563: PUSH
1564: LD_INT 1
1566: PLUS
1567: ARRAY
1568: PUSH
1569: LD_INT 0
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: ST_TO_ADDR
// is_arm = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1576: LD_ADDR_EXP 26
1580: PUSH
1581: LD_INT 0
1583: PUSH
1584: LD_INT 0
1586: PUSH
1587: LD_INT 1
1589: PUSH
1590: LD_INT 1
1592: PUSH
1593: LD_INT 2
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: LD_EXP 1
1607: PUSH
1608: LD_INT 1
1610: PLUS
1611: ARRAY
1612: PUSH
1613: LD_INT 0
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: ST_TO_ADDR
// are_mines = [ [ 0 , 0 , 0 , 1 , 1 ] [ def_main_base + 1 ] , [ 0 , 0 , 1 ] [ def_secondary_base + 1 ] ] ;
1620: LD_ADDR_EXP 23
1624: PUSH
1625: LD_INT 0
1627: PUSH
1628: LD_INT 0
1630: PUSH
1631: LD_INT 0
1633: PUSH
1634: LD_INT 1
1636: PUSH
1637: LD_INT 1
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: PUSH
1647: LD_EXP 1
1651: PUSH
1652: LD_INT 1
1654: PLUS
1655: ARRAY
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: LD_INT 0
1662: PUSH
1663: LD_INT 1
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_EXP 2
1675: PUSH
1676: LD_INT 1
1678: PLUS
1679: ARRAY
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: ST_TO_ADDR
// number_of_pplants = [ [ 0 , 0 , 0 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1685: LD_ADDR_EXP 22
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: LD_INT 0
1695: PUSH
1696: LD_INT 0
1698: PUSH
1699: LD_INT 1
1701: PUSH
1702: LD_INT 2
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: PUSH
1712: LD_EXP 1
1716: PUSH
1717: LD_INT 1
1719: PLUS
1720: ARRAY
1721: PUSH
1722: LD_INT 0
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: ST_TO_ADDR
// number_of_people = [ [ 5 , 8 , 11 ] [ def_amount_of_people + 1 ] , ( [ 2 , 3 , 4 ] [ def_amount_of_people + 1 ] ) * is_depot [ 2 ] ] ;
1729: LD_ADDR_EXP 21
1733: PUSH
1734: LD_INT 5
1736: PUSH
1737: LD_INT 8
1739: PUSH
1740: LD_INT 11
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: LD_EXP 4
1752: PUSH
1753: LD_INT 1
1755: PLUS
1756: ARRAY
1757: PUSH
1758: LD_INT 2
1760: PUSH
1761: LD_INT 3
1763: PUSH
1764: LD_INT 4
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_EXP 4
1776: PUSH
1777: LD_INT 1
1779: PLUS
1780: ARRAY
1781: PUSH
1782: LD_EXP 20
1786: PUSH
1787: LD_INT 2
1789: ARRAY
1790: MUL
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
1796: LD_ADDR_EXP 29
1800: PUSH
1801: LD_INT 2
1803: PUSH
1804: LD_INT 3
1806: PUSH
1807: LD_INT 4
1809: PUSH
1810: LD_INT 5
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_EXP 5
1823: PUSH
1824: LD_INT 1
1826: PLUS
1827: ARRAY
1828: ST_TO_ADDR
// starting_resources = [ [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] , [ [ 50 , 0 , 0 ] , [ 20 , 0 , 0 ] ] , [ [ 150 , 30 , 0 ] , [ 60 , 0 , 0 ] ] , [ [ 250 , 50 , 10 ] , [ 100 , 30 , 0 ] ] ] [ def_starting_resources + 1 ] ;
1829: LD_ADDR_EXP 31
1833: PUSH
1834: LD_INT 0
1836: PUSH
1837: LD_INT 0
1839: PUSH
1840: LD_INT 0
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: LIST
1847: PUSH
1848: LD_INT 0
1850: PUSH
1851: LD_INT 0
1853: PUSH
1854: LD_INT 0
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: PUSH
1866: LD_INT 50
1868: PUSH
1869: LD_INT 0
1871: PUSH
1872: LD_INT 0
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 20
1882: PUSH
1883: LD_INT 0
1885: PUSH
1886: LD_INT 0
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: LD_INT 150
1900: PUSH
1901: LD_INT 30
1903: PUSH
1904: LD_INT 0
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: LIST
1911: PUSH
1912: LD_INT 60
1914: PUSH
1915: LD_INT 0
1917: PUSH
1918: LD_INT 0
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: LIST
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: PUSH
1930: LD_INT 250
1932: PUSH
1933: LD_INT 50
1935: PUSH
1936: LD_INT 10
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: LIST
1943: PUSH
1944: LD_INT 100
1946: PUSH
1947: LD_INT 30
1949: PUSH
1950: LD_INT 0
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: LIST
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: PUSH
1968: LD_EXP 9
1972: PUSH
1973: LD_INT 1
1975: PLUS
1976: ARRAY
1977: ST_TO_ADDR
// shipments_density := 380 - ( def_shipments_density * 2 ) ;
1978: LD_ADDR_EXP 32
1982: PUSH
1983: LD_INT 380
1985: PUSH
1986: LD_EXP 10
1990: PUSH
1991: LD_INT 2
1993: MUL
1994: MINUS
1995: ST_TO_ADDR
// max_arriving_times = [ [ ] , [ 10 , 17 , 26 , 36 , 48 , 60 ] , [ 6 , 10 , 15 , 20 , 26 , 32 , 38 , 45 , 52 , 60 ] , [ 4 , 6 , 9 , 12 , 16 , 20 , 24 , 28 , 32 , 36 , 40 , 45 , 50 , 55 , 60 ] ] [ def_people_arrivals + 1 ] ;
1996: LD_ADDR_EXP 33
2000: PUSH
2001: EMPTY
2002: PUSH
2003: LD_INT 10
2005: PUSH
2006: LD_INT 17
2008: PUSH
2009: LD_INT 26
2011: PUSH
2012: LD_INT 36
2014: PUSH
2015: LD_INT 48
2017: PUSH
2018: LD_INT 60
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 6
2031: PUSH
2032: LD_INT 10
2034: PUSH
2035: LD_INT 15
2037: PUSH
2038: LD_INT 20
2040: PUSH
2041: LD_INT 26
2043: PUSH
2044: LD_INT 32
2046: PUSH
2047: LD_INT 38
2049: PUSH
2050: LD_INT 45
2052: PUSH
2053: LD_INT 52
2055: PUSH
2056: LD_INT 60
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: PUSH
2071: LD_INT 4
2073: PUSH
2074: LD_INT 6
2076: PUSH
2077: LD_INT 9
2079: PUSH
2080: LD_INT 12
2082: PUSH
2083: LD_INT 16
2085: PUSH
2086: LD_INT 20
2088: PUSH
2089: LD_INT 24
2091: PUSH
2092: LD_INT 28
2094: PUSH
2095: LD_INT 32
2097: PUSH
2098: LD_INT 36
2100: PUSH
2101: LD_INT 40
2103: PUSH
2104: LD_INT 45
2106: PUSH
2107: LD_INT 50
2109: PUSH
2110: LD_INT 55
2112: PUSH
2113: LD_INT 60
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: PUSH
2139: LD_EXP 11
2143: PUSH
2144: LD_INT 1
2146: PLUS
2147: ARRAY
2148: ST_TO_ADDR
// text_info = [ 0 , 1 , 0 , 1 ] [ def_people_info + 1 ] ;
2149: LD_ADDR_EXP 34
2153: PUSH
2154: LD_INT 0
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: LD_INT 0
2162: PUSH
2163: LD_INT 1
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: PUSH
2172: LD_EXP 13
2176: PUSH
2177: LD_INT 1
2179: PLUS
2180: ARRAY
2181: ST_TO_ADDR
// fog_info = [ 0 , 0 , 1 , 1 ] [ def_people_info + 1 ] ;
2182: LD_ADDR_EXP 35
2186: PUSH
2187: LD_INT 0
2189: PUSH
2190: LD_INT 0
2192: PUSH
2193: LD_INT 1
2195: PUSH
2196: LD_INT 1
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_EXP 13
2209: PUSH
2210: LD_INT 1
2212: PLUS
2213: ARRAY
2214: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
2215: LD_ADDR_EXP 37
2219: PUSH
2220: LD_INT 0
2222: PUSH
2223: LD_INT 1
2225: PUSH
2226: LD_INT 2
2228: PUSH
2229: LD_INT 3
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: LD_EXP 16
2242: PUSH
2243: LD_INT 1
2245: PLUS
2246: ARRAY
2247: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2248: LD_ADDR_EXP 38
2252: PUSH
2253: LD_INT 0
2255: PUSH
2256: LD_INT 1
2258: PUSH
2259: LD_INT 63000
2261: PUSH
2262: LD_INT 126000
2264: PUSH
2265: LD_INT 189000
2267: PUSH
2268: LD_INT 252000
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: PUSH
2279: LD_EXP 15
2283: PUSH
2284: LD_INT 1
2286: PLUS
2287: ARRAY
2288: ST_TO_ADDR
// deposits = [ [ [ 1 , 0 , 1 , 2 , 0 ] [ def_main_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_main_deposits + 1 ] ] , [ [ 1 , 0 , 1 , 2 , 0 ] [ def_secondary_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_secondary_deposits + 1 ] ] ] ;
2289: LD_ADDR_EXP 28
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: LD_INT 0
2299: PUSH
2300: LD_INT 1
2302: PUSH
2303: LD_INT 2
2305: PUSH
2306: LD_INT 0
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: PUSH
2316: LD_EXP 6
2320: PUSH
2321: LD_INT 1
2323: PLUS
2324: ARRAY
2325: PUSH
2326: LD_INT 0
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: LD_INT 1
2334: PUSH
2335: LD_INT 0
2337: PUSH
2338: LD_INT 2
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: PUSH
2348: LD_EXP 6
2352: PUSH
2353: LD_INT 1
2355: PLUS
2356: ARRAY
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 1
2364: PUSH
2365: LD_INT 0
2367: PUSH
2368: LD_INT 1
2370: PUSH
2371: LD_INT 2
2373: PUSH
2374: LD_INT 0
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: PUSH
2384: LD_EXP 7
2388: PUSH
2389: LD_INT 1
2391: PLUS
2392: ARRAY
2393: PUSH
2394: LD_INT 0
2396: PUSH
2397: LD_INT 1
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: LD_INT 0
2405: PUSH
2406: LD_INT 2
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: PUSH
2416: LD_EXP 7
2420: PUSH
2421: LD_INT 1
2423: PLUS
2424: ARRAY
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: ST_TO_ADDR
// def_bf_params = [ [ 0 , 0 , 0 , 0 ] , [ 50 , 25 , 0 , 50 ] , [ 75 , 50 , 25 , 75 ] , [ 100 , 75 , 50 , 100 ] ] [ def_morale_flags + 1 ] ;
2434: LD_ADDR_EXP 36
2438: PUSH
2439: LD_INT 0
2441: PUSH
2442: LD_INT 0
2444: PUSH
2445: LD_INT 0
2447: PUSH
2448: LD_INT 0
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: LIST
2455: LIST
2456: PUSH
2457: LD_INT 50
2459: PUSH
2460: LD_INT 25
2462: PUSH
2463: LD_INT 0
2465: PUSH
2466: LD_INT 50
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: PUSH
2475: LD_INT 75
2477: PUSH
2478: LD_INT 50
2480: PUSH
2481: LD_INT 25
2483: PUSH
2484: LD_INT 75
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: PUSH
2493: LD_INT 100
2495: PUSH
2496: LD_INT 75
2498: PUSH
2499: LD_INT 50
2501: PUSH
2502: LD_INT 100
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: PUSH
2517: LD_EXP 14
2521: PUSH
2522: LD_INT 1
2524: PLUS
2525: ARRAY
2526: ST_TO_ADDR
// prepare_arrivals ;
2527: CALL 11226 0 0
// if def_people_loyality then
2531: LD_EXP 12
2535: IFFALSE 3400
// begin second_side = [ [ [ 0 , 0 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 6 , 7 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 4 , 2 ] , [ 4 , 2 ] ] , [ [ 5 , 4 ] , [ 0 , 0 ] , [ 5 , 6 ] , [ 5 , 1 ] , [ 7 , 3 ] , [ 5 , 3 ] , [ 5 , 4 ] , [ 5 , 4 ] ] , [ [ 6 , 4 ] , [ 6 , 5 ] , [ 0 , 0 ] , [ 6 , 1 ] , [ 6 , 2 ] , [ 5 , 1 ] , [ 6 , 4 ] , [ 6 , 2 ] ] , [ [ 7 , 6 ] , [ 1 , 5 ] , [ 1 , 6 ] , [ 0 , 0 ] , [ 1 , 2 ] , [ 1 , 3 ] , [ 1 , 2 ] , [ 1 , 2 ] ] , [ [ 2 , 4 ] , [ 3 , 7 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 0 , 0 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 2 , 4 ] ] , [ [ 3 , 4 ] , [ 3 , 5 ] , [ 1 , 5 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 0 , 0 ] , [ 3 , 4 ] , [ 3 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 0 , 0 ] , [ 4 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 0 , 0 ] ] ] [ positions [ 1 ] ] [ positions [ 2 ] ] ;
2537: LD_ADDR_EXP 47
2541: PUSH
2542: LD_INT 0
2544: PUSH
2545: LD_INT 0
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 4
2554: PUSH
2555: LD_INT 5
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 4
2564: PUSH
2565: LD_INT 6
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: LD_INT 6
2574: PUSH
2575: LD_INT 7
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: PUSH
2582: LD_INT 4
2584: PUSH
2585: LD_INT 2
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: PUSH
2592: LD_INT 4
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: LD_INT 4
2604: PUSH
2605: LD_INT 2
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: LD_INT 4
2614: PUSH
2615: LD_INT 2
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: PUSH
2632: LD_INT 5
2634: PUSH
2635: LD_INT 4
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: PUSH
2642: LD_INT 0
2644: PUSH
2645: LD_INT 0
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 5
2654: PUSH
2655: LD_INT 6
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: PUSH
2662: LD_INT 5
2664: PUSH
2665: LD_INT 1
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_INT 7
2674: PUSH
2675: LD_INT 3
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: PUSH
2682: LD_INT 5
2684: PUSH
2685: LD_INT 3
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: LD_INT 5
2694: PUSH
2695: LD_INT 4
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: LD_INT 5
2704: PUSH
2705: LD_INT 4
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 6
2724: PUSH
2725: LD_INT 4
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: LD_INT 6
2734: PUSH
2735: LD_INT 5
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 0
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 6
2754: PUSH
2755: LD_INT 1
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: PUSH
2762: LD_INT 6
2764: PUSH
2765: LD_INT 2
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: LD_INT 5
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 6
2784: PUSH
2785: LD_INT 4
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 6
2794: PUSH
2795: LD_INT 2
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: PUSH
2812: LD_INT 7
2814: PUSH
2815: LD_INT 6
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 1
2824: PUSH
2825: LD_INT 5
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: LD_INT 1
2834: PUSH
2835: LD_INT 6
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 0
2844: PUSH
2845: LD_INT 0
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_INT 1
2854: PUSH
2855: LD_INT 2
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: PUSH
2862: LD_INT 1
2864: PUSH
2865: LD_INT 3
2867: PUSH
2868: EMPTY
2869: LIST
2870: LIST
2871: PUSH
2872: LD_INT 1
2874: PUSH
2875: LD_INT 2
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: LD_INT 2
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: LIST
2896: LIST
2897: LIST
2898: LIST
2899: LIST
2900: LIST
2901: PUSH
2902: LD_INT 2
2904: PUSH
2905: LD_INT 4
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 3
2914: PUSH
2915: LD_INT 7
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PUSH
2922: LD_INT 2
2924: PUSH
2925: LD_INT 6
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PUSH
2932: LD_INT 2
2934: PUSH
2935: LD_INT 1
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PUSH
2942: LD_INT 0
2944: PUSH
2945: LD_INT 0
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PUSH
2952: LD_INT 2
2954: PUSH
2955: LD_INT 3
2957: PUSH
2958: EMPTY
2959: LIST
2960: LIST
2961: PUSH
2962: LD_INT 2
2964: PUSH
2965: LD_INT 4
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: PUSH
2972: LD_INT 2
2974: PUSH
2975: LD_INT 4
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: LIST
2990: LIST
2991: PUSH
2992: LD_INT 3
2994: PUSH
2995: LD_INT 4
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 3
3004: PUSH
3005: LD_INT 5
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: LD_INT 1
3014: PUSH
3015: LD_INT 5
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 3
3024: PUSH
3025: LD_INT 1
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: LD_INT 3
3034: PUSH
3035: LD_INT 2
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PUSH
3042: LD_INT 0
3044: PUSH
3045: LD_INT 0
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: PUSH
3052: LD_INT 3
3054: PUSH
3055: LD_INT 4
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PUSH
3062: LD_INT 3
3064: PUSH
3065: LD_INT 2
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PUSH
3072: EMPTY
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: PUSH
3082: LD_INT 2
3084: PUSH
3085: LD_INT 4
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: LD_INT 4
3094: PUSH
3095: LD_INT 5
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: PUSH
3102: LD_INT 4
3104: PUSH
3105: LD_INT 6
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PUSH
3112: LD_INT 2
3114: PUSH
3115: LD_INT 1
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: PUSH
3122: LD_INT 4
3124: PUSH
3125: LD_INT 2
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PUSH
3132: LD_INT 4
3134: PUSH
3135: LD_INT 3
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PUSH
3142: LD_INT 0
3144: PUSH
3145: LD_INT 0
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PUSH
3152: LD_INT 4
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 2
3174: PUSH
3175: LD_INT 4
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 4
3184: PUSH
3185: LD_INT 5
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 2
3194: PUSH
3195: LD_INT 6
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 1
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: LD_INT 4
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: LD_INT 2
3224: PUSH
3225: LD_INT 3
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: LD_INT 2
3234: PUSH
3235: LD_INT 4
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: LD_INT 0
3244: PUSH
3245: LD_INT 0
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: PUSH
3272: LD_EXP 39
3276: PUSH
3277: LD_INT 1
3279: ARRAY
3280: ARRAY
3281: PUSH
3282: LD_EXP 39
3286: PUSH
3287: LD_INT 2
3289: ARRAY
3290: ARRAY
3291: ST_TO_ADDR
// SetAttitude ( second_side [ 1 ] , positions [ 1 ] , att_friend , true ) ;
3292: LD_EXP 47
3296: PUSH
3297: LD_INT 1
3299: ARRAY
3300: PPUSH
3301: LD_EXP 39
3305: PUSH
3306: LD_INT 1
3308: ARRAY
3309: PPUSH
3310: LD_INT 1
3312: PPUSH
3313: LD_INT 1
3315: PPUSH
3316: CALL_OW 80
// SetAttitude ( second_side [ 2 ] , positions [ 2 ] , att_friend , true ) ;
3320: LD_EXP 47
3324: PUSH
3325: LD_INT 2
3327: ARRAY
3328: PPUSH
3329: LD_EXP 39
3333: PUSH
3334: LD_INT 2
3336: ARRAY
3337: PPUSH
3338: LD_INT 1
3340: PPUSH
3341: LD_INT 1
3343: PPUSH
3344: CALL_OW 80
// if fog_info then
3348: LD_EXP 35
3352: IFFALSE 3398
// begin ChangeSideFog ( second_side [ 1 ] , positions [ 1 ] ) ;
3354: LD_EXP 47
3358: PUSH
3359: LD_INT 1
3361: ARRAY
3362: PPUSH
3363: LD_EXP 39
3367: PUSH
3368: LD_INT 1
3370: ARRAY
3371: PPUSH
3372: CALL_OW 343
// ChangeSideFog ( second_side [ 2 ] , positions [ 2 ] ) ;
3376: LD_EXP 47
3380: PUSH
3381: LD_INT 2
3383: ARRAY
3384: PPUSH
3385: LD_EXP 39
3389: PUSH
3390: LD_INT 2
3392: ARRAY
3393: PPUSH
3394: CALL_OW 343
// end ; end else
3398: GO 3680
// begin pom_tab = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] diff ( positions union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 1 ] ] union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 2 ] ] ) ;
3400: LD_ADDR_VAR 0 11
3404: PUSH
3405: LD_INT 1
3407: PUSH
3408: LD_INT 2
3410: PUSH
3411: LD_INT 3
3413: PUSH
3414: LD_INT 4
3416: PUSH
3417: LD_INT 5
3419: PUSH
3420: LD_INT 6
3422: PUSH
3423: LD_INT 7
3425: PUSH
3426: LD_INT 8
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: PUSH
3439: LD_EXP 39
3443: PUSH
3444: LD_INT 4
3446: PUSH
3447: LD_INT 5
3449: PUSH
3450: LD_INT 7
3452: PUSH
3453: LD_INT 8
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: LIST
3460: PUSH
3461: LD_INT 6
3463: PUSH
3464: LD_INT 1
3466: PUSH
3467: LD_INT 7
3469: PUSH
3470: LD_INT 8
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: LIST
3477: PUSH
3478: LD_INT 2
3480: PUSH
3481: LD_INT 3
3483: PUSH
3484: LD_INT 2
3486: PUSH
3487: LD_INT 4
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: LD_INT 2
3496: PUSH
3497: LD_INT 4
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: PUSH
3514: LD_EXP 39
3518: PUSH
3519: LD_INT 1
3521: ARRAY
3522: ARRAY
3523: UNION
3524: PUSH
3525: LD_INT 4
3527: PUSH
3528: LD_INT 5
3530: PUSH
3531: LD_INT 7
3533: PUSH
3534: LD_INT 8
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 6
3544: PUSH
3545: LD_INT 1
3547: PUSH
3548: LD_INT 7
3550: PUSH
3551: LD_INT 8
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: LIST
3558: PUSH
3559: LD_INT 2
3561: PUSH
3562: LD_INT 3
3564: PUSH
3565: LD_INT 2
3567: PUSH
3568: LD_INT 4
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PUSH
3575: LD_INT 2
3577: PUSH
3578: LD_INT 4
3580: PUSH
3581: EMPTY
3582: LIST
3583: LIST
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: PUSH
3595: LD_EXP 39
3599: PUSH
3600: LD_INT 2
3602: ARRAY
3603: ARRAY
3604: UNION
3605: DIFF
3606: ST_TO_ADDR
// second_side = pom_tab [ Rand ( 1 , pom_tab ) ] ;
3607: LD_ADDR_EXP 47
3611: PUSH
3612: LD_VAR 0 11
3616: PUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_VAR 0 11
3624: PPUSH
3625: CALL_OW 12
3629: ARRAY
3630: ST_TO_ADDR
// third_nation = [ 1 , 2 , 3 ] diff side_nations ;
3631: LD_ADDR_EXP 48
3635: PUSH
3636: LD_INT 1
3638: PUSH
3639: LD_INT 2
3641: PUSH
3642: LD_INT 3
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: LIST
3649: PUSH
3650: LD_EXP 44
3654: DIFF
3655: ST_TO_ADDR
// third_nation = third_nation [ Rand ( 1 , third_nation ) ] ;
3656: LD_ADDR_EXP 48
3660: PUSH
3661: LD_EXP 48
3665: PUSH
3666: LD_INT 1
3668: PPUSH
3669: LD_EXP 48
3673: PPUSH
3674: CALL_OW 12
3678: ARRAY
3679: ST_TO_ADDR
// end ; BuildUpAreas := [ BuildUp1 , BuildUp2 ] ;
3680: LD_ADDR_EXP 65
3684: PUSH
3685: LD_INT 26
3687: PUSH
3688: LD_INT 27
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: ST_TO_ADDR
// end ;
3695: LD_VAR 0 1
3699: RET
// function prepare_map_coordinates ; var side , dep2 , br2 , dep1 , br1 , lab , fac , arm , pplant , un , i , k11 , k12 , k21 , k22 ; begin
3700: LD_INT 0
3702: PPUSH
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
3710: PPUSH
3711: PPUSH
3712: PPUSH
3713: PPUSH
3714: PPUSH
3715: PPUSH
3716: PPUSH
3717: PPUSH
// start_def = [ ] ;
3718: LD_ADDR_EXP 49
3722: PUSH
3723: EMPTY
3724: ST_TO_ADDR
// depots_def = [ ] ;
3725: LD_ADDR_EXP 50
3729: PUSH
3730: EMPTY
3731: ST_TO_ADDR
// breastworks_def = [ ] ;
3732: LD_ADDR_EXP 51
3736: PUSH
3737: EMPTY
3738: ST_TO_ADDR
// labs_def = [ ] ;
3739: LD_ADDR_EXP 52
3743: PUSH
3744: EMPTY
3745: ST_TO_ADDR
// factories_def = [ ] ;
3746: LD_ADDR_EXP 53
3750: PUSH
3751: EMPTY
3752: ST_TO_ADDR
// armories_def = [ ] ;
3753: LD_ADDR_EXP 54
3757: PUSH
3758: EMPTY
3759: ST_TO_ADDR
// pplants_def = [ ] ;
3760: LD_ADDR_EXP 55
3764: PUSH
3765: EMPTY
3766: ST_TO_ADDR
// deposits_def = [ ] ;
3767: LD_ADDR_EXP 56
3771: PUSH
3772: EMPTY
3773: ST_TO_ADDR
// k11 := Rand ( 1 , 2 ) ;
3774: LD_ADDR_VAR 0 13
3778: PUSH
3779: LD_INT 1
3781: PPUSH
3782: LD_INT 2
3784: PPUSH
3785: CALL_OW 12
3789: ST_TO_ADDR
// k12 := Rand ( 1 , 2 ) ;
3790: LD_ADDR_VAR 0 14
3794: PUSH
3795: LD_INT 1
3797: PPUSH
3798: LD_INT 2
3800: PPUSH
3801: CALL_OW 12
3805: ST_TO_ADDR
// k21 := Rand ( 1 , 2 ) ;
3806: LD_ADDR_VAR 0 15
3810: PUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_INT 2
3816: PPUSH
3817: CALL_OW 12
3821: ST_TO_ADDR
// k22 := Rand ( 1 , 2 ) ;
3822: LD_ADDR_VAR 0 16
3826: PUSH
3827: LD_INT 1
3829: PPUSH
3830: LD_INT 2
3832: PPUSH
3833: CALL_OW 12
3837: ST_TO_ADDR
// deposits_def := [ [ [ [ Res111 , Res112 ] [ k11 ] , [ Res111 , Res112 ] [ 3 - k11 ] ] , [ [ Res121 , Res122 ] [ k12 ] , [ Res121 , Res122 ] [ 3 - k12 ] ] ] , [ [ [ Res211 , Res212 ] [ k21 ] , [ Res211 , Res212 ] [ 3 - k21 ] ] , [ [ Res221 , Res222 ] [ k22 ] , [ Res221 , Res222 ] [ 3 - k22 ] ] ] ] ;
3838: LD_ADDR_EXP 56
3842: PUSH
3843: LD_INT 4
3845: PUSH
3846: LD_INT 5
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: LD_VAR 0 13
3857: ARRAY
3858: PUSH
3859: LD_INT 4
3861: PUSH
3862: LD_INT 5
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: PUSH
3869: LD_INT 3
3871: PUSH
3872: LD_VAR 0 13
3876: MINUS
3877: ARRAY
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: PUSH
3883: LD_INT 6
3885: PUSH
3886: LD_INT 7
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: PUSH
3893: LD_VAR 0 14
3897: ARRAY
3898: PUSH
3899: LD_INT 6
3901: PUSH
3902: LD_INT 7
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: PUSH
3909: LD_INT 3
3911: PUSH
3912: LD_VAR 0 14
3916: MINUS
3917: ARRAY
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PUSH
3927: LD_INT 8
3929: PUSH
3930: LD_INT 9
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: PUSH
3937: LD_VAR 0 15
3941: ARRAY
3942: PUSH
3943: LD_INT 8
3945: PUSH
3946: LD_INT 9
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PUSH
3953: LD_INT 3
3955: PUSH
3956: LD_VAR 0 15
3960: MINUS
3961: ARRAY
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: PUSH
3967: LD_INT 10
3969: PUSH
3970: LD_INT 11
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: PUSH
3977: LD_VAR 0 16
3981: ARRAY
3982: PUSH
3983: LD_INT 10
3985: PUSH
3986: LD_INT 11
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: LD_INT 3
3995: PUSH
3996: LD_VAR 0 16
4000: MINUS
4001: ARRAY
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PUSH
4011: EMPTY
4012: LIST
4013: LIST
4014: ST_TO_ADDR
// for side := 1 to 2 do
4015: LD_ADDR_VAR 0 2
4019: PUSH
4020: DOUBLE
4021: LD_INT 1
4023: DEC
4024: ST_TO_ADDR
4025: LD_INT 2
4027: PUSH
4028: FOR_TO
4029: IFFALSE 5161
// begin dep1 := side * 10 - 9 ;
4031: LD_ADDR_VAR 0 5
4035: PUSH
4036: LD_VAR 0 2
4040: PUSH
4041: LD_INT 10
4043: MUL
4044: PUSH
4045: LD_INT 9
4047: MINUS
4048: ST_TO_ADDR
// dep2 := 20 + side * 4 - 3 ;
4049: LD_ADDR_VAR 0 3
4053: PUSH
4054: LD_INT 20
4056: PUSH
4057: LD_VAR 0 2
4061: PUSH
4062: LD_INT 4
4064: MUL
4065: PLUS
4066: PUSH
4067: LD_INT 3
4069: MINUS
4070: ST_TO_ADDR
// br1 := [ side * 10 - 8 , side * 10 - 7 , side * 10 - 6 , side * 10 - 5 ] ;
4071: LD_ADDR_VAR 0 6
4075: PUSH
4076: LD_VAR 0 2
4080: PUSH
4081: LD_INT 10
4083: MUL
4084: PUSH
4085: LD_INT 8
4087: MINUS
4088: PUSH
4089: LD_VAR 0 2
4093: PUSH
4094: LD_INT 10
4096: MUL
4097: PUSH
4098: LD_INT 7
4100: MINUS
4101: PUSH
4102: LD_VAR 0 2
4106: PUSH
4107: LD_INT 10
4109: MUL
4110: PUSH
4111: LD_INT 6
4113: MINUS
4114: PUSH
4115: LD_VAR 0 2
4119: PUSH
4120: LD_INT 10
4122: MUL
4123: PUSH
4124: LD_INT 5
4126: MINUS
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: ST_TO_ADDR
// br2 := [ 20 + side * 4 - 2 , 20 + side * 4 - 1 , 20 + side * 4 ] ;
4134: LD_ADDR_VAR 0 4
4138: PUSH
4139: LD_INT 20
4141: PUSH
4142: LD_VAR 0 2
4146: PUSH
4147: LD_INT 4
4149: MUL
4150: PLUS
4151: PUSH
4152: LD_INT 2
4154: MINUS
4155: PUSH
4156: LD_INT 20
4158: PUSH
4159: LD_VAR 0 2
4163: PUSH
4164: LD_INT 4
4166: MUL
4167: PLUS
4168: PUSH
4169: LD_INT 1
4171: MINUS
4172: PUSH
4173: LD_INT 20
4175: PUSH
4176: LD_VAR 0 2
4180: PUSH
4181: LD_INT 4
4183: MUL
4184: PLUS
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: LIST
4190: ST_TO_ADDR
// lab := side * 10 - 4 ;
4191: LD_ADDR_VAR 0 7
4195: PUSH
4196: LD_VAR 0 2
4200: PUSH
4201: LD_INT 10
4203: MUL
4204: PUSH
4205: LD_INT 4
4207: MINUS
4208: ST_TO_ADDR
// fac := side * 10 - 3 ;
4209: LD_ADDR_VAR 0 8
4213: PUSH
4214: LD_VAR 0 2
4218: PUSH
4219: LD_INT 10
4221: MUL
4222: PUSH
4223: LD_INT 3
4225: MINUS
4226: ST_TO_ADDR
// arm := side * 10 - 2 ;
4227: LD_ADDR_VAR 0 9
4231: PUSH
4232: LD_VAR 0 2
4236: PUSH
4237: LD_INT 10
4239: MUL
4240: PUSH
4241: LD_INT 2
4243: MINUS
4244: ST_TO_ADDR
// pplant := [ side * 10 - 1 , side * 10 ] ;
4245: LD_ADDR_VAR 0 10
4249: PUSH
4250: LD_VAR 0 2
4254: PUSH
4255: LD_INT 10
4257: MUL
4258: PUSH
4259: LD_INT 1
4261: MINUS
4262: PUSH
4263: LD_VAR 0 2
4267: PUSH
4268: LD_INT 10
4270: MUL
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: ST_TO_ADDR
// depots_def := depots_def ^ [ [ [ GetX ( dep1 ) , GetY ( dep1 ) , GetDir ( dep1 ) ] , [ GetX ( dep2 ) , GetY ( dep2 ) , GetDir ( dep2 ) ] ] ] ;
4276: LD_ADDR_EXP 50
4280: PUSH
4281: LD_EXP 50
4285: PUSH
4286: LD_VAR 0 5
4290: PPUSH
4291: CALL_OW 250
4295: PUSH
4296: LD_VAR 0 5
4300: PPUSH
4301: CALL_OW 251
4305: PUSH
4306: LD_VAR 0 5
4310: PPUSH
4311: CALL_OW 254
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: LIST
4320: PUSH
4321: LD_VAR 0 3
4325: PPUSH
4326: CALL_OW 250
4330: PUSH
4331: LD_VAR 0 3
4335: PPUSH
4336: CALL_OW 251
4340: PUSH
4341: LD_VAR 0 3
4345: PPUSH
4346: CALL_OW 254
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: LIST
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: EMPTY
4361: LIST
4362: ADD
4363: ST_TO_ADDR
// start_def := start_def ^ [ [ [ ShiftX ( GetX ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) ] , [ ShiftX ( GetX ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) ] ] ] ;
4364: LD_ADDR_EXP 49
4368: PUSH
4369: LD_EXP 49
4373: PUSH
4374: LD_VAR 0 5
4378: PPUSH
4379: CALL_OW 250
4383: PPUSH
4384: LD_VAR 0 5
4388: PPUSH
4389: CALL_OW 254
4393: PUSH
4394: LD_INT 6
4396: MOD
4397: PPUSH
4398: LD_INT 6
4400: PPUSH
4401: CALL_OW 272
4405: PUSH
4406: LD_VAR 0 5
4410: PPUSH
4411: CALL_OW 251
4415: PPUSH
4416: LD_VAR 0 5
4420: PPUSH
4421: CALL_OW 254
4425: PUSH
4426: LD_INT 6
4428: MOD
4429: PPUSH
4430: LD_INT 6
4432: PPUSH
4433: CALL_OW 273
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PUSH
4442: LD_VAR 0 3
4446: PPUSH
4447: CALL_OW 250
4451: PPUSH
4452: LD_VAR 0 3
4456: PPUSH
4457: CALL_OW 254
4461: PUSH
4462: LD_INT 6
4464: MOD
4465: PPUSH
4466: LD_INT 6
4468: PPUSH
4469: CALL_OW 272
4473: PUSH
4474: LD_VAR 0 3
4478: PPUSH
4479: CALL_OW 251
4483: PPUSH
4484: LD_VAR 0 3
4488: PPUSH
4489: CALL_OW 254
4493: PUSH
4494: LD_INT 6
4496: MOD
4497: PPUSH
4498: LD_INT 6
4500: PPUSH
4501: CALL_OW 273
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: EMPTY
4515: LIST
4516: ADD
4517: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ [ GetX ( br1 [ 1 ] ) , GetY ( br1 [ 1 ] ) , GetDir ( br1 [ 1 ] ) ] , [ GetX ( br1 [ 2 ] ) , GetY ( br1 [ 2 ] ) , GetDir ( br1 [ 2 ] ) ] , [ GetX ( br1 [ 3 ] ) , GetY ( br1 [ 3 ] ) , GetDir ( br1 [ 3 ] ) ] , [ GetX ( br1 [ 4 ] ) , GetY ( br1 [ 4 ] ) , GetDir ( br1 [ 4 ] ) ] ] , [ [ GetX ( br2 [ 1 ] ) , GetY ( br2 [ 1 ] ) , GetDir ( br2 [ 1 ] ) ] , [ GetX ( br2 [ 2 ] ) , GetY ( br2 [ 2 ] ) , GetDir ( br2 [ 2 ] ) ] , [ GetX ( br2 [ 3 ] ) , GetY ( br2 [ 3 ] ) , GetDir ( br2 [ 3 ] ) ] ] ] ] ;
4518: LD_ADDR_EXP 51
4522: PUSH
4523: LD_EXP 51
4527: PUSH
4528: LD_VAR 0 6
4532: PUSH
4533: LD_INT 1
4535: ARRAY
4536: PPUSH
4537: CALL_OW 250
4541: PUSH
4542: LD_VAR 0 6
4546: PUSH
4547: LD_INT 1
4549: ARRAY
4550: PPUSH
4551: CALL_OW 251
4555: PUSH
4556: LD_VAR 0 6
4560: PUSH
4561: LD_INT 1
4563: ARRAY
4564: PPUSH
4565: CALL_OW 254
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: LIST
4574: PUSH
4575: LD_VAR 0 6
4579: PUSH
4580: LD_INT 2
4582: ARRAY
4583: PPUSH
4584: CALL_OW 250
4588: PUSH
4589: LD_VAR 0 6
4593: PUSH
4594: LD_INT 2
4596: ARRAY
4597: PPUSH
4598: CALL_OW 251
4602: PUSH
4603: LD_VAR 0 6
4607: PUSH
4608: LD_INT 2
4610: ARRAY
4611: PPUSH
4612: CALL_OW 254
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: LIST
4621: PUSH
4622: LD_VAR 0 6
4626: PUSH
4627: LD_INT 3
4629: ARRAY
4630: PPUSH
4631: CALL_OW 250
4635: PUSH
4636: LD_VAR 0 6
4640: PUSH
4641: LD_INT 3
4643: ARRAY
4644: PPUSH
4645: CALL_OW 251
4649: PUSH
4650: LD_VAR 0 6
4654: PUSH
4655: LD_INT 3
4657: ARRAY
4658: PPUSH
4659: CALL_OW 254
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: LIST
4668: PUSH
4669: LD_VAR 0 6
4673: PUSH
4674: LD_INT 4
4676: ARRAY
4677: PPUSH
4678: CALL_OW 250
4682: PUSH
4683: LD_VAR 0 6
4687: PUSH
4688: LD_INT 4
4690: ARRAY
4691: PPUSH
4692: CALL_OW 251
4696: PUSH
4697: LD_VAR 0 6
4701: PUSH
4702: LD_INT 4
4704: ARRAY
4705: PPUSH
4706: CALL_OW 254
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: LIST
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: PUSH
4722: LD_VAR 0 4
4726: PUSH
4727: LD_INT 1
4729: ARRAY
4730: PPUSH
4731: CALL_OW 250
4735: PUSH
4736: LD_VAR 0 4
4740: PUSH
4741: LD_INT 1
4743: ARRAY
4744: PPUSH
4745: CALL_OW 251
4749: PUSH
4750: LD_VAR 0 4
4754: PUSH
4755: LD_INT 1
4757: ARRAY
4758: PPUSH
4759: CALL_OW 254
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: LIST
4768: PUSH
4769: LD_VAR 0 4
4773: PUSH
4774: LD_INT 2
4776: ARRAY
4777: PPUSH
4778: CALL_OW 250
4782: PUSH
4783: LD_VAR 0 4
4787: PUSH
4788: LD_INT 2
4790: ARRAY
4791: PPUSH
4792: CALL_OW 251
4796: PUSH
4797: LD_VAR 0 4
4801: PUSH
4802: LD_INT 2
4804: ARRAY
4805: PPUSH
4806: CALL_OW 254
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: PUSH
4816: LD_VAR 0 4
4820: PUSH
4821: LD_INT 3
4823: ARRAY
4824: PPUSH
4825: CALL_OW 250
4829: PUSH
4830: LD_VAR 0 4
4834: PUSH
4835: LD_INT 3
4837: ARRAY
4838: PPUSH
4839: CALL_OW 251
4843: PUSH
4844: LD_VAR 0 4
4848: PUSH
4849: LD_INT 3
4851: ARRAY
4852: PPUSH
4853: CALL_OW 254
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: EMPTY
4873: LIST
4874: ADD
4875: ST_TO_ADDR
// labs_def := labs_def ^ [ [ [ GetX ( lab ) , GetY ( lab ) , GetDir ( lab ) ] , [ ] ] ] ;
4876: LD_ADDR_EXP 52
4880: PUSH
4881: LD_EXP 52
4885: PUSH
4886: LD_VAR 0 7
4890: PPUSH
4891: CALL_OW 250
4895: PUSH
4896: LD_VAR 0 7
4900: PPUSH
4901: CALL_OW 251
4905: PUSH
4906: LD_VAR 0 7
4910: PPUSH
4911: CALL_OW 254
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: PUSH
4921: EMPTY
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: EMPTY
4928: LIST
4929: ADD
4930: ST_TO_ADDR
// factories_def := factories_def ^ [ [ [ GetX ( fac ) , GetY ( fac ) , GetDir ( fac ) ] , [ ] ] ] ;
4931: LD_ADDR_EXP 53
4935: PUSH
4936: LD_EXP 53
4940: PUSH
4941: LD_VAR 0 8
4945: PPUSH
4946: CALL_OW 250
4950: PUSH
4951: LD_VAR 0 8
4955: PPUSH
4956: CALL_OW 251
4960: PUSH
4961: LD_VAR 0 8
4965: PPUSH
4966: CALL_OW 254
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: EMPTY
4983: LIST
4984: ADD
4985: ST_TO_ADDR
// armories_def := armories_def ^ [ [ [ GetX ( arm ) , GetY ( arm ) , GetDir ( arm ) ] , [ ] ] ] ;
4986: LD_ADDR_EXP 54
4990: PUSH
4991: LD_EXP 54
4995: PUSH
4996: LD_VAR 0 9
5000: PPUSH
5001: CALL_OW 250
5005: PUSH
5006: LD_VAR 0 9
5010: PPUSH
5011: CALL_OW 251
5015: PUSH
5016: LD_VAR 0 9
5020: PPUSH
5021: CALL_OW 254
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: PUSH
5037: EMPTY
5038: LIST
5039: ADD
5040: ST_TO_ADDR
// pplants_def := pplants_def ^ [ [ [ [ GetX ( pplant [ 1 ] ) , GetY ( pplant [ 1 ] ) , GetDir ( pplant [ 1 ] ) ] , [ GetX ( pplant [ 2 ] ) , GetY ( pplant [ 2 ] ) , GetDir ( pplant [ 2 ] ) ] ] , [ ] ] ] ;
5041: LD_ADDR_EXP 55
5045: PUSH
5046: LD_EXP 55
5050: PUSH
5051: LD_VAR 0 10
5055: PUSH
5056: LD_INT 1
5058: ARRAY
5059: PPUSH
5060: CALL_OW 250
5064: PUSH
5065: LD_VAR 0 10
5069: PUSH
5070: LD_INT 1
5072: ARRAY
5073: PPUSH
5074: CALL_OW 251
5078: PUSH
5079: LD_VAR 0 10
5083: PUSH
5084: LD_INT 1
5086: ARRAY
5087: PPUSH
5088: CALL_OW 254
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: PUSH
5098: LD_VAR 0 10
5102: PUSH
5103: LD_INT 2
5105: ARRAY
5106: PPUSH
5107: CALL_OW 250
5111: PUSH
5112: LD_VAR 0 10
5116: PUSH
5117: LD_INT 2
5119: ARRAY
5120: PPUSH
5121: CALL_OW 251
5125: PUSH
5126: LD_VAR 0 10
5130: PUSH
5131: LD_INT 2
5133: ARRAY
5134: PPUSH
5135: CALL_OW 254
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: LIST
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: EMPTY
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PUSH
5155: EMPTY
5156: LIST
5157: ADD
5158: ST_TO_ADDR
// end ;
5159: GO 4028
5161: POP
5162: POP
// for un := 1 to 28 do
5163: LD_ADDR_VAR 0 11
5167: PUSH
5168: DOUBLE
5169: LD_INT 1
5171: DEC
5172: ST_TO_ADDR
5173: LD_INT 28
5175: PUSH
5176: FOR_TO
5177: IFFALSE 5190
// DestroyUnit ( un ) ;
5179: LD_VAR 0 11
5183: PPUSH
5184: CALL_OW 65
5188: GO 5176
5190: POP
5191: POP
// end ;
5192: LD_VAR 0 1
5196: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
5197: LD_INT 0
5199: PPUSH
5200: PPUSH
5201: PPUSH
5202: PPUSH
// result := [ ] ;
5203: LD_ADDR_VAR 0 7
5207: PUSH
5208: EMPTY
5209: ST_TO_ADDR
// for i := 1 to count do
5210: LD_ADDR_VAR 0 8
5214: PUSH
5215: DOUBLE
5216: LD_INT 1
5218: DEC
5219: ST_TO_ADDR
5220: LD_VAR 0 1
5224: PUSH
5225: FOR_TO
5226: IFFALSE 5644
// begin uc_direction := Rand ( 0 , 5 ) ;
5228: LD_ADDR_OWVAR 24
5232: PUSH
5233: LD_INT 0
5235: PPUSH
5236: LD_INT 5
5238: PPUSH
5239: CALL_OW 12
5243: ST_TO_ADDR
// if commander then
5244: LD_LOC 1
5248: IFFALSE 5357
// begin hc_name := mp_sides_players_names [ uc_side ] ;
5250: LD_ADDR_OWVAR 26
5254: PUSH
5255: LD_OWVAR 19
5259: PUSH
5260: LD_OWVAR 20
5264: ARRAY
5265: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
5266: LD_INT 1
5268: PPUSH
5269: LD_INT 2
5271: PPUSH
5272: CALL_OW 12
5276: PPUSH
5277: LD_VAR 0 2
5281: PPUSH
5282: LD_EXP 29
5286: PUSH
5287: LD_INT 2
5289: PLUS
5290: PPUSH
5291: CALL_OW 380
// hc_importance := 105 ;
5295: LD_ADDR_OWVAR 32
5299: PUSH
5300: LD_INT 105
5302: ST_TO_ADDR
// commander := false ;
5303: LD_ADDR_LOC 1
5307: PUSH
5308: LD_INT 0
5310: ST_TO_ADDR
// if Multiplayer then
5311: LD_OWVAR 4
5315: IFFALSE 5355
// begin hc_gallery := MULTIAVATARS ;
5317: LD_ADDR_OWVAR 33
5321: PUSH
5322: LD_STRING MULTIAVATARS
5324: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
5325: LD_ADDR_OWVAR 34
5329: PUSH
5330: LD_OWVAR 20
5334: PPUSH
5335: CALL_OW 525
5339: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
5340: LD_ADDR_OWVAR 27
5344: PUSH
5345: LD_OWVAR 20
5349: PPUSH
5350: CALL_OW 526
5354: ST_TO_ADDR
// end ; end else
5355: GO 5420
// begin hc_name :=  ;
5357: LD_ADDR_OWVAR 26
5361: PUSH
5362: LD_STRING 
5364: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
5365: LD_INT 1
5367: PPUSH
5368: LD_INT 2
5370: PPUSH
5371: CALL_OW 12
5375: PPUSH
5376: LD_VAR 0 2
5380: PPUSH
5381: LD_EXP 29
5385: PPUSH
5386: CALL_OW 380
// hc_importance := 0 ;
5390: LD_ADDR_OWVAR 32
5394: PUSH
5395: LD_INT 0
5397: ST_TO_ADDR
// if Multiplayer then
5398: LD_OWVAR 4
5402: IFFALSE 5420
// begin hc_gallery :=  ;
5404: LD_ADDR_OWVAR 33
5408: PUSH
5409: LD_STRING 
5411: ST_TO_ADDR
// hc_face_number := 0 ;
5412: LD_ADDR_OWVAR 34
5416: PUSH
5417: LD_INT 0
5419: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
5420: LD_ADDR_VAR 0 10
5424: PUSH
5425: CALL_OW 44
5429: ST_TO_ADDR
// if global_defined then
5430: LD_LOC 3
5434: IFFALSE 5574
// begin if ( cl = class_soldier ) then
5436: LD_VAR 0 2
5440: PUSH
5441: LD_INT 1
5443: EQUAL
5444: IFFALSE 5464
// j := i + soldiers_created else
5446: LD_ADDR_VAR 0 9
5450: PUSH
5451: LD_VAR 0 8
5455: PUSH
5456: LD_LOC 4
5460: PLUS
5461: ST_TO_ADDR
5462: GO 5474
// j := i ;
5464: LD_ADDR_VAR 0 9
5468: PUSH
5469: LD_VAR 0 8
5473: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
5474: LD_LOC 2
5478: PUSH
5479: LD_VAR 0 2
5483: ARRAY
5484: PUSH
5485: LD_VAR 0 9
5489: ARRAY
5490: PPUSH
5491: LD_VAR 0 10
5495: PPUSH
5496: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
5500: LD_VAR 0 10
5504: PPUSH
5505: LD_INT 2
5507: PPUSH
5508: LD_LOC 2
5512: PUSH
5513: LD_VAR 0 2
5517: ARRAY
5518: PUSH
5519: LD_VAR 0 9
5523: ARRAY
5524: PPUSH
5525: LD_INT 2
5527: PPUSH
5528: CALL_OW 260
5532: PPUSH
5533: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
5537: LD_VAR 0 10
5541: PPUSH
5542: LD_INT 1
5544: PPUSH
5545: LD_LOC 2
5549: PUSH
5550: LD_VAR 0 2
5554: ARRAY
5555: PUSH
5556: LD_VAR 0 9
5560: ARRAY
5561: PPUSH
5562: LD_INT 1
5564: PPUSH
5565: CALL_OW 260
5569: PPUSH
5570: CALL_OW 239
// end ; if building then
5574: LD_VAR 0 6
5578: IFFALSE 5596
// PlaceHumanInUnit ( un , building ) else
5580: LD_VAR 0 10
5584: PPUSH
5585: LD_VAR 0 6
5589: PPUSH
5590: CALL_OW 52
5594: GO 5623
// PlaceUnitXYR ( un , x , y , r , false ) ;
5596: LD_VAR 0 10
5600: PPUSH
5601: LD_VAR 0 3
5605: PPUSH
5606: LD_VAR 0 4
5610: PPUSH
5611: LD_VAR 0 5
5615: PPUSH
5616: LD_INT 0
5618: PPUSH
5619: CALL_OW 50
// result := result ^ [ un ] ;
5623: LD_ADDR_VAR 0 7
5627: PUSH
5628: LD_VAR 0 7
5632: PUSH
5633: LD_VAR 0 10
5637: PUSH
5638: EMPTY
5639: LIST
5640: ADD
5641: ST_TO_ADDR
// end ;
5642: GO 5225
5644: POP
5645: POP
// if not global_defined then
5646: LD_LOC 3
5650: NOT
5651: IFFALSE 5729
// if ( global_units >= cl ) then
5653: LD_LOC 2
5657: PUSH
5658: LD_VAR 0 2
5662: GREATEREQUAL
5663: IFFALSE 5704
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
5665: LD_ADDR_LOC 2
5669: PUSH
5670: LD_LOC 2
5674: PPUSH
5675: LD_VAR 0 2
5679: PPUSH
5680: LD_LOC 2
5684: PUSH
5685: LD_VAR 0 2
5689: ARRAY
5690: PUSH
5691: LD_VAR 0 7
5695: ADD
5696: PPUSH
5697: CALL_OW 1
5701: ST_TO_ADDR
5702: GO 5729
// global_units := Replace ( global_units , cl , result ) ;
5704: LD_ADDR_LOC 2
5708: PUSH
5709: LD_LOC 2
5713: PPUSH
5714: LD_VAR 0 2
5718: PPUSH
5719: LD_VAR 0 7
5723: PPUSH
5724: CALL_OW 1
5728: ST_TO_ADDR
// if commander then
5729: LD_LOC 1
5733: IFFALSE 5780
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
5735: LD_ADDR_EXP 57
5739: PUSH
5740: LD_EXP 57
5744: PPUSH
5745: LD_OWVAR 20
5749: PPUSH
5750: LD_EXP 57
5754: PUSH
5755: LD_OWVAR 20
5759: ARRAY
5760: PUSH
5761: LD_VAR 0 10
5765: ADD
5766: PPUSH
5767: CALL_OW 1
5771: ST_TO_ADDR
// commander := false ;
5772: LD_ADDR_LOC 1
5776: PUSH
5777: LD_INT 0
5779: ST_TO_ADDR
// end ; end ;
5780: LD_VAR 0 7
5784: RET
// function prepare_side_base ( side , base ) ; var pos , x , y , dir , i , r , un , br , dep , lab , fact , arm , mode , coord , max ; begin
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
5796: PPUSH
5797: PPUSH
5798: PPUSH
5799: PPUSH
5800: PPUSH
5801: PPUSH
5802: PPUSH
// if side in [ 0 , 9 ] then
5803: LD_VAR 0 1
5807: PUSH
5808: LD_INT 0
5810: PUSH
5811: LD_INT 9
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: IN
5818: IFFALSE 5822
// exit ;
5820: GO 8491
// pos := Side_Positions [ side ] ;
5822: LD_ADDR_VAR 0 4
5826: PUSH
5827: LD_EXP 43
5831: PUSH
5832: LD_VAR 0 1
5836: ARRAY
5837: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
5838: LD_ADDR_OWVAR 21
5842: PUSH
5843: LD_EXP 44
5847: PUSH
5848: LD_VAR 0 1
5852: ARRAY
5853: ST_TO_ADDR
// uc_side := side ;
5854: LD_ADDR_OWVAR 20
5858: PUSH
5859: LD_VAR 0 1
5863: ST_TO_ADDR
// x := depots_def [ pos ] [ base ] [ 1 ] ;
5864: LD_ADDR_VAR 0 5
5868: PUSH
5869: LD_EXP 50
5873: PUSH
5874: LD_VAR 0 4
5878: ARRAY
5879: PUSH
5880: LD_VAR 0 2
5884: ARRAY
5885: PUSH
5886: LD_INT 1
5888: ARRAY
5889: ST_TO_ADDR
// y := depots_def [ pos ] [ base ] [ 2 ] ;
5890: LD_ADDR_VAR 0 6
5894: PUSH
5895: LD_EXP 50
5899: PUSH
5900: LD_VAR 0 4
5904: ARRAY
5905: PUSH
5906: LD_VAR 0 2
5910: ARRAY
5911: PUSH
5912: LD_INT 2
5914: ARRAY
5915: ST_TO_ADDR
// dir := depots_def [ pos ] [ base ] [ 3 ] ;
5916: LD_ADDR_VAR 0 7
5920: PUSH
5921: LD_EXP 50
5925: PUSH
5926: LD_VAR 0 4
5930: ARRAY
5931: PUSH
5932: LD_VAR 0 2
5936: ARRAY
5937: PUSH
5938: LD_INT 3
5940: ARRAY
5941: ST_TO_ADDR
// if is_depot [ base ] then
5942: LD_EXP 20
5946: PUSH
5947: LD_VAR 0 2
5951: ARRAY
5952: IFFALSE 6129
// begin if is_depot [ base ] = 1 then
5954: LD_EXP 20
5958: PUSH
5959: LD_VAR 0 2
5963: ARRAY
5964: PUSH
5965: LD_INT 1
5967: EQUAL
5968: IFFALSE 5980
// bc_type = b_depot else
5970: LD_ADDR_OWVAR 42
5974: PUSH
5975: LD_INT 0
5977: ST_TO_ADDR
5978: GO 5988
// bc_type = b_warehouse ;
5980: LD_ADDR_OWVAR 42
5984: PUSH
5985: LD_INT 1
5987: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
5988: LD_ADDR_VAR 0 12
5992: PUSH
5993: LD_VAR 0 5
5997: PPUSH
5998: LD_VAR 0 6
6002: PPUSH
6003: LD_VAR 0 7
6007: PPUSH
6008: CALL_OW 47
6012: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
6013: LD_VAR 0 12
6017: PPUSH
6018: LD_STRING @
6020: PUSH
6021: LD_VAR 0 1
6025: STR
6026: PPUSH
6027: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ base ] [ mat_cans ] ) ;
6031: LD_VAR 0 12
6035: PPUSH
6036: CALL_OW 274
6040: PPUSH
6041: LD_INT 1
6043: PPUSH
6044: LD_EXP 31
6048: PUSH
6049: LD_VAR 0 2
6053: ARRAY
6054: PUSH
6055: LD_INT 1
6057: ARRAY
6058: PPUSH
6059: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ base ] [ mat_oil ] ) ;
6063: LD_VAR 0 12
6067: PPUSH
6068: CALL_OW 274
6072: PPUSH
6073: LD_INT 2
6075: PPUSH
6076: LD_EXP 31
6080: PUSH
6081: LD_VAR 0 2
6085: ARRAY
6086: PUSH
6087: LD_INT 2
6089: ARRAY
6090: PPUSH
6091: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ base ] [ mat_siberit ] ) ;
6095: LD_VAR 0 12
6099: PPUSH
6100: CALL_OW 274
6104: PPUSH
6105: LD_INT 3
6107: PPUSH
6108: LD_EXP 31
6112: PUSH
6113: LD_VAR 0 2
6117: ARRAY
6118: PUSH
6119: LD_INT 3
6121: ARRAY
6122: PPUSH
6123: CALL_OW 277
// end else
6127: GO 6279
// begin for i := 1 to 3 do
6129: LD_ADDR_VAR 0 8
6133: PUSH
6134: DOUBLE
6135: LD_INT 1
6137: DEC
6138: ST_TO_ADDR
6139: LD_INT 3
6141: PUSH
6142: FOR_TO
6143: IFFALSE 6277
// begin r := starting_resources [ base ] [ i ] ;
6145: LD_ADDR_VAR 0 9
6149: PUSH
6150: LD_EXP 31
6154: PUSH
6155: LD_VAR 0 2
6159: ARRAY
6160: PUSH
6161: LD_VAR 0 8
6165: ARRAY
6166: ST_TO_ADDR
// while r >= 10 do
6167: LD_VAR 0 9
6171: PUSH
6172: LD_INT 10
6174: GREATEREQUAL
6175: IFFALSE 6275
// if r > 50 then
6177: LD_VAR 0 9
6181: PUSH
6182: LD_INT 50
6184: GREATER
6185: IFFALSE 6231
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
6187: LD_VAR 0 8
6191: PPUSH
6192: LD_INT 5
6194: PPUSH
6195: LD_VAR 0 5
6199: PPUSH
6200: LD_VAR 0 6
6204: PPUSH
6205: LD_INT 4
6207: PPUSH
6208: LD_INT 0
6210: PPUSH
6211: CALL_OW 60
// r := r - 50 ;
6215: LD_ADDR_VAR 0 9
6219: PUSH
6220: LD_VAR 0 9
6224: PUSH
6225: LD_INT 50
6227: MINUS
6228: ST_TO_ADDR
// end else
6229: GO 6273
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
6231: LD_VAR 0 8
6235: PPUSH
6236: LD_VAR 0 9
6240: PUSH
6241: LD_INT 10
6243: DIV
6244: PPUSH
6245: LD_VAR 0 5
6249: PPUSH
6250: LD_VAR 0 6
6254: PPUSH
6255: LD_INT 4
6257: PPUSH
6258: LD_INT 0
6260: PPUSH
6261: CALL_OW 60
// r := 0 ;
6265: LD_ADDR_VAR 0 9
6269: PUSH
6270: LD_INT 0
6272: ST_TO_ADDR
// end ;
6273: GO 6167
// end ;
6275: GO 6142
6277: POP
6278: POP
// end ; if is_lab [ base ] then
6279: LD_EXP 24
6283: PUSH
6284: LD_VAR 0 2
6288: ARRAY
6289: IFFALSE 6430
// begin if is_lab [ base ] = 1 then
6291: LD_EXP 24
6295: PUSH
6296: LD_VAR 0 2
6300: ARRAY
6301: PUSH
6302: LD_INT 1
6304: EQUAL
6305: IFFALSE 6333
// begin bc_type = b_lab ;
6307: LD_ADDR_OWVAR 42
6311: PUSH
6312: LD_INT 6
6314: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
6315: LD_ADDR_OWVAR 44
6319: PUSH
6320: LD_INT 9
6322: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
6323: LD_ADDR_OWVAR 45
6327: PUSH
6328: LD_INT 9
6330: ST_TO_ADDR
// end else
6331: GO 6357
// begin bc_type = b_lab_full ;
6333: LD_ADDR_OWVAR 42
6337: PUSH
6338: LD_INT 8
6340: ST_TO_ADDR
// bc_kind1 = b_lab_siberium ;
6341: LD_ADDR_OWVAR 44
6345: PUSH
6346: LD_INT 11
6348: ST_TO_ADDR
// bc_kind2 = b_lab_weapon ;
6349: LD_ADDR_OWVAR 45
6353: PUSH
6354: LD_INT 10
6356: ST_TO_ADDR
// end ; lab := CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ base ] [ 1 ] , labs_def [ pos ] [ base ] [ 2 ] , labs_def [ pos ] [ base ] [ 3 ] ) ;
6357: LD_ADDR_VAR 0 13
6361: PUSH
6362: LD_EXP 52
6366: PUSH
6367: LD_VAR 0 4
6371: ARRAY
6372: PUSH
6373: LD_VAR 0 2
6377: ARRAY
6378: PUSH
6379: LD_INT 1
6381: ARRAY
6382: PPUSH
6383: LD_EXP 52
6387: PUSH
6388: LD_VAR 0 4
6392: ARRAY
6393: PUSH
6394: LD_VAR 0 2
6398: ARRAY
6399: PUSH
6400: LD_INT 2
6402: ARRAY
6403: PPUSH
6404: LD_EXP 52
6408: PUSH
6409: LD_VAR 0 4
6413: ARRAY
6414: PUSH
6415: LD_VAR 0 2
6419: ARRAY
6420: PUSH
6421: LD_INT 3
6423: ARRAY
6424: PPUSH
6425: CALL_OW 47
6429: ST_TO_ADDR
// end ; if is_fact [ base ] then
6430: LD_EXP 25
6434: PUSH
6435: LD_VAR 0 2
6439: ARRAY
6440: IFFALSE 6549
// begin if is_fact [ base ] = 1 then
6442: LD_EXP 25
6446: PUSH
6447: LD_VAR 0 2
6451: ARRAY
6452: PUSH
6453: LD_INT 1
6455: EQUAL
6456: IFFALSE 6468
// bc_type = b_workshop else
6458: LD_ADDR_OWVAR 42
6462: PUSH
6463: LD_INT 2
6465: ST_TO_ADDR
6466: GO 6476
// bc_type = b_factory ;
6468: LD_ADDR_OWVAR 42
6472: PUSH
6473: LD_INT 3
6475: ST_TO_ADDR
// fact := CreateAndPlaceBuildingXYD ( factories_def [ pos ] [ base ] [ 1 ] , factories_def [ pos ] [ base ] [ 2 ] , factories_def [ pos ] [ base ] [ 3 ] ) ;
6476: LD_ADDR_VAR 0 14
6480: PUSH
6481: LD_EXP 53
6485: PUSH
6486: LD_VAR 0 4
6490: ARRAY
6491: PUSH
6492: LD_VAR 0 2
6496: ARRAY
6497: PUSH
6498: LD_INT 1
6500: ARRAY
6501: PPUSH
6502: LD_EXP 53
6506: PUSH
6507: LD_VAR 0 4
6511: ARRAY
6512: PUSH
6513: LD_VAR 0 2
6517: ARRAY
6518: PUSH
6519: LD_INT 2
6521: ARRAY
6522: PPUSH
6523: LD_EXP 53
6527: PUSH
6528: LD_VAR 0 4
6532: ARRAY
6533: PUSH
6534: LD_VAR 0 2
6538: ARRAY
6539: PUSH
6540: LD_INT 3
6542: ARRAY
6543: PPUSH
6544: CALL_OW 47
6548: ST_TO_ADDR
// end ; if is_arm [ base ] then
6549: LD_EXP 26
6553: PUSH
6554: LD_VAR 0 2
6558: ARRAY
6559: IFFALSE 6668
// begin if is_arm [ base ] = 1 then
6561: LD_EXP 26
6565: PUSH
6566: LD_VAR 0 2
6570: ARRAY
6571: PUSH
6572: LD_INT 1
6574: EQUAL
6575: IFFALSE 6587
// bc_type = b_armoury else
6577: LD_ADDR_OWVAR 42
6581: PUSH
6582: LD_INT 4
6584: ST_TO_ADDR
6585: GO 6595
// bc_type = b_barracks ;
6587: LD_ADDR_OWVAR 42
6591: PUSH
6592: LD_INT 5
6594: ST_TO_ADDR
// arm := CreateAndPlaceBuildingXYD ( armories_def [ pos ] [ base ] [ 1 ] , armories_def [ pos ] [ base ] [ 2 ] , armories_def [ pos ] [ base ] [ 3 ] ) ;
6595: LD_ADDR_VAR 0 15
6599: PUSH
6600: LD_EXP 54
6604: PUSH
6605: LD_VAR 0 4
6609: ARRAY
6610: PUSH
6611: LD_VAR 0 2
6615: ARRAY
6616: PUSH
6617: LD_INT 1
6619: ARRAY
6620: PPUSH
6621: LD_EXP 54
6625: PUSH
6626: LD_VAR 0 4
6630: ARRAY
6631: PUSH
6632: LD_VAR 0 2
6636: ARRAY
6637: PUSH
6638: LD_INT 2
6640: ARRAY
6641: PPUSH
6642: LD_EXP 54
6646: PUSH
6647: LD_VAR 0 4
6651: ARRAY
6652: PUSH
6653: LD_VAR 0 2
6657: ARRAY
6658: PUSH
6659: LD_INT 3
6661: ARRAY
6662: PPUSH
6663: CALL_OW 47
6667: ST_TO_ADDR
// end ; for i := 1 to number_of_pplants [ base ] do
6668: LD_ADDR_VAR 0 8
6672: PUSH
6673: DOUBLE
6674: LD_INT 1
6676: DEC
6677: ST_TO_ADDR
6678: LD_EXP 22
6682: PUSH
6683: LD_VAR 0 2
6687: ARRAY
6688: PUSH
6689: FOR_TO
6690: IFFALSE 6787
// begin bc_type = b_oil_power ;
6692: LD_ADDR_OWVAR 42
6696: PUSH
6697: LD_INT 26
6699: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( pplants_def [ pos ] [ base ] [ i ] [ 1 ] , pplants_def [ pos ] [ base ] [ i ] [ 2 ] , pplants_def [ pos ] [ base ] [ i ] [ 3 ] ) ;
6700: LD_EXP 55
6704: PUSH
6705: LD_VAR 0 4
6709: ARRAY
6710: PUSH
6711: LD_VAR 0 2
6715: ARRAY
6716: PUSH
6717: LD_VAR 0 8
6721: ARRAY
6722: PUSH
6723: LD_INT 1
6725: ARRAY
6726: PPUSH
6727: LD_EXP 55
6731: PUSH
6732: LD_VAR 0 4
6736: ARRAY
6737: PUSH
6738: LD_VAR 0 2
6742: ARRAY
6743: PUSH
6744: LD_VAR 0 8
6748: ARRAY
6749: PUSH
6750: LD_INT 2
6752: ARRAY
6753: PPUSH
6754: LD_EXP 55
6758: PUSH
6759: LD_VAR 0 4
6763: ARRAY
6764: PUSH
6765: LD_VAR 0 2
6769: ARRAY
6770: PUSH
6771: LD_VAR 0 8
6775: ARRAY
6776: PUSH
6777: LD_INT 3
6779: ARRAY
6780: PPUSH
6781: CALL_OW 47
// end ;
6785: GO 6689
6787: POP
6788: POP
// for i := 1 to deposits [ base ] [ 1 ] do
6789: LD_ADDR_VAR 0 8
6793: PUSH
6794: DOUBLE
6795: LD_INT 1
6797: DEC
6798: ST_TO_ADDR
6799: LD_EXP 28
6803: PUSH
6804: LD_VAR 0 2
6808: ARRAY
6809: PUSH
6810: LD_INT 1
6812: ARRAY
6813: PUSH
6814: FOR_TO
6815: IFFALSE 6952
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i ] , false ) ;
6817: LD_ADDR_VAR 0 17
6821: PUSH
6822: LD_EXP 56
6826: PUSH
6827: LD_VAR 0 4
6831: ARRAY
6832: PUSH
6833: LD_VAR 0 2
6837: ARRAY
6838: PUSH
6839: LD_VAR 0 8
6843: ARRAY
6844: PPUSH
6845: LD_INT 0
6847: PPUSH
6848: CALL_OW 16
6852: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_oil ) ;
6853: LD_VAR 0 17
6857: PUSH
6858: LD_INT 1
6860: ARRAY
6861: PPUSH
6862: LD_VAR 0 17
6866: PUSH
6867: LD_INT 2
6869: ARRAY
6870: PPUSH
6871: LD_INT 2
6873: PPUSH
6874: CALL_OW 62
// if are_mines [ base ] then
6878: LD_EXP 23
6882: PUSH
6883: LD_VAR 0 2
6887: ARRAY
6888: IFFALSE 6950
// begin bc_type = b_oil_mine ;
6890: LD_ADDR_OWVAR 42
6894: PUSH
6895: LD_INT 29
6897: ST_TO_ADDR
// SetResourceVisibility ( coord [ 1 ] , coord [ 2 ] , uc_side ) ;
6898: LD_VAR 0 17
6902: PUSH
6903: LD_INT 1
6905: ARRAY
6906: PPUSH
6907: LD_VAR 0 17
6911: PUSH
6912: LD_INT 2
6914: ARRAY
6915: PPUSH
6916: LD_OWVAR 20
6920: PPUSH
6921: CALL_OW 441
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
6925: LD_VAR 0 17
6929: PUSH
6930: LD_INT 1
6932: ARRAY
6933: PPUSH
6934: LD_VAR 0 17
6938: PUSH
6939: LD_INT 2
6941: ARRAY
6942: PPUSH
6943: LD_INT 0
6945: PPUSH
6946: CALL_OW 47
// end ; end ;
6950: GO 6814
6952: POP
6953: POP
// for i := 1 to deposits [ base ] [ 2 ] do
6954: LD_ADDR_VAR 0 8
6958: PUSH
6959: DOUBLE
6960: LD_INT 1
6962: DEC
6963: ST_TO_ADDR
6964: LD_EXP 28
6968: PUSH
6969: LD_VAR 0 2
6973: ARRAY
6974: PUSH
6975: LD_INT 2
6977: ARRAY
6978: PUSH
6979: FOR_TO
6980: IFFALSE 7139
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i + deposits [ base ] [ 1 ] ] , false ) ;
6982: LD_ADDR_VAR 0 17
6986: PUSH
6987: LD_EXP 56
6991: PUSH
6992: LD_VAR 0 4
6996: ARRAY
6997: PUSH
6998: LD_VAR 0 2
7002: ARRAY
7003: PUSH
7004: LD_VAR 0 8
7008: PUSH
7009: LD_EXP 28
7013: PUSH
7014: LD_VAR 0 2
7018: ARRAY
7019: PUSH
7020: LD_INT 1
7022: ARRAY
7023: PLUS
7024: ARRAY
7025: PPUSH
7026: LD_INT 0
7028: PPUSH
7029: CALL_OW 16
7033: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_siberit ) ;
7034: LD_VAR 0 17
7038: PUSH
7039: LD_INT 1
7041: ARRAY
7042: PPUSH
7043: LD_VAR 0 17
7047: PUSH
7048: LD_INT 2
7050: ARRAY
7051: PPUSH
7052: LD_INT 3
7054: PPUSH
7055: CALL_OW 62
// if are_mines [ base ] and def_siberite_detection then
7059: LD_EXP 23
7063: PUSH
7064: LD_VAR 0 2
7068: ARRAY
7069: PUSH
7070: LD_EXP 8
7074: AND
7075: IFFALSE 7137
// begin bc_type = b_siberite_mine ;
7077: LD_ADDR_OWVAR 42
7081: PUSH
7082: LD_INT 30
7084: ST_TO_ADDR
// SetResourceVisibility ( coord [ 1 ] , coord [ 2 ] , uc_side ) ;
7085: LD_VAR 0 17
7089: PUSH
7090: LD_INT 1
7092: ARRAY
7093: PPUSH
7094: LD_VAR 0 17
7098: PUSH
7099: LD_INT 2
7101: ARRAY
7102: PPUSH
7103: LD_OWVAR 20
7107: PPUSH
7108: CALL_OW 441
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
7112: LD_VAR 0 17
7116: PUSH
7117: LD_INT 1
7119: ARRAY
7120: PPUSH
7121: LD_VAR 0 17
7125: PUSH
7126: LD_INT 2
7128: ARRAY
7129: PPUSH
7130: LD_INT 0
7132: PPUSH
7133: CALL_OW 47
// end ; end ;
7137: GO 6979
7139: POP
7140: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
7141: LD_ADDR_VAR 0 5
7145: PUSH
7146: LD_EXP 49
7150: PUSH
7151: LD_VAR 0 4
7155: ARRAY
7156: PUSH
7157: LD_VAR 0 2
7161: ARRAY
7162: PUSH
7163: LD_INT 1
7165: ARRAY
7166: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
7167: LD_ADDR_VAR 0 6
7171: PUSH
7172: LD_EXP 49
7176: PUSH
7177: LD_VAR 0 4
7181: ARRAY
7182: PUSH
7183: LD_VAR 0 2
7187: ARRAY
7188: PUSH
7189: LD_INT 2
7191: ARRAY
7192: ST_TO_ADDR
// if base = 1 then
7193: LD_VAR 0 2
7197: PUSH
7198: LD_INT 1
7200: EQUAL
7201: IFFALSE 7309
// if def_morale_flags then
7203: LD_EXP 14
7207: IFFALSE 7309
// SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , def_bf_params [ 1 ] ] , [ bfo_defend_bonus_vehicle , def_bf_params [ 2 ] ] , [ bfo_defend_bonus_building , def_bf_params [ 3 ] ] , [ bfo_range , 17 ] , [ bfo_height , def_bf_params [ 4 ] ] ] ) ;
7209: LD_VAR 0 1
7213: PPUSH
7214: LD_VAR 0 5
7218: PPUSH
7219: LD_VAR 0 6
7223: PPUSH
7224: LD_INT 1
7226: PUSH
7227: LD_EXP 36
7231: PUSH
7232: LD_INT 1
7234: ARRAY
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 2
7242: PUSH
7243: LD_EXP 36
7247: PUSH
7248: LD_INT 2
7250: ARRAY
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: LD_INT 3
7258: PUSH
7259: LD_EXP 36
7263: PUSH
7264: LD_INT 3
7266: ARRAY
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 10
7274: PUSH
7275: LD_INT 17
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: LD_INT 20
7284: PUSH
7285: LD_EXP 36
7289: PUSH
7290: LD_INT 4
7292: ARRAY
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: PPUSH
7305: CALL_OW 418
// if number_of_people [ base ] then
7309: LD_EXP 21
7313: PUSH
7314: LD_VAR 0 2
7318: ARRAY
7319: IFFALSE 7528
// begin if No_Mechs then
7321: LD_EXP 69
7325: IFFALSE 7337
// Mode := 2 else
7327: LD_ADDR_VAR 0 16
7331: PUSH
7332: LD_INT 2
7334: ST_TO_ADDR
7335: GO 7345
// Mode := 1 ;
7337: LD_ADDR_VAR 0 16
7341: PUSH
7342: LD_INT 1
7344: ST_TO_ADDR
// neng := number_of_people [ base ] ;
7345: LD_ADDR_LOC 5
7349: PUSH
7350: LD_EXP 21
7354: PUSH
7355: LD_VAR 0 2
7359: ARRAY
7360: ST_TO_ADDR
// nmech := neng div [ 4 , 3 ] [ Mode ] ;
7361: LD_ADDR_LOC 7
7365: PUSH
7366: LD_LOC 5
7370: PUSH
7371: LD_INT 4
7373: PUSH
7374: LD_INT 3
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: PUSH
7381: LD_VAR 0 16
7385: ARRAY
7386: DIV
7387: ST_TO_ADDR
// neng := neng - nmech ;
7388: LD_ADDR_LOC 5
7392: PUSH
7393: LD_LOC 5
7397: PUSH
7398: LD_LOC 7
7402: MINUS
7403: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
7404: LD_ADDR_LOC 6
7408: PUSH
7409: LD_LOC 5
7413: PUSH
7414: LD_INT 3
7416: PUSH
7417: LD_INT 2
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: LD_VAR 0 16
7428: ARRAY
7429: DIV
7430: ST_TO_ADDR
// if ( nsci < 1 ) then
7431: LD_LOC 6
7435: PUSH
7436: LD_INT 1
7438: LESS
7439: IFFALSE 7449
// nsci := 1 ;
7441: LD_ADDR_LOC 6
7445: PUSH
7446: LD_INT 1
7448: ST_TO_ADDR
// neng := neng - nsci ;
7449: LD_ADDR_LOC 5
7453: PUSH
7454: LD_LOC 5
7458: PUSH
7459: LD_LOC 6
7463: MINUS
7464: ST_TO_ADDR
// nsol := [ neng div 2 , 0 ] [ Mode ] ;
7465: LD_ADDR_LOC 8
7469: PUSH
7470: LD_LOC 5
7474: PUSH
7475: LD_INT 2
7477: DIV
7478: PUSH
7479: LD_INT 0
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: PUSH
7486: LD_VAR 0 16
7490: ARRAY
7491: ST_TO_ADDR
// neng := neng - nsol ;
7492: LD_ADDR_LOC 5
7496: PUSH
7497: LD_LOC 5
7501: PUSH
7502: LD_LOC 8
7506: MINUS
7507: ST_TO_ADDR
// if ( neng < 1 ) then
7508: LD_LOC 5
7512: PUSH
7513: LD_INT 1
7515: LESS
7516: IFFALSE 7526
// neng := 1 ;
7518: LD_ADDR_LOC 5
7522: PUSH
7523: LD_INT 1
7525: ST_TO_ADDR
// end else
7526: GO 7560
// begin neng := 0 ;
7528: LD_ADDR_LOC 5
7532: PUSH
7533: LD_INT 0
7535: ST_TO_ADDR
// nsci := 0 ;
7536: LD_ADDR_LOC 6
7540: PUSH
7541: LD_INT 0
7543: ST_TO_ADDR
// nmech := 0 ;
7544: LD_ADDR_LOC 7
7548: PUSH
7549: LD_INT 0
7551: ST_TO_ADDR
// nsol := 0 ;
7552: LD_ADDR_LOC 8
7556: PUSH
7557: LD_INT 0
7559: ST_TO_ADDR
// end ; commander := true ;
7560: LD_ADDR_LOC 1
7564: PUSH
7565: LD_INT 1
7567: ST_TO_ADDR
// soldiers_created := 0 ;
7568: LD_ADDR_LOC 4
7572: PUSH
7573: LD_INT 0
7575: ST_TO_ADDR
// for i := 1 to are_breastworks [ base ] do
7576: LD_ADDR_VAR 0 8
7580: PUSH
7581: DOUBLE
7582: LD_INT 1
7584: DEC
7585: ST_TO_ADDR
7586: LD_EXP 27
7590: PUSH
7591: LD_VAR 0 2
7595: ARRAY
7596: PUSH
7597: FOR_TO
7598: IFFALSE 7884
// begin if are_breastworks [ base ] [ i ] = 1 then
7600: LD_EXP 27
7604: PUSH
7605: LD_VAR 0 2
7609: ARRAY
7610: PUSH
7611: LD_VAR 0 8
7615: ARRAY
7616: PUSH
7617: LD_INT 1
7619: EQUAL
7620: IFFALSE 7632
// bc_type := b_breastwork else
7622: LD_ADDR_OWVAR 42
7626: PUSH
7627: LD_INT 31
7629: ST_TO_ADDR
7630: GO 7640
// bc_type := b_bunker ;
7632: LD_ADDR_OWVAR 42
7636: PUSH
7637: LD_INT 32
7639: ST_TO_ADDR
// x := breastworks_def [ pos ] [ base ] [ i ] [ 1 ] ;
7640: LD_ADDR_VAR 0 5
7644: PUSH
7645: LD_EXP 51
7649: PUSH
7650: LD_VAR 0 4
7654: ARRAY
7655: PUSH
7656: LD_VAR 0 2
7660: ARRAY
7661: PUSH
7662: LD_VAR 0 8
7666: ARRAY
7667: PUSH
7668: LD_INT 1
7670: ARRAY
7671: ST_TO_ADDR
// y := breastworks_def [ pos ] [ base ] [ i ] [ 2 ] ;
7672: LD_ADDR_VAR 0 6
7676: PUSH
7677: LD_EXP 51
7681: PUSH
7682: LD_VAR 0 4
7686: ARRAY
7687: PUSH
7688: LD_VAR 0 2
7692: ARRAY
7693: PUSH
7694: LD_VAR 0 8
7698: ARRAY
7699: PUSH
7700: LD_INT 2
7702: ARRAY
7703: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ base ] [ i ] [ 3 ] ;
7704: LD_ADDR_VAR 0 7
7708: PUSH
7709: LD_EXP 51
7713: PUSH
7714: LD_VAR 0 4
7718: ARRAY
7719: PUSH
7720: LD_VAR 0 2
7724: ARRAY
7725: PUSH
7726: LD_VAR 0 8
7730: ARRAY
7731: PUSH
7732: LD_INT 3
7734: ARRAY
7735: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
7736: LD_ADDR_VAR 0 11
7740: PUSH
7741: LD_VAR 0 5
7745: PPUSH
7746: LD_VAR 0 6
7750: PPUSH
7751: LD_VAR 0 7
7755: PPUSH
7756: CALL_OW 47
7760: ST_TO_ADDR
// if bc_type = b_bunker then
7761: LD_OWVAR 42
7765: PUSH
7766: LD_INT 32
7768: EQUAL
7769: IFFALSE 7846
// case uc_nation of nation_american :
7771: LD_OWVAR 21
7775: PUSH
7776: LD_INT 1
7778: DOUBLE
7779: EQUAL
7780: IFTRUE 7784
7782: GO 7799
7784: POP
// PlaceWeaponTurret ( br , us_machine_gun ) ; nation_arabian :
7785: LD_VAR 0 11
7789: PPUSH
7790: LD_INT 2
7792: PPUSH
7793: CALL_OW 431
7797: GO 7846
7799: LD_INT 2
7801: DOUBLE
7802: EQUAL
7803: IFTRUE 7807
7805: GO 7822
7807: POP
// PlaceWeaponTurret ( br , ar_double_machine_gun ) ; nation_russian :
7808: LD_VAR 0 11
7812: PPUSH
7813: LD_INT 24
7815: PPUSH
7816: CALL_OW 431
7820: GO 7846
7822: LD_INT 3
7824: DOUBLE
7825: EQUAL
7826: IFTRUE 7830
7828: GO 7845
7830: POP
// PlaceWeaponTurret ( br , ru_heavy_machine_gun ) ; end ;
7831: LD_VAR 0 11
7835: PPUSH
7836: LD_INT 42
7838: PPUSH
7839: CALL_OW 431
7843: GO 7846
7845: POP
// if i <= nsol then
7846: LD_VAR 0 8
7850: PUSH
7851: LD_LOC 8
7855: LESSEQUAL
7856: IFFALSE 7882
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
7858: LD_INT 1
7860: PPUSH
7861: LD_INT 1
7863: PPUSH
7864: LD_INT 0
7866: PPUSH
7867: LD_INT 0
7869: PPUSH
7870: LD_INT 0
7872: PPUSH
7873: LD_VAR 0 11
7877: PPUSH
7878: CALL 5197 0 6
// end ;
7882: GO 7597
7884: POP
7885: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
7886: LD_ADDR_VAR 0 5
7890: PUSH
7891: LD_EXP 49
7895: PUSH
7896: LD_VAR 0 4
7900: ARRAY
7901: PUSH
7902: LD_VAR 0 2
7906: ARRAY
7907: PUSH
7908: LD_INT 1
7910: ARRAY
7911: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
7912: LD_ADDR_VAR 0 6
7916: PUSH
7917: LD_EXP 49
7921: PUSH
7922: LD_VAR 0 4
7926: ARRAY
7927: PUSH
7928: LD_VAR 0 2
7932: ARRAY
7933: PUSH
7934: LD_INT 2
7936: ARRAY
7937: ST_TO_ADDR
// if nsol > are_breastworks [ base ] then
7938: LD_LOC 8
7942: PUSH
7943: LD_EXP 27
7947: PUSH
7948: LD_VAR 0 2
7952: ARRAY
7953: GREATER
7954: IFFALSE 8042
// if arm then
7956: LD_VAR 0 15
7960: IFFALSE 8002
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , 0 , 0 , 0 , arm ) else
7962: LD_LOC 8
7966: PUSH
7967: LD_EXP 27
7971: PUSH
7972: LD_VAR 0 2
7976: ARRAY
7977: MINUS
7978: PPUSH
7979: LD_INT 1
7981: PPUSH
7982: LD_INT 0
7984: PPUSH
7985: LD_INT 0
7987: PPUSH
7988: LD_INT 0
7990: PPUSH
7991: LD_VAR 0 15
7995: PPUSH
7996: CALL 5197 0 6
8000: GO 8042
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , x , y , 5 , 0 ) ;
8002: LD_LOC 8
8006: PUSH
8007: LD_EXP 27
8011: PUSH
8012: LD_VAR 0 2
8016: ARRAY
8017: MINUS
8018: PPUSH
8019: LD_INT 1
8021: PPUSH
8022: LD_VAR 0 5
8026: PPUSH
8027: LD_VAR 0 6
8031: PPUSH
8032: LD_INT 5
8034: PPUSH
8035: LD_INT 0
8037: PPUSH
8038: CALL 5197 0 6
// if dep then
8042: LD_VAR 0 12
8046: IFFALSE 8076
// prepare_people ( neng , class_engineer , 0 , 0 , 0 , dep ) else
8048: LD_LOC 5
8052: PPUSH
8053: LD_INT 2
8055: PPUSH
8056: LD_INT 0
8058: PPUSH
8059: LD_INT 0
8061: PPUSH
8062: LD_INT 0
8064: PPUSH
8065: LD_VAR 0 12
8069: PPUSH
8070: CALL 5197 0 6
8074: GO 8104
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
8076: LD_LOC 5
8080: PPUSH
8081: LD_INT 2
8083: PPUSH
8084: LD_VAR 0 5
8088: PPUSH
8089: LD_VAR 0 6
8093: PPUSH
8094: LD_INT 5
8096: PPUSH
8097: LD_INT 0
8099: PPUSH
8100: CALL 5197 0 6
// if fact then
8104: LD_VAR 0 14
8108: IFFALSE 8138
// prepare_people ( nmech , class_mechanic , 0 , 0 , 0 , fact ) else
8110: LD_LOC 7
8114: PPUSH
8115: LD_INT 3
8117: PPUSH
8118: LD_INT 0
8120: PPUSH
8121: LD_INT 0
8123: PPUSH
8124: LD_INT 0
8126: PPUSH
8127: LD_VAR 0 14
8131: PPUSH
8132: CALL 5197 0 6
8136: GO 8166
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
8138: LD_LOC 7
8142: PPUSH
8143: LD_INT 3
8145: PPUSH
8146: LD_VAR 0 5
8150: PPUSH
8151: LD_VAR 0 6
8155: PPUSH
8156: LD_INT 5
8158: PPUSH
8159: LD_INT 0
8161: PPUSH
8162: CALL 5197 0 6
// if lab then
8166: LD_VAR 0 13
8170: IFFALSE 8200
// prepare_people ( nsci , class_scientistic , 0 , 0 , 0 , lab ) else
8172: LD_LOC 6
8176: PPUSH
8177: LD_INT 4
8179: PPUSH
8180: LD_INT 0
8182: PPUSH
8183: LD_INT 0
8185: PPUSH
8186: LD_INT 0
8188: PPUSH
8189: LD_VAR 0 13
8193: PPUSH
8194: CALL 5197 0 6
8198: GO 8228
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
8200: LD_LOC 6
8204: PPUSH
8205: LD_INT 4
8207: PPUSH
8208: LD_VAR 0 5
8212: PPUSH
8213: LD_VAR 0 6
8217: PPUSH
8218: LD_INT 5
8220: PPUSH
8221: LD_INT 0
8223: PPUSH
8224: CALL 5197 0 6
// max = 0 ;
8228: LD_ADDR_VAR 0 18
8232: PUSH
8233: LD_INT 0
8235: ST_TO_ADDR
// for un in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
8236: LD_ADDR_VAR 0 10
8240: PUSH
8241: LD_INT 22
8243: PUSH
8244: LD_VAR 0 1
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: PUSH
8253: LD_INT 21
8255: PUSH
8256: LD_INT 1
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: PPUSH
8267: CALL_OW 69
8271: PUSH
8272: FOR_IN
8273: IFFALSE 8315
// begin if GetSkill ( un , skill_engineering ) > max then
8275: LD_VAR 0 10
8279: PPUSH
8280: LD_INT 2
8282: PPUSH
8283: CALL_OW 259
8287: PUSH
8288: LD_VAR 0 18
8292: GREATER
8293: IFFALSE 8313
// max := GetSkill ( un , skill_engineering ) ;
8295: LD_ADDR_VAR 0 18
8299: PUSH
8300: LD_VAR 0 10
8304: PPUSH
8305: LD_INT 2
8307: PPUSH
8308: CALL_OW 259
8312: ST_TO_ADDR
// end ;
8313: GO 8272
8315: POP
8316: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) , max ) ;
8317: LD_INT 22
8319: PUSH
8320: LD_VAR 0 1
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 21
8331: PUSH
8332: LD_INT 3
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PPUSH
8343: CALL_OW 69
8347: PPUSH
8348: LD_VAR 0 18
8352: PPUSH
8353: CALL_OW 241
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
8357: LD_EXP 8
8361: PUSH
8362: LD_INT 20
8364: PPUSH
8365: LD_VAR 0 1
8369: PPUSH
8370: CALL_OW 321
8374: PUSH
8375: LD_INT 1
8377: EQUAL
8378: AND
8379: IFFALSE 8396
// SetTech ( tech_SibDet , side , state_researched ) ;
8381: LD_INT 20
8383: PPUSH
8384: LD_VAR 0 1
8388: PPUSH
8389: LD_INT 2
8391: PPUSH
8392: CALL_OW 322
// if def_siberite_bomb = 1 then
8396: LD_EXP 15
8400: PUSH
8401: LD_INT 1
8403: EQUAL
8404: IFFALSE 8438
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
8406: LD_INT 25
8408: PPUSH
8409: LD_VAR 0 1
8413: PPUSH
8414: LD_INT 1
8416: PPUSH
8417: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
8421: LD_INT 73
8423: PPUSH
8424: LD_VAR 0 1
8428: PPUSH
8429: LD_INT 1
8431: PPUSH
8432: CALL_OW 322
// end else
8436: GO 8468
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
8438: LD_INT 25
8440: PPUSH
8441: LD_VAR 0 1
8445: PPUSH
8446: LD_INT 0
8448: PPUSH
8449: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
8453: LD_INT 73
8455: PPUSH
8456: LD_VAR 0 1
8460: PPUSH
8461: LD_INT 0
8463: PPUSH
8464: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
8468: LD_INT 24
8470: PPUSH
8471: LD_VAR 0 1
8475: PPUSH
8476: LD_INT 0
8478: PPUSH
8479: CALL_OW 322
// global_defined := true ;
8483: LD_ADDR_LOC 3
8487: PUSH
8488: LD_INT 1
8490: ST_TO_ADDR
// end ;
8491: LD_VAR 0 3
8495: RET
// every 0 0$1 do
8496: GO 8498
8498: DISABLE
// if ( def_siberite_bomb > 1 ) then
8499: LD_EXP 15
8503: PUSH
8504: LD_INT 1
8506: GREATER
8507: IFFALSE 8522
// begin wait ( siberite_bomb_Delay ) ;
8509: LD_EXP 38
8513: PPUSH
8514: CALL_OW 67
// EnableSibFiss ;
8518: CALL 8523 0 0
// end ;
8522: END
// function EnableSibFiss ; var i ; begin
8523: LD_INT 0
8525: PPUSH
8526: PPUSH
// for i := 1 to 8 do
8527: LD_ADDR_VAR 0 2
8531: PUSH
8532: DOUBLE
8533: LD_INT 1
8535: DEC
8536: ST_TO_ADDR
8537: LD_INT 8
8539: PUSH
8540: FOR_TO
8541: IFFALSE 8572
// if Side_Positions [ i ] then
8543: LD_EXP 43
8547: PUSH
8548: LD_VAR 0 2
8552: ARRAY
8553: IFFALSE 8570
// SetTech ( tech_SibFiss , i , state_enabled ) ;
8555: LD_INT 25
8557: PPUSH
8558: LD_VAR 0 2
8562: PPUSH
8563: LD_INT 1
8565: PPUSH
8566: CALL_OW 322
8570: GO 8540
8572: POP
8573: POP
// end ;
8574: LD_VAR 0 1
8578: RET
// function prepare_sides ; var i ; begin
8579: LD_INT 0
8581: PPUSH
8582: PPUSH
// global_units := [ ] ;
8583: LD_ADDR_LOC 2
8587: PUSH
8588: EMPTY
8589: ST_TO_ADDR
// global_defined := false ;
8590: LD_ADDR_LOC 3
8594: PUSH
8595: LD_INT 0
8597: ST_TO_ADDR
// for i := 1 to Side_Positions do
8598: LD_ADDR_VAR 0 2
8602: PUSH
8603: DOUBLE
8604: LD_INT 1
8606: DEC
8607: ST_TO_ADDR
8608: LD_EXP 43
8612: PUSH
8613: FOR_TO
8614: IFFALSE 8654
// if Side_Positions [ i ] then
8616: LD_EXP 43
8620: PUSH
8621: LD_VAR 0 2
8625: ARRAY
8626: IFFALSE 8652
// begin prepare_side_base ( i , 1 ) ;
8628: LD_VAR 0 2
8632: PPUSH
8633: LD_INT 1
8635: PPUSH
8636: CALL 5785 0 2
// prepare_side_base ( i , 2 ) ;
8640: LD_VAR 0 2
8644: PPUSH
8645: LD_INT 2
8647: PPUSH
8648: CALL 5785 0 2
// end ;
8652: GO 8613
8654: POP
8655: POP
// end ;
8656: LD_VAR 0 1
8660: RET
// starting begin disable ( 98 ) ;
8661: LD_INT 98
8663: DISABLE_MARKED
// disable ( 400 ) ;
8664: LD_INT 400
8666: DISABLE_MARKED
// disable ( 401 ) ;
8667: LD_INT 401
8669: DISABLE_MARKED
// disable ( 600 ) ;
8670: LD_INT 600
8672: DISABLE_MARKED
// enable_human_prediction := true ;
8673: LD_ADDR_OWVAR 51
8677: PUSH
8678: LD_INT 1
8680: ST_TO_ADDR
// mp_selectmsg := true ;
8681: LD_ADDR_OWVAR 13
8685: PUSH
8686: LD_INT 1
8688: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
8689: CALL 68 0 0
// prepare_map_coordinates ;
8693: CALL 3700 0 0
// ResetFog ;
8697: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
8701: LD_OWVAR 2
8705: PPUSH
8706: CALL_OW 520
// AnimateTrees ( true ) ;
8710: LD_INT 1
8712: PPUSH
8713: CALL_OW 573
// prepare_sides ;
8717: CALL 8579 0 0
// Init_Win_Condition ;
8721: CALL 16137 0 0
// InitLimits ;
8725: CALL 14797 0 0
// ShowTimer ;
8729: CALL 15734 0 0
// music_nat := Side_Nations [ your_side ] ;
8733: LD_ADDR_OWVAR 71
8737: PUSH
8738: LD_EXP 44
8742: PUSH
8743: LD_OWVAR 2
8747: ARRAY
8748: ST_TO_ADDR
// if IAmSpec then
8749: CALL_OW 531
8753: IFFALSE 8777
// begin fogoff ( true ) ;
8755: LD_INT 1
8757: PPUSH
8758: CALL_OW 344
// CenterNowOnXY ( 109 , 61 ) ;
8762: LD_INT 109
8764: PPUSH
8765: LD_INT 61
8767: PPUSH
8768: CALL_OW 86
// enable ( 400 ) ;
8772: LD_INT 400
8774: ENABLE_MARKED
// end else
8775: GO 8831
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 2 ] ) ;
8777: LD_EXP 49
8781: PUSH
8782: LD_EXP 43
8786: PUSH
8787: LD_OWVAR 2
8791: ARRAY
8792: ARRAY
8793: PUSH
8794: LD_INT 1
8796: ARRAY
8797: PUSH
8798: LD_INT 1
8800: ARRAY
8801: PPUSH
8802: LD_EXP 49
8806: PUSH
8807: LD_EXP 43
8811: PUSH
8812: LD_OWVAR 2
8816: ARRAY
8817: ARRAY
8818: PUSH
8819: LD_INT 1
8821: ARRAY
8822: PUSH
8823: LD_INT 2
8825: ARRAY
8826: PPUSH
8827: CALL_OW 86
// end ; InitApeman ;
8831: CALL 10231 0 0
// if def_builduptime then
8835: LD_EXP 17
8839: IFFALSE 8845
// BeginBuildUp ;
8841: CALL 13421 0 0
// end ; end_of_file
8845: END
// every 1 1$0 + 0 0$0.3 do
8846: GO 8848
8848: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
8849: LD_INT 4
8851: PPUSH
8852: LD_INT 5
8854: PPUSH
8855: CALL_OW 12
8859: PPUSH
8860: LD_INT 1
8862: PPUSH
8863: CALL_OW 57
// enable ;
8867: ENABLE
// end ;
8868: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
8869: GO 8871
8871: DISABLE
8872: LD_INT 0
8874: PPUSH
8875: PPUSH
// begin case tick of 1 .. 1 1$0 :
8876: LD_OWVAR 1
8880: PUSH
8881: LD_INT 1
8883: DOUBLE
8884: GREATEREQUAL
8885: IFFALSE 8893
8887: LD_INT 2100
8889: DOUBLE
8890: LESSEQUAL
8891: IFTRUE 8895
8893: GO 8923
8895: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
8896: LD_EXP 32
8900: PUSH
8901: LD_INT 100
8903: DIVREAL
8904: PUSH
8905: LD_INT 350
8907: PPUSH
8908: LD_INT 700
8910: PPUSH
8911: CALL_OW 12
8915: MUL
8916: PPUSH
8917: CALL_OW 67
8921: GO 9225
8923: LD_INT 2100
8925: PUSH
8926: LD_INT 1
8928: PLUS
8929: DOUBLE
8930: GREATEREQUAL
8931: IFFALSE 8939
8933: LD_INT 10500
8935: DOUBLE
8936: LESSEQUAL
8937: IFTRUE 8941
8939: GO 8969
8941: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
8942: LD_EXP 32
8946: PUSH
8947: LD_INT 100
8949: DIVREAL
8950: PUSH
8951: LD_INT 700
8953: PPUSH
8954: LD_INT 1225
8956: PPUSH
8957: CALL_OW 12
8961: MUL
8962: PPUSH
8963: CALL_OW 67
8967: GO 9225
8969: LD_INT 10500
8971: PUSH
8972: LD_INT 1
8974: PLUS
8975: DOUBLE
8976: GREATEREQUAL
8977: IFFALSE 8985
8979: LD_INT 21000
8981: DOUBLE
8982: LESSEQUAL
8983: IFTRUE 8987
8985: GO 9015
8987: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
8988: LD_EXP 32
8992: PUSH
8993: LD_INT 100
8995: DIVREAL
8996: PUSH
8997: LD_INT 1225
8999: PPUSH
9000: LD_INT 1750
9002: PPUSH
9003: CALL_OW 12
9007: MUL
9008: PPUSH
9009: CALL_OW 67
9013: GO 9225
9015: LD_INT 21000
9017: PUSH
9018: LD_INT 1
9020: PLUS
9021: DOUBLE
9022: GREATEREQUAL
9023: IFFALSE 9031
9025: LD_INT 42000
9027: DOUBLE
9028: LESSEQUAL
9029: IFTRUE 9033
9031: GO 9061
9033: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
9034: LD_EXP 32
9038: PUSH
9039: LD_INT 100
9041: DIVREAL
9042: PUSH
9043: LD_INT 1750
9045: PPUSH
9046: LD_INT 2450
9048: PPUSH
9049: CALL_OW 12
9053: MUL
9054: PPUSH
9055: CALL_OW 67
9059: GO 9225
9061: LD_INT 42000
9063: PUSH
9064: LD_INT 1
9066: PLUS
9067: DOUBLE
9068: GREATEREQUAL
9069: IFFALSE 9077
9071: LD_INT 63000
9073: DOUBLE
9074: LESSEQUAL
9075: IFTRUE 9079
9077: GO 9107
9079: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
9080: LD_EXP 32
9084: PUSH
9085: LD_INT 100
9087: DIVREAL
9088: PUSH
9089: LD_INT 2450
9091: PPUSH
9092: LD_INT 2800
9094: PPUSH
9095: CALL_OW 12
9099: MUL
9100: PPUSH
9101: CALL_OW 67
9105: GO 9225
9107: LD_INT 63000
9109: PUSH
9110: LD_INT 1
9112: PLUS
9113: DOUBLE
9114: GREATEREQUAL
9115: IFFALSE 9123
9117: LD_INT 105000
9119: DOUBLE
9120: LESSEQUAL
9121: IFTRUE 9125
9123: GO 9153
9125: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
9126: LD_EXP 32
9130: PUSH
9131: LD_INT 100
9133: DIVREAL
9134: PUSH
9135: LD_INT 2800
9137: PPUSH
9138: LD_INT 3325
9140: PPUSH
9141: CALL_OW 12
9145: MUL
9146: PPUSH
9147: CALL_OW 67
9151: GO 9225
9153: LD_INT 105000
9155: PUSH
9156: LD_INT 1
9158: PLUS
9159: DOUBLE
9160: GREATEREQUAL
9161: IFFALSE 9169
9163: LD_INT 630000
9165: DOUBLE
9166: LESSEQUAL
9167: IFTRUE 9171
9169: GO 9199
9171: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
9172: LD_EXP 32
9176: PUSH
9177: LD_INT 100
9179: DIVREAL
9180: PUSH
9181: LD_INT 3325
9183: PPUSH
9184: LD_INT 4200
9186: PPUSH
9187: CALL_OW 12
9191: MUL
9192: PPUSH
9193: CALL_OW 67
9197: GO 9225
9199: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
9200: LD_EXP 32
9204: PUSH
9205: LD_INT 100
9207: DIVREAL
9208: PUSH
9209: LD_INT 4200
9211: PPUSH
9212: LD_INT 5250
9214: PPUSH
9215: CALL_OW 12
9219: MUL
9220: PPUSH
9221: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
9225: LD_ADDR_VAR 0 2
9229: PUSH
9230: LD_INT 3
9232: PPUSH
9233: LD_INT 5
9235: PPUSH
9236: CALL_OW 12
9240: ST_TO_ADDR
// for i = 1 to 2 do
9241: LD_ADDR_VAR 0 1
9245: PUSH
9246: DOUBLE
9247: LD_INT 1
9249: DEC
9250: ST_TO_ADDR
9251: LD_INT 2
9253: PUSH
9254: FOR_TO
9255: IFFALSE 9282
// CreateCratesArea ( amount , BuildUpAreas [ i ] , true ) ;
9257: LD_VAR 0 2
9261: PPUSH
9262: LD_EXP 65
9266: PUSH
9267: LD_VAR 0 1
9271: ARRAY
9272: PPUSH
9273: LD_INT 1
9275: PPUSH
9276: CALL_OW 55
9280: GO 9254
9282: POP
9283: POP
// enable ;
9284: ENABLE
// end ;
9285: PPOPN 2
9287: END
// every 0 0$20 + 0 0$0.9 do var i , filter ;
9288: GO 9290
9290: DISABLE
9291: LD_INT 0
9293: PPUSH
9294: PPUSH
// begin if GetResourceArea ( Valley , mat_cans ) < ( ( 300 - shipments_density ) / 100 * 5 ) then
9295: LD_INT 12
9297: PPUSH
9298: LD_INT 1
9300: PPUSH
9301: CALL_OW 287
9305: PUSH
9306: LD_INT 300
9308: PUSH
9309: LD_EXP 32
9313: MINUS
9314: PUSH
9315: LD_INT 100
9317: DIVREAL
9318: PUSH
9319: LD_INT 5
9321: MUL
9322: LESS
9323: IFFALSE 9346
// CreateCratesArea ( Rand ( 3 , 5 ) , Valley , true ) ;
9325: LD_INT 3
9327: PPUSH
9328: LD_INT 5
9330: PPUSH
9331: CALL_OW 12
9335: PPUSH
9336: LD_INT 12
9338: PPUSH
9339: LD_INT 1
9341: PPUSH
9342: CALL_OW 55
// enable ;
9346: ENABLE
// end ; end_of_file
9347: PPOPN 2
9349: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
9350: LD_VAR 0 1
9354: PPUSH
9355: CALL_OW 266
9359: PUSH
9360: LD_INT 0
9362: PUSH
9363: LD_INT 1
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: IN
9370: IFFALSE 9395
// SetBName ( b , @ & GetSide ( b ) ) ;
9372: LD_VAR 0 1
9376: PPUSH
9377: LD_STRING @
9379: PUSH
9380: LD_VAR 0 1
9384: PPUSH
9385: CALL_OW 255
9389: STR
9390: PPUSH
9391: CALL_OW 500
// if def_game_rules then
9395: LD_EXP 68
9399: IFFALSE 9436
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
9401: LD_VAR 0 1
9405: PPUSH
9406: LD_VAR 0 1
9410: PPUSH
9411: CALL_OW 266
9415: PPUSH
9416: LD_VAR 0 1
9420: PPUSH
9421: CALL_OW 255
9425: PPUSH
9426: LD_INT 0
9428: PPUSH
9429: LD_INT 1
9431: PPUSH
9432: CALL 15198 0 5
// end ;
9436: PPOPN 2
9438: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
9439: LD_VAR 0 1
9443: PPUSH
9444: CALL_OW 266
9448: PUSH
9449: LD_INT 0
9451: PUSH
9452: LD_INT 1
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: IN
9459: IFFALSE 9484
// SetBName ( b , @ & GetSide ( b ) ) ;
9461: LD_VAR 0 1
9465: PPUSH
9466: LD_STRING @
9468: PUSH
9469: LD_VAR 0 1
9473: PPUSH
9474: CALL_OW 255
9478: STR
9479: PPUSH
9480: CALL_OW 500
// if def_game_rules then
9484: LD_EXP 68
9488: IFFALSE 9527
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
9490: LD_VAR 0 1
9494: PPUSH
9495: LD_VAR 0 1
9499: PPUSH
9500: CALL_OW 266
9504: PPUSH
9505: LD_VAR 0 1
9509: PPUSH
9510: CALL_OW 255
9514: PPUSH
9515: LD_VAR 0 2
9519: PPUSH
9520: LD_INT 1
9522: PPUSH
9523: CALL 15198 0 5
// end ;
9527: PPOPN 3
9529: END
// on VehicleConstructed ( veh , fac ) do var side ;
9530: LD_INT 0
9532: PPUSH
// begin if GetControl ( veh ) = control_apeman then
9533: LD_VAR 0 1
9537: PPUSH
9538: CALL_OW 263
9542: PUSH
9543: LD_INT 5
9545: EQUAL
9546: IFFALSE 9688
// begin side := GetSide ( veh ) ;
9548: LD_ADDR_VAR 0 3
9552: PUSH
9553: LD_VAR 0 1
9557: PPUSH
9558: CALL_OW 255
9562: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
9563: LD_ADDR_EXP 61
9567: PUSH
9568: LD_EXP 61
9572: PPUSH
9573: LD_VAR 0 3
9577: PPUSH
9578: LD_EXP 61
9582: PUSH
9583: LD_VAR 0 3
9587: ARRAY
9588: PPUSH
9589: LD_INT 52
9591: PUSH
9592: EMPTY
9593: LIST
9594: PPUSH
9595: CALL_OW 72
9599: PUSH
9600: LD_INT 22
9602: PUSH
9603: LD_VAR 0 3
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: LD_INT 2
9614: PUSH
9615: LD_INT 33
9617: PUSH
9618: LD_INT 5
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: LD_INT 25
9627: PUSH
9628: LD_INT 12
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PUSH
9635: LD_INT 25
9637: PUSH
9638: LD_INT 15
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 25
9647: PUSH
9648: LD_INT 16
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: LD_INT 25
9657: PUSH
9658: LD_INT 17
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PPUSH
9677: CALL_OW 69
9681: UNION
9682: PPUSH
9683: CALL_OW 1
9687: ST_TO_ADDR
// end ; end ;
9688: PPOPN 3
9690: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
9691: LD_INT 0
9693: PPUSH
9694: PPUSH
9695: PPUSH
9696: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
9697: LD_VAR 0 1
9701: PPUSH
9702: CALL_OW 257
9706: PUSH
9707: LD_INT 12
9709: PUSH
9710: LD_INT 15
9712: PUSH
9713: LD_INT 17
9715: PUSH
9716: LD_INT 16
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: IN
9725: PUSH
9726: LD_VAR 0 1
9730: PPUSH
9731: CALL_OW 263
9735: PUSH
9736: LD_INT 5
9738: EQUAL
9739: OR
9740: IFFALSE 9751
// ApeKilled ( j ) ;
9742: LD_VAR 0 1
9746: PPUSH
9747: CALL 10904 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
9751: LD_VAR 0 1
9755: PPUSH
9756: CALL_OW 266
9760: PUSH
9761: LD_INT 0
9763: PUSH
9764: LD_INT 1
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: IN
9771: IFFALSE 9853
// begin pos := Side_Positions [ GetSide ( j ) ] ;
9773: LD_ADDR_VAR 0 4
9777: PUSH
9778: LD_EXP 43
9782: PUSH
9783: LD_VAR 0 1
9787: PPUSH
9788: CALL_OW 255
9792: ARRAY
9793: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
9794: LD_ADDR_VAR 0 2
9798: PUSH
9799: LD_EXP 49
9803: PUSH
9804: LD_VAR 0 4
9808: ARRAY
9809: PUSH
9810: LD_INT 1
9812: ARRAY
9813: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
9814: LD_ADDR_VAR 0 3
9818: PUSH
9819: LD_EXP 49
9823: PUSH
9824: LD_VAR 0 4
9828: ARRAY
9829: PUSH
9830: LD_INT 2
9832: ARRAY
9833: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
9834: LD_VAR 0 2
9838: PPUSH
9839: LD_VAR 0 3
9843: PPUSH
9844: CALL_OW 420
9848: PPUSH
9849: CALL_OW 419
// end ; if def_game_rules then
9853: LD_EXP 68
9857: IFFALSE 9956
// if ( GetType ( j ) = 3 ) then
9859: LD_VAR 0 1
9863: PPUSH
9864: CALL_OW 247
9868: PUSH
9869: LD_INT 3
9871: EQUAL
9872: IFFALSE 9912
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
9874: LD_VAR 0 1
9878: PPUSH
9879: LD_VAR 0 1
9883: PPUSH
9884: CALL_OW 266
9888: PPUSH
9889: LD_VAR 0 1
9893: PPUSH
9894: CALL_OW 255
9898: PPUSH
9899: LD_INT 0
9901: PPUSH
9902: LD_INT 1
9904: NEG
9905: PPUSH
9906: CALL 15198 0 5
9910: GO 9956
// if ( GetChassis ( j ) = 25 ) then
9912: LD_VAR 0 1
9916: PPUSH
9917: CALL_OW 265
9921: PUSH
9922: LD_INT 25
9924: EQUAL
9925: IFFALSE 9956
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
9927: LD_VAR 0 1
9931: PPUSH
9932: LD_INT 37
9934: PPUSH
9935: LD_VAR 0 1
9939: PPUSH
9940: CALL_OW 255
9944: PPUSH
9945: LD_INT 0
9947: PPUSH
9948: LD_INT 1
9950: NEG
9951: PPUSH
9952: CALL 15198 0 5
// end ;
9956: PPOPN 5
9958: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
9959: LD_EXP 68
9963: PUSH
9964: LD_VAR 0 1
9968: PPUSH
9969: CALL_OW 265
9973: PUSH
9974: LD_INT 25
9976: EQUAL
9977: AND
9978: IFFALSE 10010
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
9980: LD_VAR 0 1
9984: PPUSH
9985: LD_INT 37
9987: PPUSH
9988: LD_VAR 0 1
9992: PPUSH
9993: CALL_OW 255
9997: PPUSH
9998: LD_VAR 0 3
10002: PPUSH
10003: LD_INT 1
10005: PPUSH
10006: CALL 15198 0 5
// end ;
10010: PPOPN 4
10012: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
10013: LD_VAR 0 1
10017: PPUSH
10018: LD_VAR 0 2
10022: PPUSH
10023: LD_VAR 0 3
10027: PPUSH
10028: LD_OWVAR 2
10032: PPUSH
10033: CALL 15898 0 4
10037: PPOPN 3
10039: END
// every 20 20$00 trigger apemanNumber do
10040: LD_EXP 58
10044: IFFALSE 10077
10046: GO 10048
10048: DISABLE
// begin enable ;
10049: ENABLE
// if apeLevel >= 8 then
10050: LD_EXP 63
10054: PUSH
10055: LD_INT 8
10057: GREATEREQUAL
10058: IFFALSE 10063
// disable else
10060: DISABLE
10061: GO 10077
// apeLevel := apeLevel + 1 ;
10063: LD_ADDR_EXP 63
10067: PUSH
10068: LD_EXP 63
10072: PUSH
10073: LD_INT 1
10075: PLUS
10076: ST_TO_ADDR
// end ;
10077: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
10078: LD_EXP 58
10082: PUSH
10083: LD_EXP 59
10087: LESS
10088: IFFALSE 10228
10090: GO 10092
10092: DISABLE
10093: LD_INT 0
10095: PPUSH
10096: PPUSH
10097: PPUSH
10098: PPUSH
// begin enable ;
10099: ENABLE
// for i := 1 to apemanPos do
10100: LD_ADDR_VAR 0 1
10104: PUSH
10105: DOUBLE
10106: LD_INT 1
10108: DEC
10109: ST_TO_ADDR
10110: LD_EXP 61
10114: PUSH
10115: FOR_TO
10116: IFFALSE 10226
// begin if apemanPlayerCount [ i ] then
10118: LD_EXP 62
10122: PUSH
10123: LD_VAR 0 1
10127: ARRAY
10128: IFFALSE 10224
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
10130: LD_EXP 62
10134: PUSH
10135: LD_VAR 0 1
10139: ARRAY
10140: PUSH
10141: LD_EXP 61
10145: PUSH
10146: LD_VAR 0 1
10150: ARRAY
10151: GREATER
10152: IFFALSE 10224
// begin ape := PrepareApeman ;
10154: LD_ADDR_VAR 0 2
10158: PUSH
10159: CALL 10723 0 0
10163: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
10164: LD_VAR 0 2
10168: PPUSH
10169: LD_EXP 64
10173: PUSH
10174: LD_VAR 0 1
10178: ARRAY
10179: PPUSH
10180: LD_INT 0
10182: PPUSH
10183: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
10187: LD_ADDR_EXP 61
10191: PUSH
10192: LD_EXP 61
10196: PPUSH
10197: LD_VAR 0 1
10201: PPUSH
10202: LD_EXP 61
10206: PUSH
10207: LD_VAR 0 1
10211: ARRAY
10212: PUSH
10213: LD_VAR 0 2
10217: UNION
10218: PPUSH
10219: CALL_OW 1
10223: ST_TO_ADDR
// end ; end ; end ;
10224: GO 10115
10226: POP
10227: POP
// end ;
10228: PPOPN 4
10230: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
10231: LD_INT 0
10233: PPUSH
10234: PPUSH
10235: PPUSH
10236: PPUSH
10237: PPUSH
10238: PPUSH
10239: PPUSH
// playersAmount := 0 ;
10240: LD_ADDR_VAR 0 3
10244: PUSH
10245: LD_INT 0
10247: ST_TO_ADDR
// _apeAreas := [ Ar1Out3 , Ar2Out3 ] ;
10248: LD_ADDR_VAR 0 7
10252: PUSH
10253: LD_INT 24
10255: PUSH
10256: LD_INT 18
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10263: LD_ADDR_EXP 64
10267: PUSH
10268: LD_INT 0
10270: PUSH
10271: LD_INT 0
10273: PUSH
10274: LD_INT 0
10276: PUSH
10277: LD_INT 0
10279: PUSH
10280: LD_INT 0
10282: PUSH
10283: LD_INT 0
10285: PUSH
10286: LD_INT 0
10288: PUSH
10289: LD_INT 0
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: ST_TO_ADDR
// for j = 1 to Side_Positions do
10302: LD_ADDR_VAR 0 4
10306: PUSH
10307: DOUBLE
10308: LD_INT 1
10310: DEC
10311: ST_TO_ADDR
10312: LD_EXP 43
10316: PUSH
10317: FOR_TO
10318: IFFALSE 10385
// if Side_Positions [ j ] then
10320: LD_EXP 43
10324: PUSH
10325: LD_VAR 0 4
10329: ARRAY
10330: IFFALSE 10383
// begin playersAmount := playersAmount + 1 ;
10332: LD_ADDR_VAR 0 3
10336: PUSH
10337: LD_VAR 0 3
10341: PUSH
10342: LD_INT 1
10344: PLUS
10345: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
10346: LD_ADDR_EXP 64
10350: PUSH
10351: LD_EXP 64
10355: PPUSH
10356: LD_VAR 0 4
10360: PPUSH
10361: LD_VAR 0 7
10365: PUSH
10366: LD_EXP 43
10370: PUSH
10371: LD_VAR 0 4
10375: ARRAY
10376: ARRAY
10377: PPUSH
10378: CALL_OW 1
10382: ST_TO_ADDR
// end ;
10383: GO 10317
10385: POP
10386: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
10387: LD_ADDR_EXP 60
10391: PUSH
10392: LD_INT 3
10394: PUSH
10395: LD_EXP 37
10399: MUL
10400: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
10401: LD_ADDR_EXP 58
10405: PUSH
10406: LD_VAR 0 3
10410: PUSH
10411: LD_EXP 60
10415: MUL
10416: ST_TO_ADDR
// apemanLimit := apemanNumber ;
10417: LD_ADDR_EXP 59
10421: PUSH
10422: LD_EXP 58
10426: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10427: LD_ADDR_EXP 61
10431: PUSH
10432: LD_INT 0
10434: PUSH
10435: LD_INT 0
10437: PUSH
10438: LD_INT 0
10440: PUSH
10441: LD_INT 0
10443: PUSH
10444: LD_INT 0
10446: PUSH
10447: LD_INT 0
10449: PUSH
10450: LD_INT 0
10452: PUSH
10453: LD_INT 0
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10466: LD_ADDR_EXP 62
10470: PUSH
10471: LD_INT 0
10473: PUSH
10474: LD_INT 0
10476: PUSH
10477: LD_INT 0
10479: PUSH
10480: LD_INT 0
10482: PUSH
10483: LD_INT 0
10485: PUSH
10486: LD_INT 0
10488: PUSH
10489: LD_INT 0
10491: PUSH
10492: LD_INT 0
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: ST_TO_ADDR
// apeLevel := 1 ;
10505: LD_ADDR_EXP 63
10509: PUSH
10510: LD_INT 1
10512: ST_TO_ADDR
// if not apemanNumber then
10513: LD_EXP 58
10517: NOT
10518: IFFALSE 10522
// exit ;
10520: GO 10718
// for i := 1 to apemanPerPlayer do
10522: LD_ADDR_VAR 0 2
10526: PUSH
10527: DOUBLE
10528: LD_INT 1
10530: DEC
10531: ST_TO_ADDR
10532: LD_EXP 60
10536: PUSH
10537: FOR_TO
10538: IFFALSE 10716
// begin for j := 1 to Side_Positions do
10540: LD_ADDR_VAR 0 4
10544: PUSH
10545: DOUBLE
10546: LD_INT 1
10548: DEC
10549: ST_TO_ADDR
10550: LD_EXP 43
10554: PUSH
10555: FOR_TO
10556: IFFALSE 10712
// if Side_Positions [ j ] then
10558: LD_EXP 43
10562: PUSH
10563: LD_VAR 0 4
10567: ARRAY
10568: IFFALSE 10710
// begin pos := Side_Positions [ j ] ;
10570: LD_ADDR_VAR 0 6
10574: PUSH
10575: LD_EXP 43
10579: PUSH
10580: LD_VAR 0 4
10584: ARRAY
10585: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
10586: LD_ADDR_EXP 62
10590: PUSH
10591: LD_EXP 62
10595: PPUSH
10596: LD_VAR 0 4
10600: PPUSH
10601: LD_EXP 62
10605: PUSH
10606: LD_VAR 0 4
10610: ARRAY
10611: PUSH
10612: LD_INT 1
10614: PLUS
10615: PPUSH
10616: CALL_OW 1
10620: ST_TO_ADDR
// ape := PrepareApeman ;
10621: LD_ADDR_VAR 0 5
10625: PUSH
10626: CALL 10723 0 0
10630: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
10631: LD_ADDR_EXP 61
10635: PUSH
10636: LD_EXP 61
10640: PPUSH
10641: LD_VAR 0 4
10645: PPUSH
10646: LD_EXP 61
10650: PUSH
10651: LD_VAR 0 4
10655: ARRAY
10656: PPUSH
10657: LD_EXP 61
10661: PUSH
10662: LD_VAR 0 4
10666: ARRAY
10667: PUSH
10668: LD_INT 1
10670: PLUS
10671: PPUSH
10672: LD_VAR 0 5
10676: PPUSH
10677: CALL_OW 1
10681: PPUSH
10682: CALL_OW 1
10686: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
10687: LD_VAR 0 5
10691: PPUSH
10692: LD_EXP 64
10696: PUSH
10697: LD_VAR 0 4
10701: ARRAY
10702: PPUSH
10703: LD_INT 0
10705: PPUSH
10706: CALL_OW 49
// end ;
10710: GO 10555
10712: POP
10713: POP
// end ;
10714: GO 10537
10716: POP
10717: POP
// end ;
10718: LD_VAR 0 1
10722: RET
// export function PrepareApeman ; var bonus ; begin
10723: LD_INT 0
10725: PPUSH
10726: PPUSH
// uc_side := 0 ;
10727: LD_ADDR_OWVAR 20
10731: PUSH
10732: LD_INT 0
10734: ST_TO_ADDR
// uc_nation := 0 ;
10735: LD_ADDR_OWVAR 21
10739: PUSH
10740: LD_INT 0
10742: ST_TO_ADDR
// InitHc ;
10743: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
10747: LD_ADDR_VAR 0 2
10751: PUSH
10752: LD_INT 1
10754: NEG
10755: PUSH
10756: LD_INT 0
10758: PUSH
10759: LD_INT 1
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: LIST
10766: PUSH
10767: LD_OWVAR 1
10771: PUSH
10772: LD_INT 3
10774: MOD
10775: PUSH
10776: LD_INT 1
10778: PLUS
10779: ARRAY
10780: ST_TO_ADDR
// hc_class := class_apeman ;
10781: LD_ADDR_OWVAR 28
10785: PUSH
10786: LD_INT 12
10788: ST_TO_ADDR
// hc_gallery :=  ;
10789: LD_ADDR_OWVAR 33
10793: PUSH
10794: LD_STRING 
10796: ST_TO_ADDR
// hc_name :=  ;
10797: LD_ADDR_OWVAR 26
10801: PUSH
10802: LD_STRING 
10804: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
10805: LD_ADDR_OWVAR 31
10809: PUSH
10810: LD_EXP 63
10814: PUSH
10815: LD_VAR 0 2
10819: PLUS
10820: PUSH
10821: LD_EXP 63
10825: PUSH
10826: LD_VAR 0 2
10830: PLUS
10831: PUSH
10832: LD_EXP 63
10836: PUSH
10837: LD_VAR 0 2
10841: PLUS
10842: PUSH
10843: LD_EXP 63
10847: PUSH
10848: LD_VAR 0 2
10852: PLUS
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
10860: LD_ADDR_OWVAR 35
10864: PUSH
10865: LD_INT 10
10867: PUSH
10868: LD_VAR 0 2
10872: MUL
10873: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
10874: LD_ADDR_OWVAR 29
10878: PUSH
10879: LD_INT 12
10881: PUSH
10882: LD_INT 10
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: ST_TO_ADDR
// result := CreateHuman ;
10889: LD_ADDR_VAR 0 1
10893: PUSH
10894: CALL_OW 44
10898: ST_TO_ADDR
// end ;
10899: LD_VAR 0 1
10903: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
10904: LD_INT 0
10906: PPUSH
10907: PPUSH
10908: PPUSH
// if not ape then
10909: LD_VAR 0 1
10913: NOT
10914: IFFALSE 10918
// exit ;
10916: GO 11043
// side := GetSide ( ape ) ;
10918: LD_ADDR_VAR 0 3
10922: PUSH
10923: LD_VAR 0 1
10927: PPUSH
10928: CALL_OW 255
10932: ST_TO_ADDR
// if not side then
10933: LD_VAR 0 3
10937: NOT
10938: IFFALSE 10992
// begin for i = 1 to apemanPos do
10940: LD_ADDR_VAR 0 4
10944: PUSH
10945: DOUBLE
10946: LD_INT 1
10948: DEC
10949: ST_TO_ADDR
10950: LD_EXP 61
10954: PUSH
10955: FOR_TO
10956: IFFALSE 10990
// if ape in apemanPos [ i ] then
10958: LD_VAR 0 1
10962: PUSH
10963: LD_EXP 61
10967: PUSH
10968: LD_VAR 0 4
10972: ARRAY
10973: IN
10974: IFFALSE 10988
// begin side := i ;
10976: LD_ADDR_VAR 0 3
10980: PUSH
10981: LD_VAR 0 4
10985: ST_TO_ADDR
// break ;
10986: GO 10990
// end ;
10988: GO 10955
10990: POP
10991: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
10992: LD_ADDR_EXP 61
10996: PUSH
10997: LD_EXP 61
11001: PPUSH
11002: LD_VAR 0 3
11006: PPUSH
11007: LD_EXP 61
11011: PUSH
11012: LD_VAR 0 3
11016: ARRAY
11017: PUSH
11018: LD_VAR 0 1
11022: DIFF
11023: PPUSH
11024: CALL_OW 1
11028: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
11029: LD_ADDR_EXP 58
11033: PUSH
11034: LD_EXP 58
11038: PUSH
11039: LD_INT 1
11041: MINUS
11042: ST_TO_ADDR
// end ; end_of_file
11043: LD_VAR 0 2
11047: RET
// var free , free1 , free2 , new1 , new2 , arr1 , arr2 , seenby1 , seenby2 ; function displ_status ; var s1 , s2 ; begin
11048: LD_INT 0
11050: PPUSH
11051: PPUSH
11052: PPUSH
// if not def_people_arrivals then
11053: LD_EXP 11
11057: NOT
11058: IFFALSE 11062
// exit ;
11060: GO 11203
// if def_people_loyality then
11062: LD_EXP 12
11066: IFFALSE 11182
// begin s1 := [ #Multi1x1-InfoL , Position_Sides [ 1 ] , ( free1 + 0 ) ] ;
11068: LD_ADDR_VAR 0 2
11072: PUSH
11073: LD_STRING #Multi1x1-InfoL
11075: PUSH
11076: LD_EXP 46
11080: PUSH
11081: LD_INT 1
11083: ARRAY
11084: PUSH
11085: LD_LOC 10
11089: PUSH
11090: LD_INT 0
11092: PLUS
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: LIST
11098: ST_TO_ADDR
// s2 := [ #Multi1x1-InfoL , Position_Sides [ 2 ] , ( free2 + 0 ) ] ;
11099: LD_ADDR_VAR 0 3
11103: PUSH
11104: LD_STRING #Multi1x1-InfoL
11106: PUSH
11107: LD_EXP 46
11111: PUSH
11112: LD_INT 2
11114: ARRAY
11115: PUSH
11116: LD_LOC 11
11120: PUSH
11121: LD_INT 0
11123: PLUS
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: LIST
11129: ST_TO_ADDR
// if Side_Positions [ your_side ] <> 2 then
11130: LD_EXP 43
11134: PUSH
11135: LD_OWVAR 2
11139: ARRAY
11140: PUSH
11141: LD_INT 2
11143: NONEQUAL
11144: IFFALSE 11164
// ExtraStrings := s1 ^ s2 else
11146: LD_ADDR_EXP 70
11150: PUSH
11151: LD_VAR 0 2
11155: PUSH
11156: LD_VAR 0 3
11160: ADD
11161: ST_TO_ADDR
11162: GO 11180
// ExtraStrings := s2 ^ s1 ;
11164: LD_ADDR_EXP 70
11168: PUSH
11169: LD_VAR 0 3
11173: PUSH
11174: LD_VAR 0 2
11178: ADD
11179: ST_TO_ADDR
// end else
11180: GO 11203
// begin ExtraStrings := [ #Multi1x1-InfoNonL , ( free + 0 ) ] ;
11182: LD_ADDR_EXP 70
11186: PUSH
11187: LD_STRING #Multi1x1-InfoNonL
11189: PUSH
11190: LD_LOC 9
11194: PUSH
11195: LD_INT 0
11197: PLUS
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: ST_TO_ADDR
// end ; end ;
11203: LD_VAR 0 1
11207: RET
// every 0 0$1 do
11208: GO 11210
11210: DISABLE
// begin if not text_info then
11211: LD_EXP 34
11215: NOT
11216: IFFALSE 11220
// exit ;
11218: GO 11225
// displ_status ;
11220: CALL 11048 0 0
// enable ;
11224: ENABLE
// end ;
11225: END
// export function prepare_arrivals ; var i , ar , p1 , p2 , pom1 , pom2 ; begin
11226: LD_INT 0
11228: PPUSH
11229: PPUSH
11230: PPUSH
11231: PPUSH
11232: PPUSH
11233: PPUSH
11234: PPUSH
// arr1 := [ ] ;
11235: LD_ADDR_LOC 14
11239: PUSH
11240: EMPTY
11241: ST_TO_ADDR
// arr2 := [ ] ;
11242: LD_ADDR_LOC 15
11246: PUSH
11247: EMPTY
11248: ST_TO_ADDR
// for i := 1 to max_arriving_times do
11249: LD_ADDR_VAR 0 2
11253: PUSH
11254: DOUBLE
11255: LD_INT 1
11257: DEC
11258: ST_TO_ADDR
11259: LD_EXP 33
11263: PUSH
11264: FOR_TO
11265: IFFALSE 11801
// begin case rand ( 1 , 100 ) of 1 .. 45 :
11267: LD_INT 1
11269: PPUSH
11270: LD_INT 100
11272: PPUSH
11273: CALL_OW 12
11277: PUSH
11278: LD_INT 1
11280: DOUBLE
11281: GREATEREQUAL
11282: IFFALSE 11290
11284: LD_INT 45
11286: DOUBLE
11287: LESSEQUAL
11288: IFTRUE 11292
11290: GO 11499
11292: POP
// case rand ( 1 , 100 ) of 1 .. 10 :
11293: LD_INT 1
11295: PPUSH
11296: LD_INT 100
11298: PPUSH
11299: CALL_OW 12
11303: PUSH
11304: LD_INT 1
11306: DOUBLE
11307: GREATEREQUAL
11308: IFFALSE 11316
11310: LD_INT 10
11312: DOUBLE
11313: LESSEQUAL
11314: IFTRUE 11318
11316: GO 11336
11318: POP
// ar := [ Ar1Base1 , Ar2Base1 ] ; 11 .. 20 :
11319: LD_ADDR_VAR 0 3
11323: PUSH
11324: LD_INT 19
11326: PUSH
11327: LD_INT 15
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: ST_TO_ADDR
11334: GO 11497
11336: LD_INT 11
11338: DOUBLE
11339: GREATEREQUAL
11340: IFFALSE 11348
11342: LD_INT 20
11344: DOUBLE
11345: LESSEQUAL
11346: IFTRUE 11350
11348: GO 11368
11350: POP
// ar := [ Ar1Base2 , Ar2Base2 ] ; 21 .. 30 :
11351: LD_ADDR_VAR 0 3
11355: PUSH
11356: LD_INT 20
11358: PUSH
11359: LD_INT 14
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: ST_TO_ADDR
11366: GO 11497
11368: LD_INT 21
11370: DOUBLE
11371: GREATEREQUAL
11372: IFFALSE 11380
11374: LD_INT 30
11376: DOUBLE
11377: LESSEQUAL
11378: IFTRUE 11382
11380: GO 11400
11382: POP
// ar := [ Ar1Between , Ar2Between ] ; 31 .. 55 :
11383: LD_ADDR_VAR 0 3
11387: PUSH
11388: LD_INT 22
11390: PUSH
11391: LD_INT 16
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: ST_TO_ADDR
11398: GO 11497
11400: LD_INT 31
11402: DOUBLE
11403: GREATEREQUAL
11404: IFFALSE 11412
11406: LD_INT 55
11408: DOUBLE
11409: LESSEQUAL
11410: IFTRUE 11414
11412: GO 11432
11414: POP
// ar := [ Ar1Out2 , Ar2Out2 ] ; 56 .. 80 :
11415: LD_ADDR_VAR 0 3
11419: PUSH
11420: LD_INT 23
11422: PUSH
11423: LD_INT 17
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: ST_TO_ADDR
11430: GO 11497
11432: LD_INT 56
11434: DOUBLE
11435: GREATEREQUAL
11436: IFFALSE 11444
11438: LD_INT 80
11440: DOUBLE
11441: LESSEQUAL
11442: IFTRUE 11446
11444: GO 11464
11446: POP
// ar := [ Ar1Out1 , Ar2Out1 ] ; 81 .. 100 :
11447: LD_ADDR_VAR 0 3
11451: PUSH
11452: LD_INT 21
11454: PUSH
11455: LD_INT 13
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: ST_TO_ADDR
11462: GO 11497
11464: LD_INT 81
11466: DOUBLE
11467: GREATEREQUAL
11468: IFFALSE 11476
11470: LD_INT 100
11472: DOUBLE
11473: LESSEQUAL
11474: IFTRUE 11478
11476: GO 11496
11478: POP
// ar := [ Ar1Out3 , Ar2Out3 ] ; end ; 46 .. 85 :
11479: LD_ADDR_VAR 0 3
11483: PUSH
11484: LD_INT 24
11486: PUSH
11487: LD_INT 18
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: ST_TO_ADDR
11494: GO 11497
11496: POP
11497: GO 11753
11499: LD_INT 46
11501: DOUBLE
11502: GREATEREQUAL
11503: IFFALSE 11511
11505: LD_INT 85
11507: DOUBLE
11508: LESSEQUAL
11509: IFTRUE 11513
11511: GO 11720
11513: POP
// case rand ( 1 , 100 ) of 1 .. 5 :
11514: LD_INT 1
11516: PPUSH
11517: LD_INT 100
11519: PPUSH
11520: CALL_OW 12
11524: PUSH
11525: LD_INT 1
11527: DOUBLE
11528: GREATEREQUAL
11529: IFFALSE 11537
11531: LD_INT 5
11533: DOUBLE
11534: LESSEQUAL
11535: IFTRUE 11539
11537: GO 11557
11539: POP
// ar := [ Ar2Base1 , Ar1Base1 ] ; 6 .. 15 :
11540: LD_ADDR_VAR 0 3
11544: PUSH
11545: LD_INT 15
11547: PUSH
11548: LD_INT 19
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: ST_TO_ADDR
11555: GO 11718
11557: LD_INT 6
11559: DOUBLE
11560: GREATEREQUAL
11561: IFFALSE 11569
11563: LD_INT 15
11565: DOUBLE
11566: LESSEQUAL
11567: IFTRUE 11571
11569: GO 11589
11571: POP
// ar := [ Ar2Base2 , Ar1Base2 ] ; 16 .. 30 :
11572: LD_ADDR_VAR 0 3
11576: PUSH
11577: LD_INT 14
11579: PUSH
11580: LD_INT 20
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: ST_TO_ADDR
11587: GO 11718
11589: LD_INT 16
11591: DOUBLE
11592: GREATEREQUAL
11593: IFFALSE 11601
11595: LD_INT 30
11597: DOUBLE
11598: LESSEQUAL
11599: IFTRUE 11603
11601: GO 11621
11603: POP
// ar := [ Ar2Between , Ar1Between ] ; 31 .. 50 :
11604: LD_ADDR_VAR 0 3
11608: PUSH
11609: LD_INT 16
11611: PUSH
11612: LD_INT 22
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: ST_TO_ADDR
11619: GO 11718
11621: LD_INT 31
11623: DOUBLE
11624: GREATEREQUAL
11625: IFFALSE 11633
11627: LD_INT 50
11629: DOUBLE
11630: LESSEQUAL
11631: IFTRUE 11635
11633: GO 11653
11635: POP
// ar := [ Ar2Out2 , Ar1Out2 ] ; 51 .. 75 :
11636: LD_ADDR_VAR 0 3
11640: PUSH
11641: LD_INT 17
11643: PUSH
11644: LD_INT 23
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: ST_TO_ADDR
11651: GO 11718
11653: LD_INT 51
11655: DOUBLE
11656: GREATEREQUAL
11657: IFFALSE 11665
11659: LD_INT 75
11661: DOUBLE
11662: LESSEQUAL
11663: IFTRUE 11667
11665: GO 11685
11667: POP
// ar := [ Ar2Out1 , Ar1Out1 ] ; 76 .. 100 :
11668: LD_ADDR_VAR 0 3
11672: PUSH
11673: LD_INT 13
11675: PUSH
11676: LD_INT 21
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: ST_TO_ADDR
11683: GO 11718
11685: LD_INT 76
11687: DOUBLE
11688: GREATEREQUAL
11689: IFFALSE 11697
11691: LD_INT 100
11693: DOUBLE
11694: LESSEQUAL
11695: IFTRUE 11699
11697: GO 11717
11699: POP
// ar := [ Ar2Out3 , Ar1Out3 ] ; end ; 86 .. 100 :
11700: LD_ADDR_VAR 0 3
11704: PUSH
11705: LD_INT 18
11707: PUSH
11708: LD_INT 24
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: ST_TO_ADDR
11715: GO 11718
11717: POP
11718: GO 11753
11720: LD_INT 86
11722: DOUBLE
11723: GREATEREQUAL
11724: IFFALSE 11732
11726: LD_INT 100
11728: DOUBLE
11729: LESSEQUAL
11730: IFTRUE 11734
11732: GO 11752
11734: POP
// ar := [ valley , valley ] ; end ;
11735: LD_ADDR_VAR 0 3
11739: PUSH
11740: LD_INT 12
11742: PUSH
11743: LD_INT 12
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: ST_TO_ADDR
11750: GO 11753
11752: POP
// arr1 := arr1 ^ [ ar [ 1 ] ] ;
11753: LD_ADDR_LOC 14
11757: PUSH
11758: LD_LOC 14
11762: PUSH
11763: LD_VAR 0 3
11767: PUSH
11768: LD_INT 1
11770: ARRAY
11771: PUSH
11772: EMPTY
11773: LIST
11774: ADD
11775: ST_TO_ADDR
// arr2 := arr2 ^ [ ar [ 2 ] ] ;
11776: LD_ADDR_LOC 15
11780: PUSH
11781: LD_LOC 15
11785: PUSH
11786: LD_VAR 0 3
11790: PUSH
11791: LD_INT 2
11793: ARRAY
11794: PUSH
11795: EMPTY
11796: LIST
11797: ADD
11798: ST_TO_ADDR
// end ;
11799: GO 11264
11801: POP
11802: POP
// for i := 1 to max_arriving_times div 2 do
11803: LD_ADDR_VAR 0 2
11807: PUSH
11808: DOUBLE
11809: LD_INT 1
11811: DEC
11812: ST_TO_ADDR
11813: LD_EXP 33
11817: PUSH
11818: LD_INT 2
11820: DIV
11821: PUSH
11822: FOR_TO
11823: IFFALSE 11935
// begin p1 := Rand ( 1 , max_arriving_times ) ;
11825: LD_ADDR_VAR 0 4
11829: PUSH
11830: LD_INT 1
11832: PPUSH
11833: LD_EXP 33
11837: PPUSH
11838: CALL_OW 12
11842: ST_TO_ADDR
// p2 := Rand ( 1 , max_arriving_times ) ;
11843: LD_ADDR_VAR 0 5
11847: PUSH
11848: LD_INT 1
11850: PPUSH
11851: LD_EXP 33
11855: PPUSH
11856: CALL_OW 12
11860: ST_TO_ADDR
// pom1 := arr2 [ p1 ] ;
11861: LD_ADDR_VAR 0 6
11865: PUSH
11866: LD_LOC 15
11870: PUSH
11871: LD_VAR 0 4
11875: ARRAY
11876: ST_TO_ADDR
// pom2 := arr2 [ p2 ] ;
11877: LD_ADDR_VAR 0 7
11881: PUSH
11882: LD_LOC 15
11886: PUSH
11887: LD_VAR 0 5
11891: ARRAY
11892: ST_TO_ADDR
// arr2 := Replace ( Replace ( arr2 , p2 , pom1 ) , p1 , pom2 ) ;
11893: LD_ADDR_LOC 15
11897: PUSH
11898: LD_LOC 15
11902: PPUSH
11903: LD_VAR 0 5
11907: PPUSH
11908: LD_VAR 0 6
11912: PPUSH
11913: CALL_OW 1
11917: PPUSH
11918: LD_VAR 0 4
11922: PPUSH
11923: LD_VAR 0 7
11927: PPUSH
11928: CALL_OW 1
11932: ST_TO_ADDR
// end ;
11933: GO 11822
11935: POP
11936: POP
// end ;
11937: LD_VAR 0 1
11941: RET
// every 0 0$1 do
11942: GO 11944
11944: DISABLE
// begin if not max_arriving_times then
11945: LD_EXP 33
11949: NOT
11950: IFFALSE 11954
// exit ;
11952: GO 12037
// if tick >= max_arriving_times [ 1 ] * 0 0$30 then
11954: LD_OWVAR 1
11958: PUSH
11959: LD_EXP 33
11963: PUSH
11964: LD_INT 1
11966: ARRAY
11967: PUSH
11968: LD_INT 1050
11970: MUL
11971: GREATEREQUAL
11972: IFFALSE 12036
// begin new1 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11974: LD_ADDR_LOC 12
11978: PUSH
11979: LD_INT 1
11981: PPUSH
11982: LD_EXP 33
11986: PUSH
11987: LD_INT 1050
11989: MUL
11990: PPUSH
11991: CALL_OW 12
11995: ST_TO_ADDR
// new2 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11996: LD_ADDR_LOC 13
12000: PUSH
12001: LD_INT 1
12003: PPUSH
12004: LD_EXP 33
12008: PUSH
12009: LD_INT 1050
12011: MUL
12012: PPUSH
12013: CALL_OW 12
12017: ST_TO_ADDR
// max_arriving_times := delete ( max_arriving_times , 1 ) ;
12018: LD_ADDR_EXP 33
12022: PUSH
12023: LD_EXP 33
12027: PPUSH
12028: LD_INT 1
12030: PPUSH
12031: CALL_OW 3
12035: ST_TO_ADDR
// end ; enable ;
12036: ENABLE
// end ;
12037: END
// function new_arrival ( pos ) ; var hum ; begin
12038: LD_INT 0
12040: PPUSH
12041: PPUSH
// if def_people_loyality then
12042: LD_EXP 12
12046: IFFALSE 12088
// begin uc_side := second_side [ pos ] ;
12048: LD_ADDR_OWVAR 20
12052: PUSH
12053: LD_EXP 47
12057: PUSH
12058: LD_VAR 0 1
12062: ARRAY
12063: ST_TO_ADDR
// uc_nation := Side_Nations [ positions [ pos ] ] ;
12064: LD_ADDR_OWVAR 21
12068: PUSH
12069: LD_EXP 44
12073: PUSH
12074: LD_EXP 39
12078: PUSH
12079: LD_VAR 0 1
12083: ARRAY
12084: ARRAY
12085: ST_TO_ADDR
// end else
12086: GO 12108
// begin uc_side := second_side ;
12088: LD_ADDR_OWVAR 20
12092: PUSH
12093: LD_EXP 47
12097: ST_TO_ADDR
// uc_nation := third_nation ;
12098: LD_ADDR_OWVAR 21
12102: PUSH
12103: LD_EXP 48
12107: ST_TO_ADDR
// end ; PrepareHuman ( 0 , 0 , initial_level + 1 ) ;
12108: LD_INT 0
12110: PPUSH
12111: LD_INT 0
12113: PPUSH
12114: LD_EXP 29
12118: PUSH
12119: LD_INT 1
12121: PLUS
12122: PPUSH
12123: CALL_OW 380
// hc_class := class_soldier ;
12127: LD_ADDR_OWVAR 28
12131: PUSH
12132: LD_INT 1
12134: ST_TO_ADDR
// hum := CreateHuman ;
12135: LD_ADDR_VAR 0 3
12139: PUSH
12140: CALL_OW 44
12144: ST_TO_ADDR
// if pos = 1 then
12145: LD_VAR 0 1
12149: PUSH
12150: LD_INT 1
12152: EQUAL
12153: IFFALSE 12196
// begin PlaceUnitArea ( hum , arr1 [ 1 ] , true ) ;
12155: LD_VAR 0 3
12159: PPUSH
12160: LD_LOC 14
12164: PUSH
12165: LD_INT 1
12167: ARRAY
12168: PPUSH
12169: LD_INT 1
12171: PPUSH
12172: CALL_OW 49
// arr1 := delete ( arr1 , 1 ) ;
12176: LD_ADDR_LOC 14
12180: PUSH
12181: LD_LOC 14
12185: PPUSH
12186: LD_INT 1
12188: PPUSH
12189: CALL_OW 3
12193: ST_TO_ADDR
// end else
12194: GO 12235
// begin PlaceUnitArea ( hum , arr2 [ 1 ] , true ) ;
12196: LD_VAR 0 3
12200: PPUSH
12201: LD_LOC 15
12205: PUSH
12206: LD_INT 1
12208: ARRAY
12209: PPUSH
12210: LD_INT 1
12212: PPUSH
12213: CALL_OW 49
// arr2 := delete ( arr2 , 1 ) ;
12217: LD_ADDR_LOC 15
12221: PUSH
12222: LD_LOC 15
12226: PPUSH
12227: LD_INT 1
12229: PPUSH
12230: CALL_OW 3
12234: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) until IsPlaced ( hum ) ;
12235: LD_INT 35
12237: PPUSH
12238: CALL_OW 67
12242: LD_VAR 0 3
12246: PPUSH
12247: CALL_OW 305
12251: IFFALSE 12235
// if def_people_loyality then
12253: LD_EXP 12
12257: IFFALSE 12317
// if pos = 1 then
12259: LD_VAR 0 1
12263: PUSH
12264: LD_INT 1
12266: EQUAL
12267: IFFALSE 12287
// free1 := free1 ^ hum else
12269: LD_ADDR_LOC 10
12273: PUSH
12274: LD_LOC 10
12278: PUSH
12279: LD_VAR 0 3
12283: ADD
12284: ST_TO_ADDR
12285: GO 12315
// if pos = 2 then
12287: LD_VAR 0 1
12291: PUSH
12292: LD_INT 2
12294: EQUAL
12295: IFFALSE 12315
// free2 := free2 ^ hum else
12297: LD_ADDR_LOC 11
12301: PUSH
12302: LD_LOC 11
12306: PUSH
12307: LD_VAR 0 3
12311: ADD
12312: ST_TO_ADDR
12313: GO 12315
// else
12315: GO 12333
// free := free ^ hum ;
12317: LD_ADDR_LOC 9
12321: PUSH
12322: LD_LOC 9
12326: PUSH
12327: LD_VAR 0 3
12331: ADD
12332: ST_TO_ADDR
// end ;
12333: LD_VAR 0 2
12337: RET
// every 0 0$0.5 trigger new1 do var d ;
12338: LD_LOC 12
12342: IFFALSE 12375
12344: GO 12346
12346: DISABLE
12347: LD_INT 0
12349: PPUSH
// begin enable ;
12350: ENABLE
// new1 := 0 ;
12351: LD_ADDR_LOC 12
12355: PUSH
12356: LD_INT 0
12358: ST_TO_ADDR
// wait ( d ) ;
12359: LD_VAR 0 1
12363: PPUSH
12364: CALL_OW 67
// new_arrival ( 1 ) ;
12368: LD_INT 1
12370: PPUSH
12371: CALL 12038 0 1
// end ;
12375: PPOPN 1
12377: END
// every 0 0$0.5 trigger new2 do var d ;
12378: LD_LOC 13
12382: IFFALSE 12415
12384: GO 12386
12386: DISABLE
12387: LD_INT 0
12389: PPUSH
// begin enable ;
12390: ENABLE
// new2 := 0 ;
12391: LD_ADDR_LOC 13
12395: PUSH
12396: LD_INT 0
12398: ST_TO_ADDR
// wait ( d ) ;
12399: LD_VAR 0 1
12403: PPUSH
12404: CALL_OW 67
// new_arrival ( 2 ) ;
12408: LD_INT 2
12410: PPUSH
12411: CALL 12038 0 1
// end ;
12415: PPOPN 1
12417: END
// function check_one_side ( un , side ) ; begin
12418: LD_INT 0
12420: PPUSH
// if FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , side ] , [ f_dist , un , 3 ] ] ) then
12421: LD_INT 21
12423: PUSH
12424: LD_INT 1
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 22
12433: PUSH
12434: LD_VAR 0 2
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: LD_INT 91
12445: PUSH
12446: LD_VAR 0 1
12450: PUSH
12451: LD_INT 3
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: LIST
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: LIST
12463: PPUSH
12464: CALL_OW 69
12468: IFFALSE 12482
// result := side else
12470: LD_ADDR_VAR 0 3
12474: PUSH
12475: LD_VAR 0 2
12479: ST_TO_ADDR
12480: GO 12490
// result := 0 ;
12482: LD_ADDR_VAR 0 3
12486: PUSH
12487: LD_INT 0
12489: ST_TO_ADDR
// end ;
12490: LD_VAR 0 3
12494: RET
// function check_two_sides ( un , side1 , side2 ) ; var un1 , s1 , s2 ; begin
12495: LD_INT 0
12497: PPUSH
12498: PPUSH
12499: PPUSH
12500: PPUSH
// s1 := 0 ;
12501: LD_ADDR_VAR 0 6
12505: PUSH
12506: LD_INT 0
12508: ST_TO_ADDR
// s2 := 0 ;
12509: LD_ADDR_VAR 0 7
12513: PUSH
12514: LD_INT 0
12516: ST_TO_ADDR
// for un1 in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_dist , un , 3 ] ] ) do
12517: LD_ADDR_VAR 0 5
12521: PUSH
12522: LD_INT 21
12524: PUSH
12525: LD_INT 1
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: LD_INT 91
12534: PUSH
12535: LD_VAR 0 1
12539: PUSH
12540: LD_INT 3
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: PPUSH
12552: CALL_OW 69
12556: PUSH
12557: FOR_IN
12558: IFFALSE 12626
// begin if GetSide ( un1 ) = side1 then
12560: LD_VAR 0 5
12564: PPUSH
12565: CALL_OW 255
12569: PUSH
12570: LD_VAR 0 2
12574: EQUAL
12575: IFFALSE 12593
// s1 := s1 + 1 else
12577: LD_ADDR_VAR 0 6
12581: PUSH
12582: LD_VAR 0 6
12586: PUSH
12587: LD_INT 1
12589: PLUS
12590: ST_TO_ADDR
12591: GO 12624
// if GetSide ( un1 ) = side2 then
12593: LD_VAR 0 5
12597: PPUSH
12598: CALL_OW 255
12602: PUSH
12603: LD_VAR 0 3
12607: EQUAL
12608: IFFALSE 12624
// s2 := s2 + 1 ;
12610: LD_ADDR_VAR 0 7
12614: PUSH
12615: LD_VAR 0 7
12619: PUSH
12620: LD_INT 1
12622: PLUS
12623: ST_TO_ADDR
// end ;
12624: GO 12557
12626: POP
12627: POP
// if s1 = s2 then
12628: LD_VAR 0 6
12632: PUSH
12633: LD_VAR 0 7
12637: EQUAL
12638: IFFALSE 12650
// result := 0 else
12640: LD_ADDR_VAR 0 4
12644: PUSH
12645: LD_INT 0
12647: ST_TO_ADDR
12648: GO 12680
// if s1 > s2 then
12650: LD_VAR 0 6
12654: PUSH
12655: LD_VAR 0 7
12659: GREATER
12660: IFFALSE 12672
// result := 1 else
12662: LD_ADDR_VAR 0 4
12666: PUSH
12667: LD_INT 1
12669: ST_TO_ADDR
12670: GO 12680
// result := 2 ;
12672: LD_ADDR_VAR 0 4
12676: PUSH
12677: LD_INT 2
12679: ST_TO_ADDR
// end ;
12680: LD_VAR 0 4
12684: RET
// every 0 0$2 do var un ;
12685: GO 12687
12687: DISABLE
12688: LD_INT 0
12690: PPUSH
// begin if def_people_loyality then
12691: LD_EXP 12
12695: IFFALSE 13074
// if not fog_info then
12697: LD_EXP 35
12701: NOT
12702: IFFALSE 12890
// begin if your_side then
12704: LD_OWVAR 2
12708: IFFALSE 12888
// if side_positions [ your_side ] = 1 then
12710: LD_EXP 43
12714: PUSH
12715: LD_OWVAR 2
12719: ARRAY
12720: PUSH
12721: LD_INT 1
12723: EQUAL
12724: IFFALSE 12800
// begin un := UnitFilter ( free1 diff seenby1 , [ f_see , your_side ] ) ;
12726: LD_ADDR_VAR 0 1
12730: PUSH
12731: LD_LOC 10
12735: PUSH
12736: LD_LOC 16
12740: DIFF
12741: PPUSH
12742: LD_INT 101
12744: PUSH
12745: LD_OWVAR 2
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PPUSH
12754: CALL_OW 72
12758: ST_TO_ADDR
// if un then
12759: LD_VAR 0 1
12763: IFFALSE 12798
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12765: LD_VAR 0 1
12769: PUSH
12770: LD_INT 1
12772: ARRAY
12773: PPUSH
12774: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12778: LD_ADDR_LOC 16
12782: PUSH
12783: LD_LOC 16
12787: PUSH
12788: LD_VAR 0 1
12792: PUSH
12793: LD_INT 1
12795: ARRAY
12796: ADD
12797: ST_TO_ADDR
// end ; end else
12798: GO 12888
// if side_positions [ your_side ] = 2 then
12800: LD_EXP 43
12804: PUSH
12805: LD_OWVAR 2
12809: ARRAY
12810: PUSH
12811: LD_INT 2
12813: EQUAL
12814: IFFALSE 12888
// begin un := UnitFilter ( free2 diff seenby2 , [ f_see , your_side ] ) ;
12816: LD_ADDR_VAR 0 1
12820: PUSH
12821: LD_LOC 11
12825: PUSH
12826: LD_LOC 17
12830: DIFF
12831: PPUSH
12832: LD_INT 101
12834: PUSH
12835: LD_OWVAR 2
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PPUSH
12844: CALL_OW 72
12848: ST_TO_ADDR
// if un then
12849: LD_VAR 0 1
12853: IFFALSE 12888
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12855: LD_VAR 0 1
12859: PUSH
12860: LD_INT 1
12862: ARRAY
12863: PPUSH
12864: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
12868: LD_ADDR_LOC 17
12872: PUSH
12873: LD_LOC 17
12877: PUSH
12878: LD_VAR 0 1
12882: PUSH
12883: LD_INT 1
12885: ARRAY
12886: ADD
12887: ST_TO_ADDR
// end ; end ; end else
12888: GO 13074
// begin if your_side then
12890: LD_OWVAR 2
12894: IFFALSE 13074
// if side_positions [ your_side ] = 1 then
12896: LD_EXP 43
12900: PUSH
12901: LD_OWVAR 2
12905: ARRAY
12906: PUSH
12907: LD_INT 1
12909: EQUAL
12910: IFFALSE 12986
// begin un := UnitFilter ( free diff seenby1 , [ f_see , your_side ] ) ;
12912: LD_ADDR_VAR 0 1
12916: PUSH
12917: LD_LOC 9
12921: PUSH
12922: LD_LOC 16
12926: DIFF
12927: PPUSH
12928: LD_INT 101
12930: PUSH
12931: LD_OWVAR 2
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PPUSH
12940: CALL_OW 72
12944: ST_TO_ADDR
// if un then
12945: LD_VAR 0 1
12949: IFFALSE 12984
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12951: LD_VAR 0 1
12955: PUSH
12956: LD_INT 1
12958: ARRAY
12959: PPUSH
12960: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12964: LD_ADDR_LOC 16
12968: PUSH
12969: LD_LOC 16
12973: PUSH
12974: LD_VAR 0 1
12978: PUSH
12979: LD_INT 1
12981: ARRAY
12982: ADD
12983: ST_TO_ADDR
// end ; end else
12984: GO 13074
// if side_positions [ your_side ] = 2 then
12986: LD_EXP 43
12990: PUSH
12991: LD_OWVAR 2
12995: ARRAY
12996: PUSH
12997: LD_INT 2
12999: EQUAL
13000: IFFALSE 13074
// begin un := UnitFilter ( free diff seenby2 , [ f_see , your_side ] ) ;
13002: LD_ADDR_VAR 0 1
13006: PUSH
13007: LD_LOC 9
13011: PUSH
13012: LD_LOC 17
13016: DIFF
13017: PPUSH
13018: LD_INT 101
13020: PUSH
13021: LD_OWVAR 2
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PPUSH
13030: CALL_OW 72
13034: ST_TO_ADDR
// if un then
13035: LD_VAR 0 1
13039: IFFALSE 13074
// begin CenterNowOnUnits ( un [ 1 ] ) ;
13041: LD_VAR 0 1
13045: PUSH
13046: LD_INT 1
13048: ARRAY
13049: PPUSH
13050: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
13054: LD_ADDR_LOC 17
13058: PUSH
13059: LD_LOC 17
13063: PUSH
13064: LD_VAR 0 1
13068: PUSH
13069: LD_INT 1
13071: ARRAY
13072: ADD
13073: ST_TO_ADDR
// end ; end ; end ; enable ;
13074: ENABLE
// end ;
13075: PPOPN 1
13077: END
// every 0 0$0.5 do var un , s ;
13078: GO 13080
13080: DISABLE
13081: LD_INT 0
13083: PPUSH
13084: PPUSH
// begin if def_people_loyality then
13085: LD_EXP 12
13089: IFFALSE 13295
// begin for un in free1 do
13091: LD_ADDR_VAR 0 1
13095: PUSH
13096: LD_LOC 10
13100: PUSH
13101: FOR_IN
13102: IFFALSE 13190
// if not IsLive ( un ) then
13104: LD_VAR 0 1
13108: PPUSH
13109: CALL_OW 300
13113: NOT
13114: IFFALSE 13134
// free1 := free1 diff un else
13116: LD_ADDR_LOC 10
13120: PUSH
13121: LD_LOC 10
13125: PUSH
13126: LD_VAR 0 1
13130: DIFF
13131: ST_TO_ADDR
13132: GO 13188
// if check_one_side ( un , positions [ 1 ] ) then
13134: LD_VAR 0 1
13138: PPUSH
13139: LD_EXP 39
13143: PUSH
13144: LD_INT 1
13146: ARRAY
13147: PPUSH
13148: CALL 12418 0 2
13152: IFFALSE 13188
// begin SetSide ( un , positions [ 1 ] ) ;
13154: LD_VAR 0 1
13158: PPUSH
13159: LD_EXP 39
13163: PUSH
13164: LD_INT 1
13166: ARRAY
13167: PPUSH
13168: CALL_OW 235
// free1 := free1 diff un ;
13172: LD_ADDR_LOC 10
13176: PUSH
13177: LD_LOC 10
13181: PUSH
13182: LD_VAR 0 1
13186: DIFF
13187: ST_TO_ADDR
// end ;
13188: GO 13101
13190: POP
13191: POP
// for un in free2 do
13192: LD_ADDR_VAR 0 1
13196: PUSH
13197: LD_LOC 11
13201: PUSH
13202: FOR_IN
13203: IFFALSE 13291
// if not IsLive ( un ) then
13205: LD_VAR 0 1
13209: PPUSH
13210: CALL_OW 300
13214: NOT
13215: IFFALSE 13235
// free2 := free2 diff un else
13217: LD_ADDR_LOC 11
13221: PUSH
13222: LD_LOC 11
13226: PUSH
13227: LD_VAR 0 1
13231: DIFF
13232: ST_TO_ADDR
13233: GO 13289
// if check_one_side ( un , positions [ 2 ] ) then
13235: LD_VAR 0 1
13239: PPUSH
13240: LD_EXP 39
13244: PUSH
13245: LD_INT 2
13247: ARRAY
13248: PPUSH
13249: CALL 12418 0 2
13253: IFFALSE 13289
// begin SetSide ( un , positions [ 2 ] ) ;
13255: LD_VAR 0 1
13259: PPUSH
13260: LD_EXP 39
13264: PUSH
13265: LD_INT 2
13267: ARRAY
13268: PPUSH
13269: CALL_OW 235
// free2 := free2 diff un ;
13273: LD_ADDR_LOC 11
13277: PUSH
13278: LD_LOC 11
13282: PUSH
13283: LD_VAR 0 1
13287: DIFF
13288: ST_TO_ADDR
// end ;
13289: GO 13202
13291: POP
13292: POP
// end else
13293: GO 13417
// begin for un in free do
13295: LD_ADDR_VAR 0 1
13299: PUSH
13300: LD_LOC 9
13304: PUSH
13305: FOR_IN
13306: IFFALSE 13415
// if not IsLive ( un ) then
13308: LD_VAR 0 1
13312: PPUSH
13313: CALL_OW 300
13317: NOT
13318: IFFALSE 13338
// free := free diff un else
13320: LD_ADDR_LOC 9
13324: PUSH
13325: LD_LOC 9
13329: PUSH
13330: LD_VAR 0 1
13334: DIFF
13335: ST_TO_ADDR
13336: GO 13413
// begin s := check_two_sides ( un , positions [ 1 ] , positions [ 2 ] ) ;
13338: LD_ADDR_VAR 0 2
13342: PUSH
13343: LD_VAR 0 1
13347: PPUSH
13348: LD_EXP 39
13352: PUSH
13353: LD_INT 1
13355: ARRAY
13356: PPUSH
13357: LD_EXP 39
13361: PUSH
13362: LD_INT 2
13364: ARRAY
13365: PPUSH
13366: CALL 12495 0 3
13370: ST_TO_ADDR
// if s then
13371: LD_VAR 0 2
13375: IFFALSE 13413
// begin SetSide ( un , positions [ s ] ) ;
13377: LD_VAR 0 1
13381: PPUSH
13382: LD_EXP 39
13386: PUSH
13387: LD_VAR 0 2
13391: ARRAY
13392: PPUSH
13393: CALL_OW 235
// free := free diff un ;
13397: LD_ADDR_LOC 9
13401: PUSH
13402: LD_LOC 9
13406: PUSH
13407: LD_VAR 0 1
13411: DIFF
13412: ST_TO_ADDR
// end ; end ;
13413: GO 13305
13415: POP
13416: POP
// end ; enable ;
13417: ENABLE
// end ; end_of_file
13418: PPOPN 2
13420: END
// export BuildUpAreas ; export buildUpTimeActive ; export function BeginBuildUp ; var i , j ; begin
13421: LD_INT 0
13423: PPUSH
13424: PPUSH
13425: PPUSH
// buildUpTimeActive := true ;
13426: LD_ADDR_EXP 66
13430: PUSH
13431: LD_INT 1
13433: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
13434: LD_ADDR_VAR 0 2
13438: PUSH
13439: DOUBLE
13440: LD_INT 1
13442: DEC
13443: ST_TO_ADDR
13444: LD_EXP 65
13448: PUSH
13449: FOR_TO
13450: IFFALSE 13605
// if Position_Sides [ i ] then
13452: LD_EXP 46
13456: PUSH
13457: LD_VAR 0 2
13461: ARRAY
13462: IFFALSE 13603
// for j := 1 to 8 do
13464: LD_ADDR_VAR 0 3
13468: PUSH
13469: DOUBLE
13470: LD_INT 1
13472: DEC
13473: ST_TO_ADDR
13474: LD_INT 8
13476: PUSH
13477: FOR_TO
13478: IFFALSE 13601
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13480: LD_EXP 43
13484: PUSH
13485: LD_VAR 0 3
13489: ARRAY
13490: PUSH
13491: LD_EXP 40
13495: PUSH
13496: LD_EXP 46
13500: PUSH
13501: LD_VAR 0 2
13505: ARRAY
13506: ARRAY
13507: PUSH
13508: LD_EXP 40
13512: PUSH
13513: LD_VAR 0 3
13517: ARRAY
13518: NONEQUAL
13519: PUSH
13520: LD_EXP 45
13524: NOT
13525: PUSH
13526: LD_EXP 46
13530: PUSH
13531: LD_VAR 0 2
13535: ARRAY
13536: PUSH
13537: LD_VAR 0 3
13541: NONEQUAL
13542: AND
13543: OR
13544: AND
13545: IFFALSE 13569
// HideArea ( j , BuildUpAreas [ i ] ) else
13547: LD_VAR 0 3
13551: PPUSH
13552: LD_EXP 65
13556: PUSH
13557: LD_VAR 0 2
13561: ARRAY
13562: PPUSH
13563: CALL_OW 333
13567: GO 13599
// if ( j = your_side ) then
13569: LD_VAR 0 3
13573: PUSH
13574: LD_OWVAR 2
13578: EQUAL
13579: IFFALSE 13599
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
13581: LD_EXP 65
13585: PUSH
13586: LD_VAR 0 2
13590: ARRAY
13591: PPUSH
13592: LD_INT 5
13594: PPUSH
13595: CALL_OW 424
13599: GO 13477
13601: POP
13602: POP
13603: GO 13449
13605: POP
13606: POP
// end ;
13607: LD_VAR 0 1
13611: RET
// export function EndBuildUp ; var i , j ; begin
13612: LD_INT 0
13614: PPUSH
13615: PPUSH
13616: PPUSH
// buildUpTimeActive := false ;
13617: LD_ADDR_EXP 66
13621: PUSH
13622: LD_INT 0
13624: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
13625: LD_ADDR_VAR 0 2
13629: PUSH
13630: DOUBLE
13631: LD_INT 1
13633: DEC
13634: ST_TO_ADDR
13635: LD_EXP 65
13639: PUSH
13640: FOR_TO
13641: IFFALSE 13796
// if Position_Sides [ i ] then
13643: LD_EXP 46
13647: PUSH
13648: LD_VAR 0 2
13652: ARRAY
13653: IFFALSE 13794
// for j := 1 to 8 do
13655: LD_ADDR_VAR 0 3
13659: PUSH
13660: DOUBLE
13661: LD_INT 1
13663: DEC
13664: ST_TO_ADDR
13665: LD_INT 8
13667: PUSH
13668: FOR_TO
13669: IFFALSE 13792
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13671: LD_EXP 43
13675: PUSH
13676: LD_VAR 0 3
13680: ARRAY
13681: PUSH
13682: LD_EXP 40
13686: PUSH
13687: LD_EXP 46
13691: PUSH
13692: LD_VAR 0 2
13696: ARRAY
13697: ARRAY
13698: PUSH
13699: LD_EXP 40
13703: PUSH
13704: LD_VAR 0 3
13708: ARRAY
13709: NONEQUAL
13710: PUSH
13711: LD_EXP 45
13715: NOT
13716: PUSH
13717: LD_EXP 46
13721: PUSH
13722: LD_VAR 0 2
13726: ARRAY
13727: PUSH
13728: LD_VAR 0 3
13732: NONEQUAL
13733: AND
13734: OR
13735: AND
13736: IFFALSE 13760
// ShowArea ( j , BuildUpAreas [ i ] ) else
13738: LD_VAR 0 3
13742: PPUSH
13743: LD_EXP 65
13747: PUSH
13748: LD_VAR 0 2
13752: ARRAY
13753: PPUSH
13754: CALL_OW 334
13758: GO 13790
// if ( j = your_side ) then
13760: LD_VAR 0 3
13764: PUSH
13765: LD_OWVAR 2
13769: EQUAL
13770: IFFALSE 13790
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
13772: LD_EXP 65
13776: PUSH
13777: LD_VAR 0 2
13781: ARRAY
13782: PPUSH
13783: LD_INT 0
13785: PPUSH
13786: CALL_OW 424
13790: GO 13668
13792: POP
13793: POP
13794: GO 13640
13796: POP
13797: POP
// end ;
13798: LD_VAR 0 1
13802: RET
// every 5 trigger buildUpTimeActive do var i , un ;
13803: LD_EXP 66
13807: IFFALSE 13990
13809: GO 13811
13811: DISABLE
13812: LD_INT 0
13814: PPUSH
13815: PPUSH
// begin for i := 1 to BuildUpAreas do
13816: LD_ADDR_VAR 0 1
13820: PUSH
13821: DOUBLE
13822: LD_INT 1
13824: DEC
13825: ST_TO_ADDR
13826: LD_EXP 65
13830: PUSH
13831: FOR_TO
13832: IFFALSE 13987
// if Position_Sides [ i ] then
13834: LD_EXP 46
13838: PUSH
13839: LD_VAR 0 1
13843: ARRAY
13844: IFFALSE 13985
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13846: LD_ADDR_VAR 0 2
13850: PUSH
13851: LD_EXP 65
13855: PUSH
13856: LD_VAR 0 1
13860: ARRAY
13861: PPUSH
13862: LD_INT 2
13864: PUSH
13865: LD_INT 21
13867: PUSH
13868: LD_INT 1
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PUSH
13875: LD_INT 21
13877: PUSH
13878: LD_INT 2
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: LIST
13889: PUSH
13890: LD_INT 22
13892: PUSH
13893: LD_OWVAR 2
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PPUSH
13906: CALL_OW 70
13910: PUSH
13911: FOR_IN
13912: IFFALSE 13983
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
13914: LD_EXP 40
13918: PUSH
13919: LD_EXP 46
13923: PUSH
13924: LD_VAR 0 1
13928: ARRAY
13929: ARRAY
13930: PUSH
13931: LD_EXP 40
13935: PUSH
13936: LD_OWVAR 2
13940: ARRAY
13941: NONEQUAL
13942: PUSH
13943: LD_EXP 45
13947: NOT
13948: PUSH
13949: LD_EXP 46
13953: PUSH
13954: LD_VAR 0 1
13958: ARRAY
13959: PUSH
13960: LD_OWVAR 2
13964: NONEQUAL
13965: AND
13966: OR
13967: IFFALSE 13981
// ComMoveToArea ( un , BuildUpEscape ) ;
13969: LD_VAR 0 2
13973: PPUSH
13974: LD_INT 28
13976: PPUSH
13977: CALL_OW 113
13981: GO 13911
13983: POP
13984: POP
13985: GO 13831
13987: POP
13988: POP
// enable ;
13989: ENABLE
// end ;
13990: PPOPN 2
13992: END
// every 0 0$1 trigger def_builduptime do
13993: LD_EXP 17
13997: IFFALSE 14023
13999: GO 14001
14001: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14002: LD_INT 8400
14004: PUSH
14005: LD_EXP 17
14009: PUSH
14010: LD_INT 2100
14012: MUL
14013: PLUS
14014: PPUSH
14015: CALL_OW 67
// EndBuildUp ;
14019: CALL 13612 0 0
// end ; end_of_file
14023: END
// export Game_Type , def_game_rules ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
14024: LD_INT 0
14026: PPUSH
14027: PPUSH
// if ( not IAmSpec ) then
14028: CALL_OW 531
14032: NOT
14033: IFFALSE 14049
// Result := Limits_Info ^  ;
14035: LD_ADDR_VAR 0 1
14039: PUSH
14040: LD_LOC 25
14044: PUSH
14045: LD_STRING 
14047: ADD
14048: ST_TO_ADDR
// for i := 1 to 8 do
14049: LD_ADDR_VAR 0 2
14053: PUSH
14054: DOUBLE
14055: LD_INT 1
14057: DEC
14058: ST_TO_ADDR
14059: LD_INT 8
14061: PUSH
14062: FOR_TO
14063: IFFALSE 14108
// if Cheaters [ i ] then
14065: LD_LOC 26
14069: PUSH
14070: LD_VAR 0 2
14074: ARRAY
14075: IFFALSE 14106
// Result := Result ^ [ #Cheater , i , i ] ;
14077: LD_ADDR_VAR 0 1
14081: PUSH
14082: LD_VAR 0 1
14086: PUSH
14087: LD_STRING #Cheater
14089: PUSH
14090: LD_VAR 0 2
14094: PUSH
14095: LD_VAR 0 2
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: LIST
14104: ADD
14105: ST_TO_ADDR
14106: GO 14062
14108: POP
14109: POP
// end ;
14110: LD_VAR 0 1
14114: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
14115: LD_INT 0
14117: PPUSH
14118: PPUSH
14119: PPUSH
14120: PPUSH
14121: PPUSH
// case Game_Type of 10 :
14122: LD_EXP 67
14126: PUSH
14127: LD_INT 10
14129: DOUBLE
14130: EQUAL
14131: IFTRUE 14135
14133: GO 14146
14135: POP
// def_game_rules := 1 ; 11 :
14136: LD_ADDR_EXP 68
14140: PUSH
14141: LD_INT 1
14143: ST_TO_ADDR
14144: GO 14166
14146: LD_INT 11
14148: DOUBLE
14149: EQUAL
14150: IFTRUE 14154
14152: GO 14165
14154: POP
// def_game_rules := 3 ; end ;
14155: LD_ADDR_EXP 68
14159: PUSH
14160: LD_INT 3
14162: ST_TO_ADDR
14163: GO 14166
14165: POP
// case def_game_rules of 0 :
14166: LD_EXP 68
14170: PUSH
14171: LD_INT 0
14173: DOUBLE
14174: EQUAL
14175: IFTRUE 14179
14177: GO 14184
14179: POP
// exit ; 1 :
14180: GO 14792
14182: GO 14692
14184: LD_INT 1
14186: DOUBLE
14187: EQUAL
14188: IFTRUE 14192
14190: GO 14424
14192: POP
// begin def_main_base = 1 ;
14193: LD_ADDR_EXP 1
14197: PUSH
14198: LD_INT 1
14200: ST_TO_ADDR
// def_secondary_base = 0 ;
14201: LD_ADDR_EXP 2
14205: PUSH
14206: LD_INT 0
14208: ST_TO_ADDR
// def_defence_level = 1 ;
14209: LD_ADDR_EXP 3
14213: PUSH
14214: LD_INT 1
14216: ST_TO_ADDR
// def_amount_of_people = 2 ;
14217: LD_ADDR_EXP 4
14221: PUSH
14222: LD_INT 2
14224: ST_TO_ADDR
// def_initial_level = 1 ;
14225: LD_ADDR_EXP 5
14229: PUSH
14230: LD_INT 1
14232: ST_TO_ADDR
// def_main_deposits = 2 ;
14233: LD_ADDR_EXP 6
14237: PUSH
14238: LD_INT 2
14240: ST_TO_ADDR
// def_secondary_deposits = 1 ;
14241: LD_ADDR_EXP 7
14245: PUSH
14246: LD_INT 1
14248: ST_TO_ADDR
// def_siberite_detection = 1 ;
14249: LD_ADDR_EXP 8
14253: PUSH
14254: LD_INT 1
14256: ST_TO_ADDR
// def_starting_resources = 2 ;
14257: LD_ADDR_EXP 9
14261: PUSH
14262: LD_INT 2
14264: ST_TO_ADDR
// def_shipments_density = 1 ;
14265: LD_ADDR_EXP 10
14269: PUSH
14270: LD_INT 1
14272: ST_TO_ADDR
// def_people_arrivals = 0 ;
14273: LD_ADDR_EXP 11
14277: PUSH
14278: LD_INT 0
14280: ST_TO_ADDR
// def_people_loyality = 0 ;
14281: LD_ADDR_EXP 12
14285: PUSH
14286: LD_INT 0
14288: ST_TO_ADDR
// def_people_info = 0 ;
14289: LD_ADDR_EXP 13
14293: PUSH
14294: LD_INT 0
14296: ST_TO_ADDR
// def_morale_flags = 1 ;
14297: LD_ADDR_EXP 14
14301: PUSH
14302: LD_INT 1
14304: ST_TO_ADDR
// def_siberite_bomb = 0 ;
14305: LD_ADDR_EXP 15
14309: PUSH
14310: LD_INT 0
14312: ST_TO_ADDR
// def_builduptime = 2 ;
14313: LD_ADDR_EXP 17
14317: PUSH
14318: LD_INT 2
14320: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
14321: LD_ADDR_VAR 0 2
14325: PUSH
14326: EMPTY
14327: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14328: LD_ADDR_VAR 0 3
14332: PUSH
14333: EMPTY
14334: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14335: LD_ADDR_LOC 20
14339: PUSH
14340: EMPTY
14341: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14342: LD_ADDR_LOC 21
14346: PUSH
14347: EMPTY
14348: ST_TO_ADDR
// Banned_Controls := [ ] ;
14349: LD_ADDR_LOC 22
14353: PUSH
14354: EMPTY
14355: ST_TO_ADDR
// Banned_Engines := [ ] ;
14356: LD_ADDR_LOC 23
14360: PUSH
14361: EMPTY
14362: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14363: LD_ADDR_LOC 18
14367: PUSH
14368: LD_INT 37
14370: PUSH
14371: EMPTY
14372: LIST
14373: PUSH
14374: LD_INT 4
14376: PUSH
14377: LD_INT 5
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: LD_INT 31
14386: PUSH
14387: LD_INT 32
14389: PUSH
14390: LD_INT 33
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: LIST
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: LIST
14402: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
14403: LD_ADDR_LOC 19
14407: PUSH
14408: LD_INT 2
14410: PUSH
14411: LD_INT 2
14413: PUSH
14414: LD_INT 4
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: LIST
14421: ST_TO_ADDR
// end ; 3 :
14422: GO 14692
14424: LD_INT 3
14426: DOUBLE
14427: EQUAL
14428: IFTRUE 14432
14430: GO 14691
14432: POP
// begin def_main_base = 1 ;
14433: LD_ADDR_EXP 1
14437: PUSH
14438: LD_INT 1
14440: ST_TO_ADDR
// def_secondary_base = 0 ;
14441: LD_ADDR_EXP 2
14445: PUSH
14446: LD_INT 0
14448: ST_TO_ADDR
// def_defence_level = 0 ;
14449: LD_ADDR_EXP 3
14453: PUSH
14454: LD_INT 0
14456: ST_TO_ADDR
// def_amount_of_people = 2 ;
14457: LD_ADDR_EXP 4
14461: PUSH
14462: LD_INT 2
14464: ST_TO_ADDR
// def_initial_level = 3 ;
14465: LD_ADDR_EXP 5
14469: PUSH
14470: LD_INT 3
14472: ST_TO_ADDR
// def_main_deposits = 2 ;
14473: LD_ADDR_EXP 6
14477: PUSH
14478: LD_INT 2
14480: ST_TO_ADDR
// def_secondary_deposits = 1 ;
14481: LD_ADDR_EXP 7
14485: PUSH
14486: LD_INT 1
14488: ST_TO_ADDR
// def_siberite_detection = 1 ;
14489: LD_ADDR_EXP 8
14493: PUSH
14494: LD_INT 1
14496: ST_TO_ADDR
// def_starting_resources = 3 ;
14497: LD_ADDR_EXP 9
14501: PUSH
14502: LD_INT 3
14504: ST_TO_ADDR
// def_shipments_density = 1 ;
14505: LD_ADDR_EXP 10
14509: PUSH
14510: LD_INT 1
14512: ST_TO_ADDR
// def_people_arrivals = 0 ;
14513: LD_ADDR_EXP 11
14517: PUSH
14518: LD_INT 0
14520: ST_TO_ADDR
// def_people_loyality = 0 ;
14521: LD_ADDR_EXP 12
14525: PUSH
14526: LD_INT 0
14528: ST_TO_ADDR
// def_people_info = 0 ;
14529: LD_ADDR_EXP 13
14533: PUSH
14534: LD_INT 0
14536: ST_TO_ADDR
// def_morale_flags = 0 ;
14537: LD_ADDR_EXP 14
14541: PUSH
14542: LD_INT 0
14544: ST_TO_ADDR
// def_siberite_bomb = 0 ;
14545: LD_ADDR_EXP 15
14549: PUSH
14550: LD_INT 0
14552: ST_TO_ADDR
// def_builduptime = 1 ;
14553: LD_ADDR_EXP 17
14557: PUSH
14558: LD_INT 1
14560: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14561: LD_ADDR_VAR 0 2
14565: PUSH
14566: LD_INT 23
14568: PUSH
14569: EMPTY
14570: LIST
14571: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
14572: LD_ADDR_VAR 0 3
14576: PUSH
14577: LD_INT 2
14579: PUSH
14580: LD_INT 37
14582: PUSH
14583: LD_INT 32
14585: PUSH
14586: LD_INT 33
14588: PUSH
14589: LD_INT 36
14591: PUSH
14592: LD_INT 16
14594: PUSH
14595: LD_INT 23
14597: PUSH
14598: LD_INT 21
14600: PUSH
14601: LD_INT 18
14603: PUSH
14604: LD_INT 22
14606: PUSH
14607: LD_INT 20
14609: PUSH
14610: LD_INT 19
14612: PUSH
14613: LD_INT 25
14615: PUSH
14616: LD_INT 17
14618: PUSH
14619: LD_INT 24
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14639: LD_ADDR_LOC 20
14643: PUSH
14644: EMPTY
14645: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14646: LD_ADDR_LOC 21
14650: PUSH
14651: EMPTY
14652: ST_TO_ADDR
// Banned_Controls := [ ] ;
14653: LD_ADDR_LOC 22
14657: PUSH
14658: EMPTY
14659: ST_TO_ADDR
// Banned_Engines := [ ] ;
14660: LD_ADDR_LOC 23
14664: PUSH
14665: EMPTY
14666: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14667: LD_ADDR_LOC 18
14671: PUSH
14672: EMPTY
14673: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14674: LD_ADDR_LOC 19
14678: PUSH
14679: EMPTY
14680: ST_TO_ADDR
// No_Mechs := true ;
14681: LD_ADDR_EXP 69
14685: PUSH
14686: LD_INT 1
14688: ST_TO_ADDR
// end ; end ;
14689: GO 14692
14691: POP
// for i := 1 to 8 do
14692: LD_ADDR_VAR 0 4
14696: PUSH
14697: DOUBLE
14698: LD_INT 1
14700: DEC
14701: ST_TO_ADDR
14702: LD_INT 8
14704: PUSH
14705: FOR_TO
14706: IFFALSE 14790
// if Side_Positions [ i ] then
14708: LD_EXP 43
14712: PUSH
14713: LD_VAR 0 4
14717: ARRAY
14718: IFFALSE 14788
// begin for j in Unavailable_Techs do
14720: LD_ADDR_VAR 0 5
14724: PUSH
14725: LD_VAR 0 2
14729: PUSH
14730: FOR_IN
14731: IFFALSE 14752
// SetTech ( j , i , 0 ) ;
14733: LD_VAR 0 5
14737: PPUSH
14738: LD_VAR 0 4
14742: PPUSH
14743: LD_INT 0
14745: PPUSH
14746: CALL_OW 322
14750: GO 14730
14752: POP
14753: POP
// for j in Unavailable_Builds do
14754: LD_ADDR_VAR 0 5
14758: PUSH
14759: LD_VAR 0 3
14763: PUSH
14764: FOR_IN
14765: IFFALSE 14786
// SetRestrict ( j , i , 0 ) ;
14767: LD_VAR 0 5
14771: PPUSH
14772: LD_VAR 0 4
14776: PPUSH
14777: LD_INT 0
14779: PPUSH
14780: CALL_OW 324
14784: GO 14764
14786: POP
14787: POP
// end ;
14788: GO 14705
14790: POP
14791: POP
// end ;
14792: LD_VAR 0 1
14796: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
14797: LD_INT 0
14799: PPUSH
14800: PPUSH
14801: PPUSH
14802: PPUSH
14803: PPUSH
14804: PPUSH
14805: PPUSH
// for i := 1 to Restricted_Builds do
14806: LD_ADDR_VAR 0 2
14810: PUSH
14811: DOUBLE
14812: LD_INT 1
14814: DEC
14815: ST_TO_ADDR
14816: LD_LOC 18
14820: PUSH
14821: FOR_TO
14822: IFFALSE 15132
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
14824: LD_LOC 18
14828: PUSH
14829: LD_VAR 0 2
14833: ARRAY
14834: PUSH
14835: LD_INT 1
14837: ARRAY
14838: PUSH
14839: LD_INT 31
14841: DOUBLE
14842: EQUAL
14843: IFTRUE 14859
14845: LD_INT 32
14847: DOUBLE
14848: EQUAL
14849: IFTRUE 14859
14851: LD_INT 33
14853: DOUBLE
14854: EQUAL
14855: IFTRUE 14859
14857: GO 14870
14859: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
14860: LD_ADDR_VAR 0 6
14864: PUSH
14865: LD_STRING #Turrets
14867: ST_TO_ADDR
14868: GO 14915
14870: LD_INT 4
14872: DOUBLE
14873: EQUAL
14874: IFTRUE 14884
14876: LD_INT 5
14878: DOUBLE
14879: EQUAL
14880: IFTRUE 14884
14882: GO 14895
14884: POP
// btype := #Armouries ; b_Behemoth :
14885: LD_ADDR_VAR 0 6
14889: PUSH
14890: LD_STRING #Armouries
14892: ST_TO_ADDR
14893: GO 14915
14895: LD_INT 37
14897: DOUBLE
14898: EQUAL
14899: IFTRUE 14903
14901: GO 14914
14903: POP
// btype := #Behemoths ; end ;
14904: LD_ADDR_VAR 0 6
14908: PUSH
14909: LD_STRING #Behemoths
14911: ST_TO_ADDR
14912: GO 14915
14914: POP
// list := [ ] ;
14915: LD_ADDR_VAR 0 7
14919: PUSH
14920: EMPTY
14921: ST_TO_ADDR
// for j := 1 to 8 do
14922: LD_ADDR_VAR 0 3
14926: PUSH
14927: DOUBLE
14928: LD_INT 1
14930: DEC
14931: ST_TO_ADDR
14932: LD_INT 8
14934: PUSH
14935: FOR_TO
14936: IFFALSE 15029
// if Side_Positions [ j ] then
14938: LD_EXP 43
14942: PUSH
14943: LD_VAR 0 3
14947: ARRAY
14948: IFFALSE 15027
// begin amount := 0 ;
14950: LD_ADDR_VAR 0 5
14954: PUSH
14955: LD_INT 0
14957: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
14958: LD_ADDR_VAR 0 4
14962: PUSH
14963: LD_LOC 18
14967: PUSH
14968: LD_VAR 0 2
14972: ARRAY
14973: PUSH
14974: FOR_IN
14975: IFFALSE 15023
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
14977: LD_ADDR_VAR 0 5
14981: PUSH
14982: LD_VAR 0 5
14986: PUSH
14987: LD_INT 22
14989: PUSH
14990: LD_VAR 0 3
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 30
15001: PUSH
15002: LD_VAR 0 4
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PPUSH
15015: CALL_OW 69
15019: PLUS
15020: ST_TO_ADDR
15021: GO 14974
15023: POP
15024: POP
// break ;
15025: GO 15029
// end ;
15027: GO 14935
15029: POP
15030: POP
// list := [ ] ;
15031: LD_ADDR_VAR 0 7
15035: PUSH
15036: EMPTY
15037: ST_TO_ADDR
// for j := 1 to 8 do
15038: LD_ADDR_VAR 0 3
15042: PUSH
15043: DOUBLE
15044: LD_INT 1
15046: DEC
15047: ST_TO_ADDR
15048: LD_INT 8
15050: PUSH
15051: FOR_TO
15052: IFFALSE 15072
// list := list ^ amount ;
15054: LD_ADDR_VAR 0 7
15058: PUSH
15059: LD_VAR 0 7
15063: PUSH
15064: LD_VAR 0 5
15068: ADD
15069: ST_TO_ADDR
15070: GO 15051
15072: POP
15073: POP
// Already_Built := Already_Built ^ [ list ] ;
15074: LD_ADDR_LOC 24
15078: PUSH
15079: LD_LOC 24
15083: PUSH
15084: LD_VAR 0 7
15088: PUSH
15089: EMPTY
15090: LIST
15091: ADD
15092: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
15093: LD_ADDR_LOC 25
15097: PUSH
15098: LD_LOC 25
15102: PUSH
15103: LD_VAR 0 6
15107: PUSH
15108: LD_VAR 0 5
15112: PUSH
15113: LD_LOC 19
15117: PUSH
15118: LD_VAR 0 2
15122: ARRAY
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: LIST
15128: ADD
15129: ST_TO_ADDR
// end ;
15130: GO 14821
15132: POP
15133: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15134: LD_ADDR_LOC 26
15138: PUSH
15139: LD_INT 0
15141: PUSH
15142: LD_INT 0
15144: PUSH
15145: LD_INT 0
15147: PUSH
15148: LD_INT 0
15150: PUSH
15151: LD_INT 0
15153: PUSH
15154: LD_INT 0
15156: PUSH
15157: LD_INT 0
15159: PUSH
15160: LD_INT 0
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: ST_TO_ADDR
// if Limits_Info then
15173: LD_LOC 25
15177: IFFALSE 15193
// Limits_Info := #Limits ^ Limits_Info ;
15179: LD_ADDR_LOC 25
15183: PUSH
15184: LD_STRING #Limits
15186: PUSH
15187: LD_LOC 25
15191: ADD
15192: ST_TO_ADDR
// end ;
15193: LD_VAR 0 1
15197: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
15198: LD_INT 0
15200: PPUSH
15201: PPUSH
15202: PPUSH
15203: PPUSH
// for i := 1 to Restricted_Builds do
15204: LD_ADDR_VAR 0 7
15208: PUSH
15209: DOUBLE
15210: LD_INT 1
15212: DEC
15213: ST_TO_ADDR
15214: LD_LOC 18
15218: PUSH
15219: FOR_TO
15220: IFFALSE 15643
// if BType in Restricted_Builds [ i ] then
15222: LD_VAR 0 2
15226: PUSH
15227: LD_LOC 18
15231: PUSH
15232: LD_VAR 0 7
15236: ARRAY
15237: IN
15238: IFFALSE 15641
// begin if old_side then
15240: LD_VAR 0 4
15244: IFFALSE 15370
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
15246: LD_LOC 24
15250: PUSH
15251: LD_VAR 0 7
15255: ARRAY
15256: PUSH
15257: LD_VAR 0 3
15261: ARRAY
15262: PUSH
15263: LD_VAR 0 5
15267: PLUS
15268: PUSH
15269: LD_LOC 19
15273: PUSH
15274: LD_VAR 0 7
15278: ARRAY
15279: GREATER
15280: IFFALSE 15306
// begin SetSide ( un , old_side ) ;
15282: LD_VAR 0 1
15286: PPUSH
15287: LD_VAR 0 4
15291: PPUSH
15292: CALL_OW 235
// count := 0 ;
15296: LD_ADDR_VAR 0 5
15300: PUSH
15301: LD_INT 0
15303: ST_TO_ADDR
// end else
15304: GO 15370
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
15306: LD_ADDR_LOC 24
15310: PUSH
15311: LD_LOC 24
15315: PPUSH
15316: LD_VAR 0 7
15320: PPUSH
15321: LD_LOC 24
15325: PUSH
15326: LD_VAR 0 7
15330: ARRAY
15331: PPUSH
15332: LD_VAR 0 4
15336: PPUSH
15337: LD_LOC 24
15341: PUSH
15342: LD_VAR 0 7
15346: ARRAY
15347: PUSH
15348: LD_VAR 0 4
15352: ARRAY
15353: PUSH
15354: LD_VAR 0 5
15358: MINUS
15359: PPUSH
15360: CALL_OW 1
15364: PPUSH
15365: CALL_OW 1
15369: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
15370: LD_ADDR_LOC 24
15374: PUSH
15375: LD_LOC 24
15379: PPUSH
15380: LD_VAR 0 7
15384: PPUSH
15385: LD_LOC 24
15389: PUSH
15390: LD_VAR 0 7
15394: ARRAY
15395: PPUSH
15396: LD_VAR 0 3
15400: PPUSH
15401: LD_LOC 24
15405: PUSH
15406: LD_VAR 0 7
15410: ARRAY
15411: PUSH
15412: LD_VAR 0 3
15416: ARRAY
15417: PUSH
15418: LD_VAR 0 5
15422: PLUS
15423: PPUSH
15424: CALL_OW 1
15428: PPUSH
15429: CALL_OW 1
15433: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
15434: LD_VAR 0 5
15438: PUSH
15439: LD_INT 0
15441: NONEQUAL
15442: PUSH
15443: LD_VAR 0 3
15447: PUSH
15448: LD_OWVAR 2
15452: EQUAL
15453: AND
15454: IFFALSE 15497
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
15456: LD_ADDR_LOC 25
15460: PUSH
15461: LD_LOC 25
15465: PPUSH
15466: LD_INT 3
15468: PUSH
15469: LD_VAR 0 7
15473: MUL
15474: PPUSH
15475: LD_LOC 24
15479: PUSH
15480: LD_VAR 0 7
15484: ARRAY
15485: PUSH
15486: LD_VAR 0 3
15490: ARRAY
15491: PPUSH
15492: CALL_OW 1
15496: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
15497: LD_LOC 24
15501: PUSH
15502: LD_VAR 0 7
15506: ARRAY
15507: PUSH
15508: LD_VAR 0 3
15512: ARRAY
15513: PUSH
15514: LD_LOC 19
15518: PUSH
15519: LD_VAR 0 7
15523: ARRAY
15524: GREATER
15525: IFFALSE 15552
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
15527: LD_ADDR_LOC 26
15531: PUSH
15532: LD_LOC 26
15536: PPUSH
15537: LD_VAR 0 3
15541: PPUSH
15542: LD_INT 1
15544: PPUSH
15545: CALL_OW 1
15549: ST_TO_ADDR
// end else
15550: GO 15639
// begin for j := 1 to Restricted_Builds do
15552: LD_ADDR_VAR 0 8
15556: PUSH
15557: DOUBLE
15558: LD_INT 1
15560: DEC
15561: ST_TO_ADDR
15562: LD_LOC 18
15566: PUSH
15567: FOR_TO
15568: IFFALSE 15612
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
15570: LD_LOC 24
15574: PUSH
15575: LD_VAR 0 8
15579: ARRAY
15580: PUSH
15581: LD_VAR 0 3
15585: ARRAY
15586: PUSH
15587: LD_LOC 19
15591: PUSH
15592: LD_VAR 0 8
15596: ARRAY
15597: GREATER
15598: IFFALSE 15610
// begin Is_Cheater := true ;
15600: LD_ADDR_VAR 0 9
15604: PUSH
15605: LD_INT 1
15607: ST_TO_ADDR
// break ;
15608: GO 15612
// end ;
15610: GO 15567
15612: POP
15613: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
15614: LD_ADDR_LOC 26
15618: PUSH
15619: LD_LOC 26
15623: PPUSH
15624: LD_VAR 0 3
15628: PPUSH
15629: LD_VAR 0 9
15633: PPUSH
15634: CALL_OW 1
15638: ST_TO_ADDR
// end ; break ;
15639: GO 15643
// end ;
15641: GO 15219
15643: POP
15644: POP
// end ;
15645: LD_VAR 0 6
15649: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
15650: LD_VAR 0 5
15654: PUSH
15655: LD_LOC 20
15659: IN
15660: PUSH
15661: LD_VAR 0 2
15665: PUSH
15666: LD_LOC 21
15670: IN
15671: OR
15672: PUSH
15673: LD_VAR 0 4
15677: PUSH
15678: LD_LOC 22
15682: IN
15683: OR
15684: PUSH
15685: LD_VAR 0 3
15689: PUSH
15690: LD_LOC 23
15694: IN
15695: OR
15696: IFFALSE 15707
// ComCancel ( factory ) ;
15698: LD_VAR 0 1
15702: PPUSH
15703: CALL_OW 127
// end ;
15707: PPOPN 5
15709: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
15710: LD_VAR 0 2
15714: PUSH
15715: LD_LOC 20
15719: IN
15720: IFFALSE 15731
// ComCancel ( building ) ;
15722: LD_VAR 0 1
15726: PPUSH
15727: CALL_OW 127
// end ; end_of_file
15731: PPOPN 2
15733: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
15734: LD_INT 0
15736: PPUSH
15737: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
15738: LD_ADDR_VAR 0 2
15742: PUSH
15743: LD_STRING #Multi1x1-Time
15745: PUSH
15746: LD_OWVAR 1
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: ST_TO_ADDR
// if WaitServerStrings then
15755: LD_EXP 71
15759: IFFALSE 15777
// AllStrings = AllStrings ^ WaitServerStrings ;
15761: LD_ADDR_VAR 0 2
15765: PUSH
15766: LD_VAR 0 2
15770: PUSH
15771: LD_EXP 71
15775: ADD
15776: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
15777: LD_INT 0
15779: PUSH
15780: LD_EXP 38
15784: PUSH
15785: LD_OWVAR 1
15789: MINUS
15790: LESSEQUAL
15791: IFFALSE 15822
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
15793: LD_ADDR_VAR 0 2
15797: PUSH
15798: LD_VAR 0 2
15802: PUSH
15803: LD_STRING #allowedsibbomb
15805: PUSH
15806: LD_EXP 38
15810: PUSH
15811: LD_OWVAR 1
15815: MINUS
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: ADD
15821: ST_TO_ADDR
// if ( ExtraStrings ) then
15822: LD_EXP 70
15826: IFFALSE 15848
// AllStrings := AllStrings ^  ^ ExtraStrings ;
15828: LD_ADDR_VAR 0 2
15832: PUSH
15833: LD_VAR 0 2
15837: PUSH
15838: LD_STRING 
15840: ADD
15841: PUSH
15842: LD_EXP 70
15846: ADD
15847: ST_TO_ADDR
// if ( LimitsStrings ) then
15848: CALL 14024 0 0
15852: IFFALSE 15874
// AllStrings := AllStrings ^  ^ LimitsStrings ;
15854: LD_ADDR_VAR 0 2
15858: PUSH
15859: LD_VAR 0 2
15863: PUSH
15864: LD_STRING 
15866: ADD
15867: PUSH
15868: CALL 14024 0 0
15872: ADD
15873: ST_TO_ADDR
// Display_Strings := AllStrings ;
15874: LD_ADDR_OWVAR 47
15878: PUSH
15879: LD_VAR 0 2
15883: ST_TO_ADDR
// end ;
15884: LD_VAR 0 1
15888: RET
// every 0 0$1 do
15889: GO 15891
15891: DISABLE
// begin ShowTimer ;
15892: CALL 15734 0 0
// enable ;
15896: ENABLE
// end ; end_of_file
15897: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
15898: LD_INT 0
15900: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
15901: LD_VAR 0 1
15905: PPUSH
15906: CALL_OW 255
15910: PUSH
15911: LD_VAR 0 4
15915: EQUAL
15916: IFFALSE 15935
// begin SetAchievement ( ACH_RAD ) ;
15918: LD_STRING ACH_RAD
15920: PPUSH
15921: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
15925: LD_STRING ACH_NL
15927: PPUSH
15928: LD_INT 1
15930: PPUSH
15931: CALL_OW 564
// end end ;
15935: LD_VAR 0 5
15939: RET
// export function SA_Win ( side ) ; begin
15940: LD_INT 0
15942: PPUSH
// case side of 1 :
15943: LD_VAR 0 1
15947: PUSH
15948: LD_INT 1
15950: DOUBLE
15951: EQUAL
15952: IFTRUE 15956
15954: GO 15969
15956: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
15957: LD_STRING ACH_AH
15959: PPUSH
15960: LD_INT 1
15962: PPUSH
15963: CALL_OW 564
15967: GO 16132
15969: LD_INT 2
15971: DOUBLE
15972: EQUAL
15973: IFTRUE 15977
15975: GO 15990
15977: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
15978: LD_STRING ACH_E
15980: PPUSH
15981: LD_INT 1
15983: PPUSH
15984: CALL_OW 564
15988: GO 16132
15990: LD_INT 3
15992: DOUBLE
15993: EQUAL
15994: IFTRUE 15998
15996: GO 16011
15998: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
15999: LD_STRING ACH_OOL
16001: PPUSH
16002: LD_INT 1
16004: PPUSH
16005: CALL_OW 564
16009: GO 16132
16011: LD_INT 1
16013: PUSH
16014: LD_INT 2
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: DOUBLE
16021: EQUAL
16022: IFTRUE 16026
16024: GO 16051
16026: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
16027: LD_STRING ACH_AH
16029: PPUSH
16030: LD_REAL  5.00000000000000E-0001
16033: PPUSH
16034: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
16038: LD_STRING ACH_E
16040: PPUSH
16041: LD_REAL  5.00000000000000E-0001
16044: PPUSH
16045: CALL_OW 564
// end ; [ 2 , 3 ] :
16049: GO 16132
16051: LD_INT 2
16053: PUSH
16054: LD_INT 3
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: DOUBLE
16061: EQUAL
16062: IFTRUE 16066
16064: GO 16091
16066: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
16067: LD_STRING ACH_OOL
16069: PPUSH
16070: LD_REAL  5.00000000000000E-0001
16073: PPUSH
16074: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
16078: LD_STRING ACH_E
16080: PPUSH
16081: LD_REAL  5.00000000000000E-0001
16084: PPUSH
16085: CALL_OW 564
// end ; [ 3 , 1 ] :
16089: GO 16132
16091: LD_INT 3
16093: PUSH
16094: LD_INT 1
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: DOUBLE
16101: EQUAL
16102: IFTRUE 16106
16104: GO 16131
16106: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
16107: LD_STRING ACH_AH
16109: PPUSH
16110: LD_REAL  5.00000000000000E-0001
16113: PPUSH
16114: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
16118: LD_STRING ACH_OOL
16120: PPUSH
16121: LD_REAL  5.00000000000000E-0001
16124: PPUSH
16125: CALL_OW 564
// end ; end ;
16129: GO 16132
16131: POP
// end ; end_of_file
16132: LD_VAR 0 2
16136: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
16137: LD_INT 0
16139: PPUSH
16140: PPUSH
// enable ( 98 ) ;
16141: LD_INT 98
16143: ENABLE_MARKED
// GameEnded = false ;
16144: LD_ADDR_LOC 28
16148: PUSH
16149: LD_INT 0
16151: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16152: LD_ADDR_LOC 27
16156: PUSH
16157: LD_INT 0
16159: PUSH
16160: LD_INT 0
16162: PUSH
16163: LD_INT 0
16165: PUSH
16166: LD_INT 0
16168: PUSH
16169: LD_INT 0
16171: PUSH
16172: LD_INT 0
16174: PUSH
16175: LD_INT 0
16177: PUSH
16178: LD_INT 0
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: ST_TO_ADDR
// unfoged = false ;
16191: LD_ADDR_LOC 29
16195: PUSH
16196: LD_INT 0
16198: ST_TO_ADDR
// defeated_specs := [ ] ;
16199: LD_ADDR_LOC 30
16203: PUSH
16204: EMPTY
16205: ST_TO_ADDR
// for i = 1 to side_positions do
16206: LD_ADDR_VAR 0 2
16210: PUSH
16211: DOUBLE
16212: LD_INT 1
16214: DEC
16215: ST_TO_ADDR
16216: LD_EXP 43
16220: PUSH
16221: FOR_TO
16222: IFFALSE 16262
// if not side_positions [ i ] then
16224: LD_EXP 43
16228: PUSH
16229: LD_VAR 0 2
16233: ARRAY
16234: NOT
16235: IFFALSE 16260
// defeated = replace ( defeated , i , true ) ;
16237: LD_ADDR_LOC 27
16241: PUSH
16242: LD_LOC 27
16246: PPUSH
16247: LD_VAR 0 2
16251: PPUSH
16252: LD_INT 1
16254: PPUSH
16255: CALL_OW 1
16259: ST_TO_ADDR
16260: GO 16221
16262: POP
16263: POP
// end ;
16264: LD_VAR 0 1
16268: RET
// function CanWinLoose ; begin
16269: LD_INT 0
16271: PPUSH
// Result := true ;
16272: LD_ADDR_VAR 0 1
16276: PUSH
16277: LD_INT 1
16279: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
16280: CALL_OW 518
16284: PUSH
16285: CALL_OW 519
16289: PUSH
16290: LD_INT 0
16292: GREATER
16293: AND
16294: IFFALSE 16304
// Result := false ;
16296: LD_ADDR_VAR 0 1
16300: PUSH
16301: LD_INT 0
16303: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
16304: CALL_OW 531
16308: PUSH
16309: CALL_OW 519
16313: PUSH
16314: LD_INT 1
16316: GREATER
16317: AND
16318: IFFALSE 16328
// Result := false ;
16320: LD_ADDR_VAR 0 1
16324: PUSH
16325: LD_INT 0
16327: ST_TO_ADDR
// end ;
16328: LD_VAR 0 1
16332: RET
// export function HasPower ( i ) ; var k , h ; begin
16333: LD_INT 0
16335: PPUSH
16336: PPUSH
16337: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
16338: LD_VAR 0 1
16342: PPUSH
16343: CALL_OW 108
16347: NOT
16348: PUSH
16349: LD_EXP 42
16353: PUSH
16354: LD_VAR 0 1
16358: ARRAY
16359: NOT
16360: AND
16361: PUSH
16362: LD_OWVAR 4
16366: AND
16367: IFFALSE 16379
// begin result = false ;
16369: LD_ADDR_VAR 0 2
16373: PUSH
16374: LD_INT 0
16376: ST_TO_ADDR
// end else
16377: GO 16674
// case def_win_rules of 0 :
16379: LD_EXP 18
16383: PUSH
16384: LD_INT 0
16386: DOUBLE
16387: EQUAL
16388: IFTRUE 16392
16390: GO 16555
16392: POP
// if def_people_respawning then
16393: LD_EXP 19
16397: IFFALSE 16488
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
16399: LD_ADDR_VAR 0 2
16403: PUSH
16404: LD_INT 22
16406: PUSH
16407: LD_VAR 0 1
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: LD_INT 2
16418: PUSH
16419: LD_INT 21
16421: PUSH
16422: LD_INT 1
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: LD_INT 33
16431: PUSH
16432: LD_INT 3
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 33
16441: PUSH
16442: LD_INT 5
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 30
16451: PUSH
16452: LD_INT 0
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 30
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PPUSH
16481: CALL_OW 69
16485: ST_TO_ADDR
16486: GO 16553
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
16488: LD_ADDR_VAR 0 2
16492: PUSH
16493: LD_INT 22
16495: PUSH
16496: LD_VAR 0 1
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 2
16507: PUSH
16508: LD_INT 21
16510: PUSH
16511: LD_INT 1
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 33
16520: PUSH
16521: LD_INT 3
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: LD_INT 33
16530: PUSH
16531: LD_INT 5
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PPUSH
16548: CALL_OW 69
16552: ST_TO_ADDR
16553: GO 16674
16555: LD_INT 1
16557: DOUBLE
16558: EQUAL
16559: IFTRUE 16563
16561: GO 16602
16563: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
16564: LD_ADDR_VAR 0 2
16568: PUSH
16569: LD_INT 22
16571: PUSH
16572: LD_VAR 0 1
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 21
16583: PUSH
16584: LD_INT 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PPUSH
16595: CALL_OW 69
16599: ST_TO_ADDR
16600: GO 16674
16602: LD_INT 2
16604: DOUBLE
16605: EQUAL
16606: IFTRUE 16610
16608: GO 16673
16610: POP
// begin h = false ;
16611: LD_ADDR_VAR 0 4
16615: PUSH
16616: LD_INT 0
16618: ST_TO_ADDR
// for k in heroes [ i ] do
16619: LD_ADDR_VAR 0 3
16623: PUSH
16624: LD_EXP 57
16628: PUSH
16629: LD_VAR 0 1
16633: ARRAY
16634: PUSH
16635: FOR_IN
16636: IFFALSE 16659
// if IsLive ( k ) then
16638: LD_VAR 0 3
16642: PPUSH
16643: CALL_OW 300
16647: IFFALSE 16657
// h = true ;
16649: LD_ADDR_VAR 0 4
16653: PUSH
16654: LD_INT 1
16656: ST_TO_ADDR
16657: GO 16635
16659: POP
16660: POP
// Result := h ;
16661: LD_ADDR_VAR 0 2
16665: PUSH
16666: LD_VAR 0 4
16670: ST_TO_ADDR
// end ; end ;
16671: GO 16674
16673: POP
// end ;
16674: LD_VAR 0 2
16678: RET
// function AlliedSides ( i , j ) ; begin
16679: LD_INT 0
16681: PPUSH
// Result := false ;
16682: LD_ADDR_VAR 0 3
16686: PUSH
16687: LD_INT 0
16689: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
16690: LD_VAR 0 1
16694: PPUSH
16695: LD_VAR 0 2
16699: PPUSH
16700: CALL_OW 81
16704: PUSH
16705: LD_INT 1
16707: EQUAL
16708: PUSH
16709: LD_VAR 0 2
16713: PPUSH
16714: LD_VAR 0 1
16718: PPUSH
16719: CALL_OW 81
16723: PUSH
16724: LD_INT 1
16726: EQUAL
16727: AND
16728: PUSH
16729: LD_VAR 0 1
16733: PPUSH
16734: CALL_OW 83
16738: AND
16739: PUSH
16740: LD_VAR 0 2
16744: PPUSH
16745: CALL_OW 83
16749: AND
16750: IFFALSE 16760
// Result := true ;
16752: LD_ADDR_VAR 0 3
16756: PUSH
16757: LD_INT 1
16759: ST_TO_ADDR
// end ;
16760: LD_VAR 0 3
16764: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
16765: CALL 16269 0 0
16769: PUSH
16770: LD_LOC 28
16774: NOT
16775: AND
16776: IFFALSE 16792
16778: GO 16780
16780: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
16781: LD_ADDR_EXP 71
16785: PUSH
16786: LD_STRING #Player-Ended
16788: PUSH
16789: EMPTY
16790: LIST
16791: ST_TO_ADDR
16792: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
16793: CALL 16269 0 0
16797: PUSH
16798: LD_LOC 28
16802: AND
16803: IFFALSE 16812
16805: GO 16807
16807: DISABLE
// YouLostInMultiplayer ;
16808: CALL_OW 107
16812: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
16813: CALL 16269 0 0
16817: NOT
16818: PUSH
16819: CALL_OW 531
16823: NOT
16824: AND
16825: IFFALSE 16841
16827: GO 16829
16829: DISABLE
// WaitServerStrings = [ #server-wait ] ;
16830: LD_ADDR_EXP 71
16834: PUSH
16835: LD_STRING #server-wait
16837: PUSH
16838: EMPTY
16839: LIST
16840: ST_TO_ADDR
16841: END
// every 100 trigger IAmSpec do
16842: CALL_OW 531
16846: IFFALSE 16862
16848: GO 16850
16850: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
16851: LD_ADDR_EXP 71
16855: PUSH
16856: LD_STRING #Player-IAmSpec
16858: PUSH
16859: EMPTY
16860: LIST
16861: ST_TO_ADDR
16862: END
// every 100 trigger GameEnded and IAmSpec do
16863: LD_LOC 28
16867: PUSH
16868: CALL_OW 531
16872: AND
16873: IFFALSE 16882
16875: GO 16877
16877: DISABLE
// YouLostInMultiplayer ;
16878: CALL_OW 107
16882: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
16883: CALL 16269 0 0
16887: PUSH
16888: LD_LOC 28
16892: NOT
16893: AND
16894: IFFALSE 16910
16896: GO 16898
16898: DISABLE
// WaitServerStrings = [ $player-win ] ;
16899: LD_ADDR_EXP 71
16903: PUSH
16904: LD_STRING $player-win
16906: PUSH
16907: EMPTY
16908: LIST
16909: ST_TO_ADDR
16910: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
16911: CALL 16269 0 0
16915: PUSH
16916: LD_LOC 28
16920: AND
16921: IFFALSE 16945
16923: GO 16925
16925: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
16926: LD_EXP 44
16930: PUSH
16931: LD_OWVAR 7
16935: ARRAY
16936: PPUSH
16937: CALL 15940 0 1
// YouWinInMultiplayer ;
16941: CALL_OW 106
// end ;
16945: END
// every 100 trigger isEditor marked 401 do
16946: LD_OWVAR 84
16950: IFFALSE 16966
16952: GO 16954
16954: DISABLE
// Debug_Strings = [ You won ] ;
16955: LD_ADDR_OWVAR 48
16959: PUSH
16960: LD_STRING You won
16962: PUSH
16963: EMPTY
16964: LIST
16965: ST_TO_ADDR
16966: END
// every 100 trigger isEditor marked 400 do
16967: LD_OWVAR 84
16971: IFFALSE 16987
16973: GO 16975
16975: DISABLE
// Debug_Strings = [ You loss ] ;
16976: LD_ADDR_OWVAR 48
16980: PUSH
16981: LD_STRING You loss
16983: PUSH
16984: EMPTY
16985: LIST
16986: ST_TO_ADDR
16987: END
// every 100 marked 98 do var i , un ;
16988: GO 16990
16990: DISABLE
16991: LD_INT 0
16993: PPUSH
16994: PPUSH
// begin for i = 1 to side_positions do
16995: LD_ADDR_VAR 0 1
16999: PUSH
17000: DOUBLE
17001: LD_INT 1
17003: DEC
17004: ST_TO_ADDR
17005: LD_EXP 43
17009: PUSH
17010: FOR_TO
17011: IFFALSE 17098
// begin if side_positions [ i ] then
17013: LD_EXP 43
17017: PUSH
17018: LD_VAR 0 1
17022: ARRAY
17023: IFFALSE 17096
// if not HasPower ( i ) and not defeated [ i ] then
17025: LD_VAR 0 1
17029: PPUSH
17030: CALL 16333 0 1
17034: NOT
17035: PUSH
17036: LD_LOC 27
17040: PUSH
17041: LD_VAR 0 1
17045: ARRAY
17046: NOT
17047: AND
17048: IFFALSE 17096
// begin defeated = replace ( defeated , i , true ) ;
17050: LD_ADDR_LOC 27
17054: PUSH
17055: LD_LOC 27
17059: PPUSH
17060: LD_VAR 0 1
17064: PPUSH
17065: LD_INT 1
17067: PPUSH
17068: CALL_OW 1
17072: ST_TO_ADDR
// if i = mp_player_side then
17073: LD_VAR 0 1
17077: PUSH
17078: LD_OWVAR 7
17082: EQUAL
17083: IFFALSE 17096
// begin Multiplayer_Loose_Message ;
17085: CALL_OW 521
// SetPlayerSpectator ( ) ;
17089: CALL_OW 572
// enable ( 400 ) ;
17093: LD_INT 400
17095: ENABLE_MARKED
// end ; end ; end ;
17096: GO 17010
17098: POP
17099: POP
// DidGameEnd ;
17100: CALL 17115 0 0
// if not GameEnded then
17104: LD_LOC 28
17108: NOT
17109: IFFALSE 17112
// enable ;
17111: ENABLE
// end ;
17112: PPOPN 2
17114: END
// function DidGameEnd ; var i , k , enemy ; begin
17115: LD_INT 0
17117: PPUSH
17118: PPUSH
17119: PPUSH
17120: PPUSH
// enemy = [ ] ;
17121: LD_ADDR_VAR 0 4
17125: PUSH
17126: EMPTY
17127: ST_TO_ADDR
// for i = 1 to side_positions do
17128: LD_ADDR_VAR 0 2
17132: PUSH
17133: DOUBLE
17134: LD_INT 1
17136: DEC
17137: ST_TO_ADDR
17138: LD_EXP 43
17142: PUSH
17143: FOR_TO
17144: IFFALSE 17238
// if not defeated [ i ] then
17146: LD_LOC 27
17150: PUSH
17151: LD_VAR 0 2
17155: ARRAY
17156: NOT
17157: IFFALSE 17236
// for k = 1 to side_positions do
17159: LD_ADDR_VAR 0 3
17163: PUSH
17164: DOUBLE
17165: LD_INT 1
17167: DEC
17168: ST_TO_ADDR
17169: LD_EXP 43
17173: PUSH
17174: FOR_TO
17175: IFFALSE 17234
// if not defeated [ k ] then
17177: LD_LOC 27
17181: PUSH
17182: LD_VAR 0 3
17186: ARRAY
17187: NOT
17188: IFFALSE 17232
// if not AlliedSides ( i , k ) then
17190: LD_VAR 0 2
17194: PPUSH
17195: LD_VAR 0 3
17199: PPUSH
17200: CALL 16679 0 2
17204: NOT
17205: IFFALSE 17232
// enemy = enemy ^ [ i , k ] ;
17207: LD_ADDR_VAR 0 4
17211: PUSH
17212: LD_VAR 0 4
17216: PUSH
17217: LD_VAR 0 2
17221: PUSH
17222: LD_VAR 0 3
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: ADD
17231: ST_TO_ADDR
17232: GO 17174
17234: POP
17235: POP
17236: GO 17143
17238: POP
17239: POP
// if not enemy then
17240: LD_VAR 0 4
17244: NOT
17245: IFFALSE 17271
// begin GameEnded = true ;
17247: LD_ADDR_LOC 28
17251: PUSH
17252: LD_INT 1
17254: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
17255: LD_LOC 27
17259: PUSH
17260: LD_OWVAR 7
17264: ARRAY
17265: NOT
17266: IFFALSE 17271
// enable ( 401 ) ;
17268: LD_INT 401
17270: ENABLE_MARKED
// end ; end ;
17271: LD_VAR 0 1
17275: RET
// function unfog ; var k , friends ; begin
17276: LD_INT 0
17278: PPUSH
17279: PPUSH
17280: PPUSH
// for k = 1 to side_positions do
17281: LD_ADDR_VAR 0 2
17285: PUSH
17286: DOUBLE
17287: LD_INT 1
17289: DEC
17290: ST_TO_ADDR
17291: LD_EXP 43
17295: PUSH
17296: FOR_TO
17297: IFFALSE 17353
// if not defeated [ k ] then
17299: LD_LOC 27
17303: PUSH
17304: LD_VAR 0 2
17308: ARRAY
17309: NOT
17310: IFFALSE 17351
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
17312: LD_OWVAR 7
17316: PPUSH
17317: LD_VAR 0 2
17321: PPUSH
17322: CALL_OW 81
17326: PUSH
17327: LD_INT 1
17329: PUSH
17330: EMPTY
17331: LIST
17332: IN
17333: IFFALSE 17351
// friends = friends ^ k ;
17335: LD_ADDR_VAR 0 3
17339: PUSH
17340: LD_VAR 0 3
17344: PUSH
17345: LD_VAR 0 2
17349: ADD
17350: ST_TO_ADDR
17351: GO 17296
17353: POP
17354: POP
// if not friends then
17355: LD_VAR 0 3
17359: NOT
17360: IFFALSE 17374
// begin SetPlayerSpectator ( ) ;
17362: CALL_OW 572
// unfoged = true ;
17366: LD_ADDR_LOC 29
17370: PUSH
17371: LD_INT 1
17373: ST_TO_ADDR
// end ; end ;
17374: LD_VAR 0 1
17378: RET
// export function MakeGameEnd ; begin
17379: LD_INT 0
17381: PPUSH
// SetPlayerSpectator ( ) ;
17382: CALL_OW 572
// unfoged = true ;
17386: LD_ADDR_LOC 29
17390: PUSH
17391: LD_INT 1
17393: ST_TO_ADDR
// wait ( 0 0$5 ) ;
17394: LD_INT 175
17396: PPUSH
17397: CALL_OW 67
// GameEnded = true ;
17401: LD_ADDR_LOC 28
17405: PUSH
17406: LD_INT 1
17408: ST_TO_ADDR
// end ;
17409: LD_VAR 0 1
17413: RET
// export function GetGameEnded ; begin
17414: LD_INT 0
17416: PPUSH
// result = GameEnded ;
17417: LD_ADDR_VAR 0 1
17421: PUSH
17422: LD_LOC 28
17426: ST_TO_ADDR
// end ; end_of_file
17427: LD_VAR 0 1
17431: RET
// export function SetMpTechs ( ) ; var side , i ; begin
17432: LD_INT 0
17434: PPUSH
17435: PPUSH
17436: PPUSH
// for side = 1 to 8 do
17437: LD_ADDR_VAR 0 2
17441: PUSH
17442: DOUBLE
17443: LD_INT 1
17445: DEC
17446: ST_TO_ADDR
17447: LD_INT 8
17449: PUSH
17450: FOR_TO
17451: IFFALSE 17572
// begin for i = 1 to 72 do
17453: LD_ADDR_VAR 0 3
17457: PUSH
17458: DOUBLE
17459: LD_INT 1
17461: DEC
17462: ST_TO_ADDR
17463: LD_INT 72
17465: PUSH
17466: FOR_TO
17467: IFFALSE 17498
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
17469: LD_VAR 0 3
17473: PPUSH
17474: LD_VAR 0 2
17478: PPUSH
17479: LD_INT 0
17481: PPUSH
17482: LD_VAR 0 3
17486: PPUSH
17487: CALL_OW 565
17491: PPUSH
17492: CALL_OW 322
17496: GO 17466
17498: POP
17499: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
17500: LD_INT 73
17502: PPUSH
17503: LD_VAR 0 2
17507: PPUSH
17508: LD_INT 0
17510: PPUSH
17511: LD_INT 25
17513: PPUSH
17514: CALL_OW 565
17518: PPUSH
17519: CALL_OW 322
// for i = 0 to 40 do
17523: LD_ADDR_VAR 0 3
17527: PUSH
17528: DOUBLE
17529: LD_INT 0
17531: DEC
17532: ST_TO_ADDR
17533: LD_INT 40
17535: PUSH
17536: FOR_TO
17537: IFFALSE 17568
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
17539: LD_VAR 0 3
17543: PPUSH
17544: LD_VAR 0 2
17548: PPUSH
17549: LD_INT 1
17551: PPUSH
17552: LD_VAR 0 3
17556: PPUSH
17557: CALL_OW 565
17561: PPUSH
17562: CALL_OW 324
17566: GO 17536
17568: POP
17569: POP
// end ;
17570: GO 17450
17572: POP
17573: POP
// end ;
17574: LD_VAR 0 1
17578: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
17579: LD_INT 0
17581: PPUSH
17582: PPUSH
17583: PPUSH
// for side = 1 to 8 do
17584: LD_ADDR_VAR 0 3
17588: PUSH
17589: DOUBLE
17590: LD_INT 1
17592: DEC
17593: ST_TO_ADDR
17594: LD_INT 8
17596: PUSH
17597: FOR_TO
17598: IFFALSE 21594
// begin for i = 1 to 73 do
17600: LD_ADDR_VAR 0 4
17604: PUSH
17605: DOUBLE
17606: LD_INT 1
17608: DEC
17609: ST_TO_ADDR
17610: LD_INT 73
17612: PUSH
17613: FOR_TO
17614: IFFALSE 17635
// SetTech ( i , side , state_disabled ) ;
17616: LD_VAR 0 4
17620: PPUSH
17621: LD_VAR 0 3
17625: PPUSH
17626: LD_INT 0
17628: PPUSH
17629: CALL_OW 322
17633: GO 17613
17635: POP
17636: POP
// for i = 0 to 40 do
17637: LD_ADDR_VAR 0 4
17641: PUSH
17642: DOUBLE
17643: LD_INT 0
17645: DEC
17646: ST_TO_ADDR
17647: LD_INT 40
17649: PUSH
17650: FOR_TO
17651: IFFALSE 17672
// SetRestrict ( i , side , false ) ;
17653: LD_VAR 0 4
17657: PPUSH
17658: LD_VAR 0 3
17662: PPUSH
17663: LD_INT 0
17665: PPUSH
17666: CALL_OW 324
17670: GO 17650
17672: POP
17673: POP
// case level of 1 :
17674: LD_VAR 0 1
17678: PUSH
17679: LD_INT 1
17681: DOUBLE
17682: EQUAL
17683: IFTRUE 17687
17685: GO 17840
17687: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17688: LD_INT 35
17690: PPUSH
17691: LD_VAR 0 3
17695: PPUSH
17696: LD_INT 1
17698: PPUSH
17699: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17703: LD_INT 45
17705: PPUSH
17706: LD_VAR 0 3
17710: PPUSH
17711: LD_INT 1
17713: PPUSH
17714: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17718: LD_INT 46
17720: PPUSH
17721: LD_VAR 0 3
17725: PPUSH
17726: LD_INT 1
17728: PPUSH
17729: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17733: LD_INT 47
17735: PPUSH
17736: LD_VAR 0 3
17740: PPUSH
17741: LD_INT 1
17743: PPUSH
17744: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17748: LD_INT 0
17750: PPUSH
17751: LD_VAR 0 3
17755: PPUSH
17756: LD_INT 1
17758: PPUSH
17759: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17763: LD_INT 2
17765: PPUSH
17766: LD_VAR 0 3
17770: PPUSH
17771: LD_INT 1
17773: PPUSH
17774: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17778: LD_INT 4
17780: PPUSH
17781: LD_VAR 0 3
17785: PPUSH
17786: LD_INT 1
17788: PPUSH
17789: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17793: LD_INT 6
17795: PPUSH
17796: LD_VAR 0 3
17800: PPUSH
17801: LD_INT 1
17803: PPUSH
17804: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17808: LD_INT 29
17810: PPUSH
17811: LD_VAR 0 3
17815: PPUSH
17816: LD_INT 1
17818: PPUSH
17819: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17823: LD_INT 31
17825: PPUSH
17826: LD_VAR 0 3
17830: PPUSH
17831: LD_INT 1
17833: PPUSH
17834: CALL_OW 324
// end ; 2 :
17838: GO 21592
17840: LD_INT 2
17842: DOUBLE
17843: EQUAL
17844: IFTRUE 17848
17846: GO 18046
17848: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17849: LD_INT 35
17851: PPUSH
17852: LD_VAR 0 3
17856: PPUSH
17857: LD_INT 1
17859: PPUSH
17860: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17864: LD_INT 45
17866: PPUSH
17867: LD_VAR 0 3
17871: PPUSH
17872: LD_INT 1
17874: PPUSH
17875: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17879: LD_INT 46
17881: PPUSH
17882: LD_VAR 0 3
17886: PPUSH
17887: LD_INT 1
17889: PPUSH
17890: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17894: LD_INT 47
17896: PPUSH
17897: LD_VAR 0 3
17901: PPUSH
17902: LD_INT 1
17904: PPUSH
17905: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17909: LD_INT 1
17911: PPUSH
17912: LD_VAR 0 3
17916: PPUSH
17917: LD_INT 1
17919: PPUSH
17920: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17924: LD_INT 2
17926: PPUSH
17927: LD_VAR 0 3
17931: PPUSH
17932: LD_INT 1
17934: PPUSH
17935: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17939: LD_INT 11
17941: PPUSH
17942: LD_VAR 0 3
17946: PPUSH
17947: LD_INT 1
17949: PPUSH
17950: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17954: LD_INT 0
17956: PPUSH
17957: LD_VAR 0 3
17961: PPUSH
17962: LD_INT 1
17964: PPUSH
17965: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17969: LD_INT 2
17971: PPUSH
17972: LD_VAR 0 3
17976: PPUSH
17977: LD_INT 1
17979: PPUSH
17980: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17984: LD_INT 4
17986: PPUSH
17987: LD_VAR 0 3
17991: PPUSH
17992: LD_INT 1
17994: PPUSH
17995: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17999: LD_INT 6
18001: PPUSH
18002: LD_VAR 0 3
18006: PPUSH
18007: LD_INT 1
18009: PPUSH
18010: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18014: LD_INT 29
18016: PPUSH
18017: LD_VAR 0 3
18021: PPUSH
18022: LD_INT 1
18024: PPUSH
18025: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18029: LD_INT 31
18031: PPUSH
18032: LD_VAR 0 3
18036: PPUSH
18037: LD_INT 1
18039: PPUSH
18040: CALL_OW 324
// end ; 3 :
18044: GO 21592
18046: LD_INT 3
18048: DOUBLE
18049: EQUAL
18050: IFTRUE 18054
18052: GO 18507
18054: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18055: LD_INT 35
18057: PPUSH
18058: LD_VAR 0 3
18062: PPUSH
18063: LD_INT 1
18065: PPUSH
18066: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18070: LD_INT 45
18072: PPUSH
18073: LD_VAR 0 3
18077: PPUSH
18078: LD_INT 1
18080: PPUSH
18081: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18085: LD_INT 46
18087: PPUSH
18088: LD_VAR 0 3
18092: PPUSH
18093: LD_INT 1
18095: PPUSH
18096: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18100: LD_INT 47
18102: PPUSH
18103: LD_VAR 0 3
18107: PPUSH
18108: LD_INT 1
18110: PPUSH
18111: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18115: LD_INT 1
18117: PPUSH
18118: LD_VAR 0 3
18122: PPUSH
18123: LD_INT 1
18125: PPUSH
18126: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18130: LD_INT 2
18132: PPUSH
18133: LD_VAR 0 3
18137: PPUSH
18138: LD_INT 1
18140: PPUSH
18141: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18145: LD_INT 11
18147: PPUSH
18148: LD_VAR 0 3
18152: PPUSH
18153: LD_INT 1
18155: PPUSH
18156: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18160: LD_INT 48
18162: PPUSH
18163: LD_VAR 0 3
18167: PPUSH
18168: LD_INT 1
18170: PPUSH
18171: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18175: LD_INT 69
18177: PPUSH
18178: LD_VAR 0 3
18182: PPUSH
18183: LD_INT 1
18185: PPUSH
18186: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18190: LD_INT 39
18192: PPUSH
18193: LD_VAR 0 3
18197: PPUSH
18198: LD_INT 1
18200: PPUSH
18201: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18205: LD_INT 43
18207: PPUSH
18208: LD_VAR 0 3
18212: PPUSH
18213: LD_INT 1
18215: PPUSH
18216: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18220: LD_INT 51
18222: PPUSH
18223: LD_VAR 0 3
18227: PPUSH
18228: LD_INT 1
18230: PPUSH
18231: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18235: LD_INT 6
18237: PPUSH
18238: LD_VAR 0 3
18242: PPUSH
18243: LD_INT 1
18245: PPUSH
18246: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18250: LD_INT 0
18252: PPUSH
18253: LD_VAR 0 3
18257: PPUSH
18258: LD_INT 1
18260: PPUSH
18261: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18265: LD_INT 2
18267: PPUSH
18268: LD_VAR 0 3
18272: PPUSH
18273: LD_INT 1
18275: PPUSH
18276: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18280: LD_INT 3
18282: PPUSH
18283: LD_VAR 0 3
18287: PPUSH
18288: LD_INT 1
18290: PPUSH
18291: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18295: LD_INT 4
18297: PPUSH
18298: LD_VAR 0 3
18302: PPUSH
18303: LD_INT 1
18305: PPUSH
18306: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18310: LD_INT 6
18312: PPUSH
18313: LD_VAR 0 3
18317: PPUSH
18318: LD_INT 1
18320: PPUSH
18321: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18325: LD_INT 7
18327: PPUSH
18328: LD_VAR 0 3
18332: PPUSH
18333: LD_INT 1
18335: PPUSH
18336: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18340: LD_INT 8
18342: PPUSH
18343: LD_VAR 0 3
18347: PPUSH
18348: LD_INT 1
18350: PPUSH
18351: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18355: LD_INT 10
18357: PPUSH
18358: LD_VAR 0 3
18362: PPUSH
18363: LD_INT 1
18365: PPUSH
18366: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18370: LD_INT 15
18372: PPUSH
18373: LD_VAR 0 3
18377: PPUSH
18378: LD_INT 1
18380: PPUSH
18381: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18385: LD_INT 16
18387: PPUSH
18388: LD_VAR 0 3
18392: PPUSH
18393: LD_INT 1
18395: PPUSH
18396: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18400: LD_INT 17
18402: PPUSH
18403: LD_VAR 0 3
18407: PPUSH
18408: LD_INT 1
18410: PPUSH
18411: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18415: LD_INT 20
18417: PPUSH
18418: LD_VAR 0 3
18422: PPUSH
18423: LD_INT 1
18425: PPUSH
18426: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18430: LD_INT 26
18432: PPUSH
18433: LD_VAR 0 3
18437: PPUSH
18438: LD_INT 1
18440: PPUSH
18441: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18445: LD_INT 27
18447: PPUSH
18448: LD_VAR 0 3
18452: PPUSH
18453: LD_INT 1
18455: PPUSH
18456: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18460: LD_INT 29
18462: PPUSH
18463: LD_VAR 0 3
18467: PPUSH
18468: LD_INT 1
18470: PPUSH
18471: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18475: LD_INT 31
18477: PPUSH
18478: LD_VAR 0 3
18482: PPUSH
18483: LD_INT 1
18485: PPUSH
18486: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18490: LD_INT 32
18492: PPUSH
18493: LD_VAR 0 3
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: CALL_OW 324
// end ; 4 :
18505: GO 21592
18507: LD_INT 4
18509: DOUBLE
18510: EQUAL
18511: IFTRUE 18515
18513: GO 19463
18515: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18516: LD_INT 35
18518: PPUSH
18519: LD_VAR 0 3
18523: PPUSH
18524: LD_INT 1
18526: PPUSH
18527: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18531: LD_INT 45
18533: PPUSH
18534: LD_VAR 0 3
18538: PPUSH
18539: LD_INT 1
18541: PPUSH
18542: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18546: LD_INT 46
18548: PPUSH
18549: LD_VAR 0 3
18553: PPUSH
18554: LD_INT 1
18556: PPUSH
18557: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18561: LD_INT 47
18563: PPUSH
18564: LD_VAR 0 3
18568: PPUSH
18569: LD_INT 1
18571: PPUSH
18572: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18576: LD_INT 1
18578: PPUSH
18579: LD_VAR 0 3
18583: PPUSH
18584: LD_INT 1
18586: PPUSH
18587: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18591: LD_INT 2
18593: PPUSH
18594: LD_VAR 0 3
18598: PPUSH
18599: LD_INT 1
18601: PPUSH
18602: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18606: LD_INT 11
18608: PPUSH
18609: LD_VAR 0 3
18613: PPUSH
18614: LD_INT 1
18616: PPUSH
18617: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18621: LD_INT 20
18623: PPUSH
18624: LD_VAR 0 3
18628: PPUSH
18629: LD_INT 1
18631: PPUSH
18632: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18636: LD_INT 48
18638: PPUSH
18639: LD_VAR 0 3
18643: PPUSH
18644: LD_INT 1
18646: PPUSH
18647: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18651: LD_INT 49
18653: PPUSH
18654: LD_VAR 0 3
18658: PPUSH
18659: LD_INT 1
18661: PPUSH
18662: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18666: LD_INT 69
18668: PPUSH
18669: LD_VAR 0 3
18673: PPUSH
18674: LD_INT 1
18676: PPUSH
18677: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18681: LD_INT 39
18683: PPUSH
18684: LD_VAR 0 3
18688: PPUSH
18689: LD_INT 1
18691: PPUSH
18692: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18696: LD_INT 34
18698: PPUSH
18699: LD_VAR 0 3
18703: PPUSH
18704: LD_INT 1
18706: PPUSH
18707: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18711: LD_INT 42
18713: PPUSH
18714: LD_VAR 0 3
18718: PPUSH
18719: LD_INT 1
18721: PPUSH
18722: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18726: LD_INT 44
18728: PPUSH
18729: LD_VAR 0 3
18733: PPUSH
18734: LD_INT 1
18736: PPUSH
18737: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18741: LD_INT 41
18743: PPUSH
18744: LD_VAR 0 3
18748: PPUSH
18749: LD_INT 1
18751: PPUSH
18752: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18756: LD_INT 43
18758: PPUSH
18759: LD_VAR 0 3
18763: PPUSH
18764: LD_INT 1
18766: PPUSH
18767: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18771: LD_INT 70
18773: PPUSH
18774: LD_VAR 0 3
18778: PPUSH
18779: LD_INT 1
18781: PPUSH
18782: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18786: LD_INT 51
18788: PPUSH
18789: LD_VAR 0 3
18793: PPUSH
18794: LD_INT 1
18796: PPUSH
18797: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18801: LD_INT 52
18803: PPUSH
18804: LD_VAR 0 3
18808: PPUSH
18809: LD_INT 1
18811: PPUSH
18812: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18816: LD_INT 6
18818: PPUSH
18819: LD_VAR 0 3
18823: PPUSH
18824: LD_INT 1
18826: PPUSH
18827: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18831: LD_INT 15
18833: PPUSH
18834: LD_VAR 0 3
18838: PPUSH
18839: LD_INT 1
18841: PPUSH
18842: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18846: LD_INT 7
18848: PPUSH
18849: LD_VAR 0 3
18853: PPUSH
18854: LD_INT 1
18856: PPUSH
18857: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18861: LD_INT 12
18863: PPUSH
18864: LD_VAR 0 3
18868: PPUSH
18869: LD_INT 1
18871: PPUSH
18872: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18876: LD_INT 18
18878: PPUSH
18879: LD_VAR 0 3
18883: PPUSH
18884: LD_INT 1
18886: PPUSH
18887: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18891: LD_INT 60
18893: PPUSH
18894: LD_VAR 0 3
18898: PPUSH
18899: LD_INT 1
18901: PPUSH
18902: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18906: LD_INT 9
18908: PPUSH
18909: LD_VAR 0 3
18913: PPUSH
18914: LD_INT 1
18916: PPUSH
18917: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18921: LD_INT 30
18923: PPUSH
18924: LD_VAR 0 3
18928: PPUSH
18929: LD_INT 1
18931: PPUSH
18932: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18936: LD_INT 37
18938: PPUSH
18939: LD_VAR 0 3
18943: PPUSH
18944: LD_INT 1
18946: PPUSH
18947: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18951: LD_INT 5
18953: PPUSH
18954: LD_VAR 0 3
18958: PPUSH
18959: LD_INT 1
18961: PPUSH
18962: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18966: LD_INT 66
18968: PPUSH
18969: LD_VAR 0 3
18973: PPUSH
18974: LD_INT 1
18976: PPUSH
18977: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18981: LD_INT 21
18983: PPUSH
18984: LD_VAR 0 3
18988: PPUSH
18989: LD_INT 1
18991: PPUSH
18992: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18996: LD_INT 22
18998: PPUSH
18999: LD_VAR 0 3
19003: PPUSH
19004: LD_INT 1
19006: PPUSH
19007: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19011: LD_INT 54
19013: PPUSH
19014: LD_VAR 0 3
19018: PPUSH
19019: LD_INT 1
19021: PPUSH
19022: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19026: LD_INT 0
19028: PPUSH
19029: LD_VAR 0 3
19033: PPUSH
19034: LD_INT 1
19036: PPUSH
19037: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
19041: LD_INT 1
19043: PPUSH
19044: LD_VAR 0 3
19048: PPUSH
19049: LD_INT 1
19051: PPUSH
19052: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19056: LD_INT 2
19058: PPUSH
19059: LD_VAR 0 3
19063: PPUSH
19064: LD_INT 1
19066: PPUSH
19067: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
19071: LD_INT 3
19073: PPUSH
19074: LD_VAR 0 3
19078: PPUSH
19079: LD_INT 1
19081: PPUSH
19082: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19086: LD_INT 4
19088: PPUSH
19089: LD_VAR 0 3
19093: PPUSH
19094: LD_INT 1
19096: PPUSH
19097: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
19101: LD_INT 5
19103: PPUSH
19104: LD_VAR 0 3
19108: PPUSH
19109: LD_INT 1
19111: PPUSH
19112: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19116: LD_INT 6
19118: PPUSH
19119: LD_VAR 0 3
19123: PPUSH
19124: LD_INT 1
19126: PPUSH
19127: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
19131: LD_INT 7
19133: PPUSH
19134: LD_VAR 0 3
19138: PPUSH
19139: LD_INT 1
19141: PPUSH
19142: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
19146: LD_INT 8
19148: PPUSH
19149: LD_VAR 0 3
19153: PPUSH
19154: LD_INT 1
19156: PPUSH
19157: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
19161: LD_INT 10
19163: PPUSH
19164: LD_VAR 0 3
19168: PPUSH
19169: LD_INT 1
19171: PPUSH
19172: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
19176: LD_INT 11
19178: PPUSH
19179: LD_VAR 0 3
19183: PPUSH
19184: LD_INT 1
19186: PPUSH
19187: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
19191: LD_INT 12
19193: PPUSH
19194: LD_VAR 0 3
19198: PPUSH
19199: LD_INT 1
19201: PPUSH
19202: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
19206: LD_INT 13
19208: PPUSH
19209: LD_VAR 0 3
19213: PPUSH
19214: LD_INT 1
19216: PPUSH
19217: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
19221: LD_INT 14
19223: PPUSH
19224: LD_VAR 0 3
19228: PPUSH
19229: LD_INT 1
19231: PPUSH
19232: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
19236: LD_INT 15
19238: PPUSH
19239: LD_VAR 0 3
19243: PPUSH
19244: LD_INT 1
19246: PPUSH
19247: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
19251: LD_INT 16
19253: PPUSH
19254: LD_VAR 0 3
19258: PPUSH
19259: LD_INT 1
19261: PPUSH
19262: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
19266: LD_INT 17
19268: PPUSH
19269: LD_VAR 0 3
19273: PPUSH
19274: LD_INT 1
19276: PPUSH
19277: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
19281: LD_INT 19
19283: PPUSH
19284: LD_VAR 0 3
19288: PPUSH
19289: LD_INT 1
19291: PPUSH
19292: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
19296: LD_INT 20
19298: PPUSH
19299: LD_VAR 0 3
19303: PPUSH
19304: LD_INT 1
19306: PPUSH
19307: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
19311: LD_INT 21
19313: PPUSH
19314: LD_VAR 0 3
19318: PPUSH
19319: LD_INT 1
19321: PPUSH
19322: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
19326: LD_INT 23
19328: PPUSH
19329: LD_VAR 0 3
19333: PPUSH
19334: LD_INT 1
19336: PPUSH
19337: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
19341: LD_INT 26
19343: PPUSH
19344: LD_VAR 0 3
19348: PPUSH
19349: LD_INT 1
19351: PPUSH
19352: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
19356: LD_INT 27
19358: PPUSH
19359: LD_VAR 0 3
19363: PPUSH
19364: LD_INT 1
19366: PPUSH
19367: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
19371: LD_INT 28
19373: PPUSH
19374: LD_VAR 0 3
19378: PPUSH
19379: LD_INT 1
19381: PPUSH
19382: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19386: LD_INT 29
19388: PPUSH
19389: LD_VAR 0 3
19393: PPUSH
19394: LD_INT 1
19396: PPUSH
19397: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
19401: LD_INT 30
19403: PPUSH
19404: LD_VAR 0 3
19408: PPUSH
19409: LD_INT 1
19411: PPUSH
19412: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19416: LD_INT 31
19418: PPUSH
19419: LD_VAR 0 3
19423: PPUSH
19424: LD_INT 1
19426: PPUSH
19427: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
19431: LD_INT 32
19433: PPUSH
19434: LD_VAR 0 3
19438: PPUSH
19439: LD_INT 1
19441: PPUSH
19442: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
19446: LD_INT 36
19448: PPUSH
19449: LD_VAR 0 3
19453: PPUSH
19454: LD_INT 1
19456: PPUSH
19457: CALL_OW 324
// end ; 5 :
19461: GO 21592
19463: LD_INT 5
19465: DOUBLE
19466: EQUAL
19467: IFTRUE 19471
19469: GO 20584
19471: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19472: LD_INT 35
19474: PPUSH
19475: LD_VAR 0 3
19479: PPUSH
19480: LD_INT 1
19482: PPUSH
19483: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19487: LD_INT 45
19489: PPUSH
19490: LD_VAR 0 3
19494: PPUSH
19495: LD_INT 1
19497: PPUSH
19498: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19502: LD_INT 46
19504: PPUSH
19505: LD_VAR 0 3
19509: PPUSH
19510: LD_INT 1
19512: PPUSH
19513: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19517: LD_INT 47
19519: PPUSH
19520: LD_VAR 0 3
19524: PPUSH
19525: LD_INT 1
19527: PPUSH
19528: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19532: LD_INT 1
19534: PPUSH
19535: LD_VAR 0 3
19539: PPUSH
19540: LD_INT 1
19542: PPUSH
19543: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19547: LD_INT 2
19549: PPUSH
19550: LD_VAR 0 3
19554: PPUSH
19555: LD_INT 1
19557: PPUSH
19558: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19562: LD_INT 11
19564: PPUSH
19565: LD_VAR 0 3
19569: PPUSH
19570: LD_INT 1
19572: PPUSH
19573: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
19577: LD_INT 20
19579: PPUSH
19580: LD_VAR 0 3
19584: PPUSH
19585: LD_INT 1
19587: PPUSH
19588: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
19592: LD_INT 48
19594: PPUSH
19595: LD_VAR 0 3
19599: PPUSH
19600: LD_INT 1
19602: PPUSH
19603: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
19607: LD_INT 49
19609: PPUSH
19610: LD_VAR 0 3
19614: PPUSH
19615: LD_INT 1
19617: PPUSH
19618: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
19622: LD_INT 69
19624: PPUSH
19625: LD_VAR 0 3
19629: PPUSH
19630: LD_INT 1
19632: PPUSH
19633: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
19637: LD_INT 39
19639: PPUSH
19640: LD_VAR 0 3
19644: PPUSH
19645: LD_INT 1
19647: PPUSH
19648: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
19652: LD_INT 34
19654: PPUSH
19655: LD_VAR 0 3
19659: PPUSH
19660: LD_INT 1
19662: PPUSH
19663: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
19667: LD_INT 42
19669: PPUSH
19670: LD_VAR 0 3
19674: PPUSH
19675: LD_INT 1
19677: PPUSH
19678: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
19682: LD_INT 44
19684: PPUSH
19685: LD_VAR 0 3
19689: PPUSH
19690: LD_INT 1
19692: PPUSH
19693: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
19697: LD_INT 41
19699: PPUSH
19700: LD_VAR 0 3
19704: PPUSH
19705: LD_INT 1
19707: PPUSH
19708: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
19712: LD_INT 40
19714: PPUSH
19715: LD_VAR 0 3
19719: PPUSH
19720: LD_INT 1
19722: PPUSH
19723: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
19727: LD_INT 43
19729: PPUSH
19730: LD_VAR 0 3
19734: PPUSH
19735: LD_INT 1
19737: PPUSH
19738: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
19742: LD_INT 70
19744: PPUSH
19745: LD_VAR 0 3
19749: PPUSH
19750: LD_INT 1
19752: PPUSH
19753: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
19757: LD_INT 51
19759: PPUSH
19760: LD_VAR 0 3
19764: PPUSH
19765: LD_INT 1
19767: PPUSH
19768: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19772: LD_INT 52
19774: PPUSH
19775: LD_VAR 0 3
19779: PPUSH
19780: LD_INT 1
19782: PPUSH
19783: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19787: LD_INT 6
19789: PPUSH
19790: LD_VAR 0 3
19794: PPUSH
19795: LD_INT 1
19797: PPUSH
19798: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19802: LD_INT 15
19804: PPUSH
19805: LD_VAR 0 3
19809: PPUSH
19810: LD_INT 1
19812: PPUSH
19813: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19817: LD_INT 7
19819: PPUSH
19820: LD_VAR 0 3
19824: PPUSH
19825: LD_INT 1
19827: PPUSH
19828: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19832: LD_INT 12
19834: PPUSH
19835: LD_VAR 0 3
19839: PPUSH
19840: LD_INT 1
19842: PPUSH
19843: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19847: LD_INT 17
19849: PPUSH
19850: LD_VAR 0 3
19854: PPUSH
19855: LD_INT 1
19857: PPUSH
19858: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19862: LD_INT 18
19864: PPUSH
19865: LD_VAR 0 3
19869: PPUSH
19870: LD_INT 1
19872: PPUSH
19873: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19877: LD_INT 60
19879: PPUSH
19880: LD_VAR 0 3
19884: PPUSH
19885: LD_INT 1
19887: PPUSH
19888: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19892: LD_INT 32
19894: PPUSH
19895: LD_VAR 0 3
19899: PPUSH
19900: LD_INT 1
19902: PPUSH
19903: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19907: LD_INT 9
19909: PPUSH
19910: LD_VAR 0 3
19914: PPUSH
19915: LD_INT 1
19917: PPUSH
19918: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19922: LD_INT 57
19924: PPUSH
19925: LD_VAR 0 3
19929: PPUSH
19930: LD_INT 1
19932: PPUSH
19933: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19937: LD_INT 30
19939: PPUSH
19940: LD_VAR 0 3
19944: PPUSH
19945: LD_INT 1
19947: PPUSH
19948: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19952: LD_INT 37
19954: PPUSH
19955: LD_VAR 0 3
19959: PPUSH
19960: LD_INT 1
19962: PPUSH
19963: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19967: LD_INT 63
19969: PPUSH
19970: LD_VAR 0 3
19974: PPUSH
19975: LD_INT 1
19977: PPUSH
19978: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19982: LD_INT 3
19984: PPUSH
19985: LD_VAR 0 3
19989: PPUSH
19990: LD_INT 1
19992: PPUSH
19993: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19997: LD_INT 4
19999: PPUSH
20000: LD_VAR 0 3
20004: PPUSH
20005: LD_INT 1
20007: PPUSH
20008: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20012: LD_INT 5
20014: PPUSH
20015: LD_VAR 0 3
20019: PPUSH
20020: LD_INT 1
20022: PPUSH
20023: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20027: LD_INT 66
20029: PPUSH
20030: LD_VAR 0 3
20034: PPUSH
20035: LD_INT 1
20037: PPUSH
20038: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20042: LD_INT 21
20044: PPUSH
20045: LD_VAR 0 3
20049: PPUSH
20050: LD_INT 1
20052: PPUSH
20053: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20057: LD_INT 22
20059: PPUSH
20060: LD_VAR 0 3
20064: PPUSH
20065: LD_INT 1
20067: PPUSH
20068: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
20072: LD_INT 19
20074: PPUSH
20075: LD_VAR 0 3
20079: PPUSH
20080: LD_INT 1
20082: PPUSH
20083: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20087: LD_INT 54
20089: PPUSH
20090: LD_VAR 0 3
20094: PPUSH
20095: LD_INT 1
20097: PPUSH
20098: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
20102: LD_INT 55
20104: PPUSH
20105: LD_VAR 0 3
20109: PPUSH
20110: LD_INT 1
20112: PPUSH
20113: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20117: LD_INT 0
20119: PPUSH
20120: LD_VAR 0 3
20124: PPUSH
20125: LD_INT 1
20127: PPUSH
20128: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
20132: LD_INT 1
20134: PPUSH
20135: LD_VAR 0 3
20139: PPUSH
20140: LD_INT 1
20142: PPUSH
20143: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20147: LD_INT 2
20149: PPUSH
20150: LD_VAR 0 3
20154: PPUSH
20155: LD_INT 1
20157: PPUSH
20158: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
20162: LD_INT 3
20164: PPUSH
20165: LD_VAR 0 3
20169: PPUSH
20170: LD_INT 1
20172: PPUSH
20173: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
20177: LD_INT 4
20179: PPUSH
20180: LD_VAR 0 3
20184: PPUSH
20185: LD_INT 1
20187: PPUSH
20188: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
20192: LD_INT 5
20194: PPUSH
20195: LD_VAR 0 3
20199: PPUSH
20200: LD_INT 1
20202: PPUSH
20203: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
20207: LD_INT 6
20209: PPUSH
20210: LD_VAR 0 3
20214: PPUSH
20215: LD_INT 1
20217: PPUSH
20218: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
20222: LD_INT 7
20224: PPUSH
20225: LD_VAR 0 3
20229: PPUSH
20230: LD_INT 1
20232: PPUSH
20233: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
20237: LD_INT 8
20239: PPUSH
20240: LD_VAR 0 3
20244: PPUSH
20245: LD_INT 1
20247: PPUSH
20248: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
20252: LD_INT 10
20254: PPUSH
20255: LD_VAR 0 3
20259: PPUSH
20260: LD_INT 1
20262: PPUSH
20263: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
20267: LD_INT 11
20269: PPUSH
20270: LD_VAR 0 3
20274: PPUSH
20275: LD_INT 1
20277: PPUSH
20278: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
20282: LD_INT 12
20284: PPUSH
20285: LD_VAR 0 3
20289: PPUSH
20290: LD_INT 1
20292: PPUSH
20293: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
20297: LD_INT 13
20299: PPUSH
20300: LD_VAR 0 3
20304: PPUSH
20305: LD_INT 1
20307: PPUSH
20308: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
20312: LD_INT 14
20314: PPUSH
20315: LD_VAR 0 3
20319: PPUSH
20320: LD_INT 1
20322: PPUSH
20323: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
20327: LD_INT 15
20329: PPUSH
20330: LD_VAR 0 3
20334: PPUSH
20335: LD_INT 1
20337: PPUSH
20338: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
20342: LD_INT 16
20344: PPUSH
20345: LD_VAR 0 3
20349: PPUSH
20350: LD_INT 1
20352: PPUSH
20353: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
20357: LD_INT 17
20359: PPUSH
20360: LD_VAR 0 3
20364: PPUSH
20365: LD_INT 1
20367: PPUSH
20368: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
20372: LD_INT 18
20374: PPUSH
20375: LD_VAR 0 3
20379: PPUSH
20380: LD_INT 1
20382: PPUSH
20383: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
20387: LD_INT 19
20389: PPUSH
20390: LD_VAR 0 3
20394: PPUSH
20395: LD_INT 1
20397: PPUSH
20398: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
20402: LD_INT 20
20404: PPUSH
20405: LD_VAR 0 3
20409: PPUSH
20410: LD_INT 1
20412: PPUSH
20413: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
20417: LD_INT 21
20419: PPUSH
20420: LD_VAR 0 3
20424: PPUSH
20425: LD_INT 1
20427: PPUSH
20428: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
20432: LD_INT 23
20434: PPUSH
20435: LD_VAR 0 3
20439: PPUSH
20440: LD_INT 1
20442: PPUSH
20443: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
20447: LD_INT 26
20449: PPUSH
20450: LD_VAR 0 3
20454: PPUSH
20455: LD_INT 1
20457: PPUSH
20458: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
20462: LD_INT 27
20464: PPUSH
20465: LD_VAR 0 3
20469: PPUSH
20470: LD_INT 1
20472: PPUSH
20473: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
20477: LD_INT 28
20479: PPUSH
20480: LD_VAR 0 3
20484: PPUSH
20485: LD_INT 1
20487: PPUSH
20488: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
20492: LD_INT 29
20494: PPUSH
20495: LD_VAR 0 3
20499: PPUSH
20500: LD_INT 1
20502: PPUSH
20503: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
20507: LD_INT 30
20509: PPUSH
20510: LD_VAR 0 3
20514: PPUSH
20515: LD_INT 1
20517: PPUSH
20518: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
20522: LD_INT 31
20524: PPUSH
20525: LD_VAR 0 3
20529: PPUSH
20530: LD_INT 1
20532: PPUSH
20533: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
20537: LD_INT 32
20539: PPUSH
20540: LD_VAR 0 3
20544: PPUSH
20545: LD_INT 1
20547: PPUSH
20548: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
20552: LD_INT 33
20554: PPUSH
20555: LD_VAR 0 3
20559: PPUSH
20560: LD_INT 1
20562: PPUSH
20563: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
20567: LD_INT 36
20569: PPUSH
20570: LD_VAR 0 3
20574: PPUSH
20575: LD_INT 1
20577: PPUSH
20578: CALL_OW 324
// end ; 6 :
20582: GO 21592
20584: LD_INT 6
20586: DOUBLE
20587: EQUAL
20588: IFTRUE 20592
20590: GO 21517
20592: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20593: LD_INT 35
20595: PPUSH
20596: LD_VAR 0 3
20600: PPUSH
20601: LD_INT 1
20603: PPUSH
20604: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20608: LD_INT 45
20610: PPUSH
20611: LD_VAR 0 3
20615: PPUSH
20616: LD_INT 1
20618: PPUSH
20619: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20623: LD_INT 46
20625: PPUSH
20626: LD_VAR 0 3
20630: PPUSH
20631: LD_INT 1
20633: PPUSH
20634: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20638: LD_INT 47
20640: PPUSH
20641: LD_VAR 0 3
20645: PPUSH
20646: LD_INT 1
20648: PPUSH
20649: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20653: LD_INT 1
20655: PPUSH
20656: LD_VAR 0 3
20660: PPUSH
20661: LD_INT 1
20663: PPUSH
20664: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20668: LD_INT 2
20670: PPUSH
20671: LD_VAR 0 3
20675: PPUSH
20676: LD_INT 1
20678: PPUSH
20679: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20683: LD_INT 11
20685: PPUSH
20686: LD_VAR 0 3
20690: PPUSH
20691: LD_INT 1
20693: PPUSH
20694: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
20698: LD_INT 20
20700: PPUSH
20701: LD_VAR 0 3
20705: PPUSH
20706: LD_INT 1
20708: PPUSH
20709: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20713: LD_INT 48
20715: PPUSH
20716: LD_VAR 0 3
20720: PPUSH
20721: LD_INT 1
20723: PPUSH
20724: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
20728: LD_INT 49
20730: PPUSH
20731: LD_VAR 0 3
20735: PPUSH
20736: LD_INT 1
20738: PPUSH
20739: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
20743: LD_INT 50
20745: PPUSH
20746: LD_VAR 0 3
20750: PPUSH
20751: LD_INT 1
20753: PPUSH
20754: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20758: LD_INT 69
20760: PPUSH
20761: LD_VAR 0 3
20765: PPUSH
20766: LD_INT 1
20768: PPUSH
20769: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20773: LD_INT 39
20775: PPUSH
20776: LD_VAR 0 3
20780: PPUSH
20781: LD_INT 1
20783: PPUSH
20784: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
20788: LD_INT 34
20790: PPUSH
20791: LD_VAR 0 3
20795: PPUSH
20796: LD_INT 1
20798: PPUSH
20799: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20803: LD_INT 42
20805: PPUSH
20806: LD_VAR 0 3
20810: PPUSH
20811: LD_INT 1
20813: PPUSH
20814: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20818: LD_INT 44
20820: PPUSH
20821: LD_VAR 0 3
20825: PPUSH
20826: LD_INT 1
20828: PPUSH
20829: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20833: LD_INT 41
20835: PPUSH
20836: LD_VAR 0 3
20840: PPUSH
20841: LD_INT 1
20843: PPUSH
20844: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
20848: LD_INT 13
20850: PPUSH
20851: LD_VAR 0 3
20855: PPUSH
20856: LD_INT 1
20858: PPUSH
20859: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
20863: LD_INT 40
20865: PPUSH
20866: LD_VAR 0 3
20870: PPUSH
20871: LD_INT 1
20873: PPUSH
20874: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20878: LD_INT 43
20880: PPUSH
20881: LD_VAR 0 3
20885: PPUSH
20886: LD_INT 1
20888: PPUSH
20889: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20893: LD_INT 70
20895: PPUSH
20896: LD_VAR 0 3
20900: PPUSH
20901: LD_INT 1
20903: PPUSH
20904: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
20908: LD_INT 23
20910: PPUSH
20911: LD_VAR 0 3
20915: PPUSH
20916: LD_INT 1
20918: PPUSH
20919: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20923: LD_INT 51
20925: PPUSH
20926: LD_VAR 0 3
20930: PPUSH
20931: LD_INT 1
20933: PPUSH
20934: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
20938: LD_INT 52
20940: PPUSH
20941: LD_VAR 0 3
20945: PPUSH
20946: LD_INT 1
20948: PPUSH
20949: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20953: LD_INT 6
20955: PPUSH
20956: LD_VAR 0 3
20960: PPUSH
20961: LD_INT 1
20963: PPUSH
20964: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
20968: LD_INT 15
20970: PPUSH
20971: LD_VAR 0 3
20975: PPUSH
20976: LD_INT 1
20978: PPUSH
20979: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
20983: LD_INT 7
20985: PPUSH
20986: LD_VAR 0 3
20990: PPUSH
20991: LD_INT 1
20993: PPUSH
20994: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
20998: LD_INT 12
21000: PPUSH
21001: LD_VAR 0 3
21005: PPUSH
21006: LD_INT 1
21008: PPUSH
21009: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
21013: LD_INT 10
21015: PPUSH
21016: LD_VAR 0 3
21020: PPUSH
21021: LD_INT 1
21023: PPUSH
21024: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
21028: LD_INT 17
21030: PPUSH
21031: LD_VAR 0 3
21035: PPUSH
21036: LD_INT 1
21038: PPUSH
21039: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
21043: LD_INT 18
21045: PPUSH
21046: LD_VAR 0 3
21050: PPUSH
21051: LD_INT 1
21053: PPUSH
21054: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
21058: LD_INT 60
21060: PPUSH
21061: LD_VAR 0 3
21065: PPUSH
21066: LD_INT 1
21068: PPUSH
21069: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
21073: LD_INT 61
21075: PPUSH
21076: LD_VAR 0 3
21080: PPUSH
21081: LD_INT 1
21083: PPUSH
21084: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
21088: LD_INT 32
21090: PPUSH
21091: LD_VAR 0 3
21095: PPUSH
21096: LD_INT 1
21098: PPUSH
21099: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
21103: LD_INT 27
21105: PPUSH
21106: LD_VAR 0 3
21110: PPUSH
21111: LD_INT 1
21113: PPUSH
21114: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
21118: LD_INT 36
21120: PPUSH
21121: LD_VAR 0 3
21125: PPUSH
21126: LD_INT 1
21128: PPUSH
21129: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
21133: LD_INT 33
21135: PPUSH
21136: LD_VAR 0 3
21140: PPUSH
21141: LD_INT 1
21143: PPUSH
21144: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
21148: LD_INT 9
21150: PPUSH
21151: LD_VAR 0 3
21155: PPUSH
21156: LD_INT 1
21158: PPUSH
21159: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
21163: LD_INT 38
21165: PPUSH
21166: LD_VAR 0 3
21170: PPUSH
21171: LD_INT 1
21173: PPUSH
21174: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
21178: LD_INT 57
21180: PPUSH
21181: LD_VAR 0 3
21185: PPUSH
21186: LD_INT 1
21188: PPUSH
21189: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
21193: LD_INT 58
21195: PPUSH
21196: LD_VAR 0 3
21200: PPUSH
21201: LD_INT 1
21203: PPUSH
21204: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
21208: LD_INT 28
21210: PPUSH
21211: LD_VAR 0 3
21215: PPUSH
21216: LD_INT 1
21218: PPUSH
21219: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
21223: LD_INT 29
21225: PPUSH
21226: LD_VAR 0 3
21230: PPUSH
21231: LD_INT 1
21233: PPUSH
21234: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
21238: LD_INT 30
21240: PPUSH
21241: LD_VAR 0 3
21245: PPUSH
21246: LD_INT 1
21248: PPUSH
21249: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
21253: LD_INT 37
21255: PPUSH
21256: LD_VAR 0 3
21260: PPUSH
21261: LD_INT 1
21263: PPUSH
21264: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
21268: LD_INT 63
21270: PPUSH
21271: LD_VAR 0 3
21275: PPUSH
21276: LD_INT 1
21278: PPUSH
21279: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
21283: LD_INT 64
21285: PPUSH
21286: LD_VAR 0 3
21290: PPUSH
21291: LD_INT 1
21293: PPUSH
21294: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
21298: LD_INT 3
21300: PPUSH
21301: LD_VAR 0 3
21305: PPUSH
21306: LD_INT 1
21308: PPUSH
21309: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
21313: LD_INT 4
21315: PPUSH
21316: LD_VAR 0 3
21320: PPUSH
21321: LD_INT 1
21323: PPUSH
21324: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
21328: LD_INT 5
21330: PPUSH
21331: LD_VAR 0 3
21335: PPUSH
21336: LD_INT 1
21338: PPUSH
21339: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
21343: LD_INT 8
21345: PPUSH
21346: LD_VAR 0 3
21350: PPUSH
21351: LD_INT 1
21353: PPUSH
21354: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
21358: LD_INT 66
21360: PPUSH
21361: LD_VAR 0 3
21365: PPUSH
21366: LD_INT 1
21368: PPUSH
21369: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
21373: LD_INT 67
21375: PPUSH
21376: LD_VAR 0 3
21380: PPUSH
21381: LD_INT 1
21383: PPUSH
21384: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
21388: LD_INT 21
21390: PPUSH
21391: LD_VAR 0 3
21395: PPUSH
21396: LD_INT 1
21398: PPUSH
21399: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
21403: LD_INT 22
21405: PPUSH
21406: LD_VAR 0 3
21410: PPUSH
21411: LD_INT 1
21413: PPUSH
21414: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
21418: LD_INT 19
21420: PPUSH
21421: LD_VAR 0 3
21425: PPUSH
21426: LD_INT 1
21428: PPUSH
21429: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
21433: LD_INT 26
21435: PPUSH
21436: LD_VAR 0 3
21440: PPUSH
21441: LD_INT 1
21443: PPUSH
21444: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
21448: LD_INT 54
21450: PPUSH
21451: LD_VAR 0 3
21455: PPUSH
21456: LD_INT 1
21458: PPUSH
21459: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
21463: LD_INT 55
21465: PPUSH
21466: LD_VAR 0 3
21470: PPUSH
21471: LD_INT 1
21473: PPUSH
21474: CALL_OW 322
// for i = 0 to 39 do
21478: LD_ADDR_VAR 0 4
21482: PUSH
21483: DOUBLE
21484: LD_INT 0
21486: DEC
21487: ST_TO_ADDR
21488: LD_INT 39
21490: PUSH
21491: FOR_TO
21492: IFFALSE 21513
// SetRestrict ( i , side , true ) ;
21494: LD_VAR 0 4
21498: PPUSH
21499: LD_VAR 0 3
21503: PPUSH
21504: LD_INT 1
21506: PPUSH
21507: CALL_OW 324
21511: GO 21491
21513: POP
21514: POP
// end ; else
21515: GO 21592
21517: POP
// begin for i = 1 to 73 do
21518: LD_ADDR_VAR 0 4
21522: PUSH
21523: DOUBLE
21524: LD_INT 1
21526: DEC
21527: ST_TO_ADDR
21528: LD_INT 73
21530: PUSH
21531: FOR_TO
21532: IFFALSE 21553
// SetTech ( i , side , state_enabled ) ;
21534: LD_VAR 0 4
21538: PPUSH
21539: LD_VAR 0 3
21543: PPUSH
21544: LD_INT 1
21546: PPUSH
21547: CALL_OW 322
21551: GO 21531
21553: POP
21554: POP
// for i = 0 to 39 do
21555: LD_ADDR_VAR 0 4
21559: PUSH
21560: DOUBLE
21561: LD_INT 0
21563: DEC
21564: ST_TO_ADDR
21565: LD_INT 39
21567: PUSH
21568: FOR_TO
21569: IFFALSE 21590
// SetRestrict ( i , side , true ) ;
21571: LD_VAR 0 4
21575: PPUSH
21576: LD_VAR 0 3
21580: PPUSH
21581: LD_INT 1
21583: PPUSH
21584: CALL_OW 324
21588: GO 21568
21590: POP
21591: POP
// end ; end ; end ;
21592: GO 17597
21594: POP
21595: POP
// end ; end_of_file
21596: LD_VAR 0 2
21600: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
21601: LD_INT 0
21603: PPUSH
21604: PPUSH
21605: PPUSH
21606: PPUSH
21607: PPUSH
21608: PPUSH
21609: PPUSH
21610: PPUSH
21611: PPUSH
// for i := 1 to 8 do
21612: LD_ADDR_VAR 0 2
21616: PUSH
21617: DOUBLE
21618: LD_INT 1
21620: DEC
21621: ST_TO_ADDR
21622: LD_INT 8
21624: PUSH
21625: FOR_TO
21626: IFFALSE 22010
// begin if Side_Positions [ i ] then
21628: LD_EXP 43
21632: PUSH
21633: LD_VAR 0 2
21637: ARRAY
21638: IFFALSE 22008
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
21640: LD_ADDR_VAR 0 7
21644: PUSH
21645: LD_INT 22
21647: PUSH
21648: LD_VAR 0 2
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 21
21659: PUSH
21660: LD_INT 1
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PPUSH
21671: CALL_OW 69
21675: PUSH
21676: LD_INT 0
21678: PLUS
21679: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21680: LD_ADDR_VAR 0 9
21684: PUSH
21685: LD_INT 22
21687: PUSH
21688: LD_VAR 0 2
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 2
21699: PUSH
21700: LD_INT 30
21702: PUSH
21703: LD_INT 0
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 30
21712: PUSH
21713: LD_INT 1
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: LIST
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PPUSH
21729: CALL_OW 69
21733: ST_TO_ADDR
// crates := 0 ;
21734: LD_ADDR_VAR 0 4
21738: PUSH
21739: LD_INT 0
21741: ST_TO_ADDR
// oil := 0 ;
21742: LD_ADDR_VAR 0 5
21746: PUSH
21747: LD_INT 0
21749: ST_TO_ADDR
// sib := 0 ;
21750: LD_ADDR_VAR 0 6
21754: PUSH
21755: LD_INT 0
21757: ST_TO_ADDR
// if bases then
21758: LD_VAR 0 9
21762: IFFALSE 21868
// begin for j in bases do
21764: LD_ADDR_VAR 0 3
21768: PUSH
21769: LD_VAR 0 9
21773: PUSH
21774: FOR_IN
21775: IFFALSE 21866
// begin base := GetBase ( j ) ;
21777: LD_ADDR_VAR 0 8
21781: PUSH
21782: LD_VAR 0 3
21786: PPUSH
21787: CALL_OW 274
21791: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
21792: LD_ADDR_VAR 0 4
21796: PUSH
21797: LD_VAR 0 4
21801: PUSH
21802: LD_VAR 0 8
21806: PPUSH
21807: LD_INT 1
21809: PPUSH
21810: CALL_OW 275
21814: PLUS
21815: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
21816: LD_ADDR_VAR 0 5
21820: PUSH
21821: LD_VAR 0 5
21825: PUSH
21826: LD_VAR 0 8
21830: PPUSH
21831: LD_INT 2
21833: PPUSH
21834: CALL_OW 275
21838: PLUS
21839: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
21840: LD_ADDR_VAR 0 6
21844: PUSH
21845: LD_VAR 0 6
21849: PUSH
21850: LD_VAR 0 8
21854: PPUSH
21855: LD_INT 3
21857: PPUSH
21858: CALL_OW 275
21862: PLUS
21863: ST_TO_ADDR
// end ;
21864: GO 21774
21866: POP
21867: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
21868: LD_STRING setSpecText(
21870: PUSH
21871: LD_VAR 0 2
21875: STR
21876: PUSH
21877: LD_STRING ,
21879: STR
21880: PUSH
21881: LD_INT 2
21883: STR
21884: PUSH
21885: LD_STRING ,
21887: STR
21888: PUSH
21889: LD_VAR 0 4
21893: STR
21894: PUSH
21895: LD_STRING )
21897: STR
21898: PPUSH
21899: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
21903: LD_STRING setSpecText(
21905: PUSH
21906: LD_VAR 0 2
21910: STR
21911: PUSH
21912: LD_STRING ,
21914: STR
21915: PUSH
21916: LD_INT 3
21918: STR
21919: PUSH
21920: LD_STRING ,
21922: STR
21923: PUSH
21924: LD_VAR 0 5
21928: STR
21929: PUSH
21930: LD_STRING )
21932: STR
21933: PPUSH
21934: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
21938: LD_STRING setSpecText(
21940: PUSH
21941: LD_VAR 0 2
21945: STR
21946: PUSH
21947: LD_STRING ,
21949: STR
21950: PUSH
21951: LD_INT 4
21953: STR
21954: PUSH
21955: LD_STRING ,
21957: STR
21958: PUSH
21959: LD_VAR 0 6
21963: STR
21964: PUSH
21965: LD_STRING )
21967: STR
21968: PPUSH
21969: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
21973: LD_STRING setSpecText(
21975: PUSH
21976: LD_VAR 0 2
21980: STR
21981: PUSH
21982: LD_STRING ,
21984: STR
21985: PUSH
21986: LD_INT 5
21988: STR
21989: PUSH
21990: LD_STRING ,
21992: STR
21993: PUSH
21994: LD_VAR 0 7
21998: STR
21999: PUSH
22000: LD_STRING )
22002: STR
22003: PPUSH
22004: CALL_OW 559
// end ; end ;
22008: GO 21625
22010: POP
22011: POP
// end ;
22012: LD_VAR 0 1
22016: RET
// every 0 0$1 do
22017: GO 22019
22019: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
22020: LD_STRING setSpecLogoNumber(
22022: PUSH
22023: LD_INT 2
22025: STR
22026: PUSH
22027: LD_STRING ,
22029: STR
22030: PUSH
22031: LD_INT 1
22033: STR
22034: PUSH
22035: LD_STRING )
22037: STR
22038: PPUSH
22039: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
22043: LD_STRING setSpecLogoNumber(
22045: PUSH
22046: LD_INT 3
22048: STR
22049: PUSH
22050: LD_STRING ,
22052: STR
22053: PUSH
22054: LD_INT 2
22056: STR
22057: PUSH
22058: LD_STRING )
22060: STR
22061: PPUSH
22062: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
22066: LD_STRING setSpecLogoNumber(
22068: PUSH
22069: LD_INT 4
22071: STR
22072: PUSH
22073: LD_STRING ,
22075: STR
22076: PUSH
22077: LD_INT 3
22079: STR
22080: PUSH
22081: LD_STRING )
22083: STR
22084: PPUSH
22085: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
22089: LD_STRING setSpecLogoNumber(
22091: PUSH
22092: LD_INT 5
22094: STR
22095: PUSH
22096: LD_STRING ,
22098: STR
22099: PUSH
22100: LD_INT 4
22102: STR
22103: PUSH
22104: LD_STRING )
22106: STR
22107: PPUSH
22108: CALL_OW 559
// end ;
22112: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
22113: LD_INT 2
22115: PUSH
22116: LD_INT 30
22118: PUSH
22119: LD_INT 0
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 30
22128: PUSH
22129: LD_INT 1
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: LIST
22140: PPUSH
22141: CALL_OW 69
22145: IFFALSE 22155
22147: GO 22149
22149: DISABLE
// begin enable ;
22150: ENABLE
// UpdateSpectatorBar ;
22151: CALL 21601 0 0
// end ;
22155: END
