// export def_main_base , def_secondary_base , def_defence_level , def_amount_of_people , def_initial_level , def_main_deposits , def_secondary_deposits , def_siberite_detection , def_starting_resources , def_shipments_density , def_people_arrivals , def_people_loyality , def_people_info , def_morale_flags , def_siberite_bomb , def_amount_of_apemen , def_builduptime , def_win_rules , def_people_respawning ; export is_depot , number_of_people , number_of_pplants , are_mines , is_lab , is_fact , is_arm , are_breastworks , deposits , initial_level , starting_crates , starting_resources , shipments_density , max_arriving_times , text_info , fog_info , def_bf_params , amount_of_apemen , siberite_bomb_Delay ; export Positions , Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export second_side , third_nation ; export start_def , depots_def , breastworks_def , labs_def , factories_def , armories_def , pplants_def , deposits_def ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i ; var u1 , u2 , pom_tab , p1 , p2 , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
  73: PPUSH
  74: PPUSH
  75: PPUSH
  76: PPUSH
  77: PPUSH
  78: PPUSH
  79: PPUSH
  80: PPUSH
  81: PPUSH
  82: PPUSH
  83: PPUSH
// if MultiPlayer then
  84: LD_OWVAR 4
  88: IFFALSE 162
// begin Game_Type = mp_game_type ;
  90: LD_ADDR_EXP 64
  94: PUSH
  95: LD_OWVAR 6
  99: ST_TO_ADDR
// Your_Side = mp_player_side ;
 100: LD_ADDR_OWVAR 2
 104: PUSH
 105: LD_OWVAR 7
 109: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_OWVAR 17
 119: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 120: LD_ADDR_EXP 40
 124: PUSH
 125: LD_OWVAR 15
 129: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 130: LD_ADDR_EXP 44
 134: PUSH
 135: LD_OWVAR 16
 139: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 140: LD_ADDR_EXP 42
 144: PUSH
 145: CALL 0 0 0
 149: ST_TO_ADDR
// Teams = mp_teams ;
 150: LD_ADDR_EXP 41
 154: PUSH
 155: LD_OWVAR 12
 159: ST_TO_ADDR
// end else
 160: GO 333
// begin Your_Side = 3 ;
 162: LD_ADDR_OWVAR 2
 166: PUSH
 167: LD_INT 3
 169: ST_TO_ADDR
// Side_Positions = [ 0 , 0 , 2 , 0 , 1 , 0 , 0 , 0 ] ;
 170: LD_ADDR_EXP 43
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 2
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 1
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: LD_INT 0
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: LIST
 208: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 209: LD_ADDR_EXP 40
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: LD_INT 0
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: LIST
 246: LIST
 247: ST_TO_ADDR
// Side_Nations = [ 0 , 0 , 3 , 0 , 2 , 0 , 0 , 0 ] ;
 248: LD_ADDR_EXP 44
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 3
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 2
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: LIST
 286: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 287: LD_ADDR_EXP 42
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: ST_TO_ADDR
// Teams = [ ] ;
 326: LD_ADDR_EXP 41
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 333: LD_ADDR_EXP 45
 337: PUSH
 338: LD_EXP 40
 342: PUSH
 343: LD_INT 0
 345: PUSH
 346: EMPTY
 347: LIST
 348: DIFF
 349: PUSH
 350: LD_INT 1
 352: GREATER
 353: ST_TO_ADDR
// p1 := 0 ;
 354: LD_ADDR_VAR 0 12
 358: PUSH
 359: LD_INT 0
 361: ST_TO_ADDR
// p2 := 0 ;
 362: LD_ADDR_VAR 0 13
 366: PUSH
 367: LD_INT 0
 369: ST_TO_ADDR
// for i := 1 to 8 do
 370: LD_ADDR_VAR 0 8
 374: PUSH
 375: DOUBLE
 376: LD_INT 1
 378: DEC
 379: ST_TO_ADDR
 380: LD_INT 8
 382: PUSH
 383: FOR_TO
 384: IFFALSE 442
// if Side_Positions [ i ] = 1 then
 386: LD_EXP 43
 390: PUSH
 391: LD_VAR 0 8
 395: ARRAY
 396: PUSH
 397: LD_INT 1
 399: EQUAL
 400: IFFALSE 414
// p1 := i else
 402: LD_ADDR_VAR 0 12
 406: PUSH
 407: LD_VAR 0 8
 411: ST_TO_ADDR
 412: GO 440
// if Side_Positions [ i ] = 2 then
 414: LD_EXP 43
 418: PUSH
 419: LD_VAR 0 8
 423: ARRAY
 424: PUSH
 425: LD_INT 2
 427: EQUAL
 428: IFFALSE 440
// p2 := i ;
 430: LD_ADDR_VAR 0 13
 434: PUSH
 435: LD_VAR 0 8
 439: ST_TO_ADDR
 440: GO 383
 442: POP
 443: POP
// Positions := [ p1 , p2 ] ;
 444: LD_ADDR_EXP 39
 448: PUSH
 449: LD_VAR 0 12
 453: PUSH
 454: LD_VAR 0 13
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: ST_TO_ADDR
// if MultiPlayer then
 463: LD_OWVAR 4
 467: IFFALSE 721
// begin def_main_base = GetMultiplayerSetting ( 0 ) ;
 469: LD_ADDR_EXP 1
 473: PUSH
 474: LD_INT 0
 476: PPUSH
 477: CALL_OW 426
 481: ST_TO_ADDR
// def_secondary_base = GetMultiplayerSetting ( 1 ) ;
 482: LD_ADDR_EXP 2
 486: PUSH
 487: LD_INT 1
 489: PPUSH
 490: CALL_OW 426
 494: ST_TO_ADDR
// def_defence_level = GetMultiplayerSetting ( 2 ) ;
 495: LD_ADDR_EXP 3
 499: PUSH
 500: LD_INT 2
 502: PPUSH
 503: CALL_OW 426
 507: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 3 ) ;
 508: LD_ADDR_EXP 4
 512: PUSH
 513: LD_INT 3
 515: PPUSH
 516: CALL_OW 426
 520: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 4 ) ;
 521: LD_ADDR_EXP 5
 525: PUSH
 526: LD_INT 4
 528: PPUSH
 529: CALL_OW 426
 533: ST_TO_ADDR
// def_main_deposits = GetMultiplayerSetting ( 5 ) ;
 534: LD_ADDR_EXP 6
 538: PUSH
 539: LD_INT 5
 541: PPUSH
 542: CALL_OW 426
 546: ST_TO_ADDR
// def_secondary_deposits = GetMultiplayerSetting ( 6 ) ;
 547: LD_ADDR_EXP 7
 551: PUSH
 552: LD_INT 6
 554: PPUSH
 555: CALL_OW 426
 559: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 7 ) ;
 560: LD_ADDR_EXP 8
 564: PUSH
 565: LD_INT 7
 567: PPUSH
 568: CALL_OW 426
 572: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 8 ) ;
 573: LD_ADDR_EXP 9
 577: PUSH
 578: LD_INT 8
 580: PPUSH
 581: CALL_OW 426
 585: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 9 ) ;
 586: LD_ADDR_EXP 10
 590: PUSH
 591: LD_INT 9
 593: PPUSH
 594: CALL_OW 426
 598: ST_TO_ADDR
// def_people_arrivals = GetMultiplayerSetting ( 10 ) ;
 599: LD_ADDR_EXP 11
 603: PUSH
 604: LD_INT 10
 606: PPUSH
 607: CALL_OW 426
 611: ST_TO_ADDR
// def_people_loyality = GetMultiplayerSetting ( 11 ) ;
 612: LD_ADDR_EXP 12
 616: PUSH
 617: LD_INT 11
 619: PPUSH
 620: CALL_OW 426
 624: ST_TO_ADDR
// def_people_info = GetMultiplayerSetting ( 12 ) ;
 625: LD_ADDR_EXP 13
 629: PUSH
 630: LD_INT 12
 632: PPUSH
 633: CALL_OW 426
 637: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 15 ) ;
 638: LD_ADDR_EXP 14
 642: PUSH
 643: LD_INT 15
 645: PPUSH
 646: CALL_OW 426
 650: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 16 ) ;
 651: LD_ADDR_EXP 15
 655: PUSH
 656: LD_INT 16
 658: PPUSH
 659: CALL_OW 426
 663: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 17 ) ;
 664: LD_ADDR_EXP 16
 668: PUSH
 669: LD_INT 17
 671: PPUSH
 672: CALL_OW 426
 676: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 677: LD_ADDR_EXP 17
 681: PUSH
 682: LD_INT 20
 684: PPUSH
 685: CALL_OW 426
 689: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 690: LD_ADDR_VAR 0 14
 694: PUSH
 695: LD_INT 22
 697: PPUSH
 698: CALL_OW 426
 702: ST_TO_ADDR
// def_people_respawning = 0 ;
 703: LD_ADDR_EXP 19
 707: PUSH
 708: LD_INT 0
 710: ST_TO_ADDR
// def_win_rules = 0 ;
 711: LD_ADDR_EXP 18
 715: PUSH
 716: LD_INT 0
 718: ST_TO_ADDR
// end else
 719: GO 893
// begin randomize ;
 721: CALL_OW 10
// def_main_base = 1 ;
 725: LD_ADDR_EXP 1
 729: PUSH
 730: LD_INT 1
 732: ST_TO_ADDR
// def_secondary_base = 1 ;
 733: LD_ADDR_EXP 2
 737: PUSH
 738: LD_INT 1
 740: ST_TO_ADDR
// def_defence_level = 1 ;
 741: LD_ADDR_EXP 3
 745: PUSH
 746: LD_INT 1
 748: ST_TO_ADDR
// def_amount_of_people = 2 ;
 749: LD_ADDR_EXP 4
 753: PUSH
 754: LD_INT 2
 756: ST_TO_ADDR
// def_initial_level = 1 ;
 757: LD_ADDR_EXP 5
 761: PUSH
 762: LD_INT 1
 764: ST_TO_ADDR
// def_main_deposits = 2 ;
 765: LD_ADDR_EXP 6
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// def_secondary_deposits = 1 ;
 773: LD_ADDR_EXP 7
 777: PUSH
 778: LD_INT 1
 780: ST_TO_ADDR
// def_siberite_detection = 1 ;
 781: LD_ADDR_EXP 8
 785: PUSH
 786: LD_INT 1
 788: ST_TO_ADDR
// def_starting_resources = 2 ;
 789: LD_ADDR_EXP 9
 793: PUSH
 794: LD_INT 2
 796: ST_TO_ADDR
// def_shipments_density = 70 ;
 797: LD_ADDR_EXP 10
 801: PUSH
 802: LD_INT 70
 804: ST_TO_ADDR
// def_people_arrivals = 3 ;
 805: LD_ADDR_EXP 11
 809: PUSH
 810: LD_INT 3
 812: ST_TO_ADDR
// def_people_loyality = 1 ;
 813: LD_ADDR_EXP 12
 817: PUSH
 818: LD_INT 1
 820: ST_TO_ADDR
// def_people_info = 1 ;
 821: LD_ADDR_EXP 13
 825: PUSH
 826: LD_INT 1
 828: ST_TO_ADDR
// def_morale_flags = 2 ;
 829: LD_ADDR_EXP 14
 833: PUSH
 834: LD_INT 2
 836: ST_TO_ADDR
// def_siberite_bomb = 1 ;
 837: LD_ADDR_EXP 15
 841: PUSH
 842: LD_INT 1
 844: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 845: LD_ADDR_EXP 16
 849: PUSH
 850: LD_INT 3
 852: ST_TO_ADDR
// def_builduptime = 1 ;
 853: LD_ADDR_EXP 17
 857: PUSH
 858: LD_INT 1
 860: ST_TO_ADDR
// def_game_rules = 0 ;
 861: LD_ADDR_EXP 65
 865: PUSH
 866: LD_INT 0
 868: ST_TO_ADDR
// tech_level = 4 ;
 869: LD_ADDR_VAR 0 14
 873: PUSH
 874: LD_INT 4
 876: ST_TO_ADDR
// def_people_respawning = 0 ;
 877: LD_ADDR_EXP 19
 881: PUSH
 882: LD_INT 0
 884: ST_TO_ADDR
// def_win_rules = 0 ;
 885: LD_ADDR_EXP 18
 889: PUSH
 890: LD_INT 0
 892: ST_TO_ADDR
// end ; InitGameRules ;
 893: CALL 13325 0 0
// if def_game_rules = 0 then
 897: LD_EXP 65
 901: PUSH
 902: LD_INT 0
 904: EQUAL
 905: IFFALSE 932
// begin if isSGUI then
 907: LD_OWVAR 83
 911: IFFALSE 919
// setMpTechs ( ) else
 913: CALL 16642 0 0
 917: GO 932
// begin SetMpTechLevel ( tech_level + 1 ) ;
 919: LD_VAR 0 14
 923: PUSH
 924: LD_INT 1
 926: PLUS
 927: PPUSH
 928: CALL 16789 0 1
// end ; end ; u1 = [ 0 , 1 , 1 , 1 , 2 ] [ def_main_base + 1 ] ;
 932: LD_ADDR_VAR 0 9
 936: PUSH
 937: LD_INT 0
 939: PUSH
 940: LD_INT 1
 942: PUSH
 943: LD_INT 1
 945: PUSH
 946: LD_INT 1
 948: PUSH
 949: LD_INT 2
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_EXP 1
 963: PUSH
 964: LD_INT 1
 966: PLUS
 967: ARRAY
 968: ST_TO_ADDR
// u2 = [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] ;
 969: LD_ADDR_VAR 0 10
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: LD_INT 1
 979: PUSH
 980: LD_INT 1
 982: PUSH
 983: LD_INT 2
 985: PUSH
 986: LD_INT 2
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: PUSH
 996: LD_EXP 1
1000: PUSH
1001: LD_INT 1
1003: PLUS
1004: ARRAY
1005: ST_TO_ADDR
// is_depot = [ [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] , [ 0 , 1 , 1 ] [ def_secondary_base + 1 ] ] ;
1006: LD_ADDR_EXP 20
1010: PUSH
1011: LD_INT 0
1013: PUSH
1014: LD_INT 1
1016: PUSH
1017: LD_INT 1
1019: PUSH
1020: LD_INT 2
1022: PUSH
1023: LD_INT 2
1025: PUSH
1026: EMPTY
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: LD_EXP 1
1037: PUSH
1038: LD_INT 1
1040: PLUS
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: PUSH
1046: LD_INT 1
1048: PUSH
1049: LD_INT 1
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: LIST
1056: PUSH
1057: LD_EXP 2
1061: PUSH
1062: LD_INT 1
1064: PLUS
1065: ARRAY
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: ST_TO_ADDR
// if is_depot [ 2 ] then
1071: LD_EXP 20
1075: PUSH
1076: LD_INT 2
1078: ARRAY
1079: IFFALSE 1218
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ [ ] , [ 1 ] , [ 1 , 1 ] , [ 1 , 1 , 1 ] ] [ def_defence_level + 1 ] ] else
1081: LD_ADDR_EXP 27
1085: PUSH
1086: EMPTY
1087: PUSH
1088: LD_VAR 0 10
1092: PUSH
1093: LD_VAR 0 9
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: PUSH
1102: LD_VAR 0 10
1106: PUSH
1107: LD_VAR 0 10
1111: PUSH
1112: LD_VAR 0 9
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_VAR 0 10
1126: PUSH
1127: LD_VAR 0 10
1131: PUSH
1132: LD_VAR 0 9
1136: PUSH
1137: LD_VAR 0 9
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: PUSH
1154: LD_EXP 3
1158: PUSH
1159: LD_INT 1
1161: PLUS
1162: ARRAY
1163: PUSH
1164: EMPTY
1165: PUSH
1166: LD_INT 1
1168: PUSH
1169: EMPTY
1170: LIST
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: LD_INT 1
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: LD_INT 1
1187: PUSH
1188: LD_INT 1
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: PUSH
1202: LD_EXP 3
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: ARRAY
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: ST_TO_ADDR
1216: GO 1307
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ ] ] ;
1218: LD_ADDR_EXP 27
1222: PUSH
1223: EMPTY
1224: PUSH
1225: LD_VAR 0 10
1229: PUSH
1230: LD_VAR 0 9
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: PUSH
1239: LD_VAR 0 10
1243: PUSH
1244: LD_VAR 0 10
1248: PUSH
1249: LD_VAR 0 9
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: PUSH
1259: LD_VAR 0 10
1263: PUSH
1264: LD_VAR 0 10
1268: PUSH
1269: LD_VAR 0 9
1273: PUSH
1274: LD_VAR 0 9
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: PUSH
1291: LD_EXP 3
1295: PUSH
1296: LD_INT 1
1298: PLUS
1299: ARRAY
1300: PUSH
1301: EMPTY
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: ST_TO_ADDR
// is_fact = [ [ 0 , 0 , 1 , 2 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1307: LD_ADDR_EXP 25
1311: PUSH
1312: LD_INT 0
1314: PUSH
1315: LD_INT 0
1317: PUSH
1318: LD_INT 1
1320: PUSH
1321: LD_INT 2
1323: PUSH
1324: LD_INT 2
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: PUSH
1334: LD_EXP 1
1338: PUSH
1339: LD_INT 1
1341: PLUS
1342: ARRAY
1343: PUSH
1344: LD_INT 0
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: ST_TO_ADDR
// is_lab = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1351: LD_ADDR_EXP 24
1355: PUSH
1356: LD_INT 0
1358: PUSH
1359: LD_INT 0
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 2
1370: PUSH
1371: EMPTY
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: PUSH
1378: LD_EXP 1
1382: PUSH
1383: LD_INT 1
1385: PLUS
1386: ARRAY
1387: PUSH
1388: LD_INT 0
1390: PUSH
1391: EMPTY
1392: LIST
1393: LIST
1394: ST_TO_ADDR
// is_arm = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1395: LD_ADDR_EXP 26
1399: PUSH
1400: LD_INT 0
1402: PUSH
1403: LD_INT 0
1405: PUSH
1406: LD_INT 1
1408: PUSH
1409: LD_INT 1
1411: PUSH
1412: LD_INT 2
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: PUSH
1422: LD_EXP 1
1426: PUSH
1427: LD_INT 1
1429: PLUS
1430: ARRAY
1431: PUSH
1432: LD_INT 0
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: ST_TO_ADDR
// are_mines = [ [ 0 , 0 , 0 , 1 , 1 ] [ def_main_base + 1 ] , [ 0 , 0 , 1 ] [ def_secondary_base + 1 ] ] ;
1439: LD_ADDR_EXP 23
1443: PUSH
1444: LD_INT 0
1446: PUSH
1447: LD_INT 0
1449: PUSH
1450: LD_INT 0
1452: PUSH
1453: LD_INT 1
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: PUSH
1466: LD_EXP 1
1470: PUSH
1471: LD_INT 1
1473: PLUS
1474: ARRAY
1475: PUSH
1476: LD_INT 0
1478: PUSH
1479: LD_INT 0
1481: PUSH
1482: LD_INT 1
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: LIST
1489: PUSH
1490: LD_EXP 2
1494: PUSH
1495: LD_INT 1
1497: PLUS
1498: ARRAY
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: ST_TO_ADDR
// number_of_pplants = [ [ 0 , 0 , 0 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1504: LD_ADDR_EXP 22
1508: PUSH
1509: LD_INT 0
1511: PUSH
1512: LD_INT 0
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 2
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_EXP 1
1535: PUSH
1536: LD_INT 1
1538: PLUS
1539: ARRAY
1540: PUSH
1541: LD_INT 0
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: ST_TO_ADDR
// number_of_people = [ [ 5 , 8 , 11 ] [ def_amount_of_people + 1 ] , ( [ 2 , 3 , 4 ] [ def_amount_of_people + 1 ] ) * is_depot [ 2 ] ] ;
1548: LD_ADDR_EXP 21
1552: PUSH
1553: LD_INT 5
1555: PUSH
1556: LD_INT 8
1558: PUSH
1559: LD_INT 11
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: LIST
1566: PUSH
1567: LD_EXP 4
1571: PUSH
1572: LD_INT 1
1574: PLUS
1575: ARRAY
1576: PUSH
1577: LD_INT 2
1579: PUSH
1580: LD_INT 3
1582: PUSH
1583: LD_INT 4
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: LIST
1590: PUSH
1591: LD_EXP 4
1595: PUSH
1596: LD_INT 1
1598: PLUS
1599: ARRAY
1600: PUSH
1601: LD_EXP 20
1605: PUSH
1606: LD_INT 2
1608: ARRAY
1609: MUL
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
1615: LD_ADDR_EXP 29
1619: PUSH
1620: LD_INT 2
1622: PUSH
1623: LD_INT 3
1625: PUSH
1626: LD_INT 4
1628: PUSH
1629: LD_INT 5
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: PUSH
1638: LD_EXP 5
1642: PUSH
1643: LD_INT 1
1645: PLUS
1646: ARRAY
1647: ST_TO_ADDR
// starting_resources = [ [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] , [ [ 50 , 0 , 0 ] , [ 20 , 0 , 0 ] ] , [ [ 150 , 30 , 0 ] , [ 60 , 0 , 0 ] ] , [ [ 250 , 50 , 10 ] , [ 100 , 30 , 0 ] ] ] [ def_starting_resources + 1 ] ;
1648: LD_ADDR_EXP 31
1652: PUSH
1653: LD_INT 0
1655: PUSH
1656: LD_INT 0
1658: PUSH
1659: LD_INT 0
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: PUSH
1667: LD_INT 0
1669: PUSH
1670: LD_INT 0
1672: PUSH
1673: LD_INT 0
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: PUSH
1685: LD_INT 50
1687: PUSH
1688: LD_INT 0
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: PUSH
1699: LD_INT 20
1701: PUSH
1702: LD_INT 0
1704: PUSH
1705: LD_INT 0
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: LD_INT 150
1719: PUSH
1720: LD_INT 30
1722: PUSH
1723: LD_INT 0
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: PUSH
1731: LD_INT 60
1733: PUSH
1734: LD_INT 0
1736: PUSH
1737: LD_INT 0
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 250
1751: PUSH
1752: LD_INT 50
1754: PUSH
1755: LD_INT 10
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: LD_INT 100
1765: PUSH
1766: LD_INT 30
1768: PUSH
1769: LD_INT 0
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: PUSH
1787: LD_EXP 9
1791: PUSH
1792: LD_INT 1
1794: PLUS
1795: ARRAY
1796: ST_TO_ADDR
// shipments_density := 380 - ( def_shipments_density * 2 ) ;
1797: LD_ADDR_EXP 32
1801: PUSH
1802: LD_INT 380
1804: PUSH
1805: LD_EXP 10
1809: PUSH
1810: LD_INT 2
1812: MUL
1813: MINUS
1814: ST_TO_ADDR
// max_arriving_times = [ [ ] , [ 10 , 17 , 26 , 36 , 48 , 60 ] , [ 6 , 10 , 15 , 20 , 26 , 32 , 38 , 45 , 52 , 60 ] , [ 4 , 6 , 9 , 12 , 16 , 20 , 24 , 28 , 32 , 36 , 40 , 45 , 50 , 55 , 60 ] ] [ def_people_arrivals + 1 ] ;
1815: LD_ADDR_EXP 33
1819: PUSH
1820: EMPTY
1821: PUSH
1822: LD_INT 10
1824: PUSH
1825: LD_INT 17
1827: PUSH
1828: LD_INT 26
1830: PUSH
1831: LD_INT 36
1833: PUSH
1834: LD_INT 48
1836: PUSH
1837: LD_INT 60
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: PUSH
1848: LD_INT 6
1850: PUSH
1851: LD_INT 10
1853: PUSH
1854: LD_INT 15
1856: PUSH
1857: LD_INT 20
1859: PUSH
1860: LD_INT 26
1862: PUSH
1863: LD_INT 32
1865: PUSH
1866: LD_INT 38
1868: PUSH
1869: LD_INT 45
1871: PUSH
1872: LD_INT 52
1874: PUSH
1875: LD_INT 60
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 4
1892: PUSH
1893: LD_INT 6
1895: PUSH
1896: LD_INT 9
1898: PUSH
1899: LD_INT 12
1901: PUSH
1902: LD_INT 16
1904: PUSH
1905: LD_INT 20
1907: PUSH
1908: LD_INT 24
1910: PUSH
1911: LD_INT 28
1913: PUSH
1914: LD_INT 32
1916: PUSH
1917: LD_INT 36
1919: PUSH
1920: LD_INT 40
1922: PUSH
1923: LD_INT 45
1925: PUSH
1926: LD_INT 50
1928: PUSH
1929: LD_INT 55
1931: PUSH
1932: LD_INT 60
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: PUSH
1958: LD_EXP 11
1962: PUSH
1963: LD_INT 1
1965: PLUS
1966: ARRAY
1967: ST_TO_ADDR
// text_info = [ 0 , 1 , 0 , 1 ] [ def_people_info + 1 ] ;
1968: LD_ADDR_EXP 34
1972: PUSH
1973: LD_INT 0
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 1
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: PUSH
1991: LD_EXP 13
1995: PUSH
1996: LD_INT 1
1998: PLUS
1999: ARRAY
2000: ST_TO_ADDR
// fog_info = [ 0 , 0 , 1 , 1 ] [ def_people_info + 1 ] ;
2001: LD_ADDR_EXP 35
2005: PUSH
2006: LD_INT 0
2008: PUSH
2009: LD_INT 0
2011: PUSH
2012: LD_INT 1
2014: PUSH
2015: LD_INT 1
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: PUSH
2024: LD_EXP 13
2028: PUSH
2029: LD_INT 1
2031: PLUS
2032: ARRAY
2033: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
2034: LD_ADDR_EXP 37
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 1
2044: PUSH
2045: LD_INT 2
2047: PUSH
2048: LD_INT 3
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: PUSH
2057: LD_EXP 16
2061: PUSH
2062: LD_INT 1
2064: PLUS
2065: ARRAY
2066: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2067: LD_ADDR_EXP 38
2071: PUSH
2072: LD_INT 0
2074: PUSH
2075: LD_INT 1
2077: PUSH
2078: LD_INT 63000
2080: PUSH
2081: LD_INT 126000
2083: PUSH
2084: LD_INT 189000
2086: PUSH
2087: LD_INT 252000
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: PUSH
2098: LD_EXP 15
2102: PUSH
2103: LD_INT 1
2105: PLUS
2106: ARRAY
2107: ST_TO_ADDR
// deposits = [ [ [ 1 , 0 , 1 , 2 , 0 ] [ def_main_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_main_deposits + 1 ] ] , [ [ 1 , 0 , 1 , 2 , 0 ] [ def_secondary_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_secondary_deposits + 1 ] ] ] ;
2108: LD_ADDR_EXP 28
2112: PUSH
2113: LD_INT 1
2115: PUSH
2116: LD_INT 0
2118: PUSH
2119: LD_INT 1
2121: PUSH
2122: LD_INT 2
2124: PUSH
2125: LD_INT 0
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: PUSH
2135: LD_EXP 6
2139: PUSH
2140: LD_INT 1
2142: PLUS
2143: ARRAY
2144: PUSH
2145: LD_INT 0
2147: PUSH
2148: LD_INT 1
2150: PUSH
2151: LD_INT 1
2153: PUSH
2154: LD_INT 0
2156: PUSH
2157: LD_INT 2
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_EXP 6
2171: PUSH
2172: LD_INT 1
2174: PLUS
2175: ARRAY
2176: PUSH
2177: EMPTY
2178: LIST
2179: LIST
2180: PUSH
2181: LD_INT 1
2183: PUSH
2184: LD_INT 0
2186: PUSH
2187: LD_INT 1
2189: PUSH
2190: LD_INT 2
2192: PUSH
2193: LD_INT 0
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: PUSH
2203: LD_EXP 7
2207: PUSH
2208: LD_INT 1
2210: PLUS
2211: ARRAY
2212: PUSH
2213: LD_INT 0
2215: PUSH
2216: LD_INT 1
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: LD_INT 0
2224: PUSH
2225: LD_INT 2
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: LIST
2234: PUSH
2235: LD_EXP 7
2239: PUSH
2240: LD_INT 1
2242: PLUS
2243: ARRAY
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: ST_TO_ADDR
// def_bf_params = [ [ 0 , 0 , 0 , 0 ] , [ 50 , 25 , 0 , 50 ] , [ 75 , 50 , 25 , 75 ] , [ 100 , 75 , 50 , 100 ] ] [ def_morale_flags + 1 ] ;
2253: LD_ADDR_EXP 36
2257: PUSH
2258: LD_INT 0
2260: PUSH
2261: LD_INT 0
2263: PUSH
2264: LD_INT 0
2266: PUSH
2267: LD_INT 0
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 50
2278: PUSH
2279: LD_INT 25
2281: PUSH
2282: LD_INT 0
2284: PUSH
2285: LD_INT 50
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: PUSH
2294: LD_INT 75
2296: PUSH
2297: LD_INT 50
2299: PUSH
2300: LD_INT 25
2302: PUSH
2303: LD_INT 75
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: PUSH
2312: LD_INT 100
2314: PUSH
2315: LD_INT 75
2317: PUSH
2318: LD_INT 50
2320: PUSH
2321: LD_INT 100
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: PUSH
2336: LD_EXP 14
2340: PUSH
2341: LD_INT 1
2343: PLUS
2344: ARRAY
2345: ST_TO_ADDR
// prepare_arrivals ;
2346: CALL 11039 0 0
// if def_people_loyality then
2350: LD_EXP 12
2354: IFFALSE 3219
// begin second_side = [ [ [ 0 , 0 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 6 , 7 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 4 , 2 ] , [ 4 , 2 ] ] , [ [ 5 , 4 ] , [ 0 , 0 ] , [ 5 , 6 ] , [ 5 , 1 ] , [ 7 , 3 ] , [ 5 , 3 ] , [ 5 , 4 ] , [ 5 , 4 ] ] , [ [ 6 , 4 ] , [ 6 , 5 ] , [ 0 , 0 ] , [ 6 , 1 ] , [ 6 , 2 ] , [ 5 , 1 ] , [ 6 , 4 ] , [ 6 , 2 ] ] , [ [ 7 , 6 ] , [ 1 , 5 ] , [ 1 , 6 ] , [ 0 , 0 ] , [ 1 , 2 ] , [ 1 , 3 ] , [ 1 , 2 ] , [ 1 , 2 ] ] , [ [ 2 , 4 ] , [ 3 , 7 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 0 , 0 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 2 , 4 ] ] , [ [ 3 , 4 ] , [ 3 , 5 ] , [ 1 , 5 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 0 , 0 ] , [ 3 , 4 ] , [ 3 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 0 , 0 ] , [ 4 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 0 , 0 ] ] ] [ positions [ 1 ] ] [ positions [ 2 ] ] ;
2356: LD_ADDR_EXP 46
2360: PUSH
2361: LD_INT 0
2363: PUSH
2364: LD_INT 0
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: PUSH
2371: LD_INT 4
2373: PUSH
2374: LD_INT 5
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PUSH
2381: LD_INT 4
2383: PUSH
2384: LD_INT 6
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: PUSH
2391: LD_INT 6
2393: PUSH
2394: LD_INT 7
2396: PUSH
2397: EMPTY
2398: LIST
2399: LIST
2400: PUSH
2401: LD_INT 4
2403: PUSH
2404: LD_INT 2
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: PUSH
2411: LD_INT 4
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PUSH
2421: LD_INT 4
2423: PUSH
2424: LD_INT 2
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: PUSH
2431: LD_INT 4
2433: PUSH
2434: LD_INT 2
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: LIST
2445: LIST
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 5
2453: PUSH
2454: LD_INT 4
2456: PUSH
2457: EMPTY
2458: LIST
2459: LIST
2460: PUSH
2461: LD_INT 0
2463: PUSH
2464: LD_INT 0
2466: PUSH
2467: EMPTY
2468: LIST
2469: LIST
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 6
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: PUSH
2481: LD_INT 5
2483: PUSH
2484: LD_INT 1
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: PUSH
2491: LD_INT 7
2493: PUSH
2494: LD_INT 3
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PUSH
2501: LD_INT 5
2503: PUSH
2504: LD_INT 3
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: PUSH
2511: LD_INT 5
2513: PUSH
2514: LD_INT 4
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: PUSH
2521: LD_INT 5
2523: PUSH
2524: LD_INT 4
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: LIST
2540: PUSH
2541: LD_INT 6
2543: PUSH
2544: LD_INT 4
2546: PUSH
2547: EMPTY
2548: LIST
2549: LIST
2550: PUSH
2551: LD_INT 6
2553: PUSH
2554: LD_INT 5
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: PUSH
2561: LD_INT 0
2563: PUSH
2564: LD_INT 0
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: PUSH
2571: LD_INT 6
2573: PUSH
2574: LD_INT 1
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: PUSH
2581: LD_INT 6
2583: PUSH
2584: LD_INT 2
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 5
2593: PUSH
2594: LD_INT 1
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PUSH
2601: LD_INT 6
2603: PUSH
2604: LD_INT 4
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: PUSH
2611: LD_INT 6
2613: PUSH
2614: LD_INT 2
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: PUSH
2631: LD_INT 7
2633: PUSH
2634: LD_INT 6
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: LD_INT 5
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 6
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: PUSH
2661: LD_INT 0
2663: PUSH
2664: LD_INT 0
2666: PUSH
2667: EMPTY
2668: LIST
2669: LIST
2670: PUSH
2671: LD_INT 1
2673: PUSH
2674: LD_INT 2
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 1
2683: PUSH
2684: LD_INT 3
2686: PUSH
2687: EMPTY
2688: LIST
2689: LIST
2690: PUSH
2691: LD_INT 1
2693: PUSH
2694: LD_INT 2
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: PUSH
2701: LD_INT 1
2703: PUSH
2704: LD_INT 2
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: PUSH
2721: LD_INT 2
2723: PUSH
2724: LD_INT 4
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: PUSH
2731: LD_INT 3
2733: PUSH
2734: LD_INT 7
2736: PUSH
2737: EMPTY
2738: LIST
2739: LIST
2740: PUSH
2741: LD_INT 2
2743: PUSH
2744: LD_INT 6
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PUSH
2751: LD_INT 2
2753: PUSH
2754: LD_INT 1
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 0
2763: PUSH
2764: LD_INT 0
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 2
2773: PUSH
2774: LD_INT 3
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: LD_INT 4
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: LD_INT 2
2793: PUSH
2794: LD_INT 4
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: PUSH
2811: LD_INT 3
2813: PUSH
2814: LD_INT 4
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: PUSH
2821: LD_INT 3
2823: PUSH
2824: LD_INT 5
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: PUSH
2831: LD_INT 1
2833: PUSH
2834: LD_INT 5
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 3
2843: PUSH
2844: LD_INT 1
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: PUSH
2851: LD_INT 3
2853: PUSH
2854: LD_INT 2
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: LD_INT 0
2863: PUSH
2864: LD_INT 0
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: LD_INT 3
2873: PUSH
2874: LD_INT 4
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 3
2883: PUSH
2884: LD_INT 2
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: LIST
2895: LIST
2896: LIST
2897: LIST
2898: LIST
2899: LIST
2900: PUSH
2901: LD_INT 2
2903: PUSH
2904: LD_INT 4
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: PUSH
2911: LD_INT 4
2913: PUSH
2914: LD_INT 5
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PUSH
2921: LD_INT 4
2923: PUSH
2924: LD_INT 6
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PUSH
2931: LD_INT 2
2933: PUSH
2934: LD_INT 1
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PUSH
2941: LD_INT 4
2943: PUSH
2944: LD_INT 2
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: LD_INT 4
2953: PUSH
2954: LD_INT 3
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 0
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: PUSH
2971: LD_INT 4
2973: PUSH
2974: LD_INT 2
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: LIST
2990: PUSH
2991: LD_INT 2
2993: PUSH
2994: LD_INT 4
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: PUSH
3001: LD_INT 4
3003: PUSH
3004: LD_INT 5
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: PUSH
3011: LD_INT 2
3013: PUSH
3014: LD_INT 6
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 2
3023: PUSH
3024: LD_INT 1
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: LD_INT 4
3033: PUSH
3034: LD_INT 2
3036: PUSH
3037: EMPTY
3038: LIST
3039: LIST
3040: PUSH
3041: LD_INT 2
3043: PUSH
3044: LD_INT 3
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PUSH
3051: LD_INT 2
3053: PUSH
3054: LD_INT 4
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: PUSH
3061: LD_INT 0
3063: PUSH
3064: LD_INT 0
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: LIST
3089: LIST
3090: PUSH
3091: LD_EXP 39
3095: PUSH
3096: LD_INT 1
3098: ARRAY
3099: ARRAY
3100: PUSH
3101: LD_EXP 39
3105: PUSH
3106: LD_INT 2
3108: ARRAY
3109: ARRAY
3110: ST_TO_ADDR
// SetAttitude ( second_side [ 1 ] , positions [ 1 ] , att_friend , true ) ;
3111: LD_EXP 46
3115: PUSH
3116: LD_INT 1
3118: ARRAY
3119: PPUSH
3120: LD_EXP 39
3124: PUSH
3125: LD_INT 1
3127: ARRAY
3128: PPUSH
3129: LD_INT 1
3131: PPUSH
3132: LD_INT 1
3134: PPUSH
3135: CALL_OW 80
// SetAttitude ( second_side [ 2 ] , positions [ 2 ] , att_friend , true ) ;
3139: LD_EXP 46
3143: PUSH
3144: LD_INT 2
3146: ARRAY
3147: PPUSH
3148: LD_EXP 39
3152: PUSH
3153: LD_INT 2
3155: ARRAY
3156: PPUSH
3157: LD_INT 1
3159: PPUSH
3160: LD_INT 1
3162: PPUSH
3163: CALL_OW 80
// if fog_info then
3167: LD_EXP 35
3171: IFFALSE 3217
// begin ChangeSideFog ( second_side [ 1 ] , positions [ 1 ] ) ;
3173: LD_EXP 46
3177: PUSH
3178: LD_INT 1
3180: ARRAY
3181: PPUSH
3182: LD_EXP 39
3186: PUSH
3187: LD_INT 1
3189: ARRAY
3190: PPUSH
3191: CALL_OW 343
// ChangeSideFog ( second_side [ 2 ] , positions [ 2 ] ) ;
3195: LD_EXP 46
3199: PUSH
3200: LD_INT 2
3202: ARRAY
3203: PPUSH
3204: LD_EXP 39
3208: PUSH
3209: LD_INT 2
3211: ARRAY
3212: PPUSH
3213: CALL_OW 343
// end ; end else
3217: GO 3499
// begin pom_tab = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] diff ( positions union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 1 ] ] union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 2 ] ] ) ;
3219: LD_ADDR_VAR 0 11
3223: PUSH
3224: LD_INT 1
3226: PUSH
3227: LD_INT 2
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 4
3235: PUSH
3236: LD_INT 5
3238: PUSH
3239: LD_INT 6
3241: PUSH
3242: LD_INT 7
3244: PUSH
3245: LD_INT 8
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: PUSH
3258: LD_EXP 39
3262: PUSH
3263: LD_INT 4
3265: PUSH
3266: LD_INT 5
3268: PUSH
3269: LD_INT 7
3271: PUSH
3272: LD_INT 8
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: LIST
3279: PUSH
3280: LD_INT 6
3282: PUSH
3283: LD_INT 1
3285: PUSH
3286: LD_INT 7
3288: PUSH
3289: LD_INT 8
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: LIST
3296: PUSH
3297: LD_INT 2
3299: PUSH
3300: LD_INT 3
3302: PUSH
3303: LD_INT 2
3305: PUSH
3306: LD_INT 4
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: LD_INT 2
3315: PUSH
3316: LD_INT 4
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: PUSH
3333: LD_EXP 39
3337: PUSH
3338: LD_INT 1
3340: ARRAY
3341: ARRAY
3342: UNION
3343: PUSH
3344: LD_INT 4
3346: PUSH
3347: LD_INT 5
3349: PUSH
3350: LD_INT 7
3352: PUSH
3353: LD_INT 8
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: LIST
3360: PUSH
3361: LD_INT 6
3363: PUSH
3364: LD_INT 1
3366: PUSH
3367: LD_INT 7
3369: PUSH
3370: LD_INT 8
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: LIST
3377: PUSH
3378: LD_INT 2
3380: PUSH
3381: LD_INT 3
3383: PUSH
3384: LD_INT 2
3386: PUSH
3387: LD_INT 4
3389: PUSH
3390: EMPTY
3391: LIST
3392: LIST
3393: PUSH
3394: LD_INT 2
3396: PUSH
3397: LD_INT 4
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: PUSH
3414: LD_EXP 39
3418: PUSH
3419: LD_INT 2
3421: ARRAY
3422: ARRAY
3423: UNION
3424: DIFF
3425: ST_TO_ADDR
// second_side = pom_tab [ Rand ( 1 , pom_tab ) ] ;
3426: LD_ADDR_EXP 46
3430: PUSH
3431: LD_VAR 0 11
3435: PUSH
3436: LD_INT 1
3438: PPUSH
3439: LD_VAR 0 11
3443: PPUSH
3444: CALL_OW 12
3448: ARRAY
3449: ST_TO_ADDR
// third_nation = [ 1 , 2 , 3 ] diff side_nations ;
3450: LD_ADDR_EXP 47
3454: PUSH
3455: LD_INT 1
3457: PUSH
3458: LD_INT 2
3460: PUSH
3461: LD_INT 3
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: LIST
3468: PUSH
3469: LD_EXP 44
3473: DIFF
3474: ST_TO_ADDR
// third_nation = third_nation [ Rand ( 1 , third_nation ) ] ;
3475: LD_ADDR_EXP 47
3479: PUSH
3480: LD_EXP 47
3484: PUSH
3485: LD_INT 1
3487: PPUSH
3488: LD_EXP 47
3492: PPUSH
3493: CALL_OW 12
3497: ARRAY
3498: ST_TO_ADDR
// end ; end ;
3499: LD_VAR 0 1
3503: RET
// function prepare_map_coordinates ; var side , dep2 , br2 , dep1 , br1 , lab , fac , arm , pplant , un , i , k11 , k12 , k21 , k22 ; begin
3504: LD_INT 0
3506: PPUSH
3507: PPUSH
3508: PPUSH
3509: PPUSH
3510: PPUSH
3511: PPUSH
3512: PPUSH
3513: PPUSH
3514: PPUSH
3515: PPUSH
3516: PPUSH
3517: PPUSH
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
// start_def = [ ] ;
3522: LD_ADDR_EXP 48
3526: PUSH
3527: EMPTY
3528: ST_TO_ADDR
// depots_def = [ ] ;
3529: LD_ADDR_EXP 49
3533: PUSH
3534: EMPTY
3535: ST_TO_ADDR
// breastworks_def = [ ] ;
3536: LD_ADDR_EXP 50
3540: PUSH
3541: EMPTY
3542: ST_TO_ADDR
// labs_def = [ ] ;
3543: LD_ADDR_EXP 51
3547: PUSH
3548: EMPTY
3549: ST_TO_ADDR
// factories_def = [ ] ;
3550: LD_ADDR_EXP 52
3554: PUSH
3555: EMPTY
3556: ST_TO_ADDR
// armories_def = [ ] ;
3557: LD_ADDR_EXP 53
3561: PUSH
3562: EMPTY
3563: ST_TO_ADDR
// pplants_def = [ ] ;
3564: LD_ADDR_EXP 54
3568: PUSH
3569: EMPTY
3570: ST_TO_ADDR
// deposits_def = [ ] ;
3571: LD_ADDR_EXP 55
3575: PUSH
3576: EMPTY
3577: ST_TO_ADDR
// k11 := Rand ( 1 , 2 ) ;
3578: LD_ADDR_VAR 0 13
3582: PUSH
3583: LD_INT 1
3585: PPUSH
3586: LD_INT 2
3588: PPUSH
3589: CALL_OW 12
3593: ST_TO_ADDR
// k12 := Rand ( 1 , 2 ) ;
3594: LD_ADDR_VAR 0 14
3598: PUSH
3599: LD_INT 1
3601: PPUSH
3602: LD_INT 2
3604: PPUSH
3605: CALL_OW 12
3609: ST_TO_ADDR
// k21 := Rand ( 1 , 2 ) ;
3610: LD_ADDR_VAR 0 15
3614: PUSH
3615: LD_INT 1
3617: PPUSH
3618: LD_INT 2
3620: PPUSH
3621: CALL_OW 12
3625: ST_TO_ADDR
// k22 := Rand ( 1 , 2 ) ;
3626: LD_ADDR_VAR 0 16
3630: PUSH
3631: LD_INT 1
3633: PPUSH
3634: LD_INT 2
3636: PPUSH
3637: CALL_OW 12
3641: ST_TO_ADDR
// deposits_def := [ [ [ [ Res111 , Res112 ] [ k11 ] , [ Res111 , Res112 ] [ 3 - k11 ] ] , [ [ Res121 , Res122 ] [ k12 ] , [ Res121 , Res122 ] [ 3 - k12 ] ] ] , [ [ [ Res211 , Res212 ] [ k21 ] , [ Res211 , Res212 ] [ 3 - k21 ] ] , [ [ Res221 , Res222 ] [ k22 ] , [ Res221 , Res222 ] [ 3 - k22 ] ] ] ] ;
3642: LD_ADDR_EXP 55
3646: PUSH
3647: LD_INT 4
3649: PUSH
3650: LD_INT 5
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: PUSH
3657: LD_VAR 0 13
3661: ARRAY
3662: PUSH
3663: LD_INT 4
3665: PUSH
3666: LD_INT 5
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: PUSH
3673: LD_INT 3
3675: PUSH
3676: LD_VAR 0 13
3680: MINUS
3681: ARRAY
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: LD_INT 6
3689: PUSH
3690: LD_INT 7
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: PUSH
3697: LD_VAR 0 14
3701: ARRAY
3702: PUSH
3703: LD_INT 6
3705: PUSH
3706: LD_INT 7
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: PUSH
3713: LD_INT 3
3715: PUSH
3716: LD_VAR 0 14
3720: MINUS
3721: ARRAY
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 8
3733: PUSH
3734: LD_INT 9
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: PUSH
3741: LD_VAR 0 15
3745: ARRAY
3746: PUSH
3747: LD_INT 8
3749: PUSH
3750: LD_INT 9
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: PUSH
3757: LD_INT 3
3759: PUSH
3760: LD_VAR 0 15
3764: MINUS
3765: ARRAY
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: LD_INT 10
3773: PUSH
3774: LD_INT 11
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_VAR 0 16
3785: ARRAY
3786: PUSH
3787: LD_INT 10
3789: PUSH
3790: LD_INT 11
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: LD_INT 3
3799: PUSH
3800: LD_VAR 0 16
3804: MINUS
3805: ARRAY
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: ST_TO_ADDR
// for side := 1 to 2 do
3819: LD_ADDR_VAR 0 2
3823: PUSH
3824: DOUBLE
3825: LD_INT 1
3827: DEC
3828: ST_TO_ADDR
3829: LD_INT 2
3831: PUSH
3832: FOR_TO
3833: IFFALSE 4965
// begin dep1 := side * 10 - 9 ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: LD_VAR 0 2
3844: PUSH
3845: LD_INT 10
3847: MUL
3848: PUSH
3849: LD_INT 9
3851: MINUS
3852: ST_TO_ADDR
// dep2 := 20 + side * 4 - 3 ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_INT 20
3860: PUSH
3861: LD_VAR 0 2
3865: PUSH
3866: LD_INT 4
3868: MUL
3869: PLUS
3870: PUSH
3871: LD_INT 3
3873: MINUS
3874: ST_TO_ADDR
// br1 := [ side * 10 - 8 , side * 10 - 7 , side * 10 - 6 , side * 10 - 5 ] ;
3875: LD_ADDR_VAR 0 6
3879: PUSH
3880: LD_VAR 0 2
3884: PUSH
3885: LD_INT 10
3887: MUL
3888: PUSH
3889: LD_INT 8
3891: MINUS
3892: PUSH
3893: LD_VAR 0 2
3897: PUSH
3898: LD_INT 10
3900: MUL
3901: PUSH
3902: LD_INT 7
3904: MINUS
3905: PUSH
3906: LD_VAR 0 2
3910: PUSH
3911: LD_INT 10
3913: MUL
3914: PUSH
3915: LD_INT 6
3917: MINUS
3918: PUSH
3919: LD_VAR 0 2
3923: PUSH
3924: LD_INT 10
3926: MUL
3927: PUSH
3928: LD_INT 5
3930: MINUS
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: ST_TO_ADDR
// br2 := [ 20 + side * 4 - 2 , 20 + side * 4 - 1 , 20 + side * 4 ] ;
3938: LD_ADDR_VAR 0 4
3942: PUSH
3943: LD_INT 20
3945: PUSH
3946: LD_VAR 0 2
3950: PUSH
3951: LD_INT 4
3953: MUL
3954: PLUS
3955: PUSH
3956: LD_INT 2
3958: MINUS
3959: PUSH
3960: LD_INT 20
3962: PUSH
3963: LD_VAR 0 2
3967: PUSH
3968: LD_INT 4
3970: MUL
3971: PLUS
3972: PUSH
3973: LD_INT 1
3975: MINUS
3976: PUSH
3977: LD_INT 20
3979: PUSH
3980: LD_VAR 0 2
3984: PUSH
3985: LD_INT 4
3987: MUL
3988: PLUS
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: LIST
3994: ST_TO_ADDR
// lab := side * 10 - 4 ;
3995: LD_ADDR_VAR 0 7
3999: PUSH
4000: LD_VAR 0 2
4004: PUSH
4005: LD_INT 10
4007: MUL
4008: PUSH
4009: LD_INT 4
4011: MINUS
4012: ST_TO_ADDR
// fac := side * 10 - 3 ;
4013: LD_ADDR_VAR 0 8
4017: PUSH
4018: LD_VAR 0 2
4022: PUSH
4023: LD_INT 10
4025: MUL
4026: PUSH
4027: LD_INT 3
4029: MINUS
4030: ST_TO_ADDR
// arm := side * 10 - 2 ;
4031: LD_ADDR_VAR 0 9
4035: PUSH
4036: LD_VAR 0 2
4040: PUSH
4041: LD_INT 10
4043: MUL
4044: PUSH
4045: LD_INT 2
4047: MINUS
4048: ST_TO_ADDR
// pplant := [ side * 10 - 1 , side * 10 ] ;
4049: LD_ADDR_VAR 0 10
4053: PUSH
4054: LD_VAR 0 2
4058: PUSH
4059: LD_INT 10
4061: MUL
4062: PUSH
4063: LD_INT 1
4065: MINUS
4066: PUSH
4067: LD_VAR 0 2
4071: PUSH
4072: LD_INT 10
4074: MUL
4075: PUSH
4076: EMPTY
4077: LIST
4078: LIST
4079: ST_TO_ADDR
// depots_def := depots_def ^ [ [ [ GetX ( dep1 ) , GetY ( dep1 ) , GetDir ( dep1 ) ] , [ GetX ( dep2 ) , GetY ( dep2 ) , GetDir ( dep2 ) ] ] ] ;
4080: LD_ADDR_EXP 49
4084: PUSH
4085: LD_EXP 49
4089: PUSH
4090: LD_VAR 0 5
4094: PPUSH
4095: CALL_OW 250
4099: PUSH
4100: LD_VAR 0 5
4104: PPUSH
4105: CALL_OW 251
4109: PUSH
4110: LD_VAR 0 5
4114: PPUSH
4115: CALL_OW 254
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: LIST
4124: PUSH
4125: LD_VAR 0 3
4129: PPUSH
4130: CALL_OW 250
4134: PUSH
4135: LD_VAR 0 3
4139: PPUSH
4140: CALL_OW 251
4144: PUSH
4145: LD_VAR 0 3
4149: PPUSH
4150: CALL_OW 254
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PUSH
4164: EMPTY
4165: LIST
4166: ADD
4167: ST_TO_ADDR
// start_def := start_def ^ [ [ [ ShiftX ( GetX ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) ] , [ ShiftX ( GetX ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) ] ] ] ;
4168: LD_ADDR_EXP 48
4172: PUSH
4173: LD_EXP 48
4177: PUSH
4178: LD_VAR 0 5
4182: PPUSH
4183: CALL_OW 250
4187: PPUSH
4188: LD_VAR 0 5
4192: PPUSH
4193: CALL_OW 254
4197: PUSH
4198: LD_INT 6
4200: MOD
4201: PPUSH
4202: LD_INT 6
4204: PPUSH
4205: CALL_OW 272
4209: PUSH
4210: LD_VAR 0 5
4214: PPUSH
4215: CALL_OW 251
4219: PPUSH
4220: LD_VAR 0 5
4224: PPUSH
4225: CALL_OW 254
4229: PUSH
4230: LD_INT 6
4232: MOD
4233: PPUSH
4234: LD_INT 6
4236: PPUSH
4237: CALL_OW 273
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PUSH
4246: LD_VAR 0 3
4250: PPUSH
4251: CALL_OW 250
4255: PPUSH
4256: LD_VAR 0 3
4260: PPUSH
4261: CALL_OW 254
4265: PUSH
4266: LD_INT 6
4268: MOD
4269: PPUSH
4270: LD_INT 6
4272: PPUSH
4273: CALL_OW 272
4277: PUSH
4278: LD_VAR 0 3
4282: PPUSH
4283: CALL_OW 251
4287: PPUSH
4288: LD_VAR 0 3
4292: PPUSH
4293: CALL_OW 254
4297: PUSH
4298: LD_INT 6
4300: MOD
4301: PPUSH
4302: LD_INT 6
4304: PPUSH
4305: CALL_OW 273
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PUSH
4318: EMPTY
4319: LIST
4320: ADD
4321: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ [ GetX ( br1 [ 1 ] ) , GetY ( br1 [ 1 ] ) , GetDir ( br1 [ 1 ] ) ] , [ GetX ( br1 [ 2 ] ) , GetY ( br1 [ 2 ] ) , GetDir ( br1 [ 2 ] ) ] , [ GetX ( br1 [ 3 ] ) , GetY ( br1 [ 3 ] ) , GetDir ( br1 [ 3 ] ) ] , [ GetX ( br1 [ 4 ] ) , GetY ( br1 [ 4 ] ) , GetDir ( br1 [ 4 ] ) ] ] , [ [ GetX ( br2 [ 1 ] ) , GetY ( br2 [ 1 ] ) , GetDir ( br2 [ 1 ] ) ] , [ GetX ( br2 [ 2 ] ) , GetY ( br2 [ 2 ] ) , GetDir ( br2 [ 2 ] ) ] , [ GetX ( br2 [ 3 ] ) , GetY ( br2 [ 3 ] ) , GetDir ( br2 [ 3 ] ) ] ] ] ] ;
4322: LD_ADDR_EXP 50
4326: PUSH
4327: LD_EXP 50
4331: PUSH
4332: LD_VAR 0 6
4336: PUSH
4337: LD_INT 1
4339: ARRAY
4340: PPUSH
4341: CALL_OW 250
4345: PUSH
4346: LD_VAR 0 6
4350: PUSH
4351: LD_INT 1
4353: ARRAY
4354: PPUSH
4355: CALL_OW 251
4359: PUSH
4360: LD_VAR 0 6
4364: PUSH
4365: LD_INT 1
4367: ARRAY
4368: PPUSH
4369: CALL_OW 254
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: LIST
4378: PUSH
4379: LD_VAR 0 6
4383: PUSH
4384: LD_INT 2
4386: ARRAY
4387: PPUSH
4388: CALL_OW 250
4392: PUSH
4393: LD_VAR 0 6
4397: PUSH
4398: LD_INT 2
4400: ARRAY
4401: PPUSH
4402: CALL_OW 251
4406: PUSH
4407: LD_VAR 0 6
4411: PUSH
4412: LD_INT 2
4414: ARRAY
4415: PPUSH
4416: CALL_OW 254
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: LIST
4425: PUSH
4426: LD_VAR 0 6
4430: PUSH
4431: LD_INT 3
4433: ARRAY
4434: PPUSH
4435: CALL_OW 250
4439: PUSH
4440: LD_VAR 0 6
4444: PUSH
4445: LD_INT 3
4447: ARRAY
4448: PPUSH
4449: CALL_OW 251
4453: PUSH
4454: LD_VAR 0 6
4458: PUSH
4459: LD_INT 3
4461: ARRAY
4462: PPUSH
4463: CALL_OW 254
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: LD_VAR 0 6
4477: PUSH
4478: LD_INT 4
4480: ARRAY
4481: PPUSH
4482: CALL_OW 250
4486: PUSH
4487: LD_VAR 0 6
4491: PUSH
4492: LD_INT 4
4494: ARRAY
4495: PPUSH
4496: CALL_OW 251
4500: PUSH
4501: LD_VAR 0 6
4505: PUSH
4506: LD_INT 4
4508: ARRAY
4509: PPUSH
4510: CALL_OW 254
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: PUSH
4526: LD_VAR 0 4
4530: PUSH
4531: LD_INT 1
4533: ARRAY
4534: PPUSH
4535: CALL_OW 250
4539: PUSH
4540: LD_VAR 0 4
4544: PUSH
4545: LD_INT 1
4547: ARRAY
4548: PPUSH
4549: CALL_OW 251
4553: PUSH
4554: LD_VAR 0 4
4558: PUSH
4559: LD_INT 1
4561: ARRAY
4562: PPUSH
4563: CALL_OW 254
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: LIST
4572: PUSH
4573: LD_VAR 0 4
4577: PUSH
4578: LD_INT 2
4580: ARRAY
4581: PPUSH
4582: CALL_OW 250
4586: PUSH
4587: LD_VAR 0 4
4591: PUSH
4592: LD_INT 2
4594: ARRAY
4595: PPUSH
4596: CALL_OW 251
4600: PUSH
4601: LD_VAR 0 4
4605: PUSH
4606: LD_INT 2
4608: ARRAY
4609: PPUSH
4610: CALL_OW 254
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: PUSH
4620: LD_VAR 0 4
4624: PUSH
4625: LD_INT 3
4627: ARRAY
4628: PPUSH
4629: CALL_OW 250
4633: PUSH
4634: LD_VAR 0 4
4638: PUSH
4639: LD_INT 3
4641: ARRAY
4642: PPUSH
4643: CALL_OW 251
4647: PUSH
4648: LD_VAR 0 4
4652: PUSH
4653: LD_INT 3
4655: ARRAY
4656: PPUSH
4657: CALL_OW 254
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: LIST
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: LIST
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PUSH
4676: EMPTY
4677: LIST
4678: ADD
4679: ST_TO_ADDR
// labs_def := labs_def ^ [ [ [ GetX ( lab ) , GetY ( lab ) , GetDir ( lab ) ] , [ ] ] ] ;
4680: LD_ADDR_EXP 51
4684: PUSH
4685: LD_EXP 51
4689: PUSH
4690: LD_VAR 0 7
4694: PPUSH
4695: CALL_OW 250
4699: PUSH
4700: LD_VAR 0 7
4704: PPUSH
4705: CALL_OW 251
4709: PUSH
4710: LD_VAR 0 7
4714: PPUSH
4715: CALL_OW 254
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: LIST
4724: PUSH
4725: EMPTY
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: EMPTY
4732: LIST
4733: ADD
4734: ST_TO_ADDR
// factories_def := factories_def ^ [ [ [ GetX ( fac ) , GetY ( fac ) , GetDir ( fac ) ] , [ ] ] ] ;
4735: LD_ADDR_EXP 52
4739: PUSH
4740: LD_EXP 52
4744: PUSH
4745: LD_VAR 0 8
4749: PPUSH
4750: CALL_OW 250
4754: PUSH
4755: LD_VAR 0 8
4759: PPUSH
4760: CALL_OW 251
4764: PUSH
4765: LD_VAR 0 8
4769: PPUSH
4770: CALL_OW 254
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: PUSH
4780: EMPTY
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: EMPTY
4787: LIST
4788: ADD
4789: ST_TO_ADDR
// armories_def := armories_def ^ [ [ [ GetX ( arm ) , GetY ( arm ) , GetDir ( arm ) ] , [ ] ] ] ;
4790: LD_ADDR_EXP 53
4794: PUSH
4795: LD_EXP 53
4799: PUSH
4800: LD_VAR 0 9
4804: PPUSH
4805: CALL_OW 250
4809: PUSH
4810: LD_VAR 0 9
4814: PPUSH
4815: CALL_OW 251
4819: PUSH
4820: LD_VAR 0 9
4824: PPUSH
4825: CALL_OW 254
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: LIST
4834: PUSH
4835: EMPTY
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PUSH
4841: EMPTY
4842: LIST
4843: ADD
4844: ST_TO_ADDR
// pplants_def := pplants_def ^ [ [ [ [ GetX ( pplant [ 1 ] ) , GetY ( pplant [ 1 ] ) , GetDir ( pplant [ 1 ] ) ] , [ GetX ( pplant [ 2 ] ) , GetY ( pplant [ 2 ] ) , GetDir ( pplant [ 2 ] ) ] ] , [ ] ] ] ;
4845: LD_ADDR_EXP 54
4849: PUSH
4850: LD_EXP 54
4854: PUSH
4855: LD_VAR 0 10
4859: PUSH
4860: LD_INT 1
4862: ARRAY
4863: PPUSH
4864: CALL_OW 250
4868: PUSH
4869: LD_VAR 0 10
4873: PUSH
4874: LD_INT 1
4876: ARRAY
4877: PPUSH
4878: CALL_OW 251
4882: PUSH
4883: LD_VAR 0 10
4887: PUSH
4888: LD_INT 1
4890: ARRAY
4891: PPUSH
4892: CALL_OW 254
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: LIST
4901: PUSH
4902: LD_VAR 0 10
4906: PUSH
4907: LD_INT 2
4909: ARRAY
4910: PPUSH
4911: CALL_OW 250
4915: PUSH
4916: LD_VAR 0 10
4920: PUSH
4921: LD_INT 2
4923: ARRAY
4924: PPUSH
4925: CALL_OW 251
4929: PUSH
4930: LD_VAR 0 10
4934: PUSH
4935: LD_INT 2
4937: ARRAY
4938: PPUSH
4939: CALL_OW 254
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PUSH
4953: EMPTY
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: PUSH
4959: EMPTY
4960: LIST
4961: ADD
4962: ST_TO_ADDR
// end ;
4963: GO 3832
4965: POP
4966: POP
// for un := 1 to 28 do
4967: LD_ADDR_VAR 0 11
4971: PUSH
4972: DOUBLE
4973: LD_INT 1
4975: DEC
4976: ST_TO_ADDR
4977: LD_INT 28
4979: PUSH
4980: FOR_TO
4981: IFFALSE 4994
// DestroyUnit ( un ) ;
4983: LD_VAR 0 11
4987: PPUSH
4988: CALL_OW 65
4992: GO 4980
4994: POP
4995: POP
// end ;
4996: LD_VAR 0 1
5000: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
5001: LD_INT 0
5003: PPUSH
5004: PPUSH
5005: PPUSH
5006: PPUSH
// result := [ ] ;
5007: LD_ADDR_VAR 0 7
5011: PUSH
5012: EMPTY
5013: ST_TO_ADDR
// for i := 1 to count do
5014: LD_ADDR_VAR 0 8
5018: PUSH
5019: DOUBLE
5020: LD_INT 1
5022: DEC
5023: ST_TO_ADDR
5024: LD_VAR 0 1
5028: PUSH
5029: FOR_TO
5030: IFFALSE 5448
// begin uc_direction := Rand ( 0 , 5 ) ;
5032: LD_ADDR_OWVAR 24
5036: PUSH
5037: LD_INT 0
5039: PPUSH
5040: LD_INT 5
5042: PPUSH
5043: CALL_OW 12
5047: ST_TO_ADDR
// if commander then
5048: LD_LOC 1
5052: IFFALSE 5161
// begin hc_name := mp_sides_players_names [ uc_side ] ;
5054: LD_ADDR_OWVAR 26
5058: PUSH
5059: LD_OWVAR 19
5063: PUSH
5064: LD_OWVAR 20
5068: ARRAY
5069: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
5070: LD_INT 1
5072: PPUSH
5073: LD_INT 2
5075: PPUSH
5076: CALL_OW 12
5080: PPUSH
5081: LD_VAR 0 2
5085: PPUSH
5086: LD_EXP 29
5090: PUSH
5091: LD_INT 2
5093: PLUS
5094: PPUSH
5095: CALL_OW 380
// hc_importance := 105 ;
5099: LD_ADDR_OWVAR 32
5103: PUSH
5104: LD_INT 105
5106: ST_TO_ADDR
// commander := false ;
5107: LD_ADDR_LOC 1
5111: PUSH
5112: LD_INT 0
5114: ST_TO_ADDR
// if Multiplayer then
5115: LD_OWVAR 4
5119: IFFALSE 5159
// begin hc_gallery := MULTIAVATARS ;
5121: LD_ADDR_OWVAR 33
5125: PUSH
5126: LD_STRING MULTIAVATARS
5128: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
5129: LD_ADDR_OWVAR 34
5133: PUSH
5134: LD_OWVAR 20
5138: PPUSH
5139: CALL_OW 525
5143: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
5144: LD_ADDR_OWVAR 27
5148: PUSH
5149: LD_OWVAR 20
5153: PPUSH
5154: CALL_OW 526
5158: ST_TO_ADDR
// end ; end else
5159: GO 5224
// begin hc_name :=  ;
5161: LD_ADDR_OWVAR 26
5165: PUSH
5166: LD_STRING 
5168: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
5169: LD_INT 1
5171: PPUSH
5172: LD_INT 2
5174: PPUSH
5175: CALL_OW 12
5179: PPUSH
5180: LD_VAR 0 2
5184: PPUSH
5185: LD_EXP 29
5189: PPUSH
5190: CALL_OW 380
// hc_importance := 0 ;
5194: LD_ADDR_OWVAR 32
5198: PUSH
5199: LD_INT 0
5201: ST_TO_ADDR
// if Multiplayer then
5202: LD_OWVAR 4
5206: IFFALSE 5224
// begin hc_gallery :=  ;
5208: LD_ADDR_OWVAR 33
5212: PUSH
5213: LD_STRING 
5215: ST_TO_ADDR
// hc_face_number := 0 ;
5216: LD_ADDR_OWVAR 34
5220: PUSH
5221: LD_INT 0
5223: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
5224: LD_ADDR_VAR 0 10
5228: PUSH
5229: CALL_OW 44
5233: ST_TO_ADDR
// if global_defined then
5234: LD_LOC 3
5238: IFFALSE 5378
// begin if ( cl = class_soldier ) then
5240: LD_VAR 0 2
5244: PUSH
5245: LD_INT 1
5247: EQUAL
5248: IFFALSE 5268
// j := i + soldiers_created else
5250: LD_ADDR_VAR 0 9
5254: PUSH
5255: LD_VAR 0 8
5259: PUSH
5260: LD_LOC 4
5264: PLUS
5265: ST_TO_ADDR
5266: GO 5278
// j := i ;
5268: LD_ADDR_VAR 0 9
5272: PUSH
5273: LD_VAR 0 8
5277: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
5278: LD_LOC 2
5282: PUSH
5283: LD_VAR 0 2
5287: ARRAY
5288: PUSH
5289: LD_VAR 0 9
5293: ARRAY
5294: PPUSH
5295: LD_VAR 0 10
5299: PPUSH
5300: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
5304: LD_VAR 0 10
5308: PPUSH
5309: LD_INT 2
5311: PPUSH
5312: LD_LOC 2
5316: PUSH
5317: LD_VAR 0 2
5321: ARRAY
5322: PUSH
5323: LD_VAR 0 9
5327: ARRAY
5328: PPUSH
5329: LD_INT 2
5331: PPUSH
5332: CALL_OW 260
5336: PPUSH
5337: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
5341: LD_VAR 0 10
5345: PPUSH
5346: LD_INT 1
5348: PPUSH
5349: LD_LOC 2
5353: PUSH
5354: LD_VAR 0 2
5358: ARRAY
5359: PUSH
5360: LD_VAR 0 9
5364: ARRAY
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: CALL_OW 260
5373: PPUSH
5374: CALL_OW 239
// end ; if building then
5378: LD_VAR 0 6
5382: IFFALSE 5400
// PlaceHumanInUnit ( un , building ) else
5384: LD_VAR 0 10
5388: PPUSH
5389: LD_VAR 0 6
5393: PPUSH
5394: CALL_OW 52
5398: GO 5427
// PlaceUnitXYR ( un , x , y , r , false ) ;
5400: LD_VAR 0 10
5404: PPUSH
5405: LD_VAR 0 3
5409: PPUSH
5410: LD_VAR 0 4
5414: PPUSH
5415: LD_VAR 0 5
5419: PPUSH
5420: LD_INT 0
5422: PPUSH
5423: CALL_OW 50
// result := result ^ [ un ] ;
5427: LD_ADDR_VAR 0 7
5431: PUSH
5432: LD_VAR 0 7
5436: PUSH
5437: LD_VAR 0 10
5441: PUSH
5442: EMPTY
5443: LIST
5444: ADD
5445: ST_TO_ADDR
// end ;
5446: GO 5029
5448: POP
5449: POP
// if not global_defined then
5450: LD_LOC 3
5454: NOT
5455: IFFALSE 5533
// if ( global_units >= cl ) then
5457: LD_LOC 2
5461: PUSH
5462: LD_VAR 0 2
5466: GREATEREQUAL
5467: IFFALSE 5508
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
5469: LD_ADDR_LOC 2
5473: PUSH
5474: LD_LOC 2
5478: PPUSH
5479: LD_VAR 0 2
5483: PPUSH
5484: LD_LOC 2
5488: PUSH
5489: LD_VAR 0 2
5493: ARRAY
5494: PUSH
5495: LD_VAR 0 7
5499: ADD
5500: PPUSH
5501: CALL_OW 1
5505: ST_TO_ADDR
5506: GO 5533
// global_units := Replace ( global_units , cl , result ) ;
5508: LD_ADDR_LOC 2
5512: PUSH
5513: LD_LOC 2
5517: PPUSH
5518: LD_VAR 0 2
5522: PPUSH
5523: LD_VAR 0 7
5527: PPUSH
5528: CALL_OW 1
5532: ST_TO_ADDR
// if commander then
5533: LD_LOC 1
5537: IFFALSE 5584
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
5539: LD_ADDR_EXP 56
5543: PUSH
5544: LD_EXP 56
5548: PPUSH
5549: LD_OWVAR 20
5553: PPUSH
5554: LD_EXP 56
5558: PUSH
5559: LD_OWVAR 20
5563: ARRAY
5564: PUSH
5565: LD_VAR 0 10
5569: ADD
5570: PPUSH
5571: CALL_OW 1
5575: ST_TO_ADDR
// commander := false ;
5576: LD_ADDR_LOC 1
5580: PUSH
5581: LD_INT 0
5583: ST_TO_ADDR
// end ; end ;
5584: LD_VAR 0 7
5588: RET
// function prepare_side_base ( side , base ) ; var pos , x , y , dir , i , r , un , br , dep , lab , fact , arm , mode , coord , max ; begin
5589: LD_INT 0
5591: PPUSH
5592: PPUSH
5593: PPUSH
5594: PPUSH
5595: PPUSH
5596: PPUSH
5597: PPUSH
5598: PPUSH
5599: PPUSH
5600: PPUSH
5601: PPUSH
5602: PPUSH
5603: PPUSH
5604: PPUSH
5605: PPUSH
5606: PPUSH
// if side in [ 0 , 9 ] then
5607: LD_VAR 0 1
5611: PUSH
5612: LD_INT 0
5614: PUSH
5615: LD_INT 9
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: IN
5622: IFFALSE 5626
// exit ;
5624: GO 8295
// pos := Side_Positions [ side ] ;
5626: LD_ADDR_VAR 0 4
5630: PUSH
5631: LD_EXP 43
5635: PUSH
5636: LD_VAR 0 1
5640: ARRAY
5641: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
5642: LD_ADDR_OWVAR 21
5646: PUSH
5647: LD_EXP 44
5651: PUSH
5652: LD_VAR 0 1
5656: ARRAY
5657: ST_TO_ADDR
// uc_side := side ;
5658: LD_ADDR_OWVAR 20
5662: PUSH
5663: LD_VAR 0 1
5667: ST_TO_ADDR
// x := depots_def [ pos ] [ base ] [ 1 ] ;
5668: LD_ADDR_VAR 0 5
5672: PUSH
5673: LD_EXP 49
5677: PUSH
5678: LD_VAR 0 4
5682: ARRAY
5683: PUSH
5684: LD_VAR 0 2
5688: ARRAY
5689: PUSH
5690: LD_INT 1
5692: ARRAY
5693: ST_TO_ADDR
// y := depots_def [ pos ] [ base ] [ 2 ] ;
5694: LD_ADDR_VAR 0 6
5698: PUSH
5699: LD_EXP 49
5703: PUSH
5704: LD_VAR 0 4
5708: ARRAY
5709: PUSH
5710: LD_VAR 0 2
5714: ARRAY
5715: PUSH
5716: LD_INT 2
5718: ARRAY
5719: ST_TO_ADDR
// dir := depots_def [ pos ] [ base ] [ 3 ] ;
5720: LD_ADDR_VAR 0 7
5724: PUSH
5725: LD_EXP 49
5729: PUSH
5730: LD_VAR 0 4
5734: ARRAY
5735: PUSH
5736: LD_VAR 0 2
5740: ARRAY
5741: PUSH
5742: LD_INT 3
5744: ARRAY
5745: ST_TO_ADDR
// if is_depot [ base ] then
5746: LD_EXP 20
5750: PUSH
5751: LD_VAR 0 2
5755: ARRAY
5756: IFFALSE 5933
// begin if is_depot [ base ] = 1 then
5758: LD_EXP 20
5762: PUSH
5763: LD_VAR 0 2
5767: ARRAY
5768: PUSH
5769: LD_INT 1
5771: EQUAL
5772: IFFALSE 5784
// bc_type = b_depot else
5774: LD_ADDR_OWVAR 42
5778: PUSH
5779: LD_INT 0
5781: ST_TO_ADDR
5782: GO 5792
// bc_type = b_warehouse ;
5784: LD_ADDR_OWVAR 42
5788: PUSH
5789: LD_INT 1
5791: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
5792: LD_ADDR_VAR 0 12
5796: PUSH
5797: LD_VAR 0 5
5801: PPUSH
5802: LD_VAR 0 6
5806: PPUSH
5807: LD_VAR 0 7
5811: PPUSH
5812: CALL_OW 47
5816: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
5817: LD_VAR 0 12
5821: PPUSH
5822: LD_STRING @
5824: PUSH
5825: LD_VAR 0 1
5829: STR
5830: PPUSH
5831: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ base ] [ mat_cans ] ) ;
5835: LD_VAR 0 12
5839: PPUSH
5840: CALL_OW 274
5844: PPUSH
5845: LD_INT 1
5847: PPUSH
5848: LD_EXP 31
5852: PUSH
5853: LD_VAR 0 2
5857: ARRAY
5858: PUSH
5859: LD_INT 1
5861: ARRAY
5862: PPUSH
5863: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ base ] [ mat_oil ] ) ;
5867: LD_VAR 0 12
5871: PPUSH
5872: CALL_OW 274
5876: PPUSH
5877: LD_INT 2
5879: PPUSH
5880: LD_EXP 31
5884: PUSH
5885: LD_VAR 0 2
5889: ARRAY
5890: PUSH
5891: LD_INT 2
5893: ARRAY
5894: PPUSH
5895: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ base ] [ mat_siberit ] ) ;
5899: LD_VAR 0 12
5903: PPUSH
5904: CALL_OW 274
5908: PPUSH
5909: LD_INT 3
5911: PPUSH
5912: LD_EXP 31
5916: PUSH
5917: LD_VAR 0 2
5921: ARRAY
5922: PUSH
5923: LD_INT 3
5925: ARRAY
5926: PPUSH
5927: CALL_OW 277
// end else
5931: GO 6083
// begin for i := 1 to 3 do
5933: LD_ADDR_VAR 0 8
5937: PUSH
5938: DOUBLE
5939: LD_INT 1
5941: DEC
5942: ST_TO_ADDR
5943: LD_INT 3
5945: PUSH
5946: FOR_TO
5947: IFFALSE 6081
// begin r := starting_resources [ base ] [ i ] ;
5949: LD_ADDR_VAR 0 9
5953: PUSH
5954: LD_EXP 31
5958: PUSH
5959: LD_VAR 0 2
5963: ARRAY
5964: PUSH
5965: LD_VAR 0 8
5969: ARRAY
5970: ST_TO_ADDR
// while r >= 10 do
5971: LD_VAR 0 9
5975: PUSH
5976: LD_INT 10
5978: GREATEREQUAL
5979: IFFALSE 6079
// if r > 50 then
5981: LD_VAR 0 9
5985: PUSH
5986: LD_INT 50
5988: GREATER
5989: IFFALSE 6035
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
5991: LD_VAR 0 8
5995: PPUSH
5996: LD_INT 5
5998: PPUSH
5999: LD_VAR 0 5
6003: PPUSH
6004: LD_VAR 0 6
6008: PPUSH
6009: LD_INT 4
6011: PPUSH
6012: LD_INT 0
6014: PPUSH
6015: CALL_OW 60
// r := r - 50 ;
6019: LD_ADDR_VAR 0 9
6023: PUSH
6024: LD_VAR 0 9
6028: PUSH
6029: LD_INT 50
6031: MINUS
6032: ST_TO_ADDR
// end else
6033: GO 6077
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
6035: LD_VAR 0 8
6039: PPUSH
6040: LD_VAR 0 9
6044: PUSH
6045: LD_INT 10
6047: DIV
6048: PPUSH
6049: LD_VAR 0 5
6053: PPUSH
6054: LD_VAR 0 6
6058: PPUSH
6059: LD_INT 4
6061: PPUSH
6062: LD_INT 0
6064: PPUSH
6065: CALL_OW 60
// r := 0 ;
6069: LD_ADDR_VAR 0 9
6073: PUSH
6074: LD_INT 0
6076: ST_TO_ADDR
// end ;
6077: GO 5971
// end ;
6079: GO 5946
6081: POP
6082: POP
// end ; if is_lab [ base ] then
6083: LD_EXP 24
6087: PUSH
6088: LD_VAR 0 2
6092: ARRAY
6093: IFFALSE 6234
// begin if is_lab [ base ] = 1 then
6095: LD_EXP 24
6099: PUSH
6100: LD_VAR 0 2
6104: ARRAY
6105: PUSH
6106: LD_INT 1
6108: EQUAL
6109: IFFALSE 6137
// begin bc_type = b_lab ;
6111: LD_ADDR_OWVAR 42
6115: PUSH
6116: LD_INT 6
6118: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
6119: LD_ADDR_OWVAR 44
6123: PUSH
6124: LD_INT 9
6126: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
6127: LD_ADDR_OWVAR 45
6131: PUSH
6132: LD_INT 9
6134: ST_TO_ADDR
// end else
6135: GO 6161
// begin bc_type = b_lab_full ;
6137: LD_ADDR_OWVAR 42
6141: PUSH
6142: LD_INT 8
6144: ST_TO_ADDR
// bc_kind1 = b_lab_siberium ;
6145: LD_ADDR_OWVAR 44
6149: PUSH
6150: LD_INT 11
6152: ST_TO_ADDR
// bc_kind2 = b_lab_weapon ;
6153: LD_ADDR_OWVAR 45
6157: PUSH
6158: LD_INT 10
6160: ST_TO_ADDR
// end ; lab := CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ base ] [ 1 ] , labs_def [ pos ] [ base ] [ 2 ] , labs_def [ pos ] [ base ] [ 3 ] ) ;
6161: LD_ADDR_VAR 0 13
6165: PUSH
6166: LD_EXP 51
6170: PUSH
6171: LD_VAR 0 4
6175: ARRAY
6176: PUSH
6177: LD_VAR 0 2
6181: ARRAY
6182: PUSH
6183: LD_INT 1
6185: ARRAY
6186: PPUSH
6187: LD_EXP 51
6191: PUSH
6192: LD_VAR 0 4
6196: ARRAY
6197: PUSH
6198: LD_VAR 0 2
6202: ARRAY
6203: PUSH
6204: LD_INT 2
6206: ARRAY
6207: PPUSH
6208: LD_EXP 51
6212: PUSH
6213: LD_VAR 0 4
6217: ARRAY
6218: PUSH
6219: LD_VAR 0 2
6223: ARRAY
6224: PUSH
6225: LD_INT 3
6227: ARRAY
6228: PPUSH
6229: CALL_OW 47
6233: ST_TO_ADDR
// end ; if is_fact [ base ] then
6234: LD_EXP 25
6238: PUSH
6239: LD_VAR 0 2
6243: ARRAY
6244: IFFALSE 6353
// begin if is_fact [ base ] = 1 then
6246: LD_EXP 25
6250: PUSH
6251: LD_VAR 0 2
6255: ARRAY
6256: PUSH
6257: LD_INT 1
6259: EQUAL
6260: IFFALSE 6272
// bc_type = b_workshop else
6262: LD_ADDR_OWVAR 42
6266: PUSH
6267: LD_INT 2
6269: ST_TO_ADDR
6270: GO 6280
// bc_type = b_factory ;
6272: LD_ADDR_OWVAR 42
6276: PUSH
6277: LD_INT 3
6279: ST_TO_ADDR
// fact := CreateAndPlaceBuildingXYD ( factories_def [ pos ] [ base ] [ 1 ] , factories_def [ pos ] [ base ] [ 2 ] , factories_def [ pos ] [ base ] [ 3 ] ) ;
6280: LD_ADDR_VAR 0 14
6284: PUSH
6285: LD_EXP 52
6289: PUSH
6290: LD_VAR 0 4
6294: ARRAY
6295: PUSH
6296: LD_VAR 0 2
6300: ARRAY
6301: PUSH
6302: LD_INT 1
6304: ARRAY
6305: PPUSH
6306: LD_EXP 52
6310: PUSH
6311: LD_VAR 0 4
6315: ARRAY
6316: PUSH
6317: LD_VAR 0 2
6321: ARRAY
6322: PUSH
6323: LD_INT 2
6325: ARRAY
6326: PPUSH
6327: LD_EXP 52
6331: PUSH
6332: LD_VAR 0 4
6336: ARRAY
6337: PUSH
6338: LD_VAR 0 2
6342: ARRAY
6343: PUSH
6344: LD_INT 3
6346: ARRAY
6347: PPUSH
6348: CALL_OW 47
6352: ST_TO_ADDR
// end ; if is_arm [ base ] then
6353: LD_EXP 26
6357: PUSH
6358: LD_VAR 0 2
6362: ARRAY
6363: IFFALSE 6472
// begin if is_arm [ base ] = 1 then
6365: LD_EXP 26
6369: PUSH
6370: LD_VAR 0 2
6374: ARRAY
6375: PUSH
6376: LD_INT 1
6378: EQUAL
6379: IFFALSE 6391
// bc_type = b_armoury else
6381: LD_ADDR_OWVAR 42
6385: PUSH
6386: LD_INT 4
6388: ST_TO_ADDR
6389: GO 6399
// bc_type = b_barracks ;
6391: LD_ADDR_OWVAR 42
6395: PUSH
6396: LD_INT 5
6398: ST_TO_ADDR
// arm := CreateAndPlaceBuildingXYD ( armories_def [ pos ] [ base ] [ 1 ] , armories_def [ pos ] [ base ] [ 2 ] , armories_def [ pos ] [ base ] [ 3 ] ) ;
6399: LD_ADDR_VAR 0 15
6403: PUSH
6404: LD_EXP 53
6408: PUSH
6409: LD_VAR 0 4
6413: ARRAY
6414: PUSH
6415: LD_VAR 0 2
6419: ARRAY
6420: PUSH
6421: LD_INT 1
6423: ARRAY
6424: PPUSH
6425: LD_EXP 53
6429: PUSH
6430: LD_VAR 0 4
6434: ARRAY
6435: PUSH
6436: LD_VAR 0 2
6440: ARRAY
6441: PUSH
6442: LD_INT 2
6444: ARRAY
6445: PPUSH
6446: LD_EXP 53
6450: PUSH
6451: LD_VAR 0 4
6455: ARRAY
6456: PUSH
6457: LD_VAR 0 2
6461: ARRAY
6462: PUSH
6463: LD_INT 3
6465: ARRAY
6466: PPUSH
6467: CALL_OW 47
6471: ST_TO_ADDR
// end ; for i := 1 to number_of_pplants [ base ] do
6472: LD_ADDR_VAR 0 8
6476: PUSH
6477: DOUBLE
6478: LD_INT 1
6480: DEC
6481: ST_TO_ADDR
6482: LD_EXP 22
6486: PUSH
6487: LD_VAR 0 2
6491: ARRAY
6492: PUSH
6493: FOR_TO
6494: IFFALSE 6591
// begin bc_type = b_oil_power ;
6496: LD_ADDR_OWVAR 42
6500: PUSH
6501: LD_INT 26
6503: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( pplants_def [ pos ] [ base ] [ i ] [ 1 ] , pplants_def [ pos ] [ base ] [ i ] [ 2 ] , pplants_def [ pos ] [ base ] [ i ] [ 3 ] ) ;
6504: LD_EXP 54
6508: PUSH
6509: LD_VAR 0 4
6513: ARRAY
6514: PUSH
6515: LD_VAR 0 2
6519: ARRAY
6520: PUSH
6521: LD_VAR 0 8
6525: ARRAY
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: PPUSH
6531: LD_EXP 54
6535: PUSH
6536: LD_VAR 0 4
6540: ARRAY
6541: PUSH
6542: LD_VAR 0 2
6546: ARRAY
6547: PUSH
6548: LD_VAR 0 8
6552: ARRAY
6553: PUSH
6554: LD_INT 2
6556: ARRAY
6557: PPUSH
6558: LD_EXP 54
6562: PUSH
6563: LD_VAR 0 4
6567: ARRAY
6568: PUSH
6569: LD_VAR 0 2
6573: ARRAY
6574: PUSH
6575: LD_VAR 0 8
6579: ARRAY
6580: PUSH
6581: LD_INT 3
6583: ARRAY
6584: PPUSH
6585: CALL_OW 47
// end ;
6589: GO 6493
6591: POP
6592: POP
// for i := 1 to deposits [ base ] [ 1 ] do
6593: LD_ADDR_VAR 0 8
6597: PUSH
6598: DOUBLE
6599: LD_INT 1
6601: DEC
6602: ST_TO_ADDR
6603: LD_EXP 28
6607: PUSH
6608: LD_VAR 0 2
6612: ARRAY
6613: PUSH
6614: LD_INT 1
6616: ARRAY
6617: PUSH
6618: FOR_TO
6619: IFFALSE 6756
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i ] , false ) ;
6621: LD_ADDR_VAR 0 17
6625: PUSH
6626: LD_EXP 55
6630: PUSH
6631: LD_VAR 0 4
6635: ARRAY
6636: PUSH
6637: LD_VAR 0 2
6641: ARRAY
6642: PUSH
6643: LD_VAR 0 8
6647: ARRAY
6648: PPUSH
6649: LD_INT 0
6651: PPUSH
6652: CALL_OW 16
6656: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_oil ) ;
6657: LD_VAR 0 17
6661: PUSH
6662: LD_INT 1
6664: ARRAY
6665: PPUSH
6666: LD_VAR 0 17
6670: PUSH
6671: LD_INT 2
6673: ARRAY
6674: PPUSH
6675: LD_INT 2
6677: PPUSH
6678: CALL_OW 62
// if are_mines [ base ] then
6682: LD_EXP 23
6686: PUSH
6687: LD_VAR 0 2
6691: ARRAY
6692: IFFALSE 6754
// begin bc_type = b_oil_mine ;
6694: LD_ADDR_OWVAR 42
6698: PUSH
6699: LD_INT 29
6701: ST_TO_ADDR
// SetResourceVisibility ( coord [ 1 ] , coord [ 2 ] , uc_side ) ;
6702: LD_VAR 0 17
6706: PUSH
6707: LD_INT 1
6709: ARRAY
6710: PPUSH
6711: LD_VAR 0 17
6715: PUSH
6716: LD_INT 2
6718: ARRAY
6719: PPUSH
6720: LD_OWVAR 20
6724: PPUSH
6725: CALL_OW 441
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
6729: LD_VAR 0 17
6733: PUSH
6734: LD_INT 1
6736: ARRAY
6737: PPUSH
6738: LD_VAR 0 17
6742: PUSH
6743: LD_INT 2
6745: ARRAY
6746: PPUSH
6747: LD_INT 0
6749: PPUSH
6750: CALL_OW 47
// end ; end ;
6754: GO 6618
6756: POP
6757: POP
// for i := 1 to deposits [ base ] [ 2 ] do
6758: LD_ADDR_VAR 0 8
6762: PUSH
6763: DOUBLE
6764: LD_INT 1
6766: DEC
6767: ST_TO_ADDR
6768: LD_EXP 28
6772: PUSH
6773: LD_VAR 0 2
6777: ARRAY
6778: PUSH
6779: LD_INT 2
6781: ARRAY
6782: PUSH
6783: FOR_TO
6784: IFFALSE 6943
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i + deposits [ base ] [ 1 ] ] , false ) ;
6786: LD_ADDR_VAR 0 17
6790: PUSH
6791: LD_EXP 55
6795: PUSH
6796: LD_VAR 0 4
6800: ARRAY
6801: PUSH
6802: LD_VAR 0 2
6806: ARRAY
6807: PUSH
6808: LD_VAR 0 8
6812: PUSH
6813: LD_EXP 28
6817: PUSH
6818: LD_VAR 0 2
6822: ARRAY
6823: PUSH
6824: LD_INT 1
6826: ARRAY
6827: PLUS
6828: ARRAY
6829: PPUSH
6830: LD_INT 0
6832: PPUSH
6833: CALL_OW 16
6837: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_siberit ) ;
6838: LD_VAR 0 17
6842: PUSH
6843: LD_INT 1
6845: ARRAY
6846: PPUSH
6847: LD_VAR 0 17
6851: PUSH
6852: LD_INT 2
6854: ARRAY
6855: PPUSH
6856: LD_INT 3
6858: PPUSH
6859: CALL_OW 62
// if are_mines [ base ] and def_siberite_detection then
6863: LD_EXP 23
6867: PUSH
6868: LD_VAR 0 2
6872: ARRAY
6873: PUSH
6874: LD_EXP 8
6878: AND
6879: IFFALSE 6941
// begin bc_type = b_siberite_mine ;
6881: LD_ADDR_OWVAR 42
6885: PUSH
6886: LD_INT 30
6888: ST_TO_ADDR
// SetResourceVisibility ( coord [ 1 ] , coord [ 2 ] , uc_side ) ;
6889: LD_VAR 0 17
6893: PUSH
6894: LD_INT 1
6896: ARRAY
6897: PPUSH
6898: LD_VAR 0 17
6902: PUSH
6903: LD_INT 2
6905: ARRAY
6906: PPUSH
6907: LD_OWVAR 20
6911: PPUSH
6912: CALL_OW 441
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
6916: LD_VAR 0 17
6920: PUSH
6921: LD_INT 1
6923: ARRAY
6924: PPUSH
6925: LD_VAR 0 17
6929: PUSH
6930: LD_INT 2
6932: ARRAY
6933: PPUSH
6934: LD_INT 0
6936: PPUSH
6937: CALL_OW 47
// end ; end ;
6941: GO 6783
6943: POP
6944: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
6945: LD_ADDR_VAR 0 5
6949: PUSH
6950: LD_EXP 48
6954: PUSH
6955: LD_VAR 0 4
6959: ARRAY
6960: PUSH
6961: LD_VAR 0 2
6965: ARRAY
6966: PUSH
6967: LD_INT 1
6969: ARRAY
6970: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
6971: LD_ADDR_VAR 0 6
6975: PUSH
6976: LD_EXP 48
6980: PUSH
6981: LD_VAR 0 4
6985: ARRAY
6986: PUSH
6987: LD_VAR 0 2
6991: ARRAY
6992: PUSH
6993: LD_INT 2
6995: ARRAY
6996: ST_TO_ADDR
// if base = 1 then
6997: LD_VAR 0 2
7001: PUSH
7002: LD_INT 1
7004: EQUAL
7005: IFFALSE 7113
// if def_morale_flags then
7007: LD_EXP 14
7011: IFFALSE 7113
// SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , def_bf_params [ 1 ] ] , [ bfo_defend_bonus_vehicle , def_bf_params [ 2 ] ] , [ bfo_defend_bonus_building , def_bf_params [ 3 ] ] , [ bfo_range , 17 ] , [ bfo_height , def_bf_params [ 4 ] ] ] ) ;
7013: LD_VAR 0 1
7017: PPUSH
7018: LD_VAR 0 5
7022: PPUSH
7023: LD_VAR 0 6
7027: PPUSH
7028: LD_INT 1
7030: PUSH
7031: LD_EXP 36
7035: PUSH
7036: LD_INT 1
7038: ARRAY
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 2
7046: PUSH
7047: LD_EXP 36
7051: PUSH
7052: LD_INT 2
7054: ARRAY
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 3
7062: PUSH
7063: LD_EXP 36
7067: PUSH
7068: LD_INT 3
7070: ARRAY
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 10
7078: PUSH
7079: LD_INT 17
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: LD_INT 20
7088: PUSH
7089: LD_EXP 36
7093: PUSH
7094: LD_INT 4
7096: ARRAY
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: PPUSH
7109: CALL_OW 418
// if number_of_people [ base ] then
7113: LD_EXP 21
7117: PUSH
7118: LD_VAR 0 2
7122: ARRAY
7123: IFFALSE 7332
// begin if No_Mechs then
7125: LD_EXP 66
7129: IFFALSE 7141
// Mode := 2 else
7131: LD_ADDR_VAR 0 16
7135: PUSH
7136: LD_INT 2
7138: ST_TO_ADDR
7139: GO 7149
// Mode := 1 ;
7141: LD_ADDR_VAR 0 16
7145: PUSH
7146: LD_INT 1
7148: ST_TO_ADDR
// neng := number_of_people [ base ] ;
7149: LD_ADDR_LOC 5
7153: PUSH
7154: LD_EXP 21
7158: PUSH
7159: LD_VAR 0 2
7163: ARRAY
7164: ST_TO_ADDR
// nmech := neng div [ 4 , 3 ] [ Mode ] ;
7165: LD_ADDR_LOC 7
7169: PUSH
7170: LD_LOC 5
7174: PUSH
7175: LD_INT 4
7177: PUSH
7178: LD_INT 3
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_VAR 0 16
7189: ARRAY
7190: DIV
7191: ST_TO_ADDR
// neng := neng - nmech ;
7192: LD_ADDR_LOC 5
7196: PUSH
7197: LD_LOC 5
7201: PUSH
7202: LD_LOC 7
7206: MINUS
7207: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
7208: LD_ADDR_LOC 6
7212: PUSH
7213: LD_LOC 5
7217: PUSH
7218: LD_INT 3
7220: PUSH
7221: LD_INT 2
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PUSH
7228: LD_VAR 0 16
7232: ARRAY
7233: DIV
7234: ST_TO_ADDR
// if ( nsci < 1 ) then
7235: LD_LOC 6
7239: PUSH
7240: LD_INT 1
7242: LESS
7243: IFFALSE 7253
// nsci := 1 ;
7245: LD_ADDR_LOC 6
7249: PUSH
7250: LD_INT 1
7252: ST_TO_ADDR
// neng := neng - nsci ;
7253: LD_ADDR_LOC 5
7257: PUSH
7258: LD_LOC 5
7262: PUSH
7263: LD_LOC 6
7267: MINUS
7268: ST_TO_ADDR
// nsol := [ neng div 2 , 0 ] [ Mode ] ;
7269: LD_ADDR_LOC 8
7273: PUSH
7274: LD_LOC 5
7278: PUSH
7279: LD_INT 2
7281: DIV
7282: PUSH
7283: LD_INT 0
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: LD_VAR 0 16
7294: ARRAY
7295: ST_TO_ADDR
// neng := neng - nsol ;
7296: LD_ADDR_LOC 5
7300: PUSH
7301: LD_LOC 5
7305: PUSH
7306: LD_LOC 8
7310: MINUS
7311: ST_TO_ADDR
// if ( neng < 1 ) then
7312: LD_LOC 5
7316: PUSH
7317: LD_INT 1
7319: LESS
7320: IFFALSE 7330
// neng := 1 ;
7322: LD_ADDR_LOC 5
7326: PUSH
7327: LD_INT 1
7329: ST_TO_ADDR
// end else
7330: GO 7364
// begin neng := 0 ;
7332: LD_ADDR_LOC 5
7336: PUSH
7337: LD_INT 0
7339: ST_TO_ADDR
// nsci := 0 ;
7340: LD_ADDR_LOC 6
7344: PUSH
7345: LD_INT 0
7347: ST_TO_ADDR
// nmech := 0 ;
7348: LD_ADDR_LOC 7
7352: PUSH
7353: LD_INT 0
7355: ST_TO_ADDR
// nsol := 0 ;
7356: LD_ADDR_LOC 8
7360: PUSH
7361: LD_INT 0
7363: ST_TO_ADDR
// end ; commander := true ;
7364: LD_ADDR_LOC 1
7368: PUSH
7369: LD_INT 1
7371: ST_TO_ADDR
// soldiers_created := 0 ;
7372: LD_ADDR_LOC 4
7376: PUSH
7377: LD_INT 0
7379: ST_TO_ADDR
// for i := 1 to are_breastworks [ base ] do
7380: LD_ADDR_VAR 0 8
7384: PUSH
7385: DOUBLE
7386: LD_INT 1
7388: DEC
7389: ST_TO_ADDR
7390: LD_EXP 27
7394: PUSH
7395: LD_VAR 0 2
7399: ARRAY
7400: PUSH
7401: FOR_TO
7402: IFFALSE 7688
// begin if are_breastworks [ base ] [ i ] = 1 then
7404: LD_EXP 27
7408: PUSH
7409: LD_VAR 0 2
7413: ARRAY
7414: PUSH
7415: LD_VAR 0 8
7419: ARRAY
7420: PUSH
7421: LD_INT 1
7423: EQUAL
7424: IFFALSE 7436
// bc_type := b_breastwork else
7426: LD_ADDR_OWVAR 42
7430: PUSH
7431: LD_INT 31
7433: ST_TO_ADDR
7434: GO 7444
// bc_type := b_bunker ;
7436: LD_ADDR_OWVAR 42
7440: PUSH
7441: LD_INT 32
7443: ST_TO_ADDR
// x := breastworks_def [ pos ] [ base ] [ i ] [ 1 ] ;
7444: LD_ADDR_VAR 0 5
7448: PUSH
7449: LD_EXP 50
7453: PUSH
7454: LD_VAR 0 4
7458: ARRAY
7459: PUSH
7460: LD_VAR 0 2
7464: ARRAY
7465: PUSH
7466: LD_VAR 0 8
7470: ARRAY
7471: PUSH
7472: LD_INT 1
7474: ARRAY
7475: ST_TO_ADDR
// y := breastworks_def [ pos ] [ base ] [ i ] [ 2 ] ;
7476: LD_ADDR_VAR 0 6
7480: PUSH
7481: LD_EXP 50
7485: PUSH
7486: LD_VAR 0 4
7490: ARRAY
7491: PUSH
7492: LD_VAR 0 2
7496: ARRAY
7497: PUSH
7498: LD_VAR 0 8
7502: ARRAY
7503: PUSH
7504: LD_INT 2
7506: ARRAY
7507: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ base ] [ i ] [ 3 ] ;
7508: LD_ADDR_VAR 0 7
7512: PUSH
7513: LD_EXP 50
7517: PUSH
7518: LD_VAR 0 4
7522: ARRAY
7523: PUSH
7524: LD_VAR 0 2
7528: ARRAY
7529: PUSH
7530: LD_VAR 0 8
7534: ARRAY
7535: PUSH
7536: LD_INT 3
7538: ARRAY
7539: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
7540: LD_ADDR_VAR 0 11
7544: PUSH
7545: LD_VAR 0 5
7549: PPUSH
7550: LD_VAR 0 6
7554: PPUSH
7555: LD_VAR 0 7
7559: PPUSH
7560: CALL_OW 47
7564: ST_TO_ADDR
// if bc_type = b_bunker then
7565: LD_OWVAR 42
7569: PUSH
7570: LD_INT 32
7572: EQUAL
7573: IFFALSE 7650
// case uc_nation of nation_american :
7575: LD_OWVAR 21
7579: PUSH
7580: LD_INT 1
7582: DOUBLE
7583: EQUAL
7584: IFTRUE 7588
7586: GO 7603
7588: POP
// PlaceWeaponTurret ( br , us_machine_gun ) ; nation_arabian :
7589: LD_VAR 0 11
7593: PPUSH
7594: LD_INT 2
7596: PPUSH
7597: CALL_OW 431
7601: GO 7650
7603: LD_INT 2
7605: DOUBLE
7606: EQUAL
7607: IFTRUE 7611
7609: GO 7626
7611: POP
// PlaceWeaponTurret ( br , ar_double_machine_gun ) ; nation_russian :
7612: LD_VAR 0 11
7616: PPUSH
7617: LD_INT 24
7619: PPUSH
7620: CALL_OW 431
7624: GO 7650
7626: LD_INT 3
7628: DOUBLE
7629: EQUAL
7630: IFTRUE 7634
7632: GO 7649
7634: POP
// PlaceWeaponTurret ( br , ru_heavy_machine_gun ) ; end ;
7635: LD_VAR 0 11
7639: PPUSH
7640: LD_INT 42
7642: PPUSH
7643: CALL_OW 431
7647: GO 7650
7649: POP
// if i <= nsol then
7650: LD_VAR 0 8
7654: PUSH
7655: LD_LOC 8
7659: LESSEQUAL
7660: IFFALSE 7686
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
7662: LD_INT 1
7664: PPUSH
7665: LD_INT 1
7667: PPUSH
7668: LD_INT 0
7670: PPUSH
7671: LD_INT 0
7673: PPUSH
7674: LD_INT 0
7676: PPUSH
7677: LD_VAR 0 11
7681: PPUSH
7682: CALL 5001 0 6
// end ;
7686: GO 7401
7688: POP
7689: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
7690: LD_ADDR_VAR 0 5
7694: PUSH
7695: LD_EXP 48
7699: PUSH
7700: LD_VAR 0 4
7704: ARRAY
7705: PUSH
7706: LD_VAR 0 2
7710: ARRAY
7711: PUSH
7712: LD_INT 1
7714: ARRAY
7715: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
7716: LD_ADDR_VAR 0 6
7720: PUSH
7721: LD_EXP 48
7725: PUSH
7726: LD_VAR 0 4
7730: ARRAY
7731: PUSH
7732: LD_VAR 0 2
7736: ARRAY
7737: PUSH
7738: LD_INT 2
7740: ARRAY
7741: ST_TO_ADDR
// if nsol > are_breastworks [ base ] then
7742: LD_LOC 8
7746: PUSH
7747: LD_EXP 27
7751: PUSH
7752: LD_VAR 0 2
7756: ARRAY
7757: GREATER
7758: IFFALSE 7846
// if arm then
7760: LD_VAR 0 15
7764: IFFALSE 7806
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , 0 , 0 , 0 , arm ) else
7766: LD_LOC 8
7770: PUSH
7771: LD_EXP 27
7775: PUSH
7776: LD_VAR 0 2
7780: ARRAY
7781: MINUS
7782: PPUSH
7783: LD_INT 1
7785: PPUSH
7786: LD_INT 0
7788: PPUSH
7789: LD_INT 0
7791: PPUSH
7792: LD_INT 0
7794: PPUSH
7795: LD_VAR 0 15
7799: PPUSH
7800: CALL 5001 0 6
7804: GO 7846
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , x , y , 5 , 0 ) ;
7806: LD_LOC 8
7810: PUSH
7811: LD_EXP 27
7815: PUSH
7816: LD_VAR 0 2
7820: ARRAY
7821: MINUS
7822: PPUSH
7823: LD_INT 1
7825: PPUSH
7826: LD_VAR 0 5
7830: PPUSH
7831: LD_VAR 0 6
7835: PPUSH
7836: LD_INT 5
7838: PPUSH
7839: LD_INT 0
7841: PPUSH
7842: CALL 5001 0 6
// if dep then
7846: LD_VAR 0 12
7850: IFFALSE 7880
// prepare_people ( neng , class_engineer , 0 , 0 , 0 , dep ) else
7852: LD_LOC 5
7856: PPUSH
7857: LD_INT 2
7859: PPUSH
7860: LD_INT 0
7862: PPUSH
7863: LD_INT 0
7865: PPUSH
7866: LD_INT 0
7868: PPUSH
7869: LD_VAR 0 12
7873: PPUSH
7874: CALL 5001 0 6
7878: GO 7908
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
7880: LD_LOC 5
7884: PPUSH
7885: LD_INT 2
7887: PPUSH
7888: LD_VAR 0 5
7892: PPUSH
7893: LD_VAR 0 6
7897: PPUSH
7898: LD_INT 5
7900: PPUSH
7901: LD_INT 0
7903: PPUSH
7904: CALL 5001 0 6
// if fact then
7908: LD_VAR 0 14
7912: IFFALSE 7942
// prepare_people ( nmech , class_mechanic , 0 , 0 , 0 , fact ) else
7914: LD_LOC 7
7918: PPUSH
7919: LD_INT 3
7921: PPUSH
7922: LD_INT 0
7924: PPUSH
7925: LD_INT 0
7927: PPUSH
7928: LD_INT 0
7930: PPUSH
7931: LD_VAR 0 14
7935: PPUSH
7936: CALL 5001 0 6
7940: GO 7970
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
7942: LD_LOC 7
7946: PPUSH
7947: LD_INT 3
7949: PPUSH
7950: LD_VAR 0 5
7954: PPUSH
7955: LD_VAR 0 6
7959: PPUSH
7960: LD_INT 5
7962: PPUSH
7963: LD_INT 0
7965: PPUSH
7966: CALL 5001 0 6
// if lab then
7970: LD_VAR 0 13
7974: IFFALSE 8004
// prepare_people ( nsci , class_scientistic , 0 , 0 , 0 , lab ) else
7976: LD_LOC 6
7980: PPUSH
7981: LD_INT 4
7983: PPUSH
7984: LD_INT 0
7986: PPUSH
7987: LD_INT 0
7989: PPUSH
7990: LD_INT 0
7992: PPUSH
7993: LD_VAR 0 13
7997: PPUSH
7998: CALL 5001 0 6
8002: GO 8032
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
8004: LD_LOC 6
8008: PPUSH
8009: LD_INT 4
8011: PPUSH
8012: LD_VAR 0 5
8016: PPUSH
8017: LD_VAR 0 6
8021: PPUSH
8022: LD_INT 5
8024: PPUSH
8025: LD_INT 0
8027: PPUSH
8028: CALL 5001 0 6
// max = 0 ;
8032: LD_ADDR_VAR 0 18
8036: PUSH
8037: LD_INT 0
8039: ST_TO_ADDR
// for un in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
8040: LD_ADDR_VAR 0 10
8044: PUSH
8045: LD_INT 22
8047: PUSH
8048: LD_VAR 0 1
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: PUSH
8057: LD_INT 21
8059: PUSH
8060: LD_INT 1
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PPUSH
8071: CALL_OW 69
8075: PUSH
8076: FOR_IN
8077: IFFALSE 8119
// begin if GetSkill ( un , skill_engineering ) > max then
8079: LD_VAR 0 10
8083: PPUSH
8084: LD_INT 2
8086: PPUSH
8087: CALL_OW 259
8091: PUSH
8092: LD_VAR 0 18
8096: GREATER
8097: IFFALSE 8117
// max := GetSkill ( un , skill_engineering ) ;
8099: LD_ADDR_VAR 0 18
8103: PUSH
8104: LD_VAR 0 10
8108: PPUSH
8109: LD_INT 2
8111: PPUSH
8112: CALL_OW 259
8116: ST_TO_ADDR
// end ;
8117: GO 8076
8119: POP
8120: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) , max ) ;
8121: LD_INT 22
8123: PUSH
8124: LD_VAR 0 1
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: LD_INT 21
8135: PUSH
8136: LD_INT 3
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: PPUSH
8147: CALL_OW 69
8151: PPUSH
8152: LD_VAR 0 18
8156: PPUSH
8157: CALL_OW 241
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
8161: LD_EXP 8
8165: PUSH
8166: LD_INT 20
8168: PPUSH
8169: LD_VAR 0 1
8173: PPUSH
8174: CALL_OW 321
8178: PUSH
8179: LD_INT 1
8181: EQUAL
8182: AND
8183: IFFALSE 8200
// SetTech ( tech_SibDet , side , state_researched ) ;
8185: LD_INT 20
8187: PPUSH
8188: LD_VAR 0 1
8192: PPUSH
8193: LD_INT 2
8195: PPUSH
8196: CALL_OW 322
// if def_siberite_bomb = 1 then
8200: LD_EXP 15
8204: PUSH
8205: LD_INT 1
8207: EQUAL
8208: IFFALSE 8242
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
8210: LD_INT 25
8212: PPUSH
8213: LD_VAR 0 1
8217: PPUSH
8218: LD_INT 1
8220: PPUSH
8221: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
8225: LD_INT 73
8227: PPUSH
8228: LD_VAR 0 1
8232: PPUSH
8233: LD_INT 1
8235: PPUSH
8236: CALL_OW 322
// end else
8240: GO 8272
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
8242: LD_INT 25
8244: PPUSH
8245: LD_VAR 0 1
8249: PPUSH
8250: LD_INT 0
8252: PPUSH
8253: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
8257: LD_INT 73
8259: PPUSH
8260: LD_VAR 0 1
8264: PPUSH
8265: LD_INT 0
8267: PPUSH
8268: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
8272: LD_INT 24
8274: PPUSH
8275: LD_VAR 0 1
8279: PPUSH
8280: LD_INT 0
8282: PPUSH
8283: CALL_OW 322
// global_defined := true ;
8287: LD_ADDR_LOC 3
8291: PUSH
8292: LD_INT 1
8294: ST_TO_ADDR
// end ;
8295: LD_VAR 0 3
8299: RET
// every 0 0$1 do
8300: GO 8302
8302: DISABLE
// if ( def_siberite_bomb > 1 ) then
8303: LD_EXP 15
8307: PUSH
8308: LD_INT 1
8310: GREATER
8311: IFFALSE 8326
// begin wait ( siberite_bomb_Delay ) ;
8313: LD_EXP 38
8317: PPUSH
8318: CALL_OW 67
// EnableSibFiss ;
8322: CALL 8327 0 0
// end ;
8326: END
// function EnableSibFiss ; var i ; begin
8327: LD_INT 0
8329: PPUSH
8330: PPUSH
// for i := 1 to 8 do
8331: LD_ADDR_VAR 0 2
8335: PUSH
8336: DOUBLE
8337: LD_INT 1
8339: DEC
8340: ST_TO_ADDR
8341: LD_INT 8
8343: PUSH
8344: FOR_TO
8345: IFFALSE 8376
// if Side_Positions [ i ] then
8347: LD_EXP 43
8351: PUSH
8352: LD_VAR 0 2
8356: ARRAY
8357: IFFALSE 8374
// SetTech ( tech_SibFiss , i , state_enabled ) ;
8359: LD_INT 25
8361: PPUSH
8362: LD_VAR 0 2
8366: PPUSH
8367: LD_INT 1
8369: PPUSH
8370: CALL_OW 322
8374: GO 8344
8376: POP
8377: POP
// end ;
8378: LD_VAR 0 1
8382: RET
// function prepare_sides ; var i ; begin
8383: LD_INT 0
8385: PPUSH
8386: PPUSH
// global_units := [ ] ;
8387: LD_ADDR_LOC 2
8391: PUSH
8392: EMPTY
8393: ST_TO_ADDR
// global_defined := false ;
8394: LD_ADDR_LOC 3
8398: PUSH
8399: LD_INT 0
8401: ST_TO_ADDR
// for i := 1 to Side_Positions do
8402: LD_ADDR_VAR 0 2
8406: PUSH
8407: DOUBLE
8408: LD_INT 1
8410: DEC
8411: ST_TO_ADDR
8412: LD_EXP 43
8416: PUSH
8417: FOR_TO
8418: IFFALSE 8458
// if Side_Positions [ i ] then
8420: LD_EXP 43
8424: PUSH
8425: LD_VAR 0 2
8429: ARRAY
8430: IFFALSE 8456
// begin prepare_side_base ( i , 1 ) ;
8432: LD_VAR 0 2
8436: PPUSH
8437: LD_INT 1
8439: PPUSH
8440: CALL 5589 0 2
// prepare_side_base ( i , 2 ) ;
8444: LD_VAR 0 2
8448: PPUSH
8449: LD_INT 2
8451: PPUSH
8452: CALL 5589 0 2
// end ;
8456: GO 8417
8458: POP
8459: POP
// end ;
8460: LD_VAR 0 1
8464: RET
// starting begin disable ( 98 ) ;
8465: LD_INT 98
8467: DISABLE_MARKED
// disable ( 400 ) ;
8468: LD_INT 400
8470: DISABLE_MARKED
// disable ( 401 ) ;
8471: LD_INT 401
8473: DISABLE_MARKED
// disable ( 600 ) ;
8474: LD_INT 600
8476: DISABLE_MARKED
// enable_human_prediction := true ;
8477: LD_ADDR_OWVAR 51
8481: PUSH
8482: LD_INT 1
8484: ST_TO_ADDR
// mp_selectmsg := true ;
8485: LD_ADDR_OWVAR 13
8489: PUSH
8490: LD_INT 1
8492: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
8493: CALL 68 0 0
// prepare_map_coordinates ;
8497: CALL 3504 0 0
// ResetFog ;
8501: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
8505: LD_OWVAR 2
8509: PPUSH
8510: CALL_OW 520
// AnimateTrees ( true ) ;
8514: LD_INT 1
8516: PPUSH
8517: CALL_OW 573
// prepare_sides ;
8521: CALL 8383 0 0
// Init_Win_Condition ;
8525: CALL 15347 0 0
// InitLimits ;
8529: CALL 14007 0 0
// ShowTimer ;
8533: CALL 14944 0 0
// music_nat := Side_Nations [ your_side ] ;
8537: LD_ADDR_OWVAR 71
8541: PUSH
8542: LD_EXP 44
8546: PUSH
8547: LD_OWVAR 2
8551: ARRAY
8552: ST_TO_ADDR
// if IAmSpec then
8553: CALL_OW 531
8557: IFFALSE 8581
// begin fogoff ( true ) ;
8559: LD_INT 1
8561: PPUSH
8562: CALL_OW 344
// CenterNowOnXY ( 109 , 61 ) ;
8566: LD_INT 109
8568: PPUSH
8569: LD_INT 61
8571: PPUSH
8572: CALL_OW 86
// enable ( 400 ) ;
8576: LD_INT 400
8578: ENABLE_MARKED
// end else
8579: GO 8635
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 2 ] ) ;
8581: LD_EXP 48
8585: PUSH
8586: LD_EXP 43
8590: PUSH
8591: LD_OWVAR 2
8595: ARRAY
8596: ARRAY
8597: PUSH
8598: LD_INT 1
8600: ARRAY
8601: PUSH
8602: LD_INT 1
8604: ARRAY
8605: PPUSH
8606: LD_EXP 48
8610: PUSH
8611: LD_EXP 43
8615: PUSH
8616: LD_OWVAR 2
8620: ARRAY
8621: ARRAY
8622: PUSH
8623: LD_INT 1
8625: ARRAY
8626: PUSH
8627: LD_INT 2
8629: ARRAY
8630: PPUSH
8631: CALL_OW 86
// end ; InitApeman ;
8635: CALL 10044 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 ] ;
8639: LD_ADDR_EXP 69
8643: PUSH
8644: LD_INT 26
8646: PUSH
8647: LD_INT 27
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: ST_TO_ADDR
// BeginBuildUp ;
8654: CALL 21366 0 0
// end ; end_of_file
8658: END
// every 1 1$0 + 0 0$0.3 do
8659: GO 8661
8661: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
8662: LD_INT 4
8664: PPUSH
8665: LD_INT 5
8667: PPUSH
8668: CALL_OW 12
8672: PPUSH
8673: LD_INT 1
8675: PPUSH
8676: CALL_OW 57
// enable ;
8680: ENABLE
// end ;
8681: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
8682: GO 8684
8684: DISABLE
8685: LD_INT 0
8687: PPUSH
8688: PPUSH
// begin case tick of 1 .. 1 1$0 :
8689: LD_OWVAR 1
8693: PUSH
8694: LD_INT 1
8696: DOUBLE
8697: GREATEREQUAL
8698: IFFALSE 8706
8700: LD_INT 2100
8702: DOUBLE
8703: LESSEQUAL
8704: IFTRUE 8708
8706: GO 8736
8708: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
8709: LD_EXP 32
8713: PUSH
8714: LD_INT 100
8716: DIVREAL
8717: PUSH
8718: LD_INT 350
8720: PPUSH
8721: LD_INT 700
8723: PPUSH
8724: CALL_OW 12
8728: MUL
8729: PPUSH
8730: CALL_OW 67
8734: GO 9038
8736: LD_INT 2100
8738: PUSH
8739: LD_INT 1
8741: PLUS
8742: DOUBLE
8743: GREATEREQUAL
8744: IFFALSE 8752
8746: LD_INT 10500
8748: DOUBLE
8749: LESSEQUAL
8750: IFTRUE 8754
8752: GO 8782
8754: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
8755: LD_EXP 32
8759: PUSH
8760: LD_INT 100
8762: DIVREAL
8763: PUSH
8764: LD_INT 700
8766: PPUSH
8767: LD_INT 1225
8769: PPUSH
8770: CALL_OW 12
8774: MUL
8775: PPUSH
8776: CALL_OW 67
8780: GO 9038
8782: LD_INT 10500
8784: PUSH
8785: LD_INT 1
8787: PLUS
8788: DOUBLE
8789: GREATEREQUAL
8790: IFFALSE 8798
8792: LD_INT 21000
8794: DOUBLE
8795: LESSEQUAL
8796: IFTRUE 8800
8798: GO 8828
8800: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
8801: LD_EXP 32
8805: PUSH
8806: LD_INT 100
8808: DIVREAL
8809: PUSH
8810: LD_INT 1225
8812: PPUSH
8813: LD_INT 1750
8815: PPUSH
8816: CALL_OW 12
8820: MUL
8821: PPUSH
8822: CALL_OW 67
8826: GO 9038
8828: LD_INT 21000
8830: PUSH
8831: LD_INT 1
8833: PLUS
8834: DOUBLE
8835: GREATEREQUAL
8836: IFFALSE 8844
8838: LD_INT 42000
8840: DOUBLE
8841: LESSEQUAL
8842: IFTRUE 8846
8844: GO 8874
8846: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
8847: LD_EXP 32
8851: PUSH
8852: LD_INT 100
8854: DIVREAL
8855: PUSH
8856: LD_INT 1750
8858: PPUSH
8859: LD_INT 2450
8861: PPUSH
8862: CALL_OW 12
8866: MUL
8867: PPUSH
8868: CALL_OW 67
8872: GO 9038
8874: LD_INT 42000
8876: PUSH
8877: LD_INT 1
8879: PLUS
8880: DOUBLE
8881: GREATEREQUAL
8882: IFFALSE 8890
8884: LD_INT 63000
8886: DOUBLE
8887: LESSEQUAL
8888: IFTRUE 8892
8890: GO 8920
8892: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
8893: LD_EXP 32
8897: PUSH
8898: LD_INT 100
8900: DIVREAL
8901: PUSH
8902: LD_INT 2450
8904: PPUSH
8905: LD_INT 2800
8907: PPUSH
8908: CALL_OW 12
8912: MUL
8913: PPUSH
8914: CALL_OW 67
8918: GO 9038
8920: LD_INT 63000
8922: PUSH
8923: LD_INT 1
8925: PLUS
8926: DOUBLE
8927: GREATEREQUAL
8928: IFFALSE 8936
8930: LD_INT 105000
8932: DOUBLE
8933: LESSEQUAL
8934: IFTRUE 8938
8936: GO 8966
8938: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
8939: LD_EXP 32
8943: PUSH
8944: LD_INT 100
8946: DIVREAL
8947: PUSH
8948: LD_INT 2800
8950: PPUSH
8951: LD_INT 3325
8953: PPUSH
8954: CALL_OW 12
8958: MUL
8959: PPUSH
8960: CALL_OW 67
8964: GO 9038
8966: LD_INT 105000
8968: PUSH
8969: LD_INT 1
8971: PLUS
8972: DOUBLE
8973: GREATEREQUAL
8974: IFFALSE 8982
8976: LD_INT 630000
8978: DOUBLE
8979: LESSEQUAL
8980: IFTRUE 8984
8982: GO 9012
8984: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
8985: LD_EXP 32
8989: PUSH
8990: LD_INT 100
8992: DIVREAL
8993: PUSH
8994: LD_INT 3325
8996: PPUSH
8997: LD_INT 4200
8999: PPUSH
9000: CALL_OW 12
9004: MUL
9005: PPUSH
9006: CALL_OW 67
9010: GO 9038
9012: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
9013: LD_EXP 32
9017: PUSH
9018: LD_INT 100
9020: DIVREAL
9021: PUSH
9022: LD_INT 4200
9024: PPUSH
9025: LD_INT 5250
9027: PPUSH
9028: CALL_OW 12
9032: MUL
9033: PPUSH
9034: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
9038: LD_ADDR_VAR 0 2
9042: PUSH
9043: LD_INT 3
9045: PPUSH
9046: LD_INT 5
9048: PPUSH
9049: CALL_OW 12
9053: ST_TO_ADDR
// for i = 1 to 2 do
9054: LD_ADDR_VAR 0 1
9058: PUSH
9059: DOUBLE
9060: LD_INT 1
9062: DEC
9063: ST_TO_ADDR
9064: LD_INT 2
9066: PUSH
9067: FOR_TO
9068: IFFALSE 9095
// CreateCratesArea ( amount , BuildUpAreas [ i ] , true ) ;
9070: LD_VAR 0 2
9074: PPUSH
9075: LD_EXP 69
9079: PUSH
9080: LD_VAR 0 1
9084: ARRAY
9085: PPUSH
9086: LD_INT 1
9088: PPUSH
9089: CALL_OW 55
9093: GO 9067
9095: POP
9096: POP
// enable ;
9097: ENABLE
// end ;
9098: PPOPN 2
9100: END
// every 0 0$20 + 0 0$0.9 do var i , filter ;
9101: GO 9103
9103: DISABLE
9104: LD_INT 0
9106: PPUSH
9107: PPUSH
// begin if GetResourceArea ( Valley , mat_cans ) < ( ( 300 - shipments_density ) / 100 * 5 ) then
9108: LD_INT 12
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: CALL_OW 287
9118: PUSH
9119: LD_INT 300
9121: PUSH
9122: LD_EXP 32
9126: MINUS
9127: PUSH
9128: LD_INT 100
9130: DIVREAL
9131: PUSH
9132: LD_INT 5
9134: MUL
9135: LESS
9136: IFFALSE 9159
// CreateCratesArea ( Rand ( 3 , 5 ) , Valley , true ) ;
9138: LD_INT 3
9140: PPUSH
9141: LD_INT 5
9143: PPUSH
9144: CALL_OW 12
9148: PPUSH
9149: LD_INT 12
9151: PPUSH
9152: LD_INT 1
9154: PPUSH
9155: CALL_OW 55
// enable ;
9159: ENABLE
// end ; end_of_file
9160: PPOPN 2
9162: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
9163: LD_VAR 0 1
9167: PPUSH
9168: CALL_OW 266
9172: PUSH
9173: LD_INT 0
9175: PUSH
9176: LD_INT 1
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: IN
9183: IFFALSE 9208
// SetBName ( b , @ & GetSide ( b ) ) ;
9185: LD_VAR 0 1
9189: PPUSH
9190: LD_STRING @
9192: PUSH
9193: LD_VAR 0 1
9197: PPUSH
9198: CALL_OW 255
9202: STR
9203: PPUSH
9204: CALL_OW 500
// if def_game_rules then
9208: LD_EXP 65
9212: IFFALSE 9249
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
9214: LD_VAR 0 1
9218: PPUSH
9219: LD_VAR 0 1
9223: PPUSH
9224: CALL_OW 266
9228: PPUSH
9229: LD_VAR 0 1
9233: PPUSH
9234: CALL_OW 255
9238: PPUSH
9239: LD_INT 0
9241: PPUSH
9242: LD_INT 1
9244: PPUSH
9245: CALL 14408 0 5
// end ;
9249: PPOPN 2
9251: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
9252: LD_VAR 0 1
9256: PPUSH
9257: CALL_OW 266
9261: PUSH
9262: LD_INT 0
9264: PUSH
9265: LD_INT 1
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: IN
9272: IFFALSE 9297
// SetBName ( b , @ & GetSide ( b ) ) ;
9274: LD_VAR 0 1
9278: PPUSH
9279: LD_STRING @
9281: PUSH
9282: LD_VAR 0 1
9286: PPUSH
9287: CALL_OW 255
9291: STR
9292: PPUSH
9293: CALL_OW 500
// if def_game_rules then
9297: LD_EXP 65
9301: IFFALSE 9340
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
9303: LD_VAR 0 1
9307: PPUSH
9308: LD_VAR 0 1
9312: PPUSH
9313: CALL_OW 266
9317: PPUSH
9318: LD_VAR 0 1
9322: PPUSH
9323: CALL_OW 255
9327: PPUSH
9328: LD_VAR 0 2
9332: PPUSH
9333: LD_INT 1
9335: PPUSH
9336: CALL 14408 0 5
// end ;
9340: PPOPN 3
9342: END
// on VehicleConstructed ( veh , fac ) do var side ;
9343: LD_INT 0
9345: PPUSH
// begin if GetControl ( veh ) = control_apeman then
9346: LD_VAR 0 1
9350: PPUSH
9351: CALL_OW 263
9355: PUSH
9356: LD_INT 5
9358: EQUAL
9359: IFFALSE 9501
// begin side := GetSide ( veh ) ;
9361: LD_ADDR_VAR 0 3
9365: PUSH
9366: LD_VAR 0 1
9370: PPUSH
9371: CALL_OW 255
9375: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
9376: LD_ADDR_EXP 60
9380: PUSH
9381: LD_EXP 60
9385: PPUSH
9386: LD_VAR 0 3
9390: PPUSH
9391: LD_EXP 60
9395: PUSH
9396: LD_VAR 0 3
9400: ARRAY
9401: PPUSH
9402: LD_INT 52
9404: PUSH
9405: EMPTY
9406: LIST
9407: PPUSH
9408: CALL_OW 72
9412: PUSH
9413: LD_INT 22
9415: PUSH
9416: LD_VAR 0 3
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 2
9427: PUSH
9428: LD_INT 33
9430: PUSH
9431: LD_INT 5
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PUSH
9438: LD_INT 25
9440: PUSH
9441: LD_INT 12
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: LD_INT 25
9450: PUSH
9451: LD_INT 15
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 25
9460: PUSH
9461: LD_INT 16
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: LD_INT 25
9470: PUSH
9471: LD_INT 17
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PPUSH
9490: CALL_OW 69
9494: UNION
9495: PPUSH
9496: CALL_OW 1
9500: ST_TO_ADDR
// end ; end ;
9501: PPOPN 3
9503: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
9504: LD_INT 0
9506: PPUSH
9507: PPUSH
9508: PPUSH
9509: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
9510: LD_VAR 0 1
9514: PPUSH
9515: CALL_OW 257
9519: PUSH
9520: LD_INT 12
9522: PUSH
9523: LD_INT 15
9525: PUSH
9526: LD_INT 17
9528: PUSH
9529: LD_INT 16
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: IN
9538: PUSH
9539: LD_VAR 0 1
9543: PPUSH
9544: CALL_OW 263
9548: PUSH
9549: LD_INT 5
9551: EQUAL
9552: OR
9553: IFFALSE 9564
// ApeKilled ( j ) ;
9555: LD_VAR 0 1
9559: PPUSH
9560: CALL 10717 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
9564: LD_VAR 0 1
9568: PPUSH
9569: CALL_OW 266
9573: PUSH
9574: LD_INT 0
9576: PUSH
9577: LD_INT 1
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: IN
9584: IFFALSE 9666
// begin pos := Side_Positions [ GetSide ( j ) ] ;
9586: LD_ADDR_VAR 0 4
9590: PUSH
9591: LD_EXP 43
9595: PUSH
9596: LD_VAR 0 1
9600: PPUSH
9601: CALL_OW 255
9605: ARRAY
9606: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
9607: LD_ADDR_VAR 0 2
9611: PUSH
9612: LD_EXP 48
9616: PUSH
9617: LD_VAR 0 4
9621: ARRAY
9622: PUSH
9623: LD_INT 1
9625: ARRAY
9626: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
9627: LD_ADDR_VAR 0 3
9631: PUSH
9632: LD_EXP 48
9636: PUSH
9637: LD_VAR 0 4
9641: ARRAY
9642: PUSH
9643: LD_INT 2
9645: ARRAY
9646: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
9647: LD_VAR 0 2
9651: PPUSH
9652: LD_VAR 0 3
9656: PPUSH
9657: CALL_OW 420
9661: PPUSH
9662: CALL_OW 419
// end ; if def_game_rules then
9666: LD_EXP 65
9670: IFFALSE 9769
// if ( GetType ( j ) = 3 ) then
9672: LD_VAR 0 1
9676: PPUSH
9677: CALL_OW 247
9681: PUSH
9682: LD_INT 3
9684: EQUAL
9685: IFFALSE 9725
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
9687: LD_VAR 0 1
9691: PPUSH
9692: LD_VAR 0 1
9696: PPUSH
9697: CALL_OW 266
9701: PPUSH
9702: LD_VAR 0 1
9706: PPUSH
9707: CALL_OW 255
9711: PPUSH
9712: LD_INT 0
9714: PPUSH
9715: LD_INT 1
9717: NEG
9718: PPUSH
9719: CALL 14408 0 5
9723: GO 9769
// if ( GetChassis ( j ) = 25 ) then
9725: LD_VAR 0 1
9729: PPUSH
9730: CALL_OW 265
9734: PUSH
9735: LD_INT 25
9737: EQUAL
9738: IFFALSE 9769
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
9740: LD_VAR 0 1
9744: PPUSH
9745: LD_INT 37
9747: PPUSH
9748: LD_VAR 0 1
9752: PPUSH
9753: CALL_OW 255
9757: PPUSH
9758: LD_INT 0
9760: PPUSH
9761: LD_INT 1
9763: NEG
9764: PPUSH
9765: CALL 14408 0 5
// end ;
9769: PPOPN 5
9771: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
9772: LD_EXP 65
9776: PUSH
9777: LD_VAR 0 1
9781: PPUSH
9782: CALL_OW 265
9786: PUSH
9787: LD_INT 25
9789: EQUAL
9790: AND
9791: IFFALSE 9823
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
9793: LD_VAR 0 1
9797: PPUSH
9798: LD_INT 37
9800: PPUSH
9801: LD_VAR 0 1
9805: PPUSH
9806: CALL_OW 255
9810: PPUSH
9811: LD_VAR 0 3
9815: PPUSH
9816: LD_INT 1
9818: PPUSH
9819: CALL 14408 0 5
// end ;
9823: PPOPN 4
9825: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
9826: LD_VAR 0 1
9830: PPUSH
9831: LD_VAR 0 2
9835: PPUSH
9836: LD_VAR 0 3
9840: PPUSH
9841: LD_OWVAR 2
9845: PPUSH
9846: CALL 15108 0 4
9850: PPOPN 3
9852: END
// every 20 20$00 trigger apemanNumber do
9853: LD_EXP 57
9857: IFFALSE 9890
9859: GO 9861
9861: DISABLE
// begin enable ;
9862: ENABLE
// if apeLevel >= 8 then
9863: LD_EXP 62
9867: PUSH
9868: LD_INT 8
9870: GREATEREQUAL
9871: IFFALSE 9876
// disable else
9873: DISABLE
9874: GO 9890
// apeLevel := apeLevel + 1 ;
9876: LD_ADDR_EXP 62
9880: PUSH
9881: LD_EXP 62
9885: PUSH
9886: LD_INT 1
9888: PLUS
9889: ST_TO_ADDR
// end ;
9890: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
9891: LD_EXP 57
9895: PUSH
9896: LD_EXP 58
9900: LESS
9901: IFFALSE 10041
9903: GO 9905
9905: DISABLE
9906: LD_INT 0
9908: PPUSH
9909: PPUSH
9910: PPUSH
9911: PPUSH
// begin enable ;
9912: ENABLE
// for i := 1 to apemanPos do
9913: LD_ADDR_VAR 0 1
9917: PUSH
9918: DOUBLE
9919: LD_INT 1
9921: DEC
9922: ST_TO_ADDR
9923: LD_EXP 60
9927: PUSH
9928: FOR_TO
9929: IFFALSE 10039
// begin if apemanPlayerCount [ i ] then
9931: LD_EXP 61
9935: PUSH
9936: LD_VAR 0 1
9940: ARRAY
9941: IFFALSE 10037
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
9943: LD_EXP 61
9947: PUSH
9948: LD_VAR 0 1
9952: ARRAY
9953: PUSH
9954: LD_EXP 60
9958: PUSH
9959: LD_VAR 0 1
9963: ARRAY
9964: GREATER
9965: IFFALSE 10037
// begin ape := PrepareApeman ;
9967: LD_ADDR_VAR 0 2
9971: PUSH
9972: CALL 10536 0 0
9976: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
9977: LD_VAR 0 2
9981: PPUSH
9982: LD_EXP 63
9986: PUSH
9987: LD_VAR 0 1
9991: ARRAY
9992: PPUSH
9993: LD_INT 0
9995: PPUSH
9996: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
10000: LD_ADDR_EXP 60
10004: PUSH
10005: LD_EXP 60
10009: PPUSH
10010: LD_VAR 0 1
10014: PPUSH
10015: LD_EXP 60
10019: PUSH
10020: LD_VAR 0 1
10024: ARRAY
10025: PUSH
10026: LD_VAR 0 2
10030: UNION
10031: PPUSH
10032: CALL_OW 1
10036: ST_TO_ADDR
// end ; end ; end ;
10037: GO 9928
10039: POP
10040: POP
// end ;
10041: PPOPN 4
10043: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
10044: LD_INT 0
10046: PPUSH
10047: PPUSH
10048: PPUSH
10049: PPUSH
10050: PPUSH
10051: PPUSH
10052: PPUSH
// playersAmount := 0 ;
10053: LD_ADDR_VAR 0 3
10057: PUSH
10058: LD_INT 0
10060: ST_TO_ADDR
// _apeAreas := [ Ar1Out3 , Ar2Out3 ] ;
10061: LD_ADDR_VAR 0 7
10065: PUSH
10066: LD_INT 24
10068: PUSH
10069: LD_INT 18
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10076: LD_ADDR_EXP 63
10080: PUSH
10081: LD_INT 0
10083: PUSH
10084: LD_INT 0
10086: PUSH
10087: LD_INT 0
10089: PUSH
10090: LD_INT 0
10092: PUSH
10093: LD_INT 0
10095: PUSH
10096: LD_INT 0
10098: PUSH
10099: LD_INT 0
10101: PUSH
10102: LD_INT 0
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: ST_TO_ADDR
// for j = 1 to Side_Positions do
10115: LD_ADDR_VAR 0 4
10119: PUSH
10120: DOUBLE
10121: LD_INT 1
10123: DEC
10124: ST_TO_ADDR
10125: LD_EXP 43
10129: PUSH
10130: FOR_TO
10131: IFFALSE 10198
// if Side_Positions [ j ] then
10133: LD_EXP 43
10137: PUSH
10138: LD_VAR 0 4
10142: ARRAY
10143: IFFALSE 10196
// begin playersAmount := playersAmount + 1 ;
10145: LD_ADDR_VAR 0 3
10149: PUSH
10150: LD_VAR 0 3
10154: PUSH
10155: LD_INT 1
10157: PLUS
10158: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
10159: LD_ADDR_EXP 63
10163: PUSH
10164: LD_EXP 63
10168: PPUSH
10169: LD_VAR 0 4
10173: PPUSH
10174: LD_VAR 0 7
10178: PUSH
10179: LD_EXP 43
10183: PUSH
10184: LD_VAR 0 4
10188: ARRAY
10189: ARRAY
10190: PPUSH
10191: CALL_OW 1
10195: ST_TO_ADDR
// end ;
10196: GO 10130
10198: POP
10199: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
10200: LD_ADDR_EXP 59
10204: PUSH
10205: LD_INT 3
10207: PUSH
10208: LD_EXP 37
10212: MUL
10213: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
10214: LD_ADDR_EXP 57
10218: PUSH
10219: LD_VAR 0 3
10223: PUSH
10224: LD_EXP 59
10228: MUL
10229: ST_TO_ADDR
// apemanLimit := apemanNumber ;
10230: LD_ADDR_EXP 58
10234: PUSH
10235: LD_EXP 57
10239: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10240: LD_ADDR_EXP 60
10244: PUSH
10245: LD_INT 0
10247: PUSH
10248: LD_INT 0
10250: PUSH
10251: LD_INT 0
10253: PUSH
10254: LD_INT 0
10256: PUSH
10257: LD_INT 0
10259: PUSH
10260: LD_INT 0
10262: PUSH
10263: LD_INT 0
10265: PUSH
10266: LD_INT 0
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10279: LD_ADDR_EXP 61
10283: PUSH
10284: LD_INT 0
10286: PUSH
10287: LD_INT 0
10289: PUSH
10290: LD_INT 0
10292: PUSH
10293: LD_INT 0
10295: PUSH
10296: LD_INT 0
10298: PUSH
10299: LD_INT 0
10301: PUSH
10302: LD_INT 0
10304: PUSH
10305: LD_INT 0
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: ST_TO_ADDR
// apeLevel := 1 ;
10318: LD_ADDR_EXP 62
10322: PUSH
10323: LD_INT 1
10325: ST_TO_ADDR
// if not apemanNumber then
10326: LD_EXP 57
10330: NOT
10331: IFFALSE 10335
// exit ;
10333: GO 10531
// for i := 1 to apemanPerPlayer do
10335: LD_ADDR_VAR 0 2
10339: PUSH
10340: DOUBLE
10341: LD_INT 1
10343: DEC
10344: ST_TO_ADDR
10345: LD_EXP 59
10349: PUSH
10350: FOR_TO
10351: IFFALSE 10529
// begin for j := 1 to Side_Positions do
10353: LD_ADDR_VAR 0 4
10357: PUSH
10358: DOUBLE
10359: LD_INT 1
10361: DEC
10362: ST_TO_ADDR
10363: LD_EXP 43
10367: PUSH
10368: FOR_TO
10369: IFFALSE 10525
// if Side_Positions [ j ] then
10371: LD_EXP 43
10375: PUSH
10376: LD_VAR 0 4
10380: ARRAY
10381: IFFALSE 10523
// begin pos := Side_Positions [ j ] ;
10383: LD_ADDR_VAR 0 6
10387: PUSH
10388: LD_EXP 43
10392: PUSH
10393: LD_VAR 0 4
10397: ARRAY
10398: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
10399: LD_ADDR_EXP 61
10403: PUSH
10404: LD_EXP 61
10408: PPUSH
10409: LD_VAR 0 4
10413: PPUSH
10414: LD_EXP 61
10418: PUSH
10419: LD_VAR 0 4
10423: ARRAY
10424: PUSH
10425: LD_INT 1
10427: PLUS
10428: PPUSH
10429: CALL_OW 1
10433: ST_TO_ADDR
// ape := PrepareApeman ;
10434: LD_ADDR_VAR 0 5
10438: PUSH
10439: CALL 10536 0 0
10443: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
10444: LD_ADDR_EXP 60
10448: PUSH
10449: LD_EXP 60
10453: PPUSH
10454: LD_VAR 0 4
10458: PPUSH
10459: LD_EXP 60
10463: PUSH
10464: LD_VAR 0 4
10468: ARRAY
10469: PPUSH
10470: LD_EXP 60
10474: PUSH
10475: LD_VAR 0 4
10479: ARRAY
10480: PUSH
10481: LD_INT 1
10483: PLUS
10484: PPUSH
10485: LD_VAR 0 5
10489: PPUSH
10490: CALL_OW 1
10494: PPUSH
10495: CALL_OW 1
10499: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
10500: LD_VAR 0 5
10504: PPUSH
10505: LD_EXP 63
10509: PUSH
10510: LD_VAR 0 4
10514: ARRAY
10515: PPUSH
10516: LD_INT 0
10518: PPUSH
10519: CALL_OW 49
// end ;
10523: GO 10368
10525: POP
10526: POP
// end ;
10527: GO 10350
10529: POP
10530: POP
// end ;
10531: LD_VAR 0 1
10535: RET
// export function PrepareApeman ; var bonus ; begin
10536: LD_INT 0
10538: PPUSH
10539: PPUSH
// uc_side := 0 ;
10540: LD_ADDR_OWVAR 20
10544: PUSH
10545: LD_INT 0
10547: ST_TO_ADDR
// uc_nation := 0 ;
10548: LD_ADDR_OWVAR 21
10552: PUSH
10553: LD_INT 0
10555: ST_TO_ADDR
// InitHc ;
10556: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
10560: LD_ADDR_VAR 0 2
10564: PUSH
10565: LD_INT 1
10567: NEG
10568: PUSH
10569: LD_INT 0
10571: PUSH
10572: LD_INT 1
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: LIST
10579: PUSH
10580: LD_OWVAR 1
10584: PUSH
10585: LD_INT 3
10587: MOD
10588: PUSH
10589: LD_INT 1
10591: PLUS
10592: ARRAY
10593: ST_TO_ADDR
// hc_class := class_apeman ;
10594: LD_ADDR_OWVAR 28
10598: PUSH
10599: LD_INT 12
10601: ST_TO_ADDR
// hc_gallery :=  ;
10602: LD_ADDR_OWVAR 33
10606: PUSH
10607: LD_STRING 
10609: ST_TO_ADDR
// hc_name :=  ;
10610: LD_ADDR_OWVAR 26
10614: PUSH
10615: LD_STRING 
10617: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
10618: LD_ADDR_OWVAR 31
10622: PUSH
10623: LD_EXP 62
10627: PUSH
10628: LD_VAR 0 2
10632: PLUS
10633: PUSH
10634: LD_EXP 62
10638: PUSH
10639: LD_VAR 0 2
10643: PLUS
10644: PUSH
10645: LD_EXP 62
10649: PUSH
10650: LD_VAR 0 2
10654: PLUS
10655: PUSH
10656: LD_EXP 62
10660: PUSH
10661: LD_VAR 0 2
10665: PLUS
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
10673: LD_ADDR_OWVAR 35
10677: PUSH
10678: LD_INT 10
10680: PUSH
10681: LD_VAR 0 2
10685: MUL
10686: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
10687: LD_ADDR_OWVAR 29
10691: PUSH
10692: LD_INT 12
10694: PUSH
10695: LD_INT 10
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: ST_TO_ADDR
// result := CreateHuman ;
10702: LD_ADDR_VAR 0 1
10706: PUSH
10707: CALL_OW 44
10711: ST_TO_ADDR
// end ;
10712: LD_VAR 0 1
10716: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
10717: LD_INT 0
10719: PPUSH
10720: PPUSH
10721: PPUSH
// if not ape then
10722: LD_VAR 0 1
10726: NOT
10727: IFFALSE 10731
// exit ;
10729: GO 10856
// side := GetSide ( ape ) ;
10731: LD_ADDR_VAR 0 3
10735: PUSH
10736: LD_VAR 0 1
10740: PPUSH
10741: CALL_OW 255
10745: ST_TO_ADDR
// if not side then
10746: LD_VAR 0 3
10750: NOT
10751: IFFALSE 10805
// begin for i = 1 to apemanPos do
10753: LD_ADDR_VAR 0 4
10757: PUSH
10758: DOUBLE
10759: LD_INT 1
10761: DEC
10762: ST_TO_ADDR
10763: LD_EXP 60
10767: PUSH
10768: FOR_TO
10769: IFFALSE 10803
// if ape in apemanPos [ i ] then
10771: LD_VAR 0 1
10775: PUSH
10776: LD_EXP 60
10780: PUSH
10781: LD_VAR 0 4
10785: ARRAY
10786: IN
10787: IFFALSE 10801
// begin side := i ;
10789: LD_ADDR_VAR 0 3
10793: PUSH
10794: LD_VAR 0 4
10798: ST_TO_ADDR
// break ;
10799: GO 10803
// end ;
10801: GO 10768
10803: POP
10804: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
10805: LD_ADDR_EXP 60
10809: PUSH
10810: LD_EXP 60
10814: PPUSH
10815: LD_VAR 0 3
10819: PPUSH
10820: LD_EXP 60
10824: PUSH
10825: LD_VAR 0 3
10829: ARRAY
10830: PUSH
10831: LD_VAR 0 1
10835: DIFF
10836: PPUSH
10837: CALL_OW 1
10841: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
10842: LD_ADDR_EXP 57
10846: PUSH
10847: LD_EXP 57
10851: PUSH
10852: LD_INT 1
10854: MINUS
10855: ST_TO_ADDR
// end ; end_of_file
10856: LD_VAR 0 2
10860: RET
// var free , free1 , free2 , new1 , new2 , arr1 , arr2 , seenby1 , seenby2 ; function displ_status ; var s1 , s2 ; begin
10861: LD_INT 0
10863: PPUSH
10864: PPUSH
10865: PPUSH
// if not def_people_arrivals then
10866: LD_EXP 11
10870: NOT
10871: IFFALSE 10875
// exit ;
10873: GO 11016
// if def_people_loyality then
10875: LD_EXP 12
10879: IFFALSE 10995
// begin s1 := [ #Multi1x1-InfoL , Side_Positions [ 1 ] , ( free1 + 0 ) ] ;
10881: LD_ADDR_VAR 0 2
10885: PUSH
10886: LD_STRING #Multi1x1-InfoL
10888: PUSH
10889: LD_EXP 43
10893: PUSH
10894: LD_INT 1
10896: ARRAY
10897: PUSH
10898: LD_LOC 10
10902: PUSH
10903: LD_INT 0
10905: PLUS
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: LIST
10911: ST_TO_ADDR
// s2 := [ #Multi1x1-InfoL , Side_Positions [ 2 ] , ( free2 + 0 ) ] ;
10912: LD_ADDR_VAR 0 3
10916: PUSH
10917: LD_STRING #Multi1x1-InfoL
10919: PUSH
10920: LD_EXP 43
10924: PUSH
10925: LD_INT 2
10927: ARRAY
10928: PUSH
10929: LD_LOC 11
10933: PUSH
10934: LD_INT 0
10936: PLUS
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: LIST
10942: ST_TO_ADDR
// if Side_Positions [ your_side ] <> 2 then
10943: LD_EXP 43
10947: PUSH
10948: LD_OWVAR 2
10952: ARRAY
10953: PUSH
10954: LD_INT 2
10956: NONEQUAL
10957: IFFALSE 10977
// ExtraStrings := s1 ^ s2 else
10959: LD_ADDR_EXP 67
10963: PUSH
10964: LD_VAR 0 2
10968: PUSH
10969: LD_VAR 0 3
10973: ADD
10974: ST_TO_ADDR
10975: GO 10993
// ExtraStrings := s2 ^ s1 ;
10977: LD_ADDR_EXP 67
10981: PUSH
10982: LD_VAR 0 3
10986: PUSH
10987: LD_VAR 0 2
10991: ADD
10992: ST_TO_ADDR
// end else
10993: GO 11016
// begin ExtraStrings := [ #Multi1x1-InfoNonL , ( free + 0 ) ] ;
10995: LD_ADDR_EXP 67
10999: PUSH
11000: LD_STRING #Multi1x1-InfoNonL
11002: PUSH
11003: LD_LOC 9
11007: PUSH
11008: LD_INT 0
11010: PLUS
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: ST_TO_ADDR
// end ; end ;
11016: LD_VAR 0 1
11020: RET
// every 0 0$1 do
11021: GO 11023
11023: DISABLE
// begin if not text_info then
11024: LD_EXP 34
11028: NOT
11029: IFFALSE 11033
// exit ;
11031: GO 11038
// displ_status ;
11033: CALL 10861 0 0
// enable ;
11037: ENABLE
// end ;
11038: END
// export function prepare_arrivals ; var i , ar , p1 , p2 , pom1 , pom2 ; begin
11039: LD_INT 0
11041: PPUSH
11042: PPUSH
11043: PPUSH
11044: PPUSH
11045: PPUSH
11046: PPUSH
11047: PPUSH
// arr1 := [ ] ;
11048: LD_ADDR_LOC 14
11052: PUSH
11053: EMPTY
11054: ST_TO_ADDR
// arr2 := [ ] ;
11055: LD_ADDR_LOC 15
11059: PUSH
11060: EMPTY
11061: ST_TO_ADDR
// for i := 1 to max_arriving_times do
11062: LD_ADDR_VAR 0 2
11066: PUSH
11067: DOUBLE
11068: LD_INT 1
11070: DEC
11071: ST_TO_ADDR
11072: LD_EXP 33
11076: PUSH
11077: FOR_TO
11078: IFFALSE 11614
// begin case rand ( 1 , 100 ) of 1 .. 45 :
11080: LD_INT 1
11082: PPUSH
11083: LD_INT 100
11085: PPUSH
11086: CALL_OW 12
11090: PUSH
11091: LD_INT 1
11093: DOUBLE
11094: GREATEREQUAL
11095: IFFALSE 11103
11097: LD_INT 45
11099: DOUBLE
11100: LESSEQUAL
11101: IFTRUE 11105
11103: GO 11312
11105: POP
// case rand ( 1 , 100 ) of 1 .. 10 :
11106: LD_INT 1
11108: PPUSH
11109: LD_INT 100
11111: PPUSH
11112: CALL_OW 12
11116: PUSH
11117: LD_INT 1
11119: DOUBLE
11120: GREATEREQUAL
11121: IFFALSE 11129
11123: LD_INT 10
11125: DOUBLE
11126: LESSEQUAL
11127: IFTRUE 11131
11129: GO 11149
11131: POP
// ar := [ Ar1Base1 , Ar2Base1 ] ; 11 .. 20 :
11132: LD_ADDR_VAR 0 3
11136: PUSH
11137: LD_INT 19
11139: PUSH
11140: LD_INT 15
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: ST_TO_ADDR
11147: GO 11310
11149: LD_INT 11
11151: DOUBLE
11152: GREATEREQUAL
11153: IFFALSE 11161
11155: LD_INT 20
11157: DOUBLE
11158: LESSEQUAL
11159: IFTRUE 11163
11161: GO 11181
11163: POP
// ar := [ Ar1Base2 , Ar2Base2 ] ; 21 .. 30 :
11164: LD_ADDR_VAR 0 3
11168: PUSH
11169: LD_INT 20
11171: PUSH
11172: LD_INT 14
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: ST_TO_ADDR
11179: GO 11310
11181: LD_INT 21
11183: DOUBLE
11184: GREATEREQUAL
11185: IFFALSE 11193
11187: LD_INT 30
11189: DOUBLE
11190: LESSEQUAL
11191: IFTRUE 11195
11193: GO 11213
11195: POP
// ar := [ Ar1Between , Ar2Between ] ; 31 .. 55 :
11196: LD_ADDR_VAR 0 3
11200: PUSH
11201: LD_INT 22
11203: PUSH
11204: LD_INT 16
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: ST_TO_ADDR
11211: GO 11310
11213: LD_INT 31
11215: DOUBLE
11216: GREATEREQUAL
11217: IFFALSE 11225
11219: LD_INT 55
11221: DOUBLE
11222: LESSEQUAL
11223: IFTRUE 11227
11225: GO 11245
11227: POP
// ar := [ Ar1Out2 , Ar2Out2 ] ; 56 .. 80 :
11228: LD_ADDR_VAR 0 3
11232: PUSH
11233: LD_INT 23
11235: PUSH
11236: LD_INT 17
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: ST_TO_ADDR
11243: GO 11310
11245: LD_INT 56
11247: DOUBLE
11248: GREATEREQUAL
11249: IFFALSE 11257
11251: LD_INT 80
11253: DOUBLE
11254: LESSEQUAL
11255: IFTRUE 11259
11257: GO 11277
11259: POP
// ar := [ Ar1Out1 , Ar2Out1 ] ; 81 .. 100 :
11260: LD_ADDR_VAR 0 3
11264: PUSH
11265: LD_INT 21
11267: PUSH
11268: LD_INT 13
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: ST_TO_ADDR
11275: GO 11310
11277: LD_INT 81
11279: DOUBLE
11280: GREATEREQUAL
11281: IFFALSE 11289
11283: LD_INT 100
11285: DOUBLE
11286: LESSEQUAL
11287: IFTRUE 11291
11289: GO 11309
11291: POP
// ar := [ Ar1Out3 , Ar2Out3 ] ; end ; 46 .. 85 :
11292: LD_ADDR_VAR 0 3
11296: PUSH
11297: LD_INT 24
11299: PUSH
11300: LD_INT 18
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: ST_TO_ADDR
11307: GO 11310
11309: POP
11310: GO 11566
11312: LD_INT 46
11314: DOUBLE
11315: GREATEREQUAL
11316: IFFALSE 11324
11318: LD_INT 85
11320: DOUBLE
11321: LESSEQUAL
11322: IFTRUE 11326
11324: GO 11533
11326: POP
// case rand ( 1 , 100 ) of 1 .. 5 :
11327: LD_INT 1
11329: PPUSH
11330: LD_INT 100
11332: PPUSH
11333: CALL_OW 12
11337: PUSH
11338: LD_INT 1
11340: DOUBLE
11341: GREATEREQUAL
11342: IFFALSE 11350
11344: LD_INT 5
11346: DOUBLE
11347: LESSEQUAL
11348: IFTRUE 11352
11350: GO 11370
11352: POP
// ar := [ Ar2Base1 , Ar1Base1 ] ; 6 .. 15 :
11353: LD_ADDR_VAR 0 3
11357: PUSH
11358: LD_INT 15
11360: PUSH
11361: LD_INT 19
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: ST_TO_ADDR
11368: GO 11531
11370: LD_INT 6
11372: DOUBLE
11373: GREATEREQUAL
11374: IFFALSE 11382
11376: LD_INT 15
11378: DOUBLE
11379: LESSEQUAL
11380: IFTRUE 11384
11382: GO 11402
11384: POP
// ar := [ Ar2Base2 , Ar1Base2 ] ; 16 .. 30 :
11385: LD_ADDR_VAR 0 3
11389: PUSH
11390: LD_INT 14
11392: PUSH
11393: LD_INT 20
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: ST_TO_ADDR
11400: GO 11531
11402: LD_INT 16
11404: DOUBLE
11405: GREATEREQUAL
11406: IFFALSE 11414
11408: LD_INT 30
11410: DOUBLE
11411: LESSEQUAL
11412: IFTRUE 11416
11414: GO 11434
11416: POP
// ar := [ Ar2Between , Ar1Between ] ; 31 .. 50 :
11417: LD_ADDR_VAR 0 3
11421: PUSH
11422: LD_INT 16
11424: PUSH
11425: LD_INT 22
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: ST_TO_ADDR
11432: GO 11531
11434: LD_INT 31
11436: DOUBLE
11437: GREATEREQUAL
11438: IFFALSE 11446
11440: LD_INT 50
11442: DOUBLE
11443: LESSEQUAL
11444: IFTRUE 11448
11446: GO 11466
11448: POP
// ar := [ Ar2Out2 , Ar1Out2 ] ; 51 .. 75 :
11449: LD_ADDR_VAR 0 3
11453: PUSH
11454: LD_INT 17
11456: PUSH
11457: LD_INT 23
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: ST_TO_ADDR
11464: GO 11531
11466: LD_INT 51
11468: DOUBLE
11469: GREATEREQUAL
11470: IFFALSE 11478
11472: LD_INT 75
11474: DOUBLE
11475: LESSEQUAL
11476: IFTRUE 11480
11478: GO 11498
11480: POP
// ar := [ Ar2Out1 , Ar1Out1 ] ; 76 .. 100 :
11481: LD_ADDR_VAR 0 3
11485: PUSH
11486: LD_INT 13
11488: PUSH
11489: LD_INT 21
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: ST_TO_ADDR
11496: GO 11531
11498: LD_INT 76
11500: DOUBLE
11501: GREATEREQUAL
11502: IFFALSE 11510
11504: LD_INT 100
11506: DOUBLE
11507: LESSEQUAL
11508: IFTRUE 11512
11510: GO 11530
11512: POP
// ar := [ Ar2Out3 , Ar1Out3 ] ; end ; 86 .. 100 :
11513: LD_ADDR_VAR 0 3
11517: PUSH
11518: LD_INT 18
11520: PUSH
11521: LD_INT 24
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: ST_TO_ADDR
11528: GO 11531
11530: POP
11531: GO 11566
11533: LD_INT 86
11535: DOUBLE
11536: GREATEREQUAL
11537: IFFALSE 11545
11539: LD_INT 100
11541: DOUBLE
11542: LESSEQUAL
11543: IFTRUE 11547
11545: GO 11565
11547: POP
// ar := [ valley , valley ] ; end ;
11548: LD_ADDR_VAR 0 3
11552: PUSH
11553: LD_INT 12
11555: PUSH
11556: LD_INT 12
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: ST_TO_ADDR
11563: GO 11566
11565: POP
// arr1 := arr1 ^ [ ar [ 1 ] ] ;
11566: LD_ADDR_LOC 14
11570: PUSH
11571: LD_LOC 14
11575: PUSH
11576: LD_VAR 0 3
11580: PUSH
11581: LD_INT 1
11583: ARRAY
11584: PUSH
11585: EMPTY
11586: LIST
11587: ADD
11588: ST_TO_ADDR
// arr2 := arr2 ^ [ ar [ 2 ] ] ;
11589: LD_ADDR_LOC 15
11593: PUSH
11594: LD_LOC 15
11598: PUSH
11599: LD_VAR 0 3
11603: PUSH
11604: LD_INT 2
11606: ARRAY
11607: PUSH
11608: EMPTY
11609: LIST
11610: ADD
11611: ST_TO_ADDR
// end ;
11612: GO 11077
11614: POP
11615: POP
// for i := 1 to max_arriving_times div 2 do
11616: LD_ADDR_VAR 0 2
11620: PUSH
11621: DOUBLE
11622: LD_INT 1
11624: DEC
11625: ST_TO_ADDR
11626: LD_EXP 33
11630: PUSH
11631: LD_INT 2
11633: DIV
11634: PUSH
11635: FOR_TO
11636: IFFALSE 11748
// begin p1 := Rand ( 1 , max_arriving_times ) ;
11638: LD_ADDR_VAR 0 4
11642: PUSH
11643: LD_INT 1
11645: PPUSH
11646: LD_EXP 33
11650: PPUSH
11651: CALL_OW 12
11655: ST_TO_ADDR
// p2 := Rand ( 1 , max_arriving_times ) ;
11656: LD_ADDR_VAR 0 5
11660: PUSH
11661: LD_INT 1
11663: PPUSH
11664: LD_EXP 33
11668: PPUSH
11669: CALL_OW 12
11673: ST_TO_ADDR
// pom1 := arr2 [ p1 ] ;
11674: LD_ADDR_VAR 0 6
11678: PUSH
11679: LD_LOC 15
11683: PUSH
11684: LD_VAR 0 4
11688: ARRAY
11689: ST_TO_ADDR
// pom2 := arr2 [ p2 ] ;
11690: LD_ADDR_VAR 0 7
11694: PUSH
11695: LD_LOC 15
11699: PUSH
11700: LD_VAR 0 5
11704: ARRAY
11705: ST_TO_ADDR
// arr2 := Replace ( Replace ( arr2 , p2 , pom1 ) , p1 , pom2 ) ;
11706: LD_ADDR_LOC 15
11710: PUSH
11711: LD_LOC 15
11715: PPUSH
11716: LD_VAR 0 5
11720: PPUSH
11721: LD_VAR 0 6
11725: PPUSH
11726: CALL_OW 1
11730: PPUSH
11731: LD_VAR 0 4
11735: PPUSH
11736: LD_VAR 0 7
11740: PPUSH
11741: CALL_OW 1
11745: ST_TO_ADDR
// end ;
11746: GO 11635
11748: POP
11749: POP
// end ;
11750: LD_VAR 0 1
11754: RET
// every 0 0$1 do
11755: GO 11757
11757: DISABLE
// begin if not max_arriving_times then
11758: LD_EXP 33
11762: NOT
11763: IFFALSE 11767
// exit ;
11765: GO 11850
// if tick >= max_arriving_times [ 1 ] * 0 0$30 then
11767: LD_OWVAR 1
11771: PUSH
11772: LD_EXP 33
11776: PUSH
11777: LD_INT 1
11779: ARRAY
11780: PUSH
11781: LD_INT 1050
11783: MUL
11784: GREATEREQUAL
11785: IFFALSE 11849
// begin new1 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11787: LD_ADDR_LOC 12
11791: PUSH
11792: LD_INT 1
11794: PPUSH
11795: LD_EXP 33
11799: PUSH
11800: LD_INT 1050
11802: MUL
11803: PPUSH
11804: CALL_OW 12
11808: ST_TO_ADDR
// new2 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11809: LD_ADDR_LOC 13
11813: PUSH
11814: LD_INT 1
11816: PPUSH
11817: LD_EXP 33
11821: PUSH
11822: LD_INT 1050
11824: MUL
11825: PPUSH
11826: CALL_OW 12
11830: ST_TO_ADDR
// max_arriving_times := delete ( max_arriving_times , 1 ) ;
11831: LD_ADDR_EXP 33
11835: PUSH
11836: LD_EXP 33
11840: PPUSH
11841: LD_INT 1
11843: PPUSH
11844: CALL_OW 3
11848: ST_TO_ADDR
// end ; enable ;
11849: ENABLE
// end ;
11850: END
// function new_arrival ( pos ) ; var hum ; begin
11851: LD_INT 0
11853: PPUSH
11854: PPUSH
// if def_people_loyality then
11855: LD_EXP 12
11859: IFFALSE 11901
// begin uc_side := second_side [ pos ] ;
11861: LD_ADDR_OWVAR 20
11865: PUSH
11866: LD_EXP 46
11870: PUSH
11871: LD_VAR 0 1
11875: ARRAY
11876: ST_TO_ADDR
// uc_nation := Side_Nations [ positions [ pos ] ] ;
11877: LD_ADDR_OWVAR 21
11881: PUSH
11882: LD_EXP 44
11886: PUSH
11887: LD_EXP 39
11891: PUSH
11892: LD_VAR 0 1
11896: ARRAY
11897: ARRAY
11898: ST_TO_ADDR
// end else
11899: GO 11921
// begin uc_side := second_side ;
11901: LD_ADDR_OWVAR 20
11905: PUSH
11906: LD_EXP 46
11910: ST_TO_ADDR
// uc_nation := third_nation ;
11911: LD_ADDR_OWVAR 21
11915: PUSH
11916: LD_EXP 47
11920: ST_TO_ADDR
// end ; PrepareHuman ( 0 , 0 , initial_level + 1 ) ;
11921: LD_INT 0
11923: PPUSH
11924: LD_INT 0
11926: PPUSH
11927: LD_EXP 29
11931: PUSH
11932: LD_INT 1
11934: PLUS
11935: PPUSH
11936: CALL_OW 380
// hc_class := class_soldier ;
11940: LD_ADDR_OWVAR 28
11944: PUSH
11945: LD_INT 1
11947: ST_TO_ADDR
// hum := CreateHuman ;
11948: LD_ADDR_VAR 0 3
11952: PUSH
11953: CALL_OW 44
11957: ST_TO_ADDR
// if pos = 1 then
11958: LD_VAR 0 1
11962: PUSH
11963: LD_INT 1
11965: EQUAL
11966: IFFALSE 12009
// begin PlaceUnitArea ( hum , arr1 [ 1 ] , true ) ;
11968: LD_VAR 0 3
11972: PPUSH
11973: LD_LOC 14
11977: PUSH
11978: LD_INT 1
11980: ARRAY
11981: PPUSH
11982: LD_INT 1
11984: PPUSH
11985: CALL_OW 49
// arr1 := delete ( arr1 , 1 ) ;
11989: LD_ADDR_LOC 14
11993: PUSH
11994: LD_LOC 14
11998: PPUSH
11999: LD_INT 1
12001: PPUSH
12002: CALL_OW 3
12006: ST_TO_ADDR
// end else
12007: GO 12048
// begin PlaceUnitArea ( hum , arr2 [ 1 ] , true ) ;
12009: LD_VAR 0 3
12013: PPUSH
12014: LD_LOC 15
12018: PUSH
12019: LD_INT 1
12021: ARRAY
12022: PPUSH
12023: LD_INT 1
12025: PPUSH
12026: CALL_OW 49
// arr2 := delete ( arr2 , 1 ) ;
12030: LD_ADDR_LOC 15
12034: PUSH
12035: LD_LOC 15
12039: PPUSH
12040: LD_INT 1
12042: PPUSH
12043: CALL_OW 3
12047: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) until IsPlaced ( hum ) ;
12048: LD_INT 35
12050: PPUSH
12051: CALL_OW 67
12055: LD_VAR 0 3
12059: PPUSH
12060: CALL_OW 305
12064: IFFALSE 12048
// if def_people_loyality then
12066: LD_EXP 12
12070: IFFALSE 12130
// if pos = 1 then
12072: LD_VAR 0 1
12076: PUSH
12077: LD_INT 1
12079: EQUAL
12080: IFFALSE 12100
// free1 := free1 ^ hum else
12082: LD_ADDR_LOC 10
12086: PUSH
12087: LD_LOC 10
12091: PUSH
12092: LD_VAR 0 3
12096: ADD
12097: ST_TO_ADDR
12098: GO 12128
// if pos = 2 then
12100: LD_VAR 0 1
12104: PUSH
12105: LD_INT 2
12107: EQUAL
12108: IFFALSE 12128
// free2 := free2 ^ hum else
12110: LD_ADDR_LOC 11
12114: PUSH
12115: LD_LOC 11
12119: PUSH
12120: LD_VAR 0 3
12124: ADD
12125: ST_TO_ADDR
12126: GO 12128
// else
12128: GO 12146
// free := free ^ hum ;
12130: LD_ADDR_LOC 9
12134: PUSH
12135: LD_LOC 9
12139: PUSH
12140: LD_VAR 0 3
12144: ADD
12145: ST_TO_ADDR
// end ;
12146: LD_VAR 0 2
12150: RET
// every 0 0$0.5 trigger new1 do var d ;
12151: LD_LOC 12
12155: IFFALSE 12188
12157: GO 12159
12159: DISABLE
12160: LD_INT 0
12162: PPUSH
// begin enable ;
12163: ENABLE
// new1 := 0 ;
12164: LD_ADDR_LOC 12
12168: PUSH
12169: LD_INT 0
12171: ST_TO_ADDR
// wait ( d ) ;
12172: LD_VAR 0 1
12176: PPUSH
12177: CALL_OW 67
// new_arrival ( 1 ) ;
12181: LD_INT 1
12183: PPUSH
12184: CALL 11851 0 1
// end ;
12188: PPOPN 1
12190: END
// every 0 0$0.5 trigger new2 do var d ;
12191: LD_LOC 13
12195: IFFALSE 12228
12197: GO 12199
12199: DISABLE
12200: LD_INT 0
12202: PPUSH
// begin enable ;
12203: ENABLE
// new2 := 0 ;
12204: LD_ADDR_LOC 13
12208: PUSH
12209: LD_INT 0
12211: ST_TO_ADDR
// wait ( d ) ;
12212: LD_VAR 0 1
12216: PPUSH
12217: CALL_OW 67
// new_arrival ( 2 ) ;
12221: LD_INT 2
12223: PPUSH
12224: CALL 11851 0 1
// end ;
12228: PPOPN 1
12230: END
// function check_one_side ( un , side ) ; begin
12231: LD_INT 0
12233: PPUSH
// if FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , side ] , [ f_dist , un , 3 ] ] ) then
12234: LD_INT 21
12236: PUSH
12237: LD_INT 1
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 22
12246: PUSH
12247: LD_VAR 0 2
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: LD_INT 91
12258: PUSH
12259: LD_VAR 0 1
12263: PUSH
12264: LD_INT 3
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: LIST
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: PPUSH
12277: CALL_OW 69
12281: IFFALSE 12295
// result := side else
12283: LD_ADDR_VAR 0 3
12287: PUSH
12288: LD_VAR 0 2
12292: ST_TO_ADDR
12293: GO 12303
// result := 0 ;
12295: LD_ADDR_VAR 0 3
12299: PUSH
12300: LD_INT 0
12302: ST_TO_ADDR
// end ;
12303: LD_VAR 0 3
12307: RET
// function check_two_sides ( un , side1 , side2 ) ; var un1 , s1 , s2 ; begin
12308: LD_INT 0
12310: PPUSH
12311: PPUSH
12312: PPUSH
12313: PPUSH
// s1 := 0 ;
12314: LD_ADDR_VAR 0 6
12318: PUSH
12319: LD_INT 0
12321: ST_TO_ADDR
// s2 := 0 ;
12322: LD_ADDR_VAR 0 7
12326: PUSH
12327: LD_INT 0
12329: ST_TO_ADDR
// for un1 in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_dist , un , 3 ] ] ) do
12330: LD_ADDR_VAR 0 5
12334: PUSH
12335: LD_INT 21
12337: PUSH
12338: LD_INT 1
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 91
12347: PUSH
12348: LD_VAR 0 1
12352: PUSH
12353: LD_INT 3
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: LIST
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PPUSH
12365: CALL_OW 69
12369: PUSH
12370: FOR_IN
12371: IFFALSE 12439
// begin if GetSide ( un1 ) = side1 then
12373: LD_VAR 0 5
12377: PPUSH
12378: CALL_OW 255
12382: PUSH
12383: LD_VAR 0 2
12387: EQUAL
12388: IFFALSE 12406
// s1 := s1 + 1 else
12390: LD_ADDR_VAR 0 6
12394: PUSH
12395: LD_VAR 0 6
12399: PUSH
12400: LD_INT 1
12402: PLUS
12403: ST_TO_ADDR
12404: GO 12437
// if GetSide ( un1 ) = side2 then
12406: LD_VAR 0 5
12410: PPUSH
12411: CALL_OW 255
12415: PUSH
12416: LD_VAR 0 3
12420: EQUAL
12421: IFFALSE 12437
// s2 := s2 + 1 ;
12423: LD_ADDR_VAR 0 7
12427: PUSH
12428: LD_VAR 0 7
12432: PUSH
12433: LD_INT 1
12435: PLUS
12436: ST_TO_ADDR
// end ;
12437: GO 12370
12439: POP
12440: POP
// if s1 = s2 then
12441: LD_VAR 0 6
12445: PUSH
12446: LD_VAR 0 7
12450: EQUAL
12451: IFFALSE 12463
// result := 0 else
12453: LD_ADDR_VAR 0 4
12457: PUSH
12458: LD_INT 0
12460: ST_TO_ADDR
12461: GO 12493
// if s1 > s2 then
12463: LD_VAR 0 6
12467: PUSH
12468: LD_VAR 0 7
12472: GREATER
12473: IFFALSE 12485
// result := 1 else
12475: LD_ADDR_VAR 0 4
12479: PUSH
12480: LD_INT 1
12482: ST_TO_ADDR
12483: GO 12493
// result := 2 ;
12485: LD_ADDR_VAR 0 4
12489: PUSH
12490: LD_INT 2
12492: ST_TO_ADDR
// end ;
12493: LD_VAR 0 4
12497: RET
// every 0 0$2 do var un ;
12498: GO 12500
12500: DISABLE
12501: LD_INT 0
12503: PPUSH
// begin if def_people_loyality then
12504: LD_EXP 12
12508: IFFALSE 12887
// if not fog_info then
12510: LD_EXP 35
12514: NOT
12515: IFFALSE 12703
// begin if your_side then
12517: LD_OWVAR 2
12521: IFFALSE 12701
// if side_positions [ your_side ] = 1 then
12523: LD_EXP 43
12527: PUSH
12528: LD_OWVAR 2
12532: ARRAY
12533: PUSH
12534: LD_INT 1
12536: EQUAL
12537: IFFALSE 12613
// begin un := UnitFilter ( free1 diff seenby1 , [ f_see , your_side ] ) ;
12539: LD_ADDR_VAR 0 1
12543: PUSH
12544: LD_LOC 10
12548: PUSH
12549: LD_LOC 16
12553: DIFF
12554: PPUSH
12555: LD_INT 101
12557: PUSH
12558: LD_OWVAR 2
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PPUSH
12567: CALL_OW 72
12571: ST_TO_ADDR
// if un then
12572: LD_VAR 0 1
12576: IFFALSE 12611
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12578: LD_VAR 0 1
12582: PUSH
12583: LD_INT 1
12585: ARRAY
12586: PPUSH
12587: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12591: LD_ADDR_LOC 16
12595: PUSH
12596: LD_LOC 16
12600: PUSH
12601: LD_VAR 0 1
12605: PUSH
12606: LD_INT 1
12608: ARRAY
12609: ADD
12610: ST_TO_ADDR
// end ; end else
12611: GO 12701
// if side_positions [ your_side ] = 2 then
12613: LD_EXP 43
12617: PUSH
12618: LD_OWVAR 2
12622: ARRAY
12623: PUSH
12624: LD_INT 2
12626: EQUAL
12627: IFFALSE 12701
// begin un := UnitFilter ( free2 diff seenby2 , [ f_see , your_side ] ) ;
12629: LD_ADDR_VAR 0 1
12633: PUSH
12634: LD_LOC 11
12638: PUSH
12639: LD_LOC 17
12643: DIFF
12644: PPUSH
12645: LD_INT 101
12647: PUSH
12648: LD_OWVAR 2
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PPUSH
12657: CALL_OW 72
12661: ST_TO_ADDR
// if un then
12662: LD_VAR 0 1
12666: IFFALSE 12701
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12668: LD_VAR 0 1
12672: PUSH
12673: LD_INT 1
12675: ARRAY
12676: PPUSH
12677: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
12681: LD_ADDR_LOC 17
12685: PUSH
12686: LD_LOC 17
12690: PUSH
12691: LD_VAR 0 1
12695: PUSH
12696: LD_INT 1
12698: ARRAY
12699: ADD
12700: ST_TO_ADDR
// end ; end ; end else
12701: GO 12887
// begin if your_side then
12703: LD_OWVAR 2
12707: IFFALSE 12887
// if side_positions [ your_side ] = 1 then
12709: LD_EXP 43
12713: PUSH
12714: LD_OWVAR 2
12718: ARRAY
12719: PUSH
12720: LD_INT 1
12722: EQUAL
12723: IFFALSE 12799
// begin un := UnitFilter ( free diff seenby1 , [ f_see , your_side ] ) ;
12725: LD_ADDR_VAR 0 1
12729: PUSH
12730: LD_LOC 9
12734: PUSH
12735: LD_LOC 16
12739: DIFF
12740: PPUSH
12741: LD_INT 101
12743: PUSH
12744: LD_OWVAR 2
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PPUSH
12753: CALL_OW 72
12757: ST_TO_ADDR
// if un then
12758: LD_VAR 0 1
12762: IFFALSE 12797
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12764: LD_VAR 0 1
12768: PUSH
12769: LD_INT 1
12771: ARRAY
12772: PPUSH
12773: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12777: LD_ADDR_LOC 16
12781: PUSH
12782: LD_LOC 16
12786: PUSH
12787: LD_VAR 0 1
12791: PUSH
12792: LD_INT 1
12794: ARRAY
12795: ADD
12796: ST_TO_ADDR
// end ; end else
12797: GO 12887
// if side_positions [ your_side ] = 2 then
12799: LD_EXP 43
12803: PUSH
12804: LD_OWVAR 2
12808: ARRAY
12809: PUSH
12810: LD_INT 2
12812: EQUAL
12813: IFFALSE 12887
// begin un := UnitFilter ( free diff seenby2 , [ f_see , your_side ] ) ;
12815: LD_ADDR_VAR 0 1
12819: PUSH
12820: LD_LOC 9
12824: PUSH
12825: LD_LOC 17
12829: DIFF
12830: PPUSH
12831: LD_INT 101
12833: PUSH
12834: LD_OWVAR 2
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: PPUSH
12843: CALL_OW 72
12847: ST_TO_ADDR
// if un then
12848: LD_VAR 0 1
12852: IFFALSE 12887
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12854: LD_VAR 0 1
12858: PUSH
12859: LD_INT 1
12861: ARRAY
12862: PPUSH
12863: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
12867: LD_ADDR_LOC 17
12871: PUSH
12872: LD_LOC 17
12876: PUSH
12877: LD_VAR 0 1
12881: PUSH
12882: LD_INT 1
12884: ARRAY
12885: ADD
12886: ST_TO_ADDR
// end ; end ; end ; enable ;
12887: ENABLE
// end ;
12888: PPOPN 1
12890: END
// every 0 0$0.5 do var un , s ;
12891: GO 12893
12893: DISABLE
12894: LD_INT 0
12896: PPUSH
12897: PPUSH
// begin if def_people_loyality then
12898: LD_EXP 12
12902: IFFALSE 13108
// begin for un in free1 do
12904: LD_ADDR_VAR 0 1
12908: PUSH
12909: LD_LOC 10
12913: PUSH
12914: FOR_IN
12915: IFFALSE 13003
// if not IsLive ( un ) then
12917: LD_VAR 0 1
12921: PPUSH
12922: CALL_OW 300
12926: NOT
12927: IFFALSE 12947
// free1 := free1 diff un else
12929: LD_ADDR_LOC 10
12933: PUSH
12934: LD_LOC 10
12938: PUSH
12939: LD_VAR 0 1
12943: DIFF
12944: ST_TO_ADDR
12945: GO 13001
// if check_one_side ( un , positions [ 1 ] ) then
12947: LD_VAR 0 1
12951: PPUSH
12952: LD_EXP 39
12956: PUSH
12957: LD_INT 1
12959: ARRAY
12960: PPUSH
12961: CALL 12231 0 2
12965: IFFALSE 13001
// begin SetSide ( un , positions [ 1 ] ) ;
12967: LD_VAR 0 1
12971: PPUSH
12972: LD_EXP 39
12976: PUSH
12977: LD_INT 1
12979: ARRAY
12980: PPUSH
12981: CALL_OW 235
// free1 := free1 diff un ;
12985: LD_ADDR_LOC 10
12989: PUSH
12990: LD_LOC 10
12994: PUSH
12995: LD_VAR 0 1
12999: DIFF
13000: ST_TO_ADDR
// end ;
13001: GO 12914
13003: POP
13004: POP
// for un in free2 do
13005: LD_ADDR_VAR 0 1
13009: PUSH
13010: LD_LOC 11
13014: PUSH
13015: FOR_IN
13016: IFFALSE 13104
// if not IsLive ( un ) then
13018: LD_VAR 0 1
13022: PPUSH
13023: CALL_OW 300
13027: NOT
13028: IFFALSE 13048
// free2 := free2 diff un else
13030: LD_ADDR_LOC 11
13034: PUSH
13035: LD_LOC 11
13039: PUSH
13040: LD_VAR 0 1
13044: DIFF
13045: ST_TO_ADDR
13046: GO 13102
// if check_one_side ( un , positions [ 2 ] ) then
13048: LD_VAR 0 1
13052: PPUSH
13053: LD_EXP 39
13057: PUSH
13058: LD_INT 2
13060: ARRAY
13061: PPUSH
13062: CALL 12231 0 2
13066: IFFALSE 13102
// begin SetSide ( un , positions [ 2 ] ) ;
13068: LD_VAR 0 1
13072: PPUSH
13073: LD_EXP 39
13077: PUSH
13078: LD_INT 2
13080: ARRAY
13081: PPUSH
13082: CALL_OW 235
// free2 := free2 diff un ;
13086: LD_ADDR_LOC 11
13090: PUSH
13091: LD_LOC 11
13095: PUSH
13096: LD_VAR 0 1
13100: DIFF
13101: ST_TO_ADDR
// end ;
13102: GO 13015
13104: POP
13105: POP
// end else
13106: GO 13230
// begin for un in free do
13108: LD_ADDR_VAR 0 1
13112: PUSH
13113: LD_LOC 9
13117: PUSH
13118: FOR_IN
13119: IFFALSE 13228
// if not IsLive ( un ) then
13121: LD_VAR 0 1
13125: PPUSH
13126: CALL_OW 300
13130: NOT
13131: IFFALSE 13151
// free := free diff un else
13133: LD_ADDR_LOC 9
13137: PUSH
13138: LD_LOC 9
13142: PUSH
13143: LD_VAR 0 1
13147: DIFF
13148: ST_TO_ADDR
13149: GO 13226
// begin s := check_two_sides ( un , positions [ 1 ] , positions [ 2 ] ) ;
13151: LD_ADDR_VAR 0 2
13155: PUSH
13156: LD_VAR 0 1
13160: PPUSH
13161: LD_EXP 39
13165: PUSH
13166: LD_INT 1
13168: ARRAY
13169: PPUSH
13170: LD_EXP 39
13174: PUSH
13175: LD_INT 2
13177: ARRAY
13178: PPUSH
13179: CALL 12308 0 3
13183: ST_TO_ADDR
// if s then
13184: LD_VAR 0 2
13188: IFFALSE 13226
// begin SetSide ( un , positions [ s ] ) ;
13190: LD_VAR 0 1
13194: PPUSH
13195: LD_EXP 39
13199: PUSH
13200: LD_VAR 0 2
13204: ARRAY
13205: PPUSH
13206: CALL_OW 235
// free := free diff un ;
13210: LD_ADDR_LOC 9
13214: PUSH
13215: LD_LOC 9
13219: PUSH
13220: LD_VAR 0 1
13224: DIFF
13225: ST_TO_ADDR
// end ; end ;
13226: GO 13118
13228: POP
13229: POP
// end ; enable ;
13230: ENABLE
// end ; end_of_file
13231: PPOPN 2
13233: END
// export Game_Type , def_game_rules ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
13234: LD_INT 0
13236: PPUSH
13237: PPUSH
// if ( not IAmSpec ) then
13238: CALL_OW 531
13242: NOT
13243: IFFALSE 13259
// Result := Limits_Info ^  ;
13245: LD_ADDR_VAR 0 1
13249: PUSH
13250: LD_LOC 25
13254: PUSH
13255: LD_STRING 
13257: ADD
13258: ST_TO_ADDR
// for i := 1 to 8 do
13259: LD_ADDR_VAR 0 2
13263: PUSH
13264: DOUBLE
13265: LD_INT 1
13267: DEC
13268: ST_TO_ADDR
13269: LD_INT 8
13271: PUSH
13272: FOR_TO
13273: IFFALSE 13318
// if Cheaters [ i ] then
13275: LD_LOC 26
13279: PUSH
13280: LD_VAR 0 2
13284: ARRAY
13285: IFFALSE 13316
// Result := Result ^ [ #Cheater , i , i ] ;
13287: LD_ADDR_VAR 0 1
13291: PUSH
13292: LD_VAR 0 1
13296: PUSH
13297: LD_STRING #Cheater
13299: PUSH
13300: LD_VAR 0 2
13304: PUSH
13305: LD_VAR 0 2
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: LIST
13314: ADD
13315: ST_TO_ADDR
13316: GO 13272
13318: POP
13319: POP
// end ;
13320: LD_VAR 0 1
13324: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
13325: LD_INT 0
13327: PPUSH
13328: PPUSH
13329: PPUSH
13330: PPUSH
13331: PPUSH
// case Game_Type of 10 :
13332: LD_EXP 64
13336: PUSH
13337: LD_INT 10
13339: DOUBLE
13340: EQUAL
13341: IFTRUE 13345
13343: GO 13356
13345: POP
// def_game_rules := 1 ; 11 :
13346: LD_ADDR_EXP 65
13350: PUSH
13351: LD_INT 1
13353: ST_TO_ADDR
13354: GO 13376
13356: LD_INT 11
13358: DOUBLE
13359: EQUAL
13360: IFTRUE 13364
13362: GO 13375
13364: POP
// def_game_rules := 3 ; end ;
13365: LD_ADDR_EXP 65
13369: PUSH
13370: LD_INT 3
13372: ST_TO_ADDR
13373: GO 13376
13375: POP
// case def_game_rules of 0 :
13376: LD_EXP 65
13380: PUSH
13381: LD_INT 0
13383: DOUBLE
13384: EQUAL
13385: IFTRUE 13389
13387: GO 13394
13389: POP
// exit ; 1 :
13390: GO 14002
13392: GO 13902
13394: LD_INT 1
13396: DOUBLE
13397: EQUAL
13398: IFTRUE 13402
13400: GO 13634
13402: POP
// begin def_main_base = 1 ;
13403: LD_ADDR_EXP 1
13407: PUSH
13408: LD_INT 1
13410: ST_TO_ADDR
// def_secondary_base = 0 ;
13411: LD_ADDR_EXP 2
13415: PUSH
13416: LD_INT 0
13418: ST_TO_ADDR
// def_defence_level = 1 ;
13419: LD_ADDR_EXP 3
13423: PUSH
13424: LD_INT 1
13426: ST_TO_ADDR
// def_amount_of_people = 2 ;
13427: LD_ADDR_EXP 4
13431: PUSH
13432: LD_INT 2
13434: ST_TO_ADDR
// def_initial_level = 1 ;
13435: LD_ADDR_EXP 5
13439: PUSH
13440: LD_INT 1
13442: ST_TO_ADDR
// def_main_deposits = 2 ;
13443: LD_ADDR_EXP 6
13447: PUSH
13448: LD_INT 2
13450: ST_TO_ADDR
// def_secondary_deposits = 1 ;
13451: LD_ADDR_EXP 7
13455: PUSH
13456: LD_INT 1
13458: ST_TO_ADDR
// def_siberite_detection = 1 ;
13459: LD_ADDR_EXP 8
13463: PUSH
13464: LD_INT 1
13466: ST_TO_ADDR
// def_starting_resources = 2 ;
13467: LD_ADDR_EXP 9
13471: PUSH
13472: LD_INT 2
13474: ST_TO_ADDR
// def_shipments_density = 1 ;
13475: LD_ADDR_EXP 10
13479: PUSH
13480: LD_INT 1
13482: ST_TO_ADDR
// def_people_arrivals = 0 ;
13483: LD_ADDR_EXP 11
13487: PUSH
13488: LD_INT 0
13490: ST_TO_ADDR
// def_people_loyality = 0 ;
13491: LD_ADDR_EXP 12
13495: PUSH
13496: LD_INT 0
13498: ST_TO_ADDR
// def_people_info = 0 ;
13499: LD_ADDR_EXP 13
13503: PUSH
13504: LD_INT 0
13506: ST_TO_ADDR
// def_morale_flags = 1 ;
13507: LD_ADDR_EXP 14
13511: PUSH
13512: LD_INT 1
13514: ST_TO_ADDR
// def_siberite_bomb = 0 ;
13515: LD_ADDR_EXP 15
13519: PUSH
13520: LD_INT 0
13522: ST_TO_ADDR
// def_builduptime = 2 ;
13523: LD_ADDR_EXP 17
13527: PUSH
13528: LD_INT 2
13530: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
13531: LD_ADDR_VAR 0 2
13535: PUSH
13536: EMPTY
13537: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13538: LD_ADDR_VAR 0 3
13542: PUSH
13543: EMPTY
13544: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13545: LD_ADDR_LOC 20
13549: PUSH
13550: EMPTY
13551: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13552: LD_ADDR_LOC 21
13556: PUSH
13557: EMPTY
13558: ST_TO_ADDR
// Banned_Controls := [ ] ;
13559: LD_ADDR_LOC 22
13563: PUSH
13564: EMPTY
13565: ST_TO_ADDR
// Banned_Engines := [ ] ;
13566: LD_ADDR_LOC 23
13570: PUSH
13571: EMPTY
13572: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13573: LD_ADDR_LOC 18
13577: PUSH
13578: LD_INT 37
13580: PUSH
13581: EMPTY
13582: LIST
13583: PUSH
13584: LD_INT 4
13586: PUSH
13587: LD_INT 5
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 31
13596: PUSH
13597: LD_INT 32
13599: PUSH
13600: LD_INT 33
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: LIST
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: LIST
13612: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
13613: LD_ADDR_LOC 19
13617: PUSH
13618: LD_INT 2
13620: PUSH
13621: LD_INT 2
13623: PUSH
13624: LD_INT 4
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: LIST
13631: ST_TO_ADDR
// end ; 3 :
13632: GO 13902
13634: LD_INT 3
13636: DOUBLE
13637: EQUAL
13638: IFTRUE 13642
13640: GO 13901
13642: POP
// begin def_main_base = 1 ;
13643: LD_ADDR_EXP 1
13647: PUSH
13648: LD_INT 1
13650: ST_TO_ADDR
// def_secondary_base = 0 ;
13651: LD_ADDR_EXP 2
13655: PUSH
13656: LD_INT 0
13658: ST_TO_ADDR
// def_defence_level = 0 ;
13659: LD_ADDR_EXP 3
13663: PUSH
13664: LD_INT 0
13666: ST_TO_ADDR
// def_amount_of_people = 2 ;
13667: LD_ADDR_EXP 4
13671: PUSH
13672: LD_INT 2
13674: ST_TO_ADDR
// def_initial_level = 3 ;
13675: LD_ADDR_EXP 5
13679: PUSH
13680: LD_INT 3
13682: ST_TO_ADDR
// def_main_deposits = 2 ;
13683: LD_ADDR_EXP 6
13687: PUSH
13688: LD_INT 2
13690: ST_TO_ADDR
// def_secondary_deposits = 1 ;
13691: LD_ADDR_EXP 7
13695: PUSH
13696: LD_INT 1
13698: ST_TO_ADDR
// def_siberite_detection = 1 ;
13699: LD_ADDR_EXP 8
13703: PUSH
13704: LD_INT 1
13706: ST_TO_ADDR
// def_starting_resources = 3 ;
13707: LD_ADDR_EXP 9
13711: PUSH
13712: LD_INT 3
13714: ST_TO_ADDR
// def_shipments_density = 1 ;
13715: LD_ADDR_EXP 10
13719: PUSH
13720: LD_INT 1
13722: ST_TO_ADDR
// def_people_arrivals = 0 ;
13723: LD_ADDR_EXP 11
13727: PUSH
13728: LD_INT 0
13730: ST_TO_ADDR
// def_people_loyality = 0 ;
13731: LD_ADDR_EXP 12
13735: PUSH
13736: LD_INT 0
13738: ST_TO_ADDR
// def_people_info = 0 ;
13739: LD_ADDR_EXP 13
13743: PUSH
13744: LD_INT 0
13746: ST_TO_ADDR
// def_morale_flags = 0 ;
13747: LD_ADDR_EXP 14
13751: PUSH
13752: LD_INT 0
13754: ST_TO_ADDR
// def_siberite_bomb = 0 ;
13755: LD_ADDR_EXP 15
13759: PUSH
13760: LD_INT 0
13762: ST_TO_ADDR
// def_builduptime = 1 ;
13763: LD_ADDR_EXP 17
13767: PUSH
13768: LD_INT 1
13770: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
13771: LD_ADDR_VAR 0 2
13775: PUSH
13776: LD_INT 23
13778: PUSH
13779: EMPTY
13780: LIST
13781: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
13782: LD_ADDR_VAR 0 3
13786: PUSH
13787: LD_INT 2
13789: PUSH
13790: LD_INT 37
13792: PUSH
13793: LD_INT 32
13795: PUSH
13796: LD_INT 33
13798: PUSH
13799: LD_INT 36
13801: PUSH
13802: LD_INT 16
13804: PUSH
13805: LD_INT 23
13807: PUSH
13808: LD_INT 21
13810: PUSH
13811: LD_INT 18
13813: PUSH
13814: LD_INT 22
13816: PUSH
13817: LD_INT 20
13819: PUSH
13820: LD_INT 19
13822: PUSH
13823: LD_INT 25
13825: PUSH
13826: LD_INT 17
13828: PUSH
13829: LD_INT 24
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13849: LD_ADDR_LOC 20
13853: PUSH
13854: EMPTY
13855: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13856: LD_ADDR_LOC 21
13860: PUSH
13861: EMPTY
13862: ST_TO_ADDR
// Banned_Controls := [ ] ;
13863: LD_ADDR_LOC 22
13867: PUSH
13868: EMPTY
13869: ST_TO_ADDR
// Banned_Engines := [ ] ;
13870: LD_ADDR_LOC 23
13874: PUSH
13875: EMPTY
13876: ST_TO_ADDR
// Restricted_Builds := [ ] ;
13877: LD_ADDR_LOC 18
13881: PUSH
13882: EMPTY
13883: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
13884: LD_ADDR_LOC 19
13888: PUSH
13889: EMPTY
13890: ST_TO_ADDR
// No_Mechs := true ;
13891: LD_ADDR_EXP 66
13895: PUSH
13896: LD_INT 1
13898: ST_TO_ADDR
// end ; end ;
13899: GO 13902
13901: POP
// for i := 1 to 8 do
13902: LD_ADDR_VAR 0 4
13906: PUSH
13907: DOUBLE
13908: LD_INT 1
13910: DEC
13911: ST_TO_ADDR
13912: LD_INT 8
13914: PUSH
13915: FOR_TO
13916: IFFALSE 14000
// if Side_Positions [ i ] then
13918: LD_EXP 43
13922: PUSH
13923: LD_VAR 0 4
13927: ARRAY
13928: IFFALSE 13998
// begin for j in Unavailable_Techs do
13930: LD_ADDR_VAR 0 5
13934: PUSH
13935: LD_VAR 0 2
13939: PUSH
13940: FOR_IN
13941: IFFALSE 13962
// SetTech ( j , i , 0 ) ;
13943: LD_VAR 0 5
13947: PPUSH
13948: LD_VAR 0 4
13952: PPUSH
13953: LD_INT 0
13955: PPUSH
13956: CALL_OW 322
13960: GO 13940
13962: POP
13963: POP
// for j in Unavailable_Builds do
13964: LD_ADDR_VAR 0 5
13968: PUSH
13969: LD_VAR 0 3
13973: PUSH
13974: FOR_IN
13975: IFFALSE 13996
// SetRestrict ( j , i , 0 ) ;
13977: LD_VAR 0 5
13981: PPUSH
13982: LD_VAR 0 4
13986: PPUSH
13987: LD_INT 0
13989: PPUSH
13990: CALL_OW 324
13994: GO 13974
13996: POP
13997: POP
// end ;
13998: GO 13915
14000: POP
14001: POP
// end ;
14002: LD_VAR 0 1
14006: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
14007: LD_INT 0
14009: PPUSH
14010: PPUSH
14011: PPUSH
14012: PPUSH
14013: PPUSH
14014: PPUSH
14015: PPUSH
// for i := 1 to Restricted_Builds do
14016: LD_ADDR_VAR 0 2
14020: PUSH
14021: DOUBLE
14022: LD_INT 1
14024: DEC
14025: ST_TO_ADDR
14026: LD_LOC 18
14030: PUSH
14031: FOR_TO
14032: IFFALSE 14342
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
14034: LD_LOC 18
14038: PUSH
14039: LD_VAR 0 2
14043: ARRAY
14044: PUSH
14045: LD_INT 1
14047: ARRAY
14048: PUSH
14049: LD_INT 31
14051: DOUBLE
14052: EQUAL
14053: IFTRUE 14069
14055: LD_INT 32
14057: DOUBLE
14058: EQUAL
14059: IFTRUE 14069
14061: LD_INT 33
14063: DOUBLE
14064: EQUAL
14065: IFTRUE 14069
14067: GO 14080
14069: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
14070: LD_ADDR_VAR 0 6
14074: PUSH
14075: LD_STRING #Turrets
14077: ST_TO_ADDR
14078: GO 14125
14080: LD_INT 4
14082: DOUBLE
14083: EQUAL
14084: IFTRUE 14094
14086: LD_INT 5
14088: DOUBLE
14089: EQUAL
14090: IFTRUE 14094
14092: GO 14105
14094: POP
// btype := #Armouries ; b_Behemoth :
14095: LD_ADDR_VAR 0 6
14099: PUSH
14100: LD_STRING #Armouries
14102: ST_TO_ADDR
14103: GO 14125
14105: LD_INT 37
14107: DOUBLE
14108: EQUAL
14109: IFTRUE 14113
14111: GO 14124
14113: POP
// btype := #Behemoths ; end ;
14114: LD_ADDR_VAR 0 6
14118: PUSH
14119: LD_STRING #Behemoths
14121: ST_TO_ADDR
14122: GO 14125
14124: POP
// list := [ ] ;
14125: LD_ADDR_VAR 0 7
14129: PUSH
14130: EMPTY
14131: ST_TO_ADDR
// for j := 1 to 8 do
14132: LD_ADDR_VAR 0 3
14136: PUSH
14137: DOUBLE
14138: LD_INT 1
14140: DEC
14141: ST_TO_ADDR
14142: LD_INT 8
14144: PUSH
14145: FOR_TO
14146: IFFALSE 14239
// if Side_Positions [ j ] then
14148: LD_EXP 43
14152: PUSH
14153: LD_VAR 0 3
14157: ARRAY
14158: IFFALSE 14237
// begin amount := 0 ;
14160: LD_ADDR_VAR 0 5
14164: PUSH
14165: LD_INT 0
14167: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
14168: LD_ADDR_VAR 0 4
14172: PUSH
14173: LD_LOC 18
14177: PUSH
14178: LD_VAR 0 2
14182: ARRAY
14183: PUSH
14184: FOR_IN
14185: IFFALSE 14233
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
14187: LD_ADDR_VAR 0 5
14191: PUSH
14192: LD_VAR 0 5
14196: PUSH
14197: LD_INT 22
14199: PUSH
14200: LD_VAR 0 3
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 30
14211: PUSH
14212: LD_VAR 0 4
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PPUSH
14225: CALL_OW 69
14229: PLUS
14230: ST_TO_ADDR
14231: GO 14184
14233: POP
14234: POP
// break ;
14235: GO 14239
// end ;
14237: GO 14145
14239: POP
14240: POP
// list := [ ] ;
14241: LD_ADDR_VAR 0 7
14245: PUSH
14246: EMPTY
14247: ST_TO_ADDR
// for j := 1 to 8 do
14248: LD_ADDR_VAR 0 3
14252: PUSH
14253: DOUBLE
14254: LD_INT 1
14256: DEC
14257: ST_TO_ADDR
14258: LD_INT 8
14260: PUSH
14261: FOR_TO
14262: IFFALSE 14282
// list := list ^ amount ;
14264: LD_ADDR_VAR 0 7
14268: PUSH
14269: LD_VAR 0 7
14273: PUSH
14274: LD_VAR 0 5
14278: ADD
14279: ST_TO_ADDR
14280: GO 14261
14282: POP
14283: POP
// Already_Built := Already_Built ^ [ list ] ;
14284: LD_ADDR_LOC 24
14288: PUSH
14289: LD_LOC 24
14293: PUSH
14294: LD_VAR 0 7
14298: PUSH
14299: EMPTY
14300: LIST
14301: ADD
14302: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
14303: LD_ADDR_LOC 25
14307: PUSH
14308: LD_LOC 25
14312: PUSH
14313: LD_VAR 0 6
14317: PUSH
14318: LD_VAR 0 5
14322: PUSH
14323: LD_LOC 19
14327: PUSH
14328: LD_VAR 0 2
14332: ARRAY
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: LIST
14338: ADD
14339: ST_TO_ADDR
// end ;
14340: GO 14031
14342: POP
14343: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14344: LD_ADDR_LOC 26
14348: PUSH
14349: LD_INT 0
14351: PUSH
14352: LD_INT 0
14354: PUSH
14355: LD_INT 0
14357: PUSH
14358: LD_INT 0
14360: PUSH
14361: LD_INT 0
14363: PUSH
14364: LD_INT 0
14366: PUSH
14367: LD_INT 0
14369: PUSH
14370: LD_INT 0
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: ST_TO_ADDR
// if Limits_Info then
14383: LD_LOC 25
14387: IFFALSE 14403
// Limits_Info := #Limits ^ Limits_Info ;
14389: LD_ADDR_LOC 25
14393: PUSH
14394: LD_STRING #Limits
14396: PUSH
14397: LD_LOC 25
14401: ADD
14402: ST_TO_ADDR
// end ;
14403: LD_VAR 0 1
14407: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
14408: LD_INT 0
14410: PPUSH
14411: PPUSH
14412: PPUSH
14413: PPUSH
// for i := 1 to Restricted_Builds do
14414: LD_ADDR_VAR 0 7
14418: PUSH
14419: DOUBLE
14420: LD_INT 1
14422: DEC
14423: ST_TO_ADDR
14424: LD_LOC 18
14428: PUSH
14429: FOR_TO
14430: IFFALSE 14853
// if BType in Restricted_Builds [ i ] then
14432: LD_VAR 0 2
14436: PUSH
14437: LD_LOC 18
14441: PUSH
14442: LD_VAR 0 7
14446: ARRAY
14447: IN
14448: IFFALSE 14851
// begin if old_side then
14450: LD_VAR 0 4
14454: IFFALSE 14580
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
14456: LD_LOC 24
14460: PUSH
14461: LD_VAR 0 7
14465: ARRAY
14466: PUSH
14467: LD_VAR 0 3
14471: ARRAY
14472: PUSH
14473: LD_VAR 0 5
14477: PLUS
14478: PUSH
14479: LD_LOC 19
14483: PUSH
14484: LD_VAR 0 7
14488: ARRAY
14489: GREATER
14490: IFFALSE 14516
// begin SetSide ( un , old_side ) ;
14492: LD_VAR 0 1
14496: PPUSH
14497: LD_VAR 0 4
14501: PPUSH
14502: CALL_OW 235
// count := 0 ;
14506: LD_ADDR_VAR 0 5
14510: PUSH
14511: LD_INT 0
14513: ST_TO_ADDR
// end else
14514: GO 14580
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
14516: LD_ADDR_LOC 24
14520: PUSH
14521: LD_LOC 24
14525: PPUSH
14526: LD_VAR 0 7
14530: PPUSH
14531: LD_LOC 24
14535: PUSH
14536: LD_VAR 0 7
14540: ARRAY
14541: PPUSH
14542: LD_VAR 0 4
14546: PPUSH
14547: LD_LOC 24
14551: PUSH
14552: LD_VAR 0 7
14556: ARRAY
14557: PUSH
14558: LD_VAR 0 4
14562: ARRAY
14563: PUSH
14564: LD_VAR 0 5
14568: MINUS
14569: PPUSH
14570: CALL_OW 1
14574: PPUSH
14575: CALL_OW 1
14579: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
14580: LD_ADDR_LOC 24
14584: PUSH
14585: LD_LOC 24
14589: PPUSH
14590: LD_VAR 0 7
14594: PPUSH
14595: LD_LOC 24
14599: PUSH
14600: LD_VAR 0 7
14604: ARRAY
14605: PPUSH
14606: LD_VAR 0 3
14610: PPUSH
14611: LD_LOC 24
14615: PUSH
14616: LD_VAR 0 7
14620: ARRAY
14621: PUSH
14622: LD_VAR 0 3
14626: ARRAY
14627: PUSH
14628: LD_VAR 0 5
14632: PLUS
14633: PPUSH
14634: CALL_OW 1
14638: PPUSH
14639: CALL_OW 1
14643: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
14644: LD_VAR 0 5
14648: PUSH
14649: LD_INT 0
14651: NONEQUAL
14652: PUSH
14653: LD_VAR 0 3
14657: PUSH
14658: LD_OWVAR 2
14662: EQUAL
14663: AND
14664: IFFALSE 14707
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
14666: LD_ADDR_LOC 25
14670: PUSH
14671: LD_LOC 25
14675: PPUSH
14676: LD_INT 3
14678: PUSH
14679: LD_VAR 0 7
14683: MUL
14684: PPUSH
14685: LD_LOC 24
14689: PUSH
14690: LD_VAR 0 7
14694: ARRAY
14695: PUSH
14696: LD_VAR 0 3
14700: ARRAY
14701: PPUSH
14702: CALL_OW 1
14706: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
14707: LD_LOC 24
14711: PUSH
14712: LD_VAR 0 7
14716: ARRAY
14717: PUSH
14718: LD_VAR 0 3
14722: ARRAY
14723: PUSH
14724: LD_LOC 19
14728: PUSH
14729: LD_VAR 0 7
14733: ARRAY
14734: GREATER
14735: IFFALSE 14762
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
14737: LD_ADDR_LOC 26
14741: PUSH
14742: LD_LOC 26
14746: PPUSH
14747: LD_VAR 0 3
14751: PPUSH
14752: LD_INT 1
14754: PPUSH
14755: CALL_OW 1
14759: ST_TO_ADDR
// end else
14760: GO 14849
// begin for j := 1 to Restricted_Builds do
14762: LD_ADDR_VAR 0 8
14766: PUSH
14767: DOUBLE
14768: LD_INT 1
14770: DEC
14771: ST_TO_ADDR
14772: LD_LOC 18
14776: PUSH
14777: FOR_TO
14778: IFFALSE 14822
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
14780: LD_LOC 24
14784: PUSH
14785: LD_VAR 0 8
14789: ARRAY
14790: PUSH
14791: LD_VAR 0 3
14795: ARRAY
14796: PUSH
14797: LD_LOC 19
14801: PUSH
14802: LD_VAR 0 8
14806: ARRAY
14807: GREATER
14808: IFFALSE 14820
// begin Is_Cheater := true ;
14810: LD_ADDR_VAR 0 9
14814: PUSH
14815: LD_INT 1
14817: ST_TO_ADDR
// break ;
14818: GO 14822
// end ;
14820: GO 14777
14822: POP
14823: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
14824: LD_ADDR_LOC 26
14828: PUSH
14829: LD_LOC 26
14833: PPUSH
14834: LD_VAR 0 3
14838: PPUSH
14839: LD_VAR 0 9
14843: PPUSH
14844: CALL_OW 1
14848: ST_TO_ADDR
// end ; break ;
14849: GO 14853
// end ;
14851: GO 14429
14853: POP
14854: POP
// end ;
14855: LD_VAR 0 6
14859: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
14860: LD_VAR 0 5
14864: PUSH
14865: LD_LOC 20
14869: IN
14870: PUSH
14871: LD_VAR 0 2
14875: PUSH
14876: LD_LOC 21
14880: IN
14881: OR
14882: PUSH
14883: LD_VAR 0 4
14887: PUSH
14888: LD_LOC 22
14892: IN
14893: OR
14894: PUSH
14895: LD_VAR 0 3
14899: PUSH
14900: LD_LOC 23
14904: IN
14905: OR
14906: IFFALSE 14917
// ComCancel ( factory ) ;
14908: LD_VAR 0 1
14912: PPUSH
14913: CALL_OW 127
// end ;
14917: PPOPN 5
14919: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
14920: LD_VAR 0 2
14924: PUSH
14925: LD_LOC 20
14929: IN
14930: IFFALSE 14941
// ComCancel ( building ) ;
14932: LD_VAR 0 1
14936: PPUSH
14937: CALL_OW 127
// end ; end_of_file
14941: PPOPN 2
14943: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
14944: LD_INT 0
14946: PPUSH
14947: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
14948: LD_ADDR_VAR 0 2
14952: PUSH
14953: LD_STRING #Multi1x1-Time
14955: PUSH
14956: LD_OWVAR 1
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: ST_TO_ADDR
// if WaitServerStrings then
14965: LD_EXP 68
14969: IFFALSE 14987
// AllStrings = AllStrings ^ WaitServerStrings ;
14971: LD_ADDR_VAR 0 2
14975: PUSH
14976: LD_VAR 0 2
14980: PUSH
14981: LD_EXP 68
14985: ADD
14986: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
14987: LD_INT 0
14989: PUSH
14990: LD_EXP 38
14994: PUSH
14995: LD_OWVAR 1
14999: MINUS
15000: LESSEQUAL
15001: IFFALSE 15032
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
15003: LD_ADDR_VAR 0 2
15007: PUSH
15008: LD_VAR 0 2
15012: PUSH
15013: LD_STRING #allowedsibbomb
15015: PUSH
15016: LD_EXP 38
15020: PUSH
15021: LD_OWVAR 1
15025: MINUS
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: ADD
15031: ST_TO_ADDR
// if ( ExtraStrings ) then
15032: LD_EXP 67
15036: IFFALSE 15058
// AllStrings := AllStrings ^  ^ ExtraStrings ;
15038: LD_ADDR_VAR 0 2
15042: PUSH
15043: LD_VAR 0 2
15047: PUSH
15048: LD_STRING 
15050: ADD
15051: PUSH
15052: LD_EXP 67
15056: ADD
15057: ST_TO_ADDR
// if ( LimitsStrings ) then
15058: CALL 13234 0 0
15062: IFFALSE 15084
// AllStrings := AllStrings ^  ^ LimitsStrings ;
15064: LD_ADDR_VAR 0 2
15068: PUSH
15069: LD_VAR 0 2
15073: PUSH
15074: LD_STRING 
15076: ADD
15077: PUSH
15078: CALL 13234 0 0
15082: ADD
15083: ST_TO_ADDR
// Display_Strings := AllStrings ;
15084: LD_ADDR_OWVAR 47
15088: PUSH
15089: LD_VAR 0 2
15093: ST_TO_ADDR
// end ;
15094: LD_VAR 0 1
15098: RET
// every 0 0$1 do
15099: GO 15101
15101: DISABLE
// begin ShowTimer ;
15102: CALL 14944 0 0
// enable ;
15106: ENABLE
// end ; end_of_file
15107: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
15108: LD_INT 0
15110: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
15111: LD_VAR 0 1
15115: PPUSH
15116: CALL_OW 255
15120: PUSH
15121: LD_VAR 0 4
15125: EQUAL
15126: IFFALSE 15145
// begin SetAchievement ( ACH_RAD ) ;
15128: LD_STRING ACH_RAD
15130: PPUSH
15131: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
15135: LD_STRING ACH_NL
15137: PPUSH
15138: LD_INT 1
15140: PPUSH
15141: CALL_OW 564
// end end ;
15145: LD_VAR 0 5
15149: RET
// export function SA_Win ( side ) ; begin
15150: LD_INT 0
15152: PPUSH
// case side of 1 :
15153: LD_VAR 0 1
15157: PUSH
15158: LD_INT 1
15160: DOUBLE
15161: EQUAL
15162: IFTRUE 15166
15164: GO 15179
15166: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
15167: LD_STRING ACH_AH
15169: PPUSH
15170: LD_INT 1
15172: PPUSH
15173: CALL_OW 564
15177: GO 15342
15179: LD_INT 2
15181: DOUBLE
15182: EQUAL
15183: IFTRUE 15187
15185: GO 15200
15187: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
15188: LD_STRING ACH_E
15190: PPUSH
15191: LD_INT 1
15193: PPUSH
15194: CALL_OW 564
15198: GO 15342
15200: LD_INT 3
15202: DOUBLE
15203: EQUAL
15204: IFTRUE 15208
15206: GO 15221
15208: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
15209: LD_STRING ACH_OOL
15211: PPUSH
15212: LD_INT 1
15214: PPUSH
15215: CALL_OW 564
15219: GO 15342
15221: LD_INT 1
15223: PUSH
15224: LD_INT 2
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: DOUBLE
15231: EQUAL
15232: IFTRUE 15236
15234: GO 15261
15236: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
15237: LD_STRING ACH_AH
15239: PPUSH
15240: LD_REAL  5.00000000000000E-0001
15243: PPUSH
15244: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
15248: LD_STRING ACH_E
15250: PPUSH
15251: LD_REAL  5.00000000000000E-0001
15254: PPUSH
15255: CALL_OW 564
// end ; [ 2 , 3 ] :
15259: GO 15342
15261: LD_INT 2
15263: PUSH
15264: LD_INT 3
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: DOUBLE
15271: EQUAL
15272: IFTRUE 15276
15274: GO 15301
15276: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
15277: LD_STRING ACH_OOL
15279: PPUSH
15280: LD_REAL  5.00000000000000E-0001
15283: PPUSH
15284: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
15288: LD_STRING ACH_E
15290: PPUSH
15291: LD_REAL  5.00000000000000E-0001
15294: PPUSH
15295: CALL_OW 564
// end ; [ 3 , 1 ] :
15299: GO 15342
15301: LD_INT 3
15303: PUSH
15304: LD_INT 1
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: DOUBLE
15311: EQUAL
15312: IFTRUE 15316
15314: GO 15341
15316: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
15317: LD_STRING ACH_AH
15319: PPUSH
15320: LD_REAL  5.00000000000000E-0001
15323: PPUSH
15324: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
15328: LD_STRING ACH_OOL
15330: PPUSH
15331: LD_REAL  5.00000000000000E-0001
15334: PPUSH
15335: CALL_OW 564
// end ; end ;
15339: GO 15342
15341: POP
// end ; end_of_file
15342: LD_VAR 0 2
15346: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
15347: LD_INT 0
15349: PPUSH
15350: PPUSH
// enable ( 98 ) ;
15351: LD_INT 98
15353: ENABLE_MARKED
// GameEnded = false ;
15354: LD_ADDR_LOC 28
15358: PUSH
15359: LD_INT 0
15361: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15362: LD_ADDR_LOC 27
15366: PUSH
15367: LD_INT 0
15369: PUSH
15370: LD_INT 0
15372: PUSH
15373: LD_INT 0
15375: PUSH
15376: LD_INT 0
15378: PUSH
15379: LD_INT 0
15381: PUSH
15382: LD_INT 0
15384: PUSH
15385: LD_INT 0
15387: PUSH
15388: LD_INT 0
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: ST_TO_ADDR
// unfoged = false ;
15401: LD_ADDR_LOC 29
15405: PUSH
15406: LD_INT 0
15408: ST_TO_ADDR
// defeated_specs := [ ] ;
15409: LD_ADDR_LOC 30
15413: PUSH
15414: EMPTY
15415: ST_TO_ADDR
// for i = 1 to side_positions do
15416: LD_ADDR_VAR 0 2
15420: PUSH
15421: DOUBLE
15422: LD_INT 1
15424: DEC
15425: ST_TO_ADDR
15426: LD_EXP 43
15430: PUSH
15431: FOR_TO
15432: IFFALSE 15472
// if not side_positions [ i ] then
15434: LD_EXP 43
15438: PUSH
15439: LD_VAR 0 2
15443: ARRAY
15444: NOT
15445: IFFALSE 15470
// defeated = replace ( defeated , i , true ) ;
15447: LD_ADDR_LOC 27
15451: PUSH
15452: LD_LOC 27
15456: PPUSH
15457: LD_VAR 0 2
15461: PPUSH
15462: LD_INT 1
15464: PPUSH
15465: CALL_OW 1
15469: ST_TO_ADDR
15470: GO 15431
15472: POP
15473: POP
// end ;
15474: LD_VAR 0 1
15478: RET
// function CanWinLoose ; begin
15479: LD_INT 0
15481: PPUSH
// Result := true ;
15482: LD_ADDR_VAR 0 1
15486: PUSH
15487: LD_INT 1
15489: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
15490: CALL_OW 518
15494: PUSH
15495: CALL_OW 519
15499: PUSH
15500: LD_INT 0
15502: GREATER
15503: AND
15504: IFFALSE 15514
// Result := false ;
15506: LD_ADDR_VAR 0 1
15510: PUSH
15511: LD_INT 0
15513: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
15514: CALL_OW 531
15518: PUSH
15519: CALL_OW 519
15523: PUSH
15524: LD_INT 1
15526: GREATER
15527: AND
15528: IFFALSE 15538
// Result := false ;
15530: LD_ADDR_VAR 0 1
15534: PUSH
15535: LD_INT 0
15537: ST_TO_ADDR
// end ;
15538: LD_VAR 0 1
15542: RET
// export function HasPower ( i ) ; var k , h ; begin
15543: LD_INT 0
15545: PPUSH
15546: PPUSH
15547: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
15548: LD_VAR 0 1
15552: PPUSH
15553: CALL_OW 108
15557: NOT
15558: PUSH
15559: LD_EXP 42
15563: PUSH
15564: LD_VAR 0 1
15568: ARRAY
15569: NOT
15570: AND
15571: PUSH
15572: LD_OWVAR 4
15576: AND
15577: IFFALSE 15589
// begin result = false ;
15579: LD_ADDR_VAR 0 2
15583: PUSH
15584: LD_INT 0
15586: ST_TO_ADDR
// end else
15587: GO 15884
// case def_win_rules of 0 :
15589: LD_EXP 18
15593: PUSH
15594: LD_INT 0
15596: DOUBLE
15597: EQUAL
15598: IFTRUE 15602
15600: GO 15765
15602: POP
// if def_people_respawning then
15603: LD_EXP 19
15607: IFFALSE 15698
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
15609: LD_ADDR_VAR 0 2
15613: PUSH
15614: LD_INT 22
15616: PUSH
15617: LD_VAR 0 1
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 2
15628: PUSH
15629: LD_INT 21
15631: PUSH
15632: LD_INT 1
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: LD_INT 33
15641: PUSH
15642: LD_INT 3
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 33
15651: PUSH
15652: LD_INT 5
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: LD_INT 30
15661: PUSH
15662: LD_INT 0
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 30
15671: PUSH
15672: LD_INT 1
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PPUSH
15691: CALL_OW 69
15695: ST_TO_ADDR
15696: GO 15763
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
15698: LD_ADDR_VAR 0 2
15702: PUSH
15703: LD_INT 22
15705: PUSH
15706: LD_VAR 0 1
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: LD_INT 2
15717: PUSH
15718: LD_INT 21
15720: PUSH
15721: LD_INT 1
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 33
15730: PUSH
15731: LD_INT 3
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: LD_INT 33
15740: PUSH
15741: LD_INT 5
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PPUSH
15758: CALL_OW 69
15762: ST_TO_ADDR
15763: GO 15884
15765: LD_INT 1
15767: DOUBLE
15768: EQUAL
15769: IFTRUE 15773
15771: GO 15812
15773: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
15774: LD_ADDR_VAR 0 2
15778: PUSH
15779: LD_INT 22
15781: PUSH
15782: LD_VAR 0 1
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 21
15793: PUSH
15794: LD_INT 1
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PPUSH
15805: CALL_OW 69
15809: ST_TO_ADDR
15810: GO 15884
15812: LD_INT 2
15814: DOUBLE
15815: EQUAL
15816: IFTRUE 15820
15818: GO 15883
15820: POP
// begin h = false ;
15821: LD_ADDR_VAR 0 4
15825: PUSH
15826: LD_INT 0
15828: ST_TO_ADDR
// for k in heroes [ i ] do
15829: LD_ADDR_VAR 0 3
15833: PUSH
15834: LD_EXP 56
15838: PUSH
15839: LD_VAR 0 1
15843: ARRAY
15844: PUSH
15845: FOR_IN
15846: IFFALSE 15869
// if IsLive ( k ) then
15848: LD_VAR 0 3
15852: PPUSH
15853: CALL_OW 300
15857: IFFALSE 15867
// h = true ;
15859: LD_ADDR_VAR 0 4
15863: PUSH
15864: LD_INT 1
15866: ST_TO_ADDR
15867: GO 15845
15869: POP
15870: POP
// Result := h ;
15871: LD_ADDR_VAR 0 2
15875: PUSH
15876: LD_VAR 0 4
15880: ST_TO_ADDR
// end ; end ;
15881: GO 15884
15883: POP
// end ;
15884: LD_VAR 0 2
15888: RET
// function AlliedSides ( i , j ) ; begin
15889: LD_INT 0
15891: PPUSH
// Result := false ;
15892: LD_ADDR_VAR 0 3
15896: PUSH
15897: LD_INT 0
15899: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
15900: LD_VAR 0 1
15904: PPUSH
15905: LD_VAR 0 2
15909: PPUSH
15910: CALL_OW 81
15914: PUSH
15915: LD_INT 1
15917: EQUAL
15918: PUSH
15919: LD_VAR 0 2
15923: PPUSH
15924: LD_VAR 0 1
15928: PPUSH
15929: CALL_OW 81
15933: PUSH
15934: LD_INT 1
15936: EQUAL
15937: AND
15938: PUSH
15939: LD_VAR 0 1
15943: PPUSH
15944: CALL_OW 83
15948: AND
15949: PUSH
15950: LD_VAR 0 2
15954: PPUSH
15955: CALL_OW 83
15959: AND
15960: IFFALSE 15970
// Result := true ;
15962: LD_ADDR_VAR 0 3
15966: PUSH
15967: LD_INT 1
15969: ST_TO_ADDR
// end ;
15970: LD_VAR 0 3
15974: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
15975: CALL 15479 0 0
15979: PUSH
15980: LD_LOC 28
15984: NOT
15985: AND
15986: IFFALSE 16002
15988: GO 15990
15990: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
15991: LD_ADDR_EXP 68
15995: PUSH
15996: LD_STRING #Player-Ended
15998: PUSH
15999: EMPTY
16000: LIST
16001: ST_TO_ADDR
16002: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
16003: CALL 15479 0 0
16007: PUSH
16008: LD_LOC 28
16012: AND
16013: IFFALSE 16022
16015: GO 16017
16017: DISABLE
// YouLostInMultiplayer ;
16018: CALL_OW 107
16022: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
16023: CALL 15479 0 0
16027: NOT
16028: PUSH
16029: CALL_OW 531
16033: NOT
16034: AND
16035: IFFALSE 16051
16037: GO 16039
16039: DISABLE
// WaitServerStrings = [ #server-wait ] ;
16040: LD_ADDR_EXP 68
16044: PUSH
16045: LD_STRING #server-wait
16047: PUSH
16048: EMPTY
16049: LIST
16050: ST_TO_ADDR
16051: END
// every 100 trigger IAmSpec do
16052: CALL_OW 531
16056: IFFALSE 16072
16058: GO 16060
16060: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
16061: LD_ADDR_EXP 68
16065: PUSH
16066: LD_STRING #Player-IAmSpec
16068: PUSH
16069: EMPTY
16070: LIST
16071: ST_TO_ADDR
16072: END
// every 100 trigger GameEnded and IAmSpec do
16073: LD_LOC 28
16077: PUSH
16078: CALL_OW 531
16082: AND
16083: IFFALSE 16092
16085: GO 16087
16087: DISABLE
// YouLostInMultiplayer ;
16088: CALL_OW 107
16092: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
16093: CALL 15479 0 0
16097: PUSH
16098: LD_LOC 28
16102: NOT
16103: AND
16104: IFFALSE 16120
16106: GO 16108
16108: DISABLE
// WaitServerStrings = [ $player-win ] ;
16109: LD_ADDR_EXP 68
16113: PUSH
16114: LD_STRING $player-win
16116: PUSH
16117: EMPTY
16118: LIST
16119: ST_TO_ADDR
16120: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
16121: CALL 15479 0 0
16125: PUSH
16126: LD_LOC 28
16130: AND
16131: IFFALSE 16155
16133: GO 16135
16135: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
16136: LD_EXP 44
16140: PUSH
16141: LD_OWVAR 7
16145: ARRAY
16146: PPUSH
16147: CALL 15150 0 1
// YouWinInMultiplayer ;
16151: CALL_OW 106
// end ;
16155: END
// every 100 trigger isEditor marked 401 do
16156: LD_OWVAR 84
16160: IFFALSE 16176
16162: GO 16164
16164: DISABLE
// Debug_Strings = [ You won ] ;
16165: LD_ADDR_OWVAR 48
16169: PUSH
16170: LD_STRING You won
16172: PUSH
16173: EMPTY
16174: LIST
16175: ST_TO_ADDR
16176: END
// every 100 trigger isEditor marked 400 do
16177: LD_OWVAR 84
16181: IFFALSE 16197
16183: GO 16185
16185: DISABLE
// Debug_Strings = [ You loss ] ;
16186: LD_ADDR_OWVAR 48
16190: PUSH
16191: LD_STRING You loss
16193: PUSH
16194: EMPTY
16195: LIST
16196: ST_TO_ADDR
16197: END
// every 100 marked 98 do var i , un ;
16198: GO 16200
16200: DISABLE
16201: LD_INT 0
16203: PPUSH
16204: PPUSH
// begin for i = 1 to side_positions do
16205: LD_ADDR_VAR 0 1
16209: PUSH
16210: DOUBLE
16211: LD_INT 1
16213: DEC
16214: ST_TO_ADDR
16215: LD_EXP 43
16219: PUSH
16220: FOR_TO
16221: IFFALSE 16308
// begin if side_positions [ i ] then
16223: LD_EXP 43
16227: PUSH
16228: LD_VAR 0 1
16232: ARRAY
16233: IFFALSE 16306
// if not HasPower ( i ) and not defeated [ i ] then
16235: LD_VAR 0 1
16239: PPUSH
16240: CALL 15543 0 1
16244: NOT
16245: PUSH
16246: LD_LOC 27
16250: PUSH
16251: LD_VAR 0 1
16255: ARRAY
16256: NOT
16257: AND
16258: IFFALSE 16306
// begin defeated = replace ( defeated , i , true ) ;
16260: LD_ADDR_LOC 27
16264: PUSH
16265: LD_LOC 27
16269: PPUSH
16270: LD_VAR 0 1
16274: PPUSH
16275: LD_INT 1
16277: PPUSH
16278: CALL_OW 1
16282: ST_TO_ADDR
// if i = mp_player_side then
16283: LD_VAR 0 1
16287: PUSH
16288: LD_OWVAR 7
16292: EQUAL
16293: IFFALSE 16306
// begin Multiplayer_Loose_Message ;
16295: CALL_OW 521
// SetPlayerSpectator ( ) ;
16299: CALL_OW 572
// enable ( 400 ) ;
16303: LD_INT 400
16305: ENABLE_MARKED
// end ; end ; end ;
16306: GO 16220
16308: POP
16309: POP
// DidGameEnd ;
16310: CALL 16325 0 0
// if not GameEnded then
16314: LD_LOC 28
16318: NOT
16319: IFFALSE 16322
// enable ;
16321: ENABLE
// end ;
16322: PPOPN 2
16324: END
// function DidGameEnd ; var i , k , enemy ; begin
16325: LD_INT 0
16327: PPUSH
16328: PPUSH
16329: PPUSH
16330: PPUSH
// enemy = [ ] ;
16331: LD_ADDR_VAR 0 4
16335: PUSH
16336: EMPTY
16337: ST_TO_ADDR
// for i = 1 to side_positions do
16338: LD_ADDR_VAR 0 2
16342: PUSH
16343: DOUBLE
16344: LD_INT 1
16346: DEC
16347: ST_TO_ADDR
16348: LD_EXP 43
16352: PUSH
16353: FOR_TO
16354: IFFALSE 16448
// if not defeated [ i ] then
16356: LD_LOC 27
16360: PUSH
16361: LD_VAR 0 2
16365: ARRAY
16366: NOT
16367: IFFALSE 16446
// for k = 1 to side_positions do
16369: LD_ADDR_VAR 0 3
16373: PUSH
16374: DOUBLE
16375: LD_INT 1
16377: DEC
16378: ST_TO_ADDR
16379: LD_EXP 43
16383: PUSH
16384: FOR_TO
16385: IFFALSE 16444
// if not defeated [ k ] then
16387: LD_LOC 27
16391: PUSH
16392: LD_VAR 0 3
16396: ARRAY
16397: NOT
16398: IFFALSE 16442
// if not AlliedSides ( i , k ) then
16400: LD_VAR 0 2
16404: PPUSH
16405: LD_VAR 0 3
16409: PPUSH
16410: CALL 15889 0 2
16414: NOT
16415: IFFALSE 16442
// enemy = enemy ^ [ i , k ] ;
16417: LD_ADDR_VAR 0 4
16421: PUSH
16422: LD_VAR 0 4
16426: PUSH
16427: LD_VAR 0 2
16431: PUSH
16432: LD_VAR 0 3
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: ADD
16441: ST_TO_ADDR
16442: GO 16384
16444: POP
16445: POP
16446: GO 16353
16448: POP
16449: POP
// if not enemy then
16450: LD_VAR 0 4
16454: NOT
16455: IFFALSE 16481
// begin GameEnded = true ;
16457: LD_ADDR_LOC 28
16461: PUSH
16462: LD_INT 1
16464: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
16465: LD_LOC 27
16469: PUSH
16470: LD_OWVAR 7
16474: ARRAY
16475: NOT
16476: IFFALSE 16481
// enable ( 401 ) ;
16478: LD_INT 401
16480: ENABLE_MARKED
// end ; end ;
16481: LD_VAR 0 1
16485: RET
// function unfog ; var k , friends ; begin
16486: LD_INT 0
16488: PPUSH
16489: PPUSH
16490: PPUSH
// for k = 1 to side_positions do
16491: LD_ADDR_VAR 0 2
16495: PUSH
16496: DOUBLE
16497: LD_INT 1
16499: DEC
16500: ST_TO_ADDR
16501: LD_EXP 43
16505: PUSH
16506: FOR_TO
16507: IFFALSE 16563
// if not defeated [ k ] then
16509: LD_LOC 27
16513: PUSH
16514: LD_VAR 0 2
16518: ARRAY
16519: NOT
16520: IFFALSE 16561
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
16522: LD_OWVAR 7
16526: PPUSH
16527: LD_VAR 0 2
16531: PPUSH
16532: CALL_OW 81
16536: PUSH
16537: LD_INT 1
16539: PUSH
16540: EMPTY
16541: LIST
16542: IN
16543: IFFALSE 16561
// friends = friends ^ k ;
16545: LD_ADDR_VAR 0 3
16549: PUSH
16550: LD_VAR 0 3
16554: PUSH
16555: LD_VAR 0 2
16559: ADD
16560: ST_TO_ADDR
16561: GO 16506
16563: POP
16564: POP
// if not friends then
16565: LD_VAR 0 3
16569: NOT
16570: IFFALSE 16584
// begin SetPlayerSpectator ( ) ;
16572: CALL_OW 572
// unfoged = true ;
16576: LD_ADDR_LOC 29
16580: PUSH
16581: LD_INT 1
16583: ST_TO_ADDR
// end ; end ;
16584: LD_VAR 0 1
16588: RET
// export function MakeGameEnd ; begin
16589: LD_INT 0
16591: PPUSH
// SetPlayerSpectator ( ) ;
16592: CALL_OW 572
// unfoged = true ;
16596: LD_ADDR_LOC 29
16600: PUSH
16601: LD_INT 1
16603: ST_TO_ADDR
// wait ( 0 0$5 ) ;
16604: LD_INT 175
16606: PPUSH
16607: CALL_OW 67
// GameEnded = true ;
16611: LD_ADDR_LOC 28
16615: PUSH
16616: LD_INT 1
16618: ST_TO_ADDR
// end ;
16619: LD_VAR 0 1
16623: RET
// export function GetGameEnded ; begin
16624: LD_INT 0
16626: PPUSH
// result = GameEnded ;
16627: LD_ADDR_VAR 0 1
16631: PUSH
16632: LD_LOC 28
16636: ST_TO_ADDR
// end ; end_of_file
16637: LD_VAR 0 1
16641: RET
// export function SetMpTechs ( ) ; var side , i ; begin
16642: LD_INT 0
16644: PPUSH
16645: PPUSH
16646: PPUSH
// for side = 1 to 8 do
16647: LD_ADDR_VAR 0 2
16651: PUSH
16652: DOUBLE
16653: LD_INT 1
16655: DEC
16656: ST_TO_ADDR
16657: LD_INT 8
16659: PUSH
16660: FOR_TO
16661: IFFALSE 16782
// begin for i = 1 to 72 do
16663: LD_ADDR_VAR 0 3
16667: PUSH
16668: DOUBLE
16669: LD_INT 1
16671: DEC
16672: ST_TO_ADDR
16673: LD_INT 72
16675: PUSH
16676: FOR_TO
16677: IFFALSE 16708
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
16679: LD_VAR 0 3
16683: PPUSH
16684: LD_VAR 0 2
16688: PPUSH
16689: LD_INT 0
16691: PPUSH
16692: LD_VAR 0 3
16696: PPUSH
16697: CALL_OW 565
16701: PPUSH
16702: CALL_OW 322
16706: GO 16676
16708: POP
16709: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
16710: LD_INT 73
16712: PPUSH
16713: LD_VAR 0 2
16717: PPUSH
16718: LD_INT 0
16720: PPUSH
16721: LD_INT 25
16723: PPUSH
16724: CALL_OW 565
16728: PPUSH
16729: CALL_OW 322
// for i = 0 to 40 do
16733: LD_ADDR_VAR 0 3
16737: PUSH
16738: DOUBLE
16739: LD_INT 0
16741: DEC
16742: ST_TO_ADDR
16743: LD_INT 40
16745: PUSH
16746: FOR_TO
16747: IFFALSE 16778
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
16749: LD_VAR 0 3
16753: PPUSH
16754: LD_VAR 0 2
16758: PPUSH
16759: LD_INT 1
16761: PPUSH
16762: LD_VAR 0 3
16766: PPUSH
16767: CALL_OW 565
16771: PPUSH
16772: CALL_OW 324
16776: GO 16746
16778: POP
16779: POP
// end ;
16780: GO 16660
16782: POP
16783: POP
// end ;
16784: LD_VAR 0 1
16788: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
16789: LD_INT 0
16791: PPUSH
16792: PPUSH
16793: PPUSH
// for side = 1 to 8 do
16794: LD_ADDR_VAR 0 3
16798: PUSH
16799: DOUBLE
16800: LD_INT 1
16802: DEC
16803: ST_TO_ADDR
16804: LD_INT 8
16806: PUSH
16807: FOR_TO
16808: IFFALSE 20804
// begin for i = 1 to 73 do
16810: LD_ADDR_VAR 0 4
16814: PUSH
16815: DOUBLE
16816: LD_INT 1
16818: DEC
16819: ST_TO_ADDR
16820: LD_INT 73
16822: PUSH
16823: FOR_TO
16824: IFFALSE 16845
// SetTech ( i , side , state_disabled ) ;
16826: LD_VAR 0 4
16830: PPUSH
16831: LD_VAR 0 3
16835: PPUSH
16836: LD_INT 0
16838: PPUSH
16839: CALL_OW 322
16843: GO 16823
16845: POP
16846: POP
// for i = 0 to 40 do
16847: LD_ADDR_VAR 0 4
16851: PUSH
16852: DOUBLE
16853: LD_INT 0
16855: DEC
16856: ST_TO_ADDR
16857: LD_INT 40
16859: PUSH
16860: FOR_TO
16861: IFFALSE 16882
// SetRestrict ( i , side , false ) ;
16863: LD_VAR 0 4
16867: PPUSH
16868: LD_VAR 0 3
16872: PPUSH
16873: LD_INT 0
16875: PPUSH
16876: CALL_OW 324
16880: GO 16860
16882: POP
16883: POP
// case level of 1 :
16884: LD_VAR 0 1
16888: PUSH
16889: LD_INT 1
16891: DOUBLE
16892: EQUAL
16893: IFTRUE 16897
16895: GO 17050
16897: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16898: LD_INT 35
16900: PPUSH
16901: LD_VAR 0 3
16905: PPUSH
16906: LD_INT 1
16908: PPUSH
16909: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16913: LD_INT 45
16915: PPUSH
16916: LD_VAR 0 3
16920: PPUSH
16921: LD_INT 1
16923: PPUSH
16924: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16928: LD_INT 46
16930: PPUSH
16931: LD_VAR 0 3
16935: PPUSH
16936: LD_INT 1
16938: PPUSH
16939: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16943: LD_INT 47
16945: PPUSH
16946: LD_VAR 0 3
16950: PPUSH
16951: LD_INT 1
16953: PPUSH
16954: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16958: LD_INT 0
16960: PPUSH
16961: LD_VAR 0 3
16965: PPUSH
16966: LD_INT 1
16968: PPUSH
16969: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16973: LD_INT 2
16975: PPUSH
16976: LD_VAR 0 3
16980: PPUSH
16981: LD_INT 1
16983: PPUSH
16984: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16988: LD_INT 4
16990: PPUSH
16991: LD_VAR 0 3
16995: PPUSH
16996: LD_INT 1
16998: PPUSH
16999: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17003: LD_INT 6
17005: PPUSH
17006: LD_VAR 0 3
17010: PPUSH
17011: LD_INT 1
17013: PPUSH
17014: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17018: LD_INT 29
17020: PPUSH
17021: LD_VAR 0 3
17025: PPUSH
17026: LD_INT 1
17028: PPUSH
17029: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17033: LD_INT 31
17035: PPUSH
17036: LD_VAR 0 3
17040: PPUSH
17041: LD_INT 1
17043: PPUSH
17044: CALL_OW 324
// end ; 2 :
17048: GO 20802
17050: LD_INT 2
17052: DOUBLE
17053: EQUAL
17054: IFTRUE 17058
17056: GO 17256
17058: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17059: LD_INT 35
17061: PPUSH
17062: LD_VAR 0 3
17066: PPUSH
17067: LD_INT 1
17069: PPUSH
17070: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17074: LD_INT 45
17076: PPUSH
17077: LD_VAR 0 3
17081: PPUSH
17082: LD_INT 1
17084: PPUSH
17085: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17089: LD_INT 46
17091: PPUSH
17092: LD_VAR 0 3
17096: PPUSH
17097: LD_INT 1
17099: PPUSH
17100: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17104: LD_INT 47
17106: PPUSH
17107: LD_VAR 0 3
17111: PPUSH
17112: LD_INT 1
17114: PPUSH
17115: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17119: LD_INT 1
17121: PPUSH
17122: LD_VAR 0 3
17126: PPUSH
17127: LD_INT 1
17129: PPUSH
17130: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17134: LD_INT 2
17136: PPUSH
17137: LD_VAR 0 3
17141: PPUSH
17142: LD_INT 1
17144: PPUSH
17145: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17149: LD_INT 11
17151: PPUSH
17152: LD_VAR 0 3
17156: PPUSH
17157: LD_INT 1
17159: PPUSH
17160: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17164: LD_INT 0
17166: PPUSH
17167: LD_VAR 0 3
17171: PPUSH
17172: LD_INT 1
17174: PPUSH
17175: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17179: LD_INT 2
17181: PPUSH
17182: LD_VAR 0 3
17186: PPUSH
17187: LD_INT 1
17189: PPUSH
17190: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17194: LD_INT 4
17196: PPUSH
17197: LD_VAR 0 3
17201: PPUSH
17202: LD_INT 1
17204: PPUSH
17205: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17209: LD_INT 6
17211: PPUSH
17212: LD_VAR 0 3
17216: PPUSH
17217: LD_INT 1
17219: PPUSH
17220: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17224: LD_INT 29
17226: PPUSH
17227: LD_VAR 0 3
17231: PPUSH
17232: LD_INT 1
17234: PPUSH
17235: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17239: LD_INT 31
17241: PPUSH
17242: LD_VAR 0 3
17246: PPUSH
17247: LD_INT 1
17249: PPUSH
17250: CALL_OW 324
// end ; 3 :
17254: GO 20802
17256: LD_INT 3
17258: DOUBLE
17259: EQUAL
17260: IFTRUE 17264
17262: GO 17717
17264: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17265: LD_INT 35
17267: PPUSH
17268: LD_VAR 0 3
17272: PPUSH
17273: LD_INT 1
17275: PPUSH
17276: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17280: LD_INT 45
17282: PPUSH
17283: LD_VAR 0 3
17287: PPUSH
17288: LD_INT 1
17290: PPUSH
17291: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17295: LD_INT 46
17297: PPUSH
17298: LD_VAR 0 3
17302: PPUSH
17303: LD_INT 1
17305: PPUSH
17306: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17310: LD_INT 47
17312: PPUSH
17313: LD_VAR 0 3
17317: PPUSH
17318: LD_INT 1
17320: PPUSH
17321: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17325: LD_INT 1
17327: PPUSH
17328: LD_VAR 0 3
17332: PPUSH
17333: LD_INT 1
17335: PPUSH
17336: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17340: LD_INT 2
17342: PPUSH
17343: LD_VAR 0 3
17347: PPUSH
17348: LD_INT 1
17350: PPUSH
17351: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17355: LD_INT 11
17357: PPUSH
17358: LD_VAR 0 3
17362: PPUSH
17363: LD_INT 1
17365: PPUSH
17366: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17370: LD_INT 48
17372: PPUSH
17373: LD_VAR 0 3
17377: PPUSH
17378: LD_INT 1
17380: PPUSH
17381: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17385: LD_INT 69
17387: PPUSH
17388: LD_VAR 0 3
17392: PPUSH
17393: LD_INT 1
17395: PPUSH
17396: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17400: LD_INT 39
17402: PPUSH
17403: LD_VAR 0 3
17407: PPUSH
17408: LD_INT 1
17410: PPUSH
17411: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17415: LD_INT 43
17417: PPUSH
17418: LD_VAR 0 3
17422: PPUSH
17423: LD_INT 1
17425: PPUSH
17426: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17430: LD_INT 51
17432: PPUSH
17433: LD_VAR 0 3
17437: PPUSH
17438: LD_INT 1
17440: PPUSH
17441: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17445: LD_INT 6
17447: PPUSH
17448: LD_VAR 0 3
17452: PPUSH
17453: LD_INT 1
17455: PPUSH
17456: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17460: LD_INT 0
17462: PPUSH
17463: LD_VAR 0 3
17467: PPUSH
17468: LD_INT 1
17470: PPUSH
17471: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17475: LD_INT 2
17477: PPUSH
17478: LD_VAR 0 3
17482: PPUSH
17483: LD_INT 1
17485: PPUSH
17486: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17490: LD_INT 3
17492: PPUSH
17493: LD_VAR 0 3
17497: PPUSH
17498: LD_INT 1
17500: PPUSH
17501: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17505: LD_INT 4
17507: PPUSH
17508: LD_VAR 0 3
17512: PPUSH
17513: LD_INT 1
17515: PPUSH
17516: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17520: LD_INT 6
17522: PPUSH
17523: LD_VAR 0 3
17527: PPUSH
17528: LD_INT 1
17530: PPUSH
17531: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17535: LD_INT 7
17537: PPUSH
17538: LD_VAR 0 3
17542: PPUSH
17543: LD_INT 1
17545: PPUSH
17546: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17550: LD_INT 8
17552: PPUSH
17553: LD_VAR 0 3
17557: PPUSH
17558: LD_INT 1
17560: PPUSH
17561: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17565: LD_INT 10
17567: PPUSH
17568: LD_VAR 0 3
17572: PPUSH
17573: LD_INT 1
17575: PPUSH
17576: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17580: LD_INT 15
17582: PPUSH
17583: LD_VAR 0 3
17587: PPUSH
17588: LD_INT 1
17590: PPUSH
17591: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17595: LD_INT 16
17597: PPUSH
17598: LD_VAR 0 3
17602: PPUSH
17603: LD_INT 1
17605: PPUSH
17606: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17610: LD_INT 17
17612: PPUSH
17613: LD_VAR 0 3
17617: PPUSH
17618: LD_INT 1
17620: PPUSH
17621: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17625: LD_INT 20
17627: PPUSH
17628: LD_VAR 0 3
17632: PPUSH
17633: LD_INT 1
17635: PPUSH
17636: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17640: LD_INT 26
17642: PPUSH
17643: LD_VAR 0 3
17647: PPUSH
17648: LD_INT 1
17650: PPUSH
17651: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17655: LD_INT 27
17657: PPUSH
17658: LD_VAR 0 3
17662: PPUSH
17663: LD_INT 1
17665: PPUSH
17666: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17670: LD_INT 29
17672: PPUSH
17673: LD_VAR 0 3
17677: PPUSH
17678: LD_INT 1
17680: PPUSH
17681: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17685: LD_INT 31
17687: PPUSH
17688: LD_VAR 0 3
17692: PPUSH
17693: LD_INT 1
17695: PPUSH
17696: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17700: LD_INT 32
17702: PPUSH
17703: LD_VAR 0 3
17707: PPUSH
17708: LD_INT 1
17710: PPUSH
17711: CALL_OW 324
// end ; 4 :
17715: GO 20802
17717: LD_INT 4
17719: DOUBLE
17720: EQUAL
17721: IFTRUE 17725
17723: GO 18673
17725: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17726: LD_INT 35
17728: PPUSH
17729: LD_VAR 0 3
17733: PPUSH
17734: LD_INT 1
17736: PPUSH
17737: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17741: LD_INT 45
17743: PPUSH
17744: LD_VAR 0 3
17748: PPUSH
17749: LD_INT 1
17751: PPUSH
17752: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17756: LD_INT 46
17758: PPUSH
17759: LD_VAR 0 3
17763: PPUSH
17764: LD_INT 1
17766: PPUSH
17767: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17771: LD_INT 47
17773: PPUSH
17774: LD_VAR 0 3
17778: PPUSH
17779: LD_INT 1
17781: PPUSH
17782: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17786: LD_INT 1
17788: PPUSH
17789: LD_VAR 0 3
17793: PPUSH
17794: LD_INT 1
17796: PPUSH
17797: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17801: LD_INT 2
17803: PPUSH
17804: LD_VAR 0 3
17808: PPUSH
17809: LD_INT 1
17811: PPUSH
17812: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17816: LD_INT 11
17818: PPUSH
17819: LD_VAR 0 3
17823: PPUSH
17824: LD_INT 1
17826: PPUSH
17827: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17831: LD_INT 20
17833: PPUSH
17834: LD_VAR 0 3
17838: PPUSH
17839: LD_INT 1
17841: PPUSH
17842: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17846: LD_INT 48
17848: PPUSH
17849: LD_VAR 0 3
17853: PPUSH
17854: LD_INT 1
17856: PPUSH
17857: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17861: LD_INT 49
17863: PPUSH
17864: LD_VAR 0 3
17868: PPUSH
17869: LD_INT 1
17871: PPUSH
17872: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17876: LD_INT 69
17878: PPUSH
17879: LD_VAR 0 3
17883: PPUSH
17884: LD_INT 1
17886: PPUSH
17887: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17891: LD_INT 39
17893: PPUSH
17894: LD_VAR 0 3
17898: PPUSH
17899: LD_INT 1
17901: PPUSH
17902: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17906: LD_INT 34
17908: PPUSH
17909: LD_VAR 0 3
17913: PPUSH
17914: LD_INT 1
17916: PPUSH
17917: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17921: LD_INT 42
17923: PPUSH
17924: LD_VAR 0 3
17928: PPUSH
17929: LD_INT 1
17931: PPUSH
17932: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17936: LD_INT 44
17938: PPUSH
17939: LD_VAR 0 3
17943: PPUSH
17944: LD_INT 1
17946: PPUSH
17947: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17951: LD_INT 41
17953: PPUSH
17954: LD_VAR 0 3
17958: PPUSH
17959: LD_INT 1
17961: PPUSH
17962: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17966: LD_INT 43
17968: PPUSH
17969: LD_VAR 0 3
17973: PPUSH
17974: LD_INT 1
17976: PPUSH
17977: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17981: LD_INT 70
17983: PPUSH
17984: LD_VAR 0 3
17988: PPUSH
17989: LD_INT 1
17991: PPUSH
17992: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17996: LD_INT 51
17998: PPUSH
17999: LD_VAR 0 3
18003: PPUSH
18004: LD_INT 1
18006: PPUSH
18007: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18011: LD_INT 52
18013: PPUSH
18014: LD_VAR 0 3
18018: PPUSH
18019: LD_INT 1
18021: PPUSH
18022: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18026: LD_INT 6
18028: PPUSH
18029: LD_VAR 0 3
18033: PPUSH
18034: LD_INT 1
18036: PPUSH
18037: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18041: LD_INT 15
18043: PPUSH
18044: LD_VAR 0 3
18048: PPUSH
18049: LD_INT 1
18051: PPUSH
18052: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18056: LD_INT 7
18058: PPUSH
18059: LD_VAR 0 3
18063: PPUSH
18064: LD_INT 1
18066: PPUSH
18067: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18071: LD_INT 12
18073: PPUSH
18074: LD_VAR 0 3
18078: PPUSH
18079: LD_INT 1
18081: PPUSH
18082: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18086: LD_INT 18
18088: PPUSH
18089: LD_VAR 0 3
18093: PPUSH
18094: LD_INT 1
18096: PPUSH
18097: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18101: LD_INT 60
18103: PPUSH
18104: LD_VAR 0 3
18108: PPUSH
18109: LD_INT 1
18111: PPUSH
18112: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18116: LD_INT 9
18118: PPUSH
18119: LD_VAR 0 3
18123: PPUSH
18124: LD_INT 1
18126: PPUSH
18127: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18131: LD_INT 30
18133: PPUSH
18134: LD_VAR 0 3
18138: PPUSH
18139: LD_INT 1
18141: PPUSH
18142: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18146: LD_INT 37
18148: PPUSH
18149: LD_VAR 0 3
18153: PPUSH
18154: LD_INT 1
18156: PPUSH
18157: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18161: LD_INT 5
18163: PPUSH
18164: LD_VAR 0 3
18168: PPUSH
18169: LD_INT 1
18171: PPUSH
18172: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18176: LD_INT 66
18178: PPUSH
18179: LD_VAR 0 3
18183: PPUSH
18184: LD_INT 1
18186: PPUSH
18187: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18191: LD_INT 21
18193: PPUSH
18194: LD_VAR 0 3
18198: PPUSH
18199: LD_INT 1
18201: PPUSH
18202: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18206: LD_INT 22
18208: PPUSH
18209: LD_VAR 0 3
18213: PPUSH
18214: LD_INT 1
18216: PPUSH
18217: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18221: LD_INT 54
18223: PPUSH
18224: LD_VAR 0 3
18228: PPUSH
18229: LD_INT 1
18231: PPUSH
18232: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18236: LD_INT 0
18238: PPUSH
18239: LD_VAR 0 3
18243: PPUSH
18244: LD_INT 1
18246: PPUSH
18247: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18251: LD_INT 1
18253: PPUSH
18254: LD_VAR 0 3
18258: PPUSH
18259: LD_INT 1
18261: PPUSH
18262: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18266: LD_INT 2
18268: PPUSH
18269: LD_VAR 0 3
18273: PPUSH
18274: LD_INT 1
18276: PPUSH
18277: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18281: LD_INT 3
18283: PPUSH
18284: LD_VAR 0 3
18288: PPUSH
18289: LD_INT 1
18291: PPUSH
18292: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18296: LD_INT 4
18298: PPUSH
18299: LD_VAR 0 3
18303: PPUSH
18304: LD_INT 1
18306: PPUSH
18307: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18311: LD_INT 5
18313: PPUSH
18314: LD_VAR 0 3
18318: PPUSH
18319: LD_INT 1
18321: PPUSH
18322: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18326: LD_INT 6
18328: PPUSH
18329: LD_VAR 0 3
18333: PPUSH
18334: LD_INT 1
18336: PPUSH
18337: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18341: LD_INT 7
18343: PPUSH
18344: LD_VAR 0 3
18348: PPUSH
18349: LD_INT 1
18351: PPUSH
18352: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18356: LD_INT 8
18358: PPUSH
18359: LD_VAR 0 3
18363: PPUSH
18364: LD_INT 1
18366: PPUSH
18367: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18371: LD_INT 10
18373: PPUSH
18374: LD_VAR 0 3
18378: PPUSH
18379: LD_INT 1
18381: PPUSH
18382: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18386: LD_INT 11
18388: PPUSH
18389: LD_VAR 0 3
18393: PPUSH
18394: LD_INT 1
18396: PPUSH
18397: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18401: LD_INT 12
18403: PPUSH
18404: LD_VAR 0 3
18408: PPUSH
18409: LD_INT 1
18411: PPUSH
18412: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18416: LD_INT 13
18418: PPUSH
18419: LD_VAR 0 3
18423: PPUSH
18424: LD_INT 1
18426: PPUSH
18427: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18431: LD_INT 14
18433: PPUSH
18434: LD_VAR 0 3
18438: PPUSH
18439: LD_INT 1
18441: PPUSH
18442: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18446: LD_INT 15
18448: PPUSH
18449: LD_VAR 0 3
18453: PPUSH
18454: LD_INT 1
18456: PPUSH
18457: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18461: LD_INT 16
18463: PPUSH
18464: LD_VAR 0 3
18468: PPUSH
18469: LD_INT 1
18471: PPUSH
18472: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18476: LD_INT 17
18478: PPUSH
18479: LD_VAR 0 3
18483: PPUSH
18484: LD_INT 1
18486: PPUSH
18487: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18491: LD_INT 19
18493: PPUSH
18494: LD_VAR 0 3
18498: PPUSH
18499: LD_INT 1
18501: PPUSH
18502: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18506: LD_INT 20
18508: PPUSH
18509: LD_VAR 0 3
18513: PPUSH
18514: LD_INT 1
18516: PPUSH
18517: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18521: LD_INT 21
18523: PPUSH
18524: LD_VAR 0 3
18528: PPUSH
18529: LD_INT 1
18531: PPUSH
18532: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18536: LD_INT 23
18538: PPUSH
18539: LD_VAR 0 3
18543: PPUSH
18544: LD_INT 1
18546: PPUSH
18547: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18551: LD_INT 26
18553: PPUSH
18554: LD_VAR 0 3
18558: PPUSH
18559: LD_INT 1
18561: PPUSH
18562: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18566: LD_INT 27
18568: PPUSH
18569: LD_VAR 0 3
18573: PPUSH
18574: LD_INT 1
18576: PPUSH
18577: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18581: LD_INT 28
18583: PPUSH
18584: LD_VAR 0 3
18588: PPUSH
18589: LD_INT 1
18591: PPUSH
18592: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18596: LD_INT 29
18598: PPUSH
18599: LD_VAR 0 3
18603: PPUSH
18604: LD_INT 1
18606: PPUSH
18607: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18611: LD_INT 30
18613: PPUSH
18614: LD_VAR 0 3
18618: PPUSH
18619: LD_INT 1
18621: PPUSH
18622: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18626: LD_INT 31
18628: PPUSH
18629: LD_VAR 0 3
18633: PPUSH
18634: LD_INT 1
18636: PPUSH
18637: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18641: LD_INT 32
18643: PPUSH
18644: LD_VAR 0 3
18648: PPUSH
18649: LD_INT 1
18651: PPUSH
18652: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18656: LD_INT 36
18658: PPUSH
18659: LD_VAR 0 3
18663: PPUSH
18664: LD_INT 1
18666: PPUSH
18667: CALL_OW 324
// end ; 5 :
18671: GO 20802
18673: LD_INT 5
18675: DOUBLE
18676: EQUAL
18677: IFTRUE 18681
18679: GO 19794
18681: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18682: LD_INT 35
18684: PPUSH
18685: LD_VAR 0 3
18689: PPUSH
18690: LD_INT 1
18692: PPUSH
18693: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18697: LD_INT 45
18699: PPUSH
18700: LD_VAR 0 3
18704: PPUSH
18705: LD_INT 1
18707: PPUSH
18708: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18712: LD_INT 46
18714: PPUSH
18715: LD_VAR 0 3
18719: PPUSH
18720: LD_INT 1
18722: PPUSH
18723: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18727: LD_INT 47
18729: PPUSH
18730: LD_VAR 0 3
18734: PPUSH
18735: LD_INT 1
18737: PPUSH
18738: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18742: LD_INT 1
18744: PPUSH
18745: LD_VAR 0 3
18749: PPUSH
18750: LD_INT 1
18752: PPUSH
18753: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18757: LD_INT 2
18759: PPUSH
18760: LD_VAR 0 3
18764: PPUSH
18765: LD_INT 1
18767: PPUSH
18768: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18772: LD_INT 11
18774: PPUSH
18775: LD_VAR 0 3
18779: PPUSH
18780: LD_INT 1
18782: PPUSH
18783: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18787: LD_INT 20
18789: PPUSH
18790: LD_VAR 0 3
18794: PPUSH
18795: LD_INT 1
18797: PPUSH
18798: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18802: LD_INT 48
18804: PPUSH
18805: LD_VAR 0 3
18809: PPUSH
18810: LD_INT 1
18812: PPUSH
18813: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18817: LD_INT 49
18819: PPUSH
18820: LD_VAR 0 3
18824: PPUSH
18825: LD_INT 1
18827: PPUSH
18828: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18832: LD_INT 69
18834: PPUSH
18835: LD_VAR 0 3
18839: PPUSH
18840: LD_INT 1
18842: PPUSH
18843: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18847: LD_INT 39
18849: PPUSH
18850: LD_VAR 0 3
18854: PPUSH
18855: LD_INT 1
18857: PPUSH
18858: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18862: LD_INT 34
18864: PPUSH
18865: LD_VAR 0 3
18869: PPUSH
18870: LD_INT 1
18872: PPUSH
18873: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18877: LD_INT 42
18879: PPUSH
18880: LD_VAR 0 3
18884: PPUSH
18885: LD_INT 1
18887: PPUSH
18888: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18892: LD_INT 44
18894: PPUSH
18895: LD_VAR 0 3
18899: PPUSH
18900: LD_INT 1
18902: PPUSH
18903: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18907: LD_INT 41
18909: PPUSH
18910: LD_VAR 0 3
18914: PPUSH
18915: LD_INT 1
18917: PPUSH
18918: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18922: LD_INT 40
18924: PPUSH
18925: LD_VAR 0 3
18929: PPUSH
18930: LD_INT 1
18932: PPUSH
18933: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18937: LD_INT 43
18939: PPUSH
18940: LD_VAR 0 3
18944: PPUSH
18945: LD_INT 1
18947: PPUSH
18948: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18952: LD_INT 70
18954: PPUSH
18955: LD_VAR 0 3
18959: PPUSH
18960: LD_INT 1
18962: PPUSH
18963: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18967: LD_INT 51
18969: PPUSH
18970: LD_VAR 0 3
18974: PPUSH
18975: LD_INT 1
18977: PPUSH
18978: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18982: LD_INT 52
18984: PPUSH
18985: LD_VAR 0 3
18989: PPUSH
18990: LD_INT 1
18992: PPUSH
18993: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18997: LD_INT 6
18999: PPUSH
19000: LD_VAR 0 3
19004: PPUSH
19005: LD_INT 1
19007: PPUSH
19008: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19012: LD_INT 15
19014: PPUSH
19015: LD_VAR 0 3
19019: PPUSH
19020: LD_INT 1
19022: PPUSH
19023: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19027: LD_INT 7
19029: PPUSH
19030: LD_VAR 0 3
19034: PPUSH
19035: LD_INT 1
19037: PPUSH
19038: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19042: LD_INT 12
19044: PPUSH
19045: LD_VAR 0 3
19049: PPUSH
19050: LD_INT 1
19052: PPUSH
19053: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19057: LD_INT 17
19059: PPUSH
19060: LD_VAR 0 3
19064: PPUSH
19065: LD_INT 1
19067: PPUSH
19068: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19072: LD_INT 18
19074: PPUSH
19075: LD_VAR 0 3
19079: PPUSH
19080: LD_INT 1
19082: PPUSH
19083: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19087: LD_INT 60
19089: PPUSH
19090: LD_VAR 0 3
19094: PPUSH
19095: LD_INT 1
19097: PPUSH
19098: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19102: LD_INT 32
19104: PPUSH
19105: LD_VAR 0 3
19109: PPUSH
19110: LD_INT 1
19112: PPUSH
19113: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19117: LD_INT 9
19119: PPUSH
19120: LD_VAR 0 3
19124: PPUSH
19125: LD_INT 1
19127: PPUSH
19128: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19132: LD_INT 57
19134: PPUSH
19135: LD_VAR 0 3
19139: PPUSH
19140: LD_INT 1
19142: PPUSH
19143: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19147: LD_INT 30
19149: PPUSH
19150: LD_VAR 0 3
19154: PPUSH
19155: LD_INT 1
19157: PPUSH
19158: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19162: LD_INT 37
19164: PPUSH
19165: LD_VAR 0 3
19169: PPUSH
19170: LD_INT 1
19172: PPUSH
19173: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19177: LD_INT 63
19179: PPUSH
19180: LD_VAR 0 3
19184: PPUSH
19185: LD_INT 1
19187: PPUSH
19188: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19192: LD_INT 3
19194: PPUSH
19195: LD_VAR 0 3
19199: PPUSH
19200: LD_INT 1
19202: PPUSH
19203: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19207: LD_INT 4
19209: PPUSH
19210: LD_VAR 0 3
19214: PPUSH
19215: LD_INT 1
19217: PPUSH
19218: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19222: LD_INT 5
19224: PPUSH
19225: LD_VAR 0 3
19229: PPUSH
19230: LD_INT 1
19232: PPUSH
19233: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19237: LD_INT 66
19239: PPUSH
19240: LD_VAR 0 3
19244: PPUSH
19245: LD_INT 1
19247: PPUSH
19248: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19252: LD_INT 21
19254: PPUSH
19255: LD_VAR 0 3
19259: PPUSH
19260: LD_INT 1
19262: PPUSH
19263: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19267: LD_INT 22
19269: PPUSH
19270: LD_VAR 0 3
19274: PPUSH
19275: LD_INT 1
19277: PPUSH
19278: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19282: LD_INT 19
19284: PPUSH
19285: LD_VAR 0 3
19289: PPUSH
19290: LD_INT 1
19292: PPUSH
19293: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19297: LD_INT 54
19299: PPUSH
19300: LD_VAR 0 3
19304: PPUSH
19305: LD_INT 1
19307: PPUSH
19308: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19312: LD_INT 55
19314: PPUSH
19315: LD_VAR 0 3
19319: PPUSH
19320: LD_INT 1
19322: PPUSH
19323: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19327: LD_INT 0
19329: PPUSH
19330: LD_VAR 0 3
19334: PPUSH
19335: LD_INT 1
19337: PPUSH
19338: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
19342: LD_INT 1
19344: PPUSH
19345: LD_VAR 0 3
19349: PPUSH
19350: LD_INT 1
19352: PPUSH
19353: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19357: LD_INT 2
19359: PPUSH
19360: LD_VAR 0 3
19364: PPUSH
19365: LD_INT 1
19367: PPUSH
19368: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
19372: LD_INT 3
19374: PPUSH
19375: LD_VAR 0 3
19379: PPUSH
19380: LD_INT 1
19382: PPUSH
19383: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19387: LD_INT 4
19389: PPUSH
19390: LD_VAR 0 3
19394: PPUSH
19395: LD_INT 1
19397: PPUSH
19398: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
19402: LD_INT 5
19404: PPUSH
19405: LD_VAR 0 3
19409: PPUSH
19410: LD_INT 1
19412: PPUSH
19413: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19417: LD_INT 6
19419: PPUSH
19420: LD_VAR 0 3
19424: PPUSH
19425: LD_INT 1
19427: PPUSH
19428: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
19432: LD_INT 7
19434: PPUSH
19435: LD_VAR 0 3
19439: PPUSH
19440: LD_INT 1
19442: PPUSH
19443: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
19447: LD_INT 8
19449: PPUSH
19450: LD_VAR 0 3
19454: PPUSH
19455: LD_INT 1
19457: PPUSH
19458: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
19462: LD_INT 10
19464: PPUSH
19465: LD_VAR 0 3
19469: PPUSH
19470: LD_INT 1
19472: PPUSH
19473: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
19477: LD_INT 11
19479: PPUSH
19480: LD_VAR 0 3
19484: PPUSH
19485: LD_INT 1
19487: PPUSH
19488: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
19492: LD_INT 12
19494: PPUSH
19495: LD_VAR 0 3
19499: PPUSH
19500: LD_INT 1
19502: PPUSH
19503: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
19507: LD_INT 13
19509: PPUSH
19510: LD_VAR 0 3
19514: PPUSH
19515: LD_INT 1
19517: PPUSH
19518: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
19522: LD_INT 14
19524: PPUSH
19525: LD_VAR 0 3
19529: PPUSH
19530: LD_INT 1
19532: PPUSH
19533: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
19537: LD_INT 15
19539: PPUSH
19540: LD_VAR 0 3
19544: PPUSH
19545: LD_INT 1
19547: PPUSH
19548: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
19552: LD_INT 16
19554: PPUSH
19555: LD_VAR 0 3
19559: PPUSH
19560: LD_INT 1
19562: PPUSH
19563: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
19567: LD_INT 17
19569: PPUSH
19570: LD_VAR 0 3
19574: PPUSH
19575: LD_INT 1
19577: PPUSH
19578: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
19582: LD_INT 18
19584: PPUSH
19585: LD_VAR 0 3
19589: PPUSH
19590: LD_INT 1
19592: PPUSH
19593: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
19597: LD_INT 19
19599: PPUSH
19600: LD_VAR 0 3
19604: PPUSH
19605: LD_INT 1
19607: PPUSH
19608: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
19612: LD_INT 20
19614: PPUSH
19615: LD_VAR 0 3
19619: PPUSH
19620: LD_INT 1
19622: PPUSH
19623: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
19627: LD_INT 21
19629: PPUSH
19630: LD_VAR 0 3
19634: PPUSH
19635: LD_INT 1
19637: PPUSH
19638: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
19642: LD_INT 23
19644: PPUSH
19645: LD_VAR 0 3
19649: PPUSH
19650: LD_INT 1
19652: PPUSH
19653: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
19657: LD_INT 26
19659: PPUSH
19660: LD_VAR 0 3
19664: PPUSH
19665: LD_INT 1
19667: PPUSH
19668: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
19672: LD_INT 27
19674: PPUSH
19675: LD_VAR 0 3
19679: PPUSH
19680: LD_INT 1
19682: PPUSH
19683: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
19687: LD_INT 28
19689: PPUSH
19690: LD_VAR 0 3
19694: PPUSH
19695: LD_INT 1
19697: PPUSH
19698: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19702: LD_INT 29
19704: PPUSH
19705: LD_VAR 0 3
19709: PPUSH
19710: LD_INT 1
19712: PPUSH
19713: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
19717: LD_INT 30
19719: PPUSH
19720: LD_VAR 0 3
19724: PPUSH
19725: LD_INT 1
19727: PPUSH
19728: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19732: LD_INT 31
19734: PPUSH
19735: LD_VAR 0 3
19739: PPUSH
19740: LD_INT 1
19742: PPUSH
19743: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
19747: LD_INT 32
19749: PPUSH
19750: LD_VAR 0 3
19754: PPUSH
19755: LD_INT 1
19757: PPUSH
19758: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
19762: LD_INT 33
19764: PPUSH
19765: LD_VAR 0 3
19769: PPUSH
19770: LD_INT 1
19772: PPUSH
19773: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
19777: LD_INT 36
19779: PPUSH
19780: LD_VAR 0 3
19784: PPUSH
19785: LD_INT 1
19787: PPUSH
19788: CALL_OW 324
// end ; 6 :
19792: GO 20802
19794: LD_INT 6
19796: DOUBLE
19797: EQUAL
19798: IFTRUE 19802
19800: GO 20727
19802: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19803: LD_INT 35
19805: PPUSH
19806: LD_VAR 0 3
19810: PPUSH
19811: LD_INT 1
19813: PPUSH
19814: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19818: LD_INT 45
19820: PPUSH
19821: LD_VAR 0 3
19825: PPUSH
19826: LD_INT 1
19828: PPUSH
19829: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19833: LD_INT 46
19835: PPUSH
19836: LD_VAR 0 3
19840: PPUSH
19841: LD_INT 1
19843: PPUSH
19844: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19848: LD_INT 47
19850: PPUSH
19851: LD_VAR 0 3
19855: PPUSH
19856: LD_INT 1
19858: PPUSH
19859: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19863: LD_INT 1
19865: PPUSH
19866: LD_VAR 0 3
19870: PPUSH
19871: LD_INT 1
19873: PPUSH
19874: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19878: LD_INT 2
19880: PPUSH
19881: LD_VAR 0 3
19885: PPUSH
19886: LD_INT 1
19888: PPUSH
19889: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19893: LD_INT 11
19895: PPUSH
19896: LD_VAR 0 3
19900: PPUSH
19901: LD_INT 1
19903: PPUSH
19904: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
19908: LD_INT 20
19910: PPUSH
19911: LD_VAR 0 3
19915: PPUSH
19916: LD_INT 1
19918: PPUSH
19919: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
19923: LD_INT 48
19925: PPUSH
19926: LD_VAR 0 3
19930: PPUSH
19931: LD_INT 1
19933: PPUSH
19934: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
19938: LD_INT 49
19940: PPUSH
19941: LD_VAR 0 3
19945: PPUSH
19946: LD_INT 1
19948: PPUSH
19949: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
19953: LD_INT 50
19955: PPUSH
19956: LD_VAR 0 3
19960: PPUSH
19961: LD_INT 1
19963: PPUSH
19964: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
19968: LD_INT 69
19970: PPUSH
19971: LD_VAR 0 3
19975: PPUSH
19976: LD_INT 1
19978: PPUSH
19979: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
19983: LD_INT 39
19985: PPUSH
19986: LD_VAR 0 3
19990: PPUSH
19991: LD_INT 1
19993: PPUSH
19994: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
19998: LD_INT 34
20000: PPUSH
20001: LD_VAR 0 3
20005: PPUSH
20006: LD_INT 1
20008: PPUSH
20009: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20013: LD_INT 42
20015: PPUSH
20016: LD_VAR 0 3
20020: PPUSH
20021: LD_INT 1
20023: PPUSH
20024: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20028: LD_INT 44
20030: PPUSH
20031: LD_VAR 0 3
20035: PPUSH
20036: LD_INT 1
20038: PPUSH
20039: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20043: LD_INT 41
20045: PPUSH
20046: LD_VAR 0 3
20050: PPUSH
20051: LD_INT 1
20053: PPUSH
20054: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
20058: LD_INT 13
20060: PPUSH
20061: LD_VAR 0 3
20065: PPUSH
20066: LD_INT 1
20068: PPUSH
20069: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
20073: LD_INT 40
20075: PPUSH
20076: LD_VAR 0 3
20080: PPUSH
20081: LD_INT 1
20083: PPUSH
20084: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20088: LD_INT 43
20090: PPUSH
20091: LD_VAR 0 3
20095: PPUSH
20096: LD_INT 1
20098: PPUSH
20099: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20103: LD_INT 70
20105: PPUSH
20106: LD_VAR 0 3
20110: PPUSH
20111: LD_INT 1
20113: PPUSH
20114: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
20118: LD_INT 23
20120: PPUSH
20121: LD_VAR 0 3
20125: PPUSH
20126: LD_INT 1
20128: PPUSH
20129: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20133: LD_INT 51
20135: PPUSH
20136: LD_VAR 0 3
20140: PPUSH
20141: LD_INT 1
20143: PPUSH
20144: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
20148: LD_INT 52
20150: PPUSH
20151: LD_VAR 0 3
20155: PPUSH
20156: LD_INT 1
20158: PPUSH
20159: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20163: LD_INT 6
20165: PPUSH
20166: LD_VAR 0 3
20170: PPUSH
20171: LD_INT 1
20173: PPUSH
20174: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
20178: LD_INT 15
20180: PPUSH
20181: LD_VAR 0 3
20185: PPUSH
20186: LD_INT 1
20188: PPUSH
20189: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
20193: LD_INT 7
20195: PPUSH
20196: LD_VAR 0 3
20200: PPUSH
20201: LD_INT 1
20203: PPUSH
20204: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
20208: LD_INT 12
20210: PPUSH
20211: LD_VAR 0 3
20215: PPUSH
20216: LD_INT 1
20218: PPUSH
20219: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
20223: LD_INT 10
20225: PPUSH
20226: LD_VAR 0 3
20230: PPUSH
20231: LD_INT 1
20233: PPUSH
20234: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
20238: LD_INT 17
20240: PPUSH
20241: LD_VAR 0 3
20245: PPUSH
20246: LD_INT 1
20248: PPUSH
20249: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
20253: LD_INT 18
20255: PPUSH
20256: LD_VAR 0 3
20260: PPUSH
20261: LD_INT 1
20263: PPUSH
20264: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
20268: LD_INT 60
20270: PPUSH
20271: LD_VAR 0 3
20275: PPUSH
20276: LD_INT 1
20278: PPUSH
20279: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
20283: LD_INT 61
20285: PPUSH
20286: LD_VAR 0 3
20290: PPUSH
20291: LD_INT 1
20293: PPUSH
20294: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
20298: LD_INT 32
20300: PPUSH
20301: LD_VAR 0 3
20305: PPUSH
20306: LD_INT 1
20308: PPUSH
20309: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
20313: LD_INT 27
20315: PPUSH
20316: LD_VAR 0 3
20320: PPUSH
20321: LD_INT 1
20323: PPUSH
20324: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
20328: LD_INT 36
20330: PPUSH
20331: LD_VAR 0 3
20335: PPUSH
20336: LD_INT 1
20338: PPUSH
20339: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
20343: LD_INT 33
20345: PPUSH
20346: LD_VAR 0 3
20350: PPUSH
20351: LD_INT 1
20353: PPUSH
20354: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
20358: LD_INT 9
20360: PPUSH
20361: LD_VAR 0 3
20365: PPUSH
20366: LD_INT 1
20368: PPUSH
20369: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
20373: LD_INT 38
20375: PPUSH
20376: LD_VAR 0 3
20380: PPUSH
20381: LD_INT 1
20383: PPUSH
20384: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
20388: LD_INT 57
20390: PPUSH
20391: LD_VAR 0 3
20395: PPUSH
20396: LD_INT 1
20398: PPUSH
20399: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
20403: LD_INT 58
20405: PPUSH
20406: LD_VAR 0 3
20410: PPUSH
20411: LD_INT 1
20413: PPUSH
20414: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
20418: LD_INT 28
20420: PPUSH
20421: LD_VAR 0 3
20425: PPUSH
20426: LD_INT 1
20428: PPUSH
20429: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
20433: LD_INT 29
20435: PPUSH
20436: LD_VAR 0 3
20440: PPUSH
20441: LD_INT 1
20443: PPUSH
20444: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
20448: LD_INT 30
20450: PPUSH
20451: LD_VAR 0 3
20455: PPUSH
20456: LD_INT 1
20458: PPUSH
20459: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
20463: LD_INT 37
20465: PPUSH
20466: LD_VAR 0 3
20470: PPUSH
20471: LD_INT 1
20473: PPUSH
20474: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
20478: LD_INT 63
20480: PPUSH
20481: LD_VAR 0 3
20485: PPUSH
20486: LD_INT 1
20488: PPUSH
20489: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
20493: LD_INT 64
20495: PPUSH
20496: LD_VAR 0 3
20500: PPUSH
20501: LD_INT 1
20503: PPUSH
20504: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
20508: LD_INT 3
20510: PPUSH
20511: LD_VAR 0 3
20515: PPUSH
20516: LD_INT 1
20518: PPUSH
20519: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
20523: LD_INT 4
20525: PPUSH
20526: LD_VAR 0 3
20530: PPUSH
20531: LD_INT 1
20533: PPUSH
20534: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20538: LD_INT 5
20540: PPUSH
20541: LD_VAR 0 3
20545: PPUSH
20546: LD_INT 1
20548: PPUSH
20549: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
20553: LD_INT 8
20555: PPUSH
20556: LD_VAR 0 3
20560: PPUSH
20561: LD_INT 1
20563: PPUSH
20564: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20568: LD_INT 66
20570: PPUSH
20571: LD_VAR 0 3
20575: PPUSH
20576: LD_INT 1
20578: PPUSH
20579: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
20583: LD_INT 67
20585: PPUSH
20586: LD_VAR 0 3
20590: PPUSH
20591: LD_INT 1
20593: PPUSH
20594: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20598: LD_INT 21
20600: PPUSH
20601: LD_VAR 0 3
20605: PPUSH
20606: LD_INT 1
20608: PPUSH
20609: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20613: LD_INT 22
20615: PPUSH
20616: LD_VAR 0 3
20620: PPUSH
20621: LD_INT 1
20623: PPUSH
20624: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
20628: LD_INT 19
20630: PPUSH
20631: LD_VAR 0 3
20635: PPUSH
20636: LD_INT 1
20638: PPUSH
20639: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
20643: LD_INT 26
20645: PPUSH
20646: LD_VAR 0 3
20650: PPUSH
20651: LD_INT 1
20653: PPUSH
20654: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20658: LD_INT 54
20660: PPUSH
20661: LD_VAR 0 3
20665: PPUSH
20666: LD_INT 1
20668: PPUSH
20669: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
20673: LD_INT 55
20675: PPUSH
20676: LD_VAR 0 3
20680: PPUSH
20681: LD_INT 1
20683: PPUSH
20684: CALL_OW 322
// for i = 0 to 39 do
20688: LD_ADDR_VAR 0 4
20692: PUSH
20693: DOUBLE
20694: LD_INT 0
20696: DEC
20697: ST_TO_ADDR
20698: LD_INT 39
20700: PUSH
20701: FOR_TO
20702: IFFALSE 20723
// SetRestrict ( i , side , true ) ;
20704: LD_VAR 0 4
20708: PPUSH
20709: LD_VAR 0 3
20713: PPUSH
20714: LD_INT 1
20716: PPUSH
20717: CALL_OW 324
20721: GO 20701
20723: POP
20724: POP
// end ; else
20725: GO 20802
20727: POP
// begin for i = 1 to 73 do
20728: LD_ADDR_VAR 0 4
20732: PUSH
20733: DOUBLE
20734: LD_INT 1
20736: DEC
20737: ST_TO_ADDR
20738: LD_INT 73
20740: PUSH
20741: FOR_TO
20742: IFFALSE 20763
// SetTech ( i , side , state_enabled ) ;
20744: LD_VAR 0 4
20748: PPUSH
20749: LD_VAR 0 3
20753: PPUSH
20754: LD_INT 1
20756: PPUSH
20757: CALL_OW 322
20761: GO 20741
20763: POP
20764: POP
// for i = 0 to 39 do
20765: LD_ADDR_VAR 0 4
20769: PUSH
20770: DOUBLE
20771: LD_INT 0
20773: DEC
20774: ST_TO_ADDR
20775: LD_INT 39
20777: PUSH
20778: FOR_TO
20779: IFFALSE 20800
// SetRestrict ( i , side , true ) ;
20781: LD_VAR 0 4
20785: PPUSH
20786: LD_VAR 0 3
20790: PPUSH
20791: LD_INT 1
20793: PPUSH
20794: CALL_OW 324
20798: GO 20778
20800: POP
20801: POP
// end ; end ; end ;
20802: GO 16807
20804: POP
20805: POP
// end ; end_of_file
20806: LD_VAR 0 2
20810: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
20811: LD_INT 0
20813: PPUSH
20814: PPUSH
20815: PPUSH
20816: PPUSH
20817: PPUSH
20818: PPUSH
20819: PPUSH
20820: PPUSH
20821: PPUSH
// for i := 1 to 8 do
20822: LD_ADDR_VAR 0 2
20826: PUSH
20827: DOUBLE
20828: LD_INT 1
20830: DEC
20831: ST_TO_ADDR
20832: LD_INT 8
20834: PUSH
20835: FOR_TO
20836: IFFALSE 21220
// begin if Side_Positions [ i ] then
20838: LD_EXP 43
20842: PUSH
20843: LD_VAR 0 2
20847: ARRAY
20848: IFFALSE 21218
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
20850: LD_ADDR_VAR 0 7
20854: PUSH
20855: LD_INT 22
20857: PUSH
20858: LD_VAR 0 2
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 21
20869: PUSH
20870: LD_INT 1
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PPUSH
20881: CALL_OW 69
20885: PUSH
20886: LD_INT 0
20888: PLUS
20889: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20890: LD_ADDR_VAR 0 9
20894: PUSH
20895: LD_INT 22
20897: PUSH
20898: LD_VAR 0 2
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: PUSH
20907: LD_INT 2
20909: PUSH
20910: LD_INT 30
20912: PUSH
20913: LD_INT 0
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 30
20922: PUSH
20923: LD_INT 1
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: LIST
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PPUSH
20939: CALL_OW 69
20943: ST_TO_ADDR
// crates := 0 ;
20944: LD_ADDR_VAR 0 4
20948: PUSH
20949: LD_INT 0
20951: ST_TO_ADDR
// oil := 0 ;
20952: LD_ADDR_VAR 0 5
20956: PUSH
20957: LD_INT 0
20959: ST_TO_ADDR
// sib := 0 ;
20960: LD_ADDR_VAR 0 6
20964: PUSH
20965: LD_INT 0
20967: ST_TO_ADDR
// if bases then
20968: LD_VAR 0 9
20972: IFFALSE 21078
// begin for j in bases do
20974: LD_ADDR_VAR 0 3
20978: PUSH
20979: LD_VAR 0 9
20983: PUSH
20984: FOR_IN
20985: IFFALSE 21076
// begin base := GetBase ( j ) ;
20987: LD_ADDR_VAR 0 8
20991: PUSH
20992: LD_VAR 0 3
20996: PPUSH
20997: CALL_OW 274
21001: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
21002: LD_ADDR_VAR 0 4
21006: PUSH
21007: LD_VAR 0 4
21011: PUSH
21012: LD_VAR 0 8
21016: PPUSH
21017: LD_INT 1
21019: PPUSH
21020: CALL_OW 275
21024: PLUS
21025: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
21026: LD_ADDR_VAR 0 5
21030: PUSH
21031: LD_VAR 0 5
21035: PUSH
21036: LD_VAR 0 8
21040: PPUSH
21041: LD_INT 2
21043: PPUSH
21044: CALL_OW 275
21048: PLUS
21049: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
21050: LD_ADDR_VAR 0 6
21054: PUSH
21055: LD_VAR 0 6
21059: PUSH
21060: LD_VAR 0 8
21064: PPUSH
21065: LD_INT 3
21067: PPUSH
21068: CALL_OW 275
21072: PLUS
21073: ST_TO_ADDR
// end ;
21074: GO 20984
21076: POP
21077: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
21078: LD_STRING setSpecText(
21080: PUSH
21081: LD_VAR 0 2
21085: STR
21086: PUSH
21087: LD_STRING ,
21089: STR
21090: PUSH
21091: LD_INT 2
21093: STR
21094: PUSH
21095: LD_STRING ,
21097: STR
21098: PUSH
21099: LD_VAR 0 4
21103: STR
21104: PUSH
21105: LD_STRING )
21107: STR
21108: PPUSH
21109: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
21113: LD_STRING setSpecText(
21115: PUSH
21116: LD_VAR 0 2
21120: STR
21121: PUSH
21122: LD_STRING ,
21124: STR
21125: PUSH
21126: LD_INT 3
21128: STR
21129: PUSH
21130: LD_STRING ,
21132: STR
21133: PUSH
21134: LD_VAR 0 5
21138: STR
21139: PUSH
21140: LD_STRING )
21142: STR
21143: PPUSH
21144: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
21148: LD_STRING setSpecText(
21150: PUSH
21151: LD_VAR 0 2
21155: STR
21156: PUSH
21157: LD_STRING ,
21159: STR
21160: PUSH
21161: LD_INT 4
21163: STR
21164: PUSH
21165: LD_STRING ,
21167: STR
21168: PUSH
21169: LD_VAR 0 6
21173: STR
21174: PUSH
21175: LD_STRING )
21177: STR
21178: PPUSH
21179: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
21183: LD_STRING setSpecText(
21185: PUSH
21186: LD_VAR 0 2
21190: STR
21191: PUSH
21192: LD_STRING ,
21194: STR
21195: PUSH
21196: LD_INT 5
21198: STR
21199: PUSH
21200: LD_STRING ,
21202: STR
21203: PUSH
21204: LD_VAR 0 7
21208: STR
21209: PUSH
21210: LD_STRING )
21212: STR
21213: PPUSH
21214: CALL_OW 559
// end ; end ;
21218: GO 20835
21220: POP
21221: POP
// end ;
21222: LD_VAR 0 1
21226: RET
// every 0 0$1 do
21227: GO 21229
21229: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
21230: LD_STRING setSpecLogoNumber(
21232: PUSH
21233: LD_INT 2
21235: STR
21236: PUSH
21237: LD_STRING ,
21239: STR
21240: PUSH
21241: LD_INT 1
21243: STR
21244: PUSH
21245: LD_STRING )
21247: STR
21248: PPUSH
21249: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
21253: LD_STRING setSpecLogoNumber(
21255: PUSH
21256: LD_INT 3
21258: STR
21259: PUSH
21260: LD_STRING ,
21262: STR
21263: PUSH
21264: LD_INT 2
21266: STR
21267: PUSH
21268: LD_STRING )
21270: STR
21271: PPUSH
21272: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
21276: LD_STRING setSpecLogoNumber(
21278: PUSH
21279: LD_INT 4
21281: STR
21282: PUSH
21283: LD_STRING ,
21285: STR
21286: PUSH
21287: LD_INT 3
21289: STR
21290: PUSH
21291: LD_STRING )
21293: STR
21294: PPUSH
21295: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
21299: LD_STRING setSpecLogoNumber(
21301: PUSH
21302: LD_INT 5
21304: STR
21305: PUSH
21306: LD_STRING ,
21308: STR
21309: PUSH
21310: LD_INT 4
21312: STR
21313: PUSH
21314: LD_STRING )
21316: STR
21317: PPUSH
21318: CALL_OW 559
// end ;
21322: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
21323: LD_INT 2
21325: PUSH
21326: LD_INT 30
21328: PUSH
21329: LD_INT 0
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 30
21338: PUSH
21339: LD_INT 1
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: LIST
21350: PPUSH
21351: CALL_OW 69
21355: IFFALSE 21365
21357: GO 21359
21359: DISABLE
// begin enable ;
21360: ENABLE
// UpdateSpectatorBar ;
21361: CALL 20811 0 0
// end ; end_of_file
21365: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
21366: LD_INT 0
21368: PPUSH
21369: PPUSH
21370: PPUSH
// BuildUpTime_Delay = 0 ;
21371: LD_ADDR_EXP 71
21375: PUSH
21376: LD_INT 0
21378: ST_TO_ADDR
// if not def_builduptime then
21379: LD_EXP 17
21383: NOT
21384: IFFALSE 21388
// exit ;
21386: GO 21571
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
21388: LD_ADDR_EXP 71
21392: PUSH
21393: LD_INT 8400
21395: PUSH
21396: LD_INT 2100
21398: PUSH
21399: LD_EXP 17
21403: MUL
21404: PLUS
21405: ST_TO_ADDR
// BuildUpTimeActive := true ;
21406: LD_ADDR_EXP 70
21410: PUSH
21411: LD_INT 1
21413: ST_TO_ADDR
// for i := 1 to 8 do
21414: LD_ADDR_VAR 0 2
21418: PUSH
21419: DOUBLE
21420: LD_INT 1
21422: DEC
21423: ST_TO_ADDR
21424: LD_INT 8
21426: PUSH
21427: FOR_TO
21428: IFFALSE 21569
// if Side_Positions [ i ] then
21430: LD_EXP 43
21434: PUSH
21435: LD_VAR 0 2
21439: ARRAY
21440: IFFALSE 21567
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
21442: LD_EXP 69
21446: PUSH
21447: LD_EXP 43
21451: PUSH
21452: LD_VAR 0 2
21456: ARRAY
21457: ARRAY
21458: PPUSH
21459: LD_INT 5
21461: PPUSH
21462: CALL_OW 424
// for j := 1 to 8 do
21466: LD_ADDR_VAR 0 3
21470: PUSH
21471: DOUBLE
21472: LD_INT 1
21474: DEC
21475: ST_TO_ADDR
21476: LD_INT 8
21478: PUSH
21479: FOR_TO
21480: IFFALSE 21565
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
21482: LD_EXP 43
21486: PUSH
21487: LD_VAR 0 3
21491: ARRAY
21492: PUSH
21493: LD_EXP 40
21497: PUSH
21498: LD_VAR 0 2
21502: ARRAY
21503: PUSH
21504: LD_EXP 40
21508: PUSH
21509: LD_VAR 0 3
21513: ARRAY
21514: NONEQUAL
21515: PUSH
21516: LD_EXP 45
21520: NOT
21521: PUSH
21522: LD_VAR 0 2
21526: PUSH
21527: LD_VAR 0 3
21531: NONEQUAL
21532: AND
21533: OR
21534: AND
21535: IFFALSE 21563
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
21537: LD_VAR 0 3
21541: PPUSH
21542: LD_EXP 69
21546: PUSH
21547: LD_EXP 43
21551: PUSH
21552: LD_VAR 0 2
21556: ARRAY
21557: ARRAY
21558: PPUSH
21559: CALL_OW 333
21563: GO 21479
21565: POP
21566: POP
// end ;
21567: GO 21427
21569: POP
21570: POP
// end ;
21571: LD_VAR 0 1
21575: RET
// export function EndBuildUp ; var i , j ; begin
21576: LD_INT 0
21578: PPUSH
21579: PPUSH
21580: PPUSH
// BuildUpTimeActive := false ;
21581: LD_ADDR_EXP 70
21585: PUSH
21586: LD_INT 0
21588: ST_TO_ADDR
// for i := 1 to 8 do
21589: LD_ADDR_VAR 0 2
21593: PUSH
21594: DOUBLE
21595: LD_INT 1
21597: DEC
21598: ST_TO_ADDR
21599: LD_INT 8
21601: PUSH
21602: FOR_TO
21603: IFFALSE 21744
// if Side_Positions [ i ] then
21605: LD_EXP 43
21609: PUSH
21610: LD_VAR 0 2
21614: ARRAY
21615: IFFALSE 21742
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
21617: LD_EXP 69
21621: PUSH
21622: LD_EXP 43
21626: PUSH
21627: LD_VAR 0 2
21631: ARRAY
21632: ARRAY
21633: PPUSH
21634: LD_INT 0
21636: PPUSH
21637: CALL_OW 424
// for j := 1 to 8 do
21641: LD_ADDR_VAR 0 3
21645: PUSH
21646: DOUBLE
21647: LD_INT 1
21649: DEC
21650: ST_TO_ADDR
21651: LD_INT 8
21653: PUSH
21654: FOR_TO
21655: IFFALSE 21740
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
21657: LD_EXP 43
21661: PUSH
21662: LD_VAR 0 3
21666: ARRAY
21667: PUSH
21668: LD_EXP 40
21672: PUSH
21673: LD_VAR 0 2
21677: ARRAY
21678: PUSH
21679: LD_EXP 40
21683: PUSH
21684: LD_VAR 0 3
21688: ARRAY
21689: NONEQUAL
21690: PUSH
21691: LD_EXP 45
21695: NOT
21696: PUSH
21697: LD_VAR 0 2
21701: PUSH
21702: LD_VAR 0 3
21706: NONEQUAL
21707: AND
21708: OR
21709: AND
21710: IFFALSE 21738
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
21712: LD_VAR 0 3
21716: PPUSH
21717: LD_EXP 69
21721: PUSH
21722: LD_EXP 43
21726: PUSH
21727: LD_VAR 0 2
21731: ARRAY
21732: ARRAY
21733: PPUSH
21734: CALL_OW 334
21738: GO 21654
21740: POP
21741: POP
// end ;
21742: GO 21602
21744: POP
21745: POP
// end ;
21746: LD_VAR 0 1
21750: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
21751: LD_EXP 70
21755: IFFALSE 21930
21757: GO 21759
21759: DISABLE
21760: LD_INT 0
21762: PPUSH
21763: PPUSH
// begin for i := 1 to 8 do
21764: LD_ADDR_VAR 0 1
21768: PUSH
21769: DOUBLE
21770: LD_INT 1
21772: DEC
21773: ST_TO_ADDR
21774: LD_INT 8
21776: PUSH
21777: FOR_TO
21778: IFFALSE 21927
// if Side_Positions [ i ] then
21780: LD_EXP 43
21784: PUSH
21785: LD_VAR 0 1
21789: ARRAY
21790: IFFALSE 21925
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
21792: LD_ADDR_VAR 0 2
21796: PUSH
21797: LD_EXP 69
21801: PUSH
21802: LD_EXP 43
21806: PUSH
21807: LD_VAR 0 1
21811: ARRAY
21812: ARRAY
21813: PPUSH
21814: LD_INT 2
21816: PUSH
21817: LD_INT 21
21819: PUSH
21820: LD_INT 1
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 21
21829: PUSH
21830: LD_INT 2
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 22
21844: PUSH
21845: LD_OWVAR 2
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PPUSH
21858: CALL_OW 70
21862: PUSH
21863: FOR_IN
21864: IFFALSE 21923
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
21866: LD_EXP 40
21870: PUSH
21871: LD_VAR 0 1
21875: ARRAY
21876: PUSH
21877: LD_EXP 40
21881: PUSH
21882: LD_OWVAR 2
21886: ARRAY
21887: NONEQUAL
21888: PUSH
21889: LD_EXP 45
21893: NOT
21894: PUSH
21895: LD_VAR 0 1
21899: PUSH
21900: LD_OWVAR 2
21904: NONEQUAL
21905: AND
21906: OR
21907: IFFALSE 21921
// ComMoveToArea ( un , BuildUpEscape ) ;
21909: LD_VAR 0 2
21913: PPUSH
21914: LD_INT 28
21916: PPUSH
21917: CALL_OW 113
21921: GO 21863
21923: POP
21924: POP
21925: GO 21777
21927: POP
21928: POP
// enable ;
21929: ENABLE
// end ;
21930: PPOPN 2
21932: END
// every 0 0$1 trigger def_builduptime do
21933: LD_EXP 17
21937: IFFALSE 21963
21939: GO 21941
21941: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
21942: LD_INT 8400
21944: PUSH
21945: LD_EXP 17
21949: PUSH
21950: LD_INT 2100
21952: MUL
21953: PLUS
21954: PPUSH
21955: CALL_OW 67
// EndBuildUp ;
21959: CALL 21576 0 0
// end ;
21963: END
