// export def_main_base , def_secondary_base , def_defence_level , def_amount_of_people , def_initial_level , def_main_deposits , def_secondary_deposits , def_siberite_detection , def_starting_resources , def_shipments_density , def_people_arrivals , def_people_loyality , def_people_info , def_morale_flags , def_siberite_bomb , def_amount_of_apemen , def_builduptime , def_win_rules , def_people_respawning ; export is_depot , number_of_people , number_of_pplants , are_mines , is_lab , is_fact , is_arm , are_breastworks , deposits , initial_level , starting_crates , starting_resources , shipments_density , max_arriving_times , text_info , fog_info , def_bf_params , amount_of_apemen , siberite_bomb_Delay ; export Positions , Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export second_side , third_nation ; export start_def , depots_def , breastworks_def , labs_def , factories_def , armories_def , pplants_def , deposits_def ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i ; var u1 , u2 , pom_tab , p1 , p2 , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
  73: PPUSH
  74: PPUSH
  75: PPUSH
  76: PPUSH
  77: PPUSH
  78: PPUSH
  79: PPUSH
  80: PPUSH
  81: PPUSH
  82: PPUSH
  83: PPUSH
// if MultiPlayer then
  84: LD_OWVAR 4
  88: IFFALSE 162
// begin Game_Type = mp_game_type ;
  90: LD_ADDR_EXP 64
  94: PUSH
  95: LD_OWVAR 6
  99: ST_TO_ADDR
// Your_Side = mp_player_side ;
 100: LD_ADDR_OWVAR 2
 104: PUSH
 105: LD_OWVAR 7
 109: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_OWVAR 17
 119: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 120: LD_ADDR_EXP 40
 124: PUSH
 125: LD_OWVAR 15
 129: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 130: LD_ADDR_EXP 44
 134: PUSH
 135: LD_OWVAR 16
 139: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 140: LD_ADDR_EXP 42
 144: PUSH
 145: CALL 0 0 0
 149: ST_TO_ADDR
// Teams = mp_teams ;
 150: LD_ADDR_EXP 41
 154: PUSH
 155: LD_OWVAR 12
 159: ST_TO_ADDR
// end else
 160: GO 333
// begin Your_Side = 3 ;
 162: LD_ADDR_OWVAR 2
 166: PUSH
 167: LD_INT 3
 169: ST_TO_ADDR
// Side_Positions = [ 0 , 0 , 2 , 0 , 1 , 0 , 0 , 0 ] ;
 170: LD_ADDR_EXP 43
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 2
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 1
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: LD_INT 0
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: LIST
 208: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 209: LD_ADDR_EXP 40
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: LD_INT 0
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: LIST
 246: LIST
 247: ST_TO_ADDR
// Side_Nations = [ 0 , 0 , 3 , 0 , 2 , 0 , 0 , 0 ] ;
 248: LD_ADDR_EXP 44
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 3
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 2
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: LIST
 286: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 287: LD_ADDR_EXP 42
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: ST_TO_ADDR
// Teams = [ ] ;
 326: LD_ADDR_EXP 41
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 333: LD_ADDR_EXP 45
 337: PUSH
 338: LD_EXP 40
 342: PUSH
 343: LD_INT 0
 345: PUSH
 346: EMPTY
 347: LIST
 348: DIFF
 349: PUSH
 350: LD_INT 1
 352: GREATER
 353: ST_TO_ADDR
// p1 := 0 ;
 354: LD_ADDR_VAR 0 12
 358: PUSH
 359: LD_INT 0
 361: ST_TO_ADDR
// p2 := 0 ;
 362: LD_ADDR_VAR 0 13
 366: PUSH
 367: LD_INT 0
 369: ST_TO_ADDR
// for i := 1 to 8 do
 370: LD_ADDR_VAR 0 8
 374: PUSH
 375: DOUBLE
 376: LD_INT 1
 378: DEC
 379: ST_TO_ADDR
 380: LD_INT 8
 382: PUSH
 383: FOR_TO
 384: IFFALSE 442
// if Side_Positions [ i ] = 1 then
 386: LD_EXP 43
 390: PUSH
 391: LD_VAR 0 8
 395: ARRAY
 396: PUSH
 397: LD_INT 1
 399: EQUAL
 400: IFFALSE 414
// p1 := i else
 402: LD_ADDR_VAR 0 12
 406: PUSH
 407: LD_VAR 0 8
 411: ST_TO_ADDR
 412: GO 440
// if Side_Positions [ i ] = 2 then
 414: LD_EXP 43
 418: PUSH
 419: LD_VAR 0 8
 423: ARRAY
 424: PUSH
 425: LD_INT 2
 427: EQUAL
 428: IFFALSE 440
// p2 := i ;
 430: LD_ADDR_VAR 0 13
 434: PUSH
 435: LD_VAR 0 8
 439: ST_TO_ADDR
 440: GO 383
 442: POP
 443: POP
// Positions := [ p1 , p2 ] ;
 444: LD_ADDR_EXP 39
 448: PUSH
 449: LD_VAR 0 12
 453: PUSH
 454: LD_VAR 0 13
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: ST_TO_ADDR
// if MultiPlayer then
 463: LD_OWVAR 4
 467: IFFALSE 721
// begin def_main_base = GetMultiplayerSetting ( 0 ) ;
 469: LD_ADDR_EXP 1
 473: PUSH
 474: LD_INT 0
 476: PPUSH
 477: CALL_OW 426
 481: ST_TO_ADDR
// def_secondary_base = GetMultiplayerSetting ( 1 ) ;
 482: LD_ADDR_EXP 2
 486: PUSH
 487: LD_INT 1
 489: PPUSH
 490: CALL_OW 426
 494: ST_TO_ADDR
// def_defence_level = GetMultiplayerSetting ( 2 ) ;
 495: LD_ADDR_EXP 3
 499: PUSH
 500: LD_INT 2
 502: PPUSH
 503: CALL_OW 426
 507: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 3 ) ;
 508: LD_ADDR_EXP 4
 512: PUSH
 513: LD_INT 3
 515: PPUSH
 516: CALL_OW 426
 520: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 4 ) ;
 521: LD_ADDR_EXP 5
 525: PUSH
 526: LD_INT 4
 528: PPUSH
 529: CALL_OW 426
 533: ST_TO_ADDR
// def_main_deposits = GetMultiplayerSetting ( 5 ) ;
 534: LD_ADDR_EXP 6
 538: PUSH
 539: LD_INT 5
 541: PPUSH
 542: CALL_OW 426
 546: ST_TO_ADDR
// def_secondary_deposits = GetMultiplayerSetting ( 6 ) ;
 547: LD_ADDR_EXP 7
 551: PUSH
 552: LD_INT 6
 554: PPUSH
 555: CALL_OW 426
 559: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 7 ) ;
 560: LD_ADDR_EXP 8
 564: PUSH
 565: LD_INT 7
 567: PPUSH
 568: CALL_OW 426
 572: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 8 ) ;
 573: LD_ADDR_EXP 9
 577: PUSH
 578: LD_INT 8
 580: PPUSH
 581: CALL_OW 426
 585: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 9 ) ;
 586: LD_ADDR_EXP 10
 590: PUSH
 591: LD_INT 9
 593: PPUSH
 594: CALL_OW 426
 598: ST_TO_ADDR
// def_people_arrivals = GetMultiplayerSetting ( 10 ) ;
 599: LD_ADDR_EXP 11
 603: PUSH
 604: LD_INT 10
 606: PPUSH
 607: CALL_OW 426
 611: ST_TO_ADDR
// def_people_loyality = GetMultiplayerSetting ( 11 ) ;
 612: LD_ADDR_EXP 12
 616: PUSH
 617: LD_INT 11
 619: PPUSH
 620: CALL_OW 426
 624: ST_TO_ADDR
// def_people_info = GetMultiplayerSetting ( 12 ) ;
 625: LD_ADDR_EXP 13
 629: PUSH
 630: LD_INT 12
 632: PPUSH
 633: CALL_OW 426
 637: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 15 ) ;
 638: LD_ADDR_EXP 14
 642: PUSH
 643: LD_INT 15
 645: PPUSH
 646: CALL_OW 426
 650: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 16 ) ;
 651: LD_ADDR_EXP 15
 655: PUSH
 656: LD_INT 16
 658: PPUSH
 659: CALL_OW 426
 663: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 17 ) ;
 664: LD_ADDR_EXP 16
 668: PUSH
 669: LD_INT 17
 671: PPUSH
 672: CALL_OW 426
 676: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 677: LD_ADDR_EXP 17
 681: PUSH
 682: LD_INT 20
 684: PPUSH
 685: CALL_OW 426
 689: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 690: LD_ADDR_VAR 0 14
 694: PUSH
 695: LD_INT 22
 697: PPUSH
 698: CALL_OW 426
 702: ST_TO_ADDR
// def_people_respawning = 0 ;
 703: LD_ADDR_EXP 19
 707: PUSH
 708: LD_INT 0
 710: ST_TO_ADDR
// def_win_rules = 0 ;
 711: LD_ADDR_EXP 18
 715: PUSH
 716: LD_INT 0
 718: ST_TO_ADDR
// end else
 719: GO 893
// begin randomize ;
 721: CALL_OW 10
// def_main_base = 1 ;
 725: LD_ADDR_EXP 1
 729: PUSH
 730: LD_INT 1
 732: ST_TO_ADDR
// def_secondary_base = 1 ;
 733: LD_ADDR_EXP 2
 737: PUSH
 738: LD_INT 1
 740: ST_TO_ADDR
// def_defence_level = 1 ;
 741: LD_ADDR_EXP 3
 745: PUSH
 746: LD_INT 1
 748: ST_TO_ADDR
// def_amount_of_people = 2 ;
 749: LD_ADDR_EXP 4
 753: PUSH
 754: LD_INT 2
 756: ST_TO_ADDR
// def_initial_level = 1 ;
 757: LD_ADDR_EXP 5
 761: PUSH
 762: LD_INT 1
 764: ST_TO_ADDR
// def_main_deposits = 2 ;
 765: LD_ADDR_EXP 6
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// def_secondary_deposits = 1 ;
 773: LD_ADDR_EXP 7
 777: PUSH
 778: LD_INT 1
 780: ST_TO_ADDR
// def_siberite_detection = 1 ;
 781: LD_ADDR_EXP 8
 785: PUSH
 786: LD_INT 1
 788: ST_TO_ADDR
// def_starting_resources = 2 ;
 789: LD_ADDR_EXP 9
 793: PUSH
 794: LD_INT 2
 796: ST_TO_ADDR
// def_shipments_density = 70 ;
 797: LD_ADDR_EXP 10
 801: PUSH
 802: LD_INT 70
 804: ST_TO_ADDR
// def_people_arrivals = 3 ;
 805: LD_ADDR_EXP 11
 809: PUSH
 810: LD_INT 3
 812: ST_TO_ADDR
// def_people_loyality = 1 ;
 813: LD_ADDR_EXP 12
 817: PUSH
 818: LD_INT 1
 820: ST_TO_ADDR
// def_people_info = 1 ;
 821: LD_ADDR_EXP 13
 825: PUSH
 826: LD_INT 1
 828: ST_TO_ADDR
// def_morale_flags = 2 ;
 829: LD_ADDR_EXP 14
 833: PUSH
 834: LD_INT 2
 836: ST_TO_ADDR
// def_siberite_bomb = 1 ;
 837: LD_ADDR_EXP 15
 841: PUSH
 842: LD_INT 1
 844: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 845: LD_ADDR_EXP 16
 849: PUSH
 850: LD_INT 3
 852: ST_TO_ADDR
// def_builduptime = 1 ;
 853: LD_ADDR_EXP 17
 857: PUSH
 858: LD_INT 1
 860: ST_TO_ADDR
// def_game_rules = 0 ;
 861: LD_ADDR_EXP 65
 865: PUSH
 866: LD_INT 0
 868: ST_TO_ADDR
// tech_level = 4 ;
 869: LD_ADDR_VAR 0 14
 873: PUSH
 874: LD_INT 4
 876: ST_TO_ADDR
// def_people_respawning = 0 ;
 877: LD_ADDR_EXP 19
 881: PUSH
 882: LD_INT 0
 884: ST_TO_ADDR
// def_win_rules = 0 ;
 885: LD_ADDR_EXP 18
 889: PUSH
 890: LD_INT 0
 892: ST_TO_ADDR
// end ; InitGameRules ;
 893: CALL 13313 0 0
// if def_game_rules = 0 then
 897: LD_EXP 65
 901: PUSH
 902: LD_INT 0
 904: EQUAL
 905: IFFALSE 932
// begin if isSGUI then
 907: LD_OWVAR 83
 911: IFFALSE 919
// setMpTechs ( ) else
 913: CALL 16630 0 0
 917: GO 932
// begin SetMpTechLevel ( tech_level + 1 ) ;
 919: LD_VAR 0 14
 923: PUSH
 924: LD_INT 1
 926: PLUS
 927: PPUSH
 928: CALL 16777 0 1
// end ; end ; u1 = [ 0 , 1 , 1 , 1 , 2 ] [ def_main_base + 1 ] ;
 932: LD_ADDR_VAR 0 9
 936: PUSH
 937: LD_INT 0
 939: PUSH
 940: LD_INT 1
 942: PUSH
 943: LD_INT 1
 945: PUSH
 946: LD_INT 1
 948: PUSH
 949: LD_INT 2
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_EXP 1
 963: PUSH
 964: LD_INT 1
 966: PLUS
 967: ARRAY
 968: ST_TO_ADDR
// u2 = [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] ;
 969: LD_ADDR_VAR 0 10
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: LD_INT 1
 979: PUSH
 980: LD_INT 1
 982: PUSH
 983: LD_INT 2
 985: PUSH
 986: LD_INT 2
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: PUSH
 996: LD_EXP 1
1000: PUSH
1001: LD_INT 1
1003: PLUS
1004: ARRAY
1005: ST_TO_ADDR
// is_depot = [ [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] , [ 0 , 1 , 1 ] [ def_secondary_base + 1 ] ] ;
1006: LD_ADDR_EXP 20
1010: PUSH
1011: LD_INT 0
1013: PUSH
1014: LD_INT 1
1016: PUSH
1017: LD_INT 1
1019: PUSH
1020: LD_INT 2
1022: PUSH
1023: LD_INT 2
1025: PUSH
1026: EMPTY
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: LD_EXP 1
1037: PUSH
1038: LD_INT 1
1040: PLUS
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: PUSH
1046: LD_INT 1
1048: PUSH
1049: LD_INT 1
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: LIST
1056: PUSH
1057: LD_EXP 2
1061: PUSH
1062: LD_INT 1
1064: PLUS
1065: ARRAY
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: ST_TO_ADDR
// if is_depot [ 2 ] then
1071: LD_EXP 20
1075: PUSH
1076: LD_INT 2
1078: ARRAY
1079: IFFALSE 1218
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ [ ] , [ 1 ] , [ 1 , 1 ] , [ 1 , 1 , 1 ] ] [ def_defence_level + 1 ] ] else
1081: LD_ADDR_EXP 27
1085: PUSH
1086: EMPTY
1087: PUSH
1088: LD_VAR 0 10
1092: PUSH
1093: LD_VAR 0 9
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: PUSH
1102: LD_VAR 0 10
1106: PUSH
1107: LD_VAR 0 10
1111: PUSH
1112: LD_VAR 0 9
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_VAR 0 10
1126: PUSH
1127: LD_VAR 0 10
1131: PUSH
1132: LD_VAR 0 9
1136: PUSH
1137: LD_VAR 0 9
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: PUSH
1154: LD_EXP 3
1158: PUSH
1159: LD_INT 1
1161: PLUS
1162: ARRAY
1163: PUSH
1164: EMPTY
1165: PUSH
1166: LD_INT 1
1168: PUSH
1169: EMPTY
1170: LIST
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: LD_INT 1
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: LD_INT 1
1187: PUSH
1188: LD_INT 1
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: PUSH
1202: LD_EXP 3
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: ARRAY
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: ST_TO_ADDR
1216: GO 1307
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ ] ] ;
1218: LD_ADDR_EXP 27
1222: PUSH
1223: EMPTY
1224: PUSH
1225: LD_VAR 0 10
1229: PUSH
1230: LD_VAR 0 9
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: PUSH
1239: LD_VAR 0 10
1243: PUSH
1244: LD_VAR 0 10
1248: PUSH
1249: LD_VAR 0 9
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: PUSH
1259: LD_VAR 0 10
1263: PUSH
1264: LD_VAR 0 10
1268: PUSH
1269: LD_VAR 0 9
1273: PUSH
1274: LD_VAR 0 9
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: PUSH
1291: LD_EXP 3
1295: PUSH
1296: LD_INT 1
1298: PLUS
1299: ARRAY
1300: PUSH
1301: EMPTY
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: ST_TO_ADDR
// is_fact = [ [ 0 , 0 , 1 , 2 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1307: LD_ADDR_EXP 25
1311: PUSH
1312: LD_INT 0
1314: PUSH
1315: LD_INT 0
1317: PUSH
1318: LD_INT 1
1320: PUSH
1321: LD_INT 2
1323: PUSH
1324: LD_INT 2
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: PUSH
1334: LD_EXP 1
1338: PUSH
1339: LD_INT 1
1341: PLUS
1342: ARRAY
1343: PUSH
1344: LD_INT 0
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: ST_TO_ADDR
// is_lab = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1351: LD_ADDR_EXP 24
1355: PUSH
1356: LD_INT 0
1358: PUSH
1359: LD_INT 0
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 2
1370: PUSH
1371: EMPTY
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: PUSH
1378: LD_EXP 1
1382: PUSH
1383: LD_INT 1
1385: PLUS
1386: ARRAY
1387: PUSH
1388: LD_INT 0
1390: PUSH
1391: EMPTY
1392: LIST
1393: LIST
1394: ST_TO_ADDR
// is_arm = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1395: LD_ADDR_EXP 26
1399: PUSH
1400: LD_INT 0
1402: PUSH
1403: LD_INT 0
1405: PUSH
1406: LD_INT 1
1408: PUSH
1409: LD_INT 1
1411: PUSH
1412: LD_INT 2
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: PUSH
1422: LD_EXP 1
1426: PUSH
1427: LD_INT 1
1429: PLUS
1430: ARRAY
1431: PUSH
1432: LD_INT 0
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: ST_TO_ADDR
// are_mines = [ [ 0 , 0 , 0 , 1 , 1 ] [ def_main_base + 1 ] , [ 0 , 0 , 1 ] [ def_secondary_base + 1 ] ] ;
1439: LD_ADDR_EXP 23
1443: PUSH
1444: LD_INT 0
1446: PUSH
1447: LD_INT 0
1449: PUSH
1450: LD_INT 0
1452: PUSH
1453: LD_INT 1
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: PUSH
1466: LD_EXP 1
1470: PUSH
1471: LD_INT 1
1473: PLUS
1474: ARRAY
1475: PUSH
1476: LD_INT 0
1478: PUSH
1479: LD_INT 0
1481: PUSH
1482: LD_INT 1
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: LIST
1489: PUSH
1490: LD_EXP 2
1494: PUSH
1495: LD_INT 1
1497: PLUS
1498: ARRAY
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: ST_TO_ADDR
// number_of_pplants = [ [ 0 , 0 , 0 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1504: LD_ADDR_EXP 22
1508: PUSH
1509: LD_INT 0
1511: PUSH
1512: LD_INT 0
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 2
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_EXP 1
1535: PUSH
1536: LD_INT 1
1538: PLUS
1539: ARRAY
1540: PUSH
1541: LD_INT 0
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: ST_TO_ADDR
// number_of_people = [ [ 5 , 8 , 11 ] [ def_amount_of_people + 1 ] , ( [ 2 , 3 , 4 ] [ def_amount_of_people + 1 ] ) * is_depot [ 2 ] ] ;
1548: LD_ADDR_EXP 21
1552: PUSH
1553: LD_INT 5
1555: PUSH
1556: LD_INT 8
1558: PUSH
1559: LD_INT 11
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: LIST
1566: PUSH
1567: LD_EXP 4
1571: PUSH
1572: LD_INT 1
1574: PLUS
1575: ARRAY
1576: PUSH
1577: LD_INT 2
1579: PUSH
1580: LD_INT 3
1582: PUSH
1583: LD_INT 4
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: LIST
1590: PUSH
1591: LD_EXP 4
1595: PUSH
1596: LD_INT 1
1598: PLUS
1599: ARRAY
1600: PUSH
1601: LD_EXP 20
1605: PUSH
1606: LD_INT 2
1608: ARRAY
1609: MUL
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
1615: LD_ADDR_EXP 29
1619: PUSH
1620: LD_INT 2
1622: PUSH
1623: LD_INT 3
1625: PUSH
1626: LD_INT 4
1628: PUSH
1629: LD_INT 5
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: PUSH
1638: LD_EXP 5
1642: PUSH
1643: LD_INT 1
1645: PLUS
1646: ARRAY
1647: ST_TO_ADDR
// starting_resources = [ [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] , [ [ 50 , 0 , 0 ] , [ 20 , 0 , 0 ] ] , [ [ 150 , 30 , 0 ] , [ 60 , 0 , 0 ] ] , [ [ 250 , 50 , 10 ] , [ 100 , 30 , 0 ] ] ] [ def_starting_resources + 1 ] ;
1648: LD_ADDR_EXP 31
1652: PUSH
1653: LD_INT 0
1655: PUSH
1656: LD_INT 0
1658: PUSH
1659: LD_INT 0
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: PUSH
1667: LD_INT 0
1669: PUSH
1670: LD_INT 0
1672: PUSH
1673: LD_INT 0
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: PUSH
1685: LD_INT 50
1687: PUSH
1688: LD_INT 0
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: PUSH
1699: LD_INT 20
1701: PUSH
1702: LD_INT 0
1704: PUSH
1705: LD_INT 0
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: LD_INT 150
1719: PUSH
1720: LD_INT 30
1722: PUSH
1723: LD_INT 0
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: PUSH
1731: LD_INT 60
1733: PUSH
1734: LD_INT 0
1736: PUSH
1737: LD_INT 0
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 250
1751: PUSH
1752: LD_INT 50
1754: PUSH
1755: LD_INT 10
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: LD_INT 100
1765: PUSH
1766: LD_INT 30
1768: PUSH
1769: LD_INT 0
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: PUSH
1787: LD_EXP 9
1791: PUSH
1792: LD_INT 1
1794: PLUS
1795: ARRAY
1796: ST_TO_ADDR
// shipments_density := 300 - ( def_shipments_density * 2 ) ;
1797: LD_ADDR_EXP 32
1801: PUSH
1802: LD_INT 300
1804: PUSH
1805: LD_EXP 10
1809: PUSH
1810: LD_INT 2
1812: MUL
1813: MINUS
1814: ST_TO_ADDR
// max_arriving_times = [ [ ] , [ 10 , 17 , 26 , 36 , 48 , 60 ] , [ 6 , 10 , 15 , 20 , 26 , 32 , 38 , 45 , 52 , 60 ] , [ 4 , 6 , 9 , 12 , 16 , 20 , 24 , 28 , 32 , 36 , 40 , 45 , 50 , 55 , 60 ] ] [ def_people_arrivals + 1 ] ;
1815: LD_ADDR_EXP 33
1819: PUSH
1820: EMPTY
1821: PUSH
1822: LD_INT 10
1824: PUSH
1825: LD_INT 17
1827: PUSH
1828: LD_INT 26
1830: PUSH
1831: LD_INT 36
1833: PUSH
1834: LD_INT 48
1836: PUSH
1837: LD_INT 60
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: PUSH
1848: LD_INT 6
1850: PUSH
1851: LD_INT 10
1853: PUSH
1854: LD_INT 15
1856: PUSH
1857: LD_INT 20
1859: PUSH
1860: LD_INT 26
1862: PUSH
1863: LD_INT 32
1865: PUSH
1866: LD_INT 38
1868: PUSH
1869: LD_INT 45
1871: PUSH
1872: LD_INT 52
1874: PUSH
1875: LD_INT 60
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 4
1892: PUSH
1893: LD_INT 6
1895: PUSH
1896: LD_INT 9
1898: PUSH
1899: LD_INT 12
1901: PUSH
1902: LD_INT 16
1904: PUSH
1905: LD_INT 20
1907: PUSH
1908: LD_INT 24
1910: PUSH
1911: LD_INT 28
1913: PUSH
1914: LD_INT 32
1916: PUSH
1917: LD_INT 36
1919: PUSH
1920: LD_INT 40
1922: PUSH
1923: LD_INT 45
1925: PUSH
1926: LD_INT 50
1928: PUSH
1929: LD_INT 55
1931: PUSH
1932: LD_INT 60
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: PUSH
1958: LD_EXP 11
1962: PUSH
1963: LD_INT 1
1965: PLUS
1966: ARRAY
1967: ST_TO_ADDR
// text_info = [ 0 , 1 , 0 , 1 ] [ def_people_info + 1 ] ;
1968: LD_ADDR_EXP 34
1972: PUSH
1973: LD_INT 0
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 1
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: PUSH
1991: LD_EXP 13
1995: PUSH
1996: LD_INT 1
1998: PLUS
1999: ARRAY
2000: ST_TO_ADDR
// fog_info = [ 0 , 0 , 1 , 1 ] [ def_people_info + 1 ] ;
2001: LD_ADDR_EXP 35
2005: PUSH
2006: LD_INT 0
2008: PUSH
2009: LD_INT 0
2011: PUSH
2012: LD_INT 1
2014: PUSH
2015: LD_INT 1
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: PUSH
2024: LD_EXP 13
2028: PUSH
2029: LD_INT 1
2031: PLUS
2032: ARRAY
2033: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
2034: LD_ADDR_EXP 37
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 1
2044: PUSH
2045: LD_INT 2
2047: PUSH
2048: LD_INT 3
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: PUSH
2057: LD_EXP 16
2061: PUSH
2062: LD_INT 1
2064: PLUS
2065: ARRAY
2066: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2067: LD_ADDR_EXP 38
2071: PUSH
2072: LD_INT 0
2074: PUSH
2075: LD_INT 1
2077: PUSH
2078: LD_INT 63000
2080: PUSH
2081: LD_INT 126000
2083: PUSH
2084: LD_INT 189000
2086: PUSH
2087: LD_INT 252000
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: PUSH
2098: LD_EXP 15
2102: PUSH
2103: LD_INT 1
2105: PLUS
2106: ARRAY
2107: ST_TO_ADDR
// deposits = [ [ [ 1 , 0 , 1 , 2 , 0 ] [ def_main_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_main_deposits + 1 ] ] , [ [ 1 , 0 , 1 , 2 , 0 ] [ def_secondary_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_secondary_deposits + 1 ] ] ] ;
2108: LD_ADDR_EXP 28
2112: PUSH
2113: LD_INT 1
2115: PUSH
2116: LD_INT 0
2118: PUSH
2119: LD_INT 1
2121: PUSH
2122: LD_INT 2
2124: PUSH
2125: LD_INT 0
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: PUSH
2135: LD_EXP 6
2139: PUSH
2140: LD_INT 1
2142: PLUS
2143: ARRAY
2144: PUSH
2145: LD_INT 0
2147: PUSH
2148: LD_INT 1
2150: PUSH
2151: LD_INT 1
2153: PUSH
2154: LD_INT 0
2156: PUSH
2157: LD_INT 2
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_EXP 6
2171: PUSH
2172: LD_INT 1
2174: PLUS
2175: ARRAY
2176: PUSH
2177: EMPTY
2178: LIST
2179: LIST
2180: PUSH
2181: LD_INT 1
2183: PUSH
2184: LD_INT 0
2186: PUSH
2187: LD_INT 1
2189: PUSH
2190: LD_INT 2
2192: PUSH
2193: LD_INT 0
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: PUSH
2203: LD_EXP 7
2207: PUSH
2208: LD_INT 1
2210: PLUS
2211: ARRAY
2212: PUSH
2213: LD_INT 0
2215: PUSH
2216: LD_INT 1
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: LD_INT 0
2224: PUSH
2225: LD_INT 2
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: LIST
2234: PUSH
2235: LD_EXP 7
2239: PUSH
2240: LD_INT 1
2242: PLUS
2243: ARRAY
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: ST_TO_ADDR
// def_bf_params = [ [ 0 , 0 , 0 , 0 ] , [ 50 , 25 , 0 , 50 ] , [ 75 , 50 , 25 , 75 ] , [ 100 , 75 , 50 , 100 ] ] [ def_morale_flags + 1 ] ;
2253: LD_ADDR_EXP 36
2257: PUSH
2258: LD_INT 0
2260: PUSH
2261: LD_INT 0
2263: PUSH
2264: LD_INT 0
2266: PUSH
2267: LD_INT 0
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 50
2278: PUSH
2279: LD_INT 25
2281: PUSH
2282: LD_INT 0
2284: PUSH
2285: LD_INT 50
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: PUSH
2294: LD_INT 75
2296: PUSH
2297: LD_INT 50
2299: PUSH
2300: LD_INT 25
2302: PUSH
2303: LD_INT 75
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: PUSH
2312: LD_INT 100
2314: PUSH
2315: LD_INT 75
2317: PUSH
2318: LD_INT 50
2320: PUSH
2321: LD_INT 100
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: PUSH
2336: LD_EXP 14
2340: PUSH
2341: LD_INT 1
2343: PLUS
2344: ARRAY
2345: ST_TO_ADDR
// prepare_arrivals ;
2346: CALL 11027 0 0
// if def_people_loyality then
2350: LD_EXP 12
2354: IFFALSE 3219
// begin second_side = [ [ [ 0 , 0 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 6 , 7 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 4 , 2 ] , [ 4 , 2 ] ] , [ [ 5 , 4 ] , [ 0 , 0 ] , [ 5 , 6 ] , [ 5 , 1 ] , [ 7 , 3 ] , [ 5 , 3 ] , [ 5 , 4 ] , [ 5 , 4 ] ] , [ [ 6 , 4 ] , [ 6 , 5 ] , [ 0 , 0 ] , [ 6 , 1 ] , [ 6 , 2 ] , [ 5 , 1 ] , [ 6 , 4 ] , [ 6 , 2 ] ] , [ [ 7 , 6 ] , [ 1 , 5 ] , [ 1 , 6 ] , [ 0 , 0 ] , [ 1 , 2 ] , [ 1 , 3 ] , [ 1 , 2 ] , [ 1 , 2 ] ] , [ [ 2 , 4 ] , [ 3 , 7 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 0 , 0 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 2 , 4 ] ] , [ [ 3 , 4 ] , [ 3 , 5 ] , [ 1 , 5 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 0 , 0 ] , [ 3 , 4 ] , [ 3 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 0 , 0 ] , [ 4 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 0 , 0 ] ] ] [ positions [ 1 ] ] [ positions [ 2 ] ] ;
2356: LD_ADDR_EXP 46
2360: PUSH
2361: LD_INT 0
2363: PUSH
2364: LD_INT 0
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: PUSH
2371: LD_INT 4
2373: PUSH
2374: LD_INT 5
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PUSH
2381: LD_INT 4
2383: PUSH
2384: LD_INT 6
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: PUSH
2391: LD_INT 6
2393: PUSH
2394: LD_INT 7
2396: PUSH
2397: EMPTY
2398: LIST
2399: LIST
2400: PUSH
2401: LD_INT 4
2403: PUSH
2404: LD_INT 2
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: PUSH
2411: LD_INT 4
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PUSH
2421: LD_INT 4
2423: PUSH
2424: LD_INT 2
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: PUSH
2431: LD_INT 4
2433: PUSH
2434: LD_INT 2
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: LIST
2445: LIST
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 5
2453: PUSH
2454: LD_INT 4
2456: PUSH
2457: EMPTY
2458: LIST
2459: LIST
2460: PUSH
2461: LD_INT 0
2463: PUSH
2464: LD_INT 0
2466: PUSH
2467: EMPTY
2468: LIST
2469: LIST
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 6
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: PUSH
2481: LD_INT 5
2483: PUSH
2484: LD_INT 1
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: PUSH
2491: LD_INT 7
2493: PUSH
2494: LD_INT 3
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PUSH
2501: LD_INT 5
2503: PUSH
2504: LD_INT 3
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: PUSH
2511: LD_INT 5
2513: PUSH
2514: LD_INT 4
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: PUSH
2521: LD_INT 5
2523: PUSH
2524: LD_INT 4
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: LIST
2540: PUSH
2541: LD_INT 6
2543: PUSH
2544: LD_INT 4
2546: PUSH
2547: EMPTY
2548: LIST
2549: LIST
2550: PUSH
2551: LD_INT 6
2553: PUSH
2554: LD_INT 5
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: PUSH
2561: LD_INT 0
2563: PUSH
2564: LD_INT 0
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: PUSH
2571: LD_INT 6
2573: PUSH
2574: LD_INT 1
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: PUSH
2581: LD_INT 6
2583: PUSH
2584: LD_INT 2
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 5
2593: PUSH
2594: LD_INT 1
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PUSH
2601: LD_INT 6
2603: PUSH
2604: LD_INT 4
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: PUSH
2611: LD_INT 6
2613: PUSH
2614: LD_INT 2
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: PUSH
2631: LD_INT 7
2633: PUSH
2634: LD_INT 6
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: LD_INT 5
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 6
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: PUSH
2661: LD_INT 0
2663: PUSH
2664: LD_INT 0
2666: PUSH
2667: EMPTY
2668: LIST
2669: LIST
2670: PUSH
2671: LD_INT 1
2673: PUSH
2674: LD_INT 2
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 1
2683: PUSH
2684: LD_INT 3
2686: PUSH
2687: EMPTY
2688: LIST
2689: LIST
2690: PUSH
2691: LD_INT 1
2693: PUSH
2694: LD_INT 2
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: PUSH
2701: LD_INT 1
2703: PUSH
2704: LD_INT 2
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: PUSH
2721: LD_INT 2
2723: PUSH
2724: LD_INT 4
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: PUSH
2731: LD_INT 3
2733: PUSH
2734: LD_INT 7
2736: PUSH
2737: EMPTY
2738: LIST
2739: LIST
2740: PUSH
2741: LD_INT 2
2743: PUSH
2744: LD_INT 6
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PUSH
2751: LD_INT 2
2753: PUSH
2754: LD_INT 1
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 0
2763: PUSH
2764: LD_INT 0
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 2
2773: PUSH
2774: LD_INT 3
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: LD_INT 4
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: LD_INT 2
2793: PUSH
2794: LD_INT 4
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: PUSH
2811: LD_INT 3
2813: PUSH
2814: LD_INT 4
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: PUSH
2821: LD_INT 3
2823: PUSH
2824: LD_INT 5
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: PUSH
2831: LD_INT 1
2833: PUSH
2834: LD_INT 5
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 3
2843: PUSH
2844: LD_INT 1
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: PUSH
2851: LD_INT 3
2853: PUSH
2854: LD_INT 2
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: LD_INT 0
2863: PUSH
2864: LD_INT 0
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: LD_INT 3
2873: PUSH
2874: LD_INT 4
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 3
2883: PUSH
2884: LD_INT 2
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: LIST
2895: LIST
2896: LIST
2897: LIST
2898: LIST
2899: LIST
2900: PUSH
2901: LD_INT 2
2903: PUSH
2904: LD_INT 4
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: PUSH
2911: LD_INT 4
2913: PUSH
2914: LD_INT 5
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PUSH
2921: LD_INT 4
2923: PUSH
2924: LD_INT 6
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PUSH
2931: LD_INT 2
2933: PUSH
2934: LD_INT 1
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PUSH
2941: LD_INT 4
2943: PUSH
2944: LD_INT 2
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: LD_INT 4
2953: PUSH
2954: LD_INT 3
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 0
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: PUSH
2971: LD_INT 4
2973: PUSH
2974: LD_INT 2
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: LIST
2990: PUSH
2991: LD_INT 2
2993: PUSH
2994: LD_INT 4
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: PUSH
3001: LD_INT 4
3003: PUSH
3004: LD_INT 5
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: PUSH
3011: LD_INT 2
3013: PUSH
3014: LD_INT 6
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 2
3023: PUSH
3024: LD_INT 1
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: LD_INT 4
3033: PUSH
3034: LD_INT 2
3036: PUSH
3037: EMPTY
3038: LIST
3039: LIST
3040: PUSH
3041: LD_INT 2
3043: PUSH
3044: LD_INT 3
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PUSH
3051: LD_INT 2
3053: PUSH
3054: LD_INT 4
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: PUSH
3061: LD_INT 0
3063: PUSH
3064: LD_INT 0
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: LIST
3089: LIST
3090: PUSH
3091: LD_EXP 39
3095: PUSH
3096: LD_INT 1
3098: ARRAY
3099: ARRAY
3100: PUSH
3101: LD_EXP 39
3105: PUSH
3106: LD_INT 2
3108: ARRAY
3109: ARRAY
3110: ST_TO_ADDR
// SetAttitude ( second_side [ 1 ] , positions [ 1 ] , att_friend , true ) ;
3111: LD_EXP 46
3115: PUSH
3116: LD_INT 1
3118: ARRAY
3119: PPUSH
3120: LD_EXP 39
3124: PUSH
3125: LD_INT 1
3127: ARRAY
3128: PPUSH
3129: LD_INT 1
3131: PPUSH
3132: LD_INT 1
3134: PPUSH
3135: CALL_OW 80
// SetAttitude ( second_side [ 2 ] , positions [ 2 ] , att_friend , true ) ;
3139: LD_EXP 46
3143: PUSH
3144: LD_INT 2
3146: ARRAY
3147: PPUSH
3148: LD_EXP 39
3152: PUSH
3153: LD_INT 2
3155: ARRAY
3156: PPUSH
3157: LD_INT 1
3159: PPUSH
3160: LD_INT 1
3162: PPUSH
3163: CALL_OW 80
// if fog_info then
3167: LD_EXP 35
3171: IFFALSE 3217
// begin ChangeSideFog ( second_side [ 1 ] , positions [ 1 ] ) ;
3173: LD_EXP 46
3177: PUSH
3178: LD_INT 1
3180: ARRAY
3181: PPUSH
3182: LD_EXP 39
3186: PUSH
3187: LD_INT 1
3189: ARRAY
3190: PPUSH
3191: CALL_OW 343
// ChangeSideFog ( second_side [ 2 ] , positions [ 2 ] ) ;
3195: LD_EXP 46
3199: PUSH
3200: LD_INT 2
3202: ARRAY
3203: PPUSH
3204: LD_EXP 39
3208: PUSH
3209: LD_INT 2
3211: ARRAY
3212: PPUSH
3213: CALL_OW 343
// end ; end else
3217: GO 3499
// begin pom_tab = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] diff ( positions union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 1 ] ] union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 2 ] ] ) ;
3219: LD_ADDR_VAR 0 11
3223: PUSH
3224: LD_INT 1
3226: PUSH
3227: LD_INT 2
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 4
3235: PUSH
3236: LD_INT 5
3238: PUSH
3239: LD_INT 6
3241: PUSH
3242: LD_INT 7
3244: PUSH
3245: LD_INT 8
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: PUSH
3258: LD_EXP 39
3262: PUSH
3263: LD_INT 4
3265: PUSH
3266: LD_INT 5
3268: PUSH
3269: LD_INT 7
3271: PUSH
3272: LD_INT 8
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: LIST
3279: PUSH
3280: LD_INT 6
3282: PUSH
3283: LD_INT 1
3285: PUSH
3286: LD_INT 7
3288: PUSH
3289: LD_INT 8
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: LIST
3296: PUSH
3297: LD_INT 2
3299: PUSH
3300: LD_INT 3
3302: PUSH
3303: LD_INT 2
3305: PUSH
3306: LD_INT 4
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: LD_INT 2
3315: PUSH
3316: LD_INT 4
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: PUSH
3333: LD_EXP 39
3337: PUSH
3338: LD_INT 1
3340: ARRAY
3341: ARRAY
3342: UNION
3343: PUSH
3344: LD_INT 4
3346: PUSH
3347: LD_INT 5
3349: PUSH
3350: LD_INT 7
3352: PUSH
3353: LD_INT 8
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: LIST
3360: PUSH
3361: LD_INT 6
3363: PUSH
3364: LD_INT 1
3366: PUSH
3367: LD_INT 7
3369: PUSH
3370: LD_INT 8
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: LIST
3377: PUSH
3378: LD_INT 2
3380: PUSH
3381: LD_INT 3
3383: PUSH
3384: LD_INT 2
3386: PUSH
3387: LD_INT 4
3389: PUSH
3390: EMPTY
3391: LIST
3392: LIST
3393: PUSH
3394: LD_INT 2
3396: PUSH
3397: LD_INT 4
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: PUSH
3414: LD_EXP 39
3418: PUSH
3419: LD_INT 2
3421: ARRAY
3422: ARRAY
3423: UNION
3424: DIFF
3425: ST_TO_ADDR
// second_side = pom_tab [ Rand ( 1 , pom_tab ) ] ;
3426: LD_ADDR_EXP 46
3430: PUSH
3431: LD_VAR 0 11
3435: PUSH
3436: LD_INT 1
3438: PPUSH
3439: LD_VAR 0 11
3443: PPUSH
3444: CALL_OW 12
3448: ARRAY
3449: ST_TO_ADDR
// third_nation = [ 1 , 2 , 3 ] diff side_nations ;
3450: LD_ADDR_EXP 47
3454: PUSH
3455: LD_INT 1
3457: PUSH
3458: LD_INT 2
3460: PUSH
3461: LD_INT 3
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: LIST
3468: PUSH
3469: LD_EXP 44
3473: DIFF
3474: ST_TO_ADDR
// third_nation = third_nation [ Rand ( 1 , third_nation ) ] ;
3475: LD_ADDR_EXP 47
3479: PUSH
3480: LD_EXP 47
3484: PUSH
3485: LD_INT 1
3487: PPUSH
3488: LD_EXP 47
3492: PPUSH
3493: CALL_OW 12
3497: ARRAY
3498: ST_TO_ADDR
// end ; end ;
3499: LD_VAR 0 1
3503: RET
// function prepare_map_coordinates ; var side , dep2 , br2 , dep1 , br1 , lab , fac , arm , pplant , un , i , k11 , k12 , k21 , k22 ; begin
3504: LD_INT 0
3506: PPUSH
3507: PPUSH
3508: PPUSH
3509: PPUSH
3510: PPUSH
3511: PPUSH
3512: PPUSH
3513: PPUSH
3514: PPUSH
3515: PPUSH
3516: PPUSH
3517: PPUSH
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
// start_def = [ ] ;
3522: LD_ADDR_EXP 48
3526: PUSH
3527: EMPTY
3528: ST_TO_ADDR
// depots_def = [ ] ;
3529: LD_ADDR_EXP 49
3533: PUSH
3534: EMPTY
3535: ST_TO_ADDR
// breastworks_def = [ ] ;
3536: LD_ADDR_EXP 50
3540: PUSH
3541: EMPTY
3542: ST_TO_ADDR
// labs_def = [ ] ;
3543: LD_ADDR_EXP 51
3547: PUSH
3548: EMPTY
3549: ST_TO_ADDR
// factories_def = [ ] ;
3550: LD_ADDR_EXP 52
3554: PUSH
3555: EMPTY
3556: ST_TO_ADDR
// armories_def = [ ] ;
3557: LD_ADDR_EXP 53
3561: PUSH
3562: EMPTY
3563: ST_TO_ADDR
// pplants_def = [ ] ;
3564: LD_ADDR_EXP 54
3568: PUSH
3569: EMPTY
3570: ST_TO_ADDR
// deposits_def = [ ] ;
3571: LD_ADDR_EXP 55
3575: PUSH
3576: EMPTY
3577: ST_TO_ADDR
// k11 := Rand ( 1 , 2 ) ;
3578: LD_ADDR_VAR 0 13
3582: PUSH
3583: LD_INT 1
3585: PPUSH
3586: LD_INT 2
3588: PPUSH
3589: CALL_OW 12
3593: ST_TO_ADDR
// k12 := Rand ( 1 , 2 ) ;
3594: LD_ADDR_VAR 0 14
3598: PUSH
3599: LD_INT 1
3601: PPUSH
3602: LD_INT 2
3604: PPUSH
3605: CALL_OW 12
3609: ST_TO_ADDR
// k21 := Rand ( 1 , 2 ) ;
3610: LD_ADDR_VAR 0 15
3614: PUSH
3615: LD_INT 1
3617: PPUSH
3618: LD_INT 2
3620: PPUSH
3621: CALL_OW 12
3625: ST_TO_ADDR
// k22 := Rand ( 1 , 2 ) ;
3626: LD_ADDR_VAR 0 16
3630: PUSH
3631: LD_INT 1
3633: PPUSH
3634: LD_INT 2
3636: PPUSH
3637: CALL_OW 12
3641: ST_TO_ADDR
// deposits_def := [ [ [ [ Res111 , Res112 ] [ k11 ] , [ Res111 , Res112 ] [ 3 - k11 ] ] , [ [ Res121 , Res122 ] [ k12 ] , [ Res121 , Res122 ] [ 3 - k12 ] ] ] , [ [ [ Res211 , Res212 ] [ k21 ] , [ Res211 , Res212 ] [ 3 - k21 ] ] , [ [ Res221 , Res222 ] [ k22 ] , [ Res221 , Res222 ] [ 3 - k22 ] ] ] ] ;
3642: LD_ADDR_EXP 55
3646: PUSH
3647: LD_INT 4
3649: PUSH
3650: LD_INT 5
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: PUSH
3657: LD_VAR 0 13
3661: ARRAY
3662: PUSH
3663: LD_INT 4
3665: PUSH
3666: LD_INT 5
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: PUSH
3673: LD_INT 3
3675: PUSH
3676: LD_VAR 0 13
3680: MINUS
3681: ARRAY
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: LD_INT 6
3689: PUSH
3690: LD_INT 7
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: PUSH
3697: LD_VAR 0 14
3701: ARRAY
3702: PUSH
3703: LD_INT 6
3705: PUSH
3706: LD_INT 7
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: PUSH
3713: LD_INT 3
3715: PUSH
3716: LD_VAR 0 14
3720: MINUS
3721: ARRAY
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 8
3733: PUSH
3734: LD_INT 9
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: PUSH
3741: LD_VAR 0 15
3745: ARRAY
3746: PUSH
3747: LD_INT 8
3749: PUSH
3750: LD_INT 9
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: PUSH
3757: LD_INT 3
3759: PUSH
3760: LD_VAR 0 15
3764: MINUS
3765: ARRAY
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: LD_INT 10
3773: PUSH
3774: LD_INT 11
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_VAR 0 16
3785: ARRAY
3786: PUSH
3787: LD_INT 10
3789: PUSH
3790: LD_INT 11
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: LD_INT 3
3799: PUSH
3800: LD_VAR 0 16
3804: MINUS
3805: ARRAY
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: ST_TO_ADDR
// for side := 1 to 2 do
3819: LD_ADDR_VAR 0 2
3823: PUSH
3824: DOUBLE
3825: LD_INT 1
3827: DEC
3828: ST_TO_ADDR
3829: LD_INT 2
3831: PUSH
3832: FOR_TO
3833: IFFALSE 4965
// begin dep1 := side * 10 - 9 ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: LD_VAR 0 2
3844: PUSH
3845: LD_INT 10
3847: MUL
3848: PUSH
3849: LD_INT 9
3851: MINUS
3852: ST_TO_ADDR
// dep2 := 20 + side * 4 - 3 ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_INT 20
3860: PUSH
3861: LD_VAR 0 2
3865: PUSH
3866: LD_INT 4
3868: MUL
3869: PLUS
3870: PUSH
3871: LD_INT 3
3873: MINUS
3874: ST_TO_ADDR
// br1 := [ side * 10 - 8 , side * 10 - 7 , side * 10 - 6 , side * 10 - 5 ] ;
3875: LD_ADDR_VAR 0 6
3879: PUSH
3880: LD_VAR 0 2
3884: PUSH
3885: LD_INT 10
3887: MUL
3888: PUSH
3889: LD_INT 8
3891: MINUS
3892: PUSH
3893: LD_VAR 0 2
3897: PUSH
3898: LD_INT 10
3900: MUL
3901: PUSH
3902: LD_INT 7
3904: MINUS
3905: PUSH
3906: LD_VAR 0 2
3910: PUSH
3911: LD_INT 10
3913: MUL
3914: PUSH
3915: LD_INT 6
3917: MINUS
3918: PUSH
3919: LD_VAR 0 2
3923: PUSH
3924: LD_INT 10
3926: MUL
3927: PUSH
3928: LD_INT 5
3930: MINUS
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: ST_TO_ADDR
// br2 := [ 20 + side * 4 - 2 , 20 + side * 4 - 1 , 20 + side * 4 ] ;
3938: LD_ADDR_VAR 0 4
3942: PUSH
3943: LD_INT 20
3945: PUSH
3946: LD_VAR 0 2
3950: PUSH
3951: LD_INT 4
3953: MUL
3954: PLUS
3955: PUSH
3956: LD_INT 2
3958: MINUS
3959: PUSH
3960: LD_INT 20
3962: PUSH
3963: LD_VAR 0 2
3967: PUSH
3968: LD_INT 4
3970: MUL
3971: PLUS
3972: PUSH
3973: LD_INT 1
3975: MINUS
3976: PUSH
3977: LD_INT 20
3979: PUSH
3980: LD_VAR 0 2
3984: PUSH
3985: LD_INT 4
3987: MUL
3988: PLUS
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: LIST
3994: ST_TO_ADDR
// lab := side * 10 - 4 ;
3995: LD_ADDR_VAR 0 7
3999: PUSH
4000: LD_VAR 0 2
4004: PUSH
4005: LD_INT 10
4007: MUL
4008: PUSH
4009: LD_INT 4
4011: MINUS
4012: ST_TO_ADDR
// fac := side * 10 - 3 ;
4013: LD_ADDR_VAR 0 8
4017: PUSH
4018: LD_VAR 0 2
4022: PUSH
4023: LD_INT 10
4025: MUL
4026: PUSH
4027: LD_INT 3
4029: MINUS
4030: ST_TO_ADDR
// arm := side * 10 - 2 ;
4031: LD_ADDR_VAR 0 9
4035: PUSH
4036: LD_VAR 0 2
4040: PUSH
4041: LD_INT 10
4043: MUL
4044: PUSH
4045: LD_INT 2
4047: MINUS
4048: ST_TO_ADDR
// pplant := [ side * 10 - 1 , side * 10 ] ;
4049: LD_ADDR_VAR 0 10
4053: PUSH
4054: LD_VAR 0 2
4058: PUSH
4059: LD_INT 10
4061: MUL
4062: PUSH
4063: LD_INT 1
4065: MINUS
4066: PUSH
4067: LD_VAR 0 2
4071: PUSH
4072: LD_INT 10
4074: MUL
4075: PUSH
4076: EMPTY
4077: LIST
4078: LIST
4079: ST_TO_ADDR
// depots_def := depots_def ^ [ [ [ GetX ( dep1 ) , GetY ( dep1 ) , GetDir ( dep1 ) ] , [ GetX ( dep2 ) , GetY ( dep2 ) , GetDir ( dep2 ) ] ] ] ;
4080: LD_ADDR_EXP 49
4084: PUSH
4085: LD_EXP 49
4089: PUSH
4090: LD_VAR 0 5
4094: PPUSH
4095: CALL_OW 250
4099: PUSH
4100: LD_VAR 0 5
4104: PPUSH
4105: CALL_OW 251
4109: PUSH
4110: LD_VAR 0 5
4114: PPUSH
4115: CALL_OW 254
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: LIST
4124: PUSH
4125: LD_VAR 0 3
4129: PPUSH
4130: CALL_OW 250
4134: PUSH
4135: LD_VAR 0 3
4139: PPUSH
4140: CALL_OW 251
4144: PUSH
4145: LD_VAR 0 3
4149: PPUSH
4150: CALL_OW 254
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PUSH
4164: EMPTY
4165: LIST
4166: ADD
4167: ST_TO_ADDR
// start_def := start_def ^ [ [ [ ShiftX ( GetX ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) ] , [ ShiftX ( GetX ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) ] ] ] ;
4168: LD_ADDR_EXP 48
4172: PUSH
4173: LD_EXP 48
4177: PUSH
4178: LD_VAR 0 5
4182: PPUSH
4183: CALL_OW 250
4187: PPUSH
4188: LD_VAR 0 5
4192: PPUSH
4193: CALL_OW 254
4197: PUSH
4198: LD_INT 6
4200: MOD
4201: PPUSH
4202: LD_INT 6
4204: PPUSH
4205: CALL_OW 272
4209: PUSH
4210: LD_VAR 0 5
4214: PPUSH
4215: CALL_OW 251
4219: PPUSH
4220: LD_VAR 0 5
4224: PPUSH
4225: CALL_OW 254
4229: PUSH
4230: LD_INT 6
4232: MOD
4233: PPUSH
4234: LD_INT 6
4236: PPUSH
4237: CALL_OW 273
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PUSH
4246: LD_VAR 0 3
4250: PPUSH
4251: CALL_OW 250
4255: PPUSH
4256: LD_VAR 0 3
4260: PPUSH
4261: CALL_OW 254
4265: PUSH
4266: LD_INT 6
4268: MOD
4269: PPUSH
4270: LD_INT 6
4272: PPUSH
4273: CALL_OW 272
4277: PUSH
4278: LD_VAR 0 3
4282: PPUSH
4283: CALL_OW 251
4287: PPUSH
4288: LD_VAR 0 3
4292: PPUSH
4293: CALL_OW 254
4297: PUSH
4298: LD_INT 6
4300: MOD
4301: PPUSH
4302: LD_INT 6
4304: PPUSH
4305: CALL_OW 273
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PUSH
4318: EMPTY
4319: LIST
4320: ADD
4321: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ [ GetX ( br1 [ 1 ] ) , GetY ( br1 [ 1 ] ) , GetDir ( br1 [ 1 ] ) ] , [ GetX ( br1 [ 2 ] ) , GetY ( br1 [ 2 ] ) , GetDir ( br1 [ 2 ] ) ] , [ GetX ( br1 [ 3 ] ) , GetY ( br1 [ 3 ] ) , GetDir ( br1 [ 3 ] ) ] , [ GetX ( br1 [ 4 ] ) , GetY ( br1 [ 4 ] ) , GetDir ( br1 [ 4 ] ) ] ] , [ [ GetX ( br2 [ 1 ] ) , GetY ( br2 [ 1 ] ) , GetDir ( br2 [ 1 ] ) ] , [ GetX ( br2 [ 2 ] ) , GetY ( br2 [ 2 ] ) , GetDir ( br2 [ 2 ] ) ] , [ GetX ( br2 [ 3 ] ) , GetY ( br2 [ 3 ] ) , GetDir ( br2 [ 3 ] ) ] ] ] ] ;
4322: LD_ADDR_EXP 50
4326: PUSH
4327: LD_EXP 50
4331: PUSH
4332: LD_VAR 0 6
4336: PUSH
4337: LD_INT 1
4339: ARRAY
4340: PPUSH
4341: CALL_OW 250
4345: PUSH
4346: LD_VAR 0 6
4350: PUSH
4351: LD_INT 1
4353: ARRAY
4354: PPUSH
4355: CALL_OW 251
4359: PUSH
4360: LD_VAR 0 6
4364: PUSH
4365: LD_INT 1
4367: ARRAY
4368: PPUSH
4369: CALL_OW 254
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: LIST
4378: PUSH
4379: LD_VAR 0 6
4383: PUSH
4384: LD_INT 2
4386: ARRAY
4387: PPUSH
4388: CALL_OW 250
4392: PUSH
4393: LD_VAR 0 6
4397: PUSH
4398: LD_INT 2
4400: ARRAY
4401: PPUSH
4402: CALL_OW 251
4406: PUSH
4407: LD_VAR 0 6
4411: PUSH
4412: LD_INT 2
4414: ARRAY
4415: PPUSH
4416: CALL_OW 254
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: LIST
4425: PUSH
4426: LD_VAR 0 6
4430: PUSH
4431: LD_INT 3
4433: ARRAY
4434: PPUSH
4435: CALL_OW 250
4439: PUSH
4440: LD_VAR 0 6
4444: PUSH
4445: LD_INT 3
4447: ARRAY
4448: PPUSH
4449: CALL_OW 251
4453: PUSH
4454: LD_VAR 0 6
4458: PUSH
4459: LD_INT 3
4461: ARRAY
4462: PPUSH
4463: CALL_OW 254
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: LD_VAR 0 6
4477: PUSH
4478: LD_INT 4
4480: ARRAY
4481: PPUSH
4482: CALL_OW 250
4486: PUSH
4487: LD_VAR 0 6
4491: PUSH
4492: LD_INT 4
4494: ARRAY
4495: PPUSH
4496: CALL_OW 251
4500: PUSH
4501: LD_VAR 0 6
4505: PUSH
4506: LD_INT 4
4508: ARRAY
4509: PPUSH
4510: CALL_OW 254
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: PUSH
4526: LD_VAR 0 4
4530: PUSH
4531: LD_INT 1
4533: ARRAY
4534: PPUSH
4535: CALL_OW 250
4539: PUSH
4540: LD_VAR 0 4
4544: PUSH
4545: LD_INT 1
4547: ARRAY
4548: PPUSH
4549: CALL_OW 251
4553: PUSH
4554: LD_VAR 0 4
4558: PUSH
4559: LD_INT 1
4561: ARRAY
4562: PPUSH
4563: CALL_OW 254
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: LIST
4572: PUSH
4573: LD_VAR 0 4
4577: PUSH
4578: LD_INT 2
4580: ARRAY
4581: PPUSH
4582: CALL_OW 250
4586: PUSH
4587: LD_VAR 0 4
4591: PUSH
4592: LD_INT 2
4594: ARRAY
4595: PPUSH
4596: CALL_OW 251
4600: PUSH
4601: LD_VAR 0 4
4605: PUSH
4606: LD_INT 2
4608: ARRAY
4609: PPUSH
4610: CALL_OW 254
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: PUSH
4620: LD_VAR 0 4
4624: PUSH
4625: LD_INT 3
4627: ARRAY
4628: PPUSH
4629: CALL_OW 250
4633: PUSH
4634: LD_VAR 0 4
4638: PUSH
4639: LD_INT 3
4641: ARRAY
4642: PPUSH
4643: CALL_OW 251
4647: PUSH
4648: LD_VAR 0 4
4652: PUSH
4653: LD_INT 3
4655: ARRAY
4656: PPUSH
4657: CALL_OW 254
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: LIST
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: LIST
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PUSH
4676: EMPTY
4677: LIST
4678: ADD
4679: ST_TO_ADDR
// labs_def := labs_def ^ [ [ [ GetX ( lab ) , GetY ( lab ) , GetDir ( lab ) ] , [ ] ] ] ;
4680: LD_ADDR_EXP 51
4684: PUSH
4685: LD_EXP 51
4689: PUSH
4690: LD_VAR 0 7
4694: PPUSH
4695: CALL_OW 250
4699: PUSH
4700: LD_VAR 0 7
4704: PPUSH
4705: CALL_OW 251
4709: PUSH
4710: LD_VAR 0 7
4714: PPUSH
4715: CALL_OW 254
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: LIST
4724: PUSH
4725: EMPTY
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: EMPTY
4732: LIST
4733: ADD
4734: ST_TO_ADDR
// factories_def := factories_def ^ [ [ [ GetX ( fac ) , GetY ( fac ) , GetDir ( fac ) ] , [ ] ] ] ;
4735: LD_ADDR_EXP 52
4739: PUSH
4740: LD_EXP 52
4744: PUSH
4745: LD_VAR 0 8
4749: PPUSH
4750: CALL_OW 250
4754: PUSH
4755: LD_VAR 0 8
4759: PPUSH
4760: CALL_OW 251
4764: PUSH
4765: LD_VAR 0 8
4769: PPUSH
4770: CALL_OW 254
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: PUSH
4780: EMPTY
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: EMPTY
4787: LIST
4788: ADD
4789: ST_TO_ADDR
// armories_def := armories_def ^ [ [ [ GetX ( arm ) , GetY ( arm ) , GetDir ( arm ) ] , [ ] ] ] ;
4790: LD_ADDR_EXP 53
4794: PUSH
4795: LD_EXP 53
4799: PUSH
4800: LD_VAR 0 9
4804: PPUSH
4805: CALL_OW 250
4809: PUSH
4810: LD_VAR 0 9
4814: PPUSH
4815: CALL_OW 251
4819: PUSH
4820: LD_VAR 0 9
4824: PPUSH
4825: CALL_OW 254
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: LIST
4834: PUSH
4835: EMPTY
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PUSH
4841: EMPTY
4842: LIST
4843: ADD
4844: ST_TO_ADDR
// pplants_def := pplants_def ^ [ [ [ [ GetX ( pplant [ 1 ] ) , GetY ( pplant [ 1 ] ) , GetDir ( pplant [ 1 ] ) ] , [ GetX ( pplant [ 2 ] ) , GetY ( pplant [ 2 ] ) , GetDir ( pplant [ 2 ] ) ] ] , [ ] ] ] ;
4845: LD_ADDR_EXP 54
4849: PUSH
4850: LD_EXP 54
4854: PUSH
4855: LD_VAR 0 10
4859: PUSH
4860: LD_INT 1
4862: ARRAY
4863: PPUSH
4864: CALL_OW 250
4868: PUSH
4869: LD_VAR 0 10
4873: PUSH
4874: LD_INT 1
4876: ARRAY
4877: PPUSH
4878: CALL_OW 251
4882: PUSH
4883: LD_VAR 0 10
4887: PUSH
4888: LD_INT 1
4890: ARRAY
4891: PPUSH
4892: CALL_OW 254
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: LIST
4901: PUSH
4902: LD_VAR 0 10
4906: PUSH
4907: LD_INT 2
4909: ARRAY
4910: PPUSH
4911: CALL_OW 250
4915: PUSH
4916: LD_VAR 0 10
4920: PUSH
4921: LD_INT 2
4923: ARRAY
4924: PPUSH
4925: CALL_OW 251
4929: PUSH
4930: LD_VAR 0 10
4934: PUSH
4935: LD_INT 2
4937: ARRAY
4938: PPUSH
4939: CALL_OW 254
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PUSH
4953: EMPTY
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: PUSH
4959: EMPTY
4960: LIST
4961: ADD
4962: ST_TO_ADDR
// end ;
4963: GO 3832
4965: POP
4966: POP
// for un := 1 to 28 do
4967: LD_ADDR_VAR 0 11
4971: PUSH
4972: DOUBLE
4973: LD_INT 1
4975: DEC
4976: ST_TO_ADDR
4977: LD_INT 28
4979: PUSH
4980: FOR_TO
4981: IFFALSE 4994
// DestroyUnit ( un ) ;
4983: LD_VAR 0 11
4987: PPUSH
4988: CALL_OW 65
4992: GO 4980
4994: POP
4995: POP
// end ;
4996: LD_VAR 0 1
5000: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
5001: LD_INT 0
5003: PPUSH
5004: PPUSH
5005: PPUSH
5006: PPUSH
// result := [ ] ;
5007: LD_ADDR_VAR 0 7
5011: PUSH
5012: EMPTY
5013: ST_TO_ADDR
// for i := 1 to count do
5014: LD_ADDR_VAR 0 8
5018: PUSH
5019: DOUBLE
5020: LD_INT 1
5022: DEC
5023: ST_TO_ADDR
5024: LD_VAR 0 1
5028: PUSH
5029: FOR_TO
5030: IFFALSE 5448
// begin uc_direction := Rand ( 0 , 5 ) ;
5032: LD_ADDR_OWVAR 24
5036: PUSH
5037: LD_INT 0
5039: PPUSH
5040: LD_INT 5
5042: PPUSH
5043: CALL_OW 12
5047: ST_TO_ADDR
// if commander then
5048: LD_LOC 1
5052: IFFALSE 5161
// begin hc_name := mp_sides_players_names [ uc_side ] ;
5054: LD_ADDR_OWVAR 26
5058: PUSH
5059: LD_OWVAR 19
5063: PUSH
5064: LD_OWVAR 20
5068: ARRAY
5069: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
5070: LD_INT 1
5072: PPUSH
5073: LD_INT 2
5075: PPUSH
5076: CALL_OW 12
5080: PPUSH
5081: LD_VAR 0 2
5085: PPUSH
5086: LD_EXP 29
5090: PUSH
5091: LD_INT 2
5093: PLUS
5094: PPUSH
5095: CALL_OW 380
// hc_importance := 105 ;
5099: LD_ADDR_OWVAR 32
5103: PUSH
5104: LD_INT 105
5106: ST_TO_ADDR
// commander := false ;
5107: LD_ADDR_LOC 1
5111: PUSH
5112: LD_INT 0
5114: ST_TO_ADDR
// if Multiplayer then
5115: LD_OWVAR 4
5119: IFFALSE 5159
// begin hc_gallery := MULTIAVATARS ;
5121: LD_ADDR_OWVAR 33
5125: PUSH
5126: LD_STRING MULTIAVATARS
5128: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
5129: LD_ADDR_OWVAR 34
5133: PUSH
5134: LD_OWVAR 20
5138: PPUSH
5139: CALL_OW 525
5143: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
5144: LD_ADDR_OWVAR 27
5148: PUSH
5149: LD_OWVAR 20
5153: PPUSH
5154: CALL_OW 526
5158: ST_TO_ADDR
// end ; end else
5159: GO 5224
// begin hc_name :=  ;
5161: LD_ADDR_OWVAR 26
5165: PUSH
5166: LD_STRING 
5168: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
5169: LD_INT 1
5171: PPUSH
5172: LD_INT 2
5174: PPUSH
5175: CALL_OW 12
5179: PPUSH
5180: LD_VAR 0 2
5184: PPUSH
5185: LD_EXP 29
5189: PPUSH
5190: CALL_OW 380
// hc_importance := 0 ;
5194: LD_ADDR_OWVAR 32
5198: PUSH
5199: LD_INT 0
5201: ST_TO_ADDR
// if Multiplayer then
5202: LD_OWVAR 4
5206: IFFALSE 5224
// begin hc_gallery :=  ;
5208: LD_ADDR_OWVAR 33
5212: PUSH
5213: LD_STRING 
5215: ST_TO_ADDR
// hc_face_number := 0 ;
5216: LD_ADDR_OWVAR 34
5220: PUSH
5221: LD_INT 0
5223: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
5224: LD_ADDR_VAR 0 10
5228: PUSH
5229: CALL_OW 44
5233: ST_TO_ADDR
// if global_defined then
5234: LD_LOC 3
5238: IFFALSE 5378
// begin if ( cl = class_soldier ) then
5240: LD_VAR 0 2
5244: PUSH
5245: LD_INT 1
5247: EQUAL
5248: IFFALSE 5268
// j := i + soldiers_created else
5250: LD_ADDR_VAR 0 9
5254: PUSH
5255: LD_VAR 0 8
5259: PUSH
5260: LD_LOC 4
5264: PLUS
5265: ST_TO_ADDR
5266: GO 5278
// j := i ;
5268: LD_ADDR_VAR 0 9
5272: PUSH
5273: LD_VAR 0 8
5277: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
5278: LD_LOC 2
5282: PUSH
5283: LD_VAR 0 2
5287: ARRAY
5288: PUSH
5289: LD_VAR 0 9
5293: ARRAY
5294: PPUSH
5295: LD_VAR 0 10
5299: PPUSH
5300: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
5304: LD_VAR 0 10
5308: PPUSH
5309: LD_INT 2
5311: PPUSH
5312: LD_LOC 2
5316: PUSH
5317: LD_VAR 0 2
5321: ARRAY
5322: PUSH
5323: LD_VAR 0 9
5327: ARRAY
5328: PPUSH
5329: LD_INT 2
5331: PPUSH
5332: CALL_OW 260
5336: PPUSH
5337: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
5341: LD_VAR 0 10
5345: PPUSH
5346: LD_INT 1
5348: PPUSH
5349: LD_LOC 2
5353: PUSH
5354: LD_VAR 0 2
5358: ARRAY
5359: PUSH
5360: LD_VAR 0 9
5364: ARRAY
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: CALL_OW 260
5373: PPUSH
5374: CALL_OW 239
// end ; if building then
5378: LD_VAR 0 6
5382: IFFALSE 5400
// PlaceHumanInUnit ( un , building ) else
5384: LD_VAR 0 10
5388: PPUSH
5389: LD_VAR 0 6
5393: PPUSH
5394: CALL_OW 52
5398: GO 5427
// PlaceUnitXYR ( un , x , y , r , false ) ;
5400: LD_VAR 0 10
5404: PPUSH
5405: LD_VAR 0 3
5409: PPUSH
5410: LD_VAR 0 4
5414: PPUSH
5415: LD_VAR 0 5
5419: PPUSH
5420: LD_INT 0
5422: PPUSH
5423: CALL_OW 50
// result := result ^ [ un ] ;
5427: LD_ADDR_VAR 0 7
5431: PUSH
5432: LD_VAR 0 7
5436: PUSH
5437: LD_VAR 0 10
5441: PUSH
5442: EMPTY
5443: LIST
5444: ADD
5445: ST_TO_ADDR
// end ;
5446: GO 5029
5448: POP
5449: POP
// if not global_defined then
5450: LD_LOC 3
5454: NOT
5455: IFFALSE 5533
// if ( global_units >= cl ) then
5457: LD_LOC 2
5461: PUSH
5462: LD_VAR 0 2
5466: GREATEREQUAL
5467: IFFALSE 5508
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
5469: LD_ADDR_LOC 2
5473: PUSH
5474: LD_LOC 2
5478: PPUSH
5479: LD_VAR 0 2
5483: PPUSH
5484: LD_LOC 2
5488: PUSH
5489: LD_VAR 0 2
5493: ARRAY
5494: PUSH
5495: LD_VAR 0 7
5499: ADD
5500: PPUSH
5501: CALL_OW 1
5505: ST_TO_ADDR
5506: GO 5533
// global_units := Replace ( global_units , cl , result ) ;
5508: LD_ADDR_LOC 2
5512: PUSH
5513: LD_LOC 2
5517: PPUSH
5518: LD_VAR 0 2
5522: PPUSH
5523: LD_VAR 0 7
5527: PPUSH
5528: CALL_OW 1
5532: ST_TO_ADDR
// if commander then
5533: LD_LOC 1
5537: IFFALSE 5584
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
5539: LD_ADDR_EXP 56
5543: PUSH
5544: LD_EXP 56
5548: PPUSH
5549: LD_OWVAR 20
5553: PPUSH
5554: LD_EXP 56
5558: PUSH
5559: LD_OWVAR 20
5563: ARRAY
5564: PUSH
5565: LD_VAR 0 10
5569: ADD
5570: PPUSH
5571: CALL_OW 1
5575: ST_TO_ADDR
// commander := false ;
5576: LD_ADDR_LOC 1
5580: PUSH
5581: LD_INT 0
5583: ST_TO_ADDR
// end ; end ;
5584: LD_VAR 0 7
5588: RET
// function prepare_side_base ( side , base ) ; var pos , x , y , dir , i , r , un , br , dep , lab , fact , arm , mode , coord , max ; begin
5589: LD_INT 0
5591: PPUSH
5592: PPUSH
5593: PPUSH
5594: PPUSH
5595: PPUSH
5596: PPUSH
5597: PPUSH
5598: PPUSH
5599: PPUSH
5600: PPUSH
5601: PPUSH
5602: PPUSH
5603: PPUSH
5604: PPUSH
5605: PPUSH
5606: PPUSH
// if side in [ 0 , 9 ] then
5607: LD_VAR 0 1
5611: PUSH
5612: LD_INT 0
5614: PUSH
5615: LD_INT 9
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: IN
5622: IFFALSE 5626
// exit ;
5624: GO 8295
// pos := Side_Positions [ side ] ;
5626: LD_ADDR_VAR 0 4
5630: PUSH
5631: LD_EXP 43
5635: PUSH
5636: LD_VAR 0 1
5640: ARRAY
5641: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
5642: LD_ADDR_OWVAR 21
5646: PUSH
5647: LD_EXP 44
5651: PUSH
5652: LD_VAR 0 1
5656: ARRAY
5657: ST_TO_ADDR
// uc_side := side ;
5658: LD_ADDR_OWVAR 20
5662: PUSH
5663: LD_VAR 0 1
5667: ST_TO_ADDR
// x := depots_def [ pos ] [ base ] [ 1 ] ;
5668: LD_ADDR_VAR 0 5
5672: PUSH
5673: LD_EXP 49
5677: PUSH
5678: LD_VAR 0 4
5682: ARRAY
5683: PUSH
5684: LD_VAR 0 2
5688: ARRAY
5689: PUSH
5690: LD_INT 1
5692: ARRAY
5693: ST_TO_ADDR
// y := depots_def [ pos ] [ base ] [ 2 ] ;
5694: LD_ADDR_VAR 0 6
5698: PUSH
5699: LD_EXP 49
5703: PUSH
5704: LD_VAR 0 4
5708: ARRAY
5709: PUSH
5710: LD_VAR 0 2
5714: ARRAY
5715: PUSH
5716: LD_INT 2
5718: ARRAY
5719: ST_TO_ADDR
// dir := depots_def [ pos ] [ base ] [ 3 ] ;
5720: LD_ADDR_VAR 0 7
5724: PUSH
5725: LD_EXP 49
5729: PUSH
5730: LD_VAR 0 4
5734: ARRAY
5735: PUSH
5736: LD_VAR 0 2
5740: ARRAY
5741: PUSH
5742: LD_INT 3
5744: ARRAY
5745: ST_TO_ADDR
// if is_depot [ base ] then
5746: LD_EXP 20
5750: PUSH
5751: LD_VAR 0 2
5755: ARRAY
5756: IFFALSE 5933
// begin if is_depot [ base ] = 1 then
5758: LD_EXP 20
5762: PUSH
5763: LD_VAR 0 2
5767: ARRAY
5768: PUSH
5769: LD_INT 1
5771: EQUAL
5772: IFFALSE 5784
// bc_type = b_depot else
5774: LD_ADDR_OWVAR 42
5778: PUSH
5779: LD_INT 0
5781: ST_TO_ADDR
5782: GO 5792
// bc_type = b_warehouse ;
5784: LD_ADDR_OWVAR 42
5788: PUSH
5789: LD_INT 1
5791: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
5792: LD_ADDR_VAR 0 12
5796: PUSH
5797: LD_VAR 0 5
5801: PPUSH
5802: LD_VAR 0 6
5806: PPUSH
5807: LD_VAR 0 7
5811: PPUSH
5812: CALL_OW 47
5816: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
5817: LD_VAR 0 12
5821: PPUSH
5822: LD_STRING @
5824: PUSH
5825: LD_VAR 0 1
5829: STR
5830: PPUSH
5831: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ base ] [ mat_cans ] ) ;
5835: LD_VAR 0 12
5839: PPUSH
5840: CALL_OW 274
5844: PPUSH
5845: LD_INT 1
5847: PPUSH
5848: LD_EXP 31
5852: PUSH
5853: LD_VAR 0 2
5857: ARRAY
5858: PUSH
5859: LD_INT 1
5861: ARRAY
5862: PPUSH
5863: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ base ] [ mat_oil ] ) ;
5867: LD_VAR 0 12
5871: PPUSH
5872: CALL_OW 274
5876: PPUSH
5877: LD_INT 2
5879: PPUSH
5880: LD_EXP 31
5884: PUSH
5885: LD_VAR 0 2
5889: ARRAY
5890: PUSH
5891: LD_INT 2
5893: ARRAY
5894: PPUSH
5895: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ base ] [ mat_siberit ] ) ;
5899: LD_VAR 0 12
5903: PPUSH
5904: CALL_OW 274
5908: PPUSH
5909: LD_INT 3
5911: PPUSH
5912: LD_EXP 31
5916: PUSH
5917: LD_VAR 0 2
5921: ARRAY
5922: PUSH
5923: LD_INT 3
5925: ARRAY
5926: PPUSH
5927: CALL_OW 277
// end else
5931: GO 6083
// begin for i := 1 to 3 do
5933: LD_ADDR_VAR 0 8
5937: PUSH
5938: DOUBLE
5939: LD_INT 1
5941: DEC
5942: ST_TO_ADDR
5943: LD_INT 3
5945: PUSH
5946: FOR_TO
5947: IFFALSE 6081
// begin r := starting_resources [ base ] [ i ] ;
5949: LD_ADDR_VAR 0 9
5953: PUSH
5954: LD_EXP 31
5958: PUSH
5959: LD_VAR 0 2
5963: ARRAY
5964: PUSH
5965: LD_VAR 0 8
5969: ARRAY
5970: ST_TO_ADDR
// while r >= 10 do
5971: LD_VAR 0 9
5975: PUSH
5976: LD_INT 10
5978: GREATEREQUAL
5979: IFFALSE 6079
// if r > 50 then
5981: LD_VAR 0 9
5985: PUSH
5986: LD_INT 50
5988: GREATER
5989: IFFALSE 6035
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
5991: LD_VAR 0 8
5995: PPUSH
5996: LD_INT 5
5998: PPUSH
5999: LD_VAR 0 5
6003: PPUSH
6004: LD_VAR 0 6
6008: PPUSH
6009: LD_INT 4
6011: PPUSH
6012: LD_INT 0
6014: PPUSH
6015: CALL_OW 60
// r := r - 50 ;
6019: LD_ADDR_VAR 0 9
6023: PUSH
6024: LD_VAR 0 9
6028: PUSH
6029: LD_INT 50
6031: MINUS
6032: ST_TO_ADDR
// end else
6033: GO 6077
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
6035: LD_VAR 0 8
6039: PPUSH
6040: LD_VAR 0 9
6044: PUSH
6045: LD_INT 10
6047: DIV
6048: PPUSH
6049: LD_VAR 0 5
6053: PPUSH
6054: LD_VAR 0 6
6058: PPUSH
6059: LD_INT 4
6061: PPUSH
6062: LD_INT 0
6064: PPUSH
6065: CALL_OW 60
// r := 0 ;
6069: LD_ADDR_VAR 0 9
6073: PUSH
6074: LD_INT 0
6076: ST_TO_ADDR
// end ;
6077: GO 5971
// end ;
6079: GO 5946
6081: POP
6082: POP
// end ; if is_lab [ base ] then
6083: LD_EXP 24
6087: PUSH
6088: LD_VAR 0 2
6092: ARRAY
6093: IFFALSE 6234
// begin if is_lab [ base ] = 1 then
6095: LD_EXP 24
6099: PUSH
6100: LD_VAR 0 2
6104: ARRAY
6105: PUSH
6106: LD_INT 1
6108: EQUAL
6109: IFFALSE 6137
// begin bc_type = b_lab ;
6111: LD_ADDR_OWVAR 42
6115: PUSH
6116: LD_INT 6
6118: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
6119: LD_ADDR_OWVAR 44
6123: PUSH
6124: LD_INT 9
6126: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
6127: LD_ADDR_OWVAR 45
6131: PUSH
6132: LD_INT 9
6134: ST_TO_ADDR
// end else
6135: GO 6161
// begin bc_type = b_lab_full ;
6137: LD_ADDR_OWVAR 42
6141: PUSH
6142: LD_INT 8
6144: ST_TO_ADDR
// bc_kind1 = b_lab_siberium ;
6145: LD_ADDR_OWVAR 44
6149: PUSH
6150: LD_INT 11
6152: ST_TO_ADDR
// bc_kind2 = b_lab_weapon ;
6153: LD_ADDR_OWVAR 45
6157: PUSH
6158: LD_INT 10
6160: ST_TO_ADDR
// end ; lab := CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ base ] [ 1 ] , labs_def [ pos ] [ base ] [ 2 ] , labs_def [ pos ] [ base ] [ 3 ] ) ;
6161: LD_ADDR_VAR 0 13
6165: PUSH
6166: LD_EXP 51
6170: PUSH
6171: LD_VAR 0 4
6175: ARRAY
6176: PUSH
6177: LD_VAR 0 2
6181: ARRAY
6182: PUSH
6183: LD_INT 1
6185: ARRAY
6186: PPUSH
6187: LD_EXP 51
6191: PUSH
6192: LD_VAR 0 4
6196: ARRAY
6197: PUSH
6198: LD_VAR 0 2
6202: ARRAY
6203: PUSH
6204: LD_INT 2
6206: ARRAY
6207: PPUSH
6208: LD_EXP 51
6212: PUSH
6213: LD_VAR 0 4
6217: ARRAY
6218: PUSH
6219: LD_VAR 0 2
6223: ARRAY
6224: PUSH
6225: LD_INT 3
6227: ARRAY
6228: PPUSH
6229: CALL_OW 47
6233: ST_TO_ADDR
// end ; if is_fact [ base ] then
6234: LD_EXP 25
6238: PUSH
6239: LD_VAR 0 2
6243: ARRAY
6244: IFFALSE 6353
// begin if is_fact [ base ] = 1 then
6246: LD_EXP 25
6250: PUSH
6251: LD_VAR 0 2
6255: ARRAY
6256: PUSH
6257: LD_INT 1
6259: EQUAL
6260: IFFALSE 6272
// bc_type = b_workshop else
6262: LD_ADDR_OWVAR 42
6266: PUSH
6267: LD_INT 2
6269: ST_TO_ADDR
6270: GO 6280
// bc_type = b_factory ;
6272: LD_ADDR_OWVAR 42
6276: PUSH
6277: LD_INT 3
6279: ST_TO_ADDR
// fact := CreateAndPlaceBuildingXYD ( factories_def [ pos ] [ base ] [ 1 ] , factories_def [ pos ] [ base ] [ 2 ] , factories_def [ pos ] [ base ] [ 3 ] ) ;
6280: LD_ADDR_VAR 0 14
6284: PUSH
6285: LD_EXP 52
6289: PUSH
6290: LD_VAR 0 4
6294: ARRAY
6295: PUSH
6296: LD_VAR 0 2
6300: ARRAY
6301: PUSH
6302: LD_INT 1
6304: ARRAY
6305: PPUSH
6306: LD_EXP 52
6310: PUSH
6311: LD_VAR 0 4
6315: ARRAY
6316: PUSH
6317: LD_VAR 0 2
6321: ARRAY
6322: PUSH
6323: LD_INT 2
6325: ARRAY
6326: PPUSH
6327: LD_EXP 52
6331: PUSH
6332: LD_VAR 0 4
6336: ARRAY
6337: PUSH
6338: LD_VAR 0 2
6342: ARRAY
6343: PUSH
6344: LD_INT 3
6346: ARRAY
6347: PPUSH
6348: CALL_OW 47
6352: ST_TO_ADDR
// end ; if is_arm [ base ] then
6353: LD_EXP 26
6357: PUSH
6358: LD_VAR 0 2
6362: ARRAY
6363: IFFALSE 6472
// begin if is_arm [ base ] = 1 then
6365: LD_EXP 26
6369: PUSH
6370: LD_VAR 0 2
6374: ARRAY
6375: PUSH
6376: LD_INT 1
6378: EQUAL
6379: IFFALSE 6391
// bc_type = b_armoury else
6381: LD_ADDR_OWVAR 42
6385: PUSH
6386: LD_INT 4
6388: ST_TO_ADDR
6389: GO 6399
// bc_type = b_barracks ;
6391: LD_ADDR_OWVAR 42
6395: PUSH
6396: LD_INT 5
6398: ST_TO_ADDR
// arm := CreateAndPlaceBuildingXYD ( armories_def [ pos ] [ base ] [ 1 ] , armories_def [ pos ] [ base ] [ 2 ] , armories_def [ pos ] [ base ] [ 3 ] ) ;
6399: LD_ADDR_VAR 0 15
6403: PUSH
6404: LD_EXP 53
6408: PUSH
6409: LD_VAR 0 4
6413: ARRAY
6414: PUSH
6415: LD_VAR 0 2
6419: ARRAY
6420: PUSH
6421: LD_INT 1
6423: ARRAY
6424: PPUSH
6425: LD_EXP 53
6429: PUSH
6430: LD_VAR 0 4
6434: ARRAY
6435: PUSH
6436: LD_VAR 0 2
6440: ARRAY
6441: PUSH
6442: LD_INT 2
6444: ARRAY
6445: PPUSH
6446: LD_EXP 53
6450: PUSH
6451: LD_VAR 0 4
6455: ARRAY
6456: PUSH
6457: LD_VAR 0 2
6461: ARRAY
6462: PUSH
6463: LD_INT 3
6465: ARRAY
6466: PPUSH
6467: CALL_OW 47
6471: ST_TO_ADDR
// end ; for i := 1 to number_of_pplants [ base ] do
6472: LD_ADDR_VAR 0 8
6476: PUSH
6477: DOUBLE
6478: LD_INT 1
6480: DEC
6481: ST_TO_ADDR
6482: LD_EXP 22
6486: PUSH
6487: LD_VAR 0 2
6491: ARRAY
6492: PUSH
6493: FOR_TO
6494: IFFALSE 6591
// begin bc_type = b_oil_power ;
6496: LD_ADDR_OWVAR 42
6500: PUSH
6501: LD_INT 26
6503: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( pplants_def [ pos ] [ base ] [ i ] [ 1 ] , pplants_def [ pos ] [ base ] [ i ] [ 2 ] , pplants_def [ pos ] [ base ] [ i ] [ 3 ] ) ;
6504: LD_EXP 54
6508: PUSH
6509: LD_VAR 0 4
6513: ARRAY
6514: PUSH
6515: LD_VAR 0 2
6519: ARRAY
6520: PUSH
6521: LD_VAR 0 8
6525: ARRAY
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: PPUSH
6531: LD_EXP 54
6535: PUSH
6536: LD_VAR 0 4
6540: ARRAY
6541: PUSH
6542: LD_VAR 0 2
6546: ARRAY
6547: PUSH
6548: LD_VAR 0 8
6552: ARRAY
6553: PUSH
6554: LD_INT 2
6556: ARRAY
6557: PPUSH
6558: LD_EXP 54
6562: PUSH
6563: LD_VAR 0 4
6567: ARRAY
6568: PUSH
6569: LD_VAR 0 2
6573: ARRAY
6574: PUSH
6575: LD_VAR 0 8
6579: ARRAY
6580: PUSH
6581: LD_INT 3
6583: ARRAY
6584: PPUSH
6585: CALL_OW 47
// end ;
6589: GO 6493
6591: POP
6592: POP
// for i := 1 to deposits [ base ] [ 1 ] do
6593: LD_ADDR_VAR 0 8
6597: PUSH
6598: DOUBLE
6599: LD_INT 1
6601: DEC
6602: ST_TO_ADDR
6603: LD_EXP 28
6607: PUSH
6608: LD_VAR 0 2
6612: ARRAY
6613: PUSH
6614: LD_INT 1
6616: ARRAY
6617: PUSH
6618: FOR_TO
6619: IFFALSE 6756
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i ] , false ) ;
6621: LD_ADDR_VAR 0 17
6625: PUSH
6626: LD_EXP 55
6630: PUSH
6631: LD_VAR 0 4
6635: ARRAY
6636: PUSH
6637: LD_VAR 0 2
6641: ARRAY
6642: PUSH
6643: LD_VAR 0 8
6647: ARRAY
6648: PPUSH
6649: LD_INT 0
6651: PPUSH
6652: CALL_OW 16
6656: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_oil ) ;
6657: LD_VAR 0 17
6661: PUSH
6662: LD_INT 1
6664: ARRAY
6665: PPUSH
6666: LD_VAR 0 17
6670: PUSH
6671: LD_INT 2
6673: ARRAY
6674: PPUSH
6675: LD_INT 2
6677: PPUSH
6678: CALL_OW 62
// if are_mines [ base ] then
6682: LD_EXP 23
6686: PUSH
6687: LD_VAR 0 2
6691: ARRAY
6692: IFFALSE 6754
// begin bc_type = b_oil_mine ;
6694: LD_ADDR_OWVAR 42
6698: PUSH
6699: LD_INT 29
6701: ST_TO_ADDR
// SetResourceVisibility ( coord [ 1 ] , coord [ 2 ] , uc_side ) ;
6702: LD_VAR 0 17
6706: PUSH
6707: LD_INT 1
6709: ARRAY
6710: PPUSH
6711: LD_VAR 0 17
6715: PUSH
6716: LD_INT 2
6718: ARRAY
6719: PPUSH
6720: LD_OWVAR 20
6724: PPUSH
6725: CALL_OW 441
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
6729: LD_VAR 0 17
6733: PUSH
6734: LD_INT 1
6736: ARRAY
6737: PPUSH
6738: LD_VAR 0 17
6742: PUSH
6743: LD_INT 2
6745: ARRAY
6746: PPUSH
6747: LD_INT 0
6749: PPUSH
6750: CALL_OW 47
// end ; end ;
6754: GO 6618
6756: POP
6757: POP
// for i := 1 to deposits [ base ] [ 2 ] do
6758: LD_ADDR_VAR 0 8
6762: PUSH
6763: DOUBLE
6764: LD_INT 1
6766: DEC
6767: ST_TO_ADDR
6768: LD_EXP 28
6772: PUSH
6773: LD_VAR 0 2
6777: ARRAY
6778: PUSH
6779: LD_INT 2
6781: ARRAY
6782: PUSH
6783: FOR_TO
6784: IFFALSE 6943
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i + deposits [ base ] [ 1 ] ] , false ) ;
6786: LD_ADDR_VAR 0 17
6790: PUSH
6791: LD_EXP 55
6795: PUSH
6796: LD_VAR 0 4
6800: ARRAY
6801: PUSH
6802: LD_VAR 0 2
6806: ARRAY
6807: PUSH
6808: LD_VAR 0 8
6812: PUSH
6813: LD_EXP 28
6817: PUSH
6818: LD_VAR 0 2
6822: ARRAY
6823: PUSH
6824: LD_INT 1
6826: ARRAY
6827: PLUS
6828: ARRAY
6829: PPUSH
6830: LD_INT 0
6832: PPUSH
6833: CALL_OW 16
6837: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_siberit ) ;
6838: LD_VAR 0 17
6842: PUSH
6843: LD_INT 1
6845: ARRAY
6846: PPUSH
6847: LD_VAR 0 17
6851: PUSH
6852: LD_INT 2
6854: ARRAY
6855: PPUSH
6856: LD_INT 3
6858: PPUSH
6859: CALL_OW 62
// if are_mines [ base ] and def_siberite_detection then
6863: LD_EXP 23
6867: PUSH
6868: LD_VAR 0 2
6872: ARRAY
6873: PUSH
6874: LD_EXP 8
6878: AND
6879: IFFALSE 6941
// begin bc_type = b_siberite_mine ;
6881: LD_ADDR_OWVAR 42
6885: PUSH
6886: LD_INT 30
6888: ST_TO_ADDR
// SetResourceVisibility ( coord [ 1 ] , coord [ 2 ] , uc_side ) ;
6889: LD_VAR 0 17
6893: PUSH
6894: LD_INT 1
6896: ARRAY
6897: PPUSH
6898: LD_VAR 0 17
6902: PUSH
6903: LD_INT 2
6905: ARRAY
6906: PPUSH
6907: LD_OWVAR 20
6911: PPUSH
6912: CALL_OW 441
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
6916: LD_VAR 0 17
6920: PUSH
6921: LD_INT 1
6923: ARRAY
6924: PPUSH
6925: LD_VAR 0 17
6929: PUSH
6930: LD_INT 2
6932: ARRAY
6933: PPUSH
6934: LD_INT 0
6936: PPUSH
6937: CALL_OW 47
// end ; end ;
6941: GO 6783
6943: POP
6944: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
6945: LD_ADDR_VAR 0 5
6949: PUSH
6950: LD_EXP 48
6954: PUSH
6955: LD_VAR 0 4
6959: ARRAY
6960: PUSH
6961: LD_VAR 0 2
6965: ARRAY
6966: PUSH
6967: LD_INT 1
6969: ARRAY
6970: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
6971: LD_ADDR_VAR 0 6
6975: PUSH
6976: LD_EXP 48
6980: PUSH
6981: LD_VAR 0 4
6985: ARRAY
6986: PUSH
6987: LD_VAR 0 2
6991: ARRAY
6992: PUSH
6993: LD_INT 2
6995: ARRAY
6996: ST_TO_ADDR
// if base = 1 then
6997: LD_VAR 0 2
7001: PUSH
7002: LD_INT 1
7004: EQUAL
7005: IFFALSE 7113
// if def_morale_flags then
7007: LD_EXP 14
7011: IFFALSE 7113
// SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , def_bf_params [ 1 ] ] , [ bfo_defend_bonus_vehicle , def_bf_params [ 2 ] ] , [ bfo_defend_bonus_building , def_bf_params [ 3 ] ] , [ bfo_range , 17 ] , [ bfo_height , def_bf_params [ 4 ] ] ] ) ;
7013: LD_VAR 0 1
7017: PPUSH
7018: LD_VAR 0 5
7022: PPUSH
7023: LD_VAR 0 6
7027: PPUSH
7028: LD_INT 1
7030: PUSH
7031: LD_EXP 36
7035: PUSH
7036: LD_INT 1
7038: ARRAY
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 2
7046: PUSH
7047: LD_EXP 36
7051: PUSH
7052: LD_INT 2
7054: ARRAY
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 3
7062: PUSH
7063: LD_EXP 36
7067: PUSH
7068: LD_INT 3
7070: ARRAY
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 10
7078: PUSH
7079: LD_INT 17
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: LD_INT 20
7088: PUSH
7089: LD_EXP 36
7093: PUSH
7094: LD_INT 4
7096: ARRAY
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: PPUSH
7109: CALL_OW 418
// if number_of_people [ base ] then
7113: LD_EXP 21
7117: PUSH
7118: LD_VAR 0 2
7122: ARRAY
7123: IFFALSE 7332
// begin if No_Mechs then
7125: LD_EXP 66
7129: IFFALSE 7141
// Mode := 2 else
7131: LD_ADDR_VAR 0 16
7135: PUSH
7136: LD_INT 2
7138: ST_TO_ADDR
7139: GO 7149
// Mode := 1 ;
7141: LD_ADDR_VAR 0 16
7145: PUSH
7146: LD_INT 1
7148: ST_TO_ADDR
// neng := number_of_people [ base ] ;
7149: LD_ADDR_LOC 5
7153: PUSH
7154: LD_EXP 21
7158: PUSH
7159: LD_VAR 0 2
7163: ARRAY
7164: ST_TO_ADDR
// nmech := neng div [ 4 , 3 ] [ Mode ] ;
7165: LD_ADDR_LOC 7
7169: PUSH
7170: LD_LOC 5
7174: PUSH
7175: LD_INT 4
7177: PUSH
7178: LD_INT 3
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_VAR 0 16
7189: ARRAY
7190: DIV
7191: ST_TO_ADDR
// neng := neng - nmech ;
7192: LD_ADDR_LOC 5
7196: PUSH
7197: LD_LOC 5
7201: PUSH
7202: LD_LOC 7
7206: MINUS
7207: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
7208: LD_ADDR_LOC 6
7212: PUSH
7213: LD_LOC 5
7217: PUSH
7218: LD_INT 3
7220: PUSH
7221: LD_INT 2
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PUSH
7228: LD_VAR 0 16
7232: ARRAY
7233: DIV
7234: ST_TO_ADDR
// if ( nsci < 1 ) then
7235: LD_LOC 6
7239: PUSH
7240: LD_INT 1
7242: LESS
7243: IFFALSE 7253
// nsci := 1 ;
7245: LD_ADDR_LOC 6
7249: PUSH
7250: LD_INT 1
7252: ST_TO_ADDR
// neng := neng - nsci ;
7253: LD_ADDR_LOC 5
7257: PUSH
7258: LD_LOC 5
7262: PUSH
7263: LD_LOC 6
7267: MINUS
7268: ST_TO_ADDR
// nsol := [ neng div 2 , 0 ] [ Mode ] ;
7269: LD_ADDR_LOC 8
7273: PUSH
7274: LD_LOC 5
7278: PUSH
7279: LD_INT 2
7281: DIV
7282: PUSH
7283: LD_INT 0
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: LD_VAR 0 16
7294: ARRAY
7295: ST_TO_ADDR
// neng := neng - nsol ;
7296: LD_ADDR_LOC 5
7300: PUSH
7301: LD_LOC 5
7305: PUSH
7306: LD_LOC 8
7310: MINUS
7311: ST_TO_ADDR
// if ( neng < 1 ) then
7312: LD_LOC 5
7316: PUSH
7317: LD_INT 1
7319: LESS
7320: IFFALSE 7330
// neng := 1 ;
7322: LD_ADDR_LOC 5
7326: PUSH
7327: LD_INT 1
7329: ST_TO_ADDR
// end else
7330: GO 7364
// begin neng := 0 ;
7332: LD_ADDR_LOC 5
7336: PUSH
7337: LD_INT 0
7339: ST_TO_ADDR
// nsci := 0 ;
7340: LD_ADDR_LOC 6
7344: PUSH
7345: LD_INT 0
7347: ST_TO_ADDR
// nmech := 0 ;
7348: LD_ADDR_LOC 7
7352: PUSH
7353: LD_INT 0
7355: ST_TO_ADDR
// nsol := 0 ;
7356: LD_ADDR_LOC 8
7360: PUSH
7361: LD_INT 0
7363: ST_TO_ADDR
// end ; commander := true ;
7364: LD_ADDR_LOC 1
7368: PUSH
7369: LD_INT 1
7371: ST_TO_ADDR
// soldiers_created := 0 ;
7372: LD_ADDR_LOC 4
7376: PUSH
7377: LD_INT 0
7379: ST_TO_ADDR
// for i := 1 to are_breastworks [ base ] do
7380: LD_ADDR_VAR 0 8
7384: PUSH
7385: DOUBLE
7386: LD_INT 1
7388: DEC
7389: ST_TO_ADDR
7390: LD_EXP 27
7394: PUSH
7395: LD_VAR 0 2
7399: ARRAY
7400: PUSH
7401: FOR_TO
7402: IFFALSE 7688
// begin if are_breastworks [ base ] [ i ] = 1 then
7404: LD_EXP 27
7408: PUSH
7409: LD_VAR 0 2
7413: ARRAY
7414: PUSH
7415: LD_VAR 0 8
7419: ARRAY
7420: PUSH
7421: LD_INT 1
7423: EQUAL
7424: IFFALSE 7436
// bc_type := b_breastwork else
7426: LD_ADDR_OWVAR 42
7430: PUSH
7431: LD_INT 31
7433: ST_TO_ADDR
7434: GO 7444
// bc_type := b_bunker ;
7436: LD_ADDR_OWVAR 42
7440: PUSH
7441: LD_INT 32
7443: ST_TO_ADDR
// x := breastworks_def [ pos ] [ base ] [ i ] [ 1 ] ;
7444: LD_ADDR_VAR 0 5
7448: PUSH
7449: LD_EXP 50
7453: PUSH
7454: LD_VAR 0 4
7458: ARRAY
7459: PUSH
7460: LD_VAR 0 2
7464: ARRAY
7465: PUSH
7466: LD_VAR 0 8
7470: ARRAY
7471: PUSH
7472: LD_INT 1
7474: ARRAY
7475: ST_TO_ADDR
// y := breastworks_def [ pos ] [ base ] [ i ] [ 2 ] ;
7476: LD_ADDR_VAR 0 6
7480: PUSH
7481: LD_EXP 50
7485: PUSH
7486: LD_VAR 0 4
7490: ARRAY
7491: PUSH
7492: LD_VAR 0 2
7496: ARRAY
7497: PUSH
7498: LD_VAR 0 8
7502: ARRAY
7503: PUSH
7504: LD_INT 2
7506: ARRAY
7507: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ base ] [ i ] [ 3 ] ;
7508: LD_ADDR_VAR 0 7
7512: PUSH
7513: LD_EXP 50
7517: PUSH
7518: LD_VAR 0 4
7522: ARRAY
7523: PUSH
7524: LD_VAR 0 2
7528: ARRAY
7529: PUSH
7530: LD_VAR 0 8
7534: ARRAY
7535: PUSH
7536: LD_INT 3
7538: ARRAY
7539: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
7540: LD_ADDR_VAR 0 11
7544: PUSH
7545: LD_VAR 0 5
7549: PPUSH
7550: LD_VAR 0 6
7554: PPUSH
7555: LD_VAR 0 7
7559: PPUSH
7560: CALL_OW 47
7564: ST_TO_ADDR
// if bc_type = b_bunker then
7565: LD_OWVAR 42
7569: PUSH
7570: LD_INT 32
7572: EQUAL
7573: IFFALSE 7650
// case uc_nation of nation_american :
7575: LD_OWVAR 21
7579: PUSH
7580: LD_INT 1
7582: DOUBLE
7583: EQUAL
7584: IFTRUE 7588
7586: GO 7603
7588: POP
// PlaceWeaponTurret ( br , us_machine_gun ) ; nation_arabian :
7589: LD_VAR 0 11
7593: PPUSH
7594: LD_INT 2
7596: PPUSH
7597: CALL_OW 431
7601: GO 7650
7603: LD_INT 2
7605: DOUBLE
7606: EQUAL
7607: IFTRUE 7611
7609: GO 7626
7611: POP
// PlaceWeaponTurret ( br , ar_double_machine_gun ) ; nation_russian :
7612: LD_VAR 0 11
7616: PPUSH
7617: LD_INT 24
7619: PPUSH
7620: CALL_OW 431
7624: GO 7650
7626: LD_INT 3
7628: DOUBLE
7629: EQUAL
7630: IFTRUE 7634
7632: GO 7649
7634: POP
// PlaceWeaponTurret ( br , ru_heavy_machine_gun ) ; end ;
7635: LD_VAR 0 11
7639: PPUSH
7640: LD_INT 42
7642: PPUSH
7643: CALL_OW 431
7647: GO 7650
7649: POP
// if i <= nsol then
7650: LD_VAR 0 8
7654: PUSH
7655: LD_LOC 8
7659: LESSEQUAL
7660: IFFALSE 7686
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
7662: LD_INT 1
7664: PPUSH
7665: LD_INT 1
7667: PPUSH
7668: LD_INT 0
7670: PPUSH
7671: LD_INT 0
7673: PPUSH
7674: LD_INT 0
7676: PPUSH
7677: LD_VAR 0 11
7681: PPUSH
7682: CALL 5001 0 6
// end ;
7686: GO 7401
7688: POP
7689: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
7690: LD_ADDR_VAR 0 5
7694: PUSH
7695: LD_EXP 48
7699: PUSH
7700: LD_VAR 0 4
7704: ARRAY
7705: PUSH
7706: LD_VAR 0 2
7710: ARRAY
7711: PUSH
7712: LD_INT 1
7714: ARRAY
7715: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
7716: LD_ADDR_VAR 0 6
7720: PUSH
7721: LD_EXP 48
7725: PUSH
7726: LD_VAR 0 4
7730: ARRAY
7731: PUSH
7732: LD_VAR 0 2
7736: ARRAY
7737: PUSH
7738: LD_INT 2
7740: ARRAY
7741: ST_TO_ADDR
// if nsol > are_breastworks [ base ] then
7742: LD_LOC 8
7746: PUSH
7747: LD_EXP 27
7751: PUSH
7752: LD_VAR 0 2
7756: ARRAY
7757: GREATER
7758: IFFALSE 7846
// if arm then
7760: LD_VAR 0 15
7764: IFFALSE 7806
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , 0 , 0 , 0 , arm ) else
7766: LD_LOC 8
7770: PUSH
7771: LD_EXP 27
7775: PUSH
7776: LD_VAR 0 2
7780: ARRAY
7781: MINUS
7782: PPUSH
7783: LD_INT 1
7785: PPUSH
7786: LD_INT 0
7788: PPUSH
7789: LD_INT 0
7791: PPUSH
7792: LD_INT 0
7794: PPUSH
7795: LD_VAR 0 15
7799: PPUSH
7800: CALL 5001 0 6
7804: GO 7846
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , x , y , 5 , 0 ) ;
7806: LD_LOC 8
7810: PUSH
7811: LD_EXP 27
7815: PUSH
7816: LD_VAR 0 2
7820: ARRAY
7821: MINUS
7822: PPUSH
7823: LD_INT 1
7825: PPUSH
7826: LD_VAR 0 5
7830: PPUSH
7831: LD_VAR 0 6
7835: PPUSH
7836: LD_INT 5
7838: PPUSH
7839: LD_INT 0
7841: PPUSH
7842: CALL 5001 0 6
// if dep then
7846: LD_VAR 0 12
7850: IFFALSE 7880
// prepare_people ( neng , class_engineer , 0 , 0 , 0 , dep ) else
7852: LD_LOC 5
7856: PPUSH
7857: LD_INT 2
7859: PPUSH
7860: LD_INT 0
7862: PPUSH
7863: LD_INT 0
7865: PPUSH
7866: LD_INT 0
7868: PPUSH
7869: LD_VAR 0 12
7873: PPUSH
7874: CALL 5001 0 6
7878: GO 7908
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
7880: LD_LOC 5
7884: PPUSH
7885: LD_INT 2
7887: PPUSH
7888: LD_VAR 0 5
7892: PPUSH
7893: LD_VAR 0 6
7897: PPUSH
7898: LD_INT 5
7900: PPUSH
7901: LD_INT 0
7903: PPUSH
7904: CALL 5001 0 6
// if fact then
7908: LD_VAR 0 14
7912: IFFALSE 7942
// prepare_people ( nmech , class_mechanic , 0 , 0 , 0 , fact ) else
7914: LD_LOC 7
7918: PPUSH
7919: LD_INT 3
7921: PPUSH
7922: LD_INT 0
7924: PPUSH
7925: LD_INT 0
7927: PPUSH
7928: LD_INT 0
7930: PPUSH
7931: LD_VAR 0 14
7935: PPUSH
7936: CALL 5001 0 6
7940: GO 7970
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
7942: LD_LOC 7
7946: PPUSH
7947: LD_INT 3
7949: PPUSH
7950: LD_VAR 0 5
7954: PPUSH
7955: LD_VAR 0 6
7959: PPUSH
7960: LD_INT 5
7962: PPUSH
7963: LD_INT 0
7965: PPUSH
7966: CALL 5001 0 6
// if lab then
7970: LD_VAR 0 13
7974: IFFALSE 8004
// prepare_people ( nsci , class_scientistic , 0 , 0 , 0 , lab ) else
7976: LD_LOC 6
7980: PPUSH
7981: LD_INT 4
7983: PPUSH
7984: LD_INT 0
7986: PPUSH
7987: LD_INT 0
7989: PPUSH
7990: LD_INT 0
7992: PPUSH
7993: LD_VAR 0 13
7997: PPUSH
7998: CALL 5001 0 6
8002: GO 8032
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
8004: LD_LOC 6
8008: PPUSH
8009: LD_INT 4
8011: PPUSH
8012: LD_VAR 0 5
8016: PPUSH
8017: LD_VAR 0 6
8021: PPUSH
8022: LD_INT 5
8024: PPUSH
8025: LD_INT 0
8027: PPUSH
8028: CALL 5001 0 6
// max = 0 ;
8032: LD_ADDR_VAR 0 18
8036: PUSH
8037: LD_INT 0
8039: ST_TO_ADDR
// for un in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
8040: LD_ADDR_VAR 0 10
8044: PUSH
8045: LD_INT 22
8047: PUSH
8048: LD_VAR 0 1
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: PUSH
8057: LD_INT 21
8059: PUSH
8060: LD_INT 1
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PPUSH
8071: CALL_OW 69
8075: PUSH
8076: FOR_IN
8077: IFFALSE 8119
// begin if GetSkill ( un , skill_engineering ) > max then
8079: LD_VAR 0 10
8083: PPUSH
8084: LD_INT 2
8086: PPUSH
8087: CALL_OW 259
8091: PUSH
8092: LD_VAR 0 18
8096: GREATER
8097: IFFALSE 8117
// max := GetSkill ( un , skill_engineering ) ;
8099: LD_ADDR_VAR 0 18
8103: PUSH
8104: LD_VAR 0 10
8108: PPUSH
8109: LD_INT 2
8111: PPUSH
8112: CALL_OW 259
8116: ST_TO_ADDR
// end ;
8117: GO 8076
8119: POP
8120: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) , max ) ;
8121: LD_INT 22
8123: PUSH
8124: LD_VAR 0 1
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: LD_INT 21
8135: PUSH
8136: LD_INT 3
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: PPUSH
8147: CALL_OW 69
8151: PPUSH
8152: LD_VAR 0 18
8156: PPUSH
8157: CALL_OW 241
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
8161: LD_EXP 8
8165: PUSH
8166: LD_INT 20
8168: PPUSH
8169: LD_VAR 0 1
8173: PPUSH
8174: CALL_OW 321
8178: PUSH
8179: LD_INT 1
8181: EQUAL
8182: AND
8183: IFFALSE 8200
// SetTech ( tech_SibDet , side , state_researched ) ;
8185: LD_INT 20
8187: PPUSH
8188: LD_VAR 0 1
8192: PPUSH
8193: LD_INT 2
8195: PPUSH
8196: CALL_OW 322
// if def_siberite_bomb = 1 then
8200: LD_EXP 15
8204: PUSH
8205: LD_INT 1
8207: EQUAL
8208: IFFALSE 8242
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
8210: LD_INT 25
8212: PPUSH
8213: LD_VAR 0 1
8217: PPUSH
8218: LD_INT 1
8220: PPUSH
8221: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
8225: LD_INT 73
8227: PPUSH
8228: LD_VAR 0 1
8232: PPUSH
8233: LD_INT 1
8235: PPUSH
8236: CALL_OW 322
// end else
8240: GO 8272
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
8242: LD_INT 25
8244: PPUSH
8245: LD_VAR 0 1
8249: PPUSH
8250: LD_INT 0
8252: PPUSH
8253: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
8257: LD_INT 73
8259: PPUSH
8260: LD_VAR 0 1
8264: PPUSH
8265: LD_INT 0
8267: PPUSH
8268: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
8272: LD_INT 24
8274: PPUSH
8275: LD_VAR 0 1
8279: PPUSH
8280: LD_INT 0
8282: PPUSH
8283: CALL_OW 322
// global_defined := true ;
8287: LD_ADDR_LOC 3
8291: PUSH
8292: LD_INT 1
8294: ST_TO_ADDR
// end ;
8295: LD_VAR 0 3
8299: RET
// every 0 0$1 do
8300: GO 8302
8302: DISABLE
// if ( def_siberite_bomb > 1 ) then
8303: LD_EXP 15
8307: PUSH
8308: LD_INT 1
8310: GREATER
8311: IFFALSE 8326
// begin wait ( siberite_bomb_Delay ) ;
8313: LD_EXP 38
8317: PPUSH
8318: CALL_OW 67
// EnableSibFiss ;
8322: CALL 8327 0 0
// end ;
8326: END
// function EnableSibFiss ; var i ; begin
8327: LD_INT 0
8329: PPUSH
8330: PPUSH
// for i := 1 to 8 do
8331: LD_ADDR_VAR 0 2
8335: PUSH
8336: DOUBLE
8337: LD_INT 1
8339: DEC
8340: ST_TO_ADDR
8341: LD_INT 8
8343: PUSH
8344: FOR_TO
8345: IFFALSE 8376
// if Side_Positions [ i ] then
8347: LD_EXP 43
8351: PUSH
8352: LD_VAR 0 2
8356: ARRAY
8357: IFFALSE 8374
// SetTech ( tech_SibFiss , i , state_enabled ) ;
8359: LD_INT 25
8361: PPUSH
8362: LD_VAR 0 2
8366: PPUSH
8367: LD_INT 1
8369: PPUSH
8370: CALL_OW 322
8374: GO 8344
8376: POP
8377: POP
// end ;
8378: LD_VAR 0 1
8382: RET
// function prepare_sides ; var i ; begin
8383: LD_INT 0
8385: PPUSH
8386: PPUSH
// global_units := [ ] ;
8387: LD_ADDR_LOC 2
8391: PUSH
8392: EMPTY
8393: ST_TO_ADDR
// global_defined := false ;
8394: LD_ADDR_LOC 3
8398: PUSH
8399: LD_INT 0
8401: ST_TO_ADDR
// for i := 1 to Side_Positions do
8402: LD_ADDR_VAR 0 2
8406: PUSH
8407: DOUBLE
8408: LD_INT 1
8410: DEC
8411: ST_TO_ADDR
8412: LD_EXP 43
8416: PUSH
8417: FOR_TO
8418: IFFALSE 8458
// if Side_Positions [ i ] then
8420: LD_EXP 43
8424: PUSH
8425: LD_VAR 0 2
8429: ARRAY
8430: IFFALSE 8456
// begin prepare_side_base ( i , 1 ) ;
8432: LD_VAR 0 2
8436: PPUSH
8437: LD_INT 1
8439: PPUSH
8440: CALL 5589 0 2
// prepare_side_base ( i , 2 ) ;
8444: LD_VAR 0 2
8448: PPUSH
8449: LD_INT 2
8451: PPUSH
8452: CALL 5589 0 2
// end ;
8456: GO 8417
8458: POP
8459: POP
// end ;
8460: LD_VAR 0 1
8464: RET
// starting begin disable ( 98 ) ;
8465: LD_INT 98
8467: DISABLE_MARKED
// disable ( 400 ) ;
8468: LD_INT 400
8470: DISABLE_MARKED
// disable ( 401 ) ;
8471: LD_INT 401
8473: DISABLE_MARKED
// disable ( 600 ) ;
8474: LD_INT 600
8476: DISABLE_MARKED
// enable_human_prediction := true ;
8477: LD_ADDR_OWVAR 51
8481: PUSH
8482: LD_INT 1
8484: ST_TO_ADDR
// mp_selectmsg := true ;
8485: LD_ADDR_OWVAR 13
8489: PUSH
8490: LD_INT 1
8492: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
8493: CALL 68 0 0
// prepare_map_coordinates ;
8497: CALL 3504 0 0
// ResetFog ;
8501: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
8505: LD_OWVAR 2
8509: PPUSH
8510: CALL_OW 520
// AnimateTrees ( true ) ;
8514: LD_INT 1
8516: PPUSH
8517: CALL_OW 573
// prepare_sides ;
8521: CALL 8383 0 0
// Init_Win_Condition ;
8525: CALL 15335 0 0
// InitLimits ;
8529: CALL 13995 0 0
// ShowTimer ;
8533: CALL 14932 0 0
// music_nat := Side_Nations [ your_side ] ;
8537: LD_ADDR_OWVAR 71
8541: PUSH
8542: LD_EXP 44
8546: PUSH
8547: LD_OWVAR 2
8551: ARRAY
8552: ST_TO_ADDR
// if IAmSpec then
8553: CALL_OW 531
8557: IFFALSE 8581
// begin fogoff ( true ) ;
8559: LD_INT 1
8561: PPUSH
8562: CALL_OW 344
// CenterNowOnXY ( 109 , 61 ) ;
8566: LD_INT 109
8568: PPUSH
8569: LD_INT 61
8571: PPUSH
8572: CALL_OW 86
// enable ( 400 ) ;
8576: LD_INT 400
8578: ENABLE_MARKED
// end else
8579: GO 8635
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 2 ] ) ;
8581: LD_EXP 48
8585: PUSH
8586: LD_EXP 43
8590: PUSH
8591: LD_OWVAR 2
8595: ARRAY
8596: ARRAY
8597: PUSH
8598: LD_INT 1
8600: ARRAY
8601: PUSH
8602: LD_INT 1
8604: ARRAY
8605: PPUSH
8606: LD_EXP 48
8610: PUSH
8611: LD_EXP 43
8615: PUSH
8616: LD_OWVAR 2
8620: ARRAY
8621: ARRAY
8622: PUSH
8623: LD_INT 1
8625: ARRAY
8626: PUSH
8627: LD_INT 2
8629: ARRAY
8630: PPUSH
8631: CALL_OW 86
// end ; InitApeman ;
8635: CALL 10044 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 ] ;
8639: LD_ADDR_EXP 69
8643: PUSH
8644: LD_INT 26
8646: PUSH
8647: LD_INT 27
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: ST_TO_ADDR
// BeginBuildUp ;
8654: CALL 21354 0 0
// end ; end_of_file
8658: END
// every 1 1$0 + 0 0$0.3 do
8659: GO 8661
8661: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
8662: LD_INT 4
8664: PPUSH
8665: LD_INT 5
8667: PPUSH
8668: CALL_OW 12
8672: PPUSH
8673: LD_INT 1
8675: PPUSH
8676: CALL_OW 57
// enable ;
8680: ENABLE
// end ;
8681: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
8682: GO 8684
8684: DISABLE
8685: LD_INT 0
8687: PPUSH
8688: PPUSH
// begin case tick of 1 .. 1 1$0 :
8689: LD_OWVAR 1
8693: PUSH
8694: LD_INT 1
8696: DOUBLE
8697: GREATEREQUAL
8698: IFFALSE 8706
8700: LD_INT 2100
8702: DOUBLE
8703: LESSEQUAL
8704: IFTRUE 8708
8706: GO 8736
8708: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
8709: LD_EXP 32
8713: PUSH
8714: LD_INT 100
8716: DIVREAL
8717: PUSH
8718: LD_INT 525
8720: PPUSH
8721: LD_INT 1050
8723: PPUSH
8724: CALL_OW 12
8728: MUL
8729: PPUSH
8730: CALL_OW 67
8734: GO 9038
8736: LD_INT 2100
8738: PUSH
8739: LD_INT 1
8741: PLUS
8742: DOUBLE
8743: GREATEREQUAL
8744: IFFALSE 8752
8746: LD_INT 10500
8748: DOUBLE
8749: LESSEQUAL
8750: IFTRUE 8754
8752: GO 8782
8754: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$40 ) ) ; 5 5$0 + 1 .. 10 10$0 :
8755: LD_EXP 32
8759: PUSH
8760: LD_INT 100
8762: DIVREAL
8763: PUSH
8764: LD_INT 1050
8766: PPUSH
8767: LD_INT 1400
8769: PPUSH
8770: CALL_OW 12
8774: MUL
8775: PPUSH
8776: CALL_OW 67
8780: GO 9038
8782: LD_INT 10500
8784: PUSH
8785: LD_INT 1
8787: PLUS
8788: DOUBLE
8789: GREATEREQUAL
8790: IFFALSE 8798
8792: LD_INT 21000
8794: DOUBLE
8795: LESSEQUAL
8796: IFTRUE 8800
8798: GO 8828
8800: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$40 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
8801: LD_EXP 32
8805: PUSH
8806: LD_INT 100
8808: DIVREAL
8809: PUSH
8810: LD_INT 1400
8812: PPUSH
8813: LD_INT 1750
8815: PPUSH
8816: CALL_OW 12
8820: MUL
8821: PPUSH
8822: CALL_OW 67
8826: GO 9038
8828: LD_INT 21000
8830: PUSH
8831: LD_INT 1
8833: PLUS
8834: DOUBLE
8835: GREATEREQUAL
8836: IFFALSE 8844
8838: LD_INT 42000
8840: DOUBLE
8841: LESSEQUAL
8842: IFTRUE 8846
8844: GO 8874
8846: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
8847: LD_EXP 32
8851: PUSH
8852: LD_INT 100
8854: DIVREAL
8855: PUSH
8856: LD_INT 1750
8858: PPUSH
8859: LD_INT 2275
8861: PPUSH
8862: CALL_OW 12
8866: MUL
8867: PPUSH
8868: CALL_OW 67
8872: GO 9038
8874: LD_INT 42000
8876: PUSH
8877: LD_INT 1
8879: PLUS
8880: DOUBLE
8881: GREATEREQUAL
8882: IFFALSE 8890
8884: LD_INT 63000
8886: DOUBLE
8887: LESSEQUAL
8888: IFTRUE 8892
8890: GO 8920
8892: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
8893: LD_EXP 32
8897: PUSH
8898: LD_INT 100
8900: DIVREAL
8901: PUSH
8902: LD_INT 2275
8904: PPUSH
8905: LD_INT 2450
8907: PPUSH
8908: CALL_OW 12
8912: MUL
8913: PPUSH
8914: CALL_OW 67
8918: GO 9038
8920: LD_INT 63000
8922: PUSH
8923: LD_INT 1
8925: PLUS
8926: DOUBLE
8927: GREATEREQUAL
8928: IFFALSE 8936
8930: LD_INT 105000
8932: DOUBLE
8933: LESSEQUAL
8934: IFTRUE 8938
8936: GO 8966
8938: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
8939: LD_EXP 32
8943: PUSH
8944: LD_INT 100
8946: DIVREAL
8947: PUSH
8948: LD_INT 2450
8950: PPUSH
8951: LD_INT 2800
8953: PPUSH
8954: CALL_OW 12
8958: MUL
8959: PPUSH
8960: CALL_OW 67
8964: GO 9038
8966: LD_INT 105000
8968: PUSH
8969: LD_INT 1
8971: PLUS
8972: DOUBLE
8973: GREATEREQUAL
8974: IFFALSE 8982
8976: LD_INT 630000
8978: DOUBLE
8979: LESSEQUAL
8980: IFTRUE 8984
8982: GO 9012
8984: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$30 ) ) ; else
8985: LD_EXP 32
8989: PUSH
8990: LD_INT 100
8992: DIVREAL
8993: PUSH
8994: LD_INT 2800
8996: PPUSH
8997: LD_INT 3150
8999: PPUSH
9000: CALL_OW 12
9004: MUL
9005: PPUSH
9006: CALL_OW 67
9010: GO 9038
9012: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$40 ) ) ; end ;
9013: LD_EXP 32
9017: PUSH
9018: LD_INT 100
9020: DIVREAL
9021: PUSH
9022: LD_INT 3150
9024: PPUSH
9025: LD_INT 3500
9027: PPUSH
9028: CALL_OW 12
9032: MUL
9033: PPUSH
9034: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
9038: LD_ADDR_VAR 0 2
9042: PUSH
9043: LD_INT 3
9045: PPUSH
9046: LD_INT 5
9048: PPUSH
9049: CALL_OW 12
9053: ST_TO_ADDR
// for i = 1 to 2 do
9054: LD_ADDR_VAR 0 1
9058: PUSH
9059: DOUBLE
9060: LD_INT 1
9062: DEC
9063: ST_TO_ADDR
9064: LD_INT 2
9066: PUSH
9067: FOR_TO
9068: IFFALSE 9095
// CreateCratesArea ( amount , BuildUpAreas [ i ] , true ) ;
9070: LD_VAR 0 2
9074: PPUSH
9075: LD_EXP 69
9079: PUSH
9080: LD_VAR 0 1
9084: ARRAY
9085: PPUSH
9086: LD_INT 1
9088: PPUSH
9089: CALL_OW 55
9093: GO 9067
9095: POP
9096: POP
// enable ;
9097: ENABLE
// end ;
9098: PPOPN 2
9100: END
// every 0 0$20 + 0 0$0.9 do var i , filter ;
9101: GO 9103
9103: DISABLE
9104: LD_INT 0
9106: PPUSH
9107: PPUSH
// begin if GetResourceArea ( Valley , mat_cans ) < ( ( 300 - shipments_density ) / 100 * 5 ) then
9108: LD_INT 12
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: CALL_OW 287
9118: PUSH
9119: LD_INT 300
9121: PUSH
9122: LD_EXP 32
9126: MINUS
9127: PUSH
9128: LD_INT 100
9130: DIVREAL
9131: PUSH
9132: LD_INT 5
9134: MUL
9135: LESS
9136: IFFALSE 9159
// CreateCratesArea ( Rand ( 3 , 5 ) , Valley , true ) ;
9138: LD_INT 3
9140: PPUSH
9141: LD_INT 5
9143: PPUSH
9144: CALL_OW 12
9148: PPUSH
9149: LD_INT 12
9151: PPUSH
9152: LD_INT 1
9154: PPUSH
9155: CALL_OW 55
// enable ;
9159: ENABLE
// end ; end_of_file
9160: PPOPN 2
9162: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
9163: LD_VAR 0 1
9167: PPUSH
9168: CALL_OW 266
9172: PUSH
9173: LD_INT 0
9175: PUSH
9176: LD_INT 1
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: IN
9183: IFFALSE 9208
// SetBName ( b , @ & GetSide ( b ) ) ;
9185: LD_VAR 0 1
9189: PPUSH
9190: LD_STRING @
9192: PUSH
9193: LD_VAR 0 1
9197: PPUSH
9198: CALL_OW 255
9202: STR
9203: PPUSH
9204: CALL_OW 500
// if def_game_rules then
9208: LD_EXP 65
9212: IFFALSE 9249
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
9214: LD_VAR 0 1
9218: PPUSH
9219: LD_VAR 0 1
9223: PPUSH
9224: CALL_OW 266
9228: PPUSH
9229: LD_VAR 0 1
9233: PPUSH
9234: CALL_OW 255
9238: PPUSH
9239: LD_INT 0
9241: PPUSH
9242: LD_INT 1
9244: PPUSH
9245: CALL 14396 0 5
// end ;
9249: PPOPN 2
9251: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
9252: LD_VAR 0 1
9256: PPUSH
9257: CALL_OW 266
9261: PUSH
9262: LD_INT 0
9264: PUSH
9265: LD_INT 1
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: IN
9272: IFFALSE 9297
// SetBName ( b , @ & GetSide ( b ) ) ;
9274: LD_VAR 0 1
9278: PPUSH
9279: LD_STRING @
9281: PUSH
9282: LD_VAR 0 1
9286: PPUSH
9287: CALL_OW 255
9291: STR
9292: PPUSH
9293: CALL_OW 500
// if def_game_rules then
9297: LD_EXP 65
9301: IFFALSE 9340
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
9303: LD_VAR 0 1
9307: PPUSH
9308: LD_VAR 0 1
9312: PPUSH
9313: CALL_OW 266
9317: PPUSH
9318: LD_VAR 0 1
9322: PPUSH
9323: CALL_OW 255
9327: PPUSH
9328: LD_VAR 0 2
9332: PPUSH
9333: LD_INT 1
9335: PPUSH
9336: CALL 14396 0 5
// end ;
9340: PPOPN 3
9342: END
// on VehicleConstructed ( veh , fac ) do var side ;
9343: LD_INT 0
9345: PPUSH
// begin if GetControl ( veh ) = control_apeman then
9346: LD_VAR 0 1
9350: PPUSH
9351: CALL_OW 263
9355: PUSH
9356: LD_INT 5
9358: EQUAL
9359: IFFALSE 9501
// begin side := GetSide ( veh ) ;
9361: LD_ADDR_VAR 0 3
9365: PUSH
9366: LD_VAR 0 1
9370: PPUSH
9371: CALL_OW 255
9375: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
9376: LD_ADDR_EXP 60
9380: PUSH
9381: LD_EXP 60
9385: PPUSH
9386: LD_VAR 0 3
9390: PPUSH
9391: LD_EXP 60
9395: PUSH
9396: LD_VAR 0 3
9400: ARRAY
9401: PPUSH
9402: LD_INT 52
9404: PUSH
9405: EMPTY
9406: LIST
9407: PPUSH
9408: CALL_OW 72
9412: PUSH
9413: LD_INT 22
9415: PUSH
9416: LD_VAR 0 3
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 2
9427: PUSH
9428: LD_INT 33
9430: PUSH
9431: LD_INT 5
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PUSH
9438: LD_INT 25
9440: PUSH
9441: LD_INT 12
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: LD_INT 25
9450: PUSH
9451: LD_INT 15
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 25
9460: PUSH
9461: LD_INT 16
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: LD_INT 25
9470: PUSH
9471: LD_INT 17
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PPUSH
9490: CALL_OW 69
9494: UNION
9495: PPUSH
9496: CALL_OW 1
9500: ST_TO_ADDR
// end ; end ;
9501: PPOPN 3
9503: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
9504: LD_INT 0
9506: PPUSH
9507: PPUSH
9508: PPUSH
9509: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
9510: LD_VAR 0 1
9514: PPUSH
9515: CALL_OW 257
9519: PUSH
9520: LD_INT 12
9522: PUSH
9523: LD_INT 15
9525: PUSH
9526: LD_INT 17
9528: PUSH
9529: LD_INT 16
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: IN
9538: PUSH
9539: LD_VAR 0 1
9543: PPUSH
9544: CALL_OW 263
9548: PUSH
9549: LD_INT 5
9551: EQUAL
9552: OR
9553: IFFALSE 9564
// ApeKilled ( j ) ;
9555: LD_VAR 0 1
9559: PPUSH
9560: CALL 10727 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
9564: LD_VAR 0 1
9568: PPUSH
9569: CALL_OW 266
9573: PUSH
9574: LD_INT 0
9576: PUSH
9577: LD_INT 1
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: IN
9584: IFFALSE 9666
// begin pos := Side_Positions [ GetSide ( j ) ] ;
9586: LD_ADDR_VAR 0 4
9590: PUSH
9591: LD_EXP 43
9595: PUSH
9596: LD_VAR 0 1
9600: PPUSH
9601: CALL_OW 255
9605: ARRAY
9606: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
9607: LD_ADDR_VAR 0 2
9611: PUSH
9612: LD_EXP 48
9616: PUSH
9617: LD_VAR 0 4
9621: ARRAY
9622: PUSH
9623: LD_INT 1
9625: ARRAY
9626: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
9627: LD_ADDR_VAR 0 3
9631: PUSH
9632: LD_EXP 48
9636: PUSH
9637: LD_VAR 0 4
9641: ARRAY
9642: PUSH
9643: LD_INT 2
9645: ARRAY
9646: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
9647: LD_VAR 0 2
9651: PPUSH
9652: LD_VAR 0 3
9656: PPUSH
9657: CALL_OW 420
9661: PPUSH
9662: CALL_OW 419
// end ; if def_game_rules then
9666: LD_EXP 65
9670: IFFALSE 9769
// if ( GetType ( j ) = 3 ) then
9672: LD_VAR 0 1
9676: PPUSH
9677: CALL_OW 247
9681: PUSH
9682: LD_INT 3
9684: EQUAL
9685: IFFALSE 9725
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
9687: LD_VAR 0 1
9691: PPUSH
9692: LD_VAR 0 1
9696: PPUSH
9697: CALL_OW 266
9701: PPUSH
9702: LD_VAR 0 1
9706: PPUSH
9707: CALL_OW 255
9711: PPUSH
9712: LD_INT 0
9714: PPUSH
9715: LD_INT 1
9717: NEG
9718: PPUSH
9719: CALL 14396 0 5
9723: GO 9769
// if ( GetChassis ( j ) = 25 ) then
9725: LD_VAR 0 1
9729: PPUSH
9730: CALL_OW 265
9734: PUSH
9735: LD_INT 25
9737: EQUAL
9738: IFFALSE 9769
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
9740: LD_VAR 0 1
9744: PPUSH
9745: LD_INT 37
9747: PPUSH
9748: LD_VAR 0 1
9752: PPUSH
9753: CALL_OW 255
9757: PPUSH
9758: LD_INT 0
9760: PPUSH
9761: LD_INT 1
9763: NEG
9764: PPUSH
9765: CALL 14396 0 5
// end ;
9769: PPOPN 5
9771: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
9772: LD_EXP 65
9776: PUSH
9777: LD_VAR 0 1
9781: PPUSH
9782: CALL_OW 265
9786: PUSH
9787: LD_INT 25
9789: EQUAL
9790: AND
9791: IFFALSE 9823
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
9793: LD_VAR 0 1
9797: PPUSH
9798: LD_INT 37
9800: PPUSH
9801: LD_VAR 0 1
9805: PPUSH
9806: CALL_OW 255
9810: PPUSH
9811: LD_VAR 0 3
9815: PPUSH
9816: LD_INT 1
9818: PPUSH
9819: CALL 14396 0 5
// end ;
9823: PPOPN 4
9825: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
9826: LD_VAR 0 1
9830: PPUSH
9831: LD_VAR 0 2
9835: PPUSH
9836: LD_VAR 0 3
9840: PPUSH
9841: LD_OWVAR 2
9845: PPUSH
9846: CALL 15096 0 4
9850: PPOPN 3
9852: END
// every 20 20$00 trigger apemanNumber do
9853: LD_EXP 57
9857: IFFALSE 9890
9859: GO 9861
9861: DISABLE
// begin enable ;
9862: ENABLE
// if apeLevel >= 8 then
9863: LD_EXP 62
9867: PUSH
9868: LD_INT 8
9870: GREATEREQUAL
9871: IFFALSE 9876
// disable else
9873: DISABLE
9874: GO 9890
// apeLevel := apeLevel + 1 ;
9876: LD_ADDR_EXP 62
9880: PUSH
9881: LD_EXP 62
9885: PUSH
9886: LD_INT 1
9888: PLUS
9889: ST_TO_ADDR
// end ;
9890: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
9891: LD_EXP 57
9895: PUSH
9896: LD_EXP 58
9900: LESS
9901: IFFALSE 10041
9903: GO 9905
9905: DISABLE
9906: LD_INT 0
9908: PPUSH
9909: PPUSH
9910: PPUSH
9911: PPUSH
// begin enable ;
9912: ENABLE
// for i := 1 to apemanPos do
9913: LD_ADDR_VAR 0 1
9917: PUSH
9918: DOUBLE
9919: LD_INT 1
9921: DEC
9922: ST_TO_ADDR
9923: LD_EXP 60
9927: PUSH
9928: FOR_TO
9929: IFFALSE 10039
// begin if apemanPlayerCount [ i ] then
9931: LD_EXP 61
9935: PUSH
9936: LD_VAR 0 1
9940: ARRAY
9941: IFFALSE 10037
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
9943: LD_EXP 61
9947: PUSH
9948: LD_VAR 0 1
9952: ARRAY
9953: PUSH
9954: LD_EXP 60
9958: PUSH
9959: LD_VAR 0 1
9963: ARRAY
9964: GREATER
9965: IFFALSE 10037
// begin ape := PrepareApeman ;
9967: LD_ADDR_VAR 0 2
9971: PUSH
9972: CALL 10536 0 0
9976: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
9977: LD_VAR 0 2
9981: PPUSH
9982: LD_EXP 63
9986: PUSH
9987: LD_VAR 0 1
9991: ARRAY
9992: PPUSH
9993: LD_INT 0
9995: PPUSH
9996: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
10000: LD_ADDR_EXP 60
10004: PUSH
10005: LD_EXP 60
10009: PPUSH
10010: LD_VAR 0 1
10014: PPUSH
10015: LD_EXP 60
10019: PUSH
10020: LD_VAR 0 1
10024: ARRAY
10025: PUSH
10026: LD_VAR 0 2
10030: UNION
10031: PPUSH
10032: CALL_OW 1
10036: ST_TO_ADDR
// end ; end ; end ;
10037: GO 9928
10039: POP
10040: POP
// end ;
10041: PPOPN 4
10043: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
10044: LD_INT 0
10046: PPUSH
10047: PPUSH
10048: PPUSH
10049: PPUSH
10050: PPUSH
10051: PPUSH
10052: PPUSH
// playersAmount := 0 ;
10053: LD_ADDR_VAR 0 3
10057: PUSH
10058: LD_INT 0
10060: ST_TO_ADDR
// _apeAreas := [ Ar1Out3 , Ar2Out3 ] ;
10061: LD_ADDR_VAR 0 7
10065: PUSH
10066: LD_INT 24
10068: PUSH
10069: LD_INT 18
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10076: LD_ADDR_EXP 63
10080: PUSH
10081: LD_INT 0
10083: PUSH
10084: LD_INT 0
10086: PUSH
10087: LD_INT 0
10089: PUSH
10090: LD_INT 0
10092: PUSH
10093: LD_INT 0
10095: PUSH
10096: LD_INT 0
10098: PUSH
10099: LD_INT 0
10101: PUSH
10102: LD_INT 0
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: ST_TO_ADDR
// for j = 1 to Side_Positions do
10115: LD_ADDR_VAR 0 4
10119: PUSH
10120: DOUBLE
10121: LD_INT 1
10123: DEC
10124: ST_TO_ADDR
10125: LD_EXP 43
10129: PUSH
10130: FOR_TO
10131: IFFALSE 10198
// if Side_Positions [ j ] then
10133: LD_EXP 43
10137: PUSH
10138: LD_VAR 0 4
10142: ARRAY
10143: IFFALSE 10196
// begin playersAmount := playersAmount + 1 ;
10145: LD_ADDR_VAR 0 3
10149: PUSH
10150: LD_VAR 0 3
10154: PUSH
10155: LD_INT 1
10157: PLUS
10158: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
10159: LD_ADDR_EXP 63
10163: PUSH
10164: LD_EXP 63
10168: PPUSH
10169: LD_VAR 0 4
10173: PPUSH
10174: LD_VAR 0 7
10178: PUSH
10179: LD_EXP 43
10183: PUSH
10184: LD_VAR 0 4
10188: ARRAY
10189: ARRAY
10190: PPUSH
10191: CALL_OW 1
10195: ST_TO_ADDR
// end ;
10196: GO 10130
10198: POP
10199: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
10200: LD_ADDR_EXP 59
10204: PUSH
10205: LD_INT 3
10207: PUSH
10208: LD_EXP 37
10212: MUL
10213: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
10214: LD_ADDR_EXP 57
10218: PUSH
10219: LD_VAR 0 3
10223: PUSH
10224: LD_EXP 59
10228: MUL
10229: ST_TO_ADDR
// apemanLimit := apemanNumber ;
10230: LD_ADDR_EXP 58
10234: PUSH
10235: LD_EXP 57
10239: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10240: LD_ADDR_EXP 60
10244: PUSH
10245: LD_INT 0
10247: PUSH
10248: LD_INT 0
10250: PUSH
10251: LD_INT 0
10253: PUSH
10254: LD_INT 0
10256: PUSH
10257: LD_INT 0
10259: PUSH
10260: LD_INT 0
10262: PUSH
10263: LD_INT 0
10265: PUSH
10266: LD_INT 0
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10279: LD_ADDR_EXP 61
10283: PUSH
10284: LD_INT 0
10286: PUSH
10287: LD_INT 0
10289: PUSH
10290: LD_INT 0
10292: PUSH
10293: LD_INT 0
10295: PUSH
10296: LD_INT 0
10298: PUSH
10299: LD_INT 0
10301: PUSH
10302: LD_INT 0
10304: PUSH
10305: LD_INT 0
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: ST_TO_ADDR
// apeLevel := 1 ;
10318: LD_ADDR_EXP 62
10322: PUSH
10323: LD_INT 1
10325: ST_TO_ADDR
// if not apemanNumber then
10326: LD_EXP 57
10330: NOT
10331: IFFALSE 10335
// exit ;
10333: GO 10531
// for i := 1 to apemanPerPlayer do
10335: LD_ADDR_VAR 0 2
10339: PUSH
10340: DOUBLE
10341: LD_INT 1
10343: DEC
10344: ST_TO_ADDR
10345: LD_EXP 59
10349: PUSH
10350: FOR_TO
10351: IFFALSE 10529
// begin for j := 1 to Side_Positions do
10353: LD_ADDR_VAR 0 4
10357: PUSH
10358: DOUBLE
10359: LD_INT 1
10361: DEC
10362: ST_TO_ADDR
10363: LD_EXP 43
10367: PUSH
10368: FOR_TO
10369: IFFALSE 10525
// if Side_Positions [ j ] then
10371: LD_EXP 43
10375: PUSH
10376: LD_VAR 0 4
10380: ARRAY
10381: IFFALSE 10523
// begin pos := Side_Positions [ j ] ;
10383: LD_ADDR_VAR 0 6
10387: PUSH
10388: LD_EXP 43
10392: PUSH
10393: LD_VAR 0 4
10397: ARRAY
10398: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
10399: LD_ADDR_EXP 61
10403: PUSH
10404: LD_EXP 61
10408: PPUSH
10409: LD_VAR 0 4
10413: PPUSH
10414: LD_EXP 61
10418: PUSH
10419: LD_VAR 0 4
10423: ARRAY
10424: PUSH
10425: LD_INT 1
10427: PLUS
10428: PPUSH
10429: CALL_OW 1
10433: ST_TO_ADDR
// ape := PrepareApeman ;
10434: LD_ADDR_VAR 0 5
10438: PUSH
10439: CALL 10536 0 0
10443: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
10444: LD_ADDR_EXP 60
10448: PUSH
10449: LD_EXP 60
10453: PPUSH
10454: LD_VAR 0 4
10458: PPUSH
10459: LD_EXP 60
10463: PUSH
10464: LD_VAR 0 4
10468: ARRAY
10469: PPUSH
10470: LD_EXP 60
10474: PUSH
10475: LD_VAR 0 4
10479: ARRAY
10480: PUSH
10481: LD_INT 1
10483: PLUS
10484: PPUSH
10485: LD_VAR 0 5
10489: PPUSH
10490: CALL_OW 1
10494: PPUSH
10495: CALL_OW 1
10499: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
10500: LD_VAR 0 5
10504: PPUSH
10505: LD_EXP 63
10509: PUSH
10510: LD_VAR 0 4
10514: ARRAY
10515: PPUSH
10516: LD_INT 0
10518: PPUSH
10519: CALL_OW 49
// end ;
10523: GO 10368
10525: POP
10526: POP
// end ;
10527: GO 10350
10529: POP
10530: POP
// end ;
10531: LD_VAR 0 1
10535: RET
// export function PrepareApeman ; var bonus ; begin
10536: LD_INT 0
10538: PPUSH
10539: PPUSH
// uc_side := 0 ;
10540: LD_ADDR_OWVAR 20
10544: PUSH
10545: LD_INT 0
10547: ST_TO_ADDR
// uc_nation := 0 ;
10548: LD_ADDR_OWVAR 21
10552: PUSH
10553: LD_INT 0
10555: ST_TO_ADDR
// InitHc ;
10556: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
10560: LD_ADDR_VAR 0 2
10564: PUSH
10565: LD_INT 1
10567: NEG
10568: PUSH
10569: LD_INT 0
10571: PUSH
10572: LD_INT 1
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: LIST
10579: PUSH
10580: LD_INT 25
10582: PUSH
10583: LD_INT 12
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: PUSH
10595: LD_INT 3
10597: MOD
10598: PUSH
10599: LD_INT 1
10601: PLUS
10602: ARRAY
10603: ST_TO_ADDR
// hc_class := class_apeman ;
10604: LD_ADDR_OWVAR 28
10608: PUSH
10609: LD_INT 12
10611: ST_TO_ADDR
// hc_gallery :=  ;
10612: LD_ADDR_OWVAR 33
10616: PUSH
10617: LD_STRING 
10619: ST_TO_ADDR
// hc_name :=  ;
10620: LD_ADDR_OWVAR 26
10624: PUSH
10625: LD_STRING 
10627: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
10628: LD_ADDR_OWVAR 31
10632: PUSH
10633: LD_EXP 62
10637: PUSH
10638: LD_VAR 0 2
10642: PLUS
10643: PUSH
10644: LD_EXP 62
10648: PUSH
10649: LD_VAR 0 2
10653: PLUS
10654: PUSH
10655: LD_EXP 62
10659: PUSH
10660: LD_VAR 0 2
10664: PLUS
10665: PUSH
10666: LD_EXP 62
10670: PUSH
10671: LD_VAR 0 2
10675: PLUS
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
10683: LD_ADDR_OWVAR 35
10687: PUSH
10688: LD_INT 10
10690: PUSH
10691: LD_VAR 0 2
10695: MUL
10696: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10697: LD_ADDR_OWVAR 29
10701: PUSH
10702: LD_INT 12
10704: PUSH
10705: LD_INT 12
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: ST_TO_ADDR
// result := CreateHuman ;
10712: LD_ADDR_VAR 0 1
10716: PUSH
10717: CALL_OW 44
10721: ST_TO_ADDR
// end ;
10722: LD_VAR 0 1
10726: RET
// export function ApeKilled ( ape ) ; var s , i ; begin
10727: LD_INT 0
10729: PPUSH
10730: PPUSH
10731: PPUSH
// if not ape then
10732: LD_VAR 0 1
10736: NOT
10737: IFFALSE 10741
// exit ;
10739: GO 10844
// for i = 1 to apemanPos do
10741: LD_ADDR_VAR 0 4
10745: PUSH
10746: DOUBLE
10747: LD_INT 1
10749: DEC
10750: ST_TO_ADDR
10751: LD_EXP 60
10755: PUSH
10756: FOR_TO
10757: IFFALSE 10791
// if ape in apemanPos [ i ] then
10759: LD_VAR 0 1
10763: PUSH
10764: LD_EXP 60
10768: PUSH
10769: LD_VAR 0 4
10773: ARRAY
10774: IN
10775: IFFALSE 10789
// begin s := i ;
10777: LD_ADDR_VAR 0 3
10781: PUSH
10782: LD_VAR 0 4
10786: ST_TO_ADDR
// break ;
10787: GO 10791
// end ;
10789: GO 10756
10791: POP
10792: POP
// apemanPos := Replace ( apemanPos , s , apemanPos [ s ] diff ape ) ;
10793: LD_ADDR_EXP 60
10797: PUSH
10798: LD_EXP 60
10802: PPUSH
10803: LD_VAR 0 3
10807: PPUSH
10808: LD_EXP 60
10812: PUSH
10813: LD_VAR 0 3
10817: ARRAY
10818: PUSH
10819: LD_VAR 0 1
10823: DIFF
10824: PPUSH
10825: CALL_OW 1
10829: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
10830: LD_ADDR_EXP 57
10834: PUSH
10835: LD_EXP 57
10839: PUSH
10840: LD_INT 1
10842: MINUS
10843: ST_TO_ADDR
// end ; end_of_file
10844: LD_VAR 0 2
10848: RET
// var free , free1 , free2 , new1 , new2 , arr1 , arr2 , seenby1 , seenby2 ; function displ_status ; var s1 , s2 ; begin
10849: LD_INT 0
10851: PPUSH
10852: PPUSH
10853: PPUSH
// if not def_people_arrivals then
10854: LD_EXP 11
10858: NOT
10859: IFFALSE 10863
// exit ;
10861: GO 11004
// if def_people_loyality then
10863: LD_EXP 12
10867: IFFALSE 10983
// begin s1 := [ #Multi1x1-InfoL , Side_Positions [ 1 ] , ( free1 + 0 ) ] ;
10869: LD_ADDR_VAR 0 2
10873: PUSH
10874: LD_STRING #Multi1x1-InfoL
10876: PUSH
10877: LD_EXP 43
10881: PUSH
10882: LD_INT 1
10884: ARRAY
10885: PUSH
10886: LD_LOC 10
10890: PUSH
10891: LD_INT 0
10893: PLUS
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: LIST
10899: ST_TO_ADDR
// s2 := [ #Multi1x1-InfoL , Side_Positions [ 2 ] , ( free2 + 0 ) ] ;
10900: LD_ADDR_VAR 0 3
10904: PUSH
10905: LD_STRING #Multi1x1-InfoL
10907: PUSH
10908: LD_EXP 43
10912: PUSH
10913: LD_INT 2
10915: ARRAY
10916: PUSH
10917: LD_LOC 11
10921: PUSH
10922: LD_INT 0
10924: PLUS
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: LIST
10930: ST_TO_ADDR
// if Side_Positions [ your_side ] <> 2 then
10931: LD_EXP 43
10935: PUSH
10936: LD_OWVAR 2
10940: ARRAY
10941: PUSH
10942: LD_INT 2
10944: NONEQUAL
10945: IFFALSE 10965
// ExtraStrings := s1 ^ s2 else
10947: LD_ADDR_EXP 67
10951: PUSH
10952: LD_VAR 0 2
10956: PUSH
10957: LD_VAR 0 3
10961: ADD
10962: ST_TO_ADDR
10963: GO 10981
// ExtraStrings := s2 ^ s1 ;
10965: LD_ADDR_EXP 67
10969: PUSH
10970: LD_VAR 0 3
10974: PUSH
10975: LD_VAR 0 2
10979: ADD
10980: ST_TO_ADDR
// end else
10981: GO 11004
// begin ExtraStrings := [ #Multi1x1-InfoNonL , ( free + 0 ) ] ;
10983: LD_ADDR_EXP 67
10987: PUSH
10988: LD_STRING #Multi1x1-InfoNonL
10990: PUSH
10991: LD_LOC 9
10995: PUSH
10996: LD_INT 0
10998: PLUS
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: ST_TO_ADDR
// end ; end ;
11004: LD_VAR 0 1
11008: RET
// every 0 0$1 do
11009: GO 11011
11011: DISABLE
// begin if not text_info then
11012: LD_EXP 34
11016: NOT
11017: IFFALSE 11021
// exit ;
11019: GO 11026
// displ_status ;
11021: CALL 10849 0 0
// enable ;
11025: ENABLE
// end ;
11026: END
// export function prepare_arrivals ; var i , ar , p1 , p2 , pom1 , pom2 ; begin
11027: LD_INT 0
11029: PPUSH
11030: PPUSH
11031: PPUSH
11032: PPUSH
11033: PPUSH
11034: PPUSH
11035: PPUSH
// arr1 := [ ] ;
11036: LD_ADDR_LOC 14
11040: PUSH
11041: EMPTY
11042: ST_TO_ADDR
// arr2 := [ ] ;
11043: LD_ADDR_LOC 15
11047: PUSH
11048: EMPTY
11049: ST_TO_ADDR
// for i := 1 to max_arriving_times do
11050: LD_ADDR_VAR 0 2
11054: PUSH
11055: DOUBLE
11056: LD_INT 1
11058: DEC
11059: ST_TO_ADDR
11060: LD_EXP 33
11064: PUSH
11065: FOR_TO
11066: IFFALSE 11602
// begin case rand ( 1 , 100 ) of 1 .. 45 :
11068: LD_INT 1
11070: PPUSH
11071: LD_INT 100
11073: PPUSH
11074: CALL_OW 12
11078: PUSH
11079: LD_INT 1
11081: DOUBLE
11082: GREATEREQUAL
11083: IFFALSE 11091
11085: LD_INT 45
11087: DOUBLE
11088: LESSEQUAL
11089: IFTRUE 11093
11091: GO 11300
11093: POP
// case rand ( 1 , 100 ) of 1 .. 10 :
11094: LD_INT 1
11096: PPUSH
11097: LD_INT 100
11099: PPUSH
11100: CALL_OW 12
11104: PUSH
11105: LD_INT 1
11107: DOUBLE
11108: GREATEREQUAL
11109: IFFALSE 11117
11111: LD_INT 10
11113: DOUBLE
11114: LESSEQUAL
11115: IFTRUE 11119
11117: GO 11137
11119: POP
// ar := [ Ar1Base1 , Ar2Base1 ] ; 11 .. 20 :
11120: LD_ADDR_VAR 0 3
11124: PUSH
11125: LD_INT 19
11127: PUSH
11128: LD_INT 15
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: ST_TO_ADDR
11135: GO 11298
11137: LD_INT 11
11139: DOUBLE
11140: GREATEREQUAL
11141: IFFALSE 11149
11143: LD_INT 20
11145: DOUBLE
11146: LESSEQUAL
11147: IFTRUE 11151
11149: GO 11169
11151: POP
// ar := [ Ar1Base2 , Ar2Base2 ] ; 21 .. 30 :
11152: LD_ADDR_VAR 0 3
11156: PUSH
11157: LD_INT 20
11159: PUSH
11160: LD_INT 14
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: ST_TO_ADDR
11167: GO 11298
11169: LD_INT 21
11171: DOUBLE
11172: GREATEREQUAL
11173: IFFALSE 11181
11175: LD_INT 30
11177: DOUBLE
11178: LESSEQUAL
11179: IFTRUE 11183
11181: GO 11201
11183: POP
// ar := [ Ar1Between , Ar2Between ] ; 31 .. 55 :
11184: LD_ADDR_VAR 0 3
11188: PUSH
11189: LD_INT 22
11191: PUSH
11192: LD_INT 16
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: ST_TO_ADDR
11199: GO 11298
11201: LD_INT 31
11203: DOUBLE
11204: GREATEREQUAL
11205: IFFALSE 11213
11207: LD_INT 55
11209: DOUBLE
11210: LESSEQUAL
11211: IFTRUE 11215
11213: GO 11233
11215: POP
// ar := [ Ar1Out2 , Ar2Out2 ] ; 56 .. 80 :
11216: LD_ADDR_VAR 0 3
11220: PUSH
11221: LD_INT 23
11223: PUSH
11224: LD_INT 17
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: ST_TO_ADDR
11231: GO 11298
11233: LD_INT 56
11235: DOUBLE
11236: GREATEREQUAL
11237: IFFALSE 11245
11239: LD_INT 80
11241: DOUBLE
11242: LESSEQUAL
11243: IFTRUE 11247
11245: GO 11265
11247: POP
// ar := [ Ar1Out1 , Ar2Out1 ] ; 81 .. 100 :
11248: LD_ADDR_VAR 0 3
11252: PUSH
11253: LD_INT 21
11255: PUSH
11256: LD_INT 13
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: ST_TO_ADDR
11263: GO 11298
11265: LD_INT 81
11267: DOUBLE
11268: GREATEREQUAL
11269: IFFALSE 11277
11271: LD_INT 100
11273: DOUBLE
11274: LESSEQUAL
11275: IFTRUE 11279
11277: GO 11297
11279: POP
// ar := [ Ar1Out3 , Ar2Out3 ] ; end ; 46 .. 85 :
11280: LD_ADDR_VAR 0 3
11284: PUSH
11285: LD_INT 24
11287: PUSH
11288: LD_INT 18
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: ST_TO_ADDR
11295: GO 11298
11297: POP
11298: GO 11554
11300: LD_INT 46
11302: DOUBLE
11303: GREATEREQUAL
11304: IFFALSE 11312
11306: LD_INT 85
11308: DOUBLE
11309: LESSEQUAL
11310: IFTRUE 11314
11312: GO 11521
11314: POP
// case rand ( 1 , 100 ) of 1 .. 5 :
11315: LD_INT 1
11317: PPUSH
11318: LD_INT 100
11320: PPUSH
11321: CALL_OW 12
11325: PUSH
11326: LD_INT 1
11328: DOUBLE
11329: GREATEREQUAL
11330: IFFALSE 11338
11332: LD_INT 5
11334: DOUBLE
11335: LESSEQUAL
11336: IFTRUE 11340
11338: GO 11358
11340: POP
// ar := [ Ar2Base1 , Ar1Base1 ] ; 6 .. 15 :
11341: LD_ADDR_VAR 0 3
11345: PUSH
11346: LD_INT 15
11348: PUSH
11349: LD_INT 19
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: ST_TO_ADDR
11356: GO 11519
11358: LD_INT 6
11360: DOUBLE
11361: GREATEREQUAL
11362: IFFALSE 11370
11364: LD_INT 15
11366: DOUBLE
11367: LESSEQUAL
11368: IFTRUE 11372
11370: GO 11390
11372: POP
// ar := [ Ar2Base2 , Ar1Base2 ] ; 16 .. 30 :
11373: LD_ADDR_VAR 0 3
11377: PUSH
11378: LD_INT 14
11380: PUSH
11381: LD_INT 20
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: ST_TO_ADDR
11388: GO 11519
11390: LD_INT 16
11392: DOUBLE
11393: GREATEREQUAL
11394: IFFALSE 11402
11396: LD_INT 30
11398: DOUBLE
11399: LESSEQUAL
11400: IFTRUE 11404
11402: GO 11422
11404: POP
// ar := [ Ar2Between , Ar1Between ] ; 31 .. 50 :
11405: LD_ADDR_VAR 0 3
11409: PUSH
11410: LD_INT 16
11412: PUSH
11413: LD_INT 22
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: ST_TO_ADDR
11420: GO 11519
11422: LD_INT 31
11424: DOUBLE
11425: GREATEREQUAL
11426: IFFALSE 11434
11428: LD_INT 50
11430: DOUBLE
11431: LESSEQUAL
11432: IFTRUE 11436
11434: GO 11454
11436: POP
// ar := [ Ar2Out2 , Ar1Out2 ] ; 51 .. 75 :
11437: LD_ADDR_VAR 0 3
11441: PUSH
11442: LD_INT 17
11444: PUSH
11445: LD_INT 23
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: ST_TO_ADDR
11452: GO 11519
11454: LD_INT 51
11456: DOUBLE
11457: GREATEREQUAL
11458: IFFALSE 11466
11460: LD_INT 75
11462: DOUBLE
11463: LESSEQUAL
11464: IFTRUE 11468
11466: GO 11486
11468: POP
// ar := [ Ar2Out1 , Ar1Out1 ] ; 76 .. 100 :
11469: LD_ADDR_VAR 0 3
11473: PUSH
11474: LD_INT 13
11476: PUSH
11477: LD_INT 21
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: ST_TO_ADDR
11484: GO 11519
11486: LD_INT 76
11488: DOUBLE
11489: GREATEREQUAL
11490: IFFALSE 11498
11492: LD_INT 100
11494: DOUBLE
11495: LESSEQUAL
11496: IFTRUE 11500
11498: GO 11518
11500: POP
// ar := [ Ar2Out3 , Ar1Out3 ] ; end ; 86 .. 100 :
11501: LD_ADDR_VAR 0 3
11505: PUSH
11506: LD_INT 18
11508: PUSH
11509: LD_INT 24
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: ST_TO_ADDR
11516: GO 11519
11518: POP
11519: GO 11554
11521: LD_INT 86
11523: DOUBLE
11524: GREATEREQUAL
11525: IFFALSE 11533
11527: LD_INT 100
11529: DOUBLE
11530: LESSEQUAL
11531: IFTRUE 11535
11533: GO 11553
11535: POP
// ar := [ valley , valley ] ; end ;
11536: LD_ADDR_VAR 0 3
11540: PUSH
11541: LD_INT 12
11543: PUSH
11544: LD_INT 12
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: ST_TO_ADDR
11551: GO 11554
11553: POP
// arr1 := arr1 ^ [ ar [ 1 ] ] ;
11554: LD_ADDR_LOC 14
11558: PUSH
11559: LD_LOC 14
11563: PUSH
11564: LD_VAR 0 3
11568: PUSH
11569: LD_INT 1
11571: ARRAY
11572: PUSH
11573: EMPTY
11574: LIST
11575: ADD
11576: ST_TO_ADDR
// arr2 := arr2 ^ [ ar [ 2 ] ] ;
11577: LD_ADDR_LOC 15
11581: PUSH
11582: LD_LOC 15
11586: PUSH
11587: LD_VAR 0 3
11591: PUSH
11592: LD_INT 2
11594: ARRAY
11595: PUSH
11596: EMPTY
11597: LIST
11598: ADD
11599: ST_TO_ADDR
// end ;
11600: GO 11065
11602: POP
11603: POP
// for i := 1 to max_arriving_times div 2 do
11604: LD_ADDR_VAR 0 2
11608: PUSH
11609: DOUBLE
11610: LD_INT 1
11612: DEC
11613: ST_TO_ADDR
11614: LD_EXP 33
11618: PUSH
11619: LD_INT 2
11621: DIV
11622: PUSH
11623: FOR_TO
11624: IFFALSE 11736
// begin p1 := Rand ( 1 , max_arriving_times ) ;
11626: LD_ADDR_VAR 0 4
11630: PUSH
11631: LD_INT 1
11633: PPUSH
11634: LD_EXP 33
11638: PPUSH
11639: CALL_OW 12
11643: ST_TO_ADDR
// p2 := Rand ( 1 , max_arriving_times ) ;
11644: LD_ADDR_VAR 0 5
11648: PUSH
11649: LD_INT 1
11651: PPUSH
11652: LD_EXP 33
11656: PPUSH
11657: CALL_OW 12
11661: ST_TO_ADDR
// pom1 := arr2 [ p1 ] ;
11662: LD_ADDR_VAR 0 6
11666: PUSH
11667: LD_LOC 15
11671: PUSH
11672: LD_VAR 0 4
11676: ARRAY
11677: ST_TO_ADDR
// pom2 := arr2 [ p2 ] ;
11678: LD_ADDR_VAR 0 7
11682: PUSH
11683: LD_LOC 15
11687: PUSH
11688: LD_VAR 0 5
11692: ARRAY
11693: ST_TO_ADDR
// arr2 := Replace ( Replace ( arr2 , p2 , pom1 ) , p1 , pom2 ) ;
11694: LD_ADDR_LOC 15
11698: PUSH
11699: LD_LOC 15
11703: PPUSH
11704: LD_VAR 0 5
11708: PPUSH
11709: LD_VAR 0 6
11713: PPUSH
11714: CALL_OW 1
11718: PPUSH
11719: LD_VAR 0 4
11723: PPUSH
11724: LD_VAR 0 7
11728: PPUSH
11729: CALL_OW 1
11733: ST_TO_ADDR
// end ;
11734: GO 11623
11736: POP
11737: POP
// end ;
11738: LD_VAR 0 1
11742: RET
// every 0 0$1 do
11743: GO 11745
11745: DISABLE
// begin if not max_arriving_times then
11746: LD_EXP 33
11750: NOT
11751: IFFALSE 11755
// exit ;
11753: GO 11838
// if tick >= max_arriving_times [ 1 ] * 0 0$30 then
11755: LD_OWVAR 1
11759: PUSH
11760: LD_EXP 33
11764: PUSH
11765: LD_INT 1
11767: ARRAY
11768: PUSH
11769: LD_INT 1050
11771: MUL
11772: GREATEREQUAL
11773: IFFALSE 11837
// begin new1 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11775: LD_ADDR_LOC 12
11779: PUSH
11780: LD_INT 1
11782: PPUSH
11783: LD_EXP 33
11787: PUSH
11788: LD_INT 1050
11790: MUL
11791: PPUSH
11792: CALL_OW 12
11796: ST_TO_ADDR
// new2 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11797: LD_ADDR_LOC 13
11801: PUSH
11802: LD_INT 1
11804: PPUSH
11805: LD_EXP 33
11809: PUSH
11810: LD_INT 1050
11812: MUL
11813: PPUSH
11814: CALL_OW 12
11818: ST_TO_ADDR
// max_arriving_times := delete ( max_arriving_times , 1 ) ;
11819: LD_ADDR_EXP 33
11823: PUSH
11824: LD_EXP 33
11828: PPUSH
11829: LD_INT 1
11831: PPUSH
11832: CALL_OW 3
11836: ST_TO_ADDR
// end ; enable ;
11837: ENABLE
// end ;
11838: END
// function new_arrival ( pos ) ; var hum ; begin
11839: LD_INT 0
11841: PPUSH
11842: PPUSH
// if def_people_loyality then
11843: LD_EXP 12
11847: IFFALSE 11889
// begin uc_side := second_side [ pos ] ;
11849: LD_ADDR_OWVAR 20
11853: PUSH
11854: LD_EXP 46
11858: PUSH
11859: LD_VAR 0 1
11863: ARRAY
11864: ST_TO_ADDR
// uc_nation := Side_Nations [ positions [ pos ] ] ;
11865: LD_ADDR_OWVAR 21
11869: PUSH
11870: LD_EXP 44
11874: PUSH
11875: LD_EXP 39
11879: PUSH
11880: LD_VAR 0 1
11884: ARRAY
11885: ARRAY
11886: ST_TO_ADDR
// end else
11887: GO 11909
// begin uc_side := second_side ;
11889: LD_ADDR_OWVAR 20
11893: PUSH
11894: LD_EXP 46
11898: ST_TO_ADDR
// uc_nation := third_nation ;
11899: LD_ADDR_OWVAR 21
11903: PUSH
11904: LD_EXP 47
11908: ST_TO_ADDR
// end ; PrepareHuman ( 0 , 0 , initial_level + 1 ) ;
11909: LD_INT 0
11911: PPUSH
11912: LD_INT 0
11914: PPUSH
11915: LD_EXP 29
11919: PUSH
11920: LD_INT 1
11922: PLUS
11923: PPUSH
11924: CALL_OW 380
// hc_class := class_soldier ;
11928: LD_ADDR_OWVAR 28
11932: PUSH
11933: LD_INT 1
11935: ST_TO_ADDR
// hum := CreateHuman ;
11936: LD_ADDR_VAR 0 3
11940: PUSH
11941: CALL_OW 44
11945: ST_TO_ADDR
// if pos = 1 then
11946: LD_VAR 0 1
11950: PUSH
11951: LD_INT 1
11953: EQUAL
11954: IFFALSE 11997
// begin PlaceUnitArea ( hum , arr1 [ 1 ] , true ) ;
11956: LD_VAR 0 3
11960: PPUSH
11961: LD_LOC 14
11965: PUSH
11966: LD_INT 1
11968: ARRAY
11969: PPUSH
11970: LD_INT 1
11972: PPUSH
11973: CALL_OW 49
// arr1 := delete ( arr1 , 1 ) ;
11977: LD_ADDR_LOC 14
11981: PUSH
11982: LD_LOC 14
11986: PPUSH
11987: LD_INT 1
11989: PPUSH
11990: CALL_OW 3
11994: ST_TO_ADDR
// end else
11995: GO 12036
// begin PlaceUnitArea ( hum , arr2 [ 1 ] , true ) ;
11997: LD_VAR 0 3
12001: PPUSH
12002: LD_LOC 15
12006: PUSH
12007: LD_INT 1
12009: ARRAY
12010: PPUSH
12011: LD_INT 1
12013: PPUSH
12014: CALL_OW 49
// arr2 := delete ( arr2 , 1 ) ;
12018: LD_ADDR_LOC 15
12022: PUSH
12023: LD_LOC 15
12027: PPUSH
12028: LD_INT 1
12030: PPUSH
12031: CALL_OW 3
12035: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) until IsPlaced ( hum ) ;
12036: LD_INT 35
12038: PPUSH
12039: CALL_OW 67
12043: LD_VAR 0 3
12047: PPUSH
12048: CALL_OW 305
12052: IFFALSE 12036
// if def_people_loyality then
12054: LD_EXP 12
12058: IFFALSE 12118
// if pos = 1 then
12060: LD_VAR 0 1
12064: PUSH
12065: LD_INT 1
12067: EQUAL
12068: IFFALSE 12088
// free1 := free1 ^ hum else
12070: LD_ADDR_LOC 10
12074: PUSH
12075: LD_LOC 10
12079: PUSH
12080: LD_VAR 0 3
12084: ADD
12085: ST_TO_ADDR
12086: GO 12116
// if pos = 2 then
12088: LD_VAR 0 1
12092: PUSH
12093: LD_INT 2
12095: EQUAL
12096: IFFALSE 12116
// free2 := free2 ^ hum else
12098: LD_ADDR_LOC 11
12102: PUSH
12103: LD_LOC 11
12107: PUSH
12108: LD_VAR 0 3
12112: ADD
12113: ST_TO_ADDR
12114: GO 12116
// else
12116: GO 12134
// free := free ^ hum ;
12118: LD_ADDR_LOC 9
12122: PUSH
12123: LD_LOC 9
12127: PUSH
12128: LD_VAR 0 3
12132: ADD
12133: ST_TO_ADDR
// end ;
12134: LD_VAR 0 2
12138: RET
// every 0 0$0.5 trigger new1 do var d ;
12139: LD_LOC 12
12143: IFFALSE 12176
12145: GO 12147
12147: DISABLE
12148: LD_INT 0
12150: PPUSH
// begin enable ;
12151: ENABLE
// new1 := 0 ;
12152: LD_ADDR_LOC 12
12156: PUSH
12157: LD_INT 0
12159: ST_TO_ADDR
// wait ( d ) ;
12160: LD_VAR 0 1
12164: PPUSH
12165: CALL_OW 67
// new_arrival ( 1 ) ;
12169: LD_INT 1
12171: PPUSH
12172: CALL 11839 0 1
// end ;
12176: PPOPN 1
12178: END
// every 0 0$0.5 trigger new2 do var d ;
12179: LD_LOC 13
12183: IFFALSE 12216
12185: GO 12187
12187: DISABLE
12188: LD_INT 0
12190: PPUSH
// begin enable ;
12191: ENABLE
// new2 := 0 ;
12192: LD_ADDR_LOC 13
12196: PUSH
12197: LD_INT 0
12199: ST_TO_ADDR
// wait ( d ) ;
12200: LD_VAR 0 1
12204: PPUSH
12205: CALL_OW 67
// new_arrival ( 2 ) ;
12209: LD_INT 2
12211: PPUSH
12212: CALL 11839 0 1
// end ;
12216: PPOPN 1
12218: END
// function check_one_side ( un , side ) ; begin
12219: LD_INT 0
12221: PPUSH
// if FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , side ] , [ f_dist , un , 3 ] ] ) then
12222: LD_INT 21
12224: PUSH
12225: LD_INT 1
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 22
12234: PUSH
12235: LD_VAR 0 2
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 91
12246: PUSH
12247: LD_VAR 0 1
12251: PUSH
12252: LD_INT 3
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: LIST
12264: PPUSH
12265: CALL_OW 69
12269: IFFALSE 12283
// result := side else
12271: LD_ADDR_VAR 0 3
12275: PUSH
12276: LD_VAR 0 2
12280: ST_TO_ADDR
12281: GO 12291
// result := 0 ;
12283: LD_ADDR_VAR 0 3
12287: PUSH
12288: LD_INT 0
12290: ST_TO_ADDR
// end ;
12291: LD_VAR 0 3
12295: RET
// function check_two_sides ( un , side1 , side2 ) ; var un1 , s1 , s2 ; begin
12296: LD_INT 0
12298: PPUSH
12299: PPUSH
12300: PPUSH
12301: PPUSH
// s1 := 0 ;
12302: LD_ADDR_VAR 0 6
12306: PUSH
12307: LD_INT 0
12309: ST_TO_ADDR
// s2 := 0 ;
12310: LD_ADDR_VAR 0 7
12314: PUSH
12315: LD_INT 0
12317: ST_TO_ADDR
// for un1 in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_dist , un , 3 ] ] ) do
12318: LD_ADDR_VAR 0 5
12322: PUSH
12323: LD_INT 21
12325: PUSH
12326: LD_INT 1
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 91
12335: PUSH
12336: LD_VAR 0 1
12340: PUSH
12341: LD_INT 3
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PPUSH
12353: CALL_OW 69
12357: PUSH
12358: FOR_IN
12359: IFFALSE 12427
// begin if GetSide ( un1 ) = side1 then
12361: LD_VAR 0 5
12365: PPUSH
12366: CALL_OW 255
12370: PUSH
12371: LD_VAR 0 2
12375: EQUAL
12376: IFFALSE 12394
// s1 := s1 + 1 else
12378: LD_ADDR_VAR 0 6
12382: PUSH
12383: LD_VAR 0 6
12387: PUSH
12388: LD_INT 1
12390: PLUS
12391: ST_TO_ADDR
12392: GO 12425
// if GetSide ( un1 ) = side2 then
12394: LD_VAR 0 5
12398: PPUSH
12399: CALL_OW 255
12403: PUSH
12404: LD_VAR 0 3
12408: EQUAL
12409: IFFALSE 12425
// s2 := s2 + 1 ;
12411: LD_ADDR_VAR 0 7
12415: PUSH
12416: LD_VAR 0 7
12420: PUSH
12421: LD_INT 1
12423: PLUS
12424: ST_TO_ADDR
// end ;
12425: GO 12358
12427: POP
12428: POP
// if s1 = s2 then
12429: LD_VAR 0 6
12433: PUSH
12434: LD_VAR 0 7
12438: EQUAL
12439: IFFALSE 12451
// result := 0 else
12441: LD_ADDR_VAR 0 4
12445: PUSH
12446: LD_INT 0
12448: ST_TO_ADDR
12449: GO 12481
// if s1 > s2 then
12451: LD_VAR 0 6
12455: PUSH
12456: LD_VAR 0 7
12460: GREATER
12461: IFFALSE 12473
// result := 1 else
12463: LD_ADDR_VAR 0 4
12467: PUSH
12468: LD_INT 1
12470: ST_TO_ADDR
12471: GO 12481
// result := 2 ;
12473: LD_ADDR_VAR 0 4
12477: PUSH
12478: LD_INT 2
12480: ST_TO_ADDR
// end ;
12481: LD_VAR 0 4
12485: RET
// every 0 0$2 do var un ;
12486: GO 12488
12488: DISABLE
12489: LD_INT 0
12491: PPUSH
// begin if def_people_loyality then
12492: LD_EXP 12
12496: IFFALSE 12875
// if not fog_info then
12498: LD_EXP 35
12502: NOT
12503: IFFALSE 12691
// begin if your_side then
12505: LD_OWVAR 2
12509: IFFALSE 12689
// if side_positions [ your_side ] = 1 then
12511: LD_EXP 43
12515: PUSH
12516: LD_OWVAR 2
12520: ARRAY
12521: PUSH
12522: LD_INT 1
12524: EQUAL
12525: IFFALSE 12601
// begin un := UnitFilter ( free1 diff seenby1 , [ f_see , your_side ] ) ;
12527: LD_ADDR_VAR 0 1
12531: PUSH
12532: LD_LOC 10
12536: PUSH
12537: LD_LOC 16
12541: DIFF
12542: PPUSH
12543: LD_INT 101
12545: PUSH
12546: LD_OWVAR 2
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PPUSH
12555: CALL_OW 72
12559: ST_TO_ADDR
// if un then
12560: LD_VAR 0 1
12564: IFFALSE 12599
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12566: LD_VAR 0 1
12570: PUSH
12571: LD_INT 1
12573: ARRAY
12574: PPUSH
12575: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12579: LD_ADDR_LOC 16
12583: PUSH
12584: LD_LOC 16
12588: PUSH
12589: LD_VAR 0 1
12593: PUSH
12594: LD_INT 1
12596: ARRAY
12597: ADD
12598: ST_TO_ADDR
// end ; end else
12599: GO 12689
// if side_positions [ your_side ] = 2 then
12601: LD_EXP 43
12605: PUSH
12606: LD_OWVAR 2
12610: ARRAY
12611: PUSH
12612: LD_INT 2
12614: EQUAL
12615: IFFALSE 12689
// begin un := UnitFilter ( free2 diff seenby2 , [ f_see , your_side ] ) ;
12617: LD_ADDR_VAR 0 1
12621: PUSH
12622: LD_LOC 11
12626: PUSH
12627: LD_LOC 17
12631: DIFF
12632: PPUSH
12633: LD_INT 101
12635: PUSH
12636: LD_OWVAR 2
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: PPUSH
12645: CALL_OW 72
12649: ST_TO_ADDR
// if un then
12650: LD_VAR 0 1
12654: IFFALSE 12689
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12656: LD_VAR 0 1
12660: PUSH
12661: LD_INT 1
12663: ARRAY
12664: PPUSH
12665: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
12669: LD_ADDR_LOC 17
12673: PUSH
12674: LD_LOC 17
12678: PUSH
12679: LD_VAR 0 1
12683: PUSH
12684: LD_INT 1
12686: ARRAY
12687: ADD
12688: ST_TO_ADDR
// end ; end ; end else
12689: GO 12875
// begin if your_side then
12691: LD_OWVAR 2
12695: IFFALSE 12875
// if side_positions [ your_side ] = 1 then
12697: LD_EXP 43
12701: PUSH
12702: LD_OWVAR 2
12706: ARRAY
12707: PUSH
12708: LD_INT 1
12710: EQUAL
12711: IFFALSE 12787
// begin un := UnitFilter ( free diff seenby1 , [ f_see , your_side ] ) ;
12713: LD_ADDR_VAR 0 1
12717: PUSH
12718: LD_LOC 9
12722: PUSH
12723: LD_LOC 16
12727: DIFF
12728: PPUSH
12729: LD_INT 101
12731: PUSH
12732: LD_OWVAR 2
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PPUSH
12741: CALL_OW 72
12745: ST_TO_ADDR
// if un then
12746: LD_VAR 0 1
12750: IFFALSE 12785
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12752: LD_VAR 0 1
12756: PUSH
12757: LD_INT 1
12759: ARRAY
12760: PPUSH
12761: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12765: LD_ADDR_LOC 16
12769: PUSH
12770: LD_LOC 16
12774: PUSH
12775: LD_VAR 0 1
12779: PUSH
12780: LD_INT 1
12782: ARRAY
12783: ADD
12784: ST_TO_ADDR
// end ; end else
12785: GO 12875
// if side_positions [ your_side ] = 2 then
12787: LD_EXP 43
12791: PUSH
12792: LD_OWVAR 2
12796: ARRAY
12797: PUSH
12798: LD_INT 2
12800: EQUAL
12801: IFFALSE 12875
// begin un := UnitFilter ( free diff seenby2 , [ f_see , your_side ] ) ;
12803: LD_ADDR_VAR 0 1
12807: PUSH
12808: LD_LOC 9
12812: PUSH
12813: LD_LOC 17
12817: DIFF
12818: PPUSH
12819: LD_INT 101
12821: PUSH
12822: LD_OWVAR 2
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PPUSH
12831: CALL_OW 72
12835: ST_TO_ADDR
// if un then
12836: LD_VAR 0 1
12840: IFFALSE 12875
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12842: LD_VAR 0 1
12846: PUSH
12847: LD_INT 1
12849: ARRAY
12850: PPUSH
12851: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
12855: LD_ADDR_LOC 17
12859: PUSH
12860: LD_LOC 17
12864: PUSH
12865: LD_VAR 0 1
12869: PUSH
12870: LD_INT 1
12872: ARRAY
12873: ADD
12874: ST_TO_ADDR
// end ; end ; end ; enable ;
12875: ENABLE
// end ;
12876: PPOPN 1
12878: END
// every 0 0$0.5 do var un , s ;
12879: GO 12881
12881: DISABLE
12882: LD_INT 0
12884: PPUSH
12885: PPUSH
// begin if def_people_loyality then
12886: LD_EXP 12
12890: IFFALSE 13096
// begin for un in free1 do
12892: LD_ADDR_VAR 0 1
12896: PUSH
12897: LD_LOC 10
12901: PUSH
12902: FOR_IN
12903: IFFALSE 12991
// if not IsLive ( un ) then
12905: LD_VAR 0 1
12909: PPUSH
12910: CALL_OW 300
12914: NOT
12915: IFFALSE 12935
// free1 := free1 diff un else
12917: LD_ADDR_LOC 10
12921: PUSH
12922: LD_LOC 10
12926: PUSH
12927: LD_VAR 0 1
12931: DIFF
12932: ST_TO_ADDR
12933: GO 12989
// if check_one_side ( un , positions [ 1 ] ) then
12935: LD_VAR 0 1
12939: PPUSH
12940: LD_EXP 39
12944: PUSH
12945: LD_INT 1
12947: ARRAY
12948: PPUSH
12949: CALL 12219 0 2
12953: IFFALSE 12989
// begin SetSide ( un , positions [ 1 ] ) ;
12955: LD_VAR 0 1
12959: PPUSH
12960: LD_EXP 39
12964: PUSH
12965: LD_INT 1
12967: ARRAY
12968: PPUSH
12969: CALL_OW 235
// free1 := free1 diff un ;
12973: LD_ADDR_LOC 10
12977: PUSH
12978: LD_LOC 10
12982: PUSH
12983: LD_VAR 0 1
12987: DIFF
12988: ST_TO_ADDR
// end ;
12989: GO 12902
12991: POP
12992: POP
// for un in free2 do
12993: LD_ADDR_VAR 0 1
12997: PUSH
12998: LD_LOC 11
13002: PUSH
13003: FOR_IN
13004: IFFALSE 13092
// if not IsLive ( un ) then
13006: LD_VAR 0 1
13010: PPUSH
13011: CALL_OW 300
13015: NOT
13016: IFFALSE 13036
// free2 := free2 diff un else
13018: LD_ADDR_LOC 11
13022: PUSH
13023: LD_LOC 11
13027: PUSH
13028: LD_VAR 0 1
13032: DIFF
13033: ST_TO_ADDR
13034: GO 13090
// if check_one_side ( un , positions [ 2 ] ) then
13036: LD_VAR 0 1
13040: PPUSH
13041: LD_EXP 39
13045: PUSH
13046: LD_INT 2
13048: ARRAY
13049: PPUSH
13050: CALL 12219 0 2
13054: IFFALSE 13090
// begin SetSide ( un , positions [ 2 ] ) ;
13056: LD_VAR 0 1
13060: PPUSH
13061: LD_EXP 39
13065: PUSH
13066: LD_INT 2
13068: ARRAY
13069: PPUSH
13070: CALL_OW 235
// free2 := free2 diff un ;
13074: LD_ADDR_LOC 11
13078: PUSH
13079: LD_LOC 11
13083: PUSH
13084: LD_VAR 0 1
13088: DIFF
13089: ST_TO_ADDR
// end ;
13090: GO 13003
13092: POP
13093: POP
// end else
13094: GO 13218
// begin for un in free do
13096: LD_ADDR_VAR 0 1
13100: PUSH
13101: LD_LOC 9
13105: PUSH
13106: FOR_IN
13107: IFFALSE 13216
// if not IsLive ( un ) then
13109: LD_VAR 0 1
13113: PPUSH
13114: CALL_OW 300
13118: NOT
13119: IFFALSE 13139
// free := free diff un else
13121: LD_ADDR_LOC 9
13125: PUSH
13126: LD_LOC 9
13130: PUSH
13131: LD_VAR 0 1
13135: DIFF
13136: ST_TO_ADDR
13137: GO 13214
// begin s := check_two_sides ( un , positions [ 1 ] , positions [ 2 ] ) ;
13139: LD_ADDR_VAR 0 2
13143: PUSH
13144: LD_VAR 0 1
13148: PPUSH
13149: LD_EXP 39
13153: PUSH
13154: LD_INT 1
13156: ARRAY
13157: PPUSH
13158: LD_EXP 39
13162: PUSH
13163: LD_INT 2
13165: ARRAY
13166: PPUSH
13167: CALL 12296 0 3
13171: ST_TO_ADDR
// if s then
13172: LD_VAR 0 2
13176: IFFALSE 13214
// begin SetSide ( un , positions [ s ] ) ;
13178: LD_VAR 0 1
13182: PPUSH
13183: LD_EXP 39
13187: PUSH
13188: LD_VAR 0 2
13192: ARRAY
13193: PPUSH
13194: CALL_OW 235
// free := free diff un ;
13198: LD_ADDR_LOC 9
13202: PUSH
13203: LD_LOC 9
13207: PUSH
13208: LD_VAR 0 1
13212: DIFF
13213: ST_TO_ADDR
// end ; end ;
13214: GO 13106
13216: POP
13217: POP
// end ; enable ;
13218: ENABLE
// end ; end_of_file
13219: PPOPN 2
13221: END
// export Game_Type , def_game_rules ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
13222: LD_INT 0
13224: PPUSH
13225: PPUSH
// if ( not IAmSpec ) then
13226: CALL_OW 531
13230: NOT
13231: IFFALSE 13247
// Result := Limits_Info ^  ;
13233: LD_ADDR_VAR 0 1
13237: PUSH
13238: LD_LOC 25
13242: PUSH
13243: LD_STRING 
13245: ADD
13246: ST_TO_ADDR
// for i := 1 to 8 do
13247: LD_ADDR_VAR 0 2
13251: PUSH
13252: DOUBLE
13253: LD_INT 1
13255: DEC
13256: ST_TO_ADDR
13257: LD_INT 8
13259: PUSH
13260: FOR_TO
13261: IFFALSE 13306
// if Cheaters [ i ] then
13263: LD_LOC 26
13267: PUSH
13268: LD_VAR 0 2
13272: ARRAY
13273: IFFALSE 13304
// Result := Result ^ [ #Cheater , i , i ] ;
13275: LD_ADDR_VAR 0 1
13279: PUSH
13280: LD_VAR 0 1
13284: PUSH
13285: LD_STRING #Cheater
13287: PUSH
13288: LD_VAR 0 2
13292: PUSH
13293: LD_VAR 0 2
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: ADD
13303: ST_TO_ADDR
13304: GO 13260
13306: POP
13307: POP
// end ;
13308: LD_VAR 0 1
13312: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
13313: LD_INT 0
13315: PPUSH
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
// case Game_Type of 10 :
13320: LD_EXP 64
13324: PUSH
13325: LD_INT 10
13327: DOUBLE
13328: EQUAL
13329: IFTRUE 13333
13331: GO 13344
13333: POP
// def_game_rules := 1 ; 11 :
13334: LD_ADDR_EXP 65
13338: PUSH
13339: LD_INT 1
13341: ST_TO_ADDR
13342: GO 13364
13344: LD_INT 11
13346: DOUBLE
13347: EQUAL
13348: IFTRUE 13352
13350: GO 13363
13352: POP
// def_game_rules := 3 ; end ;
13353: LD_ADDR_EXP 65
13357: PUSH
13358: LD_INT 3
13360: ST_TO_ADDR
13361: GO 13364
13363: POP
// case def_game_rules of 0 :
13364: LD_EXP 65
13368: PUSH
13369: LD_INT 0
13371: DOUBLE
13372: EQUAL
13373: IFTRUE 13377
13375: GO 13382
13377: POP
// exit ; 1 :
13378: GO 13990
13380: GO 13890
13382: LD_INT 1
13384: DOUBLE
13385: EQUAL
13386: IFTRUE 13390
13388: GO 13622
13390: POP
// begin def_main_base = 1 ;
13391: LD_ADDR_EXP 1
13395: PUSH
13396: LD_INT 1
13398: ST_TO_ADDR
// def_secondary_base = 0 ;
13399: LD_ADDR_EXP 2
13403: PUSH
13404: LD_INT 0
13406: ST_TO_ADDR
// def_defence_level = 1 ;
13407: LD_ADDR_EXP 3
13411: PUSH
13412: LD_INT 1
13414: ST_TO_ADDR
// def_amount_of_people = 2 ;
13415: LD_ADDR_EXP 4
13419: PUSH
13420: LD_INT 2
13422: ST_TO_ADDR
// def_initial_level = 1 ;
13423: LD_ADDR_EXP 5
13427: PUSH
13428: LD_INT 1
13430: ST_TO_ADDR
// def_main_deposits = 2 ;
13431: LD_ADDR_EXP 6
13435: PUSH
13436: LD_INT 2
13438: ST_TO_ADDR
// def_secondary_deposits = 1 ;
13439: LD_ADDR_EXP 7
13443: PUSH
13444: LD_INT 1
13446: ST_TO_ADDR
// def_siberite_detection = 1 ;
13447: LD_ADDR_EXP 8
13451: PUSH
13452: LD_INT 1
13454: ST_TO_ADDR
// def_starting_resources = 2 ;
13455: LD_ADDR_EXP 9
13459: PUSH
13460: LD_INT 2
13462: ST_TO_ADDR
// def_shipments_density = 1 ;
13463: LD_ADDR_EXP 10
13467: PUSH
13468: LD_INT 1
13470: ST_TO_ADDR
// def_people_arrivals = 0 ;
13471: LD_ADDR_EXP 11
13475: PUSH
13476: LD_INT 0
13478: ST_TO_ADDR
// def_people_loyality = 0 ;
13479: LD_ADDR_EXP 12
13483: PUSH
13484: LD_INT 0
13486: ST_TO_ADDR
// def_people_info = 0 ;
13487: LD_ADDR_EXP 13
13491: PUSH
13492: LD_INT 0
13494: ST_TO_ADDR
// def_morale_flags = 1 ;
13495: LD_ADDR_EXP 14
13499: PUSH
13500: LD_INT 1
13502: ST_TO_ADDR
// def_siberite_bomb = 0 ;
13503: LD_ADDR_EXP 15
13507: PUSH
13508: LD_INT 0
13510: ST_TO_ADDR
// def_builduptime = 2 ;
13511: LD_ADDR_EXP 17
13515: PUSH
13516: LD_INT 2
13518: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
13519: LD_ADDR_VAR 0 2
13523: PUSH
13524: EMPTY
13525: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13526: LD_ADDR_VAR 0 3
13530: PUSH
13531: EMPTY
13532: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13533: LD_ADDR_LOC 20
13537: PUSH
13538: EMPTY
13539: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13540: LD_ADDR_LOC 21
13544: PUSH
13545: EMPTY
13546: ST_TO_ADDR
// Banned_Controls := [ ] ;
13547: LD_ADDR_LOC 22
13551: PUSH
13552: EMPTY
13553: ST_TO_ADDR
// Banned_Engines := [ ] ;
13554: LD_ADDR_LOC 23
13558: PUSH
13559: EMPTY
13560: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13561: LD_ADDR_LOC 18
13565: PUSH
13566: LD_INT 37
13568: PUSH
13569: EMPTY
13570: LIST
13571: PUSH
13572: LD_INT 4
13574: PUSH
13575: LD_INT 5
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 31
13584: PUSH
13585: LD_INT 32
13587: PUSH
13588: LD_INT 33
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: LIST
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: LIST
13600: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
13601: LD_ADDR_LOC 19
13605: PUSH
13606: LD_INT 2
13608: PUSH
13609: LD_INT 2
13611: PUSH
13612: LD_INT 4
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: ST_TO_ADDR
// end ; 3 :
13620: GO 13890
13622: LD_INT 3
13624: DOUBLE
13625: EQUAL
13626: IFTRUE 13630
13628: GO 13889
13630: POP
// begin def_main_base = 1 ;
13631: LD_ADDR_EXP 1
13635: PUSH
13636: LD_INT 1
13638: ST_TO_ADDR
// def_secondary_base = 0 ;
13639: LD_ADDR_EXP 2
13643: PUSH
13644: LD_INT 0
13646: ST_TO_ADDR
// def_defence_level = 0 ;
13647: LD_ADDR_EXP 3
13651: PUSH
13652: LD_INT 0
13654: ST_TO_ADDR
// def_amount_of_people = 2 ;
13655: LD_ADDR_EXP 4
13659: PUSH
13660: LD_INT 2
13662: ST_TO_ADDR
// def_initial_level = 3 ;
13663: LD_ADDR_EXP 5
13667: PUSH
13668: LD_INT 3
13670: ST_TO_ADDR
// def_main_deposits = 2 ;
13671: LD_ADDR_EXP 6
13675: PUSH
13676: LD_INT 2
13678: ST_TO_ADDR
// def_secondary_deposits = 1 ;
13679: LD_ADDR_EXP 7
13683: PUSH
13684: LD_INT 1
13686: ST_TO_ADDR
// def_siberite_detection = 1 ;
13687: LD_ADDR_EXP 8
13691: PUSH
13692: LD_INT 1
13694: ST_TO_ADDR
// def_starting_resources = 3 ;
13695: LD_ADDR_EXP 9
13699: PUSH
13700: LD_INT 3
13702: ST_TO_ADDR
// def_shipments_density = 1 ;
13703: LD_ADDR_EXP 10
13707: PUSH
13708: LD_INT 1
13710: ST_TO_ADDR
// def_people_arrivals = 0 ;
13711: LD_ADDR_EXP 11
13715: PUSH
13716: LD_INT 0
13718: ST_TO_ADDR
// def_people_loyality = 0 ;
13719: LD_ADDR_EXP 12
13723: PUSH
13724: LD_INT 0
13726: ST_TO_ADDR
// def_people_info = 0 ;
13727: LD_ADDR_EXP 13
13731: PUSH
13732: LD_INT 0
13734: ST_TO_ADDR
// def_morale_flags = 0 ;
13735: LD_ADDR_EXP 14
13739: PUSH
13740: LD_INT 0
13742: ST_TO_ADDR
// def_siberite_bomb = 0 ;
13743: LD_ADDR_EXP 15
13747: PUSH
13748: LD_INT 0
13750: ST_TO_ADDR
// def_builduptime = 1 ;
13751: LD_ADDR_EXP 17
13755: PUSH
13756: LD_INT 1
13758: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
13759: LD_ADDR_VAR 0 2
13763: PUSH
13764: LD_INT 23
13766: PUSH
13767: EMPTY
13768: LIST
13769: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
13770: LD_ADDR_VAR 0 3
13774: PUSH
13775: LD_INT 2
13777: PUSH
13778: LD_INT 37
13780: PUSH
13781: LD_INT 32
13783: PUSH
13784: LD_INT 33
13786: PUSH
13787: LD_INT 36
13789: PUSH
13790: LD_INT 16
13792: PUSH
13793: LD_INT 23
13795: PUSH
13796: LD_INT 21
13798: PUSH
13799: LD_INT 18
13801: PUSH
13802: LD_INT 22
13804: PUSH
13805: LD_INT 20
13807: PUSH
13808: LD_INT 19
13810: PUSH
13811: LD_INT 25
13813: PUSH
13814: LD_INT 17
13816: PUSH
13817: LD_INT 24
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13837: LD_ADDR_LOC 20
13841: PUSH
13842: EMPTY
13843: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13844: LD_ADDR_LOC 21
13848: PUSH
13849: EMPTY
13850: ST_TO_ADDR
// Banned_Controls := [ ] ;
13851: LD_ADDR_LOC 22
13855: PUSH
13856: EMPTY
13857: ST_TO_ADDR
// Banned_Engines := [ ] ;
13858: LD_ADDR_LOC 23
13862: PUSH
13863: EMPTY
13864: ST_TO_ADDR
// Restricted_Builds := [ ] ;
13865: LD_ADDR_LOC 18
13869: PUSH
13870: EMPTY
13871: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
13872: LD_ADDR_LOC 19
13876: PUSH
13877: EMPTY
13878: ST_TO_ADDR
// No_Mechs := true ;
13879: LD_ADDR_EXP 66
13883: PUSH
13884: LD_INT 1
13886: ST_TO_ADDR
// end ; end ;
13887: GO 13890
13889: POP
// for i := 1 to 8 do
13890: LD_ADDR_VAR 0 4
13894: PUSH
13895: DOUBLE
13896: LD_INT 1
13898: DEC
13899: ST_TO_ADDR
13900: LD_INT 8
13902: PUSH
13903: FOR_TO
13904: IFFALSE 13988
// if Side_Positions [ i ] then
13906: LD_EXP 43
13910: PUSH
13911: LD_VAR 0 4
13915: ARRAY
13916: IFFALSE 13986
// begin for j in Unavailable_Techs do
13918: LD_ADDR_VAR 0 5
13922: PUSH
13923: LD_VAR 0 2
13927: PUSH
13928: FOR_IN
13929: IFFALSE 13950
// SetTech ( j , i , 0 ) ;
13931: LD_VAR 0 5
13935: PPUSH
13936: LD_VAR 0 4
13940: PPUSH
13941: LD_INT 0
13943: PPUSH
13944: CALL_OW 322
13948: GO 13928
13950: POP
13951: POP
// for j in Unavailable_Builds do
13952: LD_ADDR_VAR 0 5
13956: PUSH
13957: LD_VAR 0 3
13961: PUSH
13962: FOR_IN
13963: IFFALSE 13984
// SetRestrict ( j , i , 0 ) ;
13965: LD_VAR 0 5
13969: PPUSH
13970: LD_VAR 0 4
13974: PPUSH
13975: LD_INT 0
13977: PPUSH
13978: CALL_OW 324
13982: GO 13962
13984: POP
13985: POP
// end ;
13986: GO 13903
13988: POP
13989: POP
// end ;
13990: LD_VAR 0 1
13994: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
13995: LD_INT 0
13997: PPUSH
13998: PPUSH
13999: PPUSH
14000: PPUSH
14001: PPUSH
14002: PPUSH
14003: PPUSH
// for i := 1 to Restricted_Builds do
14004: LD_ADDR_VAR 0 2
14008: PUSH
14009: DOUBLE
14010: LD_INT 1
14012: DEC
14013: ST_TO_ADDR
14014: LD_LOC 18
14018: PUSH
14019: FOR_TO
14020: IFFALSE 14330
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
14022: LD_LOC 18
14026: PUSH
14027: LD_VAR 0 2
14031: ARRAY
14032: PUSH
14033: LD_INT 1
14035: ARRAY
14036: PUSH
14037: LD_INT 31
14039: DOUBLE
14040: EQUAL
14041: IFTRUE 14057
14043: LD_INT 32
14045: DOUBLE
14046: EQUAL
14047: IFTRUE 14057
14049: LD_INT 33
14051: DOUBLE
14052: EQUAL
14053: IFTRUE 14057
14055: GO 14068
14057: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
14058: LD_ADDR_VAR 0 6
14062: PUSH
14063: LD_STRING #Turrets
14065: ST_TO_ADDR
14066: GO 14113
14068: LD_INT 4
14070: DOUBLE
14071: EQUAL
14072: IFTRUE 14082
14074: LD_INT 5
14076: DOUBLE
14077: EQUAL
14078: IFTRUE 14082
14080: GO 14093
14082: POP
// btype := #Armouries ; b_Behemoth :
14083: LD_ADDR_VAR 0 6
14087: PUSH
14088: LD_STRING #Armouries
14090: ST_TO_ADDR
14091: GO 14113
14093: LD_INT 37
14095: DOUBLE
14096: EQUAL
14097: IFTRUE 14101
14099: GO 14112
14101: POP
// btype := #Behemoths ; end ;
14102: LD_ADDR_VAR 0 6
14106: PUSH
14107: LD_STRING #Behemoths
14109: ST_TO_ADDR
14110: GO 14113
14112: POP
// list := [ ] ;
14113: LD_ADDR_VAR 0 7
14117: PUSH
14118: EMPTY
14119: ST_TO_ADDR
// for j := 1 to 8 do
14120: LD_ADDR_VAR 0 3
14124: PUSH
14125: DOUBLE
14126: LD_INT 1
14128: DEC
14129: ST_TO_ADDR
14130: LD_INT 8
14132: PUSH
14133: FOR_TO
14134: IFFALSE 14227
// if Side_Positions [ j ] then
14136: LD_EXP 43
14140: PUSH
14141: LD_VAR 0 3
14145: ARRAY
14146: IFFALSE 14225
// begin amount := 0 ;
14148: LD_ADDR_VAR 0 5
14152: PUSH
14153: LD_INT 0
14155: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
14156: LD_ADDR_VAR 0 4
14160: PUSH
14161: LD_LOC 18
14165: PUSH
14166: LD_VAR 0 2
14170: ARRAY
14171: PUSH
14172: FOR_IN
14173: IFFALSE 14221
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
14175: LD_ADDR_VAR 0 5
14179: PUSH
14180: LD_VAR 0 5
14184: PUSH
14185: LD_INT 22
14187: PUSH
14188: LD_VAR 0 3
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 30
14199: PUSH
14200: LD_VAR 0 4
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PPUSH
14213: CALL_OW 69
14217: PLUS
14218: ST_TO_ADDR
14219: GO 14172
14221: POP
14222: POP
// break ;
14223: GO 14227
// end ;
14225: GO 14133
14227: POP
14228: POP
// list := [ ] ;
14229: LD_ADDR_VAR 0 7
14233: PUSH
14234: EMPTY
14235: ST_TO_ADDR
// for j := 1 to 8 do
14236: LD_ADDR_VAR 0 3
14240: PUSH
14241: DOUBLE
14242: LD_INT 1
14244: DEC
14245: ST_TO_ADDR
14246: LD_INT 8
14248: PUSH
14249: FOR_TO
14250: IFFALSE 14270
// list := list ^ amount ;
14252: LD_ADDR_VAR 0 7
14256: PUSH
14257: LD_VAR 0 7
14261: PUSH
14262: LD_VAR 0 5
14266: ADD
14267: ST_TO_ADDR
14268: GO 14249
14270: POP
14271: POP
// Already_Built := Already_Built ^ [ list ] ;
14272: LD_ADDR_LOC 24
14276: PUSH
14277: LD_LOC 24
14281: PUSH
14282: LD_VAR 0 7
14286: PUSH
14287: EMPTY
14288: LIST
14289: ADD
14290: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
14291: LD_ADDR_LOC 25
14295: PUSH
14296: LD_LOC 25
14300: PUSH
14301: LD_VAR 0 6
14305: PUSH
14306: LD_VAR 0 5
14310: PUSH
14311: LD_LOC 19
14315: PUSH
14316: LD_VAR 0 2
14320: ARRAY
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: LIST
14326: ADD
14327: ST_TO_ADDR
// end ;
14328: GO 14019
14330: POP
14331: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14332: LD_ADDR_LOC 26
14336: PUSH
14337: LD_INT 0
14339: PUSH
14340: LD_INT 0
14342: PUSH
14343: LD_INT 0
14345: PUSH
14346: LD_INT 0
14348: PUSH
14349: LD_INT 0
14351: PUSH
14352: LD_INT 0
14354: PUSH
14355: LD_INT 0
14357: PUSH
14358: LD_INT 0
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: ST_TO_ADDR
// if Limits_Info then
14371: LD_LOC 25
14375: IFFALSE 14391
// Limits_Info := #Limits ^ Limits_Info ;
14377: LD_ADDR_LOC 25
14381: PUSH
14382: LD_STRING #Limits
14384: PUSH
14385: LD_LOC 25
14389: ADD
14390: ST_TO_ADDR
// end ;
14391: LD_VAR 0 1
14395: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
14396: LD_INT 0
14398: PPUSH
14399: PPUSH
14400: PPUSH
14401: PPUSH
// for i := 1 to Restricted_Builds do
14402: LD_ADDR_VAR 0 7
14406: PUSH
14407: DOUBLE
14408: LD_INT 1
14410: DEC
14411: ST_TO_ADDR
14412: LD_LOC 18
14416: PUSH
14417: FOR_TO
14418: IFFALSE 14841
// if BType in Restricted_Builds [ i ] then
14420: LD_VAR 0 2
14424: PUSH
14425: LD_LOC 18
14429: PUSH
14430: LD_VAR 0 7
14434: ARRAY
14435: IN
14436: IFFALSE 14839
// begin if old_side then
14438: LD_VAR 0 4
14442: IFFALSE 14568
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
14444: LD_LOC 24
14448: PUSH
14449: LD_VAR 0 7
14453: ARRAY
14454: PUSH
14455: LD_VAR 0 3
14459: ARRAY
14460: PUSH
14461: LD_VAR 0 5
14465: PLUS
14466: PUSH
14467: LD_LOC 19
14471: PUSH
14472: LD_VAR 0 7
14476: ARRAY
14477: GREATER
14478: IFFALSE 14504
// begin SetSide ( un , old_side ) ;
14480: LD_VAR 0 1
14484: PPUSH
14485: LD_VAR 0 4
14489: PPUSH
14490: CALL_OW 235
// count := 0 ;
14494: LD_ADDR_VAR 0 5
14498: PUSH
14499: LD_INT 0
14501: ST_TO_ADDR
// end else
14502: GO 14568
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
14504: LD_ADDR_LOC 24
14508: PUSH
14509: LD_LOC 24
14513: PPUSH
14514: LD_VAR 0 7
14518: PPUSH
14519: LD_LOC 24
14523: PUSH
14524: LD_VAR 0 7
14528: ARRAY
14529: PPUSH
14530: LD_VAR 0 4
14534: PPUSH
14535: LD_LOC 24
14539: PUSH
14540: LD_VAR 0 7
14544: ARRAY
14545: PUSH
14546: LD_VAR 0 4
14550: ARRAY
14551: PUSH
14552: LD_VAR 0 5
14556: MINUS
14557: PPUSH
14558: CALL_OW 1
14562: PPUSH
14563: CALL_OW 1
14567: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
14568: LD_ADDR_LOC 24
14572: PUSH
14573: LD_LOC 24
14577: PPUSH
14578: LD_VAR 0 7
14582: PPUSH
14583: LD_LOC 24
14587: PUSH
14588: LD_VAR 0 7
14592: ARRAY
14593: PPUSH
14594: LD_VAR 0 3
14598: PPUSH
14599: LD_LOC 24
14603: PUSH
14604: LD_VAR 0 7
14608: ARRAY
14609: PUSH
14610: LD_VAR 0 3
14614: ARRAY
14615: PUSH
14616: LD_VAR 0 5
14620: PLUS
14621: PPUSH
14622: CALL_OW 1
14626: PPUSH
14627: CALL_OW 1
14631: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
14632: LD_VAR 0 5
14636: PUSH
14637: LD_INT 0
14639: NONEQUAL
14640: PUSH
14641: LD_VAR 0 3
14645: PUSH
14646: LD_OWVAR 2
14650: EQUAL
14651: AND
14652: IFFALSE 14695
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
14654: LD_ADDR_LOC 25
14658: PUSH
14659: LD_LOC 25
14663: PPUSH
14664: LD_INT 3
14666: PUSH
14667: LD_VAR 0 7
14671: MUL
14672: PPUSH
14673: LD_LOC 24
14677: PUSH
14678: LD_VAR 0 7
14682: ARRAY
14683: PUSH
14684: LD_VAR 0 3
14688: ARRAY
14689: PPUSH
14690: CALL_OW 1
14694: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
14695: LD_LOC 24
14699: PUSH
14700: LD_VAR 0 7
14704: ARRAY
14705: PUSH
14706: LD_VAR 0 3
14710: ARRAY
14711: PUSH
14712: LD_LOC 19
14716: PUSH
14717: LD_VAR 0 7
14721: ARRAY
14722: GREATER
14723: IFFALSE 14750
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
14725: LD_ADDR_LOC 26
14729: PUSH
14730: LD_LOC 26
14734: PPUSH
14735: LD_VAR 0 3
14739: PPUSH
14740: LD_INT 1
14742: PPUSH
14743: CALL_OW 1
14747: ST_TO_ADDR
// end else
14748: GO 14837
// begin for j := 1 to Restricted_Builds do
14750: LD_ADDR_VAR 0 8
14754: PUSH
14755: DOUBLE
14756: LD_INT 1
14758: DEC
14759: ST_TO_ADDR
14760: LD_LOC 18
14764: PUSH
14765: FOR_TO
14766: IFFALSE 14810
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
14768: LD_LOC 24
14772: PUSH
14773: LD_VAR 0 8
14777: ARRAY
14778: PUSH
14779: LD_VAR 0 3
14783: ARRAY
14784: PUSH
14785: LD_LOC 19
14789: PUSH
14790: LD_VAR 0 8
14794: ARRAY
14795: GREATER
14796: IFFALSE 14808
// begin Is_Cheater := true ;
14798: LD_ADDR_VAR 0 9
14802: PUSH
14803: LD_INT 1
14805: ST_TO_ADDR
// break ;
14806: GO 14810
// end ;
14808: GO 14765
14810: POP
14811: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
14812: LD_ADDR_LOC 26
14816: PUSH
14817: LD_LOC 26
14821: PPUSH
14822: LD_VAR 0 3
14826: PPUSH
14827: LD_VAR 0 9
14831: PPUSH
14832: CALL_OW 1
14836: ST_TO_ADDR
// end ; break ;
14837: GO 14841
// end ;
14839: GO 14417
14841: POP
14842: POP
// end ;
14843: LD_VAR 0 6
14847: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
14848: LD_VAR 0 5
14852: PUSH
14853: LD_LOC 20
14857: IN
14858: PUSH
14859: LD_VAR 0 2
14863: PUSH
14864: LD_LOC 21
14868: IN
14869: OR
14870: PUSH
14871: LD_VAR 0 4
14875: PUSH
14876: LD_LOC 22
14880: IN
14881: OR
14882: PUSH
14883: LD_VAR 0 3
14887: PUSH
14888: LD_LOC 23
14892: IN
14893: OR
14894: IFFALSE 14905
// ComCancel ( factory ) ;
14896: LD_VAR 0 1
14900: PPUSH
14901: CALL_OW 127
// end ;
14905: PPOPN 5
14907: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
14908: LD_VAR 0 2
14912: PUSH
14913: LD_LOC 20
14917: IN
14918: IFFALSE 14929
// ComCancel ( building ) ;
14920: LD_VAR 0 1
14924: PPUSH
14925: CALL_OW 127
// end ; end_of_file
14929: PPOPN 2
14931: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
14932: LD_INT 0
14934: PPUSH
14935: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
14936: LD_ADDR_VAR 0 2
14940: PUSH
14941: LD_STRING #Multi1x1-Time
14943: PUSH
14944: LD_OWVAR 1
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: ST_TO_ADDR
// if WaitServerStrings then
14953: LD_EXP 68
14957: IFFALSE 14975
// AllStrings = AllStrings ^ WaitServerStrings ;
14959: LD_ADDR_VAR 0 2
14963: PUSH
14964: LD_VAR 0 2
14968: PUSH
14969: LD_EXP 68
14973: ADD
14974: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
14975: LD_INT 0
14977: PUSH
14978: LD_EXP 38
14982: PUSH
14983: LD_OWVAR 1
14987: MINUS
14988: LESSEQUAL
14989: IFFALSE 15020
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
14991: LD_ADDR_VAR 0 2
14995: PUSH
14996: LD_VAR 0 2
15000: PUSH
15001: LD_STRING #allowedsibbomb
15003: PUSH
15004: LD_EXP 38
15008: PUSH
15009: LD_OWVAR 1
15013: MINUS
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: ADD
15019: ST_TO_ADDR
// if ( ExtraStrings ) then
15020: LD_EXP 67
15024: IFFALSE 15046
// AllStrings := AllStrings ^  ^ ExtraStrings ;
15026: LD_ADDR_VAR 0 2
15030: PUSH
15031: LD_VAR 0 2
15035: PUSH
15036: LD_STRING 
15038: ADD
15039: PUSH
15040: LD_EXP 67
15044: ADD
15045: ST_TO_ADDR
// if ( LimitsStrings ) then
15046: CALL 13222 0 0
15050: IFFALSE 15072
// AllStrings := AllStrings ^  ^ LimitsStrings ;
15052: LD_ADDR_VAR 0 2
15056: PUSH
15057: LD_VAR 0 2
15061: PUSH
15062: LD_STRING 
15064: ADD
15065: PUSH
15066: CALL 13222 0 0
15070: ADD
15071: ST_TO_ADDR
// Display_Strings := AllStrings ;
15072: LD_ADDR_OWVAR 47
15076: PUSH
15077: LD_VAR 0 2
15081: ST_TO_ADDR
// end ;
15082: LD_VAR 0 1
15086: RET
// every 0 0$1 do
15087: GO 15089
15089: DISABLE
// begin ShowTimer ;
15090: CALL 14932 0 0
// enable ;
15094: ENABLE
// end ; end_of_file
15095: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
15096: LD_INT 0
15098: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
15099: LD_VAR 0 1
15103: PPUSH
15104: CALL_OW 255
15108: PUSH
15109: LD_VAR 0 4
15113: EQUAL
15114: IFFALSE 15133
// begin SetAchievement ( ACH_RAD ) ;
15116: LD_STRING ACH_RAD
15118: PPUSH
15119: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
15123: LD_STRING ACH_NL
15125: PPUSH
15126: LD_INT 1
15128: PPUSH
15129: CALL_OW 564
// end end ;
15133: LD_VAR 0 5
15137: RET
// export function SA_Win ( side ) ; begin
15138: LD_INT 0
15140: PPUSH
// case side of 1 :
15141: LD_VAR 0 1
15145: PUSH
15146: LD_INT 1
15148: DOUBLE
15149: EQUAL
15150: IFTRUE 15154
15152: GO 15167
15154: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
15155: LD_STRING ACH_AH
15157: PPUSH
15158: LD_INT 1
15160: PPUSH
15161: CALL_OW 564
15165: GO 15330
15167: LD_INT 2
15169: DOUBLE
15170: EQUAL
15171: IFTRUE 15175
15173: GO 15188
15175: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
15176: LD_STRING ACH_E
15178: PPUSH
15179: LD_INT 1
15181: PPUSH
15182: CALL_OW 564
15186: GO 15330
15188: LD_INT 3
15190: DOUBLE
15191: EQUAL
15192: IFTRUE 15196
15194: GO 15209
15196: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
15197: LD_STRING ACH_OOL
15199: PPUSH
15200: LD_INT 1
15202: PPUSH
15203: CALL_OW 564
15207: GO 15330
15209: LD_INT 1
15211: PUSH
15212: LD_INT 2
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: DOUBLE
15219: EQUAL
15220: IFTRUE 15224
15222: GO 15249
15224: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
15225: LD_STRING ACH_AH
15227: PPUSH
15228: LD_REAL  5.00000000000000E-0001
15231: PPUSH
15232: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
15236: LD_STRING ACH_E
15238: PPUSH
15239: LD_REAL  5.00000000000000E-0001
15242: PPUSH
15243: CALL_OW 564
// end ; [ 2 , 3 ] :
15247: GO 15330
15249: LD_INT 2
15251: PUSH
15252: LD_INT 3
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: DOUBLE
15259: EQUAL
15260: IFTRUE 15264
15262: GO 15289
15264: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
15265: LD_STRING ACH_OOL
15267: PPUSH
15268: LD_REAL  5.00000000000000E-0001
15271: PPUSH
15272: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
15276: LD_STRING ACH_E
15278: PPUSH
15279: LD_REAL  5.00000000000000E-0001
15282: PPUSH
15283: CALL_OW 564
// end ; [ 3 , 1 ] :
15287: GO 15330
15289: LD_INT 3
15291: PUSH
15292: LD_INT 1
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: DOUBLE
15299: EQUAL
15300: IFTRUE 15304
15302: GO 15329
15304: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
15305: LD_STRING ACH_AH
15307: PPUSH
15308: LD_REAL  5.00000000000000E-0001
15311: PPUSH
15312: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
15316: LD_STRING ACH_OOL
15318: PPUSH
15319: LD_REAL  5.00000000000000E-0001
15322: PPUSH
15323: CALL_OW 564
// end ; end ;
15327: GO 15330
15329: POP
// end ; end_of_file
15330: LD_VAR 0 2
15334: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
15335: LD_INT 0
15337: PPUSH
15338: PPUSH
// enable ( 98 ) ;
15339: LD_INT 98
15341: ENABLE_MARKED
// GameEnded = false ;
15342: LD_ADDR_LOC 28
15346: PUSH
15347: LD_INT 0
15349: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15350: LD_ADDR_LOC 27
15354: PUSH
15355: LD_INT 0
15357: PUSH
15358: LD_INT 0
15360: PUSH
15361: LD_INT 0
15363: PUSH
15364: LD_INT 0
15366: PUSH
15367: LD_INT 0
15369: PUSH
15370: LD_INT 0
15372: PUSH
15373: LD_INT 0
15375: PUSH
15376: LD_INT 0
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: ST_TO_ADDR
// unfoged = false ;
15389: LD_ADDR_LOC 29
15393: PUSH
15394: LD_INT 0
15396: ST_TO_ADDR
// defeated_specs := [ ] ;
15397: LD_ADDR_LOC 30
15401: PUSH
15402: EMPTY
15403: ST_TO_ADDR
// for i = 1 to side_positions do
15404: LD_ADDR_VAR 0 2
15408: PUSH
15409: DOUBLE
15410: LD_INT 1
15412: DEC
15413: ST_TO_ADDR
15414: LD_EXP 43
15418: PUSH
15419: FOR_TO
15420: IFFALSE 15460
// if not side_positions [ i ] then
15422: LD_EXP 43
15426: PUSH
15427: LD_VAR 0 2
15431: ARRAY
15432: NOT
15433: IFFALSE 15458
// defeated = replace ( defeated , i , true ) ;
15435: LD_ADDR_LOC 27
15439: PUSH
15440: LD_LOC 27
15444: PPUSH
15445: LD_VAR 0 2
15449: PPUSH
15450: LD_INT 1
15452: PPUSH
15453: CALL_OW 1
15457: ST_TO_ADDR
15458: GO 15419
15460: POP
15461: POP
// end ;
15462: LD_VAR 0 1
15466: RET
// function CanWinLoose ; begin
15467: LD_INT 0
15469: PPUSH
// Result := true ;
15470: LD_ADDR_VAR 0 1
15474: PUSH
15475: LD_INT 1
15477: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
15478: CALL_OW 518
15482: PUSH
15483: CALL_OW 519
15487: PUSH
15488: LD_INT 0
15490: GREATER
15491: AND
15492: IFFALSE 15502
// Result := false ;
15494: LD_ADDR_VAR 0 1
15498: PUSH
15499: LD_INT 0
15501: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
15502: CALL_OW 531
15506: PUSH
15507: CALL_OW 519
15511: PUSH
15512: LD_INT 1
15514: GREATER
15515: AND
15516: IFFALSE 15526
// Result := false ;
15518: LD_ADDR_VAR 0 1
15522: PUSH
15523: LD_INT 0
15525: ST_TO_ADDR
// end ;
15526: LD_VAR 0 1
15530: RET
// export function HasPower ( i ) ; var k , h ; begin
15531: LD_INT 0
15533: PPUSH
15534: PPUSH
15535: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
15536: LD_VAR 0 1
15540: PPUSH
15541: CALL_OW 108
15545: NOT
15546: PUSH
15547: LD_EXP 42
15551: PUSH
15552: LD_VAR 0 1
15556: ARRAY
15557: NOT
15558: AND
15559: PUSH
15560: LD_OWVAR 4
15564: AND
15565: IFFALSE 15577
// begin result = false ;
15567: LD_ADDR_VAR 0 2
15571: PUSH
15572: LD_INT 0
15574: ST_TO_ADDR
// end else
15575: GO 15872
// case def_win_rules of 0 :
15577: LD_EXP 18
15581: PUSH
15582: LD_INT 0
15584: DOUBLE
15585: EQUAL
15586: IFTRUE 15590
15588: GO 15753
15590: POP
// if def_people_respawning then
15591: LD_EXP 19
15595: IFFALSE 15686
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
15597: LD_ADDR_VAR 0 2
15601: PUSH
15602: LD_INT 22
15604: PUSH
15605: LD_VAR 0 1
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 2
15616: PUSH
15617: LD_INT 21
15619: PUSH
15620: LD_INT 1
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PUSH
15627: LD_INT 33
15629: PUSH
15630: LD_INT 3
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PUSH
15637: LD_INT 33
15639: PUSH
15640: LD_INT 5
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 30
15649: PUSH
15650: LD_INT 0
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 30
15659: PUSH
15660: LD_INT 1
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PPUSH
15679: CALL_OW 69
15683: ST_TO_ADDR
15684: GO 15751
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
15686: LD_ADDR_VAR 0 2
15690: PUSH
15691: LD_INT 22
15693: PUSH
15694: LD_VAR 0 1
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PUSH
15703: LD_INT 2
15705: PUSH
15706: LD_INT 21
15708: PUSH
15709: LD_INT 1
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 33
15718: PUSH
15719: LD_INT 3
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: LD_INT 33
15728: PUSH
15729: LD_INT 5
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PPUSH
15746: CALL_OW 69
15750: ST_TO_ADDR
15751: GO 15872
15753: LD_INT 1
15755: DOUBLE
15756: EQUAL
15757: IFTRUE 15761
15759: GO 15800
15761: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
15762: LD_ADDR_VAR 0 2
15766: PUSH
15767: LD_INT 22
15769: PUSH
15770: LD_VAR 0 1
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 21
15781: PUSH
15782: LD_INT 1
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PPUSH
15793: CALL_OW 69
15797: ST_TO_ADDR
15798: GO 15872
15800: LD_INT 2
15802: DOUBLE
15803: EQUAL
15804: IFTRUE 15808
15806: GO 15871
15808: POP
// begin h = false ;
15809: LD_ADDR_VAR 0 4
15813: PUSH
15814: LD_INT 0
15816: ST_TO_ADDR
// for k in heroes [ i ] do
15817: LD_ADDR_VAR 0 3
15821: PUSH
15822: LD_EXP 56
15826: PUSH
15827: LD_VAR 0 1
15831: ARRAY
15832: PUSH
15833: FOR_IN
15834: IFFALSE 15857
// if IsLive ( k ) then
15836: LD_VAR 0 3
15840: PPUSH
15841: CALL_OW 300
15845: IFFALSE 15855
// h = true ;
15847: LD_ADDR_VAR 0 4
15851: PUSH
15852: LD_INT 1
15854: ST_TO_ADDR
15855: GO 15833
15857: POP
15858: POP
// Result := h ;
15859: LD_ADDR_VAR 0 2
15863: PUSH
15864: LD_VAR 0 4
15868: ST_TO_ADDR
// end ; end ;
15869: GO 15872
15871: POP
// end ;
15872: LD_VAR 0 2
15876: RET
// function AlliedSides ( i , j ) ; begin
15877: LD_INT 0
15879: PPUSH
// Result := false ;
15880: LD_ADDR_VAR 0 3
15884: PUSH
15885: LD_INT 0
15887: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
15888: LD_VAR 0 1
15892: PPUSH
15893: LD_VAR 0 2
15897: PPUSH
15898: CALL_OW 81
15902: PUSH
15903: LD_INT 1
15905: EQUAL
15906: PUSH
15907: LD_VAR 0 2
15911: PPUSH
15912: LD_VAR 0 1
15916: PPUSH
15917: CALL_OW 81
15921: PUSH
15922: LD_INT 1
15924: EQUAL
15925: AND
15926: PUSH
15927: LD_VAR 0 1
15931: PPUSH
15932: CALL_OW 83
15936: AND
15937: PUSH
15938: LD_VAR 0 2
15942: PPUSH
15943: CALL_OW 83
15947: AND
15948: IFFALSE 15958
// Result := true ;
15950: LD_ADDR_VAR 0 3
15954: PUSH
15955: LD_INT 1
15957: ST_TO_ADDR
// end ;
15958: LD_VAR 0 3
15962: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
15963: CALL 15467 0 0
15967: PUSH
15968: LD_LOC 28
15972: NOT
15973: AND
15974: IFFALSE 15990
15976: GO 15978
15978: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
15979: LD_ADDR_EXP 68
15983: PUSH
15984: LD_STRING #Player-Ended
15986: PUSH
15987: EMPTY
15988: LIST
15989: ST_TO_ADDR
15990: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
15991: CALL 15467 0 0
15995: PUSH
15996: LD_LOC 28
16000: AND
16001: IFFALSE 16010
16003: GO 16005
16005: DISABLE
// YouLostInMultiplayer ;
16006: CALL_OW 107
16010: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
16011: CALL 15467 0 0
16015: NOT
16016: PUSH
16017: CALL_OW 531
16021: NOT
16022: AND
16023: IFFALSE 16039
16025: GO 16027
16027: DISABLE
// WaitServerStrings = [ #server-wait ] ;
16028: LD_ADDR_EXP 68
16032: PUSH
16033: LD_STRING #server-wait
16035: PUSH
16036: EMPTY
16037: LIST
16038: ST_TO_ADDR
16039: END
// every 100 trigger IAmSpec do
16040: CALL_OW 531
16044: IFFALSE 16060
16046: GO 16048
16048: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
16049: LD_ADDR_EXP 68
16053: PUSH
16054: LD_STRING #Player-IAmSpec
16056: PUSH
16057: EMPTY
16058: LIST
16059: ST_TO_ADDR
16060: END
// every 100 trigger GameEnded and IAmSpec do
16061: LD_LOC 28
16065: PUSH
16066: CALL_OW 531
16070: AND
16071: IFFALSE 16080
16073: GO 16075
16075: DISABLE
// YouLostInMultiplayer ;
16076: CALL_OW 107
16080: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
16081: CALL 15467 0 0
16085: PUSH
16086: LD_LOC 28
16090: NOT
16091: AND
16092: IFFALSE 16108
16094: GO 16096
16096: DISABLE
// WaitServerStrings = [ $player-win ] ;
16097: LD_ADDR_EXP 68
16101: PUSH
16102: LD_STRING $player-win
16104: PUSH
16105: EMPTY
16106: LIST
16107: ST_TO_ADDR
16108: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
16109: CALL 15467 0 0
16113: PUSH
16114: LD_LOC 28
16118: AND
16119: IFFALSE 16143
16121: GO 16123
16123: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
16124: LD_EXP 44
16128: PUSH
16129: LD_OWVAR 7
16133: ARRAY
16134: PPUSH
16135: CALL 15138 0 1
// YouWinInMultiplayer ;
16139: CALL_OW 106
// end ;
16143: END
// every 100 trigger isEditor marked 401 do
16144: LD_OWVAR 84
16148: IFFALSE 16164
16150: GO 16152
16152: DISABLE
// Debug_Strings = [ You won ] ;
16153: LD_ADDR_OWVAR 48
16157: PUSH
16158: LD_STRING You won
16160: PUSH
16161: EMPTY
16162: LIST
16163: ST_TO_ADDR
16164: END
// every 100 trigger isEditor marked 400 do
16165: LD_OWVAR 84
16169: IFFALSE 16185
16171: GO 16173
16173: DISABLE
// Debug_Strings = [ You loss ] ;
16174: LD_ADDR_OWVAR 48
16178: PUSH
16179: LD_STRING You loss
16181: PUSH
16182: EMPTY
16183: LIST
16184: ST_TO_ADDR
16185: END
// every 100 marked 98 do var i , un ;
16186: GO 16188
16188: DISABLE
16189: LD_INT 0
16191: PPUSH
16192: PPUSH
// begin for i = 1 to side_positions do
16193: LD_ADDR_VAR 0 1
16197: PUSH
16198: DOUBLE
16199: LD_INT 1
16201: DEC
16202: ST_TO_ADDR
16203: LD_EXP 43
16207: PUSH
16208: FOR_TO
16209: IFFALSE 16296
// begin if side_positions [ i ] then
16211: LD_EXP 43
16215: PUSH
16216: LD_VAR 0 1
16220: ARRAY
16221: IFFALSE 16294
// if not HasPower ( i ) and not defeated [ i ] then
16223: LD_VAR 0 1
16227: PPUSH
16228: CALL 15531 0 1
16232: NOT
16233: PUSH
16234: LD_LOC 27
16238: PUSH
16239: LD_VAR 0 1
16243: ARRAY
16244: NOT
16245: AND
16246: IFFALSE 16294
// begin defeated = replace ( defeated , i , true ) ;
16248: LD_ADDR_LOC 27
16252: PUSH
16253: LD_LOC 27
16257: PPUSH
16258: LD_VAR 0 1
16262: PPUSH
16263: LD_INT 1
16265: PPUSH
16266: CALL_OW 1
16270: ST_TO_ADDR
// if i = mp_player_side then
16271: LD_VAR 0 1
16275: PUSH
16276: LD_OWVAR 7
16280: EQUAL
16281: IFFALSE 16294
// begin Multiplayer_Loose_Message ;
16283: CALL_OW 521
// SetPlayerSpectator ( ) ;
16287: CALL_OW 572
// enable ( 400 ) ;
16291: LD_INT 400
16293: ENABLE_MARKED
// end ; end ; end ;
16294: GO 16208
16296: POP
16297: POP
// DidGameEnd ;
16298: CALL 16313 0 0
// if not GameEnded then
16302: LD_LOC 28
16306: NOT
16307: IFFALSE 16310
// enable ;
16309: ENABLE
// end ;
16310: PPOPN 2
16312: END
// function DidGameEnd ; var i , k , enemy ; begin
16313: LD_INT 0
16315: PPUSH
16316: PPUSH
16317: PPUSH
16318: PPUSH
// enemy = [ ] ;
16319: LD_ADDR_VAR 0 4
16323: PUSH
16324: EMPTY
16325: ST_TO_ADDR
// for i = 1 to side_positions do
16326: LD_ADDR_VAR 0 2
16330: PUSH
16331: DOUBLE
16332: LD_INT 1
16334: DEC
16335: ST_TO_ADDR
16336: LD_EXP 43
16340: PUSH
16341: FOR_TO
16342: IFFALSE 16436
// if not defeated [ i ] then
16344: LD_LOC 27
16348: PUSH
16349: LD_VAR 0 2
16353: ARRAY
16354: NOT
16355: IFFALSE 16434
// for k = 1 to side_positions do
16357: LD_ADDR_VAR 0 3
16361: PUSH
16362: DOUBLE
16363: LD_INT 1
16365: DEC
16366: ST_TO_ADDR
16367: LD_EXP 43
16371: PUSH
16372: FOR_TO
16373: IFFALSE 16432
// if not defeated [ k ] then
16375: LD_LOC 27
16379: PUSH
16380: LD_VAR 0 3
16384: ARRAY
16385: NOT
16386: IFFALSE 16430
// if not AlliedSides ( i , k ) then
16388: LD_VAR 0 2
16392: PPUSH
16393: LD_VAR 0 3
16397: PPUSH
16398: CALL 15877 0 2
16402: NOT
16403: IFFALSE 16430
// enemy = enemy ^ [ i , k ] ;
16405: LD_ADDR_VAR 0 4
16409: PUSH
16410: LD_VAR 0 4
16414: PUSH
16415: LD_VAR 0 2
16419: PUSH
16420: LD_VAR 0 3
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: ADD
16429: ST_TO_ADDR
16430: GO 16372
16432: POP
16433: POP
16434: GO 16341
16436: POP
16437: POP
// if not enemy then
16438: LD_VAR 0 4
16442: NOT
16443: IFFALSE 16469
// begin GameEnded = true ;
16445: LD_ADDR_LOC 28
16449: PUSH
16450: LD_INT 1
16452: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
16453: LD_LOC 27
16457: PUSH
16458: LD_OWVAR 7
16462: ARRAY
16463: NOT
16464: IFFALSE 16469
// enable ( 401 ) ;
16466: LD_INT 401
16468: ENABLE_MARKED
// end ; end ;
16469: LD_VAR 0 1
16473: RET
// function unfog ; var k , friends ; begin
16474: LD_INT 0
16476: PPUSH
16477: PPUSH
16478: PPUSH
// for k = 1 to side_positions do
16479: LD_ADDR_VAR 0 2
16483: PUSH
16484: DOUBLE
16485: LD_INT 1
16487: DEC
16488: ST_TO_ADDR
16489: LD_EXP 43
16493: PUSH
16494: FOR_TO
16495: IFFALSE 16551
// if not defeated [ k ] then
16497: LD_LOC 27
16501: PUSH
16502: LD_VAR 0 2
16506: ARRAY
16507: NOT
16508: IFFALSE 16549
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
16510: LD_OWVAR 7
16514: PPUSH
16515: LD_VAR 0 2
16519: PPUSH
16520: CALL_OW 81
16524: PUSH
16525: LD_INT 1
16527: PUSH
16528: EMPTY
16529: LIST
16530: IN
16531: IFFALSE 16549
// friends = friends ^ k ;
16533: LD_ADDR_VAR 0 3
16537: PUSH
16538: LD_VAR 0 3
16542: PUSH
16543: LD_VAR 0 2
16547: ADD
16548: ST_TO_ADDR
16549: GO 16494
16551: POP
16552: POP
// if not friends then
16553: LD_VAR 0 3
16557: NOT
16558: IFFALSE 16572
// begin SetPlayerSpectator ( ) ;
16560: CALL_OW 572
// unfoged = true ;
16564: LD_ADDR_LOC 29
16568: PUSH
16569: LD_INT 1
16571: ST_TO_ADDR
// end ; end ;
16572: LD_VAR 0 1
16576: RET
// export function MakeGameEnd ; begin
16577: LD_INT 0
16579: PPUSH
// SetPlayerSpectator ( ) ;
16580: CALL_OW 572
// unfoged = true ;
16584: LD_ADDR_LOC 29
16588: PUSH
16589: LD_INT 1
16591: ST_TO_ADDR
// wait ( 0 0$5 ) ;
16592: LD_INT 175
16594: PPUSH
16595: CALL_OW 67
// GameEnded = true ;
16599: LD_ADDR_LOC 28
16603: PUSH
16604: LD_INT 1
16606: ST_TO_ADDR
// end ;
16607: LD_VAR 0 1
16611: RET
// export function GetGameEnded ; begin
16612: LD_INT 0
16614: PPUSH
// result = GameEnded ;
16615: LD_ADDR_VAR 0 1
16619: PUSH
16620: LD_LOC 28
16624: ST_TO_ADDR
// end ; end_of_file
16625: LD_VAR 0 1
16629: RET
// export function SetMpTechs ( ) ; var side , i ; begin
16630: LD_INT 0
16632: PPUSH
16633: PPUSH
16634: PPUSH
// for side = 1 to 8 do
16635: LD_ADDR_VAR 0 2
16639: PUSH
16640: DOUBLE
16641: LD_INT 1
16643: DEC
16644: ST_TO_ADDR
16645: LD_INT 8
16647: PUSH
16648: FOR_TO
16649: IFFALSE 16770
// begin for i = 1 to 72 do
16651: LD_ADDR_VAR 0 3
16655: PUSH
16656: DOUBLE
16657: LD_INT 1
16659: DEC
16660: ST_TO_ADDR
16661: LD_INT 72
16663: PUSH
16664: FOR_TO
16665: IFFALSE 16696
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
16667: LD_VAR 0 3
16671: PPUSH
16672: LD_VAR 0 2
16676: PPUSH
16677: LD_INT 0
16679: PPUSH
16680: LD_VAR 0 3
16684: PPUSH
16685: CALL_OW 565
16689: PPUSH
16690: CALL_OW 322
16694: GO 16664
16696: POP
16697: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
16698: LD_INT 73
16700: PPUSH
16701: LD_VAR 0 2
16705: PPUSH
16706: LD_INT 0
16708: PPUSH
16709: LD_INT 25
16711: PPUSH
16712: CALL_OW 565
16716: PPUSH
16717: CALL_OW 322
// for i = 0 to 40 do
16721: LD_ADDR_VAR 0 3
16725: PUSH
16726: DOUBLE
16727: LD_INT 0
16729: DEC
16730: ST_TO_ADDR
16731: LD_INT 40
16733: PUSH
16734: FOR_TO
16735: IFFALSE 16766
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
16737: LD_VAR 0 3
16741: PPUSH
16742: LD_VAR 0 2
16746: PPUSH
16747: LD_INT 1
16749: PPUSH
16750: LD_VAR 0 3
16754: PPUSH
16755: CALL_OW 565
16759: PPUSH
16760: CALL_OW 324
16764: GO 16734
16766: POP
16767: POP
// end ;
16768: GO 16648
16770: POP
16771: POP
// end ;
16772: LD_VAR 0 1
16776: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
16777: LD_INT 0
16779: PPUSH
16780: PPUSH
16781: PPUSH
// for side = 1 to 8 do
16782: LD_ADDR_VAR 0 3
16786: PUSH
16787: DOUBLE
16788: LD_INT 1
16790: DEC
16791: ST_TO_ADDR
16792: LD_INT 8
16794: PUSH
16795: FOR_TO
16796: IFFALSE 20792
// begin for i = 1 to 73 do
16798: LD_ADDR_VAR 0 4
16802: PUSH
16803: DOUBLE
16804: LD_INT 1
16806: DEC
16807: ST_TO_ADDR
16808: LD_INT 73
16810: PUSH
16811: FOR_TO
16812: IFFALSE 16833
// SetTech ( i , side , state_disabled ) ;
16814: LD_VAR 0 4
16818: PPUSH
16819: LD_VAR 0 3
16823: PPUSH
16824: LD_INT 0
16826: PPUSH
16827: CALL_OW 322
16831: GO 16811
16833: POP
16834: POP
// for i = 0 to 40 do
16835: LD_ADDR_VAR 0 4
16839: PUSH
16840: DOUBLE
16841: LD_INT 0
16843: DEC
16844: ST_TO_ADDR
16845: LD_INT 40
16847: PUSH
16848: FOR_TO
16849: IFFALSE 16870
// SetRestrict ( i , side , false ) ;
16851: LD_VAR 0 4
16855: PPUSH
16856: LD_VAR 0 3
16860: PPUSH
16861: LD_INT 0
16863: PPUSH
16864: CALL_OW 324
16868: GO 16848
16870: POP
16871: POP
// case level of 1 :
16872: LD_VAR 0 1
16876: PUSH
16877: LD_INT 1
16879: DOUBLE
16880: EQUAL
16881: IFTRUE 16885
16883: GO 17038
16885: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16886: LD_INT 35
16888: PPUSH
16889: LD_VAR 0 3
16893: PPUSH
16894: LD_INT 1
16896: PPUSH
16897: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16901: LD_INT 45
16903: PPUSH
16904: LD_VAR 0 3
16908: PPUSH
16909: LD_INT 1
16911: PPUSH
16912: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16916: LD_INT 46
16918: PPUSH
16919: LD_VAR 0 3
16923: PPUSH
16924: LD_INT 1
16926: PPUSH
16927: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16931: LD_INT 47
16933: PPUSH
16934: LD_VAR 0 3
16938: PPUSH
16939: LD_INT 1
16941: PPUSH
16942: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16946: LD_INT 0
16948: PPUSH
16949: LD_VAR 0 3
16953: PPUSH
16954: LD_INT 1
16956: PPUSH
16957: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16961: LD_INT 2
16963: PPUSH
16964: LD_VAR 0 3
16968: PPUSH
16969: LD_INT 1
16971: PPUSH
16972: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16976: LD_INT 4
16978: PPUSH
16979: LD_VAR 0 3
16983: PPUSH
16984: LD_INT 1
16986: PPUSH
16987: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16991: LD_INT 6
16993: PPUSH
16994: LD_VAR 0 3
16998: PPUSH
16999: LD_INT 1
17001: PPUSH
17002: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17006: LD_INT 29
17008: PPUSH
17009: LD_VAR 0 3
17013: PPUSH
17014: LD_INT 1
17016: PPUSH
17017: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17021: LD_INT 31
17023: PPUSH
17024: LD_VAR 0 3
17028: PPUSH
17029: LD_INT 1
17031: PPUSH
17032: CALL_OW 324
// end ; 2 :
17036: GO 20790
17038: LD_INT 2
17040: DOUBLE
17041: EQUAL
17042: IFTRUE 17046
17044: GO 17244
17046: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17047: LD_INT 35
17049: PPUSH
17050: LD_VAR 0 3
17054: PPUSH
17055: LD_INT 1
17057: PPUSH
17058: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17062: LD_INT 45
17064: PPUSH
17065: LD_VAR 0 3
17069: PPUSH
17070: LD_INT 1
17072: PPUSH
17073: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17077: LD_INT 46
17079: PPUSH
17080: LD_VAR 0 3
17084: PPUSH
17085: LD_INT 1
17087: PPUSH
17088: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17092: LD_INT 47
17094: PPUSH
17095: LD_VAR 0 3
17099: PPUSH
17100: LD_INT 1
17102: PPUSH
17103: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17107: LD_INT 1
17109: PPUSH
17110: LD_VAR 0 3
17114: PPUSH
17115: LD_INT 1
17117: PPUSH
17118: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17122: LD_INT 2
17124: PPUSH
17125: LD_VAR 0 3
17129: PPUSH
17130: LD_INT 1
17132: PPUSH
17133: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17137: LD_INT 11
17139: PPUSH
17140: LD_VAR 0 3
17144: PPUSH
17145: LD_INT 1
17147: PPUSH
17148: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17152: LD_INT 0
17154: PPUSH
17155: LD_VAR 0 3
17159: PPUSH
17160: LD_INT 1
17162: PPUSH
17163: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17167: LD_INT 2
17169: PPUSH
17170: LD_VAR 0 3
17174: PPUSH
17175: LD_INT 1
17177: PPUSH
17178: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17182: LD_INT 4
17184: PPUSH
17185: LD_VAR 0 3
17189: PPUSH
17190: LD_INT 1
17192: PPUSH
17193: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17197: LD_INT 6
17199: PPUSH
17200: LD_VAR 0 3
17204: PPUSH
17205: LD_INT 1
17207: PPUSH
17208: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17212: LD_INT 29
17214: PPUSH
17215: LD_VAR 0 3
17219: PPUSH
17220: LD_INT 1
17222: PPUSH
17223: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17227: LD_INT 31
17229: PPUSH
17230: LD_VAR 0 3
17234: PPUSH
17235: LD_INT 1
17237: PPUSH
17238: CALL_OW 324
// end ; 3 :
17242: GO 20790
17244: LD_INT 3
17246: DOUBLE
17247: EQUAL
17248: IFTRUE 17252
17250: GO 17705
17252: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17253: LD_INT 35
17255: PPUSH
17256: LD_VAR 0 3
17260: PPUSH
17261: LD_INT 1
17263: PPUSH
17264: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17268: LD_INT 45
17270: PPUSH
17271: LD_VAR 0 3
17275: PPUSH
17276: LD_INT 1
17278: PPUSH
17279: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17283: LD_INT 46
17285: PPUSH
17286: LD_VAR 0 3
17290: PPUSH
17291: LD_INT 1
17293: PPUSH
17294: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17298: LD_INT 47
17300: PPUSH
17301: LD_VAR 0 3
17305: PPUSH
17306: LD_INT 1
17308: PPUSH
17309: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17313: LD_INT 1
17315: PPUSH
17316: LD_VAR 0 3
17320: PPUSH
17321: LD_INT 1
17323: PPUSH
17324: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17328: LD_INT 2
17330: PPUSH
17331: LD_VAR 0 3
17335: PPUSH
17336: LD_INT 1
17338: PPUSH
17339: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17343: LD_INT 11
17345: PPUSH
17346: LD_VAR 0 3
17350: PPUSH
17351: LD_INT 1
17353: PPUSH
17354: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17358: LD_INT 48
17360: PPUSH
17361: LD_VAR 0 3
17365: PPUSH
17366: LD_INT 1
17368: PPUSH
17369: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17373: LD_INT 69
17375: PPUSH
17376: LD_VAR 0 3
17380: PPUSH
17381: LD_INT 1
17383: PPUSH
17384: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17388: LD_INT 39
17390: PPUSH
17391: LD_VAR 0 3
17395: PPUSH
17396: LD_INT 1
17398: PPUSH
17399: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17403: LD_INT 43
17405: PPUSH
17406: LD_VAR 0 3
17410: PPUSH
17411: LD_INT 1
17413: PPUSH
17414: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17418: LD_INT 51
17420: PPUSH
17421: LD_VAR 0 3
17425: PPUSH
17426: LD_INT 1
17428: PPUSH
17429: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17433: LD_INT 6
17435: PPUSH
17436: LD_VAR 0 3
17440: PPUSH
17441: LD_INT 1
17443: PPUSH
17444: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17448: LD_INT 0
17450: PPUSH
17451: LD_VAR 0 3
17455: PPUSH
17456: LD_INT 1
17458: PPUSH
17459: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17463: LD_INT 2
17465: PPUSH
17466: LD_VAR 0 3
17470: PPUSH
17471: LD_INT 1
17473: PPUSH
17474: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17478: LD_INT 3
17480: PPUSH
17481: LD_VAR 0 3
17485: PPUSH
17486: LD_INT 1
17488: PPUSH
17489: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17493: LD_INT 4
17495: PPUSH
17496: LD_VAR 0 3
17500: PPUSH
17501: LD_INT 1
17503: PPUSH
17504: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17508: LD_INT 6
17510: PPUSH
17511: LD_VAR 0 3
17515: PPUSH
17516: LD_INT 1
17518: PPUSH
17519: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17523: LD_INT 7
17525: PPUSH
17526: LD_VAR 0 3
17530: PPUSH
17531: LD_INT 1
17533: PPUSH
17534: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17538: LD_INT 8
17540: PPUSH
17541: LD_VAR 0 3
17545: PPUSH
17546: LD_INT 1
17548: PPUSH
17549: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17553: LD_INT 10
17555: PPUSH
17556: LD_VAR 0 3
17560: PPUSH
17561: LD_INT 1
17563: PPUSH
17564: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17568: LD_INT 15
17570: PPUSH
17571: LD_VAR 0 3
17575: PPUSH
17576: LD_INT 1
17578: PPUSH
17579: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17583: LD_INT 16
17585: PPUSH
17586: LD_VAR 0 3
17590: PPUSH
17591: LD_INT 1
17593: PPUSH
17594: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17598: LD_INT 17
17600: PPUSH
17601: LD_VAR 0 3
17605: PPUSH
17606: LD_INT 1
17608: PPUSH
17609: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17613: LD_INT 20
17615: PPUSH
17616: LD_VAR 0 3
17620: PPUSH
17621: LD_INT 1
17623: PPUSH
17624: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17628: LD_INT 26
17630: PPUSH
17631: LD_VAR 0 3
17635: PPUSH
17636: LD_INT 1
17638: PPUSH
17639: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17643: LD_INT 27
17645: PPUSH
17646: LD_VAR 0 3
17650: PPUSH
17651: LD_INT 1
17653: PPUSH
17654: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17658: LD_INT 29
17660: PPUSH
17661: LD_VAR 0 3
17665: PPUSH
17666: LD_INT 1
17668: PPUSH
17669: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17673: LD_INT 31
17675: PPUSH
17676: LD_VAR 0 3
17680: PPUSH
17681: LD_INT 1
17683: PPUSH
17684: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17688: LD_INT 32
17690: PPUSH
17691: LD_VAR 0 3
17695: PPUSH
17696: LD_INT 1
17698: PPUSH
17699: CALL_OW 324
// end ; 4 :
17703: GO 20790
17705: LD_INT 4
17707: DOUBLE
17708: EQUAL
17709: IFTRUE 17713
17711: GO 18661
17713: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17714: LD_INT 35
17716: PPUSH
17717: LD_VAR 0 3
17721: PPUSH
17722: LD_INT 1
17724: PPUSH
17725: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17729: LD_INT 45
17731: PPUSH
17732: LD_VAR 0 3
17736: PPUSH
17737: LD_INT 1
17739: PPUSH
17740: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17744: LD_INT 46
17746: PPUSH
17747: LD_VAR 0 3
17751: PPUSH
17752: LD_INT 1
17754: PPUSH
17755: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17759: LD_INT 47
17761: PPUSH
17762: LD_VAR 0 3
17766: PPUSH
17767: LD_INT 1
17769: PPUSH
17770: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17774: LD_INT 1
17776: PPUSH
17777: LD_VAR 0 3
17781: PPUSH
17782: LD_INT 1
17784: PPUSH
17785: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17789: LD_INT 2
17791: PPUSH
17792: LD_VAR 0 3
17796: PPUSH
17797: LD_INT 1
17799: PPUSH
17800: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17804: LD_INT 11
17806: PPUSH
17807: LD_VAR 0 3
17811: PPUSH
17812: LD_INT 1
17814: PPUSH
17815: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17819: LD_INT 20
17821: PPUSH
17822: LD_VAR 0 3
17826: PPUSH
17827: LD_INT 1
17829: PPUSH
17830: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17834: LD_INT 48
17836: PPUSH
17837: LD_VAR 0 3
17841: PPUSH
17842: LD_INT 1
17844: PPUSH
17845: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17849: LD_INT 49
17851: PPUSH
17852: LD_VAR 0 3
17856: PPUSH
17857: LD_INT 1
17859: PPUSH
17860: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17864: LD_INT 69
17866: PPUSH
17867: LD_VAR 0 3
17871: PPUSH
17872: LD_INT 1
17874: PPUSH
17875: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17879: LD_INT 39
17881: PPUSH
17882: LD_VAR 0 3
17886: PPUSH
17887: LD_INT 1
17889: PPUSH
17890: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17894: LD_INT 34
17896: PPUSH
17897: LD_VAR 0 3
17901: PPUSH
17902: LD_INT 1
17904: PPUSH
17905: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17909: LD_INT 42
17911: PPUSH
17912: LD_VAR 0 3
17916: PPUSH
17917: LD_INT 1
17919: PPUSH
17920: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17924: LD_INT 44
17926: PPUSH
17927: LD_VAR 0 3
17931: PPUSH
17932: LD_INT 1
17934: PPUSH
17935: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17939: LD_INT 41
17941: PPUSH
17942: LD_VAR 0 3
17946: PPUSH
17947: LD_INT 1
17949: PPUSH
17950: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17954: LD_INT 43
17956: PPUSH
17957: LD_VAR 0 3
17961: PPUSH
17962: LD_INT 1
17964: PPUSH
17965: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17969: LD_INT 70
17971: PPUSH
17972: LD_VAR 0 3
17976: PPUSH
17977: LD_INT 1
17979: PPUSH
17980: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17984: LD_INT 51
17986: PPUSH
17987: LD_VAR 0 3
17991: PPUSH
17992: LD_INT 1
17994: PPUSH
17995: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17999: LD_INT 52
18001: PPUSH
18002: LD_VAR 0 3
18006: PPUSH
18007: LD_INT 1
18009: PPUSH
18010: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18014: LD_INT 6
18016: PPUSH
18017: LD_VAR 0 3
18021: PPUSH
18022: LD_INT 1
18024: PPUSH
18025: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18029: LD_INT 15
18031: PPUSH
18032: LD_VAR 0 3
18036: PPUSH
18037: LD_INT 1
18039: PPUSH
18040: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18044: LD_INT 7
18046: PPUSH
18047: LD_VAR 0 3
18051: PPUSH
18052: LD_INT 1
18054: PPUSH
18055: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18059: LD_INT 12
18061: PPUSH
18062: LD_VAR 0 3
18066: PPUSH
18067: LD_INT 1
18069: PPUSH
18070: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18074: LD_INT 18
18076: PPUSH
18077: LD_VAR 0 3
18081: PPUSH
18082: LD_INT 1
18084: PPUSH
18085: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18089: LD_INT 60
18091: PPUSH
18092: LD_VAR 0 3
18096: PPUSH
18097: LD_INT 1
18099: PPUSH
18100: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18104: LD_INT 9
18106: PPUSH
18107: LD_VAR 0 3
18111: PPUSH
18112: LD_INT 1
18114: PPUSH
18115: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18119: LD_INT 30
18121: PPUSH
18122: LD_VAR 0 3
18126: PPUSH
18127: LD_INT 1
18129: PPUSH
18130: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18134: LD_INT 37
18136: PPUSH
18137: LD_VAR 0 3
18141: PPUSH
18142: LD_INT 1
18144: PPUSH
18145: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18149: LD_INT 5
18151: PPUSH
18152: LD_VAR 0 3
18156: PPUSH
18157: LD_INT 1
18159: PPUSH
18160: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18164: LD_INT 66
18166: PPUSH
18167: LD_VAR 0 3
18171: PPUSH
18172: LD_INT 1
18174: PPUSH
18175: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18179: LD_INT 21
18181: PPUSH
18182: LD_VAR 0 3
18186: PPUSH
18187: LD_INT 1
18189: PPUSH
18190: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18194: LD_INT 22
18196: PPUSH
18197: LD_VAR 0 3
18201: PPUSH
18202: LD_INT 1
18204: PPUSH
18205: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18209: LD_INT 54
18211: PPUSH
18212: LD_VAR 0 3
18216: PPUSH
18217: LD_INT 1
18219: PPUSH
18220: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18224: LD_INT 0
18226: PPUSH
18227: LD_VAR 0 3
18231: PPUSH
18232: LD_INT 1
18234: PPUSH
18235: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18239: LD_INT 1
18241: PPUSH
18242: LD_VAR 0 3
18246: PPUSH
18247: LD_INT 1
18249: PPUSH
18250: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18254: LD_INT 2
18256: PPUSH
18257: LD_VAR 0 3
18261: PPUSH
18262: LD_INT 1
18264: PPUSH
18265: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18269: LD_INT 3
18271: PPUSH
18272: LD_VAR 0 3
18276: PPUSH
18277: LD_INT 1
18279: PPUSH
18280: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18284: LD_INT 4
18286: PPUSH
18287: LD_VAR 0 3
18291: PPUSH
18292: LD_INT 1
18294: PPUSH
18295: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18299: LD_INT 5
18301: PPUSH
18302: LD_VAR 0 3
18306: PPUSH
18307: LD_INT 1
18309: PPUSH
18310: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18314: LD_INT 6
18316: PPUSH
18317: LD_VAR 0 3
18321: PPUSH
18322: LD_INT 1
18324: PPUSH
18325: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18329: LD_INT 7
18331: PPUSH
18332: LD_VAR 0 3
18336: PPUSH
18337: LD_INT 1
18339: PPUSH
18340: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18344: LD_INT 8
18346: PPUSH
18347: LD_VAR 0 3
18351: PPUSH
18352: LD_INT 1
18354: PPUSH
18355: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18359: LD_INT 10
18361: PPUSH
18362: LD_VAR 0 3
18366: PPUSH
18367: LD_INT 1
18369: PPUSH
18370: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18374: LD_INT 11
18376: PPUSH
18377: LD_VAR 0 3
18381: PPUSH
18382: LD_INT 1
18384: PPUSH
18385: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18389: LD_INT 12
18391: PPUSH
18392: LD_VAR 0 3
18396: PPUSH
18397: LD_INT 1
18399: PPUSH
18400: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18404: LD_INT 13
18406: PPUSH
18407: LD_VAR 0 3
18411: PPUSH
18412: LD_INT 1
18414: PPUSH
18415: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18419: LD_INT 14
18421: PPUSH
18422: LD_VAR 0 3
18426: PPUSH
18427: LD_INT 1
18429: PPUSH
18430: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18434: LD_INT 15
18436: PPUSH
18437: LD_VAR 0 3
18441: PPUSH
18442: LD_INT 1
18444: PPUSH
18445: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18449: LD_INT 16
18451: PPUSH
18452: LD_VAR 0 3
18456: PPUSH
18457: LD_INT 1
18459: PPUSH
18460: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18464: LD_INT 17
18466: PPUSH
18467: LD_VAR 0 3
18471: PPUSH
18472: LD_INT 1
18474: PPUSH
18475: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18479: LD_INT 19
18481: PPUSH
18482: LD_VAR 0 3
18486: PPUSH
18487: LD_INT 1
18489: PPUSH
18490: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18494: LD_INT 20
18496: PPUSH
18497: LD_VAR 0 3
18501: PPUSH
18502: LD_INT 1
18504: PPUSH
18505: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18509: LD_INT 21
18511: PPUSH
18512: LD_VAR 0 3
18516: PPUSH
18517: LD_INT 1
18519: PPUSH
18520: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18524: LD_INT 23
18526: PPUSH
18527: LD_VAR 0 3
18531: PPUSH
18532: LD_INT 1
18534: PPUSH
18535: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18539: LD_INT 26
18541: PPUSH
18542: LD_VAR 0 3
18546: PPUSH
18547: LD_INT 1
18549: PPUSH
18550: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18554: LD_INT 27
18556: PPUSH
18557: LD_VAR 0 3
18561: PPUSH
18562: LD_INT 1
18564: PPUSH
18565: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18569: LD_INT 28
18571: PPUSH
18572: LD_VAR 0 3
18576: PPUSH
18577: LD_INT 1
18579: PPUSH
18580: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18584: LD_INT 29
18586: PPUSH
18587: LD_VAR 0 3
18591: PPUSH
18592: LD_INT 1
18594: PPUSH
18595: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18599: LD_INT 30
18601: PPUSH
18602: LD_VAR 0 3
18606: PPUSH
18607: LD_INT 1
18609: PPUSH
18610: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18614: LD_INT 31
18616: PPUSH
18617: LD_VAR 0 3
18621: PPUSH
18622: LD_INT 1
18624: PPUSH
18625: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18629: LD_INT 32
18631: PPUSH
18632: LD_VAR 0 3
18636: PPUSH
18637: LD_INT 1
18639: PPUSH
18640: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18644: LD_INT 36
18646: PPUSH
18647: LD_VAR 0 3
18651: PPUSH
18652: LD_INT 1
18654: PPUSH
18655: CALL_OW 324
// end ; 5 :
18659: GO 20790
18661: LD_INT 5
18663: DOUBLE
18664: EQUAL
18665: IFTRUE 18669
18667: GO 19782
18669: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18670: LD_INT 35
18672: PPUSH
18673: LD_VAR 0 3
18677: PPUSH
18678: LD_INT 1
18680: PPUSH
18681: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18685: LD_INT 45
18687: PPUSH
18688: LD_VAR 0 3
18692: PPUSH
18693: LD_INT 1
18695: PPUSH
18696: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18700: LD_INT 46
18702: PPUSH
18703: LD_VAR 0 3
18707: PPUSH
18708: LD_INT 1
18710: PPUSH
18711: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18715: LD_INT 47
18717: PPUSH
18718: LD_VAR 0 3
18722: PPUSH
18723: LD_INT 1
18725: PPUSH
18726: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18730: LD_INT 1
18732: PPUSH
18733: LD_VAR 0 3
18737: PPUSH
18738: LD_INT 1
18740: PPUSH
18741: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18745: LD_INT 2
18747: PPUSH
18748: LD_VAR 0 3
18752: PPUSH
18753: LD_INT 1
18755: PPUSH
18756: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18760: LD_INT 11
18762: PPUSH
18763: LD_VAR 0 3
18767: PPUSH
18768: LD_INT 1
18770: PPUSH
18771: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18775: LD_INT 20
18777: PPUSH
18778: LD_VAR 0 3
18782: PPUSH
18783: LD_INT 1
18785: PPUSH
18786: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18790: LD_INT 48
18792: PPUSH
18793: LD_VAR 0 3
18797: PPUSH
18798: LD_INT 1
18800: PPUSH
18801: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18805: LD_INT 49
18807: PPUSH
18808: LD_VAR 0 3
18812: PPUSH
18813: LD_INT 1
18815: PPUSH
18816: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18820: LD_INT 69
18822: PPUSH
18823: LD_VAR 0 3
18827: PPUSH
18828: LD_INT 1
18830: PPUSH
18831: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18835: LD_INT 39
18837: PPUSH
18838: LD_VAR 0 3
18842: PPUSH
18843: LD_INT 1
18845: PPUSH
18846: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18850: LD_INT 34
18852: PPUSH
18853: LD_VAR 0 3
18857: PPUSH
18858: LD_INT 1
18860: PPUSH
18861: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18865: LD_INT 42
18867: PPUSH
18868: LD_VAR 0 3
18872: PPUSH
18873: LD_INT 1
18875: PPUSH
18876: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18880: LD_INT 44
18882: PPUSH
18883: LD_VAR 0 3
18887: PPUSH
18888: LD_INT 1
18890: PPUSH
18891: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18895: LD_INT 41
18897: PPUSH
18898: LD_VAR 0 3
18902: PPUSH
18903: LD_INT 1
18905: PPUSH
18906: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18910: LD_INT 40
18912: PPUSH
18913: LD_VAR 0 3
18917: PPUSH
18918: LD_INT 1
18920: PPUSH
18921: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18925: LD_INT 43
18927: PPUSH
18928: LD_VAR 0 3
18932: PPUSH
18933: LD_INT 1
18935: PPUSH
18936: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18940: LD_INT 70
18942: PPUSH
18943: LD_VAR 0 3
18947: PPUSH
18948: LD_INT 1
18950: PPUSH
18951: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18955: LD_INT 51
18957: PPUSH
18958: LD_VAR 0 3
18962: PPUSH
18963: LD_INT 1
18965: PPUSH
18966: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18970: LD_INT 52
18972: PPUSH
18973: LD_VAR 0 3
18977: PPUSH
18978: LD_INT 1
18980: PPUSH
18981: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18985: LD_INT 6
18987: PPUSH
18988: LD_VAR 0 3
18992: PPUSH
18993: LD_INT 1
18995: PPUSH
18996: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19000: LD_INT 15
19002: PPUSH
19003: LD_VAR 0 3
19007: PPUSH
19008: LD_INT 1
19010: PPUSH
19011: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19015: LD_INT 7
19017: PPUSH
19018: LD_VAR 0 3
19022: PPUSH
19023: LD_INT 1
19025: PPUSH
19026: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19030: LD_INT 12
19032: PPUSH
19033: LD_VAR 0 3
19037: PPUSH
19038: LD_INT 1
19040: PPUSH
19041: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19045: LD_INT 17
19047: PPUSH
19048: LD_VAR 0 3
19052: PPUSH
19053: LD_INT 1
19055: PPUSH
19056: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19060: LD_INT 18
19062: PPUSH
19063: LD_VAR 0 3
19067: PPUSH
19068: LD_INT 1
19070: PPUSH
19071: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19075: LD_INT 60
19077: PPUSH
19078: LD_VAR 0 3
19082: PPUSH
19083: LD_INT 1
19085: PPUSH
19086: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19090: LD_INT 32
19092: PPUSH
19093: LD_VAR 0 3
19097: PPUSH
19098: LD_INT 1
19100: PPUSH
19101: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19105: LD_INT 9
19107: PPUSH
19108: LD_VAR 0 3
19112: PPUSH
19113: LD_INT 1
19115: PPUSH
19116: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19120: LD_INT 57
19122: PPUSH
19123: LD_VAR 0 3
19127: PPUSH
19128: LD_INT 1
19130: PPUSH
19131: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19135: LD_INT 30
19137: PPUSH
19138: LD_VAR 0 3
19142: PPUSH
19143: LD_INT 1
19145: PPUSH
19146: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19150: LD_INT 37
19152: PPUSH
19153: LD_VAR 0 3
19157: PPUSH
19158: LD_INT 1
19160: PPUSH
19161: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19165: LD_INT 63
19167: PPUSH
19168: LD_VAR 0 3
19172: PPUSH
19173: LD_INT 1
19175: PPUSH
19176: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19180: LD_INT 3
19182: PPUSH
19183: LD_VAR 0 3
19187: PPUSH
19188: LD_INT 1
19190: PPUSH
19191: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19195: LD_INT 4
19197: PPUSH
19198: LD_VAR 0 3
19202: PPUSH
19203: LD_INT 1
19205: PPUSH
19206: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19210: LD_INT 5
19212: PPUSH
19213: LD_VAR 0 3
19217: PPUSH
19218: LD_INT 1
19220: PPUSH
19221: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19225: LD_INT 66
19227: PPUSH
19228: LD_VAR 0 3
19232: PPUSH
19233: LD_INT 1
19235: PPUSH
19236: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19240: LD_INT 21
19242: PPUSH
19243: LD_VAR 0 3
19247: PPUSH
19248: LD_INT 1
19250: PPUSH
19251: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19255: LD_INT 22
19257: PPUSH
19258: LD_VAR 0 3
19262: PPUSH
19263: LD_INT 1
19265: PPUSH
19266: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19270: LD_INT 19
19272: PPUSH
19273: LD_VAR 0 3
19277: PPUSH
19278: LD_INT 1
19280: PPUSH
19281: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19285: LD_INT 54
19287: PPUSH
19288: LD_VAR 0 3
19292: PPUSH
19293: LD_INT 1
19295: PPUSH
19296: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19300: LD_INT 55
19302: PPUSH
19303: LD_VAR 0 3
19307: PPUSH
19308: LD_INT 1
19310: PPUSH
19311: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19315: LD_INT 0
19317: PPUSH
19318: LD_VAR 0 3
19322: PPUSH
19323: LD_INT 1
19325: PPUSH
19326: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
19330: LD_INT 1
19332: PPUSH
19333: LD_VAR 0 3
19337: PPUSH
19338: LD_INT 1
19340: PPUSH
19341: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19345: LD_INT 2
19347: PPUSH
19348: LD_VAR 0 3
19352: PPUSH
19353: LD_INT 1
19355: PPUSH
19356: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
19360: LD_INT 3
19362: PPUSH
19363: LD_VAR 0 3
19367: PPUSH
19368: LD_INT 1
19370: PPUSH
19371: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19375: LD_INT 4
19377: PPUSH
19378: LD_VAR 0 3
19382: PPUSH
19383: LD_INT 1
19385: PPUSH
19386: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
19390: LD_INT 5
19392: PPUSH
19393: LD_VAR 0 3
19397: PPUSH
19398: LD_INT 1
19400: PPUSH
19401: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19405: LD_INT 6
19407: PPUSH
19408: LD_VAR 0 3
19412: PPUSH
19413: LD_INT 1
19415: PPUSH
19416: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
19420: LD_INT 7
19422: PPUSH
19423: LD_VAR 0 3
19427: PPUSH
19428: LD_INT 1
19430: PPUSH
19431: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
19435: LD_INT 8
19437: PPUSH
19438: LD_VAR 0 3
19442: PPUSH
19443: LD_INT 1
19445: PPUSH
19446: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
19450: LD_INT 10
19452: PPUSH
19453: LD_VAR 0 3
19457: PPUSH
19458: LD_INT 1
19460: PPUSH
19461: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
19465: LD_INT 11
19467: PPUSH
19468: LD_VAR 0 3
19472: PPUSH
19473: LD_INT 1
19475: PPUSH
19476: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
19480: LD_INT 12
19482: PPUSH
19483: LD_VAR 0 3
19487: PPUSH
19488: LD_INT 1
19490: PPUSH
19491: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
19495: LD_INT 13
19497: PPUSH
19498: LD_VAR 0 3
19502: PPUSH
19503: LD_INT 1
19505: PPUSH
19506: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
19510: LD_INT 14
19512: PPUSH
19513: LD_VAR 0 3
19517: PPUSH
19518: LD_INT 1
19520: PPUSH
19521: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
19525: LD_INT 15
19527: PPUSH
19528: LD_VAR 0 3
19532: PPUSH
19533: LD_INT 1
19535: PPUSH
19536: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
19540: LD_INT 16
19542: PPUSH
19543: LD_VAR 0 3
19547: PPUSH
19548: LD_INT 1
19550: PPUSH
19551: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
19555: LD_INT 17
19557: PPUSH
19558: LD_VAR 0 3
19562: PPUSH
19563: LD_INT 1
19565: PPUSH
19566: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
19570: LD_INT 18
19572: PPUSH
19573: LD_VAR 0 3
19577: PPUSH
19578: LD_INT 1
19580: PPUSH
19581: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
19585: LD_INT 19
19587: PPUSH
19588: LD_VAR 0 3
19592: PPUSH
19593: LD_INT 1
19595: PPUSH
19596: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
19600: LD_INT 20
19602: PPUSH
19603: LD_VAR 0 3
19607: PPUSH
19608: LD_INT 1
19610: PPUSH
19611: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
19615: LD_INT 21
19617: PPUSH
19618: LD_VAR 0 3
19622: PPUSH
19623: LD_INT 1
19625: PPUSH
19626: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
19630: LD_INT 23
19632: PPUSH
19633: LD_VAR 0 3
19637: PPUSH
19638: LD_INT 1
19640: PPUSH
19641: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
19645: LD_INT 26
19647: PPUSH
19648: LD_VAR 0 3
19652: PPUSH
19653: LD_INT 1
19655: PPUSH
19656: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
19660: LD_INT 27
19662: PPUSH
19663: LD_VAR 0 3
19667: PPUSH
19668: LD_INT 1
19670: PPUSH
19671: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
19675: LD_INT 28
19677: PPUSH
19678: LD_VAR 0 3
19682: PPUSH
19683: LD_INT 1
19685: PPUSH
19686: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19690: LD_INT 29
19692: PPUSH
19693: LD_VAR 0 3
19697: PPUSH
19698: LD_INT 1
19700: PPUSH
19701: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
19705: LD_INT 30
19707: PPUSH
19708: LD_VAR 0 3
19712: PPUSH
19713: LD_INT 1
19715: PPUSH
19716: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19720: LD_INT 31
19722: PPUSH
19723: LD_VAR 0 3
19727: PPUSH
19728: LD_INT 1
19730: PPUSH
19731: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
19735: LD_INT 32
19737: PPUSH
19738: LD_VAR 0 3
19742: PPUSH
19743: LD_INT 1
19745: PPUSH
19746: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
19750: LD_INT 33
19752: PPUSH
19753: LD_VAR 0 3
19757: PPUSH
19758: LD_INT 1
19760: PPUSH
19761: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
19765: LD_INT 36
19767: PPUSH
19768: LD_VAR 0 3
19772: PPUSH
19773: LD_INT 1
19775: PPUSH
19776: CALL_OW 324
// end ; 6 :
19780: GO 20790
19782: LD_INT 6
19784: DOUBLE
19785: EQUAL
19786: IFTRUE 19790
19788: GO 20715
19790: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19791: LD_INT 35
19793: PPUSH
19794: LD_VAR 0 3
19798: PPUSH
19799: LD_INT 1
19801: PPUSH
19802: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19806: LD_INT 45
19808: PPUSH
19809: LD_VAR 0 3
19813: PPUSH
19814: LD_INT 1
19816: PPUSH
19817: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19821: LD_INT 46
19823: PPUSH
19824: LD_VAR 0 3
19828: PPUSH
19829: LD_INT 1
19831: PPUSH
19832: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19836: LD_INT 47
19838: PPUSH
19839: LD_VAR 0 3
19843: PPUSH
19844: LD_INT 1
19846: PPUSH
19847: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19851: LD_INT 1
19853: PPUSH
19854: LD_VAR 0 3
19858: PPUSH
19859: LD_INT 1
19861: PPUSH
19862: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19866: LD_INT 2
19868: PPUSH
19869: LD_VAR 0 3
19873: PPUSH
19874: LD_INT 1
19876: PPUSH
19877: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19881: LD_INT 11
19883: PPUSH
19884: LD_VAR 0 3
19888: PPUSH
19889: LD_INT 1
19891: PPUSH
19892: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
19896: LD_INT 20
19898: PPUSH
19899: LD_VAR 0 3
19903: PPUSH
19904: LD_INT 1
19906: PPUSH
19907: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
19911: LD_INT 48
19913: PPUSH
19914: LD_VAR 0 3
19918: PPUSH
19919: LD_INT 1
19921: PPUSH
19922: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
19926: LD_INT 49
19928: PPUSH
19929: LD_VAR 0 3
19933: PPUSH
19934: LD_INT 1
19936: PPUSH
19937: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
19941: LD_INT 50
19943: PPUSH
19944: LD_VAR 0 3
19948: PPUSH
19949: LD_INT 1
19951: PPUSH
19952: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
19956: LD_INT 69
19958: PPUSH
19959: LD_VAR 0 3
19963: PPUSH
19964: LD_INT 1
19966: PPUSH
19967: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
19971: LD_INT 39
19973: PPUSH
19974: LD_VAR 0 3
19978: PPUSH
19979: LD_INT 1
19981: PPUSH
19982: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
19986: LD_INT 34
19988: PPUSH
19989: LD_VAR 0 3
19993: PPUSH
19994: LD_INT 1
19996: PPUSH
19997: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20001: LD_INT 42
20003: PPUSH
20004: LD_VAR 0 3
20008: PPUSH
20009: LD_INT 1
20011: PPUSH
20012: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20016: LD_INT 44
20018: PPUSH
20019: LD_VAR 0 3
20023: PPUSH
20024: LD_INT 1
20026: PPUSH
20027: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20031: LD_INT 41
20033: PPUSH
20034: LD_VAR 0 3
20038: PPUSH
20039: LD_INT 1
20041: PPUSH
20042: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
20046: LD_INT 13
20048: PPUSH
20049: LD_VAR 0 3
20053: PPUSH
20054: LD_INT 1
20056: PPUSH
20057: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
20061: LD_INT 40
20063: PPUSH
20064: LD_VAR 0 3
20068: PPUSH
20069: LD_INT 1
20071: PPUSH
20072: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20076: LD_INT 43
20078: PPUSH
20079: LD_VAR 0 3
20083: PPUSH
20084: LD_INT 1
20086: PPUSH
20087: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20091: LD_INT 70
20093: PPUSH
20094: LD_VAR 0 3
20098: PPUSH
20099: LD_INT 1
20101: PPUSH
20102: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
20106: LD_INT 23
20108: PPUSH
20109: LD_VAR 0 3
20113: PPUSH
20114: LD_INT 1
20116: PPUSH
20117: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20121: LD_INT 51
20123: PPUSH
20124: LD_VAR 0 3
20128: PPUSH
20129: LD_INT 1
20131: PPUSH
20132: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
20136: LD_INT 52
20138: PPUSH
20139: LD_VAR 0 3
20143: PPUSH
20144: LD_INT 1
20146: PPUSH
20147: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20151: LD_INT 6
20153: PPUSH
20154: LD_VAR 0 3
20158: PPUSH
20159: LD_INT 1
20161: PPUSH
20162: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
20166: LD_INT 15
20168: PPUSH
20169: LD_VAR 0 3
20173: PPUSH
20174: LD_INT 1
20176: PPUSH
20177: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
20181: LD_INT 7
20183: PPUSH
20184: LD_VAR 0 3
20188: PPUSH
20189: LD_INT 1
20191: PPUSH
20192: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
20196: LD_INT 12
20198: PPUSH
20199: LD_VAR 0 3
20203: PPUSH
20204: LD_INT 1
20206: PPUSH
20207: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
20211: LD_INT 10
20213: PPUSH
20214: LD_VAR 0 3
20218: PPUSH
20219: LD_INT 1
20221: PPUSH
20222: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
20226: LD_INT 17
20228: PPUSH
20229: LD_VAR 0 3
20233: PPUSH
20234: LD_INT 1
20236: PPUSH
20237: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
20241: LD_INT 18
20243: PPUSH
20244: LD_VAR 0 3
20248: PPUSH
20249: LD_INT 1
20251: PPUSH
20252: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
20256: LD_INT 60
20258: PPUSH
20259: LD_VAR 0 3
20263: PPUSH
20264: LD_INT 1
20266: PPUSH
20267: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
20271: LD_INT 61
20273: PPUSH
20274: LD_VAR 0 3
20278: PPUSH
20279: LD_INT 1
20281: PPUSH
20282: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
20286: LD_INT 32
20288: PPUSH
20289: LD_VAR 0 3
20293: PPUSH
20294: LD_INT 1
20296: PPUSH
20297: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
20301: LD_INT 27
20303: PPUSH
20304: LD_VAR 0 3
20308: PPUSH
20309: LD_INT 1
20311: PPUSH
20312: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
20316: LD_INT 36
20318: PPUSH
20319: LD_VAR 0 3
20323: PPUSH
20324: LD_INT 1
20326: PPUSH
20327: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
20331: LD_INT 33
20333: PPUSH
20334: LD_VAR 0 3
20338: PPUSH
20339: LD_INT 1
20341: PPUSH
20342: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
20346: LD_INT 9
20348: PPUSH
20349: LD_VAR 0 3
20353: PPUSH
20354: LD_INT 1
20356: PPUSH
20357: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
20361: LD_INT 38
20363: PPUSH
20364: LD_VAR 0 3
20368: PPUSH
20369: LD_INT 1
20371: PPUSH
20372: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
20376: LD_INT 57
20378: PPUSH
20379: LD_VAR 0 3
20383: PPUSH
20384: LD_INT 1
20386: PPUSH
20387: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
20391: LD_INT 58
20393: PPUSH
20394: LD_VAR 0 3
20398: PPUSH
20399: LD_INT 1
20401: PPUSH
20402: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
20406: LD_INT 28
20408: PPUSH
20409: LD_VAR 0 3
20413: PPUSH
20414: LD_INT 1
20416: PPUSH
20417: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
20421: LD_INT 29
20423: PPUSH
20424: LD_VAR 0 3
20428: PPUSH
20429: LD_INT 1
20431: PPUSH
20432: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
20436: LD_INT 30
20438: PPUSH
20439: LD_VAR 0 3
20443: PPUSH
20444: LD_INT 1
20446: PPUSH
20447: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
20451: LD_INT 37
20453: PPUSH
20454: LD_VAR 0 3
20458: PPUSH
20459: LD_INT 1
20461: PPUSH
20462: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
20466: LD_INT 63
20468: PPUSH
20469: LD_VAR 0 3
20473: PPUSH
20474: LD_INT 1
20476: PPUSH
20477: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
20481: LD_INT 64
20483: PPUSH
20484: LD_VAR 0 3
20488: PPUSH
20489: LD_INT 1
20491: PPUSH
20492: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
20496: LD_INT 3
20498: PPUSH
20499: LD_VAR 0 3
20503: PPUSH
20504: LD_INT 1
20506: PPUSH
20507: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
20511: LD_INT 4
20513: PPUSH
20514: LD_VAR 0 3
20518: PPUSH
20519: LD_INT 1
20521: PPUSH
20522: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20526: LD_INT 5
20528: PPUSH
20529: LD_VAR 0 3
20533: PPUSH
20534: LD_INT 1
20536: PPUSH
20537: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
20541: LD_INT 8
20543: PPUSH
20544: LD_VAR 0 3
20548: PPUSH
20549: LD_INT 1
20551: PPUSH
20552: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20556: LD_INT 66
20558: PPUSH
20559: LD_VAR 0 3
20563: PPUSH
20564: LD_INT 1
20566: PPUSH
20567: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
20571: LD_INT 67
20573: PPUSH
20574: LD_VAR 0 3
20578: PPUSH
20579: LD_INT 1
20581: PPUSH
20582: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20586: LD_INT 21
20588: PPUSH
20589: LD_VAR 0 3
20593: PPUSH
20594: LD_INT 1
20596: PPUSH
20597: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20601: LD_INT 22
20603: PPUSH
20604: LD_VAR 0 3
20608: PPUSH
20609: LD_INT 1
20611: PPUSH
20612: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
20616: LD_INT 19
20618: PPUSH
20619: LD_VAR 0 3
20623: PPUSH
20624: LD_INT 1
20626: PPUSH
20627: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
20631: LD_INT 26
20633: PPUSH
20634: LD_VAR 0 3
20638: PPUSH
20639: LD_INT 1
20641: PPUSH
20642: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20646: LD_INT 54
20648: PPUSH
20649: LD_VAR 0 3
20653: PPUSH
20654: LD_INT 1
20656: PPUSH
20657: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
20661: LD_INT 55
20663: PPUSH
20664: LD_VAR 0 3
20668: PPUSH
20669: LD_INT 1
20671: PPUSH
20672: CALL_OW 322
// for i = 0 to 39 do
20676: LD_ADDR_VAR 0 4
20680: PUSH
20681: DOUBLE
20682: LD_INT 0
20684: DEC
20685: ST_TO_ADDR
20686: LD_INT 39
20688: PUSH
20689: FOR_TO
20690: IFFALSE 20711
// SetRestrict ( i , side , true ) ;
20692: LD_VAR 0 4
20696: PPUSH
20697: LD_VAR 0 3
20701: PPUSH
20702: LD_INT 1
20704: PPUSH
20705: CALL_OW 324
20709: GO 20689
20711: POP
20712: POP
// end ; else
20713: GO 20790
20715: POP
// begin for i = 1 to 73 do
20716: LD_ADDR_VAR 0 4
20720: PUSH
20721: DOUBLE
20722: LD_INT 1
20724: DEC
20725: ST_TO_ADDR
20726: LD_INT 73
20728: PUSH
20729: FOR_TO
20730: IFFALSE 20751
// SetTech ( i , side , state_enabled ) ;
20732: LD_VAR 0 4
20736: PPUSH
20737: LD_VAR 0 3
20741: PPUSH
20742: LD_INT 1
20744: PPUSH
20745: CALL_OW 322
20749: GO 20729
20751: POP
20752: POP
// for i = 0 to 39 do
20753: LD_ADDR_VAR 0 4
20757: PUSH
20758: DOUBLE
20759: LD_INT 0
20761: DEC
20762: ST_TO_ADDR
20763: LD_INT 39
20765: PUSH
20766: FOR_TO
20767: IFFALSE 20788
// SetRestrict ( i , side , true ) ;
20769: LD_VAR 0 4
20773: PPUSH
20774: LD_VAR 0 3
20778: PPUSH
20779: LD_INT 1
20781: PPUSH
20782: CALL_OW 324
20786: GO 20766
20788: POP
20789: POP
// end ; end ; end ;
20790: GO 16795
20792: POP
20793: POP
// end ; end_of_file
20794: LD_VAR 0 2
20798: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
20799: LD_INT 0
20801: PPUSH
20802: PPUSH
20803: PPUSH
20804: PPUSH
20805: PPUSH
20806: PPUSH
20807: PPUSH
20808: PPUSH
20809: PPUSH
// for i := 1 to 8 do
20810: LD_ADDR_VAR 0 2
20814: PUSH
20815: DOUBLE
20816: LD_INT 1
20818: DEC
20819: ST_TO_ADDR
20820: LD_INT 8
20822: PUSH
20823: FOR_TO
20824: IFFALSE 21208
// begin if Side_Positions [ i ] then
20826: LD_EXP 43
20830: PUSH
20831: LD_VAR 0 2
20835: ARRAY
20836: IFFALSE 21206
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
20838: LD_ADDR_VAR 0 7
20842: PUSH
20843: LD_INT 22
20845: PUSH
20846: LD_VAR 0 2
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 21
20857: PUSH
20858: LD_INT 1
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PPUSH
20869: CALL_OW 69
20873: PUSH
20874: LD_INT 0
20876: PLUS
20877: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20878: LD_ADDR_VAR 0 9
20882: PUSH
20883: LD_INT 22
20885: PUSH
20886: LD_VAR 0 2
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 2
20897: PUSH
20898: LD_INT 30
20900: PUSH
20901: LD_INT 0
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 30
20910: PUSH
20911: LD_INT 1
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: LIST
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PPUSH
20927: CALL_OW 69
20931: ST_TO_ADDR
// crates := 0 ;
20932: LD_ADDR_VAR 0 4
20936: PUSH
20937: LD_INT 0
20939: ST_TO_ADDR
// oil := 0 ;
20940: LD_ADDR_VAR 0 5
20944: PUSH
20945: LD_INT 0
20947: ST_TO_ADDR
// sib := 0 ;
20948: LD_ADDR_VAR 0 6
20952: PUSH
20953: LD_INT 0
20955: ST_TO_ADDR
// if bases then
20956: LD_VAR 0 9
20960: IFFALSE 21066
// begin for j in bases do
20962: LD_ADDR_VAR 0 3
20966: PUSH
20967: LD_VAR 0 9
20971: PUSH
20972: FOR_IN
20973: IFFALSE 21064
// begin base := GetBase ( j ) ;
20975: LD_ADDR_VAR 0 8
20979: PUSH
20980: LD_VAR 0 3
20984: PPUSH
20985: CALL_OW 274
20989: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
20990: LD_ADDR_VAR 0 4
20994: PUSH
20995: LD_VAR 0 4
20999: PUSH
21000: LD_VAR 0 8
21004: PPUSH
21005: LD_INT 1
21007: PPUSH
21008: CALL_OW 275
21012: PLUS
21013: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
21014: LD_ADDR_VAR 0 5
21018: PUSH
21019: LD_VAR 0 5
21023: PUSH
21024: LD_VAR 0 8
21028: PPUSH
21029: LD_INT 2
21031: PPUSH
21032: CALL_OW 275
21036: PLUS
21037: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
21038: LD_ADDR_VAR 0 6
21042: PUSH
21043: LD_VAR 0 6
21047: PUSH
21048: LD_VAR 0 8
21052: PPUSH
21053: LD_INT 3
21055: PPUSH
21056: CALL_OW 275
21060: PLUS
21061: ST_TO_ADDR
// end ;
21062: GO 20972
21064: POP
21065: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
21066: LD_STRING setSpecText(
21068: PUSH
21069: LD_VAR 0 2
21073: STR
21074: PUSH
21075: LD_STRING ,
21077: STR
21078: PUSH
21079: LD_INT 2
21081: STR
21082: PUSH
21083: LD_STRING ,
21085: STR
21086: PUSH
21087: LD_VAR 0 4
21091: STR
21092: PUSH
21093: LD_STRING )
21095: STR
21096: PPUSH
21097: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
21101: LD_STRING setSpecText(
21103: PUSH
21104: LD_VAR 0 2
21108: STR
21109: PUSH
21110: LD_STRING ,
21112: STR
21113: PUSH
21114: LD_INT 3
21116: STR
21117: PUSH
21118: LD_STRING ,
21120: STR
21121: PUSH
21122: LD_VAR 0 5
21126: STR
21127: PUSH
21128: LD_STRING )
21130: STR
21131: PPUSH
21132: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
21136: LD_STRING setSpecText(
21138: PUSH
21139: LD_VAR 0 2
21143: STR
21144: PUSH
21145: LD_STRING ,
21147: STR
21148: PUSH
21149: LD_INT 4
21151: STR
21152: PUSH
21153: LD_STRING ,
21155: STR
21156: PUSH
21157: LD_VAR 0 6
21161: STR
21162: PUSH
21163: LD_STRING )
21165: STR
21166: PPUSH
21167: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
21171: LD_STRING setSpecText(
21173: PUSH
21174: LD_VAR 0 2
21178: STR
21179: PUSH
21180: LD_STRING ,
21182: STR
21183: PUSH
21184: LD_INT 5
21186: STR
21187: PUSH
21188: LD_STRING ,
21190: STR
21191: PUSH
21192: LD_VAR 0 7
21196: STR
21197: PUSH
21198: LD_STRING )
21200: STR
21201: PPUSH
21202: CALL_OW 559
// end ; end ;
21206: GO 20823
21208: POP
21209: POP
// end ;
21210: LD_VAR 0 1
21214: RET
// every 0 0$1 do
21215: GO 21217
21217: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
21218: LD_STRING setSpecLogoNumber(
21220: PUSH
21221: LD_INT 2
21223: STR
21224: PUSH
21225: LD_STRING ,
21227: STR
21228: PUSH
21229: LD_INT 1
21231: STR
21232: PUSH
21233: LD_STRING )
21235: STR
21236: PPUSH
21237: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
21241: LD_STRING setSpecLogoNumber(
21243: PUSH
21244: LD_INT 3
21246: STR
21247: PUSH
21248: LD_STRING ,
21250: STR
21251: PUSH
21252: LD_INT 2
21254: STR
21255: PUSH
21256: LD_STRING )
21258: STR
21259: PPUSH
21260: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
21264: LD_STRING setSpecLogoNumber(
21266: PUSH
21267: LD_INT 4
21269: STR
21270: PUSH
21271: LD_STRING ,
21273: STR
21274: PUSH
21275: LD_INT 3
21277: STR
21278: PUSH
21279: LD_STRING )
21281: STR
21282: PPUSH
21283: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
21287: LD_STRING setSpecLogoNumber(
21289: PUSH
21290: LD_INT 5
21292: STR
21293: PUSH
21294: LD_STRING ,
21296: STR
21297: PUSH
21298: LD_INT 4
21300: STR
21301: PUSH
21302: LD_STRING )
21304: STR
21305: PPUSH
21306: CALL_OW 559
// end ;
21310: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
21311: LD_INT 2
21313: PUSH
21314: LD_INT 30
21316: PUSH
21317: LD_INT 0
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 30
21326: PUSH
21327: LD_INT 1
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: LIST
21338: PPUSH
21339: CALL_OW 69
21343: IFFALSE 21353
21345: GO 21347
21347: DISABLE
// begin enable ;
21348: ENABLE
// UpdateSpectatorBar ;
21349: CALL 20799 0 0
// end ; end_of_file
21353: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
21354: LD_INT 0
21356: PPUSH
21357: PPUSH
21358: PPUSH
// BuildUpTime_Delay = 0 ;
21359: LD_ADDR_EXP 71
21363: PUSH
21364: LD_INT 0
21366: ST_TO_ADDR
// if not def_builduptime then
21367: LD_EXP 17
21371: NOT
21372: IFFALSE 21376
// exit ;
21374: GO 21559
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
21376: LD_ADDR_EXP 71
21380: PUSH
21381: LD_INT 8400
21383: PUSH
21384: LD_INT 2100
21386: PUSH
21387: LD_EXP 17
21391: MUL
21392: PLUS
21393: ST_TO_ADDR
// BuildUpTimeActive := true ;
21394: LD_ADDR_EXP 70
21398: PUSH
21399: LD_INT 1
21401: ST_TO_ADDR
// for i := 1 to 8 do
21402: LD_ADDR_VAR 0 2
21406: PUSH
21407: DOUBLE
21408: LD_INT 1
21410: DEC
21411: ST_TO_ADDR
21412: LD_INT 8
21414: PUSH
21415: FOR_TO
21416: IFFALSE 21557
// if Side_Positions [ i ] then
21418: LD_EXP 43
21422: PUSH
21423: LD_VAR 0 2
21427: ARRAY
21428: IFFALSE 21555
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
21430: LD_EXP 69
21434: PUSH
21435: LD_EXP 43
21439: PUSH
21440: LD_VAR 0 2
21444: ARRAY
21445: ARRAY
21446: PPUSH
21447: LD_INT 5
21449: PPUSH
21450: CALL_OW 424
// for j := 1 to 8 do
21454: LD_ADDR_VAR 0 3
21458: PUSH
21459: DOUBLE
21460: LD_INT 1
21462: DEC
21463: ST_TO_ADDR
21464: LD_INT 8
21466: PUSH
21467: FOR_TO
21468: IFFALSE 21553
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
21470: LD_EXP 43
21474: PUSH
21475: LD_VAR 0 3
21479: ARRAY
21480: PUSH
21481: LD_EXP 40
21485: PUSH
21486: LD_VAR 0 2
21490: ARRAY
21491: PUSH
21492: LD_EXP 40
21496: PUSH
21497: LD_VAR 0 3
21501: ARRAY
21502: NONEQUAL
21503: PUSH
21504: LD_EXP 45
21508: NOT
21509: PUSH
21510: LD_VAR 0 2
21514: PUSH
21515: LD_VAR 0 3
21519: NONEQUAL
21520: AND
21521: OR
21522: AND
21523: IFFALSE 21551
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
21525: LD_VAR 0 3
21529: PPUSH
21530: LD_EXP 69
21534: PUSH
21535: LD_EXP 43
21539: PUSH
21540: LD_VAR 0 2
21544: ARRAY
21545: ARRAY
21546: PPUSH
21547: CALL_OW 333
21551: GO 21467
21553: POP
21554: POP
// end ;
21555: GO 21415
21557: POP
21558: POP
// end ;
21559: LD_VAR 0 1
21563: RET
// export function EndBuildUp ; var i , j ; begin
21564: LD_INT 0
21566: PPUSH
21567: PPUSH
21568: PPUSH
// BuildUpTimeActive := false ;
21569: LD_ADDR_EXP 70
21573: PUSH
21574: LD_INT 0
21576: ST_TO_ADDR
// for i := 1 to 8 do
21577: LD_ADDR_VAR 0 2
21581: PUSH
21582: DOUBLE
21583: LD_INT 1
21585: DEC
21586: ST_TO_ADDR
21587: LD_INT 8
21589: PUSH
21590: FOR_TO
21591: IFFALSE 21732
// if Side_Positions [ i ] then
21593: LD_EXP 43
21597: PUSH
21598: LD_VAR 0 2
21602: ARRAY
21603: IFFALSE 21730
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
21605: LD_EXP 69
21609: PUSH
21610: LD_EXP 43
21614: PUSH
21615: LD_VAR 0 2
21619: ARRAY
21620: ARRAY
21621: PPUSH
21622: LD_INT 0
21624: PPUSH
21625: CALL_OW 424
// for j := 1 to 8 do
21629: LD_ADDR_VAR 0 3
21633: PUSH
21634: DOUBLE
21635: LD_INT 1
21637: DEC
21638: ST_TO_ADDR
21639: LD_INT 8
21641: PUSH
21642: FOR_TO
21643: IFFALSE 21728
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
21645: LD_EXP 43
21649: PUSH
21650: LD_VAR 0 3
21654: ARRAY
21655: PUSH
21656: LD_EXP 40
21660: PUSH
21661: LD_VAR 0 2
21665: ARRAY
21666: PUSH
21667: LD_EXP 40
21671: PUSH
21672: LD_VAR 0 3
21676: ARRAY
21677: NONEQUAL
21678: PUSH
21679: LD_EXP 45
21683: NOT
21684: PUSH
21685: LD_VAR 0 2
21689: PUSH
21690: LD_VAR 0 3
21694: NONEQUAL
21695: AND
21696: OR
21697: AND
21698: IFFALSE 21726
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
21700: LD_VAR 0 3
21704: PPUSH
21705: LD_EXP 69
21709: PUSH
21710: LD_EXP 43
21714: PUSH
21715: LD_VAR 0 2
21719: ARRAY
21720: ARRAY
21721: PPUSH
21722: CALL_OW 334
21726: GO 21642
21728: POP
21729: POP
// end ;
21730: GO 21590
21732: POP
21733: POP
// end ;
21734: LD_VAR 0 1
21738: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
21739: LD_EXP 70
21743: IFFALSE 21918
21745: GO 21747
21747: DISABLE
21748: LD_INT 0
21750: PPUSH
21751: PPUSH
// begin for i := 1 to 8 do
21752: LD_ADDR_VAR 0 1
21756: PUSH
21757: DOUBLE
21758: LD_INT 1
21760: DEC
21761: ST_TO_ADDR
21762: LD_INT 8
21764: PUSH
21765: FOR_TO
21766: IFFALSE 21915
// if Side_Positions [ i ] then
21768: LD_EXP 43
21772: PUSH
21773: LD_VAR 0 1
21777: ARRAY
21778: IFFALSE 21913
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
21780: LD_ADDR_VAR 0 2
21784: PUSH
21785: LD_EXP 69
21789: PUSH
21790: LD_EXP 43
21794: PUSH
21795: LD_VAR 0 1
21799: ARRAY
21800: ARRAY
21801: PPUSH
21802: LD_INT 2
21804: PUSH
21805: LD_INT 21
21807: PUSH
21808: LD_INT 1
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 21
21817: PUSH
21818: LD_INT 2
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 22
21832: PUSH
21833: LD_OWVAR 2
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PPUSH
21846: CALL_OW 70
21850: PUSH
21851: FOR_IN
21852: IFFALSE 21911
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
21854: LD_EXP 40
21858: PUSH
21859: LD_VAR 0 1
21863: ARRAY
21864: PUSH
21865: LD_EXP 40
21869: PUSH
21870: LD_OWVAR 2
21874: ARRAY
21875: NONEQUAL
21876: PUSH
21877: LD_EXP 45
21881: NOT
21882: PUSH
21883: LD_VAR 0 1
21887: PUSH
21888: LD_OWVAR 2
21892: NONEQUAL
21893: AND
21894: OR
21895: IFFALSE 21909
// ComMoveToArea ( un , BuildUpEscape ) ;
21897: LD_VAR 0 2
21901: PPUSH
21902: LD_INT 28
21904: PPUSH
21905: CALL_OW 113
21909: GO 21851
21911: POP
21912: POP
21913: GO 21765
21915: POP
21916: POP
// enable ;
21917: ENABLE
// end ;
21918: PPOPN 2
21920: END
// every 0 0$1 trigger def_builduptime do
21921: LD_EXP 17
21925: IFFALSE 21951
21927: GO 21929
21929: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
21930: LD_INT 8400
21932: PUSH
21933: LD_EXP 17
21937: PUSH
21938: LD_INT 2100
21940: MUL
21941: PLUS
21942: PPUSH
21943: CALL_OW 67
// EndBuildUp ;
21947: CALL 21564 0 0
// end ;
21951: END
