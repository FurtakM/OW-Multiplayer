// export def_main_base , def_secondary_base , def_defence_level , def_amount_of_people , def_initial_level , def_main_deposits , def_secondary_deposits , def_siberite_detection , def_starting_resources , def_shipments_density , def_people_arrivals , def_people_loyality , def_people_info , def_morale_flags , def_siberite_bomb , def_amount_of_apemen , def_builduptime , def_win_rules , def_people_respawning ; export is_depot , number_of_people , number_of_pplants , are_mines , is_lab , is_fact , is_arm , are_breastworks , deposits , initial_level , starting_crates , starting_resources , shipments_density , max_arriving_times , text_info , fog_info , def_bf_params , amount_of_apemen , siberite_bomb_Delay ; export Positions , Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export second_side , third_nation ; export start_def , depots_def , breastworks_def , labs_def , factories_def , armories_def , pplants_def , deposits_def ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i ; var u1 , u2 , pom_tab , p1 , p2 , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
  73: PPUSH
  74: PPUSH
  75: PPUSH
  76: PPUSH
  77: PPUSH
  78: PPUSH
  79: PPUSH
  80: PPUSH
  81: PPUSH
  82: PPUSH
  83: PPUSH
// if MultiPlayer then
  84: LD_OWVAR 4
  88: IFFALSE 162
// begin Game_Type = mp_game_type ;
  90: LD_ADDR_EXP 67
  94: PUSH
  95: LD_OWVAR 6
  99: ST_TO_ADDR
// Your_Side = mp_player_side ;
 100: LD_ADDR_OWVAR 2
 104: PUSH
 105: LD_OWVAR 7
 109: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_OWVAR 17
 119: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 120: LD_ADDR_EXP 40
 124: PUSH
 125: LD_OWVAR 15
 129: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 130: LD_ADDR_EXP 44
 134: PUSH
 135: LD_OWVAR 16
 139: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 140: LD_ADDR_EXP 42
 144: PUSH
 145: CALL 0 0 0
 149: ST_TO_ADDR
// Teams = mp_teams ;
 150: LD_ADDR_EXP 41
 154: PUSH
 155: LD_OWVAR 12
 159: ST_TO_ADDR
// end else
 160: GO 333
// begin Your_Side = 3 ;
 162: LD_ADDR_OWVAR 2
 166: PUSH
 167: LD_INT 3
 169: ST_TO_ADDR
// Side_Positions = [ 0 , 0 , 2 , 0 , 1 , 0 , 0 , 0 ] ;
 170: LD_ADDR_EXP 43
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 2
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 1
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: LD_INT 0
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: LIST
 208: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 209: LD_ADDR_EXP 40
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: LD_INT 0
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: LIST
 246: LIST
 247: ST_TO_ADDR
// Side_Nations = [ 0 , 0 , 3 , 0 , 2 , 0 , 0 , 0 ] ;
 248: LD_ADDR_EXP 44
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 3
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 2
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: LIST
 286: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 287: LD_ADDR_EXP 42
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: ST_TO_ADDR
// Teams = [ ] ;
 326: LD_ADDR_EXP 41
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ; for i := 1 to 8 do
 333: LD_ADDR_VAR 0 8
 337: PUSH
 338: DOUBLE
 339: LD_INT 1
 341: DEC
 342: ST_TO_ADDR
 343: LD_INT 8
 345: PUSH
 346: FOR_TO
 347: IFFALSE 434
// if Multiplayer_GetPlayerIsSpec ( i ) then
 349: LD_VAR 0 8
 353: PPUSH
 354: CALL_OW 530
 358: IFFALSE 432
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 360: LD_ADDR_EXP 43
 364: PUSH
 365: LD_EXP 43
 369: PPUSH
 370: LD_VAR 0 8
 374: PPUSH
 375: LD_INT 0
 377: PPUSH
 378: CALL_OW 1
 382: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 383: LD_ADDR_EXP 41
 387: PUSH
 388: LD_EXP 41
 392: PPUSH
 393: LD_EXP 40
 397: PUSH
 398: LD_VAR 0 8
 402: ARRAY
 403: PPUSH
 404: LD_EXP 41
 408: PUSH
 409: LD_EXP 40
 413: PUSH
 414: LD_VAR 0 8
 418: ARRAY
 419: ARRAY
 420: PUSH
 421: LD_VAR 0 8
 425: DIFF
 426: PPUSH
 427: CALL_OW 1
 431: ST_TO_ADDR
// end ;
 432: GO 346
 434: POP
 435: POP
// Position_Sides := [ 0 , 0 ] ;
 436: LD_ADDR_EXP 46
 440: PUSH
 441: LD_INT 0
 443: PUSH
 444: LD_INT 0
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// for i := 1 to 8 do
 451: LD_ADDR_VAR 0 8
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_INT 8
 463: PUSH
 464: FOR_TO
 465: IFFALSE 512
// if Side_Positions [ i ] then
 467: LD_EXP 43
 471: PUSH
 472: LD_VAR 0 8
 476: ARRAY
 477: IFFALSE 510
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 479: LD_ADDR_EXP 46
 483: PUSH
 484: LD_EXP 46
 488: PPUSH
 489: LD_EXP 43
 493: PUSH
 494: LD_VAR 0 8
 498: ARRAY
 499: PPUSH
 500: LD_VAR 0 8
 504: PPUSH
 505: CALL_OW 1
 509: ST_TO_ADDR
 510: GO 464
 512: POP
 513: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 514: LD_ADDR_EXP 45
 518: PUSH
 519: LD_EXP 40
 523: PUSH
 524: LD_INT 0
 526: PUSH
 527: EMPTY
 528: LIST
 529: DIFF
 530: PUSH
 531: LD_INT 1
 533: GREATER
 534: ST_TO_ADDR
// p1 := 0 ;
 535: LD_ADDR_VAR 0 12
 539: PUSH
 540: LD_INT 0
 542: ST_TO_ADDR
// p2 := 0 ;
 543: LD_ADDR_VAR 0 13
 547: PUSH
 548: LD_INT 0
 550: ST_TO_ADDR
// for i := 1 to 8 do
 551: LD_ADDR_VAR 0 8
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 8
 563: PUSH
 564: FOR_TO
 565: IFFALSE 623
// if Side_Positions [ i ] = 1 then
 567: LD_EXP 43
 571: PUSH
 572: LD_VAR 0 8
 576: ARRAY
 577: PUSH
 578: LD_INT 1
 580: EQUAL
 581: IFFALSE 595
// p1 := i else
 583: LD_ADDR_VAR 0 12
 587: PUSH
 588: LD_VAR 0 8
 592: ST_TO_ADDR
 593: GO 621
// if Side_Positions [ i ] = 2 then
 595: LD_EXP 43
 599: PUSH
 600: LD_VAR 0 8
 604: ARRAY
 605: PUSH
 606: LD_INT 2
 608: EQUAL
 609: IFFALSE 621
// p2 := i ;
 611: LD_ADDR_VAR 0 13
 615: PUSH
 616: LD_VAR 0 8
 620: ST_TO_ADDR
 621: GO 564
 623: POP
 624: POP
// Positions := [ p1 , p2 ] ;
 625: LD_ADDR_EXP 39
 629: PUSH
 630: LD_VAR 0 12
 634: PUSH
 635: LD_VAR 0 13
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: ST_TO_ADDR
// if MultiPlayer then
 644: LD_OWVAR 4
 648: IFFALSE 902
// begin def_main_base = GetMultiplayerSetting ( 0 ) ;
 650: LD_ADDR_EXP 1
 654: PUSH
 655: LD_INT 0
 657: PPUSH
 658: CALL_OW 426
 662: ST_TO_ADDR
// def_secondary_base = GetMultiplayerSetting ( 1 ) ;
 663: LD_ADDR_EXP 2
 667: PUSH
 668: LD_INT 1
 670: PPUSH
 671: CALL_OW 426
 675: ST_TO_ADDR
// def_defence_level = GetMultiplayerSetting ( 2 ) ;
 676: LD_ADDR_EXP 3
 680: PUSH
 681: LD_INT 2
 683: PPUSH
 684: CALL_OW 426
 688: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 3 ) ;
 689: LD_ADDR_EXP 4
 693: PUSH
 694: LD_INT 3
 696: PPUSH
 697: CALL_OW 426
 701: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 4 ) ;
 702: LD_ADDR_EXP 5
 706: PUSH
 707: LD_INT 4
 709: PPUSH
 710: CALL_OW 426
 714: ST_TO_ADDR
// def_main_deposits = GetMultiplayerSetting ( 5 ) ;
 715: LD_ADDR_EXP 6
 719: PUSH
 720: LD_INT 5
 722: PPUSH
 723: CALL_OW 426
 727: ST_TO_ADDR
// def_secondary_deposits = GetMultiplayerSetting ( 6 ) ;
 728: LD_ADDR_EXP 7
 732: PUSH
 733: LD_INT 6
 735: PPUSH
 736: CALL_OW 426
 740: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 7 ) ;
 741: LD_ADDR_EXP 8
 745: PUSH
 746: LD_INT 7
 748: PPUSH
 749: CALL_OW 426
 753: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 8 ) ;
 754: LD_ADDR_EXP 9
 758: PUSH
 759: LD_INT 8
 761: PPUSH
 762: CALL_OW 426
 766: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 9 ) ;
 767: LD_ADDR_EXP 10
 771: PUSH
 772: LD_INT 9
 774: PPUSH
 775: CALL_OW 426
 779: ST_TO_ADDR
// def_people_arrivals = GetMultiplayerSetting ( 10 ) ;
 780: LD_ADDR_EXP 11
 784: PUSH
 785: LD_INT 10
 787: PPUSH
 788: CALL_OW 426
 792: ST_TO_ADDR
// def_people_loyality = GetMultiplayerSetting ( 11 ) ;
 793: LD_ADDR_EXP 12
 797: PUSH
 798: LD_INT 11
 800: PPUSH
 801: CALL_OW 426
 805: ST_TO_ADDR
// def_people_info = GetMultiplayerSetting ( 12 ) ;
 806: LD_ADDR_EXP 13
 810: PUSH
 811: LD_INT 12
 813: PPUSH
 814: CALL_OW 426
 818: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 15 ) ;
 819: LD_ADDR_EXP 14
 823: PUSH
 824: LD_INT 15
 826: PPUSH
 827: CALL_OW 426
 831: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 16 ) ;
 832: LD_ADDR_EXP 15
 836: PUSH
 837: LD_INT 16
 839: PPUSH
 840: CALL_OW 426
 844: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 17 ) ;
 845: LD_ADDR_EXP 16
 849: PUSH
 850: LD_INT 17
 852: PPUSH
 853: CALL_OW 426
 857: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 858: LD_ADDR_EXP 17
 862: PUSH
 863: LD_INT 20
 865: PPUSH
 866: CALL_OW 426
 870: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 871: LD_ADDR_VAR 0 14
 875: PUSH
 876: LD_INT 22
 878: PPUSH
 879: CALL_OW 426
 883: ST_TO_ADDR
// def_people_respawning = 0 ;
 884: LD_ADDR_EXP 19
 888: PUSH
 889: LD_INT 0
 891: ST_TO_ADDR
// def_win_rules = 0 ;
 892: LD_ADDR_EXP 18
 896: PUSH
 897: LD_INT 0
 899: ST_TO_ADDR
// end else
 900: GO 1074
// begin randomize ;
 902: CALL_OW 10
// def_main_base = 1 ;
 906: LD_ADDR_EXP 1
 910: PUSH
 911: LD_INT 1
 913: ST_TO_ADDR
// def_secondary_base = 1 ;
 914: LD_ADDR_EXP 2
 918: PUSH
 919: LD_INT 1
 921: ST_TO_ADDR
// def_defence_level = 1 ;
 922: LD_ADDR_EXP 3
 926: PUSH
 927: LD_INT 1
 929: ST_TO_ADDR
// def_amount_of_people = 2 ;
 930: LD_ADDR_EXP 4
 934: PUSH
 935: LD_INT 2
 937: ST_TO_ADDR
// def_initial_level = 1 ;
 938: LD_ADDR_EXP 5
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// def_main_deposits = 2 ;
 946: LD_ADDR_EXP 6
 950: PUSH
 951: LD_INT 2
 953: ST_TO_ADDR
// def_secondary_deposits = 1 ;
 954: LD_ADDR_EXP 7
 958: PUSH
 959: LD_INT 1
 961: ST_TO_ADDR
// def_siberite_detection = 1 ;
 962: LD_ADDR_EXP 8
 966: PUSH
 967: LD_INT 1
 969: ST_TO_ADDR
// def_starting_resources = 2 ;
 970: LD_ADDR_EXP 9
 974: PUSH
 975: LD_INT 2
 977: ST_TO_ADDR
// def_shipments_density = 70 ;
 978: LD_ADDR_EXP 10
 982: PUSH
 983: LD_INT 70
 985: ST_TO_ADDR
// def_people_arrivals = 3 ;
 986: LD_ADDR_EXP 11
 990: PUSH
 991: LD_INT 3
 993: ST_TO_ADDR
// def_people_loyality = 1 ;
 994: LD_ADDR_EXP 12
 998: PUSH
 999: LD_INT 1
1001: ST_TO_ADDR
// def_people_info = 1 ;
1002: LD_ADDR_EXP 13
1006: PUSH
1007: LD_INT 1
1009: ST_TO_ADDR
// def_morale_flags = 2 ;
1010: LD_ADDR_EXP 14
1014: PUSH
1015: LD_INT 2
1017: ST_TO_ADDR
// def_siberite_bomb = 1 ;
1018: LD_ADDR_EXP 15
1022: PUSH
1023: LD_INT 1
1025: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
1026: LD_ADDR_EXP 16
1030: PUSH
1031: LD_INT 3
1033: ST_TO_ADDR
// def_builduptime = 1 ;
1034: LD_ADDR_EXP 17
1038: PUSH
1039: LD_INT 1
1041: ST_TO_ADDR
// def_game_rules = 0 ;
1042: LD_ADDR_EXP 68
1046: PUSH
1047: LD_INT 0
1049: ST_TO_ADDR
// tech_level = 4 ;
1050: LD_ADDR_VAR 0 14
1054: PUSH
1055: LD_INT 4
1057: ST_TO_ADDR
// def_people_respawning = 0 ;
1058: LD_ADDR_EXP 19
1062: PUSH
1063: LD_INT 0
1065: ST_TO_ADDR
// def_win_rules = 0 ;
1066: LD_ADDR_EXP 18
1070: PUSH
1071: LD_INT 0
1073: ST_TO_ADDR
// end ; InitGameRules ;
1074: CALL 14108 0 0
// if def_game_rules = 0 then
1078: LD_EXP 68
1082: PUSH
1083: LD_INT 0
1085: EQUAL
1086: IFFALSE 1113
// begin if isSGUI then
1088: LD_OWVAR 83
1092: IFFALSE 1100
// setMpTechs ( ) else
1094: CALL 17356 0 0
1098: GO 1113
// begin SetMpTechLevel ( tech_level + 1 ) ;
1100: LD_VAR 0 14
1104: PUSH
1105: LD_INT 1
1107: PLUS
1108: PPUSH
1109: CALL 17503 0 1
// end ; end ; u1 = [ 0 , 1 , 1 , 1 , 2 ] [ def_main_base + 1 ] ;
1113: LD_ADDR_VAR 0 9
1117: PUSH
1118: LD_INT 0
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 1
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: PUSH
1140: LD_EXP 1
1144: PUSH
1145: LD_INT 1
1147: PLUS
1148: ARRAY
1149: ST_TO_ADDR
// u2 = [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] ;
1150: LD_ADDR_VAR 0 10
1154: PUSH
1155: LD_INT 0
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 1
1163: PUSH
1164: LD_INT 2
1166: PUSH
1167: LD_INT 2
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: PUSH
1177: LD_EXP 1
1181: PUSH
1182: LD_INT 1
1184: PLUS
1185: ARRAY
1186: ST_TO_ADDR
// is_depot = [ [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] , [ 0 , 1 , 1 ] [ def_secondary_base + 1 ] ] ;
1187: LD_ADDR_EXP 20
1191: PUSH
1192: LD_INT 0
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: LD_INT 2
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: LIST
1211: LIST
1212: LIST
1213: PUSH
1214: LD_EXP 1
1218: PUSH
1219: LD_INT 1
1221: PLUS
1222: ARRAY
1223: PUSH
1224: LD_INT 0
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: LD_INT 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: LIST
1237: PUSH
1238: LD_EXP 2
1242: PUSH
1243: LD_INT 1
1245: PLUS
1246: ARRAY
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: ST_TO_ADDR
// if is_depot [ 2 ] then
1252: LD_EXP 20
1256: PUSH
1257: LD_INT 2
1259: ARRAY
1260: IFFALSE 1399
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ [ ] , [ 1 ] , [ 1 , 1 ] , [ 1 , 1 , 1 ] ] [ def_defence_level + 1 ] ] else
1262: LD_ADDR_EXP 27
1266: PUSH
1267: EMPTY
1268: PUSH
1269: LD_VAR 0 10
1273: PUSH
1274: LD_VAR 0 9
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: PUSH
1283: LD_VAR 0 10
1287: PUSH
1288: LD_VAR 0 10
1292: PUSH
1293: LD_VAR 0 9
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: LIST
1302: PUSH
1303: LD_VAR 0 10
1307: PUSH
1308: LD_VAR 0 10
1312: PUSH
1313: LD_VAR 0 9
1317: PUSH
1318: LD_VAR 0 9
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: PUSH
1335: LD_EXP 3
1339: PUSH
1340: LD_INT 1
1342: PLUS
1343: ARRAY
1344: PUSH
1345: EMPTY
1346: PUSH
1347: LD_INT 1
1349: PUSH
1350: EMPTY
1351: LIST
1352: PUSH
1353: LD_INT 1
1355: PUSH
1356: LD_INT 1
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: PUSH
1363: LD_INT 1
1365: PUSH
1366: LD_INT 1
1368: PUSH
1369: LD_INT 1
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: PUSH
1383: LD_EXP 3
1387: PUSH
1388: LD_INT 1
1390: PLUS
1391: ARRAY
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: ST_TO_ADDR
1397: GO 1488
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ ] ] ;
1399: LD_ADDR_EXP 27
1403: PUSH
1404: EMPTY
1405: PUSH
1406: LD_VAR 0 10
1410: PUSH
1411: LD_VAR 0 9
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: PUSH
1420: LD_VAR 0 10
1424: PUSH
1425: LD_VAR 0 10
1429: PUSH
1430: LD_VAR 0 9
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PUSH
1440: LD_VAR 0 10
1444: PUSH
1445: LD_VAR 0 10
1449: PUSH
1450: LD_VAR 0 9
1454: PUSH
1455: LD_VAR 0 9
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_EXP 3
1476: PUSH
1477: LD_INT 1
1479: PLUS
1480: ARRAY
1481: PUSH
1482: EMPTY
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: ST_TO_ADDR
// is_fact = [ [ 0 , 0 , 1 , 2 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1488: LD_ADDR_EXP 25
1492: PUSH
1493: LD_INT 0
1495: PUSH
1496: LD_INT 0
1498: PUSH
1499: LD_INT 1
1501: PUSH
1502: LD_INT 2
1504: PUSH
1505: LD_INT 2
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: PUSH
1515: LD_EXP 1
1519: PUSH
1520: LD_INT 1
1522: PLUS
1523: ARRAY
1524: PUSH
1525: LD_INT 0
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: ST_TO_ADDR
// is_lab = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1532: LD_ADDR_EXP 24
1536: PUSH
1537: LD_INT 0
1539: PUSH
1540: LD_INT 0
1542: PUSH
1543: LD_INT 1
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: LD_INT 2
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: PUSH
1559: LD_EXP 1
1563: PUSH
1564: LD_INT 1
1566: PLUS
1567: ARRAY
1568: PUSH
1569: LD_INT 0
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: ST_TO_ADDR
// is_arm = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1576: LD_ADDR_EXP 26
1580: PUSH
1581: LD_INT 0
1583: PUSH
1584: LD_INT 0
1586: PUSH
1587: LD_INT 1
1589: PUSH
1590: LD_INT 1
1592: PUSH
1593: LD_INT 2
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: LD_EXP 1
1607: PUSH
1608: LD_INT 1
1610: PLUS
1611: ARRAY
1612: PUSH
1613: LD_INT 0
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: ST_TO_ADDR
// are_mines = [ [ 0 , 0 , 0 , 1 , 1 ] [ def_main_base + 1 ] , [ 0 , 0 , 1 ] [ def_secondary_base + 1 ] ] ;
1620: LD_ADDR_EXP 23
1624: PUSH
1625: LD_INT 0
1627: PUSH
1628: LD_INT 0
1630: PUSH
1631: LD_INT 0
1633: PUSH
1634: LD_INT 1
1636: PUSH
1637: LD_INT 1
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: PUSH
1647: LD_EXP 1
1651: PUSH
1652: LD_INT 1
1654: PLUS
1655: ARRAY
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: LD_INT 0
1662: PUSH
1663: LD_INT 1
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_EXP 2
1675: PUSH
1676: LD_INT 1
1678: PLUS
1679: ARRAY
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: ST_TO_ADDR
// number_of_pplants = [ [ 0 , 0 , 0 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1685: LD_ADDR_EXP 22
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: LD_INT 0
1695: PUSH
1696: LD_INT 0
1698: PUSH
1699: LD_INT 1
1701: PUSH
1702: LD_INT 2
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: PUSH
1712: LD_EXP 1
1716: PUSH
1717: LD_INT 1
1719: PLUS
1720: ARRAY
1721: PUSH
1722: LD_INT 0
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: ST_TO_ADDR
// number_of_people = [ [ 5 , 8 , 11 ] [ def_amount_of_people + 1 ] , ( [ 2 , 3 , 4 ] [ def_amount_of_people + 1 ] ) * is_depot [ 2 ] ] ;
1729: LD_ADDR_EXP 21
1733: PUSH
1734: LD_INT 5
1736: PUSH
1737: LD_INT 8
1739: PUSH
1740: LD_INT 11
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: LD_EXP 4
1752: PUSH
1753: LD_INT 1
1755: PLUS
1756: ARRAY
1757: PUSH
1758: LD_INT 2
1760: PUSH
1761: LD_INT 3
1763: PUSH
1764: LD_INT 4
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_EXP 4
1776: PUSH
1777: LD_INT 1
1779: PLUS
1780: ARRAY
1781: PUSH
1782: LD_EXP 20
1786: PUSH
1787: LD_INT 2
1789: ARRAY
1790: MUL
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
1796: LD_ADDR_EXP 29
1800: PUSH
1801: LD_INT 2
1803: PUSH
1804: LD_INT 3
1806: PUSH
1807: LD_INT 4
1809: PUSH
1810: LD_INT 5
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_EXP 5
1823: PUSH
1824: LD_INT 1
1826: PLUS
1827: ARRAY
1828: ST_TO_ADDR
// starting_resources = [ [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] , [ [ 50 , 0 , 0 ] , [ 20 , 0 , 0 ] ] , [ [ 150 , 30 , 0 ] , [ 60 , 0 , 0 ] ] , [ [ 250 , 50 , 10 ] , [ 100 , 30 , 0 ] ] ] [ def_starting_resources + 1 ] ;
1829: LD_ADDR_EXP 31
1833: PUSH
1834: LD_INT 0
1836: PUSH
1837: LD_INT 0
1839: PUSH
1840: LD_INT 0
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: LIST
1847: PUSH
1848: LD_INT 0
1850: PUSH
1851: LD_INT 0
1853: PUSH
1854: LD_INT 0
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: PUSH
1866: LD_INT 50
1868: PUSH
1869: LD_INT 0
1871: PUSH
1872: LD_INT 0
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 20
1882: PUSH
1883: LD_INT 0
1885: PUSH
1886: LD_INT 0
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: LD_INT 150
1900: PUSH
1901: LD_INT 30
1903: PUSH
1904: LD_INT 0
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: LIST
1911: PUSH
1912: LD_INT 60
1914: PUSH
1915: LD_INT 0
1917: PUSH
1918: LD_INT 0
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: LIST
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: PUSH
1930: LD_INT 250
1932: PUSH
1933: LD_INT 50
1935: PUSH
1936: LD_INT 10
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: LIST
1943: PUSH
1944: LD_INT 100
1946: PUSH
1947: LD_INT 30
1949: PUSH
1950: LD_INT 0
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: LIST
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: PUSH
1968: LD_EXP 9
1972: PUSH
1973: LD_INT 1
1975: PLUS
1976: ARRAY
1977: ST_TO_ADDR
// shipments_density := 380 - ( def_shipments_density * 2 ) ;
1978: LD_ADDR_EXP 32
1982: PUSH
1983: LD_INT 380
1985: PUSH
1986: LD_EXP 10
1990: PUSH
1991: LD_INT 2
1993: MUL
1994: MINUS
1995: ST_TO_ADDR
// max_arriving_times = [ [ ] , [ 10 , 17 , 26 , 36 , 48 , 60 ] , [ 6 , 10 , 15 , 20 , 26 , 32 , 38 , 45 , 52 , 60 ] , [ 4 , 6 , 9 , 12 , 16 , 20 , 24 , 28 , 32 , 36 , 40 , 45 , 50 , 55 , 60 ] ] [ def_people_arrivals + 1 ] ;
1996: LD_ADDR_EXP 33
2000: PUSH
2001: EMPTY
2002: PUSH
2003: LD_INT 10
2005: PUSH
2006: LD_INT 17
2008: PUSH
2009: LD_INT 26
2011: PUSH
2012: LD_INT 36
2014: PUSH
2015: LD_INT 48
2017: PUSH
2018: LD_INT 60
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 6
2031: PUSH
2032: LD_INT 10
2034: PUSH
2035: LD_INT 15
2037: PUSH
2038: LD_INT 20
2040: PUSH
2041: LD_INT 26
2043: PUSH
2044: LD_INT 32
2046: PUSH
2047: LD_INT 38
2049: PUSH
2050: LD_INT 45
2052: PUSH
2053: LD_INT 52
2055: PUSH
2056: LD_INT 60
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: PUSH
2071: LD_INT 4
2073: PUSH
2074: LD_INT 6
2076: PUSH
2077: LD_INT 9
2079: PUSH
2080: LD_INT 12
2082: PUSH
2083: LD_INT 16
2085: PUSH
2086: LD_INT 20
2088: PUSH
2089: LD_INT 24
2091: PUSH
2092: LD_INT 28
2094: PUSH
2095: LD_INT 32
2097: PUSH
2098: LD_INT 36
2100: PUSH
2101: LD_INT 40
2103: PUSH
2104: LD_INT 45
2106: PUSH
2107: LD_INT 50
2109: PUSH
2110: LD_INT 55
2112: PUSH
2113: LD_INT 60
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: PUSH
2139: LD_EXP 11
2143: PUSH
2144: LD_INT 1
2146: PLUS
2147: ARRAY
2148: ST_TO_ADDR
// text_info = [ 0 , 1 , 0 , 1 ] [ def_people_info + 1 ] ;
2149: LD_ADDR_EXP 34
2153: PUSH
2154: LD_INT 0
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: LD_INT 0
2162: PUSH
2163: LD_INT 1
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: PUSH
2172: LD_EXP 13
2176: PUSH
2177: LD_INT 1
2179: PLUS
2180: ARRAY
2181: ST_TO_ADDR
// fog_info = [ 0 , 0 , 1 , 1 ] [ def_people_info + 1 ] ;
2182: LD_ADDR_EXP 35
2186: PUSH
2187: LD_INT 0
2189: PUSH
2190: LD_INT 0
2192: PUSH
2193: LD_INT 1
2195: PUSH
2196: LD_INT 1
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_EXP 13
2209: PUSH
2210: LD_INT 1
2212: PLUS
2213: ARRAY
2214: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
2215: LD_ADDR_EXP 37
2219: PUSH
2220: LD_INT 0
2222: PUSH
2223: LD_INT 1
2225: PUSH
2226: LD_INT 2
2228: PUSH
2229: LD_INT 3
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: LD_EXP 16
2242: PUSH
2243: LD_INT 1
2245: PLUS
2246: ARRAY
2247: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2248: LD_ADDR_EXP 38
2252: PUSH
2253: LD_INT 0
2255: PUSH
2256: LD_INT 1
2258: PUSH
2259: LD_INT 63000
2261: PUSH
2262: LD_INT 126000
2264: PUSH
2265: LD_INT 189000
2267: PUSH
2268: LD_INT 252000
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: PUSH
2279: LD_EXP 15
2283: PUSH
2284: LD_INT 1
2286: PLUS
2287: ARRAY
2288: ST_TO_ADDR
// deposits = [ [ [ 1 , 0 , 1 , 2 , 0 ] [ def_main_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_main_deposits + 1 ] ] , [ [ 1 , 0 , 1 , 2 , 0 ] [ def_secondary_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_secondary_deposits + 1 ] ] ] ;
2289: LD_ADDR_EXP 28
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: LD_INT 0
2299: PUSH
2300: LD_INT 1
2302: PUSH
2303: LD_INT 2
2305: PUSH
2306: LD_INT 0
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: PUSH
2316: LD_EXP 6
2320: PUSH
2321: LD_INT 1
2323: PLUS
2324: ARRAY
2325: PUSH
2326: LD_INT 0
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: LD_INT 1
2334: PUSH
2335: LD_INT 0
2337: PUSH
2338: LD_INT 2
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: PUSH
2348: LD_EXP 6
2352: PUSH
2353: LD_INT 1
2355: PLUS
2356: ARRAY
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 1
2364: PUSH
2365: LD_INT 0
2367: PUSH
2368: LD_INT 1
2370: PUSH
2371: LD_INT 2
2373: PUSH
2374: LD_INT 0
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: PUSH
2384: LD_EXP 7
2388: PUSH
2389: LD_INT 1
2391: PLUS
2392: ARRAY
2393: PUSH
2394: LD_INT 0
2396: PUSH
2397: LD_INT 1
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: LD_INT 0
2405: PUSH
2406: LD_INT 2
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: PUSH
2416: LD_EXP 7
2420: PUSH
2421: LD_INT 1
2423: PLUS
2424: ARRAY
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: ST_TO_ADDR
// def_bf_params = [ [ 0 , 0 , 0 , 0 ] , [ 50 , 25 , 0 , 50 ] , [ 75 , 50 , 25 , 75 ] , [ 100 , 75 , 50 , 100 ] ] [ def_morale_flags + 1 ] ;
2434: LD_ADDR_EXP 36
2438: PUSH
2439: LD_INT 0
2441: PUSH
2442: LD_INT 0
2444: PUSH
2445: LD_INT 0
2447: PUSH
2448: LD_INT 0
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: LIST
2455: LIST
2456: PUSH
2457: LD_INT 50
2459: PUSH
2460: LD_INT 25
2462: PUSH
2463: LD_INT 0
2465: PUSH
2466: LD_INT 50
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: PUSH
2475: LD_INT 75
2477: PUSH
2478: LD_INT 50
2480: PUSH
2481: LD_INT 25
2483: PUSH
2484: LD_INT 75
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: PUSH
2493: LD_INT 100
2495: PUSH
2496: LD_INT 75
2498: PUSH
2499: LD_INT 50
2501: PUSH
2502: LD_INT 100
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: PUSH
2517: LD_EXP 14
2521: PUSH
2522: LD_INT 1
2524: PLUS
2525: ARRAY
2526: ST_TO_ADDR
// prepare_arrivals ;
2527: CALL 11219 0 0
// if def_people_loyality then
2531: LD_EXP 12
2535: IFFALSE 3400
// begin second_side = [ [ [ 0 , 0 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 6 , 7 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 4 , 2 ] , [ 4 , 2 ] ] , [ [ 5 , 4 ] , [ 0 , 0 ] , [ 5 , 6 ] , [ 5 , 1 ] , [ 7 , 3 ] , [ 5 , 3 ] , [ 5 , 4 ] , [ 5 , 4 ] ] , [ [ 6 , 4 ] , [ 6 , 5 ] , [ 0 , 0 ] , [ 6 , 1 ] , [ 6 , 2 ] , [ 5 , 1 ] , [ 6 , 4 ] , [ 6 , 2 ] ] , [ [ 7 , 6 ] , [ 1 , 5 ] , [ 1 , 6 ] , [ 0 , 0 ] , [ 1 , 2 ] , [ 1 , 3 ] , [ 1 , 2 ] , [ 1 , 2 ] ] , [ [ 2 , 4 ] , [ 3 , 7 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 0 , 0 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 2 , 4 ] ] , [ [ 3 , 4 ] , [ 3 , 5 ] , [ 1 , 5 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 0 , 0 ] , [ 3 , 4 ] , [ 3 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 0 , 0 ] , [ 4 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 0 , 0 ] ] ] [ positions [ 1 ] ] [ positions [ 2 ] ] ;
2537: LD_ADDR_EXP 47
2541: PUSH
2542: LD_INT 0
2544: PUSH
2545: LD_INT 0
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 4
2554: PUSH
2555: LD_INT 5
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 4
2564: PUSH
2565: LD_INT 6
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: LD_INT 6
2574: PUSH
2575: LD_INT 7
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: PUSH
2582: LD_INT 4
2584: PUSH
2585: LD_INT 2
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: PUSH
2592: LD_INT 4
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: LD_INT 4
2604: PUSH
2605: LD_INT 2
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: LD_INT 4
2614: PUSH
2615: LD_INT 2
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: PUSH
2632: LD_INT 5
2634: PUSH
2635: LD_INT 4
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: PUSH
2642: LD_INT 0
2644: PUSH
2645: LD_INT 0
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 5
2654: PUSH
2655: LD_INT 6
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: PUSH
2662: LD_INT 5
2664: PUSH
2665: LD_INT 1
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_INT 7
2674: PUSH
2675: LD_INT 3
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: PUSH
2682: LD_INT 5
2684: PUSH
2685: LD_INT 3
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: LD_INT 5
2694: PUSH
2695: LD_INT 4
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: LD_INT 5
2704: PUSH
2705: LD_INT 4
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 6
2724: PUSH
2725: LD_INT 4
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: LD_INT 6
2734: PUSH
2735: LD_INT 5
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 0
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 6
2754: PUSH
2755: LD_INT 1
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: PUSH
2762: LD_INT 6
2764: PUSH
2765: LD_INT 2
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: LD_INT 5
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 6
2784: PUSH
2785: LD_INT 4
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 6
2794: PUSH
2795: LD_INT 2
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: PUSH
2812: LD_INT 7
2814: PUSH
2815: LD_INT 6
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 1
2824: PUSH
2825: LD_INT 5
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: LD_INT 1
2834: PUSH
2835: LD_INT 6
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 0
2844: PUSH
2845: LD_INT 0
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_INT 1
2854: PUSH
2855: LD_INT 2
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: PUSH
2862: LD_INT 1
2864: PUSH
2865: LD_INT 3
2867: PUSH
2868: EMPTY
2869: LIST
2870: LIST
2871: PUSH
2872: LD_INT 1
2874: PUSH
2875: LD_INT 2
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: LD_INT 2
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: LIST
2896: LIST
2897: LIST
2898: LIST
2899: LIST
2900: LIST
2901: PUSH
2902: LD_INT 2
2904: PUSH
2905: LD_INT 4
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 3
2914: PUSH
2915: LD_INT 7
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PUSH
2922: LD_INT 2
2924: PUSH
2925: LD_INT 6
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PUSH
2932: LD_INT 2
2934: PUSH
2935: LD_INT 1
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PUSH
2942: LD_INT 0
2944: PUSH
2945: LD_INT 0
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PUSH
2952: LD_INT 2
2954: PUSH
2955: LD_INT 3
2957: PUSH
2958: EMPTY
2959: LIST
2960: LIST
2961: PUSH
2962: LD_INT 2
2964: PUSH
2965: LD_INT 4
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: PUSH
2972: LD_INT 2
2974: PUSH
2975: LD_INT 4
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: LIST
2990: LIST
2991: PUSH
2992: LD_INT 3
2994: PUSH
2995: LD_INT 4
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 3
3004: PUSH
3005: LD_INT 5
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: LD_INT 1
3014: PUSH
3015: LD_INT 5
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 3
3024: PUSH
3025: LD_INT 1
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: LD_INT 3
3034: PUSH
3035: LD_INT 2
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PUSH
3042: LD_INT 0
3044: PUSH
3045: LD_INT 0
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: PUSH
3052: LD_INT 3
3054: PUSH
3055: LD_INT 4
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PUSH
3062: LD_INT 3
3064: PUSH
3065: LD_INT 2
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PUSH
3072: EMPTY
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: PUSH
3082: LD_INT 2
3084: PUSH
3085: LD_INT 4
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: LD_INT 4
3094: PUSH
3095: LD_INT 5
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: PUSH
3102: LD_INT 4
3104: PUSH
3105: LD_INT 6
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PUSH
3112: LD_INT 2
3114: PUSH
3115: LD_INT 1
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: PUSH
3122: LD_INT 4
3124: PUSH
3125: LD_INT 2
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PUSH
3132: LD_INT 4
3134: PUSH
3135: LD_INT 3
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PUSH
3142: LD_INT 0
3144: PUSH
3145: LD_INT 0
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PUSH
3152: LD_INT 4
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 2
3174: PUSH
3175: LD_INT 4
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 4
3184: PUSH
3185: LD_INT 5
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 2
3194: PUSH
3195: LD_INT 6
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 1
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: LD_INT 4
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: LD_INT 2
3224: PUSH
3225: LD_INT 3
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: LD_INT 2
3234: PUSH
3235: LD_INT 4
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: LD_INT 0
3244: PUSH
3245: LD_INT 0
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: PUSH
3272: LD_EXP 39
3276: PUSH
3277: LD_INT 1
3279: ARRAY
3280: ARRAY
3281: PUSH
3282: LD_EXP 39
3286: PUSH
3287: LD_INT 2
3289: ARRAY
3290: ARRAY
3291: ST_TO_ADDR
// SetAttitude ( second_side [ 1 ] , positions [ 1 ] , att_friend , true ) ;
3292: LD_EXP 47
3296: PUSH
3297: LD_INT 1
3299: ARRAY
3300: PPUSH
3301: LD_EXP 39
3305: PUSH
3306: LD_INT 1
3308: ARRAY
3309: PPUSH
3310: LD_INT 1
3312: PPUSH
3313: LD_INT 1
3315: PPUSH
3316: CALL_OW 80
// SetAttitude ( second_side [ 2 ] , positions [ 2 ] , att_friend , true ) ;
3320: LD_EXP 47
3324: PUSH
3325: LD_INT 2
3327: ARRAY
3328: PPUSH
3329: LD_EXP 39
3333: PUSH
3334: LD_INT 2
3336: ARRAY
3337: PPUSH
3338: LD_INT 1
3340: PPUSH
3341: LD_INT 1
3343: PPUSH
3344: CALL_OW 80
// if fog_info then
3348: LD_EXP 35
3352: IFFALSE 3398
// begin ChangeSideFog ( second_side [ 1 ] , positions [ 1 ] ) ;
3354: LD_EXP 47
3358: PUSH
3359: LD_INT 1
3361: ARRAY
3362: PPUSH
3363: LD_EXP 39
3367: PUSH
3368: LD_INT 1
3370: ARRAY
3371: PPUSH
3372: CALL_OW 343
// ChangeSideFog ( second_side [ 2 ] , positions [ 2 ] ) ;
3376: LD_EXP 47
3380: PUSH
3381: LD_INT 2
3383: ARRAY
3384: PPUSH
3385: LD_EXP 39
3389: PUSH
3390: LD_INT 2
3392: ARRAY
3393: PPUSH
3394: CALL_OW 343
// end ; end else
3398: GO 3680
// begin pom_tab = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] diff ( positions union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 1 ] ] union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 2 ] ] ) ;
3400: LD_ADDR_VAR 0 11
3404: PUSH
3405: LD_INT 1
3407: PUSH
3408: LD_INT 2
3410: PUSH
3411: LD_INT 3
3413: PUSH
3414: LD_INT 4
3416: PUSH
3417: LD_INT 5
3419: PUSH
3420: LD_INT 6
3422: PUSH
3423: LD_INT 7
3425: PUSH
3426: LD_INT 8
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: PUSH
3439: LD_EXP 39
3443: PUSH
3444: LD_INT 4
3446: PUSH
3447: LD_INT 5
3449: PUSH
3450: LD_INT 7
3452: PUSH
3453: LD_INT 8
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: LIST
3460: PUSH
3461: LD_INT 6
3463: PUSH
3464: LD_INT 1
3466: PUSH
3467: LD_INT 7
3469: PUSH
3470: LD_INT 8
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: LIST
3477: PUSH
3478: LD_INT 2
3480: PUSH
3481: LD_INT 3
3483: PUSH
3484: LD_INT 2
3486: PUSH
3487: LD_INT 4
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: LD_INT 2
3496: PUSH
3497: LD_INT 4
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: PUSH
3514: LD_EXP 39
3518: PUSH
3519: LD_INT 1
3521: ARRAY
3522: ARRAY
3523: UNION
3524: PUSH
3525: LD_INT 4
3527: PUSH
3528: LD_INT 5
3530: PUSH
3531: LD_INT 7
3533: PUSH
3534: LD_INT 8
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 6
3544: PUSH
3545: LD_INT 1
3547: PUSH
3548: LD_INT 7
3550: PUSH
3551: LD_INT 8
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: LIST
3558: PUSH
3559: LD_INT 2
3561: PUSH
3562: LD_INT 3
3564: PUSH
3565: LD_INT 2
3567: PUSH
3568: LD_INT 4
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PUSH
3575: LD_INT 2
3577: PUSH
3578: LD_INT 4
3580: PUSH
3581: EMPTY
3582: LIST
3583: LIST
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: PUSH
3595: LD_EXP 39
3599: PUSH
3600: LD_INT 2
3602: ARRAY
3603: ARRAY
3604: UNION
3605: DIFF
3606: ST_TO_ADDR
// second_side = pom_tab [ Rand ( 1 , pom_tab ) ] ;
3607: LD_ADDR_EXP 47
3611: PUSH
3612: LD_VAR 0 11
3616: PUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_VAR 0 11
3624: PPUSH
3625: CALL_OW 12
3629: ARRAY
3630: ST_TO_ADDR
// third_nation = [ 1 , 2 , 3 ] diff side_nations ;
3631: LD_ADDR_EXP 48
3635: PUSH
3636: LD_INT 1
3638: PUSH
3639: LD_INT 2
3641: PUSH
3642: LD_INT 3
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: LIST
3649: PUSH
3650: LD_EXP 44
3654: DIFF
3655: ST_TO_ADDR
// third_nation = third_nation [ Rand ( 1 , third_nation ) ] ;
3656: LD_ADDR_EXP 48
3660: PUSH
3661: LD_EXP 48
3665: PUSH
3666: LD_INT 1
3668: PPUSH
3669: LD_EXP 48
3673: PPUSH
3674: CALL_OW 12
3678: ARRAY
3679: ST_TO_ADDR
// end ; BuildUpAreas := [ BuildUp1 , BuildUp2 ] ;
3680: LD_ADDR_EXP 65
3684: PUSH
3685: LD_INT 26
3687: PUSH
3688: LD_INT 27
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: ST_TO_ADDR
// end ;
3695: LD_VAR 0 1
3699: RET
// function prepare_map_coordinates ; var side , dep2 , br2 , dep1 , br1 , lab , fac , arm , pplant , un , i , k11 , k12 , k21 , k22 ; begin
3700: LD_INT 0
3702: PPUSH
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
3710: PPUSH
3711: PPUSH
3712: PPUSH
3713: PPUSH
3714: PPUSH
3715: PPUSH
3716: PPUSH
3717: PPUSH
// start_def = [ ] ;
3718: LD_ADDR_EXP 49
3722: PUSH
3723: EMPTY
3724: ST_TO_ADDR
// depots_def = [ ] ;
3725: LD_ADDR_EXP 50
3729: PUSH
3730: EMPTY
3731: ST_TO_ADDR
// breastworks_def = [ ] ;
3732: LD_ADDR_EXP 51
3736: PUSH
3737: EMPTY
3738: ST_TO_ADDR
// labs_def = [ ] ;
3739: LD_ADDR_EXP 52
3743: PUSH
3744: EMPTY
3745: ST_TO_ADDR
// factories_def = [ ] ;
3746: LD_ADDR_EXP 53
3750: PUSH
3751: EMPTY
3752: ST_TO_ADDR
// armories_def = [ ] ;
3753: LD_ADDR_EXP 54
3757: PUSH
3758: EMPTY
3759: ST_TO_ADDR
// pplants_def = [ ] ;
3760: LD_ADDR_EXP 55
3764: PUSH
3765: EMPTY
3766: ST_TO_ADDR
// deposits_def = [ ] ;
3767: LD_ADDR_EXP 56
3771: PUSH
3772: EMPTY
3773: ST_TO_ADDR
// k11 := Rand ( 1 , 2 ) ;
3774: LD_ADDR_VAR 0 13
3778: PUSH
3779: LD_INT 1
3781: PPUSH
3782: LD_INT 2
3784: PPUSH
3785: CALL_OW 12
3789: ST_TO_ADDR
// k12 := Rand ( 1 , 2 ) ;
3790: LD_ADDR_VAR 0 14
3794: PUSH
3795: LD_INT 1
3797: PPUSH
3798: LD_INT 2
3800: PPUSH
3801: CALL_OW 12
3805: ST_TO_ADDR
// k21 := Rand ( 1 , 2 ) ;
3806: LD_ADDR_VAR 0 15
3810: PUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_INT 2
3816: PPUSH
3817: CALL_OW 12
3821: ST_TO_ADDR
// k22 := Rand ( 1 , 2 ) ;
3822: LD_ADDR_VAR 0 16
3826: PUSH
3827: LD_INT 1
3829: PPUSH
3830: LD_INT 2
3832: PPUSH
3833: CALL_OW 12
3837: ST_TO_ADDR
// deposits_def := [ [ [ [ Res111 , Res112 ] [ k11 ] , [ Res111 , Res112 ] [ 3 - k11 ] ] , [ [ Res121 , Res122 ] [ k12 ] , [ Res121 , Res122 ] [ 3 - k12 ] ] ] , [ [ [ Res211 , Res212 ] [ k21 ] , [ Res211 , Res212 ] [ 3 - k21 ] ] , [ [ Res221 , Res222 ] [ k22 ] , [ Res221 , Res222 ] [ 3 - k22 ] ] ] ] ;
3838: LD_ADDR_EXP 56
3842: PUSH
3843: LD_INT 4
3845: PUSH
3846: LD_INT 5
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: LD_VAR 0 13
3857: ARRAY
3858: PUSH
3859: LD_INT 4
3861: PUSH
3862: LD_INT 5
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: PUSH
3869: LD_INT 3
3871: PUSH
3872: LD_VAR 0 13
3876: MINUS
3877: ARRAY
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: PUSH
3883: LD_INT 6
3885: PUSH
3886: LD_INT 7
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: PUSH
3893: LD_VAR 0 14
3897: ARRAY
3898: PUSH
3899: LD_INT 6
3901: PUSH
3902: LD_INT 7
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: PUSH
3909: LD_INT 3
3911: PUSH
3912: LD_VAR 0 14
3916: MINUS
3917: ARRAY
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PUSH
3927: LD_INT 8
3929: PUSH
3930: LD_INT 9
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: PUSH
3937: LD_VAR 0 15
3941: ARRAY
3942: PUSH
3943: LD_INT 8
3945: PUSH
3946: LD_INT 9
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PUSH
3953: LD_INT 3
3955: PUSH
3956: LD_VAR 0 15
3960: MINUS
3961: ARRAY
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: PUSH
3967: LD_INT 10
3969: PUSH
3970: LD_INT 11
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: PUSH
3977: LD_VAR 0 16
3981: ARRAY
3982: PUSH
3983: LD_INT 10
3985: PUSH
3986: LD_INT 11
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: LD_INT 3
3995: PUSH
3996: LD_VAR 0 16
4000: MINUS
4001: ARRAY
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PUSH
4011: EMPTY
4012: LIST
4013: LIST
4014: ST_TO_ADDR
// for side := 1 to 2 do
4015: LD_ADDR_VAR 0 2
4019: PUSH
4020: DOUBLE
4021: LD_INT 1
4023: DEC
4024: ST_TO_ADDR
4025: LD_INT 2
4027: PUSH
4028: FOR_TO
4029: IFFALSE 5161
// begin dep1 := side * 10 - 9 ;
4031: LD_ADDR_VAR 0 5
4035: PUSH
4036: LD_VAR 0 2
4040: PUSH
4041: LD_INT 10
4043: MUL
4044: PUSH
4045: LD_INT 9
4047: MINUS
4048: ST_TO_ADDR
// dep2 := 20 + side * 4 - 3 ;
4049: LD_ADDR_VAR 0 3
4053: PUSH
4054: LD_INT 20
4056: PUSH
4057: LD_VAR 0 2
4061: PUSH
4062: LD_INT 4
4064: MUL
4065: PLUS
4066: PUSH
4067: LD_INT 3
4069: MINUS
4070: ST_TO_ADDR
// br1 := [ side * 10 - 8 , side * 10 - 7 , side * 10 - 6 , side * 10 - 5 ] ;
4071: LD_ADDR_VAR 0 6
4075: PUSH
4076: LD_VAR 0 2
4080: PUSH
4081: LD_INT 10
4083: MUL
4084: PUSH
4085: LD_INT 8
4087: MINUS
4088: PUSH
4089: LD_VAR 0 2
4093: PUSH
4094: LD_INT 10
4096: MUL
4097: PUSH
4098: LD_INT 7
4100: MINUS
4101: PUSH
4102: LD_VAR 0 2
4106: PUSH
4107: LD_INT 10
4109: MUL
4110: PUSH
4111: LD_INT 6
4113: MINUS
4114: PUSH
4115: LD_VAR 0 2
4119: PUSH
4120: LD_INT 10
4122: MUL
4123: PUSH
4124: LD_INT 5
4126: MINUS
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: ST_TO_ADDR
// br2 := [ 20 + side * 4 - 2 , 20 + side * 4 - 1 , 20 + side * 4 ] ;
4134: LD_ADDR_VAR 0 4
4138: PUSH
4139: LD_INT 20
4141: PUSH
4142: LD_VAR 0 2
4146: PUSH
4147: LD_INT 4
4149: MUL
4150: PLUS
4151: PUSH
4152: LD_INT 2
4154: MINUS
4155: PUSH
4156: LD_INT 20
4158: PUSH
4159: LD_VAR 0 2
4163: PUSH
4164: LD_INT 4
4166: MUL
4167: PLUS
4168: PUSH
4169: LD_INT 1
4171: MINUS
4172: PUSH
4173: LD_INT 20
4175: PUSH
4176: LD_VAR 0 2
4180: PUSH
4181: LD_INT 4
4183: MUL
4184: PLUS
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: LIST
4190: ST_TO_ADDR
// lab := side * 10 - 4 ;
4191: LD_ADDR_VAR 0 7
4195: PUSH
4196: LD_VAR 0 2
4200: PUSH
4201: LD_INT 10
4203: MUL
4204: PUSH
4205: LD_INT 4
4207: MINUS
4208: ST_TO_ADDR
// fac := side * 10 - 3 ;
4209: LD_ADDR_VAR 0 8
4213: PUSH
4214: LD_VAR 0 2
4218: PUSH
4219: LD_INT 10
4221: MUL
4222: PUSH
4223: LD_INT 3
4225: MINUS
4226: ST_TO_ADDR
// arm := side * 10 - 2 ;
4227: LD_ADDR_VAR 0 9
4231: PUSH
4232: LD_VAR 0 2
4236: PUSH
4237: LD_INT 10
4239: MUL
4240: PUSH
4241: LD_INT 2
4243: MINUS
4244: ST_TO_ADDR
// pplant := [ side * 10 - 1 , side * 10 ] ;
4245: LD_ADDR_VAR 0 10
4249: PUSH
4250: LD_VAR 0 2
4254: PUSH
4255: LD_INT 10
4257: MUL
4258: PUSH
4259: LD_INT 1
4261: MINUS
4262: PUSH
4263: LD_VAR 0 2
4267: PUSH
4268: LD_INT 10
4270: MUL
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: ST_TO_ADDR
// depots_def := depots_def ^ [ [ [ GetX ( dep1 ) , GetY ( dep1 ) , GetDir ( dep1 ) ] , [ GetX ( dep2 ) , GetY ( dep2 ) , GetDir ( dep2 ) ] ] ] ;
4276: LD_ADDR_EXP 50
4280: PUSH
4281: LD_EXP 50
4285: PUSH
4286: LD_VAR 0 5
4290: PPUSH
4291: CALL_OW 250
4295: PUSH
4296: LD_VAR 0 5
4300: PPUSH
4301: CALL_OW 251
4305: PUSH
4306: LD_VAR 0 5
4310: PPUSH
4311: CALL_OW 254
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: LIST
4320: PUSH
4321: LD_VAR 0 3
4325: PPUSH
4326: CALL_OW 250
4330: PUSH
4331: LD_VAR 0 3
4335: PPUSH
4336: CALL_OW 251
4340: PUSH
4341: LD_VAR 0 3
4345: PPUSH
4346: CALL_OW 254
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: LIST
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: EMPTY
4361: LIST
4362: ADD
4363: ST_TO_ADDR
// start_def := start_def ^ [ [ [ ShiftX ( GetX ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) ] , [ ShiftX ( GetX ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) ] ] ] ;
4364: LD_ADDR_EXP 49
4368: PUSH
4369: LD_EXP 49
4373: PUSH
4374: LD_VAR 0 5
4378: PPUSH
4379: CALL_OW 250
4383: PPUSH
4384: LD_VAR 0 5
4388: PPUSH
4389: CALL_OW 254
4393: PUSH
4394: LD_INT 6
4396: MOD
4397: PPUSH
4398: LD_INT 6
4400: PPUSH
4401: CALL_OW 272
4405: PUSH
4406: LD_VAR 0 5
4410: PPUSH
4411: CALL_OW 251
4415: PPUSH
4416: LD_VAR 0 5
4420: PPUSH
4421: CALL_OW 254
4425: PUSH
4426: LD_INT 6
4428: MOD
4429: PPUSH
4430: LD_INT 6
4432: PPUSH
4433: CALL_OW 273
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PUSH
4442: LD_VAR 0 3
4446: PPUSH
4447: CALL_OW 250
4451: PPUSH
4452: LD_VAR 0 3
4456: PPUSH
4457: CALL_OW 254
4461: PUSH
4462: LD_INT 6
4464: MOD
4465: PPUSH
4466: LD_INT 6
4468: PPUSH
4469: CALL_OW 272
4473: PUSH
4474: LD_VAR 0 3
4478: PPUSH
4479: CALL_OW 251
4483: PPUSH
4484: LD_VAR 0 3
4488: PPUSH
4489: CALL_OW 254
4493: PUSH
4494: LD_INT 6
4496: MOD
4497: PPUSH
4498: LD_INT 6
4500: PPUSH
4501: CALL_OW 273
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: EMPTY
4515: LIST
4516: ADD
4517: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ [ GetX ( br1 [ 1 ] ) , GetY ( br1 [ 1 ] ) , GetDir ( br1 [ 1 ] ) ] , [ GetX ( br1 [ 2 ] ) , GetY ( br1 [ 2 ] ) , GetDir ( br1 [ 2 ] ) ] , [ GetX ( br1 [ 3 ] ) , GetY ( br1 [ 3 ] ) , GetDir ( br1 [ 3 ] ) ] , [ GetX ( br1 [ 4 ] ) , GetY ( br1 [ 4 ] ) , GetDir ( br1 [ 4 ] ) ] ] , [ [ GetX ( br2 [ 1 ] ) , GetY ( br2 [ 1 ] ) , GetDir ( br2 [ 1 ] ) ] , [ GetX ( br2 [ 2 ] ) , GetY ( br2 [ 2 ] ) , GetDir ( br2 [ 2 ] ) ] , [ GetX ( br2 [ 3 ] ) , GetY ( br2 [ 3 ] ) , GetDir ( br2 [ 3 ] ) ] ] ] ] ;
4518: LD_ADDR_EXP 51
4522: PUSH
4523: LD_EXP 51
4527: PUSH
4528: LD_VAR 0 6
4532: PUSH
4533: LD_INT 1
4535: ARRAY
4536: PPUSH
4537: CALL_OW 250
4541: PUSH
4542: LD_VAR 0 6
4546: PUSH
4547: LD_INT 1
4549: ARRAY
4550: PPUSH
4551: CALL_OW 251
4555: PUSH
4556: LD_VAR 0 6
4560: PUSH
4561: LD_INT 1
4563: ARRAY
4564: PPUSH
4565: CALL_OW 254
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: LIST
4574: PUSH
4575: LD_VAR 0 6
4579: PUSH
4580: LD_INT 2
4582: ARRAY
4583: PPUSH
4584: CALL_OW 250
4588: PUSH
4589: LD_VAR 0 6
4593: PUSH
4594: LD_INT 2
4596: ARRAY
4597: PPUSH
4598: CALL_OW 251
4602: PUSH
4603: LD_VAR 0 6
4607: PUSH
4608: LD_INT 2
4610: ARRAY
4611: PPUSH
4612: CALL_OW 254
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: LIST
4621: PUSH
4622: LD_VAR 0 6
4626: PUSH
4627: LD_INT 3
4629: ARRAY
4630: PPUSH
4631: CALL_OW 250
4635: PUSH
4636: LD_VAR 0 6
4640: PUSH
4641: LD_INT 3
4643: ARRAY
4644: PPUSH
4645: CALL_OW 251
4649: PUSH
4650: LD_VAR 0 6
4654: PUSH
4655: LD_INT 3
4657: ARRAY
4658: PPUSH
4659: CALL_OW 254
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: LIST
4668: PUSH
4669: LD_VAR 0 6
4673: PUSH
4674: LD_INT 4
4676: ARRAY
4677: PPUSH
4678: CALL_OW 250
4682: PUSH
4683: LD_VAR 0 6
4687: PUSH
4688: LD_INT 4
4690: ARRAY
4691: PPUSH
4692: CALL_OW 251
4696: PUSH
4697: LD_VAR 0 6
4701: PUSH
4702: LD_INT 4
4704: ARRAY
4705: PPUSH
4706: CALL_OW 254
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: LIST
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: PUSH
4722: LD_VAR 0 4
4726: PUSH
4727: LD_INT 1
4729: ARRAY
4730: PPUSH
4731: CALL_OW 250
4735: PUSH
4736: LD_VAR 0 4
4740: PUSH
4741: LD_INT 1
4743: ARRAY
4744: PPUSH
4745: CALL_OW 251
4749: PUSH
4750: LD_VAR 0 4
4754: PUSH
4755: LD_INT 1
4757: ARRAY
4758: PPUSH
4759: CALL_OW 254
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: LIST
4768: PUSH
4769: LD_VAR 0 4
4773: PUSH
4774: LD_INT 2
4776: ARRAY
4777: PPUSH
4778: CALL_OW 250
4782: PUSH
4783: LD_VAR 0 4
4787: PUSH
4788: LD_INT 2
4790: ARRAY
4791: PPUSH
4792: CALL_OW 251
4796: PUSH
4797: LD_VAR 0 4
4801: PUSH
4802: LD_INT 2
4804: ARRAY
4805: PPUSH
4806: CALL_OW 254
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: PUSH
4816: LD_VAR 0 4
4820: PUSH
4821: LD_INT 3
4823: ARRAY
4824: PPUSH
4825: CALL_OW 250
4829: PUSH
4830: LD_VAR 0 4
4834: PUSH
4835: LD_INT 3
4837: ARRAY
4838: PPUSH
4839: CALL_OW 251
4843: PUSH
4844: LD_VAR 0 4
4848: PUSH
4849: LD_INT 3
4851: ARRAY
4852: PPUSH
4853: CALL_OW 254
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: EMPTY
4873: LIST
4874: ADD
4875: ST_TO_ADDR
// labs_def := labs_def ^ [ [ [ GetX ( lab ) , GetY ( lab ) , GetDir ( lab ) ] , [ ] ] ] ;
4876: LD_ADDR_EXP 52
4880: PUSH
4881: LD_EXP 52
4885: PUSH
4886: LD_VAR 0 7
4890: PPUSH
4891: CALL_OW 250
4895: PUSH
4896: LD_VAR 0 7
4900: PPUSH
4901: CALL_OW 251
4905: PUSH
4906: LD_VAR 0 7
4910: PPUSH
4911: CALL_OW 254
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: PUSH
4921: EMPTY
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: EMPTY
4928: LIST
4929: ADD
4930: ST_TO_ADDR
// factories_def := factories_def ^ [ [ [ GetX ( fac ) , GetY ( fac ) , GetDir ( fac ) ] , [ ] ] ] ;
4931: LD_ADDR_EXP 53
4935: PUSH
4936: LD_EXP 53
4940: PUSH
4941: LD_VAR 0 8
4945: PPUSH
4946: CALL_OW 250
4950: PUSH
4951: LD_VAR 0 8
4955: PPUSH
4956: CALL_OW 251
4960: PUSH
4961: LD_VAR 0 8
4965: PPUSH
4966: CALL_OW 254
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: EMPTY
4983: LIST
4984: ADD
4985: ST_TO_ADDR
// armories_def := armories_def ^ [ [ [ GetX ( arm ) , GetY ( arm ) , GetDir ( arm ) ] , [ ] ] ] ;
4986: LD_ADDR_EXP 54
4990: PUSH
4991: LD_EXP 54
4995: PUSH
4996: LD_VAR 0 9
5000: PPUSH
5001: CALL_OW 250
5005: PUSH
5006: LD_VAR 0 9
5010: PPUSH
5011: CALL_OW 251
5015: PUSH
5016: LD_VAR 0 9
5020: PPUSH
5021: CALL_OW 254
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: PUSH
5037: EMPTY
5038: LIST
5039: ADD
5040: ST_TO_ADDR
// pplants_def := pplants_def ^ [ [ [ [ GetX ( pplant [ 1 ] ) , GetY ( pplant [ 1 ] ) , GetDir ( pplant [ 1 ] ) ] , [ GetX ( pplant [ 2 ] ) , GetY ( pplant [ 2 ] ) , GetDir ( pplant [ 2 ] ) ] ] , [ ] ] ] ;
5041: LD_ADDR_EXP 55
5045: PUSH
5046: LD_EXP 55
5050: PUSH
5051: LD_VAR 0 10
5055: PUSH
5056: LD_INT 1
5058: ARRAY
5059: PPUSH
5060: CALL_OW 250
5064: PUSH
5065: LD_VAR 0 10
5069: PUSH
5070: LD_INT 1
5072: ARRAY
5073: PPUSH
5074: CALL_OW 251
5078: PUSH
5079: LD_VAR 0 10
5083: PUSH
5084: LD_INT 1
5086: ARRAY
5087: PPUSH
5088: CALL_OW 254
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: PUSH
5098: LD_VAR 0 10
5102: PUSH
5103: LD_INT 2
5105: ARRAY
5106: PPUSH
5107: CALL_OW 250
5111: PUSH
5112: LD_VAR 0 10
5116: PUSH
5117: LD_INT 2
5119: ARRAY
5120: PPUSH
5121: CALL_OW 251
5125: PUSH
5126: LD_VAR 0 10
5130: PUSH
5131: LD_INT 2
5133: ARRAY
5134: PPUSH
5135: CALL_OW 254
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: LIST
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: EMPTY
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PUSH
5155: EMPTY
5156: LIST
5157: ADD
5158: ST_TO_ADDR
// end ;
5159: GO 4028
5161: POP
5162: POP
// for un := 1 to 28 do
5163: LD_ADDR_VAR 0 11
5167: PUSH
5168: DOUBLE
5169: LD_INT 1
5171: DEC
5172: ST_TO_ADDR
5173: LD_INT 28
5175: PUSH
5176: FOR_TO
5177: IFFALSE 5190
// DestroyUnit ( un ) ;
5179: LD_VAR 0 11
5183: PPUSH
5184: CALL_OW 65
5188: GO 5176
5190: POP
5191: POP
// end ;
5192: LD_VAR 0 1
5196: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
5197: LD_INT 0
5199: PPUSH
5200: PPUSH
5201: PPUSH
5202: PPUSH
// result := [ ] ;
5203: LD_ADDR_VAR 0 7
5207: PUSH
5208: EMPTY
5209: ST_TO_ADDR
// for i := 1 to count do
5210: LD_ADDR_VAR 0 8
5214: PUSH
5215: DOUBLE
5216: LD_INT 1
5218: DEC
5219: ST_TO_ADDR
5220: LD_VAR 0 1
5224: PUSH
5225: FOR_TO
5226: IFFALSE 5644
// begin uc_direction := Rand ( 0 , 5 ) ;
5228: LD_ADDR_OWVAR 24
5232: PUSH
5233: LD_INT 0
5235: PPUSH
5236: LD_INT 5
5238: PPUSH
5239: CALL_OW 12
5243: ST_TO_ADDR
// if commander then
5244: LD_LOC 1
5248: IFFALSE 5357
// begin hc_name := mp_sides_players_names [ uc_side ] ;
5250: LD_ADDR_OWVAR 26
5254: PUSH
5255: LD_OWVAR 19
5259: PUSH
5260: LD_OWVAR 20
5264: ARRAY
5265: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
5266: LD_INT 1
5268: PPUSH
5269: LD_INT 2
5271: PPUSH
5272: CALL_OW 12
5276: PPUSH
5277: LD_VAR 0 2
5281: PPUSH
5282: LD_EXP 29
5286: PUSH
5287: LD_INT 2
5289: PLUS
5290: PPUSH
5291: CALL_OW 380
// hc_importance := 105 ;
5295: LD_ADDR_OWVAR 32
5299: PUSH
5300: LD_INT 105
5302: ST_TO_ADDR
// commander := false ;
5303: LD_ADDR_LOC 1
5307: PUSH
5308: LD_INT 0
5310: ST_TO_ADDR
// if Multiplayer then
5311: LD_OWVAR 4
5315: IFFALSE 5355
// begin hc_gallery := MULTIAVATARS ;
5317: LD_ADDR_OWVAR 33
5321: PUSH
5322: LD_STRING MULTIAVATARS
5324: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
5325: LD_ADDR_OWVAR 34
5329: PUSH
5330: LD_OWVAR 20
5334: PPUSH
5335: CALL_OW 525
5339: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
5340: LD_ADDR_OWVAR 27
5344: PUSH
5345: LD_OWVAR 20
5349: PPUSH
5350: CALL_OW 526
5354: ST_TO_ADDR
// end ; end else
5355: GO 5420
// begin hc_name :=  ;
5357: LD_ADDR_OWVAR 26
5361: PUSH
5362: LD_STRING 
5364: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
5365: LD_INT 1
5367: PPUSH
5368: LD_INT 2
5370: PPUSH
5371: CALL_OW 12
5375: PPUSH
5376: LD_VAR 0 2
5380: PPUSH
5381: LD_EXP 29
5385: PPUSH
5386: CALL_OW 380
// hc_importance := 0 ;
5390: LD_ADDR_OWVAR 32
5394: PUSH
5395: LD_INT 0
5397: ST_TO_ADDR
// if Multiplayer then
5398: LD_OWVAR 4
5402: IFFALSE 5420
// begin hc_gallery :=  ;
5404: LD_ADDR_OWVAR 33
5408: PUSH
5409: LD_STRING 
5411: ST_TO_ADDR
// hc_face_number := 0 ;
5412: LD_ADDR_OWVAR 34
5416: PUSH
5417: LD_INT 0
5419: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
5420: LD_ADDR_VAR 0 10
5424: PUSH
5425: CALL_OW 44
5429: ST_TO_ADDR
// if global_defined then
5430: LD_LOC 3
5434: IFFALSE 5574
// begin if ( cl = class_soldier ) then
5436: LD_VAR 0 2
5440: PUSH
5441: LD_INT 1
5443: EQUAL
5444: IFFALSE 5464
// j := i + soldiers_created else
5446: LD_ADDR_VAR 0 9
5450: PUSH
5451: LD_VAR 0 8
5455: PUSH
5456: LD_LOC 4
5460: PLUS
5461: ST_TO_ADDR
5462: GO 5474
// j := i ;
5464: LD_ADDR_VAR 0 9
5468: PUSH
5469: LD_VAR 0 8
5473: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
5474: LD_LOC 2
5478: PUSH
5479: LD_VAR 0 2
5483: ARRAY
5484: PUSH
5485: LD_VAR 0 9
5489: ARRAY
5490: PPUSH
5491: LD_VAR 0 10
5495: PPUSH
5496: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
5500: LD_VAR 0 10
5504: PPUSH
5505: LD_INT 2
5507: PPUSH
5508: LD_LOC 2
5512: PUSH
5513: LD_VAR 0 2
5517: ARRAY
5518: PUSH
5519: LD_VAR 0 9
5523: ARRAY
5524: PPUSH
5525: LD_INT 2
5527: PPUSH
5528: CALL_OW 260
5532: PPUSH
5533: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
5537: LD_VAR 0 10
5541: PPUSH
5542: LD_INT 1
5544: PPUSH
5545: LD_LOC 2
5549: PUSH
5550: LD_VAR 0 2
5554: ARRAY
5555: PUSH
5556: LD_VAR 0 9
5560: ARRAY
5561: PPUSH
5562: LD_INT 1
5564: PPUSH
5565: CALL_OW 260
5569: PPUSH
5570: CALL_OW 239
// end ; if building then
5574: LD_VAR 0 6
5578: IFFALSE 5596
// PlaceHumanInUnit ( un , building ) else
5580: LD_VAR 0 10
5584: PPUSH
5585: LD_VAR 0 6
5589: PPUSH
5590: CALL_OW 52
5594: GO 5623
// PlaceUnitXYR ( un , x , y , r , false ) ;
5596: LD_VAR 0 10
5600: PPUSH
5601: LD_VAR 0 3
5605: PPUSH
5606: LD_VAR 0 4
5610: PPUSH
5611: LD_VAR 0 5
5615: PPUSH
5616: LD_INT 0
5618: PPUSH
5619: CALL_OW 50
// result := result ^ [ un ] ;
5623: LD_ADDR_VAR 0 7
5627: PUSH
5628: LD_VAR 0 7
5632: PUSH
5633: LD_VAR 0 10
5637: PUSH
5638: EMPTY
5639: LIST
5640: ADD
5641: ST_TO_ADDR
// end ;
5642: GO 5225
5644: POP
5645: POP
// if not global_defined then
5646: LD_LOC 3
5650: NOT
5651: IFFALSE 5729
// if ( global_units >= cl ) then
5653: LD_LOC 2
5657: PUSH
5658: LD_VAR 0 2
5662: GREATEREQUAL
5663: IFFALSE 5704
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
5665: LD_ADDR_LOC 2
5669: PUSH
5670: LD_LOC 2
5674: PPUSH
5675: LD_VAR 0 2
5679: PPUSH
5680: LD_LOC 2
5684: PUSH
5685: LD_VAR 0 2
5689: ARRAY
5690: PUSH
5691: LD_VAR 0 7
5695: ADD
5696: PPUSH
5697: CALL_OW 1
5701: ST_TO_ADDR
5702: GO 5729
// global_units := Replace ( global_units , cl , result ) ;
5704: LD_ADDR_LOC 2
5708: PUSH
5709: LD_LOC 2
5713: PPUSH
5714: LD_VAR 0 2
5718: PPUSH
5719: LD_VAR 0 7
5723: PPUSH
5724: CALL_OW 1
5728: ST_TO_ADDR
// if commander then
5729: LD_LOC 1
5733: IFFALSE 5780
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
5735: LD_ADDR_EXP 57
5739: PUSH
5740: LD_EXP 57
5744: PPUSH
5745: LD_OWVAR 20
5749: PPUSH
5750: LD_EXP 57
5754: PUSH
5755: LD_OWVAR 20
5759: ARRAY
5760: PUSH
5761: LD_VAR 0 10
5765: ADD
5766: PPUSH
5767: CALL_OW 1
5771: ST_TO_ADDR
// commander := false ;
5772: LD_ADDR_LOC 1
5776: PUSH
5777: LD_INT 0
5779: ST_TO_ADDR
// end ; end ;
5780: LD_VAR 0 7
5784: RET
// function prepare_side_base ( side , base ) ; var pos , x , y , dir , i , r , un , br , dep , lab , fact , arm , mode , coord , max ; begin
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
5796: PPUSH
5797: PPUSH
5798: PPUSH
5799: PPUSH
5800: PPUSH
5801: PPUSH
5802: PPUSH
// if side in [ 0 , 9 ] then
5803: LD_VAR 0 1
5807: PUSH
5808: LD_INT 0
5810: PUSH
5811: LD_INT 9
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: IN
5818: IFFALSE 5822
// exit ;
5820: GO 8491
// pos := Side_Positions [ side ] ;
5822: LD_ADDR_VAR 0 4
5826: PUSH
5827: LD_EXP 43
5831: PUSH
5832: LD_VAR 0 1
5836: ARRAY
5837: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
5838: LD_ADDR_OWVAR 21
5842: PUSH
5843: LD_EXP 44
5847: PUSH
5848: LD_VAR 0 1
5852: ARRAY
5853: ST_TO_ADDR
// uc_side := side ;
5854: LD_ADDR_OWVAR 20
5858: PUSH
5859: LD_VAR 0 1
5863: ST_TO_ADDR
// x := depots_def [ pos ] [ base ] [ 1 ] ;
5864: LD_ADDR_VAR 0 5
5868: PUSH
5869: LD_EXP 50
5873: PUSH
5874: LD_VAR 0 4
5878: ARRAY
5879: PUSH
5880: LD_VAR 0 2
5884: ARRAY
5885: PUSH
5886: LD_INT 1
5888: ARRAY
5889: ST_TO_ADDR
// y := depots_def [ pos ] [ base ] [ 2 ] ;
5890: LD_ADDR_VAR 0 6
5894: PUSH
5895: LD_EXP 50
5899: PUSH
5900: LD_VAR 0 4
5904: ARRAY
5905: PUSH
5906: LD_VAR 0 2
5910: ARRAY
5911: PUSH
5912: LD_INT 2
5914: ARRAY
5915: ST_TO_ADDR
// dir := depots_def [ pos ] [ base ] [ 3 ] ;
5916: LD_ADDR_VAR 0 7
5920: PUSH
5921: LD_EXP 50
5925: PUSH
5926: LD_VAR 0 4
5930: ARRAY
5931: PUSH
5932: LD_VAR 0 2
5936: ARRAY
5937: PUSH
5938: LD_INT 3
5940: ARRAY
5941: ST_TO_ADDR
// if is_depot [ base ] then
5942: LD_EXP 20
5946: PUSH
5947: LD_VAR 0 2
5951: ARRAY
5952: IFFALSE 6129
// begin if is_depot [ base ] = 1 then
5954: LD_EXP 20
5958: PUSH
5959: LD_VAR 0 2
5963: ARRAY
5964: PUSH
5965: LD_INT 1
5967: EQUAL
5968: IFFALSE 5980
// bc_type = b_depot else
5970: LD_ADDR_OWVAR 42
5974: PUSH
5975: LD_INT 0
5977: ST_TO_ADDR
5978: GO 5988
// bc_type = b_warehouse ;
5980: LD_ADDR_OWVAR 42
5984: PUSH
5985: LD_INT 1
5987: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
5988: LD_ADDR_VAR 0 12
5992: PUSH
5993: LD_VAR 0 5
5997: PPUSH
5998: LD_VAR 0 6
6002: PPUSH
6003: LD_VAR 0 7
6007: PPUSH
6008: CALL_OW 47
6012: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
6013: LD_VAR 0 12
6017: PPUSH
6018: LD_STRING @
6020: PUSH
6021: LD_VAR 0 1
6025: STR
6026: PPUSH
6027: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ base ] [ mat_cans ] ) ;
6031: LD_VAR 0 12
6035: PPUSH
6036: CALL_OW 274
6040: PPUSH
6041: LD_INT 1
6043: PPUSH
6044: LD_EXP 31
6048: PUSH
6049: LD_VAR 0 2
6053: ARRAY
6054: PUSH
6055: LD_INT 1
6057: ARRAY
6058: PPUSH
6059: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ base ] [ mat_oil ] ) ;
6063: LD_VAR 0 12
6067: PPUSH
6068: CALL_OW 274
6072: PPUSH
6073: LD_INT 2
6075: PPUSH
6076: LD_EXP 31
6080: PUSH
6081: LD_VAR 0 2
6085: ARRAY
6086: PUSH
6087: LD_INT 2
6089: ARRAY
6090: PPUSH
6091: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ base ] [ mat_siberit ] ) ;
6095: LD_VAR 0 12
6099: PPUSH
6100: CALL_OW 274
6104: PPUSH
6105: LD_INT 3
6107: PPUSH
6108: LD_EXP 31
6112: PUSH
6113: LD_VAR 0 2
6117: ARRAY
6118: PUSH
6119: LD_INT 3
6121: ARRAY
6122: PPUSH
6123: CALL_OW 277
// end else
6127: GO 6279
// begin for i := 1 to 3 do
6129: LD_ADDR_VAR 0 8
6133: PUSH
6134: DOUBLE
6135: LD_INT 1
6137: DEC
6138: ST_TO_ADDR
6139: LD_INT 3
6141: PUSH
6142: FOR_TO
6143: IFFALSE 6277
// begin r := starting_resources [ base ] [ i ] ;
6145: LD_ADDR_VAR 0 9
6149: PUSH
6150: LD_EXP 31
6154: PUSH
6155: LD_VAR 0 2
6159: ARRAY
6160: PUSH
6161: LD_VAR 0 8
6165: ARRAY
6166: ST_TO_ADDR
// while r >= 10 do
6167: LD_VAR 0 9
6171: PUSH
6172: LD_INT 10
6174: GREATEREQUAL
6175: IFFALSE 6275
// if r > 50 then
6177: LD_VAR 0 9
6181: PUSH
6182: LD_INT 50
6184: GREATER
6185: IFFALSE 6231
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
6187: LD_VAR 0 8
6191: PPUSH
6192: LD_INT 5
6194: PPUSH
6195: LD_VAR 0 5
6199: PPUSH
6200: LD_VAR 0 6
6204: PPUSH
6205: LD_INT 4
6207: PPUSH
6208: LD_INT 0
6210: PPUSH
6211: CALL_OW 60
// r := r - 50 ;
6215: LD_ADDR_VAR 0 9
6219: PUSH
6220: LD_VAR 0 9
6224: PUSH
6225: LD_INT 50
6227: MINUS
6228: ST_TO_ADDR
// end else
6229: GO 6273
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
6231: LD_VAR 0 8
6235: PPUSH
6236: LD_VAR 0 9
6240: PUSH
6241: LD_INT 10
6243: DIV
6244: PPUSH
6245: LD_VAR 0 5
6249: PPUSH
6250: LD_VAR 0 6
6254: PPUSH
6255: LD_INT 4
6257: PPUSH
6258: LD_INT 0
6260: PPUSH
6261: CALL_OW 60
// r := 0 ;
6265: LD_ADDR_VAR 0 9
6269: PUSH
6270: LD_INT 0
6272: ST_TO_ADDR
// end ;
6273: GO 6167
// end ;
6275: GO 6142
6277: POP
6278: POP
// end ; if is_lab [ base ] then
6279: LD_EXP 24
6283: PUSH
6284: LD_VAR 0 2
6288: ARRAY
6289: IFFALSE 6430
// begin if is_lab [ base ] = 1 then
6291: LD_EXP 24
6295: PUSH
6296: LD_VAR 0 2
6300: ARRAY
6301: PUSH
6302: LD_INT 1
6304: EQUAL
6305: IFFALSE 6333
// begin bc_type = b_lab ;
6307: LD_ADDR_OWVAR 42
6311: PUSH
6312: LD_INT 6
6314: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
6315: LD_ADDR_OWVAR 44
6319: PUSH
6320: LD_INT 9
6322: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
6323: LD_ADDR_OWVAR 45
6327: PUSH
6328: LD_INT 9
6330: ST_TO_ADDR
// end else
6331: GO 6357
// begin bc_type = b_lab_full ;
6333: LD_ADDR_OWVAR 42
6337: PUSH
6338: LD_INT 8
6340: ST_TO_ADDR
// bc_kind1 = b_lab_siberium ;
6341: LD_ADDR_OWVAR 44
6345: PUSH
6346: LD_INT 11
6348: ST_TO_ADDR
// bc_kind2 = b_lab_weapon ;
6349: LD_ADDR_OWVAR 45
6353: PUSH
6354: LD_INT 10
6356: ST_TO_ADDR
// end ; lab := CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ base ] [ 1 ] , labs_def [ pos ] [ base ] [ 2 ] , labs_def [ pos ] [ base ] [ 3 ] ) ;
6357: LD_ADDR_VAR 0 13
6361: PUSH
6362: LD_EXP 52
6366: PUSH
6367: LD_VAR 0 4
6371: ARRAY
6372: PUSH
6373: LD_VAR 0 2
6377: ARRAY
6378: PUSH
6379: LD_INT 1
6381: ARRAY
6382: PPUSH
6383: LD_EXP 52
6387: PUSH
6388: LD_VAR 0 4
6392: ARRAY
6393: PUSH
6394: LD_VAR 0 2
6398: ARRAY
6399: PUSH
6400: LD_INT 2
6402: ARRAY
6403: PPUSH
6404: LD_EXP 52
6408: PUSH
6409: LD_VAR 0 4
6413: ARRAY
6414: PUSH
6415: LD_VAR 0 2
6419: ARRAY
6420: PUSH
6421: LD_INT 3
6423: ARRAY
6424: PPUSH
6425: CALL_OW 47
6429: ST_TO_ADDR
// end ; if is_fact [ base ] then
6430: LD_EXP 25
6434: PUSH
6435: LD_VAR 0 2
6439: ARRAY
6440: IFFALSE 6549
// begin if is_fact [ base ] = 1 then
6442: LD_EXP 25
6446: PUSH
6447: LD_VAR 0 2
6451: ARRAY
6452: PUSH
6453: LD_INT 1
6455: EQUAL
6456: IFFALSE 6468
// bc_type = b_workshop else
6458: LD_ADDR_OWVAR 42
6462: PUSH
6463: LD_INT 2
6465: ST_TO_ADDR
6466: GO 6476
// bc_type = b_factory ;
6468: LD_ADDR_OWVAR 42
6472: PUSH
6473: LD_INT 3
6475: ST_TO_ADDR
// fact := CreateAndPlaceBuildingXYD ( factories_def [ pos ] [ base ] [ 1 ] , factories_def [ pos ] [ base ] [ 2 ] , factories_def [ pos ] [ base ] [ 3 ] ) ;
6476: LD_ADDR_VAR 0 14
6480: PUSH
6481: LD_EXP 53
6485: PUSH
6486: LD_VAR 0 4
6490: ARRAY
6491: PUSH
6492: LD_VAR 0 2
6496: ARRAY
6497: PUSH
6498: LD_INT 1
6500: ARRAY
6501: PPUSH
6502: LD_EXP 53
6506: PUSH
6507: LD_VAR 0 4
6511: ARRAY
6512: PUSH
6513: LD_VAR 0 2
6517: ARRAY
6518: PUSH
6519: LD_INT 2
6521: ARRAY
6522: PPUSH
6523: LD_EXP 53
6527: PUSH
6528: LD_VAR 0 4
6532: ARRAY
6533: PUSH
6534: LD_VAR 0 2
6538: ARRAY
6539: PUSH
6540: LD_INT 3
6542: ARRAY
6543: PPUSH
6544: CALL_OW 47
6548: ST_TO_ADDR
// end ; if is_arm [ base ] then
6549: LD_EXP 26
6553: PUSH
6554: LD_VAR 0 2
6558: ARRAY
6559: IFFALSE 6668
// begin if is_arm [ base ] = 1 then
6561: LD_EXP 26
6565: PUSH
6566: LD_VAR 0 2
6570: ARRAY
6571: PUSH
6572: LD_INT 1
6574: EQUAL
6575: IFFALSE 6587
// bc_type = b_armoury else
6577: LD_ADDR_OWVAR 42
6581: PUSH
6582: LD_INT 4
6584: ST_TO_ADDR
6585: GO 6595
// bc_type = b_barracks ;
6587: LD_ADDR_OWVAR 42
6591: PUSH
6592: LD_INT 5
6594: ST_TO_ADDR
// arm := CreateAndPlaceBuildingXYD ( armories_def [ pos ] [ base ] [ 1 ] , armories_def [ pos ] [ base ] [ 2 ] , armories_def [ pos ] [ base ] [ 3 ] ) ;
6595: LD_ADDR_VAR 0 15
6599: PUSH
6600: LD_EXP 54
6604: PUSH
6605: LD_VAR 0 4
6609: ARRAY
6610: PUSH
6611: LD_VAR 0 2
6615: ARRAY
6616: PUSH
6617: LD_INT 1
6619: ARRAY
6620: PPUSH
6621: LD_EXP 54
6625: PUSH
6626: LD_VAR 0 4
6630: ARRAY
6631: PUSH
6632: LD_VAR 0 2
6636: ARRAY
6637: PUSH
6638: LD_INT 2
6640: ARRAY
6641: PPUSH
6642: LD_EXP 54
6646: PUSH
6647: LD_VAR 0 4
6651: ARRAY
6652: PUSH
6653: LD_VAR 0 2
6657: ARRAY
6658: PUSH
6659: LD_INT 3
6661: ARRAY
6662: PPUSH
6663: CALL_OW 47
6667: ST_TO_ADDR
// end ; for i := 1 to number_of_pplants [ base ] do
6668: LD_ADDR_VAR 0 8
6672: PUSH
6673: DOUBLE
6674: LD_INT 1
6676: DEC
6677: ST_TO_ADDR
6678: LD_EXP 22
6682: PUSH
6683: LD_VAR 0 2
6687: ARRAY
6688: PUSH
6689: FOR_TO
6690: IFFALSE 6787
// begin bc_type = b_oil_power ;
6692: LD_ADDR_OWVAR 42
6696: PUSH
6697: LD_INT 26
6699: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( pplants_def [ pos ] [ base ] [ i ] [ 1 ] , pplants_def [ pos ] [ base ] [ i ] [ 2 ] , pplants_def [ pos ] [ base ] [ i ] [ 3 ] ) ;
6700: LD_EXP 55
6704: PUSH
6705: LD_VAR 0 4
6709: ARRAY
6710: PUSH
6711: LD_VAR 0 2
6715: ARRAY
6716: PUSH
6717: LD_VAR 0 8
6721: ARRAY
6722: PUSH
6723: LD_INT 1
6725: ARRAY
6726: PPUSH
6727: LD_EXP 55
6731: PUSH
6732: LD_VAR 0 4
6736: ARRAY
6737: PUSH
6738: LD_VAR 0 2
6742: ARRAY
6743: PUSH
6744: LD_VAR 0 8
6748: ARRAY
6749: PUSH
6750: LD_INT 2
6752: ARRAY
6753: PPUSH
6754: LD_EXP 55
6758: PUSH
6759: LD_VAR 0 4
6763: ARRAY
6764: PUSH
6765: LD_VAR 0 2
6769: ARRAY
6770: PUSH
6771: LD_VAR 0 8
6775: ARRAY
6776: PUSH
6777: LD_INT 3
6779: ARRAY
6780: PPUSH
6781: CALL_OW 47
// end ;
6785: GO 6689
6787: POP
6788: POP
// for i := 1 to deposits [ base ] [ 1 ] do
6789: LD_ADDR_VAR 0 8
6793: PUSH
6794: DOUBLE
6795: LD_INT 1
6797: DEC
6798: ST_TO_ADDR
6799: LD_EXP 28
6803: PUSH
6804: LD_VAR 0 2
6808: ARRAY
6809: PUSH
6810: LD_INT 1
6812: ARRAY
6813: PUSH
6814: FOR_TO
6815: IFFALSE 6952
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i ] , false ) ;
6817: LD_ADDR_VAR 0 17
6821: PUSH
6822: LD_EXP 56
6826: PUSH
6827: LD_VAR 0 4
6831: ARRAY
6832: PUSH
6833: LD_VAR 0 2
6837: ARRAY
6838: PUSH
6839: LD_VAR 0 8
6843: ARRAY
6844: PPUSH
6845: LD_INT 0
6847: PPUSH
6848: CALL_OW 16
6852: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_oil ) ;
6853: LD_VAR 0 17
6857: PUSH
6858: LD_INT 1
6860: ARRAY
6861: PPUSH
6862: LD_VAR 0 17
6866: PUSH
6867: LD_INT 2
6869: ARRAY
6870: PPUSH
6871: LD_INT 2
6873: PPUSH
6874: CALL_OW 62
// if are_mines [ base ] then
6878: LD_EXP 23
6882: PUSH
6883: LD_VAR 0 2
6887: ARRAY
6888: IFFALSE 6950
// begin bc_type = b_oil_mine ;
6890: LD_ADDR_OWVAR 42
6894: PUSH
6895: LD_INT 29
6897: ST_TO_ADDR
// SetResourceVisibility ( coord [ 1 ] , coord [ 2 ] , uc_side ) ;
6898: LD_VAR 0 17
6902: PUSH
6903: LD_INT 1
6905: ARRAY
6906: PPUSH
6907: LD_VAR 0 17
6911: PUSH
6912: LD_INT 2
6914: ARRAY
6915: PPUSH
6916: LD_OWVAR 20
6920: PPUSH
6921: CALL_OW 441
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
6925: LD_VAR 0 17
6929: PUSH
6930: LD_INT 1
6932: ARRAY
6933: PPUSH
6934: LD_VAR 0 17
6938: PUSH
6939: LD_INT 2
6941: ARRAY
6942: PPUSH
6943: LD_INT 0
6945: PPUSH
6946: CALL_OW 47
// end ; end ;
6950: GO 6814
6952: POP
6953: POP
// for i := 1 to deposits [ base ] [ 2 ] do
6954: LD_ADDR_VAR 0 8
6958: PUSH
6959: DOUBLE
6960: LD_INT 1
6962: DEC
6963: ST_TO_ADDR
6964: LD_EXP 28
6968: PUSH
6969: LD_VAR 0 2
6973: ARRAY
6974: PUSH
6975: LD_INT 2
6977: ARRAY
6978: PUSH
6979: FOR_TO
6980: IFFALSE 7139
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i + deposits [ base ] [ 1 ] ] , false ) ;
6982: LD_ADDR_VAR 0 17
6986: PUSH
6987: LD_EXP 56
6991: PUSH
6992: LD_VAR 0 4
6996: ARRAY
6997: PUSH
6998: LD_VAR 0 2
7002: ARRAY
7003: PUSH
7004: LD_VAR 0 8
7008: PUSH
7009: LD_EXP 28
7013: PUSH
7014: LD_VAR 0 2
7018: ARRAY
7019: PUSH
7020: LD_INT 1
7022: ARRAY
7023: PLUS
7024: ARRAY
7025: PPUSH
7026: LD_INT 0
7028: PPUSH
7029: CALL_OW 16
7033: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_siberit ) ;
7034: LD_VAR 0 17
7038: PUSH
7039: LD_INT 1
7041: ARRAY
7042: PPUSH
7043: LD_VAR 0 17
7047: PUSH
7048: LD_INT 2
7050: ARRAY
7051: PPUSH
7052: LD_INT 3
7054: PPUSH
7055: CALL_OW 62
// if are_mines [ base ] and def_siberite_detection then
7059: LD_EXP 23
7063: PUSH
7064: LD_VAR 0 2
7068: ARRAY
7069: PUSH
7070: LD_EXP 8
7074: AND
7075: IFFALSE 7137
// begin bc_type = b_siberite_mine ;
7077: LD_ADDR_OWVAR 42
7081: PUSH
7082: LD_INT 30
7084: ST_TO_ADDR
// SetResourceVisibility ( coord [ 1 ] , coord [ 2 ] , uc_side ) ;
7085: LD_VAR 0 17
7089: PUSH
7090: LD_INT 1
7092: ARRAY
7093: PPUSH
7094: LD_VAR 0 17
7098: PUSH
7099: LD_INT 2
7101: ARRAY
7102: PPUSH
7103: LD_OWVAR 20
7107: PPUSH
7108: CALL_OW 441
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
7112: LD_VAR 0 17
7116: PUSH
7117: LD_INT 1
7119: ARRAY
7120: PPUSH
7121: LD_VAR 0 17
7125: PUSH
7126: LD_INT 2
7128: ARRAY
7129: PPUSH
7130: LD_INT 0
7132: PPUSH
7133: CALL_OW 47
// end ; end ;
7137: GO 6979
7139: POP
7140: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
7141: LD_ADDR_VAR 0 5
7145: PUSH
7146: LD_EXP 49
7150: PUSH
7151: LD_VAR 0 4
7155: ARRAY
7156: PUSH
7157: LD_VAR 0 2
7161: ARRAY
7162: PUSH
7163: LD_INT 1
7165: ARRAY
7166: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
7167: LD_ADDR_VAR 0 6
7171: PUSH
7172: LD_EXP 49
7176: PUSH
7177: LD_VAR 0 4
7181: ARRAY
7182: PUSH
7183: LD_VAR 0 2
7187: ARRAY
7188: PUSH
7189: LD_INT 2
7191: ARRAY
7192: ST_TO_ADDR
// if base = 1 then
7193: LD_VAR 0 2
7197: PUSH
7198: LD_INT 1
7200: EQUAL
7201: IFFALSE 7309
// if def_morale_flags then
7203: LD_EXP 14
7207: IFFALSE 7309
// SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , def_bf_params [ 1 ] ] , [ bfo_defend_bonus_vehicle , def_bf_params [ 2 ] ] , [ bfo_defend_bonus_building , def_bf_params [ 3 ] ] , [ bfo_range , 17 ] , [ bfo_height , def_bf_params [ 4 ] ] ] ) ;
7209: LD_VAR 0 1
7213: PPUSH
7214: LD_VAR 0 5
7218: PPUSH
7219: LD_VAR 0 6
7223: PPUSH
7224: LD_INT 1
7226: PUSH
7227: LD_EXP 36
7231: PUSH
7232: LD_INT 1
7234: ARRAY
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 2
7242: PUSH
7243: LD_EXP 36
7247: PUSH
7248: LD_INT 2
7250: ARRAY
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: LD_INT 3
7258: PUSH
7259: LD_EXP 36
7263: PUSH
7264: LD_INT 3
7266: ARRAY
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 10
7274: PUSH
7275: LD_INT 17
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: LD_INT 20
7284: PUSH
7285: LD_EXP 36
7289: PUSH
7290: LD_INT 4
7292: ARRAY
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: PPUSH
7305: CALL_OW 418
// if number_of_people [ base ] then
7309: LD_EXP 21
7313: PUSH
7314: LD_VAR 0 2
7318: ARRAY
7319: IFFALSE 7528
// begin if No_Mechs then
7321: LD_EXP 69
7325: IFFALSE 7337
// Mode := 2 else
7327: LD_ADDR_VAR 0 16
7331: PUSH
7332: LD_INT 2
7334: ST_TO_ADDR
7335: GO 7345
// Mode := 1 ;
7337: LD_ADDR_VAR 0 16
7341: PUSH
7342: LD_INT 1
7344: ST_TO_ADDR
// neng := number_of_people [ base ] ;
7345: LD_ADDR_LOC 5
7349: PUSH
7350: LD_EXP 21
7354: PUSH
7355: LD_VAR 0 2
7359: ARRAY
7360: ST_TO_ADDR
// nmech := neng div [ 4 , 3 ] [ Mode ] ;
7361: LD_ADDR_LOC 7
7365: PUSH
7366: LD_LOC 5
7370: PUSH
7371: LD_INT 4
7373: PUSH
7374: LD_INT 3
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: PUSH
7381: LD_VAR 0 16
7385: ARRAY
7386: DIV
7387: ST_TO_ADDR
// neng := neng - nmech ;
7388: LD_ADDR_LOC 5
7392: PUSH
7393: LD_LOC 5
7397: PUSH
7398: LD_LOC 7
7402: MINUS
7403: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
7404: LD_ADDR_LOC 6
7408: PUSH
7409: LD_LOC 5
7413: PUSH
7414: LD_INT 3
7416: PUSH
7417: LD_INT 2
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: LD_VAR 0 16
7428: ARRAY
7429: DIV
7430: ST_TO_ADDR
// if ( nsci < 1 ) then
7431: LD_LOC 6
7435: PUSH
7436: LD_INT 1
7438: LESS
7439: IFFALSE 7449
// nsci := 1 ;
7441: LD_ADDR_LOC 6
7445: PUSH
7446: LD_INT 1
7448: ST_TO_ADDR
// neng := neng - nsci ;
7449: LD_ADDR_LOC 5
7453: PUSH
7454: LD_LOC 5
7458: PUSH
7459: LD_LOC 6
7463: MINUS
7464: ST_TO_ADDR
// nsol := [ neng div 2 , 0 ] [ Mode ] ;
7465: LD_ADDR_LOC 8
7469: PUSH
7470: LD_LOC 5
7474: PUSH
7475: LD_INT 2
7477: DIV
7478: PUSH
7479: LD_INT 0
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: PUSH
7486: LD_VAR 0 16
7490: ARRAY
7491: ST_TO_ADDR
// neng := neng - nsol ;
7492: LD_ADDR_LOC 5
7496: PUSH
7497: LD_LOC 5
7501: PUSH
7502: LD_LOC 8
7506: MINUS
7507: ST_TO_ADDR
// if ( neng < 1 ) then
7508: LD_LOC 5
7512: PUSH
7513: LD_INT 1
7515: LESS
7516: IFFALSE 7526
// neng := 1 ;
7518: LD_ADDR_LOC 5
7522: PUSH
7523: LD_INT 1
7525: ST_TO_ADDR
// end else
7526: GO 7560
// begin neng := 0 ;
7528: LD_ADDR_LOC 5
7532: PUSH
7533: LD_INT 0
7535: ST_TO_ADDR
// nsci := 0 ;
7536: LD_ADDR_LOC 6
7540: PUSH
7541: LD_INT 0
7543: ST_TO_ADDR
// nmech := 0 ;
7544: LD_ADDR_LOC 7
7548: PUSH
7549: LD_INT 0
7551: ST_TO_ADDR
// nsol := 0 ;
7552: LD_ADDR_LOC 8
7556: PUSH
7557: LD_INT 0
7559: ST_TO_ADDR
// end ; commander := true ;
7560: LD_ADDR_LOC 1
7564: PUSH
7565: LD_INT 1
7567: ST_TO_ADDR
// soldiers_created := 0 ;
7568: LD_ADDR_LOC 4
7572: PUSH
7573: LD_INT 0
7575: ST_TO_ADDR
// for i := 1 to are_breastworks [ base ] do
7576: LD_ADDR_VAR 0 8
7580: PUSH
7581: DOUBLE
7582: LD_INT 1
7584: DEC
7585: ST_TO_ADDR
7586: LD_EXP 27
7590: PUSH
7591: LD_VAR 0 2
7595: ARRAY
7596: PUSH
7597: FOR_TO
7598: IFFALSE 7884
// begin if are_breastworks [ base ] [ i ] = 1 then
7600: LD_EXP 27
7604: PUSH
7605: LD_VAR 0 2
7609: ARRAY
7610: PUSH
7611: LD_VAR 0 8
7615: ARRAY
7616: PUSH
7617: LD_INT 1
7619: EQUAL
7620: IFFALSE 7632
// bc_type := b_breastwork else
7622: LD_ADDR_OWVAR 42
7626: PUSH
7627: LD_INT 31
7629: ST_TO_ADDR
7630: GO 7640
// bc_type := b_bunker ;
7632: LD_ADDR_OWVAR 42
7636: PUSH
7637: LD_INT 32
7639: ST_TO_ADDR
// x := breastworks_def [ pos ] [ base ] [ i ] [ 1 ] ;
7640: LD_ADDR_VAR 0 5
7644: PUSH
7645: LD_EXP 51
7649: PUSH
7650: LD_VAR 0 4
7654: ARRAY
7655: PUSH
7656: LD_VAR 0 2
7660: ARRAY
7661: PUSH
7662: LD_VAR 0 8
7666: ARRAY
7667: PUSH
7668: LD_INT 1
7670: ARRAY
7671: ST_TO_ADDR
// y := breastworks_def [ pos ] [ base ] [ i ] [ 2 ] ;
7672: LD_ADDR_VAR 0 6
7676: PUSH
7677: LD_EXP 51
7681: PUSH
7682: LD_VAR 0 4
7686: ARRAY
7687: PUSH
7688: LD_VAR 0 2
7692: ARRAY
7693: PUSH
7694: LD_VAR 0 8
7698: ARRAY
7699: PUSH
7700: LD_INT 2
7702: ARRAY
7703: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ base ] [ i ] [ 3 ] ;
7704: LD_ADDR_VAR 0 7
7708: PUSH
7709: LD_EXP 51
7713: PUSH
7714: LD_VAR 0 4
7718: ARRAY
7719: PUSH
7720: LD_VAR 0 2
7724: ARRAY
7725: PUSH
7726: LD_VAR 0 8
7730: ARRAY
7731: PUSH
7732: LD_INT 3
7734: ARRAY
7735: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
7736: LD_ADDR_VAR 0 11
7740: PUSH
7741: LD_VAR 0 5
7745: PPUSH
7746: LD_VAR 0 6
7750: PPUSH
7751: LD_VAR 0 7
7755: PPUSH
7756: CALL_OW 47
7760: ST_TO_ADDR
// if bc_type = b_bunker then
7761: LD_OWVAR 42
7765: PUSH
7766: LD_INT 32
7768: EQUAL
7769: IFFALSE 7846
// case uc_nation of nation_american :
7771: LD_OWVAR 21
7775: PUSH
7776: LD_INT 1
7778: DOUBLE
7779: EQUAL
7780: IFTRUE 7784
7782: GO 7799
7784: POP
// PlaceWeaponTurret ( br , us_machine_gun ) ; nation_arabian :
7785: LD_VAR 0 11
7789: PPUSH
7790: LD_INT 2
7792: PPUSH
7793: CALL_OW 431
7797: GO 7846
7799: LD_INT 2
7801: DOUBLE
7802: EQUAL
7803: IFTRUE 7807
7805: GO 7822
7807: POP
// PlaceWeaponTurret ( br , ar_double_machine_gun ) ; nation_russian :
7808: LD_VAR 0 11
7812: PPUSH
7813: LD_INT 24
7815: PPUSH
7816: CALL_OW 431
7820: GO 7846
7822: LD_INT 3
7824: DOUBLE
7825: EQUAL
7826: IFTRUE 7830
7828: GO 7845
7830: POP
// PlaceWeaponTurret ( br , ru_heavy_machine_gun ) ; end ;
7831: LD_VAR 0 11
7835: PPUSH
7836: LD_INT 42
7838: PPUSH
7839: CALL_OW 431
7843: GO 7846
7845: POP
// if i <= nsol then
7846: LD_VAR 0 8
7850: PUSH
7851: LD_LOC 8
7855: LESSEQUAL
7856: IFFALSE 7882
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
7858: LD_INT 1
7860: PPUSH
7861: LD_INT 1
7863: PPUSH
7864: LD_INT 0
7866: PPUSH
7867: LD_INT 0
7869: PPUSH
7870: LD_INT 0
7872: PPUSH
7873: LD_VAR 0 11
7877: PPUSH
7878: CALL 5197 0 6
// end ;
7882: GO 7597
7884: POP
7885: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
7886: LD_ADDR_VAR 0 5
7890: PUSH
7891: LD_EXP 49
7895: PUSH
7896: LD_VAR 0 4
7900: ARRAY
7901: PUSH
7902: LD_VAR 0 2
7906: ARRAY
7907: PUSH
7908: LD_INT 1
7910: ARRAY
7911: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
7912: LD_ADDR_VAR 0 6
7916: PUSH
7917: LD_EXP 49
7921: PUSH
7922: LD_VAR 0 4
7926: ARRAY
7927: PUSH
7928: LD_VAR 0 2
7932: ARRAY
7933: PUSH
7934: LD_INT 2
7936: ARRAY
7937: ST_TO_ADDR
// if nsol > are_breastworks [ base ] then
7938: LD_LOC 8
7942: PUSH
7943: LD_EXP 27
7947: PUSH
7948: LD_VAR 0 2
7952: ARRAY
7953: GREATER
7954: IFFALSE 8042
// if arm then
7956: LD_VAR 0 15
7960: IFFALSE 8002
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , 0 , 0 , 0 , arm ) else
7962: LD_LOC 8
7966: PUSH
7967: LD_EXP 27
7971: PUSH
7972: LD_VAR 0 2
7976: ARRAY
7977: MINUS
7978: PPUSH
7979: LD_INT 1
7981: PPUSH
7982: LD_INT 0
7984: PPUSH
7985: LD_INT 0
7987: PPUSH
7988: LD_INT 0
7990: PPUSH
7991: LD_VAR 0 15
7995: PPUSH
7996: CALL 5197 0 6
8000: GO 8042
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , x , y , 5 , 0 ) ;
8002: LD_LOC 8
8006: PUSH
8007: LD_EXP 27
8011: PUSH
8012: LD_VAR 0 2
8016: ARRAY
8017: MINUS
8018: PPUSH
8019: LD_INT 1
8021: PPUSH
8022: LD_VAR 0 5
8026: PPUSH
8027: LD_VAR 0 6
8031: PPUSH
8032: LD_INT 5
8034: PPUSH
8035: LD_INT 0
8037: PPUSH
8038: CALL 5197 0 6
// if dep then
8042: LD_VAR 0 12
8046: IFFALSE 8076
// prepare_people ( neng , class_engineer , 0 , 0 , 0 , dep ) else
8048: LD_LOC 5
8052: PPUSH
8053: LD_INT 2
8055: PPUSH
8056: LD_INT 0
8058: PPUSH
8059: LD_INT 0
8061: PPUSH
8062: LD_INT 0
8064: PPUSH
8065: LD_VAR 0 12
8069: PPUSH
8070: CALL 5197 0 6
8074: GO 8104
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
8076: LD_LOC 5
8080: PPUSH
8081: LD_INT 2
8083: PPUSH
8084: LD_VAR 0 5
8088: PPUSH
8089: LD_VAR 0 6
8093: PPUSH
8094: LD_INT 5
8096: PPUSH
8097: LD_INT 0
8099: PPUSH
8100: CALL 5197 0 6
// if fact then
8104: LD_VAR 0 14
8108: IFFALSE 8138
// prepare_people ( nmech , class_mechanic , 0 , 0 , 0 , fact ) else
8110: LD_LOC 7
8114: PPUSH
8115: LD_INT 3
8117: PPUSH
8118: LD_INT 0
8120: PPUSH
8121: LD_INT 0
8123: PPUSH
8124: LD_INT 0
8126: PPUSH
8127: LD_VAR 0 14
8131: PPUSH
8132: CALL 5197 0 6
8136: GO 8166
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
8138: LD_LOC 7
8142: PPUSH
8143: LD_INT 3
8145: PPUSH
8146: LD_VAR 0 5
8150: PPUSH
8151: LD_VAR 0 6
8155: PPUSH
8156: LD_INT 5
8158: PPUSH
8159: LD_INT 0
8161: PPUSH
8162: CALL 5197 0 6
// if lab then
8166: LD_VAR 0 13
8170: IFFALSE 8200
// prepare_people ( nsci , class_scientistic , 0 , 0 , 0 , lab ) else
8172: LD_LOC 6
8176: PPUSH
8177: LD_INT 4
8179: PPUSH
8180: LD_INT 0
8182: PPUSH
8183: LD_INT 0
8185: PPUSH
8186: LD_INT 0
8188: PPUSH
8189: LD_VAR 0 13
8193: PPUSH
8194: CALL 5197 0 6
8198: GO 8228
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
8200: LD_LOC 6
8204: PPUSH
8205: LD_INT 4
8207: PPUSH
8208: LD_VAR 0 5
8212: PPUSH
8213: LD_VAR 0 6
8217: PPUSH
8218: LD_INT 5
8220: PPUSH
8221: LD_INT 0
8223: PPUSH
8224: CALL 5197 0 6
// max = 0 ;
8228: LD_ADDR_VAR 0 18
8232: PUSH
8233: LD_INT 0
8235: ST_TO_ADDR
// for un in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
8236: LD_ADDR_VAR 0 10
8240: PUSH
8241: LD_INT 22
8243: PUSH
8244: LD_VAR 0 1
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: PUSH
8253: LD_INT 21
8255: PUSH
8256: LD_INT 1
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: PPUSH
8267: CALL_OW 69
8271: PUSH
8272: FOR_IN
8273: IFFALSE 8315
// begin if GetSkill ( un , skill_engineering ) > max then
8275: LD_VAR 0 10
8279: PPUSH
8280: LD_INT 2
8282: PPUSH
8283: CALL_OW 259
8287: PUSH
8288: LD_VAR 0 18
8292: GREATER
8293: IFFALSE 8313
// max := GetSkill ( un , skill_engineering ) ;
8295: LD_ADDR_VAR 0 18
8299: PUSH
8300: LD_VAR 0 10
8304: PPUSH
8305: LD_INT 2
8307: PPUSH
8308: CALL_OW 259
8312: ST_TO_ADDR
// end ;
8313: GO 8272
8315: POP
8316: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) , max ) ;
8317: LD_INT 22
8319: PUSH
8320: LD_VAR 0 1
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 21
8331: PUSH
8332: LD_INT 3
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PPUSH
8343: CALL_OW 69
8347: PPUSH
8348: LD_VAR 0 18
8352: PPUSH
8353: CALL_OW 241
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
8357: LD_EXP 8
8361: PUSH
8362: LD_INT 20
8364: PPUSH
8365: LD_VAR 0 1
8369: PPUSH
8370: CALL_OW 321
8374: PUSH
8375: LD_INT 1
8377: EQUAL
8378: AND
8379: IFFALSE 8396
// SetTech ( tech_SibDet , side , state_researched ) ;
8381: LD_INT 20
8383: PPUSH
8384: LD_VAR 0 1
8388: PPUSH
8389: LD_INT 2
8391: PPUSH
8392: CALL_OW 322
// if def_siberite_bomb = 1 then
8396: LD_EXP 15
8400: PUSH
8401: LD_INT 1
8403: EQUAL
8404: IFFALSE 8438
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
8406: LD_INT 25
8408: PPUSH
8409: LD_VAR 0 1
8413: PPUSH
8414: LD_INT 1
8416: PPUSH
8417: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
8421: LD_INT 73
8423: PPUSH
8424: LD_VAR 0 1
8428: PPUSH
8429: LD_INT 1
8431: PPUSH
8432: CALL_OW 322
// end else
8436: GO 8468
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
8438: LD_INT 25
8440: PPUSH
8441: LD_VAR 0 1
8445: PPUSH
8446: LD_INT 0
8448: PPUSH
8449: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
8453: LD_INT 73
8455: PPUSH
8456: LD_VAR 0 1
8460: PPUSH
8461: LD_INT 0
8463: PPUSH
8464: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
8468: LD_INT 24
8470: PPUSH
8471: LD_VAR 0 1
8475: PPUSH
8476: LD_INT 0
8478: PPUSH
8479: CALL_OW 322
// global_defined := true ;
8483: LD_ADDR_LOC 3
8487: PUSH
8488: LD_INT 1
8490: ST_TO_ADDR
// end ;
8491: LD_VAR 0 3
8495: RET
// every 0 0$1 do
8496: GO 8498
8498: DISABLE
// if ( def_siberite_bomb > 1 ) then
8499: LD_EXP 15
8503: PUSH
8504: LD_INT 1
8506: GREATER
8507: IFFALSE 8522
// begin wait ( siberite_bomb_Delay ) ;
8509: LD_EXP 38
8513: PPUSH
8514: CALL_OW 67
// EnableSibFiss ;
8518: CALL 8523 0 0
// end ;
8522: END
// function EnableSibFiss ; var i ; begin
8523: LD_INT 0
8525: PPUSH
8526: PPUSH
// for i := 1 to 8 do
8527: LD_ADDR_VAR 0 2
8531: PUSH
8532: DOUBLE
8533: LD_INT 1
8535: DEC
8536: ST_TO_ADDR
8537: LD_INT 8
8539: PUSH
8540: FOR_TO
8541: IFFALSE 8572
// if Side_Positions [ i ] then
8543: LD_EXP 43
8547: PUSH
8548: LD_VAR 0 2
8552: ARRAY
8553: IFFALSE 8570
// SetTech ( tech_SibFiss , i , state_enabled ) ;
8555: LD_INT 25
8557: PPUSH
8558: LD_VAR 0 2
8562: PPUSH
8563: LD_INT 1
8565: PPUSH
8566: CALL_OW 322
8570: GO 8540
8572: POP
8573: POP
// end ;
8574: LD_VAR 0 1
8578: RET
// function prepare_sides ; var i ; begin
8579: LD_INT 0
8581: PPUSH
8582: PPUSH
// global_units := [ ] ;
8583: LD_ADDR_LOC 2
8587: PUSH
8588: EMPTY
8589: ST_TO_ADDR
// global_defined := false ;
8590: LD_ADDR_LOC 3
8594: PUSH
8595: LD_INT 0
8597: ST_TO_ADDR
// for i := 1 to Side_Positions do
8598: LD_ADDR_VAR 0 2
8602: PUSH
8603: DOUBLE
8604: LD_INT 1
8606: DEC
8607: ST_TO_ADDR
8608: LD_EXP 43
8612: PUSH
8613: FOR_TO
8614: IFFALSE 8654
// if Side_Positions [ i ] then
8616: LD_EXP 43
8620: PUSH
8621: LD_VAR 0 2
8625: ARRAY
8626: IFFALSE 8652
// begin prepare_side_base ( i , 1 ) ;
8628: LD_VAR 0 2
8632: PPUSH
8633: LD_INT 1
8635: PPUSH
8636: CALL 5785 0 2
// prepare_side_base ( i , 2 ) ;
8640: LD_VAR 0 2
8644: PPUSH
8645: LD_INT 2
8647: PPUSH
8648: CALL 5785 0 2
// end ;
8652: GO 8613
8654: POP
8655: POP
// end ;
8656: LD_VAR 0 1
8660: RET
// starting begin disable ( 98 ) ;
8661: LD_INT 98
8663: DISABLE_MARKED
// disable ( 400 ) ;
8664: LD_INT 400
8666: DISABLE_MARKED
// disable ( 401 ) ;
8667: LD_INT 401
8669: DISABLE_MARKED
// disable ( 600 ) ;
8670: LD_INT 600
8672: DISABLE_MARKED
// enable_human_prediction := true ;
8673: LD_ADDR_OWVAR 51
8677: PUSH
8678: LD_INT 1
8680: ST_TO_ADDR
// mp_selectmsg := true ;
8681: LD_ADDR_OWVAR 13
8685: PUSH
8686: LD_INT 1
8688: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
8689: CALL 68 0 0
// prepare_map_coordinates ;
8693: CALL 3700 0 0
// ResetFog ;
8697: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
8701: LD_OWVAR 2
8705: PPUSH
8706: CALL_OW 520
// prepare_sides ;
8710: CALL 8579 0 0
// Init_Win_Condition ;
8714: CALL 16130 0 0
// InitLimits ;
8718: CALL 14790 0 0
// ShowTimer ;
8722: CALL 15727 0 0
// music_nat := Side_Nations [ your_side ] ;
8726: LD_ADDR_OWVAR 71
8730: PUSH
8731: LD_EXP 44
8735: PUSH
8736: LD_OWVAR 2
8740: ARRAY
8741: ST_TO_ADDR
// if IAmSpec then
8742: CALL_OW 531
8746: IFFALSE 8770
// begin fogoff ( true ) ;
8748: LD_INT 1
8750: PPUSH
8751: CALL_OW 344
// CenterNowOnXY ( 109 , 61 ) ;
8755: LD_INT 109
8757: PPUSH
8758: LD_INT 61
8760: PPUSH
8761: CALL_OW 86
// enable ( 400 ) ;
8765: LD_INT 400
8767: ENABLE_MARKED
// end else
8768: GO 8824
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 2 ] ) ;
8770: LD_EXP 49
8774: PUSH
8775: LD_EXP 43
8779: PUSH
8780: LD_OWVAR 2
8784: ARRAY
8785: ARRAY
8786: PUSH
8787: LD_INT 1
8789: ARRAY
8790: PUSH
8791: LD_INT 1
8793: ARRAY
8794: PPUSH
8795: LD_EXP 49
8799: PUSH
8800: LD_EXP 43
8804: PUSH
8805: LD_OWVAR 2
8809: ARRAY
8810: ARRAY
8811: PUSH
8812: LD_INT 1
8814: ARRAY
8815: PUSH
8816: LD_INT 2
8818: ARRAY
8819: PPUSH
8820: CALL_OW 86
// end ; InitApeman ;
8824: CALL 10224 0 0
// if def_builduptime then
8828: LD_EXP 17
8832: IFFALSE 8838
// BeginBuildUp ;
8834: CALL 13414 0 0
// end ; end_of_file
8838: END
// every 1 1$0 + 0 0$0.3 do
8839: GO 8841
8841: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
8842: LD_INT 4
8844: PPUSH
8845: LD_INT 5
8847: PPUSH
8848: CALL_OW 12
8852: PPUSH
8853: LD_INT 1
8855: PPUSH
8856: CALL_OW 57
// enable ;
8860: ENABLE
// end ;
8861: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
8862: GO 8864
8864: DISABLE
8865: LD_INT 0
8867: PPUSH
8868: PPUSH
// begin case tick of 1 .. 1 1$0 :
8869: LD_OWVAR 1
8873: PUSH
8874: LD_INT 1
8876: DOUBLE
8877: GREATEREQUAL
8878: IFFALSE 8886
8880: LD_INT 2100
8882: DOUBLE
8883: LESSEQUAL
8884: IFTRUE 8888
8886: GO 8916
8888: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
8889: LD_EXP 32
8893: PUSH
8894: LD_INT 100
8896: DIVREAL
8897: PUSH
8898: LD_INT 350
8900: PPUSH
8901: LD_INT 700
8903: PPUSH
8904: CALL_OW 12
8908: MUL
8909: PPUSH
8910: CALL_OW 67
8914: GO 9218
8916: LD_INT 2100
8918: PUSH
8919: LD_INT 1
8921: PLUS
8922: DOUBLE
8923: GREATEREQUAL
8924: IFFALSE 8932
8926: LD_INT 10500
8928: DOUBLE
8929: LESSEQUAL
8930: IFTRUE 8934
8932: GO 8962
8934: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
8935: LD_EXP 32
8939: PUSH
8940: LD_INT 100
8942: DIVREAL
8943: PUSH
8944: LD_INT 700
8946: PPUSH
8947: LD_INT 1225
8949: PPUSH
8950: CALL_OW 12
8954: MUL
8955: PPUSH
8956: CALL_OW 67
8960: GO 9218
8962: LD_INT 10500
8964: PUSH
8965: LD_INT 1
8967: PLUS
8968: DOUBLE
8969: GREATEREQUAL
8970: IFFALSE 8978
8972: LD_INT 21000
8974: DOUBLE
8975: LESSEQUAL
8976: IFTRUE 8980
8978: GO 9008
8980: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
8981: LD_EXP 32
8985: PUSH
8986: LD_INT 100
8988: DIVREAL
8989: PUSH
8990: LD_INT 1225
8992: PPUSH
8993: LD_INT 1750
8995: PPUSH
8996: CALL_OW 12
9000: MUL
9001: PPUSH
9002: CALL_OW 67
9006: GO 9218
9008: LD_INT 21000
9010: PUSH
9011: LD_INT 1
9013: PLUS
9014: DOUBLE
9015: GREATEREQUAL
9016: IFFALSE 9024
9018: LD_INT 42000
9020: DOUBLE
9021: LESSEQUAL
9022: IFTRUE 9026
9024: GO 9054
9026: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
9027: LD_EXP 32
9031: PUSH
9032: LD_INT 100
9034: DIVREAL
9035: PUSH
9036: LD_INT 1750
9038: PPUSH
9039: LD_INT 2450
9041: PPUSH
9042: CALL_OW 12
9046: MUL
9047: PPUSH
9048: CALL_OW 67
9052: GO 9218
9054: LD_INT 42000
9056: PUSH
9057: LD_INT 1
9059: PLUS
9060: DOUBLE
9061: GREATEREQUAL
9062: IFFALSE 9070
9064: LD_INT 63000
9066: DOUBLE
9067: LESSEQUAL
9068: IFTRUE 9072
9070: GO 9100
9072: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
9073: LD_EXP 32
9077: PUSH
9078: LD_INT 100
9080: DIVREAL
9081: PUSH
9082: LD_INT 2450
9084: PPUSH
9085: LD_INT 2800
9087: PPUSH
9088: CALL_OW 12
9092: MUL
9093: PPUSH
9094: CALL_OW 67
9098: GO 9218
9100: LD_INT 63000
9102: PUSH
9103: LD_INT 1
9105: PLUS
9106: DOUBLE
9107: GREATEREQUAL
9108: IFFALSE 9116
9110: LD_INT 105000
9112: DOUBLE
9113: LESSEQUAL
9114: IFTRUE 9118
9116: GO 9146
9118: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
9119: LD_EXP 32
9123: PUSH
9124: LD_INT 100
9126: DIVREAL
9127: PUSH
9128: LD_INT 2800
9130: PPUSH
9131: LD_INT 3325
9133: PPUSH
9134: CALL_OW 12
9138: MUL
9139: PPUSH
9140: CALL_OW 67
9144: GO 9218
9146: LD_INT 105000
9148: PUSH
9149: LD_INT 1
9151: PLUS
9152: DOUBLE
9153: GREATEREQUAL
9154: IFFALSE 9162
9156: LD_INT 630000
9158: DOUBLE
9159: LESSEQUAL
9160: IFTRUE 9164
9162: GO 9192
9164: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
9165: LD_EXP 32
9169: PUSH
9170: LD_INT 100
9172: DIVREAL
9173: PUSH
9174: LD_INT 3325
9176: PPUSH
9177: LD_INT 4200
9179: PPUSH
9180: CALL_OW 12
9184: MUL
9185: PPUSH
9186: CALL_OW 67
9190: GO 9218
9192: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
9193: LD_EXP 32
9197: PUSH
9198: LD_INT 100
9200: DIVREAL
9201: PUSH
9202: LD_INT 4200
9204: PPUSH
9205: LD_INT 5250
9207: PPUSH
9208: CALL_OW 12
9212: MUL
9213: PPUSH
9214: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
9218: LD_ADDR_VAR 0 2
9222: PUSH
9223: LD_INT 3
9225: PPUSH
9226: LD_INT 5
9228: PPUSH
9229: CALL_OW 12
9233: ST_TO_ADDR
// for i = 1 to 2 do
9234: LD_ADDR_VAR 0 1
9238: PUSH
9239: DOUBLE
9240: LD_INT 1
9242: DEC
9243: ST_TO_ADDR
9244: LD_INT 2
9246: PUSH
9247: FOR_TO
9248: IFFALSE 9275
// CreateCratesArea ( amount , BuildUpAreas [ i ] , true ) ;
9250: LD_VAR 0 2
9254: PPUSH
9255: LD_EXP 65
9259: PUSH
9260: LD_VAR 0 1
9264: ARRAY
9265: PPUSH
9266: LD_INT 1
9268: PPUSH
9269: CALL_OW 55
9273: GO 9247
9275: POP
9276: POP
// enable ;
9277: ENABLE
// end ;
9278: PPOPN 2
9280: END
// every 0 0$20 + 0 0$0.9 do var i , filter ;
9281: GO 9283
9283: DISABLE
9284: LD_INT 0
9286: PPUSH
9287: PPUSH
// begin if GetResourceArea ( Valley , mat_cans ) < ( ( 300 - shipments_density ) / 100 * 5 ) then
9288: LD_INT 12
9290: PPUSH
9291: LD_INT 1
9293: PPUSH
9294: CALL_OW 287
9298: PUSH
9299: LD_INT 300
9301: PUSH
9302: LD_EXP 32
9306: MINUS
9307: PUSH
9308: LD_INT 100
9310: DIVREAL
9311: PUSH
9312: LD_INT 5
9314: MUL
9315: LESS
9316: IFFALSE 9339
// CreateCratesArea ( Rand ( 3 , 5 ) , Valley , true ) ;
9318: LD_INT 3
9320: PPUSH
9321: LD_INT 5
9323: PPUSH
9324: CALL_OW 12
9328: PPUSH
9329: LD_INT 12
9331: PPUSH
9332: LD_INT 1
9334: PPUSH
9335: CALL_OW 55
// enable ;
9339: ENABLE
// end ; end_of_file
9340: PPOPN 2
9342: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
9343: LD_VAR 0 1
9347: PPUSH
9348: CALL_OW 266
9352: PUSH
9353: LD_INT 0
9355: PUSH
9356: LD_INT 1
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: IN
9363: IFFALSE 9388
// SetBName ( b , @ & GetSide ( b ) ) ;
9365: LD_VAR 0 1
9369: PPUSH
9370: LD_STRING @
9372: PUSH
9373: LD_VAR 0 1
9377: PPUSH
9378: CALL_OW 255
9382: STR
9383: PPUSH
9384: CALL_OW 500
// if def_game_rules then
9388: LD_EXP 68
9392: IFFALSE 9429
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
9394: LD_VAR 0 1
9398: PPUSH
9399: LD_VAR 0 1
9403: PPUSH
9404: CALL_OW 266
9408: PPUSH
9409: LD_VAR 0 1
9413: PPUSH
9414: CALL_OW 255
9418: PPUSH
9419: LD_INT 0
9421: PPUSH
9422: LD_INT 1
9424: PPUSH
9425: CALL 15191 0 5
// end ;
9429: PPOPN 2
9431: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
9432: LD_VAR 0 1
9436: PPUSH
9437: CALL_OW 266
9441: PUSH
9442: LD_INT 0
9444: PUSH
9445: LD_INT 1
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: IN
9452: IFFALSE 9477
// SetBName ( b , @ & GetSide ( b ) ) ;
9454: LD_VAR 0 1
9458: PPUSH
9459: LD_STRING @
9461: PUSH
9462: LD_VAR 0 1
9466: PPUSH
9467: CALL_OW 255
9471: STR
9472: PPUSH
9473: CALL_OW 500
// if def_game_rules then
9477: LD_EXP 68
9481: IFFALSE 9520
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
9483: LD_VAR 0 1
9487: PPUSH
9488: LD_VAR 0 1
9492: PPUSH
9493: CALL_OW 266
9497: PPUSH
9498: LD_VAR 0 1
9502: PPUSH
9503: CALL_OW 255
9507: PPUSH
9508: LD_VAR 0 2
9512: PPUSH
9513: LD_INT 1
9515: PPUSH
9516: CALL 15191 0 5
// end ;
9520: PPOPN 3
9522: END
// on VehicleConstructed ( veh , fac ) do var side ;
9523: LD_INT 0
9525: PPUSH
// begin if GetControl ( veh ) = control_apeman then
9526: LD_VAR 0 1
9530: PPUSH
9531: CALL_OW 263
9535: PUSH
9536: LD_INT 5
9538: EQUAL
9539: IFFALSE 9681
// begin side := GetSide ( veh ) ;
9541: LD_ADDR_VAR 0 3
9545: PUSH
9546: LD_VAR 0 1
9550: PPUSH
9551: CALL_OW 255
9555: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
9556: LD_ADDR_EXP 61
9560: PUSH
9561: LD_EXP 61
9565: PPUSH
9566: LD_VAR 0 3
9570: PPUSH
9571: LD_EXP 61
9575: PUSH
9576: LD_VAR 0 3
9580: ARRAY
9581: PPUSH
9582: LD_INT 52
9584: PUSH
9585: EMPTY
9586: LIST
9587: PPUSH
9588: CALL_OW 72
9592: PUSH
9593: LD_INT 22
9595: PUSH
9596: LD_VAR 0 3
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: LD_INT 2
9607: PUSH
9608: LD_INT 33
9610: PUSH
9611: LD_INT 5
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PUSH
9618: LD_INT 25
9620: PUSH
9621: LD_INT 12
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: LD_INT 25
9630: PUSH
9631: LD_INT 15
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: LD_INT 25
9640: PUSH
9641: LD_INT 16
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 25
9650: PUSH
9651: LD_INT 17
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PPUSH
9670: CALL_OW 69
9674: UNION
9675: PPUSH
9676: CALL_OW 1
9680: ST_TO_ADDR
// end ; end ;
9681: PPOPN 3
9683: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
9684: LD_INT 0
9686: PPUSH
9687: PPUSH
9688: PPUSH
9689: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
9690: LD_VAR 0 1
9694: PPUSH
9695: CALL_OW 257
9699: PUSH
9700: LD_INT 12
9702: PUSH
9703: LD_INT 15
9705: PUSH
9706: LD_INT 17
9708: PUSH
9709: LD_INT 16
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: IN
9718: PUSH
9719: LD_VAR 0 1
9723: PPUSH
9724: CALL_OW 263
9728: PUSH
9729: LD_INT 5
9731: EQUAL
9732: OR
9733: IFFALSE 9744
// ApeKilled ( j ) ;
9735: LD_VAR 0 1
9739: PPUSH
9740: CALL 10897 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
9744: LD_VAR 0 1
9748: PPUSH
9749: CALL_OW 266
9753: PUSH
9754: LD_INT 0
9756: PUSH
9757: LD_INT 1
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: IN
9764: IFFALSE 9846
// begin pos := Side_Positions [ GetSide ( j ) ] ;
9766: LD_ADDR_VAR 0 4
9770: PUSH
9771: LD_EXP 43
9775: PUSH
9776: LD_VAR 0 1
9780: PPUSH
9781: CALL_OW 255
9785: ARRAY
9786: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
9787: LD_ADDR_VAR 0 2
9791: PUSH
9792: LD_EXP 49
9796: PUSH
9797: LD_VAR 0 4
9801: ARRAY
9802: PUSH
9803: LD_INT 1
9805: ARRAY
9806: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
9807: LD_ADDR_VAR 0 3
9811: PUSH
9812: LD_EXP 49
9816: PUSH
9817: LD_VAR 0 4
9821: ARRAY
9822: PUSH
9823: LD_INT 2
9825: ARRAY
9826: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
9827: LD_VAR 0 2
9831: PPUSH
9832: LD_VAR 0 3
9836: PPUSH
9837: CALL_OW 420
9841: PPUSH
9842: CALL_OW 419
// end ; if def_game_rules then
9846: LD_EXP 68
9850: IFFALSE 9949
// if ( GetType ( j ) = 3 ) then
9852: LD_VAR 0 1
9856: PPUSH
9857: CALL_OW 247
9861: PUSH
9862: LD_INT 3
9864: EQUAL
9865: IFFALSE 9905
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
9867: LD_VAR 0 1
9871: PPUSH
9872: LD_VAR 0 1
9876: PPUSH
9877: CALL_OW 266
9881: PPUSH
9882: LD_VAR 0 1
9886: PPUSH
9887: CALL_OW 255
9891: PPUSH
9892: LD_INT 0
9894: PPUSH
9895: LD_INT 1
9897: NEG
9898: PPUSH
9899: CALL 15191 0 5
9903: GO 9949
// if ( GetChassis ( j ) = 25 ) then
9905: LD_VAR 0 1
9909: PPUSH
9910: CALL_OW 265
9914: PUSH
9915: LD_INT 25
9917: EQUAL
9918: IFFALSE 9949
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
9920: LD_VAR 0 1
9924: PPUSH
9925: LD_INT 37
9927: PPUSH
9928: LD_VAR 0 1
9932: PPUSH
9933: CALL_OW 255
9937: PPUSH
9938: LD_INT 0
9940: PPUSH
9941: LD_INT 1
9943: NEG
9944: PPUSH
9945: CALL 15191 0 5
// end ;
9949: PPOPN 5
9951: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
9952: LD_EXP 68
9956: PUSH
9957: LD_VAR 0 1
9961: PPUSH
9962: CALL_OW 265
9966: PUSH
9967: LD_INT 25
9969: EQUAL
9970: AND
9971: IFFALSE 10003
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
9973: LD_VAR 0 1
9977: PPUSH
9978: LD_INT 37
9980: PPUSH
9981: LD_VAR 0 1
9985: PPUSH
9986: CALL_OW 255
9990: PPUSH
9991: LD_VAR 0 3
9995: PPUSH
9996: LD_INT 1
9998: PPUSH
9999: CALL 15191 0 5
// end ;
10003: PPOPN 4
10005: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
10006: LD_VAR 0 1
10010: PPUSH
10011: LD_VAR 0 2
10015: PPUSH
10016: LD_VAR 0 3
10020: PPUSH
10021: LD_OWVAR 2
10025: PPUSH
10026: CALL 15891 0 4
10030: PPOPN 3
10032: END
// every 20 20$00 trigger apemanNumber do
10033: LD_EXP 58
10037: IFFALSE 10070
10039: GO 10041
10041: DISABLE
// begin enable ;
10042: ENABLE
// if apeLevel >= 8 then
10043: LD_EXP 63
10047: PUSH
10048: LD_INT 8
10050: GREATEREQUAL
10051: IFFALSE 10056
// disable else
10053: DISABLE
10054: GO 10070
// apeLevel := apeLevel + 1 ;
10056: LD_ADDR_EXP 63
10060: PUSH
10061: LD_EXP 63
10065: PUSH
10066: LD_INT 1
10068: PLUS
10069: ST_TO_ADDR
// end ;
10070: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
10071: LD_EXP 58
10075: PUSH
10076: LD_EXP 59
10080: LESS
10081: IFFALSE 10221
10083: GO 10085
10085: DISABLE
10086: LD_INT 0
10088: PPUSH
10089: PPUSH
10090: PPUSH
10091: PPUSH
// begin enable ;
10092: ENABLE
// for i := 1 to apemanPos do
10093: LD_ADDR_VAR 0 1
10097: PUSH
10098: DOUBLE
10099: LD_INT 1
10101: DEC
10102: ST_TO_ADDR
10103: LD_EXP 61
10107: PUSH
10108: FOR_TO
10109: IFFALSE 10219
// begin if apemanPlayerCount [ i ] then
10111: LD_EXP 62
10115: PUSH
10116: LD_VAR 0 1
10120: ARRAY
10121: IFFALSE 10217
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
10123: LD_EXP 62
10127: PUSH
10128: LD_VAR 0 1
10132: ARRAY
10133: PUSH
10134: LD_EXP 61
10138: PUSH
10139: LD_VAR 0 1
10143: ARRAY
10144: GREATER
10145: IFFALSE 10217
// begin ape := PrepareApeman ;
10147: LD_ADDR_VAR 0 2
10151: PUSH
10152: CALL 10716 0 0
10156: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
10157: LD_VAR 0 2
10161: PPUSH
10162: LD_EXP 64
10166: PUSH
10167: LD_VAR 0 1
10171: ARRAY
10172: PPUSH
10173: LD_INT 0
10175: PPUSH
10176: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
10180: LD_ADDR_EXP 61
10184: PUSH
10185: LD_EXP 61
10189: PPUSH
10190: LD_VAR 0 1
10194: PPUSH
10195: LD_EXP 61
10199: PUSH
10200: LD_VAR 0 1
10204: ARRAY
10205: PUSH
10206: LD_VAR 0 2
10210: UNION
10211: PPUSH
10212: CALL_OW 1
10216: ST_TO_ADDR
// end ; end ; end ;
10217: GO 10108
10219: POP
10220: POP
// end ;
10221: PPOPN 4
10223: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
10224: LD_INT 0
10226: PPUSH
10227: PPUSH
10228: PPUSH
10229: PPUSH
10230: PPUSH
10231: PPUSH
10232: PPUSH
// playersAmount := 0 ;
10233: LD_ADDR_VAR 0 3
10237: PUSH
10238: LD_INT 0
10240: ST_TO_ADDR
// _apeAreas := [ Ar1Out3 , Ar2Out3 ] ;
10241: LD_ADDR_VAR 0 7
10245: PUSH
10246: LD_INT 24
10248: PUSH
10249: LD_INT 18
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10256: LD_ADDR_EXP 64
10260: PUSH
10261: LD_INT 0
10263: PUSH
10264: LD_INT 0
10266: PUSH
10267: LD_INT 0
10269: PUSH
10270: LD_INT 0
10272: PUSH
10273: LD_INT 0
10275: PUSH
10276: LD_INT 0
10278: PUSH
10279: LD_INT 0
10281: PUSH
10282: LD_INT 0
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: ST_TO_ADDR
// for j = 1 to Side_Positions do
10295: LD_ADDR_VAR 0 4
10299: PUSH
10300: DOUBLE
10301: LD_INT 1
10303: DEC
10304: ST_TO_ADDR
10305: LD_EXP 43
10309: PUSH
10310: FOR_TO
10311: IFFALSE 10378
// if Side_Positions [ j ] then
10313: LD_EXP 43
10317: PUSH
10318: LD_VAR 0 4
10322: ARRAY
10323: IFFALSE 10376
// begin playersAmount := playersAmount + 1 ;
10325: LD_ADDR_VAR 0 3
10329: PUSH
10330: LD_VAR 0 3
10334: PUSH
10335: LD_INT 1
10337: PLUS
10338: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
10339: LD_ADDR_EXP 64
10343: PUSH
10344: LD_EXP 64
10348: PPUSH
10349: LD_VAR 0 4
10353: PPUSH
10354: LD_VAR 0 7
10358: PUSH
10359: LD_EXP 43
10363: PUSH
10364: LD_VAR 0 4
10368: ARRAY
10369: ARRAY
10370: PPUSH
10371: CALL_OW 1
10375: ST_TO_ADDR
// end ;
10376: GO 10310
10378: POP
10379: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
10380: LD_ADDR_EXP 60
10384: PUSH
10385: LD_INT 3
10387: PUSH
10388: LD_EXP 37
10392: MUL
10393: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
10394: LD_ADDR_EXP 58
10398: PUSH
10399: LD_VAR 0 3
10403: PUSH
10404: LD_EXP 60
10408: MUL
10409: ST_TO_ADDR
// apemanLimit := apemanNumber ;
10410: LD_ADDR_EXP 59
10414: PUSH
10415: LD_EXP 58
10419: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10420: LD_ADDR_EXP 61
10424: PUSH
10425: LD_INT 0
10427: PUSH
10428: LD_INT 0
10430: PUSH
10431: LD_INT 0
10433: PUSH
10434: LD_INT 0
10436: PUSH
10437: LD_INT 0
10439: PUSH
10440: LD_INT 0
10442: PUSH
10443: LD_INT 0
10445: PUSH
10446: LD_INT 0
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10459: LD_ADDR_EXP 62
10463: PUSH
10464: LD_INT 0
10466: PUSH
10467: LD_INT 0
10469: PUSH
10470: LD_INT 0
10472: PUSH
10473: LD_INT 0
10475: PUSH
10476: LD_INT 0
10478: PUSH
10479: LD_INT 0
10481: PUSH
10482: LD_INT 0
10484: PUSH
10485: LD_INT 0
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: ST_TO_ADDR
// apeLevel := 1 ;
10498: LD_ADDR_EXP 63
10502: PUSH
10503: LD_INT 1
10505: ST_TO_ADDR
// if not apemanNumber then
10506: LD_EXP 58
10510: NOT
10511: IFFALSE 10515
// exit ;
10513: GO 10711
// for i := 1 to apemanPerPlayer do
10515: LD_ADDR_VAR 0 2
10519: PUSH
10520: DOUBLE
10521: LD_INT 1
10523: DEC
10524: ST_TO_ADDR
10525: LD_EXP 60
10529: PUSH
10530: FOR_TO
10531: IFFALSE 10709
// begin for j := 1 to Side_Positions do
10533: LD_ADDR_VAR 0 4
10537: PUSH
10538: DOUBLE
10539: LD_INT 1
10541: DEC
10542: ST_TO_ADDR
10543: LD_EXP 43
10547: PUSH
10548: FOR_TO
10549: IFFALSE 10705
// if Side_Positions [ j ] then
10551: LD_EXP 43
10555: PUSH
10556: LD_VAR 0 4
10560: ARRAY
10561: IFFALSE 10703
// begin pos := Side_Positions [ j ] ;
10563: LD_ADDR_VAR 0 6
10567: PUSH
10568: LD_EXP 43
10572: PUSH
10573: LD_VAR 0 4
10577: ARRAY
10578: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
10579: LD_ADDR_EXP 62
10583: PUSH
10584: LD_EXP 62
10588: PPUSH
10589: LD_VAR 0 4
10593: PPUSH
10594: LD_EXP 62
10598: PUSH
10599: LD_VAR 0 4
10603: ARRAY
10604: PUSH
10605: LD_INT 1
10607: PLUS
10608: PPUSH
10609: CALL_OW 1
10613: ST_TO_ADDR
// ape := PrepareApeman ;
10614: LD_ADDR_VAR 0 5
10618: PUSH
10619: CALL 10716 0 0
10623: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
10624: LD_ADDR_EXP 61
10628: PUSH
10629: LD_EXP 61
10633: PPUSH
10634: LD_VAR 0 4
10638: PPUSH
10639: LD_EXP 61
10643: PUSH
10644: LD_VAR 0 4
10648: ARRAY
10649: PPUSH
10650: LD_EXP 61
10654: PUSH
10655: LD_VAR 0 4
10659: ARRAY
10660: PUSH
10661: LD_INT 1
10663: PLUS
10664: PPUSH
10665: LD_VAR 0 5
10669: PPUSH
10670: CALL_OW 1
10674: PPUSH
10675: CALL_OW 1
10679: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
10680: LD_VAR 0 5
10684: PPUSH
10685: LD_EXP 64
10689: PUSH
10690: LD_VAR 0 4
10694: ARRAY
10695: PPUSH
10696: LD_INT 0
10698: PPUSH
10699: CALL_OW 49
// end ;
10703: GO 10548
10705: POP
10706: POP
// end ;
10707: GO 10530
10709: POP
10710: POP
// end ;
10711: LD_VAR 0 1
10715: RET
// export function PrepareApeman ; var bonus ; begin
10716: LD_INT 0
10718: PPUSH
10719: PPUSH
// uc_side := 0 ;
10720: LD_ADDR_OWVAR 20
10724: PUSH
10725: LD_INT 0
10727: ST_TO_ADDR
// uc_nation := 0 ;
10728: LD_ADDR_OWVAR 21
10732: PUSH
10733: LD_INT 0
10735: ST_TO_ADDR
// InitHc ;
10736: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
10740: LD_ADDR_VAR 0 2
10744: PUSH
10745: LD_INT 1
10747: NEG
10748: PUSH
10749: LD_INT 0
10751: PUSH
10752: LD_INT 1
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: LIST
10759: PUSH
10760: LD_OWVAR 1
10764: PUSH
10765: LD_INT 3
10767: MOD
10768: PUSH
10769: LD_INT 1
10771: PLUS
10772: ARRAY
10773: ST_TO_ADDR
// hc_class := class_apeman ;
10774: LD_ADDR_OWVAR 28
10778: PUSH
10779: LD_INT 12
10781: ST_TO_ADDR
// hc_gallery :=  ;
10782: LD_ADDR_OWVAR 33
10786: PUSH
10787: LD_STRING 
10789: ST_TO_ADDR
// hc_name :=  ;
10790: LD_ADDR_OWVAR 26
10794: PUSH
10795: LD_STRING 
10797: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
10798: LD_ADDR_OWVAR 31
10802: PUSH
10803: LD_EXP 63
10807: PUSH
10808: LD_VAR 0 2
10812: PLUS
10813: PUSH
10814: LD_EXP 63
10818: PUSH
10819: LD_VAR 0 2
10823: PLUS
10824: PUSH
10825: LD_EXP 63
10829: PUSH
10830: LD_VAR 0 2
10834: PLUS
10835: PUSH
10836: LD_EXP 63
10840: PUSH
10841: LD_VAR 0 2
10845: PLUS
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
10853: LD_ADDR_OWVAR 35
10857: PUSH
10858: LD_INT 10
10860: PUSH
10861: LD_VAR 0 2
10865: MUL
10866: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
10867: LD_ADDR_OWVAR 29
10871: PUSH
10872: LD_INT 12
10874: PUSH
10875: LD_INT 10
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: ST_TO_ADDR
// result := CreateHuman ;
10882: LD_ADDR_VAR 0 1
10886: PUSH
10887: CALL_OW 44
10891: ST_TO_ADDR
// end ;
10892: LD_VAR 0 1
10896: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
10897: LD_INT 0
10899: PPUSH
10900: PPUSH
10901: PPUSH
// if not ape then
10902: LD_VAR 0 1
10906: NOT
10907: IFFALSE 10911
// exit ;
10909: GO 11036
// side := GetSide ( ape ) ;
10911: LD_ADDR_VAR 0 3
10915: PUSH
10916: LD_VAR 0 1
10920: PPUSH
10921: CALL_OW 255
10925: ST_TO_ADDR
// if not side then
10926: LD_VAR 0 3
10930: NOT
10931: IFFALSE 10985
// begin for i = 1 to apemanPos do
10933: LD_ADDR_VAR 0 4
10937: PUSH
10938: DOUBLE
10939: LD_INT 1
10941: DEC
10942: ST_TO_ADDR
10943: LD_EXP 61
10947: PUSH
10948: FOR_TO
10949: IFFALSE 10983
// if ape in apemanPos [ i ] then
10951: LD_VAR 0 1
10955: PUSH
10956: LD_EXP 61
10960: PUSH
10961: LD_VAR 0 4
10965: ARRAY
10966: IN
10967: IFFALSE 10981
// begin side := i ;
10969: LD_ADDR_VAR 0 3
10973: PUSH
10974: LD_VAR 0 4
10978: ST_TO_ADDR
// break ;
10979: GO 10983
// end ;
10981: GO 10948
10983: POP
10984: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
10985: LD_ADDR_EXP 61
10989: PUSH
10990: LD_EXP 61
10994: PPUSH
10995: LD_VAR 0 3
10999: PPUSH
11000: LD_EXP 61
11004: PUSH
11005: LD_VAR 0 3
11009: ARRAY
11010: PUSH
11011: LD_VAR 0 1
11015: DIFF
11016: PPUSH
11017: CALL_OW 1
11021: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
11022: LD_ADDR_EXP 58
11026: PUSH
11027: LD_EXP 58
11031: PUSH
11032: LD_INT 1
11034: MINUS
11035: ST_TO_ADDR
// end ; end_of_file
11036: LD_VAR 0 2
11040: RET
// var free , free1 , free2 , new1 , new2 , arr1 , arr2 , seenby1 , seenby2 ; function displ_status ; var s1 , s2 ; begin
11041: LD_INT 0
11043: PPUSH
11044: PPUSH
11045: PPUSH
// if not def_people_arrivals then
11046: LD_EXP 11
11050: NOT
11051: IFFALSE 11055
// exit ;
11053: GO 11196
// if def_people_loyality then
11055: LD_EXP 12
11059: IFFALSE 11175
// begin s1 := [ #Multi1x1-InfoL , Position_Sides [ 1 ] , ( free1 + 0 ) ] ;
11061: LD_ADDR_VAR 0 2
11065: PUSH
11066: LD_STRING #Multi1x1-InfoL
11068: PUSH
11069: LD_EXP 46
11073: PUSH
11074: LD_INT 1
11076: ARRAY
11077: PUSH
11078: LD_LOC 10
11082: PUSH
11083: LD_INT 0
11085: PLUS
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: LIST
11091: ST_TO_ADDR
// s2 := [ #Multi1x1-InfoL , Position_Sides [ 2 ] , ( free2 + 0 ) ] ;
11092: LD_ADDR_VAR 0 3
11096: PUSH
11097: LD_STRING #Multi1x1-InfoL
11099: PUSH
11100: LD_EXP 46
11104: PUSH
11105: LD_INT 2
11107: ARRAY
11108: PUSH
11109: LD_LOC 11
11113: PUSH
11114: LD_INT 0
11116: PLUS
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: ST_TO_ADDR
// if Side_Positions [ your_side ] <> 2 then
11123: LD_EXP 43
11127: PUSH
11128: LD_OWVAR 2
11132: ARRAY
11133: PUSH
11134: LD_INT 2
11136: NONEQUAL
11137: IFFALSE 11157
// ExtraStrings := s1 ^ s2 else
11139: LD_ADDR_EXP 70
11143: PUSH
11144: LD_VAR 0 2
11148: PUSH
11149: LD_VAR 0 3
11153: ADD
11154: ST_TO_ADDR
11155: GO 11173
// ExtraStrings := s2 ^ s1 ;
11157: LD_ADDR_EXP 70
11161: PUSH
11162: LD_VAR 0 3
11166: PUSH
11167: LD_VAR 0 2
11171: ADD
11172: ST_TO_ADDR
// end else
11173: GO 11196
// begin ExtraStrings := [ #Multi1x1-InfoNonL , ( free + 0 ) ] ;
11175: LD_ADDR_EXP 70
11179: PUSH
11180: LD_STRING #Multi1x1-InfoNonL
11182: PUSH
11183: LD_LOC 9
11187: PUSH
11188: LD_INT 0
11190: PLUS
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: ST_TO_ADDR
// end ; end ;
11196: LD_VAR 0 1
11200: RET
// every 0 0$1 do
11201: GO 11203
11203: DISABLE
// begin if not text_info then
11204: LD_EXP 34
11208: NOT
11209: IFFALSE 11213
// exit ;
11211: GO 11218
// displ_status ;
11213: CALL 11041 0 0
// enable ;
11217: ENABLE
// end ;
11218: END
// export function prepare_arrivals ; var i , ar , p1 , p2 , pom1 , pom2 ; begin
11219: LD_INT 0
11221: PPUSH
11222: PPUSH
11223: PPUSH
11224: PPUSH
11225: PPUSH
11226: PPUSH
11227: PPUSH
// arr1 := [ ] ;
11228: LD_ADDR_LOC 14
11232: PUSH
11233: EMPTY
11234: ST_TO_ADDR
// arr2 := [ ] ;
11235: LD_ADDR_LOC 15
11239: PUSH
11240: EMPTY
11241: ST_TO_ADDR
// for i := 1 to max_arriving_times do
11242: LD_ADDR_VAR 0 2
11246: PUSH
11247: DOUBLE
11248: LD_INT 1
11250: DEC
11251: ST_TO_ADDR
11252: LD_EXP 33
11256: PUSH
11257: FOR_TO
11258: IFFALSE 11794
// begin case rand ( 1 , 100 ) of 1 .. 45 :
11260: LD_INT 1
11262: PPUSH
11263: LD_INT 100
11265: PPUSH
11266: CALL_OW 12
11270: PUSH
11271: LD_INT 1
11273: DOUBLE
11274: GREATEREQUAL
11275: IFFALSE 11283
11277: LD_INT 45
11279: DOUBLE
11280: LESSEQUAL
11281: IFTRUE 11285
11283: GO 11492
11285: POP
// case rand ( 1 , 100 ) of 1 .. 10 :
11286: LD_INT 1
11288: PPUSH
11289: LD_INT 100
11291: PPUSH
11292: CALL_OW 12
11296: PUSH
11297: LD_INT 1
11299: DOUBLE
11300: GREATEREQUAL
11301: IFFALSE 11309
11303: LD_INT 10
11305: DOUBLE
11306: LESSEQUAL
11307: IFTRUE 11311
11309: GO 11329
11311: POP
// ar := [ Ar1Base1 , Ar2Base1 ] ; 11 .. 20 :
11312: LD_ADDR_VAR 0 3
11316: PUSH
11317: LD_INT 19
11319: PUSH
11320: LD_INT 15
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: ST_TO_ADDR
11327: GO 11490
11329: LD_INT 11
11331: DOUBLE
11332: GREATEREQUAL
11333: IFFALSE 11341
11335: LD_INT 20
11337: DOUBLE
11338: LESSEQUAL
11339: IFTRUE 11343
11341: GO 11361
11343: POP
// ar := [ Ar1Base2 , Ar2Base2 ] ; 21 .. 30 :
11344: LD_ADDR_VAR 0 3
11348: PUSH
11349: LD_INT 20
11351: PUSH
11352: LD_INT 14
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: ST_TO_ADDR
11359: GO 11490
11361: LD_INT 21
11363: DOUBLE
11364: GREATEREQUAL
11365: IFFALSE 11373
11367: LD_INT 30
11369: DOUBLE
11370: LESSEQUAL
11371: IFTRUE 11375
11373: GO 11393
11375: POP
// ar := [ Ar1Between , Ar2Between ] ; 31 .. 55 :
11376: LD_ADDR_VAR 0 3
11380: PUSH
11381: LD_INT 22
11383: PUSH
11384: LD_INT 16
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: ST_TO_ADDR
11391: GO 11490
11393: LD_INT 31
11395: DOUBLE
11396: GREATEREQUAL
11397: IFFALSE 11405
11399: LD_INT 55
11401: DOUBLE
11402: LESSEQUAL
11403: IFTRUE 11407
11405: GO 11425
11407: POP
// ar := [ Ar1Out2 , Ar2Out2 ] ; 56 .. 80 :
11408: LD_ADDR_VAR 0 3
11412: PUSH
11413: LD_INT 23
11415: PUSH
11416: LD_INT 17
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: ST_TO_ADDR
11423: GO 11490
11425: LD_INT 56
11427: DOUBLE
11428: GREATEREQUAL
11429: IFFALSE 11437
11431: LD_INT 80
11433: DOUBLE
11434: LESSEQUAL
11435: IFTRUE 11439
11437: GO 11457
11439: POP
// ar := [ Ar1Out1 , Ar2Out1 ] ; 81 .. 100 :
11440: LD_ADDR_VAR 0 3
11444: PUSH
11445: LD_INT 21
11447: PUSH
11448: LD_INT 13
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: ST_TO_ADDR
11455: GO 11490
11457: LD_INT 81
11459: DOUBLE
11460: GREATEREQUAL
11461: IFFALSE 11469
11463: LD_INT 100
11465: DOUBLE
11466: LESSEQUAL
11467: IFTRUE 11471
11469: GO 11489
11471: POP
// ar := [ Ar1Out3 , Ar2Out3 ] ; end ; 46 .. 85 :
11472: LD_ADDR_VAR 0 3
11476: PUSH
11477: LD_INT 24
11479: PUSH
11480: LD_INT 18
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: ST_TO_ADDR
11487: GO 11490
11489: POP
11490: GO 11746
11492: LD_INT 46
11494: DOUBLE
11495: GREATEREQUAL
11496: IFFALSE 11504
11498: LD_INT 85
11500: DOUBLE
11501: LESSEQUAL
11502: IFTRUE 11506
11504: GO 11713
11506: POP
// case rand ( 1 , 100 ) of 1 .. 5 :
11507: LD_INT 1
11509: PPUSH
11510: LD_INT 100
11512: PPUSH
11513: CALL_OW 12
11517: PUSH
11518: LD_INT 1
11520: DOUBLE
11521: GREATEREQUAL
11522: IFFALSE 11530
11524: LD_INT 5
11526: DOUBLE
11527: LESSEQUAL
11528: IFTRUE 11532
11530: GO 11550
11532: POP
// ar := [ Ar2Base1 , Ar1Base1 ] ; 6 .. 15 :
11533: LD_ADDR_VAR 0 3
11537: PUSH
11538: LD_INT 15
11540: PUSH
11541: LD_INT 19
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: ST_TO_ADDR
11548: GO 11711
11550: LD_INT 6
11552: DOUBLE
11553: GREATEREQUAL
11554: IFFALSE 11562
11556: LD_INT 15
11558: DOUBLE
11559: LESSEQUAL
11560: IFTRUE 11564
11562: GO 11582
11564: POP
// ar := [ Ar2Base2 , Ar1Base2 ] ; 16 .. 30 :
11565: LD_ADDR_VAR 0 3
11569: PUSH
11570: LD_INT 14
11572: PUSH
11573: LD_INT 20
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: ST_TO_ADDR
11580: GO 11711
11582: LD_INT 16
11584: DOUBLE
11585: GREATEREQUAL
11586: IFFALSE 11594
11588: LD_INT 30
11590: DOUBLE
11591: LESSEQUAL
11592: IFTRUE 11596
11594: GO 11614
11596: POP
// ar := [ Ar2Between , Ar1Between ] ; 31 .. 50 :
11597: LD_ADDR_VAR 0 3
11601: PUSH
11602: LD_INT 16
11604: PUSH
11605: LD_INT 22
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: ST_TO_ADDR
11612: GO 11711
11614: LD_INT 31
11616: DOUBLE
11617: GREATEREQUAL
11618: IFFALSE 11626
11620: LD_INT 50
11622: DOUBLE
11623: LESSEQUAL
11624: IFTRUE 11628
11626: GO 11646
11628: POP
// ar := [ Ar2Out2 , Ar1Out2 ] ; 51 .. 75 :
11629: LD_ADDR_VAR 0 3
11633: PUSH
11634: LD_INT 17
11636: PUSH
11637: LD_INT 23
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: ST_TO_ADDR
11644: GO 11711
11646: LD_INT 51
11648: DOUBLE
11649: GREATEREQUAL
11650: IFFALSE 11658
11652: LD_INT 75
11654: DOUBLE
11655: LESSEQUAL
11656: IFTRUE 11660
11658: GO 11678
11660: POP
// ar := [ Ar2Out1 , Ar1Out1 ] ; 76 .. 100 :
11661: LD_ADDR_VAR 0 3
11665: PUSH
11666: LD_INT 13
11668: PUSH
11669: LD_INT 21
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: ST_TO_ADDR
11676: GO 11711
11678: LD_INT 76
11680: DOUBLE
11681: GREATEREQUAL
11682: IFFALSE 11690
11684: LD_INT 100
11686: DOUBLE
11687: LESSEQUAL
11688: IFTRUE 11692
11690: GO 11710
11692: POP
// ar := [ Ar2Out3 , Ar1Out3 ] ; end ; 86 .. 100 :
11693: LD_ADDR_VAR 0 3
11697: PUSH
11698: LD_INT 18
11700: PUSH
11701: LD_INT 24
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: ST_TO_ADDR
11708: GO 11711
11710: POP
11711: GO 11746
11713: LD_INT 86
11715: DOUBLE
11716: GREATEREQUAL
11717: IFFALSE 11725
11719: LD_INT 100
11721: DOUBLE
11722: LESSEQUAL
11723: IFTRUE 11727
11725: GO 11745
11727: POP
// ar := [ valley , valley ] ; end ;
11728: LD_ADDR_VAR 0 3
11732: PUSH
11733: LD_INT 12
11735: PUSH
11736: LD_INT 12
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: ST_TO_ADDR
11743: GO 11746
11745: POP
// arr1 := arr1 ^ [ ar [ 1 ] ] ;
11746: LD_ADDR_LOC 14
11750: PUSH
11751: LD_LOC 14
11755: PUSH
11756: LD_VAR 0 3
11760: PUSH
11761: LD_INT 1
11763: ARRAY
11764: PUSH
11765: EMPTY
11766: LIST
11767: ADD
11768: ST_TO_ADDR
// arr2 := arr2 ^ [ ar [ 2 ] ] ;
11769: LD_ADDR_LOC 15
11773: PUSH
11774: LD_LOC 15
11778: PUSH
11779: LD_VAR 0 3
11783: PUSH
11784: LD_INT 2
11786: ARRAY
11787: PUSH
11788: EMPTY
11789: LIST
11790: ADD
11791: ST_TO_ADDR
// end ;
11792: GO 11257
11794: POP
11795: POP
// for i := 1 to max_arriving_times div 2 do
11796: LD_ADDR_VAR 0 2
11800: PUSH
11801: DOUBLE
11802: LD_INT 1
11804: DEC
11805: ST_TO_ADDR
11806: LD_EXP 33
11810: PUSH
11811: LD_INT 2
11813: DIV
11814: PUSH
11815: FOR_TO
11816: IFFALSE 11928
// begin p1 := Rand ( 1 , max_arriving_times ) ;
11818: LD_ADDR_VAR 0 4
11822: PUSH
11823: LD_INT 1
11825: PPUSH
11826: LD_EXP 33
11830: PPUSH
11831: CALL_OW 12
11835: ST_TO_ADDR
// p2 := Rand ( 1 , max_arriving_times ) ;
11836: LD_ADDR_VAR 0 5
11840: PUSH
11841: LD_INT 1
11843: PPUSH
11844: LD_EXP 33
11848: PPUSH
11849: CALL_OW 12
11853: ST_TO_ADDR
// pom1 := arr2 [ p1 ] ;
11854: LD_ADDR_VAR 0 6
11858: PUSH
11859: LD_LOC 15
11863: PUSH
11864: LD_VAR 0 4
11868: ARRAY
11869: ST_TO_ADDR
// pom2 := arr2 [ p2 ] ;
11870: LD_ADDR_VAR 0 7
11874: PUSH
11875: LD_LOC 15
11879: PUSH
11880: LD_VAR 0 5
11884: ARRAY
11885: ST_TO_ADDR
// arr2 := Replace ( Replace ( arr2 , p2 , pom1 ) , p1 , pom2 ) ;
11886: LD_ADDR_LOC 15
11890: PUSH
11891: LD_LOC 15
11895: PPUSH
11896: LD_VAR 0 5
11900: PPUSH
11901: LD_VAR 0 6
11905: PPUSH
11906: CALL_OW 1
11910: PPUSH
11911: LD_VAR 0 4
11915: PPUSH
11916: LD_VAR 0 7
11920: PPUSH
11921: CALL_OW 1
11925: ST_TO_ADDR
// end ;
11926: GO 11815
11928: POP
11929: POP
// end ;
11930: LD_VAR 0 1
11934: RET
// every 0 0$1 do
11935: GO 11937
11937: DISABLE
// begin if not max_arriving_times then
11938: LD_EXP 33
11942: NOT
11943: IFFALSE 11947
// exit ;
11945: GO 12030
// if tick >= max_arriving_times [ 1 ] * 0 0$30 then
11947: LD_OWVAR 1
11951: PUSH
11952: LD_EXP 33
11956: PUSH
11957: LD_INT 1
11959: ARRAY
11960: PUSH
11961: LD_INT 1050
11963: MUL
11964: GREATEREQUAL
11965: IFFALSE 12029
// begin new1 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11967: LD_ADDR_LOC 12
11971: PUSH
11972: LD_INT 1
11974: PPUSH
11975: LD_EXP 33
11979: PUSH
11980: LD_INT 1050
11982: MUL
11983: PPUSH
11984: CALL_OW 12
11988: ST_TO_ADDR
// new2 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11989: LD_ADDR_LOC 13
11993: PUSH
11994: LD_INT 1
11996: PPUSH
11997: LD_EXP 33
12001: PUSH
12002: LD_INT 1050
12004: MUL
12005: PPUSH
12006: CALL_OW 12
12010: ST_TO_ADDR
// max_arriving_times := delete ( max_arriving_times , 1 ) ;
12011: LD_ADDR_EXP 33
12015: PUSH
12016: LD_EXP 33
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: CALL_OW 3
12028: ST_TO_ADDR
// end ; enable ;
12029: ENABLE
// end ;
12030: END
// function new_arrival ( pos ) ; var hum ; begin
12031: LD_INT 0
12033: PPUSH
12034: PPUSH
// if def_people_loyality then
12035: LD_EXP 12
12039: IFFALSE 12081
// begin uc_side := second_side [ pos ] ;
12041: LD_ADDR_OWVAR 20
12045: PUSH
12046: LD_EXP 47
12050: PUSH
12051: LD_VAR 0 1
12055: ARRAY
12056: ST_TO_ADDR
// uc_nation := Side_Nations [ positions [ pos ] ] ;
12057: LD_ADDR_OWVAR 21
12061: PUSH
12062: LD_EXP 44
12066: PUSH
12067: LD_EXP 39
12071: PUSH
12072: LD_VAR 0 1
12076: ARRAY
12077: ARRAY
12078: ST_TO_ADDR
// end else
12079: GO 12101
// begin uc_side := second_side ;
12081: LD_ADDR_OWVAR 20
12085: PUSH
12086: LD_EXP 47
12090: ST_TO_ADDR
// uc_nation := third_nation ;
12091: LD_ADDR_OWVAR 21
12095: PUSH
12096: LD_EXP 48
12100: ST_TO_ADDR
// end ; PrepareHuman ( 0 , 0 , initial_level + 1 ) ;
12101: LD_INT 0
12103: PPUSH
12104: LD_INT 0
12106: PPUSH
12107: LD_EXP 29
12111: PUSH
12112: LD_INT 1
12114: PLUS
12115: PPUSH
12116: CALL_OW 380
// hc_class := class_soldier ;
12120: LD_ADDR_OWVAR 28
12124: PUSH
12125: LD_INT 1
12127: ST_TO_ADDR
// hum := CreateHuman ;
12128: LD_ADDR_VAR 0 3
12132: PUSH
12133: CALL_OW 44
12137: ST_TO_ADDR
// if pos = 1 then
12138: LD_VAR 0 1
12142: PUSH
12143: LD_INT 1
12145: EQUAL
12146: IFFALSE 12189
// begin PlaceUnitArea ( hum , arr1 [ 1 ] , true ) ;
12148: LD_VAR 0 3
12152: PPUSH
12153: LD_LOC 14
12157: PUSH
12158: LD_INT 1
12160: ARRAY
12161: PPUSH
12162: LD_INT 1
12164: PPUSH
12165: CALL_OW 49
// arr1 := delete ( arr1 , 1 ) ;
12169: LD_ADDR_LOC 14
12173: PUSH
12174: LD_LOC 14
12178: PPUSH
12179: LD_INT 1
12181: PPUSH
12182: CALL_OW 3
12186: ST_TO_ADDR
// end else
12187: GO 12228
// begin PlaceUnitArea ( hum , arr2 [ 1 ] , true ) ;
12189: LD_VAR 0 3
12193: PPUSH
12194: LD_LOC 15
12198: PUSH
12199: LD_INT 1
12201: ARRAY
12202: PPUSH
12203: LD_INT 1
12205: PPUSH
12206: CALL_OW 49
// arr2 := delete ( arr2 , 1 ) ;
12210: LD_ADDR_LOC 15
12214: PUSH
12215: LD_LOC 15
12219: PPUSH
12220: LD_INT 1
12222: PPUSH
12223: CALL_OW 3
12227: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) until IsPlaced ( hum ) ;
12228: LD_INT 35
12230: PPUSH
12231: CALL_OW 67
12235: LD_VAR 0 3
12239: PPUSH
12240: CALL_OW 305
12244: IFFALSE 12228
// if def_people_loyality then
12246: LD_EXP 12
12250: IFFALSE 12310
// if pos = 1 then
12252: LD_VAR 0 1
12256: PUSH
12257: LD_INT 1
12259: EQUAL
12260: IFFALSE 12280
// free1 := free1 ^ hum else
12262: LD_ADDR_LOC 10
12266: PUSH
12267: LD_LOC 10
12271: PUSH
12272: LD_VAR 0 3
12276: ADD
12277: ST_TO_ADDR
12278: GO 12308
// if pos = 2 then
12280: LD_VAR 0 1
12284: PUSH
12285: LD_INT 2
12287: EQUAL
12288: IFFALSE 12308
// free2 := free2 ^ hum else
12290: LD_ADDR_LOC 11
12294: PUSH
12295: LD_LOC 11
12299: PUSH
12300: LD_VAR 0 3
12304: ADD
12305: ST_TO_ADDR
12306: GO 12308
// else
12308: GO 12326
// free := free ^ hum ;
12310: LD_ADDR_LOC 9
12314: PUSH
12315: LD_LOC 9
12319: PUSH
12320: LD_VAR 0 3
12324: ADD
12325: ST_TO_ADDR
// end ;
12326: LD_VAR 0 2
12330: RET
// every 0 0$0.5 trigger new1 do var d ;
12331: LD_LOC 12
12335: IFFALSE 12368
12337: GO 12339
12339: DISABLE
12340: LD_INT 0
12342: PPUSH
// begin enable ;
12343: ENABLE
// new1 := 0 ;
12344: LD_ADDR_LOC 12
12348: PUSH
12349: LD_INT 0
12351: ST_TO_ADDR
// wait ( d ) ;
12352: LD_VAR 0 1
12356: PPUSH
12357: CALL_OW 67
// new_arrival ( 1 ) ;
12361: LD_INT 1
12363: PPUSH
12364: CALL 12031 0 1
// end ;
12368: PPOPN 1
12370: END
// every 0 0$0.5 trigger new2 do var d ;
12371: LD_LOC 13
12375: IFFALSE 12408
12377: GO 12379
12379: DISABLE
12380: LD_INT 0
12382: PPUSH
// begin enable ;
12383: ENABLE
// new2 := 0 ;
12384: LD_ADDR_LOC 13
12388: PUSH
12389: LD_INT 0
12391: ST_TO_ADDR
// wait ( d ) ;
12392: LD_VAR 0 1
12396: PPUSH
12397: CALL_OW 67
// new_arrival ( 2 ) ;
12401: LD_INT 2
12403: PPUSH
12404: CALL 12031 0 1
// end ;
12408: PPOPN 1
12410: END
// function check_one_side ( un , side ) ; begin
12411: LD_INT 0
12413: PPUSH
// if FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , side ] , [ f_dist , un , 3 ] ] ) then
12414: LD_INT 21
12416: PUSH
12417: LD_INT 1
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: LD_INT 22
12426: PUSH
12427: LD_VAR 0 2
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 91
12438: PUSH
12439: LD_VAR 0 1
12443: PUSH
12444: LD_INT 3
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: LIST
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: LIST
12456: PPUSH
12457: CALL_OW 69
12461: IFFALSE 12475
// result := side else
12463: LD_ADDR_VAR 0 3
12467: PUSH
12468: LD_VAR 0 2
12472: ST_TO_ADDR
12473: GO 12483
// result := 0 ;
12475: LD_ADDR_VAR 0 3
12479: PUSH
12480: LD_INT 0
12482: ST_TO_ADDR
// end ;
12483: LD_VAR 0 3
12487: RET
// function check_two_sides ( un , side1 , side2 ) ; var un1 , s1 , s2 ; begin
12488: LD_INT 0
12490: PPUSH
12491: PPUSH
12492: PPUSH
12493: PPUSH
// s1 := 0 ;
12494: LD_ADDR_VAR 0 6
12498: PUSH
12499: LD_INT 0
12501: ST_TO_ADDR
// s2 := 0 ;
12502: LD_ADDR_VAR 0 7
12506: PUSH
12507: LD_INT 0
12509: ST_TO_ADDR
// for un1 in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_dist , un , 3 ] ] ) do
12510: LD_ADDR_VAR 0 5
12514: PUSH
12515: LD_INT 21
12517: PUSH
12518: LD_INT 1
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: PUSH
12525: LD_INT 91
12527: PUSH
12528: LD_VAR 0 1
12532: PUSH
12533: LD_INT 3
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PPUSH
12545: CALL_OW 69
12549: PUSH
12550: FOR_IN
12551: IFFALSE 12619
// begin if GetSide ( un1 ) = side1 then
12553: LD_VAR 0 5
12557: PPUSH
12558: CALL_OW 255
12562: PUSH
12563: LD_VAR 0 2
12567: EQUAL
12568: IFFALSE 12586
// s1 := s1 + 1 else
12570: LD_ADDR_VAR 0 6
12574: PUSH
12575: LD_VAR 0 6
12579: PUSH
12580: LD_INT 1
12582: PLUS
12583: ST_TO_ADDR
12584: GO 12617
// if GetSide ( un1 ) = side2 then
12586: LD_VAR 0 5
12590: PPUSH
12591: CALL_OW 255
12595: PUSH
12596: LD_VAR 0 3
12600: EQUAL
12601: IFFALSE 12617
// s2 := s2 + 1 ;
12603: LD_ADDR_VAR 0 7
12607: PUSH
12608: LD_VAR 0 7
12612: PUSH
12613: LD_INT 1
12615: PLUS
12616: ST_TO_ADDR
// end ;
12617: GO 12550
12619: POP
12620: POP
// if s1 = s2 then
12621: LD_VAR 0 6
12625: PUSH
12626: LD_VAR 0 7
12630: EQUAL
12631: IFFALSE 12643
// result := 0 else
12633: LD_ADDR_VAR 0 4
12637: PUSH
12638: LD_INT 0
12640: ST_TO_ADDR
12641: GO 12673
// if s1 > s2 then
12643: LD_VAR 0 6
12647: PUSH
12648: LD_VAR 0 7
12652: GREATER
12653: IFFALSE 12665
// result := 1 else
12655: LD_ADDR_VAR 0 4
12659: PUSH
12660: LD_INT 1
12662: ST_TO_ADDR
12663: GO 12673
// result := 2 ;
12665: LD_ADDR_VAR 0 4
12669: PUSH
12670: LD_INT 2
12672: ST_TO_ADDR
// end ;
12673: LD_VAR 0 4
12677: RET
// every 0 0$2 do var un ;
12678: GO 12680
12680: DISABLE
12681: LD_INT 0
12683: PPUSH
// begin if def_people_loyality then
12684: LD_EXP 12
12688: IFFALSE 13067
// if not fog_info then
12690: LD_EXP 35
12694: NOT
12695: IFFALSE 12883
// begin if your_side then
12697: LD_OWVAR 2
12701: IFFALSE 12881
// if side_positions [ your_side ] = 1 then
12703: LD_EXP 43
12707: PUSH
12708: LD_OWVAR 2
12712: ARRAY
12713: PUSH
12714: LD_INT 1
12716: EQUAL
12717: IFFALSE 12793
// begin un := UnitFilter ( free1 diff seenby1 , [ f_see , your_side ] ) ;
12719: LD_ADDR_VAR 0 1
12723: PUSH
12724: LD_LOC 10
12728: PUSH
12729: LD_LOC 16
12733: DIFF
12734: PPUSH
12735: LD_INT 101
12737: PUSH
12738: LD_OWVAR 2
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PPUSH
12747: CALL_OW 72
12751: ST_TO_ADDR
// if un then
12752: LD_VAR 0 1
12756: IFFALSE 12791
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12758: LD_VAR 0 1
12762: PUSH
12763: LD_INT 1
12765: ARRAY
12766: PPUSH
12767: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12771: LD_ADDR_LOC 16
12775: PUSH
12776: LD_LOC 16
12780: PUSH
12781: LD_VAR 0 1
12785: PUSH
12786: LD_INT 1
12788: ARRAY
12789: ADD
12790: ST_TO_ADDR
// end ; end else
12791: GO 12881
// if side_positions [ your_side ] = 2 then
12793: LD_EXP 43
12797: PUSH
12798: LD_OWVAR 2
12802: ARRAY
12803: PUSH
12804: LD_INT 2
12806: EQUAL
12807: IFFALSE 12881
// begin un := UnitFilter ( free2 diff seenby2 , [ f_see , your_side ] ) ;
12809: LD_ADDR_VAR 0 1
12813: PUSH
12814: LD_LOC 11
12818: PUSH
12819: LD_LOC 17
12823: DIFF
12824: PPUSH
12825: LD_INT 101
12827: PUSH
12828: LD_OWVAR 2
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PPUSH
12837: CALL_OW 72
12841: ST_TO_ADDR
// if un then
12842: LD_VAR 0 1
12846: IFFALSE 12881
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12848: LD_VAR 0 1
12852: PUSH
12853: LD_INT 1
12855: ARRAY
12856: PPUSH
12857: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
12861: LD_ADDR_LOC 17
12865: PUSH
12866: LD_LOC 17
12870: PUSH
12871: LD_VAR 0 1
12875: PUSH
12876: LD_INT 1
12878: ARRAY
12879: ADD
12880: ST_TO_ADDR
// end ; end ; end else
12881: GO 13067
// begin if your_side then
12883: LD_OWVAR 2
12887: IFFALSE 13067
// if side_positions [ your_side ] = 1 then
12889: LD_EXP 43
12893: PUSH
12894: LD_OWVAR 2
12898: ARRAY
12899: PUSH
12900: LD_INT 1
12902: EQUAL
12903: IFFALSE 12979
// begin un := UnitFilter ( free diff seenby1 , [ f_see , your_side ] ) ;
12905: LD_ADDR_VAR 0 1
12909: PUSH
12910: LD_LOC 9
12914: PUSH
12915: LD_LOC 16
12919: DIFF
12920: PPUSH
12921: LD_INT 101
12923: PUSH
12924: LD_OWVAR 2
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PPUSH
12933: CALL_OW 72
12937: ST_TO_ADDR
// if un then
12938: LD_VAR 0 1
12942: IFFALSE 12977
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12944: LD_VAR 0 1
12948: PUSH
12949: LD_INT 1
12951: ARRAY
12952: PPUSH
12953: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12957: LD_ADDR_LOC 16
12961: PUSH
12962: LD_LOC 16
12966: PUSH
12967: LD_VAR 0 1
12971: PUSH
12972: LD_INT 1
12974: ARRAY
12975: ADD
12976: ST_TO_ADDR
// end ; end else
12977: GO 13067
// if side_positions [ your_side ] = 2 then
12979: LD_EXP 43
12983: PUSH
12984: LD_OWVAR 2
12988: ARRAY
12989: PUSH
12990: LD_INT 2
12992: EQUAL
12993: IFFALSE 13067
// begin un := UnitFilter ( free diff seenby2 , [ f_see , your_side ] ) ;
12995: LD_ADDR_VAR 0 1
12999: PUSH
13000: LD_LOC 9
13004: PUSH
13005: LD_LOC 17
13009: DIFF
13010: PPUSH
13011: LD_INT 101
13013: PUSH
13014: LD_OWVAR 2
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PPUSH
13023: CALL_OW 72
13027: ST_TO_ADDR
// if un then
13028: LD_VAR 0 1
13032: IFFALSE 13067
// begin CenterNowOnUnits ( un [ 1 ] ) ;
13034: LD_VAR 0 1
13038: PUSH
13039: LD_INT 1
13041: ARRAY
13042: PPUSH
13043: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
13047: LD_ADDR_LOC 17
13051: PUSH
13052: LD_LOC 17
13056: PUSH
13057: LD_VAR 0 1
13061: PUSH
13062: LD_INT 1
13064: ARRAY
13065: ADD
13066: ST_TO_ADDR
// end ; end ; end ; enable ;
13067: ENABLE
// end ;
13068: PPOPN 1
13070: END
// every 0 0$0.5 do var un , s ;
13071: GO 13073
13073: DISABLE
13074: LD_INT 0
13076: PPUSH
13077: PPUSH
// begin if def_people_loyality then
13078: LD_EXP 12
13082: IFFALSE 13288
// begin for un in free1 do
13084: LD_ADDR_VAR 0 1
13088: PUSH
13089: LD_LOC 10
13093: PUSH
13094: FOR_IN
13095: IFFALSE 13183
// if not IsLive ( un ) then
13097: LD_VAR 0 1
13101: PPUSH
13102: CALL_OW 300
13106: NOT
13107: IFFALSE 13127
// free1 := free1 diff un else
13109: LD_ADDR_LOC 10
13113: PUSH
13114: LD_LOC 10
13118: PUSH
13119: LD_VAR 0 1
13123: DIFF
13124: ST_TO_ADDR
13125: GO 13181
// if check_one_side ( un , positions [ 1 ] ) then
13127: LD_VAR 0 1
13131: PPUSH
13132: LD_EXP 39
13136: PUSH
13137: LD_INT 1
13139: ARRAY
13140: PPUSH
13141: CALL 12411 0 2
13145: IFFALSE 13181
// begin SetSide ( un , positions [ 1 ] ) ;
13147: LD_VAR 0 1
13151: PPUSH
13152: LD_EXP 39
13156: PUSH
13157: LD_INT 1
13159: ARRAY
13160: PPUSH
13161: CALL_OW 235
// free1 := free1 diff un ;
13165: LD_ADDR_LOC 10
13169: PUSH
13170: LD_LOC 10
13174: PUSH
13175: LD_VAR 0 1
13179: DIFF
13180: ST_TO_ADDR
// end ;
13181: GO 13094
13183: POP
13184: POP
// for un in free2 do
13185: LD_ADDR_VAR 0 1
13189: PUSH
13190: LD_LOC 11
13194: PUSH
13195: FOR_IN
13196: IFFALSE 13284
// if not IsLive ( un ) then
13198: LD_VAR 0 1
13202: PPUSH
13203: CALL_OW 300
13207: NOT
13208: IFFALSE 13228
// free2 := free2 diff un else
13210: LD_ADDR_LOC 11
13214: PUSH
13215: LD_LOC 11
13219: PUSH
13220: LD_VAR 0 1
13224: DIFF
13225: ST_TO_ADDR
13226: GO 13282
// if check_one_side ( un , positions [ 2 ] ) then
13228: LD_VAR 0 1
13232: PPUSH
13233: LD_EXP 39
13237: PUSH
13238: LD_INT 2
13240: ARRAY
13241: PPUSH
13242: CALL 12411 0 2
13246: IFFALSE 13282
// begin SetSide ( un , positions [ 2 ] ) ;
13248: LD_VAR 0 1
13252: PPUSH
13253: LD_EXP 39
13257: PUSH
13258: LD_INT 2
13260: ARRAY
13261: PPUSH
13262: CALL_OW 235
// free2 := free2 diff un ;
13266: LD_ADDR_LOC 11
13270: PUSH
13271: LD_LOC 11
13275: PUSH
13276: LD_VAR 0 1
13280: DIFF
13281: ST_TO_ADDR
// end ;
13282: GO 13195
13284: POP
13285: POP
// end else
13286: GO 13410
// begin for un in free do
13288: LD_ADDR_VAR 0 1
13292: PUSH
13293: LD_LOC 9
13297: PUSH
13298: FOR_IN
13299: IFFALSE 13408
// if not IsLive ( un ) then
13301: LD_VAR 0 1
13305: PPUSH
13306: CALL_OW 300
13310: NOT
13311: IFFALSE 13331
// free := free diff un else
13313: LD_ADDR_LOC 9
13317: PUSH
13318: LD_LOC 9
13322: PUSH
13323: LD_VAR 0 1
13327: DIFF
13328: ST_TO_ADDR
13329: GO 13406
// begin s := check_two_sides ( un , positions [ 1 ] , positions [ 2 ] ) ;
13331: LD_ADDR_VAR 0 2
13335: PUSH
13336: LD_VAR 0 1
13340: PPUSH
13341: LD_EXP 39
13345: PUSH
13346: LD_INT 1
13348: ARRAY
13349: PPUSH
13350: LD_EXP 39
13354: PUSH
13355: LD_INT 2
13357: ARRAY
13358: PPUSH
13359: CALL 12488 0 3
13363: ST_TO_ADDR
// if s then
13364: LD_VAR 0 2
13368: IFFALSE 13406
// begin SetSide ( un , positions [ s ] ) ;
13370: LD_VAR 0 1
13374: PPUSH
13375: LD_EXP 39
13379: PUSH
13380: LD_VAR 0 2
13384: ARRAY
13385: PPUSH
13386: CALL_OW 235
// free := free diff un ;
13390: LD_ADDR_LOC 9
13394: PUSH
13395: LD_LOC 9
13399: PUSH
13400: LD_VAR 0 1
13404: DIFF
13405: ST_TO_ADDR
// end ; end ;
13406: GO 13298
13408: POP
13409: POP
// end ; enable ;
13410: ENABLE
// end ; end_of_file
13411: PPOPN 2
13413: END
// export BuildUpAreas ; export buildUpTimeActive ; export function BeginBuildUp ; var i , j ; begin
13414: LD_INT 0
13416: PPUSH
13417: PPUSH
13418: PPUSH
// buildUpTimeActive := true ;
13419: LD_ADDR_EXP 66
13423: PUSH
13424: LD_INT 1
13426: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
13427: LD_ADDR_VAR 0 2
13431: PUSH
13432: DOUBLE
13433: LD_INT 1
13435: DEC
13436: ST_TO_ADDR
13437: LD_EXP 65
13441: PUSH
13442: FOR_TO
13443: IFFALSE 13598
// if Position_Sides [ i ] then
13445: LD_EXP 46
13449: PUSH
13450: LD_VAR 0 2
13454: ARRAY
13455: IFFALSE 13596
// for j := 1 to 8 do
13457: LD_ADDR_VAR 0 3
13461: PUSH
13462: DOUBLE
13463: LD_INT 1
13465: DEC
13466: ST_TO_ADDR
13467: LD_INT 8
13469: PUSH
13470: FOR_TO
13471: IFFALSE 13594
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13473: LD_EXP 43
13477: PUSH
13478: LD_VAR 0 3
13482: ARRAY
13483: PUSH
13484: LD_EXP 40
13488: PUSH
13489: LD_EXP 46
13493: PUSH
13494: LD_VAR 0 2
13498: ARRAY
13499: ARRAY
13500: PUSH
13501: LD_EXP 40
13505: PUSH
13506: LD_VAR 0 3
13510: ARRAY
13511: NONEQUAL
13512: PUSH
13513: LD_EXP 45
13517: NOT
13518: PUSH
13519: LD_EXP 46
13523: PUSH
13524: LD_VAR 0 2
13528: ARRAY
13529: PUSH
13530: LD_VAR 0 3
13534: NONEQUAL
13535: AND
13536: OR
13537: AND
13538: IFFALSE 13562
// HideArea ( j , BuildUpAreas [ i ] ) else
13540: LD_VAR 0 3
13544: PPUSH
13545: LD_EXP 65
13549: PUSH
13550: LD_VAR 0 2
13554: ARRAY
13555: PPUSH
13556: CALL_OW 333
13560: GO 13592
// if ( j = your_side ) then
13562: LD_VAR 0 3
13566: PUSH
13567: LD_OWVAR 2
13571: EQUAL
13572: IFFALSE 13592
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
13574: LD_EXP 65
13578: PUSH
13579: LD_VAR 0 2
13583: ARRAY
13584: PPUSH
13585: LD_INT 5
13587: PPUSH
13588: CALL_OW 424
13592: GO 13470
13594: POP
13595: POP
13596: GO 13442
13598: POP
13599: POP
// end ;
13600: LD_VAR 0 1
13604: RET
// export function EndBuildUp ; var i , j ; begin
13605: LD_INT 0
13607: PPUSH
13608: PPUSH
13609: PPUSH
// buildUpTimeActive := false ;
13610: LD_ADDR_EXP 66
13614: PUSH
13615: LD_INT 0
13617: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
13618: LD_ADDR_VAR 0 2
13622: PUSH
13623: DOUBLE
13624: LD_INT 1
13626: DEC
13627: ST_TO_ADDR
13628: LD_EXP 65
13632: PUSH
13633: FOR_TO
13634: IFFALSE 13789
// if Position_Sides [ i ] then
13636: LD_EXP 46
13640: PUSH
13641: LD_VAR 0 2
13645: ARRAY
13646: IFFALSE 13787
// for j := 1 to 8 do
13648: LD_ADDR_VAR 0 3
13652: PUSH
13653: DOUBLE
13654: LD_INT 1
13656: DEC
13657: ST_TO_ADDR
13658: LD_INT 8
13660: PUSH
13661: FOR_TO
13662: IFFALSE 13785
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13664: LD_EXP 43
13668: PUSH
13669: LD_VAR 0 3
13673: ARRAY
13674: PUSH
13675: LD_EXP 40
13679: PUSH
13680: LD_EXP 46
13684: PUSH
13685: LD_VAR 0 2
13689: ARRAY
13690: ARRAY
13691: PUSH
13692: LD_EXP 40
13696: PUSH
13697: LD_VAR 0 3
13701: ARRAY
13702: NONEQUAL
13703: PUSH
13704: LD_EXP 45
13708: NOT
13709: PUSH
13710: LD_EXP 46
13714: PUSH
13715: LD_VAR 0 2
13719: ARRAY
13720: PUSH
13721: LD_VAR 0 3
13725: NONEQUAL
13726: AND
13727: OR
13728: AND
13729: IFFALSE 13753
// ShowArea ( j , BuildUpAreas [ i ] ) else
13731: LD_VAR 0 3
13735: PPUSH
13736: LD_EXP 65
13740: PUSH
13741: LD_VAR 0 2
13745: ARRAY
13746: PPUSH
13747: CALL_OW 334
13751: GO 13783
// if ( j = your_side ) then
13753: LD_VAR 0 3
13757: PUSH
13758: LD_OWVAR 2
13762: EQUAL
13763: IFFALSE 13783
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
13765: LD_EXP 65
13769: PUSH
13770: LD_VAR 0 2
13774: ARRAY
13775: PPUSH
13776: LD_INT 0
13778: PPUSH
13779: CALL_OW 424
13783: GO 13661
13785: POP
13786: POP
13787: GO 13633
13789: POP
13790: POP
// end ;
13791: LD_VAR 0 1
13795: RET
// every 5 trigger buildUpTimeActive do var i , un ;
13796: LD_EXP 66
13800: IFFALSE 13983
13802: GO 13804
13804: DISABLE
13805: LD_INT 0
13807: PPUSH
13808: PPUSH
// begin for i := 1 to BuildUpAreas do
13809: LD_ADDR_VAR 0 1
13813: PUSH
13814: DOUBLE
13815: LD_INT 1
13817: DEC
13818: ST_TO_ADDR
13819: LD_EXP 65
13823: PUSH
13824: FOR_TO
13825: IFFALSE 13980
// if Position_Sides [ i ] then
13827: LD_EXP 46
13831: PUSH
13832: LD_VAR 0 1
13836: ARRAY
13837: IFFALSE 13978
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13839: LD_ADDR_VAR 0 2
13843: PUSH
13844: LD_EXP 65
13848: PUSH
13849: LD_VAR 0 1
13853: ARRAY
13854: PPUSH
13855: LD_INT 2
13857: PUSH
13858: LD_INT 21
13860: PUSH
13861: LD_INT 1
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 21
13870: PUSH
13871: LD_INT 2
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: LIST
13882: PUSH
13883: LD_INT 22
13885: PUSH
13886: LD_OWVAR 2
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: PPUSH
13899: CALL_OW 70
13903: PUSH
13904: FOR_IN
13905: IFFALSE 13976
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
13907: LD_EXP 40
13911: PUSH
13912: LD_EXP 46
13916: PUSH
13917: LD_VAR 0 1
13921: ARRAY
13922: ARRAY
13923: PUSH
13924: LD_EXP 40
13928: PUSH
13929: LD_OWVAR 2
13933: ARRAY
13934: NONEQUAL
13935: PUSH
13936: LD_EXP 45
13940: NOT
13941: PUSH
13942: LD_EXP 46
13946: PUSH
13947: LD_VAR 0 1
13951: ARRAY
13952: PUSH
13953: LD_OWVAR 2
13957: NONEQUAL
13958: AND
13959: OR
13960: IFFALSE 13974
// ComMoveToArea ( un , BuildUpEscape ) ;
13962: LD_VAR 0 2
13966: PPUSH
13967: LD_INT 28
13969: PPUSH
13970: CALL_OW 113
13974: GO 13904
13976: POP
13977: POP
13978: GO 13824
13980: POP
13981: POP
// enable ;
13982: ENABLE
// end ;
13983: PPOPN 2
13985: END
// every 0 0$1 trigger def_builduptime do
13986: LD_EXP 17
13990: IFFALSE 14016
13992: GO 13994
13994: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
13995: LD_INT 8400
13997: PUSH
13998: LD_EXP 17
14002: PUSH
14003: LD_INT 2100
14005: MUL
14006: PLUS
14007: PPUSH
14008: CALL_OW 67
// EndBuildUp ;
14012: CALL 13605 0 0
// end ; end_of_file
14016: END
// export Game_Type , def_game_rules ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
14017: LD_INT 0
14019: PPUSH
14020: PPUSH
// if ( not IAmSpec ) then
14021: CALL_OW 531
14025: NOT
14026: IFFALSE 14042
// Result := Limits_Info ^  ;
14028: LD_ADDR_VAR 0 1
14032: PUSH
14033: LD_LOC 25
14037: PUSH
14038: LD_STRING 
14040: ADD
14041: ST_TO_ADDR
// for i := 1 to 8 do
14042: LD_ADDR_VAR 0 2
14046: PUSH
14047: DOUBLE
14048: LD_INT 1
14050: DEC
14051: ST_TO_ADDR
14052: LD_INT 8
14054: PUSH
14055: FOR_TO
14056: IFFALSE 14101
// if Cheaters [ i ] then
14058: LD_LOC 26
14062: PUSH
14063: LD_VAR 0 2
14067: ARRAY
14068: IFFALSE 14099
// Result := Result ^ [ #Cheater , i , i ] ;
14070: LD_ADDR_VAR 0 1
14074: PUSH
14075: LD_VAR 0 1
14079: PUSH
14080: LD_STRING #Cheater
14082: PUSH
14083: LD_VAR 0 2
14087: PUSH
14088: LD_VAR 0 2
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: LIST
14097: ADD
14098: ST_TO_ADDR
14099: GO 14055
14101: POP
14102: POP
// end ;
14103: LD_VAR 0 1
14107: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
14108: LD_INT 0
14110: PPUSH
14111: PPUSH
14112: PPUSH
14113: PPUSH
14114: PPUSH
// case Game_Type of 10 :
14115: LD_EXP 67
14119: PUSH
14120: LD_INT 10
14122: DOUBLE
14123: EQUAL
14124: IFTRUE 14128
14126: GO 14139
14128: POP
// def_game_rules := 1 ; 11 :
14129: LD_ADDR_EXP 68
14133: PUSH
14134: LD_INT 1
14136: ST_TO_ADDR
14137: GO 14159
14139: LD_INT 11
14141: DOUBLE
14142: EQUAL
14143: IFTRUE 14147
14145: GO 14158
14147: POP
// def_game_rules := 3 ; end ;
14148: LD_ADDR_EXP 68
14152: PUSH
14153: LD_INT 3
14155: ST_TO_ADDR
14156: GO 14159
14158: POP
// case def_game_rules of 0 :
14159: LD_EXP 68
14163: PUSH
14164: LD_INT 0
14166: DOUBLE
14167: EQUAL
14168: IFTRUE 14172
14170: GO 14177
14172: POP
// exit ; 1 :
14173: GO 14785
14175: GO 14685
14177: LD_INT 1
14179: DOUBLE
14180: EQUAL
14181: IFTRUE 14185
14183: GO 14417
14185: POP
// begin def_main_base = 1 ;
14186: LD_ADDR_EXP 1
14190: PUSH
14191: LD_INT 1
14193: ST_TO_ADDR
// def_secondary_base = 0 ;
14194: LD_ADDR_EXP 2
14198: PUSH
14199: LD_INT 0
14201: ST_TO_ADDR
// def_defence_level = 1 ;
14202: LD_ADDR_EXP 3
14206: PUSH
14207: LD_INT 1
14209: ST_TO_ADDR
// def_amount_of_people = 2 ;
14210: LD_ADDR_EXP 4
14214: PUSH
14215: LD_INT 2
14217: ST_TO_ADDR
// def_initial_level = 1 ;
14218: LD_ADDR_EXP 5
14222: PUSH
14223: LD_INT 1
14225: ST_TO_ADDR
// def_main_deposits = 2 ;
14226: LD_ADDR_EXP 6
14230: PUSH
14231: LD_INT 2
14233: ST_TO_ADDR
// def_secondary_deposits = 1 ;
14234: LD_ADDR_EXP 7
14238: PUSH
14239: LD_INT 1
14241: ST_TO_ADDR
// def_siberite_detection = 1 ;
14242: LD_ADDR_EXP 8
14246: PUSH
14247: LD_INT 1
14249: ST_TO_ADDR
// def_starting_resources = 2 ;
14250: LD_ADDR_EXP 9
14254: PUSH
14255: LD_INT 2
14257: ST_TO_ADDR
// def_shipments_density = 1 ;
14258: LD_ADDR_EXP 10
14262: PUSH
14263: LD_INT 1
14265: ST_TO_ADDR
// def_people_arrivals = 0 ;
14266: LD_ADDR_EXP 11
14270: PUSH
14271: LD_INT 0
14273: ST_TO_ADDR
// def_people_loyality = 0 ;
14274: LD_ADDR_EXP 12
14278: PUSH
14279: LD_INT 0
14281: ST_TO_ADDR
// def_people_info = 0 ;
14282: LD_ADDR_EXP 13
14286: PUSH
14287: LD_INT 0
14289: ST_TO_ADDR
// def_morale_flags = 1 ;
14290: LD_ADDR_EXP 14
14294: PUSH
14295: LD_INT 1
14297: ST_TO_ADDR
// def_siberite_bomb = 0 ;
14298: LD_ADDR_EXP 15
14302: PUSH
14303: LD_INT 0
14305: ST_TO_ADDR
// def_builduptime = 2 ;
14306: LD_ADDR_EXP 17
14310: PUSH
14311: LD_INT 2
14313: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
14314: LD_ADDR_VAR 0 2
14318: PUSH
14319: EMPTY
14320: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14321: LD_ADDR_VAR 0 3
14325: PUSH
14326: EMPTY
14327: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14328: LD_ADDR_LOC 20
14332: PUSH
14333: EMPTY
14334: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14335: LD_ADDR_LOC 21
14339: PUSH
14340: EMPTY
14341: ST_TO_ADDR
// Banned_Controls := [ ] ;
14342: LD_ADDR_LOC 22
14346: PUSH
14347: EMPTY
14348: ST_TO_ADDR
// Banned_Engines := [ ] ;
14349: LD_ADDR_LOC 23
14353: PUSH
14354: EMPTY
14355: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14356: LD_ADDR_LOC 18
14360: PUSH
14361: LD_INT 37
14363: PUSH
14364: EMPTY
14365: LIST
14366: PUSH
14367: LD_INT 4
14369: PUSH
14370: LD_INT 5
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: LD_INT 31
14379: PUSH
14380: LD_INT 32
14382: PUSH
14383: LD_INT 33
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: LIST
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: LIST
14395: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
14396: LD_ADDR_LOC 19
14400: PUSH
14401: LD_INT 2
14403: PUSH
14404: LD_INT 2
14406: PUSH
14407: LD_INT 4
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: LIST
14414: ST_TO_ADDR
// end ; 3 :
14415: GO 14685
14417: LD_INT 3
14419: DOUBLE
14420: EQUAL
14421: IFTRUE 14425
14423: GO 14684
14425: POP
// begin def_main_base = 1 ;
14426: LD_ADDR_EXP 1
14430: PUSH
14431: LD_INT 1
14433: ST_TO_ADDR
// def_secondary_base = 0 ;
14434: LD_ADDR_EXP 2
14438: PUSH
14439: LD_INT 0
14441: ST_TO_ADDR
// def_defence_level = 0 ;
14442: LD_ADDR_EXP 3
14446: PUSH
14447: LD_INT 0
14449: ST_TO_ADDR
// def_amount_of_people = 2 ;
14450: LD_ADDR_EXP 4
14454: PUSH
14455: LD_INT 2
14457: ST_TO_ADDR
// def_initial_level = 3 ;
14458: LD_ADDR_EXP 5
14462: PUSH
14463: LD_INT 3
14465: ST_TO_ADDR
// def_main_deposits = 2 ;
14466: LD_ADDR_EXP 6
14470: PUSH
14471: LD_INT 2
14473: ST_TO_ADDR
// def_secondary_deposits = 1 ;
14474: LD_ADDR_EXP 7
14478: PUSH
14479: LD_INT 1
14481: ST_TO_ADDR
// def_siberite_detection = 1 ;
14482: LD_ADDR_EXP 8
14486: PUSH
14487: LD_INT 1
14489: ST_TO_ADDR
// def_starting_resources = 3 ;
14490: LD_ADDR_EXP 9
14494: PUSH
14495: LD_INT 3
14497: ST_TO_ADDR
// def_shipments_density = 1 ;
14498: LD_ADDR_EXP 10
14502: PUSH
14503: LD_INT 1
14505: ST_TO_ADDR
// def_people_arrivals = 0 ;
14506: LD_ADDR_EXP 11
14510: PUSH
14511: LD_INT 0
14513: ST_TO_ADDR
// def_people_loyality = 0 ;
14514: LD_ADDR_EXP 12
14518: PUSH
14519: LD_INT 0
14521: ST_TO_ADDR
// def_people_info = 0 ;
14522: LD_ADDR_EXP 13
14526: PUSH
14527: LD_INT 0
14529: ST_TO_ADDR
// def_morale_flags = 0 ;
14530: LD_ADDR_EXP 14
14534: PUSH
14535: LD_INT 0
14537: ST_TO_ADDR
// def_siberite_bomb = 0 ;
14538: LD_ADDR_EXP 15
14542: PUSH
14543: LD_INT 0
14545: ST_TO_ADDR
// def_builduptime = 1 ;
14546: LD_ADDR_EXP 17
14550: PUSH
14551: LD_INT 1
14553: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14554: LD_ADDR_VAR 0 2
14558: PUSH
14559: LD_INT 23
14561: PUSH
14562: EMPTY
14563: LIST
14564: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
14565: LD_ADDR_VAR 0 3
14569: PUSH
14570: LD_INT 2
14572: PUSH
14573: LD_INT 37
14575: PUSH
14576: LD_INT 32
14578: PUSH
14579: LD_INT 33
14581: PUSH
14582: LD_INT 36
14584: PUSH
14585: LD_INT 16
14587: PUSH
14588: LD_INT 23
14590: PUSH
14591: LD_INT 21
14593: PUSH
14594: LD_INT 18
14596: PUSH
14597: LD_INT 22
14599: PUSH
14600: LD_INT 20
14602: PUSH
14603: LD_INT 19
14605: PUSH
14606: LD_INT 25
14608: PUSH
14609: LD_INT 17
14611: PUSH
14612: LD_INT 24
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14632: LD_ADDR_LOC 20
14636: PUSH
14637: EMPTY
14638: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14639: LD_ADDR_LOC 21
14643: PUSH
14644: EMPTY
14645: ST_TO_ADDR
// Banned_Controls := [ ] ;
14646: LD_ADDR_LOC 22
14650: PUSH
14651: EMPTY
14652: ST_TO_ADDR
// Banned_Engines := [ ] ;
14653: LD_ADDR_LOC 23
14657: PUSH
14658: EMPTY
14659: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14660: LD_ADDR_LOC 18
14664: PUSH
14665: EMPTY
14666: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14667: LD_ADDR_LOC 19
14671: PUSH
14672: EMPTY
14673: ST_TO_ADDR
// No_Mechs := true ;
14674: LD_ADDR_EXP 69
14678: PUSH
14679: LD_INT 1
14681: ST_TO_ADDR
// end ; end ;
14682: GO 14685
14684: POP
// for i := 1 to 8 do
14685: LD_ADDR_VAR 0 4
14689: PUSH
14690: DOUBLE
14691: LD_INT 1
14693: DEC
14694: ST_TO_ADDR
14695: LD_INT 8
14697: PUSH
14698: FOR_TO
14699: IFFALSE 14783
// if Side_Positions [ i ] then
14701: LD_EXP 43
14705: PUSH
14706: LD_VAR 0 4
14710: ARRAY
14711: IFFALSE 14781
// begin for j in Unavailable_Techs do
14713: LD_ADDR_VAR 0 5
14717: PUSH
14718: LD_VAR 0 2
14722: PUSH
14723: FOR_IN
14724: IFFALSE 14745
// SetTech ( j , i , 0 ) ;
14726: LD_VAR 0 5
14730: PPUSH
14731: LD_VAR 0 4
14735: PPUSH
14736: LD_INT 0
14738: PPUSH
14739: CALL_OW 322
14743: GO 14723
14745: POP
14746: POP
// for j in Unavailable_Builds do
14747: LD_ADDR_VAR 0 5
14751: PUSH
14752: LD_VAR 0 3
14756: PUSH
14757: FOR_IN
14758: IFFALSE 14779
// SetRestrict ( j , i , 0 ) ;
14760: LD_VAR 0 5
14764: PPUSH
14765: LD_VAR 0 4
14769: PPUSH
14770: LD_INT 0
14772: PPUSH
14773: CALL_OW 324
14777: GO 14757
14779: POP
14780: POP
// end ;
14781: GO 14698
14783: POP
14784: POP
// end ;
14785: LD_VAR 0 1
14789: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
14790: LD_INT 0
14792: PPUSH
14793: PPUSH
14794: PPUSH
14795: PPUSH
14796: PPUSH
14797: PPUSH
14798: PPUSH
// for i := 1 to Restricted_Builds do
14799: LD_ADDR_VAR 0 2
14803: PUSH
14804: DOUBLE
14805: LD_INT 1
14807: DEC
14808: ST_TO_ADDR
14809: LD_LOC 18
14813: PUSH
14814: FOR_TO
14815: IFFALSE 15125
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
14817: LD_LOC 18
14821: PUSH
14822: LD_VAR 0 2
14826: ARRAY
14827: PUSH
14828: LD_INT 1
14830: ARRAY
14831: PUSH
14832: LD_INT 31
14834: DOUBLE
14835: EQUAL
14836: IFTRUE 14852
14838: LD_INT 32
14840: DOUBLE
14841: EQUAL
14842: IFTRUE 14852
14844: LD_INT 33
14846: DOUBLE
14847: EQUAL
14848: IFTRUE 14852
14850: GO 14863
14852: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
14853: LD_ADDR_VAR 0 6
14857: PUSH
14858: LD_STRING #Turrets
14860: ST_TO_ADDR
14861: GO 14908
14863: LD_INT 4
14865: DOUBLE
14866: EQUAL
14867: IFTRUE 14877
14869: LD_INT 5
14871: DOUBLE
14872: EQUAL
14873: IFTRUE 14877
14875: GO 14888
14877: POP
// btype := #Armouries ; b_Behemoth :
14878: LD_ADDR_VAR 0 6
14882: PUSH
14883: LD_STRING #Armouries
14885: ST_TO_ADDR
14886: GO 14908
14888: LD_INT 37
14890: DOUBLE
14891: EQUAL
14892: IFTRUE 14896
14894: GO 14907
14896: POP
// btype := #Behemoths ; end ;
14897: LD_ADDR_VAR 0 6
14901: PUSH
14902: LD_STRING #Behemoths
14904: ST_TO_ADDR
14905: GO 14908
14907: POP
// list := [ ] ;
14908: LD_ADDR_VAR 0 7
14912: PUSH
14913: EMPTY
14914: ST_TO_ADDR
// for j := 1 to 8 do
14915: LD_ADDR_VAR 0 3
14919: PUSH
14920: DOUBLE
14921: LD_INT 1
14923: DEC
14924: ST_TO_ADDR
14925: LD_INT 8
14927: PUSH
14928: FOR_TO
14929: IFFALSE 15022
// if Side_Positions [ j ] then
14931: LD_EXP 43
14935: PUSH
14936: LD_VAR 0 3
14940: ARRAY
14941: IFFALSE 15020
// begin amount := 0 ;
14943: LD_ADDR_VAR 0 5
14947: PUSH
14948: LD_INT 0
14950: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
14951: LD_ADDR_VAR 0 4
14955: PUSH
14956: LD_LOC 18
14960: PUSH
14961: LD_VAR 0 2
14965: ARRAY
14966: PUSH
14967: FOR_IN
14968: IFFALSE 15016
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
14970: LD_ADDR_VAR 0 5
14974: PUSH
14975: LD_VAR 0 5
14979: PUSH
14980: LD_INT 22
14982: PUSH
14983: LD_VAR 0 3
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 30
14994: PUSH
14995: LD_VAR 0 4
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PPUSH
15008: CALL_OW 69
15012: PLUS
15013: ST_TO_ADDR
15014: GO 14967
15016: POP
15017: POP
// break ;
15018: GO 15022
// end ;
15020: GO 14928
15022: POP
15023: POP
// list := [ ] ;
15024: LD_ADDR_VAR 0 7
15028: PUSH
15029: EMPTY
15030: ST_TO_ADDR
// for j := 1 to 8 do
15031: LD_ADDR_VAR 0 3
15035: PUSH
15036: DOUBLE
15037: LD_INT 1
15039: DEC
15040: ST_TO_ADDR
15041: LD_INT 8
15043: PUSH
15044: FOR_TO
15045: IFFALSE 15065
// list := list ^ amount ;
15047: LD_ADDR_VAR 0 7
15051: PUSH
15052: LD_VAR 0 7
15056: PUSH
15057: LD_VAR 0 5
15061: ADD
15062: ST_TO_ADDR
15063: GO 15044
15065: POP
15066: POP
// Already_Built := Already_Built ^ [ list ] ;
15067: LD_ADDR_LOC 24
15071: PUSH
15072: LD_LOC 24
15076: PUSH
15077: LD_VAR 0 7
15081: PUSH
15082: EMPTY
15083: LIST
15084: ADD
15085: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
15086: LD_ADDR_LOC 25
15090: PUSH
15091: LD_LOC 25
15095: PUSH
15096: LD_VAR 0 6
15100: PUSH
15101: LD_VAR 0 5
15105: PUSH
15106: LD_LOC 19
15110: PUSH
15111: LD_VAR 0 2
15115: ARRAY
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: LIST
15121: ADD
15122: ST_TO_ADDR
// end ;
15123: GO 14814
15125: POP
15126: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15127: LD_ADDR_LOC 26
15131: PUSH
15132: LD_INT 0
15134: PUSH
15135: LD_INT 0
15137: PUSH
15138: LD_INT 0
15140: PUSH
15141: LD_INT 0
15143: PUSH
15144: LD_INT 0
15146: PUSH
15147: LD_INT 0
15149: PUSH
15150: LD_INT 0
15152: PUSH
15153: LD_INT 0
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: ST_TO_ADDR
// if Limits_Info then
15166: LD_LOC 25
15170: IFFALSE 15186
// Limits_Info := #Limits ^ Limits_Info ;
15172: LD_ADDR_LOC 25
15176: PUSH
15177: LD_STRING #Limits
15179: PUSH
15180: LD_LOC 25
15184: ADD
15185: ST_TO_ADDR
// end ;
15186: LD_VAR 0 1
15190: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
15191: LD_INT 0
15193: PPUSH
15194: PPUSH
15195: PPUSH
15196: PPUSH
// for i := 1 to Restricted_Builds do
15197: LD_ADDR_VAR 0 7
15201: PUSH
15202: DOUBLE
15203: LD_INT 1
15205: DEC
15206: ST_TO_ADDR
15207: LD_LOC 18
15211: PUSH
15212: FOR_TO
15213: IFFALSE 15636
// if BType in Restricted_Builds [ i ] then
15215: LD_VAR 0 2
15219: PUSH
15220: LD_LOC 18
15224: PUSH
15225: LD_VAR 0 7
15229: ARRAY
15230: IN
15231: IFFALSE 15634
// begin if old_side then
15233: LD_VAR 0 4
15237: IFFALSE 15363
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
15239: LD_LOC 24
15243: PUSH
15244: LD_VAR 0 7
15248: ARRAY
15249: PUSH
15250: LD_VAR 0 3
15254: ARRAY
15255: PUSH
15256: LD_VAR 0 5
15260: PLUS
15261: PUSH
15262: LD_LOC 19
15266: PUSH
15267: LD_VAR 0 7
15271: ARRAY
15272: GREATER
15273: IFFALSE 15299
// begin SetSide ( un , old_side ) ;
15275: LD_VAR 0 1
15279: PPUSH
15280: LD_VAR 0 4
15284: PPUSH
15285: CALL_OW 235
// count := 0 ;
15289: LD_ADDR_VAR 0 5
15293: PUSH
15294: LD_INT 0
15296: ST_TO_ADDR
// end else
15297: GO 15363
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
15299: LD_ADDR_LOC 24
15303: PUSH
15304: LD_LOC 24
15308: PPUSH
15309: LD_VAR 0 7
15313: PPUSH
15314: LD_LOC 24
15318: PUSH
15319: LD_VAR 0 7
15323: ARRAY
15324: PPUSH
15325: LD_VAR 0 4
15329: PPUSH
15330: LD_LOC 24
15334: PUSH
15335: LD_VAR 0 7
15339: ARRAY
15340: PUSH
15341: LD_VAR 0 4
15345: ARRAY
15346: PUSH
15347: LD_VAR 0 5
15351: MINUS
15352: PPUSH
15353: CALL_OW 1
15357: PPUSH
15358: CALL_OW 1
15362: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
15363: LD_ADDR_LOC 24
15367: PUSH
15368: LD_LOC 24
15372: PPUSH
15373: LD_VAR 0 7
15377: PPUSH
15378: LD_LOC 24
15382: PUSH
15383: LD_VAR 0 7
15387: ARRAY
15388: PPUSH
15389: LD_VAR 0 3
15393: PPUSH
15394: LD_LOC 24
15398: PUSH
15399: LD_VAR 0 7
15403: ARRAY
15404: PUSH
15405: LD_VAR 0 3
15409: ARRAY
15410: PUSH
15411: LD_VAR 0 5
15415: PLUS
15416: PPUSH
15417: CALL_OW 1
15421: PPUSH
15422: CALL_OW 1
15426: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
15427: LD_VAR 0 5
15431: PUSH
15432: LD_INT 0
15434: NONEQUAL
15435: PUSH
15436: LD_VAR 0 3
15440: PUSH
15441: LD_OWVAR 2
15445: EQUAL
15446: AND
15447: IFFALSE 15490
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
15449: LD_ADDR_LOC 25
15453: PUSH
15454: LD_LOC 25
15458: PPUSH
15459: LD_INT 3
15461: PUSH
15462: LD_VAR 0 7
15466: MUL
15467: PPUSH
15468: LD_LOC 24
15472: PUSH
15473: LD_VAR 0 7
15477: ARRAY
15478: PUSH
15479: LD_VAR 0 3
15483: ARRAY
15484: PPUSH
15485: CALL_OW 1
15489: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
15490: LD_LOC 24
15494: PUSH
15495: LD_VAR 0 7
15499: ARRAY
15500: PUSH
15501: LD_VAR 0 3
15505: ARRAY
15506: PUSH
15507: LD_LOC 19
15511: PUSH
15512: LD_VAR 0 7
15516: ARRAY
15517: GREATER
15518: IFFALSE 15545
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
15520: LD_ADDR_LOC 26
15524: PUSH
15525: LD_LOC 26
15529: PPUSH
15530: LD_VAR 0 3
15534: PPUSH
15535: LD_INT 1
15537: PPUSH
15538: CALL_OW 1
15542: ST_TO_ADDR
// end else
15543: GO 15632
// begin for j := 1 to Restricted_Builds do
15545: LD_ADDR_VAR 0 8
15549: PUSH
15550: DOUBLE
15551: LD_INT 1
15553: DEC
15554: ST_TO_ADDR
15555: LD_LOC 18
15559: PUSH
15560: FOR_TO
15561: IFFALSE 15605
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
15563: LD_LOC 24
15567: PUSH
15568: LD_VAR 0 8
15572: ARRAY
15573: PUSH
15574: LD_VAR 0 3
15578: ARRAY
15579: PUSH
15580: LD_LOC 19
15584: PUSH
15585: LD_VAR 0 8
15589: ARRAY
15590: GREATER
15591: IFFALSE 15603
// begin Is_Cheater := true ;
15593: LD_ADDR_VAR 0 9
15597: PUSH
15598: LD_INT 1
15600: ST_TO_ADDR
// break ;
15601: GO 15605
// end ;
15603: GO 15560
15605: POP
15606: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
15607: LD_ADDR_LOC 26
15611: PUSH
15612: LD_LOC 26
15616: PPUSH
15617: LD_VAR 0 3
15621: PPUSH
15622: LD_VAR 0 9
15626: PPUSH
15627: CALL_OW 1
15631: ST_TO_ADDR
// end ; break ;
15632: GO 15636
// end ;
15634: GO 15212
15636: POP
15637: POP
// end ;
15638: LD_VAR 0 6
15642: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
15643: LD_VAR 0 5
15647: PUSH
15648: LD_LOC 20
15652: IN
15653: PUSH
15654: LD_VAR 0 2
15658: PUSH
15659: LD_LOC 21
15663: IN
15664: OR
15665: PUSH
15666: LD_VAR 0 4
15670: PUSH
15671: LD_LOC 22
15675: IN
15676: OR
15677: PUSH
15678: LD_VAR 0 3
15682: PUSH
15683: LD_LOC 23
15687: IN
15688: OR
15689: IFFALSE 15700
// ComCancel ( factory ) ;
15691: LD_VAR 0 1
15695: PPUSH
15696: CALL_OW 127
// end ;
15700: PPOPN 5
15702: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
15703: LD_VAR 0 2
15707: PUSH
15708: LD_LOC 20
15712: IN
15713: IFFALSE 15724
// ComCancel ( building ) ;
15715: LD_VAR 0 1
15719: PPUSH
15720: CALL_OW 127
// end ; end_of_file
15724: PPOPN 2
15726: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
15727: LD_INT 0
15729: PPUSH
15730: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
15731: LD_ADDR_VAR 0 2
15735: PUSH
15736: LD_STRING #Multi1x1-Time
15738: PUSH
15739: LD_OWVAR 1
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: ST_TO_ADDR
// if WaitServerStrings then
15748: LD_EXP 71
15752: IFFALSE 15770
// AllStrings = AllStrings ^ WaitServerStrings ;
15754: LD_ADDR_VAR 0 2
15758: PUSH
15759: LD_VAR 0 2
15763: PUSH
15764: LD_EXP 71
15768: ADD
15769: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
15770: LD_INT 0
15772: PUSH
15773: LD_EXP 38
15777: PUSH
15778: LD_OWVAR 1
15782: MINUS
15783: LESSEQUAL
15784: IFFALSE 15815
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
15786: LD_ADDR_VAR 0 2
15790: PUSH
15791: LD_VAR 0 2
15795: PUSH
15796: LD_STRING #allowedsibbomb
15798: PUSH
15799: LD_EXP 38
15803: PUSH
15804: LD_OWVAR 1
15808: MINUS
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: ADD
15814: ST_TO_ADDR
// if ( ExtraStrings ) then
15815: LD_EXP 70
15819: IFFALSE 15841
// AllStrings := AllStrings ^  ^ ExtraStrings ;
15821: LD_ADDR_VAR 0 2
15825: PUSH
15826: LD_VAR 0 2
15830: PUSH
15831: LD_STRING 
15833: ADD
15834: PUSH
15835: LD_EXP 70
15839: ADD
15840: ST_TO_ADDR
// if ( LimitsStrings ) then
15841: CALL 14017 0 0
15845: IFFALSE 15867
// AllStrings := AllStrings ^  ^ LimitsStrings ;
15847: LD_ADDR_VAR 0 2
15851: PUSH
15852: LD_VAR 0 2
15856: PUSH
15857: LD_STRING 
15859: ADD
15860: PUSH
15861: CALL 14017 0 0
15865: ADD
15866: ST_TO_ADDR
// Display_Strings := AllStrings ;
15867: LD_ADDR_OWVAR 47
15871: PUSH
15872: LD_VAR 0 2
15876: ST_TO_ADDR
// end ;
15877: LD_VAR 0 1
15881: RET
// every 0 0$1 do
15882: GO 15884
15884: DISABLE
// begin ShowTimer ;
15885: CALL 15727 0 0
// enable ;
15889: ENABLE
// end ; end_of_file
15890: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
15891: LD_INT 0
15893: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
15894: LD_VAR 0 1
15898: PPUSH
15899: CALL_OW 255
15903: PUSH
15904: LD_VAR 0 4
15908: EQUAL
15909: IFFALSE 15928
// begin SetAchievement ( ACH_RAD ) ;
15911: LD_STRING ACH_RAD
15913: PPUSH
15914: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
15918: LD_STRING ACH_NL
15920: PPUSH
15921: LD_INT 1
15923: PPUSH
15924: CALL_OW 564
// end end ;
15928: LD_VAR 0 5
15932: RET
// export function SA_Win ( side ) ; begin
15933: LD_INT 0
15935: PPUSH
// case side of 1 :
15936: LD_VAR 0 1
15940: PUSH
15941: LD_INT 1
15943: DOUBLE
15944: EQUAL
15945: IFTRUE 15949
15947: GO 15962
15949: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
15950: LD_STRING ACH_AH
15952: PPUSH
15953: LD_INT 1
15955: PPUSH
15956: CALL_OW 564
15960: GO 16125
15962: LD_INT 2
15964: DOUBLE
15965: EQUAL
15966: IFTRUE 15970
15968: GO 15983
15970: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
15971: LD_STRING ACH_E
15973: PPUSH
15974: LD_INT 1
15976: PPUSH
15977: CALL_OW 564
15981: GO 16125
15983: LD_INT 3
15985: DOUBLE
15986: EQUAL
15987: IFTRUE 15991
15989: GO 16004
15991: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
15992: LD_STRING ACH_OOL
15994: PPUSH
15995: LD_INT 1
15997: PPUSH
15998: CALL_OW 564
16002: GO 16125
16004: LD_INT 1
16006: PUSH
16007: LD_INT 2
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: DOUBLE
16014: EQUAL
16015: IFTRUE 16019
16017: GO 16044
16019: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
16020: LD_STRING ACH_AH
16022: PPUSH
16023: LD_REAL  5.00000000000000E-0001
16026: PPUSH
16027: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
16031: LD_STRING ACH_E
16033: PPUSH
16034: LD_REAL  5.00000000000000E-0001
16037: PPUSH
16038: CALL_OW 564
// end ; [ 2 , 3 ] :
16042: GO 16125
16044: LD_INT 2
16046: PUSH
16047: LD_INT 3
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: DOUBLE
16054: EQUAL
16055: IFTRUE 16059
16057: GO 16084
16059: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
16060: LD_STRING ACH_OOL
16062: PPUSH
16063: LD_REAL  5.00000000000000E-0001
16066: PPUSH
16067: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
16071: LD_STRING ACH_E
16073: PPUSH
16074: LD_REAL  5.00000000000000E-0001
16077: PPUSH
16078: CALL_OW 564
// end ; [ 3 , 1 ] :
16082: GO 16125
16084: LD_INT 3
16086: PUSH
16087: LD_INT 1
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: DOUBLE
16094: EQUAL
16095: IFTRUE 16099
16097: GO 16124
16099: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
16100: LD_STRING ACH_AH
16102: PPUSH
16103: LD_REAL  5.00000000000000E-0001
16106: PPUSH
16107: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
16111: LD_STRING ACH_OOL
16113: PPUSH
16114: LD_REAL  5.00000000000000E-0001
16117: PPUSH
16118: CALL_OW 564
// end ; end ;
16122: GO 16125
16124: POP
// end ; end_of_file
16125: LD_VAR 0 2
16129: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
16130: LD_INT 0
16132: PPUSH
16133: PPUSH
// enable ( 98 ) ;
16134: LD_INT 98
16136: ENABLE_MARKED
// GameEnded = false ;
16137: LD_ADDR_LOC 28
16141: PUSH
16142: LD_INT 0
16144: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16145: LD_ADDR_LOC 27
16149: PUSH
16150: LD_INT 0
16152: PUSH
16153: LD_INT 0
16155: PUSH
16156: LD_INT 0
16158: PUSH
16159: LD_INT 0
16161: PUSH
16162: LD_INT 0
16164: PUSH
16165: LD_INT 0
16167: PUSH
16168: LD_INT 0
16170: PUSH
16171: LD_INT 0
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: ST_TO_ADDR
// unfoged = false ;
16184: LD_ADDR_LOC 29
16188: PUSH
16189: LD_INT 0
16191: ST_TO_ADDR
// for i = 1 to side_positions do
16192: LD_ADDR_VAR 0 2
16196: PUSH
16197: DOUBLE
16198: LD_INT 1
16200: DEC
16201: ST_TO_ADDR
16202: LD_EXP 43
16206: PUSH
16207: FOR_TO
16208: IFFALSE 16248
// if not side_positions [ i ] then
16210: LD_EXP 43
16214: PUSH
16215: LD_VAR 0 2
16219: ARRAY
16220: NOT
16221: IFFALSE 16246
// defaited = replace ( defaited , i , true ) ;
16223: LD_ADDR_LOC 27
16227: PUSH
16228: LD_LOC 27
16232: PPUSH
16233: LD_VAR 0 2
16237: PPUSH
16238: LD_INT 1
16240: PPUSH
16241: CALL_OW 1
16245: ST_TO_ADDR
16246: GO 16207
16248: POP
16249: POP
// end ;
16250: LD_VAR 0 1
16254: RET
// function CanWinLoose ; begin
16255: LD_INT 0
16257: PPUSH
// Result := true ;
16258: LD_ADDR_VAR 0 1
16262: PUSH
16263: LD_INT 1
16265: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
16266: CALL_OW 518
16270: PUSH
16271: CALL_OW 519
16275: PUSH
16276: LD_INT 0
16278: GREATER
16279: AND
16280: IFFALSE 16290
// Result := false ;
16282: LD_ADDR_VAR 0 1
16286: PUSH
16287: LD_INT 0
16289: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
16290: CALL_OW 531
16294: PUSH
16295: CALL_OW 519
16299: PUSH
16300: LD_INT 1
16302: GREATER
16303: AND
16304: IFFALSE 16314
// Result := false ;
16306: LD_ADDR_VAR 0 1
16310: PUSH
16311: LD_INT 0
16313: ST_TO_ADDR
// end ;
16314: LD_VAR 0 1
16318: RET
// export function HasPower ( i ) ; var k , h ; begin
16319: LD_INT 0
16321: PPUSH
16322: PPUSH
16323: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
16324: LD_VAR 0 1
16328: PPUSH
16329: CALL_OW 108
16333: NOT
16334: PUSH
16335: LD_EXP 42
16339: PUSH
16340: LD_VAR 0 1
16344: ARRAY
16345: NOT
16346: AND
16347: PUSH
16348: LD_OWVAR 4
16352: AND
16353: IFFALSE 16365
// begin result = false ;
16355: LD_ADDR_VAR 0 2
16359: PUSH
16360: LD_INT 0
16362: ST_TO_ADDR
// end else
16363: GO 16660
// case def_win_rules of 0 :
16365: LD_EXP 18
16369: PUSH
16370: LD_INT 0
16372: DOUBLE
16373: EQUAL
16374: IFTRUE 16378
16376: GO 16541
16378: POP
// if def_people_respawning then
16379: LD_EXP 19
16383: IFFALSE 16474
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
16385: LD_ADDR_VAR 0 2
16389: PUSH
16390: LD_INT 22
16392: PUSH
16393: LD_VAR 0 1
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PUSH
16402: LD_INT 2
16404: PUSH
16405: LD_INT 21
16407: PUSH
16408: LD_INT 1
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: LD_INT 33
16417: PUSH
16418: LD_INT 3
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: LD_INT 33
16427: PUSH
16428: LD_INT 5
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 30
16437: PUSH
16438: LD_INT 0
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 30
16447: PUSH
16448: LD_INT 1
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PPUSH
16467: CALL_OW 69
16471: ST_TO_ADDR
16472: GO 16539
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
16474: LD_ADDR_VAR 0 2
16478: PUSH
16479: LD_INT 22
16481: PUSH
16482: LD_VAR 0 1
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 2
16493: PUSH
16494: LD_INT 21
16496: PUSH
16497: LD_INT 1
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: LD_INT 33
16506: PUSH
16507: LD_INT 3
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PUSH
16514: LD_INT 33
16516: PUSH
16517: LD_INT 5
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PPUSH
16534: CALL_OW 69
16538: ST_TO_ADDR
16539: GO 16660
16541: LD_INT 1
16543: DOUBLE
16544: EQUAL
16545: IFTRUE 16549
16547: GO 16588
16549: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
16550: LD_ADDR_VAR 0 2
16554: PUSH
16555: LD_INT 22
16557: PUSH
16558: LD_VAR 0 1
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 21
16569: PUSH
16570: LD_INT 1
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PPUSH
16581: CALL_OW 69
16585: ST_TO_ADDR
16586: GO 16660
16588: LD_INT 2
16590: DOUBLE
16591: EQUAL
16592: IFTRUE 16596
16594: GO 16659
16596: POP
// begin h = false ;
16597: LD_ADDR_VAR 0 4
16601: PUSH
16602: LD_INT 0
16604: ST_TO_ADDR
// for k in heroes [ i ] do
16605: LD_ADDR_VAR 0 3
16609: PUSH
16610: LD_EXP 57
16614: PUSH
16615: LD_VAR 0 1
16619: ARRAY
16620: PUSH
16621: FOR_IN
16622: IFFALSE 16645
// if IsLive ( k ) then
16624: LD_VAR 0 3
16628: PPUSH
16629: CALL_OW 300
16633: IFFALSE 16643
// h = true ;
16635: LD_ADDR_VAR 0 4
16639: PUSH
16640: LD_INT 1
16642: ST_TO_ADDR
16643: GO 16621
16645: POP
16646: POP
// Result := h ;
16647: LD_ADDR_VAR 0 2
16651: PUSH
16652: LD_VAR 0 4
16656: ST_TO_ADDR
// end ; end ;
16657: GO 16660
16659: POP
// end ;
16660: LD_VAR 0 2
16664: RET
// function AlliedSides ( i , j ) ; begin
16665: LD_INT 0
16667: PPUSH
// Result := false ;
16668: LD_ADDR_VAR 0 3
16672: PUSH
16673: LD_INT 0
16675: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
16676: LD_VAR 0 1
16680: PPUSH
16681: LD_VAR 0 2
16685: PPUSH
16686: CALL_OW 81
16690: PUSH
16691: LD_INT 1
16693: EQUAL
16694: PUSH
16695: LD_VAR 0 2
16699: PPUSH
16700: LD_VAR 0 1
16704: PPUSH
16705: CALL_OW 81
16709: PUSH
16710: LD_INT 1
16712: EQUAL
16713: AND
16714: PUSH
16715: LD_VAR 0 1
16719: PPUSH
16720: CALL_OW 83
16724: AND
16725: PUSH
16726: LD_VAR 0 2
16730: PPUSH
16731: CALL_OW 83
16735: AND
16736: IFFALSE 16746
// Result := true ;
16738: LD_ADDR_VAR 0 3
16742: PUSH
16743: LD_INT 1
16745: ST_TO_ADDR
// end ;
16746: LD_VAR 0 3
16750: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
16751: CALL 16255 0 0
16755: PUSH
16756: LD_LOC 28
16760: NOT
16761: AND
16762: IFFALSE 16778
16764: GO 16766
16766: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
16767: LD_ADDR_EXP 71
16771: PUSH
16772: LD_STRING #Player-Ended
16774: PUSH
16775: EMPTY
16776: LIST
16777: ST_TO_ADDR
16778: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
16779: CALL 16255 0 0
16783: PUSH
16784: LD_LOC 28
16788: AND
16789: IFFALSE 16798
16791: GO 16793
16793: DISABLE
// YouLostInMultiplayer ;
16794: CALL_OW 107
16798: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
16799: CALL 16255 0 0
16803: NOT
16804: PUSH
16805: CALL_OW 531
16809: NOT
16810: AND
16811: IFFALSE 16827
16813: GO 16815
16815: DISABLE
// WaitServerStrings = [ #server-wait ] ;
16816: LD_ADDR_EXP 71
16820: PUSH
16821: LD_STRING #server-wait
16823: PUSH
16824: EMPTY
16825: LIST
16826: ST_TO_ADDR
16827: END
// every 100 trigger IAmSpec do
16828: CALL_OW 531
16832: IFFALSE 16848
16834: GO 16836
16836: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
16837: LD_ADDR_EXP 71
16841: PUSH
16842: LD_STRING #Player-IAmSpec
16844: PUSH
16845: EMPTY
16846: LIST
16847: ST_TO_ADDR
16848: END
// every 100 trigger GameEnded and IAmSpec do
16849: LD_LOC 28
16853: PUSH
16854: CALL_OW 531
16858: AND
16859: IFFALSE 16868
16861: GO 16863
16863: DISABLE
// YouLostInMultiplayer ;
16864: CALL_OW 107
16868: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
16869: CALL 16255 0 0
16873: PUSH
16874: LD_LOC 28
16878: NOT
16879: AND
16880: IFFALSE 16896
16882: GO 16884
16884: DISABLE
// WaitServerStrings = [ $player-win ] ;
16885: LD_ADDR_EXP 71
16889: PUSH
16890: LD_STRING $player-win
16892: PUSH
16893: EMPTY
16894: LIST
16895: ST_TO_ADDR
16896: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
16897: CALL 16255 0 0
16901: PUSH
16902: LD_LOC 28
16906: AND
16907: IFFALSE 16931
16909: GO 16911
16911: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
16912: LD_EXP 44
16916: PUSH
16917: LD_OWVAR 2
16921: ARRAY
16922: PPUSH
16923: CALL 15933 0 1
// YouWinInMultiplayer ;
16927: CALL_OW 106
// end ;
16931: END
// every 100 trigger isEditor marked 401 do
16932: LD_OWVAR 84
16936: IFFALSE 16952
16938: GO 16940
16940: DISABLE
// Debug_Strings = [ You won ] ;
16941: LD_ADDR_OWVAR 48
16945: PUSH
16946: LD_STRING You won
16948: PUSH
16949: EMPTY
16950: LIST
16951: ST_TO_ADDR
16952: END
// every 100 trigger isEditor marked 400 do
16953: LD_OWVAR 84
16957: IFFALSE 16973
16959: GO 16961
16961: DISABLE
// Debug_Strings = [ You loss ] ;
16962: LD_ADDR_OWVAR 48
16966: PUSH
16967: LD_STRING You loss
16969: PUSH
16970: EMPTY
16971: LIST
16972: ST_TO_ADDR
16973: END
// every 100 marked 98 do var i , un ;
16974: GO 16976
16976: DISABLE
16977: LD_INT 0
16979: PPUSH
16980: PPUSH
// begin for i = 1 to side_positions do
16981: LD_ADDR_VAR 0 1
16985: PUSH
16986: DOUBLE
16987: LD_INT 1
16989: DEC
16990: ST_TO_ADDR
16991: LD_EXP 43
16995: PUSH
16996: FOR_TO
16997: IFFALSE 17080
// if side_positions [ i ] then
16999: LD_EXP 43
17003: PUSH
17004: LD_VAR 0 1
17008: ARRAY
17009: IFFALSE 17078
// if not HasPower ( i ) and not Defaited [ i ] then
17011: LD_VAR 0 1
17015: PPUSH
17016: CALL 16319 0 1
17020: NOT
17021: PUSH
17022: LD_LOC 27
17026: PUSH
17027: LD_VAR 0 1
17031: ARRAY
17032: NOT
17033: AND
17034: IFFALSE 17078
// begin Defaited = replace ( Defaited , i , true ) ;
17036: LD_ADDR_LOC 27
17040: PUSH
17041: LD_LOC 27
17045: PPUSH
17046: LD_VAR 0 1
17050: PPUSH
17051: LD_INT 1
17053: PPUSH
17054: CALL_OW 1
17058: ST_TO_ADDR
// if i = your_side then
17059: LD_VAR 0 1
17063: PUSH
17064: LD_OWVAR 2
17068: EQUAL
17069: IFFALSE 17078
// begin Multiplayer_Loose_Message ;
17071: CALL_OW 521
// enable ( 400 ) ;
17075: LD_INT 400
17077: ENABLE_MARKED
// end ; end ;
17078: GO 16996
17080: POP
17081: POP
// if not Unfoged and defaited [ your_side ] then
17082: LD_LOC 29
17086: NOT
17087: PUSH
17088: LD_LOC 27
17092: PUSH
17093: LD_OWVAR 2
17097: ARRAY
17098: AND
17099: IFFALSE 17105
// Unfog ;
17101: CALL 17281 0 0
// DidGameEnd ;
17105: CALL 17120 0 0
// if not GameEnded then
17109: LD_LOC 28
17113: NOT
17114: IFFALSE 17117
// enable ;
17116: ENABLE
// end ;
17117: PPOPN 2
17119: END
// function DidGameEnd ; var i , k , enemy ; begin
17120: LD_INT 0
17122: PPUSH
17123: PPUSH
17124: PPUSH
17125: PPUSH
// enemy = [ ] ;
17126: LD_ADDR_VAR 0 4
17130: PUSH
17131: EMPTY
17132: ST_TO_ADDR
// for i = 1 to side_positions do
17133: LD_ADDR_VAR 0 2
17137: PUSH
17138: DOUBLE
17139: LD_INT 1
17141: DEC
17142: ST_TO_ADDR
17143: LD_EXP 43
17147: PUSH
17148: FOR_TO
17149: IFFALSE 17243
// if not defaited [ i ] then
17151: LD_LOC 27
17155: PUSH
17156: LD_VAR 0 2
17160: ARRAY
17161: NOT
17162: IFFALSE 17241
// for k = 1 to side_positions do
17164: LD_ADDR_VAR 0 3
17168: PUSH
17169: DOUBLE
17170: LD_INT 1
17172: DEC
17173: ST_TO_ADDR
17174: LD_EXP 43
17178: PUSH
17179: FOR_TO
17180: IFFALSE 17239
// if not defaited [ k ] then
17182: LD_LOC 27
17186: PUSH
17187: LD_VAR 0 3
17191: ARRAY
17192: NOT
17193: IFFALSE 17237
// if not AlliedSides ( i , k ) then
17195: LD_VAR 0 2
17199: PPUSH
17200: LD_VAR 0 3
17204: PPUSH
17205: CALL 16665 0 2
17209: NOT
17210: IFFALSE 17237
// enemy = enemy ^ [ i , k ] ;
17212: LD_ADDR_VAR 0 4
17216: PUSH
17217: LD_VAR 0 4
17221: PUSH
17222: LD_VAR 0 2
17226: PUSH
17227: LD_VAR 0 3
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: ADD
17236: ST_TO_ADDR
17237: GO 17179
17239: POP
17240: POP
17241: GO 17148
17243: POP
17244: POP
// if not enemy then
17245: LD_VAR 0 4
17249: NOT
17250: IFFALSE 17276
// begin GameEnded = true ;
17252: LD_ADDR_LOC 28
17256: PUSH
17257: LD_INT 1
17259: ST_TO_ADDR
// if not defaited [ your_side ] then
17260: LD_LOC 27
17264: PUSH
17265: LD_OWVAR 2
17269: ARRAY
17270: NOT
17271: IFFALSE 17276
// enable ( 401 ) ;
17273: LD_INT 401
17275: ENABLE_MARKED
// end ; end ;
17276: LD_VAR 0 1
17280: RET
// function unfog ; var k , friends ; begin
17281: LD_INT 0
17283: PPUSH
17284: PPUSH
17285: PPUSH
// SetPlayerSpectator ( ) ;
17286: CALL_OW 572
// unfoged = true ;
17290: LD_ADDR_LOC 29
17294: PUSH
17295: LD_INT 1
17297: ST_TO_ADDR
// end ;
17298: LD_VAR 0 1
17302: RET
// export function MakeGameEnd ; begin
17303: LD_INT 0
17305: PPUSH
// SetPlayerSpectator ( ) ;
17306: CALL_OW 572
// unfoged = true ;
17310: LD_ADDR_LOC 29
17314: PUSH
17315: LD_INT 1
17317: ST_TO_ADDR
// wait ( 0 0$5 ) ;
17318: LD_INT 175
17320: PPUSH
17321: CALL_OW 67
// GameEnded = true ;
17325: LD_ADDR_LOC 28
17329: PUSH
17330: LD_INT 1
17332: ST_TO_ADDR
// end ;
17333: LD_VAR 0 1
17337: RET
// export function GetGameEnded ; begin
17338: LD_INT 0
17340: PPUSH
// result = GameEnded ;
17341: LD_ADDR_VAR 0 1
17345: PUSH
17346: LD_LOC 28
17350: ST_TO_ADDR
// end ; end_of_file
17351: LD_VAR 0 1
17355: RET
// export function SetMpTechs ( ) ; var side , i ; begin
17356: LD_INT 0
17358: PPUSH
17359: PPUSH
17360: PPUSH
// for side = 1 to 8 do
17361: LD_ADDR_VAR 0 2
17365: PUSH
17366: DOUBLE
17367: LD_INT 1
17369: DEC
17370: ST_TO_ADDR
17371: LD_INT 8
17373: PUSH
17374: FOR_TO
17375: IFFALSE 17496
// begin for i = 1 to 72 do
17377: LD_ADDR_VAR 0 3
17381: PUSH
17382: DOUBLE
17383: LD_INT 1
17385: DEC
17386: ST_TO_ADDR
17387: LD_INT 72
17389: PUSH
17390: FOR_TO
17391: IFFALSE 17422
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
17393: LD_VAR 0 3
17397: PPUSH
17398: LD_VAR 0 2
17402: PPUSH
17403: LD_INT 0
17405: PPUSH
17406: LD_VAR 0 3
17410: PPUSH
17411: CALL_OW 565
17415: PPUSH
17416: CALL_OW 322
17420: GO 17390
17422: POP
17423: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
17424: LD_INT 73
17426: PPUSH
17427: LD_VAR 0 2
17431: PPUSH
17432: LD_INT 0
17434: PPUSH
17435: LD_INT 25
17437: PPUSH
17438: CALL_OW 565
17442: PPUSH
17443: CALL_OW 322
// for i = 0 to 40 do
17447: LD_ADDR_VAR 0 3
17451: PUSH
17452: DOUBLE
17453: LD_INT 0
17455: DEC
17456: ST_TO_ADDR
17457: LD_INT 40
17459: PUSH
17460: FOR_TO
17461: IFFALSE 17492
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
17463: LD_VAR 0 3
17467: PPUSH
17468: LD_VAR 0 2
17472: PPUSH
17473: LD_INT 1
17475: PPUSH
17476: LD_VAR 0 3
17480: PPUSH
17481: CALL_OW 565
17485: PPUSH
17486: CALL_OW 324
17490: GO 17460
17492: POP
17493: POP
// end ;
17494: GO 17374
17496: POP
17497: POP
// end ;
17498: LD_VAR 0 1
17502: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
17503: LD_INT 0
17505: PPUSH
17506: PPUSH
17507: PPUSH
// for side = 1 to 8 do
17508: LD_ADDR_VAR 0 3
17512: PUSH
17513: DOUBLE
17514: LD_INT 1
17516: DEC
17517: ST_TO_ADDR
17518: LD_INT 8
17520: PUSH
17521: FOR_TO
17522: IFFALSE 21518
// begin for i = 1 to 73 do
17524: LD_ADDR_VAR 0 4
17528: PUSH
17529: DOUBLE
17530: LD_INT 1
17532: DEC
17533: ST_TO_ADDR
17534: LD_INT 73
17536: PUSH
17537: FOR_TO
17538: IFFALSE 17559
// SetTech ( i , side , state_disabled ) ;
17540: LD_VAR 0 4
17544: PPUSH
17545: LD_VAR 0 3
17549: PPUSH
17550: LD_INT 0
17552: PPUSH
17553: CALL_OW 322
17557: GO 17537
17559: POP
17560: POP
// for i = 0 to 40 do
17561: LD_ADDR_VAR 0 4
17565: PUSH
17566: DOUBLE
17567: LD_INT 0
17569: DEC
17570: ST_TO_ADDR
17571: LD_INT 40
17573: PUSH
17574: FOR_TO
17575: IFFALSE 17596
// SetRestrict ( i , side , false ) ;
17577: LD_VAR 0 4
17581: PPUSH
17582: LD_VAR 0 3
17586: PPUSH
17587: LD_INT 0
17589: PPUSH
17590: CALL_OW 324
17594: GO 17574
17596: POP
17597: POP
// case level of 1 :
17598: LD_VAR 0 1
17602: PUSH
17603: LD_INT 1
17605: DOUBLE
17606: EQUAL
17607: IFTRUE 17611
17609: GO 17764
17611: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17612: LD_INT 35
17614: PPUSH
17615: LD_VAR 0 3
17619: PPUSH
17620: LD_INT 1
17622: PPUSH
17623: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17627: LD_INT 45
17629: PPUSH
17630: LD_VAR 0 3
17634: PPUSH
17635: LD_INT 1
17637: PPUSH
17638: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17642: LD_INT 46
17644: PPUSH
17645: LD_VAR 0 3
17649: PPUSH
17650: LD_INT 1
17652: PPUSH
17653: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17657: LD_INT 47
17659: PPUSH
17660: LD_VAR 0 3
17664: PPUSH
17665: LD_INT 1
17667: PPUSH
17668: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17672: LD_INT 0
17674: PPUSH
17675: LD_VAR 0 3
17679: PPUSH
17680: LD_INT 1
17682: PPUSH
17683: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17687: LD_INT 2
17689: PPUSH
17690: LD_VAR 0 3
17694: PPUSH
17695: LD_INT 1
17697: PPUSH
17698: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17702: LD_INT 4
17704: PPUSH
17705: LD_VAR 0 3
17709: PPUSH
17710: LD_INT 1
17712: PPUSH
17713: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17717: LD_INT 6
17719: PPUSH
17720: LD_VAR 0 3
17724: PPUSH
17725: LD_INT 1
17727: PPUSH
17728: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17732: LD_INT 29
17734: PPUSH
17735: LD_VAR 0 3
17739: PPUSH
17740: LD_INT 1
17742: PPUSH
17743: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17747: LD_INT 31
17749: PPUSH
17750: LD_VAR 0 3
17754: PPUSH
17755: LD_INT 1
17757: PPUSH
17758: CALL_OW 324
// end ; 2 :
17762: GO 21516
17764: LD_INT 2
17766: DOUBLE
17767: EQUAL
17768: IFTRUE 17772
17770: GO 17970
17772: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17773: LD_INT 35
17775: PPUSH
17776: LD_VAR 0 3
17780: PPUSH
17781: LD_INT 1
17783: PPUSH
17784: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17788: LD_INT 45
17790: PPUSH
17791: LD_VAR 0 3
17795: PPUSH
17796: LD_INT 1
17798: PPUSH
17799: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17803: LD_INT 46
17805: PPUSH
17806: LD_VAR 0 3
17810: PPUSH
17811: LD_INT 1
17813: PPUSH
17814: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17818: LD_INT 47
17820: PPUSH
17821: LD_VAR 0 3
17825: PPUSH
17826: LD_INT 1
17828: PPUSH
17829: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17833: LD_INT 1
17835: PPUSH
17836: LD_VAR 0 3
17840: PPUSH
17841: LD_INT 1
17843: PPUSH
17844: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17848: LD_INT 2
17850: PPUSH
17851: LD_VAR 0 3
17855: PPUSH
17856: LD_INT 1
17858: PPUSH
17859: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17863: LD_INT 11
17865: PPUSH
17866: LD_VAR 0 3
17870: PPUSH
17871: LD_INT 1
17873: PPUSH
17874: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17878: LD_INT 0
17880: PPUSH
17881: LD_VAR 0 3
17885: PPUSH
17886: LD_INT 1
17888: PPUSH
17889: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17893: LD_INT 2
17895: PPUSH
17896: LD_VAR 0 3
17900: PPUSH
17901: LD_INT 1
17903: PPUSH
17904: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17908: LD_INT 4
17910: PPUSH
17911: LD_VAR 0 3
17915: PPUSH
17916: LD_INT 1
17918: PPUSH
17919: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17923: LD_INT 6
17925: PPUSH
17926: LD_VAR 0 3
17930: PPUSH
17931: LD_INT 1
17933: PPUSH
17934: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17938: LD_INT 29
17940: PPUSH
17941: LD_VAR 0 3
17945: PPUSH
17946: LD_INT 1
17948: PPUSH
17949: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17953: LD_INT 31
17955: PPUSH
17956: LD_VAR 0 3
17960: PPUSH
17961: LD_INT 1
17963: PPUSH
17964: CALL_OW 324
// end ; 3 :
17968: GO 21516
17970: LD_INT 3
17972: DOUBLE
17973: EQUAL
17974: IFTRUE 17978
17976: GO 18431
17978: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17979: LD_INT 35
17981: PPUSH
17982: LD_VAR 0 3
17986: PPUSH
17987: LD_INT 1
17989: PPUSH
17990: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17994: LD_INT 45
17996: PPUSH
17997: LD_VAR 0 3
18001: PPUSH
18002: LD_INT 1
18004: PPUSH
18005: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18009: LD_INT 46
18011: PPUSH
18012: LD_VAR 0 3
18016: PPUSH
18017: LD_INT 1
18019: PPUSH
18020: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18024: LD_INT 47
18026: PPUSH
18027: LD_VAR 0 3
18031: PPUSH
18032: LD_INT 1
18034: PPUSH
18035: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18039: LD_INT 1
18041: PPUSH
18042: LD_VAR 0 3
18046: PPUSH
18047: LD_INT 1
18049: PPUSH
18050: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18054: LD_INT 2
18056: PPUSH
18057: LD_VAR 0 3
18061: PPUSH
18062: LD_INT 1
18064: PPUSH
18065: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18069: LD_INT 11
18071: PPUSH
18072: LD_VAR 0 3
18076: PPUSH
18077: LD_INT 1
18079: PPUSH
18080: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18084: LD_INT 48
18086: PPUSH
18087: LD_VAR 0 3
18091: PPUSH
18092: LD_INT 1
18094: PPUSH
18095: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18099: LD_INT 69
18101: PPUSH
18102: LD_VAR 0 3
18106: PPUSH
18107: LD_INT 1
18109: PPUSH
18110: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18114: LD_INT 39
18116: PPUSH
18117: LD_VAR 0 3
18121: PPUSH
18122: LD_INT 1
18124: PPUSH
18125: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18129: LD_INT 43
18131: PPUSH
18132: LD_VAR 0 3
18136: PPUSH
18137: LD_INT 1
18139: PPUSH
18140: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18144: LD_INT 51
18146: PPUSH
18147: LD_VAR 0 3
18151: PPUSH
18152: LD_INT 1
18154: PPUSH
18155: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18159: LD_INT 6
18161: PPUSH
18162: LD_VAR 0 3
18166: PPUSH
18167: LD_INT 1
18169: PPUSH
18170: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18174: LD_INT 0
18176: PPUSH
18177: LD_VAR 0 3
18181: PPUSH
18182: LD_INT 1
18184: PPUSH
18185: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18189: LD_INT 2
18191: PPUSH
18192: LD_VAR 0 3
18196: PPUSH
18197: LD_INT 1
18199: PPUSH
18200: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18204: LD_INT 3
18206: PPUSH
18207: LD_VAR 0 3
18211: PPUSH
18212: LD_INT 1
18214: PPUSH
18215: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18219: LD_INT 4
18221: PPUSH
18222: LD_VAR 0 3
18226: PPUSH
18227: LD_INT 1
18229: PPUSH
18230: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18234: LD_INT 6
18236: PPUSH
18237: LD_VAR 0 3
18241: PPUSH
18242: LD_INT 1
18244: PPUSH
18245: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18249: LD_INT 7
18251: PPUSH
18252: LD_VAR 0 3
18256: PPUSH
18257: LD_INT 1
18259: PPUSH
18260: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18264: LD_INT 8
18266: PPUSH
18267: LD_VAR 0 3
18271: PPUSH
18272: LD_INT 1
18274: PPUSH
18275: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18279: LD_INT 10
18281: PPUSH
18282: LD_VAR 0 3
18286: PPUSH
18287: LD_INT 1
18289: PPUSH
18290: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18294: LD_INT 15
18296: PPUSH
18297: LD_VAR 0 3
18301: PPUSH
18302: LD_INT 1
18304: PPUSH
18305: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18309: LD_INT 16
18311: PPUSH
18312: LD_VAR 0 3
18316: PPUSH
18317: LD_INT 1
18319: PPUSH
18320: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18324: LD_INT 17
18326: PPUSH
18327: LD_VAR 0 3
18331: PPUSH
18332: LD_INT 1
18334: PPUSH
18335: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18339: LD_INT 20
18341: PPUSH
18342: LD_VAR 0 3
18346: PPUSH
18347: LD_INT 1
18349: PPUSH
18350: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18354: LD_INT 26
18356: PPUSH
18357: LD_VAR 0 3
18361: PPUSH
18362: LD_INT 1
18364: PPUSH
18365: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18369: LD_INT 27
18371: PPUSH
18372: LD_VAR 0 3
18376: PPUSH
18377: LD_INT 1
18379: PPUSH
18380: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18384: LD_INT 29
18386: PPUSH
18387: LD_VAR 0 3
18391: PPUSH
18392: LD_INT 1
18394: PPUSH
18395: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18399: LD_INT 31
18401: PPUSH
18402: LD_VAR 0 3
18406: PPUSH
18407: LD_INT 1
18409: PPUSH
18410: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18414: LD_INT 32
18416: PPUSH
18417: LD_VAR 0 3
18421: PPUSH
18422: LD_INT 1
18424: PPUSH
18425: CALL_OW 324
// end ; 4 :
18429: GO 21516
18431: LD_INT 4
18433: DOUBLE
18434: EQUAL
18435: IFTRUE 18439
18437: GO 19387
18439: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18440: LD_INT 35
18442: PPUSH
18443: LD_VAR 0 3
18447: PPUSH
18448: LD_INT 1
18450: PPUSH
18451: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18455: LD_INT 45
18457: PPUSH
18458: LD_VAR 0 3
18462: PPUSH
18463: LD_INT 1
18465: PPUSH
18466: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18470: LD_INT 46
18472: PPUSH
18473: LD_VAR 0 3
18477: PPUSH
18478: LD_INT 1
18480: PPUSH
18481: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18485: LD_INT 47
18487: PPUSH
18488: LD_VAR 0 3
18492: PPUSH
18493: LD_INT 1
18495: PPUSH
18496: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18500: LD_INT 1
18502: PPUSH
18503: LD_VAR 0 3
18507: PPUSH
18508: LD_INT 1
18510: PPUSH
18511: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18515: LD_INT 2
18517: PPUSH
18518: LD_VAR 0 3
18522: PPUSH
18523: LD_INT 1
18525: PPUSH
18526: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18530: LD_INT 11
18532: PPUSH
18533: LD_VAR 0 3
18537: PPUSH
18538: LD_INT 1
18540: PPUSH
18541: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18545: LD_INT 20
18547: PPUSH
18548: LD_VAR 0 3
18552: PPUSH
18553: LD_INT 1
18555: PPUSH
18556: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18560: LD_INT 48
18562: PPUSH
18563: LD_VAR 0 3
18567: PPUSH
18568: LD_INT 1
18570: PPUSH
18571: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18575: LD_INT 49
18577: PPUSH
18578: LD_VAR 0 3
18582: PPUSH
18583: LD_INT 1
18585: PPUSH
18586: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18590: LD_INT 69
18592: PPUSH
18593: LD_VAR 0 3
18597: PPUSH
18598: LD_INT 1
18600: PPUSH
18601: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18605: LD_INT 39
18607: PPUSH
18608: LD_VAR 0 3
18612: PPUSH
18613: LD_INT 1
18615: PPUSH
18616: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18620: LD_INT 34
18622: PPUSH
18623: LD_VAR 0 3
18627: PPUSH
18628: LD_INT 1
18630: PPUSH
18631: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18635: LD_INT 42
18637: PPUSH
18638: LD_VAR 0 3
18642: PPUSH
18643: LD_INT 1
18645: PPUSH
18646: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18650: LD_INT 44
18652: PPUSH
18653: LD_VAR 0 3
18657: PPUSH
18658: LD_INT 1
18660: PPUSH
18661: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18665: LD_INT 41
18667: PPUSH
18668: LD_VAR 0 3
18672: PPUSH
18673: LD_INT 1
18675: PPUSH
18676: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18680: LD_INT 43
18682: PPUSH
18683: LD_VAR 0 3
18687: PPUSH
18688: LD_INT 1
18690: PPUSH
18691: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18695: LD_INT 70
18697: PPUSH
18698: LD_VAR 0 3
18702: PPUSH
18703: LD_INT 1
18705: PPUSH
18706: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18710: LD_INT 51
18712: PPUSH
18713: LD_VAR 0 3
18717: PPUSH
18718: LD_INT 1
18720: PPUSH
18721: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18725: LD_INT 52
18727: PPUSH
18728: LD_VAR 0 3
18732: PPUSH
18733: LD_INT 1
18735: PPUSH
18736: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18740: LD_INT 6
18742: PPUSH
18743: LD_VAR 0 3
18747: PPUSH
18748: LD_INT 1
18750: PPUSH
18751: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18755: LD_INT 15
18757: PPUSH
18758: LD_VAR 0 3
18762: PPUSH
18763: LD_INT 1
18765: PPUSH
18766: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18770: LD_INT 7
18772: PPUSH
18773: LD_VAR 0 3
18777: PPUSH
18778: LD_INT 1
18780: PPUSH
18781: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18785: LD_INT 12
18787: PPUSH
18788: LD_VAR 0 3
18792: PPUSH
18793: LD_INT 1
18795: PPUSH
18796: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18800: LD_INT 18
18802: PPUSH
18803: LD_VAR 0 3
18807: PPUSH
18808: LD_INT 1
18810: PPUSH
18811: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18815: LD_INT 60
18817: PPUSH
18818: LD_VAR 0 3
18822: PPUSH
18823: LD_INT 1
18825: PPUSH
18826: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18830: LD_INT 9
18832: PPUSH
18833: LD_VAR 0 3
18837: PPUSH
18838: LD_INT 1
18840: PPUSH
18841: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18845: LD_INT 30
18847: PPUSH
18848: LD_VAR 0 3
18852: PPUSH
18853: LD_INT 1
18855: PPUSH
18856: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18860: LD_INT 37
18862: PPUSH
18863: LD_VAR 0 3
18867: PPUSH
18868: LD_INT 1
18870: PPUSH
18871: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18875: LD_INT 5
18877: PPUSH
18878: LD_VAR 0 3
18882: PPUSH
18883: LD_INT 1
18885: PPUSH
18886: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18890: LD_INT 66
18892: PPUSH
18893: LD_VAR 0 3
18897: PPUSH
18898: LD_INT 1
18900: PPUSH
18901: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18905: LD_INT 21
18907: PPUSH
18908: LD_VAR 0 3
18912: PPUSH
18913: LD_INT 1
18915: PPUSH
18916: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18920: LD_INT 22
18922: PPUSH
18923: LD_VAR 0 3
18927: PPUSH
18928: LD_INT 1
18930: PPUSH
18931: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18935: LD_INT 54
18937: PPUSH
18938: LD_VAR 0 3
18942: PPUSH
18943: LD_INT 1
18945: PPUSH
18946: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18950: LD_INT 0
18952: PPUSH
18953: LD_VAR 0 3
18957: PPUSH
18958: LD_INT 1
18960: PPUSH
18961: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18965: LD_INT 1
18967: PPUSH
18968: LD_VAR 0 3
18972: PPUSH
18973: LD_INT 1
18975: PPUSH
18976: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18980: LD_INT 2
18982: PPUSH
18983: LD_VAR 0 3
18987: PPUSH
18988: LD_INT 1
18990: PPUSH
18991: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18995: LD_INT 3
18997: PPUSH
18998: LD_VAR 0 3
19002: PPUSH
19003: LD_INT 1
19005: PPUSH
19006: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19010: LD_INT 4
19012: PPUSH
19013: LD_VAR 0 3
19017: PPUSH
19018: LD_INT 1
19020: PPUSH
19021: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
19025: LD_INT 5
19027: PPUSH
19028: LD_VAR 0 3
19032: PPUSH
19033: LD_INT 1
19035: PPUSH
19036: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19040: LD_INT 6
19042: PPUSH
19043: LD_VAR 0 3
19047: PPUSH
19048: LD_INT 1
19050: PPUSH
19051: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
19055: LD_INT 7
19057: PPUSH
19058: LD_VAR 0 3
19062: PPUSH
19063: LD_INT 1
19065: PPUSH
19066: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
19070: LD_INT 8
19072: PPUSH
19073: LD_VAR 0 3
19077: PPUSH
19078: LD_INT 1
19080: PPUSH
19081: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
19085: LD_INT 10
19087: PPUSH
19088: LD_VAR 0 3
19092: PPUSH
19093: LD_INT 1
19095: PPUSH
19096: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
19100: LD_INT 11
19102: PPUSH
19103: LD_VAR 0 3
19107: PPUSH
19108: LD_INT 1
19110: PPUSH
19111: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
19115: LD_INT 12
19117: PPUSH
19118: LD_VAR 0 3
19122: PPUSH
19123: LD_INT 1
19125: PPUSH
19126: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
19130: LD_INT 13
19132: PPUSH
19133: LD_VAR 0 3
19137: PPUSH
19138: LD_INT 1
19140: PPUSH
19141: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
19145: LD_INT 14
19147: PPUSH
19148: LD_VAR 0 3
19152: PPUSH
19153: LD_INT 1
19155: PPUSH
19156: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
19160: LD_INT 15
19162: PPUSH
19163: LD_VAR 0 3
19167: PPUSH
19168: LD_INT 1
19170: PPUSH
19171: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
19175: LD_INT 16
19177: PPUSH
19178: LD_VAR 0 3
19182: PPUSH
19183: LD_INT 1
19185: PPUSH
19186: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
19190: LD_INT 17
19192: PPUSH
19193: LD_VAR 0 3
19197: PPUSH
19198: LD_INT 1
19200: PPUSH
19201: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
19205: LD_INT 19
19207: PPUSH
19208: LD_VAR 0 3
19212: PPUSH
19213: LD_INT 1
19215: PPUSH
19216: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
19220: LD_INT 20
19222: PPUSH
19223: LD_VAR 0 3
19227: PPUSH
19228: LD_INT 1
19230: PPUSH
19231: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
19235: LD_INT 21
19237: PPUSH
19238: LD_VAR 0 3
19242: PPUSH
19243: LD_INT 1
19245: PPUSH
19246: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
19250: LD_INT 23
19252: PPUSH
19253: LD_VAR 0 3
19257: PPUSH
19258: LD_INT 1
19260: PPUSH
19261: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
19265: LD_INT 26
19267: PPUSH
19268: LD_VAR 0 3
19272: PPUSH
19273: LD_INT 1
19275: PPUSH
19276: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
19280: LD_INT 27
19282: PPUSH
19283: LD_VAR 0 3
19287: PPUSH
19288: LD_INT 1
19290: PPUSH
19291: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
19295: LD_INT 28
19297: PPUSH
19298: LD_VAR 0 3
19302: PPUSH
19303: LD_INT 1
19305: PPUSH
19306: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19310: LD_INT 29
19312: PPUSH
19313: LD_VAR 0 3
19317: PPUSH
19318: LD_INT 1
19320: PPUSH
19321: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
19325: LD_INT 30
19327: PPUSH
19328: LD_VAR 0 3
19332: PPUSH
19333: LD_INT 1
19335: PPUSH
19336: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19340: LD_INT 31
19342: PPUSH
19343: LD_VAR 0 3
19347: PPUSH
19348: LD_INT 1
19350: PPUSH
19351: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
19355: LD_INT 32
19357: PPUSH
19358: LD_VAR 0 3
19362: PPUSH
19363: LD_INT 1
19365: PPUSH
19366: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
19370: LD_INT 36
19372: PPUSH
19373: LD_VAR 0 3
19377: PPUSH
19378: LD_INT 1
19380: PPUSH
19381: CALL_OW 324
// end ; 5 :
19385: GO 21516
19387: LD_INT 5
19389: DOUBLE
19390: EQUAL
19391: IFTRUE 19395
19393: GO 20508
19395: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19396: LD_INT 35
19398: PPUSH
19399: LD_VAR 0 3
19403: PPUSH
19404: LD_INT 1
19406: PPUSH
19407: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19411: LD_INT 45
19413: PPUSH
19414: LD_VAR 0 3
19418: PPUSH
19419: LD_INT 1
19421: PPUSH
19422: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19426: LD_INT 46
19428: PPUSH
19429: LD_VAR 0 3
19433: PPUSH
19434: LD_INT 1
19436: PPUSH
19437: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19441: LD_INT 47
19443: PPUSH
19444: LD_VAR 0 3
19448: PPUSH
19449: LD_INT 1
19451: PPUSH
19452: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19456: LD_INT 1
19458: PPUSH
19459: LD_VAR 0 3
19463: PPUSH
19464: LD_INT 1
19466: PPUSH
19467: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19471: LD_INT 2
19473: PPUSH
19474: LD_VAR 0 3
19478: PPUSH
19479: LD_INT 1
19481: PPUSH
19482: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19486: LD_INT 11
19488: PPUSH
19489: LD_VAR 0 3
19493: PPUSH
19494: LD_INT 1
19496: PPUSH
19497: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
19501: LD_INT 20
19503: PPUSH
19504: LD_VAR 0 3
19508: PPUSH
19509: LD_INT 1
19511: PPUSH
19512: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
19516: LD_INT 48
19518: PPUSH
19519: LD_VAR 0 3
19523: PPUSH
19524: LD_INT 1
19526: PPUSH
19527: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
19531: LD_INT 49
19533: PPUSH
19534: LD_VAR 0 3
19538: PPUSH
19539: LD_INT 1
19541: PPUSH
19542: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
19546: LD_INT 69
19548: PPUSH
19549: LD_VAR 0 3
19553: PPUSH
19554: LD_INT 1
19556: PPUSH
19557: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
19561: LD_INT 39
19563: PPUSH
19564: LD_VAR 0 3
19568: PPUSH
19569: LD_INT 1
19571: PPUSH
19572: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
19576: LD_INT 34
19578: PPUSH
19579: LD_VAR 0 3
19583: PPUSH
19584: LD_INT 1
19586: PPUSH
19587: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
19591: LD_INT 42
19593: PPUSH
19594: LD_VAR 0 3
19598: PPUSH
19599: LD_INT 1
19601: PPUSH
19602: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
19606: LD_INT 44
19608: PPUSH
19609: LD_VAR 0 3
19613: PPUSH
19614: LD_INT 1
19616: PPUSH
19617: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
19621: LD_INT 41
19623: PPUSH
19624: LD_VAR 0 3
19628: PPUSH
19629: LD_INT 1
19631: PPUSH
19632: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
19636: LD_INT 40
19638: PPUSH
19639: LD_VAR 0 3
19643: PPUSH
19644: LD_INT 1
19646: PPUSH
19647: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
19651: LD_INT 43
19653: PPUSH
19654: LD_VAR 0 3
19658: PPUSH
19659: LD_INT 1
19661: PPUSH
19662: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
19666: LD_INT 70
19668: PPUSH
19669: LD_VAR 0 3
19673: PPUSH
19674: LD_INT 1
19676: PPUSH
19677: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
19681: LD_INT 51
19683: PPUSH
19684: LD_VAR 0 3
19688: PPUSH
19689: LD_INT 1
19691: PPUSH
19692: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19696: LD_INT 52
19698: PPUSH
19699: LD_VAR 0 3
19703: PPUSH
19704: LD_INT 1
19706: PPUSH
19707: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19711: LD_INT 6
19713: PPUSH
19714: LD_VAR 0 3
19718: PPUSH
19719: LD_INT 1
19721: PPUSH
19722: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19726: LD_INT 15
19728: PPUSH
19729: LD_VAR 0 3
19733: PPUSH
19734: LD_INT 1
19736: PPUSH
19737: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19741: LD_INT 7
19743: PPUSH
19744: LD_VAR 0 3
19748: PPUSH
19749: LD_INT 1
19751: PPUSH
19752: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19756: LD_INT 12
19758: PPUSH
19759: LD_VAR 0 3
19763: PPUSH
19764: LD_INT 1
19766: PPUSH
19767: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19771: LD_INT 17
19773: PPUSH
19774: LD_VAR 0 3
19778: PPUSH
19779: LD_INT 1
19781: PPUSH
19782: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19786: LD_INT 18
19788: PPUSH
19789: LD_VAR 0 3
19793: PPUSH
19794: LD_INT 1
19796: PPUSH
19797: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19801: LD_INT 60
19803: PPUSH
19804: LD_VAR 0 3
19808: PPUSH
19809: LD_INT 1
19811: PPUSH
19812: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19816: LD_INT 32
19818: PPUSH
19819: LD_VAR 0 3
19823: PPUSH
19824: LD_INT 1
19826: PPUSH
19827: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19831: LD_INT 9
19833: PPUSH
19834: LD_VAR 0 3
19838: PPUSH
19839: LD_INT 1
19841: PPUSH
19842: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19846: LD_INT 57
19848: PPUSH
19849: LD_VAR 0 3
19853: PPUSH
19854: LD_INT 1
19856: PPUSH
19857: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19861: LD_INT 30
19863: PPUSH
19864: LD_VAR 0 3
19868: PPUSH
19869: LD_INT 1
19871: PPUSH
19872: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19876: LD_INT 37
19878: PPUSH
19879: LD_VAR 0 3
19883: PPUSH
19884: LD_INT 1
19886: PPUSH
19887: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19891: LD_INT 63
19893: PPUSH
19894: LD_VAR 0 3
19898: PPUSH
19899: LD_INT 1
19901: PPUSH
19902: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19906: LD_INT 3
19908: PPUSH
19909: LD_VAR 0 3
19913: PPUSH
19914: LD_INT 1
19916: PPUSH
19917: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19921: LD_INT 4
19923: PPUSH
19924: LD_VAR 0 3
19928: PPUSH
19929: LD_INT 1
19931: PPUSH
19932: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19936: LD_INT 5
19938: PPUSH
19939: LD_VAR 0 3
19943: PPUSH
19944: LD_INT 1
19946: PPUSH
19947: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19951: LD_INT 66
19953: PPUSH
19954: LD_VAR 0 3
19958: PPUSH
19959: LD_INT 1
19961: PPUSH
19962: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19966: LD_INT 21
19968: PPUSH
19969: LD_VAR 0 3
19973: PPUSH
19974: LD_INT 1
19976: PPUSH
19977: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19981: LD_INT 22
19983: PPUSH
19984: LD_VAR 0 3
19988: PPUSH
19989: LD_INT 1
19991: PPUSH
19992: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19996: LD_INT 19
19998: PPUSH
19999: LD_VAR 0 3
20003: PPUSH
20004: LD_INT 1
20006: PPUSH
20007: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20011: LD_INT 54
20013: PPUSH
20014: LD_VAR 0 3
20018: PPUSH
20019: LD_INT 1
20021: PPUSH
20022: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
20026: LD_INT 55
20028: PPUSH
20029: LD_VAR 0 3
20033: PPUSH
20034: LD_INT 1
20036: PPUSH
20037: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20041: LD_INT 0
20043: PPUSH
20044: LD_VAR 0 3
20048: PPUSH
20049: LD_INT 1
20051: PPUSH
20052: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
20056: LD_INT 1
20058: PPUSH
20059: LD_VAR 0 3
20063: PPUSH
20064: LD_INT 1
20066: PPUSH
20067: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20071: LD_INT 2
20073: PPUSH
20074: LD_VAR 0 3
20078: PPUSH
20079: LD_INT 1
20081: PPUSH
20082: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
20086: LD_INT 3
20088: PPUSH
20089: LD_VAR 0 3
20093: PPUSH
20094: LD_INT 1
20096: PPUSH
20097: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
20101: LD_INT 4
20103: PPUSH
20104: LD_VAR 0 3
20108: PPUSH
20109: LD_INT 1
20111: PPUSH
20112: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
20116: LD_INT 5
20118: PPUSH
20119: LD_VAR 0 3
20123: PPUSH
20124: LD_INT 1
20126: PPUSH
20127: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
20131: LD_INT 6
20133: PPUSH
20134: LD_VAR 0 3
20138: PPUSH
20139: LD_INT 1
20141: PPUSH
20142: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
20146: LD_INT 7
20148: PPUSH
20149: LD_VAR 0 3
20153: PPUSH
20154: LD_INT 1
20156: PPUSH
20157: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
20161: LD_INT 8
20163: PPUSH
20164: LD_VAR 0 3
20168: PPUSH
20169: LD_INT 1
20171: PPUSH
20172: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
20176: LD_INT 10
20178: PPUSH
20179: LD_VAR 0 3
20183: PPUSH
20184: LD_INT 1
20186: PPUSH
20187: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
20191: LD_INT 11
20193: PPUSH
20194: LD_VAR 0 3
20198: PPUSH
20199: LD_INT 1
20201: PPUSH
20202: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
20206: LD_INT 12
20208: PPUSH
20209: LD_VAR 0 3
20213: PPUSH
20214: LD_INT 1
20216: PPUSH
20217: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
20221: LD_INT 13
20223: PPUSH
20224: LD_VAR 0 3
20228: PPUSH
20229: LD_INT 1
20231: PPUSH
20232: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
20236: LD_INT 14
20238: PPUSH
20239: LD_VAR 0 3
20243: PPUSH
20244: LD_INT 1
20246: PPUSH
20247: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
20251: LD_INT 15
20253: PPUSH
20254: LD_VAR 0 3
20258: PPUSH
20259: LD_INT 1
20261: PPUSH
20262: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
20266: LD_INT 16
20268: PPUSH
20269: LD_VAR 0 3
20273: PPUSH
20274: LD_INT 1
20276: PPUSH
20277: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
20281: LD_INT 17
20283: PPUSH
20284: LD_VAR 0 3
20288: PPUSH
20289: LD_INT 1
20291: PPUSH
20292: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
20296: LD_INT 18
20298: PPUSH
20299: LD_VAR 0 3
20303: PPUSH
20304: LD_INT 1
20306: PPUSH
20307: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
20311: LD_INT 19
20313: PPUSH
20314: LD_VAR 0 3
20318: PPUSH
20319: LD_INT 1
20321: PPUSH
20322: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
20326: LD_INT 20
20328: PPUSH
20329: LD_VAR 0 3
20333: PPUSH
20334: LD_INT 1
20336: PPUSH
20337: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
20341: LD_INT 21
20343: PPUSH
20344: LD_VAR 0 3
20348: PPUSH
20349: LD_INT 1
20351: PPUSH
20352: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
20356: LD_INT 23
20358: PPUSH
20359: LD_VAR 0 3
20363: PPUSH
20364: LD_INT 1
20366: PPUSH
20367: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
20371: LD_INT 26
20373: PPUSH
20374: LD_VAR 0 3
20378: PPUSH
20379: LD_INT 1
20381: PPUSH
20382: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
20386: LD_INT 27
20388: PPUSH
20389: LD_VAR 0 3
20393: PPUSH
20394: LD_INT 1
20396: PPUSH
20397: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
20401: LD_INT 28
20403: PPUSH
20404: LD_VAR 0 3
20408: PPUSH
20409: LD_INT 1
20411: PPUSH
20412: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
20416: LD_INT 29
20418: PPUSH
20419: LD_VAR 0 3
20423: PPUSH
20424: LD_INT 1
20426: PPUSH
20427: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
20431: LD_INT 30
20433: PPUSH
20434: LD_VAR 0 3
20438: PPUSH
20439: LD_INT 1
20441: PPUSH
20442: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
20446: LD_INT 31
20448: PPUSH
20449: LD_VAR 0 3
20453: PPUSH
20454: LD_INT 1
20456: PPUSH
20457: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
20461: LD_INT 32
20463: PPUSH
20464: LD_VAR 0 3
20468: PPUSH
20469: LD_INT 1
20471: PPUSH
20472: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
20476: LD_INT 33
20478: PPUSH
20479: LD_VAR 0 3
20483: PPUSH
20484: LD_INT 1
20486: PPUSH
20487: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
20491: LD_INT 36
20493: PPUSH
20494: LD_VAR 0 3
20498: PPUSH
20499: LD_INT 1
20501: PPUSH
20502: CALL_OW 324
// end ; 6 :
20506: GO 21516
20508: LD_INT 6
20510: DOUBLE
20511: EQUAL
20512: IFTRUE 20516
20514: GO 21441
20516: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20517: LD_INT 35
20519: PPUSH
20520: LD_VAR 0 3
20524: PPUSH
20525: LD_INT 1
20527: PPUSH
20528: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20532: LD_INT 45
20534: PPUSH
20535: LD_VAR 0 3
20539: PPUSH
20540: LD_INT 1
20542: PPUSH
20543: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20547: LD_INT 46
20549: PPUSH
20550: LD_VAR 0 3
20554: PPUSH
20555: LD_INT 1
20557: PPUSH
20558: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20562: LD_INT 47
20564: PPUSH
20565: LD_VAR 0 3
20569: PPUSH
20570: LD_INT 1
20572: PPUSH
20573: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20577: LD_INT 1
20579: PPUSH
20580: LD_VAR 0 3
20584: PPUSH
20585: LD_INT 1
20587: PPUSH
20588: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20592: LD_INT 2
20594: PPUSH
20595: LD_VAR 0 3
20599: PPUSH
20600: LD_INT 1
20602: PPUSH
20603: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20607: LD_INT 11
20609: PPUSH
20610: LD_VAR 0 3
20614: PPUSH
20615: LD_INT 1
20617: PPUSH
20618: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
20622: LD_INT 20
20624: PPUSH
20625: LD_VAR 0 3
20629: PPUSH
20630: LD_INT 1
20632: PPUSH
20633: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20637: LD_INT 48
20639: PPUSH
20640: LD_VAR 0 3
20644: PPUSH
20645: LD_INT 1
20647: PPUSH
20648: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
20652: LD_INT 49
20654: PPUSH
20655: LD_VAR 0 3
20659: PPUSH
20660: LD_INT 1
20662: PPUSH
20663: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
20667: LD_INT 50
20669: PPUSH
20670: LD_VAR 0 3
20674: PPUSH
20675: LD_INT 1
20677: PPUSH
20678: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20682: LD_INT 69
20684: PPUSH
20685: LD_VAR 0 3
20689: PPUSH
20690: LD_INT 1
20692: PPUSH
20693: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20697: LD_INT 39
20699: PPUSH
20700: LD_VAR 0 3
20704: PPUSH
20705: LD_INT 1
20707: PPUSH
20708: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
20712: LD_INT 34
20714: PPUSH
20715: LD_VAR 0 3
20719: PPUSH
20720: LD_INT 1
20722: PPUSH
20723: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20727: LD_INT 42
20729: PPUSH
20730: LD_VAR 0 3
20734: PPUSH
20735: LD_INT 1
20737: PPUSH
20738: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20742: LD_INT 44
20744: PPUSH
20745: LD_VAR 0 3
20749: PPUSH
20750: LD_INT 1
20752: PPUSH
20753: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20757: LD_INT 41
20759: PPUSH
20760: LD_VAR 0 3
20764: PPUSH
20765: LD_INT 1
20767: PPUSH
20768: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
20772: LD_INT 13
20774: PPUSH
20775: LD_VAR 0 3
20779: PPUSH
20780: LD_INT 1
20782: PPUSH
20783: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
20787: LD_INT 40
20789: PPUSH
20790: LD_VAR 0 3
20794: PPUSH
20795: LD_INT 1
20797: PPUSH
20798: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20802: LD_INT 43
20804: PPUSH
20805: LD_VAR 0 3
20809: PPUSH
20810: LD_INT 1
20812: PPUSH
20813: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20817: LD_INT 70
20819: PPUSH
20820: LD_VAR 0 3
20824: PPUSH
20825: LD_INT 1
20827: PPUSH
20828: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
20832: LD_INT 23
20834: PPUSH
20835: LD_VAR 0 3
20839: PPUSH
20840: LD_INT 1
20842: PPUSH
20843: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20847: LD_INT 51
20849: PPUSH
20850: LD_VAR 0 3
20854: PPUSH
20855: LD_INT 1
20857: PPUSH
20858: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
20862: LD_INT 52
20864: PPUSH
20865: LD_VAR 0 3
20869: PPUSH
20870: LD_INT 1
20872: PPUSH
20873: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20877: LD_INT 6
20879: PPUSH
20880: LD_VAR 0 3
20884: PPUSH
20885: LD_INT 1
20887: PPUSH
20888: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
20892: LD_INT 15
20894: PPUSH
20895: LD_VAR 0 3
20899: PPUSH
20900: LD_INT 1
20902: PPUSH
20903: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
20907: LD_INT 7
20909: PPUSH
20910: LD_VAR 0 3
20914: PPUSH
20915: LD_INT 1
20917: PPUSH
20918: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
20922: LD_INT 12
20924: PPUSH
20925: LD_VAR 0 3
20929: PPUSH
20930: LD_INT 1
20932: PPUSH
20933: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
20937: LD_INT 10
20939: PPUSH
20940: LD_VAR 0 3
20944: PPUSH
20945: LD_INT 1
20947: PPUSH
20948: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
20952: LD_INT 17
20954: PPUSH
20955: LD_VAR 0 3
20959: PPUSH
20960: LD_INT 1
20962: PPUSH
20963: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
20967: LD_INT 18
20969: PPUSH
20970: LD_VAR 0 3
20974: PPUSH
20975: LD_INT 1
20977: PPUSH
20978: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
20982: LD_INT 60
20984: PPUSH
20985: LD_VAR 0 3
20989: PPUSH
20990: LD_INT 1
20992: PPUSH
20993: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
20997: LD_INT 61
20999: PPUSH
21000: LD_VAR 0 3
21004: PPUSH
21005: LD_INT 1
21007: PPUSH
21008: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
21012: LD_INT 32
21014: PPUSH
21015: LD_VAR 0 3
21019: PPUSH
21020: LD_INT 1
21022: PPUSH
21023: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
21027: LD_INT 27
21029: PPUSH
21030: LD_VAR 0 3
21034: PPUSH
21035: LD_INT 1
21037: PPUSH
21038: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
21042: LD_INT 36
21044: PPUSH
21045: LD_VAR 0 3
21049: PPUSH
21050: LD_INT 1
21052: PPUSH
21053: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
21057: LD_INT 33
21059: PPUSH
21060: LD_VAR 0 3
21064: PPUSH
21065: LD_INT 1
21067: PPUSH
21068: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
21072: LD_INT 9
21074: PPUSH
21075: LD_VAR 0 3
21079: PPUSH
21080: LD_INT 1
21082: PPUSH
21083: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
21087: LD_INT 38
21089: PPUSH
21090: LD_VAR 0 3
21094: PPUSH
21095: LD_INT 1
21097: PPUSH
21098: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
21102: LD_INT 57
21104: PPUSH
21105: LD_VAR 0 3
21109: PPUSH
21110: LD_INT 1
21112: PPUSH
21113: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
21117: LD_INT 58
21119: PPUSH
21120: LD_VAR 0 3
21124: PPUSH
21125: LD_INT 1
21127: PPUSH
21128: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
21132: LD_INT 28
21134: PPUSH
21135: LD_VAR 0 3
21139: PPUSH
21140: LD_INT 1
21142: PPUSH
21143: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
21147: LD_INT 29
21149: PPUSH
21150: LD_VAR 0 3
21154: PPUSH
21155: LD_INT 1
21157: PPUSH
21158: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
21162: LD_INT 30
21164: PPUSH
21165: LD_VAR 0 3
21169: PPUSH
21170: LD_INT 1
21172: PPUSH
21173: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
21177: LD_INT 37
21179: PPUSH
21180: LD_VAR 0 3
21184: PPUSH
21185: LD_INT 1
21187: PPUSH
21188: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
21192: LD_INT 63
21194: PPUSH
21195: LD_VAR 0 3
21199: PPUSH
21200: LD_INT 1
21202: PPUSH
21203: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
21207: LD_INT 64
21209: PPUSH
21210: LD_VAR 0 3
21214: PPUSH
21215: LD_INT 1
21217: PPUSH
21218: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
21222: LD_INT 3
21224: PPUSH
21225: LD_VAR 0 3
21229: PPUSH
21230: LD_INT 1
21232: PPUSH
21233: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
21237: LD_INT 4
21239: PPUSH
21240: LD_VAR 0 3
21244: PPUSH
21245: LD_INT 1
21247: PPUSH
21248: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
21252: LD_INT 5
21254: PPUSH
21255: LD_VAR 0 3
21259: PPUSH
21260: LD_INT 1
21262: PPUSH
21263: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
21267: LD_INT 8
21269: PPUSH
21270: LD_VAR 0 3
21274: PPUSH
21275: LD_INT 1
21277: PPUSH
21278: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
21282: LD_INT 66
21284: PPUSH
21285: LD_VAR 0 3
21289: PPUSH
21290: LD_INT 1
21292: PPUSH
21293: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
21297: LD_INT 67
21299: PPUSH
21300: LD_VAR 0 3
21304: PPUSH
21305: LD_INT 1
21307: PPUSH
21308: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
21312: LD_INT 21
21314: PPUSH
21315: LD_VAR 0 3
21319: PPUSH
21320: LD_INT 1
21322: PPUSH
21323: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
21327: LD_INT 22
21329: PPUSH
21330: LD_VAR 0 3
21334: PPUSH
21335: LD_INT 1
21337: PPUSH
21338: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
21342: LD_INT 19
21344: PPUSH
21345: LD_VAR 0 3
21349: PPUSH
21350: LD_INT 1
21352: PPUSH
21353: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
21357: LD_INT 26
21359: PPUSH
21360: LD_VAR 0 3
21364: PPUSH
21365: LD_INT 1
21367: PPUSH
21368: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
21372: LD_INT 54
21374: PPUSH
21375: LD_VAR 0 3
21379: PPUSH
21380: LD_INT 1
21382: PPUSH
21383: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
21387: LD_INT 55
21389: PPUSH
21390: LD_VAR 0 3
21394: PPUSH
21395: LD_INT 1
21397: PPUSH
21398: CALL_OW 322
// for i = 0 to 39 do
21402: LD_ADDR_VAR 0 4
21406: PUSH
21407: DOUBLE
21408: LD_INT 0
21410: DEC
21411: ST_TO_ADDR
21412: LD_INT 39
21414: PUSH
21415: FOR_TO
21416: IFFALSE 21437
// SetRestrict ( i , side , true ) ;
21418: LD_VAR 0 4
21422: PPUSH
21423: LD_VAR 0 3
21427: PPUSH
21428: LD_INT 1
21430: PPUSH
21431: CALL_OW 324
21435: GO 21415
21437: POP
21438: POP
// end ; else
21439: GO 21516
21441: POP
// begin for i = 1 to 73 do
21442: LD_ADDR_VAR 0 4
21446: PUSH
21447: DOUBLE
21448: LD_INT 1
21450: DEC
21451: ST_TO_ADDR
21452: LD_INT 73
21454: PUSH
21455: FOR_TO
21456: IFFALSE 21477
// SetTech ( i , side , state_enabled ) ;
21458: LD_VAR 0 4
21462: PPUSH
21463: LD_VAR 0 3
21467: PPUSH
21468: LD_INT 1
21470: PPUSH
21471: CALL_OW 322
21475: GO 21455
21477: POP
21478: POP
// for i = 0 to 39 do
21479: LD_ADDR_VAR 0 4
21483: PUSH
21484: DOUBLE
21485: LD_INT 0
21487: DEC
21488: ST_TO_ADDR
21489: LD_INT 39
21491: PUSH
21492: FOR_TO
21493: IFFALSE 21514
// SetRestrict ( i , side , true ) ;
21495: LD_VAR 0 4
21499: PPUSH
21500: LD_VAR 0 3
21504: PPUSH
21505: LD_INT 1
21507: PPUSH
21508: CALL_OW 324
21512: GO 21492
21514: POP
21515: POP
// end ; end ; end ;
21516: GO 17521
21518: POP
21519: POP
// end ;
21520: LD_VAR 0 2
21524: RET
