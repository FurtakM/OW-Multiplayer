// export def_main_base , def_secondary_base , def_defence_level , def_amount_of_people , def_initial_level , def_main_deposits , def_secondary_deposits , def_siberite_detection , def_starting_resources , def_shipments_density , def_people_arrivals , def_people_loyality , def_people_info , def_morale_flags , def_siberite_bomb , def_amount_of_apemen , def_builduptime , def_win_rules , def_people_respawning ; export is_depot , number_of_people , number_of_pplants , are_mines , is_lab , is_fact , is_arm , are_breastworks , deposits , initial_level , starting_crates , starting_resources , shipments_density , max_arriving_times , text_info , fog_info , def_bf_params , amount_of_apemen , siberite_bomb_Delay ; export Positions , Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export second_side , third_nation ; export start_def , depots_def , breastworks_def , labs_def , factories_def , armories_def , pplants_def , deposits_def ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i ; var u1 , u2 , pom_tab , p1 , p2 , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
  73: PPUSH
  74: PPUSH
  75: PPUSH
  76: PPUSH
  77: PPUSH
  78: PPUSH
  79: PPUSH
  80: PPUSH
  81: PPUSH
  82: PPUSH
  83: PPUSH
// if MultiPlayer then
  84: LD_OWVAR 4
  88: IFFALSE 162
// begin Game_Type = mp_game_type ;
  90: LD_ADDR_EXP 66
  94: PUSH
  95: LD_OWVAR 6
  99: ST_TO_ADDR
// Your_Side = mp_player_side ;
 100: LD_ADDR_OWVAR 2
 104: PUSH
 105: LD_OWVAR 7
 109: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_OWVAR 17
 119: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 120: LD_ADDR_EXP 40
 124: PUSH
 125: LD_OWVAR 15
 129: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 130: LD_ADDR_EXP 44
 134: PUSH
 135: LD_OWVAR 16
 139: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 140: LD_ADDR_EXP 42
 144: PUSH
 145: CALL 0 0 0
 149: ST_TO_ADDR
// Teams = mp_teams ;
 150: LD_ADDR_EXP 41
 154: PUSH
 155: LD_OWVAR 12
 159: ST_TO_ADDR
// end else
 160: GO 333
// begin Your_Side = 3 ;
 162: LD_ADDR_OWVAR 2
 166: PUSH
 167: LD_INT 3
 169: ST_TO_ADDR
// Side_Positions = [ 0 , 0 , 2 , 0 , 1 , 0 , 0 , 0 ] ;
 170: LD_ADDR_EXP 43
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 2
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 1
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: LD_INT 0
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: LIST
 208: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 209: LD_ADDR_EXP 40
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: LD_INT 0
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: LIST
 246: LIST
 247: ST_TO_ADDR
// Side_Nations = [ 0 , 0 , 3 , 0 , 2 , 0 , 0 , 0 ] ;
 248: LD_ADDR_EXP 44
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 3
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 2
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: LIST
 286: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 287: LD_ADDR_EXP 42
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: ST_TO_ADDR
// Teams = [ ] ;
 326: LD_ADDR_EXP 41
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ; for i := 1 to 8 do
 333: LD_ADDR_VAR 0 8
 337: PUSH
 338: DOUBLE
 339: LD_INT 1
 341: DEC
 342: ST_TO_ADDR
 343: LD_INT 8
 345: PUSH
 346: FOR_TO
 347: IFFALSE 434
// if Multiplayer_GetPlayerIsSpec ( i ) then
 349: LD_VAR 0 8
 353: PPUSH
 354: CALL_OW 530
 358: IFFALSE 432
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 360: LD_ADDR_EXP 43
 364: PUSH
 365: LD_EXP 43
 369: PPUSH
 370: LD_VAR 0 8
 374: PPUSH
 375: LD_INT 0
 377: PPUSH
 378: CALL_OW 1
 382: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 383: LD_ADDR_EXP 41
 387: PUSH
 388: LD_EXP 41
 392: PPUSH
 393: LD_EXP 40
 397: PUSH
 398: LD_VAR 0 8
 402: ARRAY
 403: PPUSH
 404: LD_EXP 41
 408: PUSH
 409: LD_EXP 40
 413: PUSH
 414: LD_VAR 0 8
 418: ARRAY
 419: ARRAY
 420: PUSH
 421: LD_VAR 0 8
 425: DIFF
 426: PPUSH
 427: CALL_OW 1
 431: ST_TO_ADDR
// end ;
 432: GO 346
 434: POP
 435: POP
// Position_Sides := [ 0 , 0 ] ;
 436: LD_ADDR_EXP 46
 440: PUSH
 441: LD_INT 0
 443: PUSH
 444: LD_INT 0
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// for i := 1 to 8 do
 451: LD_ADDR_VAR 0 8
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_INT 8
 463: PUSH
 464: FOR_TO
 465: IFFALSE 512
// if Side_Positions [ i ] then
 467: LD_EXP 43
 471: PUSH
 472: LD_VAR 0 8
 476: ARRAY
 477: IFFALSE 510
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 479: LD_ADDR_EXP 46
 483: PUSH
 484: LD_EXP 46
 488: PPUSH
 489: LD_EXP 43
 493: PUSH
 494: LD_VAR 0 8
 498: ARRAY
 499: PPUSH
 500: LD_VAR 0 8
 504: PPUSH
 505: CALL_OW 1
 509: ST_TO_ADDR
 510: GO 464
 512: POP
 513: POP
// Team_Game := 1 ;
 514: LD_ADDR_EXP 45
 518: PUSH
 519: LD_INT 1
 521: ST_TO_ADDR
// p1 := 0 ;
 522: LD_ADDR_VAR 0 12
 526: PUSH
 527: LD_INT 0
 529: ST_TO_ADDR
// p2 := 0 ;
 530: LD_ADDR_VAR 0 13
 534: PUSH
 535: LD_INT 0
 537: ST_TO_ADDR
// for i := 1 to 8 do
 538: LD_ADDR_VAR 0 8
 542: PUSH
 543: DOUBLE
 544: LD_INT 1
 546: DEC
 547: ST_TO_ADDR
 548: LD_INT 8
 550: PUSH
 551: FOR_TO
 552: IFFALSE 610
// if Side_Positions [ i ] = 1 then
 554: LD_EXP 43
 558: PUSH
 559: LD_VAR 0 8
 563: ARRAY
 564: PUSH
 565: LD_INT 1
 567: EQUAL
 568: IFFALSE 582
// p1 := i else
 570: LD_ADDR_VAR 0 12
 574: PUSH
 575: LD_VAR 0 8
 579: ST_TO_ADDR
 580: GO 608
// if Side_Positions [ i ] = 2 then
 582: LD_EXP 43
 586: PUSH
 587: LD_VAR 0 8
 591: ARRAY
 592: PUSH
 593: LD_INT 2
 595: EQUAL
 596: IFFALSE 608
// p2 := i ;
 598: LD_ADDR_VAR 0 13
 602: PUSH
 603: LD_VAR 0 8
 607: ST_TO_ADDR
 608: GO 551
 610: POP
 611: POP
// Positions := [ p1 , p2 ] ;
 612: LD_ADDR_EXP 39
 616: PUSH
 617: LD_VAR 0 12
 621: PUSH
 622: LD_VAR 0 13
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: ST_TO_ADDR
// if MultiPlayer then
 631: LD_OWVAR 4
 635: IFFALSE 889
// begin def_main_base = GetMultiplayerSetting ( 0 ) ;
 637: LD_ADDR_EXP 1
 641: PUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL_OW 426
 649: ST_TO_ADDR
// def_secondary_base = GetMultiplayerSetting ( 1 ) ;
 650: LD_ADDR_EXP 2
 654: PUSH
 655: LD_INT 1
 657: PPUSH
 658: CALL_OW 426
 662: ST_TO_ADDR
// def_defence_level = GetMultiplayerSetting ( 2 ) ;
 663: LD_ADDR_EXP 3
 667: PUSH
 668: LD_INT 2
 670: PPUSH
 671: CALL_OW 426
 675: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 3 ) ;
 676: LD_ADDR_EXP 4
 680: PUSH
 681: LD_INT 3
 683: PPUSH
 684: CALL_OW 426
 688: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 4 ) ;
 689: LD_ADDR_EXP 5
 693: PUSH
 694: LD_INT 4
 696: PPUSH
 697: CALL_OW 426
 701: ST_TO_ADDR
// def_main_deposits = GetMultiplayerSetting ( 5 ) ;
 702: LD_ADDR_EXP 6
 706: PUSH
 707: LD_INT 5
 709: PPUSH
 710: CALL_OW 426
 714: ST_TO_ADDR
// def_secondary_deposits = GetMultiplayerSetting ( 6 ) ;
 715: LD_ADDR_EXP 7
 719: PUSH
 720: LD_INT 6
 722: PPUSH
 723: CALL_OW 426
 727: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 7 ) ;
 728: LD_ADDR_EXP 8
 732: PUSH
 733: LD_INT 7
 735: PPUSH
 736: CALL_OW 426
 740: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 8 ) ;
 741: LD_ADDR_EXP 9
 745: PUSH
 746: LD_INT 8
 748: PPUSH
 749: CALL_OW 426
 753: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 9 ) ;
 754: LD_ADDR_EXP 10
 758: PUSH
 759: LD_INT 9
 761: PPUSH
 762: CALL_OW 426
 766: ST_TO_ADDR
// def_people_arrivals = GetMultiplayerSetting ( 10 ) ;
 767: LD_ADDR_EXP 11
 771: PUSH
 772: LD_INT 10
 774: PPUSH
 775: CALL_OW 426
 779: ST_TO_ADDR
// def_people_loyality = GetMultiplayerSetting ( 11 ) ;
 780: LD_ADDR_EXP 12
 784: PUSH
 785: LD_INT 11
 787: PPUSH
 788: CALL_OW 426
 792: ST_TO_ADDR
// def_people_info = GetMultiplayerSetting ( 12 ) ;
 793: LD_ADDR_EXP 13
 797: PUSH
 798: LD_INT 12
 800: PPUSH
 801: CALL_OW 426
 805: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 15 ) ;
 806: LD_ADDR_EXP 14
 810: PUSH
 811: LD_INT 15
 813: PPUSH
 814: CALL_OW 426
 818: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 16 ) ;
 819: LD_ADDR_EXP 15
 823: PUSH
 824: LD_INT 16
 826: PPUSH
 827: CALL_OW 426
 831: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 17 ) ;
 832: LD_ADDR_EXP 16
 836: PUSH
 837: LD_INT 17
 839: PPUSH
 840: CALL_OW 426
 844: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 845: LD_ADDR_EXP 17
 849: PUSH
 850: LD_INT 20
 852: PPUSH
 853: CALL_OW 426
 857: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 858: LD_ADDR_VAR 0 14
 862: PUSH
 863: LD_INT 22
 865: PPUSH
 866: CALL_OW 426
 870: ST_TO_ADDR
// def_people_respawning = 0 ;
 871: LD_ADDR_EXP 19
 875: PUSH
 876: LD_INT 0
 878: ST_TO_ADDR
// def_win_rules = 0 ;
 879: LD_ADDR_EXP 18
 883: PUSH
 884: LD_INT 0
 886: ST_TO_ADDR
// end else
 887: GO 1061
// begin randomize ;
 889: CALL_OW 10
// def_main_base = 4 ;
 893: LD_ADDR_EXP 1
 897: PUSH
 898: LD_INT 4
 900: ST_TO_ADDR
// def_secondary_base = 2 ;
 901: LD_ADDR_EXP 2
 905: PUSH
 906: LD_INT 2
 908: ST_TO_ADDR
// def_defence_level = 1 ;
 909: LD_ADDR_EXP 3
 913: PUSH
 914: LD_INT 1
 916: ST_TO_ADDR
// def_amount_of_people = 2 ;
 917: LD_ADDR_EXP 4
 921: PUSH
 922: LD_INT 2
 924: ST_TO_ADDR
// def_initial_level = 1 ;
 925: LD_ADDR_EXP 5
 929: PUSH
 930: LD_INT 1
 932: ST_TO_ADDR
// def_main_deposits = 2 ;
 933: LD_ADDR_EXP 6
 937: PUSH
 938: LD_INT 2
 940: ST_TO_ADDR
// def_secondary_deposits = 1 ;
 941: LD_ADDR_EXP 7
 945: PUSH
 946: LD_INT 1
 948: ST_TO_ADDR
// def_siberite_detection = 1 ;
 949: LD_ADDR_EXP 8
 953: PUSH
 954: LD_INT 1
 956: ST_TO_ADDR
// def_starting_resources = 2 ;
 957: LD_ADDR_EXP 9
 961: PUSH
 962: LD_INT 2
 964: ST_TO_ADDR
// def_shipments_density = 1 ;
 965: LD_ADDR_EXP 10
 969: PUSH
 970: LD_INT 1
 972: ST_TO_ADDR
// def_people_arrivals = 3 ;
 973: LD_ADDR_EXP 11
 977: PUSH
 978: LD_INT 3
 980: ST_TO_ADDR
// def_people_loyality = 1 ;
 981: LD_ADDR_EXP 12
 985: PUSH
 986: LD_INT 1
 988: ST_TO_ADDR
// def_people_info = 1 ;
 989: LD_ADDR_EXP 13
 993: PUSH
 994: LD_INT 1
 996: ST_TO_ADDR
// def_morale_flags = 2 ;
 997: LD_ADDR_EXP 14
1001: PUSH
1002: LD_INT 2
1004: ST_TO_ADDR
// def_siberite_bomb = 1 ;
1005: LD_ADDR_EXP 15
1009: PUSH
1010: LD_INT 1
1012: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
1013: LD_ADDR_EXP 16
1017: PUSH
1018: LD_INT 3
1020: ST_TO_ADDR
// def_builduptime = 1 ;
1021: LD_ADDR_EXP 17
1025: PUSH
1026: LD_INT 1
1028: ST_TO_ADDR
// def_game_rules = 0 ;
1029: LD_ADDR_EXP 67
1033: PUSH
1034: LD_INT 0
1036: ST_TO_ADDR
// tech_level = 4 ;
1037: LD_ADDR_VAR 0 14
1041: PUSH
1042: LD_INT 4
1044: ST_TO_ADDR
// def_people_respawning = 0 ;
1045: LD_ADDR_EXP 19
1049: PUSH
1050: LD_INT 0
1052: ST_TO_ADDR
// def_win_rules = 0 ;
1053: LD_ADDR_EXP 18
1057: PUSH
1058: LD_INT 0
1060: ST_TO_ADDR
// end ; InitGameRules ;
1061: CALL 14109 0 0
// if def_game_rules = 0 then
1065: LD_EXP 67
1069: PUSH
1070: LD_INT 0
1072: EQUAL
1073: IFFALSE 1100
// begin if isSGUI then
1075: LD_OWVAR 83
1079: IFFALSE 1087
// setMpTechs ( ) else
1081: CALL 17494 0 0
1085: GO 1100
// begin SetMpTechLevel ( tech_level + 1 ) ;
1087: LD_VAR 0 14
1091: PUSH
1092: LD_INT 1
1094: PLUS
1095: PPUSH
1096: CALL 17641 0 1
// end ; end ; u1 = [ 0 , 1 , 1 , 1 , 2 ] [ def_main_base + 1 ] ;
1100: LD_ADDR_VAR 0 9
1104: PUSH
1105: LD_INT 0
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 1
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: LD_INT 2
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_EXP 1
1131: PUSH
1132: LD_INT 1
1134: PLUS
1135: ARRAY
1136: ST_TO_ADDR
// u2 = [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] ;
1137: LD_ADDR_VAR 0 10
1141: PUSH
1142: LD_INT 0
1144: PUSH
1145: LD_INT 1
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 2
1153: PUSH
1154: LD_INT 2
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: LD_EXP 1
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: ST_TO_ADDR
// is_depot = [ [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] , [ 0 , 1 , 1 ] [ def_secondary_base + 1 ] ] ;
1174: LD_ADDR_EXP 20
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: LD_INT 1
1187: PUSH
1188: LD_INT 2
1190: PUSH
1191: LD_INT 2
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: LIST
1200: PUSH
1201: LD_EXP 1
1205: PUSH
1206: LD_INT 1
1208: PLUS
1209: ARRAY
1210: PUSH
1211: LD_INT 0
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: PUSH
1225: LD_EXP 2
1229: PUSH
1230: LD_INT 1
1232: PLUS
1233: ARRAY
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: ST_TO_ADDR
// if is_depot [ 2 ] then
1239: LD_EXP 20
1243: PUSH
1244: LD_INT 2
1246: ARRAY
1247: IFFALSE 1386
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ [ ] , [ 1 ] , [ 1 , 1 ] , [ 1 , 1 , 1 ] ] [ def_defence_level + 1 ] ] else
1249: LD_ADDR_EXP 27
1253: PUSH
1254: EMPTY
1255: PUSH
1256: LD_VAR 0 10
1260: PUSH
1261: LD_VAR 0 9
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: LD_VAR 0 10
1274: PUSH
1275: LD_VAR 0 10
1279: PUSH
1280: LD_VAR 0 9
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: LIST
1289: PUSH
1290: LD_VAR 0 10
1294: PUSH
1295: LD_VAR 0 10
1299: PUSH
1300: LD_VAR 0 9
1304: PUSH
1305: LD_VAR 0 9
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: PUSH
1322: LD_EXP 3
1326: PUSH
1327: LD_INT 1
1329: PLUS
1330: ARRAY
1331: PUSH
1332: EMPTY
1333: PUSH
1334: LD_INT 1
1336: PUSH
1337: EMPTY
1338: LIST
1339: PUSH
1340: LD_INT 1
1342: PUSH
1343: LD_INT 1
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: PUSH
1350: LD_INT 1
1352: PUSH
1353: LD_INT 1
1355: PUSH
1356: LD_INT 1
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: LIST
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: PUSH
1370: LD_EXP 3
1374: PUSH
1375: LD_INT 1
1377: PLUS
1378: ARRAY
1379: PUSH
1380: EMPTY
1381: LIST
1382: LIST
1383: ST_TO_ADDR
1384: GO 1475
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ ] ] ;
1386: LD_ADDR_EXP 27
1390: PUSH
1391: EMPTY
1392: PUSH
1393: LD_VAR 0 10
1397: PUSH
1398: LD_VAR 0 9
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: PUSH
1407: LD_VAR 0 10
1411: PUSH
1412: LD_VAR 0 10
1416: PUSH
1417: LD_VAR 0 9
1421: PUSH
1422: EMPTY
1423: LIST
1424: LIST
1425: LIST
1426: PUSH
1427: LD_VAR 0 10
1431: PUSH
1432: LD_VAR 0 10
1436: PUSH
1437: LD_VAR 0 9
1441: PUSH
1442: LD_VAR 0 9
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: PUSH
1459: LD_EXP 3
1463: PUSH
1464: LD_INT 1
1466: PLUS
1467: ARRAY
1468: PUSH
1469: EMPTY
1470: PUSH
1471: EMPTY
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// is_fact = [ [ 0 , 0 , 1 , 2 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1475: LD_ADDR_EXP 25
1479: PUSH
1480: LD_INT 0
1482: PUSH
1483: LD_INT 0
1485: PUSH
1486: LD_INT 1
1488: PUSH
1489: LD_INT 2
1491: PUSH
1492: LD_INT 2
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: PUSH
1502: LD_EXP 1
1506: PUSH
1507: LD_INT 1
1509: PLUS
1510: ARRAY
1511: PUSH
1512: LD_INT 0
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: ST_TO_ADDR
// is_lab = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1519: LD_ADDR_EXP 24
1523: PUSH
1524: LD_INT 0
1526: PUSH
1527: LD_INT 0
1529: PUSH
1530: LD_INT 1
1532: PUSH
1533: LD_INT 1
1535: PUSH
1536: LD_INT 2
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: PUSH
1546: LD_EXP 1
1550: PUSH
1551: LD_INT 1
1553: PLUS
1554: ARRAY
1555: PUSH
1556: LD_INT 0
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: ST_TO_ADDR
// is_arm = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1563: LD_ADDR_EXP 26
1567: PUSH
1568: LD_INT 0
1570: PUSH
1571: LD_INT 0
1573: PUSH
1574: LD_INT 1
1576: PUSH
1577: LD_INT 1
1579: PUSH
1580: LD_INT 2
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: LD_EXP 1
1594: PUSH
1595: LD_INT 1
1597: PLUS
1598: ARRAY
1599: PUSH
1600: LD_INT 0
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: ST_TO_ADDR
// are_mines = [ [ 0 , 0 , 0 , 1 , 1 ] [ def_main_base + 1 ] , [ 0 , 0 , 1 ] [ def_secondary_base + 1 ] ] ;
1607: LD_ADDR_EXP 23
1611: PUSH
1612: LD_INT 0
1614: PUSH
1615: LD_INT 0
1617: PUSH
1618: LD_INT 0
1620: PUSH
1621: LD_INT 1
1623: PUSH
1624: LD_INT 1
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: PUSH
1634: LD_EXP 1
1638: PUSH
1639: LD_INT 1
1641: PLUS
1642: ARRAY
1643: PUSH
1644: LD_INT 0
1646: PUSH
1647: LD_INT 0
1649: PUSH
1650: LD_INT 1
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: LIST
1657: PUSH
1658: LD_EXP 2
1662: PUSH
1663: LD_INT 1
1665: PLUS
1666: ARRAY
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: ST_TO_ADDR
// number_of_pplants = [ [ 0 , 0 , 0 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1672: LD_ADDR_EXP 22
1676: PUSH
1677: LD_INT 0
1679: PUSH
1680: LD_INT 0
1682: PUSH
1683: LD_INT 0
1685: PUSH
1686: LD_INT 1
1688: PUSH
1689: LD_INT 2
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: PUSH
1699: LD_EXP 1
1703: PUSH
1704: LD_INT 1
1706: PLUS
1707: ARRAY
1708: PUSH
1709: LD_INT 0
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: ST_TO_ADDR
// number_of_people = [ [ 5 , 8 , 11 ] [ def_amount_of_people + 1 ] , ( [ 2 , 3 , 4 ] [ def_amount_of_people + 1 ] ) * is_depot [ 2 ] ] ;
1716: LD_ADDR_EXP 21
1720: PUSH
1721: LD_INT 5
1723: PUSH
1724: LD_INT 8
1726: PUSH
1727: LD_INT 11
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: PUSH
1735: LD_EXP 4
1739: PUSH
1740: LD_INT 1
1742: PLUS
1743: ARRAY
1744: PUSH
1745: LD_INT 2
1747: PUSH
1748: LD_INT 3
1750: PUSH
1751: LD_INT 4
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: LD_EXP 4
1763: PUSH
1764: LD_INT 1
1766: PLUS
1767: ARRAY
1768: PUSH
1769: LD_EXP 20
1773: PUSH
1774: LD_INT 2
1776: ARRAY
1777: MUL
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
1783: LD_ADDR_EXP 29
1787: PUSH
1788: LD_INT 2
1790: PUSH
1791: LD_INT 3
1793: PUSH
1794: LD_INT 4
1796: PUSH
1797: LD_INT 5
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: PUSH
1806: LD_EXP 5
1810: PUSH
1811: LD_INT 1
1813: PLUS
1814: ARRAY
1815: ST_TO_ADDR
// starting_resources = [ [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] , [ [ 50 , 0 , 0 ] , [ 20 , 0 , 0 ] ] , [ [ 150 , 30 , 0 ] , [ 60 , 0 , 0 ] ] , [ [ 250 , 50 , 10 ] , [ 100 , 30 , 0 ] ] ] [ def_starting_resources + 1 ] ;
1816: LD_ADDR_EXP 31
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: LD_INT 0
1826: PUSH
1827: LD_INT 0
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 0
1837: PUSH
1838: LD_INT 0
1840: PUSH
1841: LD_INT 0
1843: PUSH
1844: EMPTY
1845: LIST
1846: LIST
1847: LIST
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: LD_INT 50
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: LD_INT 0
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: LIST
1866: PUSH
1867: LD_INT 20
1869: PUSH
1870: LD_INT 0
1872: PUSH
1873: LD_INT 0
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: LIST
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: PUSH
1885: LD_INT 150
1887: PUSH
1888: LD_INT 30
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 60
1901: PUSH
1902: LD_INT 0
1904: PUSH
1905: LD_INT 0
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: LIST
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 250
1919: PUSH
1920: LD_INT 50
1922: PUSH
1923: LD_INT 10
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 100
1933: PUSH
1934: LD_INT 30
1936: PUSH
1937: LD_INT 0
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: LIST
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: PUSH
1955: LD_EXP 9
1959: PUSH
1960: LD_INT 1
1962: PLUS
1963: ARRAY
1964: ST_TO_ADDR
// shipments_density := 190 - ( def_shipments_density + 1 ) ;
1965: LD_ADDR_EXP 32
1969: PUSH
1970: LD_INT 190
1972: PUSH
1973: LD_EXP 10
1977: PUSH
1978: LD_INT 1
1980: PLUS
1981: MINUS
1982: ST_TO_ADDR
// max_arriving_times = [ [ ] , [ 10 , 17 , 26 , 36 , 48 , 60 ] , [ 6 , 10 , 15 , 20 , 26 , 32 , 38 , 45 , 52 , 60 ] , [ 4 , 6 , 9 , 12 , 16 , 20 , 24 , 28 , 32 , 36 , 40 , 45 , 50 , 55 , 60 ] ] [ def_people_arrivals + 1 ] ;
1983: LD_ADDR_EXP 33
1987: PUSH
1988: EMPTY
1989: PUSH
1990: LD_INT 10
1992: PUSH
1993: LD_INT 17
1995: PUSH
1996: LD_INT 26
1998: PUSH
1999: LD_INT 36
2001: PUSH
2002: LD_INT 48
2004: PUSH
2005: LD_INT 60
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 6
2018: PUSH
2019: LD_INT 10
2021: PUSH
2022: LD_INT 15
2024: PUSH
2025: LD_INT 20
2027: PUSH
2028: LD_INT 26
2030: PUSH
2031: LD_INT 32
2033: PUSH
2034: LD_INT 38
2036: PUSH
2037: LD_INT 45
2039: PUSH
2040: LD_INT 52
2042: PUSH
2043: LD_INT 60
2045: PUSH
2046: EMPTY
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 4
2060: PUSH
2061: LD_INT 6
2063: PUSH
2064: LD_INT 9
2066: PUSH
2067: LD_INT 12
2069: PUSH
2070: LD_INT 16
2072: PUSH
2073: LD_INT 20
2075: PUSH
2076: LD_INT 24
2078: PUSH
2079: LD_INT 28
2081: PUSH
2082: LD_INT 32
2084: PUSH
2085: LD_INT 36
2087: PUSH
2088: LD_INT 40
2090: PUSH
2091: LD_INT 45
2093: PUSH
2094: LD_INT 50
2096: PUSH
2097: LD_INT 55
2099: PUSH
2100: LD_INT 60
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: LIST
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: PUSH
2126: LD_EXP 11
2130: PUSH
2131: LD_INT 1
2133: PLUS
2134: ARRAY
2135: ST_TO_ADDR
// text_info = [ 0 , 1 , 0 , 1 ] [ def_people_info + 1 ] ;
2136: LD_ADDR_EXP 34
2140: PUSH
2141: LD_INT 0
2143: PUSH
2144: LD_INT 1
2146: PUSH
2147: LD_INT 0
2149: PUSH
2150: LD_INT 1
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: LD_EXP 13
2163: PUSH
2164: LD_INT 1
2166: PLUS
2167: ARRAY
2168: ST_TO_ADDR
// fog_info = [ 0 , 0 , 1 , 1 ] [ def_people_info + 1 ] ;
2169: LD_ADDR_EXP 35
2173: PUSH
2174: LD_INT 0
2176: PUSH
2177: LD_INT 0
2179: PUSH
2180: LD_INT 1
2182: PUSH
2183: LD_INT 1
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: LIST
2191: PUSH
2192: LD_EXP 13
2196: PUSH
2197: LD_INT 1
2199: PLUS
2200: ARRAY
2201: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
2202: LD_ADDR_EXP 37
2206: PUSH
2207: LD_INT 0
2209: PUSH
2210: LD_INT 3
2212: PUSH
2213: LD_INT 6
2215: PUSH
2216: LD_INT 9
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: PUSH
2225: LD_EXP 16
2229: PUSH
2230: LD_INT 1
2232: PLUS
2233: ARRAY
2234: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2235: LD_ADDR_EXP 38
2239: PUSH
2240: LD_INT 0
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: LD_INT 63000
2248: PUSH
2249: LD_INT 126000
2251: PUSH
2252: LD_INT 189000
2254: PUSH
2255: LD_INT 252000
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: PUSH
2266: LD_EXP 15
2270: PUSH
2271: LD_INT 1
2273: PLUS
2274: ARRAY
2275: ST_TO_ADDR
// deposits = [ [ [ 1 , 0 , 1 , 2 , 0 ] [ def_main_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_main_deposits + 1 ] ] , [ [ 1 , 0 , 1 , 2 , 0 ] [ def_secondary_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_secondary_deposits + 1 ] ] ] ;
2276: LD_ADDR_EXP 28
2280: PUSH
2281: LD_INT 1
2283: PUSH
2284: LD_INT 0
2286: PUSH
2287: LD_INT 1
2289: PUSH
2290: LD_INT 2
2292: PUSH
2293: LD_INT 0
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: LIST
2300: LIST
2301: LIST
2302: PUSH
2303: LD_EXP 6
2307: PUSH
2308: LD_INT 1
2310: PLUS
2311: ARRAY
2312: PUSH
2313: LD_INT 0
2315: PUSH
2316: LD_INT 1
2318: PUSH
2319: LD_INT 1
2321: PUSH
2322: LD_INT 0
2324: PUSH
2325: LD_INT 2
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: PUSH
2335: LD_EXP 6
2339: PUSH
2340: LD_INT 1
2342: PLUS
2343: ARRAY
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 1
2351: PUSH
2352: LD_INT 0
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: LD_INT 2
2360: PUSH
2361: LD_INT 0
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: PUSH
2371: LD_EXP 7
2375: PUSH
2376: LD_INT 1
2378: PLUS
2379: ARRAY
2380: PUSH
2381: LD_INT 0
2383: PUSH
2384: LD_INT 1
2386: PUSH
2387: LD_INT 1
2389: PUSH
2390: LD_INT 0
2392: PUSH
2393: LD_INT 2
2395: PUSH
2396: EMPTY
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: LIST
2402: PUSH
2403: LD_EXP 7
2407: PUSH
2408: LD_INT 1
2410: PLUS
2411: ARRAY
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: ST_TO_ADDR
// def_bf_params = [ [ 0 , 0 , 0 , 0 ] , [ 50 , 25 , 0 , 50 ] , [ 75 , 50 , 25 , 75 ] , [ 100 , 75 , 50 , 100 ] ] [ def_morale_flags + 1 ] ;
2421: LD_ADDR_EXP 36
2425: PUSH
2426: LD_INT 0
2428: PUSH
2429: LD_INT 0
2431: PUSH
2432: LD_INT 0
2434: PUSH
2435: LD_INT 0
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: PUSH
2444: LD_INT 50
2446: PUSH
2447: LD_INT 25
2449: PUSH
2450: LD_INT 0
2452: PUSH
2453: LD_INT 50
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: LIST
2460: LIST
2461: PUSH
2462: LD_INT 75
2464: PUSH
2465: LD_INT 50
2467: PUSH
2468: LD_INT 25
2470: PUSH
2471: LD_INT 75
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 100
2482: PUSH
2483: LD_INT 75
2485: PUSH
2486: LD_INT 50
2488: PUSH
2489: LD_INT 100
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: PUSH
2504: LD_EXP 14
2508: PUSH
2509: LD_INT 1
2511: PLUS
2512: ARRAY
2513: ST_TO_ADDR
// prepare_arrivals ;
2514: CALL 11213 0 0
// if def_people_loyality then
2518: LD_EXP 12
2522: IFFALSE 3387
// begin second_side = [ [ [ 0 , 0 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 6 , 7 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 4 , 2 ] , [ 4 , 2 ] ] , [ [ 5 , 4 ] , [ 0 , 0 ] , [ 5 , 6 ] , [ 5 , 1 ] , [ 7 , 3 ] , [ 5 , 3 ] , [ 5 , 4 ] , [ 5 , 4 ] ] , [ [ 6 , 4 ] , [ 6 , 5 ] , [ 0 , 0 ] , [ 6 , 1 ] , [ 6 , 2 ] , [ 5 , 1 ] , [ 6 , 4 ] , [ 6 , 2 ] ] , [ [ 7 , 6 ] , [ 1 , 5 ] , [ 1 , 6 ] , [ 0 , 0 ] , [ 1 , 2 ] , [ 1 , 3 ] , [ 1 , 2 ] , [ 1 , 2 ] ] , [ [ 2 , 4 ] , [ 3 , 7 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 0 , 0 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 2 , 4 ] ] , [ [ 3 , 4 ] , [ 3 , 5 ] , [ 1 , 5 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 0 , 0 ] , [ 3 , 4 ] , [ 3 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 0 , 0 ] , [ 4 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 0 , 0 ] ] ] [ positions [ 1 ] ] [ positions [ 2 ] ] ;
2524: LD_ADDR_EXP 47
2528: PUSH
2529: LD_INT 0
2531: PUSH
2532: LD_INT 0
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PUSH
2539: LD_INT 4
2541: PUSH
2542: LD_INT 5
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: PUSH
2549: LD_INT 4
2551: PUSH
2552: LD_INT 6
2554: PUSH
2555: EMPTY
2556: LIST
2557: LIST
2558: PUSH
2559: LD_INT 6
2561: PUSH
2562: LD_INT 7
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 4
2571: PUSH
2572: LD_INT 2
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PUSH
2579: LD_INT 4
2581: PUSH
2582: LD_INT 3
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PUSH
2589: LD_INT 4
2591: PUSH
2592: LD_INT 2
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: PUSH
2599: LD_INT 4
2601: PUSH
2602: LD_INT 2
2604: PUSH
2605: EMPTY
2606: LIST
2607: LIST
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: LIST
2613: LIST
2614: LIST
2615: LIST
2616: LIST
2617: LIST
2618: PUSH
2619: LD_INT 5
2621: PUSH
2622: LD_INT 4
2624: PUSH
2625: EMPTY
2626: LIST
2627: LIST
2628: PUSH
2629: LD_INT 0
2631: PUSH
2632: LD_INT 0
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PUSH
2639: LD_INT 5
2641: PUSH
2642: LD_INT 6
2644: PUSH
2645: EMPTY
2646: LIST
2647: LIST
2648: PUSH
2649: LD_INT 5
2651: PUSH
2652: LD_INT 1
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: PUSH
2659: LD_INT 7
2661: PUSH
2662: LD_INT 3
2664: PUSH
2665: EMPTY
2666: LIST
2667: LIST
2668: PUSH
2669: LD_INT 5
2671: PUSH
2672: LD_INT 3
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: PUSH
2679: LD_INT 5
2681: PUSH
2682: LD_INT 4
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: PUSH
2689: LD_INT 5
2691: PUSH
2692: LD_INT 4
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: LIST
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 6
2711: PUSH
2712: LD_INT 4
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 6
2721: PUSH
2722: LD_INT 5
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: PUSH
2729: LD_INT 0
2731: PUSH
2732: LD_INT 0
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: PUSH
2739: LD_INT 6
2741: PUSH
2742: LD_INT 1
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PUSH
2749: LD_INT 6
2751: PUSH
2752: LD_INT 2
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PUSH
2759: LD_INT 5
2761: PUSH
2762: LD_INT 1
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: PUSH
2769: LD_INT 6
2771: PUSH
2772: LD_INT 4
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: PUSH
2779: LD_INT 6
2781: PUSH
2782: LD_INT 2
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: LIST
2793: LIST
2794: LIST
2795: LIST
2796: LIST
2797: LIST
2798: PUSH
2799: LD_INT 7
2801: PUSH
2802: LD_INT 6
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: PUSH
2809: LD_INT 1
2811: PUSH
2812: LD_INT 5
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PUSH
2819: LD_INT 1
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 0
2831: PUSH
2832: LD_INT 0
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 1
2841: PUSH
2842: LD_INT 2
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: PUSH
2849: LD_INT 1
2851: PUSH
2852: LD_INT 3
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: PUSH
2859: LD_INT 1
2861: PUSH
2862: LD_INT 2
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: PUSH
2869: LD_INT 1
2871: PUSH
2872: LD_INT 2
2874: PUSH
2875: EMPTY
2876: LIST
2877: LIST
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: LIST
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: LIST
2888: PUSH
2889: LD_INT 2
2891: PUSH
2892: LD_INT 4
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PUSH
2899: LD_INT 3
2901: PUSH
2902: LD_INT 7
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: PUSH
2909: LD_INT 2
2911: PUSH
2912: LD_INT 6
2914: PUSH
2915: EMPTY
2916: LIST
2917: LIST
2918: PUSH
2919: LD_INT 2
2921: PUSH
2922: LD_INT 1
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PUSH
2929: LD_INT 0
2931: PUSH
2932: LD_INT 0
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PUSH
2939: LD_INT 2
2941: PUSH
2942: LD_INT 3
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: PUSH
2949: LD_INT 2
2951: PUSH
2952: LD_INT 4
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PUSH
2959: LD_INT 2
2961: PUSH
2962: LD_INT 4
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: LIST
2973: LIST
2974: LIST
2975: LIST
2976: LIST
2977: LIST
2978: PUSH
2979: LD_INT 3
2981: PUSH
2982: LD_INT 4
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PUSH
2989: LD_INT 3
2991: PUSH
2992: LD_INT 5
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PUSH
2999: LD_INT 1
3001: PUSH
3002: LD_INT 5
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PUSH
3009: LD_INT 3
3011: PUSH
3012: LD_INT 1
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: LD_INT 3
3021: PUSH
3022: LD_INT 2
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PUSH
3029: LD_INT 0
3031: PUSH
3032: LD_INT 0
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: PUSH
3039: LD_INT 3
3041: PUSH
3042: LD_INT 4
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 3
3051: PUSH
3052: LD_INT 2
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: PUSH
3069: LD_INT 2
3071: PUSH
3072: LD_INT 4
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 4
3081: PUSH
3082: LD_INT 5
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 4
3091: PUSH
3092: LD_INT 6
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 2
3101: PUSH
3102: LD_INT 1
3104: PUSH
3105: EMPTY
3106: LIST
3107: LIST
3108: PUSH
3109: LD_INT 4
3111: PUSH
3112: LD_INT 2
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: PUSH
3119: LD_INT 4
3121: PUSH
3122: LD_INT 3
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PUSH
3129: LD_INT 0
3131: PUSH
3132: LD_INT 0
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: PUSH
3139: LD_INT 4
3141: PUSH
3142: LD_INT 2
3144: PUSH
3145: EMPTY
3146: LIST
3147: LIST
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: LIST
3155: LIST
3156: LIST
3157: LIST
3158: PUSH
3159: LD_INT 2
3161: PUSH
3162: LD_INT 4
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: PUSH
3169: LD_INT 4
3171: PUSH
3172: LD_INT 5
3174: PUSH
3175: EMPTY
3176: LIST
3177: LIST
3178: PUSH
3179: LD_INT 2
3181: PUSH
3182: LD_INT 6
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: PUSH
3189: LD_INT 2
3191: PUSH
3192: LD_INT 1
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PUSH
3199: LD_INT 4
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: LD_INT 2
3211: PUSH
3212: LD_INT 3
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: PUSH
3219: LD_INT 2
3221: PUSH
3222: LD_INT 4
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PUSH
3229: LD_INT 0
3231: PUSH
3232: LD_INT 0
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: PUSH
3259: LD_EXP 39
3263: PUSH
3264: LD_INT 1
3266: ARRAY
3267: ARRAY
3268: PUSH
3269: LD_EXP 39
3273: PUSH
3274: LD_INT 2
3276: ARRAY
3277: ARRAY
3278: ST_TO_ADDR
// SetAttitude ( second_side [ 1 ] , positions [ 1 ] , att_friend , true ) ;
3279: LD_EXP 47
3283: PUSH
3284: LD_INT 1
3286: ARRAY
3287: PPUSH
3288: LD_EXP 39
3292: PUSH
3293: LD_INT 1
3295: ARRAY
3296: PPUSH
3297: LD_INT 1
3299: PPUSH
3300: LD_INT 1
3302: PPUSH
3303: CALL_OW 80
// SetAttitude ( second_side [ 2 ] , positions [ 2 ] , att_friend , true ) ;
3307: LD_EXP 47
3311: PUSH
3312: LD_INT 2
3314: ARRAY
3315: PPUSH
3316: LD_EXP 39
3320: PUSH
3321: LD_INT 2
3323: ARRAY
3324: PPUSH
3325: LD_INT 1
3327: PPUSH
3328: LD_INT 1
3330: PPUSH
3331: CALL_OW 80
// if fog_info then
3335: LD_EXP 35
3339: IFFALSE 3385
// begin ChangeSideFog ( second_side [ 1 ] , positions [ 1 ] ) ;
3341: LD_EXP 47
3345: PUSH
3346: LD_INT 1
3348: ARRAY
3349: PPUSH
3350: LD_EXP 39
3354: PUSH
3355: LD_INT 1
3357: ARRAY
3358: PPUSH
3359: CALL_OW 343
// ChangeSideFog ( second_side [ 2 ] , positions [ 2 ] ) ;
3363: LD_EXP 47
3367: PUSH
3368: LD_INT 2
3370: ARRAY
3371: PPUSH
3372: LD_EXP 39
3376: PUSH
3377: LD_INT 2
3379: ARRAY
3380: PPUSH
3381: CALL_OW 343
// end ; end else
3385: GO 3667
// begin pom_tab = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] diff ( positions union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 1 ] ] union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 2 ] ] ) ;
3387: LD_ADDR_VAR 0 11
3391: PUSH
3392: LD_INT 1
3394: PUSH
3395: LD_INT 2
3397: PUSH
3398: LD_INT 3
3400: PUSH
3401: LD_INT 4
3403: PUSH
3404: LD_INT 5
3406: PUSH
3407: LD_INT 6
3409: PUSH
3410: LD_INT 7
3412: PUSH
3413: LD_INT 8
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: PUSH
3426: LD_EXP 39
3430: PUSH
3431: LD_INT 4
3433: PUSH
3434: LD_INT 5
3436: PUSH
3437: LD_INT 7
3439: PUSH
3440: LD_INT 8
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: LIST
3447: PUSH
3448: LD_INT 6
3450: PUSH
3451: LD_INT 1
3453: PUSH
3454: LD_INT 7
3456: PUSH
3457: LD_INT 8
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: LIST
3464: PUSH
3465: LD_INT 2
3467: PUSH
3468: LD_INT 3
3470: PUSH
3471: LD_INT 2
3473: PUSH
3474: LD_INT 4
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: PUSH
3481: LD_INT 2
3483: PUSH
3484: LD_INT 4
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: PUSH
3501: LD_EXP 39
3505: PUSH
3506: LD_INT 1
3508: ARRAY
3509: ARRAY
3510: UNION
3511: PUSH
3512: LD_INT 4
3514: PUSH
3515: LD_INT 5
3517: PUSH
3518: LD_INT 7
3520: PUSH
3521: LD_INT 8
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: LIST
3528: PUSH
3529: LD_INT 6
3531: PUSH
3532: LD_INT 1
3534: PUSH
3535: LD_INT 7
3537: PUSH
3538: LD_INT 8
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: LIST
3545: PUSH
3546: LD_INT 2
3548: PUSH
3549: LD_INT 3
3551: PUSH
3552: LD_INT 2
3554: PUSH
3555: LD_INT 4
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: PUSH
3562: LD_INT 2
3564: PUSH
3565: LD_INT 4
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: PUSH
3582: LD_EXP 39
3586: PUSH
3587: LD_INT 2
3589: ARRAY
3590: ARRAY
3591: UNION
3592: DIFF
3593: ST_TO_ADDR
// second_side = pom_tab [ Rand ( 1 , pom_tab ) ] ;
3594: LD_ADDR_EXP 47
3598: PUSH
3599: LD_VAR 0 11
3603: PUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_VAR 0 11
3611: PPUSH
3612: CALL_OW 12
3616: ARRAY
3617: ST_TO_ADDR
// third_nation = [ 1 , 2 , 3 ] diff side_nations ;
3618: LD_ADDR_EXP 48
3622: PUSH
3623: LD_INT 1
3625: PUSH
3626: LD_INT 2
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: PUSH
3637: LD_EXP 44
3641: DIFF
3642: ST_TO_ADDR
// third_nation = third_nation [ Rand ( 1 , third_nation ) ] ;
3643: LD_ADDR_EXP 48
3647: PUSH
3648: LD_EXP 48
3652: PUSH
3653: LD_INT 1
3655: PPUSH
3656: LD_EXP 48
3660: PPUSH
3661: CALL_OW 12
3665: ARRAY
3666: ST_TO_ADDR
// end ; BuildUpAreas := [ BuildUp1 , BuildUp2 ] ;
3667: LD_ADDR_EXP 65
3671: PUSH
3672: LD_INT 26
3674: PUSH
3675: LD_INT 27
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: ST_TO_ADDR
// end ;
3682: LD_VAR 0 1
3686: RET
// function prepare_map_coordinates ; var side , dep2 , br2 , dep1 , br1 , lab , fac , arm , pplant , un , i , k11 , k12 , k21 , k22 ; begin
3687: LD_INT 0
3689: PPUSH
3690: PPUSH
3691: PPUSH
3692: PPUSH
3693: PPUSH
3694: PPUSH
3695: PPUSH
3696: PPUSH
3697: PPUSH
3698: PPUSH
3699: PPUSH
3700: PPUSH
3701: PPUSH
3702: PPUSH
3703: PPUSH
3704: PPUSH
// start_def = [ ] ;
3705: LD_ADDR_EXP 49
3709: PUSH
3710: EMPTY
3711: ST_TO_ADDR
// depots_def = [ ] ;
3712: LD_ADDR_EXP 50
3716: PUSH
3717: EMPTY
3718: ST_TO_ADDR
// breastworks_def = [ ] ;
3719: LD_ADDR_EXP 51
3723: PUSH
3724: EMPTY
3725: ST_TO_ADDR
// labs_def = [ ] ;
3726: LD_ADDR_EXP 52
3730: PUSH
3731: EMPTY
3732: ST_TO_ADDR
// factories_def = [ ] ;
3733: LD_ADDR_EXP 53
3737: PUSH
3738: EMPTY
3739: ST_TO_ADDR
// armories_def = [ ] ;
3740: LD_ADDR_EXP 54
3744: PUSH
3745: EMPTY
3746: ST_TO_ADDR
// pplants_def = [ ] ;
3747: LD_ADDR_EXP 55
3751: PUSH
3752: EMPTY
3753: ST_TO_ADDR
// deposits_def = [ ] ;
3754: LD_ADDR_EXP 56
3758: PUSH
3759: EMPTY
3760: ST_TO_ADDR
// k11 := Rand ( 1 , 2 ) ;
3761: LD_ADDR_VAR 0 13
3765: PUSH
3766: LD_INT 1
3768: PPUSH
3769: LD_INT 2
3771: PPUSH
3772: CALL_OW 12
3776: ST_TO_ADDR
// k12 := Rand ( 1 , 2 ) ;
3777: LD_ADDR_VAR 0 14
3781: PUSH
3782: LD_INT 1
3784: PPUSH
3785: LD_INT 2
3787: PPUSH
3788: CALL_OW 12
3792: ST_TO_ADDR
// k21 := Rand ( 1 , 2 ) ;
3793: LD_ADDR_VAR 0 15
3797: PUSH
3798: LD_INT 1
3800: PPUSH
3801: LD_INT 2
3803: PPUSH
3804: CALL_OW 12
3808: ST_TO_ADDR
// k22 := Rand ( 1 , 2 ) ;
3809: LD_ADDR_VAR 0 16
3813: PUSH
3814: LD_INT 1
3816: PPUSH
3817: LD_INT 2
3819: PPUSH
3820: CALL_OW 12
3824: ST_TO_ADDR
// deposits_def := [ [ [ [ Res111 , Res112 ] [ k11 ] , [ Res111 , Res112 ] [ 3 - k11 ] ] , [ [ Res121 , Res122 ] [ k12 ] , [ Res121 , Res122 ] [ 3 - k12 ] ] ] , [ [ [ Res211 , Res212 ] [ k21 ] , [ Res211 , Res212 ] [ 3 - k21 ] ] , [ [ Res221 , Res222 ] [ k22 ] , [ Res221 , Res222 ] [ 3 - k22 ] ] ] ] ;
3825: LD_ADDR_EXP 56
3829: PUSH
3830: LD_INT 4
3832: PUSH
3833: LD_INT 5
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PUSH
3840: LD_VAR 0 13
3844: ARRAY
3845: PUSH
3846: LD_INT 4
3848: PUSH
3849: LD_INT 5
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PUSH
3856: LD_INT 3
3858: PUSH
3859: LD_VAR 0 13
3863: MINUS
3864: ARRAY
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: PUSH
3870: LD_INT 6
3872: PUSH
3873: LD_INT 7
3875: PUSH
3876: EMPTY
3877: LIST
3878: LIST
3879: PUSH
3880: LD_VAR 0 14
3884: ARRAY
3885: PUSH
3886: LD_INT 6
3888: PUSH
3889: LD_INT 7
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: PUSH
3896: LD_INT 3
3898: PUSH
3899: LD_VAR 0 14
3903: MINUS
3904: ARRAY
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: PUSH
3914: LD_INT 8
3916: PUSH
3917: LD_INT 9
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: PUSH
3924: LD_VAR 0 15
3928: ARRAY
3929: PUSH
3930: LD_INT 8
3932: PUSH
3933: LD_INT 9
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: PUSH
3940: LD_INT 3
3942: PUSH
3943: LD_VAR 0 15
3947: MINUS
3948: ARRAY
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: LD_INT 10
3956: PUSH
3957: LD_INT 11
3959: PUSH
3960: EMPTY
3961: LIST
3962: LIST
3963: PUSH
3964: LD_VAR 0 16
3968: ARRAY
3969: PUSH
3970: LD_INT 10
3972: PUSH
3973: LD_INT 11
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: PUSH
3980: LD_INT 3
3982: PUSH
3983: LD_VAR 0 16
3987: MINUS
3988: ARRAY
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: PUSH
3994: EMPTY
3995: LIST
3996: LIST
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: ST_TO_ADDR
// for side := 1 to 2 do
4002: LD_ADDR_VAR 0 2
4006: PUSH
4007: DOUBLE
4008: LD_INT 1
4010: DEC
4011: ST_TO_ADDR
4012: LD_INT 2
4014: PUSH
4015: FOR_TO
4016: IFFALSE 5148
// begin dep1 := side * 10 - 9 ;
4018: LD_ADDR_VAR 0 5
4022: PUSH
4023: LD_VAR 0 2
4027: PUSH
4028: LD_INT 10
4030: MUL
4031: PUSH
4032: LD_INT 9
4034: MINUS
4035: ST_TO_ADDR
// dep2 := 20 + side * 4 - 3 ;
4036: LD_ADDR_VAR 0 3
4040: PUSH
4041: LD_INT 20
4043: PUSH
4044: LD_VAR 0 2
4048: PUSH
4049: LD_INT 4
4051: MUL
4052: PLUS
4053: PUSH
4054: LD_INT 3
4056: MINUS
4057: ST_TO_ADDR
// br1 := [ side * 10 - 8 , side * 10 - 7 , side * 10 - 6 , side * 10 - 5 ] ;
4058: LD_ADDR_VAR 0 6
4062: PUSH
4063: LD_VAR 0 2
4067: PUSH
4068: LD_INT 10
4070: MUL
4071: PUSH
4072: LD_INT 8
4074: MINUS
4075: PUSH
4076: LD_VAR 0 2
4080: PUSH
4081: LD_INT 10
4083: MUL
4084: PUSH
4085: LD_INT 7
4087: MINUS
4088: PUSH
4089: LD_VAR 0 2
4093: PUSH
4094: LD_INT 10
4096: MUL
4097: PUSH
4098: LD_INT 6
4100: MINUS
4101: PUSH
4102: LD_VAR 0 2
4106: PUSH
4107: LD_INT 10
4109: MUL
4110: PUSH
4111: LD_INT 5
4113: MINUS
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: ST_TO_ADDR
// br2 := [ 20 + side * 4 - 2 , 20 + side * 4 - 1 , 20 + side * 4 ] ;
4121: LD_ADDR_VAR 0 4
4125: PUSH
4126: LD_INT 20
4128: PUSH
4129: LD_VAR 0 2
4133: PUSH
4134: LD_INT 4
4136: MUL
4137: PLUS
4138: PUSH
4139: LD_INT 2
4141: MINUS
4142: PUSH
4143: LD_INT 20
4145: PUSH
4146: LD_VAR 0 2
4150: PUSH
4151: LD_INT 4
4153: MUL
4154: PLUS
4155: PUSH
4156: LD_INT 1
4158: MINUS
4159: PUSH
4160: LD_INT 20
4162: PUSH
4163: LD_VAR 0 2
4167: PUSH
4168: LD_INT 4
4170: MUL
4171: PLUS
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: LIST
4177: ST_TO_ADDR
// lab := side * 10 - 4 ;
4178: LD_ADDR_VAR 0 7
4182: PUSH
4183: LD_VAR 0 2
4187: PUSH
4188: LD_INT 10
4190: MUL
4191: PUSH
4192: LD_INT 4
4194: MINUS
4195: ST_TO_ADDR
// fac := side * 10 - 3 ;
4196: LD_ADDR_VAR 0 8
4200: PUSH
4201: LD_VAR 0 2
4205: PUSH
4206: LD_INT 10
4208: MUL
4209: PUSH
4210: LD_INT 3
4212: MINUS
4213: ST_TO_ADDR
// arm := side * 10 - 2 ;
4214: LD_ADDR_VAR 0 9
4218: PUSH
4219: LD_VAR 0 2
4223: PUSH
4224: LD_INT 10
4226: MUL
4227: PUSH
4228: LD_INT 2
4230: MINUS
4231: ST_TO_ADDR
// pplant := [ side * 10 - 1 , side * 10 ] ;
4232: LD_ADDR_VAR 0 10
4236: PUSH
4237: LD_VAR 0 2
4241: PUSH
4242: LD_INT 10
4244: MUL
4245: PUSH
4246: LD_INT 1
4248: MINUS
4249: PUSH
4250: LD_VAR 0 2
4254: PUSH
4255: LD_INT 10
4257: MUL
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: ST_TO_ADDR
// depots_def := depots_def ^ [ [ [ GetX ( dep1 ) , GetY ( dep1 ) , GetDir ( dep1 ) ] , [ GetX ( dep2 ) , GetY ( dep2 ) , GetDir ( dep2 ) ] ] ] ;
4263: LD_ADDR_EXP 50
4267: PUSH
4268: LD_EXP 50
4272: PUSH
4273: LD_VAR 0 5
4277: PPUSH
4278: CALL_OW 250
4282: PUSH
4283: LD_VAR 0 5
4287: PPUSH
4288: CALL_OW 251
4292: PUSH
4293: LD_VAR 0 5
4297: PPUSH
4298: CALL_OW 254
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: LIST
4307: PUSH
4308: LD_VAR 0 3
4312: PPUSH
4313: CALL_OW 250
4317: PUSH
4318: LD_VAR 0 3
4322: PPUSH
4323: CALL_OW 251
4327: PUSH
4328: LD_VAR 0 3
4332: PPUSH
4333: CALL_OW 254
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PUSH
4347: EMPTY
4348: LIST
4349: ADD
4350: ST_TO_ADDR
// start_def := start_def ^ [ [ [ ShiftX ( GetX ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) ] , [ ShiftX ( GetX ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) ] ] ] ;
4351: LD_ADDR_EXP 49
4355: PUSH
4356: LD_EXP 49
4360: PUSH
4361: LD_VAR 0 5
4365: PPUSH
4366: CALL_OW 250
4370: PPUSH
4371: LD_VAR 0 5
4375: PPUSH
4376: CALL_OW 254
4380: PUSH
4381: LD_INT 6
4383: MOD
4384: PPUSH
4385: LD_INT 6
4387: PPUSH
4388: CALL_OW 272
4392: PUSH
4393: LD_VAR 0 5
4397: PPUSH
4398: CALL_OW 251
4402: PPUSH
4403: LD_VAR 0 5
4407: PPUSH
4408: CALL_OW 254
4412: PUSH
4413: LD_INT 6
4415: MOD
4416: PPUSH
4417: LD_INT 6
4419: PPUSH
4420: CALL_OW 273
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PUSH
4429: LD_VAR 0 3
4433: PPUSH
4434: CALL_OW 250
4438: PPUSH
4439: LD_VAR 0 3
4443: PPUSH
4444: CALL_OW 254
4448: PUSH
4449: LD_INT 6
4451: MOD
4452: PPUSH
4453: LD_INT 6
4455: PPUSH
4456: CALL_OW 272
4460: PUSH
4461: LD_VAR 0 3
4465: PPUSH
4466: CALL_OW 251
4470: PPUSH
4471: LD_VAR 0 3
4475: PPUSH
4476: CALL_OW 254
4480: PUSH
4481: LD_INT 6
4483: MOD
4484: PPUSH
4485: LD_INT 6
4487: PPUSH
4488: CALL_OW 273
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: PUSH
4501: EMPTY
4502: LIST
4503: ADD
4504: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ [ GetX ( br1 [ 1 ] ) , GetY ( br1 [ 1 ] ) , GetDir ( br1 [ 1 ] ) ] , [ GetX ( br1 [ 2 ] ) , GetY ( br1 [ 2 ] ) , GetDir ( br1 [ 2 ] ) ] , [ GetX ( br1 [ 3 ] ) , GetY ( br1 [ 3 ] ) , GetDir ( br1 [ 3 ] ) ] , [ GetX ( br1 [ 4 ] ) , GetY ( br1 [ 4 ] ) , GetDir ( br1 [ 4 ] ) ] ] , [ [ GetX ( br2 [ 1 ] ) , GetY ( br2 [ 1 ] ) , GetDir ( br2 [ 1 ] ) ] , [ GetX ( br2 [ 2 ] ) , GetY ( br2 [ 2 ] ) , GetDir ( br2 [ 2 ] ) ] , [ GetX ( br2 [ 3 ] ) , GetY ( br2 [ 3 ] ) , GetDir ( br2 [ 3 ] ) ] ] ] ] ;
4505: LD_ADDR_EXP 51
4509: PUSH
4510: LD_EXP 51
4514: PUSH
4515: LD_VAR 0 6
4519: PUSH
4520: LD_INT 1
4522: ARRAY
4523: PPUSH
4524: CALL_OW 250
4528: PUSH
4529: LD_VAR 0 6
4533: PUSH
4534: LD_INT 1
4536: ARRAY
4537: PPUSH
4538: CALL_OW 251
4542: PUSH
4543: LD_VAR 0 6
4547: PUSH
4548: LD_INT 1
4550: ARRAY
4551: PPUSH
4552: CALL_OW 254
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: LIST
4561: PUSH
4562: LD_VAR 0 6
4566: PUSH
4567: LD_INT 2
4569: ARRAY
4570: PPUSH
4571: CALL_OW 250
4575: PUSH
4576: LD_VAR 0 6
4580: PUSH
4581: LD_INT 2
4583: ARRAY
4584: PPUSH
4585: CALL_OW 251
4589: PUSH
4590: LD_VAR 0 6
4594: PUSH
4595: LD_INT 2
4597: ARRAY
4598: PPUSH
4599: CALL_OW 254
4603: PUSH
4604: EMPTY
4605: LIST
4606: LIST
4607: LIST
4608: PUSH
4609: LD_VAR 0 6
4613: PUSH
4614: LD_INT 3
4616: ARRAY
4617: PPUSH
4618: CALL_OW 250
4622: PUSH
4623: LD_VAR 0 6
4627: PUSH
4628: LD_INT 3
4630: ARRAY
4631: PPUSH
4632: CALL_OW 251
4636: PUSH
4637: LD_VAR 0 6
4641: PUSH
4642: LD_INT 3
4644: ARRAY
4645: PPUSH
4646: CALL_OW 254
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: LIST
4655: PUSH
4656: LD_VAR 0 6
4660: PUSH
4661: LD_INT 4
4663: ARRAY
4664: PPUSH
4665: CALL_OW 250
4669: PUSH
4670: LD_VAR 0 6
4674: PUSH
4675: LD_INT 4
4677: ARRAY
4678: PPUSH
4679: CALL_OW 251
4683: PUSH
4684: LD_VAR 0 6
4688: PUSH
4689: LD_INT 4
4691: ARRAY
4692: PPUSH
4693: CALL_OW 254
4697: PUSH
4698: EMPTY
4699: LIST
4700: LIST
4701: LIST
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: PUSH
4709: LD_VAR 0 4
4713: PUSH
4714: LD_INT 1
4716: ARRAY
4717: PPUSH
4718: CALL_OW 250
4722: PUSH
4723: LD_VAR 0 4
4727: PUSH
4728: LD_INT 1
4730: ARRAY
4731: PPUSH
4732: CALL_OW 251
4736: PUSH
4737: LD_VAR 0 4
4741: PUSH
4742: LD_INT 1
4744: ARRAY
4745: PPUSH
4746: CALL_OW 254
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: LIST
4755: PUSH
4756: LD_VAR 0 4
4760: PUSH
4761: LD_INT 2
4763: ARRAY
4764: PPUSH
4765: CALL_OW 250
4769: PUSH
4770: LD_VAR 0 4
4774: PUSH
4775: LD_INT 2
4777: ARRAY
4778: PPUSH
4779: CALL_OW 251
4783: PUSH
4784: LD_VAR 0 4
4788: PUSH
4789: LD_INT 2
4791: ARRAY
4792: PPUSH
4793: CALL_OW 254
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: LIST
4802: PUSH
4803: LD_VAR 0 4
4807: PUSH
4808: LD_INT 3
4810: ARRAY
4811: PPUSH
4812: CALL_OW 250
4816: PUSH
4817: LD_VAR 0 4
4821: PUSH
4822: LD_INT 3
4824: ARRAY
4825: PPUSH
4826: CALL_OW 251
4830: PUSH
4831: LD_VAR 0 4
4835: PUSH
4836: LD_INT 3
4838: ARRAY
4839: PPUSH
4840: CALL_OW 254
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: LIST
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: LIST
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: EMPTY
4860: LIST
4861: ADD
4862: ST_TO_ADDR
// labs_def := labs_def ^ [ [ [ GetX ( lab ) , GetY ( lab ) , GetDir ( lab ) ] , [ ] ] ] ;
4863: LD_ADDR_EXP 52
4867: PUSH
4868: LD_EXP 52
4872: PUSH
4873: LD_VAR 0 7
4877: PPUSH
4878: CALL_OW 250
4882: PUSH
4883: LD_VAR 0 7
4887: PPUSH
4888: CALL_OW 251
4892: PUSH
4893: LD_VAR 0 7
4897: PPUSH
4898: CALL_OW 254
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: LIST
4907: PUSH
4908: EMPTY
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: PUSH
4914: EMPTY
4915: LIST
4916: ADD
4917: ST_TO_ADDR
// factories_def := factories_def ^ [ [ [ GetX ( fac ) , GetY ( fac ) , GetDir ( fac ) ] , [ ] ] ] ;
4918: LD_ADDR_EXP 53
4922: PUSH
4923: LD_EXP 53
4927: PUSH
4928: LD_VAR 0 8
4932: PPUSH
4933: CALL_OW 250
4937: PUSH
4938: LD_VAR 0 8
4942: PPUSH
4943: CALL_OW 251
4947: PUSH
4948: LD_VAR 0 8
4952: PPUSH
4953: CALL_OW 254
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: LIST
4962: PUSH
4963: EMPTY
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: PUSH
4969: EMPTY
4970: LIST
4971: ADD
4972: ST_TO_ADDR
// armories_def := armories_def ^ [ [ [ GetX ( arm ) , GetY ( arm ) , GetDir ( arm ) ] , [ ] ] ] ;
4973: LD_ADDR_EXP 54
4977: PUSH
4978: LD_EXP 54
4982: PUSH
4983: LD_VAR 0 9
4987: PPUSH
4988: CALL_OW 250
4992: PUSH
4993: LD_VAR 0 9
4997: PPUSH
4998: CALL_OW 251
5002: PUSH
5003: LD_VAR 0 9
5007: PPUSH
5008: CALL_OW 254
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: LIST
5017: PUSH
5018: EMPTY
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: EMPTY
5025: LIST
5026: ADD
5027: ST_TO_ADDR
// pplants_def := pplants_def ^ [ [ [ [ GetX ( pplant [ 1 ] ) , GetY ( pplant [ 1 ] ) , GetDir ( pplant [ 1 ] ) ] , [ GetX ( pplant [ 2 ] ) , GetY ( pplant [ 2 ] ) , GetDir ( pplant [ 2 ] ) ] ] , [ ] ] ] ;
5028: LD_ADDR_EXP 55
5032: PUSH
5033: LD_EXP 55
5037: PUSH
5038: LD_VAR 0 10
5042: PUSH
5043: LD_INT 1
5045: ARRAY
5046: PPUSH
5047: CALL_OW 250
5051: PUSH
5052: LD_VAR 0 10
5056: PUSH
5057: LD_INT 1
5059: ARRAY
5060: PPUSH
5061: CALL_OW 251
5065: PUSH
5066: LD_VAR 0 10
5070: PUSH
5071: LD_INT 1
5073: ARRAY
5074: PPUSH
5075: CALL_OW 254
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: PUSH
5085: LD_VAR 0 10
5089: PUSH
5090: LD_INT 2
5092: ARRAY
5093: PPUSH
5094: CALL_OW 250
5098: PUSH
5099: LD_VAR 0 10
5103: PUSH
5104: LD_INT 2
5106: ARRAY
5107: PPUSH
5108: CALL_OW 251
5112: PUSH
5113: LD_VAR 0 10
5117: PUSH
5118: LD_INT 2
5120: ARRAY
5121: PPUSH
5122: CALL_OW 254
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: LIST
5131: PUSH
5132: EMPTY
5133: LIST
5134: LIST
5135: PUSH
5136: EMPTY
5137: PUSH
5138: EMPTY
5139: LIST
5140: LIST
5141: PUSH
5142: EMPTY
5143: LIST
5144: ADD
5145: ST_TO_ADDR
// end ;
5146: GO 4015
5148: POP
5149: POP
// for un := 1 to 28 do
5150: LD_ADDR_VAR 0 11
5154: PUSH
5155: DOUBLE
5156: LD_INT 1
5158: DEC
5159: ST_TO_ADDR
5160: LD_INT 28
5162: PUSH
5163: FOR_TO
5164: IFFALSE 5177
// DestroyUnit ( un ) ;
5166: LD_VAR 0 11
5170: PPUSH
5171: CALL_OW 65
5175: GO 5163
5177: POP
5178: POP
// end ;
5179: LD_VAR 0 1
5183: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
5184: LD_INT 0
5186: PPUSH
5187: PPUSH
5188: PPUSH
5189: PPUSH
// result := [ ] ;
5190: LD_ADDR_VAR 0 7
5194: PUSH
5195: EMPTY
5196: ST_TO_ADDR
// for i := 1 to count do
5197: LD_ADDR_VAR 0 8
5201: PUSH
5202: DOUBLE
5203: LD_INT 1
5205: DEC
5206: ST_TO_ADDR
5207: LD_VAR 0 1
5211: PUSH
5212: FOR_TO
5213: IFFALSE 5631
// begin uc_direction := Rand ( 0 , 5 ) ;
5215: LD_ADDR_OWVAR 24
5219: PUSH
5220: LD_INT 0
5222: PPUSH
5223: LD_INT 5
5225: PPUSH
5226: CALL_OW 12
5230: ST_TO_ADDR
// if commander then
5231: LD_LOC 1
5235: IFFALSE 5344
// begin hc_name := mp_sides_players_names [ uc_side ] ;
5237: LD_ADDR_OWVAR 26
5241: PUSH
5242: LD_OWVAR 19
5246: PUSH
5247: LD_OWVAR 20
5251: ARRAY
5252: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
5253: LD_INT 1
5255: PPUSH
5256: LD_INT 2
5258: PPUSH
5259: CALL_OW 12
5263: PPUSH
5264: LD_VAR 0 2
5268: PPUSH
5269: LD_EXP 29
5273: PUSH
5274: LD_INT 2
5276: PLUS
5277: PPUSH
5278: CALL_OW 380
// hc_importance := 105 ;
5282: LD_ADDR_OWVAR 32
5286: PUSH
5287: LD_INT 105
5289: ST_TO_ADDR
// commander := false ;
5290: LD_ADDR_LOC 1
5294: PUSH
5295: LD_INT 0
5297: ST_TO_ADDR
// if Multiplayer then
5298: LD_OWVAR 4
5302: IFFALSE 5342
// begin hc_gallery := MULTIAVATARS ;
5304: LD_ADDR_OWVAR 33
5308: PUSH
5309: LD_STRING MULTIAVATARS
5311: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
5312: LD_ADDR_OWVAR 34
5316: PUSH
5317: LD_OWVAR 20
5321: PPUSH
5322: CALL_OW 525
5326: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
5327: LD_ADDR_OWVAR 27
5331: PUSH
5332: LD_OWVAR 20
5336: PPUSH
5337: CALL_OW 526
5341: ST_TO_ADDR
// end ; end else
5342: GO 5407
// begin hc_name :=  ;
5344: LD_ADDR_OWVAR 26
5348: PUSH
5349: LD_STRING 
5351: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
5352: LD_INT 1
5354: PPUSH
5355: LD_INT 2
5357: PPUSH
5358: CALL_OW 12
5362: PPUSH
5363: LD_VAR 0 2
5367: PPUSH
5368: LD_EXP 29
5372: PPUSH
5373: CALL_OW 380
// hc_importance := 0 ;
5377: LD_ADDR_OWVAR 32
5381: PUSH
5382: LD_INT 0
5384: ST_TO_ADDR
// if Multiplayer then
5385: LD_OWVAR 4
5389: IFFALSE 5407
// begin hc_gallery :=  ;
5391: LD_ADDR_OWVAR 33
5395: PUSH
5396: LD_STRING 
5398: ST_TO_ADDR
// hc_face_number := 0 ;
5399: LD_ADDR_OWVAR 34
5403: PUSH
5404: LD_INT 0
5406: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
5407: LD_ADDR_VAR 0 10
5411: PUSH
5412: CALL_OW 44
5416: ST_TO_ADDR
// if global_defined then
5417: LD_LOC 3
5421: IFFALSE 5561
// begin if ( cl = class_soldier ) then
5423: LD_VAR 0 2
5427: PUSH
5428: LD_INT 1
5430: EQUAL
5431: IFFALSE 5451
// j := i + soldiers_created else
5433: LD_ADDR_VAR 0 9
5437: PUSH
5438: LD_VAR 0 8
5442: PUSH
5443: LD_LOC 4
5447: PLUS
5448: ST_TO_ADDR
5449: GO 5461
// j := i ;
5451: LD_ADDR_VAR 0 9
5455: PUSH
5456: LD_VAR 0 8
5460: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
5461: LD_LOC 2
5465: PUSH
5466: LD_VAR 0 2
5470: ARRAY
5471: PUSH
5472: LD_VAR 0 9
5476: ARRAY
5477: PPUSH
5478: LD_VAR 0 10
5482: PPUSH
5483: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
5487: LD_VAR 0 10
5491: PPUSH
5492: LD_INT 2
5494: PPUSH
5495: LD_LOC 2
5499: PUSH
5500: LD_VAR 0 2
5504: ARRAY
5505: PUSH
5506: LD_VAR 0 9
5510: ARRAY
5511: PPUSH
5512: LD_INT 2
5514: PPUSH
5515: CALL_OW 260
5519: PPUSH
5520: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
5524: LD_VAR 0 10
5528: PPUSH
5529: LD_INT 1
5531: PPUSH
5532: LD_LOC 2
5536: PUSH
5537: LD_VAR 0 2
5541: ARRAY
5542: PUSH
5543: LD_VAR 0 9
5547: ARRAY
5548: PPUSH
5549: LD_INT 1
5551: PPUSH
5552: CALL_OW 260
5556: PPUSH
5557: CALL_OW 239
// end ; if building then
5561: LD_VAR 0 6
5565: IFFALSE 5583
// PlaceHumanInUnit ( un , building ) else
5567: LD_VAR 0 10
5571: PPUSH
5572: LD_VAR 0 6
5576: PPUSH
5577: CALL_OW 52
5581: GO 5610
// PlaceUnitXYR ( un , x , y , r , false ) ;
5583: LD_VAR 0 10
5587: PPUSH
5588: LD_VAR 0 3
5592: PPUSH
5593: LD_VAR 0 4
5597: PPUSH
5598: LD_VAR 0 5
5602: PPUSH
5603: LD_INT 0
5605: PPUSH
5606: CALL_OW 50
// result := result ^ [ un ] ;
5610: LD_ADDR_VAR 0 7
5614: PUSH
5615: LD_VAR 0 7
5619: PUSH
5620: LD_VAR 0 10
5624: PUSH
5625: EMPTY
5626: LIST
5627: ADD
5628: ST_TO_ADDR
// end ;
5629: GO 5212
5631: POP
5632: POP
// if not global_defined then
5633: LD_LOC 3
5637: NOT
5638: IFFALSE 5716
// if ( global_units >= cl ) then
5640: LD_LOC 2
5644: PUSH
5645: LD_VAR 0 2
5649: GREATEREQUAL
5650: IFFALSE 5691
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
5652: LD_ADDR_LOC 2
5656: PUSH
5657: LD_LOC 2
5661: PPUSH
5662: LD_VAR 0 2
5666: PPUSH
5667: LD_LOC 2
5671: PUSH
5672: LD_VAR 0 2
5676: ARRAY
5677: PUSH
5678: LD_VAR 0 7
5682: ADD
5683: PPUSH
5684: CALL_OW 1
5688: ST_TO_ADDR
5689: GO 5716
// global_units := Replace ( global_units , cl , result ) ;
5691: LD_ADDR_LOC 2
5695: PUSH
5696: LD_LOC 2
5700: PPUSH
5701: LD_VAR 0 2
5705: PPUSH
5706: LD_VAR 0 7
5710: PPUSH
5711: CALL_OW 1
5715: ST_TO_ADDR
// if commander then
5716: LD_LOC 1
5720: IFFALSE 5767
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
5722: LD_ADDR_EXP 57
5726: PUSH
5727: LD_EXP 57
5731: PPUSH
5732: LD_OWVAR 20
5736: PPUSH
5737: LD_EXP 57
5741: PUSH
5742: LD_OWVAR 20
5746: ARRAY
5747: PUSH
5748: LD_VAR 0 10
5752: ADD
5753: PPUSH
5754: CALL_OW 1
5758: ST_TO_ADDR
// commander := false ;
5759: LD_ADDR_LOC 1
5763: PUSH
5764: LD_INT 0
5766: ST_TO_ADDR
// end ; end ;
5767: LD_VAR 0 7
5771: RET
// function prepare_side_base ( side , base ) ; var pos , x , y , dir , i , r , un , br , dep , lab , fact , arm , mode , coord , max ; begin
5772: LD_INT 0
5774: PPUSH
5775: PPUSH
5776: PPUSH
5777: PPUSH
5778: PPUSH
5779: PPUSH
5780: PPUSH
5781: PPUSH
5782: PPUSH
5783: PPUSH
5784: PPUSH
5785: PPUSH
5786: PPUSH
5787: PPUSH
5788: PPUSH
5789: PPUSH
// pos := Side_Positions [ side ] ;
5790: LD_ADDR_VAR 0 4
5794: PUSH
5795: LD_EXP 43
5799: PUSH
5800: LD_VAR 0 1
5804: ARRAY
5805: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
5806: LD_ADDR_OWVAR 21
5810: PUSH
5811: LD_EXP 44
5815: PUSH
5816: LD_VAR 0 1
5820: ARRAY
5821: ST_TO_ADDR
// uc_side := side ;
5822: LD_ADDR_OWVAR 20
5826: PUSH
5827: LD_VAR 0 1
5831: ST_TO_ADDR
// x := depots_def [ pos ] [ base ] [ 1 ] ;
5832: LD_ADDR_VAR 0 5
5836: PUSH
5837: LD_EXP 50
5841: PUSH
5842: LD_VAR 0 4
5846: ARRAY
5847: PUSH
5848: LD_VAR 0 2
5852: ARRAY
5853: PUSH
5854: LD_INT 1
5856: ARRAY
5857: ST_TO_ADDR
// y := depots_def [ pos ] [ base ] [ 2 ] ;
5858: LD_ADDR_VAR 0 6
5862: PUSH
5863: LD_EXP 50
5867: PUSH
5868: LD_VAR 0 4
5872: ARRAY
5873: PUSH
5874: LD_VAR 0 2
5878: ARRAY
5879: PUSH
5880: LD_INT 2
5882: ARRAY
5883: ST_TO_ADDR
// dir := depots_def [ pos ] [ base ] [ 3 ] ;
5884: LD_ADDR_VAR 0 7
5888: PUSH
5889: LD_EXP 50
5893: PUSH
5894: LD_VAR 0 4
5898: ARRAY
5899: PUSH
5900: LD_VAR 0 2
5904: ARRAY
5905: PUSH
5906: LD_INT 3
5908: ARRAY
5909: ST_TO_ADDR
// if is_depot [ base ] then
5910: LD_EXP 20
5914: PUSH
5915: LD_VAR 0 2
5919: ARRAY
5920: IFFALSE 6097
// begin if is_depot [ base ] = 1 then
5922: LD_EXP 20
5926: PUSH
5927: LD_VAR 0 2
5931: ARRAY
5932: PUSH
5933: LD_INT 1
5935: EQUAL
5936: IFFALSE 5948
// bc_type = b_depot else
5938: LD_ADDR_OWVAR 42
5942: PUSH
5943: LD_INT 0
5945: ST_TO_ADDR
5946: GO 5956
// bc_type = b_warehouse ;
5948: LD_ADDR_OWVAR 42
5952: PUSH
5953: LD_INT 1
5955: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
5956: LD_ADDR_VAR 0 12
5960: PUSH
5961: LD_VAR 0 5
5965: PPUSH
5966: LD_VAR 0 6
5970: PPUSH
5971: LD_VAR 0 7
5975: PPUSH
5976: CALL_OW 47
5980: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
5981: LD_VAR 0 12
5985: PPUSH
5986: LD_STRING @
5988: PUSH
5989: LD_VAR 0 1
5993: STR
5994: PPUSH
5995: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ base ] [ mat_cans ] ) ;
5999: LD_VAR 0 12
6003: PPUSH
6004: CALL_OW 274
6008: PPUSH
6009: LD_INT 1
6011: PPUSH
6012: LD_EXP 31
6016: PUSH
6017: LD_VAR 0 2
6021: ARRAY
6022: PUSH
6023: LD_INT 1
6025: ARRAY
6026: PPUSH
6027: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ base ] [ mat_oil ] ) ;
6031: LD_VAR 0 12
6035: PPUSH
6036: CALL_OW 274
6040: PPUSH
6041: LD_INT 2
6043: PPUSH
6044: LD_EXP 31
6048: PUSH
6049: LD_VAR 0 2
6053: ARRAY
6054: PUSH
6055: LD_INT 2
6057: ARRAY
6058: PPUSH
6059: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ base ] [ mat_siberit ] ) ;
6063: LD_VAR 0 12
6067: PPUSH
6068: CALL_OW 274
6072: PPUSH
6073: LD_INT 3
6075: PPUSH
6076: LD_EXP 31
6080: PUSH
6081: LD_VAR 0 2
6085: ARRAY
6086: PUSH
6087: LD_INT 3
6089: ARRAY
6090: PPUSH
6091: CALL_OW 277
// end else
6095: GO 6247
// begin for i := 1 to 3 do
6097: LD_ADDR_VAR 0 8
6101: PUSH
6102: DOUBLE
6103: LD_INT 1
6105: DEC
6106: ST_TO_ADDR
6107: LD_INT 3
6109: PUSH
6110: FOR_TO
6111: IFFALSE 6245
// begin r := starting_resources [ base ] [ i ] ;
6113: LD_ADDR_VAR 0 9
6117: PUSH
6118: LD_EXP 31
6122: PUSH
6123: LD_VAR 0 2
6127: ARRAY
6128: PUSH
6129: LD_VAR 0 8
6133: ARRAY
6134: ST_TO_ADDR
// while r >= 10 do
6135: LD_VAR 0 9
6139: PUSH
6140: LD_INT 10
6142: GREATEREQUAL
6143: IFFALSE 6243
// if r > 50 then
6145: LD_VAR 0 9
6149: PUSH
6150: LD_INT 50
6152: GREATER
6153: IFFALSE 6199
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
6155: LD_VAR 0 8
6159: PPUSH
6160: LD_INT 5
6162: PPUSH
6163: LD_VAR 0 5
6167: PPUSH
6168: LD_VAR 0 6
6172: PPUSH
6173: LD_INT 4
6175: PPUSH
6176: LD_INT 0
6178: PPUSH
6179: CALL_OW 60
// r := r - 50 ;
6183: LD_ADDR_VAR 0 9
6187: PUSH
6188: LD_VAR 0 9
6192: PUSH
6193: LD_INT 50
6195: MINUS
6196: ST_TO_ADDR
// end else
6197: GO 6241
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
6199: LD_VAR 0 8
6203: PPUSH
6204: LD_VAR 0 9
6208: PUSH
6209: LD_INT 10
6211: DIV
6212: PPUSH
6213: LD_VAR 0 5
6217: PPUSH
6218: LD_VAR 0 6
6222: PPUSH
6223: LD_INT 4
6225: PPUSH
6226: LD_INT 0
6228: PPUSH
6229: CALL_OW 60
// r := 0 ;
6233: LD_ADDR_VAR 0 9
6237: PUSH
6238: LD_INT 0
6240: ST_TO_ADDR
// end ;
6241: GO 6135
// end ;
6243: GO 6110
6245: POP
6246: POP
// end ; if is_lab [ base ] then
6247: LD_EXP 24
6251: PUSH
6252: LD_VAR 0 2
6256: ARRAY
6257: IFFALSE 6398
// begin if is_lab [ base ] = 1 then
6259: LD_EXP 24
6263: PUSH
6264: LD_VAR 0 2
6268: ARRAY
6269: PUSH
6270: LD_INT 1
6272: EQUAL
6273: IFFALSE 6301
// begin bc_type = b_lab ;
6275: LD_ADDR_OWVAR 42
6279: PUSH
6280: LD_INT 6
6282: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
6283: LD_ADDR_OWVAR 44
6287: PUSH
6288: LD_INT 9
6290: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
6291: LD_ADDR_OWVAR 45
6295: PUSH
6296: LD_INT 9
6298: ST_TO_ADDR
// end else
6299: GO 6325
// begin bc_type = b_lab_full ;
6301: LD_ADDR_OWVAR 42
6305: PUSH
6306: LD_INT 8
6308: ST_TO_ADDR
// bc_kind1 = b_lab_siberium ;
6309: LD_ADDR_OWVAR 44
6313: PUSH
6314: LD_INT 11
6316: ST_TO_ADDR
// bc_kind2 = b_lab_weapon ;
6317: LD_ADDR_OWVAR 45
6321: PUSH
6322: LD_INT 10
6324: ST_TO_ADDR
// end ; lab := CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ base ] [ 1 ] , labs_def [ pos ] [ base ] [ 2 ] , labs_def [ pos ] [ base ] [ 3 ] ) ;
6325: LD_ADDR_VAR 0 13
6329: PUSH
6330: LD_EXP 52
6334: PUSH
6335: LD_VAR 0 4
6339: ARRAY
6340: PUSH
6341: LD_VAR 0 2
6345: ARRAY
6346: PUSH
6347: LD_INT 1
6349: ARRAY
6350: PPUSH
6351: LD_EXP 52
6355: PUSH
6356: LD_VAR 0 4
6360: ARRAY
6361: PUSH
6362: LD_VAR 0 2
6366: ARRAY
6367: PUSH
6368: LD_INT 2
6370: ARRAY
6371: PPUSH
6372: LD_EXP 52
6376: PUSH
6377: LD_VAR 0 4
6381: ARRAY
6382: PUSH
6383: LD_VAR 0 2
6387: ARRAY
6388: PUSH
6389: LD_INT 3
6391: ARRAY
6392: PPUSH
6393: CALL_OW 47
6397: ST_TO_ADDR
// end ; if is_fact [ base ] then
6398: LD_EXP 25
6402: PUSH
6403: LD_VAR 0 2
6407: ARRAY
6408: IFFALSE 6517
// begin if is_fact [ base ] = 1 then
6410: LD_EXP 25
6414: PUSH
6415: LD_VAR 0 2
6419: ARRAY
6420: PUSH
6421: LD_INT 1
6423: EQUAL
6424: IFFALSE 6436
// bc_type = b_workshop else
6426: LD_ADDR_OWVAR 42
6430: PUSH
6431: LD_INT 2
6433: ST_TO_ADDR
6434: GO 6444
// bc_type = b_factory ;
6436: LD_ADDR_OWVAR 42
6440: PUSH
6441: LD_INT 3
6443: ST_TO_ADDR
// fact := CreateAndPlaceBuildingXYD ( factories_def [ pos ] [ base ] [ 1 ] , factories_def [ pos ] [ base ] [ 2 ] , factories_def [ pos ] [ base ] [ 3 ] ) ;
6444: LD_ADDR_VAR 0 14
6448: PUSH
6449: LD_EXP 53
6453: PUSH
6454: LD_VAR 0 4
6458: ARRAY
6459: PUSH
6460: LD_VAR 0 2
6464: ARRAY
6465: PUSH
6466: LD_INT 1
6468: ARRAY
6469: PPUSH
6470: LD_EXP 53
6474: PUSH
6475: LD_VAR 0 4
6479: ARRAY
6480: PUSH
6481: LD_VAR 0 2
6485: ARRAY
6486: PUSH
6487: LD_INT 2
6489: ARRAY
6490: PPUSH
6491: LD_EXP 53
6495: PUSH
6496: LD_VAR 0 4
6500: ARRAY
6501: PUSH
6502: LD_VAR 0 2
6506: ARRAY
6507: PUSH
6508: LD_INT 3
6510: ARRAY
6511: PPUSH
6512: CALL_OW 47
6516: ST_TO_ADDR
// end ; if is_arm [ base ] then
6517: LD_EXP 26
6521: PUSH
6522: LD_VAR 0 2
6526: ARRAY
6527: IFFALSE 6636
// begin if is_arm [ base ] = 1 then
6529: LD_EXP 26
6533: PUSH
6534: LD_VAR 0 2
6538: ARRAY
6539: PUSH
6540: LD_INT 1
6542: EQUAL
6543: IFFALSE 6555
// bc_type = b_armoury else
6545: LD_ADDR_OWVAR 42
6549: PUSH
6550: LD_INT 4
6552: ST_TO_ADDR
6553: GO 6563
// bc_type = b_barracks ;
6555: LD_ADDR_OWVAR 42
6559: PUSH
6560: LD_INT 5
6562: ST_TO_ADDR
// arm := CreateAndPlaceBuildingXYD ( armories_def [ pos ] [ base ] [ 1 ] , armories_def [ pos ] [ base ] [ 2 ] , armories_def [ pos ] [ base ] [ 3 ] ) ;
6563: LD_ADDR_VAR 0 15
6567: PUSH
6568: LD_EXP 54
6572: PUSH
6573: LD_VAR 0 4
6577: ARRAY
6578: PUSH
6579: LD_VAR 0 2
6583: ARRAY
6584: PUSH
6585: LD_INT 1
6587: ARRAY
6588: PPUSH
6589: LD_EXP 54
6593: PUSH
6594: LD_VAR 0 4
6598: ARRAY
6599: PUSH
6600: LD_VAR 0 2
6604: ARRAY
6605: PUSH
6606: LD_INT 2
6608: ARRAY
6609: PPUSH
6610: LD_EXP 54
6614: PUSH
6615: LD_VAR 0 4
6619: ARRAY
6620: PUSH
6621: LD_VAR 0 2
6625: ARRAY
6626: PUSH
6627: LD_INT 3
6629: ARRAY
6630: PPUSH
6631: CALL_OW 47
6635: ST_TO_ADDR
// end ; for i := 1 to number_of_pplants [ base ] do
6636: LD_ADDR_VAR 0 8
6640: PUSH
6641: DOUBLE
6642: LD_INT 1
6644: DEC
6645: ST_TO_ADDR
6646: LD_EXP 22
6650: PUSH
6651: LD_VAR 0 2
6655: ARRAY
6656: PUSH
6657: FOR_TO
6658: IFFALSE 6755
// begin bc_type = b_oil_power ;
6660: LD_ADDR_OWVAR 42
6664: PUSH
6665: LD_INT 26
6667: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( pplants_def [ pos ] [ base ] [ i ] [ 1 ] , pplants_def [ pos ] [ base ] [ i ] [ 2 ] , pplants_def [ pos ] [ base ] [ i ] [ 3 ] ) ;
6668: LD_EXP 55
6672: PUSH
6673: LD_VAR 0 4
6677: ARRAY
6678: PUSH
6679: LD_VAR 0 2
6683: ARRAY
6684: PUSH
6685: LD_VAR 0 8
6689: ARRAY
6690: PUSH
6691: LD_INT 1
6693: ARRAY
6694: PPUSH
6695: LD_EXP 55
6699: PUSH
6700: LD_VAR 0 4
6704: ARRAY
6705: PUSH
6706: LD_VAR 0 2
6710: ARRAY
6711: PUSH
6712: LD_VAR 0 8
6716: ARRAY
6717: PUSH
6718: LD_INT 2
6720: ARRAY
6721: PPUSH
6722: LD_EXP 55
6726: PUSH
6727: LD_VAR 0 4
6731: ARRAY
6732: PUSH
6733: LD_VAR 0 2
6737: ARRAY
6738: PUSH
6739: LD_VAR 0 8
6743: ARRAY
6744: PUSH
6745: LD_INT 3
6747: ARRAY
6748: PPUSH
6749: CALL_OW 47
// end ;
6753: GO 6657
6755: POP
6756: POP
// for i := 1 to deposits [ base ] [ 1 ] do
6757: LD_ADDR_VAR 0 8
6761: PUSH
6762: DOUBLE
6763: LD_INT 1
6765: DEC
6766: ST_TO_ADDR
6767: LD_EXP 28
6771: PUSH
6772: LD_VAR 0 2
6776: ARRAY
6777: PUSH
6778: LD_INT 1
6780: ARRAY
6781: PUSH
6782: FOR_TO
6783: IFFALSE 6920
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i ] , false ) ;
6785: LD_ADDR_VAR 0 17
6789: PUSH
6790: LD_EXP 56
6794: PUSH
6795: LD_VAR 0 4
6799: ARRAY
6800: PUSH
6801: LD_VAR 0 2
6805: ARRAY
6806: PUSH
6807: LD_VAR 0 8
6811: ARRAY
6812: PPUSH
6813: LD_INT 0
6815: PPUSH
6816: CALL_OW 16
6820: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_oil ) ;
6821: LD_VAR 0 17
6825: PUSH
6826: LD_INT 1
6828: ARRAY
6829: PPUSH
6830: LD_VAR 0 17
6834: PUSH
6835: LD_INT 2
6837: ARRAY
6838: PPUSH
6839: LD_INT 2
6841: PPUSH
6842: CALL_OW 62
// if are_mines [ base ] then
6846: LD_EXP 23
6850: PUSH
6851: LD_VAR 0 2
6855: ARRAY
6856: IFFALSE 6918
// begin bc_type = b_oil_mine ;
6858: LD_ADDR_OWVAR 42
6862: PUSH
6863: LD_INT 29
6865: ST_TO_ADDR
// SetResourceVisibility ( coord [ 1 ] , coord [ 2 ] , uc_side ) ;
6866: LD_VAR 0 17
6870: PUSH
6871: LD_INT 1
6873: ARRAY
6874: PPUSH
6875: LD_VAR 0 17
6879: PUSH
6880: LD_INT 2
6882: ARRAY
6883: PPUSH
6884: LD_OWVAR 20
6888: PPUSH
6889: CALL_OW 441
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
6893: LD_VAR 0 17
6897: PUSH
6898: LD_INT 1
6900: ARRAY
6901: PPUSH
6902: LD_VAR 0 17
6906: PUSH
6907: LD_INT 2
6909: ARRAY
6910: PPUSH
6911: LD_INT 0
6913: PPUSH
6914: CALL_OW 47
// end ; end ;
6918: GO 6782
6920: POP
6921: POP
// for i := 1 to deposits [ base ] [ 2 ] do
6922: LD_ADDR_VAR 0 8
6926: PUSH
6927: DOUBLE
6928: LD_INT 1
6930: DEC
6931: ST_TO_ADDR
6932: LD_EXP 28
6936: PUSH
6937: LD_VAR 0 2
6941: ARRAY
6942: PUSH
6943: LD_INT 2
6945: ARRAY
6946: PUSH
6947: FOR_TO
6948: IFFALSE 7107
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i + deposits [ base ] [ 1 ] ] , false ) ;
6950: LD_ADDR_VAR 0 17
6954: PUSH
6955: LD_EXP 56
6959: PUSH
6960: LD_VAR 0 4
6964: ARRAY
6965: PUSH
6966: LD_VAR 0 2
6970: ARRAY
6971: PUSH
6972: LD_VAR 0 8
6976: PUSH
6977: LD_EXP 28
6981: PUSH
6982: LD_VAR 0 2
6986: ARRAY
6987: PUSH
6988: LD_INT 1
6990: ARRAY
6991: PLUS
6992: ARRAY
6993: PPUSH
6994: LD_INT 0
6996: PPUSH
6997: CALL_OW 16
7001: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_siberit ) ;
7002: LD_VAR 0 17
7006: PUSH
7007: LD_INT 1
7009: ARRAY
7010: PPUSH
7011: LD_VAR 0 17
7015: PUSH
7016: LD_INT 2
7018: ARRAY
7019: PPUSH
7020: LD_INT 3
7022: PPUSH
7023: CALL_OW 62
// if are_mines [ base ] and def_siberite_detection then
7027: LD_EXP 23
7031: PUSH
7032: LD_VAR 0 2
7036: ARRAY
7037: PUSH
7038: LD_EXP 8
7042: AND
7043: IFFALSE 7105
// begin bc_type = b_siberite_mine ;
7045: LD_ADDR_OWVAR 42
7049: PUSH
7050: LD_INT 30
7052: ST_TO_ADDR
// SetResourceVisibility ( coord [ 1 ] , coord [ 2 ] , uc_side ) ;
7053: LD_VAR 0 17
7057: PUSH
7058: LD_INT 1
7060: ARRAY
7061: PPUSH
7062: LD_VAR 0 17
7066: PUSH
7067: LD_INT 2
7069: ARRAY
7070: PPUSH
7071: LD_OWVAR 20
7075: PPUSH
7076: CALL_OW 441
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
7080: LD_VAR 0 17
7084: PUSH
7085: LD_INT 1
7087: ARRAY
7088: PPUSH
7089: LD_VAR 0 17
7093: PUSH
7094: LD_INT 2
7096: ARRAY
7097: PPUSH
7098: LD_INT 0
7100: PPUSH
7101: CALL_OW 47
// end ; end ;
7105: GO 6947
7107: POP
7108: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
7109: LD_ADDR_VAR 0 5
7113: PUSH
7114: LD_EXP 49
7118: PUSH
7119: LD_VAR 0 4
7123: ARRAY
7124: PUSH
7125: LD_VAR 0 2
7129: ARRAY
7130: PUSH
7131: LD_INT 1
7133: ARRAY
7134: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
7135: LD_ADDR_VAR 0 6
7139: PUSH
7140: LD_EXP 49
7144: PUSH
7145: LD_VAR 0 4
7149: ARRAY
7150: PUSH
7151: LD_VAR 0 2
7155: ARRAY
7156: PUSH
7157: LD_INT 2
7159: ARRAY
7160: ST_TO_ADDR
// if base = 1 then
7161: LD_VAR 0 2
7165: PUSH
7166: LD_INT 1
7168: EQUAL
7169: IFFALSE 7277
// if def_morale_flags then
7171: LD_EXP 14
7175: IFFALSE 7277
// SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , def_bf_params [ 1 ] ] , [ bfo_defend_bonus_vehicle , def_bf_params [ 2 ] ] , [ bfo_defend_bonus_building , def_bf_params [ 3 ] ] , [ bfo_range , 17 ] , [ bfo_height , def_bf_params [ 4 ] ] ] ) ;
7177: LD_VAR 0 1
7181: PPUSH
7182: LD_VAR 0 5
7186: PPUSH
7187: LD_VAR 0 6
7191: PPUSH
7192: LD_INT 1
7194: PUSH
7195: LD_EXP 36
7199: PUSH
7200: LD_INT 1
7202: ARRAY
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: LD_INT 2
7210: PUSH
7211: LD_EXP 36
7215: PUSH
7216: LD_INT 2
7218: ARRAY
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 3
7226: PUSH
7227: LD_EXP 36
7231: PUSH
7232: LD_INT 3
7234: ARRAY
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 10
7242: PUSH
7243: LD_INT 17
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: LD_INT 20
7252: PUSH
7253: LD_EXP 36
7257: PUSH
7258: LD_INT 4
7260: ARRAY
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: PPUSH
7273: CALL_OW 418
// if number_of_people [ base ] then
7277: LD_EXP 21
7281: PUSH
7282: LD_VAR 0 2
7286: ARRAY
7287: IFFALSE 7496
// begin if No_Mechs then
7289: LD_EXP 68
7293: IFFALSE 7305
// Mode := 2 else
7295: LD_ADDR_VAR 0 16
7299: PUSH
7300: LD_INT 2
7302: ST_TO_ADDR
7303: GO 7313
// Mode := 1 ;
7305: LD_ADDR_VAR 0 16
7309: PUSH
7310: LD_INT 1
7312: ST_TO_ADDR
// neng := number_of_people [ base ] ;
7313: LD_ADDR_LOC 5
7317: PUSH
7318: LD_EXP 21
7322: PUSH
7323: LD_VAR 0 2
7327: ARRAY
7328: ST_TO_ADDR
// nmech := neng div [ 4 , 3 ] [ Mode ] ;
7329: LD_ADDR_LOC 7
7333: PUSH
7334: LD_LOC 5
7338: PUSH
7339: LD_INT 4
7341: PUSH
7342: LD_INT 3
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PUSH
7349: LD_VAR 0 16
7353: ARRAY
7354: DIV
7355: ST_TO_ADDR
// neng := neng - nmech ;
7356: LD_ADDR_LOC 5
7360: PUSH
7361: LD_LOC 5
7365: PUSH
7366: LD_LOC 7
7370: MINUS
7371: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
7372: LD_ADDR_LOC 6
7376: PUSH
7377: LD_LOC 5
7381: PUSH
7382: LD_INT 3
7384: PUSH
7385: LD_INT 2
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PUSH
7392: LD_VAR 0 16
7396: ARRAY
7397: DIV
7398: ST_TO_ADDR
// if ( nsci < 1 ) then
7399: LD_LOC 6
7403: PUSH
7404: LD_INT 1
7406: LESS
7407: IFFALSE 7417
// nsci := 1 ;
7409: LD_ADDR_LOC 6
7413: PUSH
7414: LD_INT 1
7416: ST_TO_ADDR
// neng := neng - nsci ;
7417: LD_ADDR_LOC 5
7421: PUSH
7422: LD_LOC 5
7426: PUSH
7427: LD_LOC 6
7431: MINUS
7432: ST_TO_ADDR
// nsol := [ neng div 2 , 0 ] [ Mode ] ;
7433: LD_ADDR_LOC 8
7437: PUSH
7438: LD_LOC 5
7442: PUSH
7443: LD_INT 2
7445: DIV
7446: PUSH
7447: LD_INT 0
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_VAR 0 16
7458: ARRAY
7459: ST_TO_ADDR
// neng := neng - nsol ;
7460: LD_ADDR_LOC 5
7464: PUSH
7465: LD_LOC 5
7469: PUSH
7470: LD_LOC 8
7474: MINUS
7475: ST_TO_ADDR
// if ( neng < 1 ) then
7476: LD_LOC 5
7480: PUSH
7481: LD_INT 1
7483: LESS
7484: IFFALSE 7494
// neng := 1 ;
7486: LD_ADDR_LOC 5
7490: PUSH
7491: LD_INT 1
7493: ST_TO_ADDR
// end else
7494: GO 7528
// begin neng := 0 ;
7496: LD_ADDR_LOC 5
7500: PUSH
7501: LD_INT 0
7503: ST_TO_ADDR
// nsci := 0 ;
7504: LD_ADDR_LOC 6
7508: PUSH
7509: LD_INT 0
7511: ST_TO_ADDR
// nmech := 0 ;
7512: LD_ADDR_LOC 7
7516: PUSH
7517: LD_INT 0
7519: ST_TO_ADDR
// nsol := 0 ;
7520: LD_ADDR_LOC 8
7524: PUSH
7525: LD_INT 0
7527: ST_TO_ADDR
// end ; commander := true ;
7528: LD_ADDR_LOC 1
7532: PUSH
7533: LD_INT 1
7535: ST_TO_ADDR
// soldiers_created := 0 ;
7536: LD_ADDR_LOC 4
7540: PUSH
7541: LD_INT 0
7543: ST_TO_ADDR
// for i := 1 to are_breastworks [ base ] do
7544: LD_ADDR_VAR 0 8
7548: PUSH
7549: DOUBLE
7550: LD_INT 1
7552: DEC
7553: ST_TO_ADDR
7554: LD_EXP 27
7558: PUSH
7559: LD_VAR 0 2
7563: ARRAY
7564: PUSH
7565: FOR_TO
7566: IFFALSE 7852
// begin if are_breastworks [ base ] [ i ] = 1 then
7568: LD_EXP 27
7572: PUSH
7573: LD_VAR 0 2
7577: ARRAY
7578: PUSH
7579: LD_VAR 0 8
7583: ARRAY
7584: PUSH
7585: LD_INT 1
7587: EQUAL
7588: IFFALSE 7600
// bc_type := b_breastwork else
7590: LD_ADDR_OWVAR 42
7594: PUSH
7595: LD_INT 31
7597: ST_TO_ADDR
7598: GO 7608
// bc_type := b_bunker ;
7600: LD_ADDR_OWVAR 42
7604: PUSH
7605: LD_INT 32
7607: ST_TO_ADDR
// x := breastworks_def [ pos ] [ base ] [ i ] [ 1 ] ;
7608: LD_ADDR_VAR 0 5
7612: PUSH
7613: LD_EXP 51
7617: PUSH
7618: LD_VAR 0 4
7622: ARRAY
7623: PUSH
7624: LD_VAR 0 2
7628: ARRAY
7629: PUSH
7630: LD_VAR 0 8
7634: ARRAY
7635: PUSH
7636: LD_INT 1
7638: ARRAY
7639: ST_TO_ADDR
// y := breastworks_def [ pos ] [ base ] [ i ] [ 2 ] ;
7640: LD_ADDR_VAR 0 6
7644: PUSH
7645: LD_EXP 51
7649: PUSH
7650: LD_VAR 0 4
7654: ARRAY
7655: PUSH
7656: LD_VAR 0 2
7660: ARRAY
7661: PUSH
7662: LD_VAR 0 8
7666: ARRAY
7667: PUSH
7668: LD_INT 2
7670: ARRAY
7671: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ base ] [ i ] [ 3 ] ;
7672: LD_ADDR_VAR 0 7
7676: PUSH
7677: LD_EXP 51
7681: PUSH
7682: LD_VAR 0 4
7686: ARRAY
7687: PUSH
7688: LD_VAR 0 2
7692: ARRAY
7693: PUSH
7694: LD_VAR 0 8
7698: ARRAY
7699: PUSH
7700: LD_INT 3
7702: ARRAY
7703: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
7704: LD_ADDR_VAR 0 11
7708: PUSH
7709: LD_VAR 0 5
7713: PPUSH
7714: LD_VAR 0 6
7718: PPUSH
7719: LD_VAR 0 7
7723: PPUSH
7724: CALL_OW 47
7728: ST_TO_ADDR
// if bc_type = b_bunker then
7729: LD_OWVAR 42
7733: PUSH
7734: LD_INT 32
7736: EQUAL
7737: IFFALSE 7814
// case uc_nation of nation_american :
7739: LD_OWVAR 21
7743: PUSH
7744: LD_INT 1
7746: DOUBLE
7747: EQUAL
7748: IFTRUE 7752
7750: GO 7767
7752: POP
// PlaceWeaponTurret ( br , us_machine_gun ) ; nation_arabian :
7753: LD_VAR 0 11
7757: PPUSH
7758: LD_INT 2
7760: PPUSH
7761: CALL_OW 431
7765: GO 7814
7767: LD_INT 2
7769: DOUBLE
7770: EQUAL
7771: IFTRUE 7775
7773: GO 7790
7775: POP
// PlaceWeaponTurret ( br , ar_double_machine_gun ) ; nation_russian :
7776: LD_VAR 0 11
7780: PPUSH
7781: LD_INT 24
7783: PPUSH
7784: CALL_OW 431
7788: GO 7814
7790: LD_INT 3
7792: DOUBLE
7793: EQUAL
7794: IFTRUE 7798
7796: GO 7813
7798: POP
// PlaceWeaponTurret ( br , ru_heavy_machine_gun ) ; end ;
7799: LD_VAR 0 11
7803: PPUSH
7804: LD_INT 42
7806: PPUSH
7807: CALL_OW 431
7811: GO 7814
7813: POP
// if i <= nsol then
7814: LD_VAR 0 8
7818: PUSH
7819: LD_LOC 8
7823: LESSEQUAL
7824: IFFALSE 7850
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
7826: LD_INT 1
7828: PPUSH
7829: LD_INT 1
7831: PPUSH
7832: LD_INT 0
7834: PPUSH
7835: LD_INT 0
7837: PPUSH
7838: LD_INT 0
7840: PPUSH
7841: LD_VAR 0 11
7845: PPUSH
7846: CALL 5184 0 6
// end ;
7850: GO 7565
7852: POP
7853: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
7854: LD_ADDR_VAR 0 5
7858: PUSH
7859: LD_EXP 49
7863: PUSH
7864: LD_VAR 0 4
7868: ARRAY
7869: PUSH
7870: LD_VAR 0 2
7874: ARRAY
7875: PUSH
7876: LD_INT 1
7878: ARRAY
7879: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
7880: LD_ADDR_VAR 0 6
7884: PUSH
7885: LD_EXP 49
7889: PUSH
7890: LD_VAR 0 4
7894: ARRAY
7895: PUSH
7896: LD_VAR 0 2
7900: ARRAY
7901: PUSH
7902: LD_INT 2
7904: ARRAY
7905: ST_TO_ADDR
// if nsol > are_breastworks [ base ] then
7906: LD_LOC 8
7910: PUSH
7911: LD_EXP 27
7915: PUSH
7916: LD_VAR 0 2
7920: ARRAY
7921: GREATER
7922: IFFALSE 8010
// if arm then
7924: LD_VAR 0 15
7928: IFFALSE 7970
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , 0 , 0 , 0 , arm ) else
7930: LD_LOC 8
7934: PUSH
7935: LD_EXP 27
7939: PUSH
7940: LD_VAR 0 2
7944: ARRAY
7945: MINUS
7946: PPUSH
7947: LD_INT 1
7949: PPUSH
7950: LD_INT 0
7952: PPUSH
7953: LD_INT 0
7955: PPUSH
7956: LD_INT 0
7958: PPUSH
7959: LD_VAR 0 15
7963: PPUSH
7964: CALL 5184 0 6
7968: GO 8010
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , x , y , 5 , 0 ) ;
7970: LD_LOC 8
7974: PUSH
7975: LD_EXP 27
7979: PUSH
7980: LD_VAR 0 2
7984: ARRAY
7985: MINUS
7986: PPUSH
7987: LD_INT 1
7989: PPUSH
7990: LD_VAR 0 5
7994: PPUSH
7995: LD_VAR 0 6
7999: PPUSH
8000: LD_INT 5
8002: PPUSH
8003: LD_INT 0
8005: PPUSH
8006: CALL 5184 0 6
// if dep then
8010: LD_VAR 0 12
8014: IFFALSE 8044
// prepare_people ( neng , class_engineer , 0 , 0 , 0 , dep ) else
8016: LD_LOC 5
8020: PPUSH
8021: LD_INT 2
8023: PPUSH
8024: LD_INT 0
8026: PPUSH
8027: LD_INT 0
8029: PPUSH
8030: LD_INT 0
8032: PPUSH
8033: LD_VAR 0 12
8037: PPUSH
8038: CALL 5184 0 6
8042: GO 8072
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
8044: LD_LOC 5
8048: PPUSH
8049: LD_INT 2
8051: PPUSH
8052: LD_VAR 0 5
8056: PPUSH
8057: LD_VAR 0 6
8061: PPUSH
8062: LD_INT 5
8064: PPUSH
8065: LD_INT 0
8067: PPUSH
8068: CALL 5184 0 6
// if fact then
8072: LD_VAR 0 14
8076: IFFALSE 8106
// prepare_people ( nmech , class_mechanic , 0 , 0 , 0 , fact ) else
8078: LD_LOC 7
8082: PPUSH
8083: LD_INT 3
8085: PPUSH
8086: LD_INT 0
8088: PPUSH
8089: LD_INT 0
8091: PPUSH
8092: LD_INT 0
8094: PPUSH
8095: LD_VAR 0 14
8099: PPUSH
8100: CALL 5184 0 6
8104: GO 8134
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
8106: LD_LOC 7
8110: PPUSH
8111: LD_INT 3
8113: PPUSH
8114: LD_VAR 0 5
8118: PPUSH
8119: LD_VAR 0 6
8123: PPUSH
8124: LD_INT 5
8126: PPUSH
8127: LD_INT 0
8129: PPUSH
8130: CALL 5184 0 6
// if lab then
8134: LD_VAR 0 13
8138: IFFALSE 8168
// prepare_people ( nsci , class_scientistic , 0 , 0 , 0 , lab ) else
8140: LD_LOC 6
8144: PPUSH
8145: LD_INT 4
8147: PPUSH
8148: LD_INT 0
8150: PPUSH
8151: LD_INT 0
8153: PPUSH
8154: LD_INT 0
8156: PPUSH
8157: LD_VAR 0 13
8161: PPUSH
8162: CALL 5184 0 6
8166: GO 8196
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
8168: LD_LOC 6
8172: PPUSH
8173: LD_INT 4
8175: PPUSH
8176: LD_VAR 0 5
8180: PPUSH
8181: LD_VAR 0 6
8185: PPUSH
8186: LD_INT 5
8188: PPUSH
8189: LD_INT 0
8191: PPUSH
8192: CALL 5184 0 6
// max = 0 ;
8196: LD_ADDR_VAR 0 18
8200: PUSH
8201: LD_INT 0
8203: ST_TO_ADDR
// for un in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
8204: LD_ADDR_VAR 0 10
8208: PUSH
8209: LD_INT 22
8211: PUSH
8212: LD_VAR 0 1
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: LD_INT 21
8223: PUSH
8224: LD_INT 1
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PPUSH
8235: CALL_OW 69
8239: PUSH
8240: FOR_IN
8241: IFFALSE 8283
// begin if GetSkill ( un , skill_engineering ) > max then
8243: LD_VAR 0 10
8247: PPUSH
8248: LD_INT 2
8250: PPUSH
8251: CALL_OW 259
8255: PUSH
8256: LD_VAR 0 18
8260: GREATER
8261: IFFALSE 8281
// max := GetSkill ( un , skill_engineering ) ;
8263: LD_ADDR_VAR 0 18
8267: PUSH
8268: LD_VAR 0 10
8272: PPUSH
8273: LD_INT 2
8275: PPUSH
8276: CALL_OW 259
8280: ST_TO_ADDR
// end ;
8281: GO 8240
8283: POP
8284: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) , max ) ;
8285: LD_INT 22
8287: PUSH
8288: LD_VAR 0 1
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: PUSH
8297: LD_INT 21
8299: PUSH
8300: LD_INT 3
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: PPUSH
8311: CALL_OW 69
8315: PPUSH
8316: LD_VAR 0 18
8320: PPUSH
8321: CALL_OW 241
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
8325: LD_EXP 8
8329: PUSH
8330: LD_INT 20
8332: PPUSH
8333: LD_VAR 0 1
8337: PPUSH
8338: CALL_OW 321
8342: PUSH
8343: LD_INT 1
8345: EQUAL
8346: AND
8347: IFFALSE 8364
// SetTech ( tech_SibDet , side , state_researched ) ;
8349: LD_INT 20
8351: PPUSH
8352: LD_VAR 0 1
8356: PPUSH
8357: LD_INT 2
8359: PPUSH
8360: CALL_OW 322
// if def_siberite_bomb = 1 then
8364: LD_EXP 15
8368: PUSH
8369: LD_INT 1
8371: EQUAL
8372: IFFALSE 8406
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
8374: LD_INT 25
8376: PPUSH
8377: LD_VAR 0 1
8381: PPUSH
8382: LD_INT 1
8384: PPUSH
8385: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
8389: LD_INT 73
8391: PPUSH
8392: LD_VAR 0 1
8396: PPUSH
8397: LD_INT 1
8399: PPUSH
8400: CALL_OW 322
// end else
8404: GO 8436
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
8406: LD_INT 25
8408: PPUSH
8409: LD_VAR 0 1
8413: PPUSH
8414: LD_INT 0
8416: PPUSH
8417: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
8421: LD_INT 73
8423: PPUSH
8424: LD_VAR 0 1
8428: PPUSH
8429: LD_INT 0
8431: PPUSH
8432: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
8436: LD_INT 24
8438: PPUSH
8439: LD_VAR 0 1
8443: PPUSH
8444: LD_INT 0
8446: PPUSH
8447: CALL_OW 322
// global_defined := true ;
8451: LD_ADDR_LOC 3
8455: PUSH
8456: LD_INT 1
8458: ST_TO_ADDR
// end ;
8459: LD_VAR 0 3
8463: RET
// every 0 0$1 do
8464: GO 8466
8466: DISABLE
// if ( def_siberite_bomb > 1 ) then
8467: LD_EXP 15
8471: PUSH
8472: LD_INT 1
8474: GREATER
8475: IFFALSE 8490
// begin wait ( siberite_bomb_Delay ) ;
8477: LD_EXP 38
8481: PPUSH
8482: CALL_OW 67
// EnableSibFiss ;
8486: CALL 8491 0 0
// end ;
8490: END
// function EnableSibFiss ; var i ; begin
8491: LD_INT 0
8493: PPUSH
8494: PPUSH
// for i := 1 to 8 do
8495: LD_ADDR_VAR 0 2
8499: PUSH
8500: DOUBLE
8501: LD_INT 1
8503: DEC
8504: ST_TO_ADDR
8505: LD_INT 8
8507: PUSH
8508: FOR_TO
8509: IFFALSE 8540
// if Side_Positions [ i ] then
8511: LD_EXP 43
8515: PUSH
8516: LD_VAR 0 2
8520: ARRAY
8521: IFFALSE 8538
// SetTech ( tech_SibFiss , i , state_enabled ) ;
8523: LD_INT 25
8525: PPUSH
8526: LD_VAR 0 2
8530: PPUSH
8531: LD_INT 1
8533: PPUSH
8534: CALL_OW 322
8538: GO 8508
8540: POP
8541: POP
// end ;
8542: LD_VAR 0 1
8546: RET
// function prepare_sides ; var i ; begin
8547: LD_INT 0
8549: PPUSH
8550: PPUSH
// global_units := [ ] ;
8551: LD_ADDR_LOC 2
8555: PUSH
8556: EMPTY
8557: ST_TO_ADDR
// global_defined := false ;
8558: LD_ADDR_LOC 3
8562: PUSH
8563: LD_INT 0
8565: ST_TO_ADDR
// for i := 1 to Side_Positions do
8566: LD_ADDR_VAR 0 2
8570: PUSH
8571: DOUBLE
8572: LD_INT 1
8574: DEC
8575: ST_TO_ADDR
8576: LD_EXP 43
8580: PUSH
8581: FOR_TO
8582: IFFALSE 8622
// if Side_Positions [ i ] then
8584: LD_EXP 43
8588: PUSH
8589: LD_VAR 0 2
8593: ARRAY
8594: IFFALSE 8620
// begin prepare_side_base ( i , 1 ) ;
8596: LD_VAR 0 2
8600: PPUSH
8601: LD_INT 1
8603: PPUSH
8604: CALL 5772 0 2
// prepare_side_base ( i , 2 ) ;
8608: LD_VAR 0 2
8612: PPUSH
8613: LD_INT 2
8615: PPUSH
8616: CALL 5772 0 2
// end ;
8620: GO 8581
8622: POP
8623: POP
// end ;
8624: LD_VAR 0 1
8628: RET
// starting begin disable ( 98 ) ;
8629: LD_INT 98
8631: DISABLE_MARKED
// disable ( 400 ) ;
8632: LD_INT 400
8634: DISABLE_MARKED
// disable ( 401 ) ;
8635: LD_INT 401
8637: DISABLE_MARKED
// disable ( 600 ) ;
8638: LD_INT 600
8640: DISABLE_MARKED
// enable_human_prediction := true ;
8641: LD_ADDR_OWVAR 51
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// mp_selectmsg := true ;
8649: LD_ADDR_OWVAR 13
8653: PUSH
8654: LD_INT 1
8656: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
8657: CALL 68 0 0
// prepare_map_coordinates ;
8661: CALL 3687 0 0
// ResetFog ;
8665: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
8669: LD_OWVAR 2
8673: PPUSH
8674: CALL_OW 520
// prepare_sides ;
8678: CALL 8547 0 0
// Init_Win_Condition ;
8682: CALL 16131 0 0
// InitLimits ;
8686: CALL 14791 0 0
// ShowTimer ;
8690: CALL 15728 0 0
// music_nat := Side_Nations [ your_side ] ;
8694: LD_ADDR_OWVAR 71
8698: PUSH
8699: LD_EXP 44
8703: PUSH
8704: LD_OWVAR 2
8708: ARRAY
8709: ST_TO_ADDR
// if IAmSpec then
8710: CALL_OW 531
8714: IFFALSE 8738
// begin fogoff ( true ) ;
8716: LD_INT 1
8718: PPUSH
8719: CALL_OW 344
// CenterNowOnXY ( 109 , 61 ) ;
8723: LD_INT 109
8725: PPUSH
8726: LD_INT 61
8728: PPUSH
8729: CALL_OW 86
// enable ( 400 ) ;
8733: LD_INT 400
8735: ENABLE_MARKED
// end else
8736: GO 8792
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 2 ] ) ;
8738: LD_EXP 49
8742: PUSH
8743: LD_EXP 43
8747: PUSH
8748: LD_OWVAR 2
8752: ARRAY
8753: ARRAY
8754: PUSH
8755: LD_INT 1
8757: ARRAY
8758: PUSH
8759: LD_INT 1
8761: ARRAY
8762: PPUSH
8763: LD_EXP 49
8767: PUSH
8768: LD_EXP 43
8772: PUSH
8773: LD_OWVAR 2
8777: ARRAY
8778: ARRAY
8779: PUSH
8780: LD_INT 1
8782: ARRAY
8783: PUSH
8784: LD_INT 2
8786: ARRAY
8787: PPUSH
8788: CALL_OW 86
// end ; InitApeman ;
8792: CALL 10218 0 0
// if def_builduptime then
8796: LD_EXP 17
8800: IFFALSE 8806
// BeginBuildUp ;
8802: CALL 13408 0 0
// end ; end_of_file
8806: END
// every 1 1$0 + 0 0$0.3 do
8807: GO 8809
8809: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
8810: LD_INT 4
8812: PPUSH
8813: LD_INT 5
8815: PPUSH
8816: CALL_OW 12
8820: PPUSH
8821: LD_INT 1
8823: PPUSH
8824: CALL_OW 57
// enable ;
8828: ENABLE
// end ;
8829: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
8830: GO 8832
8832: DISABLE
8833: LD_INT 0
8835: PPUSH
8836: PPUSH
// begin case tick of 1 .. 1 1$0 :
8837: LD_OWVAR 1
8841: PUSH
8842: LD_INT 1
8844: DOUBLE
8845: GREATEREQUAL
8846: IFFALSE 8854
8848: LD_INT 2100
8850: DOUBLE
8851: LESSEQUAL
8852: IFTRUE 8856
8854: GO 8884
8856: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
8857: LD_EXP 32
8861: PUSH
8862: LD_INT 100
8864: DIVREAL
8865: PUSH
8866: LD_INT 350
8868: PPUSH
8869: LD_INT 700
8871: PPUSH
8872: CALL_OW 12
8876: MUL
8877: PPUSH
8878: CALL_OW 67
8882: GO 9186
8884: LD_INT 2100
8886: PUSH
8887: LD_INT 1
8889: PLUS
8890: DOUBLE
8891: GREATEREQUAL
8892: IFFALSE 8900
8894: LD_INT 10500
8896: DOUBLE
8897: LESSEQUAL
8898: IFTRUE 8902
8900: GO 8930
8902: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
8903: LD_EXP 32
8907: PUSH
8908: LD_INT 100
8910: DIVREAL
8911: PUSH
8912: LD_INT 700
8914: PPUSH
8915: LD_INT 1225
8917: PPUSH
8918: CALL_OW 12
8922: MUL
8923: PPUSH
8924: CALL_OW 67
8928: GO 9186
8930: LD_INT 10500
8932: PUSH
8933: LD_INT 1
8935: PLUS
8936: DOUBLE
8937: GREATEREQUAL
8938: IFFALSE 8946
8940: LD_INT 21000
8942: DOUBLE
8943: LESSEQUAL
8944: IFTRUE 8948
8946: GO 8976
8948: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
8949: LD_EXP 32
8953: PUSH
8954: LD_INT 100
8956: DIVREAL
8957: PUSH
8958: LD_INT 1225
8960: PPUSH
8961: LD_INT 1750
8963: PPUSH
8964: CALL_OW 12
8968: MUL
8969: PPUSH
8970: CALL_OW 67
8974: GO 9186
8976: LD_INT 21000
8978: PUSH
8979: LD_INT 1
8981: PLUS
8982: DOUBLE
8983: GREATEREQUAL
8984: IFFALSE 8992
8986: LD_INT 42000
8988: DOUBLE
8989: LESSEQUAL
8990: IFTRUE 8994
8992: GO 9022
8994: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
8995: LD_EXP 32
8999: PUSH
9000: LD_INT 100
9002: DIVREAL
9003: PUSH
9004: LD_INT 1750
9006: PPUSH
9007: LD_INT 2450
9009: PPUSH
9010: CALL_OW 12
9014: MUL
9015: PPUSH
9016: CALL_OW 67
9020: GO 9186
9022: LD_INT 42000
9024: PUSH
9025: LD_INT 1
9027: PLUS
9028: DOUBLE
9029: GREATEREQUAL
9030: IFFALSE 9038
9032: LD_INT 63000
9034: DOUBLE
9035: LESSEQUAL
9036: IFTRUE 9040
9038: GO 9068
9040: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
9041: LD_EXP 32
9045: PUSH
9046: LD_INT 100
9048: DIVREAL
9049: PUSH
9050: LD_INT 2450
9052: PPUSH
9053: LD_INT 2800
9055: PPUSH
9056: CALL_OW 12
9060: MUL
9061: PPUSH
9062: CALL_OW 67
9066: GO 9186
9068: LD_INT 63000
9070: PUSH
9071: LD_INT 1
9073: PLUS
9074: DOUBLE
9075: GREATEREQUAL
9076: IFFALSE 9084
9078: LD_INT 105000
9080: DOUBLE
9081: LESSEQUAL
9082: IFTRUE 9086
9084: GO 9114
9086: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
9087: LD_EXP 32
9091: PUSH
9092: LD_INT 100
9094: DIVREAL
9095: PUSH
9096: LD_INT 2800
9098: PPUSH
9099: LD_INT 3325
9101: PPUSH
9102: CALL_OW 12
9106: MUL
9107: PPUSH
9108: CALL_OW 67
9112: GO 9186
9114: LD_INT 105000
9116: PUSH
9117: LD_INT 1
9119: PLUS
9120: DOUBLE
9121: GREATEREQUAL
9122: IFFALSE 9130
9124: LD_INT 630000
9126: DOUBLE
9127: LESSEQUAL
9128: IFTRUE 9132
9130: GO 9160
9132: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
9133: LD_EXP 32
9137: PUSH
9138: LD_INT 100
9140: DIVREAL
9141: PUSH
9142: LD_INT 3325
9144: PPUSH
9145: LD_INT 4200
9147: PPUSH
9148: CALL_OW 12
9152: MUL
9153: PPUSH
9154: CALL_OW 67
9158: GO 9186
9160: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
9161: LD_EXP 32
9165: PUSH
9166: LD_INT 100
9168: DIVREAL
9169: PUSH
9170: LD_INT 4200
9172: PPUSH
9173: LD_INT 5250
9175: PPUSH
9176: CALL_OW 12
9180: MUL
9181: PPUSH
9182: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
9186: LD_ADDR_VAR 0 2
9190: PUSH
9191: LD_INT 3
9193: PPUSH
9194: LD_INT 5
9196: PPUSH
9197: CALL_OW 12
9201: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
9202: LD_ADDR_VAR 0 1
9206: PUSH
9207: LD_EXP 43
9211: PUSH
9212: LD_INT 0
9214: PUSH
9215: EMPTY
9216: LIST
9217: DIFF
9218: PUSH
9219: FOR_IN
9220: IFFALSE 9269
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
9222: LD_VAR 0 2
9226: PPUSH
9227: LD_EXP 49
9231: PUSH
9232: LD_VAR 0 1
9236: ARRAY
9237: PUSH
9238: LD_INT 1
9240: ARRAY
9241: PPUSH
9242: LD_EXP 49
9246: PUSH
9247: LD_VAR 0 1
9251: ARRAY
9252: PUSH
9253: LD_INT 2
9255: ARRAY
9256: PPUSH
9257: LD_INT 20
9259: PPUSH
9260: LD_INT 1
9262: PPUSH
9263: CALL_OW 56
9267: GO 9219
9269: POP
9270: POP
// enable ;
9271: ENABLE
// end ;
9272: PPOPN 2
9274: END
// every 0 0$20 + 0 0$0.9 do var i , filter ;
9275: GO 9277
9277: DISABLE
9278: LD_INT 0
9280: PPUSH
9281: PPUSH
// begin if GetResourceArea ( Valley , mat_cans ) < ( ( 300 - shipments_density ) / 100 * 5 ) then
9282: LD_INT 12
9284: PPUSH
9285: LD_INT 1
9287: PPUSH
9288: CALL_OW 287
9292: PUSH
9293: LD_INT 300
9295: PUSH
9296: LD_EXP 32
9300: MINUS
9301: PUSH
9302: LD_INT 100
9304: DIVREAL
9305: PUSH
9306: LD_INT 5
9308: MUL
9309: LESS
9310: IFFALSE 9333
// CreateCratesArea ( Rand ( 3 , 5 ) , Valley , true ) ;
9312: LD_INT 3
9314: PPUSH
9315: LD_INT 5
9317: PPUSH
9318: CALL_OW 12
9322: PPUSH
9323: LD_INT 12
9325: PPUSH
9326: LD_INT 1
9328: PPUSH
9329: CALL_OW 55
// enable ;
9333: ENABLE
// end ; end_of_file
9334: PPOPN 2
9336: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
9337: LD_VAR 0 1
9341: PPUSH
9342: CALL_OW 266
9346: PUSH
9347: LD_INT 0
9349: PUSH
9350: LD_INT 1
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: IN
9357: IFFALSE 9382
// SetBName ( b , @ & GetSide ( b ) ) ;
9359: LD_VAR 0 1
9363: PPUSH
9364: LD_STRING @
9366: PUSH
9367: LD_VAR 0 1
9371: PPUSH
9372: CALL_OW 255
9376: STR
9377: PPUSH
9378: CALL_OW 500
// if def_game_rules then
9382: LD_EXP 67
9386: IFFALSE 9423
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
9388: LD_VAR 0 1
9392: PPUSH
9393: LD_VAR 0 1
9397: PPUSH
9398: CALL_OW 266
9402: PPUSH
9403: LD_VAR 0 1
9407: PPUSH
9408: CALL_OW 255
9412: PPUSH
9413: LD_INT 0
9415: PPUSH
9416: LD_INT 1
9418: PPUSH
9419: CALL 15192 0 5
// end ;
9423: PPOPN 2
9425: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
9426: LD_VAR 0 1
9430: PPUSH
9431: CALL_OW 266
9435: PUSH
9436: LD_INT 0
9438: PUSH
9439: LD_INT 1
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: IN
9446: IFFALSE 9471
// SetBName ( b , @ & GetSide ( b ) ) ;
9448: LD_VAR 0 1
9452: PPUSH
9453: LD_STRING @
9455: PUSH
9456: LD_VAR 0 1
9460: PPUSH
9461: CALL_OW 255
9465: STR
9466: PPUSH
9467: CALL_OW 500
// if def_game_rules then
9471: LD_EXP 67
9475: IFFALSE 9514
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
9477: LD_VAR 0 1
9481: PPUSH
9482: LD_VAR 0 1
9486: PPUSH
9487: CALL_OW 266
9491: PPUSH
9492: LD_VAR 0 1
9496: PPUSH
9497: CALL_OW 255
9501: PPUSH
9502: LD_VAR 0 2
9506: PPUSH
9507: LD_INT 1
9509: PPUSH
9510: CALL 15192 0 5
// end ;
9514: PPOPN 3
9516: END
// on VehicleConstructed ( veh , fac ) do var side ;
9517: LD_INT 0
9519: PPUSH
// begin if GetControl ( veh ) = control_apeman then
9520: LD_VAR 0 1
9524: PPUSH
9525: CALL_OW 263
9529: PUSH
9530: LD_INT 5
9532: EQUAL
9533: IFFALSE 9675
// begin side := GetSide ( veh ) ;
9535: LD_ADDR_VAR 0 3
9539: PUSH
9540: LD_VAR 0 1
9544: PPUSH
9545: CALL_OW 255
9549: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
9550: LD_ADDR_EXP 61
9554: PUSH
9555: LD_EXP 61
9559: PPUSH
9560: LD_VAR 0 3
9564: PPUSH
9565: LD_EXP 61
9569: PUSH
9570: LD_VAR 0 3
9574: ARRAY
9575: PPUSH
9576: LD_INT 52
9578: PUSH
9579: EMPTY
9580: LIST
9581: PPUSH
9582: CALL_OW 72
9586: PUSH
9587: LD_INT 22
9589: PUSH
9590: LD_VAR 0 3
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: PUSH
9599: LD_INT 2
9601: PUSH
9602: LD_INT 33
9604: PUSH
9605: LD_INT 5
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: LD_INT 25
9614: PUSH
9615: LD_INT 12
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: PUSH
9622: LD_INT 25
9624: PUSH
9625: LD_INT 15
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PUSH
9632: LD_INT 25
9634: PUSH
9635: LD_INT 16
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: PUSH
9642: LD_INT 25
9644: PUSH
9645: LD_INT 17
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PPUSH
9664: CALL_OW 69
9668: UNION
9669: PPUSH
9670: CALL_OW 1
9674: ST_TO_ADDR
// end ; end ;
9675: PPOPN 3
9677: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
9678: LD_INT 0
9680: PPUSH
9681: PPUSH
9682: PPUSH
9683: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
9684: LD_VAR 0 1
9688: PPUSH
9689: CALL_OW 257
9693: PUSH
9694: LD_INT 12
9696: PUSH
9697: LD_INT 15
9699: PUSH
9700: LD_INT 17
9702: PUSH
9703: LD_INT 16
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: IN
9712: PUSH
9713: LD_VAR 0 1
9717: PPUSH
9718: CALL_OW 263
9722: PUSH
9723: LD_INT 5
9725: EQUAL
9726: OR
9727: IFFALSE 9738
// ApeKilled ( j ) ;
9729: LD_VAR 0 1
9733: PPUSH
9734: CALL 10891 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
9738: LD_VAR 0 1
9742: PPUSH
9743: CALL_OW 266
9747: PUSH
9748: LD_INT 0
9750: PUSH
9751: LD_INT 1
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: IN
9758: IFFALSE 9840
// begin pos := Side_Positions [ GetSide ( j ) ] ;
9760: LD_ADDR_VAR 0 4
9764: PUSH
9765: LD_EXP 43
9769: PUSH
9770: LD_VAR 0 1
9774: PPUSH
9775: CALL_OW 255
9779: ARRAY
9780: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
9781: LD_ADDR_VAR 0 2
9785: PUSH
9786: LD_EXP 49
9790: PUSH
9791: LD_VAR 0 4
9795: ARRAY
9796: PUSH
9797: LD_INT 1
9799: ARRAY
9800: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
9801: LD_ADDR_VAR 0 3
9805: PUSH
9806: LD_EXP 49
9810: PUSH
9811: LD_VAR 0 4
9815: ARRAY
9816: PUSH
9817: LD_INT 2
9819: ARRAY
9820: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
9821: LD_VAR 0 2
9825: PPUSH
9826: LD_VAR 0 3
9830: PPUSH
9831: CALL_OW 420
9835: PPUSH
9836: CALL_OW 419
// end ; if def_game_rules then
9840: LD_EXP 67
9844: IFFALSE 9943
// if ( GetType ( j ) = 3 ) then
9846: LD_VAR 0 1
9850: PPUSH
9851: CALL_OW 247
9855: PUSH
9856: LD_INT 3
9858: EQUAL
9859: IFFALSE 9899
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
9861: LD_VAR 0 1
9865: PPUSH
9866: LD_VAR 0 1
9870: PPUSH
9871: CALL_OW 266
9875: PPUSH
9876: LD_VAR 0 1
9880: PPUSH
9881: CALL_OW 255
9885: PPUSH
9886: LD_INT 0
9888: PPUSH
9889: LD_INT 1
9891: NEG
9892: PPUSH
9893: CALL 15192 0 5
9897: GO 9943
// if ( GetChassis ( j ) = 25 ) then
9899: LD_VAR 0 1
9903: PPUSH
9904: CALL_OW 265
9908: PUSH
9909: LD_INT 25
9911: EQUAL
9912: IFFALSE 9943
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
9914: LD_VAR 0 1
9918: PPUSH
9919: LD_INT 37
9921: PPUSH
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 255
9931: PPUSH
9932: LD_INT 0
9934: PPUSH
9935: LD_INT 1
9937: NEG
9938: PPUSH
9939: CALL 15192 0 5
// end ;
9943: PPOPN 5
9945: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
9946: LD_EXP 67
9950: PUSH
9951: LD_VAR 0 1
9955: PPUSH
9956: CALL_OW 265
9960: PUSH
9961: LD_INT 25
9963: EQUAL
9964: AND
9965: IFFALSE 9997
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
9967: LD_VAR 0 1
9971: PPUSH
9972: LD_INT 37
9974: PPUSH
9975: LD_VAR 0 1
9979: PPUSH
9980: CALL_OW 255
9984: PPUSH
9985: LD_VAR 0 3
9989: PPUSH
9990: LD_INT 1
9992: PPUSH
9993: CALL 15192 0 5
// end ;
9997: PPOPN 4
9999: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
10000: LD_VAR 0 1
10004: PPUSH
10005: LD_VAR 0 2
10009: PPUSH
10010: LD_VAR 0 3
10014: PPUSH
10015: LD_OWVAR 2
10019: PPUSH
10020: CALL 15892 0 4
10024: PPOPN 3
10026: END
// every 20 20$00 trigger apemanNumber do
10027: LD_EXP 58
10031: IFFALSE 10064
10033: GO 10035
10035: DISABLE
// begin enable ;
10036: ENABLE
// if apeLevel >= 8 then
10037: LD_EXP 63
10041: PUSH
10042: LD_INT 8
10044: GREATEREQUAL
10045: IFFALSE 10050
// disable else
10047: DISABLE
10048: GO 10064
// apeLevel := apeLevel + 1 ;
10050: LD_ADDR_EXP 63
10054: PUSH
10055: LD_EXP 63
10059: PUSH
10060: LD_INT 1
10062: PLUS
10063: ST_TO_ADDR
// end ;
10064: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
10065: LD_EXP 58
10069: PUSH
10070: LD_EXP 59
10074: LESS
10075: IFFALSE 10215
10077: GO 10079
10079: DISABLE
10080: LD_INT 0
10082: PPUSH
10083: PPUSH
10084: PPUSH
10085: PPUSH
// begin enable ;
10086: ENABLE
// for i := 1 to apemanPos do
10087: LD_ADDR_VAR 0 1
10091: PUSH
10092: DOUBLE
10093: LD_INT 1
10095: DEC
10096: ST_TO_ADDR
10097: LD_EXP 61
10101: PUSH
10102: FOR_TO
10103: IFFALSE 10213
// begin if apemanPlayerCount [ i ] then
10105: LD_EXP 62
10109: PUSH
10110: LD_VAR 0 1
10114: ARRAY
10115: IFFALSE 10211
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
10117: LD_EXP 62
10121: PUSH
10122: LD_VAR 0 1
10126: ARRAY
10127: PUSH
10128: LD_EXP 61
10132: PUSH
10133: LD_VAR 0 1
10137: ARRAY
10138: GREATER
10139: IFFALSE 10211
// begin ape := PrepareApeman ;
10141: LD_ADDR_VAR 0 2
10145: PUSH
10146: CALL 10710 0 0
10150: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
10151: LD_VAR 0 2
10155: PPUSH
10156: LD_EXP 64
10160: PUSH
10161: LD_VAR 0 1
10165: ARRAY
10166: PPUSH
10167: LD_INT 0
10169: PPUSH
10170: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
10174: LD_ADDR_EXP 61
10178: PUSH
10179: LD_EXP 61
10183: PPUSH
10184: LD_VAR 0 1
10188: PPUSH
10189: LD_EXP 61
10193: PUSH
10194: LD_VAR 0 1
10198: ARRAY
10199: PUSH
10200: LD_VAR 0 2
10204: UNION
10205: PPUSH
10206: CALL_OW 1
10210: ST_TO_ADDR
// end ; end ; end ;
10211: GO 10102
10213: POP
10214: POP
// end ;
10215: PPOPN 4
10217: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
10218: LD_INT 0
10220: PPUSH
10221: PPUSH
10222: PPUSH
10223: PPUSH
10224: PPUSH
10225: PPUSH
10226: PPUSH
// playersAmount := 0 ;
10227: LD_ADDR_VAR 0 3
10231: PUSH
10232: LD_INT 0
10234: ST_TO_ADDR
// _apeAreas := [ Ar1Out3 , Ar2Out3 ] ;
10235: LD_ADDR_VAR 0 7
10239: PUSH
10240: LD_INT 24
10242: PUSH
10243: LD_INT 18
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10250: LD_ADDR_EXP 64
10254: PUSH
10255: LD_INT 0
10257: PUSH
10258: LD_INT 0
10260: PUSH
10261: LD_INT 0
10263: PUSH
10264: LD_INT 0
10266: PUSH
10267: LD_INT 0
10269: PUSH
10270: LD_INT 0
10272: PUSH
10273: LD_INT 0
10275: PUSH
10276: LD_INT 0
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: ST_TO_ADDR
// for j = 1 to Side_Positions do
10289: LD_ADDR_VAR 0 4
10293: PUSH
10294: DOUBLE
10295: LD_INT 1
10297: DEC
10298: ST_TO_ADDR
10299: LD_EXP 43
10303: PUSH
10304: FOR_TO
10305: IFFALSE 10372
// if Side_Positions [ j ] then
10307: LD_EXP 43
10311: PUSH
10312: LD_VAR 0 4
10316: ARRAY
10317: IFFALSE 10370
// begin playersAmount := playersAmount + 1 ;
10319: LD_ADDR_VAR 0 3
10323: PUSH
10324: LD_VAR 0 3
10328: PUSH
10329: LD_INT 1
10331: PLUS
10332: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
10333: LD_ADDR_EXP 64
10337: PUSH
10338: LD_EXP 64
10342: PPUSH
10343: LD_VAR 0 4
10347: PPUSH
10348: LD_VAR 0 7
10352: PUSH
10353: LD_EXP 43
10357: PUSH
10358: LD_VAR 0 4
10362: ARRAY
10363: ARRAY
10364: PPUSH
10365: CALL_OW 1
10369: ST_TO_ADDR
// end ;
10370: GO 10304
10372: POP
10373: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
10374: LD_ADDR_EXP 60
10378: PUSH
10379: LD_INT 3
10381: PUSH
10382: LD_EXP 37
10386: MUL
10387: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
10388: LD_ADDR_EXP 58
10392: PUSH
10393: LD_VAR 0 3
10397: PUSH
10398: LD_EXP 60
10402: MUL
10403: ST_TO_ADDR
// apemanLimit := apemanNumber ;
10404: LD_ADDR_EXP 59
10408: PUSH
10409: LD_EXP 58
10413: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10414: LD_ADDR_EXP 61
10418: PUSH
10419: LD_INT 0
10421: PUSH
10422: LD_INT 0
10424: PUSH
10425: LD_INT 0
10427: PUSH
10428: LD_INT 0
10430: PUSH
10431: LD_INT 0
10433: PUSH
10434: LD_INT 0
10436: PUSH
10437: LD_INT 0
10439: PUSH
10440: LD_INT 0
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10453: LD_ADDR_EXP 62
10457: PUSH
10458: LD_INT 0
10460: PUSH
10461: LD_INT 0
10463: PUSH
10464: LD_INT 0
10466: PUSH
10467: LD_INT 0
10469: PUSH
10470: LD_INT 0
10472: PUSH
10473: LD_INT 0
10475: PUSH
10476: LD_INT 0
10478: PUSH
10479: LD_INT 0
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: ST_TO_ADDR
// apeLevel := 1 ;
10492: LD_ADDR_EXP 63
10496: PUSH
10497: LD_INT 1
10499: ST_TO_ADDR
// if not apemanNumber then
10500: LD_EXP 58
10504: NOT
10505: IFFALSE 10509
// exit ;
10507: GO 10705
// for i := 1 to apemanPerPlayer do
10509: LD_ADDR_VAR 0 2
10513: PUSH
10514: DOUBLE
10515: LD_INT 1
10517: DEC
10518: ST_TO_ADDR
10519: LD_EXP 60
10523: PUSH
10524: FOR_TO
10525: IFFALSE 10703
// begin for j := 1 to Side_Positions do
10527: LD_ADDR_VAR 0 4
10531: PUSH
10532: DOUBLE
10533: LD_INT 1
10535: DEC
10536: ST_TO_ADDR
10537: LD_EXP 43
10541: PUSH
10542: FOR_TO
10543: IFFALSE 10699
// if Side_Positions [ j ] then
10545: LD_EXP 43
10549: PUSH
10550: LD_VAR 0 4
10554: ARRAY
10555: IFFALSE 10697
// begin pos := Side_Positions [ j ] ;
10557: LD_ADDR_VAR 0 6
10561: PUSH
10562: LD_EXP 43
10566: PUSH
10567: LD_VAR 0 4
10571: ARRAY
10572: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
10573: LD_ADDR_EXP 62
10577: PUSH
10578: LD_EXP 62
10582: PPUSH
10583: LD_VAR 0 4
10587: PPUSH
10588: LD_EXP 62
10592: PUSH
10593: LD_VAR 0 4
10597: ARRAY
10598: PUSH
10599: LD_INT 1
10601: PLUS
10602: PPUSH
10603: CALL_OW 1
10607: ST_TO_ADDR
// ape := PrepareApeman ;
10608: LD_ADDR_VAR 0 5
10612: PUSH
10613: CALL 10710 0 0
10617: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
10618: LD_ADDR_EXP 61
10622: PUSH
10623: LD_EXP 61
10627: PPUSH
10628: LD_VAR 0 4
10632: PPUSH
10633: LD_EXP 61
10637: PUSH
10638: LD_VAR 0 4
10642: ARRAY
10643: PPUSH
10644: LD_EXP 61
10648: PUSH
10649: LD_VAR 0 4
10653: ARRAY
10654: PUSH
10655: LD_INT 1
10657: PLUS
10658: PPUSH
10659: LD_VAR 0 5
10663: PPUSH
10664: CALL_OW 1
10668: PPUSH
10669: CALL_OW 1
10673: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
10674: LD_VAR 0 5
10678: PPUSH
10679: LD_EXP 64
10683: PUSH
10684: LD_VAR 0 4
10688: ARRAY
10689: PPUSH
10690: LD_INT 0
10692: PPUSH
10693: CALL_OW 49
// end ;
10697: GO 10542
10699: POP
10700: POP
// end ;
10701: GO 10524
10703: POP
10704: POP
// end ;
10705: LD_VAR 0 1
10709: RET
// export function PrepareApeman ; var bonus ; begin
10710: LD_INT 0
10712: PPUSH
10713: PPUSH
// uc_side := 0 ;
10714: LD_ADDR_OWVAR 20
10718: PUSH
10719: LD_INT 0
10721: ST_TO_ADDR
// uc_nation := 0 ;
10722: LD_ADDR_OWVAR 21
10726: PUSH
10727: LD_INT 0
10729: ST_TO_ADDR
// InitHc ;
10730: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
10734: LD_ADDR_VAR 0 2
10738: PUSH
10739: LD_INT 1
10741: NEG
10742: PUSH
10743: LD_INT 0
10745: PUSH
10746: LD_INT 1
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: LIST
10753: PUSH
10754: LD_OWVAR 1
10758: PUSH
10759: LD_INT 3
10761: MOD
10762: PUSH
10763: LD_INT 1
10765: PLUS
10766: ARRAY
10767: ST_TO_ADDR
// hc_class := class_apeman ;
10768: LD_ADDR_OWVAR 28
10772: PUSH
10773: LD_INT 12
10775: ST_TO_ADDR
// hc_gallery :=  ;
10776: LD_ADDR_OWVAR 33
10780: PUSH
10781: LD_STRING 
10783: ST_TO_ADDR
// hc_name :=  ;
10784: LD_ADDR_OWVAR 26
10788: PUSH
10789: LD_STRING 
10791: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
10792: LD_ADDR_OWVAR 31
10796: PUSH
10797: LD_EXP 63
10801: PUSH
10802: LD_VAR 0 2
10806: PLUS
10807: PUSH
10808: LD_EXP 63
10812: PUSH
10813: LD_VAR 0 2
10817: PLUS
10818: PUSH
10819: LD_EXP 63
10823: PUSH
10824: LD_VAR 0 2
10828: PLUS
10829: PUSH
10830: LD_EXP 63
10834: PUSH
10835: LD_VAR 0 2
10839: PLUS
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
10847: LD_ADDR_OWVAR 35
10851: PUSH
10852: LD_INT 10
10854: PUSH
10855: LD_VAR 0 2
10859: MUL
10860: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
10861: LD_ADDR_OWVAR 29
10865: PUSH
10866: LD_INT 12
10868: PUSH
10869: LD_INT 10
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: ST_TO_ADDR
// result := CreateHuman ;
10876: LD_ADDR_VAR 0 1
10880: PUSH
10881: CALL_OW 44
10885: ST_TO_ADDR
// end ;
10886: LD_VAR 0 1
10890: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
10891: LD_INT 0
10893: PPUSH
10894: PPUSH
10895: PPUSH
// if not ape then
10896: LD_VAR 0 1
10900: NOT
10901: IFFALSE 10905
// exit ;
10903: GO 11030
// side := GetSide ( ape ) ;
10905: LD_ADDR_VAR 0 3
10909: PUSH
10910: LD_VAR 0 1
10914: PPUSH
10915: CALL_OW 255
10919: ST_TO_ADDR
// if not side then
10920: LD_VAR 0 3
10924: NOT
10925: IFFALSE 10979
// begin for i = 1 to apemanPos do
10927: LD_ADDR_VAR 0 4
10931: PUSH
10932: DOUBLE
10933: LD_INT 1
10935: DEC
10936: ST_TO_ADDR
10937: LD_EXP 61
10941: PUSH
10942: FOR_TO
10943: IFFALSE 10977
// if ape in apemanPos [ i ] then
10945: LD_VAR 0 1
10949: PUSH
10950: LD_EXP 61
10954: PUSH
10955: LD_VAR 0 4
10959: ARRAY
10960: IN
10961: IFFALSE 10975
// begin side := i ;
10963: LD_ADDR_VAR 0 3
10967: PUSH
10968: LD_VAR 0 4
10972: ST_TO_ADDR
// break ;
10973: GO 10977
// end ;
10975: GO 10942
10977: POP
10978: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
10979: LD_ADDR_EXP 61
10983: PUSH
10984: LD_EXP 61
10988: PPUSH
10989: LD_VAR 0 3
10993: PPUSH
10994: LD_EXP 61
10998: PUSH
10999: LD_VAR 0 3
11003: ARRAY
11004: PUSH
11005: LD_VAR 0 1
11009: DIFF
11010: PPUSH
11011: CALL_OW 1
11015: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
11016: LD_ADDR_EXP 58
11020: PUSH
11021: LD_EXP 58
11025: PUSH
11026: LD_INT 1
11028: MINUS
11029: ST_TO_ADDR
// end ; end_of_file
11030: LD_VAR 0 2
11034: RET
// var free , free1 , free2 , new1 , new2 , arr1 , arr2 , seenby1 , seenby2 ; function displ_status ; var s1 , s2 ; begin
11035: LD_INT 0
11037: PPUSH
11038: PPUSH
11039: PPUSH
// if not def_people_arrivals then
11040: LD_EXP 11
11044: NOT
11045: IFFALSE 11049
// exit ;
11047: GO 11190
// if def_people_loyality then
11049: LD_EXP 12
11053: IFFALSE 11169
// begin s1 := [ #Multi1x1-InfoL , Position_Sides [ 1 ] , ( free1 + 0 ) ] ;
11055: LD_ADDR_VAR 0 2
11059: PUSH
11060: LD_STRING #Multi1x1-InfoL
11062: PUSH
11063: LD_EXP 46
11067: PUSH
11068: LD_INT 1
11070: ARRAY
11071: PUSH
11072: LD_LOC 10
11076: PUSH
11077: LD_INT 0
11079: PLUS
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: LIST
11085: ST_TO_ADDR
// s2 := [ #Multi1x1-InfoL , Position_Sides [ 2 ] , ( free2 + 0 ) ] ;
11086: LD_ADDR_VAR 0 3
11090: PUSH
11091: LD_STRING #Multi1x1-InfoL
11093: PUSH
11094: LD_EXP 46
11098: PUSH
11099: LD_INT 2
11101: ARRAY
11102: PUSH
11103: LD_LOC 11
11107: PUSH
11108: LD_INT 0
11110: PLUS
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: LIST
11116: ST_TO_ADDR
// if Side_Positions [ your_side ] <> 2 then
11117: LD_EXP 43
11121: PUSH
11122: LD_OWVAR 2
11126: ARRAY
11127: PUSH
11128: LD_INT 2
11130: NONEQUAL
11131: IFFALSE 11151
// ExtraStrings := s1 ^ s2 else
11133: LD_ADDR_EXP 69
11137: PUSH
11138: LD_VAR 0 2
11142: PUSH
11143: LD_VAR 0 3
11147: ADD
11148: ST_TO_ADDR
11149: GO 11167
// ExtraStrings := s2 ^ s1 ;
11151: LD_ADDR_EXP 69
11155: PUSH
11156: LD_VAR 0 3
11160: PUSH
11161: LD_VAR 0 2
11165: ADD
11166: ST_TO_ADDR
// end else
11167: GO 11190
// begin ExtraStrings := [ #Multi1x1-InfoNonL , ( free + 0 ) ] ;
11169: LD_ADDR_EXP 69
11173: PUSH
11174: LD_STRING #Multi1x1-InfoNonL
11176: PUSH
11177: LD_LOC 9
11181: PUSH
11182: LD_INT 0
11184: PLUS
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: ST_TO_ADDR
// end ; end ;
11190: LD_VAR 0 1
11194: RET
// every 0 0$1 do
11195: GO 11197
11197: DISABLE
// begin if not text_info then
11198: LD_EXP 34
11202: NOT
11203: IFFALSE 11207
// exit ;
11205: GO 11212
// displ_status ;
11207: CALL 11035 0 0
// enable ;
11211: ENABLE
// end ;
11212: END
// export function prepare_arrivals ; var i , ar , p1 , p2 , pom1 , pom2 ; begin
11213: LD_INT 0
11215: PPUSH
11216: PPUSH
11217: PPUSH
11218: PPUSH
11219: PPUSH
11220: PPUSH
11221: PPUSH
// arr1 := [ ] ;
11222: LD_ADDR_LOC 14
11226: PUSH
11227: EMPTY
11228: ST_TO_ADDR
// arr2 := [ ] ;
11229: LD_ADDR_LOC 15
11233: PUSH
11234: EMPTY
11235: ST_TO_ADDR
// for i := 1 to max_arriving_times do
11236: LD_ADDR_VAR 0 2
11240: PUSH
11241: DOUBLE
11242: LD_INT 1
11244: DEC
11245: ST_TO_ADDR
11246: LD_EXP 33
11250: PUSH
11251: FOR_TO
11252: IFFALSE 11788
// begin case rand ( 1 , 100 ) of 1 .. 45 :
11254: LD_INT 1
11256: PPUSH
11257: LD_INT 100
11259: PPUSH
11260: CALL_OW 12
11264: PUSH
11265: LD_INT 1
11267: DOUBLE
11268: GREATEREQUAL
11269: IFFALSE 11277
11271: LD_INT 45
11273: DOUBLE
11274: LESSEQUAL
11275: IFTRUE 11279
11277: GO 11486
11279: POP
// case rand ( 1 , 100 ) of 1 .. 10 :
11280: LD_INT 1
11282: PPUSH
11283: LD_INT 100
11285: PPUSH
11286: CALL_OW 12
11290: PUSH
11291: LD_INT 1
11293: DOUBLE
11294: GREATEREQUAL
11295: IFFALSE 11303
11297: LD_INT 10
11299: DOUBLE
11300: LESSEQUAL
11301: IFTRUE 11305
11303: GO 11323
11305: POP
// ar := [ Ar1Base1 , Ar2Base1 ] ; 11 .. 20 :
11306: LD_ADDR_VAR 0 3
11310: PUSH
11311: LD_INT 19
11313: PUSH
11314: LD_INT 15
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: ST_TO_ADDR
11321: GO 11484
11323: LD_INT 11
11325: DOUBLE
11326: GREATEREQUAL
11327: IFFALSE 11335
11329: LD_INT 20
11331: DOUBLE
11332: LESSEQUAL
11333: IFTRUE 11337
11335: GO 11355
11337: POP
// ar := [ Ar1Base2 , Ar2Base2 ] ; 21 .. 30 :
11338: LD_ADDR_VAR 0 3
11342: PUSH
11343: LD_INT 20
11345: PUSH
11346: LD_INT 14
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: ST_TO_ADDR
11353: GO 11484
11355: LD_INT 21
11357: DOUBLE
11358: GREATEREQUAL
11359: IFFALSE 11367
11361: LD_INT 30
11363: DOUBLE
11364: LESSEQUAL
11365: IFTRUE 11369
11367: GO 11387
11369: POP
// ar := [ Ar1Between , Ar2Between ] ; 31 .. 55 :
11370: LD_ADDR_VAR 0 3
11374: PUSH
11375: LD_INT 22
11377: PUSH
11378: LD_INT 16
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: ST_TO_ADDR
11385: GO 11484
11387: LD_INT 31
11389: DOUBLE
11390: GREATEREQUAL
11391: IFFALSE 11399
11393: LD_INT 55
11395: DOUBLE
11396: LESSEQUAL
11397: IFTRUE 11401
11399: GO 11419
11401: POP
// ar := [ Ar1Out2 , Ar2Out2 ] ; 56 .. 80 :
11402: LD_ADDR_VAR 0 3
11406: PUSH
11407: LD_INT 23
11409: PUSH
11410: LD_INT 17
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: ST_TO_ADDR
11417: GO 11484
11419: LD_INT 56
11421: DOUBLE
11422: GREATEREQUAL
11423: IFFALSE 11431
11425: LD_INT 80
11427: DOUBLE
11428: LESSEQUAL
11429: IFTRUE 11433
11431: GO 11451
11433: POP
// ar := [ Ar1Out1 , Ar2Out1 ] ; 81 .. 100 :
11434: LD_ADDR_VAR 0 3
11438: PUSH
11439: LD_INT 21
11441: PUSH
11442: LD_INT 13
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: ST_TO_ADDR
11449: GO 11484
11451: LD_INT 81
11453: DOUBLE
11454: GREATEREQUAL
11455: IFFALSE 11463
11457: LD_INT 100
11459: DOUBLE
11460: LESSEQUAL
11461: IFTRUE 11465
11463: GO 11483
11465: POP
// ar := [ Ar1Out3 , Ar2Out3 ] ; end ; 46 .. 85 :
11466: LD_ADDR_VAR 0 3
11470: PUSH
11471: LD_INT 24
11473: PUSH
11474: LD_INT 18
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: ST_TO_ADDR
11481: GO 11484
11483: POP
11484: GO 11740
11486: LD_INT 46
11488: DOUBLE
11489: GREATEREQUAL
11490: IFFALSE 11498
11492: LD_INT 85
11494: DOUBLE
11495: LESSEQUAL
11496: IFTRUE 11500
11498: GO 11707
11500: POP
// case rand ( 1 , 100 ) of 1 .. 5 :
11501: LD_INT 1
11503: PPUSH
11504: LD_INT 100
11506: PPUSH
11507: CALL_OW 12
11511: PUSH
11512: LD_INT 1
11514: DOUBLE
11515: GREATEREQUAL
11516: IFFALSE 11524
11518: LD_INT 5
11520: DOUBLE
11521: LESSEQUAL
11522: IFTRUE 11526
11524: GO 11544
11526: POP
// ar := [ Ar2Base1 , Ar1Base1 ] ; 6 .. 15 :
11527: LD_ADDR_VAR 0 3
11531: PUSH
11532: LD_INT 15
11534: PUSH
11535: LD_INT 19
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: ST_TO_ADDR
11542: GO 11705
11544: LD_INT 6
11546: DOUBLE
11547: GREATEREQUAL
11548: IFFALSE 11556
11550: LD_INT 15
11552: DOUBLE
11553: LESSEQUAL
11554: IFTRUE 11558
11556: GO 11576
11558: POP
// ar := [ Ar2Base2 , Ar1Base2 ] ; 16 .. 30 :
11559: LD_ADDR_VAR 0 3
11563: PUSH
11564: LD_INT 14
11566: PUSH
11567: LD_INT 20
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: ST_TO_ADDR
11574: GO 11705
11576: LD_INT 16
11578: DOUBLE
11579: GREATEREQUAL
11580: IFFALSE 11588
11582: LD_INT 30
11584: DOUBLE
11585: LESSEQUAL
11586: IFTRUE 11590
11588: GO 11608
11590: POP
// ar := [ Ar2Between , Ar1Between ] ; 31 .. 50 :
11591: LD_ADDR_VAR 0 3
11595: PUSH
11596: LD_INT 16
11598: PUSH
11599: LD_INT 22
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: ST_TO_ADDR
11606: GO 11705
11608: LD_INT 31
11610: DOUBLE
11611: GREATEREQUAL
11612: IFFALSE 11620
11614: LD_INT 50
11616: DOUBLE
11617: LESSEQUAL
11618: IFTRUE 11622
11620: GO 11640
11622: POP
// ar := [ Ar2Out2 , Ar1Out2 ] ; 51 .. 75 :
11623: LD_ADDR_VAR 0 3
11627: PUSH
11628: LD_INT 17
11630: PUSH
11631: LD_INT 23
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: ST_TO_ADDR
11638: GO 11705
11640: LD_INT 51
11642: DOUBLE
11643: GREATEREQUAL
11644: IFFALSE 11652
11646: LD_INT 75
11648: DOUBLE
11649: LESSEQUAL
11650: IFTRUE 11654
11652: GO 11672
11654: POP
// ar := [ Ar2Out1 , Ar1Out1 ] ; 76 .. 100 :
11655: LD_ADDR_VAR 0 3
11659: PUSH
11660: LD_INT 13
11662: PUSH
11663: LD_INT 21
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: ST_TO_ADDR
11670: GO 11705
11672: LD_INT 76
11674: DOUBLE
11675: GREATEREQUAL
11676: IFFALSE 11684
11678: LD_INT 100
11680: DOUBLE
11681: LESSEQUAL
11682: IFTRUE 11686
11684: GO 11704
11686: POP
// ar := [ Ar2Out3 , Ar1Out3 ] ; end ; 86 .. 100 :
11687: LD_ADDR_VAR 0 3
11691: PUSH
11692: LD_INT 18
11694: PUSH
11695: LD_INT 24
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: ST_TO_ADDR
11702: GO 11705
11704: POP
11705: GO 11740
11707: LD_INT 86
11709: DOUBLE
11710: GREATEREQUAL
11711: IFFALSE 11719
11713: LD_INT 100
11715: DOUBLE
11716: LESSEQUAL
11717: IFTRUE 11721
11719: GO 11739
11721: POP
// ar := [ valley , valley ] ; end ;
11722: LD_ADDR_VAR 0 3
11726: PUSH
11727: LD_INT 12
11729: PUSH
11730: LD_INT 12
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: ST_TO_ADDR
11737: GO 11740
11739: POP
// arr1 := arr1 ^ [ ar [ 1 ] ] ;
11740: LD_ADDR_LOC 14
11744: PUSH
11745: LD_LOC 14
11749: PUSH
11750: LD_VAR 0 3
11754: PUSH
11755: LD_INT 1
11757: ARRAY
11758: PUSH
11759: EMPTY
11760: LIST
11761: ADD
11762: ST_TO_ADDR
// arr2 := arr2 ^ [ ar [ 2 ] ] ;
11763: LD_ADDR_LOC 15
11767: PUSH
11768: LD_LOC 15
11772: PUSH
11773: LD_VAR 0 3
11777: PUSH
11778: LD_INT 2
11780: ARRAY
11781: PUSH
11782: EMPTY
11783: LIST
11784: ADD
11785: ST_TO_ADDR
// end ;
11786: GO 11251
11788: POP
11789: POP
// for i := 1 to max_arriving_times div 2 do
11790: LD_ADDR_VAR 0 2
11794: PUSH
11795: DOUBLE
11796: LD_INT 1
11798: DEC
11799: ST_TO_ADDR
11800: LD_EXP 33
11804: PUSH
11805: LD_INT 2
11807: DIV
11808: PUSH
11809: FOR_TO
11810: IFFALSE 11922
// begin p1 := Rand ( 1 , max_arriving_times ) ;
11812: LD_ADDR_VAR 0 4
11816: PUSH
11817: LD_INT 1
11819: PPUSH
11820: LD_EXP 33
11824: PPUSH
11825: CALL_OW 12
11829: ST_TO_ADDR
// p2 := Rand ( 1 , max_arriving_times ) ;
11830: LD_ADDR_VAR 0 5
11834: PUSH
11835: LD_INT 1
11837: PPUSH
11838: LD_EXP 33
11842: PPUSH
11843: CALL_OW 12
11847: ST_TO_ADDR
// pom1 := arr2 [ p1 ] ;
11848: LD_ADDR_VAR 0 6
11852: PUSH
11853: LD_LOC 15
11857: PUSH
11858: LD_VAR 0 4
11862: ARRAY
11863: ST_TO_ADDR
// pom2 := arr2 [ p2 ] ;
11864: LD_ADDR_VAR 0 7
11868: PUSH
11869: LD_LOC 15
11873: PUSH
11874: LD_VAR 0 5
11878: ARRAY
11879: ST_TO_ADDR
// arr2 := Replace ( Replace ( arr2 , p2 , pom1 ) , p1 , pom2 ) ;
11880: LD_ADDR_LOC 15
11884: PUSH
11885: LD_LOC 15
11889: PPUSH
11890: LD_VAR 0 5
11894: PPUSH
11895: LD_VAR 0 6
11899: PPUSH
11900: CALL_OW 1
11904: PPUSH
11905: LD_VAR 0 4
11909: PPUSH
11910: LD_VAR 0 7
11914: PPUSH
11915: CALL_OW 1
11919: ST_TO_ADDR
// end ;
11920: GO 11809
11922: POP
11923: POP
// end ;
11924: LD_VAR 0 1
11928: RET
// every 0 0$1 do
11929: GO 11931
11931: DISABLE
// begin if not max_arriving_times then
11932: LD_EXP 33
11936: NOT
11937: IFFALSE 11941
// exit ;
11939: GO 12024
// if tick >= max_arriving_times [ 1 ] * 0 0$30 then
11941: LD_OWVAR 1
11945: PUSH
11946: LD_EXP 33
11950: PUSH
11951: LD_INT 1
11953: ARRAY
11954: PUSH
11955: LD_INT 1050
11957: MUL
11958: GREATEREQUAL
11959: IFFALSE 12023
// begin new1 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11961: LD_ADDR_LOC 12
11965: PUSH
11966: LD_INT 1
11968: PPUSH
11969: LD_EXP 33
11973: PUSH
11974: LD_INT 1050
11976: MUL
11977: PPUSH
11978: CALL_OW 12
11982: ST_TO_ADDR
// new2 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11983: LD_ADDR_LOC 13
11987: PUSH
11988: LD_INT 1
11990: PPUSH
11991: LD_EXP 33
11995: PUSH
11996: LD_INT 1050
11998: MUL
11999: PPUSH
12000: CALL_OW 12
12004: ST_TO_ADDR
// max_arriving_times := delete ( max_arriving_times , 1 ) ;
12005: LD_ADDR_EXP 33
12009: PUSH
12010: LD_EXP 33
12014: PPUSH
12015: LD_INT 1
12017: PPUSH
12018: CALL_OW 3
12022: ST_TO_ADDR
// end ; enable ;
12023: ENABLE
// end ;
12024: END
// function new_arrival ( pos ) ; var hum ; begin
12025: LD_INT 0
12027: PPUSH
12028: PPUSH
// if def_people_loyality then
12029: LD_EXP 12
12033: IFFALSE 12075
// begin uc_side := second_side [ pos ] ;
12035: LD_ADDR_OWVAR 20
12039: PUSH
12040: LD_EXP 47
12044: PUSH
12045: LD_VAR 0 1
12049: ARRAY
12050: ST_TO_ADDR
// uc_nation := Side_Nations [ positions [ pos ] ] ;
12051: LD_ADDR_OWVAR 21
12055: PUSH
12056: LD_EXP 44
12060: PUSH
12061: LD_EXP 39
12065: PUSH
12066: LD_VAR 0 1
12070: ARRAY
12071: ARRAY
12072: ST_TO_ADDR
// end else
12073: GO 12095
// begin uc_side := second_side ;
12075: LD_ADDR_OWVAR 20
12079: PUSH
12080: LD_EXP 47
12084: ST_TO_ADDR
// uc_nation := third_nation ;
12085: LD_ADDR_OWVAR 21
12089: PUSH
12090: LD_EXP 48
12094: ST_TO_ADDR
// end ; PrepareHuman ( 0 , 0 , initial_level + 1 ) ;
12095: LD_INT 0
12097: PPUSH
12098: LD_INT 0
12100: PPUSH
12101: LD_EXP 29
12105: PUSH
12106: LD_INT 1
12108: PLUS
12109: PPUSH
12110: CALL_OW 380
// hc_class := class_soldier ;
12114: LD_ADDR_OWVAR 28
12118: PUSH
12119: LD_INT 1
12121: ST_TO_ADDR
// hum := CreateHuman ;
12122: LD_ADDR_VAR 0 3
12126: PUSH
12127: CALL_OW 44
12131: ST_TO_ADDR
// if pos = 1 then
12132: LD_VAR 0 1
12136: PUSH
12137: LD_INT 1
12139: EQUAL
12140: IFFALSE 12183
// begin PlaceUnitArea ( hum , arr1 [ 1 ] , true ) ;
12142: LD_VAR 0 3
12146: PPUSH
12147: LD_LOC 14
12151: PUSH
12152: LD_INT 1
12154: ARRAY
12155: PPUSH
12156: LD_INT 1
12158: PPUSH
12159: CALL_OW 49
// arr1 := delete ( arr1 , 1 ) ;
12163: LD_ADDR_LOC 14
12167: PUSH
12168: LD_LOC 14
12172: PPUSH
12173: LD_INT 1
12175: PPUSH
12176: CALL_OW 3
12180: ST_TO_ADDR
// end else
12181: GO 12222
// begin PlaceUnitArea ( hum , arr2 [ 1 ] , true ) ;
12183: LD_VAR 0 3
12187: PPUSH
12188: LD_LOC 15
12192: PUSH
12193: LD_INT 1
12195: ARRAY
12196: PPUSH
12197: LD_INT 1
12199: PPUSH
12200: CALL_OW 49
// arr2 := delete ( arr2 , 1 ) ;
12204: LD_ADDR_LOC 15
12208: PUSH
12209: LD_LOC 15
12213: PPUSH
12214: LD_INT 1
12216: PPUSH
12217: CALL_OW 3
12221: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) until IsPlaced ( hum ) ;
12222: LD_INT 35
12224: PPUSH
12225: CALL_OW 67
12229: LD_VAR 0 3
12233: PPUSH
12234: CALL_OW 305
12238: IFFALSE 12222
// if def_people_loyality then
12240: LD_EXP 12
12244: IFFALSE 12304
// if pos = 1 then
12246: LD_VAR 0 1
12250: PUSH
12251: LD_INT 1
12253: EQUAL
12254: IFFALSE 12274
// free1 := free1 ^ hum else
12256: LD_ADDR_LOC 10
12260: PUSH
12261: LD_LOC 10
12265: PUSH
12266: LD_VAR 0 3
12270: ADD
12271: ST_TO_ADDR
12272: GO 12302
// if pos = 2 then
12274: LD_VAR 0 1
12278: PUSH
12279: LD_INT 2
12281: EQUAL
12282: IFFALSE 12302
// free2 := free2 ^ hum else
12284: LD_ADDR_LOC 11
12288: PUSH
12289: LD_LOC 11
12293: PUSH
12294: LD_VAR 0 3
12298: ADD
12299: ST_TO_ADDR
12300: GO 12302
// else
12302: GO 12320
// free := free ^ hum ;
12304: LD_ADDR_LOC 9
12308: PUSH
12309: LD_LOC 9
12313: PUSH
12314: LD_VAR 0 3
12318: ADD
12319: ST_TO_ADDR
// end ;
12320: LD_VAR 0 2
12324: RET
// every 0 0$0.5 trigger new1 do var d ;
12325: LD_LOC 12
12329: IFFALSE 12362
12331: GO 12333
12333: DISABLE
12334: LD_INT 0
12336: PPUSH
// begin enable ;
12337: ENABLE
// new1 := 0 ;
12338: LD_ADDR_LOC 12
12342: PUSH
12343: LD_INT 0
12345: ST_TO_ADDR
// wait ( d ) ;
12346: LD_VAR 0 1
12350: PPUSH
12351: CALL_OW 67
// new_arrival ( 1 ) ;
12355: LD_INT 1
12357: PPUSH
12358: CALL 12025 0 1
// end ;
12362: PPOPN 1
12364: END
// every 0 0$0.5 trigger new2 do var d ;
12365: LD_LOC 13
12369: IFFALSE 12402
12371: GO 12373
12373: DISABLE
12374: LD_INT 0
12376: PPUSH
// begin enable ;
12377: ENABLE
// new2 := 0 ;
12378: LD_ADDR_LOC 13
12382: PUSH
12383: LD_INT 0
12385: ST_TO_ADDR
// wait ( d ) ;
12386: LD_VAR 0 1
12390: PPUSH
12391: CALL_OW 67
// new_arrival ( 2 ) ;
12395: LD_INT 2
12397: PPUSH
12398: CALL 12025 0 1
// end ;
12402: PPOPN 1
12404: END
// function check_one_side ( un , side ) ; begin
12405: LD_INT 0
12407: PPUSH
// if FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , side ] , [ f_dist , un , 3 ] ] ) then
12408: LD_INT 21
12410: PUSH
12411: LD_INT 1
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: PUSH
12418: LD_INT 22
12420: PUSH
12421: LD_VAR 0 2
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: LD_INT 91
12432: PUSH
12433: LD_VAR 0 1
12437: PUSH
12438: LD_INT 3
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: LIST
12450: PPUSH
12451: CALL_OW 69
12455: IFFALSE 12469
// result := side else
12457: LD_ADDR_VAR 0 3
12461: PUSH
12462: LD_VAR 0 2
12466: ST_TO_ADDR
12467: GO 12477
// result := 0 ;
12469: LD_ADDR_VAR 0 3
12473: PUSH
12474: LD_INT 0
12476: ST_TO_ADDR
// end ;
12477: LD_VAR 0 3
12481: RET
// function check_two_sides ( un , side1 , side2 ) ; var un1 , s1 , s2 ; begin
12482: LD_INT 0
12484: PPUSH
12485: PPUSH
12486: PPUSH
12487: PPUSH
// s1 := 0 ;
12488: LD_ADDR_VAR 0 6
12492: PUSH
12493: LD_INT 0
12495: ST_TO_ADDR
// s2 := 0 ;
12496: LD_ADDR_VAR 0 7
12500: PUSH
12501: LD_INT 0
12503: ST_TO_ADDR
// for un1 in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_dist , un , 3 ] ] ) do
12504: LD_ADDR_VAR 0 5
12508: PUSH
12509: LD_INT 21
12511: PUSH
12512: LD_INT 1
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: PUSH
12519: LD_INT 91
12521: PUSH
12522: LD_VAR 0 1
12526: PUSH
12527: LD_INT 3
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: LIST
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PPUSH
12539: CALL_OW 69
12543: PUSH
12544: FOR_IN
12545: IFFALSE 12613
// begin if GetSide ( un1 ) = side1 then
12547: LD_VAR 0 5
12551: PPUSH
12552: CALL_OW 255
12556: PUSH
12557: LD_VAR 0 2
12561: EQUAL
12562: IFFALSE 12580
// s1 := s1 + 1 else
12564: LD_ADDR_VAR 0 6
12568: PUSH
12569: LD_VAR 0 6
12573: PUSH
12574: LD_INT 1
12576: PLUS
12577: ST_TO_ADDR
12578: GO 12611
// if GetSide ( un1 ) = side2 then
12580: LD_VAR 0 5
12584: PPUSH
12585: CALL_OW 255
12589: PUSH
12590: LD_VAR 0 3
12594: EQUAL
12595: IFFALSE 12611
// s2 := s2 + 1 ;
12597: LD_ADDR_VAR 0 7
12601: PUSH
12602: LD_VAR 0 7
12606: PUSH
12607: LD_INT 1
12609: PLUS
12610: ST_TO_ADDR
// end ;
12611: GO 12544
12613: POP
12614: POP
// if s1 = s2 then
12615: LD_VAR 0 6
12619: PUSH
12620: LD_VAR 0 7
12624: EQUAL
12625: IFFALSE 12637
// result := 0 else
12627: LD_ADDR_VAR 0 4
12631: PUSH
12632: LD_INT 0
12634: ST_TO_ADDR
12635: GO 12667
// if s1 > s2 then
12637: LD_VAR 0 6
12641: PUSH
12642: LD_VAR 0 7
12646: GREATER
12647: IFFALSE 12659
// result := 1 else
12649: LD_ADDR_VAR 0 4
12653: PUSH
12654: LD_INT 1
12656: ST_TO_ADDR
12657: GO 12667
// result := 2 ;
12659: LD_ADDR_VAR 0 4
12663: PUSH
12664: LD_INT 2
12666: ST_TO_ADDR
// end ;
12667: LD_VAR 0 4
12671: RET
// every 0 0$2 do var un ;
12672: GO 12674
12674: DISABLE
12675: LD_INT 0
12677: PPUSH
// begin if def_people_loyality then
12678: LD_EXP 12
12682: IFFALSE 13061
// if not fog_info then
12684: LD_EXP 35
12688: NOT
12689: IFFALSE 12877
// begin if your_side then
12691: LD_OWVAR 2
12695: IFFALSE 12875
// if side_positions [ your_side ] = 1 then
12697: LD_EXP 43
12701: PUSH
12702: LD_OWVAR 2
12706: ARRAY
12707: PUSH
12708: LD_INT 1
12710: EQUAL
12711: IFFALSE 12787
// begin un := UnitFilter ( free1 diff seenby1 , [ f_see , your_side ] ) ;
12713: LD_ADDR_VAR 0 1
12717: PUSH
12718: LD_LOC 10
12722: PUSH
12723: LD_LOC 16
12727: DIFF
12728: PPUSH
12729: LD_INT 101
12731: PUSH
12732: LD_OWVAR 2
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PPUSH
12741: CALL_OW 72
12745: ST_TO_ADDR
// if un then
12746: LD_VAR 0 1
12750: IFFALSE 12785
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12752: LD_VAR 0 1
12756: PUSH
12757: LD_INT 1
12759: ARRAY
12760: PPUSH
12761: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12765: LD_ADDR_LOC 16
12769: PUSH
12770: LD_LOC 16
12774: PUSH
12775: LD_VAR 0 1
12779: PUSH
12780: LD_INT 1
12782: ARRAY
12783: ADD
12784: ST_TO_ADDR
// end ; end else
12785: GO 12875
// if side_positions [ your_side ] = 2 then
12787: LD_EXP 43
12791: PUSH
12792: LD_OWVAR 2
12796: ARRAY
12797: PUSH
12798: LD_INT 2
12800: EQUAL
12801: IFFALSE 12875
// begin un := UnitFilter ( free2 diff seenby2 , [ f_see , your_side ] ) ;
12803: LD_ADDR_VAR 0 1
12807: PUSH
12808: LD_LOC 11
12812: PUSH
12813: LD_LOC 17
12817: DIFF
12818: PPUSH
12819: LD_INT 101
12821: PUSH
12822: LD_OWVAR 2
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PPUSH
12831: CALL_OW 72
12835: ST_TO_ADDR
// if un then
12836: LD_VAR 0 1
12840: IFFALSE 12875
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12842: LD_VAR 0 1
12846: PUSH
12847: LD_INT 1
12849: ARRAY
12850: PPUSH
12851: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
12855: LD_ADDR_LOC 17
12859: PUSH
12860: LD_LOC 17
12864: PUSH
12865: LD_VAR 0 1
12869: PUSH
12870: LD_INT 1
12872: ARRAY
12873: ADD
12874: ST_TO_ADDR
// end ; end ; end else
12875: GO 13061
// begin if your_side then
12877: LD_OWVAR 2
12881: IFFALSE 13061
// if side_positions [ your_side ] = 1 then
12883: LD_EXP 43
12887: PUSH
12888: LD_OWVAR 2
12892: ARRAY
12893: PUSH
12894: LD_INT 1
12896: EQUAL
12897: IFFALSE 12973
// begin un := UnitFilter ( free diff seenby1 , [ f_see , your_side ] ) ;
12899: LD_ADDR_VAR 0 1
12903: PUSH
12904: LD_LOC 9
12908: PUSH
12909: LD_LOC 16
12913: DIFF
12914: PPUSH
12915: LD_INT 101
12917: PUSH
12918: LD_OWVAR 2
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PPUSH
12927: CALL_OW 72
12931: ST_TO_ADDR
// if un then
12932: LD_VAR 0 1
12936: IFFALSE 12971
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12938: LD_VAR 0 1
12942: PUSH
12943: LD_INT 1
12945: ARRAY
12946: PPUSH
12947: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12951: LD_ADDR_LOC 16
12955: PUSH
12956: LD_LOC 16
12960: PUSH
12961: LD_VAR 0 1
12965: PUSH
12966: LD_INT 1
12968: ARRAY
12969: ADD
12970: ST_TO_ADDR
// end ; end else
12971: GO 13061
// if side_positions [ your_side ] = 2 then
12973: LD_EXP 43
12977: PUSH
12978: LD_OWVAR 2
12982: ARRAY
12983: PUSH
12984: LD_INT 2
12986: EQUAL
12987: IFFALSE 13061
// begin un := UnitFilter ( free diff seenby2 , [ f_see , your_side ] ) ;
12989: LD_ADDR_VAR 0 1
12993: PUSH
12994: LD_LOC 9
12998: PUSH
12999: LD_LOC 17
13003: DIFF
13004: PPUSH
13005: LD_INT 101
13007: PUSH
13008: LD_OWVAR 2
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: PPUSH
13017: CALL_OW 72
13021: ST_TO_ADDR
// if un then
13022: LD_VAR 0 1
13026: IFFALSE 13061
// begin CenterNowOnUnits ( un [ 1 ] ) ;
13028: LD_VAR 0 1
13032: PUSH
13033: LD_INT 1
13035: ARRAY
13036: PPUSH
13037: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
13041: LD_ADDR_LOC 17
13045: PUSH
13046: LD_LOC 17
13050: PUSH
13051: LD_VAR 0 1
13055: PUSH
13056: LD_INT 1
13058: ARRAY
13059: ADD
13060: ST_TO_ADDR
// end ; end ; end ; enable ;
13061: ENABLE
// end ;
13062: PPOPN 1
13064: END
// every 0 0$0.5 do var un , s ;
13065: GO 13067
13067: DISABLE
13068: LD_INT 0
13070: PPUSH
13071: PPUSH
// begin if def_people_loyality then
13072: LD_EXP 12
13076: IFFALSE 13282
// begin for un in free1 do
13078: LD_ADDR_VAR 0 1
13082: PUSH
13083: LD_LOC 10
13087: PUSH
13088: FOR_IN
13089: IFFALSE 13177
// if not IsLive ( un ) then
13091: LD_VAR 0 1
13095: PPUSH
13096: CALL_OW 300
13100: NOT
13101: IFFALSE 13121
// free1 := free1 diff un else
13103: LD_ADDR_LOC 10
13107: PUSH
13108: LD_LOC 10
13112: PUSH
13113: LD_VAR 0 1
13117: DIFF
13118: ST_TO_ADDR
13119: GO 13175
// if check_one_side ( un , positions [ 1 ] ) then
13121: LD_VAR 0 1
13125: PPUSH
13126: LD_EXP 39
13130: PUSH
13131: LD_INT 1
13133: ARRAY
13134: PPUSH
13135: CALL 12405 0 2
13139: IFFALSE 13175
// begin SetSide ( un , positions [ 1 ] ) ;
13141: LD_VAR 0 1
13145: PPUSH
13146: LD_EXP 39
13150: PUSH
13151: LD_INT 1
13153: ARRAY
13154: PPUSH
13155: CALL_OW 235
// free1 := free1 diff un ;
13159: LD_ADDR_LOC 10
13163: PUSH
13164: LD_LOC 10
13168: PUSH
13169: LD_VAR 0 1
13173: DIFF
13174: ST_TO_ADDR
// end ;
13175: GO 13088
13177: POP
13178: POP
// for un in free2 do
13179: LD_ADDR_VAR 0 1
13183: PUSH
13184: LD_LOC 11
13188: PUSH
13189: FOR_IN
13190: IFFALSE 13278
// if not IsLive ( un ) then
13192: LD_VAR 0 1
13196: PPUSH
13197: CALL_OW 300
13201: NOT
13202: IFFALSE 13222
// free2 := free2 diff un else
13204: LD_ADDR_LOC 11
13208: PUSH
13209: LD_LOC 11
13213: PUSH
13214: LD_VAR 0 1
13218: DIFF
13219: ST_TO_ADDR
13220: GO 13276
// if check_one_side ( un , positions [ 2 ] ) then
13222: LD_VAR 0 1
13226: PPUSH
13227: LD_EXP 39
13231: PUSH
13232: LD_INT 2
13234: ARRAY
13235: PPUSH
13236: CALL 12405 0 2
13240: IFFALSE 13276
// begin SetSide ( un , positions [ 2 ] ) ;
13242: LD_VAR 0 1
13246: PPUSH
13247: LD_EXP 39
13251: PUSH
13252: LD_INT 2
13254: ARRAY
13255: PPUSH
13256: CALL_OW 235
// free2 := free2 diff un ;
13260: LD_ADDR_LOC 11
13264: PUSH
13265: LD_LOC 11
13269: PUSH
13270: LD_VAR 0 1
13274: DIFF
13275: ST_TO_ADDR
// end ;
13276: GO 13189
13278: POP
13279: POP
// end else
13280: GO 13404
// begin for un in free do
13282: LD_ADDR_VAR 0 1
13286: PUSH
13287: LD_LOC 9
13291: PUSH
13292: FOR_IN
13293: IFFALSE 13402
// if not IsLive ( un ) then
13295: LD_VAR 0 1
13299: PPUSH
13300: CALL_OW 300
13304: NOT
13305: IFFALSE 13325
// free := free diff un else
13307: LD_ADDR_LOC 9
13311: PUSH
13312: LD_LOC 9
13316: PUSH
13317: LD_VAR 0 1
13321: DIFF
13322: ST_TO_ADDR
13323: GO 13400
// begin s := check_two_sides ( un , positions [ 1 ] , positions [ 2 ] ) ;
13325: LD_ADDR_VAR 0 2
13329: PUSH
13330: LD_VAR 0 1
13334: PPUSH
13335: LD_EXP 39
13339: PUSH
13340: LD_INT 1
13342: ARRAY
13343: PPUSH
13344: LD_EXP 39
13348: PUSH
13349: LD_INT 2
13351: ARRAY
13352: PPUSH
13353: CALL 12482 0 3
13357: ST_TO_ADDR
// if s then
13358: LD_VAR 0 2
13362: IFFALSE 13400
// begin SetSide ( un , positions [ s ] ) ;
13364: LD_VAR 0 1
13368: PPUSH
13369: LD_EXP 39
13373: PUSH
13374: LD_VAR 0 2
13378: ARRAY
13379: PPUSH
13380: CALL_OW 235
// free := free diff un ;
13384: LD_ADDR_LOC 9
13388: PUSH
13389: LD_LOC 9
13393: PUSH
13394: LD_VAR 0 1
13398: DIFF
13399: ST_TO_ADDR
// end ; end ;
13400: GO 13292
13402: POP
13403: POP
// end ; enable ;
13404: ENABLE
// end ; end_of_file
13405: PPOPN 2
13407: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
13408: LD_INT 0
13410: PPUSH
13411: PPUSH
13412: PPUSH
// enable ( 600 ) ;
13413: LD_INT 600
13415: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
13416: LD_ADDR_VAR 0 2
13420: PUSH
13421: DOUBLE
13422: LD_INT 1
13424: DEC
13425: ST_TO_ADDR
13426: LD_EXP 65
13430: PUSH
13431: FOR_TO
13432: IFFALSE 13587
// if Position_Sides [ i ] then
13434: LD_EXP 46
13438: PUSH
13439: LD_VAR 0 2
13443: ARRAY
13444: IFFALSE 13585
// for j := 1 to 8 do
13446: LD_ADDR_VAR 0 3
13450: PUSH
13451: DOUBLE
13452: LD_INT 1
13454: DEC
13455: ST_TO_ADDR
13456: LD_INT 8
13458: PUSH
13459: FOR_TO
13460: IFFALSE 13583
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13462: LD_EXP 43
13466: PUSH
13467: LD_VAR 0 3
13471: ARRAY
13472: PUSH
13473: LD_EXP 40
13477: PUSH
13478: LD_EXP 46
13482: PUSH
13483: LD_VAR 0 2
13487: ARRAY
13488: ARRAY
13489: PUSH
13490: LD_EXP 40
13494: PUSH
13495: LD_VAR 0 3
13499: ARRAY
13500: NONEQUAL
13501: PUSH
13502: LD_EXP 45
13506: NOT
13507: PUSH
13508: LD_EXP 46
13512: PUSH
13513: LD_VAR 0 2
13517: ARRAY
13518: PUSH
13519: LD_VAR 0 3
13523: NONEQUAL
13524: AND
13525: OR
13526: AND
13527: IFFALSE 13551
// HideArea ( j , BuildUpAreas [ i ] ) else
13529: LD_VAR 0 3
13533: PPUSH
13534: LD_EXP 65
13538: PUSH
13539: LD_VAR 0 2
13543: ARRAY
13544: PPUSH
13545: CALL_OW 333
13549: GO 13581
// if ( j = your_side ) then
13551: LD_VAR 0 3
13555: PUSH
13556: LD_OWVAR 2
13560: EQUAL
13561: IFFALSE 13581
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
13563: LD_EXP 65
13567: PUSH
13568: LD_VAR 0 2
13572: ARRAY
13573: PPUSH
13574: LD_INT 5
13576: PPUSH
13577: CALL_OW 424
13581: GO 13459
13583: POP
13584: POP
13585: GO 13431
13587: POP
13588: POP
// end ;
13589: LD_VAR 0 1
13593: RET
// export function EndBuildUp ; var i , j ; begin
13594: LD_INT 0
13596: PPUSH
13597: PPUSH
13598: PPUSH
// disable ( 600 ) ;
13599: LD_INT 600
13601: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
13602: LD_ADDR_VAR 0 2
13606: PUSH
13607: DOUBLE
13608: LD_INT 1
13610: DEC
13611: ST_TO_ADDR
13612: LD_EXP 65
13616: PUSH
13617: FOR_TO
13618: IFFALSE 13773
// if Position_Sides [ i ] then
13620: LD_EXP 46
13624: PUSH
13625: LD_VAR 0 2
13629: ARRAY
13630: IFFALSE 13771
// for j := 1 to 8 do
13632: LD_ADDR_VAR 0 3
13636: PUSH
13637: DOUBLE
13638: LD_INT 1
13640: DEC
13641: ST_TO_ADDR
13642: LD_INT 8
13644: PUSH
13645: FOR_TO
13646: IFFALSE 13769
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13648: LD_EXP 43
13652: PUSH
13653: LD_VAR 0 3
13657: ARRAY
13658: PUSH
13659: LD_EXP 40
13663: PUSH
13664: LD_EXP 46
13668: PUSH
13669: LD_VAR 0 2
13673: ARRAY
13674: ARRAY
13675: PUSH
13676: LD_EXP 40
13680: PUSH
13681: LD_VAR 0 3
13685: ARRAY
13686: NONEQUAL
13687: PUSH
13688: LD_EXP 45
13692: NOT
13693: PUSH
13694: LD_EXP 46
13698: PUSH
13699: LD_VAR 0 2
13703: ARRAY
13704: PUSH
13705: LD_VAR 0 3
13709: NONEQUAL
13710: AND
13711: OR
13712: AND
13713: IFFALSE 13737
// ShowArea ( j , BuildUpAreas [ i ] ) else
13715: LD_VAR 0 3
13719: PPUSH
13720: LD_EXP 65
13724: PUSH
13725: LD_VAR 0 2
13729: ARRAY
13730: PPUSH
13731: CALL_OW 334
13735: GO 13767
// if ( j = your_side ) then
13737: LD_VAR 0 3
13741: PUSH
13742: LD_OWVAR 2
13746: EQUAL
13747: IFFALSE 13767
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
13749: LD_EXP 65
13753: PUSH
13754: LD_VAR 0 2
13758: ARRAY
13759: PPUSH
13760: LD_INT 0
13762: PPUSH
13763: CALL_OW 424
13767: GO 13645
13769: POP
13770: POP
13771: GO 13617
13773: POP
13774: POP
// end ;
13775: LD_VAR 0 1
13779: RET
// every 5 marked 600 do var i , un ;
13780: GO 13782
13782: DISABLE
13783: LD_INT 0
13785: PPUSH
13786: PPUSH
// begin for i := 1 to BuildUpAreas do
13787: LD_ADDR_VAR 0 1
13791: PUSH
13792: DOUBLE
13793: LD_INT 1
13795: DEC
13796: ST_TO_ADDR
13797: LD_EXP 65
13801: PUSH
13802: FOR_TO
13803: IFFALSE 13958
// if Position_Sides [ i ] then
13805: LD_EXP 46
13809: PUSH
13810: LD_VAR 0 1
13814: ARRAY
13815: IFFALSE 13956
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13817: LD_ADDR_VAR 0 2
13821: PUSH
13822: LD_EXP 65
13826: PUSH
13827: LD_VAR 0 1
13831: ARRAY
13832: PPUSH
13833: LD_INT 2
13835: PUSH
13836: LD_INT 21
13838: PUSH
13839: LD_INT 1
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PUSH
13846: LD_INT 21
13848: PUSH
13849: LD_INT 2
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: LIST
13860: PUSH
13861: LD_INT 22
13863: PUSH
13864: LD_OWVAR 2
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PPUSH
13877: CALL_OW 70
13881: PUSH
13882: FOR_IN
13883: IFFALSE 13954
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
13885: LD_EXP 40
13889: PUSH
13890: LD_EXP 46
13894: PUSH
13895: LD_VAR 0 1
13899: ARRAY
13900: ARRAY
13901: PUSH
13902: LD_EXP 40
13906: PUSH
13907: LD_OWVAR 2
13911: ARRAY
13912: NONEQUAL
13913: PUSH
13914: LD_EXP 45
13918: NOT
13919: PUSH
13920: LD_EXP 46
13924: PUSH
13925: LD_VAR 0 1
13929: ARRAY
13930: PUSH
13931: LD_OWVAR 2
13935: NONEQUAL
13936: AND
13937: OR
13938: IFFALSE 13952
// ComMoveToArea ( un , BuildUpEscape ) ;
13940: LD_VAR 0 2
13944: PPUSH
13945: LD_INT 28
13947: PPUSH
13948: CALL_OW 113
13952: GO 13882
13954: POP
13955: POP
13956: GO 13802
13958: POP
13959: POP
// enable ;
13960: ENABLE
// end ;
13961: PPOPN 2
13963: END
// every 5 5$00 do
13964: GO 13966
13966: DISABLE
// if ( def_builduptime = 1 ) then
13967: LD_EXP 17
13971: PUSH
13972: LD_INT 1
13974: EQUAL
13975: IFFALSE 13981
// EndBuildUp ;
13977: CALL 13594 0 0
13981: END
// every 10 10$00 do
13982: GO 13984
13984: DISABLE
// if ( def_builduptime = 2 ) then
13985: LD_EXP 17
13989: PUSH
13990: LD_INT 2
13992: EQUAL
13993: IFFALSE 13999
// EndBuildUp ;
13995: CALL 13594 0 0
13999: END
// every 15 15$00 do
14000: GO 14002
14002: DISABLE
// if ( def_builduptime = 3 ) then
14003: LD_EXP 17
14007: PUSH
14008: LD_INT 3
14010: EQUAL
14011: IFFALSE 14017
// EndBuildUp ; end_of_file
14013: CALL 13594 0 0
14017: END
// export Game_Type , def_game_rules ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
14018: LD_INT 0
14020: PPUSH
14021: PPUSH
// if ( not IAmSpec ) then
14022: CALL_OW 531
14026: NOT
14027: IFFALSE 14043
// Result := Limits_Info ^  ;
14029: LD_ADDR_VAR 0 1
14033: PUSH
14034: LD_LOC 25
14038: PUSH
14039: LD_STRING 
14041: ADD
14042: ST_TO_ADDR
// for i := 1 to 8 do
14043: LD_ADDR_VAR 0 2
14047: PUSH
14048: DOUBLE
14049: LD_INT 1
14051: DEC
14052: ST_TO_ADDR
14053: LD_INT 8
14055: PUSH
14056: FOR_TO
14057: IFFALSE 14102
// if Cheaters [ i ] then
14059: LD_LOC 26
14063: PUSH
14064: LD_VAR 0 2
14068: ARRAY
14069: IFFALSE 14100
// Result := Result ^ [ #Cheater , i , i ] ;
14071: LD_ADDR_VAR 0 1
14075: PUSH
14076: LD_VAR 0 1
14080: PUSH
14081: LD_STRING #Cheater
14083: PUSH
14084: LD_VAR 0 2
14088: PUSH
14089: LD_VAR 0 2
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: ADD
14099: ST_TO_ADDR
14100: GO 14056
14102: POP
14103: POP
// end ;
14104: LD_VAR 0 1
14108: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
14109: LD_INT 0
14111: PPUSH
14112: PPUSH
14113: PPUSH
14114: PPUSH
14115: PPUSH
// case Game_Type of 10 :
14116: LD_EXP 66
14120: PUSH
14121: LD_INT 10
14123: DOUBLE
14124: EQUAL
14125: IFTRUE 14129
14127: GO 14140
14129: POP
// def_game_rules := 1 ; 11 :
14130: LD_ADDR_EXP 67
14134: PUSH
14135: LD_INT 1
14137: ST_TO_ADDR
14138: GO 14160
14140: LD_INT 11
14142: DOUBLE
14143: EQUAL
14144: IFTRUE 14148
14146: GO 14159
14148: POP
// def_game_rules := 3 ; end ;
14149: LD_ADDR_EXP 67
14153: PUSH
14154: LD_INT 3
14156: ST_TO_ADDR
14157: GO 14160
14159: POP
// case def_game_rules of 0 :
14160: LD_EXP 67
14164: PUSH
14165: LD_INT 0
14167: DOUBLE
14168: EQUAL
14169: IFTRUE 14173
14171: GO 14178
14173: POP
// exit ; 1 :
14174: GO 14786
14176: GO 14686
14178: LD_INT 1
14180: DOUBLE
14181: EQUAL
14182: IFTRUE 14186
14184: GO 14418
14186: POP
// begin def_main_base = 1 ;
14187: LD_ADDR_EXP 1
14191: PUSH
14192: LD_INT 1
14194: ST_TO_ADDR
// def_secondary_base = 0 ;
14195: LD_ADDR_EXP 2
14199: PUSH
14200: LD_INT 0
14202: ST_TO_ADDR
// def_defence_level = 1 ;
14203: LD_ADDR_EXP 3
14207: PUSH
14208: LD_INT 1
14210: ST_TO_ADDR
// def_amount_of_people = 2 ;
14211: LD_ADDR_EXP 4
14215: PUSH
14216: LD_INT 2
14218: ST_TO_ADDR
// def_initial_level = 1 ;
14219: LD_ADDR_EXP 5
14223: PUSH
14224: LD_INT 1
14226: ST_TO_ADDR
// def_main_deposits = 2 ;
14227: LD_ADDR_EXP 6
14231: PUSH
14232: LD_INT 2
14234: ST_TO_ADDR
// def_secondary_deposits = 1 ;
14235: LD_ADDR_EXP 7
14239: PUSH
14240: LD_INT 1
14242: ST_TO_ADDR
// def_siberite_detection = 1 ;
14243: LD_ADDR_EXP 8
14247: PUSH
14248: LD_INT 1
14250: ST_TO_ADDR
// def_starting_resources = 2 ;
14251: LD_ADDR_EXP 9
14255: PUSH
14256: LD_INT 2
14258: ST_TO_ADDR
// def_shipments_density = 1 ;
14259: LD_ADDR_EXP 10
14263: PUSH
14264: LD_INT 1
14266: ST_TO_ADDR
// def_people_arrivals = 0 ;
14267: LD_ADDR_EXP 11
14271: PUSH
14272: LD_INT 0
14274: ST_TO_ADDR
// def_people_loyality = 0 ;
14275: LD_ADDR_EXP 12
14279: PUSH
14280: LD_INT 0
14282: ST_TO_ADDR
// def_people_info = 0 ;
14283: LD_ADDR_EXP 13
14287: PUSH
14288: LD_INT 0
14290: ST_TO_ADDR
// def_morale_flags = 1 ;
14291: LD_ADDR_EXP 14
14295: PUSH
14296: LD_INT 1
14298: ST_TO_ADDR
// def_siberite_bomb = 0 ;
14299: LD_ADDR_EXP 15
14303: PUSH
14304: LD_INT 0
14306: ST_TO_ADDR
// def_builduptime = 2 ;
14307: LD_ADDR_EXP 17
14311: PUSH
14312: LD_INT 2
14314: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
14315: LD_ADDR_VAR 0 2
14319: PUSH
14320: EMPTY
14321: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14322: LD_ADDR_VAR 0 3
14326: PUSH
14327: EMPTY
14328: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14329: LD_ADDR_LOC 20
14333: PUSH
14334: EMPTY
14335: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14336: LD_ADDR_LOC 21
14340: PUSH
14341: EMPTY
14342: ST_TO_ADDR
// Banned_Controls := [ ] ;
14343: LD_ADDR_LOC 22
14347: PUSH
14348: EMPTY
14349: ST_TO_ADDR
// Banned_Engines := [ ] ;
14350: LD_ADDR_LOC 23
14354: PUSH
14355: EMPTY
14356: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14357: LD_ADDR_LOC 18
14361: PUSH
14362: LD_INT 37
14364: PUSH
14365: EMPTY
14366: LIST
14367: PUSH
14368: LD_INT 4
14370: PUSH
14371: LD_INT 5
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: LD_INT 31
14380: PUSH
14381: LD_INT 32
14383: PUSH
14384: LD_INT 33
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: LIST
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: LIST
14396: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
14397: LD_ADDR_LOC 19
14401: PUSH
14402: LD_INT 2
14404: PUSH
14405: LD_INT 2
14407: PUSH
14408: LD_INT 4
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: LIST
14415: ST_TO_ADDR
// end ; 3 :
14416: GO 14686
14418: LD_INT 3
14420: DOUBLE
14421: EQUAL
14422: IFTRUE 14426
14424: GO 14685
14426: POP
// begin def_main_base = 1 ;
14427: LD_ADDR_EXP 1
14431: PUSH
14432: LD_INT 1
14434: ST_TO_ADDR
// def_secondary_base = 0 ;
14435: LD_ADDR_EXP 2
14439: PUSH
14440: LD_INT 0
14442: ST_TO_ADDR
// def_defence_level = 0 ;
14443: LD_ADDR_EXP 3
14447: PUSH
14448: LD_INT 0
14450: ST_TO_ADDR
// def_amount_of_people = 2 ;
14451: LD_ADDR_EXP 4
14455: PUSH
14456: LD_INT 2
14458: ST_TO_ADDR
// def_initial_level = 3 ;
14459: LD_ADDR_EXP 5
14463: PUSH
14464: LD_INT 3
14466: ST_TO_ADDR
// def_main_deposits = 2 ;
14467: LD_ADDR_EXP 6
14471: PUSH
14472: LD_INT 2
14474: ST_TO_ADDR
// def_secondary_deposits = 1 ;
14475: LD_ADDR_EXP 7
14479: PUSH
14480: LD_INT 1
14482: ST_TO_ADDR
// def_siberite_detection = 1 ;
14483: LD_ADDR_EXP 8
14487: PUSH
14488: LD_INT 1
14490: ST_TO_ADDR
// def_starting_resources = 3 ;
14491: LD_ADDR_EXP 9
14495: PUSH
14496: LD_INT 3
14498: ST_TO_ADDR
// def_shipments_density = 1 ;
14499: LD_ADDR_EXP 10
14503: PUSH
14504: LD_INT 1
14506: ST_TO_ADDR
// def_people_arrivals = 0 ;
14507: LD_ADDR_EXP 11
14511: PUSH
14512: LD_INT 0
14514: ST_TO_ADDR
// def_people_loyality = 0 ;
14515: LD_ADDR_EXP 12
14519: PUSH
14520: LD_INT 0
14522: ST_TO_ADDR
// def_people_info = 0 ;
14523: LD_ADDR_EXP 13
14527: PUSH
14528: LD_INT 0
14530: ST_TO_ADDR
// def_morale_flags = 0 ;
14531: LD_ADDR_EXP 14
14535: PUSH
14536: LD_INT 0
14538: ST_TO_ADDR
// def_siberite_bomb = 0 ;
14539: LD_ADDR_EXP 15
14543: PUSH
14544: LD_INT 0
14546: ST_TO_ADDR
// def_builduptime = 1 ;
14547: LD_ADDR_EXP 17
14551: PUSH
14552: LD_INT 1
14554: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14555: LD_ADDR_VAR 0 2
14559: PUSH
14560: LD_INT 23
14562: PUSH
14563: EMPTY
14564: LIST
14565: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
14566: LD_ADDR_VAR 0 3
14570: PUSH
14571: LD_INT 2
14573: PUSH
14574: LD_INT 37
14576: PUSH
14577: LD_INT 32
14579: PUSH
14580: LD_INT 33
14582: PUSH
14583: LD_INT 36
14585: PUSH
14586: LD_INT 16
14588: PUSH
14589: LD_INT 23
14591: PUSH
14592: LD_INT 21
14594: PUSH
14595: LD_INT 18
14597: PUSH
14598: LD_INT 22
14600: PUSH
14601: LD_INT 20
14603: PUSH
14604: LD_INT 19
14606: PUSH
14607: LD_INT 25
14609: PUSH
14610: LD_INT 17
14612: PUSH
14613: LD_INT 24
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14633: LD_ADDR_LOC 20
14637: PUSH
14638: EMPTY
14639: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14640: LD_ADDR_LOC 21
14644: PUSH
14645: EMPTY
14646: ST_TO_ADDR
// Banned_Controls := [ ] ;
14647: LD_ADDR_LOC 22
14651: PUSH
14652: EMPTY
14653: ST_TO_ADDR
// Banned_Engines := [ ] ;
14654: LD_ADDR_LOC 23
14658: PUSH
14659: EMPTY
14660: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14661: LD_ADDR_LOC 18
14665: PUSH
14666: EMPTY
14667: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14668: LD_ADDR_LOC 19
14672: PUSH
14673: EMPTY
14674: ST_TO_ADDR
// No_Mechs := true ;
14675: LD_ADDR_EXP 68
14679: PUSH
14680: LD_INT 1
14682: ST_TO_ADDR
// end ; end ;
14683: GO 14686
14685: POP
// for i := 1 to 8 do
14686: LD_ADDR_VAR 0 4
14690: PUSH
14691: DOUBLE
14692: LD_INT 1
14694: DEC
14695: ST_TO_ADDR
14696: LD_INT 8
14698: PUSH
14699: FOR_TO
14700: IFFALSE 14784
// if Side_Positions [ i ] then
14702: LD_EXP 43
14706: PUSH
14707: LD_VAR 0 4
14711: ARRAY
14712: IFFALSE 14782
// begin for j in Unavailable_Techs do
14714: LD_ADDR_VAR 0 5
14718: PUSH
14719: LD_VAR 0 2
14723: PUSH
14724: FOR_IN
14725: IFFALSE 14746
// SetTech ( j , i , 0 ) ;
14727: LD_VAR 0 5
14731: PPUSH
14732: LD_VAR 0 4
14736: PPUSH
14737: LD_INT 0
14739: PPUSH
14740: CALL_OW 322
14744: GO 14724
14746: POP
14747: POP
// for j in Unavailable_Builds do
14748: LD_ADDR_VAR 0 5
14752: PUSH
14753: LD_VAR 0 3
14757: PUSH
14758: FOR_IN
14759: IFFALSE 14780
// SetRestrict ( j , i , 0 ) ;
14761: LD_VAR 0 5
14765: PPUSH
14766: LD_VAR 0 4
14770: PPUSH
14771: LD_INT 0
14773: PPUSH
14774: CALL_OW 324
14778: GO 14758
14780: POP
14781: POP
// end ;
14782: GO 14699
14784: POP
14785: POP
// end ;
14786: LD_VAR 0 1
14790: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
14791: LD_INT 0
14793: PPUSH
14794: PPUSH
14795: PPUSH
14796: PPUSH
14797: PPUSH
14798: PPUSH
14799: PPUSH
// for i := 1 to Restricted_Builds do
14800: LD_ADDR_VAR 0 2
14804: PUSH
14805: DOUBLE
14806: LD_INT 1
14808: DEC
14809: ST_TO_ADDR
14810: LD_LOC 18
14814: PUSH
14815: FOR_TO
14816: IFFALSE 15126
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
14818: LD_LOC 18
14822: PUSH
14823: LD_VAR 0 2
14827: ARRAY
14828: PUSH
14829: LD_INT 1
14831: ARRAY
14832: PUSH
14833: LD_INT 31
14835: DOUBLE
14836: EQUAL
14837: IFTRUE 14853
14839: LD_INT 32
14841: DOUBLE
14842: EQUAL
14843: IFTRUE 14853
14845: LD_INT 33
14847: DOUBLE
14848: EQUAL
14849: IFTRUE 14853
14851: GO 14864
14853: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
14854: LD_ADDR_VAR 0 6
14858: PUSH
14859: LD_STRING #Turrets
14861: ST_TO_ADDR
14862: GO 14909
14864: LD_INT 4
14866: DOUBLE
14867: EQUAL
14868: IFTRUE 14878
14870: LD_INT 5
14872: DOUBLE
14873: EQUAL
14874: IFTRUE 14878
14876: GO 14889
14878: POP
// btype := #Armouries ; b_Behemoth :
14879: LD_ADDR_VAR 0 6
14883: PUSH
14884: LD_STRING #Armouries
14886: ST_TO_ADDR
14887: GO 14909
14889: LD_INT 37
14891: DOUBLE
14892: EQUAL
14893: IFTRUE 14897
14895: GO 14908
14897: POP
// btype := #Behemoths ; end ;
14898: LD_ADDR_VAR 0 6
14902: PUSH
14903: LD_STRING #Behemoths
14905: ST_TO_ADDR
14906: GO 14909
14908: POP
// list := [ ] ;
14909: LD_ADDR_VAR 0 7
14913: PUSH
14914: EMPTY
14915: ST_TO_ADDR
// for j := 1 to 8 do
14916: LD_ADDR_VAR 0 3
14920: PUSH
14921: DOUBLE
14922: LD_INT 1
14924: DEC
14925: ST_TO_ADDR
14926: LD_INT 8
14928: PUSH
14929: FOR_TO
14930: IFFALSE 15023
// if Side_Positions [ j ] then
14932: LD_EXP 43
14936: PUSH
14937: LD_VAR 0 3
14941: ARRAY
14942: IFFALSE 15021
// begin amount := 0 ;
14944: LD_ADDR_VAR 0 5
14948: PUSH
14949: LD_INT 0
14951: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
14952: LD_ADDR_VAR 0 4
14956: PUSH
14957: LD_LOC 18
14961: PUSH
14962: LD_VAR 0 2
14966: ARRAY
14967: PUSH
14968: FOR_IN
14969: IFFALSE 15017
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
14971: LD_ADDR_VAR 0 5
14975: PUSH
14976: LD_VAR 0 5
14980: PUSH
14981: LD_INT 22
14983: PUSH
14984: LD_VAR 0 3
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: LD_INT 30
14995: PUSH
14996: LD_VAR 0 4
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PPUSH
15009: CALL_OW 69
15013: PLUS
15014: ST_TO_ADDR
15015: GO 14968
15017: POP
15018: POP
// break ;
15019: GO 15023
// end ;
15021: GO 14929
15023: POP
15024: POP
// list := [ ] ;
15025: LD_ADDR_VAR 0 7
15029: PUSH
15030: EMPTY
15031: ST_TO_ADDR
// for j := 1 to 8 do
15032: LD_ADDR_VAR 0 3
15036: PUSH
15037: DOUBLE
15038: LD_INT 1
15040: DEC
15041: ST_TO_ADDR
15042: LD_INT 8
15044: PUSH
15045: FOR_TO
15046: IFFALSE 15066
// list := list ^ amount ;
15048: LD_ADDR_VAR 0 7
15052: PUSH
15053: LD_VAR 0 7
15057: PUSH
15058: LD_VAR 0 5
15062: ADD
15063: ST_TO_ADDR
15064: GO 15045
15066: POP
15067: POP
// Already_Built := Already_Built ^ [ list ] ;
15068: LD_ADDR_LOC 24
15072: PUSH
15073: LD_LOC 24
15077: PUSH
15078: LD_VAR 0 7
15082: PUSH
15083: EMPTY
15084: LIST
15085: ADD
15086: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
15087: LD_ADDR_LOC 25
15091: PUSH
15092: LD_LOC 25
15096: PUSH
15097: LD_VAR 0 6
15101: PUSH
15102: LD_VAR 0 5
15106: PUSH
15107: LD_LOC 19
15111: PUSH
15112: LD_VAR 0 2
15116: ARRAY
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: LIST
15122: ADD
15123: ST_TO_ADDR
// end ;
15124: GO 14815
15126: POP
15127: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15128: LD_ADDR_LOC 26
15132: PUSH
15133: LD_INT 0
15135: PUSH
15136: LD_INT 0
15138: PUSH
15139: LD_INT 0
15141: PUSH
15142: LD_INT 0
15144: PUSH
15145: LD_INT 0
15147: PUSH
15148: LD_INT 0
15150: PUSH
15151: LD_INT 0
15153: PUSH
15154: LD_INT 0
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: ST_TO_ADDR
// if Limits_Info then
15167: LD_LOC 25
15171: IFFALSE 15187
// Limits_Info := #Limits ^ Limits_Info ;
15173: LD_ADDR_LOC 25
15177: PUSH
15178: LD_STRING #Limits
15180: PUSH
15181: LD_LOC 25
15185: ADD
15186: ST_TO_ADDR
// end ;
15187: LD_VAR 0 1
15191: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
15192: LD_INT 0
15194: PPUSH
15195: PPUSH
15196: PPUSH
15197: PPUSH
// for i := 1 to Restricted_Builds do
15198: LD_ADDR_VAR 0 7
15202: PUSH
15203: DOUBLE
15204: LD_INT 1
15206: DEC
15207: ST_TO_ADDR
15208: LD_LOC 18
15212: PUSH
15213: FOR_TO
15214: IFFALSE 15637
// if BType in Restricted_Builds [ i ] then
15216: LD_VAR 0 2
15220: PUSH
15221: LD_LOC 18
15225: PUSH
15226: LD_VAR 0 7
15230: ARRAY
15231: IN
15232: IFFALSE 15635
// begin if old_side then
15234: LD_VAR 0 4
15238: IFFALSE 15364
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
15240: LD_LOC 24
15244: PUSH
15245: LD_VAR 0 7
15249: ARRAY
15250: PUSH
15251: LD_VAR 0 3
15255: ARRAY
15256: PUSH
15257: LD_VAR 0 5
15261: PLUS
15262: PUSH
15263: LD_LOC 19
15267: PUSH
15268: LD_VAR 0 7
15272: ARRAY
15273: GREATER
15274: IFFALSE 15300
// begin SetSide ( un , old_side ) ;
15276: LD_VAR 0 1
15280: PPUSH
15281: LD_VAR 0 4
15285: PPUSH
15286: CALL_OW 235
// count := 0 ;
15290: LD_ADDR_VAR 0 5
15294: PUSH
15295: LD_INT 0
15297: ST_TO_ADDR
// end else
15298: GO 15364
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
15300: LD_ADDR_LOC 24
15304: PUSH
15305: LD_LOC 24
15309: PPUSH
15310: LD_VAR 0 7
15314: PPUSH
15315: LD_LOC 24
15319: PUSH
15320: LD_VAR 0 7
15324: ARRAY
15325: PPUSH
15326: LD_VAR 0 4
15330: PPUSH
15331: LD_LOC 24
15335: PUSH
15336: LD_VAR 0 7
15340: ARRAY
15341: PUSH
15342: LD_VAR 0 4
15346: ARRAY
15347: PUSH
15348: LD_VAR 0 5
15352: MINUS
15353: PPUSH
15354: CALL_OW 1
15358: PPUSH
15359: CALL_OW 1
15363: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
15364: LD_ADDR_LOC 24
15368: PUSH
15369: LD_LOC 24
15373: PPUSH
15374: LD_VAR 0 7
15378: PPUSH
15379: LD_LOC 24
15383: PUSH
15384: LD_VAR 0 7
15388: ARRAY
15389: PPUSH
15390: LD_VAR 0 3
15394: PPUSH
15395: LD_LOC 24
15399: PUSH
15400: LD_VAR 0 7
15404: ARRAY
15405: PUSH
15406: LD_VAR 0 3
15410: ARRAY
15411: PUSH
15412: LD_VAR 0 5
15416: PLUS
15417: PPUSH
15418: CALL_OW 1
15422: PPUSH
15423: CALL_OW 1
15427: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
15428: LD_VAR 0 5
15432: PUSH
15433: LD_INT 0
15435: NONEQUAL
15436: PUSH
15437: LD_VAR 0 3
15441: PUSH
15442: LD_OWVAR 2
15446: EQUAL
15447: AND
15448: IFFALSE 15491
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
15450: LD_ADDR_LOC 25
15454: PUSH
15455: LD_LOC 25
15459: PPUSH
15460: LD_INT 3
15462: PUSH
15463: LD_VAR 0 7
15467: MUL
15468: PPUSH
15469: LD_LOC 24
15473: PUSH
15474: LD_VAR 0 7
15478: ARRAY
15479: PUSH
15480: LD_VAR 0 3
15484: ARRAY
15485: PPUSH
15486: CALL_OW 1
15490: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
15491: LD_LOC 24
15495: PUSH
15496: LD_VAR 0 7
15500: ARRAY
15501: PUSH
15502: LD_VAR 0 3
15506: ARRAY
15507: PUSH
15508: LD_LOC 19
15512: PUSH
15513: LD_VAR 0 7
15517: ARRAY
15518: GREATER
15519: IFFALSE 15546
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
15521: LD_ADDR_LOC 26
15525: PUSH
15526: LD_LOC 26
15530: PPUSH
15531: LD_VAR 0 3
15535: PPUSH
15536: LD_INT 1
15538: PPUSH
15539: CALL_OW 1
15543: ST_TO_ADDR
// end else
15544: GO 15633
// begin for j := 1 to Restricted_Builds do
15546: LD_ADDR_VAR 0 8
15550: PUSH
15551: DOUBLE
15552: LD_INT 1
15554: DEC
15555: ST_TO_ADDR
15556: LD_LOC 18
15560: PUSH
15561: FOR_TO
15562: IFFALSE 15606
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
15564: LD_LOC 24
15568: PUSH
15569: LD_VAR 0 8
15573: ARRAY
15574: PUSH
15575: LD_VAR 0 3
15579: ARRAY
15580: PUSH
15581: LD_LOC 19
15585: PUSH
15586: LD_VAR 0 8
15590: ARRAY
15591: GREATER
15592: IFFALSE 15604
// begin Is_Cheater := true ;
15594: LD_ADDR_VAR 0 9
15598: PUSH
15599: LD_INT 1
15601: ST_TO_ADDR
// break ;
15602: GO 15606
// end ;
15604: GO 15561
15606: POP
15607: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
15608: LD_ADDR_LOC 26
15612: PUSH
15613: LD_LOC 26
15617: PPUSH
15618: LD_VAR 0 3
15622: PPUSH
15623: LD_VAR 0 9
15627: PPUSH
15628: CALL_OW 1
15632: ST_TO_ADDR
// end ; break ;
15633: GO 15637
// end ;
15635: GO 15213
15637: POP
15638: POP
// end ;
15639: LD_VAR 0 6
15643: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
15644: LD_VAR 0 5
15648: PUSH
15649: LD_LOC 20
15653: IN
15654: PUSH
15655: LD_VAR 0 2
15659: PUSH
15660: LD_LOC 21
15664: IN
15665: OR
15666: PUSH
15667: LD_VAR 0 4
15671: PUSH
15672: LD_LOC 22
15676: IN
15677: OR
15678: PUSH
15679: LD_VAR 0 3
15683: PUSH
15684: LD_LOC 23
15688: IN
15689: OR
15690: IFFALSE 15701
// ComCancel ( factory ) ;
15692: LD_VAR 0 1
15696: PPUSH
15697: CALL_OW 127
// end ;
15701: PPOPN 5
15703: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
15704: LD_VAR 0 2
15708: PUSH
15709: LD_LOC 20
15713: IN
15714: IFFALSE 15725
// ComCancel ( building ) ;
15716: LD_VAR 0 1
15720: PPUSH
15721: CALL_OW 127
// end ; end_of_file
15725: PPOPN 2
15727: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
15728: LD_INT 0
15730: PPUSH
15731: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
15732: LD_ADDR_VAR 0 2
15736: PUSH
15737: LD_STRING #Multi1x1-Time
15739: PUSH
15740: LD_OWVAR 1
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: ST_TO_ADDR
// if WaitServerStrings then
15749: LD_EXP 70
15753: IFFALSE 15771
// AllStrings = AllStrings ^ WaitServerStrings ;
15755: LD_ADDR_VAR 0 2
15759: PUSH
15760: LD_VAR 0 2
15764: PUSH
15765: LD_EXP 70
15769: ADD
15770: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
15771: LD_INT 0
15773: PUSH
15774: LD_EXP 38
15778: PUSH
15779: LD_OWVAR 1
15783: MINUS
15784: LESSEQUAL
15785: IFFALSE 15816
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
15787: LD_ADDR_VAR 0 2
15791: PUSH
15792: LD_VAR 0 2
15796: PUSH
15797: LD_STRING #allowedsibbomb
15799: PUSH
15800: LD_EXP 38
15804: PUSH
15805: LD_OWVAR 1
15809: MINUS
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: ADD
15815: ST_TO_ADDR
// if ( ExtraStrings ) then
15816: LD_EXP 69
15820: IFFALSE 15842
// AllStrings := AllStrings ^  ^ ExtraStrings ;
15822: LD_ADDR_VAR 0 2
15826: PUSH
15827: LD_VAR 0 2
15831: PUSH
15832: LD_STRING 
15834: ADD
15835: PUSH
15836: LD_EXP 69
15840: ADD
15841: ST_TO_ADDR
// if ( LimitsStrings ) then
15842: CALL 14018 0 0
15846: IFFALSE 15868
// AllStrings := AllStrings ^  ^ LimitsStrings ;
15848: LD_ADDR_VAR 0 2
15852: PUSH
15853: LD_VAR 0 2
15857: PUSH
15858: LD_STRING 
15860: ADD
15861: PUSH
15862: CALL 14018 0 0
15866: ADD
15867: ST_TO_ADDR
// Display_Strings := AllStrings ;
15868: LD_ADDR_OWVAR 47
15872: PUSH
15873: LD_VAR 0 2
15877: ST_TO_ADDR
// end ;
15878: LD_VAR 0 1
15882: RET
// every 0 0$1 do
15883: GO 15885
15885: DISABLE
// begin ShowTimer ;
15886: CALL 15728 0 0
// enable ;
15890: ENABLE
// end ; end_of_file
15891: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
15892: LD_INT 0
15894: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
15895: LD_VAR 0 1
15899: PPUSH
15900: CALL_OW 255
15904: PUSH
15905: LD_VAR 0 4
15909: EQUAL
15910: IFFALSE 15929
// begin SetAchievement ( ACH_RAD ) ;
15912: LD_STRING ACH_RAD
15914: PPUSH
15915: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
15919: LD_STRING ACH_NL
15921: PPUSH
15922: LD_INT 1
15924: PPUSH
15925: CALL_OW 564
// end end ;
15929: LD_VAR 0 5
15933: RET
// export function SA_Win ( side ) ; begin
15934: LD_INT 0
15936: PPUSH
// case side of 1 :
15937: LD_VAR 0 1
15941: PUSH
15942: LD_INT 1
15944: DOUBLE
15945: EQUAL
15946: IFTRUE 15950
15948: GO 15963
15950: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
15951: LD_STRING ACH_AH
15953: PPUSH
15954: LD_INT 1
15956: PPUSH
15957: CALL_OW 564
15961: GO 16126
15963: LD_INT 2
15965: DOUBLE
15966: EQUAL
15967: IFTRUE 15971
15969: GO 15984
15971: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
15972: LD_STRING ACH_E
15974: PPUSH
15975: LD_INT 1
15977: PPUSH
15978: CALL_OW 564
15982: GO 16126
15984: LD_INT 3
15986: DOUBLE
15987: EQUAL
15988: IFTRUE 15992
15990: GO 16005
15992: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
15993: LD_STRING ACH_OOL
15995: PPUSH
15996: LD_INT 1
15998: PPUSH
15999: CALL_OW 564
16003: GO 16126
16005: LD_INT 1
16007: PUSH
16008: LD_INT 2
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: DOUBLE
16015: EQUAL
16016: IFTRUE 16020
16018: GO 16045
16020: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
16021: LD_STRING ACH_AH
16023: PPUSH
16024: LD_REAL  5.00000000000000E-0001
16027: PPUSH
16028: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
16032: LD_STRING ACH_E
16034: PPUSH
16035: LD_REAL  5.00000000000000E-0001
16038: PPUSH
16039: CALL_OW 564
// end ; [ 2 , 3 ] :
16043: GO 16126
16045: LD_INT 2
16047: PUSH
16048: LD_INT 3
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: DOUBLE
16055: EQUAL
16056: IFTRUE 16060
16058: GO 16085
16060: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
16061: LD_STRING ACH_OOL
16063: PPUSH
16064: LD_REAL  5.00000000000000E-0001
16067: PPUSH
16068: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
16072: LD_STRING ACH_E
16074: PPUSH
16075: LD_REAL  5.00000000000000E-0001
16078: PPUSH
16079: CALL_OW 564
// end ; [ 3 , 1 ] :
16083: GO 16126
16085: LD_INT 3
16087: PUSH
16088: LD_INT 1
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: DOUBLE
16095: EQUAL
16096: IFTRUE 16100
16098: GO 16125
16100: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
16101: LD_STRING ACH_AH
16103: PPUSH
16104: LD_REAL  5.00000000000000E-0001
16107: PPUSH
16108: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
16112: LD_STRING ACH_OOL
16114: PPUSH
16115: LD_REAL  5.00000000000000E-0001
16118: PPUSH
16119: CALL_OW 564
// end ; end ;
16123: GO 16126
16125: POP
// end ; end_of_file
16126: LD_VAR 0 2
16130: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
16131: LD_INT 0
16133: PPUSH
16134: PPUSH
// enable ( 98 ) ;
16135: LD_INT 98
16137: ENABLE_MARKED
// GameEnded = false ;
16138: LD_ADDR_LOC 28
16142: PUSH
16143: LD_INT 0
16145: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16146: LD_ADDR_LOC 27
16150: PUSH
16151: LD_INT 0
16153: PUSH
16154: LD_INT 0
16156: PUSH
16157: LD_INT 0
16159: PUSH
16160: LD_INT 0
16162: PUSH
16163: LD_INT 0
16165: PUSH
16166: LD_INT 0
16168: PUSH
16169: LD_INT 0
16171: PUSH
16172: LD_INT 0
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: ST_TO_ADDR
// unfoged = false ;
16185: LD_ADDR_LOC 29
16189: PUSH
16190: LD_INT 0
16192: ST_TO_ADDR
// for i = 1 to side_positions do
16193: LD_ADDR_VAR 0 2
16197: PUSH
16198: DOUBLE
16199: LD_INT 1
16201: DEC
16202: ST_TO_ADDR
16203: LD_EXP 43
16207: PUSH
16208: FOR_TO
16209: IFFALSE 16249
// if not side_positions [ i ] then
16211: LD_EXP 43
16215: PUSH
16216: LD_VAR 0 2
16220: ARRAY
16221: NOT
16222: IFFALSE 16247
// defaited = replace ( defaited , i , true ) ;
16224: LD_ADDR_LOC 27
16228: PUSH
16229: LD_LOC 27
16233: PPUSH
16234: LD_VAR 0 2
16238: PPUSH
16239: LD_INT 1
16241: PPUSH
16242: CALL_OW 1
16246: ST_TO_ADDR
16247: GO 16208
16249: POP
16250: POP
// end ;
16251: LD_VAR 0 1
16255: RET
// function CanWinLoose ; begin
16256: LD_INT 0
16258: PPUSH
// Result := true ;
16259: LD_ADDR_VAR 0 1
16263: PUSH
16264: LD_INT 1
16266: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
16267: CALL_OW 518
16271: PUSH
16272: CALL_OW 519
16276: PUSH
16277: LD_INT 0
16279: GREATER
16280: AND
16281: IFFALSE 16291
// Result := false ;
16283: LD_ADDR_VAR 0 1
16287: PUSH
16288: LD_INT 0
16290: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
16291: CALL_OW 531
16295: PUSH
16296: CALL_OW 519
16300: PUSH
16301: LD_INT 1
16303: GREATER
16304: AND
16305: IFFALSE 16315
// Result := false ;
16307: LD_ADDR_VAR 0 1
16311: PUSH
16312: LD_INT 0
16314: ST_TO_ADDR
// end ;
16315: LD_VAR 0 1
16319: RET
// export function HasPower ( i ) ; var k , h ; begin
16320: LD_INT 0
16322: PPUSH
16323: PPUSH
16324: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
16325: LD_VAR 0 1
16329: PPUSH
16330: CALL_OW 108
16334: NOT
16335: PUSH
16336: LD_EXP 42
16340: PUSH
16341: LD_VAR 0 1
16345: ARRAY
16346: NOT
16347: AND
16348: PUSH
16349: LD_OWVAR 4
16353: AND
16354: IFFALSE 16366
// begin result = false ;
16356: LD_ADDR_VAR 0 2
16360: PUSH
16361: LD_INT 0
16363: ST_TO_ADDR
// end else
16364: GO 16661
// case def_win_rules of 0 :
16366: LD_EXP 18
16370: PUSH
16371: LD_INT 0
16373: DOUBLE
16374: EQUAL
16375: IFTRUE 16379
16377: GO 16542
16379: POP
// if def_people_respawning then
16380: LD_EXP 19
16384: IFFALSE 16475
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
16386: LD_ADDR_VAR 0 2
16390: PUSH
16391: LD_INT 22
16393: PUSH
16394: LD_VAR 0 1
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: LD_INT 2
16405: PUSH
16406: LD_INT 21
16408: PUSH
16409: LD_INT 1
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: LD_INT 33
16418: PUSH
16419: LD_INT 3
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: LD_INT 33
16428: PUSH
16429: LD_INT 5
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 30
16438: PUSH
16439: LD_INT 0
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: LD_INT 30
16448: PUSH
16449: LD_INT 1
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PPUSH
16468: CALL_OW 69
16472: ST_TO_ADDR
16473: GO 16540
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
16475: LD_ADDR_VAR 0 2
16479: PUSH
16480: LD_INT 22
16482: PUSH
16483: LD_VAR 0 1
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: LD_INT 2
16494: PUSH
16495: LD_INT 21
16497: PUSH
16498: LD_INT 1
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 33
16507: PUSH
16508: LD_INT 3
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 33
16517: PUSH
16518: LD_INT 5
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PPUSH
16535: CALL_OW 69
16539: ST_TO_ADDR
16540: GO 16661
16542: LD_INT 1
16544: DOUBLE
16545: EQUAL
16546: IFTRUE 16550
16548: GO 16589
16550: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
16551: LD_ADDR_VAR 0 2
16555: PUSH
16556: LD_INT 22
16558: PUSH
16559: LD_VAR 0 1
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PUSH
16568: LD_INT 21
16570: PUSH
16571: LD_INT 1
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: PPUSH
16582: CALL_OW 69
16586: ST_TO_ADDR
16587: GO 16661
16589: LD_INT 2
16591: DOUBLE
16592: EQUAL
16593: IFTRUE 16597
16595: GO 16660
16597: POP
// begin h = false ;
16598: LD_ADDR_VAR 0 4
16602: PUSH
16603: LD_INT 0
16605: ST_TO_ADDR
// for k in heroes [ i ] do
16606: LD_ADDR_VAR 0 3
16610: PUSH
16611: LD_EXP 57
16615: PUSH
16616: LD_VAR 0 1
16620: ARRAY
16621: PUSH
16622: FOR_IN
16623: IFFALSE 16646
// if IsLive ( k ) then
16625: LD_VAR 0 3
16629: PPUSH
16630: CALL_OW 300
16634: IFFALSE 16644
// h = true ;
16636: LD_ADDR_VAR 0 4
16640: PUSH
16641: LD_INT 1
16643: ST_TO_ADDR
16644: GO 16622
16646: POP
16647: POP
// Result := h ;
16648: LD_ADDR_VAR 0 2
16652: PUSH
16653: LD_VAR 0 4
16657: ST_TO_ADDR
// end ; end ;
16658: GO 16661
16660: POP
// end ;
16661: LD_VAR 0 2
16665: RET
// function AlliedSides ( i , j ) ; begin
16666: LD_INT 0
16668: PPUSH
// Result := false ;
16669: LD_ADDR_VAR 0 3
16673: PUSH
16674: LD_INT 0
16676: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
16677: LD_VAR 0 1
16681: PPUSH
16682: LD_VAR 0 2
16686: PPUSH
16687: CALL_OW 81
16691: PUSH
16692: LD_INT 1
16694: EQUAL
16695: PUSH
16696: LD_VAR 0 2
16700: PPUSH
16701: LD_VAR 0 1
16705: PPUSH
16706: CALL_OW 81
16710: PUSH
16711: LD_INT 1
16713: EQUAL
16714: AND
16715: PUSH
16716: LD_VAR 0 1
16720: PPUSH
16721: CALL_OW 83
16725: AND
16726: PUSH
16727: LD_VAR 0 2
16731: PPUSH
16732: CALL_OW 83
16736: AND
16737: IFFALSE 16747
// Result := true ;
16739: LD_ADDR_VAR 0 3
16743: PUSH
16744: LD_INT 1
16746: ST_TO_ADDR
// end ;
16747: LD_VAR 0 3
16751: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
16752: CALL 16256 0 0
16756: PUSH
16757: LD_LOC 28
16761: NOT
16762: AND
16763: IFFALSE 16779
16765: GO 16767
16767: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
16768: LD_ADDR_EXP 70
16772: PUSH
16773: LD_STRING #Player-Ended
16775: PUSH
16776: EMPTY
16777: LIST
16778: ST_TO_ADDR
16779: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
16780: CALL 16256 0 0
16784: PUSH
16785: LD_LOC 28
16789: AND
16790: IFFALSE 16799
16792: GO 16794
16794: DISABLE
// YouLostInMultiplayer ;
16795: CALL_OW 107
16799: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
16800: CALL 16256 0 0
16804: NOT
16805: PUSH
16806: CALL_OW 531
16810: NOT
16811: AND
16812: IFFALSE 16828
16814: GO 16816
16816: DISABLE
// WaitServerStrings = [ #server-wait ] ;
16817: LD_ADDR_EXP 70
16821: PUSH
16822: LD_STRING #server-wait
16824: PUSH
16825: EMPTY
16826: LIST
16827: ST_TO_ADDR
16828: END
// every 100 trigger IAmSpec do
16829: CALL_OW 531
16833: IFFALSE 16849
16835: GO 16837
16837: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
16838: LD_ADDR_EXP 70
16842: PUSH
16843: LD_STRING #Player-IAmSpec
16845: PUSH
16846: EMPTY
16847: LIST
16848: ST_TO_ADDR
16849: END
// every 100 trigger GameEnded and IAmSpec do
16850: LD_LOC 28
16854: PUSH
16855: CALL_OW 531
16859: AND
16860: IFFALSE 16869
16862: GO 16864
16864: DISABLE
// YouLostInMultiplayer ;
16865: CALL_OW 107
16869: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
16870: CALL 16256 0 0
16874: PUSH
16875: LD_LOC 28
16879: NOT
16880: AND
16881: IFFALSE 16897
16883: GO 16885
16885: DISABLE
// WaitServerStrings = [ $player-win ] ;
16886: LD_ADDR_EXP 70
16890: PUSH
16891: LD_STRING $player-win
16893: PUSH
16894: EMPTY
16895: LIST
16896: ST_TO_ADDR
16897: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
16898: CALL 16256 0 0
16902: PUSH
16903: LD_LOC 28
16907: AND
16908: IFFALSE 16932
16910: GO 16912
16912: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
16913: LD_EXP 44
16917: PUSH
16918: LD_OWVAR 2
16922: ARRAY
16923: PPUSH
16924: CALL 15934 0 1
// YouWinInMultiplayer ;
16928: CALL_OW 106
// end ;
16932: END
// every 100 trigger isEditor marked 401 do
16933: LD_OWVAR 84
16937: IFFALSE 16953
16939: GO 16941
16941: DISABLE
// Debug_Strings = [ You won ] ;
16942: LD_ADDR_OWVAR 48
16946: PUSH
16947: LD_STRING You won
16949: PUSH
16950: EMPTY
16951: LIST
16952: ST_TO_ADDR
16953: END
// every 100 trigger isEditor marked 400 do
16954: LD_OWVAR 84
16958: IFFALSE 16974
16960: GO 16962
16962: DISABLE
// Debug_Strings = [ You loss ] ;
16963: LD_ADDR_OWVAR 48
16967: PUSH
16968: LD_STRING You loss
16970: PUSH
16971: EMPTY
16972: LIST
16973: ST_TO_ADDR
16974: END
// every 100 marked 98 do var i , un ;
16975: GO 16977
16977: DISABLE
16978: LD_INT 0
16980: PPUSH
16981: PPUSH
// begin for i = 1 to side_positions do
16982: LD_ADDR_VAR 0 1
16986: PUSH
16987: DOUBLE
16988: LD_INT 1
16990: DEC
16991: ST_TO_ADDR
16992: LD_EXP 43
16996: PUSH
16997: FOR_TO
16998: IFFALSE 17121
// if side_positions [ i ] then
17000: LD_EXP 43
17004: PUSH
17005: LD_VAR 0 1
17009: ARRAY
17010: IFFALSE 17119
// if not HasPower ( i ) and not Defaited [ i ] then
17012: LD_VAR 0 1
17016: PPUSH
17017: CALL 16320 0 1
17021: NOT
17022: PUSH
17023: LD_LOC 27
17027: PUSH
17028: LD_VAR 0 1
17032: ARRAY
17033: NOT
17034: AND
17035: IFFALSE 17119
// begin un = filterallunits ( [ f_side , i ] ) ;
17037: LD_ADDR_VAR 0 2
17041: PUSH
17042: LD_INT 22
17044: PUSH
17045: LD_VAR 0 1
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PPUSH
17054: CALL_OW 69
17058: ST_TO_ADDR
// if un then
17059: LD_VAR 0 2
17063: IFFALSE 17077
// SetSide ( un , 0 ) ;
17065: LD_VAR 0 2
17069: PPUSH
17070: LD_INT 0
17072: PPUSH
17073: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
17077: LD_ADDR_LOC 27
17081: PUSH
17082: LD_LOC 27
17086: PPUSH
17087: LD_VAR 0 1
17091: PPUSH
17092: LD_INT 1
17094: PPUSH
17095: CALL_OW 1
17099: ST_TO_ADDR
// if i = your_side then
17100: LD_VAR 0 1
17104: PUSH
17105: LD_OWVAR 2
17109: EQUAL
17110: IFFALSE 17119
// begin Multiplayer_Loose_Message ;
17112: CALL_OW 521
// enable ( 400 ) ;
17116: LD_INT 400
17118: ENABLE_MARKED
// end ; end ;
17119: GO 16997
17121: POP
17122: POP
// if not Unfoged and defaited [ your_side ] then
17123: LD_LOC 29
17127: NOT
17128: PUSH
17129: LD_LOC 27
17133: PUSH
17134: LD_OWVAR 2
17138: ARRAY
17139: AND
17140: IFFALSE 17146
// Unfog ;
17142: CALL 17332 0 0
// DidGameEnd ;
17146: CALL 17161 0 0
// if not GameEnded then
17150: LD_LOC 28
17154: NOT
17155: IFFALSE 17158
// enable ;
17157: ENABLE
// end ;
17158: PPOPN 2
17160: END
// function DidGameEnd ; var i , k , enemy ; begin
17161: LD_INT 0
17163: PPUSH
17164: PPUSH
17165: PPUSH
17166: PPUSH
// enemy = [ ] ;
17167: LD_ADDR_VAR 0 4
17171: PUSH
17172: EMPTY
17173: ST_TO_ADDR
// for i = 1 to side_positions do
17174: LD_ADDR_VAR 0 2
17178: PUSH
17179: DOUBLE
17180: LD_INT 1
17182: DEC
17183: ST_TO_ADDR
17184: LD_EXP 43
17188: PUSH
17189: FOR_TO
17190: IFFALSE 17294
// if not defaited [ i ] then
17192: LD_LOC 27
17196: PUSH
17197: LD_VAR 0 2
17201: ARRAY
17202: NOT
17203: IFFALSE 17292
// for k = 1 to side_positions do
17205: LD_ADDR_VAR 0 3
17209: PUSH
17210: DOUBLE
17211: LD_INT 1
17213: DEC
17214: ST_TO_ADDR
17215: LD_EXP 43
17219: PUSH
17220: FOR_TO
17221: IFFALSE 17290
// if not defaited [ k ] then
17223: LD_LOC 27
17227: PUSH
17228: LD_VAR 0 3
17232: ARRAY
17233: NOT
17234: IFFALSE 17288
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
17236: LD_VAR 0 2
17240: PPUSH
17241: LD_VAR 0 3
17245: PPUSH
17246: CALL_OW 81
17250: PUSH
17251: LD_INT 2
17253: PUSH
17254: LD_INT 0
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: IN
17261: IFFALSE 17288
// enemy = enemy ^ [ i , k ] ;
17263: LD_ADDR_VAR 0 4
17267: PUSH
17268: LD_VAR 0 4
17272: PUSH
17273: LD_VAR 0 2
17277: PUSH
17278: LD_VAR 0 3
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: ADD
17287: ST_TO_ADDR
17288: GO 17220
17290: POP
17291: POP
17292: GO 17189
17294: POP
17295: POP
// if not enemy then
17296: LD_VAR 0 4
17300: NOT
17301: IFFALSE 17327
// begin GameEnded = true ;
17303: LD_ADDR_LOC 28
17307: PUSH
17308: LD_INT 1
17310: ST_TO_ADDR
// if not defaited [ your_side ] then
17311: LD_LOC 27
17315: PUSH
17316: LD_OWVAR 2
17320: ARRAY
17321: NOT
17322: IFFALSE 17327
// enable ( 401 ) ;
17324: LD_INT 401
17326: ENABLE_MARKED
// end ; end ;
17327: LD_VAR 0 1
17331: RET
// function unfog ; var k , friends ; begin
17332: LD_INT 0
17334: PPUSH
17335: PPUSH
17336: PPUSH
// for k = 1 to side_positions do
17337: LD_ADDR_VAR 0 2
17341: PUSH
17342: DOUBLE
17343: LD_INT 1
17345: DEC
17346: ST_TO_ADDR
17347: LD_EXP 43
17351: PUSH
17352: FOR_TO
17353: IFFALSE 17409
// if not defaited [ k ] then
17355: LD_LOC 27
17359: PUSH
17360: LD_VAR 0 2
17364: ARRAY
17365: NOT
17366: IFFALSE 17407
// if GetAttitude ( your_side , k ) in [ att_friend ] then
17368: LD_OWVAR 2
17372: PPUSH
17373: LD_VAR 0 2
17377: PPUSH
17378: CALL_OW 81
17382: PUSH
17383: LD_INT 1
17385: PUSH
17386: EMPTY
17387: LIST
17388: IN
17389: IFFALSE 17407
// friends = friends ^ k ;
17391: LD_ADDR_VAR 0 3
17395: PUSH
17396: LD_VAR 0 3
17400: PUSH
17401: LD_VAR 0 2
17405: ADD
17406: ST_TO_ADDR
17407: GO 17352
17409: POP
17410: POP
// if not friends then
17411: LD_VAR 0 3
17415: NOT
17416: IFFALSE 17433
// begin fogoff ( true ) ;
17418: LD_INT 1
17420: PPUSH
17421: CALL_OW 344
// unfoged = true ;
17425: LD_ADDR_LOC 29
17429: PUSH
17430: LD_INT 1
17432: ST_TO_ADDR
// end ; end ;
17433: LD_VAR 0 1
17437: RET
// export function MakeGameEnd ; begin
17438: LD_INT 0
17440: PPUSH
// fogoff ( true ) ;
17441: LD_INT 1
17443: PPUSH
17444: CALL_OW 344
// unfoged = true ;
17448: LD_ADDR_LOC 29
17452: PUSH
17453: LD_INT 1
17455: ST_TO_ADDR
// wait ( 0 0$5 ) ;
17456: LD_INT 175
17458: PPUSH
17459: CALL_OW 67
// GameEnded = true ;
17463: LD_ADDR_LOC 28
17467: PUSH
17468: LD_INT 1
17470: ST_TO_ADDR
// end ;
17471: LD_VAR 0 1
17475: RET
// export function GetGameEnded ; begin
17476: LD_INT 0
17478: PPUSH
// result = GameEnded ;
17479: LD_ADDR_VAR 0 1
17483: PUSH
17484: LD_LOC 28
17488: ST_TO_ADDR
// end ; end_of_file
17489: LD_VAR 0 1
17493: RET
// export function SetMpTechs ( ) ; var side , i ; begin
17494: LD_INT 0
17496: PPUSH
17497: PPUSH
17498: PPUSH
// for side = 1 to 8 do
17499: LD_ADDR_VAR 0 2
17503: PUSH
17504: DOUBLE
17505: LD_INT 1
17507: DEC
17508: ST_TO_ADDR
17509: LD_INT 8
17511: PUSH
17512: FOR_TO
17513: IFFALSE 17634
// begin for i = 1 to 72 do
17515: LD_ADDR_VAR 0 3
17519: PUSH
17520: DOUBLE
17521: LD_INT 1
17523: DEC
17524: ST_TO_ADDR
17525: LD_INT 72
17527: PUSH
17528: FOR_TO
17529: IFFALSE 17560
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
17531: LD_VAR 0 3
17535: PPUSH
17536: LD_VAR 0 2
17540: PPUSH
17541: LD_INT 0
17543: PPUSH
17544: LD_VAR 0 3
17548: PPUSH
17549: CALL_OW 565
17553: PPUSH
17554: CALL_OW 322
17558: GO 17528
17560: POP
17561: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
17562: LD_INT 73
17564: PPUSH
17565: LD_VAR 0 2
17569: PPUSH
17570: LD_INT 0
17572: PPUSH
17573: LD_INT 25
17575: PPUSH
17576: CALL_OW 565
17580: PPUSH
17581: CALL_OW 322
// for i = 0 to 40 do
17585: LD_ADDR_VAR 0 3
17589: PUSH
17590: DOUBLE
17591: LD_INT 0
17593: DEC
17594: ST_TO_ADDR
17595: LD_INT 40
17597: PUSH
17598: FOR_TO
17599: IFFALSE 17630
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
17601: LD_VAR 0 3
17605: PPUSH
17606: LD_VAR 0 2
17610: PPUSH
17611: LD_INT 1
17613: PPUSH
17614: LD_VAR 0 3
17618: PPUSH
17619: CALL_OW 565
17623: PPUSH
17624: CALL_OW 324
17628: GO 17598
17630: POP
17631: POP
// end ;
17632: GO 17512
17634: POP
17635: POP
// end ;
17636: LD_VAR 0 1
17640: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
17641: LD_INT 0
17643: PPUSH
17644: PPUSH
17645: PPUSH
// for side = 1 to 8 do
17646: LD_ADDR_VAR 0 3
17650: PUSH
17651: DOUBLE
17652: LD_INT 1
17654: DEC
17655: ST_TO_ADDR
17656: LD_INT 8
17658: PUSH
17659: FOR_TO
17660: IFFALSE 21656
// begin for i = 1 to 73 do
17662: LD_ADDR_VAR 0 4
17666: PUSH
17667: DOUBLE
17668: LD_INT 1
17670: DEC
17671: ST_TO_ADDR
17672: LD_INT 73
17674: PUSH
17675: FOR_TO
17676: IFFALSE 17697
// SetTech ( i , side , state_disabled ) ;
17678: LD_VAR 0 4
17682: PPUSH
17683: LD_VAR 0 3
17687: PPUSH
17688: LD_INT 0
17690: PPUSH
17691: CALL_OW 322
17695: GO 17675
17697: POP
17698: POP
// for i = 0 to 40 do
17699: LD_ADDR_VAR 0 4
17703: PUSH
17704: DOUBLE
17705: LD_INT 0
17707: DEC
17708: ST_TO_ADDR
17709: LD_INT 40
17711: PUSH
17712: FOR_TO
17713: IFFALSE 17734
// SetRestrict ( i , side , false ) ;
17715: LD_VAR 0 4
17719: PPUSH
17720: LD_VAR 0 3
17724: PPUSH
17725: LD_INT 0
17727: PPUSH
17728: CALL_OW 324
17732: GO 17712
17734: POP
17735: POP
// case level of 1 :
17736: LD_VAR 0 1
17740: PUSH
17741: LD_INT 1
17743: DOUBLE
17744: EQUAL
17745: IFTRUE 17749
17747: GO 17902
17749: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17750: LD_INT 35
17752: PPUSH
17753: LD_VAR 0 3
17757: PPUSH
17758: LD_INT 1
17760: PPUSH
17761: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17765: LD_INT 45
17767: PPUSH
17768: LD_VAR 0 3
17772: PPUSH
17773: LD_INT 1
17775: PPUSH
17776: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17780: LD_INT 46
17782: PPUSH
17783: LD_VAR 0 3
17787: PPUSH
17788: LD_INT 1
17790: PPUSH
17791: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17795: LD_INT 47
17797: PPUSH
17798: LD_VAR 0 3
17802: PPUSH
17803: LD_INT 1
17805: PPUSH
17806: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17810: LD_INT 0
17812: PPUSH
17813: LD_VAR 0 3
17817: PPUSH
17818: LD_INT 1
17820: PPUSH
17821: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17825: LD_INT 2
17827: PPUSH
17828: LD_VAR 0 3
17832: PPUSH
17833: LD_INT 1
17835: PPUSH
17836: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17840: LD_INT 4
17842: PPUSH
17843: LD_VAR 0 3
17847: PPUSH
17848: LD_INT 1
17850: PPUSH
17851: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17855: LD_INT 6
17857: PPUSH
17858: LD_VAR 0 3
17862: PPUSH
17863: LD_INT 1
17865: PPUSH
17866: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17870: LD_INT 29
17872: PPUSH
17873: LD_VAR 0 3
17877: PPUSH
17878: LD_INT 1
17880: PPUSH
17881: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17885: LD_INT 31
17887: PPUSH
17888: LD_VAR 0 3
17892: PPUSH
17893: LD_INT 1
17895: PPUSH
17896: CALL_OW 324
// end ; 2 :
17900: GO 21654
17902: LD_INT 2
17904: DOUBLE
17905: EQUAL
17906: IFTRUE 17910
17908: GO 18108
17910: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17911: LD_INT 35
17913: PPUSH
17914: LD_VAR 0 3
17918: PPUSH
17919: LD_INT 1
17921: PPUSH
17922: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17926: LD_INT 45
17928: PPUSH
17929: LD_VAR 0 3
17933: PPUSH
17934: LD_INT 1
17936: PPUSH
17937: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17941: LD_INT 46
17943: PPUSH
17944: LD_VAR 0 3
17948: PPUSH
17949: LD_INT 1
17951: PPUSH
17952: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17956: LD_INT 47
17958: PPUSH
17959: LD_VAR 0 3
17963: PPUSH
17964: LD_INT 1
17966: PPUSH
17967: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17971: LD_INT 1
17973: PPUSH
17974: LD_VAR 0 3
17978: PPUSH
17979: LD_INT 1
17981: PPUSH
17982: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17986: LD_INT 2
17988: PPUSH
17989: LD_VAR 0 3
17993: PPUSH
17994: LD_INT 1
17996: PPUSH
17997: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18001: LD_INT 11
18003: PPUSH
18004: LD_VAR 0 3
18008: PPUSH
18009: LD_INT 1
18011: PPUSH
18012: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18016: LD_INT 0
18018: PPUSH
18019: LD_VAR 0 3
18023: PPUSH
18024: LD_INT 1
18026: PPUSH
18027: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18031: LD_INT 2
18033: PPUSH
18034: LD_VAR 0 3
18038: PPUSH
18039: LD_INT 1
18041: PPUSH
18042: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18046: LD_INT 4
18048: PPUSH
18049: LD_VAR 0 3
18053: PPUSH
18054: LD_INT 1
18056: PPUSH
18057: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18061: LD_INT 6
18063: PPUSH
18064: LD_VAR 0 3
18068: PPUSH
18069: LD_INT 1
18071: PPUSH
18072: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18076: LD_INT 29
18078: PPUSH
18079: LD_VAR 0 3
18083: PPUSH
18084: LD_INT 1
18086: PPUSH
18087: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18091: LD_INT 31
18093: PPUSH
18094: LD_VAR 0 3
18098: PPUSH
18099: LD_INT 1
18101: PPUSH
18102: CALL_OW 324
// end ; 3 :
18106: GO 21654
18108: LD_INT 3
18110: DOUBLE
18111: EQUAL
18112: IFTRUE 18116
18114: GO 18569
18116: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18117: LD_INT 35
18119: PPUSH
18120: LD_VAR 0 3
18124: PPUSH
18125: LD_INT 1
18127: PPUSH
18128: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18132: LD_INT 45
18134: PPUSH
18135: LD_VAR 0 3
18139: PPUSH
18140: LD_INT 1
18142: PPUSH
18143: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18147: LD_INT 46
18149: PPUSH
18150: LD_VAR 0 3
18154: PPUSH
18155: LD_INT 1
18157: PPUSH
18158: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18162: LD_INT 47
18164: PPUSH
18165: LD_VAR 0 3
18169: PPUSH
18170: LD_INT 1
18172: PPUSH
18173: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18177: LD_INT 1
18179: PPUSH
18180: LD_VAR 0 3
18184: PPUSH
18185: LD_INT 1
18187: PPUSH
18188: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18192: LD_INT 2
18194: PPUSH
18195: LD_VAR 0 3
18199: PPUSH
18200: LD_INT 1
18202: PPUSH
18203: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18207: LD_INT 11
18209: PPUSH
18210: LD_VAR 0 3
18214: PPUSH
18215: LD_INT 1
18217: PPUSH
18218: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18222: LD_INT 48
18224: PPUSH
18225: LD_VAR 0 3
18229: PPUSH
18230: LD_INT 1
18232: PPUSH
18233: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18237: LD_INT 69
18239: PPUSH
18240: LD_VAR 0 3
18244: PPUSH
18245: LD_INT 1
18247: PPUSH
18248: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18252: LD_INT 39
18254: PPUSH
18255: LD_VAR 0 3
18259: PPUSH
18260: LD_INT 1
18262: PPUSH
18263: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18267: LD_INT 43
18269: PPUSH
18270: LD_VAR 0 3
18274: PPUSH
18275: LD_INT 1
18277: PPUSH
18278: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18282: LD_INT 51
18284: PPUSH
18285: LD_VAR 0 3
18289: PPUSH
18290: LD_INT 1
18292: PPUSH
18293: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18297: LD_INT 6
18299: PPUSH
18300: LD_VAR 0 3
18304: PPUSH
18305: LD_INT 1
18307: PPUSH
18308: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18312: LD_INT 0
18314: PPUSH
18315: LD_VAR 0 3
18319: PPUSH
18320: LD_INT 1
18322: PPUSH
18323: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18327: LD_INT 2
18329: PPUSH
18330: LD_VAR 0 3
18334: PPUSH
18335: LD_INT 1
18337: PPUSH
18338: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18342: LD_INT 3
18344: PPUSH
18345: LD_VAR 0 3
18349: PPUSH
18350: LD_INT 1
18352: PPUSH
18353: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18357: LD_INT 4
18359: PPUSH
18360: LD_VAR 0 3
18364: PPUSH
18365: LD_INT 1
18367: PPUSH
18368: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18372: LD_INT 6
18374: PPUSH
18375: LD_VAR 0 3
18379: PPUSH
18380: LD_INT 1
18382: PPUSH
18383: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18387: LD_INT 7
18389: PPUSH
18390: LD_VAR 0 3
18394: PPUSH
18395: LD_INT 1
18397: PPUSH
18398: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18402: LD_INT 8
18404: PPUSH
18405: LD_VAR 0 3
18409: PPUSH
18410: LD_INT 1
18412: PPUSH
18413: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18417: LD_INT 10
18419: PPUSH
18420: LD_VAR 0 3
18424: PPUSH
18425: LD_INT 1
18427: PPUSH
18428: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18432: LD_INT 15
18434: PPUSH
18435: LD_VAR 0 3
18439: PPUSH
18440: LD_INT 1
18442: PPUSH
18443: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18447: LD_INT 16
18449: PPUSH
18450: LD_VAR 0 3
18454: PPUSH
18455: LD_INT 1
18457: PPUSH
18458: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18462: LD_INT 17
18464: PPUSH
18465: LD_VAR 0 3
18469: PPUSH
18470: LD_INT 1
18472: PPUSH
18473: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18477: LD_INT 20
18479: PPUSH
18480: LD_VAR 0 3
18484: PPUSH
18485: LD_INT 1
18487: PPUSH
18488: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18492: LD_INT 26
18494: PPUSH
18495: LD_VAR 0 3
18499: PPUSH
18500: LD_INT 1
18502: PPUSH
18503: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18507: LD_INT 27
18509: PPUSH
18510: LD_VAR 0 3
18514: PPUSH
18515: LD_INT 1
18517: PPUSH
18518: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18522: LD_INT 29
18524: PPUSH
18525: LD_VAR 0 3
18529: PPUSH
18530: LD_INT 1
18532: PPUSH
18533: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18537: LD_INT 31
18539: PPUSH
18540: LD_VAR 0 3
18544: PPUSH
18545: LD_INT 1
18547: PPUSH
18548: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18552: LD_INT 32
18554: PPUSH
18555: LD_VAR 0 3
18559: PPUSH
18560: LD_INT 1
18562: PPUSH
18563: CALL_OW 324
// end ; 4 :
18567: GO 21654
18569: LD_INT 4
18571: DOUBLE
18572: EQUAL
18573: IFTRUE 18577
18575: GO 19525
18577: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18578: LD_INT 35
18580: PPUSH
18581: LD_VAR 0 3
18585: PPUSH
18586: LD_INT 1
18588: PPUSH
18589: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18593: LD_INT 45
18595: PPUSH
18596: LD_VAR 0 3
18600: PPUSH
18601: LD_INT 1
18603: PPUSH
18604: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18608: LD_INT 46
18610: PPUSH
18611: LD_VAR 0 3
18615: PPUSH
18616: LD_INT 1
18618: PPUSH
18619: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18623: LD_INT 47
18625: PPUSH
18626: LD_VAR 0 3
18630: PPUSH
18631: LD_INT 1
18633: PPUSH
18634: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18638: LD_INT 1
18640: PPUSH
18641: LD_VAR 0 3
18645: PPUSH
18646: LD_INT 1
18648: PPUSH
18649: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18653: LD_INT 2
18655: PPUSH
18656: LD_VAR 0 3
18660: PPUSH
18661: LD_INT 1
18663: PPUSH
18664: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18668: LD_INT 11
18670: PPUSH
18671: LD_VAR 0 3
18675: PPUSH
18676: LD_INT 1
18678: PPUSH
18679: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18683: LD_INT 20
18685: PPUSH
18686: LD_VAR 0 3
18690: PPUSH
18691: LD_INT 1
18693: PPUSH
18694: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18698: LD_INT 48
18700: PPUSH
18701: LD_VAR 0 3
18705: PPUSH
18706: LD_INT 1
18708: PPUSH
18709: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18713: LD_INT 49
18715: PPUSH
18716: LD_VAR 0 3
18720: PPUSH
18721: LD_INT 1
18723: PPUSH
18724: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18728: LD_INT 69
18730: PPUSH
18731: LD_VAR 0 3
18735: PPUSH
18736: LD_INT 1
18738: PPUSH
18739: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18743: LD_INT 39
18745: PPUSH
18746: LD_VAR 0 3
18750: PPUSH
18751: LD_INT 1
18753: PPUSH
18754: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18758: LD_INT 34
18760: PPUSH
18761: LD_VAR 0 3
18765: PPUSH
18766: LD_INT 1
18768: PPUSH
18769: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18773: LD_INT 42
18775: PPUSH
18776: LD_VAR 0 3
18780: PPUSH
18781: LD_INT 1
18783: PPUSH
18784: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18788: LD_INT 44
18790: PPUSH
18791: LD_VAR 0 3
18795: PPUSH
18796: LD_INT 1
18798: PPUSH
18799: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18803: LD_INT 41
18805: PPUSH
18806: LD_VAR 0 3
18810: PPUSH
18811: LD_INT 1
18813: PPUSH
18814: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18818: LD_INT 43
18820: PPUSH
18821: LD_VAR 0 3
18825: PPUSH
18826: LD_INT 1
18828: PPUSH
18829: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18833: LD_INT 70
18835: PPUSH
18836: LD_VAR 0 3
18840: PPUSH
18841: LD_INT 1
18843: PPUSH
18844: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18848: LD_INT 51
18850: PPUSH
18851: LD_VAR 0 3
18855: PPUSH
18856: LD_INT 1
18858: PPUSH
18859: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18863: LD_INT 52
18865: PPUSH
18866: LD_VAR 0 3
18870: PPUSH
18871: LD_INT 1
18873: PPUSH
18874: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18878: LD_INT 6
18880: PPUSH
18881: LD_VAR 0 3
18885: PPUSH
18886: LD_INT 1
18888: PPUSH
18889: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18893: LD_INT 15
18895: PPUSH
18896: LD_VAR 0 3
18900: PPUSH
18901: LD_INT 1
18903: PPUSH
18904: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18908: LD_INT 7
18910: PPUSH
18911: LD_VAR 0 3
18915: PPUSH
18916: LD_INT 1
18918: PPUSH
18919: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18923: LD_INT 12
18925: PPUSH
18926: LD_VAR 0 3
18930: PPUSH
18931: LD_INT 1
18933: PPUSH
18934: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18938: LD_INT 18
18940: PPUSH
18941: LD_VAR 0 3
18945: PPUSH
18946: LD_INT 1
18948: PPUSH
18949: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18953: LD_INT 60
18955: PPUSH
18956: LD_VAR 0 3
18960: PPUSH
18961: LD_INT 1
18963: PPUSH
18964: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18968: LD_INT 9
18970: PPUSH
18971: LD_VAR 0 3
18975: PPUSH
18976: LD_INT 1
18978: PPUSH
18979: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18983: LD_INT 30
18985: PPUSH
18986: LD_VAR 0 3
18990: PPUSH
18991: LD_INT 1
18993: PPUSH
18994: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18998: LD_INT 37
19000: PPUSH
19001: LD_VAR 0 3
19005: PPUSH
19006: LD_INT 1
19008: PPUSH
19009: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19013: LD_INT 5
19015: PPUSH
19016: LD_VAR 0 3
19020: PPUSH
19021: LD_INT 1
19023: PPUSH
19024: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19028: LD_INT 66
19030: PPUSH
19031: LD_VAR 0 3
19035: PPUSH
19036: LD_INT 1
19038: PPUSH
19039: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19043: LD_INT 21
19045: PPUSH
19046: LD_VAR 0 3
19050: PPUSH
19051: LD_INT 1
19053: PPUSH
19054: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19058: LD_INT 22
19060: PPUSH
19061: LD_VAR 0 3
19065: PPUSH
19066: LD_INT 1
19068: PPUSH
19069: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19073: LD_INT 54
19075: PPUSH
19076: LD_VAR 0 3
19080: PPUSH
19081: LD_INT 1
19083: PPUSH
19084: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19088: LD_INT 0
19090: PPUSH
19091: LD_VAR 0 3
19095: PPUSH
19096: LD_INT 1
19098: PPUSH
19099: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
19103: LD_INT 1
19105: PPUSH
19106: LD_VAR 0 3
19110: PPUSH
19111: LD_INT 1
19113: PPUSH
19114: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19118: LD_INT 2
19120: PPUSH
19121: LD_VAR 0 3
19125: PPUSH
19126: LD_INT 1
19128: PPUSH
19129: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
19133: LD_INT 3
19135: PPUSH
19136: LD_VAR 0 3
19140: PPUSH
19141: LD_INT 1
19143: PPUSH
19144: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19148: LD_INT 4
19150: PPUSH
19151: LD_VAR 0 3
19155: PPUSH
19156: LD_INT 1
19158: PPUSH
19159: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
19163: LD_INT 5
19165: PPUSH
19166: LD_VAR 0 3
19170: PPUSH
19171: LD_INT 1
19173: PPUSH
19174: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19178: LD_INT 6
19180: PPUSH
19181: LD_VAR 0 3
19185: PPUSH
19186: LD_INT 1
19188: PPUSH
19189: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
19193: LD_INT 7
19195: PPUSH
19196: LD_VAR 0 3
19200: PPUSH
19201: LD_INT 1
19203: PPUSH
19204: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
19208: LD_INT 8
19210: PPUSH
19211: LD_VAR 0 3
19215: PPUSH
19216: LD_INT 1
19218: PPUSH
19219: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
19223: LD_INT 10
19225: PPUSH
19226: LD_VAR 0 3
19230: PPUSH
19231: LD_INT 1
19233: PPUSH
19234: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
19238: LD_INT 11
19240: PPUSH
19241: LD_VAR 0 3
19245: PPUSH
19246: LD_INT 1
19248: PPUSH
19249: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
19253: LD_INT 12
19255: PPUSH
19256: LD_VAR 0 3
19260: PPUSH
19261: LD_INT 1
19263: PPUSH
19264: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
19268: LD_INT 13
19270: PPUSH
19271: LD_VAR 0 3
19275: PPUSH
19276: LD_INT 1
19278: PPUSH
19279: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
19283: LD_INT 14
19285: PPUSH
19286: LD_VAR 0 3
19290: PPUSH
19291: LD_INT 1
19293: PPUSH
19294: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
19298: LD_INT 15
19300: PPUSH
19301: LD_VAR 0 3
19305: PPUSH
19306: LD_INT 1
19308: PPUSH
19309: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
19313: LD_INT 16
19315: PPUSH
19316: LD_VAR 0 3
19320: PPUSH
19321: LD_INT 1
19323: PPUSH
19324: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
19328: LD_INT 17
19330: PPUSH
19331: LD_VAR 0 3
19335: PPUSH
19336: LD_INT 1
19338: PPUSH
19339: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
19343: LD_INT 19
19345: PPUSH
19346: LD_VAR 0 3
19350: PPUSH
19351: LD_INT 1
19353: PPUSH
19354: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
19358: LD_INT 20
19360: PPUSH
19361: LD_VAR 0 3
19365: PPUSH
19366: LD_INT 1
19368: PPUSH
19369: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
19373: LD_INT 21
19375: PPUSH
19376: LD_VAR 0 3
19380: PPUSH
19381: LD_INT 1
19383: PPUSH
19384: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
19388: LD_INT 23
19390: PPUSH
19391: LD_VAR 0 3
19395: PPUSH
19396: LD_INT 1
19398: PPUSH
19399: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
19403: LD_INT 26
19405: PPUSH
19406: LD_VAR 0 3
19410: PPUSH
19411: LD_INT 1
19413: PPUSH
19414: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
19418: LD_INT 27
19420: PPUSH
19421: LD_VAR 0 3
19425: PPUSH
19426: LD_INT 1
19428: PPUSH
19429: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
19433: LD_INT 28
19435: PPUSH
19436: LD_VAR 0 3
19440: PPUSH
19441: LD_INT 1
19443: PPUSH
19444: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19448: LD_INT 29
19450: PPUSH
19451: LD_VAR 0 3
19455: PPUSH
19456: LD_INT 1
19458: PPUSH
19459: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
19463: LD_INT 30
19465: PPUSH
19466: LD_VAR 0 3
19470: PPUSH
19471: LD_INT 1
19473: PPUSH
19474: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19478: LD_INT 31
19480: PPUSH
19481: LD_VAR 0 3
19485: PPUSH
19486: LD_INT 1
19488: PPUSH
19489: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
19493: LD_INT 32
19495: PPUSH
19496: LD_VAR 0 3
19500: PPUSH
19501: LD_INT 1
19503: PPUSH
19504: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
19508: LD_INT 36
19510: PPUSH
19511: LD_VAR 0 3
19515: PPUSH
19516: LD_INT 1
19518: PPUSH
19519: CALL_OW 324
// end ; 5 :
19523: GO 21654
19525: LD_INT 5
19527: DOUBLE
19528: EQUAL
19529: IFTRUE 19533
19531: GO 20646
19533: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19534: LD_INT 35
19536: PPUSH
19537: LD_VAR 0 3
19541: PPUSH
19542: LD_INT 1
19544: PPUSH
19545: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19549: LD_INT 45
19551: PPUSH
19552: LD_VAR 0 3
19556: PPUSH
19557: LD_INT 1
19559: PPUSH
19560: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19564: LD_INT 46
19566: PPUSH
19567: LD_VAR 0 3
19571: PPUSH
19572: LD_INT 1
19574: PPUSH
19575: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19579: LD_INT 47
19581: PPUSH
19582: LD_VAR 0 3
19586: PPUSH
19587: LD_INT 1
19589: PPUSH
19590: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19594: LD_INT 1
19596: PPUSH
19597: LD_VAR 0 3
19601: PPUSH
19602: LD_INT 1
19604: PPUSH
19605: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19609: LD_INT 2
19611: PPUSH
19612: LD_VAR 0 3
19616: PPUSH
19617: LD_INT 1
19619: PPUSH
19620: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19624: LD_INT 11
19626: PPUSH
19627: LD_VAR 0 3
19631: PPUSH
19632: LD_INT 1
19634: PPUSH
19635: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
19639: LD_INT 20
19641: PPUSH
19642: LD_VAR 0 3
19646: PPUSH
19647: LD_INT 1
19649: PPUSH
19650: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
19654: LD_INT 48
19656: PPUSH
19657: LD_VAR 0 3
19661: PPUSH
19662: LD_INT 1
19664: PPUSH
19665: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
19669: LD_INT 49
19671: PPUSH
19672: LD_VAR 0 3
19676: PPUSH
19677: LD_INT 1
19679: PPUSH
19680: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
19684: LD_INT 69
19686: PPUSH
19687: LD_VAR 0 3
19691: PPUSH
19692: LD_INT 1
19694: PPUSH
19695: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
19699: LD_INT 39
19701: PPUSH
19702: LD_VAR 0 3
19706: PPUSH
19707: LD_INT 1
19709: PPUSH
19710: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
19714: LD_INT 34
19716: PPUSH
19717: LD_VAR 0 3
19721: PPUSH
19722: LD_INT 1
19724: PPUSH
19725: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
19729: LD_INT 42
19731: PPUSH
19732: LD_VAR 0 3
19736: PPUSH
19737: LD_INT 1
19739: PPUSH
19740: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
19744: LD_INT 44
19746: PPUSH
19747: LD_VAR 0 3
19751: PPUSH
19752: LD_INT 1
19754: PPUSH
19755: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
19759: LD_INT 41
19761: PPUSH
19762: LD_VAR 0 3
19766: PPUSH
19767: LD_INT 1
19769: PPUSH
19770: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
19774: LD_INT 40
19776: PPUSH
19777: LD_VAR 0 3
19781: PPUSH
19782: LD_INT 1
19784: PPUSH
19785: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
19789: LD_INT 43
19791: PPUSH
19792: LD_VAR 0 3
19796: PPUSH
19797: LD_INT 1
19799: PPUSH
19800: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
19804: LD_INT 70
19806: PPUSH
19807: LD_VAR 0 3
19811: PPUSH
19812: LD_INT 1
19814: PPUSH
19815: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
19819: LD_INT 51
19821: PPUSH
19822: LD_VAR 0 3
19826: PPUSH
19827: LD_INT 1
19829: PPUSH
19830: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19834: LD_INT 52
19836: PPUSH
19837: LD_VAR 0 3
19841: PPUSH
19842: LD_INT 1
19844: PPUSH
19845: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19849: LD_INT 6
19851: PPUSH
19852: LD_VAR 0 3
19856: PPUSH
19857: LD_INT 1
19859: PPUSH
19860: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19864: LD_INT 15
19866: PPUSH
19867: LD_VAR 0 3
19871: PPUSH
19872: LD_INT 1
19874: PPUSH
19875: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19879: LD_INT 7
19881: PPUSH
19882: LD_VAR 0 3
19886: PPUSH
19887: LD_INT 1
19889: PPUSH
19890: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19894: LD_INT 12
19896: PPUSH
19897: LD_VAR 0 3
19901: PPUSH
19902: LD_INT 1
19904: PPUSH
19905: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19909: LD_INT 17
19911: PPUSH
19912: LD_VAR 0 3
19916: PPUSH
19917: LD_INT 1
19919: PPUSH
19920: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19924: LD_INT 18
19926: PPUSH
19927: LD_VAR 0 3
19931: PPUSH
19932: LD_INT 1
19934: PPUSH
19935: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19939: LD_INT 60
19941: PPUSH
19942: LD_VAR 0 3
19946: PPUSH
19947: LD_INT 1
19949: PPUSH
19950: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19954: LD_INT 32
19956: PPUSH
19957: LD_VAR 0 3
19961: PPUSH
19962: LD_INT 1
19964: PPUSH
19965: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19969: LD_INT 9
19971: PPUSH
19972: LD_VAR 0 3
19976: PPUSH
19977: LD_INT 1
19979: PPUSH
19980: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19984: LD_INT 57
19986: PPUSH
19987: LD_VAR 0 3
19991: PPUSH
19992: LD_INT 1
19994: PPUSH
19995: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19999: LD_INT 30
20001: PPUSH
20002: LD_VAR 0 3
20006: PPUSH
20007: LD_INT 1
20009: PPUSH
20010: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
20014: LD_INT 37
20016: PPUSH
20017: LD_VAR 0 3
20021: PPUSH
20022: LD_INT 1
20024: PPUSH
20025: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
20029: LD_INT 63
20031: PPUSH
20032: LD_VAR 0 3
20036: PPUSH
20037: LD_INT 1
20039: PPUSH
20040: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
20044: LD_INT 3
20046: PPUSH
20047: LD_VAR 0 3
20051: PPUSH
20052: LD_INT 1
20054: PPUSH
20055: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
20059: LD_INT 4
20061: PPUSH
20062: LD_VAR 0 3
20066: PPUSH
20067: LD_INT 1
20069: PPUSH
20070: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20074: LD_INT 5
20076: PPUSH
20077: LD_VAR 0 3
20081: PPUSH
20082: LD_INT 1
20084: PPUSH
20085: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20089: LD_INT 66
20091: PPUSH
20092: LD_VAR 0 3
20096: PPUSH
20097: LD_INT 1
20099: PPUSH
20100: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20104: LD_INT 21
20106: PPUSH
20107: LD_VAR 0 3
20111: PPUSH
20112: LD_INT 1
20114: PPUSH
20115: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20119: LD_INT 22
20121: PPUSH
20122: LD_VAR 0 3
20126: PPUSH
20127: LD_INT 1
20129: PPUSH
20130: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
20134: LD_INT 19
20136: PPUSH
20137: LD_VAR 0 3
20141: PPUSH
20142: LD_INT 1
20144: PPUSH
20145: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20149: LD_INT 54
20151: PPUSH
20152: LD_VAR 0 3
20156: PPUSH
20157: LD_INT 1
20159: PPUSH
20160: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
20164: LD_INT 55
20166: PPUSH
20167: LD_VAR 0 3
20171: PPUSH
20172: LD_INT 1
20174: PPUSH
20175: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20179: LD_INT 0
20181: PPUSH
20182: LD_VAR 0 3
20186: PPUSH
20187: LD_INT 1
20189: PPUSH
20190: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
20194: LD_INT 1
20196: PPUSH
20197: LD_VAR 0 3
20201: PPUSH
20202: LD_INT 1
20204: PPUSH
20205: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20209: LD_INT 2
20211: PPUSH
20212: LD_VAR 0 3
20216: PPUSH
20217: LD_INT 1
20219: PPUSH
20220: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
20224: LD_INT 3
20226: PPUSH
20227: LD_VAR 0 3
20231: PPUSH
20232: LD_INT 1
20234: PPUSH
20235: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
20239: LD_INT 4
20241: PPUSH
20242: LD_VAR 0 3
20246: PPUSH
20247: LD_INT 1
20249: PPUSH
20250: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
20254: LD_INT 5
20256: PPUSH
20257: LD_VAR 0 3
20261: PPUSH
20262: LD_INT 1
20264: PPUSH
20265: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
20269: LD_INT 6
20271: PPUSH
20272: LD_VAR 0 3
20276: PPUSH
20277: LD_INT 1
20279: PPUSH
20280: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
20284: LD_INT 7
20286: PPUSH
20287: LD_VAR 0 3
20291: PPUSH
20292: LD_INT 1
20294: PPUSH
20295: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
20299: LD_INT 8
20301: PPUSH
20302: LD_VAR 0 3
20306: PPUSH
20307: LD_INT 1
20309: PPUSH
20310: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
20314: LD_INT 10
20316: PPUSH
20317: LD_VAR 0 3
20321: PPUSH
20322: LD_INT 1
20324: PPUSH
20325: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
20329: LD_INT 11
20331: PPUSH
20332: LD_VAR 0 3
20336: PPUSH
20337: LD_INT 1
20339: PPUSH
20340: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
20344: LD_INT 12
20346: PPUSH
20347: LD_VAR 0 3
20351: PPUSH
20352: LD_INT 1
20354: PPUSH
20355: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
20359: LD_INT 13
20361: PPUSH
20362: LD_VAR 0 3
20366: PPUSH
20367: LD_INT 1
20369: PPUSH
20370: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
20374: LD_INT 14
20376: PPUSH
20377: LD_VAR 0 3
20381: PPUSH
20382: LD_INT 1
20384: PPUSH
20385: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
20389: LD_INT 15
20391: PPUSH
20392: LD_VAR 0 3
20396: PPUSH
20397: LD_INT 1
20399: PPUSH
20400: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
20404: LD_INT 16
20406: PPUSH
20407: LD_VAR 0 3
20411: PPUSH
20412: LD_INT 1
20414: PPUSH
20415: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
20419: LD_INT 17
20421: PPUSH
20422: LD_VAR 0 3
20426: PPUSH
20427: LD_INT 1
20429: PPUSH
20430: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
20434: LD_INT 18
20436: PPUSH
20437: LD_VAR 0 3
20441: PPUSH
20442: LD_INT 1
20444: PPUSH
20445: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
20449: LD_INT 19
20451: PPUSH
20452: LD_VAR 0 3
20456: PPUSH
20457: LD_INT 1
20459: PPUSH
20460: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
20464: LD_INT 20
20466: PPUSH
20467: LD_VAR 0 3
20471: PPUSH
20472: LD_INT 1
20474: PPUSH
20475: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
20479: LD_INT 21
20481: PPUSH
20482: LD_VAR 0 3
20486: PPUSH
20487: LD_INT 1
20489: PPUSH
20490: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
20494: LD_INT 23
20496: PPUSH
20497: LD_VAR 0 3
20501: PPUSH
20502: LD_INT 1
20504: PPUSH
20505: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
20509: LD_INT 26
20511: PPUSH
20512: LD_VAR 0 3
20516: PPUSH
20517: LD_INT 1
20519: PPUSH
20520: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
20524: LD_INT 27
20526: PPUSH
20527: LD_VAR 0 3
20531: PPUSH
20532: LD_INT 1
20534: PPUSH
20535: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
20539: LD_INT 28
20541: PPUSH
20542: LD_VAR 0 3
20546: PPUSH
20547: LD_INT 1
20549: PPUSH
20550: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
20554: LD_INT 29
20556: PPUSH
20557: LD_VAR 0 3
20561: PPUSH
20562: LD_INT 1
20564: PPUSH
20565: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
20569: LD_INT 30
20571: PPUSH
20572: LD_VAR 0 3
20576: PPUSH
20577: LD_INT 1
20579: PPUSH
20580: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
20584: LD_INT 31
20586: PPUSH
20587: LD_VAR 0 3
20591: PPUSH
20592: LD_INT 1
20594: PPUSH
20595: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
20599: LD_INT 32
20601: PPUSH
20602: LD_VAR 0 3
20606: PPUSH
20607: LD_INT 1
20609: PPUSH
20610: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
20614: LD_INT 33
20616: PPUSH
20617: LD_VAR 0 3
20621: PPUSH
20622: LD_INT 1
20624: PPUSH
20625: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
20629: LD_INT 36
20631: PPUSH
20632: LD_VAR 0 3
20636: PPUSH
20637: LD_INT 1
20639: PPUSH
20640: CALL_OW 324
// end ; 6 :
20644: GO 21654
20646: LD_INT 6
20648: DOUBLE
20649: EQUAL
20650: IFTRUE 20654
20652: GO 21579
20654: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20655: LD_INT 35
20657: PPUSH
20658: LD_VAR 0 3
20662: PPUSH
20663: LD_INT 1
20665: PPUSH
20666: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20670: LD_INT 45
20672: PPUSH
20673: LD_VAR 0 3
20677: PPUSH
20678: LD_INT 1
20680: PPUSH
20681: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20685: LD_INT 46
20687: PPUSH
20688: LD_VAR 0 3
20692: PPUSH
20693: LD_INT 1
20695: PPUSH
20696: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20700: LD_INT 47
20702: PPUSH
20703: LD_VAR 0 3
20707: PPUSH
20708: LD_INT 1
20710: PPUSH
20711: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20715: LD_INT 1
20717: PPUSH
20718: LD_VAR 0 3
20722: PPUSH
20723: LD_INT 1
20725: PPUSH
20726: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20730: LD_INT 2
20732: PPUSH
20733: LD_VAR 0 3
20737: PPUSH
20738: LD_INT 1
20740: PPUSH
20741: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20745: LD_INT 11
20747: PPUSH
20748: LD_VAR 0 3
20752: PPUSH
20753: LD_INT 1
20755: PPUSH
20756: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
20760: LD_INT 20
20762: PPUSH
20763: LD_VAR 0 3
20767: PPUSH
20768: LD_INT 1
20770: PPUSH
20771: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20775: LD_INT 48
20777: PPUSH
20778: LD_VAR 0 3
20782: PPUSH
20783: LD_INT 1
20785: PPUSH
20786: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
20790: LD_INT 49
20792: PPUSH
20793: LD_VAR 0 3
20797: PPUSH
20798: LD_INT 1
20800: PPUSH
20801: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
20805: LD_INT 50
20807: PPUSH
20808: LD_VAR 0 3
20812: PPUSH
20813: LD_INT 1
20815: PPUSH
20816: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20820: LD_INT 69
20822: PPUSH
20823: LD_VAR 0 3
20827: PPUSH
20828: LD_INT 1
20830: PPUSH
20831: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20835: LD_INT 39
20837: PPUSH
20838: LD_VAR 0 3
20842: PPUSH
20843: LD_INT 1
20845: PPUSH
20846: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
20850: LD_INT 34
20852: PPUSH
20853: LD_VAR 0 3
20857: PPUSH
20858: LD_INT 1
20860: PPUSH
20861: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20865: LD_INT 42
20867: PPUSH
20868: LD_VAR 0 3
20872: PPUSH
20873: LD_INT 1
20875: PPUSH
20876: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20880: LD_INT 44
20882: PPUSH
20883: LD_VAR 0 3
20887: PPUSH
20888: LD_INT 1
20890: PPUSH
20891: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20895: LD_INT 41
20897: PPUSH
20898: LD_VAR 0 3
20902: PPUSH
20903: LD_INT 1
20905: PPUSH
20906: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
20910: LD_INT 13
20912: PPUSH
20913: LD_VAR 0 3
20917: PPUSH
20918: LD_INT 1
20920: PPUSH
20921: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
20925: LD_INT 40
20927: PPUSH
20928: LD_VAR 0 3
20932: PPUSH
20933: LD_INT 1
20935: PPUSH
20936: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20940: LD_INT 43
20942: PPUSH
20943: LD_VAR 0 3
20947: PPUSH
20948: LD_INT 1
20950: PPUSH
20951: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20955: LD_INT 70
20957: PPUSH
20958: LD_VAR 0 3
20962: PPUSH
20963: LD_INT 1
20965: PPUSH
20966: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
20970: LD_INT 23
20972: PPUSH
20973: LD_VAR 0 3
20977: PPUSH
20978: LD_INT 1
20980: PPUSH
20981: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20985: LD_INT 51
20987: PPUSH
20988: LD_VAR 0 3
20992: PPUSH
20993: LD_INT 1
20995: PPUSH
20996: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
21000: LD_INT 52
21002: PPUSH
21003: LD_VAR 0 3
21007: PPUSH
21008: LD_INT 1
21010: PPUSH
21011: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
21015: LD_INT 6
21017: PPUSH
21018: LD_VAR 0 3
21022: PPUSH
21023: LD_INT 1
21025: PPUSH
21026: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
21030: LD_INT 15
21032: PPUSH
21033: LD_VAR 0 3
21037: PPUSH
21038: LD_INT 1
21040: PPUSH
21041: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
21045: LD_INT 7
21047: PPUSH
21048: LD_VAR 0 3
21052: PPUSH
21053: LD_INT 1
21055: PPUSH
21056: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
21060: LD_INT 12
21062: PPUSH
21063: LD_VAR 0 3
21067: PPUSH
21068: LD_INT 1
21070: PPUSH
21071: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
21075: LD_INT 10
21077: PPUSH
21078: LD_VAR 0 3
21082: PPUSH
21083: LD_INT 1
21085: PPUSH
21086: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
21090: LD_INT 17
21092: PPUSH
21093: LD_VAR 0 3
21097: PPUSH
21098: LD_INT 1
21100: PPUSH
21101: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
21105: LD_INT 18
21107: PPUSH
21108: LD_VAR 0 3
21112: PPUSH
21113: LD_INT 1
21115: PPUSH
21116: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
21120: LD_INT 60
21122: PPUSH
21123: LD_VAR 0 3
21127: PPUSH
21128: LD_INT 1
21130: PPUSH
21131: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
21135: LD_INT 61
21137: PPUSH
21138: LD_VAR 0 3
21142: PPUSH
21143: LD_INT 1
21145: PPUSH
21146: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
21150: LD_INT 32
21152: PPUSH
21153: LD_VAR 0 3
21157: PPUSH
21158: LD_INT 1
21160: PPUSH
21161: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
21165: LD_INT 27
21167: PPUSH
21168: LD_VAR 0 3
21172: PPUSH
21173: LD_INT 1
21175: PPUSH
21176: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
21180: LD_INT 36
21182: PPUSH
21183: LD_VAR 0 3
21187: PPUSH
21188: LD_INT 1
21190: PPUSH
21191: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
21195: LD_INT 33
21197: PPUSH
21198: LD_VAR 0 3
21202: PPUSH
21203: LD_INT 1
21205: PPUSH
21206: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
21210: LD_INT 9
21212: PPUSH
21213: LD_VAR 0 3
21217: PPUSH
21218: LD_INT 1
21220: PPUSH
21221: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
21225: LD_INT 38
21227: PPUSH
21228: LD_VAR 0 3
21232: PPUSH
21233: LD_INT 1
21235: PPUSH
21236: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
21240: LD_INT 57
21242: PPUSH
21243: LD_VAR 0 3
21247: PPUSH
21248: LD_INT 1
21250: PPUSH
21251: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
21255: LD_INT 58
21257: PPUSH
21258: LD_VAR 0 3
21262: PPUSH
21263: LD_INT 1
21265: PPUSH
21266: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
21270: LD_INT 28
21272: PPUSH
21273: LD_VAR 0 3
21277: PPUSH
21278: LD_INT 1
21280: PPUSH
21281: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
21285: LD_INT 29
21287: PPUSH
21288: LD_VAR 0 3
21292: PPUSH
21293: LD_INT 1
21295: PPUSH
21296: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
21300: LD_INT 30
21302: PPUSH
21303: LD_VAR 0 3
21307: PPUSH
21308: LD_INT 1
21310: PPUSH
21311: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
21315: LD_INT 37
21317: PPUSH
21318: LD_VAR 0 3
21322: PPUSH
21323: LD_INT 1
21325: PPUSH
21326: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
21330: LD_INT 63
21332: PPUSH
21333: LD_VAR 0 3
21337: PPUSH
21338: LD_INT 1
21340: PPUSH
21341: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
21345: LD_INT 64
21347: PPUSH
21348: LD_VAR 0 3
21352: PPUSH
21353: LD_INT 1
21355: PPUSH
21356: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
21360: LD_INT 3
21362: PPUSH
21363: LD_VAR 0 3
21367: PPUSH
21368: LD_INT 1
21370: PPUSH
21371: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
21375: LD_INT 4
21377: PPUSH
21378: LD_VAR 0 3
21382: PPUSH
21383: LD_INT 1
21385: PPUSH
21386: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
21390: LD_INT 5
21392: PPUSH
21393: LD_VAR 0 3
21397: PPUSH
21398: LD_INT 1
21400: PPUSH
21401: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
21405: LD_INT 8
21407: PPUSH
21408: LD_VAR 0 3
21412: PPUSH
21413: LD_INT 1
21415: PPUSH
21416: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
21420: LD_INT 66
21422: PPUSH
21423: LD_VAR 0 3
21427: PPUSH
21428: LD_INT 1
21430: PPUSH
21431: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
21435: LD_INT 67
21437: PPUSH
21438: LD_VAR 0 3
21442: PPUSH
21443: LD_INT 1
21445: PPUSH
21446: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
21450: LD_INT 21
21452: PPUSH
21453: LD_VAR 0 3
21457: PPUSH
21458: LD_INT 1
21460: PPUSH
21461: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
21465: LD_INT 22
21467: PPUSH
21468: LD_VAR 0 3
21472: PPUSH
21473: LD_INT 1
21475: PPUSH
21476: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
21480: LD_INT 19
21482: PPUSH
21483: LD_VAR 0 3
21487: PPUSH
21488: LD_INT 1
21490: PPUSH
21491: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
21495: LD_INT 26
21497: PPUSH
21498: LD_VAR 0 3
21502: PPUSH
21503: LD_INT 1
21505: PPUSH
21506: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
21510: LD_INT 54
21512: PPUSH
21513: LD_VAR 0 3
21517: PPUSH
21518: LD_INT 1
21520: PPUSH
21521: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
21525: LD_INT 55
21527: PPUSH
21528: LD_VAR 0 3
21532: PPUSH
21533: LD_INT 1
21535: PPUSH
21536: CALL_OW 322
// for i = 0 to 39 do
21540: LD_ADDR_VAR 0 4
21544: PUSH
21545: DOUBLE
21546: LD_INT 0
21548: DEC
21549: ST_TO_ADDR
21550: LD_INT 39
21552: PUSH
21553: FOR_TO
21554: IFFALSE 21575
// SetRestrict ( i , side , true ) ;
21556: LD_VAR 0 4
21560: PPUSH
21561: LD_VAR 0 3
21565: PPUSH
21566: LD_INT 1
21568: PPUSH
21569: CALL_OW 324
21573: GO 21553
21575: POP
21576: POP
// end ; else
21577: GO 21654
21579: POP
// begin for i = 1 to 73 do
21580: LD_ADDR_VAR 0 4
21584: PUSH
21585: DOUBLE
21586: LD_INT 1
21588: DEC
21589: ST_TO_ADDR
21590: LD_INT 73
21592: PUSH
21593: FOR_TO
21594: IFFALSE 21615
// SetTech ( i , side , state_enabled ) ;
21596: LD_VAR 0 4
21600: PPUSH
21601: LD_VAR 0 3
21605: PPUSH
21606: LD_INT 1
21608: PPUSH
21609: CALL_OW 322
21613: GO 21593
21615: POP
21616: POP
// for i = 0 to 39 do
21617: LD_ADDR_VAR 0 4
21621: PUSH
21622: DOUBLE
21623: LD_INT 0
21625: DEC
21626: ST_TO_ADDR
21627: LD_INT 39
21629: PUSH
21630: FOR_TO
21631: IFFALSE 21652
// SetRestrict ( i , side , true ) ;
21633: LD_VAR 0 4
21637: PPUSH
21638: LD_VAR 0 3
21642: PPUSH
21643: LD_INT 1
21645: PPUSH
21646: CALL_OW 324
21650: GO 21630
21652: POP
21653: POP
// end ; end ; end ;
21654: GO 17659
21656: POP
21657: POP
// end ;
21658: LD_VAR 0 2
21662: RET
