// export def_main_base , def_secondary_base , def_defence_level , def_amount_of_people , def_initial_level , def_main_deposits , def_secondary_deposits , def_siberite_detection , def_starting_resources , def_shipments_density , def_people_arrivals , def_people_loyality , def_people_info , def_morale_flags , def_siberite_bomb , def_amount_of_apemen , def_builduptime , def_win_rules , def_people_respawning ; export is_depot , number_of_people , number_of_pplants , are_mines , is_lab , is_fact , is_arm , are_breastworks , deposits , initial_level , starting_crates , starting_resources , shipments_density , max_arriving_times , text_info , fog_info , def_bf_params , amount_of_apemen , siberite_bomb_Delay ; export Positions , Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export second_side , third_nation ; export start_def , depots_def , breastworks_def , labs_def , factories_def , armories_def , pplants_def , deposits_def ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i ; var u1 , u2 , pom_tab , p1 , p2 , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
  73: PPUSH
  74: PPUSH
  75: PPUSH
  76: PPUSH
  77: PPUSH
  78: PPUSH
  79: PPUSH
  80: PPUSH
  81: PPUSH
  82: PPUSH
  83: PPUSH
// if MultiPlayer then
  84: LD_OWVAR 4
  88: IFFALSE 162
// begin Game_Type = mp_game_type ;
  90: LD_ADDR_EXP 66
  94: PUSH
  95: LD_OWVAR 6
  99: ST_TO_ADDR
// Your_Side = mp_player_side ;
 100: LD_ADDR_OWVAR 2
 104: PUSH
 105: LD_OWVAR 7
 109: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_OWVAR 17
 119: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 120: LD_ADDR_EXP 40
 124: PUSH
 125: LD_OWVAR 15
 129: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 130: LD_ADDR_EXP 44
 134: PUSH
 135: LD_OWVAR 16
 139: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 140: LD_ADDR_EXP 42
 144: PUSH
 145: CALL 0 0 0
 149: ST_TO_ADDR
// Teams = mp_teams ;
 150: LD_ADDR_EXP 41
 154: PUSH
 155: LD_OWVAR 12
 159: ST_TO_ADDR
// end else
 160: GO 333
// begin Your_Side = 3 ;
 162: LD_ADDR_OWVAR 2
 166: PUSH
 167: LD_INT 3
 169: ST_TO_ADDR
// Side_Positions = [ 0 , 0 , 2 , 0 , 1 , 0 , 0 , 0 ] ;
 170: LD_ADDR_EXP 43
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 2
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 1
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: LD_INT 0
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: LIST
 208: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 209: LD_ADDR_EXP 40
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: LD_INT 0
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: LIST
 246: LIST
 247: ST_TO_ADDR
// Side_Nations = [ 0 , 0 , 3 , 0 , 2 , 0 , 0 , 0 ] ;
 248: LD_ADDR_EXP 44
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 3
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 2
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: LIST
 286: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 287: LD_ADDR_EXP 42
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: ST_TO_ADDR
// Teams = [ ] ;
 326: LD_ADDR_EXP 41
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ; for i := 1 to 8 do
 333: LD_ADDR_VAR 0 8
 337: PUSH
 338: DOUBLE
 339: LD_INT 1
 341: DEC
 342: ST_TO_ADDR
 343: LD_INT 8
 345: PUSH
 346: FOR_TO
 347: IFFALSE 434
// if Multiplayer_GetPlayerIsSpec ( i ) then
 349: LD_VAR 0 8
 353: PPUSH
 354: CALL_OW 530
 358: IFFALSE 432
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 360: LD_ADDR_EXP 43
 364: PUSH
 365: LD_EXP 43
 369: PPUSH
 370: LD_VAR 0 8
 374: PPUSH
 375: LD_INT 0
 377: PPUSH
 378: CALL_OW 1
 382: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 383: LD_ADDR_EXP 41
 387: PUSH
 388: LD_EXP 41
 392: PPUSH
 393: LD_EXP 40
 397: PUSH
 398: LD_VAR 0 8
 402: ARRAY
 403: PPUSH
 404: LD_EXP 41
 408: PUSH
 409: LD_EXP 40
 413: PUSH
 414: LD_VAR 0 8
 418: ARRAY
 419: ARRAY
 420: PUSH
 421: LD_VAR 0 8
 425: DIFF
 426: PPUSH
 427: CALL_OW 1
 431: ST_TO_ADDR
// end ;
 432: GO 346
 434: POP
 435: POP
// Position_Sides := [ 0 , 0 ] ;
 436: LD_ADDR_EXP 46
 440: PUSH
 441: LD_INT 0
 443: PUSH
 444: LD_INT 0
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: ST_TO_ADDR
// for i := 1 to 8 do
 451: LD_ADDR_VAR 0 8
 455: PUSH
 456: DOUBLE
 457: LD_INT 1
 459: DEC
 460: ST_TO_ADDR
 461: LD_INT 8
 463: PUSH
 464: FOR_TO
 465: IFFALSE 512
// if Side_Positions [ i ] then
 467: LD_EXP 43
 471: PUSH
 472: LD_VAR 0 8
 476: ARRAY
 477: IFFALSE 510
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 479: LD_ADDR_EXP 46
 483: PUSH
 484: LD_EXP 46
 488: PPUSH
 489: LD_EXP 43
 493: PUSH
 494: LD_VAR 0 8
 498: ARRAY
 499: PPUSH
 500: LD_VAR 0 8
 504: PPUSH
 505: CALL_OW 1
 509: ST_TO_ADDR
 510: GO 464
 512: POP
 513: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 514: LD_ADDR_EXP 45
 518: PUSH
 519: LD_EXP 40
 523: PUSH
 524: LD_INT 0
 526: PUSH
 527: EMPTY
 528: LIST
 529: DIFF
 530: PUSH
 531: LD_INT 1
 533: GREATER
 534: ST_TO_ADDR
// p1 := 0 ;
 535: LD_ADDR_VAR 0 12
 539: PUSH
 540: LD_INT 0
 542: ST_TO_ADDR
// p2 := 0 ;
 543: LD_ADDR_VAR 0 13
 547: PUSH
 548: LD_INT 0
 550: ST_TO_ADDR
// for i := 1 to 8 do
 551: LD_ADDR_VAR 0 8
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 8
 563: PUSH
 564: FOR_TO
 565: IFFALSE 623
// if Side_Positions [ i ] = 1 then
 567: LD_EXP 43
 571: PUSH
 572: LD_VAR 0 8
 576: ARRAY
 577: PUSH
 578: LD_INT 1
 580: EQUAL
 581: IFFALSE 595
// p1 := i else
 583: LD_ADDR_VAR 0 12
 587: PUSH
 588: LD_VAR 0 8
 592: ST_TO_ADDR
 593: GO 621
// if Side_Positions [ i ] = 2 then
 595: LD_EXP 43
 599: PUSH
 600: LD_VAR 0 8
 604: ARRAY
 605: PUSH
 606: LD_INT 2
 608: EQUAL
 609: IFFALSE 621
// p2 := i ;
 611: LD_ADDR_VAR 0 13
 615: PUSH
 616: LD_VAR 0 8
 620: ST_TO_ADDR
 621: GO 564
 623: POP
 624: POP
// Positions := [ p1 , p2 ] ;
 625: LD_ADDR_EXP 39
 629: PUSH
 630: LD_VAR 0 12
 634: PUSH
 635: LD_VAR 0 13
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: ST_TO_ADDR
// if MultiPlayer then
 644: LD_OWVAR 4
 648: IFFALSE 902
// begin def_main_base = GetMultiplayerSetting ( 0 ) ;
 650: LD_ADDR_EXP 1
 654: PUSH
 655: LD_INT 0
 657: PPUSH
 658: CALL_OW 426
 662: ST_TO_ADDR
// def_secondary_base = GetMultiplayerSetting ( 1 ) ;
 663: LD_ADDR_EXP 2
 667: PUSH
 668: LD_INT 1
 670: PPUSH
 671: CALL_OW 426
 675: ST_TO_ADDR
// def_defence_level = GetMultiplayerSetting ( 2 ) ;
 676: LD_ADDR_EXP 3
 680: PUSH
 681: LD_INT 2
 683: PPUSH
 684: CALL_OW 426
 688: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 3 ) ;
 689: LD_ADDR_EXP 4
 693: PUSH
 694: LD_INT 3
 696: PPUSH
 697: CALL_OW 426
 701: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 4 ) ;
 702: LD_ADDR_EXP 5
 706: PUSH
 707: LD_INT 4
 709: PPUSH
 710: CALL_OW 426
 714: ST_TO_ADDR
// def_main_deposits = GetMultiplayerSetting ( 5 ) ;
 715: LD_ADDR_EXP 6
 719: PUSH
 720: LD_INT 5
 722: PPUSH
 723: CALL_OW 426
 727: ST_TO_ADDR
// def_secondary_deposits = GetMultiplayerSetting ( 6 ) ;
 728: LD_ADDR_EXP 7
 732: PUSH
 733: LD_INT 6
 735: PPUSH
 736: CALL_OW 426
 740: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 7 ) ;
 741: LD_ADDR_EXP 8
 745: PUSH
 746: LD_INT 7
 748: PPUSH
 749: CALL_OW 426
 753: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 8 ) ;
 754: LD_ADDR_EXP 9
 758: PUSH
 759: LD_INT 8
 761: PPUSH
 762: CALL_OW 426
 766: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 9 ) ;
 767: LD_ADDR_EXP 10
 771: PUSH
 772: LD_INT 9
 774: PPUSH
 775: CALL_OW 426
 779: ST_TO_ADDR
// def_people_arrivals = GetMultiplayerSetting ( 10 ) ;
 780: LD_ADDR_EXP 11
 784: PUSH
 785: LD_INT 10
 787: PPUSH
 788: CALL_OW 426
 792: ST_TO_ADDR
// def_people_loyality = GetMultiplayerSetting ( 11 ) ;
 793: LD_ADDR_EXP 12
 797: PUSH
 798: LD_INT 11
 800: PPUSH
 801: CALL_OW 426
 805: ST_TO_ADDR
// def_people_info = GetMultiplayerSetting ( 12 ) ;
 806: LD_ADDR_EXP 13
 810: PUSH
 811: LD_INT 12
 813: PPUSH
 814: CALL_OW 426
 818: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 15 ) ;
 819: LD_ADDR_EXP 14
 823: PUSH
 824: LD_INT 15
 826: PPUSH
 827: CALL_OW 426
 831: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 16 ) ;
 832: LD_ADDR_EXP 15
 836: PUSH
 837: LD_INT 16
 839: PPUSH
 840: CALL_OW 426
 844: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 17 ) ;
 845: LD_ADDR_EXP 16
 849: PUSH
 850: LD_INT 17
 852: PPUSH
 853: CALL_OW 426
 857: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 858: LD_ADDR_EXP 17
 862: PUSH
 863: LD_INT 20
 865: PPUSH
 866: CALL_OW 426
 870: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 871: LD_ADDR_VAR 0 14
 875: PUSH
 876: LD_INT 22
 878: PPUSH
 879: CALL_OW 426
 883: ST_TO_ADDR
// def_people_respawning = 0 ;
 884: LD_ADDR_EXP 19
 888: PUSH
 889: LD_INT 0
 891: ST_TO_ADDR
// def_win_rules = 0 ;
 892: LD_ADDR_EXP 18
 896: PUSH
 897: LD_INT 0
 899: ST_TO_ADDR
// end else
 900: GO 1074
// begin randomize ;
 902: CALL_OW 10
// def_main_base = 4 ;
 906: LD_ADDR_EXP 1
 910: PUSH
 911: LD_INT 4
 913: ST_TO_ADDR
// def_secondary_base = 2 ;
 914: LD_ADDR_EXP 2
 918: PUSH
 919: LD_INT 2
 921: ST_TO_ADDR
// def_defence_level = 1 ;
 922: LD_ADDR_EXP 3
 926: PUSH
 927: LD_INT 1
 929: ST_TO_ADDR
// def_amount_of_people = 2 ;
 930: LD_ADDR_EXP 4
 934: PUSH
 935: LD_INT 2
 937: ST_TO_ADDR
// def_initial_level = 1 ;
 938: LD_ADDR_EXP 5
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// def_main_deposits = 2 ;
 946: LD_ADDR_EXP 6
 950: PUSH
 951: LD_INT 2
 953: ST_TO_ADDR
// def_secondary_deposits = 1 ;
 954: LD_ADDR_EXP 7
 958: PUSH
 959: LD_INT 1
 961: ST_TO_ADDR
// def_siberite_detection = 1 ;
 962: LD_ADDR_EXP 8
 966: PUSH
 967: LD_INT 1
 969: ST_TO_ADDR
// def_starting_resources = 2 ;
 970: LD_ADDR_EXP 9
 974: PUSH
 975: LD_INT 2
 977: ST_TO_ADDR
// def_shipments_density = 1 ;
 978: LD_ADDR_EXP 10
 982: PUSH
 983: LD_INT 1
 985: ST_TO_ADDR
// def_people_arrivals = 3 ;
 986: LD_ADDR_EXP 11
 990: PUSH
 991: LD_INT 3
 993: ST_TO_ADDR
// def_people_loyality = 1 ;
 994: LD_ADDR_EXP 12
 998: PUSH
 999: LD_INT 1
1001: ST_TO_ADDR
// def_people_info = 1 ;
1002: LD_ADDR_EXP 13
1006: PUSH
1007: LD_INT 1
1009: ST_TO_ADDR
// def_morale_flags = 2 ;
1010: LD_ADDR_EXP 14
1014: PUSH
1015: LD_INT 2
1017: ST_TO_ADDR
// def_siberite_bomb = 1 ;
1018: LD_ADDR_EXP 15
1022: PUSH
1023: LD_INT 1
1025: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
1026: LD_ADDR_EXP 16
1030: PUSH
1031: LD_INT 3
1033: ST_TO_ADDR
// def_builduptime = 1 ;
1034: LD_ADDR_EXP 17
1038: PUSH
1039: LD_INT 1
1041: ST_TO_ADDR
// def_game_rules = 0 ;
1042: LD_ADDR_EXP 67
1046: PUSH
1047: LD_INT 0
1049: ST_TO_ADDR
// tech_level = 4 ;
1050: LD_ADDR_VAR 0 14
1054: PUSH
1055: LD_INT 4
1057: ST_TO_ADDR
// def_people_respawning = 0 ;
1058: LD_ADDR_EXP 19
1062: PUSH
1063: LD_INT 0
1065: ST_TO_ADDR
// def_win_rules = 0 ;
1066: LD_ADDR_EXP 18
1070: PUSH
1071: LD_INT 0
1073: ST_TO_ADDR
// end ; InitGameRules ;
1074: CALL 14122 0 0
// if def_game_rules = 0 then
1078: LD_EXP 67
1082: PUSH
1083: LD_INT 0
1085: EQUAL
1086: IFFALSE 1113
// begin if isSGUI then
1088: LD_OWVAR 83
1092: IFFALSE 1100
// setMpTechs ( ) else
1094: CALL 17507 0 0
1098: GO 1113
// begin SetMpTechLevel ( tech_level + 1 ) ;
1100: LD_VAR 0 14
1104: PUSH
1105: LD_INT 1
1107: PLUS
1108: PPUSH
1109: CALL 17654 0 1
// end ; end ; u1 = [ 0 , 1 , 1 , 1 , 2 ] [ def_main_base + 1 ] ;
1113: LD_ADDR_VAR 0 9
1117: PUSH
1118: LD_INT 0
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: LD_INT 1
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: LIST
1137: LIST
1138: LIST
1139: PUSH
1140: LD_EXP 1
1144: PUSH
1145: LD_INT 1
1147: PLUS
1148: ARRAY
1149: ST_TO_ADDR
// u2 = [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] ;
1150: LD_ADDR_VAR 0 10
1154: PUSH
1155: LD_INT 0
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 1
1163: PUSH
1164: LD_INT 2
1166: PUSH
1167: LD_INT 2
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: PUSH
1177: LD_EXP 1
1181: PUSH
1182: LD_INT 1
1184: PLUS
1185: ARRAY
1186: ST_TO_ADDR
// is_depot = [ [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] , [ 0 , 1 , 1 ] [ def_secondary_base + 1 ] ] ;
1187: LD_ADDR_EXP 20
1191: PUSH
1192: LD_INT 0
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 2
1203: PUSH
1204: LD_INT 2
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: LIST
1211: LIST
1212: LIST
1213: PUSH
1214: LD_EXP 1
1218: PUSH
1219: LD_INT 1
1221: PLUS
1222: ARRAY
1223: PUSH
1224: LD_INT 0
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: LD_INT 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: LIST
1237: PUSH
1238: LD_EXP 2
1242: PUSH
1243: LD_INT 1
1245: PLUS
1246: ARRAY
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: ST_TO_ADDR
// if is_depot [ 2 ] then
1252: LD_EXP 20
1256: PUSH
1257: LD_INT 2
1259: ARRAY
1260: IFFALSE 1399
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ [ ] , [ 1 ] , [ 1 , 1 ] , [ 1 , 1 , 1 ] ] [ def_defence_level + 1 ] ] else
1262: LD_ADDR_EXP 27
1266: PUSH
1267: EMPTY
1268: PUSH
1269: LD_VAR 0 10
1273: PUSH
1274: LD_VAR 0 9
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: PUSH
1283: LD_VAR 0 10
1287: PUSH
1288: LD_VAR 0 10
1292: PUSH
1293: LD_VAR 0 9
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: LIST
1302: PUSH
1303: LD_VAR 0 10
1307: PUSH
1308: LD_VAR 0 10
1312: PUSH
1313: LD_VAR 0 9
1317: PUSH
1318: LD_VAR 0 9
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: PUSH
1335: LD_EXP 3
1339: PUSH
1340: LD_INT 1
1342: PLUS
1343: ARRAY
1344: PUSH
1345: EMPTY
1346: PUSH
1347: LD_INT 1
1349: PUSH
1350: EMPTY
1351: LIST
1352: PUSH
1353: LD_INT 1
1355: PUSH
1356: LD_INT 1
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: PUSH
1363: LD_INT 1
1365: PUSH
1366: LD_INT 1
1368: PUSH
1369: LD_INT 1
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: PUSH
1383: LD_EXP 3
1387: PUSH
1388: LD_INT 1
1390: PLUS
1391: ARRAY
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: ST_TO_ADDR
1397: GO 1488
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ ] ] ;
1399: LD_ADDR_EXP 27
1403: PUSH
1404: EMPTY
1405: PUSH
1406: LD_VAR 0 10
1410: PUSH
1411: LD_VAR 0 9
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: PUSH
1420: LD_VAR 0 10
1424: PUSH
1425: LD_VAR 0 10
1429: PUSH
1430: LD_VAR 0 9
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PUSH
1440: LD_VAR 0 10
1444: PUSH
1445: LD_VAR 0 10
1449: PUSH
1450: LD_VAR 0 9
1454: PUSH
1455: LD_VAR 0 9
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_EXP 3
1476: PUSH
1477: LD_INT 1
1479: PLUS
1480: ARRAY
1481: PUSH
1482: EMPTY
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: ST_TO_ADDR
// is_fact = [ [ 0 , 0 , 1 , 2 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1488: LD_ADDR_EXP 25
1492: PUSH
1493: LD_INT 0
1495: PUSH
1496: LD_INT 0
1498: PUSH
1499: LD_INT 1
1501: PUSH
1502: LD_INT 2
1504: PUSH
1505: LD_INT 2
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: PUSH
1515: LD_EXP 1
1519: PUSH
1520: LD_INT 1
1522: PLUS
1523: ARRAY
1524: PUSH
1525: LD_INT 0
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: ST_TO_ADDR
// is_lab = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1532: LD_ADDR_EXP 24
1536: PUSH
1537: LD_INT 0
1539: PUSH
1540: LD_INT 0
1542: PUSH
1543: LD_INT 1
1545: PUSH
1546: LD_INT 1
1548: PUSH
1549: LD_INT 2
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: PUSH
1559: LD_EXP 1
1563: PUSH
1564: LD_INT 1
1566: PLUS
1567: ARRAY
1568: PUSH
1569: LD_INT 0
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: ST_TO_ADDR
// is_arm = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1576: LD_ADDR_EXP 26
1580: PUSH
1581: LD_INT 0
1583: PUSH
1584: LD_INT 0
1586: PUSH
1587: LD_INT 1
1589: PUSH
1590: LD_INT 1
1592: PUSH
1593: LD_INT 2
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: LD_EXP 1
1607: PUSH
1608: LD_INT 1
1610: PLUS
1611: ARRAY
1612: PUSH
1613: LD_INT 0
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: ST_TO_ADDR
// are_mines = [ [ 0 , 0 , 0 , 1 , 1 ] [ def_main_base + 1 ] , [ 0 , 0 , 1 ] [ def_secondary_base + 1 ] ] ;
1620: LD_ADDR_EXP 23
1624: PUSH
1625: LD_INT 0
1627: PUSH
1628: LD_INT 0
1630: PUSH
1631: LD_INT 0
1633: PUSH
1634: LD_INT 1
1636: PUSH
1637: LD_INT 1
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: PUSH
1647: LD_EXP 1
1651: PUSH
1652: LD_INT 1
1654: PLUS
1655: ARRAY
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: LD_INT 0
1662: PUSH
1663: LD_INT 1
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_EXP 2
1675: PUSH
1676: LD_INT 1
1678: PLUS
1679: ARRAY
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: ST_TO_ADDR
// number_of_pplants = [ [ 0 , 0 , 0 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1685: LD_ADDR_EXP 22
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: LD_INT 0
1695: PUSH
1696: LD_INT 0
1698: PUSH
1699: LD_INT 1
1701: PUSH
1702: LD_INT 2
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: LIST
1709: LIST
1710: LIST
1711: PUSH
1712: LD_EXP 1
1716: PUSH
1717: LD_INT 1
1719: PLUS
1720: ARRAY
1721: PUSH
1722: LD_INT 0
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: ST_TO_ADDR
// number_of_people = [ [ 5 , 8 , 11 ] [ def_amount_of_people + 1 ] , ( [ 2 , 3 , 4 ] [ def_amount_of_people + 1 ] ) * is_depot [ 2 ] ] ;
1729: LD_ADDR_EXP 21
1733: PUSH
1734: LD_INT 5
1736: PUSH
1737: LD_INT 8
1739: PUSH
1740: LD_INT 11
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: LD_EXP 4
1752: PUSH
1753: LD_INT 1
1755: PLUS
1756: ARRAY
1757: PUSH
1758: LD_INT 2
1760: PUSH
1761: LD_INT 3
1763: PUSH
1764: LD_INT 4
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PUSH
1772: LD_EXP 4
1776: PUSH
1777: LD_INT 1
1779: PLUS
1780: ARRAY
1781: PUSH
1782: LD_EXP 20
1786: PUSH
1787: LD_INT 2
1789: ARRAY
1790: MUL
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
1796: LD_ADDR_EXP 29
1800: PUSH
1801: LD_INT 2
1803: PUSH
1804: LD_INT 3
1806: PUSH
1807: LD_INT 4
1809: PUSH
1810: LD_INT 5
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_EXP 5
1823: PUSH
1824: LD_INT 1
1826: PLUS
1827: ARRAY
1828: ST_TO_ADDR
// starting_resources = [ [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] , [ [ 50 , 0 , 0 ] , [ 20 , 0 , 0 ] ] , [ [ 150 , 30 , 0 ] , [ 60 , 0 , 0 ] ] , [ [ 250 , 50 , 10 ] , [ 100 , 30 , 0 ] ] ] [ def_starting_resources + 1 ] ;
1829: LD_ADDR_EXP 31
1833: PUSH
1834: LD_INT 0
1836: PUSH
1837: LD_INT 0
1839: PUSH
1840: LD_INT 0
1842: PUSH
1843: EMPTY
1844: LIST
1845: LIST
1846: LIST
1847: PUSH
1848: LD_INT 0
1850: PUSH
1851: LD_INT 0
1853: PUSH
1854: LD_INT 0
1856: PUSH
1857: EMPTY
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: PUSH
1866: LD_INT 50
1868: PUSH
1869: LD_INT 0
1871: PUSH
1872: LD_INT 0
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 20
1882: PUSH
1883: LD_INT 0
1885: PUSH
1886: LD_INT 0
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: LIST
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: LD_INT 150
1900: PUSH
1901: LD_INT 30
1903: PUSH
1904: LD_INT 0
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: LIST
1911: PUSH
1912: LD_INT 60
1914: PUSH
1915: LD_INT 0
1917: PUSH
1918: LD_INT 0
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: LIST
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: PUSH
1930: LD_INT 250
1932: PUSH
1933: LD_INT 50
1935: PUSH
1936: LD_INT 10
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: LIST
1943: PUSH
1944: LD_INT 100
1946: PUSH
1947: LD_INT 30
1949: PUSH
1950: LD_INT 0
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: LIST
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: PUSH
1968: LD_EXP 9
1972: PUSH
1973: LD_INT 1
1975: PLUS
1976: ARRAY
1977: ST_TO_ADDR
// shipments_density := 190 - ( def_shipments_density + 1 ) ;
1978: LD_ADDR_EXP 32
1982: PUSH
1983: LD_INT 190
1985: PUSH
1986: LD_EXP 10
1990: PUSH
1991: LD_INT 1
1993: PLUS
1994: MINUS
1995: ST_TO_ADDR
// max_arriving_times = [ [ ] , [ 10 , 17 , 26 , 36 , 48 , 60 ] , [ 6 , 10 , 15 , 20 , 26 , 32 , 38 , 45 , 52 , 60 ] , [ 4 , 6 , 9 , 12 , 16 , 20 , 24 , 28 , 32 , 36 , 40 , 45 , 50 , 55 , 60 ] ] [ def_people_arrivals + 1 ] ;
1996: LD_ADDR_EXP 33
2000: PUSH
2001: EMPTY
2002: PUSH
2003: LD_INT 10
2005: PUSH
2006: LD_INT 17
2008: PUSH
2009: LD_INT 26
2011: PUSH
2012: LD_INT 36
2014: PUSH
2015: LD_INT 48
2017: PUSH
2018: LD_INT 60
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 6
2031: PUSH
2032: LD_INT 10
2034: PUSH
2035: LD_INT 15
2037: PUSH
2038: LD_INT 20
2040: PUSH
2041: LD_INT 26
2043: PUSH
2044: LD_INT 32
2046: PUSH
2047: LD_INT 38
2049: PUSH
2050: LD_INT 45
2052: PUSH
2053: LD_INT 52
2055: PUSH
2056: LD_INT 60
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: PUSH
2071: LD_INT 4
2073: PUSH
2074: LD_INT 6
2076: PUSH
2077: LD_INT 9
2079: PUSH
2080: LD_INT 12
2082: PUSH
2083: LD_INT 16
2085: PUSH
2086: LD_INT 20
2088: PUSH
2089: LD_INT 24
2091: PUSH
2092: LD_INT 28
2094: PUSH
2095: LD_INT 32
2097: PUSH
2098: LD_INT 36
2100: PUSH
2101: LD_INT 40
2103: PUSH
2104: LD_INT 45
2106: PUSH
2107: LD_INT 50
2109: PUSH
2110: LD_INT 55
2112: PUSH
2113: LD_INT 60
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: PUSH
2139: LD_EXP 11
2143: PUSH
2144: LD_INT 1
2146: PLUS
2147: ARRAY
2148: ST_TO_ADDR
// text_info = [ 0 , 1 , 0 , 1 ] [ def_people_info + 1 ] ;
2149: LD_ADDR_EXP 34
2153: PUSH
2154: LD_INT 0
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: LD_INT 0
2162: PUSH
2163: LD_INT 1
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: PUSH
2172: LD_EXP 13
2176: PUSH
2177: LD_INT 1
2179: PLUS
2180: ARRAY
2181: ST_TO_ADDR
// fog_info = [ 0 , 0 , 1 , 1 ] [ def_people_info + 1 ] ;
2182: LD_ADDR_EXP 35
2186: PUSH
2187: LD_INT 0
2189: PUSH
2190: LD_INT 0
2192: PUSH
2193: LD_INT 1
2195: PUSH
2196: LD_INT 1
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_EXP 13
2209: PUSH
2210: LD_INT 1
2212: PLUS
2213: ARRAY
2214: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
2215: LD_ADDR_EXP 37
2219: PUSH
2220: LD_INT 0
2222: PUSH
2223: LD_INT 3
2225: PUSH
2226: LD_INT 6
2228: PUSH
2229: LD_INT 9
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: LD_EXP 16
2242: PUSH
2243: LD_INT 1
2245: PLUS
2246: ARRAY
2247: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2248: LD_ADDR_EXP 38
2252: PUSH
2253: LD_INT 0
2255: PUSH
2256: LD_INT 1
2258: PUSH
2259: LD_INT 63000
2261: PUSH
2262: LD_INT 126000
2264: PUSH
2265: LD_INT 189000
2267: PUSH
2268: LD_INT 252000
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: PUSH
2279: LD_EXP 15
2283: PUSH
2284: LD_INT 1
2286: PLUS
2287: ARRAY
2288: ST_TO_ADDR
// deposits = [ [ [ 1 , 0 , 1 , 2 , 0 ] [ def_main_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_main_deposits + 1 ] ] , [ [ 1 , 0 , 1 , 2 , 0 ] [ def_secondary_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_secondary_deposits + 1 ] ] ] ;
2289: LD_ADDR_EXP 28
2293: PUSH
2294: LD_INT 1
2296: PUSH
2297: LD_INT 0
2299: PUSH
2300: LD_INT 1
2302: PUSH
2303: LD_INT 2
2305: PUSH
2306: LD_INT 0
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: LIST
2313: LIST
2314: LIST
2315: PUSH
2316: LD_EXP 6
2320: PUSH
2321: LD_INT 1
2323: PLUS
2324: ARRAY
2325: PUSH
2326: LD_INT 0
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: LD_INT 1
2334: PUSH
2335: LD_INT 0
2337: PUSH
2338: LD_INT 2
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: PUSH
2348: LD_EXP 6
2352: PUSH
2353: LD_INT 1
2355: PLUS
2356: ARRAY
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 1
2364: PUSH
2365: LD_INT 0
2367: PUSH
2368: LD_INT 1
2370: PUSH
2371: LD_INT 2
2373: PUSH
2374: LD_INT 0
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: PUSH
2384: LD_EXP 7
2388: PUSH
2389: LD_INT 1
2391: PLUS
2392: ARRAY
2393: PUSH
2394: LD_INT 0
2396: PUSH
2397: LD_INT 1
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: LD_INT 0
2405: PUSH
2406: LD_INT 2
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: PUSH
2416: LD_EXP 7
2420: PUSH
2421: LD_INT 1
2423: PLUS
2424: ARRAY
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: ST_TO_ADDR
// def_bf_params = [ [ 0 , 0 , 0 , 0 ] , [ 50 , 25 , 0 , 50 ] , [ 75 , 50 , 25 , 75 ] , [ 100 , 75 , 50 , 100 ] ] [ def_morale_flags + 1 ] ;
2434: LD_ADDR_EXP 36
2438: PUSH
2439: LD_INT 0
2441: PUSH
2442: LD_INT 0
2444: PUSH
2445: LD_INT 0
2447: PUSH
2448: LD_INT 0
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: LIST
2455: LIST
2456: PUSH
2457: LD_INT 50
2459: PUSH
2460: LD_INT 25
2462: PUSH
2463: LD_INT 0
2465: PUSH
2466: LD_INT 50
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: PUSH
2475: LD_INT 75
2477: PUSH
2478: LD_INT 50
2480: PUSH
2481: LD_INT 25
2483: PUSH
2484: LD_INT 75
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: PUSH
2493: LD_INT 100
2495: PUSH
2496: LD_INT 75
2498: PUSH
2499: LD_INT 50
2501: PUSH
2502: LD_INT 100
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: PUSH
2517: LD_EXP 14
2521: PUSH
2522: LD_INT 1
2524: PLUS
2525: ARRAY
2526: ST_TO_ADDR
// prepare_arrivals ;
2527: CALL 11226 0 0
// if def_people_loyality then
2531: LD_EXP 12
2535: IFFALSE 3400
// begin second_side = [ [ [ 0 , 0 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 6 , 7 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 4 , 2 ] , [ 4 , 2 ] ] , [ [ 5 , 4 ] , [ 0 , 0 ] , [ 5 , 6 ] , [ 5 , 1 ] , [ 7 , 3 ] , [ 5 , 3 ] , [ 5 , 4 ] , [ 5 , 4 ] ] , [ [ 6 , 4 ] , [ 6 , 5 ] , [ 0 , 0 ] , [ 6 , 1 ] , [ 6 , 2 ] , [ 5 , 1 ] , [ 6 , 4 ] , [ 6 , 2 ] ] , [ [ 7 , 6 ] , [ 1 , 5 ] , [ 1 , 6 ] , [ 0 , 0 ] , [ 1 , 2 ] , [ 1 , 3 ] , [ 1 , 2 ] , [ 1 , 2 ] ] , [ [ 2 , 4 ] , [ 3 , 7 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 0 , 0 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 2 , 4 ] ] , [ [ 3 , 4 ] , [ 3 , 5 ] , [ 1 , 5 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 0 , 0 ] , [ 3 , 4 ] , [ 3 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 0 , 0 ] , [ 4 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 0 , 0 ] ] ] [ positions [ 1 ] ] [ positions [ 2 ] ] ;
2537: LD_ADDR_EXP 47
2541: PUSH
2542: LD_INT 0
2544: PUSH
2545: LD_INT 0
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 4
2554: PUSH
2555: LD_INT 5
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PUSH
2562: LD_INT 4
2564: PUSH
2565: LD_INT 6
2567: PUSH
2568: EMPTY
2569: LIST
2570: LIST
2571: PUSH
2572: LD_INT 6
2574: PUSH
2575: LD_INT 7
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: PUSH
2582: LD_INT 4
2584: PUSH
2585: LD_INT 2
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: PUSH
2592: LD_INT 4
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: LD_INT 4
2604: PUSH
2605: LD_INT 2
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: LD_INT 4
2614: PUSH
2615: LD_INT 2
2617: PUSH
2618: EMPTY
2619: LIST
2620: LIST
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: PUSH
2632: LD_INT 5
2634: PUSH
2635: LD_INT 4
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: PUSH
2642: LD_INT 0
2644: PUSH
2645: LD_INT 0
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 5
2654: PUSH
2655: LD_INT 6
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: PUSH
2662: LD_INT 5
2664: PUSH
2665: LD_INT 1
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_INT 7
2674: PUSH
2675: LD_INT 3
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: PUSH
2682: LD_INT 5
2684: PUSH
2685: LD_INT 3
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: LD_INT 5
2694: PUSH
2695: LD_INT 4
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: LD_INT 5
2704: PUSH
2705: LD_INT 4
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 6
2724: PUSH
2725: LD_INT 4
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: LD_INT 6
2734: PUSH
2735: LD_INT 5
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 0
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 6
2754: PUSH
2755: LD_INT 1
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: PUSH
2762: LD_INT 6
2764: PUSH
2765: LD_INT 2
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: LD_INT 5
2774: PUSH
2775: LD_INT 1
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: LD_INT 6
2784: PUSH
2785: LD_INT 4
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 6
2794: PUSH
2795: LD_INT 2
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: PUSH
2812: LD_INT 7
2814: PUSH
2815: LD_INT 6
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 1
2824: PUSH
2825: LD_INT 5
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: LD_INT 1
2834: PUSH
2835: LD_INT 6
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 0
2844: PUSH
2845: LD_INT 0
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_INT 1
2854: PUSH
2855: LD_INT 2
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: PUSH
2862: LD_INT 1
2864: PUSH
2865: LD_INT 3
2867: PUSH
2868: EMPTY
2869: LIST
2870: LIST
2871: PUSH
2872: LD_INT 1
2874: PUSH
2875: LD_INT 2
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: LD_INT 2
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: LIST
2896: LIST
2897: LIST
2898: LIST
2899: LIST
2900: LIST
2901: PUSH
2902: LD_INT 2
2904: PUSH
2905: LD_INT 4
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 3
2914: PUSH
2915: LD_INT 7
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PUSH
2922: LD_INT 2
2924: PUSH
2925: LD_INT 6
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PUSH
2932: LD_INT 2
2934: PUSH
2935: LD_INT 1
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: PUSH
2942: LD_INT 0
2944: PUSH
2945: LD_INT 0
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PUSH
2952: LD_INT 2
2954: PUSH
2955: LD_INT 3
2957: PUSH
2958: EMPTY
2959: LIST
2960: LIST
2961: PUSH
2962: LD_INT 2
2964: PUSH
2965: LD_INT 4
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: PUSH
2972: LD_INT 2
2974: PUSH
2975: LD_INT 4
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: LIST
2990: LIST
2991: PUSH
2992: LD_INT 3
2994: PUSH
2995: LD_INT 4
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 3
3004: PUSH
3005: LD_INT 5
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: LD_INT 1
3014: PUSH
3015: LD_INT 5
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 3
3024: PUSH
3025: LD_INT 1
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: LD_INT 3
3034: PUSH
3035: LD_INT 2
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PUSH
3042: LD_INT 0
3044: PUSH
3045: LD_INT 0
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: PUSH
3052: LD_INT 3
3054: PUSH
3055: LD_INT 4
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PUSH
3062: LD_INT 3
3064: PUSH
3065: LD_INT 2
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PUSH
3072: EMPTY
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: PUSH
3082: LD_INT 2
3084: PUSH
3085: LD_INT 4
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: LD_INT 4
3094: PUSH
3095: LD_INT 5
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: PUSH
3102: LD_INT 4
3104: PUSH
3105: LD_INT 6
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PUSH
3112: LD_INT 2
3114: PUSH
3115: LD_INT 1
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: PUSH
3122: LD_INT 4
3124: PUSH
3125: LD_INT 2
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PUSH
3132: LD_INT 4
3134: PUSH
3135: LD_INT 3
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PUSH
3142: LD_INT 0
3144: PUSH
3145: LD_INT 0
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: PUSH
3152: LD_INT 4
3154: PUSH
3155: LD_INT 2
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 2
3174: PUSH
3175: LD_INT 4
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 4
3184: PUSH
3185: LD_INT 5
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 2
3194: PUSH
3195: LD_INT 6
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 2
3204: PUSH
3205: LD_INT 1
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: LD_INT 4
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: LD_INT 2
3224: PUSH
3225: LD_INT 3
3227: PUSH
3228: EMPTY
3229: LIST
3230: LIST
3231: PUSH
3232: LD_INT 2
3234: PUSH
3235: LD_INT 4
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PUSH
3242: LD_INT 0
3244: PUSH
3245: LD_INT 0
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: LIST
3258: LIST
3259: LIST
3260: LIST
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: LIST
3270: LIST
3271: PUSH
3272: LD_EXP 39
3276: PUSH
3277: LD_INT 1
3279: ARRAY
3280: ARRAY
3281: PUSH
3282: LD_EXP 39
3286: PUSH
3287: LD_INT 2
3289: ARRAY
3290: ARRAY
3291: ST_TO_ADDR
// SetAttitude ( second_side [ 1 ] , positions [ 1 ] , att_friend , true ) ;
3292: LD_EXP 47
3296: PUSH
3297: LD_INT 1
3299: ARRAY
3300: PPUSH
3301: LD_EXP 39
3305: PUSH
3306: LD_INT 1
3308: ARRAY
3309: PPUSH
3310: LD_INT 1
3312: PPUSH
3313: LD_INT 1
3315: PPUSH
3316: CALL_OW 80
// SetAttitude ( second_side [ 2 ] , positions [ 2 ] , att_friend , true ) ;
3320: LD_EXP 47
3324: PUSH
3325: LD_INT 2
3327: ARRAY
3328: PPUSH
3329: LD_EXP 39
3333: PUSH
3334: LD_INT 2
3336: ARRAY
3337: PPUSH
3338: LD_INT 1
3340: PPUSH
3341: LD_INT 1
3343: PPUSH
3344: CALL_OW 80
// if fog_info then
3348: LD_EXP 35
3352: IFFALSE 3398
// begin ChangeSideFog ( second_side [ 1 ] , positions [ 1 ] ) ;
3354: LD_EXP 47
3358: PUSH
3359: LD_INT 1
3361: ARRAY
3362: PPUSH
3363: LD_EXP 39
3367: PUSH
3368: LD_INT 1
3370: ARRAY
3371: PPUSH
3372: CALL_OW 343
// ChangeSideFog ( second_side [ 2 ] , positions [ 2 ] ) ;
3376: LD_EXP 47
3380: PUSH
3381: LD_INT 2
3383: ARRAY
3384: PPUSH
3385: LD_EXP 39
3389: PUSH
3390: LD_INT 2
3392: ARRAY
3393: PPUSH
3394: CALL_OW 343
// end ; end else
3398: GO 3680
// begin pom_tab = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] diff ( positions union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 1 ] ] union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 2 ] ] ) ;
3400: LD_ADDR_VAR 0 11
3404: PUSH
3405: LD_INT 1
3407: PUSH
3408: LD_INT 2
3410: PUSH
3411: LD_INT 3
3413: PUSH
3414: LD_INT 4
3416: PUSH
3417: LD_INT 5
3419: PUSH
3420: LD_INT 6
3422: PUSH
3423: LD_INT 7
3425: PUSH
3426: LD_INT 8
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: PUSH
3439: LD_EXP 39
3443: PUSH
3444: LD_INT 4
3446: PUSH
3447: LD_INT 5
3449: PUSH
3450: LD_INT 7
3452: PUSH
3453: LD_INT 8
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: LIST
3460: PUSH
3461: LD_INT 6
3463: PUSH
3464: LD_INT 1
3466: PUSH
3467: LD_INT 7
3469: PUSH
3470: LD_INT 8
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: LIST
3477: PUSH
3478: LD_INT 2
3480: PUSH
3481: LD_INT 3
3483: PUSH
3484: LD_INT 2
3486: PUSH
3487: LD_INT 4
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: LD_INT 2
3496: PUSH
3497: LD_INT 4
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: PUSH
3514: LD_EXP 39
3518: PUSH
3519: LD_INT 1
3521: ARRAY
3522: ARRAY
3523: UNION
3524: PUSH
3525: LD_INT 4
3527: PUSH
3528: LD_INT 5
3530: PUSH
3531: LD_INT 7
3533: PUSH
3534: LD_INT 8
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 6
3544: PUSH
3545: LD_INT 1
3547: PUSH
3548: LD_INT 7
3550: PUSH
3551: LD_INT 8
3553: PUSH
3554: EMPTY
3555: LIST
3556: LIST
3557: LIST
3558: PUSH
3559: LD_INT 2
3561: PUSH
3562: LD_INT 3
3564: PUSH
3565: LD_INT 2
3567: PUSH
3568: LD_INT 4
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PUSH
3575: LD_INT 2
3577: PUSH
3578: LD_INT 4
3580: PUSH
3581: EMPTY
3582: LIST
3583: LIST
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: PUSH
3595: LD_EXP 39
3599: PUSH
3600: LD_INT 2
3602: ARRAY
3603: ARRAY
3604: UNION
3605: DIFF
3606: ST_TO_ADDR
// second_side = pom_tab [ Rand ( 1 , pom_tab ) ] ;
3607: LD_ADDR_EXP 47
3611: PUSH
3612: LD_VAR 0 11
3616: PUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_VAR 0 11
3624: PPUSH
3625: CALL_OW 12
3629: ARRAY
3630: ST_TO_ADDR
// third_nation = [ 1 , 2 , 3 ] diff side_nations ;
3631: LD_ADDR_EXP 48
3635: PUSH
3636: LD_INT 1
3638: PUSH
3639: LD_INT 2
3641: PUSH
3642: LD_INT 3
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: LIST
3649: PUSH
3650: LD_EXP 44
3654: DIFF
3655: ST_TO_ADDR
// third_nation = third_nation [ Rand ( 1 , third_nation ) ] ;
3656: LD_ADDR_EXP 48
3660: PUSH
3661: LD_EXP 48
3665: PUSH
3666: LD_INT 1
3668: PPUSH
3669: LD_EXP 48
3673: PPUSH
3674: CALL_OW 12
3678: ARRAY
3679: ST_TO_ADDR
// end ; BuildUpAreas := [ BuildUp1 , BuildUp2 ] ;
3680: LD_ADDR_EXP 65
3684: PUSH
3685: LD_INT 26
3687: PUSH
3688: LD_INT 27
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: ST_TO_ADDR
// end ;
3695: LD_VAR 0 1
3699: RET
// function prepare_map_coordinates ; var side , dep2 , br2 , dep1 , br1 , lab , fac , arm , pplant , un , i , k11 , k12 , k21 , k22 ; begin
3700: LD_INT 0
3702: PPUSH
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
3710: PPUSH
3711: PPUSH
3712: PPUSH
3713: PPUSH
3714: PPUSH
3715: PPUSH
3716: PPUSH
3717: PPUSH
// start_def = [ ] ;
3718: LD_ADDR_EXP 49
3722: PUSH
3723: EMPTY
3724: ST_TO_ADDR
// depots_def = [ ] ;
3725: LD_ADDR_EXP 50
3729: PUSH
3730: EMPTY
3731: ST_TO_ADDR
// breastworks_def = [ ] ;
3732: LD_ADDR_EXP 51
3736: PUSH
3737: EMPTY
3738: ST_TO_ADDR
// labs_def = [ ] ;
3739: LD_ADDR_EXP 52
3743: PUSH
3744: EMPTY
3745: ST_TO_ADDR
// factories_def = [ ] ;
3746: LD_ADDR_EXP 53
3750: PUSH
3751: EMPTY
3752: ST_TO_ADDR
// armories_def = [ ] ;
3753: LD_ADDR_EXP 54
3757: PUSH
3758: EMPTY
3759: ST_TO_ADDR
// pplants_def = [ ] ;
3760: LD_ADDR_EXP 55
3764: PUSH
3765: EMPTY
3766: ST_TO_ADDR
// deposits_def = [ ] ;
3767: LD_ADDR_EXP 56
3771: PUSH
3772: EMPTY
3773: ST_TO_ADDR
// k11 := Rand ( 1 , 2 ) ;
3774: LD_ADDR_VAR 0 13
3778: PUSH
3779: LD_INT 1
3781: PPUSH
3782: LD_INT 2
3784: PPUSH
3785: CALL_OW 12
3789: ST_TO_ADDR
// k12 := Rand ( 1 , 2 ) ;
3790: LD_ADDR_VAR 0 14
3794: PUSH
3795: LD_INT 1
3797: PPUSH
3798: LD_INT 2
3800: PPUSH
3801: CALL_OW 12
3805: ST_TO_ADDR
// k21 := Rand ( 1 , 2 ) ;
3806: LD_ADDR_VAR 0 15
3810: PUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_INT 2
3816: PPUSH
3817: CALL_OW 12
3821: ST_TO_ADDR
// k22 := Rand ( 1 , 2 ) ;
3822: LD_ADDR_VAR 0 16
3826: PUSH
3827: LD_INT 1
3829: PPUSH
3830: LD_INT 2
3832: PPUSH
3833: CALL_OW 12
3837: ST_TO_ADDR
// deposits_def := [ [ [ [ Res111 , Res112 ] [ k11 ] , [ Res111 , Res112 ] [ 3 - k11 ] ] , [ [ Res121 , Res122 ] [ k12 ] , [ Res121 , Res122 ] [ 3 - k12 ] ] ] , [ [ [ Res211 , Res212 ] [ k21 ] , [ Res211 , Res212 ] [ 3 - k21 ] ] , [ [ Res221 , Res222 ] [ k22 ] , [ Res221 , Res222 ] [ 3 - k22 ] ] ] ] ;
3838: LD_ADDR_EXP 56
3842: PUSH
3843: LD_INT 4
3845: PUSH
3846: LD_INT 5
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: LD_VAR 0 13
3857: ARRAY
3858: PUSH
3859: LD_INT 4
3861: PUSH
3862: LD_INT 5
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: PUSH
3869: LD_INT 3
3871: PUSH
3872: LD_VAR 0 13
3876: MINUS
3877: ARRAY
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: PUSH
3883: LD_INT 6
3885: PUSH
3886: LD_INT 7
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: PUSH
3893: LD_VAR 0 14
3897: ARRAY
3898: PUSH
3899: LD_INT 6
3901: PUSH
3902: LD_INT 7
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: PUSH
3909: LD_INT 3
3911: PUSH
3912: LD_VAR 0 14
3916: MINUS
3917: ARRAY
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: PUSH
3927: LD_INT 8
3929: PUSH
3930: LD_INT 9
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: PUSH
3937: LD_VAR 0 15
3941: ARRAY
3942: PUSH
3943: LD_INT 8
3945: PUSH
3946: LD_INT 9
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PUSH
3953: LD_INT 3
3955: PUSH
3956: LD_VAR 0 15
3960: MINUS
3961: ARRAY
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: PUSH
3967: LD_INT 10
3969: PUSH
3970: LD_INT 11
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: PUSH
3977: LD_VAR 0 16
3981: ARRAY
3982: PUSH
3983: LD_INT 10
3985: PUSH
3986: LD_INT 11
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: LD_INT 3
3995: PUSH
3996: LD_VAR 0 16
4000: MINUS
4001: ARRAY
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PUSH
4011: EMPTY
4012: LIST
4013: LIST
4014: ST_TO_ADDR
// for side := 1 to 2 do
4015: LD_ADDR_VAR 0 2
4019: PUSH
4020: DOUBLE
4021: LD_INT 1
4023: DEC
4024: ST_TO_ADDR
4025: LD_INT 2
4027: PUSH
4028: FOR_TO
4029: IFFALSE 5161
// begin dep1 := side * 10 - 9 ;
4031: LD_ADDR_VAR 0 5
4035: PUSH
4036: LD_VAR 0 2
4040: PUSH
4041: LD_INT 10
4043: MUL
4044: PUSH
4045: LD_INT 9
4047: MINUS
4048: ST_TO_ADDR
// dep2 := 20 + side * 4 - 3 ;
4049: LD_ADDR_VAR 0 3
4053: PUSH
4054: LD_INT 20
4056: PUSH
4057: LD_VAR 0 2
4061: PUSH
4062: LD_INT 4
4064: MUL
4065: PLUS
4066: PUSH
4067: LD_INT 3
4069: MINUS
4070: ST_TO_ADDR
// br1 := [ side * 10 - 8 , side * 10 - 7 , side * 10 - 6 , side * 10 - 5 ] ;
4071: LD_ADDR_VAR 0 6
4075: PUSH
4076: LD_VAR 0 2
4080: PUSH
4081: LD_INT 10
4083: MUL
4084: PUSH
4085: LD_INT 8
4087: MINUS
4088: PUSH
4089: LD_VAR 0 2
4093: PUSH
4094: LD_INT 10
4096: MUL
4097: PUSH
4098: LD_INT 7
4100: MINUS
4101: PUSH
4102: LD_VAR 0 2
4106: PUSH
4107: LD_INT 10
4109: MUL
4110: PUSH
4111: LD_INT 6
4113: MINUS
4114: PUSH
4115: LD_VAR 0 2
4119: PUSH
4120: LD_INT 10
4122: MUL
4123: PUSH
4124: LD_INT 5
4126: MINUS
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: ST_TO_ADDR
// br2 := [ 20 + side * 4 - 2 , 20 + side * 4 - 1 , 20 + side * 4 ] ;
4134: LD_ADDR_VAR 0 4
4138: PUSH
4139: LD_INT 20
4141: PUSH
4142: LD_VAR 0 2
4146: PUSH
4147: LD_INT 4
4149: MUL
4150: PLUS
4151: PUSH
4152: LD_INT 2
4154: MINUS
4155: PUSH
4156: LD_INT 20
4158: PUSH
4159: LD_VAR 0 2
4163: PUSH
4164: LD_INT 4
4166: MUL
4167: PLUS
4168: PUSH
4169: LD_INT 1
4171: MINUS
4172: PUSH
4173: LD_INT 20
4175: PUSH
4176: LD_VAR 0 2
4180: PUSH
4181: LD_INT 4
4183: MUL
4184: PLUS
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: LIST
4190: ST_TO_ADDR
// lab := side * 10 - 4 ;
4191: LD_ADDR_VAR 0 7
4195: PUSH
4196: LD_VAR 0 2
4200: PUSH
4201: LD_INT 10
4203: MUL
4204: PUSH
4205: LD_INT 4
4207: MINUS
4208: ST_TO_ADDR
// fac := side * 10 - 3 ;
4209: LD_ADDR_VAR 0 8
4213: PUSH
4214: LD_VAR 0 2
4218: PUSH
4219: LD_INT 10
4221: MUL
4222: PUSH
4223: LD_INT 3
4225: MINUS
4226: ST_TO_ADDR
// arm := side * 10 - 2 ;
4227: LD_ADDR_VAR 0 9
4231: PUSH
4232: LD_VAR 0 2
4236: PUSH
4237: LD_INT 10
4239: MUL
4240: PUSH
4241: LD_INT 2
4243: MINUS
4244: ST_TO_ADDR
// pplant := [ side * 10 - 1 , side * 10 ] ;
4245: LD_ADDR_VAR 0 10
4249: PUSH
4250: LD_VAR 0 2
4254: PUSH
4255: LD_INT 10
4257: MUL
4258: PUSH
4259: LD_INT 1
4261: MINUS
4262: PUSH
4263: LD_VAR 0 2
4267: PUSH
4268: LD_INT 10
4270: MUL
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: ST_TO_ADDR
// depots_def := depots_def ^ [ [ [ GetX ( dep1 ) , GetY ( dep1 ) , GetDir ( dep1 ) ] , [ GetX ( dep2 ) , GetY ( dep2 ) , GetDir ( dep2 ) ] ] ] ;
4276: LD_ADDR_EXP 50
4280: PUSH
4281: LD_EXP 50
4285: PUSH
4286: LD_VAR 0 5
4290: PPUSH
4291: CALL_OW 250
4295: PUSH
4296: LD_VAR 0 5
4300: PPUSH
4301: CALL_OW 251
4305: PUSH
4306: LD_VAR 0 5
4310: PPUSH
4311: CALL_OW 254
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: LIST
4320: PUSH
4321: LD_VAR 0 3
4325: PPUSH
4326: CALL_OW 250
4330: PUSH
4331: LD_VAR 0 3
4335: PPUSH
4336: CALL_OW 251
4340: PUSH
4341: LD_VAR 0 3
4345: PPUSH
4346: CALL_OW 254
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: LIST
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: PUSH
4360: EMPTY
4361: LIST
4362: ADD
4363: ST_TO_ADDR
// start_def := start_def ^ [ [ [ ShiftX ( GetX ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) ] , [ ShiftX ( GetX ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) ] ] ] ;
4364: LD_ADDR_EXP 49
4368: PUSH
4369: LD_EXP 49
4373: PUSH
4374: LD_VAR 0 5
4378: PPUSH
4379: CALL_OW 250
4383: PPUSH
4384: LD_VAR 0 5
4388: PPUSH
4389: CALL_OW 254
4393: PUSH
4394: LD_INT 6
4396: MOD
4397: PPUSH
4398: LD_INT 6
4400: PPUSH
4401: CALL_OW 272
4405: PUSH
4406: LD_VAR 0 5
4410: PPUSH
4411: CALL_OW 251
4415: PPUSH
4416: LD_VAR 0 5
4420: PPUSH
4421: CALL_OW 254
4425: PUSH
4426: LD_INT 6
4428: MOD
4429: PPUSH
4430: LD_INT 6
4432: PPUSH
4433: CALL_OW 273
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PUSH
4442: LD_VAR 0 3
4446: PPUSH
4447: CALL_OW 250
4451: PPUSH
4452: LD_VAR 0 3
4456: PPUSH
4457: CALL_OW 254
4461: PUSH
4462: LD_INT 6
4464: MOD
4465: PPUSH
4466: LD_INT 6
4468: PPUSH
4469: CALL_OW 272
4473: PUSH
4474: LD_VAR 0 3
4478: PPUSH
4479: CALL_OW 251
4483: PPUSH
4484: LD_VAR 0 3
4488: PPUSH
4489: CALL_OW 254
4493: PUSH
4494: LD_INT 6
4496: MOD
4497: PPUSH
4498: LD_INT 6
4500: PPUSH
4501: CALL_OW 273
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: EMPTY
4515: LIST
4516: ADD
4517: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ [ GetX ( br1 [ 1 ] ) , GetY ( br1 [ 1 ] ) , GetDir ( br1 [ 1 ] ) ] , [ GetX ( br1 [ 2 ] ) , GetY ( br1 [ 2 ] ) , GetDir ( br1 [ 2 ] ) ] , [ GetX ( br1 [ 3 ] ) , GetY ( br1 [ 3 ] ) , GetDir ( br1 [ 3 ] ) ] , [ GetX ( br1 [ 4 ] ) , GetY ( br1 [ 4 ] ) , GetDir ( br1 [ 4 ] ) ] ] , [ [ GetX ( br2 [ 1 ] ) , GetY ( br2 [ 1 ] ) , GetDir ( br2 [ 1 ] ) ] , [ GetX ( br2 [ 2 ] ) , GetY ( br2 [ 2 ] ) , GetDir ( br2 [ 2 ] ) ] , [ GetX ( br2 [ 3 ] ) , GetY ( br2 [ 3 ] ) , GetDir ( br2 [ 3 ] ) ] ] ] ] ;
4518: LD_ADDR_EXP 51
4522: PUSH
4523: LD_EXP 51
4527: PUSH
4528: LD_VAR 0 6
4532: PUSH
4533: LD_INT 1
4535: ARRAY
4536: PPUSH
4537: CALL_OW 250
4541: PUSH
4542: LD_VAR 0 6
4546: PUSH
4547: LD_INT 1
4549: ARRAY
4550: PPUSH
4551: CALL_OW 251
4555: PUSH
4556: LD_VAR 0 6
4560: PUSH
4561: LD_INT 1
4563: ARRAY
4564: PPUSH
4565: CALL_OW 254
4569: PUSH
4570: EMPTY
4571: LIST
4572: LIST
4573: LIST
4574: PUSH
4575: LD_VAR 0 6
4579: PUSH
4580: LD_INT 2
4582: ARRAY
4583: PPUSH
4584: CALL_OW 250
4588: PUSH
4589: LD_VAR 0 6
4593: PUSH
4594: LD_INT 2
4596: ARRAY
4597: PPUSH
4598: CALL_OW 251
4602: PUSH
4603: LD_VAR 0 6
4607: PUSH
4608: LD_INT 2
4610: ARRAY
4611: PPUSH
4612: CALL_OW 254
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: LIST
4621: PUSH
4622: LD_VAR 0 6
4626: PUSH
4627: LD_INT 3
4629: ARRAY
4630: PPUSH
4631: CALL_OW 250
4635: PUSH
4636: LD_VAR 0 6
4640: PUSH
4641: LD_INT 3
4643: ARRAY
4644: PPUSH
4645: CALL_OW 251
4649: PUSH
4650: LD_VAR 0 6
4654: PUSH
4655: LD_INT 3
4657: ARRAY
4658: PPUSH
4659: CALL_OW 254
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: LIST
4668: PUSH
4669: LD_VAR 0 6
4673: PUSH
4674: LD_INT 4
4676: ARRAY
4677: PPUSH
4678: CALL_OW 250
4682: PUSH
4683: LD_VAR 0 6
4687: PUSH
4688: LD_INT 4
4690: ARRAY
4691: PPUSH
4692: CALL_OW 251
4696: PUSH
4697: LD_VAR 0 6
4701: PUSH
4702: LD_INT 4
4704: ARRAY
4705: PPUSH
4706: CALL_OW 254
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: LIST
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: PUSH
4722: LD_VAR 0 4
4726: PUSH
4727: LD_INT 1
4729: ARRAY
4730: PPUSH
4731: CALL_OW 250
4735: PUSH
4736: LD_VAR 0 4
4740: PUSH
4741: LD_INT 1
4743: ARRAY
4744: PPUSH
4745: CALL_OW 251
4749: PUSH
4750: LD_VAR 0 4
4754: PUSH
4755: LD_INT 1
4757: ARRAY
4758: PPUSH
4759: CALL_OW 254
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: LIST
4768: PUSH
4769: LD_VAR 0 4
4773: PUSH
4774: LD_INT 2
4776: ARRAY
4777: PPUSH
4778: CALL_OW 250
4782: PUSH
4783: LD_VAR 0 4
4787: PUSH
4788: LD_INT 2
4790: ARRAY
4791: PPUSH
4792: CALL_OW 251
4796: PUSH
4797: LD_VAR 0 4
4801: PUSH
4802: LD_INT 2
4804: ARRAY
4805: PPUSH
4806: CALL_OW 254
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: PUSH
4816: LD_VAR 0 4
4820: PUSH
4821: LD_INT 3
4823: ARRAY
4824: PPUSH
4825: CALL_OW 250
4829: PUSH
4830: LD_VAR 0 4
4834: PUSH
4835: LD_INT 3
4837: ARRAY
4838: PPUSH
4839: CALL_OW 251
4843: PUSH
4844: LD_VAR 0 4
4848: PUSH
4849: LD_INT 3
4851: ARRAY
4852: PPUSH
4853: CALL_OW 254
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: EMPTY
4873: LIST
4874: ADD
4875: ST_TO_ADDR
// labs_def := labs_def ^ [ [ [ GetX ( lab ) , GetY ( lab ) , GetDir ( lab ) ] , [ ] ] ] ;
4876: LD_ADDR_EXP 52
4880: PUSH
4881: LD_EXP 52
4885: PUSH
4886: LD_VAR 0 7
4890: PPUSH
4891: CALL_OW 250
4895: PUSH
4896: LD_VAR 0 7
4900: PPUSH
4901: CALL_OW 251
4905: PUSH
4906: LD_VAR 0 7
4910: PPUSH
4911: CALL_OW 254
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: PUSH
4921: EMPTY
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: EMPTY
4928: LIST
4929: ADD
4930: ST_TO_ADDR
// factories_def := factories_def ^ [ [ [ GetX ( fac ) , GetY ( fac ) , GetDir ( fac ) ] , [ ] ] ] ;
4931: LD_ADDR_EXP 53
4935: PUSH
4936: LD_EXP 53
4940: PUSH
4941: LD_VAR 0 8
4945: PPUSH
4946: CALL_OW 250
4950: PUSH
4951: LD_VAR 0 8
4955: PPUSH
4956: CALL_OW 251
4960: PUSH
4961: LD_VAR 0 8
4965: PPUSH
4966: CALL_OW 254
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: EMPTY
4983: LIST
4984: ADD
4985: ST_TO_ADDR
// armories_def := armories_def ^ [ [ [ GetX ( arm ) , GetY ( arm ) , GetDir ( arm ) ] , [ ] ] ] ;
4986: LD_ADDR_EXP 54
4990: PUSH
4991: LD_EXP 54
4995: PUSH
4996: LD_VAR 0 9
5000: PPUSH
5001: CALL_OW 250
5005: PUSH
5006: LD_VAR 0 9
5010: PPUSH
5011: CALL_OW 251
5015: PUSH
5016: LD_VAR 0 9
5020: PPUSH
5021: CALL_OW 254
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: LIST
5030: PUSH
5031: EMPTY
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: PUSH
5037: EMPTY
5038: LIST
5039: ADD
5040: ST_TO_ADDR
// pplants_def := pplants_def ^ [ [ [ [ GetX ( pplant [ 1 ] ) , GetY ( pplant [ 1 ] ) , GetDir ( pplant [ 1 ] ) ] , [ GetX ( pplant [ 2 ] ) , GetY ( pplant [ 2 ] ) , GetDir ( pplant [ 2 ] ) ] ] , [ ] ] ] ;
5041: LD_ADDR_EXP 55
5045: PUSH
5046: LD_EXP 55
5050: PUSH
5051: LD_VAR 0 10
5055: PUSH
5056: LD_INT 1
5058: ARRAY
5059: PPUSH
5060: CALL_OW 250
5064: PUSH
5065: LD_VAR 0 10
5069: PUSH
5070: LD_INT 1
5072: ARRAY
5073: PPUSH
5074: CALL_OW 251
5078: PUSH
5079: LD_VAR 0 10
5083: PUSH
5084: LD_INT 1
5086: ARRAY
5087: PPUSH
5088: CALL_OW 254
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: PUSH
5098: LD_VAR 0 10
5102: PUSH
5103: LD_INT 2
5105: ARRAY
5106: PPUSH
5107: CALL_OW 250
5111: PUSH
5112: LD_VAR 0 10
5116: PUSH
5117: LD_INT 2
5119: ARRAY
5120: PPUSH
5121: CALL_OW 251
5125: PUSH
5126: LD_VAR 0 10
5130: PUSH
5131: LD_INT 2
5133: ARRAY
5134: PPUSH
5135: CALL_OW 254
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: LIST
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: EMPTY
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PUSH
5155: EMPTY
5156: LIST
5157: ADD
5158: ST_TO_ADDR
// end ;
5159: GO 4028
5161: POP
5162: POP
// for un := 1 to 28 do
5163: LD_ADDR_VAR 0 11
5167: PUSH
5168: DOUBLE
5169: LD_INT 1
5171: DEC
5172: ST_TO_ADDR
5173: LD_INT 28
5175: PUSH
5176: FOR_TO
5177: IFFALSE 5190
// DestroyUnit ( un ) ;
5179: LD_VAR 0 11
5183: PPUSH
5184: CALL_OW 65
5188: GO 5176
5190: POP
5191: POP
// end ;
5192: LD_VAR 0 1
5196: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
5197: LD_INT 0
5199: PPUSH
5200: PPUSH
5201: PPUSH
5202: PPUSH
// result := [ ] ;
5203: LD_ADDR_VAR 0 7
5207: PUSH
5208: EMPTY
5209: ST_TO_ADDR
// for i := 1 to count do
5210: LD_ADDR_VAR 0 8
5214: PUSH
5215: DOUBLE
5216: LD_INT 1
5218: DEC
5219: ST_TO_ADDR
5220: LD_VAR 0 1
5224: PUSH
5225: FOR_TO
5226: IFFALSE 5644
// begin uc_direction := Rand ( 0 , 5 ) ;
5228: LD_ADDR_OWVAR 24
5232: PUSH
5233: LD_INT 0
5235: PPUSH
5236: LD_INT 5
5238: PPUSH
5239: CALL_OW 12
5243: ST_TO_ADDR
// if commander then
5244: LD_LOC 1
5248: IFFALSE 5357
// begin hc_name := mp_sides_players_names [ uc_side ] ;
5250: LD_ADDR_OWVAR 26
5254: PUSH
5255: LD_OWVAR 19
5259: PUSH
5260: LD_OWVAR 20
5264: ARRAY
5265: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
5266: LD_INT 1
5268: PPUSH
5269: LD_INT 2
5271: PPUSH
5272: CALL_OW 12
5276: PPUSH
5277: LD_VAR 0 2
5281: PPUSH
5282: LD_EXP 29
5286: PUSH
5287: LD_INT 2
5289: PLUS
5290: PPUSH
5291: CALL_OW 380
// hc_importance := 105 ;
5295: LD_ADDR_OWVAR 32
5299: PUSH
5300: LD_INT 105
5302: ST_TO_ADDR
// commander := false ;
5303: LD_ADDR_LOC 1
5307: PUSH
5308: LD_INT 0
5310: ST_TO_ADDR
// if Multiplayer then
5311: LD_OWVAR 4
5315: IFFALSE 5355
// begin hc_gallery := MULTIAVATARS ;
5317: LD_ADDR_OWVAR 33
5321: PUSH
5322: LD_STRING MULTIAVATARS
5324: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
5325: LD_ADDR_OWVAR 34
5329: PUSH
5330: LD_OWVAR 20
5334: PPUSH
5335: CALL_OW 525
5339: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
5340: LD_ADDR_OWVAR 27
5344: PUSH
5345: LD_OWVAR 20
5349: PPUSH
5350: CALL_OW 526
5354: ST_TO_ADDR
// end ; end else
5355: GO 5420
// begin hc_name :=  ;
5357: LD_ADDR_OWVAR 26
5361: PUSH
5362: LD_STRING 
5364: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
5365: LD_INT 1
5367: PPUSH
5368: LD_INT 2
5370: PPUSH
5371: CALL_OW 12
5375: PPUSH
5376: LD_VAR 0 2
5380: PPUSH
5381: LD_EXP 29
5385: PPUSH
5386: CALL_OW 380
// hc_importance := 0 ;
5390: LD_ADDR_OWVAR 32
5394: PUSH
5395: LD_INT 0
5397: ST_TO_ADDR
// if Multiplayer then
5398: LD_OWVAR 4
5402: IFFALSE 5420
// begin hc_gallery :=  ;
5404: LD_ADDR_OWVAR 33
5408: PUSH
5409: LD_STRING 
5411: ST_TO_ADDR
// hc_face_number := 0 ;
5412: LD_ADDR_OWVAR 34
5416: PUSH
5417: LD_INT 0
5419: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
5420: LD_ADDR_VAR 0 10
5424: PUSH
5425: CALL_OW 44
5429: ST_TO_ADDR
// if global_defined then
5430: LD_LOC 3
5434: IFFALSE 5574
// begin if ( cl = class_soldier ) then
5436: LD_VAR 0 2
5440: PUSH
5441: LD_INT 1
5443: EQUAL
5444: IFFALSE 5464
// j := i + soldiers_created else
5446: LD_ADDR_VAR 0 9
5450: PUSH
5451: LD_VAR 0 8
5455: PUSH
5456: LD_LOC 4
5460: PLUS
5461: ST_TO_ADDR
5462: GO 5474
// j := i ;
5464: LD_ADDR_VAR 0 9
5468: PUSH
5469: LD_VAR 0 8
5473: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
5474: LD_LOC 2
5478: PUSH
5479: LD_VAR 0 2
5483: ARRAY
5484: PUSH
5485: LD_VAR 0 9
5489: ARRAY
5490: PPUSH
5491: LD_VAR 0 10
5495: PPUSH
5496: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
5500: LD_VAR 0 10
5504: PPUSH
5505: LD_INT 2
5507: PPUSH
5508: LD_LOC 2
5512: PUSH
5513: LD_VAR 0 2
5517: ARRAY
5518: PUSH
5519: LD_VAR 0 9
5523: ARRAY
5524: PPUSH
5525: LD_INT 2
5527: PPUSH
5528: CALL_OW 260
5532: PPUSH
5533: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
5537: LD_VAR 0 10
5541: PPUSH
5542: LD_INT 1
5544: PPUSH
5545: LD_LOC 2
5549: PUSH
5550: LD_VAR 0 2
5554: ARRAY
5555: PUSH
5556: LD_VAR 0 9
5560: ARRAY
5561: PPUSH
5562: LD_INT 1
5564: PPUSH
5565: CALL_OW 260
5569: PPUSH
5570: CALL_OW 239
// end ; if building then
5574: LD_VAR 0 6
5578: IFFALSE 5596
// PlaceHumanInUnit ( un , building ) else
5580: LD_VAR 0 10
5584: PPUSH
5585: LD_VAR 0 6
5589: PPUSH
5590: CALL_OW 52
5594: GO 5623
// PlaceUnitXYR ( un , x , y , r , false ) ;
5596: LD_VAR 0 10
5600: PPUSH
5601: LD_VAR 0 3
5605: PPUSH
5606: LD_VAR 0 4
5610: PPUSH
5611: LD_VAR 0 5
5615: PPUSH
5616: LD_INT 0
5618: PPUSH
5619: CALL_OW 50
// result := result ^ [ un ] ;
5623: LD_ADDR_VAR 0 7
5627: PUSH
5628: LD_VAR 0 7
5632: PUSH
5633: LD_VAR 0 10
5637: PUSH
5638: EMPTY
5639: LIST
5640: ADD
5641: ST_TO_ADDR
// end ;
5642: GO 5225
5644: POP
5645: POP
// if not global_defined then
5646: LD_LOC 3
5650: NOT
5651: IFFALSE 5729
// if ( global_units >= cl ) then
5653: LD_LOC 2
5657: PUSH
5658: LD_VAR 0 2
5662: GREATEREQUAL
5663: IFFALSE 5704
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
5665: LD_ADDR_LOC 2
5669: PUSH
5670: LD_LOC 2
5674: PPUSH
5675: LD_VAR 0 2
5679: PPUSH
5680: LD_LOC 2
5684: PUSH
5685: LD_VAR 0 2
5689: ARRAY
5690: PUSH
5691: LD_VAR 0 7
5695: ADD
5696: PPUSH
5697: CALL_OW 1
5701: ST_TO_ADDR
5702: GO 5729
// global_units := Replace ( global_units , cl , result ) ;
5704: LD_ADDR_LOC 2
5708: PUSH
5709: LD_LOC 2
5713: PPUSH
5714: LD_VAR 0 2
5718: PPUSH
5719: LD_VAR 0 7
5723: PPUSH
5724: CALL_OW 1
5728: ST_TO_ADDR
// if commander then
5729: LD_LOC 1
5733: IFFALSE 5780
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
5735: LD_ADDR_EXP 57
5739: PUSH
5740: LD_EXP 57
5744: PPUSH
5745: LD_OWVAR 20
5749: PPUSH
5750: LD_EXP 57
5754: PUSH
5755: LD_OWVAR 20
5759: ARRAY
5760: PUSH
5761: LD_VAR 0 10
5765: ADD
5766: PPUSH
5767: CALL_OW 1
5771: ST_TO_ADDR
// commander := false ;
5772: LD_ADDR_LOC 1
5776: PUSH
5777: LD_INT 0
5779: ST_TO_ADDR
// end ; end ;
5780: LD_VAR 0 7
5784: RET
// function prepare_side_base ( side , base ) ; var pos , x , y , dir , i , r , un , br , dep , lab , fact , arm , mode , coord , max ; begin
5785: LD_INT 0
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
5792: PPUSH
5793: PPUSH
5794: PPUSH
5795: PPUSH
5796: PPUSH
5797: PPUSH
5798: PPUSH
5799: PPUSH
5800: PPUSH
5801: PPUSH
5802: PPUSH
// pos := Side_Positions [ side ] ;
5803: LD_ADDR_VAR 0 4
5807: PUSH
5808: LD_EXP 43
5812: PUSH
5813: LD_VAR 0 1
5817: ARRAY
5818: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
5819: LD_ADDR_OWVAR 21
5823: PUSH
5824: LD_EXP 44
5828: PUSH
5829: LD_VAR 0 1
5833: ARRAY
5834: ST_TO_ADDR
// uc_side := side ;
5835: LD_ADDR_OWVAR 20
5839: PUSH
5840: LD_VAR 0 1
5844: ST_TO_ADDR
// x := depots_def [ pos ] [ base ] [ 1 ] ;
5845: LD_ADDR_VAR 0 5
5849: PUSH
5850: LD_EXP 50
5854: PUSH
5855: LD_VAR 0 4
5859: ARRAY
5860: PUSH
5861: LD_VAR 0 2
5865: ARRAY
5866: PUSH
5867: LD_INT 1
5869: ARRAY
5870: ST_TO_ADDR
// y := depots_def [ pos ] [ base ] [ 2 ] ;
5871: LD_ADDR_VAR 0 6
5875: PUSH
5876: LD_EXP 50
5880: PUSH
5881: LD_VAR 0 4
5885: ARRAY
5886: PUSH
5887: LD_VAR 0 2
5891: ARRAY
5892: PUSH
5893: LD_INT 2
5895: ARRAY
5896: ST_TO_ADDR
// dir := depots_def [ pos ] [ base ] [ 3 ] ;
5897: LD_ADDR_VAR 0 7
5901: PUSH
5902: LD_EXP 50
5906: PUSH
5907: LD_VAR 0 4
5911: ARRAY
5912: PUSH
5913: LD_VAR 0 2
5917: ARRAY
5918: PUSH
5919: LD_INT 3
5921: ARRAY
5922: ST_TO_ADDR
// if is_depot [ base ] then
5923: LD_EXP 20
5927: PUSH
5928: LD_VAR 0 2
5932: ARRAY
5933: IFFALSE 6110
// begin if is_depot [ base ] = 1 then
5935: LD_EXP 20
5939: PUSH
5940: LD_VAR 0 2
5944: ARRAY
5945: PUSH
5946: LD_INT 1
5948: EQUAL
5949: IFFALSE 5961
// bc_type = b_depot else
5951: LD_ADDR_OWVAR 42
5955: PUSH
5956: LD_INT 0
5958: ST_TO_ADDR
5959: GO 5969
// bc_type = b_warehouse ;
5961: LD_ADDR_OWVAR 42
5965: PUSH
5966: LD_INT 1
5968: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
5969: LD_ADDR_VAR 0 12
5973: PUSH
5974: LD_VAR 0 5
5978: PPUSH
5979: LD_VAR 0 6
5983: PPUSH
5984: LD_VAR 0 7
5988: PPUSH
5989: CALL_OW 47
5993: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
5994: LD_VAR 0 12
5998: PPUSH
5999: LD_STRING @
6001: PUSH
6002: LD_VAR 0 1
6006: STR
6007: PPUSH
6008: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ base ] [ mat_cans ] ) ;
6012: LD_VAR 0 12
6016: PPUSH
6017: CALL_OW 274
6021: PPUSH
6022: LD_INT 1
6024: PPUSH
6025: LD_EXP 31
6029: PUSH
6030: LD_VAR 0 2
6034: ARRAY
6035: PUSH
6036: LD_INT 1
6038: ARRAY
6039: PPUSH
6040: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ base ] [ mat_oil ] ) ;
6044: LD_VAR 0 12
6048: PPUSH
6049: CALL_OW 274
6053: PPUSH
6054: LD_INT 2
6056: PPUSH
6057: LD_EXP 31
6061: PUSH
6062: LD_VAR 0 2
6066: ARRAY
6067: PUSH
6068: LD_INT 2
6070: ARRAY
6071: PPUSH
6072: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ base ] [ mat_siberit ] ) ;
6076: LD_VAR 0 12
6080: PPUSH
6081: CALL_OW 274
6085: PPUSH
6086: LD_INT 3
6088: PPUSH
6089: LD_EXP 31
6093: PUSH
6094: LD_VAR 0 2
6098: ARRAY
6099: PUSH
6100: LD_INT 3
6102: ARRAY
6103: PPUSH
6104: CALL_OW 277
// end else
6108: GO 6260
// begin for i := 1 to 3 do
6110: LD_ADDR_VAR 0 8
6114: PUSH
6115: DOUBLE
6116: LD_INT 1
6118: DEC
6119: ST_TO_ADDR
6120: LD_INT 3
6122: PUSH
6123: FOR_TO
6124: IFFALSE 6258
// begin r := starting_resources [ base ] [ i ] ;
6126: LD_ADDR_VAR 0 9
6130: PUSH
6131: LD_EXP 31
6135: PUSH
6136: LD_VAR 0 2
6140: ARRAY
6141: PUSH
6142: LD_VAR 0 8
6146: ARRAY
6147: ST_TO_ADDR
// while r >= 10 do
6148: LD_VAR 0 9
6152: PUSH
6153: LD_INT 10
6155: GREATEREQUAL
6156: IFFALSE 6256
// if r > 50 then
6158: LD_VAR 0 9
6162: PUSH
6163: LD_INT 50
6165: GREATER
6166: IFFALSE 6212
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
6168: LD_VAR 0 8
6172: PPUSH
6173: LD_INT 5
6175: PPUSH
6176: LD_VAR 0 5
6180: PPUSH
6181: LD_VAR 0 6
6185: PPUSH
6186: LD_INT 4
6188: PPUSH
6189: LD_INT 0
6191: PPUSH
6192: CALL_OW 60
// r := r - 50 ;
6196: LD_ADDR_VAR 0 9
6200: PUSH
6201: LD_VAR 0 9
6205: PUSH
6206: LD_INT 50
6208: MINUS
6209: ST_TO_ADDR
// end else
6210: GO 6254
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
6212: LD_VAR 0 8
6216: PPUSH
6217: LD_VAR 0 9
6221: PUSH
6222: LD_INT 10
6224: DIV
6225: PPUSH
6226: LD_VAR 0 5
6230: PPUSH
6231: LD_VAR 0 6
6235: PPUSH
6236: LD_INT 4
6238: PPUSH
6239: LD_INT 0
6241: PPUSH
6242: CALL_OW 60
// r := 0 ;
6246: LD_ADDR_VAR 0 9
6250: PUSH
6251: LD_INT 0
6253: ST_TO_ADDR
// end ;
6254: GO 6148
// end ;
6256: GO 6123
6258: POP
6259: POP
// end ; if is_lab [ base ] then
6260: LD_EXP 24
6264: PUSH
6265: LD_VAR 0 2
6269: ARRAY
6270: IFFALSE 6411
// begin if is_lab [ base ] = 1 then
6272: LD_EXP 24
6276: PUSH
6277: LD_VAR 0 2
6281: ARRAY
6282: PUSH
6283: LD_INT 1
6285: EQUAL
6286: IFFALSE 6314
// begin bc_type = b_lab ;
6288: LD_ADDR_OWVAR 42
6292: PUSH
6293: LD_INT 6
6295: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
6296: LD_ADDR_OWVAR 44
6300: PUSH
6301: LD_INT 9
6303: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
6304: LD_ADDR_OWVAR 45
6308: PUSH
6309: LD_INT 9
6311: ST_TO_ADDR
// end else
6312: GO 6338
// begin bc_type = b_lab_full ;
6314: LD_ADDR_OWVAR 42
6318: PUSH
6319: LD_INT 8
6321: ST_TO_ADDR
// bc_kind1 = b_lab_siberium ;
6322: LD_ADDR_OWVAR 44
6326: PUSH
6327: LD_INT 11
6329: ST_TO_ADDR
// bc_kind2 = b_lab_weapon ;
6330: LD_ADDR_OWVAR 45
6334: PUSH
6335: LD_INT 10
6337: ST_TO_ADDR
// end ; lab := CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ base ] [ 1 ] , labs_def [ pos ] [ base ] [ 2 ] , labs_def [ pos ] [ base ] [ 3 ] ) ;
6338: LD_ADDR_VAR 0 13
6342: PUSH
6343: LD_EXP 52
6347: PUSH
6348: LD_VAR 0 4
6352: ARRAY
6353: PUSH
6354: LD_VAR 0 2
6358: ARRAY
6359: PUSH
6360: LD_INT 1
6362: ARRAY
6363: PPUSH
6364: LD_EXP 52
6368: PUSH
6369: LD_VAR 0 4
6373: ARRAY
6374: PUSH
6375: LD_VAR 0 2
6379: ARRAY
6380: PUSH
6381: LD_INT 2
6383: ARRAY
6384: PPUSH
6385: LD_EXP 52
6389: PUSH
6390: LD_VAR 0 4
6394: ARRAY
6395: PUSH
6396: LD_VAR 0 2
6400: ARRAY
6401: PUSH
6402: LD_INT 3
6404: ARRAY
6405: PPUSH
6406: CALL_OW 47
6410: ST_TO_ADDR
// end ; if is_fact [ base ] then
6411: LD_EXP 25
6415: PUSH
6416: LD_VAR 0 2
6420: ARRAY
6421: IFFALSE 6530
// begin if is_fact [ base ] = 1 then
6423: LD_EXP 25
6427: PUSH
6428: LD_VAR 0 2
6432: ARRAY
6433: PUSH
6434: LD_INT 1
6436: EQUAL
6437: IFFALSE 6449
// bc_type = b_workshop else
6439: LD_ADDR_OWVAR 42
6443: PUSH
6444: LD_INT 2
6446: ST_TO_ADDR
6447: GO 6457
// bc_type = b_factory ;
6449: LD_ADDR_OWVAR 42
6453: PUSH
6454: LD_INT 3
6456: ST_TO_ADDR
// fact := CreateAndPlaceBuildingXYD ( factories_def [ pos ] [ base ] [ 1 ] , factories_def [ pos ] [ base ] [ 2 ] , factories_def [ pos ] [ base ] [ 3 ] ) ;
6457: LD_ADDR_VAR 0 14
6461: PUSH
6462: LD_EXP 53
6466: PUSH
6467: LD_VAR 0 4
6471: ARRAY
6472: PUSH
6473: LD_VAR 0 2
6477: ARRAY
6478: PUSH
6479: LD_INT 1
6481: ARRAY
6482: PPUSH
6483: LD_EXP 53
6487: PUSH
6488: LD_VAR 0 4
6492: ARRAY
6493: PUSH
6494: LD_VAR 0 2
6498: ARRAY
6499: PUSH
6500: LD_INT 2
6502: ARRAY
6503: PPUSH
6504: LD_EXP 53
6508: PUSH
6509: LD_VAR 0 4
6513: ARRAY
6514: PUSH
6515: LD_VAR 0 2
6519: ARRAY
6520: PUSH
6521: LD_INT 3
6523: ARRAY
6524: PPUSH
6525: CALL_OW 47
6529: ST_TO_ADDR
// end ; if is_arm [ base ] then
6530: LD_EXP 26
6534: PUSH
6535: LD_VAR 0 2
6539: ARRAY
6540: IFFALSE 6649
// begin if is_arm [ base ] = 1 then
6542: LD_EXP 26
6546: PUSH
6547: LD_VAR 0 2
6551: ARRAY
6552: PUSH
6553: LD_INT 1
6555: EQUAL
6556: IFFALSE 6568
// bc_type = b_armoury else
6558: LD_ADDR_OWVAR 42
6562: PUSH
6563: LD_INT 4
6565: ST_TO_ADDR
6566: GO 6576
// bc_type = b_barracks ;
6568: LD_ADDR_OWVAR 42
6572: PUSH
6573: LD_INT 5
6575: ST_TO_ADDR
// arm := CreateAndPlaceBuildingXYD ( armories_def [ pos ] [ base ] [ 1 ] , armories_def [ pos ] [ base ] [ 2 ] , armories_def [ pos ] [ base ] [ 3 ] ) ;
6576: LD_ADDR_VAR 0 15
6580: PUSH
6581: LD_EXP 54
6585: PUSH
6586: LD_VAR 0 4
6590: ARRAY
6591: PUSH
6592: LD_VAR 0 2
6596: ARRAY
6597: PUSH
6598: LD_INT 1
6600: ARRAY
6601: PPUSH
6602: LD_EXP 54
6606: PUSH
6607: LD_VAR 0 4
6611: ARRAY
6612: PUSH
6613: LD_VAR 0 2
6617: ARRAY
6618: PUSH
6619: LD_INT 2
6621: ARRAY
6622: PPUSH
6623: LD_EXP 54
6627: PUSH
6628: LD_VAR 0 4
6632: ARRAY
6633: PUSH
6634: LD_VAR 0 2
6638: ARRAY
6639: PUSH
6640: LD_INT 3
6642: ARRAY
6643: PPUSH
6644: CALL_OW 47
6648: ST_TO_ADDR
// end ; for i := 1 to number_of_pplants [ base ] do
6649: LD_ADDR_VAR 0 8
6653: PUSH
6654: DOUBLE
6655: LD_INT 1
6657: DEC
6658: ST_TO_ADDR
6659: LD_EXP 22
6663: PUSH
6664: LD_VAR 0 2
6668: ARRAY
6669: PUSH
6670: FOR_TO
6671: IFFALSE 6768
// begin bc_type = b_oil_power ;
6673: LD_ADDR_OWVAR 42
6677: PUSH
6678: LD_INT 26
6680: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( pplants_def [ pos ] [ base ] [ i ] [ 1 ] , pplants_def [ pos ] [ base ] [ i ] [ 2 ] , pplants_def [ pos ] [ base ] [ i ] [ 3 ] ) ;
6681: LD_EXP 55
6685: PUSH
6686: LD_VAR 0 4
6690: ARRAY
6691: PUSH
6692: LD_VAR 0 2
6696: ARRAY
6697: PUSH
6698: LD_VAR 0 8
6702: ARRAY
6703: PUSH
6704: LD_INT 1
6706: ARRAY
6707: PPUSH
6708: LD_EXP 55
6712: PUSH
6713: LD_VAR 0 4
6717: ARRAY
6718: PUSH
6719: LD_VAR 0 2
6723: ARRAY
6724: PUSH
6725: LD_VAR 0 8
6729: ARRAY
6730: PUSH
6731: LD_INT 2
6733: ARRAY
6734: PPUSH
6735: LD_EXP 55
6739: PUSH
6740: LD_VAR 0 4
6744: ARRAY
6745: PUSH
6746: LD_VAR 0 2
6750: ARRAY
6751: PUSH
6752: LD_VAR 0 8
6756: ARRAY
6757: PUSH
6758: LD_INT 3
6760: ARRAY
6761: PPUSH
6762: CALL_OW 47
// end ;
6766: GO 6670
6768: POP
6769: POP
// for i := 1 to deposits [ base ] [ 1 ] do
6770: LD_ADDR_VAR 0 8
6774: PUSH
6775: DOUBLE
6776: LD_INT 1
6778: DEC
6779: ST_TO_ADDR
6780: LD_EXP 28
6784: PUSH
6785: LD_VAR 0 2
6789: ARRAY
6790: PUSH
6791: LD_INT 1
6793: ARRAY
6794: PUSH
6795: FOR_TO
6796: IFFALSE 6933
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i ] , false ) ;
6798: LD_ADDR_VAR 0 17
6802: PUSH
6803: LD_EXP 56
6807: PUSH
6808: LD_VAR 0 4
6812: ARRAY
6813: PUSH
6814: LD_VAR 0 2
6818: ARRAY
6819: PUSH
6820: LD_VAR 0 8
6824: ARRAY
6825: PPUSH
6826: LD_INT 0
6828: PPUSH
6829: CALL_OW 16
6833: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_oil ) ;
6834: LD_VAR 0 17
6838: PUSH
6839: LD_INT 1
6841: ARRAY
6842: PPUSH
6843: LD_VAR 0 17
6847: PUSH
6848: LD_INT 2
6850: ARRAY
6851: PPUSH
6852: LD_INT 2
6854: PPUSH
6855: CALL_OW 62
// if are_mines [ base ] then
6859: LD_EXP 23
6863: PUSH
6864: LD_VAR 0 2
6868: ARRAY
6869: IFFALSE 6931
// begin bc_type = b_oil_mine ;
6871: LD_ADDR_OWVAR 42
6875: PUSH
6876: LD_INT 29
6878: ST_TO_ADDR
// SetResourceVisibility ( coord [ 1 ] , coord [ 2 ] , uc_side ) ;
6879: LD_VAR 0 17
6883: PUSH
6884: LD_INT 1
6886: ARRAY
6887: PPUSH
6888: LD_VAR 0 17
6892: PUSH
6893: LD_INT 2
6895: ARRAY
6896: PPUSH
6897: LD_OWVAR 20
6901: PPUSH
6902: CALL_OW 441
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
6906: LD_VAR 0 17
6910: PUSH
6911: LD_INT 1
6913: ARRAY
6914: PPUSH
6915: LD_VAR 0 17
6919: PUSH
6920: LD_INT 2
6922: ARRAY
6923: PPUSH
6924: LD_INT 0
6926: PPUSH
6927: CALL_OW 47
// end ; end ;
6931: GO 6795
6933: POP
6934: POP
// for i := 1 to deposits [ base ] [ 2 ] do
6935: LD_ADDR_VAR 0 8
6939: PUSH
6940: DOUBLE
6941: LD_INT 1
6943: DEC
6944: ST_TO_ADDR
6945: LD_EXP 28
6949: PUSH
6950: LD_VAR 0 2
6954: ARRAY
6955: PUSH
6956: LD_INT 2
6958: ARRAY
6959: PUSH
6960: FOR_TO
6961: IFFALSE 7120
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i + deposits [ base ] [ 1 ] ] , false ) ;
6963: LD_ADDR_VAR 0 17
6967: PUSH
6968: LD_EXP 56
6972: PUSH
6973: LD_VAR 0 4
6977: ARRAY
6978: PUSH
6979: LD_VAR 0 2
6983: ARRAY
6984: PUSH
6985: LD_VAR 0 8
6989: PUSH
6990: LD_EXP 28
6994: PUSH
6995: LD_VAR 0 2
6999: ARRAY
7000: PUSH
7001: LD_INT 1
7003: ARRAY
7004: PLUS
7005: ARRAY
7006: PPUSH
7007: LD_INT 0
7009: PPUSH
7010: CALL_OW 16
7014: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_siberit ) ;
7015: LD_VAR 0 17
7019: PUSH
7020: LD_INT 1
7022: ARRAY
7023: PPUSH
7024: LD_VAR 0 17
7028: PUSH
7029: LD_INT 2
7031: ARRAY
7032: PPUSH
7033: LD_INT 3
7035: PPUSH
7036: CALL_OW 62
// if are_mines [ base ] and def_siberite_detection then
7040: LD_EXP 23
7044: PUSH
7045: LD_VAR 0 2
7049: ARRAY
7050: PUSH
7051: LD_EXP 8
7055: AND
7056: IFFALSE 7118
// begin bc_type = b_siberite_mine ;
7058: LD_ADDR_OWVAR 42
7062: PUSH
7063: LD_INT 30
7065: ST_TO_ADDR
// SetResourceVisibility ( coord [ 1 ] , coord [ 2 ] , uc_side ) ;
7066: LD_VAR 0 17
7070: PUSH
7071: LD_INT 1
7073: ARRAY
7074: PPUSH
7075: LD_VAR 0 17
7079: PUSH
7080: LD_INT 2
7082: ARRAY
7083: PPUSH
7084: LD_OWVAR 20
7088: PPUSH
7089: CALL_OW 441
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
7093: LD_VAR 0 17
7097: PUSH
7098: LD_INT 1
7100: ARRAY
7101: PPUSH
7102: LD_VAR 0 17
7106: PUSH
7107: LD_INT 2
7109: ARRAY
7110: PPUSH
7111: LD_INT 0
7113: PPUSH
7114: CALL_OW 47
// end ; end ;
7118: GO 6960
7120: POP
7121: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
7122: LD_ADDR_VAR 0 5
7126: PUSH
7127: LD_EXP 49
7131: PUSH
7132: LD_VAR 0 4
7136: ARRAY
7137: PUSH
7138: LD_VAR 0 2
7142: ARRAY
7143: PUSH
7144: LD_INT 1
7146: ARRAY
7147: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
7148: LD_ADDR_VAR 0 6
7152: PUSH
7153: LD_EXP 49
7157: PUSH
7158: LD_VAR 0 4
7162: ARRAY
7163: PUSH
7164: LD_VAR 0 2
7168: ARRAY
7169: PUSH
7170: LD_INT 2
7172: ARRAY
7173: ST_TO_ADDR
// if base = 1 then
7174: LD_VAR 0 2
7178: PUSH
7179: LD_INT 1
7181: EQUAL
7182: IFFALSE 7290
// if def_morale_flags then
7184: LD_EXP 14
7188: IFFALSE 7290
// SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , def_bf_params [ 1 ] ] , [ bfo_defend_bonus_vehicle , def_bf_params [ 2 ] ] , [ bfo_defend_bonus_building , def_bf_params [ 3 ] ] , [ bfo_range , 17 ] , [ bfo_height , def_bf_params [ 4 ] ] ] ) ;
7190: LD_VAR 0 1
7194: PPUSH
7195: LD_VAR 0 5
7199: PPUSH
7200: LD_VAR 0 6
7204: PPUSH
7205: LD_INT 1
7207: PUSH
7208: LD_EXP 36
7212: PUSH
7213: LD_INT 1
7215: ARRAY
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 2
7223: PUSH
7224: LD_EXP 36
7228: PUSH
7229: LD_INT 2
7231: ARRAY
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 3
7239: PUSH
7240: LD_EXP 36
7244: PUSH
7245: LD_INT 3
7247: ARRAY
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 10
7255: PUSH
7256: LD_INT 17
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 20
7265: PUSH
7266: LD_EXP 36
7270: PUSH
7271: LD_INT 4
7273: ARRAY
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: PPUSH
7286: CALL_OW 418
// if number_of_people [ base ] then
7290: LD_EXP 21
7294: PUSH
7295: LD_VAR 0 2
7299: ARRAY
7300: IFFALSE 7509
// begin if No_Mechs then
7302: LD_EXP 68
7306: IFFALSE 7318
// Mode := 2 else
7308: LD_ADDR_VAR 0 16
7312: PUSH
7313: LD_INT 2
7315: ST_TO_ADDR
7316: GO 7326
// Mode := 1 ;
7318: LD_ADDR_VAR 0 16
7322: PUSH
7323: LD_INT 1
7325: ST_TO_ADDR
// neng := number_of_people [ base ] ;
7326: LD_ADDR_LOC 5
7330: PUSH
7331: LD_EXP 21
7335: PUSH
7336: LD_VAR 0 2
7340: ARRAY
7341: ST_TO_ADDR
// nmech := neng div [ 4 , 3 ] [ Mode ] ;
7342: LD_ADDR_LOC 7
7346: PUSH
7347: LD_LOC 5
7351: PUSH
7352: LD_INT 4
7354: PUSH
7355: LD_INT 3
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: LD_VAR 0 16
7366: ARRAY
7367: DIV
7368: ST_TO_ADDR
// neng := neng - nmech ;
7369: LD_ADDR_LOC 5
7373: PUSH
7374: LD_LOC 5
7378: PUSH
7379: LD_LOC 7
7383: MINUS
7384: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
7385: LD_ADDR_LOC 6
7389: PUSH
7390: LD_LOC 5
7394: PUSH
7395: LD_INT 3
7397: PUSH
7398: LD_INT 2
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PUSH
7405: LD_VAR 0 16
7409: ARRAY
7410: DIV
7411: ST_TO_ADDR
// if ( nsci < 1 ) then
7412: LD_LOC 6
7416: PUSH
7417: LD_INT 1
7419: LESS
7420: IFFALSE 7430
// nsci := 1 ;
7422: LD_ADDR_LOC 6
7426: PUSH
7427: LD_INT 1
7429: ST_TO_ADDR
// neng := neng - nsci ;
7430: LD_ADDR_LOC 5
7434: PUSH
7435: LD_LOC 5
7439: PUSH
7440: LD_LOC 6
7444: MINUS
7445: ST_TO_ADDR
// nsol := [ neng div 2 , 0 ] [ Mode ] ;
7446: LD_ADDR_LOC 8
7450: PUSH
7451: LD_LOC 5
7455: PUSH
7456: LD_INT 2
7458: DIV
7459: PUSH
7460: LD_INT 0
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: PUSH
7467: LD_VAR 0 16
7471: ARRAY
7472: ST_TO_ADDR
// neng := neng - nsol ;
7473: LD_ADDR_LOC 5
7477: PUSH
7478: LD_LOC 5
7482: PUSH
7483: LD_LOC 8
7487: MINUS
7488: ST_TO_ADDR
// if ( neng < 1 ) then
7489: LD_LOC 5
7493: PUSH
7494: LD_INT 1
7496: LESS
7497: IFFALSE 7507
// neng := 1 ;
7499: LD_ADDR_LOC 5
7503: PUSH
7504: LD_INT 1
7506: ST_TO_ADDR
// end else
7507: GO 7541
// begin neng := 0 ;
7509: LD_ADDR_LOC 5
7513: PUSH
7514: LD_INT 0
7516: ST_TO_ADDR
// nsci := 0 ;
7517: LD_ADDR_LOC 6
7521: PUSH
7522: LD_INT 0
7524: ST_TO_ADDR
// nmech := 0 ;
7525: LD_ADDR_LOC 7
7529: PUSH
7530: LD_INT 0
7532: ST_TO_ADDR
// nsol := 0 ;
7533: LD_ADDR_LOC 8
7537: PUSH
7538: LD_INT 0
7540: ST_TO_ADDR
// end ; commander := true ;
7541: LD_ADDR_LOC 1
7545: PUSH
7546: LD_INT 1
7548: ST_TO_ADDR
// soldiers_created := 0 ;
7549: LD_ADDR_LOC 4
7553: PUSH
7554: LD_INT 0
7556: ST_TO_ADDR
// for i := 1 to are_breastworks [ base ] do
7557: LD_ADDR_VAR 0 8
7561: PUSH
7562: DOUBLE
7563: LD_INT 1
7565: DEC
7566: ST_TO_ADDR
7567: LD_EXP 27
7571: PUSH
7572: LD_VAR 0 2
7576: ARRAY
7577: PUSH
7578: FOR_TO
7579: IFFALSE 7865
// begin if are_breastworks [ base ] [ i ] = 1 then
7581: LD_EXP 27
7585: PUSH
7586: LD_VAR 0 2
7590: ARRAY
7591: PUSH
7592: LD_VAR 0 8
7596: ARRAY
7597: PUSH
7598: LD_INT 1
7600: EQUAL
7601: IFFALSE 7613
// bc_type := b_breastwork else
7603: LD_ADDR_OWVAR 42
7607: PUSH
7608: LD_INT 31
7610: ST_TO_ADDR
7611: GO 7621
// bc_type := b_bunker ;
7613: LD_ADDR_OWVAR 42
7617: PUSH
7618: LD_INT 32
7620: ST_TO_ADDR
// x := breastworks_def [ pos ] [ base ] [ i ] [ 1 ] ;
7621: LD_ADDR_VAR 0 5
7625: PUSH
7626: LD_EXP 51
7630: PUSH
7631: LD_VAR 0 4
7635: ARRAY
7636: PUSH
7637: LD_VAR 0 2
7641: ARRAY
7642: PUSH
7643: LD_VAR 0 8
7647: ARRAY
7648: PUSH
7649: LD_INT 1
7651: ARRAY
7652: ST_TO_ADDR
// y := breastworks_def [ pos ] [ base ] [ i ] [ 2 ] ;
7653: LD_ADDR_VAR 0 6
7657: PUSH
7658: LD_EXP 51
7662: PUSH
7663: LD_VAR 0 4
7667: ARRAY
7668: PUSH
7669: LD_VAR 0 2
7673: ARRAY
7674: PUSH
7675: LD_VAR 0 8
7679: ARRAY
7680: PUSH
7681: LD_INT 2
7683: ARRAY
7684: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ base ] [ i ] [ 3 ] ;
7685: LD_ADDR_VAR 0 7
7689: PUSH
7690: LD_EXP 51
7694: PUSH
7695: LD_VAR 0 4
7699: ARRAY
7700: PUSH
7701: LD_VAR 0 2
7705: ARRAY
7706: PUSH
7707: LD_VAR 0 8
7711: ARRAY
7712: PUSH
7713: LD_INT 3
7715: ARRAY
7716: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
7717: LD_ADDR_VAR 0 11
7721: PUSH
7722: LD_VAR 0 5
7726: PPUSH
7727: LD_VAR 0 6
7731: PPUSH
7732: LD_VAR 0 7
7736: PPUSH
7737: CALL_OW 47
7741: ST_TO_ADDR
// if bc_type = b_bunker then
7742: LD_OWVAR 42
7746: PUSH
7747: LD_INT 32
7749: EQUAL
7750: IFFALSE 7827
// case uc_nation of nation_american :
7752: LD_OWVAR 21
7756: PUSH
7757: LD_INT 1
7759: DOUBLE
7760: EQUAL
7761: IFTRUE 7765
7763: GO 7780
7765: POP
// PlaceWeaponTurret ( br , us_machine_gun ) ; nation_arabian :
7766: LD_VAR 0 11
7770: PPUSH
7771: LD_INT 2
7773: PPUSH
7774: CALL_OW 431
7778: GO 7827
7780: LD_INT 2
7782: DOUBLE
7783: EQUAL
7784: IFTRUE 7788
7786: GO 7803
7788: POP
// PlaceWeaponTurret ( br , ar_double_machine_gun ) ; nation_russian :
7789: LD_VAR 0 11
7793: PPUSH
7794: LD_INT 24
7796: PPUSH
7797: CALL_OW 431
7801: GO 7827
7803: LD_INT 3
7805: DOUBLE
7806: EQUAL
7807: IFTRUE 7811
7809: GO 7826
7811: POP
// PlaceWeaponTurret ( br , ru_heavy_machine_gun ) ; end ;
7812: LD_VAR 0 11
7816: PPUSH
7817: LD_INT 42
7819: PPUSH
7820: CALL_OW 431
7824: GO 7827
7826: POP
// if i <= nsol then
7827: LD_VAR 0 8
7831: PUSH
7832: LD_LOC 8
7836: LESSEQUAL
7837: IFFALSE 7863
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
7839: LD_INT 1
7841: PPUSH
7842: LD_INT 1
7844: PPUSH
7845: LD_INT 0
7847: PPUSH
7848: LD_INT 0
7850: PPUSH
7851: LD_INT 0
7853: PPUSH
7854: LD_VAR 0 11
7858: PPUSH
7859: CALL 5197 0 6
// end ;
7863: GO 7578
7865: POP
7866: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
7867: LD_ADDR_VAR 0 5
7871: PUSH
7872: LD_EXP 49
7876: PUSH
7877: LD_VAR 0 4
7881: ARRAY
7882: PUSH
7883: LD_VAR 0 2
7887: ARRAY
7888: PUSH
7889: LD_INT 1
7891: ARRAY
7892: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
7893: LD_ADDR_VAR 0 6
7897: PUSH
7898: LD_EXP 49
7902: PUSH
7903: LD_VAR 0 4
7907: ARRAY
7908: PUSH
7909: LD_VAR 0 2
7913: ARRAY
7914: PUSH
7915: LD_INT 2
7917: ARRAY
7918: ST_TO_ADDR
// if nsol > are_breastworks [ base ] then
7919: LD_LOC 8
7923: PUSH
7924: LD_EXP 27
7928: PUSH
7929: LD_VAR 0 2
7933: ARRAY
7934: GREATER
7935: IFFALSE 8023
// if arm then
7937: LD_VAR 0 15
7941: IFFALSE 7983
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , 0 , 0 , 0 , arm ) else
7943: LD_LOC 8
7947: PUSH
7948: LD_EXP 27
7952: PUSH
7953: LD_VAR 0 2
7957: ARRAY
7958: MINUS
7959: PPUSH
7960: LD_INT 1
7962: PPUSH
7963: LD_INT 0
7965: PPUSH
7966: LD_INT 0
7968: PPUSH
7969: LD_INT 0
7971: PPUSH
7972: LD_VAR 0 15
7976: PPUSH
7977: CALL 5197 0 6
7981: GO 8023
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , x , y , 5 , 0 ) ;
7983: LD_LOC 8
7987: PUSH
7988: LD_EXP 27
7992: PUSH
7993: LD_VAR 0 2
7997: ARRAY
7998: MINUS
7999: PPUSH
8000: LD_INT 1
8002: PPUSH
8003: LD_VAR 0 5
8007: PPUSH
8008: LD_VAR 0 6
8012: PPUSH
8013: LD_INT 5
8015: PPUSH
8016: LD_INT 0
8018: PPUSH
8019: CALL 5197 0 6
// if dep then
8023: LD_VAR 0 12
8027: IFFALSE 8057
// prepare_people ( neng , class_engineer , 0 , 0 , 0 , dep ) else
8029: LD_LOC 5
8033: PPUSH
8034: LD_INT 2
8036: PPUSH
8037: LD_INT 0
8039: PPUSH
8040: LD_INT 0
8042: PPUSH
8043: LD_INT 0
8045: PPUSH
8046: LD_VAR 0 12
8050: PPUSH
8051: CALL 5197 0 6
8055: GO 8085
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
8057: LD_LOC 5
8061: PPUSH
8062: LD_INT 2
8064: PPUSH
8065: LD_VAR 0 5
8069: PPUSH
8070: LD_VAR 0 6
8074: PPUSH
8075: LD_INT 5
8077: PPUSH
8078: LD_INT 0
8080: PPUSH
8081: CALL 5197 0 6
// if fact then
8085: LD_VAR 0 14
8089: IFFALSE 8119
// prepare_people ( nmech , class_mechanic , 0 , 0 , 0 , fact ) else
8091: LD_LOC 7
8095: PPUSH
8096: LD_INT 3
8098: PPUSH
8099: LD_INT 0
8101: PPUSH
8102: LD_INT 0
8104: PPUSH
8105: LD_INT 0
8107: PPUSH
8108: LD_VAR 0 14
8112: PPUSH
8113: CALL 5197 0 6
8117: GO 8147
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
8119: LD_LOC 7
8123: PPUSH
8124: LD_INT 3
8126: PPUSH
8127: LD_VAR 0 5
8131: PPUSH
8132: LD_VAR 0 6
8136: PPUSH
8137: LD_INT 5
8139: PPUSH
8140: LD_INT 0
8142: PPUSH
8143: CALL 5197 0 6
// if lab then
8147: LD_VAR 0 13
8151: IFFALSE 8181
// prepare_people ( nsci , class_scientistic , 0 , 0 , 0 , lab ) else
8153: LD_LOC 6
8157: PPUSH
8158: LD_INT 4
8160: PPUSH
8161: LD_INT 0
8163: PPUSH
8164: LD_INT 0
8166: PPUSH
8167: LD_INT 0
8169: PPUSH
8170: LD_VAR 0 13
8174: PPUSH
8175: CALL 5197 0 6
8179: GO 8209
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
8181: LD_LOC 6
8185: PPUSH
8186: LD_INT 4
8188: PPUSH
8189: LD_VAR 0 5
8193: PPUSH
8194: LD_VAR 0 6
8198: PPUSH
8199: LD_INT 5
8201: PPUSH
8202: LD_INT 0
8204: PPUSH
8205: CALL 5197 0 6
// max = 0 ;
8209: LD_ADDR_VAR 0 18
8213: PUSH
8214: LD_INT 0
8216: ST_TO_ADDR
// for un in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
8217: LD_ADDR_VAR 0 10
8221: PUSH
8222: LD_INT 22
8224: PUSH
8225: LD_VAR 0 1
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: PUSH
8234: LD_INT 21
8236: PUSH
8237: LD_INT 1
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PPUSH
8248: CALL_OW 69
8252: PUSH
8253: FOR_IN
8254: IFFALSE 8296
// begin if GetSkill ( un , skill_engineering ) > max then
8256: LD_VAR 0 10
8260: PPUSH
8261: LD_INT 2
8263: PPUSH
8264: CALL_OW 259
8268: PUSH
8269: LD_VAR 0 18
8273: GREATER
8274: IFFALSE 8294
// max := GetSkill ( un , skill_engineering ) ;
8276: LD_ADDR_VAR 0 18
8280: PUSH
8281: LD_VAR 0 10
8285: PPUSH
8286: LD_INT 2
8288: PPUSH
8289: CALL_OW 259
8293: ST_TO_ADDR
// end ;
8294: GO 8253
8296: POP
8297: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) , max ) ;
8298: LD_INT 22
8300: PUSH
8301: LD_VAR 0 1
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: LD_INT 21
8312: PUSH
8313: LD_INT 3
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PPUSH
8324: CALL_OW 69
8328: PPUSH
8329: LD_VAR 0 18
8333: PPUSH
8334: CALL_OW 241
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
8338: LD_EXP 8
8342: PUSH
8343: LD_INT 20
8345: PPUSH
8346: LD_VAR 0 1
8350: PPUSH
8351: CALL_OW 321
8355: PUSH
8356: LD_INT 1
8358: EQUAL
8359: AND
8360: IFFALSE 8377
// SetTech ( tech_SibDet , side , state_researched ) ;
8362: LD_INT 20
8364: PPUSH
8365: LD_VAR 0 1
8369: PPUSH
8370: LD_INT 2
8372: PPUSH
8373: CALL_OW 322
// if def_siberite_bomb = 1 then
8377: LD_EXP 15
8381: PUSH
8382: LD_INT 1
8384: EQUAL
8385: IFFALSE 8419
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
8387: LD_INT 25
8389: PPUSH
8390: LD_VAR 0 1
8394: PPUSH
8395: LD_INT 1
8397: PPUSH
8398: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
8402: LD_INT 73
8404: PPUSH
8405: LD_VAR 0 1
8409: PPUSH
8410: LD_INT 1
8412: PPUSH
8413: CALL_OW 322
// end else
8417: GO 8449
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
8419: LD_INT 25
8421: PPUSH
8422: LD_VAR 0 1
8426: PPUSH
8427: LD_INT 0
8429: PPUSH
8430: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
8434: LD_INT 73
8436: PPUSH
8437: LD_VAR 0 1
8441: PPUSH
8442: LD_INT 0
8444: PPUSH
8445: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
8449: LD_INT 24
8451: PPUSH
8452: LD_VAR 0 1
8456: PPUSH
8457: LD_INT 0
8459: PPUSH
8460: CALL_OW 322
// global_defined := true ;
8464: LD_ADDR_LOC 3
8468: PUSH
8469: LD_INT 1
8471: ST_TO_ADDR
// end ;
8472: LD_VAR 0 3
8476: RET
// every 0 0$1 do
8477: GO 8479
8479: DISABLE
// if ( def_siberite_bomb > 1 ) then
8480: LD_EXP 15
8484: PUSH
8485: LD_INT 1
8487: GREATER
8488: IFFALSE 8503
// begin wait ( siberite_bomb_Delay ) ;
8490: LD_EXP 38
8494: PPUSH
8495: CALL_OW 67
// EnableSibFiss ;
8499: CALL 8504 0 0
// end ;
8503: END
// function EnableSibFiss ; var i ; begin
8504: LD_INT 0
8506: PPUSH
8507: PPUSH
// for i := 1 to 8 do
8508: LD_ADDR_VAR 0 2
8512: PUSH
8513: DOUBLE
8514: LD_INT 1
8516: DEC
8517: ST_TO_ADDR
8518: LD_INT 8
8520: PUSH
8521: FOR_TO
8522: IFFALSE 8553
// if Side_Positions [ i ] then
8524: LD_EXP 43
8528: PUSH
8529: LD_VAR 0 2
8533: ARRAY
8534: IFFALSE 8551
// SetTech ( tech_SibFiss , i , state_enabled ) ;
8536: LD_INT 25
8538: PPUSH
8539: LD_VAR 0 2
8543: PPUSH
8544: LD_INT 1
8546: PPUSH
8547: CALL_OW 322
8551: GO 8521
8553: POP
8554: POP
// end ;
8555: LD_VAR 0 1
8559: RET
// function prepare_sides ; var i ; begin
8560: LD_INT 0
8562: PPUSH
8563: PPUSH
// global_units := [ ] ;
8564: LD_ADDR_LOC 2
8568: PUSH
8569: EMPTY
8570: ST_TO_ADDR
// global_defined := false ;
8571: LD_ADDR_LOC 3
8575: PUSH
8576: LD_INT 0
8578: ST_TO_ADDR
// for i := 1 to Side_Positions do
8579: LD_ADDR_VAR 0 2
8583: PUSH
8584: DOUBLE
8585: LD_INT 1
8587: DEC
8588: ST_TO_ADDR
8589: LD_EXP 43
8593: PUSH
8594: FOR_TO
8595: IFFALSE 8635
// if Side_Positions [ i ] then
8597: LD_EXP 43
8601: PUSH
8602: LD_VAR 0 2
8606: ARRAY
8607: IFFALSE 8633
// begin prepare_side_base ( i , 1 ) ;
8609: LD_VAR 0 2
8613: PPUSH
8614: LD_INT 1
8616: PPUSH
8617: CALL 5785 0 2
// prepare_side_base ( i , 2 ) ;
8621: LD_VAR 0 2
8625: PPUSH
8626: LD_INT 2
8628: PPUSH
8629: CALL 5785 0 2
// end ;
8633: GO 8594
8635: POP
8636: POP
// end ;
8637: LD_VAR 0 1
8641: RET
// starting begin disable ( 98 ) ;
8642: LD_INT 98
8644: DISABLE_MARKED
// disable ( 400 ) ;
8645: LD_INT 400
8647: DISABLE_MARKED
// disable ( 401 ) ;
8648: LD_INT 401
8650: DISABLE_MARKED
// disable ( 600 ) ;
8651: LD_INT 600
8653: DISABLE_MARKED
// enable_human_prediction := true ;
8654: LD_ADDR_OWVAR 51
8658: PUSH
8659: LD_INT 1
8661: ST_TO_ADDR
// mp_selectmsg := true ;
8662: LD_ADDR_OWVAR 13
8666: PUSH
8667: LD_INT 1
8669: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
8670: CALL 68 0 0
// prepare_map_coordinates ;
8674: CALL 3700 0 0
// ResetFog ;
8678: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
8682: LD_OWVAR 2
8686: PPUSH
8687: CALL_OW 520
// prepare_sides ;
8691: CALL 8560 0 0
// Init_Win_Condition ;
8695: CALL 16144 0 0
// InitLimits ;
8699: CALL 14804 0 0
// ShowTimer ;
8703: CALL 15741 0 0
// music_nat := Side_Nations [ your_side ] ;
8707: LD_ADDR_OWVAR 71
8711: PUSH
8712: LD_EXP 44
8716: PUSH
8717: LD_OWVAR 2
8721: ARRAY
8722: ST_TO_ADDR
// if IAmSpec then
8723: CALL_OW 531
8727: IFFALSE 8751
// begin fogoff ( true ) ;
8729: LD_INT 1
8731: PPUSH
8732: CALL_OW 344
// CenterNowOnXY ( 109 , 61 ) ;
8736: LD_INT 109
8738: PPUSH
8739: LD_INT 61
8741: PPUSH
8742: CALL_OW 86
// enable ( 400 ) ;
8746: LD_INT 400
8748: ENABLE_MARKED
// end else
8749: GO 8805
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 2 ] ) ;
8751: LD_EXP 49
8755: PUSH
8756: LD_EXP 43
8760: PUSH
8761: LD_OWVAR 2
8765: ARRAY
8766: ARRAY
8767: PUSH
8768: LD_INT 1
8770: ARRAY
8771: PUSH
8772: LD_INT 1
8774: ARRAY
8775: PPUSH
8776: LD_EXP 49
8780: PUSH
8781: LD_EXP 43
8785: PUSH
8786: LD_OWVAR 2
8790: ARRAY
8791: ARRAY
8792: PUSH
8793: LD_INT 1
8795: ARRAY
8796: PUSH
8797: LD_INT 2
8799: ARRAY
8800: PPUSH
8801: CALL_OW 86
// end ; InitApeman ;
8805: CALL 10231 0 0
// if def_builduptime then
8809: LD_EXP 17
8813: IFFALSE 8819
// BeginBuildUp ;
8815: CALL 13421 0 0
// end ; end_of_file
8819: END
// every 1 1$0 + 0 0$0.3 do
8820: GO 8822
8822: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
8823: LD_INT 4
8825: PPUSH
8826: LD_INT 5
8828: PPUSH
8829: CALL_OW 12
8833: PPUSH
8834: LD_INT 1
8836: PPUSH
8837: CALL_OW 57
// enable ;
8841: ENABLE
// end ;
8842: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
8843: GO 8845
8845: DISABLE
8846: LD_INT 0
8848: PPUSH
8849: PPUSH
// begin case tick of 1 .. 1 1$0 :
8850: LD_OWVAR 1
8854: PUSH
8855: LD_INT 1
8857: DOUBLE
8858: GREATEREQUAL
8859: IFFALSE 8867
8861: LD_INT 2100
8863: DOUBLE
8864: LESSEQUAL
8865: IFTRUE 8869
8867: GO 8897
8869: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
8870: LD_EXP 32
8874: PUSH
8875: LD_INT 100
8877: DIVREAL
8878: PUSH
8879: LD_INT 350
8881: PPUSH
8882: LD_INT 700
8884: PPUSH
8885: CALL_OW 12
8889: MUL
8890: PPUSH
8891: CALL_OW 67
8895: GO 9199
8897: LD_INT 2100
8899: PUSH
8900: LD_INT 1
8902: PLUS
8903: DOUBLE
8904: GREATEREQUAL
8905: IFFALSE 8913
8907: LD_INT 10500
8909: DOUBLE
8910: LESSEQUAL
8911: IFTRUE 8915
8913: GO 8943
8915: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
8916: LD_EXP 32
8920: PUSH
8921: LD_INT 100
8923: DIVREAL
8924: PUSH
8925: LD_INT 700
8927: PPUSH
8928: LD_INT 1225
8930: PPUSH
8931: CALL_OW 12
8935: MUL
8936: PPUSH
8937: CALL_OW 67
8941: GO 9199
8943: LD_INT 10500
8945: PUSH
8946: LD_INT 1
8948: PLUS
8949: DOUBLE
8950: GREATEREQUAL
8951: IFFALSE 8959
8953: LD_INT 21000
8955: DOUBLE
8956: LESSEQUAL
8957: IFTRUE 8961
8959: GO 8989
8961: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
8962: LD_EXP 32
8966: PUSH
8967: LD_INT 100
8969: DIVREAL
8970: PUSH
8971: LD_INT 1225
8973: PPUSH
8974: LD_INT 1750
8976: PPUSH
8977: CALL_OW 12
8981: MUL
8982: PPUSH
8983: CALL_OW 67
8987: GO 9199
8989: LD_INT 21000
8991: PUSH
8992: LD_INT 1
8994: PLUS
8995: DOUBLE
8996: GREATEREQUAL
8997: IFFALSE 9005
8999: LD_INT 42000
9001: DOUBLE
9002: LESSEQUAL
9003: IFTRUE 9007
9005: GO 9035
9007: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
9008: LD_EXP 32
9012: PUSH
9013: LD_INT 100
9015: DIVREAL
9016: PUSH
9017: LD_INT 1750
9019: PPUSH
9020: LD_INT 2450
9022: PPUSH
9023: CALL_OW 12
9027: MUL
9028: PPUSH
9029: CALL_OW 67
9033: GO 9199
9035: LD_INT 42000
9037: PUSH
9038: LD_INT 1
9040: PLUS
9041: DOUBLE
9042: GREATEREQUAL
9043: IFFALSE 9051
9045: LD_INT 63000
9047: DOUBLE
9048: LESSEQUAL
9049: IFTRUE 9053
9051: GO 9081
9053: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
9054: LD_EXP 32
9058: PUSH
9059: LD_INT 100
9061: DIVREAL
9062: PUSH
9063: LD_INT 2450
9065: PPUSH
9066: LD_INT 2800
9068: PPUSH
9069: CALL_OW 12
9073: MUL
9074: PPUSH
9075: CALL_OW 67
9079: GO 9199
9081: LD_INT 63000
9083: PUSH
9084: LD_INT 1
9086: PLUS
9087: DOUBLE
9088: GREATEREQUAL
9089: IFFALSE 9097
9091: LD_INT 105000
9093: DOUBLE
9094: LESSEQUAL
9095: IFTRUE 9099
9097: GO 9127
9099: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
9100: LD_EXP 32
9104: PUSH
9105: LD_INT 100
9107: DIVREAL
9108: PUSH
9109: LD_INT 2800
9111: PPUSH
9112: LD_INT 3325
9114: PPUSH
9115: CALL_OW 12
9119: MUL
9120: PPUSH
9121: CALL_OW 67
9125: GO 9199
9127: LD_INT 105000
9129: PUSH
9130: LD_INT 1
9132: PLUS
9133: DOUBLE
9134: GREATEREQUAL
9135: IFFALSE 9143
9137: LD_INT 630000
9139: DOUBLE
9140: LESSEQUAL
9141: IFTRUE 9145
9143: GO 9173
9145: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
9146: LD_EXP 32
9150: PUSH
9151: LD_INT 100
9153: DIVREAL
9154: PUSH
9155: LD_INT 3325
9157: PPUSH
9158: LD_INT 4200
9160: PPUSH
9161: CALL_OW 12
9165: MUL
9166: PPUSH
9167: CALL_OW 67
9171: GO 9199
9173: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
9174: LD_EXP 32
9178: PUSH
9179: LD_INT 100
9181: DIVREAL
9182: PUSH
9183: LD_INT 4200
9185: PPUSH
9186: LD_INT 5250
9188: PPUSH
9189: CALL_OW 12
9193: MUL
9194: PPUSH
9195: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
9199: LD_ADDR_VAR 0 2
9203: PUSH
9204: LD_INT 3
9206: PPUSH
9207: LD_INT 5
9209: PPUSH
9210: CALL_OW 12
9214: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
9215: LD_ADDR_VAR 0 1
9219: PUSH
9220: LD_EXP 43
9224: PUSH
9225: LD_INT 0
9227: PUSH
9228: EMPTY
9229: LIST
9230: DIFF
9231: PUSH
9232: FOR_IN
9233: IFFALSE 9282
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
9235: LD_VAR 0 2
9239: PPUSH
9240: LD_EXP 49
9244: PUSH
9245: LD_VAR 0 1
9249: ARRAY
9250: PUSH
9251: LD_INT 1
9253: ARRAY
9254: PPUSH
9255: LD_EXP 49
9259: PUSH
9260: LD_VAR 0 1
9264: ARRAY
9265: PUSH
9266: LD_INT 2
9268: ARRAY
9269: PPUSH
9270: LD_INT 20
9272: PPUSH
9273: LD_INT 1
9275: PPUSH
9276: CALL_OW 56
9280: GO 9232
9282: POP
9283: POP
// enable ;
9284: ENABLE
// end ;
9285: PPOPN 2
9287: END
// every 0 0$20 + 0 0$0.9 do var i , filter ;
9288: GO 9290
9290: DISABLE
9291: LD_INT 0
9293: PPUSH
9294: PPUSH
// begin if GetResourceArea ( Valley , mat_cans ) < ( ( 300 - shipments_density ) / 100 * 5 ) then
9295: LD_INT 12
9297: PPUSH
9298: LD_INT 1
9300: PPUSH
9301: CALL_OW 287
9305: PUSH
9306: LD_INT 300
9308: PUSH
9309: LD_EXP 32
9313: MINUS
9314: PUSH
9315: LD_INT 100
9317: DIVREAL
9318: PUSH
9319: LD_INT 5
9321: MUL
9322: LESS
9323: IFFALSE 9346
// CreateCratesArea ( Rand ( 3 , 5 ) , Valley , true ) ;
9325: LD_INT 3
9327: PPUSH
9328: LD_INT 5
9330: PPUSH
9331: CALL_OW 12
9335: PPUSH
9336: LD_INT 12
9338: PPUSH
9339: LD_INT 1
9341: PPUSH
9342: CALL_OW 55
// enable ;
9346: ENABLE
// end ; end_of_file
9347: PPOPN 2
9349: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
9350: LD_VAR 0 1
9354: PPUSH
9355: CALL_OW 266
9359: PUSH
9360: LD_INT 0
9362: PUSH
9363: LD_INT 1
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: IN
9370: IFFALSE 9395
// SetBName ( b , @ & GetSide ( b ) ) ;
9372: LD_VAR 0 1
9376: PPUSH
9377: LD_STRING @
9379: PUSH
9380: LD_VAR 0 1
9384: PPUSH
9385: CALL_OW 255
9389: STR
9390: PPUSH
9391: CALL_OW 500
// if def_game_rules then
9395: LD_EXP 67
9399: IFFALSE 9436
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
9401: LD_VAR 0 1
9405: PPUSH
9406: LD_VAR 0 1
9410: PPUSH
9411: CALL_OW 266
9415: PPUSH
9416: LD_VAR 0 1
9420: PPUSH
9421: CALL_OW 255
9425: PPUSH
9426: LD_INT 0
9428: PPUSH
9429: LD_INT 1
9431: PPUSH
9432: CALL 15205 0 5
// end ;
9436: PPOPN 2
9438: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
9439: LD_VAR 0 1
9443: PPUSH
9444: CALL_OW 266
9448: PUSH
9449: LD_INT 0
9451: PUSH
9452: LD_INT 1
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: IN
9459: IFFALSE 9484
// SetBName ( b , @ & GetSide ( b ) ) ;
9461: LD_VAR 0 1
9465: PPUSH
9466: LD_STRING @
9468: PUSH
9469: LD_VAR 0 1
9473: PPUSH
9474: CALL_OW 255
9478: STR
9479: PPUSH
9480: CALL_OW 500
// if def_game_rules then
9484: LD_EXP 67
9488: IFFALSE 9527
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
9490: LD_VAR 0 1
9494: PPUSH
9495: LD_VAR 0 1
9499: PPUSH
9500: CALL_OW 266
9504: PPUSH
9505: LD_VAR 0 1
9509: PPUSH
9510: CALL_OW 255
9514: PPUSH
9515: LD_VAR 0 2
9519: PPUSH
9520: LD_INT 1
9522: PPUSH
9523: CALL 15205 0 5
// end ;
9527: PPOPN 3
9529: END
// on VehicleConstructed ( veh , fac ) do var side ;
9530: LD_INT 0
9532: PPUSH
// begin if GetControl ( veh ) = control_apeman then
9533: LD_VAR 0 1
9537: PPUSH
9538: CALL_OW 263
9542: PUSH
9543: LD_INT 5
9545: EQUAL
9546: IFFALSE 9688
// begin side := GetSide ( veh ) ;
9548: LD_ADDR_VAR 0 3
9552: PUSH
9553: LD_VAR 0 1
9557: PPUSH
9558: CALL_OW 255
9562: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
9563: LD_ADDR_EXP 61
9567: PUSH
9568: LD_EXP 61
9572: PPUSH
9573: LD_VAR 0 3
9577: PPUSH
9578: LD_EXP 61
9582: PUSH
9583: LD_VAR 0 3
9587: ARRAY
9588: PPUSH
9589: LD_INT 52
9591: PUSH
9592: EMPTY
9593: LIST
9594: PPUSH
9595: CALL_OW 72
9599: PUSH
9600: LD_INT 22
9602: PUSH
9603: LD_VAR 0 3
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: LD_INT 2
9614: PUSH
9615: LD_INT 33
9617: PUSH
9618: LD_INT 5
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: LD_INT 25
9627: PUSH
9628: LD_INT 12
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PUSH
9635: LD_INT 25
9637: PUSH
9638: LD_INT 15
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 25
9647: PUSH
9648: LD_INT 16
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: LD_INT 25
9657: PUSH
9658: LD_INT 17
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PPUSH
9677: CALL_OW 69
9681: UNION
9682: PPUSH
9683: CALL_OW 1
9687: ST_TO_ADDR
// end ; end ;
9688: PPOPN 3
9690: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
9691: LD_INT 0
9693: PPUSH
9694: PPUSH
9695: PPUSH
9696: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
9697: LD_VAR 0 1
9701: PPUSH
9702: CALL_OW 257
9706: PUSH
9707: LD_INT 12
9709: PUSH
9710: LD_INT 15
9712: PUSH
9713: LD_INT 17
9715: PUSH
9716: LD_INT 16
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: IN
9725: PUSH
9726: LD_VAR 0 1
9730: PPUSH
9731: CALL_OW 263
9735: PUSH
9736: LD_INT 5
9738: EQUAL
9739: OR
9740: IFFALSE 9751
// ApeKilled ( j ) ;
9742: LD_VAR 0 1
9746: PPUSH
9747: CALL 10904 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
9751: LD_VAR 0 1
9755: PPUSH
9756: CALL_OW 266
9760: PUSH
9761: LD_INT 0
9763: PUSH
9764: LD_INT 1
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: IN
9771: IFFALSE 9853
// begin pos := Side_Positions [ GetSide ( j ) ] ;
9773: LD_ADDR_VAR 0 4
9777: PUSH
9778: LD_EXP 43
9782: PUSH
9783: LD_VAR 0 1
9787: PPUSH
9788: CALL_OW 255
9792: ARRAY
9793: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
9794: LD_ADDR_VAR 0 2
9798: PUSH
9799: LD_EXP 49
9803: PUSH
9804: LD_VAR 0 4
9808: ARRAY
9809: PUSH
9810: LD_INT 1
9812: ARRAY
9813: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
9814: LD_ADDR_VAR 0 3
9818: PUSH
9819: LD_EXP 49
9823: PUSH
9824: LD_VAR 0 4
9828: ARRAY
9829: PUSH
9830: LD_INT 2
9832: ARRAY
9833: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
9834: LD_VAR 0 2
9838: PPUSH
9839: LD_VAR 0 3
9843: PPUSH
9844: CALL_OW 420
9848: PPUSH
9849: CALL_OW 419
// end ; if def_game_rules then
9853: LD_EXP 67
9857: IFFALSE 9956
// if ( GetType ( j ) = 3 ) then
9859: LD_VAR 0 1
9863: PPUSH
9864: CALL_OW 247
9868: PUSH
9869: LD_INT 3
9871: EQUAL
9872: IFFALSE 9912
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
9874: LD_VAR 0 1
9878: PPUSH
9879: LD_VAR 0 1
9883: PPUSH
9884: CALL_OW 266
9888: PPUSH
9889: LD_VAR 0 1
9893: PPUSH
9894: CALL_OW 255
9898: PPUSH
9899: LD_INT 0
9901: PPUSH
9902: LD_INT 1
9904: NEG
9905: PPUSH
9906: CALL 15205 0 5
9910: GO 9956
// if ( GetChassis ( j ) = 25 ) then
9912: LD_VAR 0 1
9916: PPUSH
9917: CALL_OW 265
9921: PUSH
9922: LD_INT 25
9924: EQUAL
9925: IFFALSE 9956
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
9927: LD_VAR 0 1
9931: PPUSH
9932: LD_INT 37
9934: PPUSH
9935: LD_VAR 0 1
9939: PPUSH
9940: CALL_OW 255
9944: PPUSH
9945: LD_INT 0
9947: PPUSH
9948: LD_INT 1
9950: NEG
9951: PPUSH
9952: CALL 15205 0 5
// end ;
9956: PPOPN 5
9958: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
9959: LD_EXP 67
9963: PUSH
9964: LD_VAR 0 1
9968: PPUSH
9969: CALL_OW 265
9973: PUSH
9974: LD_INT 25
9976: EQUAL
9977: AND
9978: IFFALSE 10010
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
9980: LD_VAR 0 1
9984: PPUSH
9985: LD_INT 37
9987: PPUSH
9988: LD_VAR 0 1
9992: PPUSH
9993: CALL_OW 255
9997: PPUSH
9998: LD_VAR 0 3
10002: PPUSH
10003: LD_INT 1
10005: PPUSH
10006: CALL 15205 0 5
// end ;
10010: PPOPN 4
10012: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
10013: LD_VAR 0 1
10017: PPUSH
10018: LD_VAR 0 2
10022: PPUSH
10023: LD_VAR 0 3
10027: PPUSH
10028: LD_OWVAR 2
10032: PPUSH
10033: CALL 15905 0 4
10037: PPOPN 3
10039: END
// every 20 20$00 trigger apemanNumber do
10040: LD_EXP 58
10044: IFFALSE 10077
10046: GO 10048
10048: DISABLE
// begin enable ;
10049: ENABLE
// if apeLevel >= 8 then
10050: LD_EXP 63
10054: PUSH
10055: LD_INT 8
10057: GREATEREQUAL
10058: IFFALSE 10063
// disable else
10060: DISABLE
10061: GO 10077
// apeLevel := apeLevel + 1 ;
10063: LD_ADDR_EXP 63
10067: PUSH
10068: LD_EXP 63
10072: PUSH
10073: LD_INT 1
10075: PLUS
10076: ST_TO_ADDR
// end ;
10077: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
10078: LD_EXP 58
10082: PUSH
10083: LD_EXP 59
10087: LESS
10088: IFFALSE 10228
10090: GO 10092
10092: DISABLE
10093: LD_INT 0
10095: PPUSH
10096: PPUSH
10097: PPUSH
10098: PPUSH
// begin enable ;
10099: ENABLE
// for i := 1 to apemanPos do
10100: LD_ADDR_VAR 0 1
10104: PUSH
10105: DOUBLE
10106: LD_INT 1
10108: DEC
10109: ST_TO_ADDR
10110: LD_EXP 61
10114: PUSH
10115: FOR_TO
10116: IFFALSE 10226
// begin if apemanPlayerCount [ i ] then
10118: LD_EXP 62
10122: PUSH
10123: LD_VAR 0 1
10127: ARRAY
10128: IFFALSE 10224
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
10130: LD_EXP 62
10134: PUSH
10135: LD_VAR 0 1
10139: ARRAY
10140: PUSH
10141: LD_EXP 61
10145: PUSH
10146: LD_VAR 0 1
10150: ARRAY
10151: GREATER
10152: IFFALSE 10224
// begin ape := PrepareApeman ;
10154: LD_ADDR_VAR 0 2
10158: PUSH
10159: CALL 10723 0 0
10163: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
10164: LD_VAR 0 2
10168: PPUSH
10169: LD_EXP 64
10173: PUSH
10174: LD_VAR 0 1
10178: ARRAY
10179: PPUSH
10180: LD_INT 0
10182: PPUSH
10183: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
10187: LD_ADDR_EXP 61
10191: PUSH
10192: LD_EXP 61
10196: PPUSH
10197: LD_VAR 0 1
10201: PPUSH
10202: LD_EXP 61
10206: PUSH
10207: LD_VAR 0 1
10211: ARRAY
10212: PUSH
10213: LD_VAR 0 2
10217: UNION
10218: PPUSH
10219: CALL_OW 1
10223: ST_TO_ADDR
// end ; end ; end ;
10224: GO 10115
10226: POP
10227: POP
// end ;
10228: PPOPN 4
10230: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
10231: LD_INT 0
10233: PPUSH
10234: PPUSH
10235: PPUSH
10236: PPUSH
10237: PPUSH
10238: PPUSH
10239: PPUSH
// playersAmount := 0 ;
10240: LD_ADDR_VAR 0 3
10244: PUSH
10245: LD_INT 0
10247: ST_TO_ADDR
// _apeAreas := [ Ar1Out3 , Ar2Out3 ] ;
10248: LD_ADDR_VAR 0 7
10252: PUSH
10253: LD_INT 24
10255: PUSH
10256: LD_INT 18
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10263: LD_ADDR_EXP 64
10267: PUSH
10268: LD_INT 0
10270: PUSH
10271: LD_INT 0
10273: PUSH
10274: LD_INT 0
10276: PUSH
10277: LD_INT 0
10279: PUSH
10280: LD_INT 0
10282: PUSH
10283: LD_INT 0
10285: PUSH
10286: LD_INT 0
10288: PUSH
10289: LD_INT 0
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: ST_TO_ADDR
// for j = 1 to Side_Positions do
10302: LD_ADDR_VAR 0 4
10306: PUSH
10307: DOUBLE
10308: LD_INT 1
10310: DEC
10311: ST_TO_ADDR
10312: LD_EXP 43
10316: PUSH
10317: FOR_TO
10318: IFFALSE 10385
// if Side_Positions [ j ] then
10320: LD_EXP 43
10324: PUSH
10325: LD_VAR 0 4
10329: ARRAY
10330: IFFALSE 10383
// begin playersAmount := playersAmount + 1 ;
10332: LD_ADDR_VAR 0 3
10336: PUSH
10337: LD_VAR 0 3
10341: PUSH
10342: LD_INT 1
10344: PLUS
10345: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
10346: LD_ADDR_EXP 64
10350: PUSH
10351: LD_EXP 64
10355: PPUSH
10356: LD_VAR 0 4
10360: PPUSH
10361: LD_VAR 0 7
10365: PUSH
10366: LD_EXP 43
10370: PUSH
10371: LD_VAR 0 4
10375: ARRAY
10376: ARRAY
10377: PPUSH
10378: CALL_OW 1
10382: ST_TO_ADDR
// end ;
10383: GO 10317
10385: POP
10386: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
10387: LD_ADDR_EXP 60
10391: PUSH
10392: LD_INT 3
10394: PUSH
10395: LD_EXP 37
10399: MUL
10400: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
10401: LD_ADDR_EXP 58
10405: PUSH
10406: LD_VAR 0 3
10410: PUSH
10411: LD_EXP 60
10415: MUL
10416: ST_TO_ADDR
// apemanLimit := apemanNumber ;
10417: LD_ADDR_EXP 59
10421: PUSH
10422: LD_EXP 58
10426: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10427: LD_ADDR_EXP 61
10431: PUSH
10432: LD_INT 0
10434: PUSH
10435: LD_INT 0
10437: PUSH
10438: LD_INT 0
10440: PUSH
10441: LD_INT 0
10443: PUSH
10444: LD_INT 0
10446: PUSH
10447: LD_INT 0
10449: PUSH
10450: LD_INT 0
10452: PUSH
10453: LD_INT 0
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10466: LD_ADDR_EXP 62
10470: PUSH
10471: LD_INT 0
10473: PUSH
10474: LD_INT 0
10476: PUSH
10477: LD_INT 0
10479: PUSH
10480: LD_INT 0
10482: PUSH
10483: LD_INT 0
10485: PUSH
10486: LD_INT 0
10488: PUSH
10489: LD_INT 0
10491: PUSH
10492: LD_INT 0
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: ST_TO_ADDR
// apeLevel := 1 ;
10505: LD_ADDR_EXP 63
10509: PUSH
10510: LD_INT 1
10512: ST_TO_ADDR
// if not apemanNumber then
10513: LD_EXP 58
10517: NOT
10518: IFFALSE 10522
// exit ;
10520: GO 10718
// for i := 1 to apemanPerPlayer do
10522: LD_ADDR_VAR 0 2
10526: PUSH
10527: DOUBLE
10528: LD_INT 1
10530: DEC
10531: ST_TO_ADDR
10532: LD_EXP 60
10536: PUSH
10537: FOR_TO
10538: IFFALSE 10716
// begin for j := 1 to Side_Positions do
10540: LD_ADDR_VAR 0 4
10544: PUSH
10545: DOUBLE
10546: LD_INT 1
10548: DEC
10549: ST_TO_ADDR
10550: LD_EXP 43
10554: PUSH
10555: FOR_TO
10556: IFFALSE 10712
// if Side_Positions [ j ] then
10558: LD_EXP 43
10562: PUSH
10563: LD_VAR 0 4
10567: ARRAY
10568: IFFALSE 10710
// begin pos := Side_Positions [ j ] ;
10570: LD_ADDR_VAR 0 6
10574: PUSH
10575: LD_EXP 43
10579: PUSH
10580: LD_VAR 0 4
10584: ARRAY
10585: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
10586: LD_ADDR_EXP 62
10590: PUSH
10591: LD_EXP 62
10595: PPUSH
10596: LD_VAR 0 4
10600: PPUSH
10601: LD_EXP 62
10605: PUSH
10606: LD_VAR 0 4
10610: ARRAY
10611: PUSH
10612: LD_INT 1
10614: PLUS
10615: PPUSH
10616: CALL_OW 1
10620: ST_TO_ADDR
// ape := PrepareApeman ;
10621: LD_ADDR_VAR 0 5
10625: PUSH
10626: CALL 10723 0 0
10630: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
10631: LD_ADDR_EXP 61
10635: PUSH
10636: LD_EXP 61
10640: PPUSH
10641: LD_VAR 0 4
10645: PPUSH
10646: LD_EXP 61
10650: PUSH
10651: LD_VAR 0 4
10655: ARRAY
10656: PPUSH
10657: LD_EXP 61
10661: PUSH
10662: LD_VAR 0 4
10666: ARRAY
10667: PUSH
10668: LD_INT 1
10670: PLUS
10671: PPUSH
10672: LD_VAR 0 5
10676: PPUSH
10677: CALL_OW 1
10681: PPUSH
10682: CALL_OW 1
10686: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
10687: LD_VAR 0 5
10691: PPUSH
10692: LD_EXP 64
10696: PUSH
10697: LD_VAR 0 4
10701: ARRAY
10702: PPUSH
10703: LD_INT 0
10705: PPUSH
10706: CALL_OW 49
// end ;
10710: GO 10555
10712: POP
10713: POP
// end ;
10714: GO 10537
10716: POP
10717: POP
// end ;
10718: LD_VAR 0 1
10722: RET
// export function PrepareApeman ; var bonus ; begin
10723: LD_INT 0
10725: PPUSH
10726: PPUSH
// uc_side := 0 ;
10727: LD_ADDR_OWVAR 20
10731: PUSH
10732: LD_INT 0
10734: ST_TO_ADDR
// uc_nation := 0 ;
10735: LD_ADDR_OWVAR 21
10739: PUSH
10740: LD_INT 0
10742: ST_TO_ADDR
// InitHc ;
10743: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
10747: LD_ADDR_VAR 0 2
10751: PUSH
10752: LD_INT 1
10754: NEG
10755: PUSH
10756: LD_INT 0
10758: PUSH
10759: LD_INT 1
10761: PUSH
10762: EMPTY
10763: LIST
10764: LIST
10765: LIST
10766: PUSH
10767: LD_OWVAR 1
10771: PUSH
10772: LD_INT 3
10774: MOD
10775: PUSH
10776: LD_INT 1
10778: PLUS
10779: ARRAY
10780: ST_TO_ADDR
// hc_class := class_apeman ;
10781: LD_ADDR_OWVAR 28
10785: PUSH
10786: LD_INT 12
10788: ST_TO_ADDR
// hc_gallery :=  ;
10789: LD_ADDR_OWVAR 33
10793: PUSH
10794: LD_STRING 
10796: ST_TO_ADDR
// hc_name :=  ;
10797: LD_ADDR_OWVAR 26
10801: PUSH
10802: LD_STRING 
10804: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
10805: LD_ADDR_OWVAR 31
10809: PUSH
10810: LD_EXP 63
10814: PUSH
10815: LD_VAR 0 2
10819: PLUS
10820: PUSH
10821: LD_EXP 63
10825: PUSH
10826: LD_VAR 0 2
10830: PLUS
10831: PUSH
10832: LD_EXP 63
10836: PUSH
10837: LD_VAR 0 2
10841: PLUS
10842: PUSH
10843: LD_EXP 63
10847: PUSH
10848: LD_VAR 0 2
10852: PLUS
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
10860: LD_ADDR_OWVAR 35
10864: PUSH
10865: LD_INT 10
10867: PUSH
10868: LD_VAR 0 2
10872: MUL
10873: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
10874: LD_ADDR_OWVAR 29
10878: PUSH
10879: LD_INT 12
10881: PUSH
10882: LD_INT 10
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: ST_TO_ADDR
// result := CreateHuman ;
10889: LD_ADDR_VAR 0 1
10893: PUSH
10894: CALL_OW 44
10898: ST_TO_ADDR
// end ;
10899: LD_VAR 0 1
10903: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
10904: LD_INT 0
10906: PPUSH
10907: PPUSH
10908: PPUSH
// if not ape then
10909: LD_VAR 0 1
10913: NOT
10914: IFFALSE 10918
// exit ;
10916: GO 11043
// side := GetSide ( ape ) ;
10918: LD_ADDR_VAR 0 3
10922: PUSH
10923: LD_VAR 0 1
10927: PPUSH
10928: CALL_OW 255
10932: ST_TO_ADDR
// if not side then
10933: LD_VAR 0 3
10937: NOT
10938: IFFALSE 10992
// begin for i = 1 to apemanPos do
10940: LD_ADDR_VAR 0 4
10944: PUSH
10945: DOUBLE
10946: LD_INT 1
10948: DEC
10949: ST_TO_ADDR
10950: LD_EXP 61
10954: PUSH
10955: FOR_TO
10956: IFFALSE 10990
// if ape in apemanPos [ i ] then
10958: LD_VAR 0 1
10962: PUSH
10963: LD_EXP 61
10967: PUSH
10968: LD_VAR 0 4
10972: ARRAY
10973: IN
10974: IFFALSE 10988
// begin side := i ;
10976: LD_ADDR_VAR 0 3
10980: PUSH
10981: LD_VAR 0 4
10985: ST_TO_ADDR
// break ;
10986: GO 10990
// end ;
10988: GO 10955
10990: POP
10991: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
10992: LD_ADDR_EXP 61
10996: PUSH
10997: LD_EXP 61
11001: PPUSH
11002: LD_VAR 0 3
11006: PPUSH
11007: LD_EXP 61
11011: PUSH
11012: LD_VAR 0 3
11016: ARRAY
11017: PUSH
11018: LD_VAR 0 1
11022: DIFF
11023: PPUSH
11024: CALL_OW 1
11028: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
11029: LD_ADDR_EXP 58
11033: PUSH
11034: LD_EXP 58
11038: PUSH
11039: LD_INT 1
11041: MINUS
11042: ST_TO_ADDR
// end ; end_of_file
11043: LD_VAR 0 2
11047: RET
// var free , free1 , free2 , new1 , new2 , arr1 , arr2 , seenby1 , seenby2 ; function displ_status ; var s1 , s2 ; begin
11048: LD_INT 0
11050: PPUSH
11051: PPUSH
11052: PPUSH
// if not def_people_arrivals then
11053: LD_EXP 11
11057: NOT
11058: IFFALSE 11062
// exit ;
11060: GO 11203
// if def_people_loyality then
11062: LD_EXP 12
11066: IFFALSE 11182
// begin s1 := [ #Multi1x1-InfoL , Position_Sides [ 1 ] , ( free1 + 0 ) ] ;
11068: LD_ADDR_VAR 0 2
11072: PUSH
11073: LD_STRING #Multi1x1-InfoL
11075: PUSH
11076: LD_EXP 46
11080: PUSH
11081: LD_INT 1
11083: ARRAY
11084: PUSH
11085: LD_LOC 10
11089: PUSH
11090: LD_INT 0
11092: PLUS
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: LIST
11098: ST_TO_ADDR
// s2 := [ #Multi1x1-InfoL , Position_Sides [ 2 ] , ( free2 + 0 ) ] ;
11099: LD_ADDR_VAR 0 3
11103: PUSH
11104: LD_STRING #Multi1x1-InfoL
11106: PUSH
11107: LD_EXP 46
11111: PUSH
11112: LD_INT 2
11114: ARRAY
11115: PUSH
11116: LD_LOC 11
11120: PUSH
11121: LD_INT 0
11123: PLUS
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: LIST
11129: ST_TO_ADDR
// if Side_Positions [ your_side ] <> 2 then
11130: LD_EXP 43
11134: PUSH
11135: LD_OWVAR 2
11139: ARRAY
11140: PUSH
11141: LD_INT 2
11143: NONEQUAL
11144: IFFALSE 11164
// ExtraStrings := s1 ^ s2 else
11146: LD_ADDR_EXP 69
11150: PUSH
11151: LD_VAR 0 2
11155: PUSH
11156: LD_VAR 0 3
11160: ADD
11161: ST_TO_ADDR
11162: GO 11180
// ExtraStrings := s2 ^ s1 ;
11164: LD_ADDR_EXP 69
11168: PUSH
11169: LD_VAR 0 3
11173: PUSH
11174: LD_VAR 0 2
11178: ADD
11179: ST_TO_ADDR
// end else
11180: GO 11203
// begin ExtraStrings := [ #Multi1x1-InfoNonL , ( free + 0 ) ] ;
11182: LD_ADDR_EXP 69
11186: PUSH
11187: LD_STRING #Multi1x1-InfoNonL
11189: PUSH
11190: LD_LOC 9
11194: PUSH
11195: LD_INT 0
11197: PLUS
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: ST_TO_ADDR
// end ; end ;
11203: LD_VAR 0 1
11207: RET
// every 0 0$1 do
11208: GO 11210
11210: DISABLE
// begin if not text_info then
11211: LD_EXP 34
11215: NOT
11216: IFFALSE 11220
// exit ;
11218: GO 11225
// displ_status ;
11220: CALL 11048 0 0
// enable ;
11224: ENABLE
// end ;
11225: END
// export function prepare_arrivals ; var i , ar , p1 , p2 , pom1 , pom2 ; begin
11226: LD_INT 0
11228: PPUSH
11229: PPUSH
11230: PPUSH
11231: PPUSH
11232: PPUSH
11233: PPUSH
11234: PPUSH
// arr1 := [ ] ;
11235: LD_ADDR_LOC 14
11239: PUSH
11240: EMPTY
11241: ST_TO_ADDR
// arr2 := [ ] ;
11242: LD_ADDR_LOC 15
11246: PUSH
11247: EMPTY
11248: ST_TO_ADDR
// for i := 1 to max_arriving_times do
11249: LD_ADDR_VAR 0 2
11253: PUSH
11254: DOUBLE
11255: LD_INT 1
11257: DEC
11258: ST_TO_ADDR
11259: LD_EXP 33
11263: PUSH
11264: FOR_TO
11265: IFFALSE 11801
// begin case rand ( 1 , 100 ) of 1 .. 45 :
11267: LD_INT 1
11269: PPUSH
11270: LD_INT 100
11272: PPUSH
11273: CALL_OW 12
11277: PUSH
11278: LD_INT 1
11280: DOUBLE
11281: GREATEREQUAL
11282: IFFALSE 11290
11284: LD_INT 45
11286: DOUBLE
11287: LESSEQUAL
11288: IFTRUE 11292
11290: GO 11499
11292: POP
// case rand ( 1 , 100 ) of 1 .. 10 :
11293: LD_INT 1
11295: PPUSH
11296: LD_INT 100
11298: PPUSH
11299: CALL_OW 12
11303: PUSH
11304: LD_INT 1
11306: DOUBLE
11307: GREATEREQUAL
11308: IFFALSE 11316
11310: LD_INT 10
11312: DOUBLE
11313: LESSEQUAL
11314: IFTRUE 11318
11316: GO 11336
11318: POP
// ar := [ Ar1Base1 , Ar2Base1 ] ; 11 .. 20 :
11319: LD_ADDR_VAR 0 3
11323: PUSH
11324: LD_INT 19
11326: PUSH
11327: LD_INT 15
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: ST_TO_ADDR
11334: GO 11497
11336: LD_INT 11
11338: DOUBLE
11339: GREATEREQUAL
11340: IFFALSE 11348
11342: LD_INT 20
11344: DOUBLE
11345: LESSEQUAL
11346: IFTRUE 11350
11348: GO 11368
11350: POP
// ar := [ Ar1Base2 , Ar2Base2 ] ; 21 .. 30 :
11351: LD_ADDR_VAR 0 3
11355: PUSH
11356: LD_INT 20
11358: PUSH
11359: LD_INT 14
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: ST_TO_ADDR
11366: GO 11497
11368: LD_INT 21
11370: DOUBLE
11371: GREATEREQUAL
11372: IFFALSE 11380
11374: LD_INT 30
11376: DOUBLE
11377: LESSEQUAL
11378: IFTRUE 11382
11380: GO 11400
11382: POP
// ar := [ Ar1Between , Ar2Between ] ; 31 .. 55 :
11383: LD_ADDR_VAR 0 3
11387: PUSH
11388: LD_INT 22
11390: PUSH
11391: LD_INT 16
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: ST_TO_ADDR
11398: GO 11497
11400: LD_INT 31
11402: DOUBLE
11403: GREATEREQUAL
11404: IFFALSE 11412
11406: LD_INT 55
11408: DOUBLE
11409: LESSEQUAL
11410: IFTRUE 11414
11412: GO 11432
11414: POP
// ar := [ Ar1Out2 , Ar2Out2 ] ; 56 .. 80 :
11415: LD_ADDR_VAR 0 3
11419: PUSH
11420: LD_INT 23
11422: PUSH
11423: LD_INT 17
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: ST_TO_ADDR
11430: GO 11497
11432: LD_INT 56
11434: DOUBLE
11435: GREATEREQUAL
11436: IFFALSE 11444
11438: LD_INT 80
11440: DOUBLE
11441: LESSEQUAL
11442: IFTRUE 11446
11444: GO 11464
11446: POP
// ar := [ Ar1Out1 , Ar2Out1 ] ; 81 .. 100 :
11447: LD_ADDR_VAR 0 3
11451: PUSH
11452: LD_INT 21
11454: PUSH
11455: LD_INT 13
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: ST_TO_ADDR
11462: GO 11497
11464: LD_INT 81
11466: DOUBLE
11467: GREATEREQUAL
11468: IFFALSE 11476
11470: LD_INT 100
11472: DOUBLE
11473: LESSEQUAL
11474: IFTRUE 11478
11476: GO 11496
11478: POP
// ar := [ Ar1Out3 , Ar2Out3 ] ; end ; 46 .. 85 :
11479: LD_ADDR_VAR 0 3
11483: PUSH
11484: LD_INT 24
11486: PUSH
11487: LD_INT 18
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: ST_TO_ADDR
11494: GO 11497
11496: POP
11497: GO 11753
11499: LD_INT 46
11501: DOUBLE
11502: GREATEREQUAL
11503: IFFALSE 11511
11505: LD_INT 85
11507: DOUBLE
11508: LESSEQUAL
11509: IFTRUE 11513
11511: GO 11720
11513: POP
// case rand ( 1 , 100 ) of 1 .. 5 :
11514: LD_INT 1
11516: PPUSH
11517: LD_INT 100
11519: PPUSH
11520: CALL_OW 12
11524: PUSH
11525: LD_INT 1
11527: DOUBLE
11528: GREATEREQUAL
11529: IFFALSE 11537
11531: LD_INT 5
11533: DOUBLE
11534: LESSEQUAL
11535: IFTRUE 11539
11537: GO 11557
11539: POP
// ar := [ Ar2Base1 , Ar1Base1 ] ; 6 .. 15 :
11540: LD_ADDR_VAR 0 3
11544: PUSH
11545: LD_INT 15
11547: PUSH
11548: LD_INT 19
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: ST_TO_ADDR
11555: GO 11718
11557: LD_INT 6
11559: DOUBLE
11560: GREATEREQUAL
11561: IFFALSE 11569
11563: LD_INT 15
11565: DOUBLE
11566: LESSEQUAL
11567: IFTRUE 11571
11569: GO 11589
11571: POP
// ar := [ Ar2Base2 , Ar1Base2 ] ; 16 .. 30 :
11572: LD_ADDR_VAR 0 3
11576: PUSH
11577: LD_INT 14
11579: PUSH
11580: LD_INT 20
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: ST_TO_ADDR
11587: GO 11718
11589: LD_INT 16
11591: DOUBLE
11592: GREATEREQUAL
11593: IFFALSE 11601
11595: LD_INT 30
11597: DOUBLE
11598: LESSEQUAL
11599: IFTRUE 11603
11601: GO 11621
11603: POP
// ar := [ Ar2Between , Ar1Between ] ; 31 .. 50 :
11604: LD_ADDR_VAR 0 3
11608: PUSH
11609: LD_INT 16
11611: PUSH
11612: LD_INT 22
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: ST_TO_ADDR
11619: GO 11718
11621: LD_INT 31
11623: DOUBLE
11624: GREATEREQUAL
11625: IFFALSE 11633
11627: LD_INT 50
11629: DOUBLE
11630: LESSEQUAL
11631: IFTRUE 11635
11633: GO 11653
11635: POP
// ar := [ Ar2Out2 , Ar1Out2 ] ; 51 .. 75 :
11636: LD_ADDR_VAR 0 3
11640: PUSH
11641: LD_INT 17
11643: PUSH
11644: LD_INT 23
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: ST_TO_ADDR
11651: GO 11718
11653: LD_INT 51
11655: DOUBLE
11656: GREATEREQUAL
11657: IFFALSE 11665
11659: LD_INT 75
11661: DOUBLE
11662: LESSEQUAL
11663: IFTRUE 11667
11665: GO 11685
11667: POP
// ar := [ Ar2Out1 , Ar1Out1 ] ; 76 .. 100 :
11668: LD_ADDR_VAR 0 3
11672: PUSH
11673: LD_INT 13
11675: PUSH
11676: LD_INT 21
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: ST_TO_ADDR
11683: GO 11718
11685: LD_INT 76
11687: DOUBLE
11688: GREATEREQUAL
11689: IFFALSE 11697
11691: LD_INT 100
11693: DOUBLE
11694: LESSEQUAL
11695: IFTRUE 11699
11697: GO 11717
11699: POP
// ar := [ Ar2Out3 , Ar1Out3 ] ; end ; 86 .. 100 :
11700: LD_ADDR_VAR 0 3
11704: PUSH
11705: LD_INT 18
11707: PUSH
11708: LD_INT 24
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: ST_TO_ADDR
11715: GO 11718
11717: POP
11718: GO 11753
11720: LD_INT 86
11722: DOUBLE
11723: GREATEREQUAL
11724: IFFALSE 11732
11726: LD_INT 100
11728: DOUBLE
11729: LESSEQUAL
11730: IFTRUE 11734
11732: GO 11752
11734: POP
// ar := [ valley , valley ] ; end ;
11735: LD_ADDR_VAR 0 3
11739: PUSH
11740: LD_INT 12
11742: PUSH
11743: LD_INT 12
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: ST_TO_ADDR
11750: GO 11753
11752: POP
// arr1 := arr1 ^ [ ar [ 1 ] ] ;
11753: LD_ADDR_LOC 14
11757: PUSH
11758: LD_LOC 14
11762: PUSH
11763: LD_VAR 0 3
11767: PUSH
11768: LD_INT 1
11770: ARRAY
11771: PUSH
11772: EMPTY
11773: LIST
11774: ADD
11775: ST_TO_ADDR
// arr2 := arr2 ^ [ ar [ 2 ] ] ;
11776: LD_ADDR_LOC 15
11780: PUSH
11781: LD_LOC 15
11785: PUSH
11786: LD_VAR 0 3
11790: PUSH
11791: LD_INT 2
11793: ARRAY
11794: PUSH
11795: EMPTY
11796: LIST
11797: ADD
11798: ST_TO_ADDR
// end ;
11799: GO 11264
11801: POP
11802: POP
// for i := 1 to max_arriving_times div 2 do
11803: LD_ADDR_VAR 0 2
11807: PUSH
11808: DOUBLE
11809: LD_INT 1
11811: DEC
11812: ST_TO_ADDR
11813: LD_EXP 33
11817: PUSH
11818: LD_INT 2
11820: DIV
11821: PUSH
11822: FOR_TO
11823: IFFALSE 11935
// begin p1 := Rand ( 1 , max_arriving_times ) ;
11825: LD_ADDR_VAR 0 4
11829: PUSH
11830: LD_INT 1
11832: PPUSH
11833: LD_EXP 33
11837: PPUSH
11838: CALL_OW 12
11842: ST_TO_ADDR
// p2 := Rand ( 1 , max_arriving_times ) ;
11843: LD_ADDR_VAR 0 5
11847: PUSH
11848: LD_INT 1
11850: PPUSH
11851: LD_EXP 33
11855: PPUSH
11856: CALL_OW 12
11860: ST_TO_ADDR
// pom1 := arr2 [ p1 ] ;
11861: LD_ADDR_VAR 0 6
11865: PUSH
11866: LD_LOC 15
11870: PUSH
11871: LD_VAR 0 4
11875: ARRAY
11876: ST_TO_ADDR
// pom2 := arr2 [ p2 ] ;
11877: LD_ADDR_VAR 0 7
11881: PUSH
11882: LD_LOC 15
11886: PUSH
11887: LD_VAR 0 5
11891: ARRAY
11892: ST_TO_ADDR
// arr2 := Replace ( Replace ( arr2 , p2 , pom1 ) , p1 , pom2 ) ;
11893: LD_ADDR_LOC 15
11897: PUSH
11898: LD_LOC 15
11902: PPUSH
11903: LD_VAR 0 5
11907: PPUSH
11908: LD_VAR 0 6
11912: PPUSH
11913: CALL_OW 1
11917: PPUSH
11918: LD_VAR 0 4
11922: PPUSH
11923: LD_VAR 0 7
11927: PPUSH
11928: CALL_OW 1
11932: ST_TO_ADDR
// end ;
11933: GO 11822
11935: POP
11936: POP
// end ;
11937: LD_VAR 0 1
11941: RET
// every 0 0$1 do
11942: GO 11944
11944: DISABLE
// begin if not max_arriving_times then
11945: LD_EXP 33
11949: NOT
11950: IFFALSE 11954
// exit ;
11952: GO 12037
// if tick >= max_arriving_times [ 1 ] * 0 0$30 then
11954: LD_OWVAR 1
11958: PUSH
11959: LD_EXP 33
11963: PUSH
11964: LD_INT 1
11966: ARRAY
11967: PUSH
11968: LD_INT 1050
11970: MUL
11971: GREATEREQUAL
11972: IFFALSE 12036
// begin new1 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11974: LD_ADDR_LOC 12
11978: PUSH
11979: LD_INT 1
11981: PPUSH
11982: LD_EXP 33
11986: PUSH
11987: LD_INT 1050
11989: MUL
11990: PPUSH
11991: CALL_OW 12
11995: ST_TO_ADDR
// new2 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11996: LD_ADDR_LOC 13
12000: PUSH
12001: LD_INT 1
12003: PPUSH
12004: LD_EXP 33
12008: PUSH
12009: LD_INT 1050
12011: MUL
12012: PPUSH
12013: CALL_OW 12
12017: ST_TO_ADDR
// max_arriving_times := delete ( max_arriving_times , 1 ) ;
12018: LD_ADDR_EXP 33
12022: PUSH
12023: LD_EXP 33
12027: PPUSH
12028: LD_INT 1
12030: PPUSH
12031: CALL_OW 3
12035: ST_TO_ADDR
// end ; enable ;
12036: ENABLE
// end ;
12037: END
// function new_arrival ( pos ) ; var hum ; begin
12038: LD_INT 0
12040: PPUSH
12041: PPUSH
// if def_people_loyality then
12042: LD_EXP 12
12046: IFFALSE 12088
// begin uc_side := second_side [ pos ] ;
12048: LD_ADDR_OWVAR 20
12052: PUSH
12053: LD_EXP 47
12057: PUSH
12058: LD_VAR 0 1
12062: ARRAY
12063: ST_TO_ADDR
// uc_nation := Side_Nations [ positions [ pos ] ] ;
12064: LD_ADDR_OWVAR 21
12068: PUSH
12069: LD_EXP 44
12073: PUSH
12074: LD_EXP 39
12078: PUSH
12079: LD_VAR 0 1
12083: ARRAY
12084: ARRAY
12085: ST_TO_ADDR
// end else
12086: GO 12108
// begin uc_side := second_side ;
12088: LD_ADDR_OWVAR 20
12092: PUSH
12093: LD_EXP 47
12097: ST_TO_ADDR
// uc_nation := third_nation ;
12098: LD_ADDR_OWVAR 21
12102: PUSH
12103: LD_EXP 48
12107: ST_TO_ADDR
// end ; PrepareHuman ( 0 , 0 , initial_level + 1 ) ;
12108: LD_INT 0
12110: PPUSH
12111: LD_INT 0
12113: PPUSH
12114: LD_EXP 29
12118: PUSH
12119: LD_INT 1
12121: PLUS
12122: PPUSH
12123: CALL_OW 380
// hc_class := class_soldier ;
12127: LD_ADDR_OWVAR 28
12131: PUSH
12132: LD_INT 1
12134: ST_TO_ADDR
// hum := CreateHuman ;
12135: LD_ADDR_VAR 0 3
12139: PUSH
12140: CALL_OW 44
12144: ST_TO_ADDR
// if pos = 1 then
12145: LD_VAR 0 1
12149: PUSH
12150: LD_INT 1
12152: EQUAL
12153: IFFALSE 12196
// begin PlaceUnitArea ( hum , arr1 [ 1 ] , true ) ;
12155: LD_VAR 0 3
12159: PPUSH
12160: LD_LOC 14
12164: PUSH
12165: LD_INT 1
12167: ARRAY
12168: PPUSH
12169: LD_INT 1
12171: PPUSH
12172: CALL_OW 49
// arr1 := delete ( arr1 , 1 ) ;
12176: LD_ADDR_LOC 14
12180: PUSH
12181: LD_LOC 14
12185: PPUSH
12186: LD_INT 1
12188: PPUSH
12189: CALL_OW 3
12193: ST_TO_ADDR
// end else
12194: GO 12235
// begin PlaceUnitArea ( hum , arr2 [ 1 ] , true ) ;
12196: LD_VAR 0 3
12200: PPUSH
12201: LD_LOC 15
12205: PUSH
12206: LD_INT 1
12208: ARRAY
12209: PPUSH
12210: LD_INT 1
12212: PPUSH
12213: CALL_OW 49
// arr2 := delete ( arr2 , 1 ) ;
12217: LD_ADDR_LOC 15
12221: PUSH
12222: LD_LOC 15
12226: PPUSH
12227: LD_INT 1
12229: PPUSH
12230: CALL_OW 3
12234: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) until IsPlaced ( hum ) ;
12235: LD_INT 35
12237: PPUSH
12238: CALL_OW 67
12242: LD_VAR 0 3
12246: PPUSH
12247: CALL_OW 305
12251: IFFALSE 12235
// if def_people_loyality then
12253: LD_EXP 12
12257: IFFALSE 12317
// if pos = 1 then
12259: LD_VAR 0 1
12263: PUSH
12264: LD_INT 1
12266: EQUAL
12267: IFFALSE 12287
// free1 := free1 ^ hum else
12269: LD_ADDR_LOC 10
12273: PUSH
12274: LD_LOC 10
12278: PUSH
12279: LD_VAR 0 3
12283: ADD
12284: ST_TO_ADDR
12285: GO 12315
// if pos = 2 then
12287: LD_VAR 0 1
12291: PUSH
12292: LD_INT 2
12294: EQUAL
12295: IFFALSE 12315
// free2 := free2 ^ hum else
12297: LD_ADDR_LOC 11
12301: PUSH
12302: LD_LOC 11
12306: PUSH
12307: LD_VAR 0 3
12311: ADD
12312: ST_TO_ADDR
12313: GO 12315
// else
12315: GO 12333
// free := free ^ hum ;
12317: LD_ADDR_LOC 9
12321: PUSH
12322: LD_LOC 9
12326: PUSH
12327: LD_VAR 0 3
12331: ADD
12332: ST_TO_ADDR
// end ;
12333: LD_VAR 0 2
12337: RET
// every 0 0$0.5 trigger new1 do var d ;
12338: LD_LOC 12
12342: IFFALSE 12375
12344: GO 12346
12346: DISABLE
12347: LD_INT 0
12349: PPUSH
// begin enable ;
12350: ENABLE
// new1 := 0 ;
12351: LD_ADDR_LOC 12
12355: PUSH
12356: LD_INT 0
12358: ST_TO_ADDR
// wait ( d ) ;
12359: LD_VAR 0 1
12363: PPUSH
12364: CALL_OW 67
// new_arrival ( 1 ) ;
12368: LD_INT 1
12370: PPUSH
12371: CALL 12038 0 1
// end ;
12375: PPOPN 1
12377: END
// every 0 0$0.5 trigger new2 do var d ;
12378: LD_LOC 13
12382: IFFALSE 12415
12384: GO 12386
12386: DISABLE
12387: LD_INT 0
12389: PPUSH
// begin enable ;
12390: ENABLE
// new2 := 0 ;
12391: LD_ADDR_LOC 13
12395: PUSH
12396: LD_INT 0
12398: ST_TO_ADDR
// wait ( d ) ;
12399: LD_VAR 0 1
12403: PPUSH
12404: CALL_OW 67
// new_arrival ( 2 ) ;
12408: LD_INT 2
12410: PPUSH
12411: CALL 12038 0 1
// end ;
12415: PPOPN 1
12417: END
// function check_one_side ( un , side ) ; begin
12418: LD_INT 0
12420: PPUSH
// if FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , side ] , [ f_dist , un , 3 ] ] ) then
12421: LD_INT 21
12423: PUSH
12424: LD_INT 1
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 22
12433: PUSH
12434: LD_VAR 0 2
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: LD_INT 91
12445: PUSH
12446: LD_VAR 0 1
12450: PUSH
12451: LD_INT 3
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: LIST
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: LIST
12463: PPUSH
12464: CALL_OW 69
12468: IFFALSE 12482
// result := side else
12470: LD_ADDR_VAR 0 3
12474: PUSH
12475: LD_VAR 0 2
12479: ST_TO_ADDR
12480: GO 12490
// result := 0 ;
12482: LD_ADDR_VAR 0 3
12486: PUSH
12487: LD_INT 0
12489: ST_TO_ADDR
// end ;
12490: LD_VAR 0 3
12494: RET
// function check_two_sides ( un , side1 , side2 ) ; var un1 , s1 , s2 ; begin
12495: LD_INT 0
12497: PPUSH
12498: PPUSH
12499: PPUSH
12500: PPUSH
// s1 := 0 ;
12501: LD_ADDR_VAR 0 6
12505: PUSH
12506: LD_INT 0
12508: ST_TO_ADDR
// s2 := 0 ;
12509: LD_ADDR_VAR 0 7
12513: PUSH
12514: LD_INT 0
12516: ST_TO_ADDR
// for un1 in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_dist , un , 3 ] ] ) do
12517: LD_ADDR_VAR 0 5
12521: PUSH
12522: LD_INT 21
12524: PUSH
12525: LD_INT 1
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: LD_INT 91
12534: PUSH
12535: LD_VAR 0 1
12539: PUSH
12540: LD_INT 3
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: PPUSH
12552: CALL_OW 69
12556: PUSH
12557: FOR_IN
12558: IFFALSE 12626
// begin if GetSide ( un1 ) = side1 then
12560: LD_VAR 0 5
12564: PPUSH
12565: CALL_OW 255
12569: PUSH
12570: LD_VAR 0 2
12574: EQUAL
12575: IFFALSE 12593
// s1 := s1 + 1 else
12577: LD_ADDR_VAR 0 6
12581: PUSH
12582: LD_VAR 0 6
12586: PUSH
12587: LD_INT 1
12589: PLUS
12590: ST_TO_ADDR
12591: GO 12624
// if GetSide ( un1 ) = side2 then
12593: LD_VAR 0 5
12597: PPUSH
12598: CALL_OW 255
12602: PUSH
12603: LD_VAR 0 3
12607: EQUAL
12608: IFFALSE 12624
// s2 := s2 + 1 ;
12610: LD_ADDR_VAR 0 7
12614: PUSH
12615: LD_VAR 0 7
12619: PUSH
12620: LD_INT 1
12622: PLUS
12623: ST_TO_ADDR
// end ;
12624: GO 12557
12626: POP
12627: POP
// if s1 = s2 then
12628: LD_VAR 0 6
12632: PUSH
12633: LD_VAR 0 7
12637: EQUAL
12638: IFFALSE 12650
// result := 0 else
12640: LD_ADDR_VAR 0 4
12644: PUSH
12645: LD_INT 0
12647: ST_TO_ADDR
12648: GO 12680
// if s1 > s2 then
12650: LD_VAR 0 6
12654: PUSH
12655: LD_VAR 0 7
12659: GREATER
12660: IFFALSE 12672
// result := 1 else
12662: LD_ADDR_VAR 0 4
12666: PUSH
12667: LD_INT 1
12669: ST_TO_ADDR
12670: GO 12680
// result := 2 ;
12672: LD_ADDR_VAR 0 4
12676: PUSH
12677: LD_INT 2
12679: ST_TO_ADDR
// end ;
12680: LD_VAR 0 4
12684: RET
// every 0 0$2 do var un ;
12685: GO 12687
12687: DISABLE
12688: LD_INT 0
12690: PPUSH
// begin if def_people_loyality then
12691: LD_EXP 12
12695: IFFALSE 13074
// if not fog_info then
12697: LD_EXP 35
12701: NOT
12702: IFFALSE 12890
// begin if your_side then
12704: LD_OWVAR 2
12708: IFFALSE 12888
// if side_positions [ your_side ] = 1 then
12710: LD_EXP 43
12714: PUSH
12715: LD_OWVAR 2
12719: ARRAY
12720: PUSH
12721: LD_INT 1
12723: EQUAL
12724: IFFALSE 12800
// begin un := UnitFilter ( free1 diff seenby1 , [ f_see , your_side ] ) ;
12726: LD_ADDR_VAR 0 1
12730: PUSH
12731: LD_LOC 10
12735: PUSH
12736: LD_LOC 16
12740: DIFF
12741: PPUSH
12742: LD_INT 101
12744: PUSH
12745: LD_OWVAR 2
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PPUSH
12754: CALL_OW 72
12758: ST_TO_ADDR
// if un then
12759: LD_VAR 0 1
12763: IFFALSE 12798
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12765: LD_VAR 0 1
12769: PUSH
12770: LD_INT 1
12772: ARRAY
12773: PPUSH
12774: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12778: LD_ADDR_LOC 16
12782: PUSH
12783: LD_LOC 16
12787: PUSH
12788: LD_VAR 0 1
12792: PUSH
12793: LD_INT 1
12795: ARRAY
12796: ADD
12797: ST_TO_ADDR
// end ; end else
12798: GO 12888
// if side_positions [ your_side ] = 2 then
12800: LD_EXP 43
12804: PUSH
12805: LD_OWVAR 2
12809: ARRAY
12810: PUSH
12811: LD_INT 2
12813: EQUAL
12814: IFFALSE 12888
// begin un := UnitFilter ( free2 diff seenby2 , [ f_see , your_side ] ) ;
12816: LD_ADDR_VAR 0 1
12820: PUSH
12821: LD_LOC 11
12825: PUSH
12826: LD_LOC 17
12830: DIFF
12831: PPUSH
12832: LD_INT 101
12834: PUSH
12835: LD_OWVAR 2
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PPUSH
12844: CALL_OW 72
12848: ST_TO_ADDR
// if un then
12849: LD_VAR 0 1
12853: IFFALSE 12888
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12855: LD_VAR 0 1
12859: PUSH
12860: LD_INT 1
12862: ARRAY
12863: PPUSH
12864: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
12868: LD_ADDR_LOC 17
12872: PUSH
12873: LD_LOC 17
12877: PUSH
12878: LD_VAR 0 1
12882: PUSH
12883: LD_INT 1
12885: ARRAY
12886: ADD
12887: ST_TO_ADDR
// end ; end ; end else
12888: GO 13074
// begin if your_side then
12890: LD_OWVAR 2
12894: IFFALSE 13074
// if side_positions [ your_side ] = 1 then
12896: LD_EXP 43
12900: PUSH
12901: LD_OWVAR 2
12905: ARRAY
12906: PUSH
12907: LD_INT 1
12909: EQUAL
12910: IFFALSE 12986
// begin un := UnitFilter ( free diff seenby1 , [ f_see , your_side ] ) ;
12912: LD_ADDR_VAR 0 1
12916: PUSH
12917: LD_LOC 9
12921: PUSH
12922: LD_LOC 16
12926: DIFF
12927: PPUSH
12928: LD_INT 101
12930: PUSH
12931: LD_OWVAR 2
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PPUSH
12940: CALL_OW 72
12944: ST_TO_ADDR
// if un then
12945: LD_VAR 0 1
12949: IFFALSE 12984
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12951: LD_VAR 0 1
12955: PUSH
12956: LD_INT 1
12958: ARRAY
12959: PPUSH
12960: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12964: LD_ADDR_LOC 16
12968: PUSH
12969: LD_LOC 16
12973: PUSH
12974: LD_VAR 0 1
12978: PUSH
12979: LD_INT 1
12981: ARRAY
12982: ADD
12983: ST_TO_ADDR
// end ; end else
12984: GO 13074
// if side_positions [ your_side ] = 2 then
12986: LD_EXP 43
12990: PUSH
12991: LD_OWVAR 2
12995: ARRAY
12996: PUSH
12997: LD_INT 2
12999: EQUAL
13000: IFFALSE 13074
// begin un := UnitFilter ( free diff seenby2 , [ f_see , your_side ] ) ;
13002: LD_ADDR_VAR 0 1
13006: PUSH
13007: LD_LOC 9
13011: PUSH
13012: LD_LOC 17
13016: DIFF
13017: PPUSH
13018: LD_INT 101
13020: PUSH
13021: LD_OWVAR 2
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PPUSH
13030: CALL_OW 72
13034: ST_TO_ADDR
// if un then
13035: LD_VAR 0 1
13039: IFFALSE 13074
// begin CenterNowOnUnits ( un [ 1 ] ) ;
13041: LD_VAR 0 1
13045: PUSH
13046: LD_INT 1
13048: ARRAY
13049: PPUSH
13050: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
13054: LD_ADDR_LOC 17
13058: PUSH
13059: LD_LOC 17
13063: PUSH
13064: LD_VAR 0 1
13068: PUSH
13069: LD_INT 1
13071: ARRAY
13072: ADD
13073: ST_TO_ADDR
// end ; end ; end ; enable ;
13074: ENABLE
// end ;
13075: PPOPN 1
13077: END
// every 0 0$0.5 do var un , s ;
13078: GO 13080
13080: DISABLE
13081: LD_INT 0
13083: PPUSH
13084: PPUSH
// begin if def_people_loyality then
13085: LD_EXP 12
13089: IFFALSE 13295
// begin for un in free1 do
13091: LD_ADDR_VAR 0 1
13095: PUSH
13096: LD_LOC 10
13100: PUSH
13101: FOR_IN
13102: IFFALSE 13190
// if not IsLive ( un ) then
13104: LD_VAR 0 1
13108: PPUSH
13109: CALL_OW 300
13113: NOT
13114: IFFALSE 13134
// free1 := free1 diff un else
13116: LD_ADDR_LOC 10
13120: PUSH
13121: LD_LOC 10
13125: PUSH
13126: LD_VAR 0 1
13130: DIFF
13131: ST_TO_ADDR
13132: GO 13188
// if check_one_side ( un , positions [ 1 ] ) then
13134: LD_VAR 0 1
13138: PPUSH
13139: LD_EXP 39
13143: PUSH
13144: LD_INT 1
13146: ARRAY
13147: PPUSH
13148: CALL 12418 0 2
13152: IFFALSE 13188
// begin SetSide ( un , positions [ 1 ] ) ;
13154: LD_VAR 0 1
13158: PPUSH
13159: LD_EXP 39
13163: PUSH
13164: LD_INT 1
13166: ARRAY
13167: PPUSH
13168: CALL_OW 235
// free1 := free1 diff un ;
13172: LD_ADDR_LOC 10
13176: PUSH
13177: LD_LOC 10
13181: PUSH
13182: LD_VAR 0 1
13186: DIFF
13187: ST_TO_ADDR
// end ;
13188: GO 13101
13190: POP
13191: POP
// for un in free2 do
13192: LD_ADDR_VAR 0 1
13196: PUSH
13197: LD_LOC 11
13201: PUSH
13202: FOR_IN
13203: IFFALSE 13291
// if not IsLive ( un ) then
13205: LD_VAR 0 1
13209: PPUSH
13210: CALL_OW 300
13214: NOT
13215: IFFALSE 13235
// free2 := free2 diff un else
13217: LD_ADDR_LOC 11
13221: PUSH
13222: LD_LOC 11
13226: PUSH
13227: LD_VAR 0 1
13231: DIFF
13232: ST_TO_ADDR
13233: GO 13289
// if check_one_side ( un , positions [ 2 ] ) then
13235: LD_VAR 0 1
13239: PPUSH
13240: LD_EXP 39
13244: PUSH
13245: LD_INT 2
13247: ARRAY
13248: PPUSH
13249: CALL 12418 0 2
13253: IFFALSE 13289
// begin SetSide ( un , positions [ 2 ] ) ;
13255: LD_VAR 0 1
13259: PPUSH
13260: LD_EXP 39
13264: PUSH
13265: LD_INT 2
13267: ARRAY
13268: PPUSH
13269: CALL_OW 235
// free2 := free2 diff un ;
13273: LD_ADDR_LOC 11
13277: PUSH
13278: LD_LOC 11
13282: PUSH
13283: LD_VAR 0 1
13287: DIFF
13288: ST_TO_ADDR
// end ;
13289: GO 13202
13291: POP
13292: POP
// end else
13293: GO 13417
// begin for un in free do
13295: LD_ADDR_VAR 0 1
13299: PUSH
13300: LD_LOC 9
13304: PUSH
13305: FOR_IN
13306: IFFALSE 13415
// if not IsLive ( un ) then
13308: LD_VAR 0 1
13312: PPUSH
13313: CALL_OW 300
13317: NOT
13318: IFFALSE 13338
// free := free diff un else
13320: LD_ADDR_LOC 9
13324: PUSH
13325: LD_LOC 9
13329: PUSH
13330: LD_VAR 0 1
13334: DIFF
13335: ST_TO_ADDR
13336: GO 13413
// begin s := check_two_sides ( un , positions [ 1 ] , positions [ 2 ] ) ;
13338: LD_ADDR_VAR 0 2
13342: PUSH
13343: LD_VAR 0 1
13347: PPUSH
13348: LD_EXP 39
13352: PUSH
13353: LD_INT 1
13355: ARRAY
13356: PPUSH
13357: LD_EXP 39
13361: PUSH
13362: LD_INT 2
13364: ARRAY
13365: PPUSH
13366: CALL 12495 0 3
13370: ST_TO_ADDR
// if s then
13371: LD_VAR 0 2
13375: IFFALSE 13413
// begin SetSide ( un , positions [ s ] ) ;
13377: LD_VAR 0 1
13381: PPUSH
13382: LD_EXP 39
13386: PUSH
13387: LD_VAR 0 2
13391: ARRAY
13392: PPUSH
13393: CALL_OW 235
// free := free diff un ;
13397: LD_ADDR_LOC 9
13401: PUSH
13402: LD_LOC 9
13406: PUSH
13407: LD_VAR 0 1
13411: DIFF
13412: ST_TO_ADDR
// end ; end ;
13413: GO 13305
13415: POP
13416: POP
// end ; enable ;
13417: ENABLE
// end ; end_of_file
13418: PPOPN 2
13420: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
13421: LD_INT 0
13423: PPUSH
13424: PPUSH
13425: PPUSH
// enable ( 600 ) ;
13426: LD_INT 600
13428: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
13429: LD_ADDR_VAR 0 2
13433: PUSH
13434: DOUBLE
13435: LD_INT 1
13437: DEC
13438: ST_TO_ADDR
13439: LD_EXP 65
13443: PUSH
13444: FOR_TO
13445: IFFALSE 13600
// if Position_Sides [ i ] then
13447: LD_EXP 46
13451: PUSH
13452: LD_VAR 0 2
13456: ARRAY
13457: IFFALSE 13598
// for j := 1 to 8 do
13459: LD_ADDR_VAR 0 3
13463: PUSH
13464: DOUBLE
13465: LD_INT 1
13467: DEC
13468: ST_TO_ADDR
13469: LD_INT 8
13471: PUSH
13472: FOR_TO
13473: IFFALSE 13596
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13475: LD_EXP 43
13479: PUSH
13480: LD_VAR 0 3
13484: ARRAY
13485: PUSH
13486: LD_EXP 40
13490: PUSH
13491: LD_EXP 46
13495: PUSH
13496: LD_VAR 0 2
13500: ARRAY
13501: ARRAY
13502: PUSH
13503: LD_EXP 40
13507: PUSH
13508: LD_VAR 0 3
13512: ARRAY
13513: NONEQUAL
13514: PUSH
13515: LD_EXP 45
13519: NOT
13520: PUSH
13521: LD_EXP 46
13525: PUSH
13526: LD_VAR 0 2
13530: ARRAY
13531: PUSH
13532: LD_VAR 0 3
13536: NONEQUAL
13537: AND
13538: OR
13539: AND
13540: IFFALSE 13564
// HideArea ( j , BuildUpAreas [ i ] ) else
13542: LD_VAR 0 3
13546: PPUSH
13547: LD_EXP 65
13551: PUSH
13552: LD_VAR 0 2
13556: ARRAY
13557: PPUSH
13558: CALL_OW 333
13562: GO 13594
// if ( j = your_side ) then
13564: LD_VAR 0 3
13568: PUSH
13569: LD_OWVAR 2
13573: EQUAL
13574: IFFALSE 13594
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
13576: LD_EXP 65
13580: PUSH
13581: LD_VAR 0 2
13585: ARRAY
13586: PPUSH
13587: LD_INT 5
13589: PPUSH
13590: CALL_OW 424
13594: GO 13472
13596: POP
13597: POP
13598: GO 13444
13600: POP
13601: POP
// end ;
13602: LD_VAR 0 1
13606: RET
// export function EndBuildUp ; var i , j ; begin
13607: LD_INT 0
13609: PPUSH
13610: PPUSH
13611: PPUSH
// disable ( 600 ) ;
13612: LD_INT 600
13614: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
13615: LD_ADDR_VAR 0 2
13619: PUSH
13620: DOUBLE
13621: LD_INT 1
13623: DEC
13624: ST_TO_ADDR
13625: LD_EXP 65
13629: PUSH
13630: FOR_TO
13631: IFFALSE 13786
// if Position_Sides [ i ] then
13633: LD_EXP 46
13637: PUSH
13638: LD_VAR 0 2
13642: ARRAY
13643: IFFALSE 13784
// for j := 1 to 8 do
13645: LD_ADDR_VAR 0 3
13649: PUSH
13650: DOUBLE
13651: LD_INT 1
13653: DEC
13654: ST_TO_ADDR
13655: LD_INT 8
13657: PUSH
13658: FOR_TO
13659: IFFALSE 13782
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13661: LD_EXP 43
13665: PUSH
13666: LD_VAR 0 3
13670: ARRAY
13671: PUSH
13672: LD_EXP 40
13676: PUSH
13677: LD_EXP 46
13681: PUSH
13682: LD_VAR 0 2
13686: ARRAY
13687: ARRAY
13688: PUSH
13689: LD_EXP 40
13693: PUSH
13694: LD_VAR 0 3
13698: ARRAY
13699: NONEQUAL
13700: PUSH
13701: LD_EXP 45
13705: NOT
13706: PUSH
13707: LD_EXP 46
13711: PUSH
13712: LD_VAR 0 2
13716: ARRAY
13717: PUSH
13718: LD_VAR 0 3
13722: NONEQUAL
13723: AND
13724: OR
13725: AND
13726: IFFALSE 13750
// ShowArea ( j , BuildUpAreas [ i ] ) else
13728: LD_VAR 0 3
13732: PPUSH
13733: LD_EXP 65
13737: PUSH
13738: LD_VAR 0 2
13742: ARRAY
13743: PPUSH
13744: CALL_OW 334
13748: GO 13780
// if ( j = your_side ) then
13750: LD_VAR 0 3
13754: PUSH
13755: LD_OWVAR 2
13759: EQUAL
13760: IFFALSE 13780
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
13762: LD_EXP 65
13766: PUSH
13767: LD_VAR 0 2
13771: ARRAY
13772: PPUSH
13773: LD_INT 0
13775: PPUSH
13776: CALL_OW 424
13780: GO 13658
13782: POP
13783: POP
13784: GO 13630
13786: POP
13787: POP
// end ;
13788: LD_VAR 0 1
13792: RET
// every 5 marked 600 do var i , un ;
13793: GO 13795
13795: DISABLE
13796: LD_INT 0
13798: PPUSH
13799: PPUSH
// begin for i := 1 to BuildUpAreas do
13800: LD_ADDR_VAR 0 1
13804: PUSH
13805: DOUBLE
13806: LD_INT 1
13808: DEC
13809: ST_TO_ADDR
13810: LD_EXP 65
13814: PUSH
13815: FOR_TO
13816: IFFALSE 13971
// if Position_Sides [ i ] then
13818: LD_EXP 46
13822: PUSH
13823: LD_VAR 0 1
13827: ARRAY
13828: IFFALSE 13969
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13830: LD_ADDR_VAR 0 2
13834: PUSH
13835: LD_EXP 65
13839: PUSH
13840: LD_VAR 0 1
13844: ARRAY
13845: PPUSH
13846: LD_INT 2
13848: PUSH
13849: LD_INT 21
13851: PUSH
13852: LD_INT 1
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PUSH
13859: LD_INT 21
13861: PUSH
13862: LD_INT 2
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: LIST
13873: PUSH
13874: LD_INT 22
13876: PUSH
13877: LD_OWVAR 2
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: PPUSH
13890: CALL_OW 70
13894: PUSH
13895: FOR_IN
13896: IFFALSE 13967
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
13898: LD_EXP 40
13902: PUSH
13903: LD_EXP 46
13907: PUSH
13908: LD_VAR 0 1
13912: ARRAY
13913: ARRAY
13914: PUSH
13915: LD_EXP 40
13919: PUSH
13920: LD_OWVAR 2
13924: ARRAY
13925: NONEQUAL
13926: PUSH
13927: LD_EXP 45
13931: NOT
13932: PUSH
13933: LD_EXP 46
13937: PUSH
13938: LD_VAR 0 1
13942: ARRAY
13943: PUSH
13944: LD_OWVAR 2
13948: NONEQUAL
13949: AND
13950: OR
13951: IFFALSE 13965
// ComMoveToArea ( un , BuildUpEscape ) ;
13953: LD_VAR 0 2
13957: PPUSH
13958: LD_INT 28
13960: PPUSH
13961: CALL_OW 113
13965: GO 13895
13967: POP
13968: POP
13969: GO 13815
13971: POP
13972: POP
// enable ;
13973: ENABLE
// end ;
13974: PPOPN 2
13976: END
// every 5 5$00 do
13977: GO 13979
13979: DISABLE
// if ( def_builduptime = 1 ) then
13980: LD_EXP 17
13984: PUSH
13985: LD_INT 1
13987: EQUAL
13988: IFFALSE 13994
// EndBuildUp ;
13990: CALL 13607 0 0
13994: END
// every 10 10$00 do
13995: GO 13997
13997: DISABLE
// if ( def_builduptime = 2 ) then
13998: LD_EXP 17
14002: PUSH
14003: LD_INT 2
14005: EQUAL
14006: IFFALSE 14012
// EndBuildUp ;
14008: CALL 13607 0 0
14012: END
// every 15 15$00 do
14013: GO 14015
14015: DISABLE
// if ( def_builduptime = 3 ) then
14016: LD_EXP 17
14020: PUSH
14021: LD_INT 3
14023: EQUAL
14024: IFFALSE 14030
// EndBuildUp ; end_of_file
14026: CALL 13607 0 0
14030: END
// export Game_Type , def_game_rules ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
14031: LD_INT 0
14033: PPUSH
14034: PPUSH
// if ( not IAmSpec ) then
14035: CALL_OW 531
14039: NOT
14040: IFFALSE 14056
// Result := Limits_Info ^  ;
14042: LD_ADDR_VAR 0 1
14046: PUSH
14047: LD_LOC 25
14051: PUSH
14052: LD_STRING 
14054: ADD
14055: ST_TO_ADDR
// for i := 1 to 8 do
14056: LD_ADDR_VAR 0 2
14060: PUSH
14061: DOUBLE
14062: LD_INT 1
14064: DEC
14065: ST_TO_ADDR
14066: LD_INT 8
14068: PUSH
14069: FOR_TO
14070: IFFALSE 14115
// if Cheaters [ i ] then
14072: LD_LOC 26
14076: PUSH
14077: LD_VAR 0 2
14081: ARRAY
14082: IFFALSE 14113
// Result := Result ^ [ #Cheater , i , i ] ;
14084: LD_ADDR_VAR 0 1
14088: PUSH
14089: LD_VAR 0 1
14093: PUSH
14094: LD_STRING #Cheater
14096: PUSH
14097: LD_VAR 0 2
14101: PUSH
14102: LD_VAR 0 2
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: LIST
14111: ADD
14112: ST_TO_ADDR
14113: GO 14069
14115: POP
14116: POP
// end ;
14117: LD_VAR 0 1
14121: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
14122: LD_INT 0
14124: PPUSH
14125: PPUSH
14126: PPUSH
14127: PPUSH
14128: PPUSH
// case Game_Type of 10 :
14129: LD_EXP 66
14133: PUSH
14134: LD_INT 10
14136: DOUBLE
14137: EQUAL
14138: IFTRUE 14142
14140: GO 14153
14142: POP
// def_game_rules := 1 ; 11 :
14143: LD_ADDR_EXP 67
14147: PUSH
14148: LD_INT 1
14150: ST_TO_ADDR
14151: GO 14173
14153: LD_INT 11
14155: DOUBLE
14156: EQUAL
14157: IFTRUE 14161
14159: GO 14172
14161: POP
// def_game_rules := 3 ; end ;
14162: LD_ADDR_EXP 67
14166: PUSH
14167: LD_INT 3
14169: ST_TO_ADDR
14170: GO 14173
14172: POP
// case def_game_rules of 0 :
14173: LD_EXP 67
14177: PUSH
14178: LD_INT 0
14180: DOUBLE
14181: EQUAL
14182: IFTRUE 14186
14184: GO 14191
14186: POP
// exit ; 1 :
14187: GO 14799
14189: GO 14699
14191: LD_INT 1
14193: DOUBLE
14194: EQUAL
14195: IFTRUE 14199
14197: GO 14431
14199: POP
// begin def_main_base = 1 ;
14200: LD_ADDR_EXP 1
14204: PUSH
14205: LD_INT 1
14207: ST_TO_ADDR
// def_secondary_base = 0 ;
14208: LD_ADDR_EXP 2
14212: PUSH
14213: LD_INT 0
14215: ST_TO_ADDR
// def_defence_level = 1 ;
14216: LD_ADDR_EXP 3
14220: PUSH
14221: LD_INT 1
14223: ST_TO_ADDR
// def_amount_of_people = 2 ;
14224: LD_ADDR_EXP 4
14228: PUSH
14229: LD_INT 2
14231: ST_TO_ADDR
// def_initial_level = 1 ;
14232: LD_ADDR_EXP 5
14236: PUSH
14237: LD_INT 1
14239: ST_TO_ADDR
// def_main_deposits = 2 ;
14240: LD_ADDR_EXP 6
14244: PUSH
14245: LD_INT 2
14247: ST_TO_ADDR
// def_secondary_deposits = 1 ;
14248: LD_ADDR_EXP 7
14252: PUSH
14253: LD_INT 1
14255: ST_TO_ADDR
// def_siberite_detection = 1 ;
14256: LD_ADDR_EXP 8
14260: PUSH
14261: LD_INT 1
14263: ST_TO_ADDR
// def_starting_resources = 2 ;
14264: LD_ADDR_EXP 9
14268: PUSH
14269: LD_INT 2
14271: ST_TO_ADDR
// def_shipments_density = 1 ;
14272: LD_ADDR_EXP 10
14276: PUSH
14277: LD_INT 1
14279: ST_TO_ADDR
// def_people_arrivals = 0 ;
14280: LD_ADDR_EXP 11
14284: PUSH
14285: LD_INT 0
14287: ST_TO_ADDR
// def_people_loyality = 0 ;
14288: LD_ADDR_EXP 12
14292: PUSH
14293: LD_INT 0
14295: ST_TO_ADDR
// def_people_info = 0 ;
14296: LD_ADDR_EXP 13
14300: PUSH
14301: LD_INT 0
14303: ST_TO_ADDR
// def_morale_flags = 1 ;
14304: LD_ADDR_EXP 14
14308: PUSH
14309: LD_INT 1
14311: ST_TO_ADDR
// def_siberite_bomb = 0 ;
14312: LD_ADDR_EXP 15
14316: PUSH
14317: LD_INT 0
14319: ST_TO_ADDR
// def_builduptime = 2 ;
14320: LD_ADDR_EXP 17
14324: PUSH
14325: LD_INT 2
14327: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
14328: LD_ADDR_VAR 0 2
14332: PUSH
14333: EMPTY
14334: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14335: LD_ADDR_VAR 0 3
14339: PUSH
14340: EMPTY
14341: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14342: LD_ADDR_LOC 20
14346: PUSH
14347: EMPTY
14348: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14349: LD_ADDR_LOC 21
14353: PUSH
14354: EMPTY
14355: ST_TO_ADDR
// Banned_Controls := [ ] ;
14356: LD_ADDR_LOC 22
14360: PUSH
14361: EMPTY
14362: ST_TO_ADDR
// Banned_Engines := [ ] ;
14363: LD_ADDR_LOC 23
14367: PUSH
14368: EMPTY
14369: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14370: LD_ADDR_LOC 18
14374: PUSH
14375: LD_INT 37
14377: PUSH
14378: EMPTY
14379: LIST
14380: PUSH
14381: LD_INT 4
14383: PUSH
14384: LD_INT 5
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PUSH
14391: LD_INT 31
14393: PUSH
14394: LD_INT 32
14396: PUSH
14397: LD_INT 33
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: LIST
14409: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
14410: LD_ADDR_LOC 19
14414: PUSH
14415: LD_INT 2
14417: PUSH
14418: LD_INT 2
14420: PUSH
14421: LD_INT 4
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: LIST
14428: ST_TO_ADDR
// end ; 3 :
14429: GO 14699
14431: LD_INT 3
14433: DOUBLE
14434: EQUAL
14435: IFTRUE 14439
14437: GO 14698
14439: POP
// begin def_main_base = 1 ;
14440: LD_ADDR_EXP 1
14444: PUSH
14445: LD_INT 1
14447: ST_TO_ADDR
// def_secondary_base = 0 ;
14448: LD_ADDR_EXP 2
14452: PUSH
14453: LD_INT 0
14455: ST_TO_ADDR
// def_defence_level = 0 ;
14456: LD_ADDR_EXP 3
14460: PUSH
14461: LD_INT 0
14463: ST_TO_ADDR
// def_amount_of_people = 2 ;
14464: LD_ADDR_EXP 4
14468: PUSH
14469: LD_INT 2
14471: ST_TO_ADDR
// def_initial_level = 3 ;
14472: LD_ADDR_EXP 5
14476: PUSH
14477: LD_INT 3
14479: ST_TO_ADDR
// def_main_deposits = 2 ;
14480: LD_ADDR_EXP 6
14484: PUSH
14485: LD_INT 2
14487: ST_TO_ADDR
// def_secondary_deposits = 1 ;
14488: LD_ADDR_EXP 7
14492: PUSH
14493: LD_INT 1
14495: ST_TO_ADDR
// def_siberite_detection = 1 ;
14496: LD_ADDR_EXP 8
14500: PUSH
14501: LD_INT 1
14503: ST_TO_ADDR
// def_starting_resources = 3 ;
14504: LD_ADDR_EXP 9
14508: PUSH
14509: LD_INT 3
14511: ST_TO_ADDR
// def_shipments_density = 1 ;
14512: LD_ADDR_EXP 10
14516: PUSH
14517: LD_INT 1
14519: ST_TO_ADDR
// def_people_arrivals = 0 ;
14520: LD_ADDR_EXP 11
14524: PUSH
14525: LD_INT 0
14527: ST_TO_ADDR
// def_people_loyality = 0 ;
14528: LD_ADDR_EXP 12
14532: PUSH
14533: LD_INT 0
14535: ST_TO_ADDR
// def_people_info = 0 ;
14536: LD_ADDR_EXP 13
14540: PUSH
14541: LD_INT 0
14543: ST_TO_ADDR
// def_morale_flags = 0 ;
14544: LD_ADDR_EXP 14
14548: PUSH
14549: LD_INT 0
14551: ST_TO_ADDR
// def_siberite_bomb = 0 ;
14552: LD_ADDR_EXP 15
14556: PUSH
14557: LD_INT 0
14559: ST_TO_ADDR
// def_builduptime = 1 ;
14560: LD_ADDR_EXP 17
14564: PUSH
14565: LD_INT 1
14567: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14568: LD_ADDR_VAR 0 2
14572: PUSH
14573: LD_INT 23
14575: PUSH
14576: EMPTY
14577: LIST
14578: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
14579: LD_ADDR_VAR 0 3
14583: PUSH
14584: LD_INT 2
14586: PUSH
14587: LD_INT 37
14589: PUSH
14590: LD_INT 32
14592: PUSH
14593: LD_INT 33
14595: PUSH
14596: LD_INT 36
14598: PUSH
14599: LD_INT 16
14601: PUSH
14602: LD_INT 23
14604: PUSH
14605: LD_INT 21
14607: PUSH
14608: LD_INT 18
14610: PUSH
14611: LD_INT 22
14613: PUSH
14614: LD_INT 20
14616: PUSH
14617: LD_INT 19
14619: PUSH
14620: LD_INT 25
14622: PUSH
14623: LD_INT 17
14625: PUSH
14626: LD_INT 24
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14646: LD_ADDR_LOC 20
14650: PUSH
14651: EMPTY
14652: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14653: LD_ADDR_LOC 21
14657: PUSH
14658: EMPTY
14659: ST_TO_ADDR
// Banned_Controls := [ ] ;
14660: LD_ADDR_LOC 22
14664: PUSH
14665: EMPTY
14666: ST_TO_ADDR
// Banned_Engines := [ ] ;
14667: LD_ADDR_LOC 23
14671: PUSH
14672: EMPTY
14673: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14674: LD_ADDR_LOC 18
14678: PUSH
14679: EMPTY
14680: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14681: LD_ADDR_LOC 19
14685: PUSH
14686: EMPTY
14687: ST_TO_ADDR
// No_Mechs := true ;
14688: LD_ADDR_EXP 68
14692: PUSH
14693: LD_INT 1
14695: ST_TO_ADDR
// end ; end ;
14696: GO 14699
14698: POP
// for i := 1 to 8 do
14699: LD_ADDR_VAR 0 4
14703: PUSH
14704: DOUBLE
14705: LD_INT 1
14707: DEC
14708: ST_TO_ADDR
14709: LD_INT 8
14711: PUSH
14712: FOR_TO
14713: IFFALSE 14797
// if Side_Positions [ i ] then
14715: LD_EXP 43
14719: PUSH
14720: LD_VAR 0 4
14724: ARRAY
14725: IFFALSE 14795
// begin for j in Unavailable_Techs do
14727: LD_ADDR_VAR 0 5
14731: PUSH
14732: LD_VAR 0 2
14736: PUSH
14737: FOR_IN
14738: IFFALSE 14759
// SetTech ( j , i , 0 ) ;
14740: LD_VAR 0 5
14744: PPUSH
14745: LD_VAR 0 4
14749: PPUSH
14750: LD_INT 0
14752: PPUSH
14753: CALL_OW 322
14757: GO 14737
14759: POP
14760: POP
// for j in Unavailable_Builds do
14761: LD_ADDR_VAR 0 5
14765: PUSH
14766: LD_VAR 0 3
14770: PUSH
14771: FOR_IN
14772: IFFALSE 14793
// SetRestrict ( j , i , 0 ) ;
14774: LD_VAR 0 5
14778: PPUSH
14779: LD_VAR 0 4
14783: PPUSH
14784: LD_INT 0
14786: PPUSH
14787: CALL_OW 324
14791: GO 14771
14793: POP
14794: POP
// end ;
14795: GO 14712
14797: POP
14798: POP
// end ;
14799: LD_VAR 0 1
14803: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
14804: LD_INT 0
14806: PPUSH
14807: PPUSH
14808: PPUSH
14809: PPUSH
14810: PPUSH
14811: PPUSH
14812: PPUSH
// for i := 1 to Restricted_Builds do
14813: LD_ADDR_VAR 0 2
14817: PUSH
14818: DOUBLE
14819: LD_INT 1
14821: DEC
14822: ST_TO_ADDR
14823: LD_LOC 18
14827: PUSH
14828: FOR_TO
14829: IFFALSE 15139
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
14831: LD_LOC 18
14835: PUSH
14836: LD_VAR 0 2
14840: ARRAY
14841: PUSH
14842: LD_INT 1
14844: ARRAY
14845: PUSH
14846: LD_INT 31
14848: DOUBLE
14849: EQUAL
14850: IFTRUE 14866
14852: LD_INT 32
14854: DOUBLE
14855: EQUAL
14856: IFTRUE 14866
14858: LD_INT 33
14860: DOUBLE
14861: EQUAL
14862: IFTRUE 14866
14864: GO 14877
14866: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
14867: LD_ADDR_VAR 0 6
14871: PUSH
14872: LD_STRING #Turrets
14874: ST_TO_ADDR
14875: GO 14922
14877: LD_INT 4
14879: DOUBLE
14880: EQUAL
14881: IFTRUE 14891
14883: LD_INT 5
14885: DOUBLE
14886: EQUAL
14887: IFTRUE 14891
14889: GO 14902
14891: POP
// btype := #Armouries ; b_Behemoth :
14892: LD_ADDR_VAR 0 6
14896: PUSH
14897: LD_STRING #Armouries
14899: ST_TO_ADDR
14900: GO 14922
14902: LD_INT 37
14904: DOUBLE
14905: EQUAL
14906: IFTRUE 14910
14908: GO 14921
14910: POP
// btype := #Behemoths ; end ;
14911: LD_ADDR_VAR 0 6
14915: PUSH
14916: LD_STRING #Behemoths
14918: ST_TO_ADDR
14919: GO 14922
14921: POP
// list := [ ] ;
14922: LD_ADDR_VAR 0 7
14926: PUSH
14927: EMPTY
14928: ST_TO_ADDR
// for j := 1 to 8 do
14929: LD_ADDR_VAR 0 3
14933: PUSH
14934: DOUBLE
14935: LD_INT 1
14937: DEC
14938: ST_TO_ADDR
14939: LD_INT 8
14941: PUSH
14942: FOR_TO
14943: IFFALSE 15036
// if Side_Positions [ j ] then
14945: LD_EXP 43
14949: PUSH
14950: LD_VAR 0 3
14954: ARRAY
14955: IFFALSE 15034
// begin amount := 0 ;
14957: LD_ADDR_VAR 0 5
14961: PUSH
14962: LD_INT 0
14964: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
14965: LD_ADDR_VAR 0 4
14969: PUSH
14970: LD_LOC 18
14974: PUSH
14975: LD_VAR 0 2
14979: ARRAY
14980: PUSH
14981: FOR_IN
14982: IFFALSE 15030
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
14984: LD_ADDR_VAR 0 5
14988: PUSH
14989: LD_VAR 0 5
14993: PUSH
14994: LD_INT 22
14996: PUSH
14997: LD_VAR 0 3
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: LD_INT 30
15008: PUSH
15009: LD_VAR 0 4
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PPUSH
15022: CALL_OW 69
15026: PLUS
15027: ST_TO_ADDR
15028: GO 14981
15030: POP
15031: POP
// break ;
15032: GO 15036
// end ;
15034: GO 14942
15036: POP
15037: POP
// list := [ ] ;
15038: LD_ADDR_VAR 0 7
15042: PUSH
15043: EMPTY
15044: ST_TO_ADDR
// for j := 1 to 8 do
15045: LD_ADDR_VAR 0 3
15049: PUSH
15050: DOUBLE
15051: LD_INT 1
15053: DEC
15054: ST_TO_ADDR
15055: LD_INT 8
15057: PUSH
15058: FOR_TO
15059: IFFALSE 15079
// list := list ^ amount ;
15061: LD_ADDR_VAR 0 7
15065: PUSH
15066: LD_VAR 0 7
15070: PUSH
15071: LD_VAR 0 5
15075: ADD
15076: ST_TO_ADDR
15077: GO 15058
15079: POP
15080: POP
// Already_Built := Already_Built ^ [ list ] ;
15081: LD_ADDR_LOC 24
15085: PUSH
15086: LD_LOC 24
15090: PUSH
15091: LD_VAR 0 7
15095: PUSH
15096: EMPTY
15097: LIST
15098: ADD
15099: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
15100: LD_ADDR_LOC 25
15104: PUSH
15105: LD_LOC 25
15109: PUSH
15110: LD_VAR 0 6
15114: PUSH
15115: LD_VAR 0 5
15119: PUSH
15120: LD_LOC 19
15124: PUSH
15125: LD_VAR 0 2
15129: ARRAY
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: LIST
15135: ADD
15136: ST_TO_ADDR
// end ;
15137: GO 14828
15139: POP
15140: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15141: LD_ADDR_LOC 26
15145: PUSH
15146: LD_INT 0
15148: PUSH
15149: LD_INT 0
15151: PUSH
15152: LD_INT 0
15154: PUSH
15155: LD_INT 0
15157: PUSH
15158: LD_INT 0
15160: PUSH
15161: LD_INT 0
15163: PUSH
15164: LD_INT 0
15166: PUSH
15167: LD_INT 0
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: ST_TO_ADDR
// if Limits_Info then
15180: LD_LOC 25
15184: IFFALSE 15200
// Limits_Info := #Limits ^ Limits_Info ;
15186: LD_ADDR_LOC 25
15190: PUSH
15191: LD_STRING #Limits
15193: PUSH
15194: LD_LOC 25
15198: ADD
15199: ST_TO_ADDR
// end ;
15200: LD_VAR 0 1
15204: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
15205: LD_INT 0
15207: PPUSH
15208: PPUSH
15209: PPUSH
15210: PPUSH
// for i := 1 to Restricted_Builds do
15211: LD_ADDR_VAR 0 7
15215: PUSH
15216: DOUBLE
15217: LD_INT 1
15219: DEC
15220: ST_TO_ADDR
15221: LD_LOC 18
15225: PUSH
15226: FOR_TO
15227: IFFALSE 15650
// if BType in Restricted_Builds [ i ] then
15229: LD_VAR 0 2
15233: PUSH
15234: LD_LOC 18
15238: PUSH
15239: LD_VAR 0 7
15243: ARRAY
15244: IN
15245: IFFALSE 15648
// begin if old_side then
15247: LD_VAR 0 4
15251: IFFALSE 15377
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
15253: LD_LOC 24
15257: PUSH
15258: LD_VAR 0 7
15262: ARRAY
15263: PUSH
15264: LD_VAR 0 3
15268: ARRAY
15269: PUSH
15270: LD_VAR 0 5
15274: PLUS
15275: PUSH
15276: LD_LOC 19
15280: PUSH
15281: LD_VAR 0 7
15285: ARRAY
15286: GREATER
15287: IFFALSE 15313
// begin SetSide ( un , old_side ) ;
15289: LD_VAR 0 1
15293: PPUSH
15294: LD_VAR 0 4
15298: PPUSH
15299: CALL_OW 235
// count := 0 ;
15303: LD_ADDR_VAR 0 5
15307: PUSH
15308: LD_INT 0
15310: ST_TO_ADDR
// end else
15311: GO 15377
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
15313: LD_ADDR_LOC 24
15317: PUSH
15318: LD_LOC 24
15322: PPUSH
15323: LD_VAR 0 7
15327: PPUSH
15328: LD_LOC 24
15332: PUSH
15333: LD_VAR 0 7
15337: ARRAY
15338: PPUSH
15339: LD_VAR 0 4
15343: PPUSH
15344: LD_LOC 24
15348: PUSH
15349: LD_VAR 0 7
15353: ARRAY
15354: PUSH
15355: LD_VAR 0 4
15359: ARRAY
15360: PUSH
15361: LD_VAR 0 5
15365: MINUS
15366: PPUSH
15367: CALL_OW 1
15371: PPUSH
15372: CALL_OW 1
15376: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
15377: LD_ADDR_LOC 24
15381: PUSH
15382: LD_LOC 24
15386: PPUSH
15387: LD_VAR 0 7
15391: PPUSH
15392: LD_LOC 24
15396: PUSH
15397: LD_VAR 0 7
15401: ARRAY
15402: PPUSH
15403: LD_VAR 0 3
15407: PPUSH
15408: LD_LOC 24
15412: PUSH
15413: LD_VAR 0 7
15417: ARRAY
15418: PUSH
15419: LD_VAR 0 3
15423: ARRAY
15424: PUSH
15425: LD_VAR 0 5
15429: PLUS
15430: PPUSH
15431: CALL_OW 1
15435: PPUSH
15436: CALL_OW 1
15440: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
15441: LD_VAR 0 5
15445: PUSH
15446: LD_INT 0
15448: NONEQUAL
15449: PUSH
15450: LD_VAR 0 3
15454: PUSH
15455: LD_OWVAR 2
15459: EQUAL
15460: AND
15461: IFFALSE 15504
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
15463: LD_ADDR_LOC 25
15467: PUSH
15468: LD_LOC 25
15472: PPUSH
15473: LD_INT 3
15475: PUSH
15476: LD_VAR 0 7
15480: MUL
15481: PPUSH
15482: LD_LOC 24
15486: PUSH
15487: LD_VAR 0 7
15491: ARRAY
15492: PUSH
15493: LD_VAR 0 3
15497: ARRAY
15498: PPUSH
15499: CALL_OW 1
15503: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
15504: LD_LOC 24
15508: PUSH
15509: LD_VAR 0 7
15513: ARRAY
15514: PUSH
15515: LD_VAR 0 3
15519: ARRAY
15520: PUSH
15521: LD_LOC 19
15525: PUSH
15526: LD_VAR 0 7
15530: ARRAY
15531: GREATER
15532: IFFALSE 15559
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
15534: LD_ADDR_LOC 26
15538: PUSH
15539: LD_LOC 26
15543: PPUSH
15544: LD_VAR 0 3
15548: PPUSH
15549: LD_INT 1
15551: PPUSH
15552: CALL_OW 1
15556: ST_TO_ADDR
// end else
15557: GO 15646
// begin for j := 1 to Restricted_Builds do
15559: LD_ADDR_VAR 0 8
15563: PUSH
15564: DOUBLE
15565: LD_INT 1
15567: DEC
15568: ST_TO_ADDR
15569: LD_LOC 18
15573: PUSH
15574: FOR_TO
15575: IFFALSE 15619
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
15577: LD_LOC 24
15581: PUSH
15582: LD_VAR 0 8
15586: ARRAY
15587: PUSH
15588: LD_VAR 0 3
15592: ARRAY
15593: PUSH
15594: LD_LOC 19
15598: PUSH
15599: LD_VAR 0 8
15603: ARRAY
15604: GREATER
15605: IFFALSE 15617
// begin Is_Cheater := true ;
15607: LD_ADDR_VAR 0 9
15611: PUSH
15612: LD_INT 1
15614: ST_TO_ADDR
// break ;
15615: GO 15619
// end ;
15617: GO 15574
15619: POP
15620: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
15621: LD_ADDR_LOC 26
15625: PUSH
15626: LD_LOC 26
15630: PPUSH
15631: LD_VAR 0 3
15635: PPUSH
15636: LD_VAR 0 9
15640: PPUSH
15641: CALL_OW 1
15645: ST_TO_ADDR
// end ; break ;
15646: GO 15650
// end ;
15648: GO 15226
15650: POP
15651: POP
// end ;
15652: LD_VAR 0 6
15656: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
15657: LD_VAR 0 5
15661: PUSH
15662: LD_LOC 20
15666: IN
15667: PUSH
15668: LD_VAR 0 2
15672: PUSH
15673: LD_LOC 21
15677: IN
15678: OR
15679: PUSH
15680: LD_VAR 0 4
15684: PUSH
15685: LD_LOC 22
15689: IN
15690: OR
15691: PUSH
15692: LD_VAR 0 3
15696: PUSH
15697: LD_LOC 23
15701: IN
15702: OR
15703: IFFALSE 15714
// ComCancel ( factory ) ;
15705: LD_VAR 0 1
15709: PPUSH
15710: CALL_OW 127
// end ;
15714: PPOPN 5
15716: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
15717: LD_VAR 0 2
15721: PUSH
15722: LD_LOC 20
15726: IN
15727: IFFALSE 15738
// ComCancel ( building ) ;
15729: LD_VAR 0 1
15733: PPUSH
15734: CALL_OW 127
// end ; end_of_file
15738: PPOPN 2
15740: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
15741: LD_INT 0
15743: PPUSH
15744: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
15745: LD_ADDR_VAR 0 2
15749: PUSH
15750: LD_STRING #Multi1x1-Time
15752: PUSH
15753: LD_OWVAR 1
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: ST_TO_ADDR
// if WaitServerStrings then
15762: LD_EXP 70
15766: IFFALSE 15784
// AllStrings = AllStrings ^ WaitServerStrings ;
15768: LD_ADDR_VAR 0 2
15772: PUSH
15773: LD_VAR 0 2
15777: PUSH
15778: LD_EXP 70
15782: ADD
15783: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
15784: LD_INT 0
15786: PUSH
15787: LD_EXP 38
15791: PUSH
15792: LD_OWVAR 1
15796: MINUS
15797: LESSEQUAL
15798: IFFALSE 15829
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
15800: LD_ADDR_VAR 0 2
15804: PUSH
15805: LD_VAR 0 2
15809: PUSH
15810: LD_STRING #allowedsibbomb
15812: PUSH
15813: LD_EXP 38
15817: PUSH
15818: LD_OWVAR 1
15822: MINUS
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: ADD
15828: ST_TO_ADDR
// if ( ExtraStrings ) then
15829: LD_EXP 69
15833: IFFALSE 15855
// AllStrings := AllStrings ^  ^ ExtraStrings ;
15835: LD_ADDR_VAR 0 2
15839: PUSH
15840: LD_VAR 0 2
15844: PUSH
15845: LD_STRING 
15847: ADD
15848: PUSH
15849: LD_EXP 69
15853: ADD
15854: ST_TO_ADDR
// if ( LimitsStrings ) then
15855: CALL 14031 0 0
15859: IFFALSE 15881
// AllStrings := AllStrings ^  ^ LimitsStrings ;
15861: LD_ADDR_VAR 0 2
15865: PUSH
15866: LD_VAR 0 2
15870: PUSH
15871: LD_STRING 
15873: ADD
15874: PUSH
15875: CALL 14031 0 0
15879: ADD
15880: ST_TO_ADDR
// Display_Strings := AllStrings ;
15881: LD_ADDR_OWVAR 47
15885: PUSH
15886: LD_VAR 0 2
15890: ST_TO_ADDR
// end ;
15891: LD_VAR 0 1
15895: RET
// every 0 0$1 do
15896: GO 15898
15898: DISABLE
// begin ShowTimer ;
15899: CALL 15741 0 0
// enable ;
15903: ENABLE
// end ; end_of_file
15904: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
15905: LD_INT 0
15907: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
15908: LD_VAR 0 1
15912: PPUSH
15913: CALL_OW 255
15917: PUSH
15918: LD_VAR 0 4
15922: EQUAL
15923: IFFALSE 15942
// begin SetAchievement ( ACH_RAD ) ;
15925: LD_STRING ACH_RAD
15927: PPUSH
15928: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
15932: LD_STRING ACH_NL
15934: PPUSH
15935: LD_INT 1
15937: PPUSH
15938: CALL_OW 564
// end end ;
15942: LD_VAR 0 5
15946: RET
// export function SA_Win ( side ) ; begin
15947: LD_INT 0
15949: PPUSH
// case side of 1 :
15950: LD_VAR 0 1
15954: PUSH
15955: LD_INT 1
15957: DOUBLE
15958: EQUAL
15959: IFTRUE 15963
15961: GO 15976
15963: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
15964: LD_STRING ACH_AH
15966: PPUSH
15967: LD_INT 1
15969: PPUSH
15970: CALL_OW 564
15974: GO 16139
15976: LD_INT 2
15978: DOUBLE
15979: EQUAL
15980: IFTRUE 15984
15982: GO 15997
15984: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
15985: LD_STRING ACH_E
15987: PPUSH
15988: LD_INT 1
15990: PPUSH
15991: CALL_OW 564
15995: GO 16139
15997: LD_INT 3
15999: DOUBLE
16000: EQUAL
16001: IFTRUE 16005
16003: GO 16018
16005: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
16006: LD_STRING ACH_OOL
16008: PPUSH
16009: LD_INT 1
16011: PPUSH
16012: CALL_OW 564
16016: GO 16139
16018: LD_INT 1
16020: PUSH
16021: LD_INT 2
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: DOUBLE
16028: EQUAL
16029: IFTRUE 16033
16031: GO 16058
16033: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
16034: LD_STRING ACH_AH
16036: PPUSH
16037: LD_REAL  5.00000000000000E-0001
16040: PPUSH
16041: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
16045: LD_STRING ACH_E
16047: PPUSH
16048: LD_REAL  5.00000000000000E-0001
16051: PPUSH
16052: CALL_OW 564
// end ; [ 2 , 3 ] :
16056: GO 16139
16058: LD_INT 2
16060: PUSH
16061: LD_INT 3
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: DOUBLE
16068: EQUAL
16069: IFTRUE 16073
16071: GO 16098
16073: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
16074: LD_STRING ACH_OOL
16076: PPUSH
16077: LD_REAL  5.00000000000000E-0001
16080: PPUSH
16081: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
16085: LD_STRING ACH_E
16087: PPUSH
16088: LD_REAL  5.00000000000000E-0001
16091: PPUSH
16092: CALL_OW 564
// end ; [ 3 , 1 ] :
16096: GO 16139
16098: LD_INT 3
16100: PUSH
16101: LD_INT 1
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: DOUBLE
16108: EQUAL
16109: IFTRUE 16113
16111: GO 16138
16113: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
16114: LD_STRING ACH_AH
16116: PPUSH
16117: LD_REAL  5.00000000000000E-0001
16120: PPUSH
16121: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
16125: LD_STRING ACH_OOL
16127: PPUSH
16128: LD_REAL  5.00000000000000E-0001
16131: PPUSH
16132: CALL_OW 564
// end ; end ;
16136: GO 16139
16138: POP
// end ; end_of_file
16139: LD_VAR 0 2
16143: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
16144: LD_INT 0
16146: PPUSH
16147: PPUSH
// enable ( 98 ) ;
16148: LD_INT 98
16150: ENABLE_MARKED
// GameEnded = false ;
16151: LD_ADDR_LOC 28
16155: PUSH
16156: LD_INT 0
16158: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16159: LD_ADDR_LOC 27
16163: PUSH
16164: LD_INT 0
16166: PUSH
16167: LD_INT 0
16169: PUSH
16170: LD_INT 0
16172: PUSH
16173: LD_INT 0
16175: PUSH
16176: LD_INT 0
16178: PUSH
16179: LD_INT 0
16181: PUSH
16182: LD_INT 0
16184: PUSH
16185: LD_INT 0
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: ST_TO_ADDR
// unfoged = false ;
16198: LD_ADDR_LOC 29
16202: PUSH
16203: LD_INT 0
16205: ST_TO_ADDR
// for i = 1 to side_positions do
16206: LD_ADDR_VAR 0 2
16210: PUSH
16211: DOUBLE
16212: LD_INT 1
16214: DEC
16215: ST_TO_ADDR
16216: LD_EXP 43
16220: PUSH
16221: FOR_TO
16222: IFFALSE 16262
// if not side_positions [ i ] then
16224: LD_EXP 43
16228: PUSH
16229: LD_VAR 0 2
16233: ARRAY
16234: NOT
16235: IFFALSE 16260
// defaited = replace ( defaited , i , true ) ;
16237: LD_ADDR_LOC 27
16241: PUSH
16242: LD_LOC 27
16246: PPUSH
16247: LD_VAR 0 2
16251: PPUSH
16252: LD_INT 1
16254: PPUSH
16255: CALL_OW 1
16259: ST_TO_ADDR
16260: GO 16221
16262: POP
16263: POP
// end ;
16264: LD_VAR 0 1
16268: RET
// function CanWinLoose ; begin
16269: LD_INT 0
16271: PPUSH
// Result := true ;
16272: LD_ADDR_VAR 0 1
16276: PUSH
16277: LD_INT 1
16279: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
16280: CALL_OW 518
16284: PUSH
16285: CALL_OW 519
16289: PUSH
16290: LD_INT 0
16292: GREATER
16293: AND
16294: IFFALSE 16304
// Result := false ;
16296: LD_ADDR_VAR 0 1
16300: PUSH
16301: LD_INT 0
16303: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
16304: CALL_OW 531
16308: PUSH
16309: CALL_OW 519
16313: PUSH
16314: LD_INT 1
16316: GREATER
16317: AND
16318: IFFALSE 16328
// Result := false ;
16320: LD_ADDR_VAR 0 1
16324: PUSH
16325: LD_INT 0
16327: ST_TO_ADDR
// end ;
16328: LD_VAR 0 1
16332: RET
// export function HasPower ( i ) ; var k , h ; begin
16333: LD_INT 0
16335: PPUSH
16336: PPUSH
16337: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
16338: LD_VAR 0 1
16342: PPUSH
16343: CALL_OW 108
16347: NOT
16348: PUSH
16349: LD_EXP 42
16353: PUSH
16354: LD_VAR 0 1
16358: ARRAY
16359: NOT
16360: AND
16361: PUSH
16362: LD_OWVAR 4
16366: AND
16367: IFFALSE 16379
// begin result = false ;
16369: LD_ADDR_VAR 0 2
16373: PUSH
16374: LD_INT 0
16376: ST_TO_ADDR
// end else
16377: GO 16674
// case def_win_rules of 0 :
16379: LD_EXP 18
16383: PUSH
16384: LD_INT 0
16386: DOUBLE
16387: EQUAL
16388: IFTRUE 16392
16390: GO 16555
16392: POP
// if def_people_respawning then
16393: LD_EXP 19
16397: IFFALSE 16488
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
16399: LD_ADDR_VAR 0 2
16403: PUSH
16404: LD_INT 22
16406: PUSH
16407: LD_VAR 0 1
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: LD_INT 2
16418: PUSH
16419: LD_INT 21
16421: PUSH
16422: LD_INT 1
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: LD_INT 33
16431: PUSH
16432: LD_INT 3
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 33
16441: PUSH
16442: LD_INT 5
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 30
16451: PUSH
16452: LD_INT 0
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 30
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PPUSH
16481: CALL_OW 69
16485: ST_TO_ADDR
16486: GO 16553
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
16488: LD_ADDR_VAR 0 2
16492: PUSH
16493: LD_INT 22
16495: PUSH
16496: LD_VAR 0 1
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 2
16507: PUSH
16508: LD_INT 21
16510: PUSH
16511: LD_INT 1
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 33
16520: PUSH
16521: LD_INT 3
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: LD_INT 33
16530: PUSH
16531: LD_INT 5
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PPUSH
16548: CALL_OW 69
16552: ST_TO_ADDR
16553: GO 16674
16555: LD_INT 1
16557: DOUBLE
16558: EQUAL
16559: IFTRUE 16563
16561: GO 16602
16563: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
16564: LD_ADDR_VAR 0 2
16568: PUSH
16569: LD_INT 22
16571: PUSH
16572: LD_VAR 0 1
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 21
16583: PUSH
16584: LD_INT 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PPUSH
16595: CALL_OW 69
16599: ST_TO_ADDR
16600: GO 16674
16602: LD_INT 2
16604: DOUBLE
16605: EQUAL
16606: IFTRUE 16610
16608: GO 16673
16610: POP
// begin h = false ;
16611: LD_ADDR_VAR 0 4
16615: PUSH
16616: LD_INT 0
16618: ST_TO_ADDR
// for k in heroes [ i ] do
16619: LD_ADDR_VAR 0 3
16623: PUSH
16624: LD_EXP 57
16628: PUSH
16629: LD_VAR 0 1
16633: ARRAY
16634: PUSH
16635: FOR_IN
16636: IFFALSE 16659
// if IsLive ( k ) then
16638: LD_VAR 0 3
16642: PPUSH
16643: CALL_OW 300
16647: IFFALSE 16657
// h = true ;
16649: LD_ADDR_VAR 0 4
16653: PUSH
16654: LD_INT 1
16656: ST_TO_ADDR
16657: GO 16635
16659: POP
16660: POP
// Result := h ;
16661: LD_ADDR_VAR 0 2
16665: PUSH
16666: LD_VAR 0 4
16670: ST_TO_ADDR
// end ; end ;
16671: GO 16674
16673: POP
// end ;
16674: LD_VAR 0 2
16678: RET
// function AlliedSides ( i , j ) ; begin
16679: LD_INT 0
16681: PPUSH
// Result := false ;
16682: LD_ADDR_VAR 0 3
16686: PUSH
16687: LD_INT 0
16689: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
16690: LD_VAR 0 1
16694: PPUSH
16695: LD_VAR 0 2
16699: PPUSH
16700: CALL_OW 81
16704: PUSH
16705: LD_INT 1
16707: EQUAL
16708: PUSH
16709: LD_VAR 0 2
16713: PPUSH
16714: LD_VAR 0 1
16718: PPUSH
16719: CALL_OW 81
16723: PUSH
16724: LD_INT 1
16726: EQUAL
16727: AND
16728: PUSH
16729: LD_VAR 0 1
16733: PPUSH
16734: CALL_OW 83
16738: AND
16739: PUSH
16740: LD_VAR 0 2
16744: PPUSH
16745: CALL_OW 83
16749: AND
16750: IFFALSE 16760
// Result := true ;
16752: LD_ADDR_VAR 0 3
16756: PUSH
16757: LD_INT 1
16759: ST_TO_ADDR
// end ;
16760: LD_VAR 0 3
16764: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
16765: CALL 16269 0 0
16769: PUSH
16770: LD_LOC 28
16774: NOT
16775: AND
16776: IFFALSE 16792
16778: GO 16780
16780: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
16781: LD_ADDR_EXP 70
16785: PUSH
16786: LD_STRING #Player-Ended
16788: PUSH
16789: EMPTY
16790: LIST
16791: ST_TO_ADDR
16792: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
16793: CALL 16269 0 0
16797: PUSH
16798: LD_LOC 28
16802: AND
16803: IFFALSE 16812
16805: GO 16807
16807: DISABLE
// YouLostInMultiplayer ;
16808: CALL_OW 107
16812: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
16813: CALL 16269 0 0
16817: NOT
16818: PUSH
16819: CALL_OW 531
16823: NOT
16824: AND
16825: IFFALSE 16841
16827: GO 16829
16829: DISABLE
// WaitServerStrings = [ #server-wait ] ;
16830: LD_ADDR_EXP 70
16834: PUSH
16835: LD_STRING #server-wait
16837: PUSH
16838: EMPTY
16839: LIST
16840: ST_TO_ADDR
16841: END
// every 100 trigger IAmSpec do
16842: CALL_OW 531
16846: IFFALSE 16862
16848: GO 16850
16850: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
16851: LD_ADDR_EXP 70
16855: PUSH
16856: LD_STRING #Player-IAmSpec
16858: PUSH
16859: EMPTY
16860: LIST
16861: ST_TO_ADDR
16862: END
// every 100 trigger GameEnded and IAmSpec do
16863: LD_LOC 28
16867: PUSH
16868: CALL_OW 531
16872: AND
16873: IFFALSE 16882
16875: GO 16877
16877: DISABLE
// YouLostInMultiplayer ;
16878: CALL_OW 107
16882: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
16883: CALL 16269 0 0
16887: PUSH
16888: LD_LOC 28
16892: NOT
16893: AND
16894: IFFALSE 16910
16896: GO 16898
16898: DISABLE
// WaitServerStrings = [ $player-win ] ;
16899: LD_ADDR_EXP 70
16903: PUSH
16904: LD_STRING $player-win
16906: PUSH
16907: EMPTY
16908: LIST
16909: ST_TO_ADDR
16910: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
16911: CALL 16269 0 0
16915: PUSH
16916: LD_LOC 28
16920: AND
16921: IFFALSE 16945
16923: GO 16925
16925: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
16926: LD_EXP 44
16930: PUSH
16931: LD_OWVAR 2
16935: ARRAY
16936: PPUSH
16937: CALL 15947 0 1
// YouWinInMultiplayer ;
16941: CALL_OW 106
// end ;
16945: END
// every 100 trigger isEditor marked 401 do
16946: LD_OWVAR 84
16950: IFFALSE 16966
16952: GO 16954
16954: DISABLE
// Debug_Strings = [ You won ] ;
16955: LD_ADDR_OWVAR 48
16959: PUSH
16960: LD_STRING You won
16962: PUSH
16963: EMPTY
16964: LIST
16965: ST_TO_ADDR
16966: END
// every 100 trigger isEditor marked 400 do
16967: LD_OWVAR 84
16971: IFFALSE 16987
16973: GO 16975
16975: DISABLE
// Debug_Strings = [ You loss ] ;
16976: LD_ADDR_OWVAR 48
16980: PUSH
16981: LD_STRING You loss
16983: PUSH
16984: EMPTY
16985: LIST
16986: ST_TO_ADDR
16987: END
// every 100 marked 98 do var i , un ;
16988: GO 16990
16990: DISABLE
16991: LD_INT 0
16993: PPUSH
16994: PPUSH
// begin for i = 1 to side_positions do
16995: LD_ADDR_VAR 0 1
16999: PUSH
17000: DOUBLE
17001: LD_INT 1
17003: DEC
17004: ST_TO_ADDR
17005: LD_EXP 43
17009: PUSH
17010: FOR_TO
17011: IFFALSE 17134
// if side_positions [ i ] then
17013: LD_EXP 43
17017: PUSH
17018: LD_VAR 0 1
17022: ARRAY
17023: IFFALSE 17132
// if not HasPower ( i ) and not Defaited [ i ] then
17025: LD_VAR 0 1
17029: PPUSH
17030: CALL 16333 0 1
17034: NOT
17035: PUSH
17036: LD_LOC 27
17040: PUSH
17041: LD_VAR 0 1
17045: ARRAY
17046: NOT
17047: AND
17048: IFFALSE 17132
// begin un = filterallunits ( [ f_side , i ] ) ;
17050: LD_ADDR_VAR 0 2
17054: PUSH
17055: LD_INT 22
17057: PUSH
17058: LD_VAR 0 1
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PPUSH
17067: CALL_OW 69
17071: ST_TO_ADDR
// if un then
17072: LD_VAR 0 2
17076: IFFALSE 17090
// SetSide ( un , 0 ) ;
17078: LD_VAR 0 2
17082: PPUSH
17083: LD_INT 0
17085: PPUSH
17086: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
17090: LD_ADDR_LOC 27
17094: PUSH
17095: LD_LOC 27
17099: PPUSH
17100: LD_VAR 0 1
17104: PPUSH
17105: LD_INT 1
17107: PPUSH
17108: CALL_OW 1
17112: ST_TO_ADDR
// if i = your_side then
17113: LD_VAR 0 1
17117: PUSH
17118: LD_OWVAR 2
17122: EQUAL
17123: IFFALSE 17132
// begin Multiplayer_Loose_Message ;
17125: CALL_OW 521
// enable ( 400 ) ;
17129: LD_INT 400
17131: ENABLE_MARKED
// end ; end ;
17132: GO 17010
17134: POP
17135: POP
// if not Unfoged and defaited [ your_side ] then
17136: LD_LOC 29
17140: NOT
17141: PUSH
17142: LD_LOC 27
17146: PUSH
17147: LD_OWVAR 2
17151: ARRAY
17152: AND
17153: IFFALSE 17159
// Unfog ;
17155: CALL 17345 0 0
// DidGameEnd ;
17159: CALL 17174 0 0
// if not GameEnded then
17163: LD_LOC 28
17167: NOT
17168: IFFALSE 17171
// enable ;
17170: ENABLE
// end ;
17171: PPOPN 2
17173: END
// function DidGameEnd ; var i , k , enemy ; begin
17174: LD_INT 0
17176: PPUSH
17177: PPUSH
17178: PPUSH
17179: PPUSH
// enemy = [ ] ;
17180: LD_ADDR_VAR 0 4
17184: PUSH
17185: EMPTY
17186: ST_TO_ADDR
// for i = 1 to side_positions do
17187: LD_ADDR_VAR 0 2
17191: PUSH
17192: DOUBLE
17193: LD_INT 1
17195: DEC
17196: ST_TO_ADDR
17197: LD_EXP 43
17201: PUSH
17202: FOR_TO
17203: IFFALSE 17307
// if not defaited [ i ] then
17205: LD_LOC 27
17209: PUSH
17210: LD_VAR 0 2
17214: ARRAY
17215: NOT
17216: IFFALSE 17305
// for k = 1 to side_positions do
17218: LD_ADDR_VAR 0 3
17222: PUSH
17223: DOUBLE
17224: LD_INT 1
17226: DEC
17227: ST_TO_ADDR
17228: LD_EXP 43
17232: PUSH
17233: FOR_TO
17234: IFFALSE 17303
// if not defaited [ k ] then
17236: LD_LOC 27
17240: PUSH
17241: LD_VAR 0 3
17245: ARRAY
17246: NOT
17247: IFFALSE 17301
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
17249: LD_VAR 0 2
17253: PPUSH
17254: LD_VAR 0 3
17258: PPUSH
17259: CALL_OW 81
17263: PUSH
17264: LD_INT 2
17266: PUSH
17267: LD_INT 0
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: IN
17274: IFFALSE 17301
// enemy = enemy ^ [ i , k ] ;
17276: LD_ADDR_VAR 0 4
17280: PUSH
17281: LD_VAR 0 4
17285: PUSH
17286: LD_VAR 0 2
17290: PUSH
17291: LD_VAR 0 3
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: ADD
17300: ST_TO_ADDR
17301: GO 17233
17303: POP
17304: POP
17305: GO 17202
17307: POP
17308: POP
// if not enemy then
17309: LD_VAR 0 4
17313: NOT
17314: IFFALSE 17340
// begin GameEnded = true ;
17316: LD_ADDR_LOC 28
17320: PUSH
17321: LD_INT 1
17323: ST_TO_ADDR
// if not defaited [ your_side ] then
17324: LD_LOC 27
17328: PUSH
17329: LD_OWVAR 2
17333: ARRAY
17334: NOT
17335: IFFALSE 17340
// enable ( 401 ) ;
17337: LD_INT 401
17339: ENABLE_MARKED
// end ; end ;
17340: LD_VAR 0 1
17344: RET
// function unfog ; var k , friends ; begin
17345: LD_INT 0
17347: PPUSH
17348: PPUSH
17349: PPUSH
// for k = 1 to side_positions do
17350: LD_ADDR_VAR 0 2
17354: PUSH
17355: DOUBLE
17356: LD_INT 1
17358: DEC
17359: ST_TO_ADDR
17360: LD_EXP 43
17364: PUSH
17365: FOR_TO
17366: IFFALSE 17422
// if not defaited [ k ] then
17368: LD_LOC 27
17372: PUSH
17373: LD_VAR 0 2
17377: ARRAY
17378: NOT
17379: IFFALSE 17420
// if GetAttitude ( your_side , k ) in [ att_friend ] then
17381: LD_OWVAR 2
17385: PPUSH
17386: LD_VAR 0 2
17390: PPUSH
17391: CALL_OW 81
17395: PUSH
17396: LD_INT 1
17398: PUSH
17399: EMPTY
17400: LIST
17401: IN
17402: IFFALSE 17420
// friends = friends ^ k ;
17404: LD_ADDR_VAR 0 3
17408: PUSH
17409: LD_VAR 0 3
17413: PUSH
17414: LD_VAR 0 2
17418: ADD
17419: ST_TO_ADDR
17420: GO 17365
17422: POP
17423: POP
// if not friends then
17424: LD_VAR 0 3
17428: NOT
17429: IFFALSE 17446
// begin fogoff ( true ) ;
17431: LD_INT 1
17433: PPUSH
17434: CALL_OW 344
// unfoged = true ;
17438: LD_ADDR_LOC 29
17442: PUSH
17443: LD_INT 1
17445: ST_TO_ADDR
// end ; end ;
17446: LD_VAR 0 1
17450: RET
// export function MakeGameEnd ; begin
17451: LD_INT 0
17453: PPUSH
// fogoff ( true ) ;
17454: LD_INT 1
17456: PPUSH
17457: CALL_OW 344
// unfoged = true ;
17461: LD_ADDR_LOC 29
17465: PUSH
17466: LD_INT 1
17468: ST_TO_ADDR
// wait ( 0 0$5 ) ;
17469: LD_INT 175
17471: PPUSH
17472: CALL_OW 67
// GameEnded = true ;
17476: LD_ADDR_LOC 28
17480: PUSH
17481: LD_INT 1
17483: ST_TO_ADDR
// end ;
17484: LD_VAR 0 1
17488: RET
// export function GetGameEnded ; begin
17489: LD_INT 0
17491: PPUSH
// result = GameEnded ;
17492: LD_ADDR_VAR 0 1
17496: PUSH
17497: LD_LOC 28
17501: ST_TO_ADDR
// end ; end_of_file
17502: LD_VAR 0 1
17506: RET
// export function SetMpTechs ( ) ; var side , i ; begin
17507: LD_INT 0
17509: PPUSH
17510: PPUSH
17511: PPUSH
// for side = 1 to 8 do
17512: LD_ADDR_VAR 0 2
17516: PUSH
17517: DOUBLE
17518: LD_INT 1
17520: DEC
17521: ST_TO_ADDR
17522: LD_INT 8
17524: PUSH
17525: FOR_TO
17526: IFFALSE 17647
// begin for i = 1 to 72 do
17528: LD_ADDR_VAR 0 3
17532: PUSH
17533: DOUBLE
17534: LD_INT 1
17536: DEC
17537: ST_TO_ADDR
17538: LD_INT 72
17540: PUSH
17541: FOR_TO
17542: IFFALSE 17573
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
17544: LD_VAR 0 3
17548: PPUSH
17549: LD_VAR 0 2
17553: PPUSH
17554: LD_INT 0
17556: PPUSH
17557: LD_VAR 0 3
17561: PPUSH
17562: CALL_OW 565
17566: PPUSH
17567: CALL_OW 322
17571: GO 17541
17573: POP
17574: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
17575: LD_INT 73
17577: PPUSH
17578: LD_VAR 0 2
17582: PPUSH
17583: LD_INT 0
17585: PPUSH
17586: LD_INT 25
17588: PPUSH
17589: CALL_OW 565
17593: PPUSH
17594: CALL_OW 322
// for i = 0 to 40 do
17598: LD_ADDR_VAR 0 3
17602: PUSH
17603: DOUBLE
17604: LD_INT 0
17606: DEC
17607: ST_TO_ADDR
17608: LD_INT 40
17610: PUSH
17611: FOR_TO
17612: IFFALSE 17643
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
17614: LD_VAR 0 3
17618: PPUSH
17619: LD_VAR 0 2
17623: PPUSH
17624: LD_INT 1
17626: PPUSH
17627: LD_VAR 0 3
17631: PPUSH
17632: CALL_OW 565
17636: PPUSH
17637: CALL_OW 324
17641: GO 17611
17643: POP
17644: POP
// end ;
17645: GO 17525
17647: POP
17648: POP
// end ;
17649: LD_VAR 0 1
17653: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
17654: LD_INT 0
17656: PPUSH
17657: PPUSH
17658: PPUSH
// for side = 1 to 8 do
17659: LD_ADDR_VAR 0 3
17663: PUSH
17664: DOUBLE
17665: LD_INT 1
17667: DEC
17668: ST_TO_ADDR
17669: LD_INT 8
17671: PUSH
17672: FOR_TO
17673: IFFALSE 21669
// begin for i = 1 to 73 do
17675: LD_ADDR_VAR 0 4
17679: PUSH
17680: DOUBLE
17681: LD_INT 1
17683: DEC
17684: ST_TO_ADDR
17685: LD_INT 73
17687: PUSH
17688: FOR_TO
17689: IFFALSE 17710
// SetTech ( i , side , state_disabled ) ;
17691: LD_VAR 0 4
17695: PPUSH
17696: LD_VAR 0 3
17700: PPUSH
17701: LD_INT 0
17703: PPUSH
17704: CALL_OW 322
17708: GO 17688
17710: POP
17711: POP
// for i = 0 to 40 do
17712: LD_ADDR_VAR 0 4
17716: PUSH
17717: DOUBLE
17718: LD_INT 0
17720: DEC
17721: ST_TO_ADDR
17722: LD_INT 40
17724: PUSH
17725: FOR_TO
17726: IFFALSE 17747
// SetRestrict ( i , side , false ) ;
17728: LD_VAR 0 4
17732: PPUSH
17733: LD_VAR 0 3
17737: PPUSH
17738: LD_INT 0
17740: PPUSH
17741: CALL_OW 324
17745: GO 17725
17747: POP
17748: POP
// case level of 1 :
17749: LD_VAR 0 1
17753: PUSH
17754: LD_INT 1
17756: DOUBLE
17757: EQUAL
17758: IFTRUE 17762
17760: GO 17915
17762: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17763: LD_INT 35
17765: PPUSH
17766: LD_VAR 0 3
17770: PPUSH
17771: LD_INT 1
17773: PPUSH
17774: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17778: LD_INT 45
17780: PPUSH
17781: LD_VAR 0 3
17785: PPUSH
17786: LD_INT 1
17788: PPUSH
17789: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17793: LD_INT 46
17795: PPUSH
17796: LD_VAR 0 3
17800: PPUSH
17801: LD_INT 1
17803: PPUSH
17804: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17808: LD_INT 47
17810: PPUSH
17811: LD_VAR 0 3
17815: PPUSH
17816: LD_INT 1
17818: PPUSH
17819: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17823: LD_INT 0
17825: PPUSH
17826: LD_VAR 0 3
17830: PPUSH
17831: LD_INT 1
17833: PPUSH
17834: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17838: LD_INT 2
17840: PPUSH
17841: LD_VAR 0 3
17845: PPUSH
17846: LD_INT 1
17848: PPUSH
17849: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17853: LD_INT 4
17855: PPUSH
17856: LD_VAR 0 3
17860: PPUSH
17861: LD_INT 1
17863: PPUSH
17864: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17868: LD_INT 6
17870: PPUSH
17871: LD_VAR 0 3
17875: PPUSH
17876: LD_INT 1
17878: PPUSH
17879: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17883: LD_INT 29
17885: PPUSH
17886: LD_VAR 0 3
17890: PPUSH
17891: LD_INT 1
17893: PPUSH
17894: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17898: LD_INT 31
17900: PPUSH
17901: LD_VAR 0 3
17905: PPUSH
17906: LD_INT 1
17908: PPUSH
17909: CALL_OW 324
// end ; 2 :
17913: GO 21667
17915: LD_INT 2
17917: DOUBLE
17918: EQUAL
17919: IFTRUE 17923
17921: GO 18121
17923: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17924: LD_INT 35
17926: PPUSH
17927: LD_VAR 0 3
17931: PPUSH
17932: LD_INT 1
17934: PPUSH
17935: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17939: LD_INT 45
17941: PPUSH
17942: LD_VAR 0 3
17946: PPUSH
17947: LD_INT 1
17949: PPUSH
17950: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17954: LD_INT 46
17956: PPUSH
17957: LD_VAR 0 3
17961: PPUSH
17962: LD_INT 1
17964: PPUSH
17965: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17969: LD_INT 47
17971: PPUSH
17972: LD_VAR 0 3
17976: PPUSH
17977: LD_INT 1
17979: PPUSH
17980: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17984: LD_INT 1
17986: PPUSH
17987: LD_VAR 0 3
17991: PPUSH
17992: LD_INT 1
17994: PPUSH
17995: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17999: LD_INT 2
18001: PPUSH
18002: LD_VAR 0 3
18006: PPUSH
18007: LD_INT 1
18009: PPUSH
18010: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18014: LD_INT 11
18016: PPUSH
18017: LD_VAR 0 3
18021: PPUSH
18022: LD_INT 1
18024: PPUSH
18025: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18029: LD_INT 0
18031: PPUSH
18032: LD_VAR 0 3
18036: PPUSH
18037: LD_INT 1
18039: PPUSH
18040: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18044: LD_INT 2
18046: PPUSH
18047: LD_VAR 0 3
18051: PPUSH
18052: LD_INT 1
18054: PPUSH
18055: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18059: LD_INT 4
18061: PPUSH
18062: LD_VAR 0 3
18066: PPUSH
18067: LD_INT 1
18069: PPUSH
18070: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18074: LD_INT 6
18076: PPUSH
18077: LD_VAR 0 3
18081: PPUSH
18082: LD_INT 1
18084: PPUSH
18085: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18089: LD_INT 29
18091: PPUSH
18092: LD_VAR 0 3
18096: PPUSH
18097: LD_INT 1
18099: PPUSH
18100: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18104: LD_INT 31
18106: PPUSH
18107: LD_VAR 0 3
18111: PPUSH
18112: LD_INT 1
18114: PPUSH
18115: CALL_OW 324
// end ; 3 :
18119: GO 21667
18121: LD_INT 3
18123: DOUBLE
18124: EQUAL
18125: IFTRUE 18129
18127: GO 18582
18129: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18130: LD_INT 35
18132: PPUSH
18133: LD_VAR 0 3
18137: PPUSH
18138: LD_INT 1
18140: PPUSH
18141: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18145: LD_INT 45
18147: PPUSH
18148: LD_VAR 0 3
18152: PPUSH
18153: LD_INT 1
18155: PPUSH
18156: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18160: LD_INT 46
18162: PPUSH
18163: LD_VAR 0 3
18167: PPUSH
18168: LD_INT 1
18170: PPUSH
18171: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18175: LD_INT 47
18177: PPUSH
18178: LD_VAR 0 3
18182: PPUSH
18183: LD_INT 1
18185: PPUSH
18186: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18190: LD_INT 1
18192: PPUSH
18193: LD_VAR 0 3
18197: PPUSH
18198: LD_INT 1
18200: PPUSH
18201: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18205: LD_INT 2
18207: PPUSH
18208: LD_VAR 0 3
18212: PPUSH
18213: LD_INT 1
18215: PPUSH
18216: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18220: LD_INT 11
18222: PPUSH
18223: LD_VAR 0 3
18227: PPUSH
18228: LD_INT 1
18230: PPUSH
18231: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18235: LD_INT 48
18237: PPUSH
18238: LD_VAR 0 3
18242: PPUSH
18243: LD_INT 1
18245: PPUSH
18246: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18250: LD_INT 69
18252: PPUSH
18253: LD_VAR 0 3
18257: PPUSH
18258: LD_INT 1
18260: PPUSH
18261: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18265: LD_INT 39
18267: PPUSH
18268: LD_VAR 0 3
18272: PPUSH
18273: LD_INT 1
18275: PPUSH
18276: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18280: LD_INT 43
18282: PPUSH
18283: LD_VAR 0 3
18287: PPUSH
18288: LD_INT 1
18290: PPUSH
18291: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18295: LD_INT 51
18297: PPUSH
18298: LD_VAR 0 3
18302: PPUSH
18303: LD_INT 1
18305: PPUSH
18306: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18310: LD_INT 6
18312: PPUSH
18313: LD_VAR 0 3
18317: PPUSH
18318: LD_INT 1
18320: PPUSH
18321: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18325: LD_INT 0
18327: PPUSH
18328: LD_VAR 0 3
18332: PPUSH
18333: LD_INT 1
18335: PPUSH
18336: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18340: LD_INT 2
18342: PPUSH
18343: LD_VAR 0 3
18347: PPUSH
18348: LD_INT 1
18350: PPUSH
18351: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18355: LD_INT 3
18357: PPUSH
18358: LD_VAR 0 3
18362: PPUSH
18363: LD_INT 1
18365: PPUSH
18366: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18370: LD_INT 4
18372: PPUSH
18373: LD_VAR 0 3
18377: PPUSH
18378: LD_INT 1
18380: PPUSH
18381: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18385: LD_INT 6
18387: PPUSH
18388: LD_VAR 0 3
18392: PPUSH
18393: LD_INT 1
18395: PPUSH
18396: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18400: LD_INT 7
18402: PPUSH
18403: LD_VAR 0 3
18407: PPUSH
18408: LD_INT 1
18410: PPUSH
18411: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18415: LD_INT 8
18417: PPUSH
18418: LD_VAR 0 3
18422: PPUSH
18423: LD_INT 1
18425: PPUSH
18426: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18430: LD_INT 10
18432: PPUSH
18433: LD_VAR 0 3
18437: PPUSH
18438: LD_INT 1
18440: PPUSH
18441: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18445: LD_INT 15
18447: PPUSH
18448: LD_VAR 0 3
18452: PPUSH
18453: LD_INT 1
18455: PPUSH
18456: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18460: LD_INT 16
18462: PPUSH
18463: LD_VAR 0 3
18467: PPUSH
18468: LD_INT 1
18470: PPUSH
18471: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18475: LD_INT 17
18477: PPUSH
18478: LD_VAR 0 3
18482: PPUSH
18483: LD_INT 1
18485: PPUSH
18486: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18490: LD_INT 20
18492: PPUSH
18493: LD_VAR 0 3
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18505: LD_INT 26
18507: PPUSH
18508: LD_VAR 0 3
18512: PPUSH
18513: LD_INT 1
18515: PPUSH
18516: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18520: LD_INT 27
18522: PPUSH
18523: LD_VAR 0 3
18527: PPUSH
18528: LD_INT 1
18530: PPUSH
18531: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18535: LD_INT 29
18537: PPUSH
18538: LD_VAR 0 3
18542: PPUSH
18543: LD_INT 1
18545: PPUSH
18546: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18550: LD_INT 31
18552: PPUSH
18553: LD_VAR 0 3
18557: PPUSH
18558: LD_INT 1
18560: PPUSH
18561: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18565: LD_INT 32
18567: PPUSH
18568: LD_VAR 0 3
18572: PPUSH
18573: LD_INT 1
18575: PPUSH
18576: CALL_OW 324
// end ; 4 :
18580: GO 21667
18582: LD_INT 4
18584: DOUBLE
18585: EQUAL
18586: IFTRUE 18590
18588: GO 19538
18590: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18591: LD_INT 35
18593: PPUSH
18594: LD_VAR 0 3
18598: PPUSH
18599: LD_INT 1
18601: PPUSH
18602: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18606: LD_INT 45
18608: PPUSH
18609: LD_VAR 0 3
18613: PPUSH
18614: LD_INT 1
18616: PPUSH
18617: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18621: LD_INT 46
18623: PPUSH
18624: LD_VAR 0 3
18628: PPUSH
18629: LD_INT 1
18631: PPUSH
18632: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18636: LD_INT 47
18638: PPUSH
18639: LD_VAR 0 3
18643: PPUSH
18644: LD_INT 1
18646: PPUSH
18647: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18651: LD_INT 1
18653: PPUSH
18654: LD_VAR 0 3
18658: PPUSH
18659: LD_INT 1
18661: PPUSH
18662: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18666: LD_INT 2
18668: PPUSH
18669: LD_VAR 0 3
18673: PPUSH
18674: LD_INT 1
18676: PPUSH
18677: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18681: LD_INT 11
18683: PPUSH
18684: LD_VAR 0 3
18688: PPUSH
18689: LD_INT 1
18691: PPUSH
18692: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18696: LD_INT 20
18698: PPUSH
18699: LD_VAR 0 3
18703: PPUSH
18704: LD_INT 1
18706: PPUSH
18707: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18711: LD_INT 48
18713: PPUSH
18714: LD_VAR 0 3
18718: PPUSH
18719: LD_INT 1
18721: PPUSH
18722: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18726: LD_INT 49
18728: PPUSH
18729: LD_VAR 0 3
18733: PPUSH
18734: LD_INT 1
18736: PPUSH
18737: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18741: LD_INT 69
18743: PPUSH
18744: LD_VAR 0 3
18748: PPUSH
18749: LD_INT 1
18751: PPUSH
18752: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18756: LD_INT 39
18758: PPUSH
18759: LD_VAR 0 3
18763: PPUSH
18764: LD_INT 1
18766: PPUSH
18767: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18771: LD_INT 34
18773: PPUSH
18774: LD_VAR 0 3
18778: PPUSH
18779: LD_INT 1
18781: PPUSH
18782: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18786: LD_INT 42
18788: PPUSH
18789: LD_VAR 0 3
18793: PPUSH
18794: LD_INT 1
18796: PPUSH
18797: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18801: LD_INT 44
18803: PPUSH
18804: LD_VAR 0 3
18808: PPUSH
18809: LD_INT 1
18811: PPUSH
18812: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18816: LD_INT 41
18818: PPUSH
18819: LD_VAR 0 3
18823: PPUSH
18824: LD_INT 1
18826: PPUSH
18827: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18831: LD_INT 43
18833: PPUSH
18834: LD_VAR 0 3
18838: PPUSH
18839: LD_INT 1
18841: PPUSH
18842: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18846: LD_INT 70
18848: PPUSH
18849: LD_VAR 0 3
18853: PPUSH
18854: LD_INT 1
18856: PPUSH
18857: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18861: LD_INT 51
18863: PPUSH
18864: LD_VAR 0 3
18868: PPUSH
18869: LD_INT 1
18871: PPUSH
18872: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18876: LD_INT 52
18878: PPUSH
18879: LD_VAR 0 3
18883: PPUSH
18884: LD_INT 1
18886: PPUSH
18887: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18891: LD_INT 6
18893: PPUSH
18894: LD_VAR 0 3
18898: PPUSH
18899: LD_INT 1
18901: PPUSH
18902: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18906: LD_INT 15
18908: PPUSH
18909: LD_VAR 0 3
18913: PPUSH
18914: LD_INT 1
18916: PPUSH
18917: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18921: LD_INT 7
18923: PPUSH
18924: LD_VAR 0 3
18928: PPUSH
18929: LD_INT 1
18931: PPUSH
18932: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18936: LD_INT 12
18938: PPUSH
18939: LD_VAR 0 3
18943: PPUSH
18944: LD_INT 1
18946: PPUSH
18947: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18951: LD_INT 18
18953: PPUSH
18954: LD_VAR 0 3
18958: PPUSH
18959: LD_INT 1
18961: PPUSH
18962: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18966: LD_INT 60
18968: PPUSH
18969: LD_VAR 0 3
18973: PPUSH
18974: LD_INT 1
18976: PPUSH
18977: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18981: LD_INT 9
18983: PPUSH
18984: LD_VAR 0 3
18988: PPUSH
18989: LD_INT 1
18991: PPUSH
18992: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18996: LD_INT 30
18998: PPUSH
18999: LD_VAR 0 3
19003: PPUSH
19004: LD_INT 1
19006: PPUSH
19007: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19011: LD_INT 37
19013: PPUSH
19014: LD_VAR 0 3
19018: PPUSH
19019: LD_INT 1
19021: PPUSH
19022: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19026: LD_INT 5
19028: PPUSH
19029: LD_VAR 0 3
19033: PPUSH
19034: LD_INT 1
19036: PPUSH
19037: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19041: LD_INT 66
19043: PPUSH
19044: LD_VAR 0 3
19048: PPUSH
19049: LD_INT 1
19051: PPUSH
19052: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19056: LD_INT 21
19058: PPUSH
19059: LD_VAR 0 3
19063: PPUSH
19064: LD_INT 1
19066: PPUSH
19067: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19071: LD_INT 22
19073: PPUSH
19074: LD_VAR 0 3
19078: PPUSH
19079: LD_INT 1
19081: PPUSH
19082: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19086: LD_INT 54
19088: PPUSH
19089: LD_VAR 0 3
19093: PPUSH
19094: LD_INT 1
19096: PPUSH
19097: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19101: LD_INT 0
19103: PPUSH
19104: LD_VAR 0 3
19108: PPUSH
19109: LD_INT 1
19111: PPUSH
19112: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
19116: LD_INT 1
19118: PPUSH
19119: LD_VAR 0 3
19123: PPUSH
19124: LD_INT 1
19126: PPUSH
19127: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19131: LD_INT 2
19133: PPUSH
19134: LD_VAR 0 3
19138: PPUSH
19139: LD_INT 1
19141: PPUSH
19142: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
19146: LD_INT 3
19148: PPUSH
19149: LD_VAR 0 3
19153: PPUSH
19154: LD_INT 1
19156: PPUSH
19157: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19161: LD_INT 4
19163: PPUSH
19164: LD_VAR 0 3
19168: PPUSH
19169: LD_INT 1
19171: PPUSH
19172: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
19176: LD_INT 5
19178: PPUSH
19179: LD_VAR 0 3
19183: PPUSH
19184: LD_INT 1
19186: PPUSH
19187: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19191: LD_INT 6
19193: PPUSH
19194: LD_VAR 0 3
19198: PPUSH
19199: LD_INT 1
19201: PPUSH
19202: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
19206: LD_INT 7
19208: PPUSH
19209: LD_VAR 0 3
19213: PPUSH
19214: LD_INT 1
19216: PPUSH
19217: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
19221: LD_INT 8
19223: PPUSH
19224: LD_VAR 0 3
19228: PPUSH
19229: LD_INT 1
19231: PPUSH
19232: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
19236: LD_INT 10
19238: PPUSH
19239: LD_VAR 0 3
19243: PPUSH
19244: LD_INT 1
19246: PPUSH
19247: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
19251: LD_INT 11
19253: PPUSH
19254: LD_VAR 0 3
19258: PPUSH
19259: LD_INT 1
19261: PPUSH
19262: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
19266: LD_INT 12
19268: PPUSH
19269: LD_VAR 0 3
19273: PPUSH
19274: LD_INT 1
19276: PPUSH
19277: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
19281: LD_INT 13
19283: PPUSH
19284: LD_VAR 0 3
19288: PPUSH
19289: LD_INT 1
19291: PPUSH
19292: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
19296: LD_INT 14
19298: PPUSH
19299: LD_VAR 0 3
19303: PPUSH
19304: LD_INT 1
19306: PPUSH
19307: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
19311: LD_INT 15
19313: PPUSH
19314: LD_VAR 0 3
19318: PPUSH
19319: LD_INT 1
19321: PPUSH
19322: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
19326: LD_INT 16
19328: PPUSH
19329: LD_VAR 0 3
19333: PPUSH
19334: LD_INT 1
19336: PPUSH
19337: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
19341: LD_INT 17
19343: PPUSH
19344: LD_VAR 0 3
19348: PPUSH
19349: LD_INT 1
19351: PPUSH
19352: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
19356: LD_INT 19
19358: PPUSH
19359: LD_VAR 0 3
19363: PPUSH
19364: LD_INT 1
19366: PPUSH
19367: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
19371: LD_INT 20
19373: PPUSH
19374: LD_VAR 0 3
19378: PPUSH
19379: LD_INT 1
19381: PPUSH
19382: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
19386: LD_INT 21
19388: PPUSH
19389: LD_VAR 0 3
19393: PPUSH
19394: LD_INT 1
19396: PPUSH
19397: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
19401: LD_INT 23
19403: PPUSH
19404: LD_VAR 0 3
19408: PPUSH
19409: LD_INT 1
19411: PPUSH
19412: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
19416: LD_INT 26
19418: PPUSH
19419: LD_VAR 0 3
19423: PPUSH
19424: LD_INT 1
19426: PPUSH
19427: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
19431: LD_INT 27
19433: PPUSH
19434: LD_VAR 0 3
19438: PPUSH
19439: LD_INT 1
19441: PPUSH
19442: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
19446: LD_INT 28
19448: PPUSH
19449: LD_VAR 0 3
19453: PPUSH
19454: LD_INT 1
19456: PPUSH
19457: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19461: LD_INT 29
19463: PPUSH
19464: LD_VAR 0 3
19468: PPUSH
19469: LD_INT 1
19471: PPUSH
19472: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
19476: LD_INT 30
19478: PPUSH
19479: LD_VAR 0 3
19483: PPUSH
19484: LD_INT 1
19486: PPUSH
19487: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19491: LD_INT 31
19493: PPUSH
19494: LD_VAR 0 3
19498: PPUSH
19499: LD_INT 1
19501: PPUSH
19502: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
19506: LD_INT 32
19508: PPUSH
19509: LD_VAR 0 3
19513: PPUSH
19514: LD_INT 1
19516: PPUSH
19517: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
19521: LD_INT 36
19523: PPUSH
19524: LD_VAR 0 3
19528: PPUSH
19529: LD_INT 1
19531: PPUSH
19532: CALL_OW 324
// end ; 5 :
19536: GO 21667
19538: LD_INT 5
19540: DOUBLE
19541: EQUAL
19542: IFTRUE 19546
19544: GO 20659
19546: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19547: LD_INT 35
19549: PPUSH
19550: LD_VAR 0 3
19554: PPUSH
19555: LD_INT 1
19557: PPUSH
19558: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19562: LD_INT 45
19564: PPUSH
19565: LD_VAR 0 3
19569: PPUSH
19570: LD_INT 1
19572: PPUSH
19573: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19577: LD_INT 46
19579: PPUSH
19580: LD_VAR 0 3
19584: PPUSH
19585: LD_INT 1
19587: PPUSH
19588: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19592: LD_INT 47
19594: PPUSH
19595: LD_VAR 0 3
19599: PPUSH
19600: LD_INT 1
19602: PPUSH
19603: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19607: LD_INT 1
19609: PPUSH
19610: LD_VAR 0 3
19614: PPUSH
19615: LD_INT 1
19617: PPUSH
19618: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19622: LD_INT 2
19624: PPUSH
19625: LD_VAR 0 3
19629: PPUSH
19630: LD_INT 1
19632: PPUSH
19633: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19637: LD_INT 11
19639: PPUSH
19640: LD_VAR 0 3
19644: PPUSH
19645: LD_INT 1
19647: PPUSH
19648: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
19652: LD_INT 20
19654: PPUSH
19655: LD_VAR 0 3
19659: PPUSH
19660: LD_INT 1
19662: PPUSH
19663: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
19667: LD_INT 48
19669: PPUSH
19670: LD_VAR 0 3
19674: PPUSH
19675: LD_INT 1
19677: PPUSH
19678: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
19682: LD_INT 49
19684: PPUSH
19685: LD_VAR 0 3
19689: PPUSH
19690: LD_INT 1
19692: PPUSH
19693: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
19697: LD_INT 69
19699: PPUSH
19700: LD_VAR 0 3
19704: PPUSH
19705: LD_INT 1
19707: PPUSH
19708: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
19712: LD_INT 39
19714: PPUSH
19715: LD_VAR 0 3
19719: PPUSH
19720: LD_INT 1
19722: PPUSH
19723: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
19727: LD_INT 34
19729: PPUSH
19730: LD_VAR 0 3
19734: PPUSH
19735: LD_INT 1
19737: PPUSH
19738: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
19742: LD_INT 42
19744: PPUSH
19745: LD_VAR 0 3
19749: PPUSH
19750: LD_INT 1
19752: PPUSH
19753: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
19757: LD_INT 44
19759: PPUSH
19760: LD_VAR 0 3
19764: PPUSH
19765: LD_INT 1
19767: PPUSH
19768: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
19772: LD_INT 41
19774: PPUSH
19775: LD_VAR 0 3
19779: PPUSH
19780: LD_INT 1
19782: PPUSH
19783: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
19787: LD_INT 40
19789: PPUSH
19790: LD_VAR 0 3
19794: PPUSH
19795: LD_INT 1
19797: PPUSH
19798: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
19802: LD_INT 43
19804: PPUSH
19805: LD_VAR 0 3
19809: PPUSH
19810: LD_INT 1
19812: PPUSH
19813: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
19817: LD_INT 70
19819: PPUSH
19820: LD_VAR 0 3
19824: PPUSH
19825: LD_INT 1
19827: PPUSH
19828: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
19832: LD_INT 51
19834: PPUSH
19835: LD_VAR 0 3
19839: PPUSH
19840: LD_INT 1
19842: PPUSH
19843: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
19847: LD_INT 52
19849: PPUSH
19850: LD_VAR 0 3
19854: PPUSH
19855: LD_INT 1
19857: PPUSH
19858: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19862: LD_INT 6
19864: PPUSH
19865: LD_VAR 0 3
19869: PPUSH
19870: LD_INT 1
19872: PPUSH
19873: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19877: LD_INT 15
19879: PPUSH
19880: LD_VAR 0 3
19884: PPUSH
19885: LD_INT 1
19887: PPUSH
19888: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19892: LD_INT 7
19894: PPUSH
19895: LD_VAR 0 3
19899: PPUSH
19900: LD_INT 1
19902: PPUSH
19903: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19907: LD_INT 12
19909: PPUSH
19910: LD_VAR 0 3
19914: PPUSH
19915: LD_INT 1
19917: PPUSH
19918: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19922: LD_INT 17
19924: PPUSH
19925: LD_VAR 0 3
19929: PPUSH
19930: LD_INT 1
19932: PPUSH
19933: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19937: LD_INT 18
19939: PPUSH
19940: LD_VAR 0 3
19944: PPUSH
19945: LD_INT 1
19947: PPUSH
19948: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19952: LD_INT 60
19954: PPUSH
19955: LD_VAR 0 3
19959: PPUSH
19960: LD_INT 1
19962: PPUSH
19963: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19967: LD_INT 32
19969: PPUSH
19970: LD_VAR 0 3
19974: PPUSH
19975: LD_INT 1
19977: PPUSH
19978: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19982: LD_INT 9
19984: PPUSH
19985: LD_VAR 0 3
19989: PPUSH
19990: LD_INT 1
19992: PPUSH
19993: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19997: LD_INT 57
19999: PPUSH
20000: LD_VAR 0 3
20004: PPUSH
20005: LD_INT 1
20007: PPUSH
20008: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
20012: LD_INT 30
20014: PPUSH
20015: LD_VAR 0 3
20019: PPUSH
20020: LD_INT 1
20022: PPUSH
20023: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
20027: LD_INT 37
20029: PPUSH
20030: LD_VAR 0 3
20034: PPUSH
20035: LD_INT 1
20037: PPUSH
20038: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
20042: LD_INT 63
20044: PPUSH
20045: LD_VAR 0 3
20049: PPUSH
20050: LD_INT 1
20052: PPUSH
20053: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
20057: LD_INT 3
20059: PPUSH
20060: LD_VAR 0 3
20064: PPUSH
20065: LD_INT 1
20067: PPUSH
20068: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
20072: LD_INT 4
20074: PPUSH
20075: LD_VAR 0 3
20079: PPUSH
20080: LD_INT 1
20082: PPUSH
20083: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20087: LD_INT 5
20089: PPUSH
20090: LD_VAR 0 3
20094: PPUSH
20095: LD_INT 1
20097: PPUSH
20098: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20102: LD_INT 66
20104: PPUSH
20105: LD_VAR 0 3
20109: PPUSH
20110: LD_INT 1
20112: PPUSH
20113: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20117: LD_INT 21
20119: PPUSH
20120: LD_VAR 0 3
20124: PPUSH
20125: LD_INT 1
20127: PPUSH
20128: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20132: LD_INT 22
20134: PPUSH
20135: LD_VAR 0 3
20139: PPUSH
20140: LD_INT 1
20142: PPUSH
20143: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
20147: LD_INT 19
20149: PPUSH
20150: LD_VAR 0 3
20154: PPUSH
20155: LD_INT 1
20157: PPUSH
20158: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20162: LD_INT 54
20164: PPUSH
20165: LD_VAR 0 3
20169: PPUSH
20170: LD_INT 1
20172: PPUSH
20173: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
20177: LD_INT 55
20179: PPUSH
20180: LD_VAR 0 3
20184: PPUSH
20185: LD_INT 1
20187: PPUSH
20188: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20192: LD_INT 0
20194: PPUSH
20195: LD_VAR 0 3
20199: PPUSH
20200: LD_INT 1
20202: PPUSH
20203: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
20207: LD_INT 1
20209: PPUSH
20210: LD_VAR 0 3
20214: PPUSH
20215: LD_INT 1
20217: PPUSH
20218: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
20222: LD_INT 2
20224: PPUSH
20225: LD_VAR 0 3
20229: PPUSH
20230: LD_INT 1
20232: PPUSH
20233: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
20237: LD_INT 3
20239: PPUSH
20240: LD_VAR 0 3
20244: PPUSH
20245: LD_INT 1
20247: PPUSH
20248: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
20252: LD_INT 4
20254: PPUSH
20255: LD_VAR 0 3
20259: PPUSH
20260: LD_INT 1
20262: PPUSH
20263: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
20267: LD_INT 5
20269: PPUSH
20270: LD_VAR 0 3
20274: PPUSH
20275: LD_INT 1
20277: PPUSH
20278: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
20282: LD_INT 6
20284: PPUSH
20285: LD_VAR 0 3
20289: PPUSH
20290: LD_INT 1
20292: PPUSH
20293: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
20297: LD_INT 7
20299: PPUSH
20300: LD_VAR 0 3
20304: PPUSH
20305: LD_INT 1
20307: PPUSH
20308: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
20312: LD_INT 8
20314: PPUSH
20315: LD_VAR 0 3
20319: PPUSH
20320: LD_INT 1
20322: PPUSH
20323: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
20327: LD_INT 10
20329: PPUSH
20330: LD_VAR 0 3
20334: PPUSH
20335: LD_INT 1
20337: PPUSH
20338: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
20342: LD_INT 11
20344: PPUSH
20345: LD_VAR 0 3
20349: PPUSH
20350: LD_INT 1
20352: PPUSH
20353: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
20357: LD_INT 12
20359: PPUSH
20360: LD_VAR 0 3
20364: PPUSH
20365: LD_INT 1
20367: PPUSH
20368: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
20372: LD_INT 13
20374: PPUSH
20375: LD_VAR 0 3
20379: PPUSH
20380: LD_INT 1
20382: PPUSH
20383: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
20387: LD_INT 14
20389: PPUSH
20390: LD_VAR 0 3
20394: PPUSH
20395: LD_INT 1
20397: PPUSH
20398: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
20402: LD_INT 15
20404: PPUSH
20405: LD_VAR 0 3
20409: PPUSH
20410: LD_INT 1
20412: PPUSH
20413: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
20417: LD_INT 16
20419: PPUSH
20420: LD_VAR 0 3
20424: PPUSH
20425: LD_INT 1
20427: PPUSH
20428: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
20432: LD_INT 17
20434: PPUSH
20435: LD_VAR 0 3
20439: PPUSH
20440: LD_INT 1
20442: PPUSH
20443: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
20447: LD_INT 18
20449: PPUSH
20450: LD_VAR 0 3
20454: PPUSH
20455: LD_INT 1
20457: PPUSH
20458: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
20462: LD_INT 19
20464: PPUSH
20465: LD_VAR 0 3
20469: PPUSH
20470: LD_INT 1
20472: PPUSH
20473: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
20477: LD_INT 20
20479: PPUSH
20480: LD_VAR 0 3
20484: PPUSH
20485: LD_INT 1
20487: PPUSH
20488: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
20492: LD_INT 21
20494: PPUSH
20495: LD_VAR 0 3
20499: PPUSH
20500: LD_INT 1
20502: PPUSH
20503: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
20507: LD_INT 23
20509: PPUSH
20510: LD_VAR 0 3
20514: PPUSH
20515: LD_INT 1
20517: PPUSH
20518: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
20522: LD_INT 26
20524: PPUSH
20525: LD_VAR 0 3
20529: PPUSH
20530: LD_INT 1
20532: PPUSH
20533: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
20537: LD_INT 27
20539: PPUSH
20540: LD_VAR 0 3
20544: PPUSH
20545: LD_INT 1
20547: PPUSH
20548: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
20552: LD_INT 28
20554: PPUSH
20555: LD_VAR 0 3
20559: PPUSH
20560: LD_INT 1
20562: PPUSH
20563: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
20567: LD_INT 29
20569: PPUSH
20570: LD_VAR 0 3
20574: PPUSH
20575: LD_INT 1
20577: PPUSH
20578: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
20582: LD_INT 30
20584: PPUSH
20585: LD_VAR 0 3
20589: PPUSH
20590: LD_INT 1
20592: PPUSH
20593: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
20597: LD_INT 31
20599: PPUSH
20600: LD_VAR 0 3
20604: PPUSH
20605: LD_INT 1
20607: PPUSH
20608: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
20612: LD_INT 32
20614: PPUSH
20615: LD_VAR 0 3
20619: PPUSH
20620: LD_INT 1
20622: PPUSH
20623: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
20627: LD_INT 33
20629: PPUSH
20630: LD_VAR 0 3
20634: PPUSH
20635: LD_INT 1
20637: PPUSH
20638: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
20642: LD_INT 36
20644: PPUSH
20645: LD_VAR 0 3
20649: PPUSH
20650: LD_INT 1
20652: PPUSH
20653: CALL_OW 324
// end ; 6 :
20657: GO 21667
20659: LD_INT 6
20661: DOUBLE
20662: EQUAL
20663: IFTRUE 20667
20665: GO 21592
20667: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20668: LD_INT 35
20670: PPUSH
20671: LD_VAR 0 3
20675: PPUSH
20676: LD_INT 1
20678: PPUSH
20679: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20683: LD_INT 45
20685: PPUSH
20686: LD_VAR 0 3
20690: PPUSH
20691: LD_INT 1
20693: PPUSH
20694: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20698: LD_INT 46
20700: PPUSH
20701: LD_VAR 0 3
20705: PPUSH
20706: LD_INT 1
20708: PPUSH
20709: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20713: LD_INT 47
20715: PPUSH
20716: LD_VAR 0 3
20720: PPUSH
20721: LD_INT 1
20723: PPUSH
20724: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
20728: LD_INT 1
20730: PPUSH
20731: LD_VAR 0 3
20735: PPUSH
20736: LD_INT 1
20738: PPUSH
20739: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
20743: LD_INT 2
20745: PPUSH
20746: LD_VAR 0 3
20750: PPUSH
20751: LD_INT 1
20753: PPUSH
20754: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
20758: LD_INT 11
20760: PPUSH
20761: LD_VAR 0 3
20765: PPUSH
20766: LD_INT 1
20768: PPUSH
20769: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
20773: LD_INT 20
20775: PPUSH
20776: LD_VAR 0 3
20780: PPUSH
20781: LD_INT 1
20783: PPUSH
20784: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
20788: LD_INT 48
20790: PPUSH
20791: LD_VAR 0 3
20795: PPUSH
20796: LD_INT 1
20798: PPUSH
20799: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
20803: LD_INT 49
20805: PPUSH
20806: LD_VAR 0 3
20810: PPUSH
20811: LD_INT 1
20813: PPUSH
20814: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
20818: LD_INT 50
20820: PPUSH
20821: LD_VAR 0 3
20825: PPUSH
20826: LD_INT 1
20828: PPUSH
20829: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
20833: LD_INT 69
20835: PPUSH
20836: LD_VAR 0 3
20840: PPUSH
20841: LD_INT 1
20843: PPUSH
20844: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
20848: LD_INT 39
20850: PPUSH
20851: LD_VAR 0 3
20855: PPUSH
20856: LD_INT 1
20858: PPUSH
20859: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
20863: LD_INT 34
20865: PPUSH
20866: LD_VAR 0 3
20870: PPUSH
20871: LD_INT 1
20873: PPUSH
20874: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20878: LD_INT 42
20880: PPUSH
20881: LD_VAR 0 3
20885: PPUSH
20886: LD_INT 1
20888: PPUSH
20889: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20893: LD_INT 44
20895: PPUSH
20896: LD_VAR 0 3
20900: PPUSH
20901: LD_INT 1
20903: PPUSH
20904: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20908: LD_INT 41
20910: PPUSH
20911: LD_VAR 0 3
20915: PPUSH
20916: LD_INT 1
20918: PPUSH
20919: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
20923: LD_INT 13
20925: PPUSH
20926: LD_VAR 0 3
20930: PPUSH
20931: LD_INT 1
20933: PPUSH
20934: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
20938: LD_INT 40
20940: PPUSH
20941: LD_VAR 0 3
20945: PPUSH
20946: LD_INT 1
20948: PPUSH
20949: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20953: LD_INT 43
20955: PPUSH
20956: LD_VAR 0 3
20960: PPUSH
20961: LD_INT 1
20963: PPUSH
20964: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20968: LD_INT 70
20970: PPUSH
20971: LD_VAR 0 3
20975: PPUSH
20976: LD_INT 1
20978: PPUSH
20979: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
20983: LD_INT 23
20985: PPUSH
20986: LD_VAR 0 3
20990: PPUSH
20991: LD_INT 1
20993: PPUSH
20994: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20998: LD_INT 51
21000: PPUSH
21001: LD_VAR 0 3
21005: PPUSH
21006: LD_INT 1
21008: PPUSH
21009: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
21013: LD_INT 52
21015: PPUSH
21016: LD_VAR 0 3
21020: PPUSH
21021: LD_INT 1
21023: PPUSH
21024: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
21028: LD_INT 6
21030: PPUSH
21031: LD_VAR 0 3
21035: PPUSH
21036: LD_INT 1
21038: PPUSH
21039: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
21043: LD_INT 15
21045: PPUSH
21046: LD_VAR 0 3
21050: PPUSH
21051: LD_INT 1
21053: PPUSH
21054: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
21058: LD_INT 7
21060: PPUSH
21061: LD_VAR 0 3
21065: PPUSH
21066: LD_INT 1
21068: PPUSH
21069: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
21073: LD_INT 12
21075: PPUSH
21076: LD_VAR 0 3
21080: PPUSH
21081: LD_INT 1
21083: PPUSH
21084: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
21088: LD_INT 10
21090: PPUSH
21091: LD_VAR 0 3
21095: PPUSH
21096: LD_INT 1
21098: PPUSH
21099: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
21103: LD_INT 17
21105: PPUSH
21106: LD_VAR 0 3
21110: PPUSH
21111: LD_INT 1
21113: PPUSH
21114: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
21118: LD_INT 18
21120: PPUSH
21121: LD_VAR 0 3
21125: PPUSH
21126: LD_INT 1
21128: PPUSH
21129: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
21133: LD_INT 60
21135: PPUSH
21136: LD_VAR 0 3
21140: PPUSH
21141: LD_INT 1
21143: PPUSH
21144: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
21148: LD_INT 61
21150: PPUSH
21151: LD_VAR 0 3
21155: PPUSH
21156: LD_INT 1
21158: PPUSH
21159: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
21163: LD_INT 32
21165: PPUSH
21166: LD_VAR 0 3
21170: PPUSH
21171: LD_INT 1
21173: PPUSH
21174: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
21178: LD_INT 27
21180: PPUSH
21181: LD_VAR 0 3
21185: PPUSH
21186: LD_INT 1
21188: PPUSH
21189: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
21193: LD_INT 36
21195: PPUSH
21196: LD_VAR 0 3
21200: PPUSH
21201: LD_INT 1
21203: PPUSH
21204: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
21208: LD_INT 33
21210: PPUSH
21211: LD_VAR 0 3
21215: PPUSH
21216: LD_INT 1
21218: PPUSH
21219: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
21223: LD_INT 9
21225: PPUSH
21226: LD_VAR 0 3
21230: PPUSH
21231: LD_INT 1
21233: PPUSH
21234: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
21238: LD_INT 38
21240: PPUSH
21241: LD_VAR 0 3
21245: PPUSH
21246: LD_INT 1
21248: PPUSH
21249: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
21253: LD_INT 57
21255: PPUSH
21256: LD_VAR 0 3
21260: PPUSH
21261: LD_INT 1
21263: PPUSH
21264: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
21268: LD_INT 58
21270: PPUSH
21271: LD_VAR 0 3
21275: PPUSH
21276: LD_INT 1
21278: PPUSH
21279: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
21283: LD_INT 28
21285: PPUSH
21286: LD_VAR 0 3
21290: PPUSH
21291: LD_INT 1
21293: PPUSH
21294: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
21298: LD_INT 29
21300: PPUSH
21301: LD_VAR 0 3
21305: PPUSH
21306: LD_INT 1
21308: PPUSH
21309: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
21313: LD_INT 30
21315: PPUSH
21316: LD_VAR 0 3
21320: PPUSH
21321: LD_INT 1
21323: PPUSH
21324: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
21328: LD_INT 37
21330: PPUSH
21331: LD_VAR 0 3
21335: PPUSH
21336: LD_INT 1
21338: PPUSH
21339: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
21343: LD_INT 63
21345: PPUSH
21346: LD_VAR 0 3
21350: PPUSH
21351: LD_INT 1
21353: PPUSH
21354: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
21358: LD_INT 64
21360: PPUSH
21361: LD_VAR 0 3
21365: PPUSH
21366: LD_INT 1
21368: PPUSH
21369: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
21373: LD_INT 3
21375: PPUSH
21376: LD_VAR 0 3
21380: PPUSH
21381: LD_INT 1
21383: PPUSH
21384: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
21388: LD_INT 4
21390: PPUSH
21391: LD_VAR 0 3
21395: PPUSH
21396: LD_INT 1
21398: PPUSH
21399: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
21403: LD_INT 5
21405: PPUSH
21406: LD_VAR 0 3
21410: PPUSH
21411: LD_INT 1
21413: PPUSH
21414: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
21418: LD_INT 8
21420: PPUSH
21421: LD_VAR 0 3
21425: PPUSH
21426: LD_INT 1
21428: PPUSH
21429: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
21433: LD_INT 66
21435: PPUSH
21436: LD_VAR 0 3
21440: PPUSH
21441: LD_INT 1
21443: PPUSH
21444: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
21448: LD_INT 67
21450: PPUSH
21451: LD_VAR 0 3
21455: PPUSH
21456: LD_INT 1
21458: PPUSH
21459: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
21463: LD_INT 21
21465: PPUSH
21466: LD_VAR 0 3
21470: PPUSH
21471: LD_INT 1
21473: PPUSH
21474: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
21478: LD_INT 22
21480: PPUSH
21481: LD_VAR 0 3
21485: PPUSH
21486: LD_INT 1
21488: PPUSH
21489: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
21493: LD_INT 19
21495: PPUSH
21496: LD_VAR 0 3
21500: PPUSH
21501: LD_INT 1
21503: PPUSH
21504: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
21508: LD_INT 26
21510: PPUSH
21511: LD_VAR 0 3
21515: PPUSH
21516: LD_INT 1
21518: PPUSH
21519: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
21523: LD_INT 54
21525: PPUSH
21526: LD_VAR 0 3
21530: PPUSH
21531: LD_INT 1
21533: PPUSH
21534: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
21538: LD_INT 55
21540: PPUSH
21541: LD_VAR 0 3
21545: PPUSH
21546: LD_INT 1
21548: PPUSH
21549: CALL_OW 322
// for i = 0 to 39 do
21553: LD_ADDR_VAR 0 4
21557: PUSH
21558: DOUBLE
21559: LD_INT 0
21561: DEC
21562: ST_TO_ADDR
21563: LD_INT 39
21565: PUSH
21566: FOR_TO
21567: IFFALSE 21588
// SetRestrict ( i , side , true ) ;
21569: LD_VAR 0 4
21573: PPUSH
21574: LD_VAR 0 3
21578: PPUSH
21579: LD_INT 1
21581: PPUSH
21582: CALL_OW 324
21586: GO 21566
21588: POP
21589: POP
// end ; else
21590: GO 21667
21592: POP
// begin for i = 1 to 73 do
21593: LD_ADDR_VAR 0 4
21597: PUSH
21598: DOUBLE
21599: LD_INT 1
21601: DEC
21602: ST_TO_ADDR
21603: LD_INT 73
21605: PUSH
21606: FOR_TO
21607: IFFALSE 21628
// SetTech ( i , side , state_enabled ) ;
21609: LD_VAR 0 4
21613: PPUSH
21614: LD_VAR 0 3
21618: PPUSH
21619: LD_INT 1
21621: PPUSH
21622: CALL_OW 322
21626: GO 21606
21628: POP
21629: POP
// for i = 0 to 39 do
21630: LD_ADDR_VAR 0 4
21634: PUSH
21635: DOUBLE
21636: LD_INT 0
21638: DEC
21639: ST_TO_ADDR
21640: LD_INT 39
21642: PUSH
21643: FOR_TO
21644: IFFALSE 21665
// SetRestrict ( i , side , true ) ;
21646: LD_VAR 0 4
21650: PPUSH
21651: LD_VAR 0 3
21655: PPUSH
21656: LD_INT 1
21658: PPUSH
21659: CALL_OW 324
21663: GO 21643
21665: POP
21666: POP
// end ; end ; end ;
21667: GO 17672
21669: POP
21670: POP
// end ;
21671: LD_VAR 0 2
21675: RET
