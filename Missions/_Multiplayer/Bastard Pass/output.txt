// export def_main_base , def_secondary_base , def_defence_level , def_amount_of_people , def_initial_level , def_main_deposits , def_secondary_deposits , def_siberite_detection , def_starting_resources , def_shipments_density , def_people_arrivals , def_people_loyality , def_people_info , def_morale_flags , def_siberite_bomb , def_amount_of_apemen , def_builduptime , def_win_rules , def_people_respawning ; export is_depot , number_of_people , number_of_pplants , are_mines , is_lab , is_fact , is_arm , are_breastworks , deposits , initial_level , starting_crates , starting_resources , shipments_density , max_arriving_times , text_info , fog_info , def_bf_params , amount_of_apemen , siberite_bomb_Delay ; export Positions , Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export second_side , third_nation ; export start_def , depots_def , breastworks_def , labs_def , factories_def , armories_def , pplants_def , deposits_def ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i ; var u1 , u2 , pom_tab , p1 , p2 , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
  73: PPUSH
  74: PPUSH
  75: PPUSH
  76: PPUSH
  77: PPUSH
  78: PPUSH
  79: PPUSH
  80: PPUSH
  81: PPUSH
  82: PPUSH
  83: PPUSH
// if MultiPlayer then
  84: LD_OWVAR 4
  88: IFFALSE 162
// begin Game_Type = mp_game_type ;
  90: LD_ADDR_EXP 64
  94: PUSH
  95: LD_OWVAR 6
  99: ST_TO_ADDR
// Your_Side = mp_player_side ;
 100: LD_ADDR_OWVAR 2
 104: PUSH
 105: LD_OWVAR 7
 109: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_OWVAR 17
 119: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 120: LD_ADDR_EXP 40
 124: PUSH
 125: LD_OWVAR 15
 129: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 130: LD_ADDR_EXP 44
 134: PUSH
 135: LD_OWVAR 16
 139: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 140: LD_ADDR_EXP 42
 144: PUSH
 145: CALL 0 0 0
 149: ST_TO_ADDR
// Teams = mp_teams ;
 150: LD_ADDR_EXP 41
 154: PUSH
 155: LD_OWVAR 12
 159: ST_TO_ADDR
// end else
 160: GO 333
// begin Your_Side = 3 ;
 162: LD_ADDR_OWVAR 2
 166: PUSH
 167: LD_INT 3
 169: ST_TO_ADDR
// Side_Positions = [ 0 , 0 , 2 , 0 , 1 , 0 , 0 , 0 ] ;
 170: LD_ADDR_EXP 43
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 2
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 1
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: LD_INT 0
 198: PUSH
 199: EMPTY
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: LIST
 208: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 209: LD_ADDR_EXP 40
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: LD_INT 0
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: LIST
 246: LIST
 247: ST_TO_ADDR
// Side_Nations = [ 0 , 0 , 3 , 0 , 2 , 0 , 0 , 0 ] ;
 248: LD_ADDR_EXP 44
 252: PUSH
 253: LD_INT 0
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 3
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 2
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: LD_INT 0
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: LIST
 284: LIST
 285: LIST
 286: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 287: LD_ADDR_EXP 42
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: LD_INT 0
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: ST_TO_ADDR
// Teams = [ ] ;
 326: LD_ADDR_EXP 41
 330: PUSH
 331: EMPTY
 332: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 333: LD_ADDR_EXP 45
 337: PUSH
 338: LD_EXP 40
 342: PUSH
 343: LD_INT 0
 345: PUSH
 346: EMPTY
 347: LIST
 348: DIFF
 349: PUSH
 350: LD_INT 1
 352: GREATER
 353: ST_TO_ADDR
// p1 := 0 ;
 354: LD_ADDR_VAR 0 12
 358: PUSH
 359: LD_INT 0
 361: ST_TO_ADDR
// p2 := 0 ;
 362: LD_ADDR_VAR 0 13
 366: PUSH
 367: LD_INT 0
 369: ST_TO_ADDR
// for i := 1 to 8 do
 370: LD_ADDR_VAR 0 8
 374: PUSH
 375: DOUBLE
 376: LD_INT 1
 378: DEC
 379: ST_TO_ADDR
 380: LD_INT 8
 382: PUSH
 383: FOR_TO
 384: IFFALSE 442
// if Side_Positions [ i ] = 1 then
 386: LD_EXP 43
 390: PUSH
 391: LD_VAR 0 8
 395: ARRAY
 396: PUSH
 397: LD_INT 1
 399: EQUAL
 400: IFFALSE 414
// p1 := i else
 402: LD_ADDR_VAR 0 12
 406: PUSH
 407: LD_VAR 0 8
 411: ST_TO_ADDR
 412: GO 440
// if Side_Positions [ i ] = 2 then
 414: LD_EXP 43
 418: PUSH
 419: LD_VAR 0 8
 423: ARRAY
 424: PUSH
 425: LD_INT 2
 427: EQUAL
 428: IFFALSE 440
// p2 := i ;
 430: LD_ADDR_VAR 0 13
 434: PUSH
 435: LD_VAR 0 8
 439: ST_TO_ADDR
 440: GO 383
 442: POP
 443: POP
// Positions := [ p1 , p2 ] ;
 444: LD_ADDR_EXP 39
 448: PUSH
 449: LD_VAR 0 12
 453: PUSH
 454: LD_VAR 0 13
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: ST_TO_ADDR
// if MultiPlayer then
 463: LD_OWVAR 4
 467: IFFALSE 721
// begin def_main_base = GetMultiplayerSetting ( 0 ) ;
 469: LD_ADDR_EXP 1
 473: PUSH
 474: LD_INT 0
 476: PPUSH
 477: CALL_OW 426
 481: ST_TO_ADDR
// def_secondary_base = GetMultiplayerSetting ( 1 ) ;
 482: LD_ADDR_EXP 2
 486: PUSH
 487: LD_INT 1
 489: PPUSH
 490: CALL_OW 426
 494: ST_TO_ADDR
// def_defence_level = GetMultiplayerSetting ( 2 ) ;
 495: LD_ADDR_EXP 3
 499: PUSH
 500: LD_INT 2
 502: PPUSH
 503: CALL_OW 426
 507: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 3 ) ;
 508: LD_ADDR_EXP 4
 512: PUSH
 513: LD_INT 3
 515: PPUSH
 516: CALL_OW 426
 520: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 4 ) ;
 521: LD_ADDR_EXP 5
 525: PUSH
 526: LD_INT 4
 528: PPUSH
 529: CALL_OW 426
 533: ST_TO_ADDR
// def_main_deposits = GetMultiplayerSetting ( 5 ) ;
 534: LD_ADDR_EXP 6
 538: PUSH
 539: LD_INT 5
 541: PPUSH
 542: CALL_OW 426
 546: ST_TO_ADDR
// def_secondary_deposits = GetMultiplayerSetting ( 6 ) ;
 547: LD_ADDR_EXP 7
 551: PUSH
 552: LD_INT 6
 554: PPUSH
 555: CALL_OW 426
 559: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 7 ) ;
 560: LD_ADDR_EXP 8
 564: PUSH
 565: LD_INT 7
 567: PPUSH
 568: CALL_OW 426
 572: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 8 ) ;
 573: LD_ADDR_EXP 9
 577: PUSH
 578: LD_INT 8
 580: PPUSH
 581: CALL_OW 426
 585: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 9 ) ;
 586: LD_ADDR_EXP 10
 590: PUSH
 591: LD_INT 9
 593: PPUSH
 594: CALL_OW 426
 598: ST_TO_ADDR
// def_people_arrivals = GetMultiplayerSetting ( 10 ) ;
 599: LD_ADDR_EXP 11
 603: PUSH
 604: LD_INT 10
 606: PPUSH
 607: CALL_OW 426
 611: ST_TO_ADDR
// def_people_loyality = GetMultiplayerSetting ( 11 ) ;
 612: LD_ADDR_EXP 12
 616: PUSH
 617: LD_INT 11
 619: PPUSH
 620: CALL_OW 426
 624: ST_TO_ADDR
// def_people_info = GetMultiplayerSetting ( 12 ) ;
 625: LD_ADDR_EXP 13
 629: PUSH
 630: LD_INT 12
 632: PPUSH
 633: CALL_OW 426
 637: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 15 ) ;
 638: LD_ADDR_EXP 14
 642: PUSH
 643: LD_INT 15
 645: PPUSH
 646: CALL_OW 426
 650: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 16 ) ;
 651: LD_ADDR_EXP 15
 655: PUSH
 656: LD_INT 16
 658: PPUSH
 659: CALL_OW 426
 663: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 17 ) ;
 664: LD_ADDR_EXP 16
 668: PUSH
 669: LD_INT 17
 671: PPUSH
 672: CALL_OW 426
 676: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
 677: LD_ADDR_EXP 17
 681: PUSH
 682: LD_INT 20
 684: PPUSH
 685: CALL_OW 426
 689: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 690: LD_ADDR_VAR 0 14
 694: PUSH
 695: LD_INT 22
 697: PPUSH
 698: CALL_OW 426
 702: ST_TO_ADDR
// def_people_respawning = 0 ;
 703: LD_ADDR_EXP 19
 707: PUSH
 708: LD_INT 0
 710: ST_TO_ADDR
// def_win_rules = 0 ;
 711: LD_ADDR_EXP 18
 715: PUSH
 716: LD_INT 0
 718: ST_TO_ADDR
// end else
 719: GO 893
// begin randomize ;
 721: CALL_OW 10
// def_main_base = 1 ;
 725: LD_ADDR_EXP 1
 729: PUSH
 730: LD_INT 1
 732: ST_TO_ADDR
// def_secondary_base = 1 ;
 733: LD_ADDR_EXP 2
 737: PUSH
 738: LD_INT 1
 740: ST_TO_ADDR
// def_defence_level = 1 ;
 741: LD_ADDR_EXP 3
 745: PUSH
 746: LD_INT 1
 748: ST_TO_ADDR
// def_amount_of_people = 2 ;
 749: LD_ADDR_EXP 4
 753: PUSH
 754: LD_INT 2
 756: ST_TO_ADDR
// def_initial_level = 1 ;
 757: LD_ADDR_EXP 5
 761: PUSH
 762: LD_INT 1
 764: ST_TO_ADDR
// def_main_deposits = 2 ;
 765: LD_ADDR_EXP 6
 769: PUSH
 770: LD_INT 2
 772: ST_TO_ADDR
// def_secondary_deposits = 1 ;
 773: LD_ADDR_EXP 7
 777: PUSH
 778: LD_INT 1
 780: ST_TO_ADDR
// def_siberite_detection = 1 ;
 781: LD_ADDR_EXP 8
 785: PUSH
 786: LD_INT 1
 788: ST_TO_ADDR
// def_starting_resources = 2 ;
 789: LD_ADDR_EXP 9
 793: PUSH
 794: LD_INT 2
 796: ST_TO_ADDR
// def_shipments_density = 70 ;
 797: LD_ADDR_EXP 10
 801: PUSH
 802: LD_INT 70
 804: ST_TO_ADDR
// def_people_arrivals = 3 ;
 805: LD_ADDR_EXP 11
 809: PUSH
 810: LD_INT 3
 812: ST_TO_ADDR
// def_people_loyality = 1 ;
 813: LD_ADDR_EXP 12
 817: PUSH
 818: LD_INT 1
 820: ST_TO_ADDR
// def_people_info = 1 ;
 821: LD_ADDR_EXP 13
 825: PUSH
 826: LD_INT 1
 828: ST_TO_ADDR
// def_morale_flags = 2 ;
 829: LD_ADDR_EXP 14
 833: PUSH
 834: LD_INT 2
 836: ST_TO_ADDR
// def_siberite_bomb = 1 ;
 837: LD_ADDR_EXP 15
 841: PUSH
 842: LD_INT 1
 844: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 845: LD_ADDR_EXP 16
 849: PUSH
 850: LD_INT 3
 852: ST_TO_ADDR
// def_builduptime = 1 ;
 853: LD_ADDR_EXP 17
 857: PUSH
 858: LD_INT 1
 860: ST_TO_ADDR
// def_game_rules = 0 ;
 861: LD_ADDR_EXP 65
 865: PUSH
 866: LD_INT 0
 868: ST_TO_ADDR
// tech_level = 4 ;
 869: LD_ADDR_VAR 0 14
 873: PUSH
 874: LD_INT 4
 876: ST_TO_ADDR
// def_people_respawning = 0 ;
 877: LD_ADDR_EXP 19
 881: PUSH
 882: LD_INT 0
 884: ST_TO_ADDR
// def_win_rules = 0 ;
 885: LD_ADDR_EXP 18
 889: PUSH
 890: LD_INT 0
 892: ST_TO_ADDR
// end ; InitGameRules ;
 893: CALL 13335 0 0
// if def_game_rules = 0 then
 897: LD_EXP 65
 901: PUSH
 902: LD_INT 0
 904: EQUAL
 905: IFFALSE 932
// begin if isSGUI then
 907: LD_OWVAR 83
 911: IFFALSE 919
// setMpTechs ( ) else
 913: CALL 16652 0 0
 917: GO 932
// begin SetMpTechLevel ( tech_level + 1 ) ;
 919: LD_VAR 0 14
 923: PUSH
 924: LD_INT 1
 926: PLUS
 927: PPUSH
 928: CALL 16799 0 1
// end ; end ; u1 = [ 0 , 1 , 1 , 1 , 2 ] [ def_main_base + 1 ] ;
 932: LD_ADDR_VAR 0 9
 936: PUSH
 937: LD_INT 0
 939: PUSH
 940: LD_INT 1
 942: PUSH
 943: LD_INT 1
 945: PUSH
 946: LD_INT 1
 948: PUSH
 949: LD_INT 2
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_EXP 1
 963: PUSH
 964: LD_INT 1
 966: PLUS
 967: ARRAY
 968: ST_TO_ADDR
// u2 = [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] ;
 969: LD_ADDR_VAR 0 10
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: LD_INT 1
 979: PUSH
 980: LD_INT 1
 982: PUSH
 983: LD_INT 2
 985: PUSH
 986: LD_INT 2
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: PUSH
 996: LD_EXP 1
1000: PUSH
1001: LD_INT 1
1003: PLUS
1004: ARRAY
1005: ST_TO_ADDR
// is_depot = [ [ 0 , 1 , 1 , 2 , 2 ] [ def_main_base + 1 ] , [ 0 , 1 , 1 ] [ def_secondary_base + 1 ] ] ;
1006: LD_ADDR_EXP 20
1010: PUSH
1011: LD_INT 0
1013: PUSH
1014: LD_INT 1
1016: PUSH
1017: LD_INT 1
1019: PUSH
1020: LD_INT 2
1022: PUSH
1023: LD_INT 2
1025: PUSH
1026: EMPTY
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: LD_EXP 1
1037: PUSH
1038: LD_INT 1
1040: PLUS
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: PUSH
1046: LD_INT 1
1048: PUSH
1049: LD_INT 1
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: LIST
1056: PUSH
1057: LD_EXP 2
1061: PUSH
1062: LD_INT 1
1064: PLUS
1065: ARRAY
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: ST_TO_ADDR
// if is_depot [ 2 ] then
1071: LD_EXP 20
1075: PUSH
1076: LD_INT 2
1078: ARRAY
1079: IFFALSE 1218
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ [ ] , [ 1 ] , [ 1 , 1 ] , [ 1 , 1 , 1 ] ] [ def_defence_level + 1 ] ] else
1081: LD_ADDR_EXP 27
1085: PUSH
1086: EMPTY
1087: PUSH
1088: LD_VAR 0 10
1092: PUSH
1093: LD_VAR 0 9
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: PUSH
1102: LD_VAR 0 10
1106: PUSH
1107: LD_VAR 0 10
1111: PUSH
1112: LD_VAR 0 9
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: PUSH
1122: LD_VAR 0 10
1126: PUSH
1127: LD_VAR 0 10
1131: PUSH
1132: LD_VAR 0 9
1136: PUSH
1137: LD_VAR 0 9
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: PUSH
1154: LD_EXP 3
1158: PUSH
1159: LD_INT 1
1161: PLUS
1162: ARRAY
1163: PUSH
1164: EMPTY
1165: PUSH
1166: LD_INT 1
1168: PUSH
1169: EMPTY
1170: LIST
1171: PUSH
1172: LD_INT 1
1174: PUSH
1175: LD_INT 1
1177: PUSH
1178: EMPTY
1179: LIST
1180: LIST
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: LD_INT 1
1187: PUSH
1188: LD_INT 1
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: PUSH
1202: LD_EXP 3
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: ARRAY
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: ST_TO_ADDR
1216: GO 1307
// are_breastworks = [ [ [ ] , [ u2 , u1 ] , [ u2 , u2 , u1 ] , [ u2 , u2 , u1 , u1 ] ] [ def_defence_level + 1 ] , [ ] ] ;
1218: LD_ADDR_EXP 27
1222: PUSH
1223: EMPTY
1224: PUSH
1225: LD_VAR 0 10
1229: PUSH
1230: LD_VAR 0 9
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: PUSH
1239: LD_VAR 0 10
1243: PUSH
1244: LD_VAR 0 10
1248: PUSH
1249: LD_VAR 0 9
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: PUSH
1259: LD_VAR 0 10
1263: PUSH
1264: LD_VAR 0 10
1268: PUSH
1269: LD_VAR 0 9
1273: PUSH
1274: LD_VAR 0 9
1278: PUSH
1279: EMPTY
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: PUSH
1291: LD_EXP 3
1295: PUSH
1296: LD_INT 1
1298: PLUS
1299: ARRAY
1300: PUSH
1301: EMPTY
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: ST_TO_ADDR
// is_fact = [ [ 0 , 0 , 1 , 2 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1307: LD_ADDR_EXP 25
1311: PUSH
1312: LD_INT 0
1314: PUSH
1315: LD_INT 0
1317: PUSH
1318: LD_INT 1
1320: PUSH
1321: LD_INT 2
1323: PUSH
1324: LD_INT 2
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: PUSH
1334: LD_EXP 1
1338: PUSH
1339: LD_INT 1
1341: PLUS
1342: ARRAY
1343: PUSH
1344: LD_INT 0
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: ST_TO_ADDR
// is_lab = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1351: LD_ADDR_EXP 24
1355: PUSH
1356: LD_INT 0
1358: PUSH
1359: LD_INT 0
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 2
1370: PUSH
1371: EMPTY
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: PUSH
1378: LD_EXP 1
1382: PUSH
1383: LD_INT 1
1385: PLUS
1386: ARRAY
1387: PUSH
1388: LD_INT 0
1390: PUSH
1391: EMPTY
1392: LIST
1393: LIST
1394: ST_TO_ADDR
// is_arm = [ [ 0 , 0 , 1 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1395: LD_ADDR_EXP 26
1399: PUSH
1400: LD_INT 0
1402: PUSH
1403: LD_INT 0
1405: PUSH
1406: LD_INT 1
1408: PUSH
1409: LD_INT 1
1411: PUSH
1412: LD_INT 2
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: PUSH
1422: LD_EXP 1
1426: PUSH
1427: LD_INT 1
1429: PLUS
1430: ARRAY
1431: PUSH
1432: LD_INT 0
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: ST_TO_ADDR
// are_mines = [ [ 0 , 0 , 0 , 1 , 1 ] [ def_main_base + 1 ] , [ 0 , 0 , 1 ] [ def_secondary_base + 1 ] ] ;
1439: LD_ADDR_EXP 23
1443: PUSH
1444: LD_INT 0
1446: PUSH
1447: LD_INT 0
1449: PUSH
1450: LD_INT 0
1452: PUSH
1453: LD_INT 1
1455: PUSH
1456: LD_INT 1
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: PUSH
1466: LD_EXP 1
1470: PUSH
1471: LD_INT 1
1473: PLUS
1474: ARRAY
1475: PUSH
1476: LD_INT 0
1478: PUSH
1479: LD_INT 0
1481: PUSH
1482: LD_INT 1
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: LIST
1489: PUSH
1490: LD_EXP 2
1494: PUSH
1495: LD_INT 1
1497: PLUS
1498: ARRAY
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: ST_TO_ADDR
// number_of_pplants = [ [ 0 , 0 , 0 , 1 , 2 ] [ def_main_base + 1 ] , 0 ] ;
1504: LD_ADDR_EXP 22
1508: PUSH
1509: LD_INT 0
1511: PUSH
1512: LD_INT 0
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 2
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_EXP 1
1535: PUSH
1536: LD_INT 1
1538: PLUS
1539: ARRAY
1540: PUSH
1541: LD_INT 0
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: ST_TO_ADDR
// number_of_people = [ [ 5 , 8 , 11 ] [ def_amount_of_people + 1 ] , ( [ 2 , 3 , 4 ] [ def_amount_of_people + 1 ] ) * is_depot [ 2 ] ] ;
1548: LD_ADDR_EXP 21
1552: PUSH
1553: LD_INT 5
1555: PUSH
1556: LD_INT 8
1558: PUSH
1559: LD_INT 11
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: LIST
1566: PUSH
1567: LD_EXP 4
1571: PUSH
1572: LD_INT 1
1574: PLUS
1575: ARRAY
1576: PUSH
1577: LD_INT 2
1579: PUSH
1580: LD_INT 3
1582: PUSH
1583: LD_INT 4
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: LIST
1590: PUSH
1591: LD_EXP 4
1595: PUSH
1596: LD_INT 1
1598: PLUS
1599: ARRAY
1600: PUSH
1601: LD_EXP 20
1605: PUSH
1606: LD_INT 2
1608: ARRAY
1609: MUL
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
1615: LD_ADDR_EXP 29
1619: PUSH
1620: LD_INT 2
1622: PUSH
1623: LD_INT 3
1625: PUSH
1626: LD_INT 4
1628: PUSH
1629: LD_INT 5
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: PUSH
1638: LD_EXP 5
1642: PUSH
1643: LD_INT 1
1645: PLUS
1646: ARRAY
1647: ST_TO_ADDR
// starting_resources = [ [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] , [ [ 50 , 0 , 0 ] , [ 20 , 0 , 0 ] ] , [ [ 150 , 30 , 0 ] , [ 60 , 0 , 0 ] ] , [ [ 250 , 50 , 10 ] , [ 100 , 30 , 0 ] ] ] [ def_starting_resources + 1 ] ;
1648: LD_ADDR_EXP 31
1652: PUSH
1653: LD_INT 0
1655: PUSH
1656: LD_INT 0
1658: PUSH
1659: LD_INT 0
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: LIST
1666: PUSH
1667: LD_INT 0
1669: PUSH
1670: LD_INT 0
1672: PUSH
1673: LD_INT 0
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: PUSH
1685: LD_INT 50
1687: PUSH
1688: LD_INT 0
1690: PUSH
1691: LD_INT 0
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: LIST
1698: PUSH
1699: LD_INT 20
1701: PUSH
1702: LD_INT 0
1704: PUSH
1705: LD_INT 0
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: LD_INT 150
1719: PUSH
1720: LD_INT 30
1722: PUSH
1723: LD_INT 0
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: PUSH
1731: LD_INT 60
1733: PUSH
1734: LD_INT 0
1736: PUSH
1737: LD_INT 0
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 250
1751: PUSH
1752: LD_INT 50
1754: PUSH
1755: LD_INT 10
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: LD_INT 100
1765: PUSH
1766: LD_INT 30
1768: PUSH
1769: LD_INT 0
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: PUSH
1787: LD_EXP 9
1791: PUSH
1792: LD_INT 1
1794: PLUS
1795: ARRAY
1796: ST_TO_ADDR
// shipments_density := 380 - ( def_shipments_density * 2 ) ;
1797: LD_ADDR_EXP 32
1801: PUSH
1802: LD_INT 380
1804: PUSH
1805: LD_EXP 10
1809: PUSH
1810: LD_INT 2
1812: MUL
1813: MINUS
1814: ST_TO_ADDR
// max_arriving_times = [ [ ] , [ 10 , 17 , 26 , 36 , 48 , 60 ] , [ 6 , 10 , 15 , 20 , 26 , 32 , 38 , 45 , 52 , 60 ] , [ 4 , 6 , 9 , 12 , 16 , 20 , 24 , 28 , 32 , 36 , 40 , 45 , 50 , 55 , 60 ] ] [ def_people_arrivals + 1 ] ;
1815: LD_ADDR_EXP 33
1819: PUSH
1820: EMPTY
1821: PUSH
1822: LD_INT 10
1824: PUSH
1825: LD_INT 17
1827: PUSH
1828: LD_INT 26
1830: PUSH
1831: LD_INT 36
1833: PUSH
1834: LD_INT 48
1836: PUSH
1837: LD_INT 60
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: PUSH
1848: LD_INT 6
1850: PUSH
1851: LD_INT 10
1853: PUSH
1854: LD_INT 15
1856: PUSH
1857: LD_INT 20
1859: PUSH
1860: LD_INT 26
1862: PUSH
1863: LD_INT 32
1865: PUSH
1866: LD_INT 38
1868: PUSH
1869: LD_INT 45
1871: PUSH
1872: LD_INT 52
1874: PUSH
1875: LD_INT 60
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 4
1892: PUSH
1893: LD_INT 6
1895: PUSH
1896: LD_INT 9
1898: PUSH
1899: LD_INT 12
1901: PUSH
1902: LD_INT 16
1904: PUSH
1905: LD_INT 20
1907: PUSH
1908: LD_INT 24
1910: PUSH
1911: LD_INT 28
1913: PUSH
1914: LD_INT 32
1916: PUSH
1917: LD_INT 36
1919: PUSH
1920: LD_INT 40
1922: PUSH
1923: LD_INT 45
1925: PUSH
1926: LD_INT 50
1928: PUSH
1929: LD_INT 55
1931: PUSH
1932: LD_INT 60
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: PUSH
1958: LD_EXP 11
1962: PUSH
1963: LD_INT 1
1965: PLUS
1966: ARRAY
1967: ST_TO_ADDR
// text_info = [ 0 , 1 , 0 , 1 ] [ def_people_info + 1 ] ;
1968: LD_ADDR_EXP 34
1972: PUSH
1973: LD_INT 0
1975: PUSH
1976: LD_INT 1
1978: PUSH
1979: LD_INT 0
1981: PUSH
1982: LD_INT 1
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: PUSH
1991: LD_EXP 13
1995: PUSH
1996: LD_INT 1
1998: PLUS
1999: ARRAY
2000: ST_TO_ADDR
// fog_info = [ 0 , 0 , 1 , 1 ] [ def_people_info + 1 ] ;
2001: LD_ADDR_EXP 35
2005: PUSH
2006: LD_INT 0
2008: PUSH
2009: LD_INT 0
2011: PUSH
2012: LD_INT 1
2014: PUSH
2015: LD_INT 1
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: PUSH
2024: LD_EXP 13
2028: PUSH
2029: LD_INT 1
2031: PLUS
2032: ARRAY
2033: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
2034: LD_ADDR_EXP 37
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 1
2044: PUSH
2045: LD_INT 2
2047: PUSH
2048: LD_INT 3
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: PUSH
2057: LD_EXP 16
2061: PUSH
2062: LD_INT 1
2064: PLUS
2065: ARRAY
2066: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
2067: LD_ADDR_EXP 38
2071: PUSH
2072: LD_INT 0
2074: PUSH
2075: LD_INT 1
2077: PUSH
2078: LD_INT 63000
2080: PUSH
2081: LD_INT 126000
2083: PUSH
2084: LD_INT 189000
2086: PUSH
2087: LD_INT 252000
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: LIST
2097: PUSH
2098: LD_EXP 15
2102: PUSH
2103: LD_INT 1
2105: PLUS
2106: ARRAY
2107: ST_TO_ADDR
// deposits = [ [ [ 1 , 0 , 1 , 2 , 0 ] [ def_main_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_main_deposits + 1 ] ] , [ [ 1 , 0 , 1 , 2 , 0 ] [ def_secondary_deposits + 1 ] , [ 0 , 1 , 1 , 0 , 2 ] [ def_secondary_deposits + 1 ] ] ] ;
2108: LD_ADDR_EXP 28
2112: PUSH
2113: LD_INT 1
2115: PUSH
2116: LD_INT 0
2118: PUSH
2119: LD_INT 1
2121: PUSH
2122: LD_INT 2
2124: PUSH
2125: LD_INT 0
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: LIST
2132: LIST
2133: LIST
2134: PUSH
2135: LD_EXP 6
2139: PUSH
2140: LD_INT 1
2142: PLUS
2143: ARRAY
2144: PUSH
2145: LD_INT 0
2147: PUSH
2148: LD_INT 1
2150: PUSH
2151: LD_INT 1
2153: PUSH
2154: LD_INT 0
2156: PUSH
2157: LD_INT 2
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_EXP 6
2171: PUSH
2172: LD_INT 1
2174: PLUS
2175: ARRAY
2176: PUSH
2177: EMPTY
2178: LIST
2179: LIST
2180: PUSH
2181: LD_INT 1
2183: PUSH
2184: LD_INT 0
2186: PUSH
2187: LD_INT 1
2189: PUSH
2190: LD_INT 2
2192: PUSH
2193: LD_INT 0
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: PUSH
2203: LD_EXP 7
2207: PUSH
2208: LD_INT 1
2210: PLUS
2211: ARRAY
2212: PUSH
2213: LD_INT 0
2215: PUSH
2216: LD_INT 1
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: LD_INT 0
2224: PUSH
2225: LD_INT 2
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: LIST
2234: PUSH
2235: LD_EXP 7
2239: PUSH
2240: LD_INT 1
2242: PLUS
2243: ARRAY
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: ST_TO_ADDR
// def_bf_params = [ [ 0 , 0 , 0 , 0 ] , [ 50 , 25 , 0 , 50 ] , [ 75 , 50 , 25 , 75 ] , [ 100 , 75 , 50 , 100 ] ] [ def_morale_flags + 1 ] ;
2253: LD_ADDR_EXP 36
2257: PUSH
2258: LD_INT 0
2260: PUSH
2261: LD_INT 0
2263: PUSH
2264: LD_INT 0
2266: PUSH
2267: LD_INT 0
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 50
2278: PUSH
2279: LD_INT 25
2281: PUSH
2282: LD_INT 0
2284: PUSH
2285: LD_INT 50
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: PUSH
2294: LD_INT 75
2296: PUSH
2297: LD_INT 50
2299: PUSH
2300: LD_INT 25
2302: PUSH
2303: LD_INT 75
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: PUSH
2312: LD_INT 100
2314: PUSH
2315: LD_INT 75
2317: PUSH
2318: LD_INT 50
2320: PUSH
2321: LD_INT 100
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: LIST
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: PUSH
2336: LD_EXP 14
2340: PUSH
2341: LD_INT 1
2343: PLUS
2344: ARRAY
2345: ST_TO_ADDR
// prepare_arrivals ;
2346: CALL 11049 0 0
// if def_people_loyality then
2350: LD_EXP 12
2354: IFFALSE 3219
// begin second_side = [ [ [ 0 , 0 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 6 , 7 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 4 , 2 ] , [ 4 , 2 ] ] , [ [ 5 , 4 ] , [ 0 , 0 ] , [ 5 , 6 ] , [ 5 , 1 ] , [ 7 , 3 ] , [ 5 , 3 ] , [ 5 , 4 ] , [ 5 , 4 ] ] , [ [ 6 , 4 ] , [ 6 , 5 ] , [ 0 , 0 ] , [ 6 , 1 ] , [ 6 , 2 ] , [ 5 , 1 ] , [ 6 , 4 ] , [ 6 , 2 ] ] , [ [ 7 , 6 ] , [ 1 , 5 ] , [ 1 , 6 ] , [ 0 , 0 ] , [ 1 , 2 ] , [ 1 , 3 ] , [ 1 , 2 ] , [ 1 , 2 ] ] , [ [ 2 , 4 ] , [ 3 , 7 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 0 , 0 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 2 , 4 ] ] , [ [ 3 , 4 ] , [ 3 , 5 ] , [ 1 , 5 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 0 , 0 ] , [ 3 , 4 ] , [ 3 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 4 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 4 , 3 ] , [ 0 , 0 ] , [ 4 , 2 ] ] , [ [ 2 , 4 ] , [ 4 , 5 ] , [ 2 , 6 ] , [ 2 , 1 ] , [ 4 , 2 ] , [ 2 , 3 ] , [ 2 , 4 ] , [ 0 , 0 ] ] ] [ positions [ 1 ] ] [ positions [ 2 ] ] ;
2356: LD_ADDR_EXP 46
2360: PUSH
2361: LD_INT 0
2363: PUSH
2364: LD_INT 0
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: PUSH
2371: LD_INT 4
2373: PUSH
2374: LD_INT 5
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PUSH
2381: LD_INT 4
2383: PUSH
2384: LD_INT 6
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: PUSH
2391: LD_INT 6
2393: PUSH
2394: LD_INT 7
2396: PUSH
2397: EMPTY
2398: LIST
2399: LIST
2400: PUSH
2401: LD_INT 4
2403: PUSH
2404: LD_INT 2
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: PUSH
2411: LD_INT 4
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PUSH
2421: LD_INT 4
2423: PUSH
2424: LD_INT 2
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: PUSH
2431: LD_INT 4
2433: PUSH
2434: LD_INT 2
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: LIST
2445: LIST
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 5
2453: PUSH
2454: LD_INT 4
2456: PUSH
2457: EMPTY
2458: LIST
2459: LIST
2460: PUSH
2461: LD_INT 0
2463: PUSH
2464: LD_INT 0
2466: PUSH
2467: EMPTY
2468: LIST
2469: LIST
2470: PUSH
2471: LD_INT 5
2473: PUSH
2474: LD_INT 6
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: PUSH
2481: LD_INT 5
2483: PUSH
2484: LD_INT 1
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: PUSH
2491: LD_INT 7
2493: PUSH
2494: LD_INT 3
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: PUSH
2501: LD_INT 5
2503: PUSH
2504: LD_INT 3
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: PUSH
2511: LD_INT 5
2513: PUSH
2514: LD_INT 4
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: PUSH
2521: LD_INT 5
2523: PUSH
2524: LD_INT 4
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: LIST
2540: PUSH
2541: LD_INT 6
2543: PUSH
2544: LD_INT 4
2546: PUSH
2547: EMPTY
2548: LIST
2549: LIST
2550: PUSH
2551: LD_INT 6
2553: PUSH
2554: LD_INT 5
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: PUSH
2561: LD_INT 0
2563: PUSH
2564: LD_INT 0
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: PUSH
2571: LD_INT 6
2573: PUSH
2574: LD_INT 1
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: PUSH
2581: LD_INT 6
2583: PUSH
2584: LD_INT 2
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 5
2593: PUSH
2594: LD_INT 1
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PUSH
2601: LD_INT 6
2603: PUSH
2604: LD_INT 4
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: PUSH
2611: LD_INT 6
2613: PUSH
2614: LD_INT 2
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: PUSH
2631: LD_INT 7
2633: PUSH
2634: LD_INT 6
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: LD_INT 5
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: LD_INT 6
2656: PUSH
2657: EMPTY
2658: LIST
2659: LIST
2660: PUSH
2661: LD_INT 0
2663: PUSH
2664: LD_INT 0
2666: PUSH
2667: EMPTY
2668: LIST
2669: LIST
2670: PUSH
2671: LD_INT 1
2673: PUSH
2674: LD_INT 2
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: PUSH
2681: LD_INT 1
2683: PUSH
2684: LD_INT 3
2686: PUSH
2687: EMPTY
2688: LIST
2689: LIST
2690: PUSH
2691: LD_INT 1
2693: PUSH
2694: LD_INT 2
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: PUSH
2701: LD_INT 1
2703: PUSH
2704: LD_INT 2
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: PUSH
2721: LD_INT 2
2723: PUSH
2724: LD_INT 4
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: PUSH
2731: LD_INT 3
2733: PUSH
2734: LD_INT 7
2736: PUSH
2737: EMPTY
2738: LIST
2739: LIST
2740: PUSH
2741: LD_INT 2
2743: PUSH
2744: LD_INT 6
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PUSH
2751: LD_INT 2
2753: PUSH
2754: LD_INT 1
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 0
2763: PUSH
2764: LD_INT 0
2766: PUSH
2767: EMPTY
2768: LIST
2769: LIST
2770: PUSH
2771: LD_INT 2
2773: PUSH
2774: LD_INT 3
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: LD_INT 4
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: PUSH
2791: LD_INT 2
2793: PUSH
2794: LD_INT 4
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: PUSH
2811: LD_INT 3
2813: PUSH
2814: LD_INT 4
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: PUSH
2821: LD_INT 3
2823: PUSH
2824: LD_INT 5
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: PUSH
2831: LD_INT 1
2833: PUSH
2834: LD_INT 5
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: LD_INT 3
2843: PUSH
2844: LD_INT 1
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: PUSH
2851: LD_INT 3
2853: PUSH
2854: LD_INT 2
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: LD_INT 0
2863: PUSH
2864: LD_INT 0
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: LD_INT 3
2873: PUSH
2874: LD_INT 4
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 3
2883: PUSH
2884: LD_INT 2
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: LIST
2895: LIST
2896: LIST
2897: LIST
2898: LIST
2899: LIST
2900: PUSH
2901: LD_INT 2
2903: PUSH
2904: LD_INT 4
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: PUSH
2911: LD_INT 4
2913: PUSH
2914: LD_INT 5
2916: PUSH
2917: EMPTY
2918: LIST
2919: LIST
2920: PUSH
2921: LD_INT 4
2923: PUSH
2924: LD_INT 6
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PUSH
2931: LD_INT 2
2933: PUSH
2934: LD_INT 1
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PUSH
2941: LD_INT 4
2943: PUSH
2944: LD_INT 2
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: LD_INT 4
2953: PUSH
2954: LD_INT 3
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 0
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: PUSH
2971: LD_INT 4
2973: PUSH
2974: LD_INT 2
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: LIST
2990: PUSH
2991: LD_INT 2
2993: PUSH
2994: LD_INT 4
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: PUSH
3001: LD_INT 4
3003: PUSH
3004: LD_INT 5
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: PUSH
3011: LD_INT 2
3013: PUSH
3014: LD_INT 6
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 2
3023: PUSH
3024: LD_INT 1
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: LD_INT 4
3033: PUSH
3034: LD_INT 2
3036: PUSH
3037: EMPTY
3038: LIST
3039: LIST
3040: PUSH
3041: LD_INT 2
3043: PUSH
3044: LD_INT 3
3046: PUSH
3047: EMPTY
3048: LIST
3049: LIST
3050: PUSH
3051: LD_INT 2
3053: PUSH
3054: LD_INT 4
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: PUSH
3061: LD_INT 0
3063: PUSH
3064: LD_INT 0
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: PUSH
3081: EMPTY
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: LIST
3089: LIST
3090: PUSH
3091: LD_EXP 39
3095: PUSH
3096: LD_INT 1
3098: ARRAY
3099: ARRAY
3100: PUSH
3101: LD_EXP 39
3105: PUSH
3106: LD_INT 2
3108: ARRAY
3109: ARRAY
3110: ST_TO_ADDR
// SetAttitude ( second_side [ 1 ] , positions [ 1 ] , att_friend , true ) ;
3111: LD_EXP 46
3115: PUSH
3116: LD_INT 1
3118: ARRAY
3119: PPUSH
3120: LD_EXP 39
3124: PUSH
3125: LD_INT 1
3127: ARRAY
3128: PPUSH
3129: LD_INT 1
3131: PPUSH
3132: LD_INT 1
3134: PPUSH
3135: CALL_OW 80
// SetAttitude ( second_side [ 2 ] , positions [ 2 ] , att_friend , true ) ;
3139: LD_EXP 46
3143: PUSH
3144: LD_INT 2
3146: ARRAY
3147: PPUSH
3148: LD_EXP 39
3152: PUSH
3153: LD_INT 2
3155: ARRAY
3156: PPUSH
3157: LD_INT 1
3159: PPUSH
3160: LD_INT 1
3162: PPUSH
3163: CALL_OW 80
// if fog_info then
3167: LD_EXP 35
3171: IFFALSE 3217
// begin ChangeSideFog ( second_side [ 1 ] , positions [ 1 ] ) ;
3173: LD_EXP 46
3177: PUSH
3178: LD_INT 1
3180: ARRAY
3181: PPUSH
3182: LD_EXP 39
3186: PUSH
3187: LD_INT 1
3189: ARRAY
3190: PPUSH
3191: CALL_OW 343
// ChangeSideFog ( second_side [ 2 ] , positions [ 2 ] ) ;
3195: LD_EXP 46
3199: PUSH
3200: LD_INT 2
3202: ARRAY
3203: PPUSH
3204: LD_EXP 39
3208: PUSH
3209: LD_INT 2
3211: ARRAY
3212: PPUSH
3213: CALL_OW 343
// end ; end else
3217: GO 3499
// begin pom_tab = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] diff ( positions union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 1 ] ] union [ 4 , [ 5 , 7 , 8 ] , 6 , [ 1 , 7 , 8 ] , 2 , 3 , [ 2 , 4 ] , [ 2 , 4 ] ] [ positions [ 2 ] ] ) ;
3219: LD_ADDR_VAR 0 11
3223: PUSH
3224: LD_INT 1
3226: PUSH
3227: LD_INT 2
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 4
3235: PUSH
3236: LD_INT 5
3238: PUSH
3239: LD_INT 6
3241: PUSH
3242: LD_INT 7
3244: PUSH
3245: LD_INT 8
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: PUSH
3258: LD_EXP 39
3262: PUSH
3263: LD_INT 4
3265: PUSH
3266: LD_INT 5
3268: PUSH
3269: LD_INT 7
3271: PUSH
3272: LD_INT 8
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: LIST
3279: PUSH
3280: LD_INT 6
3282: PUSH
3283: LD_INT 1
3285: PUSH
3286: LD_INT 7
3288: PUSH
3289: LD_INT 8
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: LIST
3296: PUSH
3297: LD_INT 2
3299: PUSH
3300: LD_INT 3
3302: PUSH
3303: LD_INT 2
3305: PUSH
3306: LD_INT 4
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: LD_INT 2
3315: PUSH
3316: LD_INT 4
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: PUSH
3333: LD_EXP 39
3337: PUSH
3338: LD_INT 1
3340: ARRAY
3341: ARRAY
3342: UNION
3343: PUSH
3344: LD_INT 4
3346: PUSH
3347: LD_INT 5
3349: PUSH
3350: LD_INT 7
3352: PUSH
3353: LD_INT 8
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: LIST
3360: PUSH
3361: LD_INT 6
3363: PUSH
3364: LD_INT 1
3366: PUSH
3367: LD_INT 7
3369: PUSH
3370: LD_INT 8
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: LIST
3377: PUSH
3378: LD_INT 2
3380: PUSH
3381: LD_INT 3
3383: PUSH
3384: LD_INT 2
3386: PUSH
3387: LD_INT 4
3389: PUSH
3390: EMPTY
3391: LIST
3392: LIST
3393: PUSH
3394: LD_INT 2
3396: PUSH
3397: LD_INT 4
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: PUSH
3414: LD_EXP 39
3418: PUSH
3419: LD_INT 2
3421: ARRAY
3422: ARRAY
3423: UNION
3424: DIFF
3425: ST_TO_ADDR
// second_side = pom_tab [ Rand ( 1 , pom_tab ) ] ;
3426: LD_ADDR_EXP 46
3430: PUSH
3431: LD_VAR 0 11
3435: PUSH
3436: LD_INT 1
3438: PPUSH
3439: LD_VAR 0 11
3443: PPUSH
3444: CALL_OW 12
3448: ARRAY
3449: ST_TO_ADDR
// third_nation = [ 1 , 2 , 3 ] diff side_nations ;
3450: LD_ADDR_EXP 47
3454: PUSH
3455: LD_INT 1
3457: PUSH
3458: LD_INT 2
3460: PUSH
3461: LD_INT 3
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: LIST
3468: PUSH
3469: LD_EXP 44
3473: DIFF
3474: ST_TO_ADDR
// third_nation = third_nation [ Rand ( 1 , third_nation ) ] ;
3475: LD_ADDR_EXP 47
3479: PUSH
3480: LD_EXP 47
3484: PUSH
3485: LD_INT 1
3487: PPUSH
3488: LD_EXP 47
3492: PPUSH
3493: CALL_OW 12
3497: ARRAY
3498: ST_TO_ADDR
// end ; end ;
3499: LD_VAR 0 1
3503: RET
// function prepare_map_coordinates ; var side , dep2 , br2 , dep1 , br1 , lab , fac , arm , pplant , un , i , k11 , k12 , k21 , k22 ; begin
3504: LD_INT 0
3506: PPUSH
3507: PPUSH
3508: PPUSH
3509: PPUSH
3510: PPUSH
3511: PPUSH
3512: PPUSH
3513: PPUSH
3514: PPUSH
3515: PPUSH
3516: PPUSH
3517: PPUSH
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
// start_def = [ ] ;
3522: LD_ADDR_EXP 48
3526: PUSH
3527: EMPTY
3528: ST_TO_ADDR
// depots_def = [ ] ;
3529: LD_ADDR_EXP 49
3533: PUSH
3534: EMPTY
3535: ST_TO_ADDR
// breastworks_def = [ ] ;
3536: LD_ADDR_EXP 50
3540: PUSH
3541: EMPTY
3542: ST_TO_ADDR
// labs_def = [ ] ;
3543: LD_ADDR_EXP 51
3547: PUSH
3548: EMPTY
3549: ST_TO_ADDR
// factories_def = [ ] ;
3550: LD_ADDR_EXP 52
3554: PUSH
3555: EMPTY
3556: ST_TO_ADDR
// armories_def = [ ] ;
3557: LD_ADDR_EXP 53
3561: PUSH
3562: EMPTY
3563: ST_TO_ADDR
// pplants_def = [ ] ;
3564: LD_ADDR_EXP 54
3568: PUSH
3569: EMPTY
3570: ST_TO_ADDR
// deposits_def = [ ] ;
3571: LD_ADDR_EXP 55
3575: PUSH
3576: EMPTY
3577: ST_TO_ADDR
// k11 := Rand ( 1 , 2 ) ;
3578: LD_ADDR_VAR 0 13
3582: PUSH
3583: LD_INT 1
3585: PPUSH
3586: LD_INT 2
3588: PPUSH
3589: CALL_OW 12
3593: ST_TO_ADDR
// k12 := Rand ( 1 , 2 ) ;
3594: LD_ADDR_VAR 0 14
3598: PUSH
3599: LD_INT 1
3601: PPUSH
3602: LD_INT 2
3604: PPUSH
3605: CALL_OW 12
3609: ST_TO_ADDR
// k21 := Rand ( 1 , 2 ) ;
3610: LD_ADDR_VAR 0 15
3614: PUSH
3615: LD_INT 1
3617: PPUSH
3618: LD_INT 2
3620: PPUSH
3621: CALL_OW 12
3625: ST_TO_ADDR
// k22 := Rand ( 1 , 2 ) ;
3626: LD_ADDR_VAR 0 16
3630: PUSH
3631: LD_INT 1
3633: PPUSH
3634: LD_INT 2
3636: PPUSH
3637: CALL_OW 12
3641: ST_TO_ADDR
// deposits_def := [ [ [ [ Res111 , Res112 ] [ k11 ] , [ Res111 , Res112 ] [ 3 - k11 ] ] , [ [ Res121 , Res122 ] [ k12 ] , [ Res121 , Res122 ] [ 3 - k12 ] ] ] , [ [ [ Res211 , Res212 ] [ k21 ] , [ Res211 , Res212 ] [ 3 - k21 ] ] , [ [ Res221 , Res222 ] [ k22 ] , [ Res221 , Res222 ] [ 3 - k22 ] ] ] ] ;
3642: LD_ADDR_EXP 55
3646: PUSH
3647: LD_INT 4
3649: PUSH
3650: LD_INT 5
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: PUSH
3657: LD_VAR 0 13
3661: ARRAY
3662: PUSH
3663: LD_INT 4
3665: PUSH
3666: LD_INT 5
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: PUSH
3673: LD_INT 3
3675: PUSH
3676: LD_VAR 0 13
3680: MINUS
3681: ARRAY
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: LD_INT 6
3689: PUSH
3690: LD_INT 7
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: PUSH
3697: LD_VAR 0 14
3701: ARRAY
3702: PUSH
3703: LD_INT 6
3705: PUSH
3706: LD_INT 7
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: PUSH
3713: LD_INT 3
3715: PUSH
3716: LD_VAR 0 14
3720: MINUS
3721: ARRAY
3722: PUSH
3723: EMPTY
3724: LIST
3725: LIST
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: PUSH
3731: LD_INT 8
3733: PUSH
3734: LD_INT 9
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: PUSH
3741: LD_VAR 0 15
3745: ARRAY
3746: PUSH
3747: LD_INT 8
3749: PUSH
3750: LD_INT 9
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: PUSH
3757: LD_INT 3
3759: PUSH
3760: LD_VAR 0 15
3764: MINUS
3765: ARRAY
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: LD_INT 10
3773: PUSH
3774: LD_INT 11
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: LD_VAR 0 16
3785: ARRAY
3786: PUSH
3787: LD_INT 10
3789: PUSH
3790: LD_INT 11
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: PUSH
3797: LD_INT 3
3799: PUSH
3800: LD_VAR 0 16
3804: MINUS
3805: ARRAY
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: ST_TO_ADDR
// for side := 1 to 2 do
3819: LD_ADDR_VAR 0 2
3823: PUSH
3824: DOUBLE
3825: LD_INT 1
3827: DEC
3828: ST_TO_ADDR
3829: LD_INT 2
3831: PUSH
3832: FOR_TO
3833: IFFALSE 4965
// begin dep1 := side * 10 - 9 ;
3835: LD_ADDR_VAR 0 5
3839: PUSH
3840: LD_VAR 0 2
3844: PUSH
3845: LD_INT 10
3847: MUL
3848: PUSH
3849: LD_INT 9
3851: MINUS
3852: ST_TO_ADDR
// dep2 := 20 + side * 4 - 3 ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_INT 20
3860: PUSH
3861: LD_VAR 0 2
3865: PUSH
3866: LD_INT 4
3868: MUL
3869: PLUS
3870: PUSH
3871: LD_INT 3
3873: MINUS
3874: ST_TO_ADDR
// br1 := [ side * 10 - 8 , side * 10 - 7 , side * 10 - 6 , side * 10 - 5 ] ;
3875: LD_ADDR_VAR 0 6
3879: PUSH
3880: LD_VAR 0 2
3884: PUSH
3885: LD_INT 10
3887: MUL
3888: PUSH
3889: LD_INT 8
3891: MINUS
3892: PUSH
3893: LD_VAR 0 2
3897: PUSH
3898: LD_INT 10
3900: MUL
3901: PUSH
3902: LD_INT 7
3904: MINUS
3905: PUSH
3906: LD_VAR 0 2
3910: PUSH
3911: LD_INT 10
3913: MUL
3914: PUSH
3915: LD_INT 6
3917: MINUS
3918: PUSH
3919: LD_VAR 0 2
3923: PUSH
3924: LD_INT 10
3926: MUL
3927: PUSH
3928: LD_INT 5
3930: MINUS
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: ST_TO_ADDR
// br2 := [ 20 + side * 4 - 2 , 20 + side * 4 - 1 , 20 + side * 4 ] ;
3938: LD_ADDR_VAR 0 4
3942: PUSH
3943: LD_INT 20
3945: PUSH
3946: LD_VAR 0 2
3950: PUSH
3951: LD_INT 4
3953: MUL
3954: PLUS
3955: PUSH
3956: LD_INT 2
3958: MINUS
3959: PUSH
3960: LD_INT 20
3962: PUSH
3963: LD_VAR 0 2
3967: PUSH
3968: LD_INT 4
3970: MUL
3971: PLUS
3972: PUSH
3973: LD_INT 1
3975: MINUS
3976: PUSH
3977: LD_INT 20
3979: PUSH
3980: LD_VAR 0 2
3984: PUSH
3985: LD_INT 4
3987: MUL
3988: PLUS
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: LIST
3994: ST_TO_ADDR
// lab := side * 10 - 4 ;
3995: LD_ADDR_VAR 0 7
3999: PUSH
4000: LD_VAR 0 2
4004: PUSH
4005: LD_INT 10
4007: MUL
4008: PUSH
4009: LD_INT 4
4011: MINUS
4012: ST_TO_ADDR
// fac := side * 10 - 3 ;
4013: LD_ADDR_VAR 0 8
4017: PUSH
4018: LD_VAR 0 2
4022: PUSH
4023: LD_INT 10
4025: MUL
4026: PUSH
4027: LD_INT 3
4029: MINUS
4030: ST_TO_ADDR
// arm := side * 10 - 2 ;
4031: LD_ADDR_VAR 0 9
4035: PUSH
4036: LD_VAR 0 2
4040: PUSH
4041: LD_INT 10
4043: MUL
4044: PUSH
4045: LD_INT 2
4047: MINUS
4048: ST_TO_ADDR
// pplant := [ side * 10 - 1 , side * 10 ] ;
4049: LD_ADDR_VAR 0 10
4053: PUSH
4054: LD_VAR 0 2
4058: PUSH
4059: LD_INT 10
4061: MUL
4062: PUSH
4063: LD_INT 1
4065: MINUS
4066: PUSH
4067: LD_VAR 0 2
4071: PUSH
4072: LD_INT 10
4074: MUL
4075: PUSH
4076: EMPTY
4077: LIST
4078: LIST
4079: ST_TO_ADDR
// depots_def := depots_def ^ [ [ [ GetX ( dep1 ) , GetY ( dep1 ) , GetDir ( dep1 ) ] , [ GetX ( dep2 ) , GetY ( dep2 ) , GetDir ( dep2 ) ] ] ] ;
4080: LD_ADDR_EXP 49
4084: PUSH
4085: LD_EXP 49
4089: PUSH
4090: LD_VAR 0 5
4094: PPUSH
4095: CALL_OW 250
4099: PUSH
4100: LD_VAR 0 5
4104: PPUSH
4105: CALL_OW 251
4109: PUSH
4110: LD_VAR 0 5
4114: PPUSH
4115: CALL_OW 254
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: LIST
4124: PUSH
4125: LD_VAR 0 3
4129: PPUSH
4130: CALL_OW 250
4134: PUSH
4135: LD_VAR 0 3
4139: PPUSH
4140: CALL_OW 251
4144: PUSH
4145: LD_VAR 0 3
4149: PPUSH
4150: CALL_OW 254
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PUSH
4164: EMPTY
4165: LIST
4166: ADD
4167: ST_TO_ADDR
// start_def := start_def ^ [ [ [ ShiftX ( GetX ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep1 ) , GetDir ( Dep1 ) mod 6 , 6 ) ] , [ ShiftX ( GetX ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) , ShiftY ( GetY ( Dep2 ) , GetDir ( Dep2 ) mod 6 , 6 ) ] ] ] ;
4168: LD_ADDR_EXP 48
4172: PUSH
4173: LD_EXP 48
4177: PUSH
4178: LD_VAR 0 5
4182: PPUSH
4183: CALL_OW 250
4187: PPUSH
4188: LD_VAR 0 5
4192: PPUSH
4193: CALL_OW 254
4197: PUSH
4198: LD_INT 6
4200: MOD
4201: PPUSH
4202: LD_INT 6
4204: PPUSH
4205: CALL_OW 272
4209: PUSH
4210: LD_VAR 0 5
4214: PPUSH
4215: CALL_OW 251
4219: PPUSH
4220: LD_VAR 0 5
4224: PPUSH
4225: CALL_OW 254
4229: PUSH
4230: LD_INT 6
4232: MOD
4233: PPUSH
4234: LD_INT 6
4236: PPUSH
4237: CALL_OW 273
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PUSH
4246: LD_VAR 0 3
4250: PPUSH
4251: CALL_OW 250
4255: PPUSH
4256: LD_VAR 0 3
4260: PPUSH
4261: CALL_OW 254
4265: PUSH
4266: LD_INT 6
4268: MOD
4269: PPUSH
4270: LD_INT 6
4272: PPUSH
4273: CALL_OW 272
4277: PUSH
4278: LD_VAR 0 3
4282: PPUSH
4283: CALL_OW 251
4287: PPUSH
4288: LD_VAR 0 3
4292: PPUSH
4293: CALL_OW 254
4297: PUSH
4298: LD_INT 6
4300: MOD
4301: PPUSH
4302: LD_INT 6
4304: PPUSH
4305: CALL_OW 273
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PUSH
4318: EMPTY
4319: LIST
4320: ADD
4321: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ [ GetX ( br1 [ 1 ] ) , GetY ( br1 [ 1 ] ) , GetDir ( br1 [ 1 ] ) ] , [ GetX ( br1 [ 2 ] ) , GetY ( br1 [ 2 ] ) , GetDir ( br1 [ 2 ] ) ] , [ GetX ( br1 [ 3 ] ) , GetY ( br1 [ 3 ] ) , GetDir ( br1 [ 3 ] ) ] , [ GetX ( br1 [ 4 ] ) , GetY ( br1 [ 4 ] ) , GetDir ( br1 [ 4 ] ) ] ] , [ [ GetX ( br2 [ 1 ] ) , GetY ( br2 [ 1 ] ) , GetDir ( br2 [ 1 ] ) ] , [ GetX ( br2 [ 2 ] ) , GetY ( br2 [ 2 ] ) , GetDir ( br2 [ 2 ] ) ] , [ GetX ( br2 [ 3 ] ) , GetY ( br2 [ 3 ] ) , GetDir ( br2 [ 3 ] ) ] ] ] ] ;
4322: LD_ADDR_EXP 50
4326: PUSH
4327: LD_EXP 50
4331: PUSH
4332: LD_VAR 0 6
4336: PUSH
4337: LD_INT 1
4339: ARRAY
4340: PPUSH
4341: CALL_OW 250
4345: PUSH
4346: LD_VAR 0 6
4350: PUSH
4351: LD_INT 1
4353: ARRAY
4354: PPUSH
4355: CALL_OW 251
4359: PUSH
4360: LD_VAR 0 6
4364: PUSH
4365: LD_INT 1
4367: ARRAY
4368: PPUSH
4369: CALL_OW 254
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: LIST
4378: PUSH
4379: LD_VAR 0 6
4383: PUSH
4384: LD_INT 2
4386: ARRAY
4387: PPUSH
4388: CALL_OW 250
4392: PUSH
4393: LD_VAR 0 6
4397: PUSH
4398: LD_INT 2
4400: ARRAY
4401: PPUSH
4402: CALL_OW 251
4406: PUSH
4407: LD_VAR 0 6
4411: PUSH
4412: LD_INT 2
4414: ARRAY
4415: PPUSH
4416: CALL_OW 254
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: LIST
4425: PUSH
4426: LD_VAR 0 6
4430: PUSH
4431: LD_INT 3
4433: ARRAY
4434: PPUSH
4435: CALL_OW 250
4439: PUSH
4440: LD_VAR 0 6
4444: PUSH
4445: LD_INT 3
4447: ARRAY
4448: PPUSH
4449: CALL_OW 251
4453: PUSH
4454: LD_VAR 0 6
4458: PUSH
4459: LD_INT 3
4461: ARRAY
4462: PPUSH
4463: CALL_OW 254
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: LD_VAR 0 6
4477: PUSH
4478: LD_INT 4
4480: ARRAY
4481: PPUSH
4482: CALL_OW 250
4486: PUSH
4487: LD_VAR 0 6
4491: PUSH
4492: LD_INT 4
4494: ARRAY
4495: PPUSH
4496: CALL_OW 251
4500: PUSH
4501: LD_VAR 0 6
4505: PUSH
4506: LD_INT 4
4508: ARRAY
4509: PPUSH
4510: CALL_OW 254
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: PUSH
4526: LD_VAR 0 4
4530: PUSH
4531: LD_INT 1
4533: ARRAY
4534: PPUSH
4535: CALL_OW 250
4539: PUSH
4540: LD_VAR 0 4
4544: PUSH
4545: LD_INT 1
4547: ARRAY
4548: PPUSH
4549: CALL_OW 251
4553: PUSH
4554: LD_VAR 0 4
4558: PUSH
4559: LD_INT 1
4561: ARRAY
4562: PPUSH
4563: CALL_OW 254
4567: PUSH
4568: EMPTY
4569: LIST
4570: LIST
4571: LIST
4572: PUSH
4573: LD_VAR 0 4
4577: PUSH
4578: LD_INT 2
4580: ARRAY
4581: PPUSH
4582: CALL_OW 250
4586: PUSH
4587: LD_VAR 0 4
4591: PUSH
4592: LD_INT 2
4594: ARRAY
4595: PPUSH
4596: CALL_OW 251
4600: PUSH
4601: LD_VAR 0 4
4605: PUSH
4606: LD_INT 2
4608: ARRAY
4609: PPUSH
4610: CALL_OW 254
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: PUSH
4620: LD_VAR 0 4
4624: PUSH
4625: LD_INT 3
4627: ARRAY
4628: PPUSH
4629: CALL_OW 250
4633: PUSH
4634: LD_VAR 0 4
4638: PUSH
4639: LD_INT 3
4641: ARRAY
4642: PPUSH
4643: CALL_OW 251
4647: PUSH
4648: LD_VAR 0 4
4652: PUSH
4653: LD_INT 3
4655: ARRAY
4656: PPUSH
4657: CALL_OW 254
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: LIST
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: LIST
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PUSH
4676: EMPTY
4677: LIST
4678: ADD
4679: ST_TO_ADDR
// labs_def := labs_def ^ [ [ [ GetX ( lab ) , GetY ( lab ) , GetDir ( lab ) ] , [ ] ] ] ;
4680: LD_ADDR_EXP 51
4684: PUSH
4685: LD_EXP 51
4689: PUSH
4690: LD_VAR 0 7
4694: PPUSH
4695: CALL_OW 250
4699: PUSH
4700: LD_VAR 0 7
4704: PPUSH
4705: CALL_OW 251
4709: PUSH
4710: LD_VAR 0 7
4714: PPUSH
4715: CALL_OW 254
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: LIST
4724: PUSH
4725: EMPTY
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: EMPTY
4732: LIST
4733: ADD
4734: ST_TO_ADDR
// factories_def := factories_def ^ [ [ [ GetX ( fac ) , GetY ( fac ) , GetDir ( fac ) ] , [ ] ] ] ;
4735: LD_ADDR_EXP 52
4739: PUSH
4740: LD_EXP 52
4744: PUSH
4745: LD_VAR 0 8
4749: PPUSH
4750: CALL_OW 250
4754: PUSH
4755: LD_VAR 0 8
4759: PPUSH
4760: CALL_OW 251
4764: PUSH
4765: LD_VAR 0 8
4769: PPUSH
4770: CALL_OW 254
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: PUSH
4780: EMPTY
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: EMPTY
4787: LIST
4788: ADD
4789: ST_TO_ADDR
// armories_def := armories_def ^ [ [ [ GetX ( arm ) , GetY ( arm ) , GetDir ( arm ) ] , [ ] ] ] ;
4790: LD_ADDR_EXP 53
4794: PUSH
4795: LD_EXP 53
4799: PUSH
4800: LD_VAR 0 9
4804: PPUSH
4805: CALL_OW 250
4809: PUSH
4810: LD_VAR 0 9
4814: PPUSH
4815: CALL_OW 251
4819: PUSH
4820: LD_VAR 0 9
4824: PPUSH
4825: CALL_OW 254
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: LIST
4834: PUSH
4835: EMPTY
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PUSH
4841: EMPTY
4842: LIST
4843: ADD
4844: ST_TO_ADDR
// pplants_def := pplants_def ^ [ [ [ [ GetX ( pplant [ 1 ] ) , GetY ( pplant [ 1 ] ) , GetDir ( pplant [ 1 ] ) ] , [ GetX ( pplant [ 2 ] ) , GetY ( pplant [ 2 ] ) , GetDir ( pplant [ 2 ] ) ] ] , [ ] ] ] ;
4845: LD_ADDR_EXP 54
4849: PUSH
4850: LD_EXP 54
4854: PUSH
4855: LD_VAR 0 10
4859: PUSH
4860: LD_INT 1
4862: ARRAY
4863: PPUSH
4864: CALL_OW 250
4868: PUSH
4869: LD_VAR 0 10
4873: PUSH
4874: LD_INT 1
4876: ARRAY
4877: PPUSH
4878: CALL_OW 251
4882: PUSH
4883: LD_VAR 0 10
4887: PUSH
4888: LD_INT 1
4890: ARRAY
4891: PPUSH
4892: CALL_OW 254
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: LIST
4901: PUSH
4902: LD_VAR 0 10
4906: PUSH
4907: LD_INT 2
4909: ARRAY
4910: PPUSH
4911: CALL_OW 250
4915: PUSH
4916: LD_VAR 0 10
4920: PUSH
4921: LD_INT 2
4923: ARRAY
4924: PPUSH
4925: CALL_OW 251
4929: PUSH
4930: LD_VAR 0 10
4934: PUSH
4935: LD_INT 2
4937: ARRAY
4938: PPUSH
4939: CALL_OW 254
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PUSH
4953: EMPTY
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: PUSH
4959: EMPTY
4960: LIST
4961: ADD
4962: ST_TO_ADDR
// end ;
4963: GO 3832
4965: POP
4966: POP
// for un := 1 to 28 do
4967: LD_ADDR_VAR 0 11
4971: PUSH
4972: DOUBLE
4973: LD_INT 1
4975: DEC
4976: ST_TO_ADDR
4977: LD_INT 28
4979: PUSH
4980: FOR_TO
4981: IFFALSE 4994
// DestroyUnit ( un ) ;
4983: LD_VAR 0 11
4987: PPUSH
4988: CALL_OW 65
4992: GO 4980
4994: POP
4995: POP
// end ;
4996: LD_VAR 0 1
5000: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
5001: LD_INT 0
5003: PPUSH
5004: PPUSH
5005: PPUSH
5006: PPUSH
// result := [ ] ;
5007: LD_ADDR_VAR 0 7
5011: PUSH
5012: EMPTY
5013: ST_TO_ADDR
// for i := 1 to count do
5014: LD_ADDR_VAR 0 8
5018: PUSH
5019: DOUBLE
5020: LD_INT 1
5022: DEC
5023: ST_TO_ADDR
5024: LD_VAR 0 1
5028: PUSH
5029: FOR_TO
5030: IFFALSE 5448
// begin uc_direction := Rand ( 0 , 5 ) ;
5032: LD_ADDR_OWVAR 24
5036: PUSH
5037: LD_INT 0
5039: PPUSH
5040: LD_INT 5
5042: PPUSH
5043: CALL_OW 12
5047: ST_TO_ADDR
// if commander then
5048: LD_LOC 1
5052: IFFALSE 5161
// begin hc_name := mp_sides_players_names [ uc_side ] ;
5054: LD_ADDR_OWVAR 26
5058: PUSH
5059: LD_OWVAR 19
5063: PUSH
5064: LD_OWVAR 20
5068: ARRAY
5069: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
5070: LD_INT 1
5072: PPUSH
5073: LD_INT 2
5075: PPUSH
5076: CALL_OW 12
5080: PPUSH
5081: LD_VAR 0 2
5085: PPUSH
5086: LD_EXP 29
5090: PUSH
5091: LD_INT 2
5093: PLUS
5094: PPUSH
5095: CALL_OW 380
// hc_importance := 105 ;
5099: LD_ADDR_OWVAR 32
5103: PUSH
5104: LD_INT 105
5106: ST_TO_ADDR
// commander := false ;
5107: LD_ADDR_LOC 1
5111: PUSH
5112: LD_INT 0
5114: ST_TO_ADDR
// if Multiplayer then
5115: LD_OWVAR 4
5119: IFFALSE 5159
// begin hc_gallery := MULTIAVATARS ;
5121: LD_ADDR_OWVAR 33
5125: PUSH
5126: LD_STRING MULTIAVATARS
5128: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
5129: LD_ADDR_OWVAR 34
5133: PUSH
5134: LD_OWVAR 20
5138: PPUSH
5139: CALL_OW 525
5143: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
5144: LD_ADDR_OWVAR 27
5148: PUSH
5149: LD_OWVAR 20
5153: PPUSH
5154: CALL_OW 526
5158: ST_TO_ADDR
// end ; end else
5159: GO 5224
// begin hc_name :=  ;
5161: LD_ADDR_OWVAR 26
5165: PUSH
5166: LD_STRING 
5168: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
5169: LD_INT 1
5171: PPUSH
5172: LD_INT 2
5174: PPUSH
5175: CALL_OW 12
5179: PPUSH
5180: LD_VAR 0 2
5184: PPUSH
5185: LD_EXP 29
5189: PPUSH
5190: CALL_OW 380
// hc_importance := 0 ;
5194: LD_ADDR_OWVAR 32
5198: PUSH
5199: LD_INT 0
5201: ST_TO_ADDR
// if Multiplayer then
5202: LD_OWVAR 4
5206: IFFALSE 5224
// begin hc_gallery :=  ;
5208: LD_ADDR_OWVAR 33
5212: PUSH
5213: LD_STRING 
5215: ST_TO_ADDR
// hc_face_number := 0 ;
5216: LD_ADDR_OWVAR 34
5220: PUSH
5221: LD_INT 0
5223: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
5224: LD_ADDR_VAR 0 10
5228: PUSH
5229: CALL_OW 44
5233: ST_TO_ADDR
// if global_defined then
5234: LD_LOC 3
5238: IFFALSE 5378
// begin if ( cl = class_soldier ) then
5240: LD_VAR 0 2
5244: PUSH
5245: LD_INT 1
5247: EQUAL
5248: IFFALSE 5268
// j := i + soldiers_created else
5250: LD_ADDR_VAR 0 9
5254: PUSH
5255: LD_VAR 0 8
5259: PUSH
5260: LD_LOC 4
5264: PLUS
5265: ST_TO_ADDR
5266: GO 5278
// j := i ;
5268: LD_ADDR_VAR 0 9
5272: PUSH
5273: LD_VAR 0 8
5277: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
5278: LD_LOC 2
5282: PUSH
5283: LD_VAR 0 2
5287: ARRAY
5288: PUSH
5289: LD_VAR 0 9
5293: ARRAY
5294: PPUSH
5295: LD_VAR 0 10
5299: PPUSH
5300: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
5304: LD_VAR 0 10
5308: PPUSH
5309: LD_INT 2
5311: PPUSH
5312: LD_LOC 2
5316: PUSH
5317: LD_VAR 0 2
5321: ARRAY
5322: PUSH
5323: LD_VAR 0 9
5327: ARRAY
5328: PPUSH
5329: LD_INT 2
5331: PPUSH
5332: CALL_OW 260
5336: PPUSH
5337: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
5341: LD_VAR 0 10
5345: PPUSH
5346: LD_INT 1
5348: PPUSH
5349: LD_LOC 2
5353: PUSH
5354: LD_VAR 0 2
5358: ARRAY
5359: PUSH
5360: LD_VAR 0 9
5364: ARRAY
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: CALL_OW 260
5373: PPUSH
5374: CALL_OW 239
// end ; if building then
5378: LD_VAR 0 6
5382: IFFALSE 5400
// PlaceHumanInUnit ( un , building ) else
5384: LD_VAR 0 10
5388: PPUSH
5389: LD_VAR 0 6
5393: PPUSH
5394: CALL_OW 52
5398: GO 5427
// PlaceUnitXYR ( un , x , y , r , false ) ;
5400: LD_VAR 0 10
5404: PPUSH
5405: LD_VAR 0 3
5409: PPUSH
5410: LD_VAR 0 4
5414: PPUSH
5415: LD_VAR 0 5
5419: PPUSH
5420: LD_INT 0
5422: PPUSH
5423: CALL_OW 50
// result := result ^ [ un ] ;
5427: LD_ADDR_VAR 0 7
5431: PUSH
5432: LD_VAR 0 7
5436: PUSH
5437: LD_VAR 0 10
5441: PUSH
5442: EMPTY
5443: LIST
5444: ADD
5445: ST_TO_ADDR
// end ;
5446: GO 5029
5448: POP
5449: POP
// if not global_defined then
5450: LD_LOC 3
5454: NOT
5455: IFFALSE 5533
// if ( global_units >= cl ) then
5457: LD_LOC 2
5461: PUSH
5462: LD_VAR 0 2
5466: GREATEREQUAL
5467: IFFALSE 5508
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
5469: LD_ADDR_LOC 2
5473: PUSH
5474: LD_LOC 2
5478: PPUSH
5479: LD_VAR 0 2
5483: PPUSH
5484: LD_LOC 2
5488: PUSH
5489: LD_VAR 0 2
5493: ARRAY
5494: PUSH
5495: LD_VAR 0 7
5499: ADD
5500: PPUSH
5501: CALL_OW 1
5505: ST_TO_ADDR
5506: GO 5533
// global_units := Replace ( global_units , cl , result ) ;
5508: LD_ADDR_LOC 2
5512: PUSH
5513: LD_LOC 2
5517: PPUSH
5518: LD_VAR 0 2
5522: PPUSH
5523: LD_VAR 0 7
5527: PPUSH
5528: CALL_OW 1
5532: ST_TO_ADDR
// if commander then
5533: LD_LOC 1
5537: IFFALSE 5584
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
5539: LD_ADDR_EXP 56
5543: PUSH
5544: LD_EXP 56
5548: PPUSH
5549: LD_OWVAR 20
5553: PPUSH
5554: LD_EXP 56
5558: PUSH
5559: LD_OWVAR 20
5563: ARRAY
5564: PUSH
5565: LD_VAR 0 10
5569: ADD
5570: PPUSH
5571: CALL_OW 1
5575: ST_TO_ADDR
// commander := false ;
5576: LD_ADDR_LOC 1
5580: PUSH
5581: LD_INT 0
5583: ST_TO_ADDR
// end ; end ;
5584: LD_VAR 0 7
5588: RET
// function prepare_side_base ( side , base ) ; var pos , x , y , dir , i , r , un , br , dep , lab , fact , arm , mode , coord , max ; begin
5589: LD_INT 0
5591: PPUSH
5592: PPUSH
5593: PPUSH
5594: PPUSH
5595: PPUSH
5596: PPUSH
5597: PPUSH
5598: PPUSH
5599: PPUSH
5600: PPUSH
5601: PPUSH
5602: PPUSH
5603: PPUSH
5604: PPUSH
5605: PPUSH
5606: PPUSH
// if side in [ 0 , 9 ] then
5607: LD_VAR 0 1
5611: PUSH
5612: LD_INT 0
5614: PUSH
5615: LD_INT 9
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: IN
5622: IFFALSE 5626
// exit ;
5624: GO 8295
// pos := Side_Positions [ side ] ;
5626: LD_ADDR_VAR 0 4
5630: PUSH
5631: LD_EXP 43
5635: PUSH
5636: LD_VAR 0 1
5640: ARRAY
5641: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
5642: LD_ADDR_OWVAR 21
5646: PUSH
5647: LD_EXP 44
5651: PUSH
5652: LD_VAR 0 1
5656: ARRAY
5657: ST_TO_ADDR
// uc_side := side ;
5658: LD_ADDR_OWVAR 20
5662: PUSH
5663: LD_VAR 0 1
5667: ST_TO_ADDR
// x := depots_def [ pos ] [ base ] [ 1 ] ;
5668: LD_ADDR_VAR 0 5
5672: PUSH
5673: LD_EXP 49
5677: PUSH
5678: LD_VAR 0 4
5682: ARRAY
5683: PUSH
5684: LD_VAR 0 2
5688: ARRAY
5689: PUSH
5690: LD_INT 1
5692: ARRAY
5693: ST_TO_ADDR
// y := depots_def [ pos ] [ base ] [ 2 ] ;
5694: LD_ADDR_VAR 0 6
5698: PUSH
5699: LD_EXP 49
5703: PUSH
5704: LD_VAR 0 4
5708: ARRAY
5709: PUSH
5710: LD_VAR 0 2
5714: ARRAY
5715: PUSH
5716: LD_INT 2
5718: ARRAY
5719: ST_TO_ADDR
// dir := depots_def [ pos ] [ base ] [ 3 ] ;
5720: LD_ADDR_VAR 0 7
5724: PUSH
5725: LD_EXP 49
5729: PUSH
5730: LD_VAR 0 4
5734: ARRAY
5735: PUSH
5736: LD_VAR 0 2
5740: ARRAY
5741: PUSH
5742: LD_INT 3
5744: ARRAY
5745: ST_TO_ADDR
// if is_depot [ base ] then
5746: LD_EXP 20
5750: PUSH
5751: LD_VAR 0 2
5755: ARRAY
5756: IFFALSE 5933
// begin if is_depot [ base ] = 1 then
5758: LD_EXP 20
5762: PUSH
5763: LD_VAR 0 2
5767: ARRAY
5768: PUSH
5769: LD_INT 1
5771: EQUAL
5772: IFFALSE 5784
// bc_type = b_depot else
5774: LD_ADDR_OWVAR 42
5778: PUSH
5779: LD_INT 0
5781: ST_TO_ADDR
5782: GO 5792
// bc_type = b_warehouse ;
5784: LD_ADDR_OWVAR 42
5788: PUSH
5789: LD_INT 1
5791: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
5792: LD_ADDR_VAR 0 12
5796: PUSH
5797: LD_VAR 0 5
5801: PPUSH
5802: LD_VAR 0 6
5806: PPUSH
5807: LD_VAR 0 7
5811: PPUSH
5812: CALL_OW 47
5816: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
5817: LD_VAR 0 12
5821: PPUSH
5822: LD_STRING @
5824: PUSH
5825: LD_VAR 0 1
5829: STR
5830: PPUSH
5831: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ base ] [ mat_cans ] ) ;
5835: LD_VAR 0 12
5839: PPUSH
5840: CALL_OW 274
5844: PPUSH
5845: LD_INT 1
5847: PPUSH
5848: LD_EXP 31
5852: PUSH
5853: LD_VAR 0 2
5857: ARRAY
5858: PUSH
5859: LD_INT 1
5861: ARRAY
5862: PPUSH
5863: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ base ] [ mat_oil ] ) ;
5867: LD_VAR 0 12
5871: PPUSH
5872: CALL_OW 274
5876: PPUSH
5877: LD_INT 2
5879: PPUSH
5880: LD_EXP 31
5884: PUSH
5885: LD_VAR 0 2
5889: ARRAY
5890: PUSH
5891: LD_INT 2
5893: ARRAY
5894: PPUSH
5895: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ base ] [ mat_siberit ] ) ;
5899: LD_VAR 0 12
5903: PPUSH
5904: CALL_OW 274
5908: PPUSH
5909: LD_INT 3
5911: PPUSH
5912: LD_EXP 31
5916: PUSH
5917: LD_VAR 0 2
5921: ARRAY
5922: PUSH
5923: LD_INT 3
5925: ARRAY
5926: PPUSH
5927: CALL_OW 277
// end else
5931: GO 6083
// begin for i := 1 to 3 do
5933: LD_ADDR_VAR 0 8
5937: PUSH
5938: DOUBLE
5939: LD_INT 1
5941: DEC
5942: ST_TO_ADDR
5943: LD_INT 3
5945: PUSH
5946: FOR_TO
5947: IFFALSE 6081
// begin r := starting_resources [ base ] [ i ] ;
5949: LD_ADDR_VAR 0 9
5953: PUSH
5954: LD_EXP 31
5958: PUSH
5959: LD_VAR 0 2
5963: ARRAY
5964: PUSH
5965: LD_VAR 0 8
5969: ARRAY
5970: ST_TO_ADDR
// while r >= 10 do
5971: LD_VAR 0 9
5975: PUSH
5976: LD_INT 10
5978: GREATEREQUAL
5979: IFFALSE 6079
// if r > 50 then
5981: LD_VAR 0 9
5985: PUSH
5986: LD_INT 50
5988: GREATER
5989: IFFALSE 6035
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
5991: LD_VAR 0 8
5995: PPUSH
5996: LD_INT 5
5998: PPUSH
5999: LD_VAR 0 5
6003: PPUSH
6004: LD_VAR 0 6
6008: PPUSH
6009: LD_INT 4
6011: PPUSH
6012: LD_INT 0
6014: PPUSH
6015: CALL_OW 60
// r := r - 50 ;
6019: LD_ADDR_VAR 0 9
6023: PUSH
6024: LD_VAR 0 9
6028: PUSH
6029: LD_INT 50
6031: MINUS
6032: ST_TO_ADDR
// end else
6033: GO 6077
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
6035: LD_VAR 0 8
6039: PPUSH
6040: LD_VAR 0 9
6044: PUSH
6045: LD_INT 10
6047: DIV
6048: PPUSH
6049: LD_VAR 0 5
6053: PPUSH
6054: LD_VAR 0 6
6058: PPUSH
6059: LD_INT 4
6061: PPUSH
6062: LD_INT 0
6064: PPUSH
6065: CALL_OW 60
// r := 0 ;
6069: LD_ADDR_VAR 0 9
6073: PUSH
6074: LD_INT 0
6076: ST_TO_ADDR
// end ;
6077: GO 5971
// end ;
6079: GO 5946
6081: POP
6082: POP
// end ; if is_lab [ base ] then
6083: LD_EXP 24
6087: PUSH
6088: LD_VAR 0 2
6092: ARRAY
6093: IFFALSE 6234
// begin if is_lab [ base ] = 1 then
6095: LD_EXP 24
6099: PUSH
6100: LD_VAR 0 2
6104: ARRAY
6105: PUSH
6106: LD_INT 1
6108: EQUAL
6109: IFFALSE 6137
// begin bc_type = b_lab ;
6111: LD_ADDR_OWVAR 42
6115: PUSH
6116: LD_INT 6
6118: ST_TO_ADDR
// bc_kind1 = b_lab_basic ;
6119: LD_ADDR_OWVAR 44
6123: PUSH
6124: LD_INT 9
6126: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
6127: LD_ADDR_OWVAR 45
6131: PUSH
6132: LD_INT 9
6134: ST_TO_ADDR
// end else
6135: GO 6161
// begin bc_type = b_lab_full ;
6137: LD_ADDR_OWVAR 42
6141: PUSH
6142: LD_INT 8
6144: ST_TO_ADDR
// bc_kind1 = b_lab_siberium ;
6145: LD_ADDR_OWVAR 44
6149: PUSH
6150: LD_INT 11
6152: ST_TO_ADDR
// bc_kind2 = b_lab_weapon ;
6153: LD_ADDR_OWVAR 45
6157: PUSH
6158: LD_INT 10
6160: ST_TO_ADDR
// end ; lab := CreateAndPlaceBuildingXYD ( labs_def [ pos ] [ base ] [ 1 ] , labs_def [ pos ] [ base ] [ 2 ] , labs_def [ pos ] [ base ] [ 3 ] ) ;
6161: LD_ADDR_VAR 0 13
6165: PUSH
6166: LD_EXP 51
6170: PUSH
6171: LD_VAR 0 4
6175: ARRAY
6176: PUSH
6177: LD_VAR 0 2
6181: ARRAY
6182: PUSH
6183: LD_INT 1
6185: ARRAY
6186: PPUSH
6187: LD_EXP 51
6191: PUSH
6192: LD_VAR 0 4
6196: ARRAY
6197: PUSH
6198: LD_VAR 0 2
6202: ARRAY
6203: PUSH
6204: LD_INT 2
6206: ARRAY
6207: PPUSH
6208: LD_EXP 51
6212: PUSH
6213: LD_VAR 0 4
6217: ARRAY
6218: PUSH
6219: LD_VAR 0 2
6223: ARRAY
6224: PUSH
6225: LD_INT 3
6227: ARRAY
6228: PPUSH
6229: CALL_OW 47
6233: ST_TO_ADDR
// end ; if is_fact [ base ] then
6234: LD_EXP 25
6238: PUSH
6239: LD_VAR 0 2
6243: ARRAY
6244: IFFALSE 6353
// begin if is_fact [ base ] = 1 then
6246: LD_EXP 25
6250: PUSH
6251: LD_VAR 0 2
6255: ARRAY
6256: PUSH
6257: LD_INT 1
6259: EQUAL
6260: IFFALSE 6272
// bc_type = b_workshop else
6262: LD_ADDR_OWVAR 42
6266: PUSH
6267: LD_INT 2
6269: ST_TO_ADDR
6270: GO 6280
// bc_type = b_factory ;
6272: LD_ADDR_OWVAR 42
6276: PUSH
6277: LD_INT 3
6279: ST_TO_ADDR
// fact := CreateAndPlaceBuildingXYD ( factories_def [ pos ] [ base ] [ 1 ] , factories_def [ pos ] [ base ] [ 2 ] , factories_def [ pos ] [ base ] [ 3 ] ) ;
6280: LD_ADDR_VAR 0 14
6284: PUSH
6285: LD_EXP 52
6289: PUSH
6290: LD_VAR 0 4
6294: ARRAY
6295: PUSH
6296: LD_VAR 0 2
6300: ARRAY
6301: PUSH
6302: LD_INT 1
6304: ARRAY
6305: PPUSH
6306: LD_EXP 52
6310: PUSH
6311: LD_VAR 0 4
6315: ARRAY
6316: PUSH
6317: LD_VAR 0 2
6321: ARRAY
6322: PUSH
6323: LD_INT 2
6325: ARRAY
6326: PPUSH
6327: LD_EXP 52
6331: PUSH
6332: LD_VAR 0 4
6336: ARRAY
6337: PUSH
6338: LD_VAR 0 2
6342: ARRAY
6343: PUSH
6344: LD_INT 3
6346: ARRAY
6347: PPUSH
6348: CALL_OW 47
6352: ST_TO_ADDR
// end ; if is_arm [ base ] then
6353: LD_EXP 26
6357: PUSH
6358: LD_VAR 0 2
6362: ARRAY
6363: IFFALSE 6472
// begin if is_arm [ base ] = 1 then
6365: LD_EXP 26
6369: PUSH
6370: LD_VAR 0 2
6374: ARRAY
6375: PUSH
6376: LD_INT 1
6378: EQUAL
6379: IFFALSE 6391
// bc_type = b_armoury else
6381: LD_ADDR_OWVAR 42
6385: PUSH
6386: LD_INT 4
6388: ST_TO_ADDR
6389: GO 6399
// bc_type = b_barracks ;
6391: LD_ADDR_OWVAR 42
6395: PUSH
6396: LD_INT 5
6398: ST_TO_ADDR
// arm := CreateAndPlaceBuildingXYD ( armories_def [ pos ] [ base ] [ 1 ] , armories_def [ pos ] [ base ] [ 2 ] , armories_def [ pos ] [ base ] [ 3 ] ) ;
6399: LD_ADDR_VAR 0 15
6403: PUSH
6404: LD_EXP 53
6408: PUSH
6409: LD_VAR 0 4
6413: ARRAY
6414: PUSH
6415: LD_VAR 0 2
6419: ARRAY
6420: PUSH
6421: LD_INT 1
6423: ARRAY
6424: PPUSH
6425: LD_EXP 53
6429: PUSH
6430: LD_VAR 0 4
6434: ARRAY
6435: PUSH
6436: LD_VAR 0 2
6440: ARRAY
6441: PUSH
6442: LD_INT 2
6444: ARRAY
6445: PPUSH
6446: LD_EXP 53
6450: PUSH
6451: LD_VAR 0 4
6455: ARRAY
6456: PUSH
6457: LD_VAR 0 2
6461: ARRAY
6462: PUSH
6463: LD_INT 3
6465: ARRAY
6466: PPUSH
6467: CALL_OW 47
6471: ST_TO_ADDR
// end ; for i := 1 to number_of_pplants [ base ] do
6472: LD_ADDR_VAR 0 8
6476: PUSH
6477: DOUBLE
6478: LD_INT 1
6480: DEC
6481: ST_TO_ADDR
6482: LD_EXP 22
6486: PUSH
6487: LD_VAR 0 2
6491: ARRAY
6492: PUSH
6493: FOR_TO
6494: IFFALSE 6591
// begin bc_type = b_oil_power ;
6496: LD_ADDR_OWVAR 42
6500: PUSH
6501: LD_INT 26
6503: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( pplants_def [ pos ] [ base ] [ i ] [ 1 ] , pplants_def [ pos ] [ base ] [ i ] [ 2 ] , pplants_def [ pos ] [ base ] [ i ] [ 3 ] ) ;
6504: LD_EXP 54
6508: PUSH
6509: LD_VAR 0 4
6513: ARRAY
6514: PUSH
6515: LD_VAR 0 2
6519: ARRAY
6520: PUSH
6521: LD_VAR 0 8
6525: ARRAY
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: PPUSH
6531: LD_EXP 54
6535: PUSH
6536: LD_VAR 0 4
6540: ARRAY
6541: PUSH
6542: LD_VAR 0 2
6546: ARRAY
6547: PUSH
6548: LD_VAR 0 8
6552: ARRAY
6553: PUSH
6554: LD_INT 2
6556: ARRAY
6557: PPUSH
6558: LD_EXP 54
6562: PUSH
6563: LD_VAR 0 4
6567: ARRAY
6568: PUSH
6569: LD_VAR 0 2
6573: ARRAY
6574: PUSH
6575: LD_VAR 0 8
6579: ARRAY
6580: PUSH
6581: LD_INT 3
6583: ARRAY
6584: PPUSH
6585: CALL_OW 47
// end ;
6589: GO 6493
6591: POP
6592: POP
// for i := 1 to deposits [ base ] [ 1 ] do
6593: LD_ADDR_VAR 0 8
6597: PUSH
6598: DOUBLE
6599: LD_INT 1
6601: DEC
6602: ST_TO_ADDR
6603: LD_EXP 28
6607: PUSH
6608: LD_VAR 0 2
6612: ARRAY
6613: PUSH
6614: LD_INT 1
6616: ARRAY
6617: PUSH
6618: FOR_TO
6619: IFFALSE 6756
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i ] , false ) ;
6621: LD_ADDR_VAR 0 17
6625: PUSH
6626: LD_EXP 55
6630: PUSH
6631: LD_VAR 0 4
6635: ARRAY
6636: PUSH
6637: LD_VAR 0 2
6641: ARRAY
6642: PUSH
6643: LD_VAR 0 8
6647: ARRAY
6648: PPUSH
6649: LD_INT 0
6651: PPUSH
6652: CALL_OW 16
6656: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_oil ) ;
6657: LD_VAR 0 17
6661: PUSH
6662: LD_INT 1
6664: ARRAY
6665: PPUSH
6666: LD_VAR 0 17
6670: PUSH
6671: LD_INT 2
6673: ARRAY
6674: PPUSH
6675: LD_INT 2
6677: PPUSH
6678: CALL_OW 62
// if are_mines [ base ] then
6682: LD_EXP 23
6686: PUSH
6687: LD_VAR 0 2
6691: ARRAY
6692: IFFALSE 6754
// begin bc_type = b_oil_mine ;
6694: LD_ADDR_OWVAR 42
6698: PUSH
6699: LD_INT 29
6701: ST_TO_ADDR
// SetResourceVisibility ( coord [ 1 ] , coord [ 2 ] , uc_side ) ;
6702: LD_VAR 0 17
6706: PUSH
6707: LD_INT 1
6709: ARRAY
6710: PPUSH
6711: LD_VAR 0 17
6715: PUSH
6716: LD_INT 2
6718: ARRAY
6719: PPUSH
6720: LD_OWVAR 20
6724: PPUSH
6725: CALL_OW 441
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
6729: LD_VAR 0 17
6733: PUSH
6734: LD_INT 1
6736: ARRAY
6737: PPUSH
6738: LD_VAR 0 17
6742: PUSH
6743: LD_INT 2
6745: ARRAY
6746: PPUSH
6747: LD_INT 0
6749: PPUSH
6750: CALL_OW 47
// end ; end ;
6754: GO 6618
6756: POP
6757: POP
// for i := 1 to deposits [ base ] [ 2 ] do
6758: LD_ADDR_VAR 0 8
6762: PUSH
6763: DOUBLE
6764: LD_INT 1
6766: DEC
6767: ST_TO_ADDR
6768: LD_EXP 28
6772: PUSH
6773: LD_VAR 0 2
6777: ARRAY
6778: PUSH
6779: LD_INT 2
6781: ARRAY
6782: PUSH
6783: FOR_TO
6784: IFFALSE 6943
// begin coord := RandHexArea ( deposits_def [ pos ] [ base ] [ i + deposits [ base ] [ 1 ] ] , false ) ;
6786: LD_ADDR_VAR 0 17
6790: PUSH
6791: LD_EXP 55
6795: PUSH
6796: LD_VAR 0 4
6800: ARRAY
6801: PUSH
6802: LD_VAR 0 2
6806: ARRAY
6807: PUSH
6808: LD_VAR 0 8
6812: PUSH
6813: LD_EXP 28
6817: PUSH
6818: LD_VAR 0 2
6822: ARRAY
6823: PUSH
6824: LD_INT 1
6826: ARRAY
6827: PLUS
6828: ARRAY
6829: PPUSH
6830: LD_INT 0
6832: PPUSH
6833: CALL_OW 16
6837: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_siberit ) ;
6838: LD_VAR 0 17
6842: PUSH
6843: LD_INT 1
6845: ARRAY
6846: PPUSH
6847: LD_VAR 0 17
6851: PUSH
6852: LD_INT 2
6854: ARRAY
6855: PPUSH
6856: LD_INT 3
6858: PPUSH
6859: CALL_OW 62
// if are_mines [ base ] and def_siberite_detection then
6863: LD_EXP 23
6867: PUSH
6868: LD_VAR 0 2
6872: ARRAY
6873: PUSH
6874: LD_EXP 8
6878: AND
6879: IFFALSE 6941
// begin bc_type = b_siberite_mine ;
6881: LD_ADDR_OWVAR 42
6885: PUSH
6886: LD_INT 30
6888: ST_TO_ADDR
// SetResourceVisibility ( coord [ 1 ] , coord [ 2 ] , uc_side ) ;
6889: LD_VAR 0 17
6893: PUSH
6894: LD_INT 1
6896: ARRAY
6897: PPUSH
6898: LD_VAR 0 17
6902: PUSH
6903: LD_INT 2
6905: ARRAY
6906: PPUSH
6907: LD_OWVAR 20
6911: PPUSH
6912: CALL_OW 441
// CreateAndPlaceBuildingXYD ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
6916: LD_VAR 0 17
6920: PUSH
6921: LD_INT 1
6923: ARRAY
6924: PPUSH
6925: LD_VAR 0 17
6929: PUSH
6930: LD_INT 2
6932: ARRAY
6933: PPUSH
6934: LD_INT 0
6936: PPUSH
6937: CALL_OW 47
// end ; end ;
6941: GO 6783
6943: POP
6944: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
6945: LD_ADDR_VAR 0 5
6949: PUSH
6950: LD_EXP 48
6954: PUSH
6955: LD_VAR 0 4
6959: ARRAY
6960: PUSH
6961: LD_VAR 0 2
6965: ARRAY
6966: PUSH
6967: LD_INT 1
6969: ARRAY
6970: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
6971: LD_ADDR_VAR 0 6
6975: PUSH
6976: LD_EXP 48
6980: PUSH
6981: LD_VAR 0 4
6985: ARRAY
6986: PUSH
6987: LD_VAR 0 2
6991: ARRAY
6992: PUSH
6993: LD_INT 2
6995: ARRAY
6996: ST_TO_ADDR
// if base = 1 then
6997: LD_VAR 0 2
7001: PUSH
7002: LD_INT 1
7004: EQUAL
7005: IFFALSE 7113
// if def_morale_flags then
7007: LD_EXP 14
7011: IFFALSE 7113
// SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , def_bf_params [ 1 ] ] , [ bfo_defend_bonus_vehicle , def_bf_params [ 2 ] ] , [ bfo_defend_bonus_building , def_bf_params [ 3 ] ] , [ bfo_range , 17 ] , [ bfo_height , def_bf_params [ 4 ] ] ] ) ;
7013: LD_VAR 0 1
7017: PPUSH
7018: LD_VAR 0 5
7022: PPUSH
7023: LD_VAR 0 6
7027: PPUSH
7028: LD_INT 1
7030: PUSH
7031: LD_EXP 36
7035: PUSH
7036: LD_INT 1
7038: ARRAY
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 2
7046: PUSH
7047: LD_EXP 36
7051: PUSH
7052: LD_INT 2
7054: ARRAY
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 3
7062: PUSH
7063: LD_EXP 36
7067: PUSH
7068: LD_INT 3
7070: ARRAY
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 10
7078: PUSH
7079: LD_INT 17
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: LD_INT 20
7088: PUSH
7089: LD_EXP 36
7093: PUSH
7094: LD_INT 4
7096: ARRAY
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: PPUSH
7109: CALL_OW 418
// if number_of_people [ base ] then
7113: LD_EXP 21
7117: PUSH
7118: LD_VAR 0 2
7122: ARRAY
7123: IFFALSE 7332
// begin if No_Mechs then
7125: LD_EXP 66
7129: IFFALSE 7141
// Mode := 2 else
7131: LD_ADDR_VAR 0 16
7135: PUSH
7136: LD_INT 2
7138: ST_TO_ADDR
7139: GO 7149
// Mode := 1 ;
7141: LD_ADDR_VAR 0 16
7145: PUSH
7146: LD_INT 1
7148: ST_TO_ADDR
// neng := number_of_people [ base ] ;
7149: LD_ADDR_LOC 5
7153: PUSH
7154: LD_EXP 21
7158: PUSH
7159: LD_VAR 0 2
7163: ARRAY
7164: ST_TO_ADDR
// nmech := neng div [ 4 , 3 ] [ Mode ] ;
7165: LD_ADDR_LOC 7
7169: PUSH
7170: LD_LOC 5
7174: PUSH
7175: LD_INT 4
7177: PUSH
7178: LD_INT 3
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_VAR 0 16
7189: ARRAY
7190: DIV
7191: ST_TO_ADDR
// neng := neng - nmech ;
7192: LD_ADDR_LOC 5
7196: PUSH
7197: LD_LOC 5
7201: PUSH
7202: LD_LOC 7
7206: MINUS
7207: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
7208: LD_ADDR_LOC 6
7212: PUSH
7213: LD_LOC 5
7217: PUSH
7218: LD_INT 3
7220: PUSH
7221: LD_INT 2
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PUSH
7228: LD_VAR 0 16
7232: ARRAY
7233: DIV
7234: ST_TO_ADDR
// if ( nsci < 1 ) then
7235: LD_LOC 6
7239: PUSH
7240: LD_INT 1
7242: LESS
7243: IFFALSE 7253
// nsci := 1 ;
7245: LD_ADDR_LOC 6
7249: PUSH
7250: LD_INT 1
7252: ST_TO_ADDR
// neng := neng - nsci ;
7253: LD_ADDR_LOC 5
7257: PUSH
7258: LD_LOC 5
7262: PUSH
7263: LD_LOC 6
7267: MINUS
7268: ST_TO_ADDR
// nsol := [ neng div 2 , 0 ] [ Mode ] ;
7269: LD_ADDR_LOC 8
7273: PUSH
7274: LD_LOC 5
7278: PUSH
7279: LD_INT 2
7281: DIV
7282: PUSH
7283: LD_INT 0
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: PUSH
7290: LD_VAR 0 16
7294: ARRAY
7295: ST_TO_ADDR
// neng := neng - nsol ;
7296: LD_ADDR_LOC 5
7300: PUSH
7301: LD_LOC 5
7305: PUSH
7306: LD_LOC 8
7310: MINUS
7311: ST_TO_ADDR
// if ( neng < 1 ) then
7312: LD_LOC 5
7316: PUSH
7317: LD_INT 1
7319: LESS
7320: IFFALSE 7330
// neng := 1 ;
7322: LD_ADDR_LOC 5
7326: PUSH
7327: LD_INT 1
7329: ST_TO_ADDR
// end else
7330: GO 7364
// begin neng := 0 ;
7332: LD_ADDR_LOC 5
7336: PUSH
7337: LD_INT 0
7339: ST_TO_ADDR
// nsci := 0 ;
7340: LD_ADDR_LOC 6
7344: PUSH
7345: LD_INT 0
7347: ST_TO_ADDR
// nmech := 0 ;
7348: LD_ADDR_LOC 7
7352: PUSH
7353: LD_INT 0
7355: ST_TO_ADDR
// nsol := 0 ;
7356: LD_ADDR_LOC 8
7360: PUSH
7361: LD_INT 0
7363: ST_TO_ADDR
// end ; commander := true ;
7364: LD_ADDR_LOC 1
7368: PUSH
7369: LD_INT 1
7371: ST_TO_ADDR
// soldiers_created := 0 ;
7372: LD_ADDR_LOC 4
7376: PUSH
7377: LD_INT 0
7379: ST_TO_ADDR
// for i := 1 to are_breastworks [ base ] do
7380: LD_ADDR_VAR 0 8
7384: PUSH
7385: DOUBLE
7386: LD_INT 1
7388: DEC
7389: ST_TO_ADDR
7390: LD_EXP 27
7394: PUSH
7395: LD_VAR 0 2
7399: ARRAY
7400: PUSH
7401: FOR_TO
7402: IFFALSE 7688
// begin if are_breastworks [ base ] [ i ] = 1 then
7404: LD_EXP 27
7408: PUSH
7409: LD_VAR 0 2
7413: ARRAY
7414: PUSH
7415: LD_VAR 0 8
7419: ARRAY
7420: PUSH
7421: LD_INT 1
7423: EQUAL
7424: IFFALSE 7436
// bc_type := b_breastwork else
7426: LD_ADDR_OWVAR 42
7430: PUSH
7431: LD_INT 31
7433: ST_TO_ADDR
7434: GO 7444
// bc_type := b_bunker ;
7436: LD_ADDR_OWVAR 42
7440: PUSH
7441: LD_INT 32
7443: ST_TO_ADDR
// x := breastworks_def [ pos ] [ base ] [ i ] [ 1 ] ;
7444: LD_ADDR_VAR 0 5
7448: PUSH
7449: LD_EXP 50
7453: PUSH
7454: LD_VAR 0 4
7458: ARRAY
7459: PUSH
7460: LD_VAR 0 2
7464: ARRAY
7465: PUSH
7466: LD_VAR 0 8
7470: ARRAY
7471: PUSH
7472: LD_INT 1
7474: ARRAY
7475: ST_TO_ADDR
// y := breastworks_def [ pos ] [ base ] [ i ] [ 2 ] ;
7476: LD_ADDR_VAR 0 6
7480: PUSH
7481: LD_EXP 50
7485: PUSH
7486: LD_VAR 0 4
7490: ARRAY
7491: PUSH
7492: LD_VAR 0 2
7496: ARRAY
7497: PUSH
7498: LD_VAR 0 8
7502: ARRAY
7503: PUSH
7504: LD_INT 2
7506: ARRAY
7507: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ base ] [ i ] [ 3 ] ;
7508: LD_ADDR_VAR 0 7
7512: PUSH
7513: LD_EXP 50
7517: PUSH
7518: LD_VAR 0 4
7522: ARRAY
7523: PUSH
7524: LD_VAR 0 2
7528: ARRAY
7529: PUSH
7530: LD_VAR 0 8
7534: ARRAY
7535: PUSH
7536: LD_INT 3
7538: ARRAY
7539: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
7540: LD_ADDR_VAR 0 11
7544: PUSH
7545: LD_VAR 0 5
7549: PPUSH
7550: LD_VAR 0 6
7554: PPUSH
7555: LD_VAR 0 7
7559: PPUSH
7560: CALL_OW 47
7564: ST_TO_ADDR
// if bc_type = b_bunker then
7565: LD_OWVAR 42
7569: PUSH
7570: LD_INT 32
7572: EQUAL
7573: IFFALSE 7650
// case uc_nation of nation_american :
7575: LD_OWVAR 21
7579: PUSH
7580: LD_INT 1
7582: DOUBLE
7583: EQUAL
7584: IFTRUE 7588
7586: GO 7603
7588: POP
// PlaceWeaponTurret ( br , us_machine_gun ) ; nation_arabian :
7589: LD_VAR 0 11
7593: PPUSH
7594: LD_INT 2
7596: PPUSH
7597: CALL_OW 431
7601: GO 7650
7603: LD_INT 2
7605: DOUBLE
7606: EQUAL
7607: IFTRUE 7611
7609: GO 7626
7611: POP
// PlaceWeaponTurret ( br , ar_double_machine_gun ) ; nation_russian :
7612: LD_VAR 0 11
7616: PPUSH
7617: LD_INT 24
7619: PPUSH
7620: CALL_OW 431
7624: GO 7650
7626: LD_INT 3
7628: DOUBLE
7629: EQUAL
7630: IFTRUE 7634
7632: GO 7649
7634: POP
// PlaceWeaponTurret ( br , ru_heavy_machine_gun ) ; end ;
7635: LD_VAR 0 11
7639: PPUSH
7640: LD_INT 42
7642: PPUSH
7643: CALL_OW 431
7647: GO 7650
7649: POP
// if i <= nsol then
7650: LD_VAR 0 8
7654: PUSH
7655: LD_LOC 8
7659: LESSEQUAL
7660: IFFALSE 7686
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
7662: LD_INT 1
7664: PPUSH
7665: LD_INT 1
7667: PPUSH
7668: LD_INT 0
7670: PPUSH
7671: LD_INT 0
7673: PPUSH
7674: LD_INT 0
7676: PPUSH
7677: LD_VAR 0 11
7681: PPUSH
7682: CALL 5001 0 6
// end ;
7686: GO 7401
7688: POP
7689: POP
// x := start_def [ pos ] [ base ] [ 1 ] ;
7690: LD_ADDR_VAR 0 5
7694: PUSH
7695: LD_EXP 48
7699: PUSH
7700: LD_VAR 0 4
7704: ARRAY
7705: PUSH
7706: LD_VAR 0 2
7710: ARRAY
7711: PUSH
7712: LD_INT 1
7714: ARRAY
7715: ST_TO_ADDR
// y := start_def [ pos ] [ base ] [ 2 ] ;
7716: LD_ADDR_VAR 0 6
7720: PUSH
7721: LD_EXP 48
7725: PUSH
7726: LD_VAR 0 4
7730: ARRAY
7731: PUSH
7732: LD_VAR 0 2
7736: ARRAY
7737: PUSH
7738: LD_INT 2
7740: ARRAY
7741: ST_TO_ADDR
// if nsol > are_breastworks [ base ] then
7742: LD_LOC 8
7746: PUSH
7747: LD_EXP 27
7751: PUSH
7752: LD_VAR 0 2
7756: ARRAY
7757: GREATER
7758: IFFALSE 7846
// if arm then
7760: LD_VAR 0 15
7764: IFFALSE 7806
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , 0 , 0 , 0 , arm ) else
7766: LD_LOC 8
7770: PUSH
7771: LD_EXP 27
7775: PUSH
7776: LD_VAR 0 2
7780: ARRAY
7781: MINUS
7782: PPUSH
7783: LD_INT 1
7785: PPUSH
7786: LD_INT 0
7788: PPUSH
7789: LD_INT 0
7791: PPUSH
7792: LD_INT 0
7794: PPUSH
7795: LD_VAR 0 15
7799: PPUSH
7800: CALL 5001 0 6
7804: GO 7846
// prepare_people ( nsol - are_breastworks [ base ] , class_soldier , x , y , 5 , 0 ) ;
7806: LD_LOC 8
7810: PUSH
7811: LD_EXP 27
7815: PUSH
7816: LD_VAR 0 2
7820: ARRAY
7821: MINUS
7822: PPUSH
7823: LD_INT 1
7825: PPUSH
7826: LD_VAR 0 5
7830: PPUSH
7831: LD_VAR 0 6
7835: PPUSH
7836: LD_INT 5
7838: PPUSH
7839: LD_INT 0
7841: PPUSH
7842: CALL 5001 0 6
// if dep then
7846: LD_VAR 0 12
7850: IFFALSE 7880
// prepare_people ( neng , class_engineer , 0 , 0 , 0 , dep ) else
7852: LD_LOC 5
7856: PPUSH
7857: LD_INT 2
7859: PPUSH
7860: LD_INT 0
7862: PPUSH
7863: LD_INT 0
7865: PPUSH
7866: LD_INT 0
7868: PPUSH
7869: LD_VAR 0 12
7873: PPUSH
7874: CALL 5001 0 6
7878: GO 7908
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
7880: LD_LOC 5
7884: PPUSH
7885: LD_INT 2
7887: PPUSH
7888: LD_VAR 0 5
7892: PPUSH
7893: LD_VAR 0 6
7897: PPUSH
7898: LD_INT 5
7900: PPUSH
7901: LD_INT 0
7903: PPUSH
7904: CALL 5001 0 6
// if fact then
7908: LD_VAR 0 14
7912: IFFALSE 7942
// prepare_people ( nmech , class_mechanic , 0 , 0 , 0 , fact ) else
7914: LD_LOC 7
7918: PPUSH
7919: LD_INT 3
7921: PPUSH
7922: LD_INT 0
7924: PPUSH
7925: LD_INT 0
7927: PPUSH
7928: LD_INT 0
7930: PPUSH
7931: LD_VAR 0 14
7935: PPUSH
7936: CALL 5001 0 6
7940: GO 7970
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
7942: LD_LOC 7
7946: PPUSH
7947: LD_INT 3
7949: PPUSH
7950: LD_VAR 0 5
7954: PPUSH
7955: LD_VAR 0 6
7959: PPUSH
7960: LD_INT 5
7962: PPUSH
7963: LD_INT 0
7965: PPUSH
7966: CALL 5001 0 6
// if lab then
7970: LD_VAR 0 13
7974: IFFALSE 8004
// prepare_people ( nsci , class_scientistic , 0 , 0 , 0 , lab ) else
7976: LD_LOC 6
7980: PPUSH
7981: LD_INT 4
7983: PPUSH
7984: LD_INT 0
7986: PPUSH
7987: LD_INT 0
7989: PPUSH
7990: LD_INT 0
7992: PPUSH
7993: LD_VAR 0 13
7997: PPUSH
7998: CALL 5001 0 6
8002: GO 8032
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
8004: LD_LOC 6
8008: PPUSH
8009: LD_INT 4
8011: PPUSH
8012: LD_VAR 0 5
8016: PPUSH
8017: LD_VAR 0 6
8021: PPUSH
8022: LD_INT 5
8024: PPUSH
8025: LD_INT 0
8027: PPUSH
8028: CALL 5001 0 6
// max = 0 ;
8032: LD_ADDR_VAR 0 18
8036: PUSH
8037: LD_INT 0
8039: ST_TO_ADDR
// for un in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
8040: LD_ADDR_VAR 0 10
8044: PUSH
8045: LD_INT 22
8047: PUSH
8048: LD_VAR 0 1
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: PUSH
8057: LD_INT 21
8059: PUSH
8060: LD_INT 1
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PPUSH
8071: CALL_OW 69
8075: PUSH
8076: FOR_IN
8077: IFFALSE 8119
// begin if GetSkill ( un , skill_engineering ) > max then
8079: LD_VAR 0 10
8083: PPUSH
8084: LD_INT 2
8086: PPUSH
8087: CALL_OW 259
8091: PUSH
8092: LD_VAR 0 18
8096: GREATER
8097: IFFALSE 8117
// max := GetSkill ( un , skill_engineering ) ;
8099: LD_ADDR_VAR 0 18
8103: PUSH
8104: LD_VAR 0 10
8108: PPUSH
8109: LD_INT 2
8111: PPUSH
8112: CALL_OW 259
8116: ST_TO_ADDR
// end ;
8117: GO 8076
8119: POP
8120: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) , max ) ;
8121: LD_INT 22
8123: PUSH
8124: LD_VAR 0 1
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: LD_INT 21
8135: PUSH
8136: LD_INT 3
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: PPUSH
8147: CALL_OW 69
8151: PPUSH
8152: LD_VAR 0 18
8156: PPUSH
8157: CALL_OW 241
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
8161: LD_EXP 8
8165: PUSH
8166: LD_INT 20
8168: PPUSH
8169: LD_VAR 0 1
8173: PPUSH
8174: CALL_OW 321
8178: PUSH
8179: LD_INT 1
8181: EQUAL
8182: AND
8183: IFFALSE 8200
// SetTech ( tech_SibDet , side , state_researched ) ;
8185: LD_INT 20
8187: PPUSH
8188: LD_VAR 0 1
8192: PPUSH
8193: LD_INT 2
8195: PPUSH
8196: CALL_OW 322
// if def_siberite_bomb = 1 then
8200: LD_EXP 15
8204: PUSH
8205: LD_INT 1
8207: EQUAL
8208: IFFALSE 8242
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
8210: LD_INT 25
8212: PPUSH
8213: LD_VAR 0 1
8217: PPUSH
8218: LD_INT 1
8220: PPUSH
8221: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
8225: LD_INT 73
8227: PPUSH
8228: LD_VAR 0 1
8232: PPUSH
8233: LD_INT 1
8235: PPUSH
8236: CALL_OW 322
// end else
8240: GO 8272
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
8242: LD_INT 25
8244: PPUSH
8245: LD_VAR 0 1
8249: PPUSH
8250: LD_INT 0
8252: PPUSH
8253: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
8257: LD_INT 73
8259: PPUSH
8260: LD_VAR 0 1
8264: PPUSH
8265: LD_INT 0
8267: PPUSH
8268: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
8272: LD_INT 24
8274: PPUSH
8275: LD_VAR 0 1
8279: PPUSH
8280: LD_INT 0
8282: PPUSH
8283: CALL_OW 322
// global_defined := true ;
8287: LD_ADDR_LOC 3
8291: PUSH
8292: LD_INT 1
8294: ST_TO_ADDR
// end ;
8295: LD_VAR 0 3
8299: RET
// every 0 0$1 do
8300: GO 8302
8302: DISABLE
// if ( def_siberite_bomb > 1 ) then
8303: LD_EXP 15
8307: PUSH
8308: LD_INT 1
8310: GREATER
8311: IFFALSE 8326
// begin wait ( siberite_bomb_Delay ) ;
8313: LD_EXP 38
8317: PPUSH
8318: CALL_OW 67
// EnableSibFiss ;
8322: CALL 8327 0 0
// end ;
8326: END
// function EnableSibFiss ; var i ; begin
8327: LD_INT 0
8329: PPUSH
8330: PPUSH
// for i := 1 to 8 do
8331: LD_ADDR_VAR 0 2
8335: PUSH
8336: DOUBLE
8337: LD_INT 1
8339: DEC
8340: ST_TO_ADDR
8341: LD_INT 8
8343: PUSH
8344: FOR_TO
8345: IFFALSE 8376
// if Side_Positions [ i ] then
8347: LD_EXP 43
8351: PUSH
8352: LD_VAR 0 2
8356: ARRAY
8357: IFFALSE 8374
// SetTech ( tech_SibFiss , i , state_enabled ) ;
8359: LD_INT 25
8361: PPUSH
8362: LD_VAR 0 2
8366: PPUSH
8367: LD_INT 1
8369: PPUSH
8370: CALL_OW 322
8374: GO 8344
8376: POP
8377: POP
// end ;
8378: LD_VAR 0 1
8382: RET
// function prepare_sides ; var i ; begin
8383: LD_INT 0
8385: PPUSH
8386: PPUSH
// global_units := [ ] ;
8387: LD_ADDR_LOC 2
8391: PUSH
8392: EMPTY
8393: ST_TO_ADDR
// global_defined := false ;
8394: LD_ADDR_LOC 3
8398: PUSH
8399: LD_INT 0
8401: ST_TO_ADDR
// for i := 1 to Side_Positions do
8402: LD_ADDR_VAR 0 2
8406: PUSH
8407: DOUBLE
8408: LD_INT 1
8410: DEC
8411: ST_TO_ADDR
8412: LD_EXP 43
8416: PUSH
8417: FOR_TO
8418: IFFALSE 8458
// if Side_Positions [ i ] then
8420: LD_EXP 43
8424: PUSH
8425: LD_VAR 0 2
8429: ARRAY
8430: IFFALSE 8456
// begin prepare_side_base ( i , 1 ) ;
8432: LD_VAR 0 2
8436: PPUSH
8437: LD_INT 1
8439: PPUSH
8440: CALL 5589 0 2
// prepare_side_base ( i , 2 ) ;
8444: LD_VAR 0 2
8448: PPUSH
8449: LD_INT 2
8451: PPUSH
8452: CALL 5589 0 2
// end ;
8456: GO 8417
8458: POP
8459: POP
// end ;
8460: LD_VAR 0 1
8464: RET
// starting begin disable ( 98 ) ;
8465: LD_INT 98
8467: DISABLE_MARKED
// disable ( 400 ) ;
8468: LD_INT 400
8470: DISABLE_MARKED
// disable ( 401 ) ;
8471: LD_INT 401
8473: DISABLE_MARKED
// disable ( 600 ) ;
8474: LD_INT 600
8476: DISABLE_MARKED
// enable_human_prediction := true ;
8477: LD_ADDR_OWVAR 51
8481: PUSH
8482: LD_INT 1
8484: ST_TO_ADDR
// mp_selectmsg := true ;
8485: LD_ADDR_OWVAR 13
8489: PUSH
8490: LD_INT 1
8492: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
8493: CALL 68 0 0
// prepare_map_coordinates ;
8497: CALL 3504 0 0
// ResetFog ;
8501: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
8505: LD_OWVAR 2
8509: PPUSH
8510: CALL_OW 520
// AnimateTrees ( true ) ;
8514: LD_INT 1
8516: PPUSH
8517: CALL_OW 573
// prepare_sides ;
8521: CALL 8383 0 0
// Init_Win_Condition ;
8525: CALL 15357 0 0
// InitLimits ;
8529: CALL 14017 0 0
// ShowTimer ;
8533: CALL 14954 0 0
// music_nat := Side_Nations [ your_side ] ;
8537: LD_ADDR_OWVAR 71
8541: PUSH
8542: LD_EXP 44
8546: PUSH
8547: LD_OWVAR 2
8551: ARRAY
8552: ST_TO_ADDR
// if IAmSpec then
8553: CALL_OW 531
8557: IFFALSE 8581
// begin fogoff ( true ) ;
8559: LD_INT 1
8561: PPUSH
8562: CALL_OW 344
// CenterNowOnXY ( 109 , 61 ) ;
8566: LD_INT 109
8568: PPUSH
8569: LD_INT 61
8571: PPUSH
8572: CALL_OW 86
// enable ( 400 ) ;
8576: LD_INT 400
8578: ENABLE_MARKED
// end else
8579: GO 8635
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 1 ] [ 2 ] ) ;
8581: LD_EXP 48
8585: PUSH
8586: LD_EXP 43
8590: PUSH
8591: LD_OWVAR 2
8595: ARRAY
8596: ARRAY
8597: PUSH
8598: LD_INT 1
8600: ARRAY
8601: PUSH
8602: LD_INT 1
8604: ARRAY
8605: PPUSH
8606: LD_EXP 48
8610: PUSH
8611: LD_EXP 43
8615: PUSH
8616: LD_OWVAR 2
8620: ARRAY
8621: ARRAY
8622: PUSH
8623: LD_INT 1
8625: ARRAY
8626: PUSH
8627: LD_INT 2
8629: ARRAY
8630: PPUSH
8631: CALL_OW 86
// end ; InitApeman ;
8635: CALL 10044 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 ] ;
8639: LD_ADDR_EXP 69
8643: PUSH
8644: LD_INT 26
8646: PUSH
8647: LD_INT 27
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: ST_TO_ADDR
// BeginBuildUp ;
8654: CALL 21376 0 0
// end ; end_of_file
8658: END
// every 1 1$0 + 0 0$0.3 do
8659: GO 8661
8661: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
8662: LD_INT 4
8664: PPUSH
8665: LD_INT 5
8667: PPUSH
8668: CALL_OW 12
8672: PPUSH
8673: LD_INT 1
8675: PPUSH
8676: CALL_OW 57
// enable ;
8680: ENABLE
// end ;
8681: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
8682: GO 8684
8684: DISABLE
8685: LD_INT 0
8687: PPUSH
8688: PPUSH
// begin case tick of 1 .. 1 1$0 :
8689: LD_OWVAR 1
8693: PUSH
8694: LD_INT 1
8696: DOUBLE
8697: GREATEREQUAL
8698: IFFALSE 8706
8700: LD_INT 2100
8702: DOUBLE
8703: LESSEQUAL
8704: IFTRUE 8708
8706: GO 8736
8708: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
8709: LD_EXP 32
8713: PUSH
8714: LD_INT 100
8716: DIVREAL
8717: PUSH
8718: LD_INT 525
8720: PPUSH
8721: LD_INT 1050
8723: PPUSH
8724: CALL_OW 12
8728: MUL
8729: PPUSH
8730: CALL_OW 67
8734: GO 9038
8736: LD_INT 2100
8738: PUSH
8739: LD_INT 1
8741: PLUS
8742: DOUBLE
8743: GREATEREQUAL
8744: IFFALSE 8752
8746: LD_INT 10500
8748: DOUBLE
8749: LESSEQUAL
8750: IFTRUE 8754
8752: GO 8782
8754: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
8755: LD_EXP 32
8759: PUSH
8760: LD_INT 100
8762: DIVREAL
8763: PUSH
8764: LD_INT 1050
8766: PPUSH
8767: LD_INT 1750
8769: PPUSH
8770: CALL_OW 12
8774: MUL
8775: PPUSH
8776: CALL_OW 67
8780: GO 9038
8782: LD_INT 10500
8784: PUSH
8785: LD_INT 1
8787: PLUS
8788: DOUBLE
8789: GREATEREQUAL
8790: IFFALSE 8798
8792: LD_INT 21000
8794: DOUBLE
8795: LESSEQUAL
8796: IFTRUE 8800
8798: GO 8828
8800: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
8801: LD_EXP 32
8805: PUSH
8806: LD_INT 100
8808: DIVREAL
8809: PUSH
8810: LD_INT 1750
8812: PPUSH
8813: LD_INT 2100
8815: PPUSH
8816: CALL_OW 12
8820: MUL
8821: PPUSH
8822: CALL_OW 67
8826: GO 9038
8828: LD_INT 21000
8830: PUSH
8831: LD_INT 1
8833: PLUS
8834: DOUBLE
8835: GREATEREQUAL
8836: IFFALSE 8844
8838: LD_INT 42000
8840: DOUBLE
8841: LESSEQUAL
8842: IFTRUE 8846
8844: GO 8874
8846: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
8847: LD_EXP 32
8851: PUSH
8852: LD_INT 100
8854: DIVREAL
8855: PUSH
8856: LD_INT 2100
8858: PPUSH
8859: LD_INT 2275
8861: PPUSH
8862: CALL_OW 12
8866: MUL
8867: PPUSH
8868: CALL_OW 67
8872: GO 9038
8874: LD_INT 42000
8876: PUSH
8877: LD_INT 1
8879: PLUS
8880: DOUBLE
8881: GREATEREQUAL
8882: IFFALSE 8890
8884: LD_INT 63000
8886: DOUBLE
8887: LESSEQUAL
8888: IFTRUE 8892
8890: GO 8920
8892: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
8893: LD_EXP 32
8897: PUSH
8898: LD_INT 100
8900: DIVREAL
8901: PUSH
8902: LD_INT 2275
8904: PPUSH
8905: LD_INT 2450
8907: PPUSH
8908: CALL_OW 12
8912: MUL
8913: PPUSH
8914: CALL_OW 67
8918: GO 9038
8920: LD_INT 63000
8922: PUSH
8923: LD_INT 1
8925: PLUS
8926: DOUBLE
8927: GREATEREQUAL
8928: IFFALSE 8936
8930: LD_INT 105000
8932: DOUBLE
8933: LESSEQUAL
8934: IFTRUE 8938
8936: GO 8966
8938: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
8939: LD_EXP 32
8943: PUSH
8944: LD_INT 100
8946: DIVREAL
8947: PUSH
8948: LD_INT 2450
8950: PPUSH
8951: LD_INT 2800
8953: PPUSH
8954: CALL_OW 12
8958: MUL
8959: PPUSH
8960: CALL_OW 67
8964: GO 9038
8966: LD_INT 105000
8968: PUSH
8969: LD_INT 1
8971: PLUS
8972: DOUBLE
8973: GREATEREQUAL
8974: IFFALSE 8982
8976: LD_INT 630000
8978: DOUBLE
8979: LESSEQUAL
8980: IFTRUE 8984
8982: GO 9012
8984: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
8985: LD_EXP 32
8989: PUSH
8990: LD_INT 100
8992: DIVREAL
8993: PUSH
8994: LD_INT 2800
8996: PPUSH
8997: LD_INT 3500
8999: PPUSH
9000: CALL_OW 12
9004: MUL
9005: PPUSH
9006: CALL_OW 67
9010: GO 9038
9012: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
9013: LD_EXP 32
9017: PUSH
9018: LD_INT 100
9020: DIVREAL
9021: PUSH
9022: LD_INT 3500
9024: PPUSH
9025: LD_INT 3850
9027: PPUSH
9028: CALL_OW 12
9032: MUL
9033: PPUSH
9034: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
9038: LD_ADDR_VAR 0 2
9042: PUSH
9043: LD_INT 3
9045: PPUSH
9046: LD_INT 5
9048: PPUSH
9049: CALL_OW 12
9053: ST_TO_ADDR
// for i = 1 to 2 do
9054: LD_ADDR_VAR 0 1
9058: PUSH
9059: DOUBLE
9060: LD_INT 1
9062: DEC
9063: ST_TO_ADDR
9064: LD_INT 2
9066: PUSH
9067: FOR_TO
9068: IFFALSE 9095
// CreateCratesArea ( amount , BuildUpAreas [ i ] , true ) ;
9070: LD_VAR 0 2
9074: PPUSH
9075: LD_EXP 69
9079: PUSH
9080: LD_VAR 0 1
9084: ARRAY
9085: PPUSH
9086: LD_INT 1
9088: PPUSH
9089: CALL_OW 55
9093: GO 9067
9095: POP
9096: POP
// enable ;
9097: ENABLE
// end ;
9098: PPOPN 2
9100: END
// every 0 0$20 + 0 0$0.9 do var i , filter ;
9101: GO 9103
9103: DISABLE
9104: LD_INT 0
9106: PPUSH
9107: PPUSH
// begin if GetResourceArea ( Valley , mat_cans ) < ( ( 300 - shipments_density ) / 100 * 5 ) then
9108: LD_INT 12
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: CALL_OW 287
9118: PUSH
9119: LD_INT 300
9121: PUSH
9122: LD_EXP 32
9126: MINUS
9127: PUSH
9128: LD_INT 100
9130: DIVREAL
9131: PUSH
9132: LD_INT 5
9134: MUL
9135: LESS
9136: IFFALSE 9159
// CreateCratesArea ( Rand ( 3 , 5 ) , Valley , true ) ;
9138: LD_INT 3
9140: PPUSH
9141: LD_INT 5
9143: PPUSH
9144: CALL_OW 12
9148: PPUSH
9149: LD_INT 12
9151: PPUSH
9152: LD_INT 1
9154: PPUSH
9155: CALL_OW 55
// enable ;
9159: ENABLE
// end ; end_of_file
9160: PPOPN 2
9162: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
9163: LD_VAR 0 1
9167: PPUSH
9168: CALL_OW 266
9172: PUSH
9173: LD_INT 0
9175: PUSH
9176: LD_INT 1
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: IN
9183: IFFALSE 9208
// SetBName ( b , @ & GetSide ( b ) ) ;
9185: LD_VAR 0 1
9189: PPUSH
9190: LD_STRING @
9192: PUSH
9193: LD_VAR 0 1
9197: PPUSH
9198: CALL_OW 255
9202: STR
9203: PPUSH
9204: CALL_OW 500
// if def_game_rules then
9208: LD_EXP 65
9212: IFFALSE 9249
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
9214: LD_VAR 0 1
9218: PPUSH
9219: LD_VAR 0 1
9223: PPUSH
9224: CALL_OW 266
9228: PPUSH
9229: LD_VAR 0 1
9233: PPUSH
9234: CALL_OW 255
9238: PPUSH
9239: LD_INT 0
9241: PPUSH
9242: LD_INT 1
9244: PPUSH
9245: CALL 14418 0 5
// end ;
9249: PPOPN 2
9251: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
9252: LD_VAR 0 1
9256: PPUSH
9257: CALL_OW 266
9261: PUSH
9262: LD_INT 0
9264: PUSH
9265: LD_INT 1
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: IN
9272: IFFALSE 9297
// SetBName ( b , @ & GetSide ( b ) ) ;
9274: LD_VAR 0 1
9278: PPUSH
9279: LD_STRING @
9281: PUSH
9282: LD_VAR 0 1
9286: PPUSH
9287: CALL_OW 255
9291: STR
9292: PPUSH
9293: CALL_OW 500
// if def_game_rules then
9297: LD_EXP 65
9301: IFFALSE 9340
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
9303: LD_VAR 0 1
9307: PPUSH
9308: LD_VAR 0 1
9312: PPUSH
9313: CALL_OW 266
9317: PPUSH
9318: LD_VAR 0 1
9322: PPUSH
9323: CALL_OW 255
9327: PPUSH
9328: LD_VAR 0 2
9332: PPUSH
9333: LD_INT 1
9335: PPUSH
9336: CALL 14418 0 5
// end ;
9340: PPOPN 3
9342: END
// on VehicleConstructed ( veh , fac ) do var side ;
9343: LD_INT 0
9345: PPUSH
// begin if GetControl ( veh ) = control_apeman then
9346: LD_VAR 0 1
9350: PPUSH
9351: CALL_OW 263
9355: PUSH
9356: LD_INT 5
9358: EQUAL
9359: IFFALSE 9501
// begin side := GetSide ( veh ) ;
9361: LD_ADDR_VAR 0 3
9365: PUSH
9366: LD_VAR 0 1
9370: PPUSH
9371: CALL_OW 255
9375: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
9376: LD_ADDR_EXP 60
9380: PUSH
9381: LD_EXP 60
9385: PPUSH
9386: LD_VAR 0 3
9390: PPUSH
9391: LD_EXP 60
9395: PUSH
9396: LD_VAR 0 3
9400: ARRAY
9401: PPUSH
9402: LD_INT 52
9404: PUSH
9405: EMPTY
9406: LIST
9407: PPUSH
9408: CALL_OW 72
9412: PUSH
9413: LD_INT 22
9415: PUSH
9416: LD_VAR 0 3
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 2
9427: PUSH
9428: LD_INT 33
9430: PUSH
9431: LD_INT 5
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PUSH
9438: LD_INT 25
9440: PUSH
9441: LD_INT 12
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: LD_INT 25
9450: PUSH
9451: LD_INT 15
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 25
9460: PUSH
9461: LD_INT 16
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: LD_INT 25
9470: PUSH
9471: LD_INT 17
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PPUSH
9490: CALL_OW 69
9494: UNION
9495: PPUSH
9496: CALL_OW 1
9500: ST_TO_ADDR
// end ; end ;
9501: PPOPN 3
9503: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
9504: LD_INT 0
9506: PPUSH
9507: PPUSH
9508: PPUSH
9509: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
9510: LD_VAR 0 1
9514: PPUSH
9515: CALL_OW 257
9519: PUSH
9520: LD_INT 12
9522: PUSH
9523: LD_INT 15
9525: PUSH
9526: LD_INT 17
9528: PUSH
9529: LD_INT 16
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: IN
9538: PUSH
9539: LD_VAR 0 1
9543: PPUSH
9544: CALL_OW 263
9548: PUSH
9549: LD_INT 5
9551: EQUAL
9552: OR
9553: IFFALSE 9564
// ApeKilled ( j ) ;
9555: LD_VAR 0 1
9559: PPUSH
9560: CALL 10727 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
9564: LD_VAR 0 1
9568: PPUSH
9569: CALL_OW 266
9573: PUSH
9574: LD_INT 0
9576: PUSH
9577: LD_INT 1
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: IN
9584: IFFALSE 9666
// begin pos := Side_Positions [ GetSide ( j ) ] ;
9586: LD_ADDR_VAR 0 4
9590: PUSH
9591: LD_EXP 43
9595: PUSH
9596: LD_VAR 0 1
9600: PPUSH
9601: CALL_OW 255
9605: ARRAY
9606: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
9607: LD_ADDR_VAR 0 2
9611: PUSH
9612: LD_EXP 48
9616: PUSH
9617: LD_VAR 0 4
9621: ARRAY
9622: PUSH
9623: LD_INT 1
9625: ARRAY
9626: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
9627: LD_ADDR_VAR 0 3
9631: PUSH
9632: LD_EXP 48
9636: PUSH
9637: LD_VAR 0 4
9641: ARRAY
9642: PUSH
9643: LD_INT 2
9645: ARRAY
9646: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
9647: LD_VAR 0 2
9651: PPUSH
9652: LD_VAR 0 3
9656: PPUSH
9657: CALL_OW 420
9661: PPUSH
9662: CALL_OW 419
// end ; if def_game_rules then
9666: LD_EXP 65
9670: IFFALSE 9769
// if ( GetType ( j ) = 3 ) then
9672: LD_VAR 0 1
9676: PPUSH
9677: CALL_OW 247
9681: PUSH
9682: LD_INT 3
9684: EQUAL
9685: IFFALSE 9725
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
9687: LD_VAR 0 1
9691: PPUSH
9692: LD_VAR 0 1
9696: PPUSH
9697: CALL_OW 266
9701: PPUSH
9702: LD_VAR 0 1
9706: PPUSH
9707: CALL_OW 255
9711: PPUSH
9712: LD_INT 0
9714: PPUSH
9715: LD_INT 1
9717: NEG
9718: PPUSH
9719: CALL 14418 0 5
9723: GO 9769
// if ( GetChassis ( j ) = 25 ) then
9725: LD_VAR 0 1
9729: PPUSH
9730: CALL_OW 265
9734: PUSH
9735: LD_INT 25
9737: EQUAL
9738: IFFALSE 9769
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
9740: LD_VAR 0 1
9744: PPUSH
9745: LD_INT 37
9747: PPUSH
9748: LD_VAR 0 1
9752: PPUSH
9753: CALL_OW 255
9757: PPUSH
9758: LD_INT 0
9760: PPUSH
9761: LD_INT 1
9763: NEG
9764: PPUSH
9765: CALL 14418 0 5
// end ;
9769: PPOPN 5
9771: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
9772: LD_EXP 65
9776: PUSH
9777: LD_VAR 0 1
9781: PPUSH
9782: CALL_OW 265
9786: PUSH
9787: LD_INT 25
9789: EQUAL
9790: AND
9791: IFFALSE 9823
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
9793: LD_VAR 0 1
9797: PPUSH
9798: LD_INT 37
9800: PPUSH
9801: LD_VAR 0 1
9805: PPUSH
9806: CALL_OW 255
9810: PPUSH
9811: LD_VAR 0 3
9815: PPUSH
9816: LD_INT 1
9818: PPUSH
9819: CALL 14418 0 5
// end ;
9823: PPOPN 4
9825: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
9826: LD_VAR 0 1
9830: PPUSH
9831: LD_VAR 0 2
9835: PPUSH
9836: LD_VAR 0 3
9840: PPUSH
9841: LD_OWVAR 2
9845: PPUSH
9846: CALL 15118 0 4
9850: PPOPN 3
9852: END
// every 20 20$00 trigger apemanNumber do
9853: LD_EXP 57
9857: IFFALSE 9890
9859: GO 9861
9861: DISABLE
// begin enable ;
9862: ENABLE
// if apeLevel >= 8 then
9863: LD_EXP 62
9867: PUSH
9868: LD_INT 8
9870: GREATEREQUAL
9871: IFFALSE 9876
// disable else
9873: DISABLE
9874: GO 9890
// apeLevel := apeLevel + 1 ;
9876: LD_ADDR_EXP 62
9880: PUSH
9881: LD_EXP 62
9885: PUSH
9886: LD_INT 1
9888: PLUS
9889: ST_TO_ADDR
// end ;
9890: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
9891: LD_EXP 57
9895: PUSH
9896: LD_EXP 58
9900: LESS
9901: IFFALSE 10041
9903: GO 9905
9905: DISABLE
9906: LD_INT 0
9908: PPUSH
9909: PPUSH
9910: PPUSH
9911: PPUSH
// begin enable ;
9912: ENABLE
// for i := 1 to apemanPos do
9913: LD_ADDR_VAR 0 1
9917: PUSH
9918: DOUBLE
9919: LD_INT 1
9921: DEC
9922: ST_TO_ADDR
9923: LD_EXP 60
9927: PUSH
9928: FOR_TO
9929: IFFALSE 10039
// begin if apemanPlayerCount [ i ] then
9931: LD_EXP 61
9935: PUSH
9936: LD_VAR 0 1
9940: ARRAY
9941: IFFALSE 10037
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
9943: LD_EXP 61
9947: PUSH
9948: LD_VAR 0 1
9952: ARRAY
9953: PUSH
9954: LD_EXP 60
9958: PUSH
9959: LD_VAR 0 1
9963: ARRAY
9964: GREATER
9965: IFFALSE 10037
// begin ape := PrepareApeman ;
9967: LD_ADDR_VAR 0 2
9971: PUSH
9972: CALL 10536 0 0
9976: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
9977: LD_VAR 0 2
9981: PPUSH
9982: LD_EXP 63
9986: PUSH
9987: LD_VAR 0 1
9991: ARRAY
9992: PPUSH
9993: LD_INT 0
9995: PPUSH
9996: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
10000: LD_ADDR_EXP 60
10004: PUSH
10005: LD_EXP 60
10009: PPUSH
10010: LD_VAR 0 1
10014: PPUSH
10015: LD_EXP 60
10019: PUSH
10020: LD_VAR 0 1
10024: ARRAY
10025: PUSH
10026: LD_VAR 0 2
10030: UNION
10031: PPUSH
10032: CALL_OW 1
10036: ST_TO_ADDR
// end ; end ; end ;
10037: GO 9928
10039: POP
10040: POP
// end ;
10041: PPOPN 4
10043: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
10044: LD_INT 0
10046: PPUSH
10047: PPUSH
10048: PPUSH
10049: PPUSH
10050: PPUSH
10051: PPUSH
10052: PPUSH
// playersAmount := 0 ;
10053: LD_ADDR_VAR 0 3
10057: PUSH
10058: LD_INT 0
10060: ST_TO_ADDR
// _apeAreas := [ Ar1Out3 , Ar2Out3 ] ;
10061: LD_ADDR_VAR 0 7
10065: PUSH
10066: LD_INT 24
10068: PUSH
10069: LD_INT 18
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10076: LD_ADDR_EXP 63
10080: PUSH
10081: LD_INT 0
10083: PUSH
10084: LD_INT 0
10086: PUSH
10087: LD_INT 0
10089: PUSH
10090: LD_INT 0
10092: PUSH
10093: LD_INT 0
10095: PUSH
10096: LD_INT 0
10098: PUSH
10099: LD_INT 0
10101: PUSH
10102: LD_INT 0
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: ST_TO_ADDR
// for j = 1 to Side_Positions do
10115: LD_ADDR_VAR 0 4
10119: PUSH
10120: DOUBLE
10121: LD_INT 1
10123: DEC
10124: ST_TO_ADDR
10125: LD_EXP 43
10129: PUSH
10130: FOR_TO
10131: IFFALSE 10198
// if Side_Positions [ j ] then
10133: LD_EXP 43
10137: PUSH
10138: LD_VAR 0 4
10142: ARRAY
10143: IFFALSE 10196
// begin playersAmount := playersAmount + 1 ;
10145: LD_ADDR_VAR 0 3
10149: PUSH
10150: LD_VAR 0 3
10154: PUSH
10155: LD_INT 1
10157: PLUS
10158: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
10159: LD_ADDR_EXP 63
10163: PUSH
10164: LD_EXP 63
10168: PPUSH
10169: LD_VAR 0 4
10173: PPUSH
10174: LD_VAR 0 7
10178: PUSH
10179: LD_EXP 43
10183: PUSH
10184: LD_VAR 0 4
10188: ARRAY
10189: ARRAY
10190: PPUSH
10191: CALL_OW 1
10195: ST_TO_ADDR
// end ;
10196: GO 10130
10198: POP
10199: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
10200: LD_ADDR_EXP 59
10204: PUSH
10205: LD_INT 3
10207: PUSH
10208: LD_EXP 37
10212: MUL
10213: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
10214: LD_ADDR_EXP 57
10218: PUSH
10219: LD_VAR 0 3
10223: PUSH
10224: LD_EXP 59
10228: MUL
10229: ST_TO_ADDR
// apemanLimit := apemanNumber ;
10230: LD_ADDR_EXP 58
10234: PUSH
10235: LD_EXP 57
10239: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10240: LD_ADDR_EXP 60
10244: PUSH
10245: LD_INT 0
10247: PUSH
10248: LD_INT 0
10250: PUSH
10251: LD_INT 0
10253: PUSH
10254: LD_INT 0
10256: PUSH
10257: LD_INT 0
10259: PUSH
10260: LD_INT 0
10262: PUSH
10263: LD_INT 0
10265: PUSH
10266: LD_INT 0
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
10279: LD_ADDR_EXP 61
10283: PUSH
10284: LD_INT 0
10286: PUSH
10287: LD_INT 0
10289: PUSH
10290: LD_INT 0
10292: PUSH
10293: LD_INT 0
10295: PUSH
10296: LD_INT 0
10298: PUSH
10299: LD_INT 0
10301: PUSH
10302: LD_INT 0
10304: PUSH
10305: LD_INT 0
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: ST_TO_ADDR
// apeLevel := 1 ;
10318: LD_ADDR_EXP 62
10322: PUSH
10323: LD_INT 1
10325: ST_TO_ADDR
// if not apemanNumber then
10326: LD_EXP 57
10330: NOT
10331: IFFALSE 10335
// exit ;
10333: GO 10531
// for i := 1 to apemanPerPlayer do
10335: LD_ADDR_VAR 0 2
10339: PUSH
10340: DOUBLE
10341: LD_INT 1
10343: DEC
10344: ST_TO_ADDR
10345: LD_EXP 59
10349: PUSH
10350: FOR_TO
10351: IFFALSE 10529
// begin for j := 1 to Side_Positions do
10353: LD_ADDR_VAR 0 4
10357: PUSH
10358: DOUBLE
10359: LD_INT 1
10361: DEC
10362: ST_TO_ADDR
10363: LD_EXP 43
10367: PUSH
10368: FOR_TO
10369: IFFALSE 10525
// if Side_Positions [ j ] then
10371: LD_EXP 43
10375: PUSH
10376: LD_VAR 0 4
10380: ARRAY
10381: IFFALSE 10523
// begin pos := Side_Positions [ j ] ;
10383: LD_ADDR_VAR 0 6
10387: PUSH
10388: LD_EXP 43
10392: PUSH
10393: LD_VAR 0 4
10397: ARRAY
10398: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
10399: LD_ADDR_EXP 61
10403: PUSH
10404: LD_EXP 61
10408: PPUSH
10409: LD_VAR 0 4
10413: PPUSH
10414: LD_EXP 61
10418: PUSH
10419: LD_VAR 0 4
10423: ARRAY
10424: PUSH
10425: LD_INT 1
10427: PLUS
10428: PPUSH
10429: CALL_OW 1
10433: ST_TO_ADDR
// ape := PrepareApeman ;
10434: LD_ADDR_VAR 0 5
10438: PUSH
10439: CALL 10536 0 0
10443: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
10444: LD_ADDR_EXP 60
10448: PUSH
10449: LD_EXP 60
10453: PPUSH
10454: LD_VAR 0 4
10458: PPUSH
10459: LD_EXP 60
10463: PUSH
10464: LD_VAR 0 4
10468: ARRAY
10469: PPUSH
10470: LD_EXP 60
10474: PUSH
10475: LD_VAR 0 4
10479: ARRAY
10480: PUSH
10481: LD_INT 1
10483: PLUS
10484: PPUSH
10485: LD_VAR 0 5
10489: PPUSH
10490: CALL_OW 1
10494: PPUSH
10495: CALL_OW 1
10499: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
10500: LD_VAR 0 5
10504: PPUSH
10505: LD_EXP 63
10509: PUSH
10510: LD_VAR 0 4
10514: ARRAY
10515: PPUSH
10516: LD_INT 0
10518: PPUSH
10519: CALL_OW 49
// end ;
10523: GO 10368
10525: POP
10526: POP
// end ;
10527: GO 10350
10529: POP
10530: POP
// end ;
10531: LD_VAR 0 1
10535: RET
// export function PrepareApeman ; var bonus ; begin
10536: LD_INT 0
10538: PPUSH
10539: PPUSH
// uc_side := 0 ;
10540: LD_ADDR_OWVAR 20
10544: PUSH
10545: LD_INT 0
10547: ST_TO_ADDR
// uc_nation := 0 ;
10548: LD_ADDR_OWVAR 21
10552: PUSH
10553: LD_INT 0
10555: ST_TO_ADDR
// InitHc ;
10556: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
10560: LD_ADDR_VAR 0 2
10564: PUSH
10565: LD_INT 1
10567: NEG
10568: PUSH
10569: LD_INT 0
10571: PUSH
10572: LD_INT 1
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: LIST
10579: PUSH
10580: LD_INT 25
10582: PUSH
10583: LD_INT 12
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PPUSH
10590: CALL_OW 69
10594: PUSH
10595: LD_INT 3
10597: MOD
10598: PUSH
10599: LD_INT 1
10601: PLUS
10602: ARRAY
10603: ST_TO_ADDR
// hc_class := class_apeman ;
10604: LD_ADDR_OWVAR 28
10608: PUSH
10609: LD_INT 12
10611: ST_TO_ADDR
// hc_gallery :=  ;
10612: LD_ADDR_OWVAR 33
10616: PUSH
10617: LD_STRING 
10619: ST_TO_ADDR
// hc_name :=  ;
10620: LD_ADDR_OWVAR 26
10624: PUSH
10625: LD_STRING 
10627: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
10628: LD_ADDR_OWVAR 31
10632: PUSH
10633: LD_EXP 62
10637: PUSH
10638: LD_VAR 0 2
10642: PLUS
10643: PUSH
10644: LD_EXP 62
10648: PUSH
10649: LD_VAR 0 2
10653: PLUS
10654: PUSH
10655: LD_EXP 62
10659: PUSH
10660: LD_VAR 0 2
10664: PLUS
10665: PUSH
10666: LD_EXP 62
10670: PUSH
10671: LD_VAR 0 2
10675: PLUS
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
10683: LD_ADDR_OWVAR 35
10687: PUSH
10688: LD_INT 10
10690: PUSH
10691: LD_VAR 0 2
10695: MUL
10696: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10697: LD_ADDR_OWVAR 29
10701: PUSH
10702: LD_INT 12
10704: PUSH
10705: LD_INT 12
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: ST_TO_ADDR
// result := CreateHuman ;
10712: LD_ADDR_VAR 0 1
10716: PUSH
10717: CALL_OW 44
10721: ST_TO_ADDR
// end ;
10722: LD_VAR 0 1
10726: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
10727: LD_INT 0
10729: PPUSH
10730: PPUSH
10731: PPUSH
// if not ape then
10732: LD_VAR 0 1
10736: NOT
10737: IFFALSE 10741
// exit ;
10739: GO 10866
// side := GetSide ( ape ) ;
10741: LD_ADDR_VAR 0 3
10745: PUSH
10746: LD_VAR 0 1
10750: PPUSH
10751: CALL_OW 255
10755: ST_TO_ADDR
// if not side then
10756: LD_VAR 0 3
10760: NOT
10761: IFFALSE 10815
// begin for i = 1 to apemanPos do
10763: LD_ADDR_VAR 0 4
10767: PUSH
10768: DOUBLE
10769: LD_INT 1
10771: DEC
10772: ST_TO_ADDR
10773: LD_EXP 60
10777: PUSH
10778: FOR_TO
10779: IFFALSE 10813
// if ape in apemanPos [ i ] then
10781: LD_VAR 0 1
10785: PUSH
10786: LD_EXP 60
10790: PUSH
10791: LD_VAR 0 4
10795: ARRAY
10796: IN
10797: IFFALSE 10811
// begin side := i ;
10799: LD_ADDR_VAR 0 3
10803: PUSH
10804: LD_VAR 0 4
10808: ST_TO_ADDR
// break ;
10809: GO 10813
// end ;
10811: GO 10778
10813: POP
10814: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
10815: LD_ADDR_EXP 60
10819: PUSH
10820: LD_EXP 60
10824: PPUSH
10825: LD_VAR 0 3
10829: PPUSH
10830: LD_EXP 60
10834: PUSH
10835: LD_VAR 0 3
10839: ARRAY
10840: PUSH
10841: LD_VAR 0 1
10845: DIFF
10846: PPUSH
10847: CALL_OW 1
10851: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
10852: LD_ADDR_EXP 57
10856: PUSH
10857: LD_EXP 57
10861: PUSH
10862: LD_INT 1
10864: MINUS
10865: ST_TO_ADDR
// end ; end_of_file
10866: LD_VAR 0 2
10870: RET
// var free , free1 , free2 , new1 , new2 , arr1 , arr2 , seenby1 , seenby2 ; function displ_status ; var s1 , s2 ; begin
10871: LD_INT 0
10873: PPUSH
10874: PPUSH
10875: PPUSH
// if not def_people_arrivals then
10876: LD_EXP 11
10880: NOT
10881: IFFALSE 10885
// exit ;
10883: GO 11026
// if def_people_loyality then
10885: LD_EXP 12
10889: IFFALSE 11005
// begin s1 := [ #Multi1x1-InfoL , Side_Positions [ 1 ] , ( free1 + 0 ) ] ;
10891: LD_ADDR_VAR 0 2
10895: PUSH
10896: LD_STRING #Multi1x1-InfoL
10898: PUSH
10899: LD_EXP 43
10903: PUSH
10904: LD_INT 1
10906: ARRAY
10907: PUSH
10908: LD_LOC 10
10912: PUSH
10913: LD_INT 0
10915: PLUS
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: LIST
10921: ST_TO_ADDR
// s2 := [ #Multi1x1-InfoL , Side_Positions [ 2 ] , ( free2 + 0 ) ] ;
10922: LD_ADDR_VAR 0 3
10926: PUSH
10927: LD_STRING #Multi1x1-InfoL
10929: PUSH
10930: LD_EXP 43
10934: PUSH
10935: LD_INT 2
10937: ARRAY
10938: PUSH
10939: LD_LOC 11
10943: PUSH
10944: LD_INT 0
10946: PLUS
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: LIST
10952: ST_TO_ADDR
// if Side_Positions [ your_side ] <> 2 then
10953: LD_EXP 43
10957: PUSH
10958: LD_OWVAR 2
10962: ARRAY
10963: PUSH
10964: LD_INT 2
10966: NONEQUAL
10967: IFFALSE 10987
// ExtraStrings := s1 ^ s2 else
10969: LD_ADDR_EXP 67
10973: PUSH
10974: LD_VAR 0 2
10978: PUSH
10979: LD_VAR 0 3
10983: ADD
10984: ST_TO_ADDR
10985: GO 11003
// ExtraStrings := s2 ^ s1 ;
10987: LD_ADDR_EXP 67
10991: PUSH
10992: LD_VAR 0 3
10996: PUSH
10997: LD_VAR 0 2
11001: ADD
11002: ST_TO_ADDR
// end else
11003: GO 11026
// begin ExtraStrings := [ #Multi1x1-InfoNonL , ( free + 0 ) ] ;
11005: LD_ADDR_EXP 67
11009: PUSH
11010: LD_STRING #Multi1x1-InfoNonL
11012: PUSH
11013: LD_LOC 9
11017: PUSH
11018: LD_INT 0
11020: PLUS
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: ST_TO_ADDR
// end ; end ;
11026: LD_VAR 0 1
11030: RET
// every 0 0$1 do
11031: GO 11033
11033: DISABLE
// begin if not text_info then
11034: LD_EXP 34
11038: NOT
11039: IFFALSE 11043
// exit ;
11041: GO 11048
// displ_status ;
11043: CALL 10871 0 0
// enable ;
11047: ENABLE
// end ;
11048: END
// export function prepare_arrivals ; var i , ar , p1 , p2 , pom1 , pom2 ; begin
11049: LD_INT 0
11051: PPUSH
11052: PPUSH
11053: PPUSH
11054: PPUSH
11055: PPUSH
11056: PPUSH
11057: PPUSH
// arr1 := [ ] ;
11058: LD_ADDR_LOC 14
11062: PUSH
11063: EMPTY
11064: ST_TO_ADDR
// arr2 := [ ] ;
11065: LD_ADDR_LOC 15
11069: PUSH
11070: EMPTY
11071: ST_TO_ADDR
// for i := 1 to max_arriving_times do
11072: LD_ADDR_VAR 0 2
11076: PUSH
11077: DOUBLE
11078: LD_INT 1
11080: DEC
11081: ST_TO_ADDR
11082: LD_EXP 33
11086: PUSH
11087: FOR_TO
11088: IFFALSE 11624
// begin case rand ( 1 , 100 ) of 1 .. 45 :
11090: LD_INT 1
11092: PPUSH
11093: LD_INT 100
11095: PPUSH
11096: CALL_OW 12
11100: PUSH
11101: LD_INT 1
11103: DOUBLE
11104: GREATEREQUAL
11105: IFFALSE 11113
11107: LD_INT 45
11109: DOUBLE
11110: LESSEQUAL
11111: IFTRUE 11115
11113: GO 11322
11115: POP
// case rand ( 1 , 100 ) of 1 .. 10 :
11116: LD_INT 1
11118: PPUSH
11119: LD_INT 100
11121: PPUSH
11122: CALL_OW 12
11126: PUSH
11127: LD_INT 1
11129: DOUBLE
11130: GREATEREQUAL
11131: IFFALSE 11139
11133: LD_INT 10
11135: DOUBLE
11136: LESSEQUAL
11137: IFTRUE 11141
11139: GO 11159
11141: POP
// ar := [ Ar1Base1 , Ar2Base1 ] ; 11 .. 20 :
11142: LD_ADDR_VAR 0 3
11146: PUSH
11147: LD_INT 19
11149: PUSH
11150: LD_INT 15
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: ST_TO_ADDR
11157: GO 11320
11159: LD_INT 11
11161: DOUBLE
11162: GREATEREQUAL
11163: IFFALSE 11171
11165: LD_INT 20
11167: DOUBLE
11168: LESSEQUAL
11169: IFTRUE 11173
11171: GO 11191
11173: POP
// ar := [ Ar1Base2 , Ar2Base2 ] ; 21 .. 30 :
11174: LD_ADDR_VAR 0 3
11178: PUSH
11179: LD_INT 20
11181: PUSH
11182: LD_INT 14
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: ST_TO_ADDR
11189: GO 11320
11191: LD_INT 21
11193: DOUBLE
11194: GREATEREQUAL
11195: IFFALSE 11203
11197: LD_INT 30
11199: DOUBLE
11200: LESSEQUAL
11201: IFTRUE 11205
11203: GO 11223
11205: POP
// ar := [ Ar1Between , Ar2Between ] ; 31 .. 55 :
11206: LD_ADDR_VAR 0 3
11210: PUSH
11211: LD_INT 22
11213: PUSH
11214: LD_INT 16
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: ST_TO_ADDR
11221: GO 11320
11223: LD_INT 31
11225: DOUBLE
11226: GREATEREQUAL
11227: IFFALSE 11235
11229: LD_INT 55
11231: DOUBLE
11232: LESSEQUAL
11233: IFTRUE 11237
11235: GO 11255
11237: POP
// ar := [ Ar1Out2 , Ar2Out2 ] ; 56 .. 80 :
11238: LD_ADDR_VAR 0 3
11242: PUSH
11243: LD_INT 23
11245: PUSH
11246: LD_INT 17
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: ST_TO_ADDR
11253: GO 11320
11255: LD_INT 56
11257: DOUBLE
11258: GREATEREQUAL
11259: IFFALSE 11267
11261: LD_INT 80
11263: DOUBLE
11264: LESSEQUAL
11265: IFTRUE 11269
11267: GO 11287
11269: POP
// ar := [ Ar1Out1 , Ar2Out1 ] ; 81 .. 100 :
11270: LD_ADDR_VAR 0 3
11274: PUSH
11275: LD_INT 21
11277: PUSH
11278: LD_INT 13
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: ST_TO_ADDR
11285: GO 11320
11287: LD_INT 81
11289: DOUBLE
11290: GREATEREQUAL
11291: IFFALSE 11299
11293: LD_INT 100
11295: DOUBLE
11296: LESSEQUAL
11297: IFTRUE 11301
11299: GO 11319
11301: POP
// ar := [ Ar1Out3 , Ar2Out3 ] ; end ; 46 .. 85 :
11302: LD_ADDR_VAR 0 3
11306: PUSH
11307: LD_INT 24
11309: PUSH
11310: LD_INT 18
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: ST_TO_ADDR
11317: GO 11320
11319: POP
11320: GO 11576
11322: LD_INT 46
11324: DOUBLE
11325: GREATEREQUAL
11326: IFFALSE 11334
11328: LD_INT 85
11330: DOUBLE
11331: LESSEQUAL
11332: IFTRUE 11336
11334: GO 11543
11336: POP
// case rand ( 1 , 100 ) of 1 .. 5 :
11337: LD_INT 1
11339: PPUSH
11340: LD_INT 100
11342: PPUSH
11343: CALL_OW 12
11347: PUSH
11348: LD_INT 1
11350: DOUBLE
11351: GREATEREQUAL
11352: IFFALSE 11360
11354: LD_INT 5
11356: DOUBLE
11357: LESSEQUAL
11358: IFTRUE 11362
11360: GO 11380
11362: POP
// ar := [ Ar2Base1 , Ar1Base1 ] ; 6 .. 15 :
11363: LD_ADDR_VAR 0 3
11367: PUSH
11368: LD_INT 15
11370: PUSH
11371: LD_INT 19
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: ST_TO_ADDR
11378: GO 11541
11380: LD_INT 6
11382: DOUBLE
11383: GREATEREQUAL
11384: IFFALSE 11392
11386: LD_INT 15
11388: DOUBLE
11389: LESSEQUAL
11390: IFTRUE 11394
11392: GO 11412
11394: POP
// ar := [ Ar2Base2 , Ar1Base2 ] ; 16 .. 30 :
11395: LD_ADDR_VAR 0 3
11399: PUSH
11400: LD_INT 14
11402: PUSH
11403: LD_INT 20
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: ST_TO_ADDR
11410: GO 11541
11412: LD_INT 16
11414: DOUBLE
11415: GREATEREQUAL
11416: IFFALSE 11424
11418: LD_INT 30
11420: DOUBLE
11421: LESSEQUAL
11422: IFTRUE 11426
11424: GO 11444
11426: POP
// ar := [ Ar2Between , Ar1Between ] ; 31 .. 50 :
11427: LD_ADDR_VAR 0 3
11431: PUSH
11432: LD_INT 16
11434: PUSH
11435: LD_INT 22
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: ST_TO_ADDR
11442: GO 11541
11444: LD_INT 31
11446: DOUBLE
11447: GREATEREQUAL
11448: IFFALSE 11456
11450: LD_INT 50
11452: DOUBLE
11453: LESSEQUAL
11454: IFTRUE 11458
11456: GO 11476
11458: POP
// ar := [ Ar2Out2 , Ar1Out2 ] ; 51 .. 75 :
11459: LD_ADDR_VAR 0 3
11463: PUSH
11464: LD_INT 17
11466: PUSH
11467: LD_INT 23
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: ST_TO_ADDR
11474: GO 11541
11476: LD_INT 51
11478: DOUBLE
11479: GREATEREQUAL
11480: IFFALSE 11488
11482: LD_INT 75
11484: DOUBLE
11485: LESSEQUAL
11486: IFTRUE 11490
11488: GO 11508
11490: POP
// ar := [ Ar2Out1 , Ar1Out1 ] ; 76 .. 100 :
11491: LD_ADDR_VAR 0 3
11495: PUSH
11496: LD_INT 13
11498: PUSH
11499: LD_INT 21
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: ST_TO_ADDR
11506: GO 11541
11508: LD_INT 76
11510: DOUBLE
11511: GREATEREQUAL
11512: IFFALSE 11520
11514: LD_INT 100
11516: DOUBLE
11517: LESSEQUAL
11518: IFTRUE 11522
11520: GO 11540
11522: POP
// ar := [ Ar2Out3 , Ar1Out3 ] ; end ; 86 .. 100 :
11523: LD_ADDR_VAR 0 3
11527: PUSH
11528: LD_INT 18
11530: PUSH
11531: LD_INT 24
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: ST_TO_ADDR
11538: GO 11541
11540: POP
11541: GO 11576
11543: LD_INT 86
11545: DOUBLE
11546: GREATEREQUAL
11547: IFFALSE 11555
11549: LD_INT 100
11551: DOUBLE
11552: LESSEQUAL
11553: IFTRUE 11557
11555: GO 11575
11557: POP
// ar := [ valley , valley ] ; end ;
11558: LD_ADDR_VAR 0 3
11562: PUSH
11563: LD_INT 12
11565: PUSH
11566: LD_INT 12
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: ST_TO_ADDR
11573: GO 11576
11575: POP
// arr1 := arr1 ^ [ ar [ 1 ] ] ;
11576: LD_ADDR_LOC 14
11580: PUSH
11581: LD_LOC 14
11585: PUSH
11586: LD_VAR 0 3
11590: PUSH
11591: LD_INT 1
11593: ARRAY
11594: PUSH
11595: EMPTY
11596: LIST
11597: ADD
11598: ST_TO_ADDR
// arr2 := arr2 ^ [ ar [ 2 ] ] ;
11599: LD_ADDR_LOC 15
11603: PUSH
11604: LD_LOC 15
11608: PUSH
11609: LD_VAR 0 3
11613: PUSH
11614: LD_INT 2
11616: ARRAY
11617: PUSH
11618: EMPTY
11619: LIST
11620: ADD
11621: ST_TO_ADDR
// end ;
11622: GO 11087
11624: POP
11625: POP
// for i := 1 to max_arriving_times div 2 do
11626: LD_ADDR_VAR 0 2
11630: PUSH
11631: DOUBLE
11632: LD_INT 1
11634: DEC
11635: ST_TO_ADDR
11636: LD_EXP 33
11640: PUSH
11641: LD_INT 2
11643: DIV
11644: PUSH
11645: FOR_TO
11646: IFFALSE 11758
// begin p1 := Rand ( 1 , max_arriving_times ) ;
11648: LD_ADDR_VAR 0 4
11652: PUSH
11653: LD_INT 1
11655: PPUSH
11656: LD_EXP 33
11660: PPUSH
11661: CALL_OW 12
11665: ST_TO_ADDR
// p2 := Rand ( 1 , max_arriving_times ) ;
11666: LD_ADDR_VAR 0 5
11670: PUSH
11671: LD_INT 1
11673: PPUSH
11674: LD_EXP 33
11678: PPUSH
11679: CALL_OW 12
11683: ST_TO_ADDR
// pom1 := arr2 [ p1 ] ;
11684: LD_ADDR_VAR 0 6
11688: PUSH
11689: LD_LOC 15
11693: PUSH
11694: LD_VAR 0 4
11698: ARRAY
11699: ST_TO_ADDR
// pom2 := arr2 [ p2 ] ;
11700: LD_ADDR_VAR 0 7
11704: PUSH
11705: LD_LOC 15
11709: PUSH
11710: LD_VAR 0 5
11714: ARRAY
11715: ST_TO_ADDR
// arr2 := Replace ( Replace ( arr2 , p2 , pom1 ) , p1 , pom2 ) ;
11716: LD_ADDR_LOC 15
11720: PUSH
11721: LD_LOC 15
11725: PPUSH
11726: LD_VAR 0 5
11730: PPUSH
11731: LD_VAR 0 6
11735: PPUSH
11736: CALL_OW 1
11740: PPUSH
11741: LD_VAR 0 4
11745: PPUSH
11746: LD_VAR 0 7
11750: PPUSH
11751: CALL_OW 1
11755: ST_TO_ADDR
// end ;
11756: GO 11645
11758: POP
11759: POP
// end ;
11760: LD_VAR 0 1
11764: RET
// every 0 0$1 do
11765: GO 11767
11767: DISABLE
// begin if not max_arriving_times then
11768: LD_EXP 33
11772: NOT
11773: IFFALSE 11777
// exit ;
11775: GO 11860
// if tick >= max_arriving_times [ 1 ] * 0 0$30 then
11777: LD_OWVAR 1
11781: PUSH
11782: LD_EXP 33
11786: PUSH
11787: LD_INT 1
11789: ARRAY
11790: PUSH
11791: LD_INT 1050
11793: MUL
11794: GREATEREQUAL
11795: IFFALSE 11859
// begin new1 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11797: LD_ADDR_LOC 12
11801: PUSH
11802: LD_INT 1
11804: PPUSH
11805: LD_EXP 33
11809: PUSH
11810: LD_INT 1050
11812: MUL
11813: PPUSH
11814: CALL_OW 12
11818: ST_TO_ADDR
// new2 := Rand ( 1 , max_arriving_times * 0 0$30 ) ;
11819: LD_ADDR_LOC 13
11823: PUSH
11824: LD_INT 1
11826: PPUSH
11827: LD_EXP 33
11831: PUSH
11832: LD_INT 1050
11834: MUL
11835: PPUSH
11836: CALL_OW 12
11840: ST_TO_ADDR
// max_arriving_times := delete ( max_arriving_times , 1 ) ;
11841: LD_ADDR_EXP 33
11845: PUSH
11846: LD_EXP 33
11850: PPUSH
11851: LD_INT 1
11853: PPUSH
11854: CALL_OW 3
11858: ST_TO_ADDR
// end ; enable ;
11859: ENABLE
// end ;
11860: END
// function new_arrival ( pos ) ; var hum ; begin
11861: LD_INT 0
11863: PPUSH
11864: PPUSH
// if def_people_loyality then
11865: LD_EXP 12
11869: IFFALSE 11911
// begin uc_side := second_side [ pos ] ;
11871: LD_ADDR_OWVAR 20
11875: PUSH
11876: LD_EXP 46
11880: PUSH
11881: LD_VAR 0 1
11885: ARRAY
11886: ST_TO_ADDR
// uc_nation := Side_Nations [ positions [ pos ] ] ;
11887: LD_ADDR_OWVAR 21
11891: PUSH
11892: LD_EXP 44
11896: PUSH
11897: LD_EXP 39
11901: PUSH
11902: LD_VAR 0 1
11906: ARRAY
11907: ARRAY
11908: ST_TO_ADDR
// end else
11909: GO 11931
// begin uc_side := second_side ;
11911: LD_ADDR_OWVAR 20
11915: PUSH
11916: LD_EXP 46
11920: ST_TO_ADDR
// uc_nation := third_nation ;
11921: LD_ADDR_OWVAR 21
11925: PUSH
11926: LD_EXP 47
11930: ST_TO_ADDR
// end ; PrepareHuman ( 0 , 0 , initial_level + 1 ) ;
11931: LD_INT 0
11933: PPUSH
11934: LD_INT 0
11936: PPUSH
11937: LD_EXP 29
11941: PUSH
11942: LD_INT 1
11944: PLUS
11945: PPUSH
11946: CALL_OW 380
// hc_class := class_soldier ;
11950: LD_ADDR_OWVAR 28
11954: PUSH
11955: LD_INT 1
11957: ST_TO_ADDR
// hum := CreateHuman ;
11958: LD_ADDR_VAR 0 3
11962: PUSH
11963: CALL_OW 44
11967: ST_TO_ADDR
// if pos = 1 then
11968: LD_VAR 0 1
11972: PUSH
11973: LD_INT 1
11975: EQUAL
11976: IFFALSE 12019
// begin PlaceUnitArea ( hum , arr1 [ 1 ] , true ) ;
11978: LD_VAR 0 3
11982: PPUSH
11983: LD_LOC 14
11987: PUSH
11988: LD_INT 1
11990: ARRAY
11991: PPUSH
11992: LD_INT 1
11994: PPUSH
11995: CALL_OW 49
// arr1 := delete ( arr1 , 1 ) ;
11999: LD_ADDR_LOC 14
12003: PUSH
12004: LD_LOC 14
12008: PPUSH
12009: LD_INT 1
12011: PPUSH
12012: CALL_OW 3
12016: ST_TO_ADDR
// end else
12017: GO 12058
// begin PlaceUnitArea ( hum , arr2 [ 1 ] , true ) ;
12019: LD_VAR 0 3
12023: PPUSH
12024: LD_LOC 15
12028: PUSH
12029: LD_INT 1
12031: ARRAY
12032: PPUSH
12033: LD_INT 1
12035: PPUSH
12036: CALL_OW 49
// arr2 := delete ( arr2 , 1 ) ;
12040: LD_ADDR_LOC 15
12044: PUSH
12045: LD_LOC 15
12049: PPUSH
12050: LD_INT 1
12052: PPUSH
12053: CALL_OW 3
12057: ST_TO_ADDR
// end ; repeat wait ( 0 0$1 ) until IsPlaced ( hum ) ;
12058: LD_INT 35
12060: PPUSH
12061: CALL_OW 67
12065: LD_VAR 0 3
12069: PPUSH
12070: CALL_OW 305
12074: IFFALSE 12058
// if def_people_loyality then
12076: LD_EXP 12
12080: IFFALSE 12140
// if pos = 1 then
12082: LD_VAR 0 1
12086: PUSH
12087: LD_INT 1
12089: EQUAL
12090: IFFALSE 12110
// free1 := free1 ^ hum else
12092: LD_ADDR_LOC 10
12096: PUSH
12097: LD_LOC 10
12101: PUSH
12102: LD_VAR 0 3
12106: ADD
12107: ST_TO_ADDR
12108: GO 12138
// if pos = 2 then
12110: LD_VAR 0 1
12114: PUSH
12115: LD_INT 2
12117: EQUAL
12118: IFFALSE 12138
// free2 := free2 ^ hum else
12120: LD_ADDR_LOC 11
12124: PUSH
12125: LD_LOC 11
12129: PUSH
12130: LD_VAR 0 3
12134: ADD
12135: ST_TO_ADDR
12136: GO 12138
// else
12138: GO 12156
// free := free ^ hum ;
12140: LD_ADDR_LOC 9
12144: PUSH
12145: LD_LOC 9
12149: PUSH
12150: LD_VAR 0 3
12154: ADD
12155: ST_TO_ADDR
// end ;
12156: LD_VAR 0 2
12160: RET
// every 0 0$0.5 trigger new1 do var d ;
12161: LD_LOC 12
12165: IFFALSE 12198
12167: GO 12169
12169: DISABLE
12170: LD_INT 0
12172: PPUSH
// begin enable ;
12173: ENABLE
// new1 := 0 ;
12174: LD_ADDR_LOC 12
12178: PUSH
12179: LD_INT 0
12181: ST_TO_ADDR
// wait ( d ) ;
12182: LD_VAR 0 1
12186: PPUSH
12187: CALL_OW 67
// new_arrival ( 1 ) ;
12191: LD_INT 1
12193: PPUSH
12194: CALL 11861 0 1
// end ;
12198: PPOPN 1
12200: END
// every 0 0$0.5 trigger new2 do var d ;
12201: LD_LOC 13
12205: IFFALSE 12238
12207: GO 12209
12209: DISABLE
12210: LD_INT 0
12212: PPUSH
// begin enable ;
12213: ENABLE
// new2 := 0 ;
12214: LD_ADDR_LOC 13
12218: PUSH
12219: LD_INT 0
12221: ST_TO_ADDR
// wait ( d ) ;
12222: LD_VAR 0 1
12226: PPUSH
12227: CALL_OW 67
// new_arrival ( 2 ) ;
12231: LD_INT 2
12233: PPUSH
12234: CALL 11861 0 1
// end ;
12238: PPOPN 1
12240: END
// function check_one_side ( un , side ) ; begin
12241: LD_INT 0
12243: PPUSH
// if FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , side ] , [ f_dist , un , 3 ] ] ) then
12244: LD_INT 21
12246: PUSH
12247: LD_INT 1
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PUSH
12254: LD_INT 22
12256: PUSH
12257: LD_VAR 0 2
12261: PUSH
12262: EMPTY
12263: LIST
12264: LIST
12265: PUSH
12266: LD_INT 91
12268: PUSH
12269: LD_VAR 0 1
12273: PUSH
12274: LD_INT 3
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: LIST
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: LIST
12286: PPUSH
12287: CALL_OW 69
12291: IFFALSE 12305
// result := side else
12293: LD_ADDR_VAR 0 3
12297: PUSH
12298: LD_VAR 0 2
12302: ST_TO_ADDR
12303: GO 12313
// result := 0 ;
12305: LD_ADDR_VAR 0 3
12309: PUSH
12310: LD_INT 0
12312: ST_TO_ADDR
// end ;
12313: LD_VAR 0 3
12317: RET
// function check_two_sides ( un , side1 , side2 ) ; var un1 , s1 , s2 ; begin
12318: LD_INT 0
12320: PPUSH
12321: PPUSH
12322: PPUSH
12323: PPUSH
// s1 := 0 ;
12324: LD_ADDR_VAR 0 6
12328: PUSH
12329: LD_INT 0
12331: ST_TO_ADDR
// s2 := 0 ;
12332: LD_ADDR_VAR 0 7
12336: PUSH
12337: LD_INT 0
12339: ST_TO_ADDR
// for un1 in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_dist , un , 3 ] ] ) do
12340: LD_ADDR_VAR 0 5
12344: PUSH
12345: LD_INT 21
12347: PUSH
12348: LD_INT 1
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 91
12357: PUSH
12358: LD_VAR 0 1
12362: PUSH
12363: LD_INT 3
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: LIST
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PPUSH
12375: CALL_OW 69
12379: PUSH
12380: FOR_IN
12381: IFFALSE 12449
// begin if GetSide ( un1 ) = side1 then
12383: LD_VAR 0 5
12387: PPUSH
12388: CALL_OW 255
12392: PUSH
12393: LD_VAR 0 2
12397: EQUAL
12398: IFFALSE 12416
// s1 := s1 + 1 else
12400: LD_ADDR_VAR 0 6
12404: PUSH
12405: LD_VAR 0 6
12409: PUSH
12410: LD_INT 1
12412: PLUS
12413: ST_TO_ADDR
12414: GO 12447
// if GetSide ( un1 ) = side2 then
12416: LD_VAR 0 5
12420: PPUSH
12421: CALL_OW 255
12425: PUSH
12426: LD_VAR 0 3
12430: EQUAL
12431: IFFALSE 12447
// s2 := s2 + 1 ;
12433: LD_ADDR_VAR 0 7
12437: PUSH
12438: LD_VAR 0 7
12442: PUSH
12443: LD_INT 1
12445: PLUS
12446: ST_TO_ADDR
// end ;
12447: GO 12380
12449: POP
12450: POP
// if s1 = s2 then
12451: LD_VAR 0 6
12455: PUSH
12456: LD_VAR 0 7
12460: EQUAL
12461: IFFALSE 12473
// result := 0 else
12463: LD_ADDR_VAR 0 4
12467: PUSH
12468: LD_INT 0
12470: ST_TO_ADDR
12471: GO 12503
// if s1 > s2 then
12473: LD_VAR 0 6
12477: PUSH
12478: LD_VAR 0 7
12482: GREATER
12483: IFFALSE 12495
// result := 1 else
12485: LD_ADDR_VAR 0 4
12489: PUSH
12490: LD_INT 1
12492: ST_TO_ADDR
12493: GO 12503
// result := 2 ;
12495: LD_ADDR_VAR 0 4
12499: PUSH
12500: LD_INT 2
12502: ST_TO_ADDR
// end ;
12503: LD_VAR 0 4
12507: RET
// every 0 0$2 do var un ;
12508: GO 12510
12510: DISABLE
12511: LD_INT 0
12513: PPUSH
// begin if def_people_loyality then
12514: LD_EXP 12
12518: IFFALSE 12897
// if not fog_info then
12520: LD_EXP 35
12524: NOT
12525: IFFALSE 12713
// begin if your_side then
12527: LD_OWVAR 2
12531: IFFALSE 12711
// if side_positions [ your_side ] = 1 then
12533: LD_EXP 43
12537: PUSH
12538: LD_OWVAR 2
12542: ARRAY
12543: PUSH
12544: LD_INT 1
12546: EQUAL
12547: IFFALSE 12623
// begin un := UnitFilter ( free1 diff seenby1 , [ f_see , your_side ] ) ;
12549: LD_ADDR_VAR 0 1
12553: PUSH
12554: LD_LOC 10
12558: PUSH
12559: LD_LOC 16
12563: DIFF
12564: PPUSH
12565: LD_INT 101
12567: PUSH
12568: LD_OWVAR 2
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PPUSH
12577: CALL_OW 72
12581: ST_TO_ADDR
// if un then
12582: LD_VAR 0 1
12586: IFFALSE 12621
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12588: LD_VAR 0 1
12592: PUSH
12593: LD_INT 1
12595: ARRAY
12596: PPUSH
12597: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12601: LD_ADDR_LOC 16
12605: PUSH
12606: LD_LOC 16
12610: PUSH
12611: LD_VAR 0 1
12615: PUSH
12616: LD_INT 1
12618: ARRAY
12619: ADD
12620: ST_TO_ADDR
// end ; end else
12621: GO 12711
// if side_positions [ your_side ] = 2 then
12623: LD_EXP 43
12627: PUSH
12628: LD_OWVAR 2
12632: ARRAY
12633: PUSH
12634: LD_INT 2
12636: EQUAL
12637: IFFALSE 12711
// begin un := UnitFilter ( free2 diff seenby2 , [ f_see , your_side ] ) ;
12639: LD_ADDR_VAR 0 1
12643: PUSH
12644: LD_LOC 11
12648: PUSH
12649: LD_LOC 17
12653: DIFF
12654: PPUSH
12655: LD_INT 101
12657: PUSH
12658: LD_OWVAR 2
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PPUSH
12667: CALL_OW 72
12671: ST_TO_ADDR
// if un then
12672: LD_VAR 0 1
12676: IFFALSE 12711
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12678: LD_VAR 0 1
12682: PUSH
12683: LD_INT 1
12685: ARRAY
12686: PPUSH
12687: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
12691: LD_ADDR_LOC 17
12695: PUSH
12696: LD_LOC 17
12700: PUSH
12701: LD_VAR 0 1
12705: PUSH
12706: LD_INT 1
12708: ARRAY
12709: ADD
12710: ST_TO_ADDR
// end ; end ; end else
12711: GO 12897
// begin if your_side then
12713: LD_OWVAR 2
12717: IFFALSE 12897
// if side_positions [ your_side ] = 1 then
12719: LD_EXP 43
12723: PUSH
12724: LD_OWVAR 2
12728: ARRAY
12729: PUSH
12730: LD_INT 1
12732: EQUAL
12733: IFFALSE 12809
// begin un := UnitFilter ( free diff seenby1 , [ f_see , your_side ] ) ;
12735: LD_ADDR_VAR 0 1
12739: PUSH
12740: LD_LOC 9
12744: PUSH
12745: LD_LOC 16
12749: DIFF
12750: PPUSH
12751: LD_INT 101
12753: PUSH
12754: LD_OWVAR 2
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PPUSH
12763: CALL_OW 72
12767: ST_TO_ADDR
// if un then
12768: LD_VAR 0 1
12772: IFFALSE 12807
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12774: LD_VAR 0 1
12778: PUSH
12779: LD_INT 1
12781: ARRAY
12782: PPUSH
12783: CALL_OW 87
// seenby1 := seenby1 ^ un [ 1 ] ;
12787: LD_ADDR_LOC 16
12791: PUSH
12792: LD_LOC 16
12796: PUSH
12797: LD_VAR 0 1
12801: PUSH
12802: LD_INT 1
12804: ARRAY
12805: ADD
12806: ST_TO_ADDR
// end ; end else
12807: GO 12897
// if side_positions [ your_side ] = 2 then
12809: LD_EXP 43
12813: PUSH
12814: LD_OWVAR 2
12818: ARRAY
12819: PUSH
12820: LD_INT 2
12822: EQUAL
12823: IFFALSE 12897
// begin un := UnitFilter ( free diff seenby2 , [ f_see , your_side ] ) ;
12825: LD_ADDR_VAR 0 1
12829: PUSH
12830: LD_LOC 9
12834: PUSH
12835: LD_LOC 17
12839: DIFF
12840: PPUSH
12841: LD_INT 101
12843: PUSH
12844: LD_OWVAR 2
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: PPUSH
12853: CALL_OW 72
12857: ST_TO_ADDR
// if un then
12858: LD_VAR 0 1
12862: IFFALSE 12897
// begin CenterNowOnUnits ( un [ 1 ] ) ;
12864: LD_VAR 0 1
12868: PUSH
12869: LD_INT 1
12871: ARRAY
12872: PPUSH
12873: CALL_OW 87
// seenby2 := seenby2 ^ un [ 1 ] ;
12877: LD_ADDR_LOC 17
12881: PUSH
12882: LD_LOC 17
12886: PUSH
12887: LD_VAR 0 1
12891: PUSH
12892: LD_INT 1
12894: ARRAY
12895: ADD
12896: ST_TO_ADDR
// end ; end ; end ; enable ;
12897: ENABLE
// end ;
12898: PPOPN 1
12900: END
// every 0 0$0.5 do var un , s ;
12901: GO 12903
12903: DISABLE
12904: LD_INT 0
12906: PPUSH
12907: PPUSH
// begin if def_people_loyality then
12908: LD_EXP 12
12912: IFFALSE 13118
// begin for un in free1 do
12914: LD_ADDR_VAR 0 1
12918: PUSH
12919: LD_LOC 10
12923: PUSH
12924: FOR_IN
12925: IFFALSE 13013
// if not IsLive ( un ) then
12927: LD_VAR 0 1
12931: PPUSH
12932: CALL_OW 300
12936: NOT
12937: IFFALSE 12957
// free1 := free1 diff un else
12939: LD_ADDR_LOC 10
12943: PUSH
12944: LD_LOC 10
12948: PUSH
12949: LD_VAR 0 1
12953: DIFF
12954: ST_TO_ADDR
12955: GO 13011
// if check_one_side ( un , positions [ 1 ] ) then
12957: LD_VAR 0 1
12961: PPUSH
12962: LD_EXP 39
12966: PUSH
12967: LD_INT 1
12969: ARRAY
12970: PPUSH
12971: CALL 12241 0 2
12975: IFFALSE 13011
// begin SetSide ( un , positions [ 1 ] ) ;
12977: LD_VAR 0 1
12981: PPUSH
12982: LD_EXP 39
12986: PUSH
12987: LD_INT 1
12989: ARRAY
12990: PPUSH
12991: CALL_OW 235
// free1 := free1 diff un ;
12995: LD_ADDR_LOC 10
12999: PUSH
13000: LD_LOC 10
13004: PUSH
13005: LD_VAR 0 1
13009: DIFF
13010: ST_TO_ADDR
// end ;
13011: GO 12924
13013: POP
13014: POP
// for un in free2 do
13015: LD_ADDR_VAR 0 1
13019: PUSH
13020: LD_LOC 11
13024: PUSH
13025: FOR_IN
13026: IFFALSE 13114
// if not IsLive ( un ) then
13028: LD_VAR 0 1
13032: PPUSH
13033: CALL_OW 300
13037: NOT
13038: IFFALSE 13058
// free2 := free2 diff un else
13040: LD_ADDR_LOC 11
13044: PUSH
13045: LD_LOC 11
13049: PUSH
13050: LD_VAR 0 1
13054: DIFF
13055: ST_TO_ADDR
13056: GO 13112
// if check_one_side ( un , positions [ 2 ] ) then
13058: LD_VAR 0 1
13062: PPUSH
13063: LD_EXP 39
13067: PUSH
13068: LD_INT 2
13070: ARRAY
13071: PPUSH
13072: CALL 12241 0 2
13076: IFFALSE 13112
// begin SetSide ( un , positions [ 2 ] ) ;
13078: LD_VAR 0 1
13082: PPUSH
13083: LD_EXP 39
13087: PUSH
13088: LD_INT 2
13090: ARRAY
13091: PPUSH
13092: CALL_OW 235
// free2 := free2 diff un ;
13096: LD_ADDR_LOC 11
13100: PUSH
13101: LD_LOC 11
13105: PUSH
13106: LD_VAR 0 1
13110: DIFF
13111: ST_TO_ADDR
// end ;
13112: GO 13025
13114: POP
13115: POP
// end else
13116: GO 13240
// begin for un in free do
13118: LD_ADDR_VAR 0 1
13122: PUSH
13123: LD_LOC 9
13127: PUSH
13128: FOR_IN
13129: IFFALSE 13238
// if not IsLive ( un ) then
13131: LD_VAR 0 1
13135: PPUSH
13136: CALL_OW 300
13140: NOT
13141: IFFALSE 13161
// free := free diff un else
13143: LD_ADDR_LOC 9
13147: PUSH
13148: LD_LOC 9
13152: PUSH
13153: LD_VAR 0 1
13157: DIFF
13158: ST_TO_ADDR
13159: GO 13236
// begin s := check_two_sides ( un , positions [ 1 ] , positions [ 2 ] ) ;
13161: LD_ADDR_VAR 0 2
13165: PUSH
13166: LD_VAR 0 1
13170: PPUSH
13171: LD_EXP 39
13175: PUSH
13176: LD_INT 1
13178: ARRAY
13179: PPUSH
13180: LD_EXP 39
13184: PUSH
13185: LD_INT 2
13187: ARRAY
13188: PPUSH
13189: CALL 12318 0 3
13193: ST_TO_ADDR
// if s then
13194: LD_VAR 0 2
13198: IFFALSE 13236
// begin SetSide ( un , positions [ s ] ) ;
13200: LD_VAR 0 1
13204: PPUSH
13205: LD_EXP 39
13209: PUSH
13210: LD_VAR 0 2
13214: ARRAY
13215: PPUSH
13216: CALL_OW 235
// free := free diff un ;
13220: LD_ADDR_LOC 9
13224: PUSH
13225: LD_LOC 9
13229: PUSH
13230: LD_VAR 0 1
13234: DIFF
13235: ST_TO_ADDR
// end ; end ;
13236: GO 13128
13238: POP
13239: POP
// end ; enable ;
13240: ENABLE
// end ; end_of_file
13241: PPOPN 2
13243: END
// export Game_Type , def_game_rules ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
13244: LD_INT 0
13246: PPUSH
13247: PPUSH
// if ( not IAmSpec ) then
13248: CALL_OW 531
13252: NOT
13253: IFFALSE 13269
// Result := Limits_Info ^  ;
13255: LD_ADDR_VAR 0 1
13259: PUSH
13260: LD_LOC 25
13264: PUSH
13265: LD_STRING 
13267: ADD
13268: ST_TO_ADDR
// for i := 1 to 8 do
13269: LD_ADDR_VAR 0 2
13273: PUSH
13274: DOUBLE
13275: LD_INT 1
13277: DEC
13278: ST_TO_ADDR
13279: LD_INT 8
13281: PUSH
13282: FOR_TO
13283: IFFALSE 13328
// if Cheaters [ i ] then
13285: LD_LOC 26
13289: PUSH
13290: LD_VAR 0 2
13294: ARRAY
13295: IFFALSE 13326
// Result := Result ^ [ #Cheater , i , i ] ;
13297: LD_ADDR_VAR 0 1
13301: PUSH
13302: LD_VAR 0 1
13306: PUSH
13307: LD_STRING #Cheater
13309: PUSH
13310: LD_VAR 0 2
13314: PUSH
13315: LD_VAR 0 2
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: LIST
13324: ADD
13325: ST_TO_ADDR
13326: GO 13282
13328: POP
13329: POP
// end ;
13330: LD_VAR 0 1
13334: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
13335: LD_INT 0
13337: PPUSH
13338: PPUSH
13339: PPUSH
13340: PPUSH
13341: PPUSH
// case Game_Type of 10 :
13342: LD_EXP 64
13346: PUSH
13347: LD_INT 10
13349: DOUBLE
13350: EQUAL
13351: IFTRUE 13355
13353: GO 13366
13355: POP
// def_game_rules := 1 ; 11 :
13356: LD_ADDR_EXP 65
13360: PUSH
13361: LD_INT 1
13363: ST_TO_ADDR
13364: GO 13386
13366: LD_INT 11
13368: DOUBLE
13369: EQUAL
13370: IFTRUE 13374
13372: GO 13385
13374: POP
// def_game_rules := 3 ; end ;
13375: LD_ADDR_EXP 65
13379: PUSH
13380: LD_INT 3
13382: ST_TO_ADDR
13383: GO 13386
13385: POP
// case def_game_rules of 0 :
13386: LD_EXP 65
13390: PUSH
13391: LD_INT 0
13393: DOUBLE
13394: EQUAL
13395: IFTRUE 13399
13397: GO 13404
13399: POP
// exit ; 1 :
13400: GO 14012
13402: GO 13912
13404: LD_INT 1
13406: DOUBLE
13407: EQUAL
13408: IFTRUE 13412
13410: GO 13644
13412: POP
// begin def_main_base = 1 ;
13413: LD_ADDR_EXP 1
13417: PUSH
13418: LD_INT 1
13420: ST_TO_ADDR
// def_secondary_base = 0 ;
13421: LD_ADDR_EXP 2
13425: PUSH
13426: LD_INT 0
13428: ST_TO_ADDR
// def_defence_level = 1 ;
13429: LD_ADDR_EXP 3
13433: PUSH
13434: LD_INT 1
13436: ST_TO_ADDR
// def_amount_of_people = 2 ;
13437: LD_ADDR_EXP 4
13441: PUSH
13442: LD_INT 2
13444: ST_TO_ADDR
// def_initial_level = 1 ;
13445: LD_ADDR_EXP 5
13449: PUSH
13450: LD_INT 1
13452: ST_TO_ADDR
// def_main_deposits = 2 ;
13453: LD_ADDR_EXP 6
13457: PUSH
13458: LD_INT 2
13460: ST_TO_ADDR
// def_secondary_deposits = 1 ;
13461: LD_ADDR_EXP 7
13465: PUSH
13466: LD_INT 1
13468: ST_TO_ADDR
// def_siberite_detection = 1 ;
13469: LD_ADDR_EXP 8
13473: PUSH
13474: LD_INT 1
13476: ST_TO_ADDR
// def_starting_resources = 2 ;
13477: LD_ADDR_EXP 9
13481: PUSH
13482: LD_INT 2
13484: ST_TO_ADDR
// def_shipments_density = 1 ;
13485: LD_ADDR_EXP 10
13489: PUSH
13490: LD_INT 1
13492: ST_TO_ADDR
// def_people_arrivals = 0 ;
13493: LD_ADDR_EXP 11
13497: PUSH
13498: LD_INT 0
13500: ST_TO_ADDR
// def_people_loyality = 0 ;
13501: LD_ADDR_EXP 12
13505: PUSH
13506: LD_INT 0
13508: ST_TO_ADDR
// def_people_info = 0 ;
13509: LD_ADDR_EXP 13
13513: PUSH
13514: LD_INT 0
13516: ST_TO_ADDR
// def_morale_flags = 1 ;
13517: LD_ADDR_EXP 14
13521: PUSH
13522: LD_INT 1
13524: ST_TO_ADDR
// def_siberite_bomb = 0 ;
13525: LD_ADDR_EXP 15
13529: PUSH
13530: LD_INT 0
13532: ST_TO_ADDR
// def_builduptime = 2 ;
13533: LD_ADDR_EXP 17
13537: PUSH
13538: LD_INT 2
13540: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
13541: LD_ADDR_VAR 0 2
13545: PUSH
13546: EMPTY
13547: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13548: LD_ADDR_VAR 0 3
13552: PUSH
13553: EMPTY
13554: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13555: LD_ADDR_LOC 20
13559: PUSH
13560: EMPTY
13561: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13562: LD_ADDR_LOC 21
13566: PUSH
13567: EMPTY
13568: ST_TO_ADDR
// Banned_Controls := [ ] ;
13569: LD_ADDR_LOC 22
13573: PUSH
13574: EMPTY
13575: ST_TO_ADDR
// Banned_Engines := [ ] ;
13576: LD_ADDR_LOC 23
13580: PUSH
13581: EMPTY
13582: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13583: LD_ADDR_LOC 18
13587: PUSH
13588: LD_INT 37
13590: PUSH
13591: EMPTY
13592: LIST
13593: PUSH
13594: LD_INT 4
13596: PUSH
13597: LD_INT 5
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 31
13606: PUSH
13607: LD_INT 32
13609: PUSH
13610: LD_INT 33
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: LIST
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: LIST
13622: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
13623: LD_ADDR_LOC 19
13627: PUSH
13628: LD_INT 2
13630: PUSH
13631: LD_INT 2
13633: PUSH
13634: LD_INT 4
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: LIST
13641: ST_TO_ADDR
// end ; 3 :
13642: GO 13912
13644: LD_INT 3
13646: DOUBLE
13647: EQUAL
13648: IFTRUE 13652
13650: GO 13911
13652: POP
// begin def_main_base = 1 ;
13653: LD_ADDR_EXP 1
13657: PUSH
13658: LD_INT 1
13660: ST_TO_ADDR
// def_secondary_base = 0 ;
13661: LD_ADDR_EXP 2
13665: PUSH
13666: LD_INT 0
13668: ST_TO_ADDR
// def_defence_level = 0 ;
13669: LD_ADDR_EXP 3
13673: PUSH
13674: LD_INT 0
13676: ST_TO_ADDR
// def_amount_of_people = 2 ;
13677: LD_ADDR_EXP 4
13681: PUSH
13682: LD_INT 2
13684: ST_TO_ADDR
// def_initial_level = 3 ;
13685: LD_ADDR_EXP 5
13689: PUSH
13690: LD_INT 3
13692: ST_TO_ADDR
// def_main_deposits = 2 ;
13693: LD_ADDR_EXP 6
13697: PUSH
13698: LD_INT 2
13700: ST_TO_ADDR
// def_secondary_deposits = 1 ;
13701: LD_ADDR_EXP 7
13705: PUSH
13706: LD_INT 1
13708: ST_TO_ADDR
// def_siberite_detection = 1 ;
13709: LD_ADDR_EXP 8
13713: PUSH
13714: LD_INT 1
13716: ST_TO_ADDR
// def_starting_resources = 3 ;
13717: LD_ADDR_EXP 9
13721: PUSH
13722: LD_INT 3
13724: ST_TO_ADDR
// def_shipments_density = 1 ;
13725: LD_ADDR_EXP 10
13729: PUSH
13730: LD_INT 1
13732: ST_TO_ADDR
// def_people_arrivals = 0 ;
13733: LD_ADDR_EXP 11
13737: PUSH
13738: LD_INT 0
13740: ST_TO_ADDR
// def_people_loyality = 0 ;
13741: LD_ADDR_EXP 12
13745: PUSH
13746: LD_INT 0
13748: ST_TO_ADDR
// def_people_info = 0 ;
13749: LD_ADDR_EXP 13
13753: PUSH
13754: LD_INT 0
13756: ST_TO_ADDR
// def_morale_flags = 0 ;
13757: LD_ADDR_EXP 14
13761: PUSH
13762: LD_INT 0
13764: ST_TO_ADDR
// def_siberite_bomb = 0 ;
13765: LD_ADDR_EXP 15
13769: PUSH
13770: LD_INT 0
13772: ST_TO_ADDR
// def_builduptime = 1 ;
13773: LD_ADDR_EXP 17
13777: PUSH
13778: LD_INT 1
13780: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
13781: LD_ADDR_VAR 0 2
13785: PUSH
13786: LD_INT 23
13788: PUSH
13789: EMPTY
13790: LIST
13791: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
13792: LD_ADDR_VAR 0 3
13796: PUSH
13797: LD_INT 2
13799: PUSH
13800: LD_INT 37
13802: PUSH
13803: LD_INT 32
13805: PUSH
13806: LD_INT 33
13808: PUSH
13809: LD_INT 36
13811: PUSH
13812: LD_INT 16
13814: PUSH
13815: LD_INT 23
13817: PUSH
13818: LD_INT 21
13820: PUSH
13821: LD_INT 18
13823: PUSH
13824: LD_INT 22
13826: PUSH
13827: LD_INT 20
13829: PUSH
13830: LD_INT 19
13832: PUSH
13833: LD_INT 25
13835: PUSH
13836: LD_INT 17
13838: PUSH
13839: LD_INT 24
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13859: LD_ADDR_LOC 20
13863: PUSH
13864: EMPTY
13865: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13866: LD_ADDR_LOC 21
13870: PUSH
13871: EMPTY
13872: ST_TO_ADDR
// Banned_Controls := [ ] ;
13873: LD_ADDR_LOC 22
13877: PUSH
13878: EMPTY
13879: ST_TO_ADDR
// Banned_Engines := [ ] ;
13880: LD_ADDR_LOC 23
13884: PUSH
13885: EMPTY
13886: ST_TO_ADDR
// Restricted_Builds := [ ] ;
13887: LD_ADDR_LOC 18
13891: PUSH
13892: EMPTY
13893: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
13894: LD_ADDR_LOC 19
13898: PUSH
13899: EMPTY
13900: ST_TO_ADDR
// No_Mechs := true ;
13901: LD_ADDR_EXP 66
13905: PUSH
13906: LD_INT 1
13908: ST_TO_ADDR
// end ; end ;
13909: GO 13912
13911: POP
// for i := 1 to 8 do
13912: LD_ADDR_VAR 0 4
13916: PUSH
13917: DOUBLE
13918: LD_INT 1
13920: DEC
13921: ST_TO_ADDR
13922: LD_INT 8
13924: PUSH
13925: FOR_TO
13926: IFFALSE 14010
// if Side_Positions [ i ] then
13928: LD_EXP 43
13932: PUSH
13933: LD_VAR 0 4
13937: ARRAY
13938: IFFALSE 14008
// begin for j in Unavailable_Techs do
13940: LD_ADDR_VAR 0 5
13944: PUSH
13945: LD_VAR 0 2
13949: PUSH
13950: FOR_IN
13951: IFFALSE 13972
// SetTech ( j , i , 0 ) ;
13953: LD_VAR 0 5
13957: PPUSH
13958: LD_VAR 0 4
13962: PPUSH
13963: LD_INT 0
13965: PPUSH
13966: CALL_OW 322
13970: GO 13950
13972: POP
13973: POP
// for j in Unavailable_Builds do
13974: LD_ADDR_VAR 0 5
13978: PUSH
13979: LD_VAR 0 3
13983: PUSH
13984: FOR_IN
13985: IFFALSE 14006
// SetRestrict ( j , i , 0 ) ;
13987: LD_VAR 0 5
13991: PPUSH
13992: LD_VAR 0 4
13996: PPUSH
13997: LD_INT 0
13999: PPUSH
14000: CALL_OW 324
14004: GO 13984
14006: POP
14007: POP
// end ;
14008: GO 13925
14010: POP
14011: POP
// end ;
14012: LD_VAR 0 1
14016: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
14017: LD_INT 0
14019: PPUSH
14020: PPUSH
14021: PPUSH
14022: PPUSH
14023: PPUSH
14024: PPUSH
14025: PPUSH
// for i := 1 to Restricted_Builds do
14026: LD_ADDR_VAR 0 2
14030: PUSH
14031: DOUBLE
14032: LD_INT 1
14034: DEC
14035: ST_TO_ADDR
14036: LD_LOC 18
14040: PUSH
14041: FOR_TO
14042: IFFALSE 14352
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
14044: LD_LOC 18
14048: PUSH
14049: LD_VAR 0 2
14053: ARRAY
14054: PUSH
14055: LD_INT 1
14057: ARRAY
14058: PUSH
14059: LD_INT 31
14061: DOUBLE
14062: EQUAL
14063: IFTRUE 14079
14065: LD_INT 32
14067: DOUBLE
14068: EQUAL
14069: IFTRUE 14079
14071: LD_INT 33
14073: DOUBLE
14074: EQUAL
14075: IFTRUE 14079
14077: GO 14090
14079: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
14080: LD_ADDR_VAR 0 6
14084: PUSH
14085: LD_STRING #Turrets
14087: ST_TO_ADDR
14088: GO 14135
14090: LD_INT 4
14092: DOUBLE
14093: EQUAL
14094: IFTRUE 14104
14096: LD_INT 5
14098: DOUBLE
14099: EQUAL
14100: IFTRUE 14104
14102: GO 14115
14104: POP
// btype := #Armouries ; b_Behemoth :
14105: LD_ADDR_VAR 0 6
14109: PUSH
14110: LD_STRING #Armouries
14112: ST_TO_ADDR
14113: GO 14135
14115: LD_INT 37
14117: DOUBLE
14118: EQUAL
14119: IFTRUE 14123
14121: GO 14134
14123: POP
// btype := #Behemoths ; end ;
14124: LD_ADDR_VAR 0 6
14128: PUSH
14129: LD_STRING #Behemoths
14131: ST_TO_ADDR
14132: GO 14135
14134: POP
// list := [ ] ;
14135: LD_ADDR_VAR 0 7
14139: PUSH
14140: EMPTY
14141: ST_TO_ADDR
// for j := 1 to 8 do
14142: LD_ADDR_VAR 0 3
14146: PUSH
14147: DOUBLE
14148: LD_INT 1
14150: DEC
14151: ST_TO_ADDR
14152: LD_INT 8
14154: PUSH
14155: FOR_TO
14156: IFFALSE 14249
// if Side_Positions [ j ] then
14158: LD_EXP 43
14162: PUSH
14163: LD_VAR 0 3
14167: ARRAY
14168: IFFALSE 14247
// begin amount := 0 ;
14170: LD_ADDR_VAR 0 5
14174: PUSH
14175: LD_INT 0
14177: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
14178: LD_ADDR_VAR 0 4
14182: PUSH
14183: LD_LOC 18
14187: PUSH
14188: LD_VAR 0 2
14192: ARRAY
14193: PUSH
14194: FOR_IN
14195: IFFALSE 14243
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
14197: LD_ADDR_VAR 0 5
14201: PUSH
14202: LD_VAR 0 5
14206: PUSH
14207: LD_INT 22
14209: PUSH
14210: LD_VAR 0 3
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: LD_INT 30
14221: PUSH
14222: LD_VAR 0 4
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PPUSH
14235: CALL_OW 69
14239: PLUS
14240: ST_TO_ADDR
14241: GO 14194
14243: POP
14244: POP
// break ;
14245: GO 14249
// end ;
14247: GO 14155
14249: POP
14250: POP
// list := [ ] ;
14251: LD_ADDR_VAR 0 7
14255: PUSH
14256: EMPTY
14257: ST_TO_ADDR
// for j := 1 to 8 do
14258: LD_ADDR_VAR 0 3
14262: PUSH
14263: DOUBLE
14264: LD_INT 1
14266: DEC
14267: ST_TO_ADDR
14268: LD_INT 8
14270: PUSH
14271: FOR_TO
14272: IFFALSE 14292
// list := list ^ amount ;
14274: LD_ADDR_VAR 0 7
14278: PUSH
14279: LD_VAR 0 7
14283: PUSH
14284: LD_VAR 0 5
14288: ADD
14289: ST_TO_ADDR
14290: GO 14271
14292: POP
14293: POP
// Already_Built := Already_Built ^ [ list ] ;
14294: LD_ADDR_LOC 24
14298: PUSH
14299: LD_LOC 24
14303: PUSH
14304: LD_VAR 0 7
14308: PUSH
14309: EMPTY
14310: LIST
14311: ADD
14312: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
14313: LD_ADDR_LOC 25
14317: PUSH
14318: LD_LOC 25
14322: PUSH
14323: LD_VAR 0 6
14327: PUSH
14328: LD_VAR 0 5
14332: PUSH
14333: LD_LOC 19
14337: PUSH
14338: LD_VAR 0 2
14342: ARRAY
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: LIST
14348: ADD
14349: ST_TO_ADDR
// end ;
14350: GO 14041
14352: POP
14353: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14354: LD_ADDR_LOC 26
14358: PUSH
14359: LD_INT 0
14361: PUSH
14362: LD_INT 0
14364: PUSH
14365: LD_INT 0
14367: PUSH
14368: LD_INT 0
14370: PUSH
14371: LD_INT 0
14373: PUSH
14374: LD_INT 0
14376: PUSH
14377: LD_INT 0
14379: PUSH
14380: LD_INT 0
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: ST_TO_ADDR
// if Limits_Info then
14393: LD_LOC 25
14397: IFFALSE 14413
// Limits_Info := #Limits ^ Limits_Info ;
14399: LD_ADDR_LOC 25
14403: PUSH
14404: LD_STRING #Limits
14406: PUSH
14407: LD_LOC 25
14411: ADD
14412: ST_TO_ADDR
// end ;
14413: LD_VAR 0 1
14417: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
14418: LD_INT 0
14420: PPUSH
14421: PPUSH
14422: PPUSH
14423: PPUSH
// for i := 1 to Restricted_Builds do
14424: LD_ADDR_VAR 0 7
14428: PUSH
14429: DOUBLE
14430: LD_INT 1
14432: DEC
14433: ST_TO_ADDR
14434: LD_LOC 18
14438: PUSH
14439: FOR_TO
14440: IFFALSE 14863
// if BType in Restricted_Builds [ i ] then
14442: LD_VAR 0 2
14446: PUSH
14447: LD_LOC 18
14451: PUSH
14452: LD_VAR 0 7
14456: ARRAY
14457: IN
14458: IFFALSE 14861
// begin if old_side then
14460: LD_VAR 0 4
14464: IFFALSE 14590
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
14466: LD_LOC 24
14470: PUSH
14471: LD_VAR 0 7
14475: ARRAY
14476: PUSH
14477: LD_VAR 0 3
14481: ARRAY
14482: PUSH
14483: LD_VAR 0 5
14487: PLUS
14488: PUSH
14489: LD_LOC 19
14493: PUSH
14494: LD_VAR 0 7
14498: ARRAY
14499: GREATER
14500: IFFALSE 14526
// begin SetSide ( un , old_side ) ;
14502: LD_VAR 0 1
14506: PPUSH
14507: LD_VAR 0 4
14511: PPUSH
14512: CALL_OW 235
// count := 0 ;
14516: LD_ADDR_VAR 0 5
14520: PUSH
14521: LD_INT 0
14523: ST_TO_ADDR
// end else
14524: GO 14590
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
14526: LD_ADDR_LOC 24
14530: PUSH
14531: LD_LOC 24
14535: PPUSH
14536: LD_VAR 0 7
14540: PPUSH
14541: LD_LOC 24
14545: PUSH
14546: LD_VAR 0 7
14550: ARRAY
14551: PPUSH
14552: LD_VAR 0 4
14556: PPUSH
14557: LD_LOC 24
14561: PUSH
14562: LD_VAR 0 7
14566: ARRAY
14567: PUSH
14568: LD_VAR 0 4
14572: ARRAY
14573: PUSH
14574: LD_VAR 0 5
14578: MINUS
14579: PPUSH
14580: CALL_OW 1
14584: PPUSH
14585: CALL_OW 1
14589: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
14590: LD_ADDR_LOC 24
14594: PUSH
14595: LD_LOC 24
14599: PPUSH
14600: LD_VAR 0 7
14604: PPUSH
14605: LD_LOC 24
14609: PUSH
14610: LD_VAR 0 7
14614: ARRAY
14615: PPUSH
14616: LD_VAR 0 3
14620: PPUSH
14621: LD_LOC 24
14625: PUSH
14626: LD_VAR 0 7
14630: ARRAY
14631: PUSH
14632: LD_VAR 0 3
14636: ARRAY
14637: PUSH
14638: LD_VAR 0 5
14642: PLUS
14643: PPUSH
14644: CALL_OW 1
14648: PPUSH
14649: CALL_OW 1
14653: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
14654: LD_VAR 0 5
14658: PUSH
14659: LD_INT 0
14661: NONEQUAL
14662: PUSH
14663: LD_VAR 0 3
14667: PUSH
14668: LD_OWVAR 2
14672: EQUAL
14673: AND
14674: IFFALSE 14717
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
14676: LD_ADDR_LOC 25
14680: PUSH
14681: LD_LOC 25
14685: PPUSH
14686: LD_INT 3
14688: PUSH
14689: LD_VAR 0 7
14693: MUL
14694: PPUSH
14695: LD_LOC 24
14699: PUSH
14700: LD_VAR 0 7
14704: ARRAY
14705: PUSH
14706: LD_VAR 0 3
14710: ARRAY
14711: PPUSH
14712: CALL_OW 1
14716: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
14717: LD_LOC 24
14721: PUSH
14722: LD_VAR 0 7
14726: ARRAY
14727: PUSH
14728: LD_VAR 0 3
14732: ARRAY
14733: PUSH
14734: LD_LOC 19
14738: PUSH
14739: LD_VAR 0 7
14743: ARRAY
14744: GREATER
14745: IFFALSE 14772
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
14747: LD_ADDR_LOC 26
14751: PUSH
14752: LD_LOC 26
14756: PPUSH
14757: LD_VAR 0 3
14761: PPUSH
14762: LD_INT 1
14764: PPUSH
14765: CALL_OW 1
14769: ST_TO_ADDR
// end else
14770: GO 14859
// begin for j := 1 to Restricted_Builds do
14772: LD_ADDR_VAR 0 8
14776: PUSH
14777: DOUBLE
14778: LD_INT 1
14780: DEC
14781: ST_TO_ADDR
14782: LD_LOC 18
14786: PUSH
14787: FOR_TO
14788: IFFALSE 14832
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
14790: LD_LOC 24
14794: PUSH
14795: LD_VAR 0 8
14799: ARRAY
14800: PUSH
14801: LD_VAR 0 3
14805: ARRAY
14806: PUSH
14807: LD_LOC 19
14811: PUSH
14812: LD_VAR 0 8
14816: ARRAY
14817: GREATER
14818: IFFALSE 14830
// begin Is_Cheater := true ;
14820: LD_ADDR_VAR 0 9
14824: PUSH
14825: LD_INT 1
14827: ST_TO_ADDR
// break ;
14828: GO 14832
// end ;
14830: GO 14787
14832: POP
14833: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
14834: LD_ADDR_LOC 26
14838: PUSH
14839: LD_LOC 26
14843: PPUSH
14844: LD_VAR 0 3
14848: PPUSH
14849: LD_VAR 0 9
14853: PPUSH
14854: CALL_OW 1
14858: ST_TO_ADDR
// end ; break ;
14859: GO 14863
// end ;
14861: GO 14439
14863: POP
14864: POP
// end ;
14865: LD_VAR 0 6
14869: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
14870: LD_VAR 0 5
14874: PUSH
14875: LD_LOC 20
14879: IN
14880: PUSH
14881: LD_VAR 0 2
14885: PUSH
14886: LD_LOC 21
14890: IN
14891: OR
14892: PUSH
14893: LD_VAR 0 4
14897: PUSH
14898: LD_LOC 22
14902: IN
14903: OR
14904: PUSH
14905: LD_VAR 0 3
14909: PUSH
14910: LD_LOC 23
14914: IN
14915: OR
14916: IFFALSE 14927
// ComCancel ( factory ) ;
14918: LD_VAR 0 1
14922: PPUSH
14923: CALL_OW 127
// end ;
14927: PPOPN 5
14929: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
14930: LD_VAR 0 2
14934: PUSH
14935: LD_LOC 20
14939: IN
14940: IFFALSE 14951
// ComCancel ( building ) ;
14942: LD_VAR 0 1
14946: PPUSH
14947: CALL_OW 127
// end ; end_of_file
14951: PPOPN 2
14953: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
14954: LD_INT 0
14956: PPUSH
14957: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
14958: LD_ADDR_VAR 0 2
14962: PUSH
14963: LD_STRING #Multi1x1-Time
14965: PUSH
14966: LD_OWVAR 1
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: ST_TO_ADDR
// if WaitServerStrings then
14975: LD_EXP 68
14979: IFFALSE 14997
// AllStrings = AllStrings ^ WaitServerStrings ;
14981: LD_ADDR_VAR 0 2
14985: PUSH
14986: LD_VAR 0 2
14990: PUSH
14991: LD_EXP 68
14995: ADD
14996: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
14997: LD_INT 0
14999: PUSH
15000: LD_EXP 38
15004: PUSH
15005: LD_OWVAR 1
15009: MINUS
15010: LESSEQUAL
15011: IFFALSE 15042
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
15013: LD_ADDR_VAR 0 2
15017: PUSH
15018: LD_VAR 0 2
15022: PUSH
15023: LD_STRING #allowedsibbomb
15025: PUSH
15026: LD_EXP 38
15030: PUSH
15031: LD_OWVAR 1
15035: MINUS
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: ADD
15041: ST_TO_ADDR
// if ( ExtraStrings ) then
15042: LD_EXP 67
15046: IFFALSE 15068
// AllStrings := AllStrings ^  ^ ExtraStrings ;
15048: LD_ADDR_VAR 0 2
15052: PUSH
15053: LD_VAR 0 2
15057: PUSH
15058: LD_STRING 
15060: ADD
15061: PUSH
15062: LD_EXP 67
15066: ADD
15067: ST_TO_ADDR
// if ( LimitsStrings ) then
15068: CALL 13244 0 0
15072: IFFALSE 15094
// AllStrings := AllStrings ^  ^ LimitsStrings ;
15074: LD_ADDR_VAR 0 2
15078: PUSH
15079: LD_VAR 0 2
15083: PUSH
15084: LD_STRING 
15086: ADD
15087: PUSH
15088: CALL 13244 0 0
15092: ADD
15093: ST_TO_ADDR
// Display_Strings := AllStrings ;
15094: LD_ADDR_OWVAR 47
15098: PUSH
15099: LD_VAR 0 2
15103: ST_TO_ADDR
// end ;
15104: LD_VAR 0 1
15108: RET
// every 0 0$1 do
15109: GO 15111
15111: DISABLE
// begin ShowTimer ;
15112: CALL 14954 0 0
// enable ;
15116: ENABLE
// end ; end_of_file
15117: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
15118: LD_INT 0
15120: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
15121: LD_VAR 0 1
15125: PPUSH
15126: CALL_OW 255
15130: PUSH
15131: LD_VAR 0 4
15135: EQUAL
15136: IFFALSE 15155
// begin SetAchievement ( ACH_RAD ) ;
15138: LD_STRING ACH_RAD
15140: PPUSH
15141: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
15145: LD_STRING ACH_NL
15147: PPUSH
15148: LD_INT 1
15150: PPUSH
15151: CALL_OW 564
// end end ;
15155: LD_VAR 0 5
15159: RET
// export function SA_Win ( side ) ; begin
15160: LD_INT 0
15162: PPUSH
// case side of 1 :
15163: LD_VAR 0 1
15167: PUSH
15168: LD_INT 1
15170: DOUBLE
15171: EQUAL
15172: IFTRUE 15176
15174: GO 15189
15176: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
15177: LD_STRING ACH_AH
15179: PPUSH
15180: LD_INT 1
15182: PPUSH
15183: CALL_OW 564
15187: GO 15352
15189: LD_INT 2
15191: DOUBLE
15192: EQUAL
15193: IFTRUE 15197
15195: GO 15210
15197: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
15198: LD_STRING ACH_E
15200: PPUSH
15201: LD_INT 1
15203: PPUSH
15204: CALL_OW 564
15208: GO 15352
15210: LD_INT 3
15212: DOUBLE
15213: EQUAL
15214: IFTRUE 15218
15216: GO 15231
15218: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
15219: LD_STRING ACH_OOL
15221: PPUSH
15222: LD_INT 1
15224: PPUSH
15225: CALL_OW 564
15229: GO 15352
15231: LD_INT 1
15233: PUSH
15234: LD_INT 2
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: DOUBLE
15241: EQUAL
15242: IFTRUE 15246
15244: GO 15271
15246: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
15247: LD_STRING ACH_AH
15249: PPUSH
15250: LD_REAL  5.00000000000000E-0001
15253: PPUSH
15254: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
15258: LD_STRING ACH_E
15260: PPUSH
15261: LD_REAL  5.00000000000000E-0001
15264: PPUSH
15265: CALL_OW 564
// end ; [ 2 , 3 ] :
15269: GO 15352
15271: LD_INT 2
15273: PUSH
15274: LD_INT 3
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: DOUBLE
15281: EQUAL
15282: IFTRUE 15286
15284: GO 15311
15286: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
15287: LD_STRING ACH_OOL
15289: PPUSH
15290: LD_REAL  5.00000000000000E-0001
15293: PPUSH
15294: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
15298: LD_STRING ACH_E
15300: PPUSH
15301: LD_REAL  5.00000000000000E-0001
15304: PPUSH
15305: CALL_OW 564
// end ; [ 3 , 1 ] :
15309: GO 15352
15311: LD_INT 3
15313: PUSH
15314: LD_INT 1
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: DOUBLE
15321: EQUAL
15322: IFTRUE 15326
15324: GO 15351
15326: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
15327: LD_STRING ACH_AH
15329: PPUSH
15330: LD_REAL  5.00000000000000E-0001
15333: PPUSH
15334: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
15338: LD_STRING ACH_OOL
15340: PPUSH
15341: LD_REAL  5.00000000000000E-0001
15344: PPUSH
15345: CALL_OW 564
// end ; end ;
15349: GO 15352
15351: POP
// end ; end_of_file
15352: LD_VAR 0 2
15356: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
15357: LD_INT 0
15359: PPUSH
15360: PPUSH
// enable ( 98 ) ;
15361: LD_INT 98
15363: ENABLE_MARKED
// GameEnded = false ;
15364: LD_ADDR_LOC 28
15368: PUSH
15369: LD_INT 0
15371: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15372: LD_ADDR_LOC 27
15376: PUSH
15377: LD_INT 0
15379: PUSH
15380: LD_INT 0
15382: PUSH
15383: LD_INT 0
15385: PUSH
15386: LD_INT 0
15388: PUSH
15389: LD_INT 0
15391: PUSH
15392: LD_INT 0
15394: PUSH
15395: LD_INT 0
15397: PUSH
15398: LD_INT 0
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: ST_TO_ADDR
// unfoged = false ;
15411: LD_ADDR_LOC 29
15415: PUSH
15416: LD_INT 0
15418: ST_TO_ADDR
// defeated_specs := [ ] ;
15419: LD_ADDR_LOC 30
15423: PUSH
15424: EMPTY
15425: ST_TO_ADDR
// for i = 1 to side_positions do
15426: LD_ADDR_VAR 0 2
15430: PUSH
15431: DOUBLE
15432: LD_INT 1
15434: DEC
15435: ST_TO_ADDR
15436: LD_EXP 43
15440: PUSH
15441: FOR_TO
15442: IFFALSE 15482
// if not side_positions [ i ] then
15444: LD_EXP 43
15448: PUSH
15449: LD_VAR 0 2
15453: ARRAY
15454: NOT
15455: IFFALSE 15480
// defeated = replace ( defeated , i , true ) ;
15457: LD_ADDR_LOC 27
15461: PUSH
15462: LD_LOC 27
15466: PPUSH
15467: LD_VAR 0 2
15471: PPUSH
15472: LD_INT 1
15474: PPUSH
15475: CALL_OW 1
15479: ST_TO_ADDR
15480: GO 15441
15482: POP
15483: POP
// end ;
15484: LD_VAR 0 1
15488: RET
// function CanWinLoose ; begin
15489: LD_INT 0
15491: PPUSH
// Result := true ;
15492: LD_ADDR_VAR 0 1
15496: PUSH
15497: LD_INT 1
15499: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
15500: CALL_OW 518
15504: PUSH
15505: CALL_OW 519
15509: PUSH
15510: LD_INT 0
15512: GREATER
15513: AND
15514: IFFALSE 15524
// Result := false ;
15516: LD_ADDR_VAR 0 1
15520: PUSH
15521: LD_INT 0
15523: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
15524: CALL_OW 531
15528: PUSH
15529: CALL_OW 519
15533: PUSH
15534: LD_INT 1
15536: GREATER
15537: AND
15538: IFFALSE 15548
// Result := false ;
15540: LD_ADDR_VAR 0 1
15544: PUSH
15545: LD_INT 0
15547: ST_TO_ADDR
// end ;
15548: LD_VAR 0 1
15552: RET
// export function HasPower ( i ) ; var k , h ; begin
15553: LD_INT 0
15555: PPUSH
15556: PPUSH
15557: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
15558: LD_VAR 0 1
15562: PPUSH
15563: CALL_OW 108
15567: NOT
15568: PUSH
15569: LD_EXP 42
15573: PUSH
15574: LD_VAR 0 1
15578: ARRAY
15579: NOT
15580: AND
15581: PUSH
15582: LD_OWVAR 4
15586: AND
15587: IFFALSE 15599
// begin result = false ;
15589: LD_ADDR_VAR 0 2
15593: PUSH
15594: LD_INT 0
15596: ST_TO_ADDR
// end else
15597: GO 15894
// case def_win_rules of 0 :
15599: LD_EXP 18
15603: PUSH
15604: LD_INT 0
15606: DOUBLE
15607: EQUAL
15608: IFTRUE 15612
15610: GO 15775
15612: POP
// if def_people_respawning then
15613: LD_EXP 19
15617: IFFALSE 15708
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
15619: LD_ADDR_VAR 0 2
15623: PUSH
15624: LD_INT 22
15626: PUSH
15627: LD_VAR 0 1
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: LD_INT 2
15638: PUSH
15639: LD_INT 21
15641: PUSH
15642: LD_INT 1
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 33
15651: PUSH
15652: LD_INT 3
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: LD_INT 33
15661: PUSH
15662: LD_INT 5
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 30
15671: PUSH
15672: LD_INT 0
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: LD_INT 30
15681: PUSH
15682: LD_INT 1
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PPUSH
15701: CALL_OW 69
15705: ST_TO_ADDR
15706: GO 15773
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
15708: LD_ADDR_VAR 0 2
15712: PUSH
15713: LD_INT 22
15715: PUSH
15716: LD_VAR 0 1
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: LD_INT 2
15727: PUSH
15728: LD_INT 21
15730: PUSH
15731: LD_INT 1
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: LD_INT 33
15740: PUSH
15741: LD_INT 3
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: LD_INT 33
15750: PUSH
15751: LD_INT 5
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PPUSH
15768: CALL_OW 69
15772: ST_TO_ADDR
15773: GO 15894
15775: LD_INT 1
15777: DOUBLE
15778: EQUAL
15779: IFTRUE 15783
15781: GO 15822
15783: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
15784: LD_ADDR_VAR 0 2
15788: PUSH
15789: LD_INT 22
15791: PUSH
15792: LD_VAR 0 1
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 21
15803: PUSH
15804: LD_INT 1
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: PPUSH
15815: CALL_OW 69
15819: ST_TO_ADDR
15820: GO 15894
15822: LD_INT 2
15824: DOUBLE
15825: EQUAL
15826: IFTRUE 15830
15828: GO 15893
15830: POP
// begin h = false ;
15831: LD_ADDR_VAR 0 4
15835: PUSH
15836: LD_INT 0
15838: ST_TO_ADDR
// for k in heroes [ i ] do
15839: LD_ADDR_VAR 0 3
15843: PUSH
15844: LD_EXP 56
15848: PUSH
15849: LD_VAR 0 1
15853: ARRAY
15854: PUSH
15855: FOR_IN
15856: IFFALSE 15879
// if IsLive ( k ) then
15858: LD_VAR 0 3
15862: PPUSH
15863: CALL_OW 300
15867: IFFALSE 15877
// h = true ;
15869: LD_ADDR_VAR 0 4
15873: PUSH
15874: LD_INT 1
15876: ST_TO_ADDR
15877: GO 15855
15879: POP
15880: POP
// Result := h ;
15881: LD_ADDR_VAR 0 2
15885: PUSH
15886: LD_VAR 0 4
15890: ST_TO_ADDR
// end ; end ;
15891: GO 15894
15893: POP
// end ;
15894: LD_VAR 0 2
15898: RET
// function AlliedSides ( i , j ) ; begin
15899: LD_INT 0
15901: PPUSH
// Result := false ;
15902: LD_ADDR_VAR 0 3
15906: PUSH
15907: LD_INT 0
15909: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
15910: LD_VAR 0 1
15914: PPUSH
15915: LD_VAR 0 2
15919: PPUSH
15920: CALL_OW 81
15924: PUSH
15925: LD_INT 1
15927: EQUAL
15928: PUSH
15929: LD_VAR 0 2
15933: PPUSH
15934: LD_VAR 0 1
15938: PPUSH
15939: CALL_OW 81
15943: PUSH
15944: LD_INT 1
15946: EQUAL
15947: AND
15948: PUSH
15949: LD_VAR 0 1
15953: PPUSH
15954: CALL_OW 83
15958: AND
15959: PUSH
15960: LD_VAR 0 2
15964: PPUSH
15965: CALL_OW 83
15969: AND
15970: IFFALSE 15980
// Result := true ;
15972: LD_ADDR_VAR 0 3
15976: PUSH
15977: LD_INT 1
15979: ST_TO_ADDR
// end ;
15980: LD_VAR 0 3
15984: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
15985: CALL 15489 0 0
15989: PUSH
15990: LD_LOC 28
15994: NOT
15995: AND
15996: IFFALSE 16012
15998: GO 16000
16000: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
16001: LD_ADDR_EXP 68
16005: PUSH
16006: LD_STRING #Player-Ended
16008: PUSH
16009: EMPTY
16010: LIST
16011: ST_TO_ADDR
16012: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
16013: CALL 15489 0 0
16017: PUSH
16018: LD_LOC 28
16022: AND
16023: IFFALSE 16032
16025: GO 16027
16027: DISABLE
// YouLostInMultiplayer ;
16028: CALL_OW 107
16032: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
16033: CALL 15489 0 0
16037: NOT
16038: PUSH
16039: CALL_OW 531
16043: NOT
16044: AND
16045: IFFALSE 16061
16047: GO 16049
16049: DISABLE
// WaitServerStrings = [ #server-wait ] ;
16050: LD_ADDR_EXP 68
16054: PUSH
16055: LD_STRING #server-wait
16057: PUSH
16058: EMPTY
16059: LIST
16060: ST_TO_ADDR
16061: END
// every 100 trigger IAmSpec do
16062: CALL_OW 531
16066: IFFALSE 16082
16068: GO 16070
16070: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
16071: LD_ADDR_EXP 68
16075: PUSH
16076: LD_STRING #Player-IAmSpec
16078: PUSH
16079: EMPTY
16080: LIST
16081: ST_TO_ADDR
16082: END
// every 100 trigger GameEnded and IAmSpec do
16083: LD_LOC 28
16087: PUSH
16088: CALL_OW 531
16092: AND
16093: IFFALSE 16102
16095: GO 16097
16097: DISABLE
// YouLostInMultiplayer ;
16098: CALL_OW 107
16102: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
16103: CALL 15489 0 0
16107: PUSH
16108: LD_LOC 28
16112: NOT
16113: AND
16114: IFFALSE 16130
16116: GO 16118
16118: DISABLE
// WaitServerStrings = [ $player-win ] ;
16119: LD_ADDR_EXP 68
16123: PUSH
16124: LD_STRING $player-win
16126: PUSH
16127: EMPTY
16128: LIST
16129: ST_TO_ADDR
16130: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
16131: CALL 15489 0 0
16135: PUSH
16136: LD_LOC 28
16140: AND
16141: IFFALSE 16165
16143: GO 16145
16145: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
16146: LD_EXP 44
16150: PUSH
16151: LD_OWVAR 7
16155: ARRAY
16156: PPUSH
16157: CALL 15160 0 1
// YouWinInMultiplayer ;
16161: CALL_OW 106
// end ;
16165: END
// every 100 trigger isEditor marked 401 do
16166: LD_OWVAR 84
16170: IFFALSE 16186
16172: GO 16174
16174: DISABLE
// Debug_Strings = [ You won ] ;
16175: LD_ADDR_OWVAR 48
16179: PUSH
16180: LD_STRING You won
16182: PUSH
16183: EMPTY
16184: LIST
16185: ST_TO_ADDR
16186: END
// every 100 trigger isEditor marked 400 do
16187: LD_OWVAR 84
16191: IFFALSE 16207
16193: GO 16195
16195: DISABLE
// Debug_Strings = [ You loss ] ;
16196: LD_ADDR_OWVAR 48
16200: PUSH
16201: LD_STRING You loss
16203: PUSH
16204: EMPTY
16205: LIST
16206: ST_TO_ADDR
16207: END
// every 100 marked 98 do var i , un ;
16208: GO 16210
16210: DISABLE
16211: LD_INT 0
16213: PPUSH
16214: PPUSH
// begin for i = 1 to side_positions do
16215: LD_ADDR_VAR 0 1
16219: PUSH
16220: DOUBLE
16221: LD_INT 1
16223: DEC
16224: ST_TO_ADDR
16225: LD_EXP 43
16229: PUSH
16230: FOR_TO
16231: IFFALSE 16318
// begin if side_positions [ i ] then
16233: LD_EXP 43
16237: PUSH
16238: LD_VAR 0 1
16242: ARRAY
16243: IFFALSE 16316
// if not HasPower ( i ) and not defeated [ i ] then
16245: LD_VAR 0 1
16249: PPUSH
16250: CALL 15553 0 1
16254: NOT
16255: PUSH
16256: LD_LOC 27
16260: PUSH
16261: LD_VAR 0 1
16265: ARRAY
16266: NOT
16267: AND
16268: IFFALSE 16316
// begin defeated = replace ( defeated , i , true ) ;
16270: LD_ADDR_LOC 27
16274: PUSH
16275: LD_LOC 27
16279: PPUSH
16280: LD_VAR 0 1
16284: PPUSH
16285: LD_INT 1
16287: PPUSH
16288: CALL_OW 1
16292: ST_TO_ADDR
// if i = mp_player_side then
16293: LD_VAR 0 1
16297: PUSH
16298: LD_OWVAR 7
16302: EQUAL
16303: IFFALSE 16316
// begin Multiplayer_Loose_Message ;
16305: CALL_OW 521
// SetPlayerSpectator ( ) ;
16309: CALL_OW 572
// enable ( 400 ) ;
16313: LD_INT 400
16315: ENABLE_MARKED
// end ; end ; end ;
16316: GO 16230
16318: POP
16319: POP
// DidGameEnd ;
16320: CALL 16335 0 0
// if not GameEnded then
16324: LD_LOC 28
16328: NOT
16329: IFFALSE 16332
// enable ;
16331: ENABLE
// end ;
16332: PPOPN 2
16334: END
// function DidGameEnd ; var i , k , enemy ; begin
16335: LD_INT 0
16337: PPUSH
16338: PPUSH
16339: PPUSH
16340: PPUSH
// enemy = [ ] ;
16341: LD_ADDR_VAR 0 4
16345: PUSH
16346: EMPTY
16347: ST_TO_ADDR
// for i = 1 to side_positions do
16348: LD_ADDR_VAR 0 2
16352: PUSH
16353: DOUBLE
16354: LD_INT 1
16356: DEC
16357: ST_TO_ADDR
16358: LD_EXP 43
16362: PUSH
16363: FOR_TO
16364: IFFALSE 16458
// if not defeated [ i ] then
16366: LD_LOC 27
16370: PUSH
16371: LD_VAR 0 2
16375: ARRAY
16376: NOT
16377: IFFALSE 16456
// for k = 1 to side_positions do
16379: LD_ADDR_VAR 0 3
16383: PUSH
16384: DOUBLE
16385: LD_INT 1
16387: DEC
16388: ST_TO_ADDR
16389: LD_EXP 43
16393: PUSH
16394: FOR_TO
16395: IFFALSE 16454
// if not defeated [ k ] then
16397: LD_LOC 27
16401: PUSH
16402: LD_VAR 0 3
16406: ARRAY
16407: NOT
16408: IFFALSE 16452
// if not AlliedSides ( i , k ) then
16410: LD_VAR 0 2
16414: PPUSH
16415: LD_VAR 0 3
16419: PPUSH
16420: CALL 15899 0 2
16424: NOT
16425: IFFALSE 16452
// enemy = enemy ^ [ i , k ] ;
16427: LD_ADDR_VAR 0 4
16431: PUSH
16432: LD_VAR 0 4
16436: PUSH
16437: LD_VAR 0 2
16441: PUSH
16442: LD_VAR 0 3
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: ADD
16451: ST_TO_ADDR
16452: GO 16394
16454: POP
16455: POP
16456: GO 16363
16458: POP
16459: POP
// if not enemy then
16460: LD_VAR 0 4
16464: NOT
16465: IFFALSE 16491
// begin GameEnded = true ;
16467: LD_ADDR_LOC 28
16471: PUSH
16472: LD_INT 1
16474: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
16475: LD_LOC 27
16479: PUSH
16480: LD_OWVAR 7
16484: ARRAY
16485: NOT
16486: IFFALSE 16491
// enable ( 401 ) ;
16488: LD_INT 401
16490: ENABLE_MARKED
// end ; end ;
16491: LD_VAR 0 1
16495: RET
// function unfog ; var k , friends ; begin
16496: LD_INT 0
16498: PPUSH
16499: PPUSH
16500: PPUSH
// for k = 1 to side_positions do
16501: LD_ADDR_VAR 0 2
16505: PUSH
16506: DOUBLE
16507: LD_INT 1
16509: DEC
16510: ST_TO_ADDR
16511: LD_EXP 43
16515: PUSH
16516: FOR_TO
16517: IFFALSE 16573
// if not defeated [ k ] then
16519: LD_LOC 27
16523: PUSH
16524: LD_VAR 0 2
16528: ARRAY
16529: NOT
16530: IFFALSE 16571
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
16532: LD_OWVAR 7
16536: PPUSH
16537: LD_VAR 0 2
16541: PPUSH
16542: CALL_OW 81
16546: PUSH
16547: LD_INT 1
16549: PUSH
16550: EMPTY
16551: LIST
16552: IN
16553: IFFALSE 16571
// friends = friends ^ k ;
16555: LD_ADDR_VAR 0 3
16559: PUSH
16560: LD_VAR 0 3
16564: PUSH
16565: LD_VAR 0 2
16569: ADD
16570: ST_TO_ADDR
16571: GO 16516
16573: POP
16574: POP
// if not friends then
16575: LD_VAR 0 3
16579: NOT
16580: IFFALSE 16594
// begin SetPlayerSpectator ( ) ;
16582: CALL_OW 572
// unfoged = true ;
16586: LD_ADDR_LOC 29
16590: PUSH
16591: LD_INT 1
16593: ST_TO_ADDR
// end ; end ;
16594: LD_VAR 0 1
16598: RET
// export function MakeGameEnd ; begin
16599: LD_INT 0
16601: PPUSH
// SetPlayerSpectator ( ) ;
16602: CALL_OW 572
// unfoged = true ;
16606: LD_ADDR_LOC 29
16610: PUSH
16611: LD_INT 1
16613: ST_TO_ADDR
// wait ( 0 0$5 ) ;
16614: LD_INT 175
16616: PPUSH
16617: CALL_OW 67
// GameEnded = true ;
16621: LD_ADDR_LOC 28
16625: PUSH
16626: LD_INT 1
16628: ST_TO_ADDR
// end ;
16629: LD_VAR 0 1
16633: RET
// export function GetGameEnded ; begin
16634: LD_INT 0
16636: PPUSH
// result = GameEnded ;
16637: LD_ADDR_VAR 0 1
16641: PUSH
16642: LD_LOC 28
16646: ST_TO_ADDR
// end ; end_of_file
16647: LD_VAR 0 1
16651: RET
// export function SetMpTechs ( ) ; var side , i ; begin
16652: LD_INT 0
16654: PPUSH
16655: PPUSH
16656: PPUSH
// for side = 1 to 8 do
16657: LD_ADDR_VAR 0 2
16661: PUSH
16662: DOUBLE
16663: LD_INT 1
16665: DEC
16666: ST_TO_ADDR
16667: LD_INT 8
16669: PUSH
16670: FOR_TO
16671: IFFALSE 16792
// begin for i = 1 to 72 do
16673: LD_ADDR_VAR 0 3
16677: PUSH
16678: DOUBLE
16679: LD_INT 1
16681: DEC
16682: ST_TO_ADDR
16683: LD_INT 72
16685: PUSH
16686: FOR_TO
16687: IFFALSE 16718
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
16689: LD_VAR 0 3
16693: PPUSH
16694: LD_VAR 0 2
16698: PPUSH
16699: LD_INT 0
16701: PPUSH
16702: LD_VAR 0 3
16706: PPUSH
16707: CALL_OW 565
16711: PPUSH
16712: CALL_OW 322
16716: GO 16686
16718: POP
16719: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
16720: LD_INT 73
16722: PPUSH
16723: LD_VAR 0 2
16727: PPUSH
16728: LD_INT 0
16730: PPUSH
16731: LD_INT 25
16733: PPUSH
16734: CALL_OW 565
16738: PPUSH
16739: CALL_OW 322
// for i = 0 to 40 do
16743: LD_ADDR_VAR 0 3
16747: PUSH
16748: DOUBLE
16749: LD_INT 0
16751: DEC
16752: ST_TO_ADDR
16753: LD_INT 40
16755: PUSH
16756: FOR_TO
16757: IFFALSE 16788
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
16759: LD_VAR 0 3
16763: PPUSH
16764: LD_VAR 0 2
16768: PPUSH
16769: LD_INT 1
16771: PPUSH
16772: LD_VAR 0 3
16776: PPUSH
16777: CALL_OW 565
16781: PPUSH
16782: CALL_OW 324
16786: GO 16756
16788: POP
16789: POP
// end ;
16790: GO 16670
16792: POP
16793: POP
// end ;
16794: LD_VAR 0 1
16798: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
16799: LD_INT 0
16801: PPUSH
16802: PPUSH
16803: PPUSH
// for side = 1 to 8 do
16804: LD_ADDR_VAR 0 3
16808: PUSH
16809: DOUBLE
16810: LD_INT 1
16812: DEC
16813: ST_TO_ADDR
16814: LD_INT 8
16816: PUSH
16817: FOR_TO
16818: IFFALSE 20814
// begin for i = 1 to 73 do
16820: LD_ADDR_VAR 0 4
16824: PUSH
16825: DOUBLE
16826: LD_INT 1
16828: DEC
16829: ST_TO_ADDR
16830: LD_INT 73
16832: PUSH
16833: FOR_TO
16834: IFFALSE 16855
// SetTech ( i , side , state_disabled ) ;
16836: LD_VAR 0 4
16840: PPUSH
16841: LD_VAR 0 3
16845: PPUSH
16846: LD_INT 0
16848: PPUSH
16849: CALL_OW 322
16853: GO 16833
16855: POP
16856: POP
// for i = 0 to 40 do
16857: LD_ADDR_VAR 0 4
16861: PUSH
16862: DOUBLE
16863: LD_INT 0
16865: DEC
16866: ST_TO_ADDR
16867: LD_INT 40
16869: PUSH
16870: FOR_TO
16871: IFFALSE 16892
// SetRestrict ( i , side , false ) ;
16873: LD_VAR 0 4
16877: PPUSH
16878: LD_VAR 0 3
16882: PPUSH
16883: LD_INT 0
16885: PPUSH
16886: CALL_OW 324
16890: GO 16870
16892: POP
16893: POP
// case level of 1 :
16894: LD_VAR 0 1
16898: PUSH
16899: LD_INT 1
16901: DOUBLE
16902: EQUAL
16903: IFTRUE 16907
16905: GO 17060
16907: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16908: LD_INT 35
16910: PPUSH
16911: LD_VAR 0 3
16915: PPUSH
16916: LD_INT 1
16918: PPUSH
16919: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16923: LD_INT 45
16925: PPUSH
16926: LD_VAR 0 3
16930: PPUSH
16931: LD_INT 1
16933: PPUSH
16934: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16938: LD_INT 46
16940: PPUSH
16941: LD_VAR 0 3
16945: PPUSH
16946: LD_INT 1
16948: PPUSH
16949: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16953: LD_INT 47
16955: PPUSH
16956: LD_VAR 0 3
16960: PPUSH
16961: LD_INT 1
16963: PPUSH
16964: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16968: LD_INT 0
16970: PPUSH
16971: LD_VAR 0 3
16975: PPUSH
16976: LD_INT 1
16978: PPUSH
16979: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16983: LD_INT 2
16985: PPUSH
16986: LD_VAR 0 3
16990: PPUSH
16991: LD_INT 1
16993: PPUSH
16994: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16998: LD_INT 4
17000: PPUSH
17001: LD_VAR 0 3
17005: PPUSH
17006: LD_INT 1
17008: PPUSH
17009: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17013: LD_INT 6
17015: PPUSH
17016: LD_VAR 0 3
17020: PPUSH
17021: LD_INT 1
17023: PPUSH
17024: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17028: LD_INT 29
17030: PPUSH
17031: LD_VAR 0 3
17035: PPUSH
17036: LD_INT 1
17038: PPUSH
17039: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17043: LD_INT 31
17045: PPUSH
17046: LD_VAR 0 3
17050: PPUSH
17051: LD_INT 1
17053: PPUSH
17054: CALL_OW 324
// end ; 2 :
17058: GO 20812
17060: LD_INT 2
17062: DOUBLE
17063: EQUAL
17064: IFTRUE 17068
17066: GO 17266
17068: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17069: LD_INT 35
17071: PPUSH
17072: LD_VAR 0 3
17076: PPUSH
17077: LD_INT 1
17079: PPUSH
17080: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17084: LD_INT 45
17086: PPUSH
17087: LD_VAR 0 3
17091: PPUSH
17092: LD_INT 1
17094: PPUSH
17095: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17099: LD_INT 46
17101: PPUSH
17102: LD_VAR 0 3
17106: PPUSH
17107: LD_INT 1
17109: PPUSH
17110: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17114: LD_INT 47
17116: PPUSH
17117: LD_VAR 0 3
17121: PPUSH
17122: LD_INT 1
17124: PPUSH
17125: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17129: LD_INT 1
17131: PPUSH
17132: LD_VAR 0 3
17136: PPUSH
17137: LD_INT 1
17139: PPUSH
17140: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17144: LD_INT 2
17146: PPUSH
17147: LD_VAR 0 3
17151: PPUSH
17152: LD_INT 1
17154: PPUSH
17155: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17159: LD_INT 11
17161: PPUSH
17162: LD_VAR 0 3
17166: PPUSH
17167: LD_INT 1
17169: PPUSH
17170: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17174: LD_INT 0
17176: PPUSH
17177: LD_VAR 0 3
17181: PPUSH
17182: LD_INT 1
17184: PPUSH
17185: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17189: LD_INT 2
17191: PPUSH
17192: LD_VAR 0 3
17196: PPUSH
17197: LD_INT 1
17199: PPUSH
17200: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17204: LD_INT 4
17206: PPUSH
17207: LD_VAR 0 3
17211: PPUSH
17212: LD_INT 1
17214: PPUSH
17215: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17219: LD_INT 6
17221: PPUSH
17222: LD_VAR 0 3
17226: PPUSH
17227: LD_INT 1
17229: PPUSH
17230: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17234: LD_INT 29
17236: PPUSH
17237: LD_VAR 0 3
17241: PPUSH
17242: LD_INT 1
17244: PPUSH
17245: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17249: LD_INT 31
17251: PPUSH
17252: LD_VAR 0 3
17256: PPUSH
17257: LD_INT 1
17259: PPUSH
17260: CALL_OW 324
// end ; 3 :
17264: GO 20812
17266: LD_INT 3
17268: DOUBLE
17269: EQUAL
17270: IFTRUE 17274
17272: GO 17727
17274: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17275: LD_INT 35
17277: PPUSH
17278: LD_VAR 0 3
17282: PPUSH
17283: LD_INT 1
17285: PPUSH
17286: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17290: LD_INT 45
17292: PPUSH
17293: LD_VAR 0 3
17297: PPUSH
17298: LD_INT 1
17300: PPUSH
17301: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17305: LD_INT 46
17307: PPUSH
17308: LD_VAR 0 3
17312: PPUSH
17313: LD_INT 1
17315: PPUSH
17316: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17320: LD_INT 47
17322: PPUSH
17323: LD_VAR 0 3
17327: PPUSH
17328: LD_INT 1
17330: PPUSH
17331: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17335: LD_INT 1
17337: PPUSH
17338: LD_VAR 0 3
17342: PPUSH
17343: LD_INT 1
17345: PPUSH
17346: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17350: LD_INT 2
17352: PPUSH
17353: LD_VAR 0 3
17357: PPUSH
17358: LD_INT 1
17360: PPUSH
17361: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17365: LD_INT 11
17367: PPUSH
17368: LD_VAR 0 3
17372: PPUSH
17373: LD_INT 1
17375: PPUSH
17376: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17380: LD_INT 48
17382: PPUSH
17383: LD_VAR 0 3
17387: PPUSH
17388: LD_INT 1
17390: PPUSH
17391: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17395: LD_INT 69
17397: PPUSH
17398: LD_VAR 0 3
17402: PPUSH
17403: LD_INT 1
17405: PPUSH
17406: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17410: LD_INT 39
17412: PPUSH
17413: LD_VAR 0 3
17417: PPUSH
17418: LD_INT 1
17420: PPUSH
17421: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17425: LD_INT 43
17427: PPUSH
17428: LD_VAR 0 3
17432: PPUSH
17433: LD_INT 1
17435: PPUSH
17436: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17440: LD_INT 51
17442: PPUSH
17443: LD_VAR 0 3
17447: PPUSH
17448: LD_INT 1
17450: PPUSH
17451: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17455: LD_INT 6
17457: PPUSH
17458: LD_VAR 0 3
17462: PPUSH
17463: LD_INT 1
17465: PPUSH
17466: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
17470: LD_INT 0
17472: PPUSH
17473: LD_VAR 0 3
17477: PPUSH
17478: LD_INT 1
17480: PPUSH
17481: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
17485: LD_INT 2
17487: PPUSH
17488: LD_VAR 0 3
17492: PPUSH
17493: LD_INT 1
17495: PPUSH
17496: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
17500: LD_INT 3
17502: PPUSH
17503: LD_VAR 0 3
17507: PPUSH
17508: LD_INT 1
17510: PPUSH
17511: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
17515: LD_INT 4
17517: PPUSH
17518: LD_VAR 0 3
17522: PPUSH
17523: LD_INT 1
17525: PPUSH
17526: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
17530: LD_INT 6
17532: PPUSH
17533: LD_VAR 0 3
17537: PPUSH
17538: LD_INT 1
17540: PPUSH
17541: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
17545: LD_INT 7
17547: PPUSH
17548: LD_VAR 0 3
17552: PPUSH
17553: LD_INT 1
17555: PPUSH
17556: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
17560: LD_INT 8
17562: PPUSH
17563: LD_VAR 0 3
17567: PPUSH
17568: LD_INT 1
17570: PPUSH
17571: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
17575: LD_INT 10
17577: PPUSH
17578: LD_VAR 0 3
17582: PPUSH
17583: LD_INT 1
17585: PPUSH
17586: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
17590: LD_INT 15
17592: PPUSH
17593: LD_VAR 0 3
17597: PPUSH
17598: LD_INT 1
17600: PPUSH
17601: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
17605: LD_INT 16
17607: PPUSH
17608: LD_VAR 0 3
17612: PPUSH
17613: LD_INT 1
17615: PPUSH
17616: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
17620: LD_INT 17
17622: PPUSH
17623: LD_VAR 0 3
17627: PPUSH
17628: LD_INT 1
17630: PPUSH
17631: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
17635: LD_INT 20
17637: PPUSH
17638: LD_VAR 0 3
17642: PPUSH
17643: LD_INT 1
17645: PPUSH
17646: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
17650: LD_INT 26
17652: PPUSH
17653: LD_VAR 0 3
17657: PPUSH
17658: LD_INT 1
17660: PPUSH
17661: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
17665: LD_INT 27
17667: PPUSH
17668: LD_VAR 0 3
17672: PPUSH
17673: LD_INT 1
17675: PPUSH
17676: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
17680: LD_INT 29
17682: PPUSH
17683: LD_VAR 0 3
17687: PPUSH
17688: LD_INT 1
17690: PPUSH
17691: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
17695: LD_INT 31
17697: PPUSH
17698: LD_VAR 0 3
17702: PPUSH
17703: LD_INT 1
17705: PPUSH
17706: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
17710: LD_INT 32
17712: PPUSH
17713: LD_VAR 0 3
17717: PPUSH
17718: LD_INT 1
17720: PPUSH
17721: CALL_OW 324
// end ; 4 :
17725: GO 20812
17727: LD_INT 4
17729: DOUBLE
17730: EQUAL
17731: IFTRUE 17735
17733: GO 18683
17735: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17736: LD_INT 35
17738: PPUSH
17739: LD_VAR 0 3
17743: PPUSH
17744: LD_INT 1
17746: PPUSH
17747: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17751: LD_INT 45
17753: PPUSH
17754: LD_VAR 0 3
17758: PPUSH
17759: LD_INT 1
17761: PPUSH
17762: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17766: LD_INT 46
17768: PPUSH
17769: LD_VAR 0 3
17773: PPUSH
17774: LD_INT 1
17776: PPUSH
17777: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17781: LD_INT 47
17783: PPUSH
17784: LD_VAR 0 3
17788: PPUSH
17789: LD_INT 1
17791: PPUSH
17792: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17796: LD_INT 1
17798: PPUSH
17799: LD_VAR 0 3
17803: PPUSH
17804: LD_INT 1
17806: PPUSH
17807: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17811: LD_INT 2
17813: PPUSH
17814: LD_VAR 0 3
17818: PPUSH
17819: LD_INT 1
17821: PPUSH
17822: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17826: LD_INT 11
17828: PPUSH
17829: LD_VAR 0 3
17833: PPUSH
17834: LD_INT 1
17836: PPUSH
17837: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17841: LD_INT 20
17843: PPUSH
17844: LD_VAR 0 3
17848: PPUSH
17849: LD_INT 1
17851: PPUSH
17852: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17856: LD_INT 48
17858: PPUSH
17859: LD_VAR 0 3
17863: PPUSH
17864: LD_INT 1
17866: PPUSH
17867: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17871: LD_INT 49
17873: PPUSH
17874: LD_VAR 0 3
17878: PPUSH
17879: LD_INT 1
17881: PPUSH
17882: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17886: LD_INT 69
17888: PPUSH
17889: LD_VAR 0 3
17893: PPUSH
17894: LD_INT 1
17896: PPUSH
17897: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17901: LD_INT 39
17903: PPUSH
17904: LD_VAR 0 3
17908: PPUSH
17909: LD_INT 1
17911: PPUSH
17912: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17916: LD_INT 34
17918: PPUSH
17919: LD_VAR 0 3
17923: PPUSH
17924: LD_INT 1
17926: PPUSH
17927: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17931: LD_INT 42
17933: PPUSH
17934: LD_VAR 0 3
17938: PPUSH
17939: LD_INT 1
17941: PPUSH
17942: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17946: LD_INT 44
17948: PPUSH
17949: LD_VAR 0 3
17953: PPUSH
17954: LD_INT 1
17956: PPUSH
17957: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17961: LD_INT 41
17963: PPUSH
17964: LD_VAR 0 3
17968: PPUSH
17969: LD_INT 1
17971: PPUSH
17972: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17976: LD_INT 43
17978: PPUSH
17979: LD_VAR 0 3
17983: PPUSH
17984: LD_INT 1
17986: PPUSH
17987: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17991: LD_INT 70
17993: PPUSH
17994: LD_VAR 0 3
17998: PPUSH
17999: LD_INT 1
18001: PPUSH
18002: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18006: LD_INT 51
18008: PPUSH
18009: LD_VAR 0 3
18013: PPUSH
18014: LD_INT 1
18016: PPUSH
18017: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18021: LD_INT 52
18023: PPUSH
18024: LD_VAR 0 3
18028: PPUSH
18029: LD_INT 1
18031: PPUSH
18032: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
18036: LD_INT 6
18038: PPUSH
18039: LD_VAR 0 3
18043: PPUSH
18044: LD_INT 1
18046: PPUSH
18047: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
18051: LD_INT 15
18053: PPUSH
18054: LD_VAR 0 3
18058: PPUSH
18059: LD_INT 1
18061: PPUSH
18062: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
18066: LD_INT 7
18068: PPUSH
18069: LD_VAR 0 3
18073: PPUSH
18074: LD_INT 1
18076: PPUSH
18077: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
18081: LD_INT 12
18083: PPUSH
18084: LD_VAR 0 3
18088: PPUSH
18089: LD_INT 1
18091: PPUSH
18092: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
18096: LD_INT 18
18098: PPUSH
18099: LD_VAR 0 3
18103: PPUSH
18104: LD_INT 1
18106: PPUSH
18107: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
18111: LD_INT 60
18113: PPUSH
18114: LD_VAR 0 3
18118: PPUSH
18119: LD_INT 1
18121: PPUSH
18122: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
18126: LD_INT 9
18128: PPUSH
18129: LD_VAR 0 3
18133: PPUSH
18134: LD_INT 1
18136: PPUSH
18137: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
18141: LD_INT 30
18143: PPUSH
18144: LD_VAR 0 3
18148: PPUSH
18149: LD_INT 1
18151: PPUSH
18152: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
18156: LD_INT 37
18158: PPUSH
18159: LD_VAR 0 3
18163: PPUSH
18164: LD_INT 1
18166: PPUSH
18167: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
18171: LD_INT 5
18173: PPUSH
18174: LD_VAR 0 3
18178: PPUSH
18179: LD_INT 1
18181: PPUSH
18182: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
18186: LD_INT 66
18188: PPUSH
18189: LD_VAR 0 3
18193: PPUSH
18194: LD_INT 1
18196: PPUSH
18197: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
18201: LD_INT 21
18203: PPUSH
18204: LD_VAR 0 3
18208: PPUSH
18209: LD_INT 1
18211: PPUSH
18212: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
18216: LD_INT 22
18218: PPUSH
18219: LD_VAR 0 3
18223: PPUSH
18224: LD_INT 1
18226: PPUSH
18227: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
18231: LD_INT 54
18233: PPUSH
18234: LD_VAR 0 3
18238: PPUSH
18239: LD_INT 1
18241: PPUSH
18242: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
18246: LD_INT 0
18248: PPUSH
18249: LD_VAR 0 3
18253: PPUSH
18254: LD_INT 1
18256: PPUSH
18257: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
18261: LD_INT 1
18263: PPUSH
18264: LD_VAR 0 3
18268: PPUSH
18269: LD_INT 1
18271: PPUSH
18272: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
18276: LD_INT 2
18278: PPUSH
18279: LD_VAR 0 3
18283: PPUSH
18284: LD_INT 1
18286: PPUSH
18287: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
18291: LD_INT 3
18293: PPUSH
18294: LD_VAR 0 3
18298: PPUSH
18299: LD_INT 1
18301: PPUSH
18302: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
18306: LD_INT 4
18308: PPUSH
18309: LD_VAR 0 3
18313: PPUSH
18314: LD_INT 1
18316: PPUSH
18317: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
18321: LD_INT 5
18323: PPUSH
18324: LD_VAR 0 3
18328: PPUSH
18329: LD_INT 1
18331: PPUSH
18332: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
18336: LD_INT 6
18338: PPUSH
18339: LD_VAR 0 3
18343: PPUSH
18344: LD_INT 1
18346: PPUSH
18347: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
18351: LD_INT 7
18353: PPUSH
18354: LD_VAR 0 3
18358: PPUSH
18359: LD_INT 1
18361: PPUSH
18362: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
18366: LD_INT 8
18368: PPUSH
18369: LD_VAR 0 3
18373: PPUSH
18374: LD_INT 1
18376: PPUSH
18377: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
18381: LD_INT 10
18383: PPUSH
18384: LD_VAR 0 3
18388: PPUSH
18389: LD_INT 1
18391: PPUSH
18392: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
18396: LD_INT 11
18398: PPUSH
18399: LD_VAR 0 3
18403: PPUSH
18404: LD_INT 1
18406: PPUSH
18407: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
18411: LD_INT 12
18413: PPUSH
18414: LD_VAR 0 3
18418: PPUSH
18419: LD_INT 1
18421: PPUSH
18422: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
18426: LD_INT 13
18428: PPUSH
18429: LD_VAR 0 3
18433: PPUSH
18434: LD_INT 1
18436: PPUSH
18437: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
18441: LD_INT 14
18443: PPUSH
18444: LD_VAR 0 3
18448: PPUSH
18449: LD_INT 1
18451: PPUSH
18452: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
18456: LD_INT 15
18458: PPUSH
18459: LD_VAR 0 3
18463: PPUSH
18464: LD_INT 1
18466: PPUSH
18467: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
18471: LD_INT 16
18473: PPUSH
18474: LD_VAR 0 3
18478: PPUSH
18479: LD_INT 1
18481: PPUSH
18482: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
18486: LD_INT 17
18488: PPUSH
18489: LD_VAR 0 3
18493: PPUSH
18494: LD_INT 1
18496: PPUSH
18497: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
18501: LD_INT 19
18503: PPUSH
18504: LD_VAR 0 3
18508: PPUSH
18509: LD_INT 1
18511: PPUSH
18512: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
18516: LD_INT 20
18518: PPUSH
18519: LD_VAR 0 3
18523: PPUSH
18524: LD_INT 1
18526: PPUSH
18527: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
18531: LD_INT 21
18533: PPUSH
18534: LD_VAR 0 3
18538: PPUSH
18539: LD_INT 1
18541: PPUSH
18542: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
18546: LD_INT 23
18548: PPUSH
18549: LD_VAR 0 3
18553: PPUSH
18554: LD_INT 1
18556: PPUSH
18557: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
18561: LD_INT 26
18563: PPUSH
18564: LD_VAR 0 3
18568: PPUSH
18569: LD_INT 1
18571: PPUSH
18572: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
18576: LD_INT 27
18578: PPUSH
18579: LD_VAR 0 3
18583: PPUSH
18584: LD_INT 1
18586: PPUSH
18587: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
18591: LD_INT 28
18593: PPUSH
18594: LD_VAR 0 3
18598: PPUSH
18599: LD_INT 1
18601: PPUSH
18602: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
18606: LD_INT 29
18608: PPUSH
18609: LD_VAR 0 3
18613: PPUSH
18614: LD_INT 1
18616: PPUSH
18617: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
18621: LD_INT 30
18623: PPUSH
18624: LD_VAR 0 3
18628: PPUSH
18629: LD_INT 1
18631: PPUSH
18632: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
18636: LD_INT 31
18638: PPUSH
18639: LD_VAR 0 3
18643: PPUSH
18644: LD_INT 1
18646: PPUSH
18647: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
18651: LD_INT 32
18653: PPUSH
18654: LD_VAR 0 3
18658: PPUSH
18659: LD_INT 1
18661: PPUSH
18662: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
18666: LD_INT 36
18668: PPUSH
18669: LD_VAR 0 3
18673: PPUSH
18674: LD_INT 1
18676: PPUSH
18677: CALL_OW 324
// end ; 5 :
18681: GO 20812
18683: LD_INT 5
18685: DOUBLE
18686: EQUAL
18687: IFTRUE 18691
18689: GO 19804
18691: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
18692: LD_INT 35
18694: PPUSH
18695: LD_VAR 0 3
18699: PPUSH
18700: LD_INT 1
18702: PPUSH
18703: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
18707: LD_INT 45
18709: PPUSH
18710: LD_VAR 0 3
18714: PPUSH
18715: LD_INT 1
18717: PPUSH
18718: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
18722: LD_INT 46
18724: PPUSH
18725: LD_VAR 0 3
18729: PPUSH
18730: LD_INT 1
18732: PPUSH
18733: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
18737: LD_INT 47
18739: PPUSH
18740: LD_VAR 0 3
18744: PPUSH
18745: LD_INT 1
18747: PPUSH
18748: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
18752: LD_INT 1
18754: PPUSH
18755: LD_VAR 0 3
18759: PPUSH
18760: LD_INT 1
18762: PPUSH
18763: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
18767: LD_INT 2
18769: PPUSH
18770: LD_VAR 0 3
18774: PPUSH
18775: LD_INT 1
18777: PPUSH
18778: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
18782: LD_INT 11
18784: PPUSH
18785: LD_VAR 0 3
18789: PPUSH
18790: LD_INT 1
18792: PPUSH
18793: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
18797: LD_INT 20
18799: PPUSH
18800: LD_VAR 0 3
18804: PPUSH
18805: LD_INT 1
18807: PPUSH
18808: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
18812: LD_INT 48
18814: PPUSH
18815: LD_VAR 0 3
18819: PPUSH
18820: LD_INT 1
18822: PPUSH
18823: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
18827: LD_INT 49
18829: PPUSH
18830: LD_VAR 0 3
18834: PPUSH
18835: LD_INT 1
18837: PPUSH
18838: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
18842: LD_INT 69
18844: PPUSH
18845: LD_VAR 0 3
18849: PPUSH
18850: LD_INT 1
18852: PPUSH
18853: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
18857: LD_INT 39
18859: PPUSH
18860: LD_VAR 0 3
18864: PPUSH
18865: LD_INT 1
18867: PPUSH
18868: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
18872: LD_INT 34
18874: PPUSH
18875: LD_VAR 0 3
18879: PPUSH
18880: LD_INT 1
18882: PPUSH
18883: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
18887: LD_INT 42
18889: PPUSH
18890: LD_VAR 0 3
18894: PPUSH
18895: LD_INT 1
18897: PPUSH
18898: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
18902: LD_INT 44
18904: PPUSH
18905: LD_VAR 0 3
18909: PPUSH
18910: LD_INT 1
18912: PPUSH
18913: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
18917: LD_INT 41
18919: PPUSH
18920: LD_VAR 0 3
18924: PPUSH
18925: LD_INT 1
18927: PPUSH
18928: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
18932: LD_INT 40
18934: PPUSH
18935: LD_VAR 0 3
18939: PPUSH
18940: LD_INT 1
18942: PPUSH
18943: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
18947: LD_INT 43
18949: PPUSH
18950: LD_VAR 0 3
18954: PPUSH
18955: LD_INT 1
18957: PPUSH
18958: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
18962: LD_INT 70
18964: PPUSH
18965: LD_VAR 0 3
18969: PPUSH
18970: LD_INT 1
18972: PPUSH
18973: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
18977: LD_INT 51
18979: PPUSH
18980: LD_VAR 0 3
18984: PPUSH
18985: LD_INT 1
18987: PPUSH
18988: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
18992: LD_INT 52
18994: PPUSH
18995: LD_VAR 0 3
18999: PPUSH
19000: LD_INT 1
19002: PPUSH
19003: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
19007: LD_INT 6
19009: PPUSH
19010: LD_VAR 0 3
19014: PPUSH
19015: LD_INT 1
19017: PPUSH
19018: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
19022: LD_INT 15
19024: PPUSH
19025: LD_VAR 0 3
19029: PPUSH
19030: LD_INT 1
19032: PPUSH
19033: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
19037: LD_INT 7
19039: PPUSH
19040: LD_VAR 0 3
19044: PPUSH
19045: LD_INT 1
19047: PPUSH
19048: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
19052: LD_INT 12
19054: PPUSH
19055: LD_VAR 0 3
19059: PPUSH
19060: LD_INT 1
19062: PPUSH
19063: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
19067: LD_INT 17
19069: PPUSH
19070: LD_VAR 0 3
19074: PPUSH
19075: LD_INT 1
19077: PPUSH
19078: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
19082: LD_INT 18
19084: PPUSH
19085: LD_VAR 0 3
19089: PPUSH
19090: LD_INT 1
19092: PPUSH
19093: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
19097: LD_INT 60
19099: PPUSH
19100: LD_VAR 0 3
19104: PPUSH
19105: LD_INT 1
19107: PPUSH
19108: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
19112: LD_INT 32
19114: PPUSH
19115: LD_VAR 0 3
19119: PPUSH
19120: LD_INT 1
19122: PPUSH
19123: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
19127: LD_INT 9
19129: PPUSH
19130: LD_VAR 0 3
19134: PPUSH
19135: LD_INT 1
19137: PPUSH
19138: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
19142: LD_INT 57
19144: PPUSH
19145: LD_VAR 0 3
19149: PPUSH
19150: LD_INT 1
19152: PPUSH
19153: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
19157: LD_INT 30
19159: PPUSH
19160: LD_VAR 0 3
19164: PPUSH
19165: LD_INT 1
19167: PPUSH
19168: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
19172: LD_INT 37
19174: PPUSH
19175: LD_VAR 0 3
19179: PPUSH
19180: LD_INT 1
19182: PPUSH
19183: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
19187: LD_INT 63
19189: PPUSH
19190: LD_VAR 0 3
19194: PPUSH
19195: LD_INT 1
19197: PPUSH
19198: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
19202: LD_INT 3
19204: PPUSH
19205: LD_VAR 0 3
19209: PPUSH
19210: LD_INT 1
19212: PPUSH
19213: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
19217: LD_INT 4
19219: PPUSH
19220: LD_VAR 0 3
19224: PPUSH
19225: LD_INT 1
19227: PPUSH
19228: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
19232: LD_INT 5
19234: PPUSH
19235: LD_VAR 0 3
19239: PPUSH
19240: LD_INT 1
19242: PPUSH
19243: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
19247: LD_INT 66
19249: PPUSH
19250: LD_VAR 0 3
19254: PPUSH
19255: LD_INT 1
19257: PPUSH
19258: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
19262: LD_INT 21
19264: PPUSH
19265: LD_VAR 0 3
19269: PPUSH
19270: LD_INT 1
19272: PPUSH
19273: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
19277: LD_INT 22
19279: PPUSH
19280: LD_VAR 0 3
19284: PPUSH
19285: LD_INT 1
19287: PPUSH
19288: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
19292: LD_INT 19
19294: PPUSH
19295: LD_VAR 0 3
19299: PPUSH
19300: LD_INT 1
19302: PPUSH
19303: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
19307: LD_INT 54
19309: PPUSH
19310: LD_VAR 0 3
19314: PPUSH
19315: LD_INT 1
19317: PPUSH
19318: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
19322: LD_INT 55
19324: PPUSH
19325: LD_VAR 0 3
19329: PPUSH
19330: LD_INT 1
19332: PPUSH
19333: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
19337: LD_INT 0
19339: PPUSH
19340: LD_VAR 0 3
19344: PPUSH
19345: LD_INT 1
19347: PPUSH
19348: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
19352: LD_INT 1
19354: PPUSH
19355: LD_VAR 0 3
19359: PPUSH
19360: LD_INT 1
19362: PPUSH
19363: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
19367: LD_INT 2
19369: PPUSH
19370: LD_VAR 0 3
19374: PPUSH
19375: LD_INT 1
19377: PPUSH
19378: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
19382: LD_INT 3
19384: PPUSH
19385: LD_VAR 0 3
19389: PPUSH
19390: LD_INT 1
19392: PPUSH
19393: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
19397: LD_INT 4
19399: PPUSH
19400: LD_VAR 0 3
19404: PPUSH
19405: LD_INT 1
19407: PPUSH
19408: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
19412: LD_INT 5
19414: PPUSH
19415: LD_VAR 0 3
19419: PPUSH
19420: LD_INT 1
19422: PPUSH
19423: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
19427: LD_INT 6
19429: PPUSH
19430: LD_VAR 0 3
19434: PPUSH
19435: LD_INT 1
19437: PPUSH
19438: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
19442: LD_INT 7
19444: PPUSH
19445: LD_VAR 0 3
19449: PPUSH
19450: LD_INT 1
19452: PPUSH
19453: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
19457: LD_INT 8
19459: PPUSH
19460: LD_VAR 0 3
19464: PPUSH
19465: LD_INT 1
19467: PPUSH
19468: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
19472: LD_INT 10
19474: PPUSH
19475: LD_VAR 0 3
19479: PPUSH
19480: LD_INT 1
19482: PPUSH
19483: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
19487: LD_INT 11
19489: PPUSH
19490: LD_VAR 0 3
19494: PPUSH
19495: LD_INT 1
19497: PPUSH
19498: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
19502: LD_INT 12
19504: PPUSH
19505: LD_VAR 0 3
19509: PPUSH
19510: LD_INT 1
19512: PPUSH
19513: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
19517: LD_INT 13
19519: PPUSH
19520: LD_VAR 0 3
19524: PPUSH
19525: LD_INT 1
19527: PPUSH
19528: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
19532: LD_INT 14
19534: PPUSH
19535: LD_VAR 0 3
19539: PPUSH
19540: LD_INT 1
19542: PPUSH
19543: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
19547: LD_INT 15
19549: PPUSH
19550: LD_VAR 0 3
19554: PPUSH
19555: LD_INT 1
19557: PPUSH
19558: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
19562: LD_INT 16
19564: PPUSH
19565: LD_VAR 0 3
19569: PPUSH
19570: LD_INT 1
19572: PPUSH
19573: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
19577: LD_INT 17
19579: PPUSH
19580: LD_VAR 0 3
19584: PPUSH
19585: LD_INT 1
19587: PPUSH
19588: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
19592: LD_INT 18
19594: PPUSH
19595: LD_VAR 0 3
19599: PPUSH
19600: LD_INT 1
19602: PPUSH
19603: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
19607: LD_INT 19
19609: PPUSH
19610: LD_VAR 0 3
19614: PPUSH
19615: LD_INT 1
19617: PPUSH
19618: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
19622: LD_INT 20
19624: PPUSH
19625: LD_VAR 0 3
19629: PPUSH
19630: LD_INT 1
19632: PPUSH
19633: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
19637: LD_INT 21
19639: PPUSH
19640: LD_VAR 0 3
19644: PPUSH
19645: LD_INT 1
19647: PPUSH
19648: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
19652: LD_INT 23
19654: PPUSH
19655: LD_VAR 0 3
19659: PPUSH
19660: LD_INT 1
19662: PPUSH
19663: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
19667: LD_INT 26
19669: PPUSH
19670: LD_VAR 0 3
19674: PPUSH
19675: LD_INT 1
19677: PPUSH
19678: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
19682: LD_INT 27
19684: PPUSH
19685: LD_VAR 0 3
19689: PPUSH
19690: LD_INT 1
19692: PPUSH
19693: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
19697: LD_INT 28
19699: PPUSH
19700: LD_VAR 0 3
19704: PPUSH
19705: LD_INT 1
19707: PPUSH
19708: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
19712: LD_INT 29
19714: PPUSH
19715: LD_VAR 0 3
19719: PPUSH
19720: LD_INT 1
19722: PPUSH
19723: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
19727: LD_INT 30
19729: PPUSH
19730: LD_VAR 0 3
19734: PPUSH
19735: LD_INT 1
19737: PPUSH
19738: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
19742: LD_INT 31
19744: PPUSH
19745: LD_VAR 0 3
19749: PPUSH
19750: LD_INT 1
19752: PPUSH
19753: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
19757: LD_INT 32
19759: PPUSH
19760: LD_VAR 0 3
19764: PPUSH
19765: LD_INT 1
19767: PPUSH
19768: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
19772: LD_INT 33
19774: PPUSH
19775: LD_VAR 0 3
19779: PPUSH
19780: LD_INT 1
19782: PPUSH
19783: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
19787: LD_INT 36
19789: PPUSH
19790: LD_VAR 0 3
19794: PPUSH
19795: LD_INT 1
19797: PPUSH
19798: CALL_OW 324
// end ; 6 :
19802: GO 20812
19804: LD_INT 6
19806: DOUBLE
19807: EQUAL
19808: IFTRUE 19812
19810: GO 20737
19812: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
19813: LD_INT 35
19815: PPUSH
19816: LD_VAR 0 3
19820: PPUSH
19821: LD_INT 1
19823: PPUSH
19824: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
19828: LD_INT 45
19830: PPUSH
19831: LD_VAR 0 3
19835: PPUSH
19836: LD_INT 1
19838: PPUSH
19839: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
19843: LD_INT 46
19845: PPUSH
19846: LD_VAR 0 3
19850: PPUSH
19851: LD_INT 1
19853: PPUSH
19854: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
19858: LD_INT 47
19860: PPUSH
19861: LD_VAR 0 3
19865: PPUSH
19866: LD_INT 1
19868: PPUSH
19869: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
19873: LD_INT 1
19875: PPUSH
19876: LD_VAR 0 3
19880: PPUSH
19881: LD_INT 1
19883: PPUSH
19884: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
19888: LD_INT 2
19890: PPUSH
19891: LD_VAR 0 3
19895: PPUSH
19896: LD_INT 1
19898: PPUSH
19899: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
19903: LD_INT 11
19905: PPUSH
19906: LD_VAR 0 3
19910: PPUSH
19911: LD_INT 1
19913: PPUSH
19914: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
19918: LD_INT 20
19920: PPUSH
19921: LD_VAR 0 3
19925: PPUSH
19926: LD_INT 1
19928: PPUSH
19929: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
19933: LD_INT 48
19935: PPUSH
19936: LD_VAR 0 3
19940: PPUSH
19941: LD_INT 1
19943: PPUSH
19944: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
19948: LD_INT 49
19950: PPUSH
19951: LD_VAR 0 3
19955: PPUSH
19956: LD_INT 1
19958: PPUSH
19959: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
19963: LD_INT 50
19965: PPUSH
19966: LD_VAR 0 3
19970: PPUSH
19971: LD_INT 1
19973: PPUSH
19974: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
19978: LD_INT 69
19980: PPUSH
19981: LD_VAR 0 3
19985: PPUSH
19986: LD_INT 1
19988: PPUSH
19989: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
19993: LD_INT 39
19995: PPUSH
19996: LD_VAR 0 3
20000: PPUSH
20001: LD_INT 1
20003: PPUSH
20004: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
20008: LD_INT 34
20010: PPUSH
20011: LD_VAR 0 3
20015: PPUSH
20016: LD_INT 1
20018: PPUSH
20019: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
20023: LD_INT 42
20025: PPUSH
20026: LD_VAR 0 3
20030: PPUSH
20031: LD_INT 1
20033: PPUSH
20034: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
20038: LD_INT 44
20040: PPUSH
20041: LD_VAR 0 3
20045: PPUSH
20046: LD_INT 1
20048: PPUSH
20049: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
20053: LD_INT 41
20055: PPUSH
20056: LD_VAR 0 3
20060: PPUSH
20061: LD_INT 1
20063: PPUSH
20064: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
20068: LD_INT 13
20070: PPUSH
20071: LD_VAR 0 3
20075: PPUSH
20076: LD_INT 1
20078: PPUSH
20079: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
20083: LD_INT 40
20085: PPUSH
20086: LD_VAR 0 3
20090: PPUSH
20091: LD_INT 1
20093: PPUSH
20094: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
20098: LD_INT 43
20100: PPUSH
20101: LD_VAR 0 3
20105: PPUSH
20106: LD_INT 1
20108: PPUSH
20109: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
20113: LD_INT 70
20115: PPUSH
20116: LD_VAR 0 3
20120: PPUSH
20121: LD_INT 1
20123: PPUSH
20124: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
20128: LD_INT 23
20130: PPUSH
20131: LD_VAR 0 3
20135: PPUSH
20136: LD_INT 1
20138: PPUSH
20139: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
20143: LD_INT 51
20145: PPUSH
20146: LD_VAR 0 3
20150: PPUSH
20151: LD_INT 1
20153: PPUSH
20154: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
20158: LD_INT 52
20160: PPUSH
20161: LD_VAR 0 3
20165: PPUSH
20166: LD_INT 1
20168: PPUSH
20169: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
20173: LD_INT 6
20175: PPUSH
20176: LD_VAR 0 3
20180: PPUSH
20181: LD_INT 1
20183: PPUSH
20184: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
20188: LD_INT 15
20190: PPUSH
20191: LD_VAR 0 3
20195: PPUSH
20196: LD_INT 1
20198: PPUSH
20199: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
20203: LD_INT 7
20205: PPUSH
20206: LD_VAR 0 3
20210: PPUSH
20211: LD_INT 1
20213: PPUSH
20214: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
20218: LD_INT 12
20220: PPUSH
20221: LD_VAR 0 3
20225: PPUSH
20226: LD_INT 1
20228: PPUSH
20229: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
20233: LD_INT 10
20235: PPUSH
20236: LD_VAR 0 3
20240: PPUSH
20241: LD_INT 1
20243: PPUSH
20244: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
20248: LD_INT 17
20250: PPUSH
20251: LD_VAR 0 3
20255: PPUSH
20256: LD_INT 1
20258: PPUSH
20259: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
20263: LD_INT 18
20265: PPUSH
20266: LD_VAR 0 3
20270: PPUSH
20271: LD_INT 1
20273: PPUSH
20274: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
20278: LD_INT 60
20280: PPUSH
20281: LD_VAR 0 3
20285: PPUSH
20286: LD_INT 1
20288: PPUSH
20289: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
20293: LD_INT 61
20295: PPUSH
20296: LD_VAR 0 3
20300: PPUSH
20301: LD_INT 1
20303: PPUSH
20304: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
20308: LD_INT 32
20310: PPUSH
20311: LD_VAR 0 3
20315: PPUSH
20316: LD_INT 1
20318: PPUSH
20319: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
20323: LD_INT 27
20325: PPUSH
20326: LD_VAR 0 3
20330: PPUSH
20331: LD_INT 1
20333: PPUSH
20334: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
20338: LD_INT 36
20340: PPUSH
20341: LD_VAR 0 3
20345: PPUSH
20346: LD_INT 1
20348: PPUSH
20349: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
20353: LD_INT 33
20355: PPUSH
20356: LD_VAR 0 3
20360: PPUSH
20361: LD_INT 1
20363: PPUSH
20364: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
20368: LD_INT 9
20370: PPUSH
20371: LD_VAR 0 3
20375: PPUSH
20376: LD_INT 1
20378: PPUSH
20379: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
20383: LD_INT 38
20385: PPUSH
20386: LD_VAR 0 3
20390: PPUSH
20391: LD_INT 1
20393: PPUSH
20394: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
20398: LD_INT 57
20400: PPUSH
20401: LD_VAR 0 3
20405: PPUSH
20406: LD_INT 1
20408: PPUSH
20409: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
20413: LD_INT 58
20415: PPUSH
20416: LD_VAR 0 3
20420: PPUSH
20421: LD_INT 1
20423: PPUSH
20424: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
20428: LD_INT 28
20430: PPUSH
20431: LD_VAR 0 3
20435: PPUSH
20436: LD_INT 1
20438: PPUSH
20439: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
20443: LD_INT 29
20445: PPUSH
20446: LD_VAR 0 3
20450: PPUSH
20451: LD_INT 1
20453: PPUSH
20454: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
20458: LD_INT 30
20460: PPUSH
20461: LD_VAR 0 3
20465: PPUSH
20466: LD_INT 1
20468: PPUSH
20469: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
20473: LD_INT 37
20475: PPUSH
20476: LD_VAR 0 3
20480: PPUSH
20481: LD_INT 1
20483: PPUSH
20484: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
20488: LD_INT 63
20490: PPUSH
20491: LD_VAR 0 3
20495: PPUSH
20496: LD_INT 1
20498: PPUSH
20499: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
20503: LD_INT 64
20505: PPUSH
20506: LD_VAR 0 3
20510: PPUSH
20511: LD_INT 1
20513: PPUSH
20514: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
20518: LD_INT 3
20520: PPUSH
20521: LD_VAR 0 3
20525: PPUSH
20526: LD_INT 1
20528: PPUSH
20529: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
20533: LD_INT 4
20535: PPUSH
20536: LD_VAR 0 3
20540: PPUSH
20541: LD_INT 1
20543: PPUSH
20544: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
20548: LD_INT 5
20550: PPUSH
20551: LD_VAR 0 3
20555: PPUSH
20556: LD_INT 1
20558: PPUSH
20559: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
20563: LD_INT 8
20565: PPUSH
20566: LD_VAR 0 3
20570: PPUSH
20571: LD_INT 1
20573: PPUSH
20574: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
20578: LD_INT 66
20580: PPUSH
20581: LD_VAR 0 3
20585: PPUSH
20586: LD_INT 1
20588: PPUSH
20589: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
20593: LD_INT 67
20595: PPUSH
20596: LD_VAR 0 3
20600: PPUSH
20601: LD_INT 1
20603: PPUSH
20604: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
20608: LD_INT 21
20610: PPUSH
20611: LD_VAR 0 3
20615: PPUSH
20616: LD_INT 1
20618: PPUSH
20619: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
20623: LD_INT 22
20625: PPUSH
20626: LD_VAR 0 3
20630: PPUSH
20631: LD_INT 1
20633: PPUSH
20634: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
20638: LD_INT 19
20640: PPUSH
20641: LD_VAR 0 3
20645: PPUSH
20646: LD_INT 1
20648: PPUSH
20649: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
20653: LD_INT 26
20655: PPUSH
20656: LD_VAR 0 3
20660: PPUSH
20661: LD_INT 1
20663: PPUSH
20664: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
20668: LD_INT 54
20670: PPUSH
20671: LD_VAR 0 3
20675: PPUSH
20676: LD_INT 1
20678: PPUSH
20679: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
20683: LD_INT 55
20685: PPUSH
20686: LD_VAR 0 3
20690: PPUSH
20691: LD_INT 1
20693: PPUSH
20694: CALL_OW 322
// for i = 0 to 39 do
20698: LD_ADDR_VAR 0 4
20702: PUSH
20703: DOUBLE
20704: LD_INT 0
20706: DEC
20707: ST_TO_ADDR
20708: LD_INT 39
20710: PUSH
20711: FOR_TO
20712: IFFALSE 20733
// SetRestrict ( i , side , true ) ;
20714: LD_VAR 0 4
20718: PPUSH
20719: LD_VAR 0 3
20723: PPUSH
20724: LD_INT 1
20726: PPUSH
20727: CALL_OW 324
20731: GO 20711
20733: POP
20734: POP
// end ; else
20735: GO 20812
20737: POP
// begin for i = 1 to 73 do
20738: LD_ADDR_VAR 0 4
20742: PUSH
20743: DOUBLE
20744: LD_INT 1
20746: DEC
20747: ST_TO_ADDR
20748: LD_INT 73
20750: PUSH
20751: FOR_TO
20752: IFFALSE 20773
// SetTech ( i , side , state_enabled ) ;
20754: LD_VAR 0 4
20758: PPUSH
20759: LD_VAR 0 3
20763: PPUSH
20764: LD_INT 1
20766: PPUSH
20767: CALL_OW 322
20771: GO 20751
20773: POP
20774: POP
// for i = 0 to 39 do
20775: LD_ADDR_VAR 0 4
20779: PUSH
20780: DOUBLE
20781: LD_INT 0
20783: DEC
20784: ST_TO_ADDR
20785: LD_INT 39
20787: PUSH
20788: FOR_TO
20789: IFFALSE 20810
// SetRestrict ( i , side , true ) ;
20791: LD_VAR 0 4
20795: PPUSH
20796: LD_VAR 0 3
20800: PPUSH
20801: LD_INT 1
20803: PPUSH
20804: CALL_OW 324
20808: GO 20788
20810: POP
20811: POP
// end ; end ; end ;
20812: GO 16817
20814: POP
20815: POP
// end ; end_of_file
20816: LD_VAR 0 2
20820: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
20821: LD_INT 0
20823: PPUSH
20824: PPUSH
20825: PPUSH
20826: PPUSH
20827: PPUSH
20828: PPUSH
20829: PPUSH
20830: PPUSH
20831: PPUSH
// for i := 1 to 8 do
20832: LD_ADDR_VAR 0 2
20836: PUSH
20837: DOUBLE
20838: LD_INT 1
20840: DEC
20841: ST_TO_ADDR
20842: LD_INT 8
20844: PUSH
20845: FOR_TO
20846: IFFALSE 21230
// begin if Side_Positions [ i ] then
20848: LD_EXP 43
20852: PUSH
20853: LD_VAR 0 2
20857: ARRAY
20858: IFFALSE 21228
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
20860: LD_ADDR_VAR 0 7
20864: PUSH
20865: LD_INT 22
20867: PUSH
20868: LD_VAR 0 2
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 21
20879: PUSH
20880: LD_INT 1
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PPUSH
20891: CALL_OW 69
20895: PUSH
20896: LD_INT 0
20898: PLUS
20899: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20900: LD_ADDR_VAR 0 9
20904: PUSH
20905: LD_INT 22
20907: PUSH
20908: LD_VAR 0 2
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 2
20919: PUSH
20920: LD_INT 30
20922: PUSH
20923: LD_INT 0
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 30
20932: PUSH
20933: LD_INT 1
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: LIST
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PPUSH
20949: CALL_OW 69
20953: ST_TO_ADDR
// crates := 0 ;
20954: LD_ADDR_VAR 0 4
20958: PUSH
20959: LD_INT 0
20961: ST_TO_ADDR
// oil := 0 ;
20962: LD_ADDR_VAR 0 5
20966: PUSH
20967: LD_INT 0
20969: ST_TO_ADDR
// sib := 0 ;
20970: LD_ADDR_VAR 0 6
20974: PUSH
20975: LD_INT 0
20977: ST_TO_ADDR
// if bases then
20978: LD_VAR 0 9
20982: IFFALSE 21088
// begin for j in bases do
20984: LD_ADDR_VAR 0 3
20988: PUSH
20989: LD_VAR 0 9
20993: PUSH
20994: FOR_IN
20995: IFFALSE 21086
// begin base := GetBase ( j ) ;
20997: LD_ADDR_VAR 0 8
21001: PUSH
21002: LD_VAR 0 3
21006: PPUSH
21007: CALL_OW 274
21011: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
21012: LD_ADDR_VAR 0 4
21016: PUSH
21017: LD_VAR 0 4
21021: PUSH
21022: LD_VAR 0 8
21026: PPUSH
21027: LD_INT 1
21029: PPUSH
21030: CALL_OW 275
21034: PLUS
21035: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
21036: LD_ADDR_VAR 0 5
21040: PUSH
21041: LD_VAR 0 5
21045: PUSH
21046: LD_VAR 0 8
21050: PPUSH
21051: LD_INT 2
21053: PPUSH
21054: CALL_OW 275
21058: PLUS
21059: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
21060: LD_ADDR_VAR 0 6
21064: PUSH
21065: LD_VAR 0 6
21069: PUSH
21070: LD_VAR 0 8
21074: PPUSH
21075: LD_INT 3
21077: PPUSH
21078: CALL_OW 275
21082: PLUS
21083: ST_TO_ADDR
// end ;
21084: GO 20994
21086: POP
21087: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
21088: LD_STRING setSpecText(
21090: PUSH
21091: LD_VAR 0 2
21095: STR
21096: PUSH
21097: LD_STRING ,
21099: STR
21100: PUSH
21101: LD_INT 2
21103: STR
21104: PUSH
21105: LD_STRING ,
21107: STR
21108: PUSH
21109: LD_VAR 0 4
21113: STR
21114: PUSH
21115: LD_STRING )
21117: STR
21118: PPUSH
21119: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
21123: LD_STRING setSpecText(
21125: PUSH
21126: LD_VAR 0 2
21130: STR
21131: PUSH
21132: LD_STRING ,
21134: STR
21135: PUSH
21136: LD_INT 3
21138: STR
21139: PUSH
21140: LD_STRING ,
21142: STR
21143: PUSH
21144: LD_VAR 0 5
21148: STR
21149: PUSH
21150: LD_STRING )
21152: STR
21153: PPUSH
21154: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
21158: LD_STRING setSpecText(
21160: PUSH
21161: LD_VAR 0 2
21165: STR
21166: PUSH
21167: LD_STRING ,
21169: STR
21170: PUSH
21171: LD_INT 4
21173: STR
21174: PUSH
21175: LD_STRING ,
21177: STR
21178: PUSH
21179: LD_VAR 0 6
21183: STR
21184: PUSH
21185: LD_STRING )
21187: STR
21188: PPUSH
21189: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
21193: LD_STRING setSpecText(
21195: PUSH
21196: LD_VAR 0 2
21200: STR
21201: PUSH
21202: LD_STRING ,
21204: STR
21205: PUSH
21206: LD_INT 5
21208: STR
21209: PUSH
21210: LD_STRING ,
21212: STR
21213: PUSH
21214: LD_VAR 0 7
21218: STR
21219: PUSH
21220: LD_STRING )
21222: STR
21223: PPUSH
21224: CALL_OW 559
// end ; end ;
21228: GO 20845
21230: POP
21231: POP
// end ;
21232: LD_VAR 0 1
21236: RET
// every 0 0$1 do
21237: GO 21239
21239: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
21240: LD_STRING setSpecLogoNumber(
21242: PUSH
21243: LD_INT 2
21245: STR
21246: PUSH
21247: LD_STRING ,
21249: STR
21250: PUSH
21251: LD_INT 1
21253: STR
21254: PUSH
21255: LD_STRING )
21257: STR
21258: PPUSH
21259: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
21263: LD_STRING setSpecLogoNumber(
21265: PUSH
21266: LD_INT 3
21268: STR
21269: PUSH
21270: LD_STRING ,
21272: STR
21273: PUSH
21274: LD_INT 2
21276: STR
21277: PUSH
21278: LD_STRING )
21280: STR
21281: PPUSH
21282: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
21286: LD_STRING setSpecLogoNumber(
21288: PUSH
21289: LD_INT 4
21291: STR
21292: PUSH
21293: LD_STRING ,
21295: STR
21296: PUSH
21297: LD_INT 3
21299: STR
21300: PUSH
21301: LD_STRING )
21303: STR
21304: PPUSH
21305: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
21309: LD_STRING setSpecLogoNumber(
21311: PUSH
21312: LD_INT 5
21314: STR
21315: PUSH
21316: LD_STRING ,
21318: STR
21319: PUSH
21320: LD_INT 4
21322: STR
21323: PUSH
21324: LD_STRING )
21326: STR
21327: PPUSH
21328: CALL_OW 559
// end ;
21332: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
21333: LD_INT 2
21335: PUSH
21336: LD_INT 30
21338: PUSH
21339: LD_INT 0
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 30
21348: PUSH
21349: LD_INT 1
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: LIST
21360: PPUSH
21361: CALL_OW 69
21365: IFFALSE 21375
21367: GO 21369
21369: DISABLE
// begin enable ;
21370: ENABLE
// UpdateSpectatorBar ;
21371: CALL 20821 0 0
// end ; end_of_file
21375: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
21376: LD_INT 0
21378: PPUSH
21379: PPUSH
21380: PPUSH
// BuildUpTime_Delay = 0 ;
21381: LD_ADDR_EXP 71
21385: PUSH
21386: LD_INT 0
21388: ST_TO_ADDR
// if not def_builduptime then
21389: LD_EXP 17
21393: NOT
21394: IFFALSE 21398
// exit ;
21396: GO 21581
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
21398: LD_ADDR_EXP 71
21402: PUSH
21403: LD_INT 8400
21405: PUSH
21406: LD_INT 2100
21408: PUSH
21409: LD_EXP 17
21413: MUL
21414: PLUS
21415: ST_TO_ADDR
// BuildUpTimeActive := true ;
21416: LD_ADDR_EXP 70
21420: PUSH
21421: LD_INT 1
21423: ST_TO_ADDR
// for i := 1 to 8 do
21424: LD_ADDR_VAR 0 2
21428: PUSH
21429: DOUBLE
21430: LD_INT 1
21432: DEC
21433: ST_TO_ADDR
21434: LD_INT 8
21436: PUSH
21437: FOR_TO
21438: IFFALSE 21579
// if Side_Positions [ i ] then
21440: LD_EXP 43
21444: PUSH
21445: LD_VAR 0 2
21449: ARRAY
21450: IFFALSE 21577
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
21452: LD_EXP 69
21456: PUSH
21457: LD_EXP 43
21461: PUSH
21462: LD_VAR 0 2
21466: ARRAY
21467: ARRAY
21468: PPUSH
21469: LD_INT 5
21471: PPUSH
21472: CALL_OW 424
// for j := 1 to 8 do
21476: LD_ADDR_VAR 0 3
21480: PUSH
21481: DOUBLE
21482: LD_INT 1
21484: DEC
21485: ST_TO_ADDR
21486: LD_INT 8
21488: PUSH
21489: FOR_TO
21490: IFFALSE 21575
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
21492: LD_EXP 43
21496: PUSH
21497: LD_VAR 0 3
21501: ARRAY
21502: PUSH
21503: LD_EXP 40
21507: PUSH
21508: LD_VAR 0 2
21512: ARRAY
21513: PUSH
21514: LD_EXP 40
21518: PUSH
21519: LD_VAR 0 3
21523: ARRAY
21524: NONEQUAL
21525: PUSH
21526: LD_EXP 45
21530: NOT
21531: PUSH
21532: LD_VAR 0 2
21536: PUSH
21537: LD_VAR 0 3
21541: NONEQUAL
21542: AND
21543: OR
21544: AND
21545: IFFALSE 21573
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
21547: LD_VAR 0 3
21551: PPUSH
21552: LD_EXP 69
21556: PUSH
21557: LD_EXP 43
21561: PUSH
21562: LD_VAR 0 2
21566: ARRAY
21567: ARRAY
21568: PPUSH
21569: CALL_OW 333
21573: GO 21489
21575: POP
21576: POP
// end ;
21577: GO 21437
21579: POP
21580: POP
// end ;
21581: LD_VAR 0 1
21585: RET
// export function EndBuildUp ; var i , j ; begin
21586: LD_INT 0
21588: PPUSH
21589: PPUSH
21590: PPUSH
// BuildUpTimeActive := false ;
21591: LD_ADDR_EXP 70
21595: PUSH
21596: LD_INT 0
21598: ST_TO_ADDR
// for i := 1 to 8 do
21599: LD_ADDR_VAR 0 2
21603: PUSH
21604: DOUBLE
21605: LD_INT 1
21607: DEC
21608: ST_TO_ADDR
21609: LD_INT 8
21611: PUSH
21612: FOR_TO
21613: IFFALSE 21754
// if Side_Positions [ i ] then
21615: LD_EXP 43
21619: PUSH
21620: LD_VAR 0 2
21624: ARRAY
21625: IFFALSE 21752
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
21627: LD_EXP 69
21631: PUSH
21632: LD_EXP 43
21636: PUSH
21637: LD_VAR 0 2
21641: ARRAY
21642: ARRAY
21643: PPUSH
21644: LD_INT 0
21646: PPUSH
21647: CALL_OW 424
// for j := 1 to 8 do
21651: LD_ADDR_VAR 0 3
21655: PUSH
21656: DOUBLE
21657: LD_INT 1
21659: DEC
21660: ST_TO_ADDR
21661: LD_INT 8
21663: PUSH
21664: FOR_TO
21665: IFFALSE 21750
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
21667: LD_EXP 43
21671: PUSH
21672: LD_VAR 0 3
21676: ARRAY
21677: PUSH
21678: LD_EXP 40
21682: PUSH
21683: LD_VAR 0 2
21687: ARRAY
21688: PUSH
21689: LD_EXP 40
21693: PUSH
21694: LD_VAR 0 3
21698: ARRAY
21699: NONEQUAL
21700: PUSH
21701: LD_EXP 45
21705: NOT
21706: PUSH
21707: LD_VAR 0 2
21711: PUSH
21712: LD_VAR 0 3
21716: NONEQUAL
21717: AND
21718: OR
21719: AND
21720: IFFALSE 21748
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
21722: LD_VAR 0 3
21726: PPUSH
21727: LD_EXP 69
21731: PUSH
21732: LD_EXP 43
21736: PUSH
21737: LD_VAR 0 2
21741: ARRAY
21742: ARRAY
21743: PPUSH
21744: CALL_OW 334
21748: GO 21664
21750: POP
21751: POP
// end ;
21752: GO 21612
21754: POP
21755: POP
// end ;
21756: LD_VAR 0 1
21760: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
21761: LD_EXP 70
21765: IFFALSE 21940
21767: GO 21769
21769: DISABLE
21770: LD_INT 0
21772: PPUSH
21773: PPUSH
// begin for i := 1 to 8 do
21774: LD_ADDR_VAR 0 1
21778: PUSH
21779: DOUBLE
21780: LD_INT 1
21782: DEC
21783: ST_TO_ADDR
21784: LD_INT 8
21786: PUSH
21787: FOR_TO
21788: IFFALSE 21937
// if Side_Positions [ i ] then
21790: LD_EXP 43
21794: PUSH
21795: LD_VAR 0 1
21799: ARRAY
21800: IFFALSE 21935
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
21802: LD_ADDR_VAR 0 2
21806: PUSH
21807: LD_EXP 69
21811: PUSH
21812: LD_EXP 43
21816: PUSH
21817: LD_VAR 0 1
21821: ARRAY
21822: ARRAY
21823: PPUSH
21824: LD_INT 2
21826: PUSH
21827: LD_INT 21
21829: PUSH
21830: LD_INT 1
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 21
21839: PUSH
21840: LD_INT 2
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 22
21854: PUSH
21855: LD_OWVAR 2
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PPUSH
21868: CALL_OW 70
21872: PUSH
21873: FOR_IN
21874: IFFALSE 21933
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
21876: LD_EXP 40
21880: PUSH
21881: LD_VAR 0 1
21885: ARRAY
21886: PUSH
21887: LD_EXP 40
21891: PUSH
21892: LD_OWVAR 2
21896: ARRAY
21897: NONEQUAL
21898: PUSH
21899: LD_EXP 45
21903: NOT
21904: PUSH
21905: LD_VAR 0 1
21909: PUSH
21910: LD_OWVAR 2
21914: NONEQUAL
21915: AND
21916: OR
21917: IFFALSE 21931
// ComMoveToArea ( un , BuildUpEscape ) ;
21919: LD_VAR 0 2
21923: PPUSH
21924: LD_INT 28
21926: PPUSH
21927: CALL_OW 113
21931: GO 21873
21933: POP
21934: POP
21935: GO 21787
21937: POP
21938: POP
// enable ;
21939: ENABLE
// end ;
21940: PPOPN 2
21942: END
// every 0 0$1 trigger def_builduptime do
21943: LD_EXP 17
21947: IFFALSE 21973
21949: GO 21951
21951: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
21952: LD_INT 8400
21954: PUSH
21955: LD_EXP 17
21959: PUSH
21960: LD_INT 2100
21962: MUL
21963: PLUS
21964: PPUSH
21965: CALL_OW 67
// EndBuildUp ;
21969: CALL 21586 0 0
// end ;
21973: END
