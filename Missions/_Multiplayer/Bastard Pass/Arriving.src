
var free,free1,free2,new1,new2,arr1,arr2,
    seenby1,seenby2;

function displ_status;
  var s1,s2;
  begin
    if not def_people_arrivals then
      exit;
    if def_people_loyality then
      begin
      //  s1:=['#Multi1x1-InfoL',Position_Sides[1],Position_Sides[1],(free1+0),-1];
      //  s2:=['#Multi1x1-InfoL',Position_Sides[2],Position_Sides[2],(free2+0),-1];
        s1:=['#Multi1x1-InfoL',Side_Positions[1],(free1+0)];
        s2:=['#Multi1x1-InfoL',Side_Positions[2],(free2+0)];
        if Side_Positions[your_side]<>2 then
          ExtraStrings:=s1^s2
        else
          ExtraStrings:=s2^s1;
      end
    else
      begin
        ExtraStrings:=['#Multi1x1-InfoNonL',(free+0)];
      end;
  end;

every 0$1 do
  begin
    if not text_info then
      exit;
    displ_status;
    enable;
  end;

export function prepare_arrivals;
  var i,ar,p1,p2,pom1,pom2;
  begin
    arr1:=[];
    arr2:=[];
    for i:=1 to max_arriving_times do
      begin
        case rand(1,100) of
          1..45:
            case rand(1,100) of
              1..10:
                ar:=[Ar1Base1,Ar2Base1];
              11..20:
                ar:=[Ar1Base2,Ar2Base2];
              21..30:
                ar:=[Ar1Between,Ar2Between];
              31..55:
                ar:=[Ar1Out2,Ar2Out2];
              56..80:
                ar:=[Ar1Out1,Ar2Out1];
              81..100:
                ar:=[Ar1Out3,Ar2Out3];
            end;
          46..85:
            case rand(1,100) of
              1..5:
                ar:=[Ar2Base1,Ar1Base1];
              6..15:
                ar:=[Ar2Base2,Ar1Base2];
              16..30:
                ar:=[Ar2Between,Ar1Between];
              31..50:
                ar:=[Ar2Out2,Ar1Out2];
              51..75:
                ar:=[Ar2Out1,Ar1Out1];
              76..100:
                ar:=[Ar2Out3,Ar1Out3];
            end;
          86..100:
            ar:=[valley,valley];
        end;
        arr1:=arr1^[ar[1]];
        arr2:=arr2^[ar[2]];
      end;
    for i:=1 to max_arriving_times div 2 do
      begin
        p1:=Rand(1,max_arriving_times);
        p2:=Rand(1,max_arriving_times);
        pom1:=arr2[p1];
        pom2:=arr2[p2];
        arr2:=Replace(Replace(arr2,p2,pom1),p1,pom2);
      end;
  end;

every 0$1 do
  begin
    if not max_arriving_times then
      exit;

    if tick>=max_arriving_times[1]*0$30 then
      begin
        new1:=Rand(1,max_arriving_times*0$30);
        new2:=Rand(1,max_arriving_times*0$30);
        max_arriving_times:=delete(max_arriving_times,1);
      end;
    enable;
  end;


function new_arrival(pos);
  var hum;
  begin
    if def_people_loyality then
      begin
        uc_side:=second_side[pos];
        uc_nation:=Side_Nations[positions[pos]];
      end
    else
      begin
        uc_side:=second_side;
        uc_nation:=third_nation;
      end;
    PrepareHuman(0,0,initial_level+1);
    hc_class:=class_soldier;
    hum:=CreateHuman;

    if pos=1 then
      begin
        PlaceUnitArea(hum,arr1[1],true);
        arr1:=delete(arr1,1);
      end
    else
      begin
        PlaceUnitArea(hum,arr2[1],true);
        arr2:=delete(arr2,1);
      end;

    repeat wait(0$1) until IsPlaced(hum);

    if def_people_loyality then
      if pos=1 then
        free1:=free1^hum
      else if pos=2 then
        free2:=free2^hum
      else
    else
      free:=free^hum;

  end;

every 0$0.5 trigger new1 do
  var d;
  begin
    enable;
    new1:=0;
    wait(d);
    new_arrival(1);
  end;

every 0$0.5 trigger new2 do
  var d;
  begin
    enable;
    new2:=0;
    wait(d);
    new_arrival(2);
  end;


function check_one_side(un,side);
  begin
    if FilterAllUnits([[f_type,unit_human],[f_side,side],[f_dist,un,3]]) then
      result:=side
    else
      result:=0;
  end;

function check_two_sides(un,side1,side2);
  var un1,s1,s2;
  begin
    s1:=0;
    s2:=0;
    for un1 in FilterAllUnits([[f_type,unit_human],[f_dist,un,3]]) do
      begin
        if GetSide(un1)=side1 then
          s1:=s1+1
        else if GetSide(un1)=side2 then
          s2:=s2+1;
      end;
   if s1=s2 then
     result:=0
   else if s1>s2 then
     result:=1
   else 
     result:=2;
  end;


every 0$2 do
  var un;
  begin
    if def_people_loyality then
      if not fog_info then
        begin
          if your_side then
            if side_positions[your_side]=1 then
              begin
                un:=UnitFilter(free1 diff seenby1, [f_see,your_side]);
                if un then
                  begin
                    CenterNowOnUnits(un[1]);
                    seenby1:=seenby1^un[1];
                  end;
              end
            else if side_positions[your_side]=2 then
              begin
                un:=UnitFilter(free2 diff seenby2, [f_see,your_side]);
                if un then
                  begin
                    CenterNowOnUnits(un[1]);
                    seenby2:=seenby2^un[1];
                  end;
              end;
        end
      else
        begin
          if your_side then
            if side_positions[your_side]=1 then
              begin
                un:=UnitFilter(free diff seenby1, [f_see,your_side]);
                if un then
                  begin
                    CenterNowOnUnits(un[1]);
                    seenby1:=seenby1^un[1];
                  end;
              end
            else if side_positions[your_side]=2 then
              begin
                un:=UnitFilter(free diff seenby2, [f_see,your_side]);
                if un then
                  begin
                    CenterNowOnUnits(un[1]);
                    seenby2:=seenby2^un[1];
                  end;
              end;
        end;
    enable;
  end;

every 0$0.5 do
  var un,s;
  begin
    if def_people_loyality then
      begin
        for un in free1 do
          if not IsLive(un) then
            free1:=free1 diff un
          else if check_one_side(un,positions[1]) then
            begin
              SetSide(un,positions[1]);
              free1:=free1 diff un;
            end;
        for un in free2 do
          if not IsLive(un) then
            free2:=free2 diff un
          else if check_one_side(un,positions[2]) then
            begin
              SetSide(un,positions[2]);
              free2:=free2 diff un;
            end;
      end
    else
      begin
        for un in free do
          if not IsLive(un) then
            free:=free diff un
          else
            begin
              s:=check_two_sides(un,positions[1],positions[2]);
              if s then
                begin
                  SetSide(un,positions[s]);
                  free:=free diff un;
                end;
            end;
      end;
    enable;
  end;
  