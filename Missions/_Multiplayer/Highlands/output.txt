// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , amount_of_apemen , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , extra_sib_deposits_locations , normal_oil_deposits_locations , normal_sib_deposits_locations , battle_flags_id , Side_Comps ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function init_map ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// normal_oil_deposits_locations := [ [ 65 , 49 ] , [ 157 , 62 ] , [ 192 , 143 ] , [ 109 , 147 ] ] ;
   4: LD_ADDR_EXP 40
   8: PUSH
   9: LD_INT 65
  11: PUSH
  12: LD_INT 49
  14: PUSH
  15: EMPTY
  16: LIST
  17: LIST
  18: PUSH
  19: LD_INT 157
  21: PUSH
  22: LD_INT 62
  24: PUSH
  25: EMPTY
  26: LIST
  27: LIST
  28: PUSH
  29: LD_INT 192
  31: PUSH
  32: LD_INT 143
  34: PUSH
  35: EMPTY
  36: LIST
  37: LIST
  38: PUSH
  39: LD_INT 109
  41: PUSH
  42: LD_INT 147
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: EMPTY
  50: LIST
  51: LIST
  52: LIST
  53: LIST
  54: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 22 , 33 ] , [ 179 , 43 ] , [ 228 , 151 ] , [ 83 , 154 ] ] ;
  55: LD_ADDR_EXP 38
  59: PUSH
  60: LD_INT 22
  62: PUSH
  63: LD_INT 33
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 179
  72: PUSH
  73: LD_INT 43
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: LD_INT 228
  82: PUSH
  83: LD_INT 151
  85: PUSH
  86: EMPTY
  87: LIST
  88: LIST
  89: PUSH
  90: LD_INT 83
  92: PUSH
  93: LD_INT 154
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: PUSH
 100: EMPTY
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 39 , 18 ] , [ 138 , 27 ] , [ 222 , 157 ] , [ 82 , 115 ] ] ;
 106: LD_ADDR_EXP 41
 110: PUSH
 111: LD_INT 39
 113: PUSH
 114: LD_INT 18
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: PUSH
 121: LD_INT 138
 123: PUSH
 124: LD_INT 27
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: PUSH
 131: LD_INT 222
 133: PUSH
 134: LD_INT 157
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: PUSH
 141: LD_INT 82
 143: PUSH
 144: LD_INT 115
 146: PUSH
 147: EMPTY
 148: LIST
 149: LIST
 150: PUSH
 151: EMPTY
 152: LIST
 153: LIST
 154: LIST
 155: LIST
 156: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 35 , 55 ] , [ 188 , 70 ] , [ 214 , 123 ] , [ 66 , 120 ] ] ;
 157: LD_ADDR_EXP 39
 161: PUSH
 162: LD_INT 35
 164: PUSH
 165: LD_INT 55
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: PUSH
 172: LD_INT 188
 174: PUSH
 175: LD_INT 70
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: LD_INT 214
 184: PUSH
 185: LD_INT 123
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: LD_INT 66
 194: PUSH
 195: LD_INT 120
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: ST_TO_ADDR
// depot_def := [ [ 54 , 45 , 3 ] , [ 161 , 55 , 5 ] , [ 98 , 142 , 4 ] , [ 194 , 133 , 1 ] ] ;
 208: LD_ADDR_EXP 35
 212: PUSH
 213: LD_INT 54
 215: PUSH
 216: LD_INT 45
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: PUSH
 227: LD_INT 161
 229: PUSH
 230: LD_INT 55
 232: PUSH
 233: LD_INT 5
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 98
 243: PUSH
 244: LD_INT 142
 246: PUSH
 247: LD_INT 4
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: LIST
 254: PUSH
 255: LD_INT 194
 257: PUSH
 258: LD_INT 133
 260: PUSH
 261: LD_INT 1
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: LIST
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: LIST
 274: ST_TO_ADDR
// start_def := [ [ 53 , 52 ] , [ 152 , 45 ] , [ 91 , 140 ] , [ 200 , 132 ] ] ;
 275: LD_ADDR_EXP 37
 279: PUSH
 280: LD_INT 53
 282: PUSH
 283: LD_INT 52
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 152
 292: PUSH
 293: LD_INT 45
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: LD_INT 91
 302: PUSH
 303: LD_INT 140
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 200
 312: PUSH
 313: LD_INT 132
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: ST_TO_ADDR
// breastworks_def := [ [ [ 76 , 75 , 5 ] , [ 72 , 34 , 4 ] , [ 81 , 60 , 5 ] , [ 31 , 31 , 2 ] ] , [ [ 170 , 79 , 5 ] , [ 139 , 42 , 1 ] , [ 171 , 58 , 4 ] , [ 149 , 25 , 3 ] ] , [ [ 114 , 163 , 5 ] , [ 114 , 138 , 4 ] , [ 97 , 116 , 3 ] , [ 81 , 135 , 1 ] ] , [ [ 179 , 116 , 2 ] , [ 175 , 145 , 1 ] , [ 217 , 149 , 4 ] , [ 202 , 158 , 0 ] ] ] ;
 326: LD_ADDR_EXP 36
 330: PUSH
 331: LD_INT 76
 333: PUSH
 334: LD_INT 75
 336: PUSH
 337: LD_INT 5
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 72
 347: PUSH
 348: LD_INT 34
 350: PUSH
 351: LD_INT 4
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 81
 361: PUSH
 362: LD_INT 60
 364: PUSH
 365: LD_INT 5
 367: PUSH
 368: EMPTY
 369: LIST
 370: LIST
 371: LIST
 372: PUSH
 373: LD_INT 31
 375: PUSH
 376: LD_INT 31
 378: PUSH
 379: LD_INT 2
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: LIST
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: PUSH
 393: LD_INT 170
 395: PUSH
 396: LD_INT 79
 398: PUSH
 399: LD_INT 5
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 139
 409: PUSH
 410: LD_INT 42
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: PUSH
 421: LD_INT 171
 423: PUSH
 424: LD_INT 58
 426: PUSH
 427: LD_INT 4
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 149
 437: PUSH
 438: LD_INT 25
 440: PUSH
 441: LD_INT 3
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 114
 457: PUSH
 458: LD_INT 163
 460: PUSH
 461: LD_INT 5
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 114
 471: PUSH
 472: LD_INT 138
 474: PUSH
 475: LD_INT 4
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: PUSH
 483: LD_INT 97
 485: PUSH
 486: LD_INT 116
 488: PUSH
 489: LD_INT 3
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PUSH
 497: LD_INT 81
 499: PUSH
 500: LD_INT 135
 502: PUSH
 503: LD_INT 1
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 179
 519: PUSH
 520: LD_INT 116
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 175
 533: PUSH
 534: LD_INT 145
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 217
 547: PUSH
 548: LD_INT 149
 550: PUSH
 551: LD_INT 4
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 202
 561: PUSH
 562: LD_INT 158
 564: PUSH
 565: LD_INT 0
 567: PUSH
 568: EMPTY
 569: LIST
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: ST_TO_ADDR
// for i in normal_oil_deposits_locations do
 585: LD_ADDR_VAR 0 2
 589: PUSH
 590: LD_EXP 40
 594: PUSH
 595: FOR_IN
 596: IFFALSE 625
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 598: LD_VAR 0 2
 602: PUSH
 603: LD_INT 1
 605: ARRAY
 606: PPUSH
 607: LD_VAR 0 2
 611: PUSH
 612: LD_INT 2
 614: ARRAY
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: CALL_OW 62
 623: GO 595
 625: POP
 626: POP
// if def_extra_oil_deposits then
 627: LD_EXP 6
 631: IFFALSE 675
// for i in extra_oil_deposits_locations do
 633: LD_ADDR_VAR 0 2
 637: PUSH
 638: LD_EXP 38
 642: PUSH
 643: FOR_IN
 644: IFFALSE 673
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 646: LD_VAR 0 2
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: LD_VAR 0 2
 659: PUSH
 660: LD_INT 2
 662: ARRAY
 663: PPUSH
 664: LD_INT 2
 666: PPUSH
 667: CALL_OW 62
 671: GO 643
 673: POP
 674: POP
// if def_extra_sib_deposits > 0 then
 675: LD_EXP 7
 679: PUSH
 680: LD_INT 0
 682: GREATER
 683: IFFALSE 779
// begin for i in normal_sib_deposits_locations do
 685: LD_ADDR_VAR 0 2
 689: PUSH
 690: LD_EXP 41
 694: PUSH
 695: FOR_IN
 696: IFFALSE 725
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 698: LD_VAR 0 2
 702: PUSH
 703: LD_INT 1
 705: ARRAY
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 2
 714: ARRAY
 715: PPUSH
 716: LD_INT 3
 718: PPUSH
 719: CALL_OW 62
 723: GO 695
 725: POP
 726: POP
// if def_extra_sib_deposits = 2 then
 727: LD_EXP 7
 731: PUSH
 732: LD_INT 2
 734: EQUAL
 735: IFFALSE 779
// for i in extra_sib_deposits_locations do
 737: LD_ADDR_VAR 0 2
 741: PUSH
 742: LD_EXP 39
 746: PUSH
 747: FOR_IN
 748: IFFALSE 777
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 750: LD_VAR 0 2
 754: PUSH
 755: LD_INT 1
 757: ARRAY
 758: PPUSH
 759: LD_VAR 0 2
 763: PUSH
 764: LD_INT 2
 766: ARRAY
 767: PPUSH
 768: LD_INT 3
 770: PPUSH
 771: CALL_OW 62
 775: GO 747
 777: POP
 778: POP
// end ; end ;
 779: LD_VAR 0 1
 783: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 784: LD_INT 0
 786: PPUSH
 787: PPUSH
 788: PPUSH
 789: PPUSH
 790: PPUSH
 791: PPUSH
 792: PPUSH
 793: PPUSH
 794: PPUSH
// if MultiPlayer then
 795: LD_OWVAR 4
 799: IFFALSE 863
// begin Game_Type = mp_game_type ;
 801: LD_ADDR_EXP 16
 805: PUSH
 806: LD_OWVAR 6
 810: ST_TO_ADDR
// Your_Side = mp_player_side ;
 811: LD_ADDR_OWVAR 2
 815: PUSH
 816: LD_OWVAR 7
 820: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 821: LD_ADDR_EXP 32
 825: PUSH
 826: LD_OWVAR 17
 830: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 831: LD_ADDR_EXP 30
 835: PUSH
 836: LD_OWVAR 15
 840: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 841: LD_ADDR_EXP 33
 845: PUSH
 846: LD_OWVAR 16
 850: ST_TO_ADDR
// Teams = mp_teams ;
 851: LD_ADDR_EXP 31
 855: PUSH
 856: LD_OWVAR 12
 860: ST_TO_ADDR
// end else
 861: GO 1064
// begin Game_Type = 2 ;
 863: LD_ADDR_EXP 16
 867: PUSH
 868: LD_INT 2
 870: ST_TO_ADDR
// Your_Side = 4 ;
 871: LD_ADDR_OWVAR 2
 875: PUSH
 876: LD_INT 4
 878: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 879: LD_ADDR_EXP 32
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: LD_INT 3
 889: PUSH
 890: LD_INT 0
 892: PUSH
 893: LD_INT 1
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 2
 901: PUSH
 902: LD_INT 4
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 918: LD_ADDR_EXP 30
 922: PUSH
 923: LD_INT 0
 925: PUSH
 926: LD_INT 1
 928: PUSH
 929: LD_INT 0
 931: PUSH
 932: LD_INT 2
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 2
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 957: LD_ADDR_EXP 33
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 3
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: LD_INT 2
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: LD_INT 1
 979: PUSH
 980: LD_INT 3
 982: PUSH
 983: LD_INT 0
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 996: LD_ADDR_EXP 43
1000: PUSH
1001: LD_INT 0
1003: PUSH
1004: LD_INT 0
1006: PUSH
1007: LD_INT 0
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: LD_INT 0
1015: PUSH
1016: LD_INT 0
1018: PUSH
1019: LD_INT 0
1021: PUSH
1022: LD_INT 0
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 4 , 7 ] ] ;
1035: LD_ADDR_EXP 31
1039: PUSH
1040: LD_INT 2
1042: PUSH
1043: LD_INT 6
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: PUSH
1050: LD_INT 4
1052: PUSH
1053: LD_INT 7
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: ST_TO_ADDR
// end ; if MultiPlayer then
1064: LD_OWVAR 4
1068: IFFALSE 1267
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1070: LD_ADDR_EXP 1
1074: PUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 426
1082: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1083: LD_ADDR_EXP 2
1087: PUSH
1088: LD_INT 1
1090: PPUSH
1091: CALL_OW 426
1095: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1096: LD_ADDR_EXP 3
1100: PUSH
1101: LD_INT 2
1103: PPUSH
1104: CALL_OW 426
1108: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1109: LD_ADDR_EXP 4
1113: PUSH
1114: LD_INT 3
1116: PPUSH
1117: CALL_OW 426
1121: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1122: LD_ADDR_EXP 5
1126: PUSH
1127: LD_INT 4
1129: PPUSH
1130: CALL_OW 426
1134: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1135: LD_ADDR_EXP 6
1139: PUSH
1140: LD_INT 5
1142: PPUSH
1143: CALL_OW 426
1147: ST_TO_ADDR
// def_extra_sib_deposits = GetMultiplayerSetting ( 6 ) ;
1148: LD_ADDR_EXP 7
1152: PUSH
1153: LD_INT 6
1155: PPUSH
1156: CALL_OW 426
1160: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1161: LD_ADDR_EXP 8
1165: PUSH
1166: LD_INT 10
1168: PPUSH
1169: CALL_OW 426
1173: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1174: LD_ADDR_EXP 9
1178: PUSH
1179: LD_INT 11
1181: PPUSH
1182: CALL_OW 426
1186: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1187: LD_ADDR_EXP 10
1191: PUSH
1192: LD_INT 12
1194: PPUSH
1195: CALL_OW 426
1199: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1200: LD_ADDR_EXP 11
1204: PUSH
1205: LD_INT 13
1207: PPUSH
1208: CALL_OW 426
1212: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1213: LD_ADDR_EXP 12
1217: PUSH
1218: LD_INT 14
1220: PPUSH
1221: CALL_OW 426
1225: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1226: LD_ADDR_EXP 13
1230: PUSH
1231: LD_INT 15
1233: PPUSH
1234: CALL_OW 426
1238: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
1239: LD_ADDR_EXP 14
1243: PUSH
1244: LD_INT 20
1246: PPUSH
1247: CALL_OW 426
1251: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
1252: LD_ADDR_VAR 0 9
1256: PUSH
1257: LD_INT 22
1259: PPUSH
1260: CALL_OW 426
1264: ST_TO_ADDR
// end else
1265: GO 1391
// begin randomize ;
1267: CALL_OW 10
// def_base_level = 2 ;
1271: LD_ADDR_EXP 1
1275: PUSH
1276: LD_INT 2
1278: ST_TO_ADDR
// def_amount_of_people = 1 ;
1279: LD_ADDR_EXP 2
1283: PUSH
1284: LD_INT 1
1286: ST_TO_ADDR
// def_skill_level = 1 ;
1287: LD_ADDR_EXP 3
1291: PUSH
1292: LD_INT 1
1294: ST_TO_ADDR
// def_starting_resources = 2 ;
1295: LD_ADDR_EXP 4
1299: PUSH
1300: LD_INT 2
1302: ST_TO_ADDR
// def_shipments_density = 50 ;
1303: LD_ADDR_EXP 5
1307: PUSH
1308: LD_INT 50
1310: ST_TO_ADDR
// def_extra_oil_deposits = 1 ;
1311: LD_ADDR_EXP 6
1315: PUSH
1316: LD_INT 1
1318: ST_TO_ADDR
// def_extra_sib_deposits = 1 ;
1319: LD_ADDR_EXP 7
1323: PUSH
1324: LD_INT 1
1326: ST_TO_ADDR
// def_shared_vision = 1 ;
1327: LD_ADDR_EXP 8
1331: PUSH
1332: LD_INT 1
1334: ST_TO_ADDR
// def_morale_flags = 2 ;
1335: LD_ADDR_EXP 9
1339: PUSH
1340: LD_INT 2
1342: ST_TO_ADDR
// def_siberite_detection = 1 ;
1343: LD_ADDR_EXP 10
1347: PUSH
1348: LD_INT 1
1350: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1351: LD_ADDR_EXP 11
1355: PUSH
1356: LD_INT 3
1358: ST_TO_ADDR
// def_people_respawning = 2 ;
1359: LD_ADDR_EXP 12
1363: PUSH
1364: LD_INT 2
1366: ST_TO_ADDR
// def_siberite_bomb = 2 ;
1367: LD_ADDR_EXP 13
1371: PUSH
1372: LD_INT 2
1374: ST_TO_ADDR
// def_builduptime = 2 ;
1375: LD_ADDR_EXP 14
1379: PUSH
1380: LD_INT 2
1382: ST_TO_ADDR
// tech_level = 4 ;
1383: LD_ADDR_VAR 0 9
1387: PUSH
1388: LD_INT 4
1390: ST_TO_ADDR
// end ; if isSGUI then
1391: LD_OWVAR 83
1395: IFFALSE 1403
// setMpTechs ( ) else
1397: CALL 7625 0 0
1401: GO 1416
// SetMpTechLevel ( tech_level + 1 ) ;
1403: LD_VAR 0 9
1407: PUSH
1408: LD_INT 1
1410: PLUS
1411: PPUSH
1412: CALL 7772 0 1
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1416: LD_ADDR_EXP 17
1420: PUSH
1421: LD_INT 0
1423: PUSH
1424: LD_INT 1
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_EXP 1
1443: PUSH
1444: LD_INT 1
1446: PLUS
1447: ARRAY
1448: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1449: LD_ADDR_EXP 18
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 2
1462: PUSH
1463: LD_INT 4
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_EXP 1
1476: PUSH
1477: LD_INT 1
1479: PLUS
1480: ARRAY
1481: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1482: LD_ADDR_EXP 20
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: LD_INT 3
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: LD_INT 5
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: PUSH
1505: LD_EXP 3
1509: PUSH
1510: LD_INT 1
1512: PLUS
1513: ARRAY
1514: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1515: LD_ADDR_EXP 22
1519: PUSH
1520: LD_INT 0
1522: PUSH
1523: LD_INT 0
1525: PUSH
1526: LD_INT 0
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: PUSH
1534: LD_INT 30
1536: PUSH
1537: LD_INT 0
1539: PUSH
1540: LD_INT 0
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 50
1550: PUSH
1551: LD_INT 20
1553: PUSH
1554: LD_INT 0
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: LIST
1561: PUSH
1562: LD_INT 80
1564: PUSH
1565: LD_INT 40
1567: PUSH
1568: LD_INT 20
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: PUSH
1582: LD_EXP 4
1586: PUSH
1587: LD_INT 1
1589: PLUS
1590: ARRAY
1591: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1592: LD_ADDR_EXP 21
1596: PUSH
1597: LD_INT 10
1599: PUSH
1600: EMPTY
1601: LIST
1602: PUSH
1603: LD_INT 7
1605: PUSH
1606: LD_INT 14
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: PUSH
1613: LD_INT 6
1615: PUSH
1616: LD_INT 12
1618: PUSH
1619: LD_INT 18
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: LD_INT 10
1632: PUSH
1633: LD_INT 15
1635: PUSH
1636: LD_INT 20
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: PUSH
1651: LD_EXP 4
1655: PUSH
1656: LD_INT 1
1658: PLUS
1659: ARRAY
1660: ST_TO_ADDR
// number_of_people = def_amount_of_people + 4 ;
1661: LD_ADDR_EXP 19
1665: PUSH
1666: LD_EXP 2
1670: PUSH
1671: LD_INT 4
1673: PLUS
1674: ST_TO_ADDR
// shipments_density = 150 - ( def_shipments_density + 1 ) ;
1675: LD_ADDR_EXP 23
1679: PUSH
1680: LD_INT 150
1682: PUSH
1683: LD_EXP 5
1687: PUSH
1688: LD_INT 1
1690: PLUS
1691: MINUS
1692: ST_TO_ADDR
// amount_of_apemen = [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1693: LD_ADDR_EXP 27
1697: PUSH
1698: LD_INT 0
1700: PUSH
1701: LD_INT 3
1703: PUSH
1704: LD_INT 6
1706: PUSH
1707: LD_INT 9
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: PUSH
1716: LD_EXP 11
1720: PUSH
1721: LD_INT 1
1723: PLUS
1724: ARRAY
1725: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1726: LD_ADDR_EXP 25
1730: PUSH
1731: LD_INT 0
1733: PUSH
1734: LD_INT 8400
1736: PUSH
1737: LD_INT 1750
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_EXP 12
1749: PUSH
1750: LD_INT 1
1752: PLUS
1753: ARRAY
1754: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1755: LD_ADDR_EXP 26
1759: PUSH
1760: LD_INT 0
1762: PUSH
1763: LD_INT 21000
1765: PUSH
1766: LD_INT 4200
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: PUSH
1774: LD_EXP 12
1778: PUSH
1779: LD_INT 1
1781: PLUS
1782: ARRAY
1783: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1784: LD_ADDR_EXP 24
1788: PUSH
1789: LD_INT 1
1791: NEG
1792: PUSH
1793: LD_INT 350
1795: PUSH
1796: LD_INT 700
1798: PUSH
1799: LD_INT 1400
1801: PUSH
1802: LD_INT 0
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: PUSH
1812: LD_EXP 9
1816: PUSH
1817: LD_INT 1
1819: PLUS
1820: ARRAY
1821: ST_TO_ADDR
// battle_flags_id = [ ] ;
1822: LD_ADDR_EXP 42
1826: PUSH
1827: EMPTY
1828: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1829: LD_EXP 13
1833: PUSH
1834: LD_INT 0
1836: EQUAL
1837: IFFALSE 1849
// siberite_bomb_Delay = 0 else
1839: LD_ADDR_EXP 28
1843: PUSH
1844: LD_INT 0
1846: ST_TO_ADDR
1847: GO 1871
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1849: LD_ADDR_EXP 28
1853: PUSH
1854: LD_EXP 13
1858: PUSH
1859: LD_INT 1
1861: MINUS
1862: PUSH
1863: LD_INT 21000
1865: MUL
1866: PUSH
1867: LD_INT 1
1869: PLUS
1870: ST_TO_ADDR
// end ;
1871: LD_VAR 0 1
1875: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1876: LD_INT 0
1878: PPUSH
1879: PPUSH
1880: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1881: LD_ADDR_EXP 34
1885: PUSH
1886: LD_EXP 30
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: EMPTY
1895: LIST
1896: DIFF
1897: PUSH
1898: LD_INT 1
1900: GREATER
1901: ST_TO_ADDR
// if not Team_Game then
1902: LD_EXP 34
1906: NOT
1907: IFFALSE 2005
// begin for i = 1 to 8 do
1909: LD_ADDR_VAR 0 2
1913: PUSH
1914: DOUBLE
1915: LD_INT 1
1917: DEC
1918: ST_TO_ADDR
1919: LD_INT 8
1921: PUSH
1922: FOR_TO
1923: IFFALSE 2001
// for j = 1 to 8 do
1925: LD_ADDR_VAR 0 3
1929: PUSH
1930: DOUBLE
1931: LD_INT 1
1933: DEC
1934: ST_TO_ADDR
1935: LD_INT 8
1937: PUSH
1938: FOR_TO
1939: IFFALSE 1997
// if i <> j then
1941: LD_VAR 0 2
1945: PUSH
1946: LD_VAR 0 3
1950: NONEQUAL
1951: IFFALSE 1975
// SetAttitude ( i , j , att_neutral , true ) else
1953: LD_VAR 0 2
1957: PPUSH
1958: LD_VAR 0 3
1962: PPUSH
1963: LD_INT 0
1965: PPUSH
1966: LD_INT 1
1968: PPUSH
1969: CALL_OW 80
1973: GO 1995
// SetAttitude ( i , j , att_friend , true ) ;
1975: LD_VAR 0 2
1979: PPUSH
1980: LD_VAR 0 3
1984: PPUSH
1985: LD_INT 1
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: CALL_OW 80
1995: GO 1938
1997: POP
1998: POP
1999: GO 1922
2001: POP
2002: POP
// end else
2003: GO 2180
// begin if def_shared_vision then
2005: LD_EXP 8
2009: IFFALSE 2074
// begin for i in Teams do
2011: LD_ADDR_VAR 0 2
2015: PUSH
2016: LD_EXP 31
2020: PUSH
2021: FOR_IN
2022: IFFALSE 2072
// for j = 2 to i do
2024: LD_ADDR_VAR 0 3
2028: PUSH
2029: DOUBLE
2030: LD_INT 2
2032: DEC
2033: ST_TO_ADDR
2034: LD_VAR 0 2
2038: PUSH
2039: FOR_TO
2040: IFFALSE 2068
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2042: LD_VAR 0 2
2046: PUSH
2047: LD_VAR 0 3
2051: ARRAY
2052: PPUSH
2053: LD_VAR 0 2
2057: PUSH
2058: LD_INT 1
2060: ARRAY
2061: PPUSH
2062: CALL_OW 343
2066: GO 2039
2068: POP
2069: POP
2070: GO 2021
2072: POP
2073: POP
// end ; for i = 1 to 8 do
2074: LD_ADDR_VAR 0 2
2078: PUSH
2079: DOUBLE
2080: LD_INT 1
2082: DEC
2083: ST_TO_ADDR
2084: LD_INT 8
2086: PUSH
2087: FOR_TO
2088: IFFALSE 2178
// for j = 1 to 8 do
2090: LD_ADDR_VAR 0 3
2094: PUSH
2095: DOUBLE
2096: LD_INT 1
2098: DEC
2099: ST_TO_ADDR
2100: LD_INT 8
2102: PUSH
2103: FOR_TO
2104: IFFALSE 2174
// if Side_Teams [ i ] = Side_Teams [ j ] then
2106: LD_EXP 30
2110: PUSH
2111: LD_VAR 0 2
2115: ARRAY
2116: PUSH
2117: LD_EXP 30
2121: PUSH
2122: LD_VAR 0 3
2126: ARRAY
2127: EQUAL
2128: IFFALSE 2152
// SetAttitude ( i , j , att_friend , true ) else
2130: LD_VAR 0 2
2134: PPUSH
2135: LD_VAR 0 3
2139: PPUSH
2140: LD_INT 1
2142: PPUSH
2143: LD_INT 1
2145: PPUSH
2146: CALL_OW 80
2150: GO 2172
// SetAttitude ( i , j , att_enemy , true ) ;
2152: LD_VAR 0 2
2156: PPUSH
2157: LD_VAR 0 3
2161: PPUSH
2162: LD_INT 2
2164: PPUSH
2165: LD_INT 1
2167: PPUSH
2168: CALL_OW 80
2172: GO 2103
2174: POP
2175: POP
2176: GO 2087
2178: POP
2179: POP
// end ; end ;
2180: LD_VAR 0 1
2184: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2185: LD_INT 0
2187: PPUSH
2188: PPUSH
2189: PPUSH
2190: PPUSH
// result := [ ] ;
2191: LD_ADDR_VAR 0 7
2195: PUSH
2196: EMPTY
2197: ST_TO_ADDR
// for i := 1 to count do
2198: LD_ADDR_VAR 0 8
2202: PUSH
2203: DOUBLE
2204: LD_INT 1
2206: DEC
2207: ST_TO_ADDR
2208: LD_VAR 0 1
2212: PUSH
2213: FOR_TO
2214: IFFALSE 2632
// begin uc_direction := Rand ( 0 , 5 ) ;
2216: LD_ADDR_OWVAR 24
2220: PUSH
2221: LD_INT 0
2223: PPUSH
2224: LD_INT 5
2226: PPUSH
2227: CALL_OW 12
2231: ST_TO_ADDR
// if commander then
2232: LD_LOC 1
2236: IFFALSE 2345
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2238: LD_ADDR_OWVAR 26
2242: PUSH
2243: LD_OWVAR 19
2247: PUSH
2248: LD_OWVAR 20
2252: ARRAY
2253: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2254: LD_INT 1
2256: PPUSH
2257: LD_INT 2
2259: PPUSH
2260: CALL_OW 12
2264: PPUSH
2265: LD_VAR 0 2
2269: PPUSH
2270: LD_EXP 20
2274: PUSH
2275: LD_INT 2
2277: PLUS
2278: PPUSH
2279: CALL_OW 380
// hc_importance := 105 ;
2283: LD_ADDR_OWVAR 32
2287: PUSH
2288: LD_INT 105
2290: ST_TO_ADDR
// commander := false ;
2291: LD_ADDR_LOC 1
2295: PUSH
2296: LD_INT 0
2298: ST_TO_ADDR
// if Multiplayer then
2299: LD_OWVAR 4
2303: IFFALSE 2343
// begin hc_gallery := MULTIAVATARS ;
2305: LD_ADDR_OWVAR 33
2309: PUSH
2310: LD_STRING MULTIAVATARS
2312: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2313: LD_ADDR_OWVAR 34
2317: PUSH
2318: LD_OWVAR 20
2322: PPUSH
2323: CALL_OW 525
2327: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2328: LD_ADDR_OWVAR 27
2332: PUSH
2333: LD_OWVAR 20
2337: PPUSH
2338: CALL_OW 526
2342: ST_TO_ADDR
// end ; end else
2343: GO 2408
// begin hc_name :=  ;
2345: LD_ADDR_OWVAR 26
2349: PUSH
2350: LD_STRING 
2352: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2353: LD_INT 1
2355: PPUSH
2356: LD_INT 2
2358: PPUSH
2359: CALL_OW 12
2363: PPUSH
2364: LD_VAR 0 2
2368: PPUSH
2369: LD_EXP 20
2373: PPUSH
2374: CALL_OW 380
// hc_importance := 0 ;
2378: LD_ADDR_OWVAR 32
2382: PUSH
2383: LD_INT 0
2385: ST_TO_ADDR
// if Multiplayer then
2386: LD_OWVAR 4
2390: IFFALSE 2408
// begin hc_gallery :=  ;
2392: LD_ADDR_OWVAR 33
2396: PUSH
2397: LD_STRING 
2399: ST_TO_ADDR
// hc_face_number := 0 ;
2400: LD_ADDR_OWVAR 34
2404: PUSH
2405: LD_INT 0
2407: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2408: LD_ADDR_VAR 0 10
2412: PUSH
2413: CALL_OW 44
2417: ST_TO_ADDR
// if global_defined then
2418: LD_LOC 3
2422: IFFALSE 2562
// begin if ( cl = class_soldier ) then
2424: LD_VAR 0 2
2428: PUSH
2429: LD_INT 1
2431: EQUAL
2432: IFFALSE 2452
// j := i + soldiers_created else
2434: LD_ADDR_VAR 0 9
2438: PUSH
2439: LD_VAR 0 8
2443: PUSH
2444: LD_LOC 4
2448: PLUS
2449: ST_TO_ADDR
2450: GO 2462
// j := i ;
2452: LD_ADDR_VAR 0 9
2456: PUSH
2457: LD_VAR 0 8
2461: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2462: LD_LOC 2
2466: PUSH
2467: LD_VAR 0 2
2471: ARRAY
2472: PUSH
2473: LD_VAR 0 9
2477: ARRAY
2478: PPUSH
2479: LD_VAR 0 10
2483: PPUSH
2484: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2488: LD_VAR 0 10
2492: PPUSH
2493: LD_INT 2
2495: PPUSH
2496: LD_LOC 2
2500: PUSH
2501: LD_VAR 0 2
2505: ARRAY
2506: PUSH
2507: LD_VAR 0 9
2511: ARRAY
2512: PPUSH
2513: LD_INT 2
2515: PPUSH
2516: CALL_OW 260
2520: PPUSH
2521: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2525: LD_VAR 0 10
2529: PPUSH
2530: LD_INT 1
2532: PPUSH
2533: LD_LOC 2
2537: PUSH
2538: LD_VAR 0 2
2542: ARRAY
2543: PUSH
2544: LD_VAR 0 9
2548: ARRAY
2549: PPUSH
2550: LD_INT 1
2552: PPUSH
2553: CALL_OW 260
2557: PPUSH
2558: CALL_OW 239
// end ; if building then
2562: LD_VAR 0 6
2566: IFFALSE 2584
// PlaceHumanInUnit ( un , building ) else
2568: LD_VAR 0 10
2572: PPUSH
2573: LD_VAR 0 6
2577: PPUSH
2578: CALL_OW 52
2582: GO 2611
// PlaceUnitXYR ( un , x , y , r , false ) ;
2584: LD_VAR 0 10
2588: PPUSH
2589: LD_VAR 0 3
2593: PPUSH
2594: LD_VAR 0 4
2598: PPUSH
2599: LD_VAR 0 5
2603: PPUSH
2604: LD_INT 0
2606: PPUSH
2607: CALL_OW 50
// result := result ^ [ un ] ;
2611: LD_ADDR_VAR 0 7
2615: PUSH
2616: LD_VAR 0 7
2620: PUSH
2621: LD_VAR 0 10
2625: PUSH
2626: EMPTY
2627: LIST
2628: ADD
2629: ST_TO_ADDR
// end ;
2630: GO 2213
2632: POP
2633: POP
// if not global_defined then
2634: LD_LOC 3
2638: NOT
2639: IFFALSE 2717
// if ( global_units >= cl ) then
2641: LD_LOC 2
2645: PUSH
2646: LD_VAR 0 2
2650: GREATEREQUAL
2651: IFFALSE 2692
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2653: LD_ADDR_LOC 2
2657: PUSH
2658: LD_LOC 2
2662: PPUSH
2663: LD_VAR 0 2
2667: PPUSH
2668: LD_LOC 2
2672: PUSH
2673: LD_VAR 0 2
2677: ARRAY
2678: PUSH
2679: LD_VAR 0 7
2683: ADD
2684: PPUSH
2685: CALL_OW 1
2689: ST_TO_ADDR
2690: GO 2717
// global_units := Replace ( global_units , cl , result ) ;
2692: LD_ADDR_LOC 2
2696: PUSH
2697: LD_LOC 2
2701: PPUSH
2702: LD_VAR 0 2
2706: PPUSH
2707: LD_VAR 0 7
2711: PPUSH
2712: CALL_OW 1
2716: ST_TO_ADDR
// end ;
2717: LD_VAR 0 7
2721: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2722: LD_INT 0
2724: PPUSH
2725: PPUSH
2726: PPUSH
2727: PPUSH
2728: PPUSH
2729: PPUSH
2730: PPUSH
2731: PPUSH
2732: PPUSH
// pos := Side_Positions [ side ] ;
2733: LD_ADDR_VAR 0 3
2737: PUSH
2738: LD_EXP 32
2742: PUSH
2743: LD_VAR 0 1
2747: ARRAY
2748: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2749: LD_ADDR_OWVAR 21
2753: PUSH
2754: LD_EXP 33
2758: PUSH
2759: LD_VAR 0 1
2763: ARRAY
2764: ST_TO_ADDR
// uc_side := side ;
2765: LD_ADDR_OWVAR 20
2769: PUSH
2770: LD_VAR 0 1
2774: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2775: LD_ADDR_VAR 0 4
2779: PUSH
2780: LD_EXP 35
2784: PUSH
2785: LD_VAR 0 3
2789: ARRAY
2790: PUSH
2791: LD_INT 1
2793: ARRAY
2794: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2795: LD_ADDR_VAR 0 5
2799: PUSH
2800: LD_EXP 35
2804: PUSH
2805: LD_VAR 0 3
2809: ARRAY
2810: PUSH
2811: LD_INT 2
2813: ARRAY
2814: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2815: LD_ADDR_VAR 0 6
2819: PUSH
2820: LD_EXP 35
2824: PUSH
2825: LD_VAR 0 3
2829: ARRAY
2830: PUSH
2831: LD_INT 3
2833: ARRAY
2834: ST_TO_ADDR
// if is_depot then
2835: LD_EXP 17
2839: IFFALSE 2972
// begin bc_type = b_depot ;
2841: LD_ADDR_OWVAR 42
2845: PUSH
2846: LD_INT 0
2848: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2849: LD_ADDR_VAR 0 10
2853: PUSH
2854: LD_VAR 0 4
2858: PPUSH
2859: LD_VAR 0 5
2863: PPUSH
2864: LD_VAR 0 6
2868: PPUSH
2869: CALL_OW 47
2873: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2874: LD_VAR 0 10
2878: PPUSH
2879: LD_STRING @
2881: PUSH
2882: LD_VAR 0 1
2886: STR
2887: PPUSH
2888: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2892: LD_VAR 0 10
2896: PPUSH
2897: CALL_OW 274
2901: PPUSH
2902: LD_INT 1
2904: PPUSH
2905: LD_EXP 22
2909: PUSH
2910: LD_INT 1
2912: ARRAY
2913: PPUSH
2914: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2918: LD_VAR 0 10
2922: PPUSH
2923: CALL_OW 274
2927: PPUSH
2928: LD_INT 2
2930: PPUSH
2931: LD_EXP 22
2935: PUSH
2936: LD_INT 2
2938: ARRAY
2939: PPUSH
2940: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2944: LD_VAR 0 10
2948: PPUSH
2949: CALL_OW 274
2953: PPUSH
2954: LD_INT 3
2956: PPUSH
2957: LD_EXP 22
2961: PUSH
2962: LD_INT 3
2964: ARRAY
2965: PPUSH
2966: CALL_OW 277
// end else
2970: GO 3116
// begin for i := 1 to 3 do
2972: LD_ADDR_VAR 0 7
2976: PUSH
2977: DOUBLE
2978: LD_INT 1
2980: DEC
2981: ST_TO_ADDR
2982: LD_INT 3
2984: PUSH
2985: FOR_TO
2986: IFFALSE 3114
// begin r := starting_resources [ i ] ;
2988: LD_ADDR_VAR 0 8
2992: PUSH
2993: LD_EXP 22
2997: PUSH
2998: LD_VAR 0 7
3002: ARRAY
3003: ST_TO_ADDR
// while r >= 10 do
3004: LD_VAR 0 8
3008: PUSH
3009: LD_INT 10
3011: GREATEREQUAL
3012: IFFALSE 3112
// if r > 50 then
3014: LD_VAR 0 8
3018: PUSH
3019: LD_INT 50
3021: GREATER
3022: IFFALSE 3068
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3024: LD_VAR 0 7
3028: PPUSH
3029: LD_INT 5
3031: PPUSH
3032: LD_VAR 0 4
3036: PPUSH
3037: LD_VAR 0 5
3041: PPUSH
3042: LD_INT 4
3044: PPUSH
3045: LD_INT 0
3047: PPUSH
3048: CALL_OW 60
// r := r - 50 ;
3052: LD_ADDR_VAR 0 8
3056: PUSH
3057: LD_VAR 0 8
3061: PUSH
3062: LD_INT 50
3064: MINUS
3065: ST_TO_ADDR
// end else
3066: GO 3110
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3068: LD_VAR 0 7
3072: PPUSH
3073: LD_VAR 0 8
3077: PUSH
3078: LD_INT 10
3080: DIV
3081: PPUSH
3082: LD_VAR 0 4
3086: PPUSH
3087: LD_VAR 0 5
3091: PPUSH
3092: LD_INT 4
3094: PPUSH
3095: LD_INT 0
3097: PPUSH
3098: CALL_OW 60
// r := 0 ;
3102: LD_ADDR_VAR 0 8
3106: PUSH
3107: LD_INT 0
3109: ST_TO_ADDR
// end ;
3110: GO 3004
// end ;
3112: GO 2985
3114: POP
3115: POP
// end ; for r in starting_crates do
3116: LD_ADDR_VAR 0 8
3120: PUSH
3121: LD_EXP 21
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3159
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3129: LD_INT 1
3131: PPUSH
3132: LD_INT 5
3134: PPUSH
3135: LD_VAR 0 4
3139: PPUSH
3140: LD_VAR 0 5
3144: PPUSH
3145: LD_VAR 0 8
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 60
3157: GO 3126
3159: POP
3160: POP
// if def_morale_flags then
3161: LD_EXP 9
3165: IFFALSE 3304
// begin x := start_def [ pos ] [ 1 ] ;
3167: LD_ADDR_VAR 0 4
3171: PUSH
3172: LD_EXP 37
3176: PUSH
3177: LD_VAR 0 3
3181: ARRAY
3182: PUSH
3183: LD_INT 1
3185: ARRAY
3186: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3187: LD_ADDR_VAR 0 5
3191: PUSH
3192: LD_EXP 37
3196: PUSH
3197: LD_VAR 0 3
3201: ARRAY
3202: PUSH
3203: LD_INT 2
3205: ARRAY
3206: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3207: LD_VAR 0 4
3211: PPUSH
3212: LD_VAR 0 5
3216: PPUSH
3217: LD_INT 12
3219: PPUSH
3220: LD_INT 2
3222: PPUSH
3223: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3227: LD_ADDR_EXP 42
3231: PUSH
3232: LD_EXP 42
3236: PUSH
3237: LD_VAR 0 1
3241: PPUSH
3242: LD_VAR 0 4
3246: PPUSH
3247: LD_VAR 0 5
3251: PPUSH
3252: LD_INT 1
3254: PUSH
3255: LD_INT 100
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: PUSH
3262: LD_INT 2
3264: PUSH
3265: LD_INT 50
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 3
3274: PUSH
3275: LD_INT 20
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: LD_INT 20
3284: PUSH
3285: LD_INT 100
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 418
3302: ADD
3303: ST_TO_ADDR
// end ; commander := true ;
3304: LD_ADDR_LOC 1
3308: PUSH
3309: LD_INT 1
3311: ST_TO_ADDR
// soldiers_created := 0 ;
3312: LD_ADDR_LOC 4
3316: PUSH
3317: LD_INT 0
3319: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3320: LD_ADDR_VAR 0 7
3324: PUSH
3325: DOUBLE
3326: LD_INT 1
3328: DEC
3329: ST_TO_ADDR
3330: LD_EXP 18
3334: PUSH
3335: FOR_TO
3336: IFFALSE 3489
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3338: LD_ADDR_VAR 0 4
3342: PUSH
3343: LD_EXP 36
3347: PUSH
3348: LD_VAR 0 3
3352: ARRAY
3353: PUSH
3354: LD_VAR 0 7
3358: ARRAY
3359: PUSH
3360: LD_INT 1
3362: ARRAY
3363: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3364: LD_ADDR_VAR 0 5
3368: PUSH
3369: LD_EXP 36
3373: PUSH
3374: LD_VAR 0 3
3378: ARRAY
3379: PUSH
3380: LD_VAR 0 7
3384: ARRAY
3385: PUSH
3386: LD_INT 2
3388: ARRAY
3389: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3390: LD_ADDR_VAR 0 6
3394: PUSH
3395: LD_EXP 36
3399: PUSH
3400: LD_VAR 0 3
3404: ARRAY
3405: PUSH
3406: LD_VAR 0 7
3410: ARRAY
3411: PUSH
3412: LD_INT 3
3414: ARRAY
3415: ST_TO_ADDR
// bc_type := b_breastwork ;
3416: LD_ADDR_OWVAR 42
3420: PUSH
3421: LD_INT 31
3423: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3424: LD_ADDR_VAR 0 9
3428: PUSH
3429: LD_VAR 0 4
3433: PPUSH
3434: LD_VAR 0 5
3438: PPUSH
3439: LD_VAR 0 6
3443: PPUSH
3444: CALL_OW 47
3448: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3449: LD_INT 1
3451: PPUSH
3452: LD_INT 1
3454: PPUSH
3455: LD_INT 0
3457: PPUSH
3458: LD_INT 0
3460: PPUSH
3461: LD_INT 0
3463: PPUSH
3464: LD_VAR 0 9
3468: PPUSH
3469: CALL 2185 0 6
// soldiers_created := soldiers_created + 1 ;
3473: LD_ADDR_LOC 4
3477: PUSH
3478: LD_LOC 4
3482: PUSH
3483: LD_INT 1
3485: PLUS
3486: ST_TO_ADDR
// end ;
3487: GO 3335
3489: POP
3490: POP
// x := start_def [ pos ] [ 1 ] ;
3491: LD_ADDR_VAR 0 4
3495: PUSH
3496: LD_EXP 37
3500: PUSH
3501: LD_VAR 0 3
3505: ARRAY
3506: PUSH
3507: LD_INT 1
3509: ARRAY
3510: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3511: LD_ADDR_VAR 0 5
3515: PUSH
3516: LD_EXP 37
3520: PUSH
3521: LD_VAR 0 3
3525: ARRAY
3526: PUSH
3527: LD_INT 2
3529: ARRAY
3530: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3531: LD_LOC 8
3535: PUSH
3536: LD_EXP 18
3540: MINUS
3541: PPUSH
3542: LD_INT 1
3544: PPUSH
3545: LD_VAR 0 4
3549: PPUSH
3550: LD_VAR 0 5
3554: PPUSH
3555: LD_INT 5
3557: PPUSH
3558: LD_INT 0
3560: PPUSH
3561: CALL 2185 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3565: LD_LOC 5
3569: PPUSH
3570: LD_INT 2
3572: PPUSH
3573: LD_VAR 0 4
3577: PPUSH
3578: LD_VAR 0 5
3582: PPUSH
3583: LD_INT 5
3585: PPUSH
3586: LD_INT 0
3588: PPUSH
3589: CALL 2185 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3593: LD_LOC 7
3597: PPUSH
3598: LD_INT 3
3600: PPUSH
3601: LD_VAR 0 4
3605: PPUSH
3606: LD_VAR 0 5
3610: PPUSH
3611: LD_INT 5
3613: PPUSH
3614: LD_INT 0
3616: PPUSH
3617: CALL 2185 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3621: LD_LOC 6
3625: PPUSH
3626: LD_INT 4
3628: PPUSH
3629: LD_VAR 0 4
3633: PPUSH
3634: LD_VAR 0 5
3638: PPUSH
3639: LD_INT 5
3641: PPUSH
3642: LD_INT 0
3644: PPUSH
3645: CALL 2185 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3649: LD_EXP 10
3653: PUSH
3654: LD_INT 20
3656: PPUSH
3657: LD_VAR 0 1
3661: PPUSH
3662: CALL_OW 321
3666: PUSH
3667: LD_INT 1
3669: EQUAL
3670: AND
3671: IFFALSE 3688
// SetTech ( tech_SibDet , side , state_researched ) ;
3673: LD_INT 20
3675: PPUSH
3676: LD_VAR 0 1
3680: PPUSH
3681: LD_INT 2
3683: PPUSH
3684: CALL_OW 322
// if def_siberite_bomb = 1 then
3688: LD_EXP 13
3692: PUSH
3693: LD_INT 1
3695: EQUAL
3696: IFFALSE 3730
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3698: LD_INT 25
3700: PPUSH
3701: LD_VAR 0 1
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3713: LD_INT 73
3715: PPUSH
3716: LD_VAR 0 1
3720: PPUSH
3721: LD_INT 1
3723: PPUSH
3724: CALL_OW 322
// end else
3728: GO 3760
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3730: LD_INT 25
3732: PPUSH
3733: LD_VAR 0 1
3737: PPUSH
3738: LD_INT 0
3740: PPUSH
3741: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3745: LD_INT 73
3747: PPUSH
3748: LD_VAR 0 1
3752: PPUSH
3753: LD_INT 0
3755: PPUSH
3756: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3760: LD_INT 24
3762: PPUSH
3763: LD_VAR 0 1
3767: PPUSH
3768: LD_INT 0
3770: PPUSH
3771: CALL_OW 322
// global_defined := true ;
3775: LD_ADDR_LOC 3
3779: PUSH
3780: LD_INT 1
3782: ST_TO_ADDR
// end ;
3783: LD_VAR 0 2
3787: RET
// every 0 0$1 do
3788: GO 3790
3790: DISABLE
// if ( def_siberite_bomb > 1 ) then
3791: LD_EXP 13
3795: PUSH
3796: LD_INT 1
3798: GREATER
3799: IFFALSE 3814
// begin wait ( siberite_bomb_Delay ) ;
3801: LD_EXP 28
3805: PPUSH
3806: CALL_OW 67
// EnableSibFiss ;
3810: CALL 3815 0 0
// end ;
3814: END
// function EnableSibFiss ; var i ; begin
3815: LD_INT 0
3817: PPUSH
3818: PPUSH
// for i := 1 to 8 do
3819: LD_ADDR_VAR 0 2
3823: PUSH
3824: DOUBLE
3825: LD_INT 1
3827: DEC
3828: ST_TO_ADDR
3829: LD_INT 8
3831: PUSH
3832: FOR_TO
3833: IFFALSE 3879
// if Side_Positions [ i ] then
3835: LD_EXP 32
3839: PUSH
3840: LD_VAR 0 2
3844: ARRAY
3845: IFFALSE 3877
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3847: LD_INT 25
3849: PPUSH
3850: LD_VAR 0 2
3854: PPUSH
3855: LD_INT 1
3857: PPUSH
3858: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3862: LD_INT 73
3864: PPUSH
3865: LD_VAR 0 2
3869: PPUSH
3870: LD_INT 1
3872: PPUSH
3873: CALL_OW 322
// end ;
3877: GO 3832
3879: POP
3880: POP
// end ;
3881: LD_VAR 0 1
3885: RET
// function prepare_sides ; var i ; begin
3886: LD_INT 0
3888: PPUSH
3889: PPUSH
// global_units := [ ] ;
3890: LD_ADDR_LOC 2
3894: PUSH
3895: EMPTY
3896: ST_TO_ADDR
// global_defined := false ;
3897: LD_ADDR_LOC 3
3901: PUSH
3902: LD_INT 0
3904: ST_TO_ADDR
// CountClassMembers ;
3905: CALL 3955 0 0
// for i := 1 to 8 do
3909: LD_ADDR_VAR 0 2
3913: PUSH
3914: DOUBLE
3915: LD_INT 1
3917: DEC
3918: ST_TO_ADDR
3919: LD_INT 8
3921: PUSH
3922: FOR_TO
3923: IFFALSE 3948
// if Side_Positions [ i ] then
3925: LD_EXP 32
3929: PUSH
3930: LD_VAR 0 2
3934: ARRAY
3935: IFFALSE 3946
// prepare_side ( i ) ;
3937: LD_VAR 0 2
3941: PPUSH
3942: CALL 2722 0 1
3946: GO 3922
3948: POP
3949: POP
// end ;
3950: LD_VAR 0 1
3954: RET
// function CountClassMembers ; var Mode ; begin
3955: LD_INT 0
3957: PPUSH
3958: PPUSH
// if No_Mechs then
3959: LD_EXP 15
3963: IFFALSE 3975
// Mode := 2 else
3965: LD_ADDR_VAR 0 2
3969: PUSH
3970: LD_INT 2
3972: ST_TO_ADDR
3973: GO 3983
// Mode := 1 ;
3975: LD_ADDR_VAR 0 2
3979: PUSH
3980: LD_INT 1
3982: ST_TO_ADDR
// neng := number_of_people ;
3983: LD_ADDR_LOC 5
3987: PUSH
3988: LD_EXP 19
3992: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
3993: LD_ADDR_LOC 8
3997: PUSH
3998: LD_LOC 5
4002: PUSH
4003: LD_INT 4
4005: PUSH
4006: LD_INT 3
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_VAR 0 2
4017: ARRAY
4018: DIV
4019: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4020: LD_LOC 8
4024: PUSH
4025: LD_EXP 18
4029: LESS
4030: IFFALSE 4042
// nsol := number_of_breastworks ;
4032: LD_ADDR_LOC 8
4036: PUSH
4037: LD_EXP 18
4041: ST_TO_ADDR
// neng := neng - nsol ;
4042: LD_ADDR_LOC 5
4046: PUSH
4047: LD_LOC 5
4051: PUSH
4052: LD_LOC 8
4056: MINUS
4057: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4058: LD_ADDR_LOC 6
4062: PUSH
4063: LD_LOC 5
4067: PUSH
4068: LD_INT 3
4070: PUSH
4071: LD_INT 2
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PUSH
4078: LD_VAR 0 2
4082: ARRAY
4083: DIV
4084: ST_TO_ADDR
// if ( nsci < 1 ) then
4085: LD_LOC 6
4089: PUSH
4090: LD_INT 1
4092: LESS
4093: IFFALSE 4103
// nsci := 1 ;
4095: LD_ADDR_LOC 6
4099: PUSH
4100: LD_INT 1
4102: ST_TO_ADDR
// neng := neng - nsci ;
4103: LD_ADDR_LOC 5
4107: PUSH
4108: LD_LOC 5
4112: PUSH
4113: LD_LOC 6
4117: MINUS
4118: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4119: LD_ADDR_LOC 7
4123: PUSH
4124: LD_LOC 5
4128: PUSH
4129: LD_INT 2
4131: DIV
4132: PUSH
4133: LD_INT 0
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: LD_VAR 0 2
4144: ARRAY
4145: ST_TO_ADDR
// neng := neng - nmech ;
4146: LD_ADDR_LOC 5
4150: PUSH
4151: LD_LOC 5
4155: PUSH
4156: LD_LOC 7
4160: MINUS
4161: ST_TO_ADDR
// if ( neng < 1 ) then
4162: LD_LOC 5
4166: PUSH
4167: LD_INT 1
4169: LESS
4170: IFFALSE 4180
// neng := 1 ;
4172: LD_ADDR_LOC 5
4176: PUSH
4177: LD_INT 1
4179: ST_TO_ADDR
// end ;
4180: LD_VAR 0 1
4184: RET
// starting begin disable ( 98 ) ;
4185: LD_INT 98
4187: DISABLE_MARKED
// disable ( 99 ) ;
4188: LD_INT 99
4190: DISABLE_MARKED
// disable ( 400 ) ;
4191: LD_INT 400
4193: DISABLE_MARKED
// disable ( 401 ) ;
4194: LD_INT 401
4196: DISABLE_MARKED
// mp_selectmsg := true ;
4197: LD_ADDR_OWVAR 13
4201: PUSH
4202: LD_INT 1
4204: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4205: CALL 784 0 0
// init_map ;
4209: CALL 0 0 0
// init_respawning ;
4213: CALL 12349 0 0
// set_shared_visions_and_alliances ;
4217: CALL 1876 0 0
// ResetFog ;
4221: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4225: LD_OWVAR 2
4229: PPUSH
4230: CALL_OW 520
// prepare_sides ;
4234: CALL 3886 0 0
// Init_Win_Condition ;
4238: CALL 6330 0 0
// ShowTimer ;
4242: CALL 5908 0 0
// music_nat := Side_Nations [ your_side ] ;
4246: LD_ADDR_OWVAR 71
4250: PUSH
4251: LD_EXP 33
4255: PUSH
4256: LD_OWVAR 2
4260: ARRAY
4261: ST_TO_ADDR
// if IAmSpec then
4262: CALL_OW 531
4266: IFFALSE 4290
// begin fogoff ( true ) ;
4268: LD_INT 1
4270: PPUSH
4271: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
4275: LD_INT 104
4277: PPUSH
4278: LD_INT 69
4280: PPUSH
4281: CALL_OW 86
// enable ( 400 ) ;
4285: LD_INT 400
4287: ENABLE_MARKED
// end else
4288: GO 4336
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4290: LD_EXP 37
4294: PUSH
4295: LD_EXP 32
4299: PUSH
4300: LD_OWVAR 2
4304: ARRAY
4305: ARRAY
4306: PUSH
4307: LD_INT 1
4309: ARRAY
4310: PPUSH
4311: LD_EXP 37
4315: PUSH
4316: LD_EXP 32
4320: PUSH
4321: LD_OWVAR 2
4325: ARRAY
4326: ARRAY
4327: PUSH
4328: LD_INT 2
4330: ARRAY
4331: PPUSH
4332: CALL_OW 86
// end ; AnimateTrees ( true ) ;
4336: LD_INT 1
4338: PPUSH
4339: CALL_OW 573
// BuildUpAreas := [ base_nw , base_ne , base_sw , base_se ] ;
4343: LD_ADDR_EXP 47
4347: PUSH
4348: LD_INT 8
4350: PUSH
4351: LD_INT 9
4353: PUSH
4354: LD_INT 10
4356: PUSH
4357: LD_INT 11
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: ST_TO_ADDR
// BeginBuildUp ;
4366: CALL 12843 0 0
// end ; end_of_file
4370: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
4371: LD_VAR 0 1
4375: PPUSH
4376: CALL_OW 266
4380: PUSH
4381: LD_INT 0
4383: PUSH
4384: LD_INT 1
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: IN
4391: IFFALSE 4416
// SetBName ( b , @ & GetSide ( b ) ) ;
4393: LD_VAR 0 1
4397: PPUSH
4398: LD_STRING @
4400: PUSH
4401: LD_VAR 0 1
4405: PPUSH
4406: CALL_OW 255
4410: STR
4411: PPUSH
4412: CALL_OW 500
// end ;
4416: PPOPN 2
4418: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
4419: LD_VAR 0 1
4423: PPUSH
4424: CALL_OW 266
4428: PUSH
4429: LD_INT 0
4431: PUSH
4432: LD_INT 1
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: IN
4439: IFFALSE 4464
// SetBName ( b , @ & GetSide ( b ) ) ;
4441: LD_VAR 0 1
4445: PPUSH
4446: LD_STRING @
4448: PUSH
4449: LD_VAR 0 1
4453: PPUSH
4454: CALL_OW 255
4458: STR
4459: PPUSH
4460: CALL_OW 500
// end ;
4464: PPOPN 3
4466: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
4467: LD_INT 0
4469: PPUSH
4470: PPUSH
4471: PPUSH
4472: PPUSH
// begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
4473: LD_VAR 0 1
4477: PPUSH
4478: CALL_OW 255
4482: PUSH
4483: LD_INT 0
4485: EQUAL
4486: PUSH
4487: LD_VAR 0 1
4491: PPUSH
4492: CALL_OW 257
4496: PUSH
4497: LD_INT 12
4499: EQUAL
4500: AND
4501: IFFALSE 4507
// CheckApemenAmount ;
4503: CALL 5259 0 0
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
4507: LD_VAR 0 1
4511: PPUSH
4512: CALL_OW 266
4516: PUSH
4517: LD_INT 0
4519: PUSH
4520: LD_INT 1
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: IN
4527: IFFALSE 4609
// begin pos := Side_Positions [ GetSide ( j ) ] ;
4529: LD_ADDR_VAR 0 4
4533: PUSH
4534: LD_EXP 32
4538: PUSH
4539: LD_VAR 0 1
4543: PPUSH
4544: CALL_OW 255
4548: ARRAY
4549: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: LD_EXP 37
4559: PUSH
4560: LD_VAR 0 4
4564: ARRAY
4565: PUSH
4566: LD_INT 1
4568: ARRAY
4569: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: LD_EXP 37
4579: PUSH
4580: LD_VAR 0 4
4584: ARRAY
4585: PUSH
4586: LD_INT 2
4588: ARRAY
4589: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
4590: LD_VAR 0 2
4594: PPUSH
4595: LD_VAR 0 3
4599: PPUSH
4600: CALL_OW 420
4604: PPUSH
4605: CALL_OW 419
// end ; end ;
4609: PPOPN 5
4611: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
4612: LD_VAR 0 1
4616: PPUSH
4617: LD_VAR 0 2
4621: PPUSH
4622: LD_VAR 0 3
4626: PPUSH
4627: LD_OWVAR 2
4631: PPUSH
4632: CALL 6091 0 4
4636: PPOPN 3
4638: END
// every 1 1$0 + 0 0$0.3 do
4639: GO 4641
4641: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
4642: LD_INT 4
4644: PPUSH
4645: LD_INT 5
4647: PPUSH
4648: CALL_OW 12
4652: PPUSH
4653: LD_INT 1
4655: PPUSH
4656: CALL_OW 57
// enable ;
4660: ENABLE
// end ;
4661: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4662: GO 4664
4664: DISABLE
4665: LD_INT 0
4667: PPUSH
4668: PPUSH
// begin case tick of 1 .. 1 1$0 :
4669: LD_OWVAR 1
4673: PUSH
4674: LD_INT 1
4676: DOUBLE
4677: GREATEREQUAL
4678: IFFALSE 4686
4680: LD_INT 2100
4682: DOUBLE
4683: LESSEQUAL
4684: IFTRUE 4688
4686: GO 4716
4688: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4689: LD_EXP 23
4693: PUSH
4694: LD_INT 100
4696: DIVREAL
4697: PUSH
4698: LD_INT 350
4700: PPUSH
4701: LD_INT 1050
4703: PPUSH
4704: CALL_OW 12
4708: MUL
4709: PPUSH
4710: CALL_OW 67
4714: GO 5018
4716: LD_INT 2100
4718: PUSH
4719: LD_INT 1
4721: PLUS
4722: DOUBLE
4723: GREATEREQUAL
4724: IFFALSE 4732
4726: LD_INT 10500
4728: DOUBLE
4729: LESSEQUAL
4730: IFTRUE 4734
4732: GO 4762
4734: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4735: LD_EXP 23
4739: PUSH
4740: LD_INT 100
4742: DIVREAL
4743: PUSH
4744: LD_INT 1050
4746: PPUSH
4747: LD_INT 1575
4749: PPUSH
4750: CALL_OW 12
4754: MUL
4755: PPUSH
4756: CALL_OW 67
4760: GO 5018
4762: LD_INT 10500
4764: PUSH
4765: LD_INT 1
4767: PLUS
4768: DOUBLE
4769: GREATEREQUAL
4770: IFFALSE 4778
4772: LD_INT 21000
4774: DOUBLE
4775: LESSEQUAL
4776: IFTRUE 4780
4778: GO 4808
4780: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4781: LD_EXP 23
4785: PUSH
4786: LD_INT 100
4788: DIVREAL
4789: PUSH
4790: LD_INT 1575
4792: PPUSH
4793: LD_INT 2100
4795: PPUSH
4796: CALL_OW 12
4800: MUL
4801: PPUSH
4802: CALL_OW 67
4806: GO 5018
4808: LD_INT 21000
4810: PUSH
4811: LD_INT 1
4813: PLUS
4814: DOUBLE
4815: GREATEREQUAL
4816: IFFALSE 4824
4818: LD_INT 42000
4820: DOUBLE
4821: LESSEQUAL
4822: IFTRUE 4826
4824: GO 4854
4826: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4827: LD_EXP 23
4831: PUSH
4832: LD_INT 100
4834: DIVREAL
4835: PUSH
4836: LD_INT 2100
4838: PPUSH
4839: LD_INT 2625
4841: PPUSH
4842: CALL_OW 12
4846: MUL
4847: PPUSH
4848: CALL_OW 67
4852: GO 5018
4854: LD_INT 42000
4856: PUSH
4857: LD_INT 1
4859: PLUS
4860: DOUBLE
4861: GREATEREQUAL
4862: IFFALSE 4870
4864: LD_INT 63000
4866: DOUBLE
4867: LESSEQUAL
4868: IFTRUE 4872
4870: GO 4900
4872: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
4873: LD_EXP 23
4877: PUSH
4878: LD_INT 100
4880: DIVREAL
4881: PUSH
4882: LD_INT 2625
4884: PPUSH
4885: LD_INT 3150
4887: PPUSH
4888: CALL_OW 12
4892: MUL
4893: PPUSH
4894: CALL_OW 67
4898: GO 5018
4900: LD_INT 63000
4902: PUSH
4903: LD_INT 1
4905: PLUS
4906: DOUBLE
4907: GREATEREQUAL
4908: IFFALSE 4916
4910: LD_INT 105000
4912: DOUBLE
4913: LESSEQUAL
4914: IFTRUE 4918
4916: GO 4946
4918: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
4919: LD_EXP 23
4923: PUSH
4924: LD_INT 100
4926: DIVREAL
4927: PUSH
4928: LD_INT 3150
4930: PPUSH
4931: LD_INT 3675
4933: PPUSH
4934: CALL_OW 12
4938: MUL
4939: PPUSH
4940: CALL_OW 67
4944: GO 5018
4946: LD_INT 105000
4948: PUSH
4949: LD_INT 1
4951: PLUS
4952: DOUBLE
4953: GREATEREQUAL
4954: IFFALSE 4962
4956: LD_INT 630000
4958: DOUBLE
4959: LESSEQUAL
4960: IFTRUE 4964
4962: GO 4992
4964: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
4965: LD_EXP 23
4969: PUSH
4970: LD_INT 100
4972: DIVREAL
4973: PUSH
4974: LD_INT 3675
4976: PPUSH
4977: LD_INT 4200
4979: PPUSH
4980: CALL_OW 12
4984: MUL
4985: PPUSH
4986: CALL_OW 67
4990: GO 5018
4992: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
4993: LD_EXP 23
4997: PUSH
4998: LD_INT 100
5000: DIVREAL
5001: PUSH
5002: LD_INT 4200
5004: PPUSH
5005: LD_INT 5250
5007: PPUSH
5008: CALL_OW 12
5012: MUL
5013: PPUSH
5014: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5018: LD_ADDR_VAR 0 2
5022: PUSH
5023: LD_INT 3
5025: PPUSH
5026: LD_INT 5
5028: PPUSH
5029: CALL_OW 12
5033: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5034: LD_ADDR_VAR 0 1
5038: PUSH
5039: LD_EXP 32
5043: PUSH
5044: LD_INT 0
5046: PUSH
5047: EMPTY
5048: LIST
5049: DIFF
5050: PUSH
5051: FOR_IN
5052: IFFALSE 5092
// CreateCratesArea ( amount , [ base_nw , base_ne , base_sw , base_se ] [ i ] , true ) ;
5054: LD_VAR 0 2
5058: PPUSH
5059: LD_INT 8
5061: PUSH
5062: LD_INT 9
5064: PUSH
5065: LD_INT 10
5067: PUSH
5068: LD_INT 11
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: PUSH
5077: LD_VAR 0 1
5081: ARRAY
5082: PPUSH
5083: LD_INT 1
5085: PPUSH
5086: CALL_OW 55
5090: GO 5051
5092: POP
5093: POP
// enable ;
5094: ENABLE
// end ;
5095: PPOPN 2
5097: END
// every 1 1$0 trigger def_shipments_density do
5098: LD_EXP 5
5102: IFFALSE 5138
5104: GO 5106
5106: DISABLE
// begin CreateCratesArea ( 5 , map_center , true ) ;
5107: LD_INT 5
5109: PPUSH
5110: LD_INT 7
5112: PPUSH
5113: LD_INT 1
5115: PPUSH
5116: CALL_OW 55
// wait ( 3 3$0 - ( 1 1$0 * def_shipments_density ) ) ;
5120: LD_INT 6300
5122: PUSH
5123: LD_INT 2100
5125: PUSH
5126: LD_EXP 5
5130: MUL
5131: MINUS
5132: PPUSH
5133: CALL_OW 67
// enable ;
5137: ENABLE
// end ; end_of_file
5138: END
// var _apemenIncrement , _apemenMaximum , _apemenSkillLevel , _apemenThreshold , _isSpawning , _wildApemenAmount ; every 0 0$15 do var i ;
5139: GO 5141
5141: DISABLE
5142: LD_INT 0
5144: PPUSH
// begin _apemenIncrement := 0 ;
5145: LD_ADDR_LOC 9
5149: PUSH
5150: LD_INT 0
5152: ST_TO_ADDR
// _apemenSkillLevel := 0 ;
5153: LD_ADDR_LOC 11
5157: PUSH
5158: LD_INT 0
5160: ST_TO_ADDR
// _isSpawning := true ;
5161: LD_ADDR_LOC 13
5165: PUSH
5166: LD_INT 1
5168: ST_TO_ADDR
// _wildApemenAmount := 0 ;
5169: LD_ADDR_LOC 14
5173: PUSH
5174: LD_INT 0
5176: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5177: LD_ADDR_VAR 0 1
5181: PUSH
5182: LD_EXP 32
5186: PUSH
5187: LD_INT 0
5189: PUSH
5190: EMPTY
5191: LIST
5192: DIFF
5193: PUSH
5194: FOR_IN
5195: IFFALSE 5213
// _apemenIncrement := _apemenIncrement + 1 ;
5197: LD_ADDR_LOC 9
5201: PUSH
5202: LD_LOC 9
5206: PUSH
5207: LD_INT 1
5209: PLUS
5210: ST_TO_ADDR
5211: GO 5194
5213: POP
5214: POP
// _apemenMaximum := _apemenIncrement * amount_of_apemen ;
5215: LD_ADDR_LOC 10
5219: PUSH
5220: LD_LOC 9
5224: PUSH
5225: LD_EXP 27
5229: MUL
5230: ST_TO_ADDR
// _apemenThreshold := _apemenMaximum / 2 ;
5231: LD_ADDR_LOC 12
5235: PUSH
5236: LD_LOC 10
5240: PUSH
5241: LD_INT 2
5243: DIVREAL
5244: ST_TO_ADDR
// prepare_apemen ;
5245: CALL 5337 0 0
// end ;
5249: PPOPN 1
5251: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
5252: CALL 5259 0 0
// end ;
5256: PPOPN 2
5258: END
// export function CheckApemenAmount ; begin
5259: LD_INT 0
5261: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
5262: LD_ADDR_LOC 14
5266: PUSH
5267: LD_LOC 14
5271: PUSH
5272: LD_INT 1
5274: MINUS
5275: ST_TO_ADDR
// if _isSpawning then
5276: LD_LOC 13
5280: IFFALSE 5284
// exit ;
5282: GO 5332
// if _wildApemenAmount <= ( _apemenThreshold ) then
5284: LD_LOC 14
5288: PUSH
5289: LD_LOC 12
5293: LESSEQUAL
5294: IFFALSE 5332
// begin if _apemenSkillLevel < 8 then
5296: LD_LOC 11
5300: PUSH
5301: LD_INT 8
5303: LESS
5304: IFFALSE 5320
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
5306: LD_ADDR_LOC 11
5310: PUSH
5311: LD_LOC 11
5315: PUSH
5316: LD_INT 1
5318: PLUS
5319: ST_TO_ADDR
// _isSpawning := true ;
5320: LD_ADDR_LOC 13
5324: PUSH
5325: LD_INT 1
5327: ST_TO_ADDR
// prepare_apemen ;
5328: CALL 5337 0 0
// end ; end ;
5332: LD_VAR 0 1
5336: RET
// function prepare_apemen ; var i ; begin
5337: LD_INT 0
5339: PPUSH
5340: PPUSH
// if not amount_of_apemen then
5341: LD_EXP 27
5345: NOT
5346: IFFALSE 5350
// exit ;
5348: GO 5529
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5350: LD_INT 1050
5352: PPUSH
5353: LD_INT 3150
5355: PPUSH
5356: CALL_OW 12
5360: PPUSH
5361: CALL_OW 67
// apeman_init ;
5365: CALL 5534 0 0
// for i in ( Side_Positions diff [ 0 ] ) do
5369: LD_ADDR_VAR 0 2
5373: PUSH
5374: LD_EXP 32
5378: PUSH
5379: LD_INT 0
5381: PUSH
5382: EMPTY
5383: LIST
5384: DIFF
5385: PUSH
5386: FOR_IN
5387: IFFALSE 5491
// begin if i = 1 then
5389: LD_VAR 0 2
5393: PUSH
5394: LD_INT 1
5396: EQUAL
5397: IFFALSE 5414
// PlaceUnitArea ( CreateHuman , north_apeman , false ) ;
5399: CALL_OW 44
5403: PPUSH
5404: LD_INT 1
5406: PPUSH
5407: LD_INT 0
5409: PPUSH
5410: CALL_OW 49
// if i = 2 then
5414: LD_VAR 0 2
5418: PUSH
5419: LD_INT 2
5421: EQUAL
5422: IFFALSE 5439
// PlaceUnitArea ( CreateHuman , north_apeman , false ) ;
5424: CALL_OW 44
5428: PPUSH
5429: LD_INT 1
5431: PPUSH
5432: LD_INT 0
5434: PPUSH
5435: CALL_OW 49
// if i = 3 then
5439: LD_VAR 0 2
5443: PUSH
5444: LD_INT 3
5446: EQUAL
5447: IFFALSE 5464
// PlaceUnitArea ( CreateHuman , south_apeman , false ) ;
5449: CALL_OW 44
5453: PPUSH
5454: LD_INT 2
5456: PPUSH
5457: LD_INT 0
5459: PPUSH
5460: CALL_OW 49
// if i = 4 then
5464: LD_VAR 0 2
5468: PUSH
5469: LD_INT 4
5471: EQUAL
5472: IFFALSE 5489
// PlaceUnitArea ( CreateHuman , south_apeman , false ) ;
5474: CALL_OW 44
5478: PPUSH
5479: LD_INT 2
5481: PPUSH
5482: LD_INT 0
5484: PPUSH
5485: CALL_OW 49
// end ;
5489: GO 5386
5491: POP
5492: POP
// _wildApemenAmount := _wildApemenAmount + _apemenIncrement ;
5493: LD_ADDR_LOC 14
5497: PUSH
5498: LD_LOC 14
5502: PUSH
5503: LD_LOC 9
5507: PLUS
5508: ST_TO_ADDR
// until _wildApemenAmount >= _apemenMaximum ;
5509: LD_LOC 14
5513: PUSH
5514: LD_LOC 10
5518: GREATEREQUAL
5519: IFFALSE 5350
// _isSpawning := false ;
5521: LD_ADDR_LOC 13
5525: PUSH
5526: LD_INT 0
5528: ST_TO_ADDR
// end ;
5529: LD_VAR 0 1
5533: RET
// function apeman_init ; begin
5534: LD_INT 0
5536: PPUSH
// uc_side := 0 ;
5537: LD_ADDR_OWVAR 20
5541: PUSH
5542: LD_INT 0
5544: ST_TO_ADDR
// uc_nation := nation_nature ;
5545: LD_ADDR_OWVAR 21
5549: PUSH
5550: LD_INT 0
5552: ST_TO_ADDR
// hc_class := class_apeman ;
5553: LD_ADDR_OWVAR 28
5557: PUSH
5558: LD_INT 12
5560: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
5561: LD_ADDR_OWVAR 30
5565: PUSH
5566: LD_INT 2
5568: PUSH
5569: LD_INT 2
5571: PUSH
5572: LD_INT 2
5574: PUSH
5575: LD_INT 2
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
5584: LD_ADDR_OWVAR 31
5588: PUSH
5589: LD_INT 0
5591: PPUSH
5592: LD_INT 2
5594: PPUSH
5595: CALL_OW 12
5599: PUSH
5600: LD_LOC 11
5604: PLUS
5605: PUSH
5606: LD_INT 0
5608: PPUSH
5609: LD_INT 2
5611: PPUSH
5612: CALL_OW 12
5616: PUSH
5617: LD_LOC 11
5621: PLUS
5622: PUSH
5623: LD_INT 0
5625: PPUSH
5626: LD_INT 2
5628: PPUSH
5629: CALL_OW 12
5633: PUSH
5634: LD_LOC 11
5638: PLUS
5639: PUSH
5640: LD_INT 0
5642: PPUSH
5643: LD_INT 2
5645: PPUSH
5646: CALL_OW 12
5650: PUSH
5651: LD_LOC 11
5655: PLUS
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
5663: LD_ADDR_OWVAR 29
5667: PUSH
5668: LD_INT 10
5670: PUSH
5671: LD_INT 12
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: ST_TO_ADDR
// hc_sex := sex_male ;
5678: LD_ADDR_OWVAR 27
5682: PUSH
5683: LD_INT 1
5685: ST_TO_ADDR
// hc_importance := 0 ;
5686: LD_ADDR_OWVAR 32
5690: PUSH
5691: LD_INT 0
5693: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
5694: LD_ADDR_OWVAR 35
5698: PUSH
5699: LD_INT 20
5701: NEG
5702: PPUSH
5703: LD_INT 20
5705: PPUSH
5706: CALL_OW 12
5710: ST_TO_ADDR
// end ; end_of_file
5711: LD_VAR 0 1
5715: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
5716: LD_INT 0
5718: PPUSH
5719: PPUSH
// for un in battle_flags_id do
5720: LD_ADDR_VAR 0 2
5724: PUSH
5725: LD_EXP 42
5729: PUSH
5730: FOR_IN
5731: IFFALSE 5806
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
5733: LD_VAR 0 2
5737: PPUSH
5738: LD_INT 1
5740: PUSH
5741: LD_LOC 15
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: PUSH
5750: LD_INT 2
5752: PUSH
5753: LD_LOC 15
5757: PUSH
5758: LD_INT 2
5760: DIV
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: PUSH
5766: LD_INT 3
5768: PUSH
5769: LD_LOC 15
5773: PUSH
5774: LD_INT 5
5776: DIV
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PUSH
5782: LD_INT 20
5784: PUSH
5785: LD_LOC 15
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: PPUSH
5800: CALL_OW 423
5804: GO 5730
5806: POP
5807: POP
// end ;
5808: LD_VAR 0 1
5812: RET
// every 0 0$0.1 do var un ;
5813: GO 5815
5815: DISABLE
5816: LD_INT 0
5818: PPUSH
// begin if not def_morale_flags then
5819: LD_EXP 9
5823: NOT
5824: IFFALSE 5828
// exit ;
5826: GO 5905
// if not morale_decreasing_time then
5828: LD_EXP 24
5832: NOT
5833: IFFALSE 5837
// exit ;
5835: GO 5905
// strength = 100 ;
5837: LD_ADDR_LOC 15
5841: PUSH
5842: LD_INT 100
5844: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
5845: LD_EXP 24
5849: PPUSH
5850: CALL_OW 67
// strength := strength - 1 ;
5854: LD_ADDR_LOC 15
5858: PUSH
5859: LD_LOC 15
5863: PUSH
5864: LD_INT 1
5866: MINUS
5867: ST_TO_ADDR
// Update_Flags ;
5868: CALL 5716 0 0
// until not strength ;
5872: LD_LOC 15
5876: NOT
5877: IFFALSE 5845
// for un in battle_flags_id do
5879: LD_ADDR_VAR 0 1
5883: PUSH
5884: LD_EXP 42
5888: PUSH
5889: FOR_IN
5890: IFFALSE 5903
// KillBattleFlag ( un ) ;
5892: LD_VAR 0 1
5896: PPUSH
5897: CALL_OW 419
5901: GO 5889
5903: POP
5904: POP
// end ; end_of_file
5905: PPOPN 1
5907: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
5908: LD_INT 0
5910: PPUSH
5911: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
5912: LD_ADDR_VAR 0 2
5916: PUSH
5917: LD_STRING #Multi1x1-Time
5919: PUSH
5920: LD_OWVAR 1
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: ST_TO_ADDR
// if WaitServerStrings then
5929: LD_EXP 46
5933: IFFALSE 5951
// AllStrings = AllStrings ^ WaitServerStrings ;
5935: LD_ADDR_VAR 0 2
5939: PUSH
5940: LD_VAR 0 2
5944: PUSH
5945: LD_EXP 46
5949: ADD
5950: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
5951: LD_INT 0
5953: PUSH
5954: LD_EXP 28
5958: PUSH
5959: LD_OWVAR 1
5963: MINUS
5964: LESSEQUAL
5965: IFFALSE 5996
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
5967: LD_ADDR_VAR 0 2
5971: PUSH
5972: LD_VAR 0 2
5976: PUSH
5977: LD_STRING #allowedsibbomb
5979: PUSH
5980: LD_EXP 28
5984: PUSH
5985: LD_OWVAR 1
5989: MINUS
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: ADD
5995: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
5996: LD_INT 0
5998: PUSH
5999: LD_EXP 49
6003: PUSH
6004: LD_OWVAR 1
6008: MINUS
6009: LESSEQUAL
6010: IFFALSE 6041
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
6012: LD_ADDR_VAR 0 2
6016: PUSH
6017: LD_VAR 0 2
6021: PUSH
6022: LD_STRING #builduptime
6024: PUSH
6025: LD_EXP 49
6029: PUSH
6030: LD_OWVAR 1
6034: MINUS
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: ADD
6040: ST_TO_ADDR
// if ( ExtraStrings ) then
6041: LD_EXP 45
6045: IFFALSE 6067
// AllStrings := AllStrings ^  ^ ExtraStrings ;
6047: LD_ADDR_VAR 0 2
6051: PUSH
6052: LD_VAR 0 2
6056: PUSH
6057: LD_STRING 
6059: ADD
6060: PUSH
6061: LD_EXP 45
6065: ADD
6066: ST_TO_ADDR
// Display_Strings := AllStrings ;
6067: LD_ADDR_OWVAR 47
6071: PUSH
6072: LD_VAR 0 2
6076: ST_TO_ADDR
// end ;
6077: LD_VAR 0 1
6081: RET
// every 0 0$1 do
6082: GO 6084
6084: DISABLE
// begin ShowTimer ;
6085: CALL 5908 0 0
// enable ;
6089: ENABLE
// end ; end_of_file
6090: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
6091: LD_INT 0
6093: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
6094: LD_VAR 0 1
6098: PPUSH
6099: CALL_OW 255
6103: PUSH
6104: LD_VAR 0 4
6108: EQUAL
6109: IFFALSE 6128
// begin SetAchievement ( ACH_RAD ) ;
6111: LD_STRING ACH_RAD
6113: PPUSH
6114: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
6118: LD_STRING ACH_NL
6120: PPUSH
6121: LD_INT 1
6123: PPUSH
6124: CALL_OW 564
// end end ;
6128: LD_VAR 0 5
6132: RET
// export function SA_Win ( side ) ; begin
6133: LD_INT 0
6135: PPUSH
// case side of 1 :
6136: LD_VAR 0 1
6140: PUSH
6141: LD_INT 1
6143: DOUBLE
6144: EQUAL
6145: IFTRUE 6149
6147: GO 6162
6149: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
6150: LD_STRING ACH_AH
6152: PPUSH
6153: LD_INT 1
6155: PPUSH
6156: CALL_OW 564
6160: GO 6325
6162: LD_INT 2
6164: DOUBLE
6165: EQUAL
6166: IFTRUE 6170
6168: GO 6183
6170: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
6171: LD_STRING ACH_E
6173: PPUSH
6174: LD_INT 1
6176: PPUSH
6177: CALL_OW 564
6181: GO 6325
6183: LD_INT 3
6185: DOUBLE
6186: EQUAL
6187: IFTRUE 6191
6189: GO 6204
6191: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
6192: LD_STRING ACH_OOL
6194: PPUSH
6195: LD_INT 1
6197: PPUSH
6198: CALL_OW 564
6202: GO 6325
6204: LD_INT 1
6206: PUSH
6207: LD_INT 2
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: DOUBLE
6214: EQUAL
6215: IFTRUE 6219
6217: GO 6244
6219: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
6220: LD_STRING ACH_AH
6222: PPUSH
6223: LD_REAL  5.00000000000000E-0001
6226: PPUSH
6227: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
6231: LD_STRING ACH_E
6233: PPUSH
6234: LD_REAL  5.00000000000000E-0001
6237: PPUSH
6238: CALL_OW 564
// end ; [ 2 , 3 ] :
6242: GO 6325
6244: LD_INT 2
6246: PUSH
6247: LD_INT 3
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: DOUBLE
6254: EQUAL
6255: IFTRUE 6259
6257: GO 6284
6259: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
6260: LD_STRING ACH_OOL
6262: PPUSH
6263: LD_REAL  5.00000000000000E-0001
6266: PPUSH
6267: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
6271: LD_STRING ACH_E
6273: PPUSH
6274: LD_REAL  5.00000000000000E-0001
6277: PPUSH
6278: CALL_OW 564
// end ; [ 3 , 1 ] :
6282: GO 6325
6284: LD_INT 3
6286: PUSH
6287: LD_INT 1
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: DOUBLE
6294: EQUAL
6295: IFTRUE 6299
6297: GO 6324
6299: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
6300: LD_STRING ACH_AH
6302: PPUSH
6303: LD_REAL  5.00000000000000E-0001
6306: PPUSH
6307: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
6311: LD_STRING ACH_OOL
6313: PPUSH
6314: LD_REAL  5.00000000000000E-0001
6317: PPUSH
6318: CALL_OW 564
// end ; end ;
6322: GO 6325
6324: POP
// end ; end_of_file
6325: LD_VAR 0 2
6329: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
6330: LD_INT 0
6332: PPUSH
6333: PPUSH
// enable ( 98 ) ;
6334: LD_INT 98
6336: ENABLE_MARKED
// GameEnded = false ;
6337: LD_ADDR_LOC 21
6341: PUSH
6342: LD_INT 0
6344: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6345: LD_ADDR_LOC 20
6349: PUSH
6350: LD_INT 0
6352: PUSH
6353: LD_INT 0
6355: PUSH
6356: LD_INT 0
6358: PUSH
6359: LD_INT 0
6361: PUSH
6362: LD_INT 0
6364: PUSH
6365: LD_INT 0
6367: PUSH
6368: LD_INT 0
6370: PUSH
6371: LD_INT 0
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: ST_TO_ADDR
// unfoged = false ;
6384: LD_ADDR_LOC 22
6388: PUSH
6389: LD_INT 0
6391: ST_TO_ADDR
// defeated_specs := [ ] ;
6392: LD_ADDR_LOC 23
6396: PUSH
6397: EMPTY
6398: ST_TO_ADDR
// for i = 1 to side_positions do
6399: LD_ADDR_VAR 0 2
6403: PUSH
6404: DOUBLE
6405: LD_INT 1
6407: DEC
6408: ST_TO_ADDR
6409: LD_EXP 32
6413: PUSH
6414: FOR_TO
6415: IFFALSE 6455
// if not side_positions [ i ] then
6417: LD_EXP 32
6421: PUSH
6422: LD_VAR 0 2
6426: ARRAY
6427: NOT
6428: IFFALSE 6453
// defeated = replace ( defeated , i , true ) ;
6430: LD_ADDR_LOC 20
6434: PUSH
6435: LD_LOC 20
6439: PPUSH
6440: LD_VAR 0 2
6444: PPUSH
6445: LD_INT 1
6447: PPUSH
6448: CALL_OW 1
6452: ST_TO_ADDR
6453: GO 6414
6455: POP
6456: POP
// end ;
6457: LD_VAR 0 1
6461: RET
// function CanWinLoose ; begin
6462: LD_INT 0
6464: PPUSH
// Result := true ;
6465: LD_ADDR_VAR 0 1
6469: PUSH
6470: LD_INT 1
6472: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
6473: CALL_OW 518
6477: PUSH
6478: CALL_OW 519
6482: PUSH
6483: LD_INT 0
6485: GREATER
6486: AND
6487: IFFALSE 6497
// Result := false ;
6489: LD_ADDR_VAR 0 1
6493: PUSH
6494: LD_INT 0
6496: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
6497: CALL_OW 531
6501: PUSH
6502: CALL_OW 519
6506: PUSH
6507: LD_INT 1
6509: GREATER
6510: AND
6511: IFFALSE 6521
// Result := false ;
6513: LD_ADDR_VAR 0 1
6517: PUSH
6518: LD_INT 0
6520: ST_TO_ADDR
// end ;
6521: LD_VAR 0 1
6525: RET
// export function HasPower ( i ) ; var k , h ; begin
6526: LD_INT 0
6528: PPUSH
6529: PPUSH
6530: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
6531: LD_VAR 0 1
6535: PPUSH
6536: CALL_OW 108
6540: NOT
6541: PUSH
6542: LD_EXP 43
6546: PUSH
6547: LD_VAR 0 1
6551: ARRAY
6552: NOT
6553: AND
6554: PUSH
6555: LD_OWVAR 4
6559: AND
6560: IFFALSE 6572
// begin result = false ;
6562: LD_ADDR_VAR 0 2
6566: PUSH
6567: LD_INT 0
6569: ST_TO_ADDR
// end else
6570: GO 6867
// case def_win_rules of 0 :
6572: LD_EXP 29
6576: PUSH
6577: LD_INT 0
6579: DOUBLE
6580: EQUAL
6581: IFTRUE 6585
6583: GO 6748
6585: POP
// if def_people_respawning then
6586: LD_EXP 12
6590: IFFALSE 6681
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
6592: LD_ADDR_VAR 0 2
6596: PUSH
6597: LD_INT 22
6599: PUSH
6600: LD_VAR 0 1
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 2
6611: PUSH
6612: LD_INT 21
6614: PUSH
6615: LD_INT 1
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 33
6624: PUSH
6625: LD_INT 3
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: LD_INT 33
6634: PUSH
6635: LD_INT 5
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: LD_INT 30
6644: PUSH
6645: LD_INT 0
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 30
6654: PUSH
6655: LD_INT 1
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PPUSH
6674: CALL_OW 69
6678: ST_TO_ADDR
6679: GO 6746
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
6681: LD_ADDR_VAR 0 2
6685: PUSH
6686: LD_INT 22
6688: PUSH
6689: LD_VAR 0 1
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: LD_INT 2
6700: PUSH
6701: LD_INT 21
6703: PUSH
6704: LD_INT 1
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: PUSH
6711: LD_INT 33
6713: PUSH
6714: LD_INT 3
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: PUSH
6721: LD_INT 33
6723: PUSH
6724: LD_INT 5
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PPUSH
6741: CALL_OW 69
6745: ST_TO_ADDR
6746: GO 6867
6748: LD_INT 1
6750: DOUBLE
6751: EQUAL
6752: IFTRUE 6756
6754: GO 6795
6756: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
6757: LD_ADDR_VAR 0 2
6761: PUSH
6762: LD_INT 22
6764: PUSH
6765: LD_VAR 0 1
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PUSH
6774: LD_INT 21
6776: PUSH
6777: LD_INT 1
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PPUSH
6788: CALL_OW 69
6792: ST_TO_ADDR
6793: GO 6867
6795: LD_INT 2
6797: DOUBLE
6798: EQUAL
6799: IFTRUE 6803
6801: GO 6866
6803: POP
// begin h = false ;
6804: LD_ADDR_VAR 0 4
6808: PUSH
6809: LD_INT 0
6811: ST_TO_ADDR
// for k in heroes [ i ] do
6812: LD_ADDR_VAR 0 3
6816: PUSH
6817: LD_EXP 44
6821: PUSH
6822: LD_VAR 0 1
6826: ARRAY
6827: PUSH
6828: FOR_IN
6829: IFFALSE 6852
// if IsLive ( k ) then
6831: LD_VAR 0 3
6835: PPUSH
6836: CALL_OW 300
6840: IFFALSE 6850
// h = true ;
6842: LD_ADDR_VAR 0 4
6846: PUSH
6847: LD_INT 1
6849: ST_TO_ADDR
6850: GO 6828
6852: POP
6853: POP
// Result := h ;
6854: LD_ADDR_VAR 0 2
6858: PUSH
6859: LD_VAR 0 4
6863: ST_TO_ADDR
// end ; end ;
6864: GO 6867
6866: POP
// end ;
6867: LD_VAR 0 2
6871: RET
// function AlliedSides ( i , j ) ; begin
6872: LD_INT 0
6874: PPUSH
// Result := false ;
6875: LD_ADDR_VAR 0 3
6879: PUSH
6880: LD_INT 0
6882: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
6883: LD_VAR 0 1
6887: PPUSH
6888: LD_VAR 0 2
6892: PPUSH
6893: CALL_OW 81
6897: PUSH
6898: LD_INT 1
6900: EQUAL
6901: PUSH
6902: LD_VAR 0 2
6906: PPUSH
6907: LD_VAR 0 1
6911: PPUSH
6912: CALL_OW 81
6916: PUSH
6917: LD_INT 1
6919: EQUAL
6920: AND
6921: PUSH
6922: LD_VAR 0 1
6926: PPUSH
6927: CALL_OW 83
6931: AND
6932: PUSH
6933: LD_VAR 0 2
6937: PPUSH
6938: CALL_OW 83
6942: AND
6943: IFFALSE 6953
// Result := true ;
6945: LD_ADDR_VAR 0 3
6949: PUSH
6950: LD_INT 1
6952: ST_TO_ADDR
// end ;
6953: LD_VAR 0 3
6957: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
6958: CALL 6462 0 0
6962: PUSH
6963: LD_LOC 21
6967: NOT
6968: AND
6969: IFFALSE 6985
6971: GO 6973
6973: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
6974: LD_ADDR_EXP 46
6978: PUSH
6979: LD_STRING #Player-Ended
6981: PUSH
6982: EMPTY
6983: LIST
6984: ST_TO_ADDR
6985: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
6986: CALL 6462 0 0
6990: PUSH
6991: LD_LOC 21
6995: AND
6996: IFFALSE 7005
6998: GO 7000
7000: DISABLE
// YouLostInMultiplayer ;
7001: CALL_OW 107
7005: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
7006: CALL 6462 0 0
7010: NOT
7011: PUSH
7012: CALL_OW 531
7016: NOT
7017: AND
7018: IFFALSE 7034
7020: GO 7022
7022: DISABLE
// WaitServerStrings = [ #server-wait ] ;
7023: LD_ADDR_EXP 46
7027: PUSH
7028: LD_STRING #server-wait
7030: PUSH
7031: EMPTY
7032: LIST
7033: ST_TO_ADDR
7034: END
// every 100 trigger IAmSpec do
7035: CALL_OW 531
7039: IFFALSE 7055
7041: GO 7043
7043: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
7044: LD_ADDR_EXP 46
7048: PUSH
7049: LD_STRING #Player-IAmSpec
7051: PUSH
7052: EMPTY
7053: LIST
7054: ST_TO_ADDR
7055: END
// every 100 trigger GameEnded and IAmSpec do
7056: LD_LOC 21
7060: PUSH
7061: CALL_OW 531
7065: AND
7066: IFFALSE 7075
7068: GO 7070
7070: DISABLE
// YouLostInMultiplayer ;
7071: CALL_OW 107
7075: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
7076: CALL 6462 0 0
7080: PUSH
7081: LD_LOC 21
7085: NOT
7086: AND
7087: IFFALSE 7103
7089: GO 7091
7091: DISABLE
// WaitServerStrings = [ $player-win ] ;
7092: LD_ADDR_EXP 46
7096: PUSH
7097: LD_STRING $player-win
7099: PUSH
7100: EMPTY
7101: LIST
7102: ST_TO_ADDR
7103: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
7104: CALL 6462 0 0
7108: PUSH
7109: LD_LOC 21
7113: AND
7114: IFFALSE 7138
7116: GO 7118
7118: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
7119: LD_EXP 33
7123: PUSH
7124: LD_OWVAR 7
7128: ARRAY
7129: PPUSH
7130: CALL 6133 0 1
// YouWinInMultiplayer ;
7134: CALL_OW 106
// end ;
7138: END
// every 100 trigger isEditor marked 401 do
7139: LD_OWVAR 84
7143: IFFALSE 7159
7145: GO 7147
7147: DISABLE
// Debug_Strings = [ You won ] ;
7148: LD_ADDR_OWVAR 48
7152: PUSH
7153: LD_STRING You won
7155: PUSH
7156: EMPTY
7157: LIST
7158: ST_TO_ADDR
7159: END
// every 100 trigger isEditor marked 400 do
7160: LD_OWVAR 84
7164: IFFALSE 7180
7166: GO 7168
7168: DISABLE
// Debug_Strings = [ You loss ] ;
7169: LD_ADDR_OWVAR 48
7173: PUSH
7174: LD_STRING You loss
7176: PUSH
7177: EMPTY
7178: LIST
7179: ST_TO_ADDR
7180: END
// every 100 marked 98 do var i , un ;
7181: GO 7183
7183: DISABLE
7184: LD_INT 0
7186: PPUSH
7187: PPUSH
// begin for i = 1 to side_positions do
7188: LD_ADDR_VAR 0 1
7192: PUSH
7193: DOUBLE
7194: LD_INT 1
7196: DEC
7197: ST_TO_ADDR
7198: LD_EXP 32
7202: PUSH
7203: FOR_TO
7204: IFFALSE 7291
// begin if side_positions [ i ] then
7206: LD_EXP 32
7210: PUSH
7211: LD_VAR 0 1
7215: ARRAY
7216: IFFALSE 7289
// if not HasPower ( i ) and not defeated [ i ] then
7218: LD_VAR 0 1
7222: PPUSH
7223: CALL 6526 0 1
7227: NOT
7228: PUSH
7229: LD_LOC 20
7233: PUSH
7234: LD_VAR 0 1
7238: ARRAY
7239: NOT
7240: AND
7241: IFFALSE 7289
// begin defeated = replace ( defeated , i , true ) ;
7243: LD_ADDR_LOC 20
7247: PUSH
7248: LD_LOC 20
7252: PPUSH
7253: LD_VAR 0 1
7257: PPUSH
7258: LD_INT 1
7260: PPUSH
7261: CALL_OW 1
7265: ST_TO_ADDR
// if i = mp_player_side then
7266: LD_VAR 0 1
7270: PUSH
7271: LD_OWVAR 7
7275: EQUAL
7276: IFFALSE 7289
// begin Multiplayer_Loose_Message ;
7278: CALL_OW 521
// SetPlayerSpectator ( ) ;
7282: CALL_OW 572
// enable ( 400 ) ;
7286: LD_INT 400
7288: ENABLE_MARKED
// end ; end ; end ;
7289: GO 7203
7291: POP
7292: POP
// DidGameEnd ;
7293: CALL 7308 0 0
// if not GameEnded then
7297: LD_LOC 21
7301: NOT
7302: IFFALSE 7305
// enable ;
7304: ENABLE
// end ;
7305: PPOPN 2
7307: END
// function DidGameEnd ; var i , k , enemy ; begin
7308: LD_INT 0
7310: PPUSH
7311: PPUSH
7312: PPUSH
7313: PPUSH
// enemy = [ ] ;
7314: LD_ADDR_VAR 0 4
7318: PUSH
7319: EMPTY
7320: ST_TO_ADDR
// for i = 1 to side_positions do
7321: LD_ADDR_VAR 0 2
7325: PUSH
7326: DOUBLE
7327: LD_INT 1
7329: DEC
7330: ST_TO_ADDR
7331: LD_EXP 32
7335: PUSH
7336: FOR_TO
7337: IFFALSE 7431
// if not defeated [ i ] then
7339: LD_LOC 20
7343: PUSH
7344: LD_VAR 0 2
7348: ARRAY
7349: NOT
7350: IFFALSE 7429
// for k = 1 to side_positions do
7352: LD_ADDR_VAR 0 3
7356: PUSH
7357: DOUBLE
7358: LD_INT 1
7360: DEC
7361: ST_TO_ADDR
7362: LD_EXP 32
7366: PUSH
7367: FOR_TO
7368: IFFALSE 7427
// if not defeated [ k ] then
7370: LD_LOC 20
7374: PUSH
7375: LD_VAR 0 3
7379: ARRAY
7380: NOT
7381: IFFALSE 7425
// if not AlliedSides ( i , k ) then
7383: LD_VAR 0 2
7387: PPUSH
7388: LD_VAR 0 3
7392: PPUSH
7393: CALL 6872 0 2
7397: NOT
7398: IFFALSE 7425
// enemy = enemy ^ [ i , k ] ;
7400: LD_ADDR_VAR 0 4
7404: PUSH
7405: LD_VAR 0 4
7409: PUSH
7410: LD_VAR 0 2
7414: PUSH
7415: LD_VAR 0 3
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: ADD
7424: ST_TO_ADDR
7425: GO 7367
7427: POP
7428: POP
7429: GO 7336
7431: POP
7432: POP
// if not enemy then
7433: LD_VAR 0 4
7437: NOT
7438: IFFALSE 7464
// begin GameEnded = true ;
7440: LD_ADDR_LOC 21
7444: PUSH
7445: LD_INT 1
7447: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
7448: LD_LOC 20
7452: PUSH
7453: LD_OWVAR 7
7457: ARRAY
7458: NOT
7459: IFFALSE 7464
// enable ( 401 ) ;
7461: LD_INT 401
7463: ENABLE_MARKED
// end ; end ;
7464: LD_VAR 0 1
7468: RET
// function unfog ; var k , friends ; begin
7469: LD_INT 0
7471: PPUSH
7472: PPUSH
7473: PPUSH
// for k = 1 to side_positions do
7474: LD_ADDR_VAR 0 2
7478: PUSH
7479: DOUBLE
7480: LD_INT 1
7482: DEC
7483: ST_TO_ADDR
7484: LD_EXP 32
7488: PUSH
7489: FOR_TO
7490: IFFALSE 7546
// if not defeated [ k ] then
7492: LD_LOC 20
7496: PUSH
7497: LD_VAR 0 2
7501: ARRAY
7502: NOT
7503: IFFALSE 7544
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
7505: LD_OWVAR 7
7509: PPUSH
7510: LD_VAR 0 2
7514: PPUSH
7515: CALL_OW 81
7519: PUSH
7520: LD_INT 1
7522: PUSH
7523: EMPTY
7524: LIST
7525: IN
7526: IFFALSE 7544
// friends = friends ^ k ;
7528: LD_ADDR_VAR 0 3
7532: PUSH
7533: LD_VAR 0 3
7537: PUSH
7538: LD_VAR 0 2
7542: ADD
7543: ST_TO_ADDR
7544: GO 7489
7546: POP
7547: POP
// if not friends then
7548: LD_VAR 0 3
7552: NOT
7553: IFFALSE 7567
// begin SetPlayerSpectator ( ) ;
7555: CALL_OW 572
// unfoged = true ;
7559: LD_ADDR_LOC 22
7563: PUSH
7564: LD_INT 1
7566: ST_TO_ADDR
// end ; end ;
7567: LD_VAR 0 1
7571: RET
// export function MakeGameEnd ; begin
7572: LD_INT 0
7574: PPUSH
// SetPlayerSpectator ( ) ;
7575: CALL_OW 572
// unfoged = true ;
7579: LD_ADDR_LOC 22
7583: PUSH
7584: LD_INT 1
7586: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7587: LD_INT 175
7589: PPUSH
7590: CALL_OW 67
// GameEnded = true ;
7594: LD_ADDR_LOC 21
7598: PUSH
7599: LD_INT 1
7601: ST_TO_ADDR
// end ;
7602: LD_VAR 0 1
7606: RET
// export function GetGameEnded ; begin
7607: LD_INT 0
7609: PPUSH
// result = GameEnded ;
7610: LD_ADDR_VAR 0 1
7614: PUSH
7615: LD_LOC 21
7619: ST_TO_ADDR
// end ; end_of_file
7620: LD_VAR 0 1
7624: RET
// export function SetMpTechs ( ) ; var side , i ; begin
7625: LD_INT 0
7627: PPUSH
7628: PPUSH
7629: PPUSH
// for side = 1 to 8 do
7630: LD_ADDR_VAR 0 2
7634: PUSH
7635: DOUBLE
7636: LD_INT 1
7638: DEC
7639: ST_TO_ADDR
7640: LD_INT 8
7642: PUSH
7643: FOR_TO
7644: IFFALSE 7765
// begin for i = 1 to 72 do
7646: LD_ADDR_VAR 0 3
7650: PUSH
7651: DOUBLE
7652: LD_INT 1
7654: DEC
7655: ST_TO_ADDR
7656: LD_INT 72
7658: PUSH
7659: FOR_TO
7660: IFFALSE 7691
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
7662: LD_VAR 0 3
7666: PPUSH
7667: LD_VAR 0 2
7671: PPUSH
7672: LD_INT 0
7674: PPUSH
7675: LD_VAR 0 3
7679: PPUSH
7680: CALL_OW 565
7684: PPUSH
7685: CALL_OW 322
7689: GO 7659
7691: POP
7692: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
7693: LD_INT 73
7695: PPUSH
7696: LD_VAR 0 2
7700: PPUSH
7701: LD_INT 0
7703: PPUSH
7704: LD_INT 25
7706: PPUSH
7707: CALL_OW 565
7711: PPUSH
7712: CALL_OW 322
// for i = 0 to 40 do
7716: LD_ADDR_VAR 0 3
7720: PUSH
7721: DOUBLE
7722: LD_INT 0
7724: DEC
7725: ST_TO_ADDR
7726: LD_INT 40
7728: PUSH
7729: FOR_TO
7730: IFFALSE 7761
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
7732: LD_VAR 0 3
7736: PPUSH
7737: LD_VAR 0 2
7741: PPUSH
7742: LD_INT 1
7744: PPUSH
7745: LD_VAR 0 3
7749: PPUSH
7750: CALL_OW 565
7754: PPUSH
7755: CALL_OW 324
7759: GO 7729
7761: POP
7762: POP
// end ;
7763: GO 7643
7765: POP
7766: POP
// end ;
7767: LD_VAR 0 1
7771: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
7772: LD_INT 0
7774: PPUSH
7775: PPUSH
7776: PPUSH
// for side = 1 to 8 do
7777: LD_ADDR_VAR 0 3
7781: PUSH
7782: DOUBLE
7783: LD_INT 1
7785: DEC
7786: ST_TO_ADDR
7787: LD_INT 8
7789: PUSH
7790: FOR_TO
7791: IFFALSE 11787
// begin for i = 1 to 73 do
7793: LD_ADDR_VAR 0 4
7797: PUSH
7798: DOUBLE
7799: LD_INT 1
7801: DEC
7802: ST_TO_ADDR
7803: LD_INT 73
7805: PUSH
7806: FOR_TO
7807: IFFALSE 7828
// SetTech ( i , side , state_disabled ) ;
7809: LD_VAR 0 4
7813: PPUSH
7814: LD_VAR 0 3
7818: PPUSH
7819: LD_INT 0
7821: PPUSH
7822: CALL_OW 322
7826: GO 7806
7828: POP
7829: POP
// for i = 0 to 40 do
7830: LD_ADDR_VAR 0 4
7834: PUSH
7835: DOUBLE
7836: LD_INT 0
7838: DEC
7839: ST_TO_ADDR
7840: LD_INT 40
7842: PUSH
7843: FOR_TO
7844: IFFALSE 7865
// SetRestrict ( i , side , false ) ;
7846: LD_VAR 0 4
7850: PPUSH
7851: LD_VAR 0 3
7855: PPUSH
7856: LD_INT 0
7858: PPUSH
7859: CALL_OW 324
7863: GO 7843
7865: POP
7866: POP
// case level of 1 :
7867: LD_VAR 0 1
7871: PUSH
7872: LD_INT 1
7874: DOUBLE
7875: EQUAL
7876: IFTRUE 7880
7878: GO 8033
7880: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
7881: LD_INT 35
7883: PPUSH
7884: LD_VAR 0 3
7888: PPUSH
7889: LD_INT 1
7891: PPUSH
7892: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
7896: LD_INT 45
7898: PPUSH
7899: LD_VAR 0 3
7903: PPUSH
7904: LD_INT 1
7906: PPUSH
7907: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
7911: LD_INT 46
7913: PPUSH
7914: LD_VAR 0 3
7918: PPUSH
7919: LD_INT 1
7921: PPUSH
7922: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
7926: LD_INT 47
7928: PPUSH
7929: LD_VAR 0 3
7933: PPUSH
7934: LD_INT 1
7936: PPUSH
7937: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
7941: LD_INT 0
7943: PPUSH
7944: LD_VAR 0 3
7948: PPUSH
7949: LD_INT 1
7951: PPUSH
7952: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
7956: LD_INT 2
7958: PPUSH
7959: LD_VAR 0 3
7963: PPUSH
7964: LD_INT 1
7966: PPUSH
7967: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
7971: LD_INT 4
7973: PPUSH
7974: LD_VAR 0 3
7978: PPUSH
7979: LD_INT 1
7981: PPUSH
7982: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
7986: LD_INT 6
7988: PPUSH
7989: LD_VAR 0 3
7993: PPUSH
7994: LD_INT 1
7996: PPUSH
7997: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8001: LD_INT 29
8003: PPUSH
8004: LD_VAR 0 3
8008: PPUSH
8009: LD_INT 1
8011: PPUSH
8012: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8016: LD_INT 31
8018: PPUSH
8019: LD_VAR 0 3
8023: PPUSH
8024: LD_INT 1
8026: PPUSH
8027: CALL_OW 324
// end ; 2 :
8031: GO 11785
8033: LD_INT 2
8035: DOUBLE
8036: EQUAL
8037: IFTRUE 8041
8039: GO 8239
8041: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8042: LD_INT 35
8044: PPUSH
8045: LD_VAR 0 3
8049: PPUSH
8050: LD_INT 1
8052: PPUSH
8053: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8057: LD_INT 45
8059: PPUSH
8060: LD_VAR 0 3
8064: PPUSH
8065: LD_INT 1
8067: PPUSH
8068: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8072: LD_INT 46
8074: PPUSH
8075: LD_VAR 0 3
8079: PPUSH
8080: LD_INT 1
8082: PPUSH
8083: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8087: LD_INT 47
8089: PPUSH
8090: LD_VAR 0 3
8094: PPUSH
8095: LD_INT 1
8097: PPUSH
8098: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8102: LD_INT 1
8104: PPUSH
8105: LD_VAR 0 3
8109: PPUSH
8110: LD_INT 1
8112: PPUSH
8113: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8117: LD_INT 2
8119: PPUSH
8120: LD_VAR 0 3
8124: PPUSH
8125: LD_INT 1
8127: PPUSH
8128: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8132: LD_INT 11
8134: PPUSH
8135: LD_VAR 0 3
8139: PPUSH
8140: LD_INT 1
8142: PPUSH
8143: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8147: LD_INT 0
8149: PPUSH
8150: LD_VAR 0 3
8154: PPUSH
8155: LD_INT 1
8157: PPUSH
8158: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8162: LD_INT 2
8164: PPUSH
8165: LD_VAR 0 3
8169: PPUSH
8170: LD_INT 1
8172: PPUSH
8173: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8177: LD_INT 4
8179: PPUSH
8180: LD_VAR 0 3
8184: PPUSH
8185: LD_INT 1
8187: PPUSH
8188: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8192: LD_INT 6
8194: PPUSH
8195: LD_VAR 0 3
8199: PPUSH
8200: LD_INT 1
8202: PPUSH
8203: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8207: LD_INT 29
8209: PPUSH
8210: LD_VAR 0 3
8214: PPUSH
8215: LD_INT 1
8217: PPUSH
8218: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8222: LD_INT 31
8224: PPUSH
8225: LD_VAR 0 3
8229: PPUSH
8230: LD_INT 1
8232: PPUSH
8233: CALL_OW 324
// end ; 3 :
8237: GO 11785
8239: LD_INT 3
8241: DOUBLE
8242: EQUAL
8243: IFTRUE 8247
8245: GO 8700
8247: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8248: LD_INT 35
8250: PPUSH
8251: LD_VAR 0 3
8255: PPUSH
8256: LD_INT 1
8258: PPUSH
8259: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8263: LD_INT 45
8265: PPUSH
8266: LD_VAR 0 3
8270: PPUSH
8271: LD_INT 1
8273: PPUSH
8274: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8278: LD_INT 46
8280: PPUSH
8281: LD_VAR 0 3
8285: PPUSH
8286: LD_INT 1
8288: PPUSH
8289: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8293: LD_INT 47
8295: PPUSH
8296: LD_VAR 0 3
8300: PPUSH
8301: LD_INT 1
8303: PPUSH
8304: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8308: LD_INT 1
8310: PPUSH
8311: LD_VAR 0 3
8315: PPUSH
8316: LD_INT 1
8318: PPUSH
8319: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8323: LD_INT 2
8325: PPUSH
8326: LD_VAR 0 3
8330: PPUSH
8331: LD_INT 1
8333: PPUSH
8334: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8338: LD_INT 11
8340: PPUSH
8341: LD_VAR 0 3
8345: PPUSH
8346: LD_INT 1
8348: PPUSH
8349: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
8353: LD_INT 48
8355: PPUSH
8356: LD_VAR 0 3
8360: PPUSH
8361: LD_INT 1
8363: PPUSH
8364: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
8368: LD_INT 69
8370: PPUSH
8371: LD_VAR 0 3
8375: PPUSH
8376: LD_INT 1
8378: PPUSH
8379: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
8383: LD_INT 39
8385: PPUSH
8386: LD_VAR 0 3
8390: PPUSH
8391: LD_INT 1
8393: PPUSH
8394: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
8398: LD_INT 43
8400: PPUSH
8401: LD_VAR 0 3
8405: PPUSH
8406: LD_INT 1
8408: PPUSH
8409: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
8413: LD_INT 51
8415: PPUSH
8416: LD_VAR 0 3
8420: PPUSH
8421: LD_INT 1
8423: PPUSH
8424: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
8428: LD_INT 6
8430: PPUSH
8431: LD_VAR 0 3
8435: PPUSH
8436: LD_INT 1
8438: PPUSH
8439: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8443: LD_INT 0
8445: PPUSH
8446: LD_VAR 0 3
8450: PPUSH
8451: LD_INT 1
8453: PPUSH
8454: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8458: LD_INT 2
8460: PPUSH
8461: LD_VAR 0 3
8465: PPUSH
8466: LD_INT 1
8468: PPUSH
8469: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
8473: LD_INT 3
8475: PPUSH
8476: LD_VAR 0 3
8480: PPUSH
8481: LD_INT 1
8483: PPUSH
8484: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8488: LD_INT 4
8490: PPUSH
8491: LD_VAR 0 3
8495: PPUSH
8496: LD_INT 1
8498: PPUSH
8499: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8503: LD_INT 6
8505: PPUSH
8506: LD_VAR 0 3
8510: PPUSH
8511: LD_INT 1
8513: PPUSH
8514: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
8518: LD_INT 7
8520: PPUSH
8521: LD_VAR 0 3
8525: PPUSH
8526: LD_INT 1
8528: PPUSH
8529: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
8533: LD_INT 8
8535: PPUSH
8536: LD_VAR 0 3
8540: PPUSH
8541: LD_INT 1
8543: PPUSH
8544: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
8548: LD_INT 10
8550: PPUSH
8551: LD_VAR 0 3
8555: PPUSH
8556: LD_INT 1
8558: PPUSH
8559: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
8563: LD_INT 15
8565: PPUSH
8566: LD_VAR 0 3
8570: PPUSH
8571: LD_INT 1
8573: PPUSH
8574: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
8578: LD_INT 16
8580: PPUSH
8581: LD_VAR 0 3
8585: PPUSH
8586: LD_INT 1
8588: PPUSH
8589: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
8593: LD_INT 17
8595: PPUSH
8596: LD_VAR 0 3
8600: PPUSH
8601: LD_INT 1
8603: PPUSH
8604: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
8608: LD_INT 20
8610: PPUSH
8611: LD_VAR 0 3
8615: PPUSH
8616: LD_INT 1
8618: PPUSH
8619: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
8623: LD_INT 26
8625: PPUSH
8626: LD_VAR 0 3
8630: PPUSH
8631: LD_INT 1
8633: PPUSH
8634: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
8638: LD_INT 27
8640: PPUSH
8641: LD_VAR 0 3
8645: PPUSH
8646: LD_INT 1
8648: PPUSH
8649: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8653: LD_INT 29
8655: PPUSH
8656: LD_VAR 0 3
8660: PPUSH
8661: LD_INT 1
8663: PPUSH
8664: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8668: LD_INT 31
8670: PPUSH
8671: LD_VAR 0 3
8675: PPUSH
8676: LD_INT 1
8678: PPUSH
8679: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
8683: LD_INT 32
8685: PPUSH
8686: LD_VAR 0 3
8690: PPUSH
8691: LD_INT 1
8693: PPUSH
8694: CALL_OW 324
// end ; 4 :
8698: GO 11785
8700: LD_INT 4
8702: DOUBLE
8703: EQUAL
8704: IFTRUE 8708
8706: GO 9656
8708: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8709: LD_INT 35
8711: PPUSH
8712: LD_VAR 0 3
8716: PPUSH
8717: LD_INT 1
8719: PPUSH
8720: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8724: LD_INT 45
8726: PPUSH
8727: LD_VAR 0 3
8731: PPUSH
8732: LD_INT 1
8734: PPUSH
8735: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8739: LD_INT 46
8741: PPUSH
8742: LD_VAR 0 3
8746: PPUSH
8747: LD_INT 1
8749: PPUSH
8750: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8754: LD_INT 47
8756: PPUSH
8757: LD_VAR 0 3
8761: PPUSH
8762: LD_INT 1
8764: PPUSH
8765: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8769: LD_INT 1
8771: PPUSH
8772: LD_VAR 0 3
8776: PPUSH
8777: LD_INT 1
8779: PPUSH
8780: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8784: LD_INT 2
8786: PPUSH
8787: LD_VAR 0 3
8791: PPUSH
8792: LD_INT 1
8794: PPUSH
8795: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8799: LD_INT 11
8801: PPUSH
8802: LD_VAR 0 3
8806: PPUSH
8807: LD_INT 1
8809: PPUSH
8810: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
8814: LD_INT 20
8816: PPUSH
8817: LD_VAR 0 3
8821: PPUSH
8822: LD_INT 1
8824: PPUSH
8825: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
8829: LD_INT 48
8831: PPUSH
8832: LD_VAR 0 3
8836: PPUSH
8837: LD_INT 1
8839: PPUSH
8840: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
8844: LD_INT 49
8846: PPUSH
8847: LD_VAR 0 3
8851: PPUSH
8852: LD_INT 1
8854: PPUSH
8855: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
8859: LD_INT 69
8861: PPUSH
8862: LD_VAR 0 3
8866: PPUSH
8867: LD_INT 1
8869: PPUSH
8870: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
8874: LD_INT 39
8876: PPUSH
8877: LD_VAR 0 3
8881: PPUSH
8882: LD_INT 1
8884: PPUSH
8885: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
8889: LD_INT 34
8891: PPUSH
8892: LD_VAR 0 3
8896: PPUSH
8897: LD_INT 1
8899: PPUSH
8900: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
8904: LD_INT 42
8906: PPUSH
8907: LD_VAR 0 3
8911: PPUSH
8912: LD_INT 1
8914: PPUSH
8915: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
8919: LD_INT 44
8921: PPUSH
8922: LD_VAR 0 3
8926: PPUSH
8927: LD_INT 1
8929: PPUSH
8930: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
8934: LD_INT 41
8936: PPUSH
8937: LD_VAR 0 3
8941: PPUSH
8942: LD_INT 1
8944: PPUSH
8945: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
8949: LD_INT 43
8951: PPUSH
8952: LD_VAR 0 3
8956: PPUSH
8957: LD_INT 1
8959: PPUSH
8960: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
8964: LD_INT 70
8966: PPUSH
8967: LD_VAR 0 3
8971: PPUSH
8972: LD_INT 1
8974: PPUSH
8975: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
8979: LD_INT 51
8981: PPUSH
8982: LD_VAR 0 3
8986: PPUSH
8987: LD_INT 1
8989: PPUSH
8990: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
8994: LD_INT 52
8996: PPUSH
8997: LD_VAR 0 3
9001: PPUSH
9002: LD_INT 1
9004: PPUSH
9005: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9009: LD_INT 6
9011: PPUSH
9012: LD_VAR 0 3
9016: PPUSH
9017: LD_INT 1
9019: PPUSH
9020: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9024: LD_INT 15
9026: PPUSH
9027: LD_VAR 0 3
9031: PPUSH
9032: LD_INT 1
9034: PPUSH
9035: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
9039: LD_INT 7
9041: PPUSH
9042: LD_VAR 0 3
9046: PPUSH
9047: LD_INT 1
9049: PPUSH
9050: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
9054: LD_INT 12
9056: PPUSH
9057: LD_VAR 0 3
9061: PPUSH
9062: LD_INT 1
9064: PPUSH
9065: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
9069: LD_INT 18
9071: PPUSH
9072: LD_VAR 0 3
9076: PPUSH
9077: LD_INT 1
9079: PPUSH
9080: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
9084: LD_INT 60
9086: PPUSH
9087: LD_VAR 0 3
9091: PPUSH
9092: LD_INT 1
9094: PPUSH
9095: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
9099: LD_INT 9
9101: PPUSH
9102: LD_VAR 0 3
9106: PPUSH
9107: LD_INT 1
9109: PPUSH
9110: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
9114: LD_INT 30
9116: PPUSH
9117: LD_VAR 0 3
9121: PPUSH
9122: LD_INT 1
9124: PPUSH
9125: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
9129: LD_INT 37
9131: PPUSH
9132: LD_VAR 0 3
9136: PPUSH
9137: LD_INT 1
9139: PPUSH
9140: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
9144: LD_INT 5
9146: PPUSH
9147: LD_VAR 0 3
9151: PPUSH
9152: LD_INT 1
9154: PPUSH
9155: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
9159: LD_INT 66
9161: PPUSH
9162: LD_VAR 0 3
9166: PPUSH
9167: LD_INT 1
9169: PPUSH
9170: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
9174: LD_INT 21
9176: PPUSH
9177: LD_VAR 0 3
9181: PPUSH
9182: LD_INT 1
9184: PPUSH
9185: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
9189: LD_INT 22
9191: PPUSH
9192: LD_VAR 0 3
9196: PPUSH
9197: LD_INT 1
9199: PPUSH
9200: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
9204: LD_INT 54
9206: PPUSH
9207: LD_VAR 0 3
9211: PPUSH
9212: LD_INT 1
9214: PPUSH
9215: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9219: LD_INT 0
9221: PPUSH
9222: LD_VAR 0 3
9226: PPUSH
9227: LD_INT 1
9229: PPUSH
9230: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
9234: LD_INT 1
9236: PPUSH
9237: LD_VAR 0 3
9241: PPUSH
9242: LD_INT 1
9244: PPUSH
9245: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9249: LD_INT 2
9251: PPUSH
9252: LD_VAR 0 3
9256: PPUSH
9257: LD_INT 1
9259: PPUSH
9260: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9264: LD_INT 3
9266: PPUSH
9267: LD_VAR 0 3
9271: PPUSH
9272: LD_INT 1
9274: PPUSH
9275: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9279: LD_INT 4
9281: PPUSH
9282: LD_VAR 0 3
9286: PPUSH
9287: LD_INT 1
9289: PPUSH
9290: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
9294: LD_INT 5
9296: PPUSH
9297: LD_VAR 0 3
9301: PPUSH
9302: LD_INT 1
9304: PPUSH
9305: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9309: LD_INT 6
9311: PPUSH
9312: LD_VAR 0 3
9316: PPUSH
9317: LD_INT 1
9319: PPUSH
9320: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9324: LD_INT 7
9326: PPUSH
9327: LD_VAR 0 3
9331: PPUSH
9332: LD_INT 1
9334: PPUSH
9335: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9339: LD_INT 8
9341: PPUSH
9342: LD_VAR 0 3
9346: PPUSH
9347: LD_INT 1
9349: PPUSH
9350: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9354: LD_INT 10
9356: PPUSH
9357: LD_VAR 0 3
9361: PPUSH
9362: LD_INT 1
9364: PPUSH
9365: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
9369: LD_INT 11
9371: PPUSH
9372: LD_VAR 0 3
9376: PPUSH
9377: LD_INT 1
9379: PPUSH
9380: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
9384: LD_INT 12
9386: PPUSH
9387: LD_VAR 0 3
9391: PPUSH
9392: LD_INT 1
9394: PPUSH
9395: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
9399: LD_INT 13
9401: PPUSH
9402: LD_VAR 0 3
9406: PPUSH
9407: LD_INT 1
9409: PPUSH
9410: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
9414: LD_INT 14
9416: PPUSH
9417: LD_VAR 0 3
9421: PPUSH
9422: LD_INT 1
9424: PPUSH
9425: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9429: LD_INT 15
9431: PPUSH
9432: LD_VAR 0 3
9436: PPUSH
9437: LD_INT 1
9439: PPUSH
9440: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9444: LD_INT 16
9446: PPUSH
9447: LD_VAR 0 3
9451: PPUSH
9452: LD_INT 1
9454: PPUSH
9455: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9459: LD_INT 17
9461: PPUSH
9462: LD_VAR 0 3
9466: PPUSH
9467: LD_INT 1
9469: PPUSH
9470: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
9474: LD_INT 19
9476: PPUSH
9477: LD_VAR 0 3
9481: PPUSH
9482: LD_INT 1
9484: PPUSH
9485: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9489: LD_INT 20
9491: PPUSH
9492: LD_VAR 0 3
9496: PPUSH
9497: LD_INT 1
9499: PPUSH
9500: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
9504: LD_INT 21
9506: PPUSH
9507: LD_VAR 0 3
9511: PPUSH
9512: LD_INT 1
9514: PPUSH
9515: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
9519: LD_INT 23
9521: PPUSH
9522: LD_VAR 0 3
9526: PPUSH
9527: LD_INT 1
9529: PPUSH
9530: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9534: LD_INT 26
9536: PPUSH
9537: LD_VAR 0 3
9541: PPUSH
9542: LD_INT 1
9544: PPUSH
9545: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9549: LD_INT 27
9551: PPUSH
9552: LD_VAR 0 3
9556: PPUSH
9557: LD_INT 1
9559: PPUSH
9560: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
9564: LD_INT 28
9566: PPUSH
9567: LD_VAR 0 3
9571: PPUSH
9572: LD_INT 1
9574: PPUSH
9575: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9579: LD_INT 29
9581: PPUSH
9582: LD_VAR 0 3
9586: PPUSH
9587: LD_INT 1
9589: PPUSH
9590: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
9594: LD_INT 30
9596: PPUSH
9597: LD_VAR 0 3
9601: PPUSH
9602: LD_INT 1
9604: PPUSH
9605: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9609: LD_INT 31
9611: PPUSH
9612: LD_VAR 0 3
9616: PPUSH
9617: LD_INT 1
9619: PPUSH
9620: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9624: LD_INT 32
9626: PPUSH
9627: LD_VAR 0 3
9631: PPUSH
9632: LD_INT 1
9634: PPUSH
9635: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
9639: LD_INT 36
9641: PPUSH
9642: LD_VAR 0 3
9646: PPUSH
9647: LD_INT 1
9649: PPUSH
9650: CALL_OW 324
// end ; 5 :
9654: GO 11785
9656: LD_INT 5
9658: DOUBLE
9659: EQUAL
9660: IFTRUE 9664
9662: GO 10777
9664: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9665: LD_INT 35
9667: PPUSH
9668: LD_VAR 0 3
9672: PPUSH
9673: LD_INT 1
9675: PPUSH
9676: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9680: LD_INT 45
9682: PPUSH
9683: LD_VAR 0 3
9687: PPUSH
9688: LD_INT 1
9690: PPUSH
9691: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9695: LD_INT 46
9697: PPUSH
9698: LD_VAR 0 3
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9710: LD_INT 47
9712: PPUSH
9713: LD_VAR 0 3
9717: PPUSH
9718: LD_INT 1
9720: PPUSH
9721: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9725: LD_INT 1
9727: PPUSH
9728: LD_VAR 0 3
9732: PPUSH
9733: LD_INT 1
9735: PPUSH
9736: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9740: LD_INT 2
9742: PPUSH
9743: LD_VAR 0 3
9747: PPUSH
9748: LD_INT 1
9750: PPUSH
9751: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9755: LD_INT 11
9757: PPUSH
9758: LD_VAR 0 3
9762: PPUSH
9763: LD_INT 1
9765: PPUSH
9766: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9770: LD_INT 20
9772: PPUSH
9773: LD_VAR 0 3
9777: PPUSH
9778: LD_INT 1
9780: PPUSH
9781: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9785: LD_INT 48
9787: PPUSH
9788: LD_VAR 0 3
9792: PPUSH
9793: LD_INT 1
9795: PPUSH
9796: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9800: LD_INT 49
9802: PPUSH
9803: LD_VAR 0 3
9807: PPUSH
9808: LD_INT 1
9810: PPUSH
9811: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9815: LD_INT 69
9817: PPUSH
9818: LD_VAR 0 3
9822: PPUSH
9823: LD_INT 1
9825: PPUSH
9826: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9830: LD_INT 39
9832: PPUSH
9833: LD_VAR 0 3
9837: PPUSH
9838: LD_INT 1
9840: PPUSH
9841: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9845: LD_INT 34
9847: PPUSH
9848: LD_VAR 0 3
9852: PPUSH
9853: LD_INT 1
9855: PPUSH
9856: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
9860: LD_INT 42
9862: PPUSH
9863: LD_VAR 0 3
9867: PPUSH
9868: LD_INT 1
9870: PPUSH
9871: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
9875: LD_INT 44
9877: PPUSH
9878: LD_VAR 0 3
9882: PPUSH
9883: LD_INT 1
9885: PPUSH
9886: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
9890: LD_INT 41
9892: PPUSH
9893: LD_VAR 0 3
9897: PPUSH
9898: LD_INT 1
9900: PPUSH
9901: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
9905: LD_INT 40
9907: PPUSH
9908: LD_VAR 0 3
9912: PPUSH
9913: LD_INT 1
9915: PPUSH
9916: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9920: LD_INT 43
9922: PPUSH
9923: LD_VAR 0 3
9927: PPUSH
9928: LD_INT 1
9930: PPUSH
9931: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
9935: LD_INT 70
9937: PPUSH
9938: LD_VAR 0 3
9942: PPUSH
9943: LD_INT 1
9945: PPUSH
9946: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9950: LD_INT 51
9952: PPUSH
9953: LD_VAR 0 3
9957: PPUSH
9958: LD_INT 1
9960: PPUSH
9961: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
9965: LD_INT 52
9967: PPUSH
9968: LD_VAR 0 3
9972: PPUSH
9973: LD_INT 1
9975: PPUSH
9976: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9980: LD_INT 6
9982: PPUSH
9983: LD_VAR 0 3
9987: PPUSH
9988: LD_INT 1
9990: PPUSH
9991: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9995: LD_INT 15
9997: PPUSH
9998: LD_VAR 0 3
10002: PPUSH
10003: LD_INT 1
10005: PPUSH
10006: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10010: LD_INT 7
10012: PPUSH
10013: LD_VAR 0 3
10017: PPUSH
10018: LD_INT 1
10020: PPUSH
10021: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10025: LD_INT 12
10027: PPUSH
10028: LD_VAR 0 3
10032: PPUSH
10033: LD_INT 1
10035: PPUSH
10036: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
10040: LD_INT 17
10042: PPUSH
10043: LD_VAR 0 3
10047: PPUSH
10048: LD_INT 1
10050: PPUSH
10051: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10055: LD_INT 18
10057: PPUSH
10058: LD_VAR 0 3
10062: PPUSH
10063: LD_INT 1
10065: PPUSH
10066: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10070: LD_INT 60
10072: PPUSH
10073: LD_VAR 0 3
10077: PPUSH
10078: LD_INT 1
10080: PPUSH
10081: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
10085: LD_INT 32
10087: PPUSH
10088: LD_VAR 0 3
10092: PPUSH
10093: LD_INT 1
10095: PPUSH
10096: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10100: LD_INT 9
10102: PPUSH
10103: LD_VAR 0 3
10107: PPUSH
10108: LD_INT 1
10110: PPUSH
10111: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
10115: LD_INT 57
10117: PPUSH
10118: LD_VAR 0 3
10122: PPUSH
10123: LD_INT 1
10125: PPUSH
10126: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10130: LD_INT 30
10132: PPUSH
10133: LD_VAR 0 3
10137: PPUSH
10138: LD_INT 1
10140: PPUSH
10141: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10145: LD_INT 37
10147: PPUSH
10148: LD_VAR 0 3
10152: PPUSH
10153: LD_INT 1
10155: PPUSH
10156: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
10160: LD_INT 63
10162: PPUSH
10163: LD_VAR 0 3
10167: PPUSH
10168: LD_INT 1
10170: PPUSH
10171: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
10175: LD_INT 3
10177: PPUSH
10178: LD_VAR 0 3
10182: PPUSH
10183: LD_INT 1
10185: PPUSH
10186: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
10190: LD_INT 4
10192: PPUSH
10193: LD_VAR 0 3
10197: PPUSH
10198: LD_INT 1
10200: PPUSH
10201: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10205: LD_INT 5
10207: PPUSH
10208: LD_VAR 0 3
10212: PPUSH
10213: LD_INT 1
10215: PPUSH
10216: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10220: LD_INT 66
10222: PPUSH
10223: LD_VAR 0 3
10227: PPUSH
10228: LD_INT 1
10230: PPUSH
10231: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10235: LD_INT 21
10237: PPUSH
10238: LD_VAR 0 3
10242: PPUSH
10243: LD_INT 1
10245: PPUSH
10246: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10250: LD_INT 22
10252: PPUSH
10253: LD_VAR 0 3
10257: PPUSH
10258: LD_INT 1
10260: PPUSH
10261: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
10265: LD_INT 19
10267: PPUSH
10268: LD_VAR 0 3
10272: PPUSH
10273: LD_INT 1
10275: PPUSH
10276: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10280: LD_INT 54
10282: PPUSH
10283: LD_VAR 0 3
10287: PPUSH
10288: LD_INT 1
10290: PPUSH
10291: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
10295: LD_INT 55
10297: PPUSH
10298: LD_VAR 0 3
10302: PPUSH
10303: LD_INT 1
10305: PPUSH
10306: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10310: LD_INT 0
10312: PPUSH
10313: LD_VAR 0 3
10317: PPUSH
10318: LD_INT 1
10320: PPUSH
10321: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10325: LD_INT 1
10327: PPUSH
10328: LD_VAR 0 3
10332: PPUSH
10333: LD_INT 1
10335: PPUSH
10336: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10340: LD_INT 2
10342: PPUSH
10343: LD_VAR 0 3
10347: PPUSH
10348: LD_INT 1
10350: PPUSH
10351: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10355: LD_INT 3
10357: PPUSH
10358: LD_VAR 0 3
10362: PPUSH
10363: LD_INT 1
10365: PPUSH
10366: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10370: LD_INT 4
10372: PPUSH
10373: LD_VAR 0 3
10377: PPUSH
10378: LD_INT 1
10380: PPUSH
10381: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10385: LD_INT 5
10387: PPUSH
10388: LD_VAR 0 3
10392: PPUSH
10393: LD_INT 1
10395: PPUSH
10396: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10400: LD_INT 6
10402: PPUSH
10403: LD_VAR 0 3
10407: PPUSH
10408: LD_INT 1
10410: PPUSH
10411: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10415: LD_INT 7
10417: PPUSH
10418: LD_VAR 0 3
10422: PPUSH
10423: LD_INT 1
10425: PPUSH
10426: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10430: LD_INT 8
10432: PPUSH
10433: LD_VAR 0 3
10437: PPUSH
10438: LD_INT 1
10440: PPUSH
10441: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10445: LD_INT 10
10447: PPUSH
10448: LD_VAR 0 3
10452: PPUSH
10453: LD_INT 1
10455: PPUSH
10456: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10460: LD_INT 11
10462: PPUSH
10463: LD_VAR 0 3
10467: PPUSH
10468: LD_INT 1
10470: PPUSH
10471: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10475: LD_INT 12
10477: PPUSH
10478: LD_VAR 0 3
10482: PPUSH
10483: LD_INT 1
10485: PPUSH
10486: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10490: LD_INT 13
10492: PPUSH
10493: LD_VAR 0 3
10497: PPUSH
10498: LD_INT 1
10500: PPUSH
10501: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10505: LD_INT 14
10507: PPUSH
10508: LD_VAR 0 3
10512: PPUSH
10513: LD_INT 1
10515: PPUSH
10516: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10520: LD_INT 15
10522: PPUSH
10523: LD_VAR 0 3
10527: PPUSH
10528: LD_INT 1
10530: PPUSH
10531: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10535: LD_INT 16
10537: PPUSH
10538: LD_VAR 0 3
10542: PPUSH
10543: LD_INT 1
10545: PPUSH
10546: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10550: LD_INT 17
10552: PPUSH
10553: LD_VAR 0 3
10557: PPUSH
10558: LD_INT 1
10560: PPUSH
10561: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
10565: LD_INT 18
10567: PPUSH
10568: LD_VAR 0 3
10572: PPUSH
10573: LD_INT 1
10575: PPUSH
10576: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10580: LD_INT 19
10582: PPUSH
10583: LD_VAR 0 3
10587: PPUSH
10588: LD_INT 1
10590: PPUSH
10591: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10595: LD_INT 20
10597: PPUSH
10598: LD_VAR 0 3
10602: PPUSH
10603: LD_INT 1
10605: PPUSH
10606: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10610: LD_INT 21
10612: PPUSH
10613: LD_VAR 0 3
10617: PPUSH
10618: LD_INT 1
10620: PPUSH
10621: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10625: LD_INT 23
10627: PPUSH
10628: LD_VAR 0 3
10632: PPUSH
10633: LD_INT 1
10635: PPUSH
10636: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10640: LD_INT 26
10642: PPUSH
10643: LD_VAR 0 3
10647: PPUSH
10648: LD_INT 1
10650: PPUSH
10651: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10655: LD_INT 27
10657: PPUSH
10658: LD_VAR 0 3
10662: PPUSH
10663: LD_INT 1
10665: PPUSH
10666: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10670: LD_INT 28
10672: PPUSH
10673: LD_VAR 0 3
10677: PPUSH
10678: LD_INT 1
10680: PPUSH
10681: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10685: LD_INT 29
10687: PPUSH
10688: LD_VAR 0 3
10692: PPUSH
10693: LD_INT 1
10695: PPUSH
10696: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10700: LD_INT 30
10702: PPUSH
10703: LD_VAR 0 3
10707: PPUSH
10708: LD_INT 1
10710: PPUSH
10711: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10715: LD_INT 31
10717: PPUSH
10718: LD_VAR 0 3
10722: PPUSH
10723: LD_INT 1
10725: PPUSH
10726: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10730: LD_INT 32
10732: PPUSH
10733: LD_VAR 0 3
10737: PPUSH
10738: LD_INT 1
10740: PPUSH
10741: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
10745: LD_INT 33
10747: PPUSH
10748: LD_VAR 0 3
10752: PPUSH
10753: LD_INT 1
10755: PPUSH
10756: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10760: LD_INT 36
10762: PPUSH
10763: LD_VAR 0 3
10767: PPUSH
10768: LD_INT 1
10770: PPUSH
10771: CALL_OW 324
// end ; 6 :
10775: GO 11785
10777: LD_INT 6
10779: DOUBLE
10780: EQUAL
10781: IFTRUE 10785
10783: GO 11710
10785: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10786: LD_INT 35
10788: PPUSH
10789: LD_VAR 0 3
10793: PPUSH
10794: LD_INT 1
10796: PPUSH
10797: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10801: LD_INT 45
10803: PPUSH
10804: LD_VAR 0 3
10808: PPUSH
10809: LD_INT 1
10811: PPUSH
10812: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10816: LD_INT 46
10818: PPUSH
10819: LD_VAR 0 3
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10831: LD_INT 47
10833: PPUSH
10834: LD_VAR 0 3
10838: PPUSH
10839: LD_INT 1
10841: PPUSH
10842: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10846: LD_INT 1
10848: PPUSH
10849: LD_VAR 0 3
10853: PPUSH
10854: LD_INT 1
10856: PPUSH
10857: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10861: LD_INT 2
10863: PPUSH
10864: LD_VAR 0 3
10868: PPUSH
10869: LD_INT 1
10871: PPUSH
10872: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10876: LD_INT 11
10878: PPUSH
10879: LD_VAR 0 3
10883: PPUSH
10884: LD_INT 1
10886: PPUSH
10887: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10891: LD_INT 20
10893: PPUSH
10894: LD_VAR 0 3
10898: PPUSH
10899: LD_INT 1
10901: PPUSH
10902: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10906: LD_INT 48
10908: PPUSH
10909: LD_VAR 0 3
10913: PPUSH
10914: LD_INT 1
10916: PPUSH
10917: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10921: LD_INT 49
10923: PPUSH
10924: LD_VAR 0 3
10928: PPUSH
10929: LD_INT 1
10931: PPUSH
10932: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
10936: LD_INT 50
10938: PPUSH
10939: LD_VAR 0 3
10943: PPUSH
10944: LD_INT 1
10946: PPUSH
10947: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10951: LD_INT 69
10953: PPUSH
10954: LD_VAR 0 3
10958: PPUSH
10959: LD_INT 1
10961: PPUSH
10962: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10966: LD_INT 39
10968: PPUSH
10969: LD_VAR 0 3
10973: PPUSH
10974: LD_INT 1
10976: PPUSH
10977: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10981: LD_INT 34
10983: PPUSH
10984: LD_VAR 0 3
10988: PPUSH
10989: LD_INT 1
10991: PPUSH
10992: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10996: LD_INT 42
10998: PPUSH
10999: LD_VAR 0 3
11003: PPUSH
11004: LD_INT 1
11006: PPUSH
11007: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11011: LD_INT 44
11013: PPUSH
11014: LD_VAR 0 3
11018: PPUSH
11019: LD_INT 1
11021: PPUSH
11022: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11026: LD_INT 41
11028: PPUSH
11029: LD_VAR 0 3
11033: PPUSH
11034: LD_INT 1
11036: PPUSH
11037: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
11041: LD_INT 13
11043: PPUSH
11044: LD_VAR 0 3
11048: PPUSH
11049: LD_INT 1
11051: PPUSH
11052: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11056: LD_INT 40
11058: PPUSH
11059: LD_VAR 0 3
11063: PPUSH
11064: LD_INT 1
11066: PPUSH
11067: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11071: LD_INT 43
11073: PPUSH
11074: LD_VAR 0 3
11078: PPUSH
11079: LD_INT 1
11081: PPUSH
11082: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11086: LD_INT 70
11088: PPUSH
11089: LD_VAR 0 3
11093: PPUSH
11094: LD_INT 1
11096: PPUSH
11097: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
11101: LD_INT 23
11103: PPUSH
11104: LD_VAR 0 3
11108: PPUSH
11109: LD_INT 1
11111: PPUSH
11112: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11116: LD_INT 51
11118: PPUSH
11119: LD_VAR 0 3
11123: PPUSH
11124: LD_INT 1
11126: PPUSH
11127: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11131: LD_INT 52
11133: PPUSH
11134: LD_VAR 0 3
11138: PPUSH
11139: LD_INT 1
11141: PPUSH
11142: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11146: LD_INT 6
11148: PPUSH
11149: LD_VAR 0 3
11153: PPUSH
11154: LD_INT 1
11156: PPUSH
11157: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11161: LD_INT 15
11163: PPUSH
11164: LD_VAR 0 3
11168: PPUSH
11169: LD_INT 1
11171: PPUSH
11172: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11176: LD_INT 7
11178: PPUSH
11179: LD_VAR 0 3
11183: PPUSH
11184: LD_INT 1
11186: PPUSH
11187: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11191: LD_INT 12
11193: PPUSH
11194: LD_VAR 0 3
11198: PPUSH
11199: LD_INT 1
11201: PPUSH
11202: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
11206: LD_INT 10
11208: PPUSH
11209: LD_VAR 0 3
11213: PPUSH
11214: LD_INT 1
11216: PPUSH
11217: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11221: LD_INT 17
11223: PPUSH
11224: LD_VAR 0 3
11228: PPUSH
11229: LD_INT 1
11231: PPUSH
11232: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11236: LD_INT 18
11238: PPUSH
11239: LD_VAR 0 3
11243: PPUSH
11244: LD_INT 1
11246: PPUSH
11247: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11251: LD_INT 60
11253: PPUSH
11254: LD_VAR 0 3
11258: PPUSH
11259: LD_INT 1
11261: PPUSH
11262: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
11266: LD_INT 61
11268: PPUSH
11269: LD_VAR 0 3
11273: PPUSH
11274: LD_INT 1
11276: PPUSH
11277: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11281: LD_INT 32
11283: PPUSH
11284: LD_VAR 0 3
11288: PPUSH
11289: LD_INT 1
11291: PPUSH
11292: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
11296: LD_INT 27
11298: PPUSH
11299: LD_VAR 0 3
11303: PPUSH
11304: LD_INT 1
11306: PPUSH
11307: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
11311: LD_INT 36
11313: PPUSH
11314: LD_VAR 0 3
11318: PPUSH
11319: LD_INT 1
11321: PPUSH
11322: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
11326: LD_INT 33
11328: PPUSH
11329: LD_VAR 0 3
11333: PPUSH
11334: LD_INT 1
11336: PPUSH
11337: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11341: LD_INT 9
11343: PPUSH
11344: LD_VAR 0 3
11348: PPUSH
11349: LD_INT 1
11351: PPUSH
11352: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
11356: LD_INT 38
11358: PPUSH
11359: LD_VAR 0 3
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11371: LD_INT 57
11373: PPUSH
11374: LD_VAR 0 3
11378: PPUSH
11379: LD_INT 1
11381: PPUSH
11382: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
11386: LD_INT 58
11388: PPUSH
11389: LD_VAR 0 3
11393: PPUSH
11394: LD_INT 1
11396: PPUSH
11397: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
11401: LD_INT 28
11403: PPUSH
11404: LD_VAR 0 3
11408: PPUSH
11409: LD_INT 1
11411: PPUSH
11412: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
11416: LD_INT 29
11418: PPUSH
11419: LD_VAR 0 3
11423: PPUSH
11424: LD_INT 1
11426: PPUSH
11427: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11431: LD_INT 30
11433: PPUSH
11434: LD_VAR 0 3
11438: PPUSH
11439: LD_INT 1
11441: PPUSH
11442: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11446: LD_INT 37
11448: PPUSH
11449: LD_VAR 0 3
11453: PPUSH
11454: LD_INT 1
11456: PPUSH
11457: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11461: LD_INT 63
11463: PPUSH
11464: LD_VAR 0 3
11468: PPUSH
11469: LD_INT 1
11471: PPUSH
11472: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
11476: LD_INT 64
11478: PPUSH
11479: LD_VAR 0 3
11483: PPUSH
11484: LD_INT 1
11486: PPUSH
11487: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11491: LD_INT 3
11493: PPUSH
11494: LD_VAR 0 3
11498: PPUSH
11499: LD_INT 1
11501: PPUSH
11502: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11506: LD_INT 4
11508: PPUSH
11509: LD_VAR 0 3
11513: PPUSH
11514: LD_INT 1
11516: PPUSH
11517: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11521: LD_INT 5
11523: PPUSH
11524: LD_VAR 0 3
11528: PPUSH
11529: LD_INT 1
11531: PPUSH
11532: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
11536: LD_INT 8
11538: PPUSH
11539: LD_VAR 0 3
11543: PPUSH
11544: LD_INT 1
11546: PPUSH
11547: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11551: LD_INT 66
11553: PPUSH
11554: LD_VAR 0 3
11558: PPUSH
11559: LD_INT 1
11561: PPUSH
11562: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
11566: LD_INT 67
11568: PPUSH
11569: LD_VAR 0 3
11573: PPUSH
11574: LD_INT 1
11576: PPUSH
11577: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11581: LD_INT 21
11583: PPUSH
11584: LD_VAR 0 3
11588: PPUSH
11589: LD_INT 1
11591: PPUSH
11592: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11596: LD_INT 22
11598: PPUSH
11599: LD_VAR 0 3
11603: PPUSH
11604: LD_INT 1
11606: PPUSH
11607: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11611: LD_INT 19
11613: PPUSH
11614: LD_VAR 0 3
11618: PPUSH
11619: LD_INT 1
11621: PPUSH
11622: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
11626: LD_INT 26
11628: PPUSH
11629: LD_VAR 0 3
11633: PPUSH
11634: LD_INT 1
11636: PPUSH
11637: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11641: LD_INT 54
11643: PPUSH
11644: LD_VAR 0 3
11648: PPUSH
11649: LD_INT 1
11651: PPUSH
11652: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11656: LD_INT 55
11658: PPUSH
11659: LD_VAR 0 3
11663: PPUSH
11664: LD_INT 1
11666: PPUSH
11667: CALL_OW 322
// for i = 0 to 39 do
11671: LD_ADDR_VAR 0 4
11675: PUSH
11676: DOUBLE
11677: LD_INT 0
11679: DEC
11680: ST_TO_ADDR
11681: LD_INT 39
11683: PUSH
11684: FOR_TO
11685: IFFALSE 11706
// SetRestrict ( i , side , true ) ;
11687: LD_VAR 0 4
11691: PPUSH
11692: LD_VAR 0 3
11696: PPUSH
11697: LD_INT 1
11699: PPUSH
11700: CALL_OW 324
11704: GO 11684
11706: POP
11707: POP
// end ; else
11708: GO 11785
11710: POP
// begin for i = 1 to 73 do
11711: LD_ADDR_VAR 0 4
11715: PUSH
11716: DOUBLE
11717: LD_INT 1
11719: DEC
11720: ST_TO_ADDR
11721: LD_INT 73
11723: PUSH
11724: FOR_TO
11725: IFFALSE 11746
// SetTech ( i , side , state_enabled ) ;
11727: LD_VAR 0 4
11731: PPUSH
11732: LD_VAR 0 3
11736: PPUSH
11737: LD_INT 1
11739: PPUSH
11740: CALL_OW 322
11744: GO 11724
11746: POP
11747: POP
// for i = 0 to 39 do
11748: LD_ADDR_VAR 0 4
11752: PUSH
11753: DOUBLE
11754: LD_INT 0
11756: DEC
11757: ST_TO_ADDR
11758: LD_INT 39
11760: PUSH
11761: FOR_TO
11762: IFFALSE 11783
// SetRestrict ( i , side , true ) ;
11764: LD_VAR 0 4
11768: PPUSH
11769: LD_VAR 0 3
11773: PPUSH
11774: LD_INT 1
11776: PPUSH
11777: CALL_OW 324
11781: GO 11761
11783: POP
11784: POP
// end ; end ; end ;
11785: GO 7790
11787: POP
11788: POP
// end ; end_of_file
11789: LD_VAR 0 2
11793: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
11794: LD_INT 0
11796: PPUSH
11797: PPUSH
11798: PPUSH
11799: PPUSH
11800: PPUSH
11801: PPUSH
11802: PPUSH
11803: PPUSH
11804: PPUSH
// for i := 1 to 8 do
11805: LD_ADDR_VAR 0 2
11809: PUSH
11810: DOUBLE
11811: LD_INT 1
11813: DEC
11814: ST_TO_ADDR
11815: LD_INT 8
11817: PUSH
11818: FOR_TO
11819: IFFALSE 12203
// begin if Side_Positions [ i ] then
11821: LD_EXP 32
11825: PUSH
11826: LD_VAR 0 2
11830: ARRAY
11831: IFFALSE 12201
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
11833: LD_ADDR_VAR 0 7
11837: PUSH
11838: LD_INT 22
11840: PUSH
11841: LD_VAR 0 2
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 21
11852: PUSH
11853: LD_INT 1
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PPUSH
11864: CALL_OW 69
11868: PUSH
11869: LD_INT 0
11871: PLUS
11872: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11873: LD_ADDR_VAR 0 9
11877: PUSH
11878: LD_INT 22
11880: PUSH
11881: LD_VAR 0 2
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: LD_INT 2
11892: PUSH
11893: LD_INT 30
11895: PUSH
11896: LD_INT 0
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: LD_INT 30
11905: PUSH
11906: LD_INT 1
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: LIST
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PPUSH
11922: CALL_OW 69
11926: ST_TO_ADDR
// crates := 0 ;
11927: LD_ADDR_VAR 0 4
11931: PUSH
11932: LD_INT 0
11934: ST_TO_ADDR
// oil := 0 ;
11935: LD_ADDR_VAR 0 5
11939: PUSH
11940: LD_INT 0
11942: ST_TO_ADDR
// sib := 0 ;
11943: LD_ADDR_VAR 0 6
11947: PUSH
11948: LD_INT 0
11950: ST_TO_ADDR
// if bases then
11951: LD_VAR 0 9
11955: IFFALSE 12061
// begin for j in bases do
11957: LD_ADDR_VAR 0 3
11961: PUSH
11962: LD_VAR 0 9
11966: PUSH
11967: FOR_IN
11968: IFFALSE 12059
// begin base := GetBase ( j ) ;
11970: LD_ADDR_VAR 0 8
11974: PUSH
11975: LD_VAR 0 3
11979: PPUSH
11980: CALL_OW 274
11984: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
11985: LD_ADDR_VAR 0 4
11989: PUSH
11990: LD_VAR 0 4
11994: PUSH
11995: LD_VAR 0 8
11999: PPUSH
12000: LD_INT 1
12002: PPUSH
12003: CALL_OW 275
12007: PLUS
12008: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
12009: LD_ADDR_VAR 0 5
12013: PUSH
12014: LD_VAR 0 5
12018: PUSH
12019: LD_VAR 0 8
12023: PPUSH
12024: LD_INT 2
12026: PPUSH
12027: CALL_OW 275
12031: PLUS
12032: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
12033: LD_ADDR_VAR 0 6
12037: PUSH
12038: LD_VAR 0 6
12042: PUSH
12043: LD_VAR 0 8
12047: PPUSH
12048: LD_INT 3
12050: PPUSH
12051: CALL_OW 275
12055: PLUS
12056: ST_TO_ADDR
// end ;
12057: GO 11967
12059: POP
12060: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
12061: LD_STRING setSpecText(
12063: PUSH
12064: LD_VAR 0 2
12068: STR
12069: PUSH
12070: LD_STRING ,
12072: STR
12073: PUSH
12074: LD_INT 2
12076: STR
12077: PUSH
12078: LD_STRING ,
12080: STR
12081: PUSH
12082: LD_VAR 0 4
12086: STR
12087: PUSH
12088: LD_STRING )
12090: STR
12091: PPUSH
12092: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
12096: LD_STRING setSpecText(
12098: PUSH
12099: LD_VAR 0 2
12103: STR
12104: PUSH
12105: LD_STRING ,
12107: STR
12108: PUSH
12109: LD_INT 3
12111: STR
12112: PUSH
12113: LD_STRING ,
12115: STR
12116: PUSH
12117: LD_VAR 0 5
12121: STR
12122: PUSH
12123: LD_STRING )
12125: STR
12126: PPUSH
12127: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
12131: LD_STRING setSpecText(
12133: PUSH
12134: LD_VAR 0 2
12138: STR
12139: PUSH
12140: LD_STRING ,
12142: STR
12143: PUSH
12144: LD_INT 4
12146: STR
12147: PUSH
12148: LD_STRING ,
12150: STR
12151: PUSH
12152: LD_VAR 0 6
12156: STR
12157: PUSH
12158: LD_STRING )
12160: STR
12161: PPUSH
12162: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
12166: LD_STRING setSpecText(
12168: PUSH
12169: LD_VAR 0 2
12173: STR
12174: PUSH
12175: LD_STRING ,
12177: STR
12178: PUSH
12179: LD_INT 5
12181: STR
12182: PUSH
12183: LD_STRING ,
12185: STR
12186: PUSH
12187: LD_VAR 0 7
12191: STR
12192: PUSH
12193: LD_STRING )
12195: STR
12196: PPUSH
12197: CALL_OW 559
// end ; end ;
12201: GO 11818
12203: POP
12204: POP
// end ;
12205: LD_VAR 0 1
12209: RET
// every 0 0$1 do
12210: GO 12212
12212: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
12213: LD_STRING setSpecLogoNumber(
12215: PUSH
12216: LD_INT 2
12218: STR
12219: PUSH
12220: LD_STRING ,
12222: STR
12223: PUSH
12224: LD_INT 1
12226: STR
12227: PUSH
12228: LD_STRING )
12230: STR
12231: PPUSH
12232: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
12236: LD_STRING setSpecLogoNumber(
12238: PUSH
12239: LD_INT 3
12241: STR
12242: PUSH
12243: LD_STRING ,
12245: STR
12246: PUSH
12247: LD_INT 2
12249: STR
12250: PUSH
12251: LD_STRING )
12253: STR
12254: PPUSH
12255: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
12259: LD_STRING setSpecLogoNumber(
12261: PUSH
12262: LD_INT 4
12264: STR
12265: PUSH
12266: LD_STRING ,
12268: STR
12269: PUSH
12270: LD_INT 3
12272: STR
12273: PUSH
12274: LD_STRING )
12276: STR
12277: PPUSH
12278: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
12282: LD_STRING setSpecLogoNumber(
12284: PUSH
12285: LD_INT 5
12287: STR
12288: PUSH
12289: LD_STRING ,
12291: STR
12292: PUSH
12293: LD_INT 4
12295: STR
12296: PUSH
12297: LD_STRING )
12299: STR
12300: PPUSH
12301: CALL_OW 559
// end ;
12305: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
12306: LD_INT 2
12308: PUSH
12309: LD_INT 30
12311: PUSH
12312: LD_INT 0
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 30
12321: PUSH
12322: LD_INT 1
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: LIST
12333: PPUSH
12334: CALL_OW 69
12338: IFFALSE 12348
12340: GO 12342
12342: DISABLE
// begin enable ;
12343: ENABLE
// UpdateSpectatorBar ;
12344: CALL 11794 0 0
// end ; end_of_file
12348: END
// var respawn , inqueue ; export function init_respawning ; begin
12349: LD_INT 0
12351: PPUSH
// respawn := Rand ( 1 , 8 ) ;
12352: LD_ADDR_LOC 24
12356: PUSH
12357: LD_INT 1
12359: PPUSH
12360: LD_INT 8
12362: PPUSH
12363: CALL_OW 12
12367: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12368: LD_ADDR_LOC 25
12372: PUSH
12373: LD_INT 0
12375: PUSH
12376: LD_INT 0
12378: PUSH
12379: LD_INT 0
12381: PUSH
12382: LD_INT 0
12384: PUSH
12385: LD_INT 0
12387: PUSH
12388: LD_INT 0
12390: PUSH
12391: LD_INT 0
12393: PUSH
12394: LD_INT 0
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: ST_TO_ADDR
// end ;
12407: LD_VAR 0 1
12411: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
12412: GO 12414
12414: DISABLE
12415: LD_INT 0
12417: PPUSH
12418: PPUSH
12419: PPUSH
// begin if respawning_time_max = 0 then
12420: LD_EXP 26
12424: PUSH
12425: LD_INT 0
12427: EQUAL
12428: IFFALSE 12432
// exit ;
12430: GO 12840
// if respawn = 8 then
12432: LD_LOC 24
12436: PUSH
12437: LD_INT 8
12439: EQUAL
12440: IFFALSE 12452
// respawn := 1 else
12442: LD_ADDR_LOC 24
12446: PUSH
12447: LD_INT 1
12449: ST_TO_ADDR
12450: GO 12466
// respawn := respawn + 1 ;
12452: LD_ADDR_LOC 24
12456: PUSH
12457: LD_LOC 24
12461: PUSH
12462: LD_INT 1
12464: PLUS
12465: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
12466: LD_EXP 32
12470: PUSH
12471: LD_LOC 24
12475: ARRAY
12476: PUSH
12477: LD_LOC 25
12481: PUSH
12482: LD_LOC 24
12486: ARRAY
12487: NOT
12488: AND
12489: IFFALSE 12839
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
12491: LD_ADDR_VAR 0 1
12495: PUSH
12496: LD_INT 21
12498: PUSH
12499: LD_INT 1
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: LD_INT 22
12508: PUSH
12509: LD_LOC 24
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: PUSH
12518: LD_INT 3
12520: PUSH
12521: LD_INT 23
12523: PUSH
12524: LD_INT 0
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: PPUSH
12537: CALL_OW 69
12541: ST_TO_ADDR
// if n < number_of_people then
12542: LD_VAR 0 1
12546: PUSH
12547: LD_EXP 19
12551: LESS
12552: IFFALSE 12836
// begin aktresp := respawn ;
12554: LD_ADDR_VAR 0 3
12558: PUSH
12559: LD_LOC 24
12563: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
12564: LD_ADDR_LOC 25
12568: PUSH
12569: LD_LOC 25
12573: PPUSH
12574: LD_VAR 0 3
12578: PPUSH
12579: LD_INT 1
12581: PPUSH
12582: CALL_OW 1
12586: ST_TO_ADDR
// enable ;
12587: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
12588: LD_EXP 25
12592: PPUSH
12593: LD_EXP 26
12597: PPUSH
12598: CALL_OW 12
12602: PPUSH
12603: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
12607: LD_ADDR_LOC 25
12611: PUSH
12612: LD_LOC 25
12616: PPUSH
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 0
12624: PPUSH
12625: CALL_OW 1
12629: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
12630: LD_ADDR_VAR 0 2
12634: PUSH
12635: LD_INT 21
12637: PUSH
12638: LD_INT 3
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: PUSH
12645: LD_INT 2
12647: PUSH
12648: LD_INT 30
12650: PUSH
12651: LD_INT 0
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PUSH
12658: LD_INT 30
12660: PUSH
12661: LD_INT 1
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: LIST
12672: PUSH
12673: LD_INT 50
12675: PUSH
12676: EMPTY
12677: LIST
12678: PUSH
12679: LD_INT 22
12681: PUSH
12682: LD_VAR 0 3
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: PPUSH
12697: CALL_OW 69
12701: ST_TO_ADDR
// if dep = 0 then
12702: LD_VAR 0 2
12706: PUSH
12707: LD_INT 0
12709: EQUAL
12710: IFFALSE 12714
// exit ;
12712: GO 12840
// hc_name :=  ;
12714: LD_ADDR_OWVAR 26
12718: PUSH
12719: LD_STRING 
12721: ST_TO_ADDR
// hc_importance := 0 ;
12722: LD_ADDR_OWVAR 32
12726: PUSH
12727: LD_INT 0
12729: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
12730: LD_INT 0
12732: PPUSH
12733: LD_INT 0
12735: PPUSH
12736: LD_EXP 20
12740: PUSH
12741: LD_INT 2
12743: DIV
12744: PPUSH
12745: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
12749: LD_ADDR_OWVAR 21
12753: PUSH
12754: LD_EXP 33
12758: PUSH
12759: LD_VAR 0 3
12763: ARRAY
12764: ST_TO_ADDR
// uc_side := aktresp ;
12765: LD_ADDR_OWVAR 20
12769: PUSH
12770: LD_VAR 0 3
12774: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
12775: LD_ADDR_VAR 0 2
12779: PUSH
12780: LD_VAR 0 2
12784: PUSH
12785: LD_INT 1
12787: PPUSH
12788: LD_VAR 0 2
12792: PPUSH
12793: CALL_OW 12
12797: ARRAY
12798: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
12799: CALL_OW 44
12803: PPUSH
12804: LD_VAR 0 2
12808: PPUSH
12809: CALL_OW 250
12813: PPUSH
12814: LD_VAR 0 2
12818: PPUSH
12819: CALL_OW 251
12823: PPUSH
12824: LD_INT 7
12826: PPUSH
12827: LD_INT 1
12829: PPUSH
12830: CALL_OW 50
// end else
12834: GO 12837
// enable ;
12836: ENABLE
// end else
12837: GO 12840
// enable ;
12839: ENABLE
// end ; end_of_file
12840: PPOPN 3
12842: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
12843: LD_INT 0
12845: PPUSH
12846: PPUSH
12847: PPUSH
// BuildUpTime_Delay = 0 ;
12848: LD_ADDR_EXP 49
12852: PUSH
12853: LD_INT 0
12855: ST_TO_ADDR
// if not def_builduptime then
12856: LD_EXP 14
12860: NOT
12861: IFFALSE 12865
// exit ;
12863: GO 13048
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
12865: LD_ADDR_EXP 49
12869: PUSH
12870: LD_INT 8400
12872: PUSH
12873: LD_INT 2100
12875: PUSH
12876: LD_EXP 14
12880: MUL
12881: PLUS
12882: ST_TO_ADDR
// BuildUpTimeActive := true ;
12883: LD_ADDR_EXP 48
12887: PUSH
12888: LD_INT 1
12890: ST_TO_ADDR
// for i := 1 to 8 do
12891: LD_ADDR_VAR 0 2
12895: PUSH
12896: DOUBLE
12897: LD_INT 1
12899: DEC
12900: ST_TO_ADDR
12901: LD_INT 8
12903: PUSH
12904: FOR_TO
12905: IFFALSE 13046
// if Side_Positions [ i ] then
12907: LD_EXP 32
12911: PUSH
12912: LD_VAR 0 2
12916: ARRAY
12917: IFFALSE 13044
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
12919: LD_EXP 47
12923: PUSH
12924: LD_EXP 32
12928: PUSH
12929: LD_VAR 0 2
12933: ARRAY
12934: ARRAY
12935: PPUSH
12936: LD_INT 5
12938: PPUSH
12939: CALL_OW 424
// for j := 1 to 8 do
12943: LD_ADDR_VAR 0 3
12947: PUSH
12948: DOUBLE
12949: LD_INT 1
12951: DEC
12952: ST_TO_ADDR
12953: LD_INT 8
12955: PUSH
12956: FOR_TO
12957: IFFALSE 13042
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
12959: LD_EXP 32
12963: PUSH
12964: LD_VAR 0 3
12968: ARRAY
12969: PUSH
12970: LD_EXP 30
12974: PUSH
12975: LD_VAR 0 2
12979: ARRAY
12980: PUSH
12981: LD_EXP 30
12985: PUSH
12986: LD_VAR 0 3
12990: ARRAY
12991: NONEQUAL
12992: PUSH
12993: LD_EXP 34
12997: NOT
12998: PUSH
12999: LD_VAR 0 2
13003: PUSH
13004: LD_VAR 0 3
13008: NONEQUAL
13009: AND
13010: OR
13011: AND
13012: IFFALSE 13040
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13014: LD_VAR 0 3
13018: PPUSH
13019: LD_EXP 47
13023: PUSH
13024: LD_EXP 32
13028: PUSH
13029: LD_VAR 0 2
13033: ARRAY
13034: ARRAY
13035: PPUSH
13036: CALL_OW 333
13040: GO 12956
13042: POP
13043: POP
// end ;
13044: GO 12904
13046: POP
13047: POP
// end ;
13048: LD_VAR 0 1
13052: RET
// export function EndBuildUp ; var i , j ; begin
13053: LD_INT 0
13055: PPUSH
13056: PPUSH
13057: PPUSH
// BuildUpTimeActive := false ;
13058: LD_ADDR_EXP 48
13062: PUSH
13063: LD_INT 0
13065: ST_TO_ADDR
// for i := 1 to 8 do
13066: LD_ADDR_VAR 0 2
13070: PUSH
13071: DOUBLE
13072: LD_INT 1
13074: DEC
13075: ST_TO_ADDR
13076: LD_INT 8
13078: PUSH
13079: FOR_TO
13080: IFFALSE 13221
// if Side_Positions [ i ] then
13082: LD_EXP 32
13086: PUSH
13087: LD_VAR 0 2
13091: ARRAY
13092: IFFALSE 13219
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
13094: LD_EXP 47
13098: PUSH
13099: LD_EXP 32
13103: PUSH
13104: LD_VAR 0 2
13108: ARRAY
13109: ARRAY
13110: PPUSH
13111: LD_INT 0
13113: PPUSH
13114: CALL_OW 424
// for j := 1 to 8 do
13118: LD_ADDR_VAR 0 3
13122: PUSH
13123: DOUBLE
13124: LD_INT 1
13126: DEC
13127: ST_TO_ADDR
13128: LD_INT 8
13130: PUSH
13131: FOR_TO
13132: IFFALSE 13217
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13134: LD_EXP 32
13138: PUSH
13139: LD_VAR 0 3
13143: ARRAY
13144: PUSH
13145: LD_EXP 30
13149: PUSH
13150: LD_VAR 0 2
13154: ARRAY
13155: PUSH
13156: LD_EXP 30
13160: PUSH
13161: LD_VAR 0 3
13165: ARRAY
13166: NONEQUAL
13167: PUSH
13168: LD_EXP 34
13172: NOT
13173: PUSH
13174: LD_VAR 0 2
13178: PUSH
13179: LD_VAR 0 3
13183: NONEQUAL
13184: AND
13185: OR
13186: AND
13187: IFFALSE 13215
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13189: LD_VAR 0 3
13193: PPUSH
13194: LD_EXP 47
13198: PUSH
13199: LD_EXP 32
13203: PUSH
13204: LD_VAR 0 2
13208: ARRAY
13209: ARRAY
13210: PPUSH
13211: CALL_OW 334
13215: GO 13131
13217: POP
13218: POP
// end ;
13219: GO 13079
13221: POP
13222: POP
// end ;
13223: LD_VAR 0 1
13227: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
13228: LD_EXP 48
13232: IFFALSE 13407
13234: GO 13236
13236: DISABLE
13237: LD_INT 0
13239: PPUSH
13240: PPUSH
// begin for i := 1 to 8 do
13241: LD_ADDR_VAR 0 1
13245: PUSH
13246: DOUBLE
13247: LD_INT 1
13249: DEC
13250: ST_TO_ADDR
13251: LD_INT 8
13253: PUSH
13254: FOR_TO
13255: IFFALSE 13404
// if Side_Positions [ i ] then
13257: LD_EXP 32
13261: PUSH
13262: LD_VAR 0 1
13266: ARRAY
13267: IFFALSE 13402
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13269: LD_ADDR_VAR 0 2
13273: PUSH
13274: LD_EXP 47
13278: PUSH
13279: LD_EXP 32
13283: PUSH
13284: LD_VAR 0 1
13288: ARRAY
13289: ARRAY
13290: PPUSH
13291: LD_INT 2
13293: PUSH
13294: LD_INT 21
13296: PUSH
13297: LD_INT 1
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: LD_INT 21
13306: PUSH
13307: LD_INT 2
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: LIST
13318: PUSH
13319: LD_INT 22
13321: PUSH
13322: LD_OWVAR 2
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PPUSH
13335: CALL_OW 70
13339: PUSH
13340: FOR_IN
13341: IFFALSE 13400
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
13343: LD_EXP 30
13347: PUSH
13348: LD_VAR 0 1
13352: ARRAY
13353: PUSH
13354: LD_EXP 30
13358: PUSH
13359: LD_OWVAR 2
13363: ARRAY
13364: NONEQUAL
13365: PUSH
13366: LD_EXP 34
13370: NOT
13371: PUSH
13372: LD_VAR 0 1
13376: PUSH
13377: LD_OWVAR 2
13381: NONEQUAL
13382: AND
13383: OR
13384: IFFALSE 13398
// ComMoveToArea ( un , BuildUpEscape ) ;
13386: LD_VAR 0 2
13390: PPUSH
13391: LD_INT 12
13393: PPUSH
13394: CALL_OW 113
13398: GO 13340
13400: POP
13401: POP
13402: GO 13254
13404: POP
13405: POP
// enable ;
13406: ENABLE
// end ;
13407: PPOPN 2
13409: END
// every 0 0$1 trigger def_builduptime do
13410: LD_EXP 14
13414: IFFALSE 13440
13416: GO 13418
13418: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
13419: LD_INT 8400
13421: PUSH
13422: LD_EXP 14
13426: PUSH
13427: LD_INT 2100
13429: MUL
13430: PLUS
13431: PPUSH
13432: CALL_OW 67
// EndBuildUp ;
13436: CALL 13053 0 0
// end ;
13440: END
