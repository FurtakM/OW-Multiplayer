// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , amount_of_apemen , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , extra_sib_deposits_locations , normal_oil_deposits_locations , normal_sib_deposits_locations , battle_flags_id , Side_Comps ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function init_map ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// normal_oil_deposits_locations := [ [ 65 , 49 ] , [ 157 , 62 ] , [ 192 , 143 ] , [ 109 , 147 ] ] ;
   4: LD_ADDR_EXP 40
   8: PUSH
   9: LD_INT 65
  11: PUSH
  12: LD_INT 49
  14: PUSH
  15: EMPTY
  16: LIST
  17: LIST
  18: PUSH
  19: LD_INT 157
  21: PUSH
  22: LD_INT 62
  24: PUSH
  25: EMPTY
  26: LIST
  27: LIST
  28: PUSH
  29: LD_INT 192
  31: PUSH
  32: LD_INT 143
  34: PUSH
  35: EMPTY
  36: LIST
  37: LIST
  38: PUSH
  39: LD_INT 109
  41: PUSH
  42: LD_INT 147
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: EMPTY
  50: LIST
  51: LIST
  52: LIST
  53: LIST
  54: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 22 , 33 ] , [ 179 , 43 ] , [ 228 , 151 ] , [ 83 , 154 ] ] ;
  55: LD_ADDR_EXP 38
  59: PUSH
  60: LD_INT 22
  62: PUSH
  63: LD_INT 33
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 179
  72: PUSH
  73: LD_INT 43
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: LD_INT 228
  82: PUSH
  83: LD_INT 151
  85: PUSH
  86: EMPTY
  87: LIST
  88: LIST
  89: PUSH
  90: LD_INT 83
  92: PUSH
  93: LD_INT 154
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: PUSH
 100: EMPTY
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 39 , 18 ] , [ 138 , 27 ] , [ 222 , 157 ] , [ 82 , 115 ] ] ;
 106: LD_ADDR_EXP 41
 110: PUSH
 111: LD_INT 39
 113: PUSH
 114: LD_INT 18
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: PUSH
 121: LD_INT 138
 123: PUSH
 124: LD_INT 27
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: PUSH
 131: LD_INT 222
 133: PUSH
 134: LD_INT 157
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: PUSH
 141: LD_INT 82
 143: PUSH
 144: LD_INT 115
 146: PUSH
 147: EMPTY
 148: LIST
 149: LIST
 150: PUSH
 151: EMPTY
 152: LIST
 153: LIST
 154: LIST
 155: LIST
 156: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 35 , 55 ] , [ 188 , 70 ] , [ 214 , 123 ] , [ 66 , 120 ] ] ;
 157: LD_ADDR_EXP 39
 161: PUSH
 162: LD_INT 35
 164: PUSH
 165: LD_INT 55
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: PUSH
 172: LD_INT 188
 174: PUSH
 175: LD_INT 70
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: LD_INT 214
 184: PUSH
 185: LD_INT 123
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: LD_INT 66
 194: PUSH
 195: LD_INT 120
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: ST_TO_ADDR
// depot_def := [ [ 54 , 45 , 3 ] , [ 161 , 55 , 5 ] , [ 98 , 142 , 4 ] , [ 194 , 133 , 1 ] ] ;
 208: LD_ADDR_EXP 35
 212: PUSH
 213: LD_INT 54
 215: PUSH
 216: LD_INT 45
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: PUSH
 227: LD_INT 161
 229: PUSH
 230: LD_INT 55
 232: PUSH
 233: LD_INT 5
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 98
 243: PUSH
 244: LD_INT 142
 246: PUSH
 247: LD_INT 4
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: LIST
 254: PUSH
 255: LD_INT 194
 257: PUSH
 258: LD_INT 133
 260: PUSH
 261: LD_INT 1
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: LIST
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: LIST
 274: ST_TO_ADDR
// start_def := [ [ 53 , 52 ] , [ 152 , 45 ] , [ 91 , 140 ] , [ 200 , 132 ] ] ;
 275: LD_ADDR_EXP 37
 279: PUSH
 280: LD_INT 53
 282: PUSH
 283: LD_INT 52
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 152
 292: PUSH
 293: LD_INT 45
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: LD_INT 91
 302: PUSH
 303: LD_INT 140
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 200
 312: PUSH
 313: LD_INT 132
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: ST_TO_ADDR
// breastworks_def := [ [ [ 76 , 75 , 5 ] , [ 72 , 34 , 4 ] , [ 81 , 60 , 5 ] , [ 31 , 31 , 2 ] ] , [ [ 170 , 79 , 5 ] , [ 139 , 42 , 1 ] , [ 171 , 58 , 4 ] , [ 149 , 25 , 3 ] ] , [ [ 114 , 163 , 5 ] , [ 114 , 138 , 4 ] , [ 97 , 116 , 3 ] , [ 81 , 135 , 1 ] ] , [ [ 179 , 116 , 2 ] , [ 175 , 145 , 1 ] , [ 217 , 149 , 4 ] , [ 202 , 158 , 0 ] ] ] ;
 326: LD_ADDR_EXP 36
 330: PUSH
 331: LD_INT 76
 333: PUSH
 334: LD_INT 75
 336: PUSH
 337: LD_INT 5
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 72
 347: PUSH
 348: LD_INT 34
 350: PUSH
 351: LD_INT 4
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 81
 361: PUSH
 362: LD_INT 60
 364: PUSH
 365: LD_INT 5
 367: PUSH
 368: EMPTY
 369: LIST
 370: LIST
 371: LIST
 372: PUSH
 373: LD_INT 31
 375: PUSH
 376: LD_INT 31
 378: PUSH
 379: LD_INT 2
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: LIST
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: PUSH
 393: LD_INT 170
 395: PUSH
 396: LD_INT 79
 398: PUSH
 399: LD_INT 5
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 139
 409: PUSH
 410: LD_INT 42
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: PUSH
 421: LD_INT 171
 423: PUSH
 424: LD_INT 58
 426: PUSH
 427: LD_INT 4
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 149
 437: PUSH
 438: LD_INT 25
 440: PUSH
 441: LD_INT 3
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 114
 457: PUSH
 458: LD_INT 163
 460: PUSH
 461: LD_INT 5
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 114
 471: PUSH
 472: LD_INT 138
 474: PUSH
 475: LD_INT 4
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: PUSH
 483: LD_INT 97
 485: PUSH
 486: LD_INT 116
 488: PUSH
 489: LD_INT 3
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PUSH
 497: LD_INT 81
 499: PUSH
 500: LD_INT 135
 502: PUSH
 503: LD_INT 1
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 179
 519: PUSH
 520: LD_INT 116
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 175
 533: PUSH
 534: LD_INT 145
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 217
 547: PUSH
 548: LD_INT 149
 550: PUSH
 551: LD_INT 4
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 202
 561: PUSH
 562: LD_INT 158
 564: PUSH
 565: LD_INT 0
 567: PUSH
 568: EMPTY
 569: LIST
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: ST_TO_ADDR
// for i in normal_oil_deposits_locations do
 585: LD_ADDR_VAR 0 2
 589: PUSH
 590: LD_EXP 40
 594: PUSH
 595: FOR_IN
 596: IFFALSE 625
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 598: LD_VAR 0 2
 602: PUSH
 603: LD_INT 1
 605: ARRAY
 606: PPUSH
 607: LD_VAR 0 2
 611: PUSH
 612: LD_INT 2
 614: ARRAY
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: CALL_OW 62
 623: GO 595
 625: POP
 626: POP
// if def_extra_oil_deposits then
 627: LD_EXP 6
 631: IFFALSE 675
// for i in extra_oil_deposits_locations do
 633: LD_ADDR_VAR 0 2
 637: PUSH
 638: LD_EXP 38
 642: PUSH
 643: FOR_IN
 644: IFFALSE 673
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 646: LD_VAR 0 2
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: LD_VAR 0 2
 659: PUSH
 660: LD_INT 2
 662: ARRAY
 663: PPUSH
 664: LD_INT 2
 666: PPUSH
 667: CALL_OW 62
 671: GO 643
 673: POP
 674: POP
// if def_extra_sib_deposits > 0 then
 675: LD_EXP 7
 679: PUSH
 680: LD_INT 0
 682: GREATER
 683: IFFALSE 779
// begin for i in normal_sib_deposits_locations do
 685: LD_ADDR_VAR 0 2
 689: PUSH
 690: LD_EXP 41
 694: PUSH
 695: FOR_IN
 696: IFFALSE 725
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 698: LD_VAR 0 2
 702: PUSH
 703: LD_INT 1
 705: ARRAY
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 2
 714: ARRAY
 715: PPUSH
 716: LD_INT 3
 718: PPUSH
 719: CALL_OW 62
 723: GO 695
 725: POP
 726: POP
// if def_extra_sib_deposits = 2 then
 727: LD_EXP 7
 731: PUSH
 732: LD_INT 2
 734: EQUAL
 735: IFFALSE 779
// for i in extra_sib_deposits_locations do
 737: LD_ADDR_VAR 0 2
 741: PUSH
 742: LD_EXP 39
 746: PUSH
 747: FOR_IN
 748: IFFALSE 777
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 750: LD_VAR 0 2
 754: PUSH
 755: LD_INT 1
 757: ARRAY
 758: PPUSH
 759: LD_VAR 0 2
 763: PUSH
 764: LD_INT 2
 766: ARRAY
 767: PPUSH
 768: LD_INT 3
 770: PPUSH
 771: CALL_OW 62
 775: GO 747
 777: POP
 778: POP
// end ; end ;
 779: LD_VAR 0 1
 783: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 784: LD_INT 0
 786: PPUSH
 787: PPUSH
 788: PPUSH
 789: PPUSH
 790: PPUSH
 791: PPUSH
 792: PPUSH
 793: PPUSH
 794: PPUSH
// if MultiPlayer then
 795: LD_OWVAR 4
 799: IFFALSE 863
// begin Game_Type = mp_game_type ;
 801: LD_ADDR_EXP 16
 805: PUSH
 806: LD_OWVAR 6
 810: ST_TO_ADDR
// Your_Side = mp_player_side ;
 811: LD_ADDR_OWVAR 2
 815: PUSH
 816: LD_OWVAR 7
 820: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 821: LD_ADDR_EXP 32
 825: PUSH
 826: LD_OWVAR 17
 830: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 831: LD_ADDR_EXP 30
 835: PUSH
 836: LD_OWVAR 15
 840: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 841: LD_ADDR_EXP 33
 845: PUSH
 846: LD_OWVAR 16
 850: ST_TO_ADDR
// Teams = mp_teams ;
 851: LD_ADDR_EXP 31
 855: PUSH
 856: LD_OWVAR 12
 860: ST_TO_ADDR
// end else
 861: GO 1064
// begin Game_Type = 2 ;
 863: LD_ADDR_EXP 16
 867: PUSH
 868: LD_INT 2
 870: ST_TO_ADDR
// Your_Side = 4 ;
 871: LD_ADDR_OWVAR 2
 875: PUSH
 876: LD_INT 4
 878: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 879: LD_ADDR_EXP 32
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: LD_INT 3
 889: PUSH
 890: LD_INT 0
 892: PUSH
 893: LD_INT 1
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 2
 901: PUSH
 902: LD_INT 4
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 918: LD_ADDR_EXP 30
 922: PUSH
 923: LD_INT 0
 925: PUSH
 926: LD_INT 1
 928: PUSH
 929: LD_INT 0
 931: PUSH
 932: LD_INT 2
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 2
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 957: LD_ADDR_EXP 33
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 3
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: LD_INT 2
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: LD_INT 1
 979: PUSH
 980: LD_INT 3
 982: PUSH
 983: LD_INT 0
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 996: LD_ADDR_EXP 43
1000: PUSH
1001: LD_INT 0
1003: PUSH
1004: LD_INT 0
1006: PUSH
1007: LD_INT 0
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: LD_INT 0
1015: PUSH
1016: LD_INT 0
1018: PUSH
1019: LD_INT 0
1021: PUSH
1022: LD_INT 0
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 4 , 7 ] ] ;
1035: LD_ADDR_EXP 31
1039: PUSH
1040: LD_INT 2
1042: PUSH
1043: LD_INT 6
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: PUSH
1050: LD_INT 4
1052: PUSH
1053: LD_INT 7
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: ST_TO_ADDR
// end ; if MultiPlayer then
1064: LD_OWVAR 4
1068: IFFALSE 1267
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1070: LD_ADDR_EXP 1
1074: PUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 426
1082: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1083: LD_ADDR_EXP 2
1087: PUSH
1088: LD_INT 1
1090: PPUSH
1091: CALL_OW 426
1095: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1096: LD_ADDR_EXP 3
1100: PUSH
1101: LD_INT 2
1103: PPUSH
1104: CALL_OW 426
1108: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1109: LD_ADDR_EXP 4
1113: PUSH
1114: LD_INT 3
1116: PPUSH
1117: CALL_OW 426
1121: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1122: LD_ADDR_EXP 5
1126: PUSH
1127: LD_INT 4
1129: PPUSH
1130: CALL_OW 426
1134: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1135: LD_ADDR_EXP 6
1139: PUSH
1140: LD_INT 5
1142: PPUSH
1143: CALL_OW 426
1147: ST_TO_ADDR
// def_extra_sib_deposits = GetMultiplayerSetting ( 6 ) ;
1148: LD_ADDR_EXP 7
1152: PUSH
1153: LD_INT 6
1155: PPUSH
1156: CALL_OW 426
1160: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1161: LD_ADDR_EXP 8
1165: PUSH
1166: LD_INT 10
1168: PPUSH
1169: CALL_OW 426
1173: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1174: LD_ADDR_EXP 9
1178: PUSH
1179: LD_INT 11
1181: PPUSH
1182: CALL_OW 426
1186: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1187: LD_ADDR_EXP 10
1191: PUSH
1192: LD_INT 12
1194: PPUSH
1195: CALL_OW 426
1199: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1200: LD_ADDR_EXP 11
1204: PUSH
1205: LD_INT 13
1207: PPUSH
1208: CALL_OW 426
1212: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1213: LD_ADDR_EXP 12
1217: PUSH
1218: LD_INT 14
1220: PPUSH
1221: CALL_OW 426
1225: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1226: LD_ADDR_EXP 13
1230: PUSH
1231: LD_INT 15
1233: PPUSH
1234: CALL_OW 426
1238: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
1239: LD_ADDR_EXP 14
1243: PUSH
1244: LD_INT 20
1246: PPUSH
1247: CALL_OW 426
1251: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
1252: LD_ADDR_VAR 0 9
1256: PUSH
1257: LD_INT 22
1259: PPUSH
1260: CALL_OW 426
1264: ST_TO_ADDR
// end else
1265: GO 1391
// begin randomize ;
1267: CALL_OW 10
// def_base_level = 2 ;
1271: LD_ADDR_EXP 1
1275: PUSH
1276: LD_INT 2
1278: ST_TO_ADDR
// def_amount_of_people = 1 ;
1279: LD_ADDR_EXP 2
1283: PUSH
1284: LD_INT 1
1286: ST_TO_ADDR
// def_skill_level = 1 ;
1287: LD_ADDR_EXP 3
1291: PUSH
1292: LD_INT 1
1294: ST_TO_ADDR
// def_starting_resources = 2 ;
1295: LD_ADDR_EXP 4
1299: PUSH
1300: LD_INT 2
1302: ST_TO_ADDR
// def_shipments_density = 1 ;
1303: LD_ADDR_EXP 5
1307: PUSH
1308: LD_INT 1
1310: ST_TO_ADDR
// def_extra_oil_deposits = 1 ;
1311: LD_ADDR_EXP 6
1315: PUSH
1316: LD_INT 1
1318: ST_TO_ADDR
// def_extra_sib_deposits = 1 ;
1319: LD_ADDR_EXP 7
1323: PUSH
1324: LD_INT 1
1326: ST_TO_ADDR
// def_shared_vision = 1 ;
1327: LD_ADDR_EXP 8
1331: PUSH
1332: LD_INT 1
1334: ST_TO_ADDR
// def_morale_flags = 2 ;
1335: LD_ADDR_EXP 9
1339: PUSH
1340: LD_INT 2
1342: ST_TO_ADDR
// def_siberite_detection = 1 ;
1343: LD_ADDR_EXP 10
1347: PUSH
1348: LD_INT 1
1350: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1351: LD_ADDR_EXP 11
1355: PUSH
1356: LD_INT 3
1358: ST_TO_ADDR
// def_people_respawning = 2 ;
1359: LD_ADDR_EXP 12
1363: PUSH
1364: LD_INT 2
1366: ST_TO_ADDR
// def_siberite_bomb = 2 ;
1367: LD_ADDR_EXP 13
1371: PUSH
1372: LD_INT 2
1374: ST_TO_ADDR
// def_builduptime = 1 ;
1375: LD_ADDR_EXP 14
1379: PUSH
1380: LD_INT 1
1382: ST_TO_ADDR
// tech_level = 4 ;
1383: LD_ADDR_VAR 0 9
1387: PUSH
1388: LD_INT 4
1390: ST_TO_ADDR
// end ; if isSGUI then
1391: LD_OWVAR 83
1395: IFFALSE 1403
// setMpTechs ( ) else
1397: CALL 8665 0 0
1401: GO 1416
// SetMpTechLevel ( tech_level + 1 ) ;
1403: LD_VAR 0 9
1407: PUSH
1408: LD_INT 1
1410: PLUS
1411: PPUSH
1412: CALL 8812 0 1
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1416: LD_ADDR_EXP 17
1420: PUSH
1421: LD_INT 0
1423: PUSH
1424: LD_INT 1
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_EXP 1
1443: PUSH
1444: LD_INT 1
1446: PLUS
1447: ARRAY
1448: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1449: LD_ADDR_EXP 18
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 2
1462: PUSH
1463: LD_INT 4
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_EXP 1
1476: PUSH
1477: LD_INT 1
1479: PLUS
1480: ARRAY
1481: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1482: LD_ADDR_EXP 20
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: LD_INT 3
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: LD_INT 5
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: PUSH
1505: LD_EXP 3
1509: PUSH
1510: LD_INT 1
1512: PLUS
1513: ARRAY
1514: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1515: LD_ADDR_EXP 22
1519: PUSH
1520: LD_INT 0
1522: PUSH
1523: LD_INT 0
1525: PUSH
1526: LD_INT 0
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: PUSH
1534: LD_INT 30
1536: PUSH
1537: LD_INT 0
1539: PUSH
1540: LD_INT 0
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 50
1550: PUSH
1551: LD_INT 20
1553: PUSH
1554: LD_INT 0
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: LIST
1561: PUSH
1562: LD_INT 80
1564: PUSH
1565: LD_INT 40
1567: PUSH
1568: LD_INT 20
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: PUSH
1582: LD_EXP 4
1586: PUSH
1587: LD_INT 1
1589: PLUS
1590: ARRAY
1591: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1592: LD_ADDR_EXP 21
1596: PUSH
1597: LD_INT 10
1599: PUSH
1600: EMPTY
1601: LIST
1602: PUSH
1603: LD_INT 7
1605: PUSH
1606: LD_INT 14
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: PUSH
1613: LD_INT 6
1615: PUSH
1616: LD_INT 12
1618: PUSH
1619: LD_INT 18
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: LD_INT 10
1632: PUSH
1633: LD_INT 15
1635: PUSH
1636: LD_INT 20
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: PUSH
1651: LD_EXP 4
1655: PUSH
1656: LD_INT 1
1658: PLUS
1659: ARRAY
1660: ST_TO_ADDR
// number_of_people = def_amount_of_people + 4 ;
1661: LD_ADDR_EXP 19
1665: PUSH
1666: LD_EXP 2
1670: PUSH
1671: LD_INT 4
1673: PLUS
1674: ST_TO_ADDR
// shipments_density = 20 + ( def_shipments_density ) * 28 ;
1675: LD_ADDR_EXP 23
1679: PUSH
1680: LD_INT 20
1682: PUSH
1683: LD_EXP 5
1687: PUSH
1688: LD_INT 28
1690: MUL
1691: PLUS
1692: ST_TO_ADDR
// amount_of_apemen = [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1693: LD_ADDR_EXP 27
1697: PUSH
1698: LD_INT 0
1700: PUSH
1701: LD_INT 3
1703: PUSH
1704: LD_INT 6
1706: PUSH
1707: LD_INT 9
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: PUSH
1716: LD_EXP 11
1720: PUSH
1721: LD_INT 1
1723: PLUS
1724: ARRAY
1725: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1726: LD_ADDR_EXP 25
1730: PUSH
1731: LD_INT 0
1733: PUSH
1734: LD_INT 8400
1736: PUSH
1737: LD_INT 1750
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_EXP 12
1749: PUSH
1750: LD_INT 1
1752: PLUS
1753: ARRAY
1754: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1755: LD_ADDR_EXP 26
1759: PUSH
1760: LD_INT 0
1762: PUSH
1763: LD_INT 21000
1765: PUSH
1766: LD_INT 4200
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: PUSH
1774: LD_EXP 12
1778: PUSH
1779: LD_INT 1
1781: PLUS
1782: ARRAY
1783: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1784: LD_ADDR_EXP 24
1788: PUSH
1789: LD_INT 1
1791: NEG
1792: PUSH
1793: LD_INT 350
1795: PUSH
1796: LD_INT 700
1798: PUSH
1799: LD_INT 1400
1801: PUSH
1802: LD_INT 0
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: PUSH
1812: LD_EXP 9
1816: PUSH
1817: LD_INT 1
1819: PLUS
1820: ARRAY
1821: ST_TO_ADDR
// battle_flags_id = [ ] ;
1822: LD_ADDR_EXP 42
1826: PUSH
1827: EMPTY
1828: ST_TO_ADDR
// siberite_bomb_Delay = [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1829: LD_ADDR_EXP 28
1833: PUSH
1834: LD_INT 0
1836: PUSH
1837: LD_INT 1
1839: PUSH
1840: LD_INT 63000
1842: PUSH
1843: LD_INT 126000
1845: PUSH
1846: LD_INT 189000
1848: PUSH
1849: LD_INT 252000
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: PUSH
1860: LD_EXP 13
1864: PUSH
1865: LD_INT 1
1867: PLUS
1868: ARRAY
1869: ST_TO_ADDR
// end ;
1870: LD_VAR 0 1
1874: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1875: LD_INT 0
1877: PPUSH
1878: PPUSH
1879: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1880: LD_ADDR_EXP 34
1884: PUSH
1885: LD_EXP 30
1889: PUSH
1890: LD_INT 0
1892: PUSH
1893: EMPTY
1894: LIST
1895: DIFF
1896: PUSH
1897: LD_INT 1
1899: GREATER
1900: ST_TO_ADDR
// if not Team_Game then
1901: LD_EXP 34
1905: NOT
1906: IFFALSE 2004
// begin for i = 1 to 8 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 8
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2000
// for j = 1 to 8 do
1924: LD_ADDR_VAR 0 3
1928: PUSH
1929: DOUBLE
1930: LD_INT 1
1932: DEC
1933: ST_TO_ADDR
1934: LD_INT 8
1936: PUSH
1937: FOR_TO
1938: IFFALSE 1996
// if i <> j then
1940: LD_VAR 0 2
1944: PUSH
1945: LD_VAR 0 3
1949: NONEQUAL
1950: IFFALSE 1974
// SetAttitude ( i , j , att_neutral , true ) else
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 3
1961: PPUSH
1962: LD_INT 0
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: CALL_OW 80
1972: GO 1994
// SetAttitude ( i , j , att_friend , true ) ;
1974: LD_VAR 0 2
1978: PPUSH
1979: LD_VAR 0 3
1983: PPUSH
1984: LD_INT 1
1986: PPUSH
1987: LD_INT 1
1989: PPUSH
1990: CALL_OW 80
1994: GO 1937
1996: POP
1997: POP
1998: GO 1921
2000: POP
2001: POP
// end else
2002: GO 2179
// begin if def_shared_vision then
2004: LD_EXP 8
2008: IFFALSE 2073
// begin for i in Teams do
2010: LD_ADDR_VAR 0 2
2014: PUSH
2015: LD_EXP 31
2019: PUSH
2020: FOR_IN
2021: IFFALSE 2071
// for j = 2 to i do
2023: LD_ADDR_VAR 0 3
2027: PUSH
2028: DOUBLE
2029: LD_INT 2
2031: DEC
2032: ST_TO_ADDR
2033: LD_VAR 0 2
2037: PUSH
2038: FOR_TO
2039: IFFALSE 2067
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2041: LD_VAR 0 2
2045: PUSH
2046: LD_VAR 0 3
2050: ARRAY
2051: PPUSH
2052: LD_VAR 0 2
2056: PUSH
2057: LD_INT 1
2059: ARRAY
2060: PPUSH
2061: CALL_OW 343
2065: GO 2038
2067: POP
2068: POP
2069: GO 2020
2071: POP
2072: POP
// end ; for i = 1 to 8 do
2073: LD_ADDR_VAR 0 2
2077: PUSH
2078: DOUBLE
2079: LD_INT 1
2081: DEC
2082: ST_TO_ADDR
2083: LD_INT 8
2085: PUSH
2086: FOR_TO
2087: IFFALSE 2177
// for j = 1 to 8 do
2089: LD_ADDR_VAR 0 3
2093: PUSH
2094: DOUBLE
2095: LD_INT 1
2097: DEC
2098: ST_TO_ADDR
2099: LD_INT 8
2101: PUSH
2102: FOR_TO
2103: IFFALSE 2173
// if Side_Teams [ i ] = Side_Teams [ j ] then
2105: LD_EXP 30
2109: PUSH
2110: LD_VAR 0 2
2114: ARRAY
2115: PUSH
2116: LD_EXP 30
2120: PUSH
2121: LD_VAR 0 3
2125: ARRAY
2126: EQUAL
2127: IFFALSE 2151
// SetAttitude ( i , j , att_friend , true ) else
2129: LD_VAR 0 2
2133: PPUSH
2134: LD_VAR 0 3
2138: PPUSH
2139: LD_INT 1
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: CALL_OW 80
2149: GO 2171
// SetAttitude ( i , j , att_enemy , true ) ;
2151: LD_VAR 0 2
2155: PPUSH
2156: LD_VAR 0 3
2160: PPUSH
2161: LD_INT 2
2163: PPUSH
2164: LD_INT 1
2166: PPUSH
2167: CALL_OW 80
2171: GO 2102
2173: POP
2174: POP
2175: GO 2086
2177: POP
2178: POP
// end ; end ;
2179: LD_VAR 0 1
2183: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2184: LD_INT 0
2186: PPUSH
2187: PPUSH
2188: PPUSH
2189: PPUSH
// result := [ ] ;
2190: LD_ADDR_VAR 0 7
2194: PUSH
2195: EMPTY
2196: ST_TO_ADDR
// for i := 1 to count do
2197: LD_ADDR_VAR 0 8
2201: PUSH
2202: DOUBLE
2203: LD_INT 1
2205: DEC
2206: ST_TO_ADDR
2207: LD_VAR 0 1
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2631
// begin uc_direction := Rand ( 0 , 5 ) ;
2215: LD_ADDR_OWVAR 24
2219: PUSH
2220: LD_INT 0
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: CALL_OW 12
2230: ST_TO_ADDR
// if commander then
2231: LD_LOC 1
2235: IFFALSE 2344
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2237: LD_ADDR_OWVAR 26
2241: PUSH
2242: LD_OWVAR 19
2246: PUSH
2247: LD_OWVAR 20
2251: ARRAY
2252: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2253: LD_INT 1
2255: PPUSH
2256: LD_INT 2
2258: PPUSH
2259: CALL_OW 12
2263: PPUSH
2264: LD_VAR 0 2
2268: PPUSH
2269: LD_EXP 20
2273: PUSH
2274: LD_INT 2
2276: PLUS
2277: PPUSH
2278: CALL_OW 380
// hc_importance := 105 ;
2282: LD_ADDR_OWVAR 32
2286: PUSH
2287: LD_INT 105
2289: ST_TO_ADDR
// commander := false ;
2290: LD_ADDR_LOC 1
2294: PUSH
2295: LD_INT 0
2297: ST_TO_ADDR
// if Multiplayer then
2298: LD_OWVAR 4
2302: IFFALSE 2342
// begin hc_gallery := MULTIAVATARS ;
2304: LD_ADDR_OWVAR 33
2308: PUSH
2309: LD_STRING MULTIAVATARS
2311: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2312: LD_ADDR_OWVAR 34
2316: PUSH
2317: LD_OWVAR 20
2321: PPUSH
2322: CALL_OW 525
2326: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2327: LD_ADDR_OWVAR 27
2331: PUSH
2332: LD_OWVAR 20
2336: PPUSH
2337: CALL_OW 526
2341: ST_TO_ADDR
// end ; end else
2342: GO 2407
// begin hc_name :=  ;
2344: LD_ADDR_OWVAR 26
2348: PUSH
2349: LD_STRING 
2351: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2352: LD_INT 1
2354: PPUSH
2355: LD_INT 2
2357: PPUSH
2358: CALL_OW 12
2362: PPUSH
2363: LD_VAR 0 2
2367: PPUSH
2368: LD_EXP 20
2372: PPUSH
2373: CALL_OW 380
// hc_importance := 0 ;
2377: LD_ADDR_OWVAR 32
2381: PUSH
2382: LD_INT 0
2384: ST_TO_ADDR
// if Multiplayer then
2385: LD_OWVAR 4
2389: IFFALSE 2407
// begin hc_gallery :=  ;
2391: LD_ADDR_OWVAR 33
2395: PUSH
2396: LD_STRING 
2398: ST_TO_ADDR
// hc_face_number := 0 ;
2399: LD_ADDR_OWVAR 34
2403: PUSH
2404: LD_INT 0
2406: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2407: LD_ADDR_VAR 0 10
2411: PUSH
2412: CALL_OW 44
2416: ST_TO_ADDR
// if global_defined then
2417: LD_LOC 3
2421: IFFALSE 2561
// begin if ( cl = class_soldier ) then
2423: LD_VAR 0 2
2427: PUSH
2428: LD_INT 1
2430: EQUAL
2431: IFFALSE 2451
// j := i + soldiers_created else
2433: LD_ADDR_VAR 0 9
2437: PUSH
2438: LD_VAR 0 8
2442: PUSH
2443: LD_LOC 4
2447: PLUS
2448: ST_TO_ADDR
2449: GO 2461
// j := i ;
2451: LD_ADDR_VAR 0 9
2455: PUSH
2456: LD_VAR 0 8
2460: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2461: LD_LOC 2
2465: PUSH
2466: LD_VAR 0 2
2470: ARRAY
2471: PUSH
2472: LD_VAR 0 9
2476: ARRAY
2477: PPUSH
2478: LD_VAR 0 10
2482: PPUSH
2483: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2487: LD_VAR 0 10
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: LD_LOC 2
2499: PUSH
2500: LD_VAR 0 2
2504: ARRAY
2505: PUSH
2506: LD_VAR 0 9
2510: ARRAY
2511: PPUSH
2512: LD_INT 2
2514: PPUSH
2515: CALL_OW 260
2519: PPUSH
2520: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2524: LD_VAR 0 10
2528: PPUSH
2529: LD_INT 1
2531: PPUSH
2532: LD_LOC 2
2536: PUSH
2537: LD_VAR 0 2
2541: ARRAY
2542: PUSH
2543: LD_VAR 0 9
2547: ARRAY
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: CALL_OW 260
2556: PPUSH
2557: CALL_OW 239
// end ; if building then
2561: LD_VAR 0 6
2565: IFFALSE 2583
// PlaceHumanInUnit ( un , building ) else
2567: LD_VAR 0 10
2571: PPUSH
2572: LD_VAR 0 6
2576: PPUSH
2577: CALL_OW 52
2581: GO 2610
// PlaceUnitXYR ( un , x , y , r , false ) ;
2583: LD_VAR 0 10
2587: PPUSH
2588: LD_VAR 0 3
2592: PPUSH
2593: LD_VAR 0 4
2597: PPUSH
2598: LD_VAR 0 5
2602: PPUSH
2603: LD_INT 0
2605: PPUSH
2606: CALL_OW 50
// result := result ^ [ un ] ;
2610: LD_ADDR_VAR 0 7
2614: PUSH
2615: LD_VAR 0 7
2619: PUSH
2620: LD_VAR 0 10
2624: PUSH
2625: EMPTY
2626: LIST
2627: ADD
2628: ST_TO_ADDR
// end ;
2629: GO 2212
2631: POP
2632: POP
// if not global_defined then
2633: LD_LOC 3
2637: NOT
2638: IFFALSE 2716
// if ( global_units >= cl ) then
2640: LD_LOC 2
2644: PUSH
2645: LD_VAR 0 2
2649: GREATEREQUAL
2650: IFFALSE 2691
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2652: LD_ADDR_LOC 2
2656: PUSH
2657: LD_LOC 2
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: LD_LOC 2
2671: PUSH
2672: LD_VAR 0 2
2676: ARRAY
2677: PUSH
2678: LD_VAR 0 7
2682: ADD
2683: PPUSH
2684: CALL_OW 1
2688: ST_TO_ADDR
2689: GO 2716
// global_units := Replace ( global_units , cl , result ) ;
2691: LD_ADDR_LOC 2
2695: PUSH
2696: LD_LOC 2
2700: PPUSH
2701: LD_VAR 0 2
2705: PPUSH
2706: LD_VAR 0 7
2710: PPUSH
2711: CALL_OW 1
2715: ST_TO_ADDR
// end ;
2716: LD_VAR 0 7
2720: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2721: LD_INT 0
2723: PPUSH
2724: PPUSH
2725: PPUSH
2726: PPUSH
2727: PPUSH
2728: PPUSH
2729: PPUSH
2730: PPUSH
2731: PPUSH
// pos := Side_Positions [ side ] ;
2732: LD_ADDR_VAR 0 3
2736: PUSH
2737: LD_EXP 32
2741: PUSH
2742: LD_VAR 0 1
2746: ARRAY
2747: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2748: LD_ADDR_OWVAR 21
2752: PUSH
2753: LD_EXP 33
2757: PUSH
2758: LD_VAR 0 1
2762: ARRAY
2763: ST_TO_ADDR
// uc_side := side ;
2764: LD_ADDR_OWVAR 20
2768: PUSH
2769: LD_VAR 0 1
2773: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2774: LD_ADDR_VAR 0 4
2778: PUSH
2779: LD_EXP 35
2783: PUSH
2784: LD_VAR 0 3
2788: ARRAY
2789: PUSH
2790: LD_INT 1
2792: ARRAY
2793: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2794: LD_ADDR_VAR 0 5
2798: PUSH
2799: LD_EXP 35
2803: PUSH
2804: LD_VAR 0 3
2808: ARRAY
2809: PUSH
2810: LD_INT 2
2812: ARRAY
2813: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2814: LD_ADDR_VAR 0 6
2818: PUSH
2819: LD_EXP 35
2823: PUSH
2824: LD_VAR 0 3
2828: ARRAY
2829: PUSH
2830: LD_INT 3
2832: ARRAY
2833: ST_TO_ADDR
// if is_depot then
2834: LD_EXP 17
2838: IFFALSE 2971
// begin bc_type = b_depot ;
2840: LD_ADDR_OWVAR 42
2844: PUSH
2845: LD_INT 0
2847: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2848: LD_ADDR_VAR 0 10
2852: PUSH
2853: LD_VAR 0 4
2857: PPUSH
2858: LD_VAR 0 5
2862: PPUSH
2863: LD_VAR 0 6
2867: PPUSH
2868: CALL_OW 47
2872: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2873: LD_VAR 0 10
2877: PPUSH
2878: LD_STRING @
2880: PUSH
2881: LD_VAR 0 1
2885: STR
2886: PPUSH
2887: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2891: LD_VAR 0 10
2895: PPUSH
2896: CALL_OW 274
2900: PPUSH
2901: LD_INT 1
2903: PPUSH
2904: LD_EXP 22
2908: PUSH
2909: LD_INT 1
2911: ARRAY
2912: PPUSH
2913: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2917: LD_VAR 0 10
2921: PPUSH
2922: CALL_OW 274
2926: PPUSH
2927: LD_INT 2
2929: PPUSH
2930: LD_EXP 22
2934: PUSH
2935: LD_INT 2
2937: ARRAY
2938: PPUSH
2939: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2943: LD_VAR 0 10
2947: PPUSH
2948: CALL_OW 274
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_EXP 22
2960: PUSH
2961: LD_INT 3
2963: ARRAY
2964: PPUSH
2965: CALL_OW 277
// end else
2969: GO 3115
// begin for i := 1 to 3 do
2971: LD_ADDR_VAR 0 7
2975: PUSH
2976: DOUBLE
2977: LD_INT 1
2979: DEC
2980: ST_TO_ADDR
2981: LD_INT 3
2983: PUSH
2984: FOR_TO
2985: IFFALSE 3113
// begin r := starting_resources [ i ] ;
2987: LD_ADDR_VAR 0 8
2991: PUSH
2992: LD_EXP 22
2996: PUSH
2997: LD_VAR 0 7
3001: ARRAY
3002: ST_TO_ADDR
// while r >= 10 do
3003: LD_VAR 0 8
3007: PUSH
3008: LD_INT 10
3010: GREATEREQUAL
3011: IFFALSE 3111
// if r > 50 then
3013: LD_VAR 0 8
3017: PUSH
3018: LD_INT 50
3020: GREATER
3021: IFFALSE 3067
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: LD_VAR 0 4
3035: PPUSH
3036: LD_VAR 0 5
3040: PPUSH
3041: LD_INT 4
3043: PPUSH
3044: LD_INT 0
3046: PPUSH
3047: CALL_OW 60
// r := r - 50 ;
3051: LD_ADDR_VAR 0 8
3055: PUSH
3056: LD_VAR 0 8
3060: PUSH
3061: LD_INT 50
3063: MINUS
3064: ST_TO_ADDR
// end else
3065: GO 3109
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3067: LD_VAR 0 7
3071: PPUSH
3072: LD_VAR 0 8
3076: PUSH
3077: LD_INT 10
3079: DIV
3080: PPUSH
3081: LD_VAR 0 4
3085: PPUSH
3086: LD_VAR 0 5
3090: PPUSH
3091: LD_INT 4
3093: PPUSH
3094: LD_INT 0
3096: PPUSH
3097: CALL_OW 60
// r := 0 ;
3101: LD_ADDR_VAR 0 8
3105: PUSH
3106: LD_INT 0
3108: ST_TO_ADDR
// end ;
3109: GO 3003
// end ;
3111: GO 2984
3113: POP
3114: POP
// end ; for r in starting_crates do
3115: LD_ADDR_VAR 0 8
3119: PUSH
3120: LD_EXP 21
3124: PUSH
3125: FOR_IN
3126: IFFALSE 3158
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3128: LD_INT 1
3130: PPUSH
3131: LD_INT 5
3133: PPUSH
3134: LD_VAR 0 4
3138: PPUSH
3139: LD_VAR 0 5
3143: PPUSH
3144: LD_VAR 0 8
3148: PPUSH
3149: LD_INT 0
3151: PPUSH
3152: CALL_OW 60
3156: GO 3125
3158: POP
3159: POP
// if def_morale_flags then
3160: LD_EXP 9
3164: IFFALSE 3303
// begin x := start_def [ pos ] [ 1 ] ;
3166: LD_ADDR_VAR 0 4
3170: PUSH
3171: LD_EXP 37
3175: PUSH
3176: LD_VAR 0 3
3180: ARRAY
3181: PUSH
3182: LD_INT 1
3184: ARRAY
3185: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3186: LD_ADDR_VAR 0 5
3190: PUSH
3191: LD_EXP 37
3195: PUSH
3196: LD_VAR 0 3
3200: ARRAY
3201: PUSH
3202: LD_INT 2
3204: ARRAY
3205: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3206: LD_VAR 0 4
3210: PPUSH
3211: LD_VAR 0 5
3215: PPUSH
3216: LD_INT 12
3218: PPUSH
3219: LD_INT 2
3221: PPUSH
3222: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3226: LD_ADDR_EXP 42
3230: PUSH
3231: LD_EXP 42
3235: PUSH
3236: LD_VAR 0 1
3240: PPUSH
3241: LD_VAR 0 4
3245: PPUSH
3246: LD_VAR 0 5
3250: PPUSH
3251: LD_INT 1
3253: PUSH
3254: LD_INT 100
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 2
3263: PUSH
3264: LD_INT 50
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 3
3273: PUSH
3274: LD_INT 20
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 20
3283: PUSH
3284: LD_INT 100
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: PPUSH
3297: CALL_OW 418
3301: ADD
3302: ST_TO_ADDR
// end ; commander := true ;
3303: LD_ADDR_LOC 1
3307: PUSH
3308: LD_INT 1
3310: ST_TO_ADDR
// soldiers_created := 0 ;
3311: LD_ADDR_LOC 4
3315: PUSH
3316: LD_INT 0
3318: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3319: LD_ADDR_VAR 0 7
3323: PUSH
3324: DOUBLE
3325: LD_INT 1
3327: DEC
3328: ST_TO_ADDR
3329: LD_EXP 18
3333: PUSH
3334: FOR_TO
3335: IFFALSE 3488
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3337: LD_ADDR_VAR 0 4
3341: PUSH
3342: LD_EXP 36
3346: PUSH
3347: LD_VAR 0 3
3351: ARRAY
3352: PUSH
3353: LD_VAR 0 7
3357: ARRAY
3358: PUSH
3359: LD_INT 1
3361: ARRAY
3362: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3363: LD_ADDR_VAR 0 5
3367: PUSH
3368: LD_EXP 36
3372: PUSH
3373: LD_VAR 0 3
3377: ARRAY
3378: PUSH
3379: LD_VAR 0 7
3383: ARRAY
3384: PUSH
3385: LD_INT 2
3387: ARRAY
3388: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3389: LD_ADDR_VAR 0 6
3393: PUSH
3394: LD_EXP 36
3398: PUSH
3399: LD_VAR 0 3
3403: ARRAY
3404: PUSH
3405: LD_VAR 0 7
3409: ARRAY
3410: PUSH
3411: LD_INT 3
3413: ARRAY
3414: ST_TO_ADDR
// bc_type := b_breastwork ;
3415: LD_ADDR_OWVAR 42
3419: PUSH
3420: LD_INT 31
3422: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3423: LD_ADDR_VAR 0 9
3427: PUSH
3428: LD_VAR 0 4
3432: PPUSH
3433: LD_VAR 0 5
3437: PPUSH
3438: LD_VAR 0 6
3442: PPUSH
3443: CALL_OW 47
3447: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3448: LD_INT 1
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 0
3459: PPUSH
3460: LD_INT 0
3462: PPUSH
3463: LD_VAR 0 9
3467: PPUSH
3468: CALL 2184 0 6
// soldiers_created := soldiers_created + 1 ;
3472: LD_ADDR_LOC 4
3476: PUSH
3477: LD_LOC 4
3481: PUSH
3482: LD_INT 1
3484: PLUS
3485: ST_TO_ADDR
// end ;
3486: GO 3334
3488: POP
3489: POP
// x := start_def [ pos ] [ 1 ] ;
3490: LD_ADDR_VAR 0 4
3494: PUSH
3495: LD_EXP 37
3499: PUSH
3500: LD_VAR 0 3
3504: ARRAY
3505: PUSH
3506: LD_INT 1
3508: ARRAY
3509: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3510: LD_ADDR_VAR 0 5
3514: PUSH
3515: LD_EXP 37
3519: PUSH
3520: LD_VAR 0 3
3524: ARRAY
3525: PUSH
3526: LD_INT 2
3528: ARRAY
3529: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3530: LD_LOC 8
3534: PUSH
3535: LD_EXP 18
3539: MINUS
3540: PPUSH
3541: LD_INT 1
3543: PPUSH
3544: LD_VAR 0 4
3548: PPUSH
3549: LD_VAR 0 5
3553: PPUSH
3554: LD_INT 5
3556: PPUSH
3557: LD_INT 0
3559: PPUSH
3560: CALL 2184 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3564: LD_LOC 5
3568: PPUSH
3569: LD_INT 2
3571: PPUSH
3572: LD_VAR 0 4
3576: PPUSH
3577: LD_VAR 0 5
3581: PPUSH
3582: LD_INT 5
3584: PPUSH
3585: LD_INT 0
3587: PPUSH
3588: CALL 2184 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3592: LD_LOC 7
3596: PPUSH
3597: LD_INT 3
3599: PPUSH
3600: LD_VAR 0 4
3604: PPUSH
3605: LD_VAR 0 5
3609: PPUSH
3610: LD_INT 5
3612: PPUSH
3613: LD_INT 0
3615: PPUSH
3616: CALL 2184 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3620: LD_LOC 6
3624: PPUSH
3625: LD_INT 4
3627: PPUSH
3628: LD_VAR 0 4
3632: PPUSH
3633: LD_VAR 0 5
3637: PPUSH
3638: LD_INT 5
3640: PPUSH
3641: LD_INT 0
3643: PPUSH
3644: CALL 2184 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3648: LD_EXP 10
3652: PUSH
3653: LD_INT 20
3655: PPUSH
3656: LD_VAR 0 1
3660: PPUSH
3661: CALL_OW 321
3665: PUSH
3666: LD_INT 1
3668: EQUAL
3669: AND
3670: IFFALSE 3687
// SetTech ( tech_SibDet , side , state_researched ) ;
3672: LD_INT 20
3674: PPUSH
3675: LD_VAR 0 1
3679: PPUSH
3680: LD_INT 2
3682: PPUSH
3683: CALL_OW 322
// if def_siberite_bomb = 1 then
3687: LD_EXP 13
3691: PUSH
3692: LD_INT 1
3694: EQUAL
3695: IFFALSE 3729
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3697: LD_INT 25
3699: PPUSH
3700: LD_VAR 0 1
3704: PPUSH
3705: LD_INT 1
3707: PPUSH
3708: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3712: LD_INT 73
3714: PPUSH
3715: LD_VAR 0 1
3719: PPUSH
3720: LD_INT 1
3722: PPUSH
3723: CALL_OW 322
// end else
3727: GO 3759
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3729: LD_INT 25
3731: PPUSH
3732: LD_VAR 0 1
3736: PPUSH
3737: LD_INT 0
3739: PPUSH
3740: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3744: LD_INT 73
3746: PPUSH
3747: LD_VAR 0 1
3751: PPUSH
3752: LD_INT 0
3754: PPUSH
3755: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3759: LD_INT 24
3761: PPUSH
3762: LD_VAR 0 1
3766: PPUSH
3767: LD_INT 0
3769: PPUSH
3770: CALL_OW 322
// global_defined := true ;
3774: LD_ADDR_LOC 3
3778: PUSH
3779: LD_INT 1
3781: ST_TO_ADDR
// end ;
3782: LD_VAR 0 2
3786: RET
// every 0 0$1 do
3787: GO 3789
3789: DISABLE
// if ( def_siberite_bomb > 1 ) then
3790: LD_EXP 13
3794: PUSH
3795: LD_INT 1
3797: GREATER
3798: IFFALSE 3813
// begin wait ( siberite_bomb_Delay ) ;
3800: LD_EXP 28
3804: PPUSH
3805: CALL_OW 67
// EnableSibFiss ;
3809: CALL 3814 0 0
// end ;
3813: END
// function EnableSibFiss ; var i ; begin
3814: LD_INT 0
3816: PPUSH
3817: PPUSH
// for i := 1 to 8 do
3818: LD_ADDR_VAR 0 2
3822: PUSH
3823: DOUBLE
3824: LD_INT 1
3826: DEC
3827: ST_TO_ADDR
3828: LD_INT 8
3830: PUSH
3831: FOR_TO
3832: IFFALSE 3878
// if Side_Positions [ i ] then
3834: LD_EXP 32
3838: PUSH
3839: LD_VAR 0 2
3843: ARRAY
3844: IFFALSE 3876
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3846: LD_INT 25
3848: PPUSH
3849: LD_VAR 0 2
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3861: LD_INT 73
3863: PPUSH
3864: LD_VAR 0 2
3868: PPUSH
3869: LD_INT 1
3871: PPUSH
3872: CALL_OW 322
// end ;
3876: GO 3831
3878: POP
3879: POP
// end ;
3880: LD_VAR 0 1
3884: RET
// function prepare_sides ; var i ; begin
3885: LD_INT 0
3887: PPUSH
3888: PPUSH
// global_units := [ ] ;
3889: LD_ADDR_LOC 2
3893: PUSH
3894: EMPTY
3895: ST_TO_ADDR
// global_defined := false ;
3896: LD_ADDR_LOC 3
3900: PUSH
3901: LD_INT 0
3903: ST_TO_ADDR
// CountClassMembers ;
3904: CALL 3954 0 0
// for i := 1 to 8 do
3908: LD_ADDR_VAR 0 2
3912: PUSH
3913: DOUBLE
3914: LD_INT 1
3916: DEC
3917: ST_TO_ADDR
3918: LD_INT 8
3920: PUSH
3921: FOR_TO
3922: IFFALSE 3947
// if Side_Positions [ i ] then
3924: LD_EXP 32
3928: PUSH
3929: LD_VAR 0 2
3933: ARRAY
3934: IFFALSE 3945
// prepare_side ( i ) ;
3936: LD_VAR 0 2
3940: PPUSH
3941: CALL 2721 0 1
3945: GO 3921
3947: POP
3948: POP
// end ;
3949: LD_VAR 0 1
3953: RET
// function CountClassMembers ; var Mode ; begin
3954: LD_INT 0
3956: PPUSH
3957: PPUSH
// if No_Mechs then
3958: LD_EXP 15
3962: IFFALSE 3974
// Mode := 2 else
3964: LD_ADDR_VAR 0 2
3968: PUSH
3969: LD_INT 2
3971: ST_TO_ADDR
3972: GO 3982
// Mode := 1 ;
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: LD_INT 1
3981: ST_TO_ADDR
// neng := number_of_people ;
3982: LD_ADDR_LOC 5
3986: PUSH
3987: LD_EXP 19
3991: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
3992: LD_ADDR_LOC 8
3996: PUSH
3997: LD_LOC 5
4001: PUSH
4002: LD_INT 4
4004: PUSH
4005: LD_INT 3
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: LD_VAR 0 2
4016: ARRAY
4017: DIV
4018: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4019: LD_LOC 8
4023: PUSH
4024: LD_EXP 18
4028: LESS
4029: IFFALSE 4041
// nsol := number_of_breastworks ;
4031: LD_ADDR_LOC 8
4035: PUSH
4036: LD_EXP 18
4040: ST_TO_ADDR
// neng := neng - nsol ;
4041: LD_ADDR_LOC 5
4045: PUSH
4046: LD_LOC 5
4050: PUSH
4051: LD_LOC 8
4055: MINUS
4056: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4057: LD_ADDR_LOC 6
4061: PUSH
4062: LD_LOC 5
4066: PUSH
4067: LD_INT 3
4069: PUSH
4070: LD_INT 2
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: PUSH
4077: LD_VAR 0 2
4081: ARRAY
4082: DIV
4083: ST_TO_ADDR
// if ( nsci < 1 ) then
4084: LD_LOC 6
4088: PUSH
4089: LD_INT 1
4091: LESS
4092: IFFALSE 4102
// nsci := 1 ;
4094: LD_ADDR_LOC 6
4098: PUSH
4099: LD_INT 1
4101: ST_TO_ADDR
// neng := neng - nsci ;
4102: LD_ADDR_LOC 5
4106: PUSH
4107: LD_LOC 5
4111: PUSH
4112: LD_LOC 6
4116: MINUS
4117: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4118: LD_ADDR_LOC 7
4122: PUSH
4123: LD_LOC 5
4127: PUSH
4128: LD_INT 2
4130: DIV
4131: PUSH
4132: LD_INT 0
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: PUSH
4139: LD_VAR 0 2
4143: ARRAY
4144: ST_TO_ADDR
// neng := neng - nmech ;
4145: LD_ADDR_LOC 5
4149: PUSH
4150: LD_LOC 5
4154: PUSH
4155: LD_LOC 7
4159: MINUS
4160: ST_TO_ADDR
// if ( neng < 1 ) then
4161: LD_LOC 5
4165: PUSH
4166: LD_INT 1
4168: LESS
4169: IFFALSE 4179
// neng := 1 ;
4171: LD_ADDR_LOC 5
4175: PUSH
4176: LD_INT 1
4178: ST_TO_ADDR
// end ;
4179: LD_VAR 0 1
4183: RET
// starting begin disable ( 98 ) ;
4184: LD_INT 98
4186: DISABLE_MARKED
// disable ( 99 ) ;
4187: LD_INT 99
4189: DISABLE_MARKED
// disable ( 400 ) ;
4190: LD_INT 400
4192: DISABLE_MARKED
// disable ( 401 ) ;
4193: LD_INT 401
4195: DISABLE_MARKED
// mp_selectmsg := true ;
4196: LD_ADDR_OWVAR 13
4200: PUSH
4201: LD_INT 1
4203: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4204: CALL 784 0 0
// init_map ;
4208: CALL 0 0 0
// set_shared_visions_and_alliances ;
4212: CALL 1875 0 0
// ResetFog ;
4216: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4220: LD_OWVAR 2
4224: PPUSH
4225: CALL_OW 520
// prepare_sides ;
4229: CALL 3885 0 0
// init_shipments_and_respawning ;
4233: CALL 4631 0 0
// Init_Win_Condition ;
4237: CALL 7370 0 0
// ShowTimer ;
4241: CALL 6350 0 0
// music_nat := Side_Nations [ your_side ] ;
4245: LD_ADDR_OWVAR 71
4249: PUSH
4250: LD_EXP 33
4254: PUSH
4255: LD_OWVAR 2
4259: ARRAY
4260: ST_TO_ADDR
// if IAmSpec then
4261: CALL_OW 531
4265: IFFALSE 4289
// begin fogoff ( true ) ;
4267: LD_INT 1
4269: PPUSH
4270: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
4274: LD_INT 104
4276: PPUSH
4277: LD_INT 69
4279: PPUSH
4280: CALL_OW 86
// enable ( 400 ) ;
4284: LD_INT 400
4286: ENABLE_MARKED
// end else
4287: GO 4335
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4289: LD_EXP 37
4293: PUSH
4294: LD_EXP 32
4298: PUSH
4299: LD_OWVAR 2
4303: ARRAY
4304: ARRAY
4305: PUSH
4306: LD_INT 1
4308: ARRAY
4309: PPUSH
4310: LD_EXP 37
4314: PUSH
4315: LD_EXP 32
4319: PUSH
4320: LD_OWVAR 2
4324: ARRAY
4325: ARRAY
4326: PUSH
4327: LD_INT 2
4329: ARRAY
4330: PPUSH
4331: CALL_OW 86
// end ; BuildUpAreas := [ base_nw , base_ne , base_sw , base_se ] ;
4335: LD_ADDR_EXP 47
4339: PUSH
4340: LD_INT 8
4342: PUSH
4343: LD_INT 9
4345: PUSH
4346: LD_INT 10
4348: PUSH
4349: LD_INT 11
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: ST_TO_ADDR
// BeginBuildUp ;
4358: CALL 6533 0 0
// end ; end_of_file
4362: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
4363: LD_VAR 0 1
4367: PPUSH
4368: CALL_OW 266
4372: PUSH
4373: LD_INT 0
4375: PUSH
4376: LD_INT 1
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: IN
4383: IFFALSE 4408
// SetBName ( b , @ & GetSide ( b ) ) ;
4385: LD_VAR 0 1
4389: PPUSH
4390: LD_STRING @
4392: PUSH
4393: LD_VAR 0 1
4397: PPUSH
4398: CALL_OW 255
4402: STR
4403: PPUSH
4404: CALL_OW 500
// end ;
4408: PPOPN 2
4410: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
4411: LD_VAR 0 1
4415: PPUSH
4416: CALL_OW 266
4420: PUSH
4421: LD_INT 0
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: IN
4431: IFFALSE 4456
// SetBName ( b , @ & GetSide ( b ) ) ;
4433: LD_VAR 0 1
4437: PPUSH
4438: LD_STRING @
4440: PUSH
4441: LD_VAR 0 1
4445: PPUSH
4446: CALL_OW 255
4450: STR
4451: PPUSH
4452: CALL_OW 500
// end ;
4456: PPOPN 3
4458: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
4459: LD_INT 0
4461: PPUSH
4462: PPUSH
4463: PPUSH
4464: PPUSH
// begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
4465: LD_VAR 0 1
4469: PPUSH
4470: CALL_OW 255
4474: PUSH
4475: LD_INT 0
4477: EQUAL
4478: PUSH
4479: LD_VAR 0 1
4483: PPUSH
4484: CALL_OW 257
4488: PUSH
4489: LD_INT 12
4491: EQUAL
4492: AND
4493: IFFALSE 4499
// CheckApemenAmount ;
4495: CALL 5701 0 0
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
4499: LD_VAR 0 1
4503: PPUSH
4504: CALL_OW 266
4508: PUSH
4509: LD_INT 0
4511: PUSH
4512: LD_INT 1
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: IN
4519: IFFALSE 4601
// begin pos := Side_Positions [ GetSide ( j ) ] ;
4521: LD_ADDR_VAR 0 4
4525: PUSH
4526: LD_EXP 32
4530: PUSH
4531: LD_VAR 0 1
4535: PPUSH
4536: CALL_OW 255
4540: ARRAY
4541: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
4542: LD_ADDR_VAR 0 2
4546: PUSH
4547: LD_EXP 37
4551: PUSH
4552: LD_VAR 0 4
4556: ARRAY
4557: PUSH
4558: LD_INT 1
4560: ARRAY
4561: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4562: LD_ADDR_VAR 0 3
4566: PUSH
4567: LD_EXP 37
4571: PUSH
4572: LD_VAR 0 4
4576: ARRAY
4577: PUSH
4578: LD_INT 2
4580: ARRAY
4581: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
4582: LD_VAR 0 2
4586: PPUSH
4587: LD_VAR 0 3
4591: PPUSH
4592: CALL_OW 420
4596: PPUSH
4597: CALL_OW 419
// end ; end ;
4601: PPOPN 5
4603: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
4604: LD_VAR 0 1
4608: PPUSH
4609: LD_VAR 0 2
4613: PPUSH
4614: LD_VAR 0 3
4618: PPUSH
4619: LD_OWVAR 2
4623: PPUSH
4624: CALL 7131 0 4
4628: PPOPN 3
4630: END
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
4631: LD_INT 0
4633: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4634: LD_ADDR_LOC 9
4638: PUSH
4639: LD_INT 0
4641: PPUSH
4642: LD_INT 3
4644: PPUSH
4645: CALL_OW 12
4649: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
4650: LD_ADDR_LOC 10
4654: PUSH
4655: LD_INT 1
4657: PPUSH
4658: LD_INT 8
4660: PPUSH
4661: CALL_OW 12
4665: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4666: LD_ADDR_LOC 11
4670: PUSH
4671: LD_INT 0
4673: PUSH
4674: LD_INT 0
4676: PUSH
4677: LD_INT 0
4679: PUSH
4680: LD_INT 0
4682: PUSH
4683: LD_INT 0
4685: PUSH
4686: LD_INT 0
4688: PUSH
4689: LD_INT 0
4691: PUSH
4692: LD_INT 0
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: ST_TO_ADDR
// end ;
4705: LD_VAR 0 1
4709: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
4710: GO 4712
4712: DISABLE
4713: LD_INT 0
4715: PPUSH
4716: PPUSH
4717: PPUSH
4718: PPUSH
// begin if respawning_time_max = 0 then
4719: LD_EXP 26
4723: PUSH
4724: LD_INT 0
4726: EQUAL
4727: IFFALSE 4731
// exit ;
4729: GO 5238
// if respawn = 8 then
4731: LD_LOC 10
4735: PUSH
4736: LD_INT 8
4738: EQUAL
4739: IFFALSE 4751
// respawn := 1 else
4741: LD_ADDR_LOC 10
4745: PUSH
4746: LD_INT 1
4748: ST_TO_ADDR
4749: GO 4765
// respawn := respawn + 1 ;
4751: LD_ADDR_LOC 10
4755: PUSH
4756: LD_LOC 10
4760: PUSH
4761: LD_INT 1
4763: PLUS
4764: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
4765: LD_EXP 32
4769: PUSH
4770: LD_LOC 10
4774: ARRAY
4775: PUSH
4776: LD_LOC 11
4780: PUSH
4781: LD_LOC 10
4785: ARRAY
4786: NOT
4787: AND
4788: IFFALSE 5237
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
4790: LD_ADDR_VAR 0 1
4794: PUSH
4795: LD_INT 21
4797: PUSH
4798: LD_INT 1
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: PUSH
4805: LD_INT 22
4807: PUSH
4808: LD_LOC 10
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: PUSH
4817: LD_INT 3
4819: PUSH
4820: LD_INT 23
4822: PUSH
4823: LD_INT 0
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: PPUSH
4836: CALL_OW 69
4840: ST_TO_ADDR
// if n < number_of_people then
4841: LD_VAR 0 1
4845: PUSH
4846: LD_EXP 19
4850: LESS
4851: IFFALSE 5234
// begin aktresp := respawn ;
4853: LD_ADDR_VAR 0 3
4857: PUSH
4858: LD_LOC 10
4862: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
4863: LD_ADDR_LOC 11
4867: PUSH
4868: LD_LOC 11
4872: PPUSH
4873: LD_VAR 0 3
4877: PPUSH
4878: LD_INT 1
4880: PPUSH
4881: CALL_OW 1
4885: ST_TO_ADDR
// enable ;
4886: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
4887: LD_EXP 25
4891: PPUSH
4892: LD_EXP 26
4896: PPUSH
4897: CALL_OW 12
4901: PPUSH
4902: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
4906: LD_ADDR_LOC 11
4910: PUSH
4911: LD_LOC 11
4915: PPUSH
4916: LD_VAR 0 3
4920: PPUSH
4921: LD_INT 0
4923: PPUSH
4924: CALL_OW 1
4928: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
4929: LD_ADDR_VAR 0 2
4933: PUSH
4934: LD_INT 21
4936: PUSH
4937: LD_INT 3
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PUSH
4944: LD_INT 2
4946: PUSH
4947: LD_INT 30
4949: PUSH
4950: LD_INT 0
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PUSH
4957: LD_INT 30
4959: PUSH
4960: LD_INT 1
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: LIST
4971: PUSH
4972: LD_INT 50
4974: PUSH
4975: EMPTY
4976: LIST
4977: PUSH
4978: LD_INT 22
4980: PUSH
4981: LD_VAR 0 3
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: PPUSH
4996: CALL_OW 69
5000: ST_TO_ADDR
// if building_list = 0 then
5001: LD_VAR 0 2
5005: PUSH
5006: LD_INT 0
5008: EQUAL
5009: IFFALSE 5054
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5011: LD_ADDR_VAR 0 2
5015: PUSH
5016: LD_INT 21
5018: PUSH
5019: LD_INT 3
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 50
5028: PUSH
5029: EMPTY
5030: LIST
5031: PUSH
5032: LD_INT 22
5034: PUSH
5035: LD_VAR 0 3
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: LIST
5048: PPUSH
5049: CALL_OW 69
5053: ST_TO_ADDR
// if building_list = 0 then
5054: LD_VAR 0 2
5058: PUSH
5059: LD_INT 0
5061: EQUAL
5062: IFFALSE 5066
// exit ;
5064: GO 5238
// hc_name :=  ;
5066: LD_ADDR_OWVAR 26
5070: PUSH
5071: LD_STRING 
5073: ST_TO_ADDR
// hc_importance := 0 ;
5074: LD_ADDR_OWVAR 32
5078: PUSH
5079: LD_INT 0
5081: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
5082: LD_INT 0
5084: PPUSH
5085: LD_INT 0
5087: PPUSH
5088: LD_EXP 20
5092: PUSH
5093: LD_INT 2
5095: DIV
5096: PPUSH
5097: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
5101: LD_ADDR_OWVAR 21
5105: PUSH
5106: LD_EXP 33
5110: PUSH
5111: LD_VAR 0 3
5115: ARRAY
5116: ST_TO_ADDR
// uc_side := aktresp ;
5117: LD_ADDR_OWVAR 20
5121: PUSH
5122: LD_VAR 0 3
5126: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5127: LD_ADDR_VAR 0 4
5131: PUSH
5132: LD_VAR 0 2
5136: PUSH
5137: LD_INT 1
5139: PPUSH
5140: LD_VAR 0 2
5144: PUSH
5145: LD_INT 0
5147: PLUS
5148: PPUSH
5149: CALL_OW 12
5153: ARRAY
5154: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5155: LD_VAR 0 4
5159: PPUSH
5160: CALL_OW 266
5164: PUSH
5165: LD_INT 0
5167: PUSH
5168: LD_INT 1
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: IN
5175: IFFALSE 5187
// n = 25 else
5177: LD_ADDR_VAR 0 1
5181: PUSH
5182: LD_INT 25
5184: ST_TO_ADDR
5185: GO 5195
// n = 10 ;
5187: LD_ADDR_VAR 0 1
5191: PUSH
5192: LD_INT 10
5194: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5195: CALL_OW 44
5199: PPUSH
5200: LD_VAR 0 4
5204: PPUSH
5205: CALL_OW 250
5209: PPUSH
5210: LD_VAR 0 4
5214: PPUSH
5215: CALL_OW 251
5219: PPUSH
5220: LD_VAR 0 1
5224: PPUSH
5225: LD_INT 1
5227: PPUSH
5228: CALL_OW 50
// end else
5232: GO 5235
// enable ;
5234: ENABLE
// end else
5235: GO 5238
// enable ;
5237: ENABLE
// end ;
5238: PPOPN 4
5240: END
// every 0 0$5 + 0 0$1.1 do var d ;
5241: GO 5243
5243: DISABLE
5244: LD_INT 0
5246: PPUSH
// begin case tick of 1 .. 1 1$0 :
5247: LD_OWVAR 1
5251: PUSH
5252: LD_INT 1
5254: DOUBLE
5255: GREATEREQUAL
5256: IFFALSE 5264
5258: LD_INT 2100
5260: DOUBLE
5261: LESSEQUAL
5262: IFTRUE 5266
5264: GO 5277
5266: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5267: LD_ADDR_VAR 0 1
5271: PUSH
5272: LD_INT 150
5274: ST_TO_ADDR
5275: GO 5460
5277: LD_INT 2100
5279: PUSH
5280: LD_INT 1
5282: PLUS
5283: DOUBLE
5284: GREATEREQUAL
5285: IFFALSE 5293
5287: LD_INT 10500
5289: DOUBLE
5290: LESSEQUAL
5291: IFTRUE 5295
5293: GO 5306
5295: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5296: LD_ADDR_VAR 0 1
5300: PUSH
5301: LD_INT 100
5303: ST_TO_ADDR
5304: GO 5460
5306: LD_INT 10500
5308: PUSH
5309: LD_INT 1
5311: PLUS
5312: DOUBLE
5313: GREATEREQUAL
5314: IFFALSE 5322
5316: LD_INT 21000
5318: DOUBLE
5319: LESSEQUAL
5320: IFTRUE 5324
5322: GO 5335
5324: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5325: LD_ADDR_VAR 0 1
5329: PUSH
5330: LD_INT 90
5332: ST_TO_ADDR
5333: GO 5460
5335: LD_INT 21000
5337: PUSH
5338: LD_INT 1
5340: PLUS
5341: DOUBLE
5342: GREATEREQUAL
5343: IFFALSE 5351
5345: LD_INT 42000
5347: DOUBLE
5348: LESSEQUAL
5349: IFTRUE 5353
5351: GO 5364
5353: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5354: LD_ADDR_VAR 0 1
5358: PUSH
5359: LD_INT 70
5361: ST_TO_ADDR
5362: GO 5460
5364: LD_INT 42000
5366: PUSH
5367: LD_INT 1
5369: PLUS
5370: DOUBLE
5371: GREATEREQUAL
5372: IFFALSE 5380
5374: LD_INT 63000
5376: DOUBLE
5377: LESSEQUAL
5378: IFTRUE 5382
5380: GO 5393
5382: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5383: LD_ADDR_VAR 0 1
5387: PUSH
5388: LD_INT 60
5390: ST_TO_ADDR
5391: GO 5460
5393: LD_INT 63000
5395: PUSH
5396: LD_INT 1
5398: PLUS
5399: DOUBLE
5400: GREATEREQUAL
5401: IFFALSE 5409
5403: LD_INT 105000
5405: DOUBLE
5406: LESSEQUAL
5407: IFTRUE 5411
5409: GO 5422
5411: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5412: LD_ADDR_VAR 0 1
5416: PUSH
5417: LD_INT 35
5419: ST_TO_ADDR
5420: GO 5460
5422: LD_INT 105000
5424: PUSH
5425: LD_INT 1
5427: PLUS
5428: DOUBLE
5429: GREATEREQUAL
5430: IFFALSE 5438
5432: LD_INT 630000
5434: DOUBLE
5435: LESSEQUAL
5436: IFTRUE 5440
5438: GO 5451
5440: POP
// d := 20 ; else
5441: LD_ADDR_VAR 0 1
5445: PUSH
5446: LD_INT 20
5448: ST_TO_ADDR
5449: GO 5460
5451: POP
// d := 0 ; end ;
5452: LD_ADDR_VAR 0 1
5456: PUSH
5457: LD_INT 0
5459: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5460: LD_INT 1
5462: PPUSH
5463: LD_INT 10000
5465: PPUSH
5466: CALL_OW 12
5470: PUSH
5471: LD_VAR 0 1
5475: PUSH
5476: LD_EXP 23
5480: MUL
5481: LESSEQUAL
5482: IFFALSE 5536
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5484: LD_INT 1
5486: PPUSH
5487: LD_INT 140
5489: PPUSH
5490: CALL_OW 12
5494: PPUSH
5495: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5499: LD_ADDR_LOC 9
5503: PUSH
5504: LD_LOC 9
5508: PUSH
5509: LD_INT 1
5511: PLUS
5512: PUSH
5513: LD_INT 4
5515: MOD
5516: ST_TO_ADDR
// CreateCratesArea ( 5 , nw + shipment , true ) ;
5517: LD_INT 5
5519: PPUSH
5520: LD_INT 3
5522: PUSH
5523: LD_LOC 9
5527: PLUS
5528: PPUSH
5529: LD_INT 1
5531: PPUSH
5532: CALL_OW 55
// end ; enable ;
5536: ENABLE
// end ;
5537: PPOPN 1
5539: END
// every 1 1$0 trigger def_shipments_density do
5540: LD_EXP 5
5544: IFFALSE 5580
5546: GO 5548
5548: DISABLE
// begin CreateCratesArea ( 5 , map_center , true ) ;
5549: LD_INT 5
5551: PPUSH
5552: LD_INT 7
5554: PPUSH
5555: LD_INT 1
5557: PPUSH
5558: CALL_OW 55
// wait ( 3 3$0 - ( 1 1$0 * def_shipments_density ) ) ;
5562: LD_INT 6300
5564: PUSH
5565: LD_INT 2100
5567: PUSH
5568: LD_EXP 5
5572: MUL
5573: MINUS
5574: PPUSH
5575: CALL_OW 67
// enable ;
5579: ENABLE
// end ; end_of_file
5580: END
// var _apemenIncrement , _apemenMaximum , _apemenSkillLevel , _apemenThreshold , _isSpawning , _wildApemenAmount ; every 0 0$15 do var i ;
5581: GO 5583
5583: DISABLE
5584: LD_INT 0
5586: PPUSH
// begin _apemenIncrement := 0 ;
5587: LD_ADDR_LOC 12
5591: PUSH
5592: LD_INT 0
5594: ST_TO_ADDR
// _apemenSkillLevel := 0 ;
5595: LD_ADDR_LOC 14
5599: PUSH
5600: LD_INT 0
5602: ST_TO_ADDR
// _isSpawning := true ;
5603: LD_ADDR_LOC 16
5607: PUSH
5608: LD_INT 1
5610: ST_TO_ADDR
// _wildApemenAmount := 0 ;
5611: LD_ADDR_LOC 17
5615: PUSH
5616: LD_INT 0
5618: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5619: LD_ADDR_VAR 0 1
5623: PUSH
5624: LD_EXP 32
5628: PUSH
5629: LD_INT 0
5631: PUSH
5632: EMPTY
5633: LIST
5634: DIFF
5635: PUSH
5636: FOR_IN
5637: IFFALSE 5655
// _apemenIncrement := _apemenIncrement + 1 ;
5639: LD_ADDR_LOC 12
5643: PUSH
5644: LD_LOC 12
5648: PUSH
5649: LD_INT 1
5651: PLUS
5652: ST_TO_ADDR
5653: GO 5636
5655: POP
5656: POP
// _apemenMaximum := _apemenIncrement * amount_of_apemen ;
5657: LD_ADDR_LOC 13
5661: PUSH
5662: LD_LOC 12
5666: PUSH
5667: LD_EXP 27
5671: MUL
5672: ST_TO_ADDR
// _apemenThreshold := _apemenMaximum / 2 ;
5673: LD_ADDR_LOC 15
5677: PUSH
5678: LD_LOC 13
5682: PUSH
5683: LD_INT 2
5685: DIVREAL
5686: ST_TO_ADDR
// prepare_apemen ;
5687: CALL 5779 0 0
// end ;
5691: PPOPN 1
5693: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
5694: CALL 5701 0 0
// end ;
5698: PPOPN 2
5700: END
// export function CheckApemenAmount ; begin
5701: LD_INT 0
5703: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
5704: LD_ADDR_LOC 17
5708: PUSH
5709: LD_LOC 17
5713: PUSH
5714: LD_INT 1
5716: MINUS
5717: ST_TO_ADDR
// if _isSpawning then
5718: LD_LOC 16
5722: IFFALSE 5726
// exit ;
5724: GO 5774
// if _wildApemenAmount <= ( _apemenThreshold ) then
5726: LD_LOC 17
5730: PUSH
5731: LD_LOC 15
5735: LESSEQUAL
5736: IFFALSE 5774
// begin if _apemenSkillLevel < 8 then
5738: LD_LOC 14
5742: PUSH
5743: LD_INT 8
5745: LESS
5746: IFFALSE 5762
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
5748: LD_ADDR_LOC 14
5752: PUSH
5753: LD_LOC 14
5757: PUSH
5758: LD_INT 1
5760: PLUS
5761: ST_TO_ADDR
// _isSpawning := true ;
5762: LD_ADDR_LOC 16
5766: PUSH
5767: LD_INT 1
5769: ST_TO_ADDR
// prepare_apemen ;
5770: CALL 5779 0 0
// end ; end ;
5774: LD_VAR 0 1
5778: RET
// function prepare_apemen ; var i ; begin
5779: LD_INT 0
5781: PPUSH
5782: PPUSH
// if not amount_of_apemen then
5783: LD_EXP 27
5787: NOT
5788: IFFALSE 5792
// exit ;
5790: GO 5971
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5792: LD_INT 1050
5794: PPUSH
5795: LD_INT 3150
5797: PPUSH
5798: CALL_OW 12
5802: PPUSH
5803: CALL_OW 67
// apeman_init ;
5807: CALL 5976 0 0
// for i in ( Side_Positions diff [ 0 ] ) do
5811: LD_ADDR_VAR 0 2
5815: PUSH
5816: LD_EXP 32
5820: PUSH
5821: LD_INT 0
5823: PUSH
5824: EMPTY
5825: LIST
5826: DIFF
5827: PUSH
5828: FOR_IN
5829: IFFALSE 5933
// begin if i = 1 then
5831: LD_VAR 0 2
5835: PUSH
5836: LD_INT 1
5838: EQUAL
5839: IFFALSE 5856
// PlaceUnitArea ( CreateHuman , north_apeman , false ) ;
5841: CALL_OW 44
5845: PPUSH
5846: LD_INT 1
5848: PPUSH
5849: LD_INT 0
5851: PPUSH
5852: CALL_OW 49
// if i = 2 then
5856: LD_VAR 0 2
5860: PUSH
5861: LD_INT 2
5863: EQUAL
5864: IFFALSE 5881
// PlaceUnitArea ( CreateHuman , north_apeman , false ) ;
5866: CALL_OW 44
5870: PPUSH
5871: LD_INT 1
5873: PPUSH
5874: LD_INT 0
5876: PPUSH
5877: CALL_OW 49
// if i = 3 then
5881: LD_VAR 0 2
5885: PUSH
5886: LD_INT 3
5888: EQUAL
5889: IFFALSE 5906
// PlaceUnitArea ( CreateHuman , south_apeman , false ) ;
5891: CALL_OW 44
5895: PPUSH
5896: LD_INT 2
5898: PPUSH
5899: LD_INT 0
5901: PPUSH
5902: CALL_OW 49
// if i = 4 then
5906: LD_VAR 0 2
5910: PUSH
5911: LD_INT 4
5913: EQUAL
5914: IFFALSE 5931
// PlaceUnitArea ( CreateHuman , south_apeman , false ) ;
5916: CALL_OW 44
5920: PPUSH
5921: LD_INT 2
5923: PPUSH
5924: LD_INT 0
5926: PPUSH
5927: CALL_OW 49
// end ;
5931: GO 5828
5933: POP
5934: POP
// _wildApemenAmount := _wildApemenAmount + _apemenIncrement ;
5935: LD_ADDR_LOC 17
5939: PUSH
5940: LD_LOC 17
5944: PUSH
5945: LD_LOC 12
5949: PLUS
5950: ST_TO_ADDR
// until _wildApemenAmount >= _apemenMaximum ;
5951: LD_LOC 17
5955: PUSH
5956: LD_LOC 13
5960: GREATEREQUAL
5961: IFFALSE 5792
// _isSpawning := false ;
5963: LD_ADDR_LOC 16
5967: PUSH
5968: LD_INT 0
5970: ST_TO_ADDR
// end ;
5971: LD_VAR 0 1
5975: RET
// function apeman_init ; begin
5976: LD_INT 0
5978: PPUSH
// uc_side := 0 ;
5979: LD_ADDR_OWVAR 20
5983: PUSH
5984: LD_INT 0
5986: ST_TO_ADDR
// uc_nation := nation_nature ;
5987: LD_ADDR_OWVAR 21
5991: PUSH
5992: LD_INT 0
5994: ST_TO_ADDR
// hc_class := class_apeman ;
5995: LD_ADDR_OWVAR 28
5999: PUSH
6000: LD_INT 12
6002: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
6003: LD_ADDR_OWVAR 30
6007: PUSH
6008: LD_INT 2
6010: PUSH
6011: LD_INT 2
6013: PUSH
6014: LD_INT 2
6016: PUSH
6017: LD_INT 2
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
6026: LD_ADDR_OWVAR 31
6030: PUSH
6031: LD_INT 0
6033: PPUSH
6034: LD_INT 2
6036: PPUSH
6037: CALL_OW 12
6041: PUSH
6042: LD_LOC 14
6046: PLUS
6047: PUSH
6048: LD_INT 0
6050: PPUSH
6051: LD_INT 2
6053: PPUSH
6054: CALL_OW 12
6058: PUSH
6059: LD_LOC 14
6063: PLUS
6064: PUSH
6065: LD_INT 0
6067: PPUSH
6068: LD_INT 2
6070: PPUSH
6071: CALL_OW 12
6075: PUSH
6076: LD_LOC 14
6080: PLUS
6081: PUSH
6082: LD_INT 0
6084: PPUSH
6085: LD_INT 2
6087: PPUSH
6088: CALL_OW 12
6092: PUSH
6093: LD_LOC 14
6097: PLUS
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
6105: LD_ADDR_OWVAR 29
6109: PUSH
6110: LD_INT 10
6112: PUSH
6113: LD_INT 12
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: ST_TO_ADDR
// hc_sex := sex_male ;
6120: LD_ADDR_OWVAR 27
6124: PUSH
6125: LD_INT 1
6127: ST_TO_ADDR
// hc_importance := 0 ;
6128: LD_ADDR_OWVAR 32
6132: PUSH
6133: LD_INT 0
6135: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
6136: LD_ADDR_OWVAR 35
6140: PUSH
6141: LD_INT 20
6143: NEG
6144: PPUSH
6145: LD_INT 20
6147: PPUSH
6148: CALL_OW 12
6152: ST_TO_ADDR
// end ; end_of_file
6153: LD_VAR 0 1
6157: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6158: LD_INT 0
6160: PPUSH
6161: PPUSH
// for un in battle_flags_id do
6162: LD_ADDR_VAR 0 2
6166: PUSH
6167: LD_EXP 42
6171: PUSH
6172: FOR_IN
6173: IFFALSE 6248
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6175: LD_VAR 0 2
6179: PPUSH
6180: LD_INT 1
6182: PUSH
6183: LD_LOC 18
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: LD_INT 2
6194: PUSH
6195: LD_LOC 18
6199: PUSH
6200: LD_INT 2
6202: DIV
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 3
6210: PUSH
6211: LD_LOC 18
6215: PUSH
6216: LD_INT 5
6218: DIV
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 20
6226: PUSH
6227: LD_LOC 18
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: PPUSH
6242: CALL_OW 423
6246: GO 6172
6248: POP
6249: POP
// end ;
6250: LD_VAR 0 1
6254: RET
// every 0 0$0.1 do var un ;
6255: GO 6257
6257: DISABLE
6258: LD_INT 0
6260: PPUSH
// begin if not def_morale_flags then
6261: LD_EXP 9
6265: NOT
6266: IFFALSE 6270
// exit ;
6268: GO 6347
// if not morale_decreasing_time then
6270: LD_EXP 24
6274: NOT
6275: IFFALSE 6279
// exit ;
6277: GO 6347
// strength = 100 ;
6279: LD_ADDR_LOC 18
6283: PUSH
6284: LD_INT 100
6286: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6287: LD_EXP 24
6291: PPUSH
6292: CALL_OW 67
// strength := strength - 1 ;
6296: LD_ADDR_LOC 18
6300: PUSH
6301: LD_LOC 18
6305: PUSH
6306: LD_INT 1
6308: MINUS
6309: ST_TO_ADDR
// Update_Flags ;
6310: CALL 6158 0 0
// until not strength ;
6314: LD_LOC 18
6318: NOT
6319: IFFALSE 6287
// for un in battle_flags_id do
6321: LD_ADDR_VAR 0 1
6325: PUSH
6326: LD_EXP 42
6330: PUSH
6331: FOR_IN
6332: IFFALSE 6345
// KillBattleFlag ( un ) ;
6334: LD_VAR 0 1
6338: PPUSH
6339: CALL_OW 419
6343: GO 6331
6345: POP
6346: POP
// end ; end_of_file
6347: PPOPN 1
6349: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
6350: LD_INT 0
6352: PPUSH
6353: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
6354: LD_ADDR_VAR 0 2
6358: PUSH
6359: LD_STRING #Multi1x1-Time
6361: PUSH
6362: LD_OWVAR 1
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: ST_TO_ADDR
// if WaitServerStrings then
6371: LD_EXP 46
6375: IFFALSE 6393
// AllStrings = AllStrings ^ WaitServerStrings ;
6377: LD_ADDR_VAR 0 2
6381: PUSH
6382: LD_VAR 0 2
6386: PUSH
6387: LD_EXP 46
6391: ADD
6392: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
6393: LD_INT 0
6395: PUSH
6396: LD_EXP 28
6400: PUSH
6401: LD_OWVAR 1
6405: MINUS
6406: LESSEQUAL
6407: IFFALSE 6438
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
6409: LD_ADDR_VAR 0 2
6413: PUSH
6414: LD_VAR 0 2
6418: PUSH
6419: LD_STRING #allowedsibbomb
6421: PUSH
6422: LD_EXP 28
6426: PUSH
6427: LD_OWVAR 1
6431: MINUS
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: ADD
6437: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
6438: LD_INT 0
6440: PUSH
6441: LD_EXP 49
6445: PUSH
6446: LD_OWVAR 1
6450: MINUS
6451: LESSEQUAL
6452: IFFALSE 6483
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
6454: LD_ADDR_VAR 0 2
6458: PUSH
6459: LD_VAR 0 2
6463: PUSH
6464: LD_STRING #builduptime
6466: PUSH
6467: LD_EXP 49
6471: PUSH
6472: LD_OWVAR 1
6476: MINUS
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: ADD
6482: ST_TO_ADDR
// if ( ExtraStrings ) then
6483: LD_EXP 45
6487: IFFALSE 6509
// AllStrings := AllStrings ^  ^ ExtraStrings ;
6489: LD_ADDR_VAR 0 2
6493: PUSH
6494: LD_VAR 0 2
6498: PUSH
6499: LD_STRING 
6501: ADD
6502: PUSH
6503: LD_EXP 45
6507: ADD
6508: ST_TO_ADDR
// Display_Strings := AllStrings ;
6509: LD_ADDR_OWVAR 47
6513: PUSH
6514: LD_VAR 0 2
6518: ST_TO_ADDR
// end ;
6519: LD_VAR 0 1
6523: RET
// every 0 0$1 do
6524: GO 6526
6526: DISABLE
// begin ShowTimer ;
6527: CALL 6350 0 0
// enable ;
6531: ENABLE
// end ; end_of_file
6532: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
6533: LD_INT 0
6535: PPUSH
6536: PPUSH
6537: PPUSH
// BuildUpTime_Delay = 0 ;
6538: LD_ADDR_EXP 49
6542: PUSH
6543: LD_INT 0
6545: ST_TO_ADDR
// if not def_builduptime then
6546: LD_EXP 14
6550: NOT
6551: IFFALSE 6555
// exit ;
6553: GO 6738
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
6555: LD_ADDR_EXP 49
6559: PUSH
6560: LD_INT 8400
6562: PUSH
6563: LD_INT 2100
6565: PUSH
6566: LD_EXP 14
6570: MUL
6571: PLUS
6572: ST_TO_ADDR
// BuildUpTimeActive := true ;
6573: LD_ADDR_EXP 48
6577: PUSH
6578: LD_INT 1
6580: ST_TO_ADDR
// for i := 1 to 8 do
6581: LD_ADDR_VAR 0 2
6585: PUSH
6586: DOUBLE
6587: LD_INT 1
6589: DEC
6590: ST_TO_ADDR
6591: LD_INT 8
6593: PUSH
6594: FOR_TO
6595: IFFALSE 6736
// if Side_Positions [ i ] then
6597: LD_EXP 32
6601: PUSH
6602: LD_VAR 0 2
6606: ARRAY
6607: IFFALSE 6734
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
6609: LD_EXP 47
6613: PUSH
6614: LD_EXP 32
6618: PUSH
6619: LD_VAR 0 2
6623: ARRAY
6624: ARRAY
6625: PPUSH
6626: LD_INT 5
6628: PPUSH
6629: CALL_OW 424
// for j := 1 to 8 do
6633: LD_ADDR_VAR 0 3
6637: PUSH
6638: DOUBLE
6639: LD_INT 1
6641: DEC
6642: ST_TO_ADDR
6643: LD_INT 8
6645: PUSH
6646: FOR_TO
6647: IFFALSE 6732
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
6649: LD_EXP 32
6653: PUSH
6654: LD_VAR 0 3
6658: ARRAY
6659: PUSH
6660: LD_EXP 30
6664: PUSH
6665: LD_VAR 0 2
6669: ARRAY
6670: PUSH
6671: LD_EXP 30
6675: PUSH
6676: LD_VAR 0 3
6680: ARRAY
6681: NONEQUAL
6682: PUSH
6683: LD_EXP 34
6687: NOT
6688: PUSH
6689: LD_VAR 0 2
6693: PUSH
6694: LD_VAR 0 3
6698: NONEQUAL
6699: AND
6700: OR
6701: AND
6702: IFFALSE 6730
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
6704: LD_VAR 0 3
6708: PPUSH
6709: LD_EXP 47
6713: PUSH
6714: LD_EXP 32
6718: PUSH
6719: LD_VAR 0 2
6723: ARRAY
6724: ARRAY
6725: PPUSH
6726: CALL_OW 333
6730: GO 6646
6732: POP
6733: POP
// end ;
6734: GO 6594
6736: POP
6737: POP
// end ;
6738: LD_VAR 0 1
6742: RET
// export function EndBuildUp ; var i , j ; begin
6743: LD_INT 0
6745: PPUSH
6746: PPUSH
6747: PPUSH
// BuildUpTimeActive := false ;
6748: LD_ADDR_EXP 48
6752: PUSH
6753: LD_INT 0
6755: ST_TO_ADDR
// for i := 1 to 8 do
6756: LD_ADDR_VAR 0 2
6760: PUSH
6761: DOUBLE
6762: LD_INT 1
6764: DEC
6765: ST_TO_ADDR
6766: LD_INT 8
6768: PUSH
6769: FOR_TO
6770: IFFALSE 6911
// if Side_Positions [ i ] then
6772: LD_EXP 32
6776: PUSH
6777: LD_VAR 0 2
6781: ARRAY
6782: IFFALSE 6909
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
6784: LD_EXP 47
6788: PUSH
6789: LD_EXP 32
6793: PUSH
6794: LD_VAR 0 2
6798: ARRAY
6799: ARRAY
6800: PPUSH
6801: LD_INT 0
6803: PPUSH
6804: CALL_OW 424
// for j := 1 to 8 do
6808: LD_ADDR_VAR 0 3
6812: PUSH
6813: DOUBLE
6814: LD_INT 1
6816: DEC
6817: ST_TO_ADDR
6818: LD_INT 8
6820: PUSH
6821: FOR_TO
6822: IFFALSE 6907
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
6824: LD_EXP 32
6828: PUSH
6829: LD_VAR 0 3
6833: ARRAY
6834: PUSH
6835: LD_EXP 30
6839: PUSH
6840: LD_VAR 0 2
6844: ARRAY
6845: PUSH
6846: LD_EXP 30
6850: PUSH
6851: LD_VAR 0 3
6855: ARRAY
6856: NONEQUAL
6857: PUSH
6858: LD_EXP 34
6862: NOT
6863: PUSH
6864: LD_VAR 0 2
6868: PUSH
6869: LD_VAR 0 3
6873: NONEQUAL
6874: AND
6875: OR
6876: AND
6877: IFFALSE 6905
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
6879: LD_VAR 0 3
6883: PPUSH
6884: LD_EXP 47
6888: PUSH
6889: LD_EXP 32
6893: PUSH
6894: LD_VAR 0 2
6898: ARRAY
6899: ARRAY
6900: PPUSH
6901: CALL_OW 334
6905: GO 6821
6907: POP
6908: POP
// end ;
6909: GO 6769
6911: POP
6912: POP
// end ;
6913: LD_VAR 0 1
6917: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
6918: LD_EXP 48
6922: IFFALSE 7097
6924: GO 6926
6926: DISABLE
6927: LD_INT 0
6929: PPUSH
6930: PPUSH
// begin for i := 1 to 8 do
6931: LD_ADDR_VAR 0 1
6935: PUSH
6936: DOUBLE
6937: LD_INT 1
6939: DEC
6940: ST_TO_ADDR
6941: LD_INT 8
6943: PUSH
6944: FOR_TO
6945: IFFALSE 7094
// if Side_Positions [ i ] then
6947: LD_EXP 32
6951: PUSH
6952: LD_VAR 0 1
6956: ARRAY
6957: IFFALSE 7092
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
6959: LD_ADDR_VAR 0 2
6963: PUSH
6964: LD_EXP 47
6968: PUSH
6969: LD_EXP 32
6973: PUSH
6974: LD_VAR 0 1
6978: ARRAY
6979: ARRAY
6980: PPUSH
6981: LD_INT 2
6983: PUSH
6984: LD_INT 21
6986: PUSH
6987: LD_INT 1
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 21
6996: PUSH
6997: LD_INT 2
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: PUSH
7009: LD_INT 22
7011: PUSH
7012: LD_OWVAR 2
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PPUSH
7025: CALL_OW 70
7029: PUSH
7030: FOR_IN
7031: IFFALSE 7090
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
7033: LD_EXP 30
7037: PUSH
7038: LD_VAR 0 1
7042: ARRAY
7043: PUSH
7044: LD_EXP 30
7048: PUSH
7049: LD_OWVAR 2
7053: ARRAY
7054: NONEQUAL
7055: PUSH
7056: LD_EXP 34
7060: NOT
7061: PUSH
7062: LD_VAR 0 1
7066: PUSH
7067: LD_OWVAR 2
7071: NONEQUAL
7072: AND
7073: OR
7074: IFFALSE 7088
// ComMoveToArea ( un , BuildUpEscape ) ;
7076: LD_VAR 0 2
7080: PPUSH
7081: LD_INT 12
7083: PPUSH
7084: CALL_OW 113
7088: GO 7030
7090: POP
7091: POP
7092: GO 6944
7094: POP
7095: POP
// enable ;
7096: ENABLE
// end ;
7097: PPOPN 2
7099: END
// every 0 0$1 trigger def_builduptime do
7100: LD_EXP 14
7104: IFFALSE 7130
7106: GO 7108
7108: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
7109: LD_INT 8400
7111: PUSH
7112: LD_EXP 14
7116: PUSH
7117: LD_INT 2100
7119: MUL
7120: PLUS
7121: PPUSH
7122: CALL_OW 67
// EndBuildUp ;
7126: CALL 6743 0 0
// end ; end_of_file
7130: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7131: LD_INT 0
7133: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7134: LD_VAR 0 1
7138: PPUSH
7139: CALL_OW 255
7143: PUSH
7144: LD_VAR 0 4
7148: EQUAL
7149: IFFALSE 7168
// begin SetAchievement ( ACH_RAD ) ;
7151: LD_STRING ACH_RAD
7153: PPUSH
7154: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7158: LD_STRING ACH_NL
7160: PPUSH
7161: LD_INT 1
7163: PPUSH
7164: CALL_OW 564
// end end ;
7168: LD_VAR 0 5
7172: RET
// export function SA_Win ( side ) ; begin
7173: LD_INT 0
7175: PPUSH
// case side of 1 :
7176: LD_VAR 0 1
7180: PUSH
7181: LD_INT 1
7183: DOUBLE
7184: EQUAL
7185: IFTRUE 7189
7187: GO 7202
7189: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7190: LD_STRING ACH_AH
7192: PPUSH
7193: LD_INT 1
7195: PPUSH
7196: CALL_OW 564
7200: GO 7365
7202: LD_INT 2
7204: DOUBLE
7205: EQUAL
7206: IFTRUE 7210
7208: GO 7223
7210: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7211: LD_STRING ACH_E
7213: PPUSH
7214: LD_INT 1
7216: PPUSH
7217: CALL_OW 564
7221: GO 7365
7223: LD_INT 3
7225: DOUBLE
7226: EQUAL
7227: IFTRUE 7231
7229: GO 7244
7231: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7232: LD_STRING ACH_OOL
7234: PPUSH
7235: LD_INT 1
7237: PPUSH
7238: CALL_OW 564
7242: GO 7365
7244: LD_INT 1
7246: PUSH
7247: LD_INT 2
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: DOUBLE
7254: EQUAL
7255: IFTRUE 7259
7257: GO 7284
7259: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7260: LD_STRING ACH_AH
7262: PPUSH
7263: LD_REAL  5.00000000000000E-0001
7266: PPUSH
7267: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7271: LD_STRING ACH_E
7273: PPUSH
7274: LD_REAL  5.00000000000000E-0001
7277: PPUSH
7278: CALL_OW 564
// end ; [ 2 , 3 ] :
7282: GO 7365
7284: LD_INT 2
7286: PUSH
7287: LD_INT 3
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: DOUBLE
7294: EQUAL
7295: IFTRUE 7299
7297: GO 7324
7299: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7300: LD_STRING ACH_OOL
7302: PPUSH
7303: LD_REAL  5.00000000000000E-0001
7306: PPUSH
7307: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7311: LD_STRING ACH_E
7313: PPUSH
7314: LD_REAL  5.00000000000000E-0001
7317: PPUSH
7318: CALL_OW 564
// end ; [ 3 , 1 ] :
7322: GO 7365
7324: LD_INT 3
7326: PUSH
7327: LD_INT 1
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: DOUBLE
7334: EQUAL
7335: IFTRUE 7339
7337: GO 7364
7339: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7340: LD_STRING ACH_AH
7342: PPUSH
7343: LD_REAL  5.00000000000000E-0001
7346: PPUSH
7347: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7351: LD_STRING ACH_OOL
7353: PPUSH
7354: LD_REAL  5.00000000000000E-0001
7357: PPUSH
7358: CALL_OW 564
// end ; end ;
7362: GO 7365
7364: POP
// end ; end_of_file
7365: LD_VAR 0 2
7369: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7370: LD_INT 0
7372: PPUSH
7373: PPUSH
// enable ( 98 ) ;
7374: LD_INT 98
7376: ENABLE_MARKED
// GameEnded = false ;
7377: LD_ADDR_LOC 24
7381: PUSH
7382: LD_INT 0
7384: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7385: LD_ADDR_LOC 23
7389: PUSH
7390: LD_INT 0
7392: PUSH
7393: LD_INT 0
7395: PUSH
7396: LD_INT 0
7398: PUSH
7399: LD_INT 0
7401: PUSH
7402: LD_INT 0
7404: PUSH
7405: LD_INT 0
7407: PUSH
7408: LD_INT 0
7410: PUSH
7411: LD_INT 0
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: ST_TO_ADDR
// unfoged = false ;
7424: LD_ADDR_LOC 25
7428: PUSH
7429: LD_INT 0
7431: ST_TO_ADDR
// defeated_specs := [ ] ;
7432: LD_ADDR_LOC 26
7436: PUSH
7437: EMPTY
7438: ST_TO_ADDR
// for i = 1 to side_positions do
7439: LD_ADDR_VAR 0 2
7443: PUSH
7444: DOUBLE
7445: LD_INT 1
7447: DEC
7448: ST_TO_ADDR
7449: LD_EXP 32
7453: PUSH
7454: FOR_TO
7455: IFFALSE 7495
// if not side_positions [ i ] then
7457: LD_EXP 32
7461: PUSH
7462: LD_VAR 0 2
7466: ARRAY
7467: NOT
7468: IFFALSE 7493
// defeated = replace ( defeated , i , true ) ;
7470: LD_ADDR_LOC 23
7474: PUSH
7475: LD_LOC 23
7479: PPUSH
7480: LD_VAR 0 2
7484: PPUSH
7485: LD_INT 1
7487: PPUSH
7488: CALL_OW 1
7492: ST_TO_ADDR
7493: GO 7454
7495: POP
7496: POP
// end ;
7497: LD_VAR 0 1
7501: RET
// function CanWinLoose ; begin
7502: LD_INT 0
7504: PPUSH
// Result := true ;
7505: LD_ADDR_VAR 0 1
7509: PUSH
7510: LD_INT 1
7512: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7513: CALL_OW 518
7517: PUSH
7518: CALL_OW 519
7522: PUSH
7523: LD_INT 0
7525: GREATER
7526: AND
7527: IFFALSE 7537
// Result := false ;
7529: LD_ADDR_VAR 0 1
7533: PUSH
7534: LD_INT 0
7536: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7537: CALL_OW 531
7541: PUSH
7542: CALL_OW 519
7546: PUSH
7547: LD_INT 1
7549: GREATER
7550: AND
7551: IFFALSE 7561
// Result := false ;
7553: LD_ADDR_VAR 0 1
7557: PUSH
7558: LD_INT 0
7560: ST_TO_ADDR
// end ;
7561: LD_VAR 0 1
7565: RET
// export function HasPower ( i ) ; var k , h ; begin
7566: LD_INT 0
7568: PPUSH
7569: PPUSH
7570: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7571: LD_VAR 0 1
7575: PPUSH
7576: CALL_OW 108
7580: NOT
7581: PUSH
7582: LD_EXP 43
7586: PUSH
7587: LD_VAR 0 1
7591: ARRAY
7592: NOT
7593: AND
7594: PUSH
7595: LD_OWVAR 4
7599: AND
7600: IFFALSE 7612
// begin result = false ;
7602: LD_ADDR_VAR 0 2
7606: PUSH
7607: LD_INT 0
7609: ST_TO_ADDR
// end else
7610: GO 7907
// case def_win_rules of 0 :
7612: LD_EXP 29
7616: PUSH
7617: LD_INT 0
7619: DOUBLE
7620: EQUAL
7621: IFTRUE 7625
7623: GO 7788
7625: POP
// if def_people_respawning then
7626: LD_EXP 12
7630: IFFALSE 7721
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7632: LD_ADDR_VAR 0 2
7636: PUSH
7637: LD_INT 22
7639: PUSH
7640: LD_VAR 0 1
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PUSH
7649: LD_INT 2
7651: PUSH
7652: LD_INT 21
7654: PUSH
7655: LD_INT 1
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 33
7664: PUSH
7665: LD_INT 3
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: LD_INT 33
7674: PUSH
7675: LD_INT 5
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: LD_INT 30
7684: PUSH
7685: LD_INT 0
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_INT 30
7694: PUSH
7695: LD_INT 1
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PPUSH
7714: CALL_OW 69
7718: ST_TO_ADDR
7719: GO 7786
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
7721: LD_ADDR_VAR 0 2
7725: PUSH
7726: LD_INT 22
7728: PUSH
7729: LD_VAR 0 1
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PUSH
7738: LD_INT 2
7740: PUSH
7741: LD_INT 21
7743: PUSH
7744: LD_INT 1
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 33
7753: PUSH
7754: LD_INT 3
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 33
7763: PUSH
7764: LD_INT 5
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PPUSH
7781: CALL_OW 69
7785: ST_TO_ADDR
7786: GO 7907
7788: LD_INT 1
7790: DOUBLE
7791: EQUAL
7792: IFTRUE 7796
7794: GO 7835
7796: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
7797: LD_ADDR_VAR 0 2
7801: PUSH
7802: LD_INT 22
7804: PUSH
7805: LD_VAR 0 1
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: LD_INT 21
7816: PUSH
7817: LD_INT 1
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PPUSH
7828: CALL_OW 69
7832: ST_TO_ADDR
7833: GO 7907
7835: LD_INT 2
7837: DOUBLE
7838: EQUAL
7839: IFTRUE 7843
7841: GO 7906
7843: POP
// begin h = false ;
7844: LD_ADDR_VAR 0 4
7848: PUSH
7849: LD_INT 0
7851: ST_TO_ADDR
// for k in heroes [ i ] do
7852: LD_ADDR_VAR 0 3
7856: PUSH
7857: LD_EXP 44
7861: PUSH
7862: LD_VAR 0 1
7866: ARRAY
7867: PUSH
7868: FOR_IN
7869: IFFALSE 7892
// if IsLive ( k ) then
7871: LD_VAR 0 3
7875: PPUSH
7876: CALL_OW 300
7880: IFFALSE 7890
// h = true ;
7882: LD_ADDR_VAR 0 4
7886: PUSH
7887: LD_INT 1
7889: ST_TO_ADDR
7890: GO 7868
7892: POP
7893: POP
// Result := h ;
7894: LD_ADDR_VAR 0 2
7898: PUSH
7899: LD_VAR 0 4
7903: ST_TO_ADDR
// end ; end ;
7904: GO 7907
7906: POP
// end ;
7907: LD_VAR 0 2
7911: RET
// function AlliedSides ( i , j ) ; begin
7912: LD_INT 0
7914: PPUSH
// Result := false ;
7915: LD_ADDR_VAR 0 3
7919: PUSH
7920: LD_INT 0
7922: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7923: LD_VAR 0 1
7927: PPUSH
7928: LD_VAR 0 2
7932: PPUSH
7933: CALL_OW 81
7937: PUSH
7938: LD_INT 1
7940: EQUAL
7941: PUSH
7942: LD_VAR 0 2
7946: PPUSH
7947: LD_VAR 0 1
7951: PPUSH
7952: CALL_OW 81
7956: PUSH
7957: LD_INT 1
7959: EQUAL
7960: AND
7961: PUSH
7962: LD_VAR 0 1
7966: PPUSH
7967: CALL_OW 83
7971: AND
7972: PUSH
7973: LD_VAR 0 2
7977: PPUSH
7978: CALL_OW 83
7982: AND
7983: IFFALSE 7993
// Result := true ;
7985: LD_ADDR_VAR 0 3
7989: PUSH
7990: LD_INT 1
7992: ST_TO_ADDR
// end ;
7993: LD_VAR 0 3
7997: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
7998: CALL 7502 0 0
8002: PUSH
8003: LD_LOC 24
8007: NOT
8008: AND
8009: IFFALSE 8025
8011: GO 8013
8013: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8014: LD_ADDR_EXP 46
8018: PUSH
8019: LD_STRING #Player-Ended
8021: PUSH
8022: EMPTY
8023: LIST
8024: ST_TO_ADDR
8025: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8026: CALL 7502 0 0
8030: PUSH
8031: LD_LOC 24
8035: AND
8036: IFFALSE 8045
8038: GO 8040
8040: DISABLE
// YouLostInMultiplayer ;
8041: CALL_OW 107
8045: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8046: CALL 7502 0 0
8050: NOT
8051: PUSH
8052: CALL_OW 531
8056: NOT
8057: AND
8058: IFFALSE 8074
8060: GO 8062
8062: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8063: LD_ADDR_EXP 46
8067: PUSH
8068: LD_STRING #server-wait
8070: PUSH
8071: EMPTY
8072: LIST
8073: ST_TO_ADDR
8074: END
// every 100 trigger IAmSpec do
8075: CALL_OW 531
8079: IFFALSE 8095
8081: GO 8083
8083: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8084: LD_ADDR_EXP 46
8088: PUSH
8089: LD_STRING #Player-IAmSpec
8091: PUSH
8092: EMPTY
8093: LIST
8094: ST_TO_ADDR
8095: END
// every 100 trigger GameEnded and IAmSpec do
8096: LD_LOC 24
8100: PUSH
8101: CALL_OW 531
8105: AND
8106: IFFALSE 8115
8108: GO 8110
8110: DISABLE
// YouLostInMultiplayer ;
8111: CALL_OW 107
8115: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8116: CALL 7502 0 0
8120: PUSH
8121: LD_LOC 24
8125: NOT
8126: AND
8127: IFFALSE 8143
8129: GO 8131
8131: DISABLE
// WaitServerStrings = [ $player-win ] ;
8132: LD_ADDR_EXP 46
8136: PUSH
8137: LD_STRING $player-win
8139: PUSH
8140: EMPTY
8141: LIST
8142: ST_TO_ADDR
8143: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8144: CALL 7502 0 0
8148: PUSH
8149: LD_LOC 24
8153: AND
8154: IFFALSE 8178
8156: GO 8158
8158: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8159: LD_EXP 33
8163: PUSH
8164: LD_OWVAR 7
8168: ARRAY
8169: PPUSH
8170: CALL 7173 0 1
// YouWinInMultiplayer ;
8174: CALL_OW 106
// end ;
8178: END
// every 100 trigger isEditor marked 401 do
8179: LD_OWVAR 84
8183: IFFALSE 8199
8185: GO 8187
8187: DISABLE
// Debug_Strings = [ You won ] ;
8188: LD_ADDR_OWVAR 48
8192: PUSH
8193: LD_STRING You won
8195: PUSH
8196: EMPTY
8197: LIST
8198: ST_TO_ADDR
8199: END
// every 100 trigger isEditor marked 400 do
8200: LD_OWVAR 84
8204: IFFALSE 8220
8206: GO 8208
8208: DISABLE
// Debug_Strings = [ You loss ] ;
8209: LD_ADDR_OWVAR 48
8213: PUSH
8214: LD_STRING You loss
8216: PUSH
8217: EMPTY
8218: LIST
8219: ST_TO_ADDR
8220: END
// every 100 marked 98 do var i , un ;
8221: GO 8223
8223: DISABLE
8224: LD_INT 0
8226: PPUSH
8227: PPUSH
// begin for i = 1 to side_positions do
8228: LD_ADDR_VAR 0 1
8232: PUSH
8233: DOUBLE
8234: LD_INT 1
8236: DEC
8237: ST_TO_ADDR
8238: LD_EXP 32
8242: PUSH
8243: FOR_TO
8244: IFFALSE 8331
// begin if side_positions [ i ] then
8246: LD_EXP 32
8250: PUSH
8251: LD_VAR 0 1
8255: ARRAY
8256: IFFALSE 8329
// if not HasPower ( i ) and not defeated [ i ] then
8258: LD_VAR 0 1
8262: PPUSH
8263: CALL 7566 0 1
8267: NOT
8268: PUSH
8269: LD_LOC 23
8273: PUSH
8274: LD_VAR 0 1
8278: ARRAY
8279: NOT
8280: AND
8281: IFFALSE 8329
// begin defeated = replace ( defeated , i , true ) ;
8283: LD_ADDR_LOC 23
8287: PUSH
8288: LD_LOC 23
8292: PPUSH
8293: LD_VAR 0 1
8297: PPUSH
8298: LD_INT 1
8300: PPUSH
8301: CALL_OW 1
8305: ST_TO_ADDR
// if i = mp_player_side then
8306: LD_VAR 0 1
8310: PUSH
8311: LD_OWVAR 7
8315: EQUAL
8316: IFFALSE 8329
// begin Multiplayer_Loose_Message ;
8318: CALL_OW 521
// SetPlayerSpectator ( ) ;
8322: CALL_OW 572
// enable ( 400 ) ;
8326: LD_INT 400
8328: ENABLE_MARKED
// end ; end ; end ;
8329: GO 8243
8331: POP
8332: POP
// DidGameEnd ;
8333: CALL 8348 0 0
// if not GameEnded then
8337: LD_LOC 24
8341: NOT
8342: IFFALSE 8345
// enable ;
8344: ENABLE
// end ;
8345: PPOPN 2
8347: END
// function DidGameEnd ; var i , k , enemy ; begin
8348: LD_INT 0
8350: PPUSH
8351: PPUSH
8352: PPUSH
8353: PPUSH
// enemy = [ ] ;
8354: LD_ADDR_VAR 0 4
8358: PUSH
8359: EMPTY
8360: ST_TO_ADDR
// for i = 1 to side_positions do
8361: LD_ADDR_VAR 0 2
8365: PUSH
8366: DOUBLE
8367: LD_INT 1
8369: DEC
8370: ST_TO_ADDR
8371: LD_EXP 32
8375: PUSH
8376: FOR_TO
8377: IFFALSE 8471
// if not defeated [ i ] then
8379: LD_LOC 23
8383: PUSH
8384: LD_VAR 0 2
8388: ARRAY
8389: NOT
8390: IFFALSE 8469
// for k = 1 to side_positions do
8392: LD_ADDR_VAR 0 3
8396: PUSH
8397: DOUBLE
8398: LD_INT 1
8400: DEC
8401: ST_TO_ADDR
8402: LD_EXP 32
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8467
// if not defeated [ k ] then
8410: LD_LOC 23
8414: PUSH
8415: LD_VAR 0 3
8419: ARRAY
8420: NOT
8421: IFFALSE 8465
// if not AlliedSides ( i , k ) then
8423: LD_VAR 0 2
8427: PPUSH
8428: LD_VAR 0 3
8432: PPUSH
8433: CALL 7912 0 2
8437: NOT
8438: IFFALSE 8465
// enemy = enemy ^ [ i , k ] ;
8440: LD_ADDR_VAR 0 4
8444: PUSH
8445: LD_VAR 0 4
8449: PUSH
8450: LD_VAR 0 2
8454: PUSH
8455: LD_VAR 0 3
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: ADD
8464: ST_TO_ADDR
8465: GO 8407
8467: POP
8468: POP
8469: GO 8376
8471: POP
8472: POP
// if not enemy then
8473: LD_VAR 0 4
8477: NOT
8478: IFFALSE 8504
// begin GameEnded = true ;
8480: LD_ADDR_LOC 24
8484: PUSH
8485: LD_INT 1
8487: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
8488: LD_LOC 23
8492: PUSH
8493: LD_OWVAR 7
8497: ARRAY
8498: NOT
8499: IFFALSE 8504
// enable ( 401 ) ;
8501: LD_INT 401
8503: ENABLE_MARKED
// end ; end ;
8504: LD_VAR 0 1
8508: RET
// function unfog ; var k , friends ; begin
8509: LD_INT 0
8511: PPUSH
8512: PPUSH
8513: PPUSH
// for k = 1 to side_positions do
8514: LD_ADDR_VAR 0 2
8518: PUSH
8519: DOUBLE
8520: LD_INT 1
8522: DEC
8523: ST_TO_ADDR
8524: LD_EXP 32
8528: PUSH
8529: FOR_TO
8530: IFFALSE 8586
// if not defeated [ k ] then
8532: LD_LOC 23
8536: PUSH
8537: LD_VAR 0 2
8541: ARRAY
8542: NOT
8543: IFFALSE 8584
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
8545: LD_OWVAR 7
8549: PPUSH
8550: LD_VAR 0 2
8554: PPUSH
8555: CALL_OW 81
8559: PUSH
8560: LD_INT 1
8562: PUSH
8563: EMPTY
8564: LIST
8565: IN
8566: IFFALSE 8584
// friends = friends ^ k ;
8568: LD_ADDR_VAR 0 3
8572: PUSH
8573: LD_VAR 0 3
8577: PUSH
8578: LD_VAR 0 2
8582: ADD
8583: ST_TO_ADDR
8584: GO 8529
8586: POP
8587: POP
// if not friends then
8588: LD_VAR 0 3
8592: NOT
8593: IFFALSE 8607
// begin SetPlayerSpectator ( ) ;
8595: CALL_OW 572
// unfoged = true ;
8599: LD_ADDR_LOC 25
8603: PUSH
8604: LD_INT 1
8606: ST_TO_ADDR
// end ; end ;
8607: LD_VAR 0 1
8611: RET
// export function MakeGameEnd ; begin
8612: LD_INT 0
8614: PPUSH
// SetPlayerSpectator ( ) ;
8615: CALL_OW 572
// unfoged = true ;
8619: LD_ADDR_LOC 25
8623: PUSH
8624: LD_INT 1
8626: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8627: LD_INT 175
8629: PPUSH
8630: CALL_OW 67
// GameEnded = true ;
8634: LD_ADDR_LOC 24
8638: PUSH
8639: LD_INT 1
8641: ST_TO_ADDR
// end ;
8642: LD_VAR 0 1
8646: RET
// export function GetGameEnded ; begin
8647: LD_INT 0
8649: PPUSH
// result = GameEnded ;
8650: LD_ADDR_VAR 0 1
8654: PUSH
8655: LD_LOC 24
8659: ST_TO_ADDR
// end ; end_of_file
8660: LD_VAR 0 1
8664: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8665: LD_INT 0
8667: PPUSH
8668: PPUSH
8669: PPUSH
// for side = 1 to 8 do
8670: LD_ADDR_VAR 0 2
8674: PUSH
8675: DOUBLE
8676: LD_INT 1
8678: DEC
8679: ST_TO_ADDR
8680: LD_INT 8
8682: PUSH
8683: FOR_TO
8684: IFFALSE 8805
// begin for i = 1 to 72 do
8686: LD_ADDR_VAR 0 3
8690: PUSH
8691: DOUBLE
8692: LD_INT 1
8694: DEC
8695: ST_TO_ADDR
8696: LD_INT 72
8698: PUSH
8699: FOR_TO
8700: IFFALSE 8731
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
8702: LD_VAR 0 3
8706: PPUSH
8707: LD_VAR 0 2
8711: PPUSH
8712: LD_INT 0
8714: PPUSH
8715: LD_VAR 0 3
8719: PPUSH
8720: CALL_OW 565
8724: PPUSH
8725: CALL_OW 322
8729: GO 8699
8731: POP
8732: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
8733: LD_INT 73
8735: PPUSH
8736: LD_VAR 0 2
8740: PPUSH
8741: LD_INT 0
8743: PPUSH
8744: LD_INT 25
8746: PPUSH
8747: CALL_OW 565
8751: PPUSH
8752: CALL_OW 322
// for i = 0 to 40 do
8756: LD_ADDR_VAR 0 3
8760: PUSH
8761: DOUBLE
8762: LD_INT 0
8764: DEC
8765: ST_TO_ADDR
8766: LD_INT 40
8768: PUSH
8769: FOR_TO
8770: IFFALSE 8801
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
8772: LD_VAR 0 3
8776: PPUSH
8777: LD_VAR 0 2
8781: PPUSH
8782: LD_INT 1
8784: PPUSH
8785: LD_VAR 0 3
8789: PPUSH
8790: CALL_OW 565
8794: PPUSH
8795: CALL_OW 324
8799: GO 8769
8801: POP
8802: POP
// end ;
8803: GO 8683
8805: POP
8806: POP
// end ;
8807: LD_VAR 0 1
8811: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
8812: LD_INT 0
8814: PPUSH
8815: PPUSH
8816: PPUSH
// for side = 1 to 8 do
8817: LD_ADDR_VAR 0 3
8821: PUSH
8822: DOUBLE
8823: LD_INT 1
8825: DEC
8826: ST_TO_ADDR
8827: LD_INT 8
8829: PUSH
8830: FOR_TO
8831: IFFALSE 12827
// begin for i = 1 to 73 do
8833: LD_ADDR_VAR 0 4
8837: PUSH
8838: DOUBLE
8839: LD_INT 1
8841: DEC
8842: ST_TO_ADDR
8843: LD_INT 73
8845: PUSH
8846: FOR_TO
8847: IFFALSE 8868
// SetTech ( i , side , state_disabled ) ;
8849: LD_VAR 0 4
8853: PPUSH
8854: LD_VAR 0 3
8858: PPUSH
8859: LD_INT 0
8861: PPUSH
8862: CALL_OW 322
8866: GO 8846
8868: POP
8869: POP
// for i = 0 to 40 do
8870: LD_ADDR_VAR 0 4
8874: PUSH
8875: DOUBLE
8876: LD_INT 0
8878: DEC
8879: ST_TO_ADDR
8880: LD_INT 40
8882: PUSH
8883: FOR_TO
8884: IFFALSE 8905
// SetRestrict ( i , side , false ) ;
8886: LD_VAR 0 4
8890: PPUSH
8891: LD_VAR 0 3
8895: PPUSH
8896: LD_INT 0
8898: PPUSH
8899: CALL_OW 324
8903: GO 8883
8905: POP
8906: POP
// case level of 1 :
8907: LD_VAR 0 1
8911: PUSH
8912: LD_INT 1
8914: DOUBLE
8915: EQUAL
8916: IFTRUE 8920
8918: GO 9073
8920: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8921: LD_INT 35
8923: PPUSH
8924: LD_VAR 0 3
8928: PPUSH
8929: LD_INT 1
8931: PPUSH
8932: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8936: LD_INT 45
8938: PPUSH
8939: LD_VAR 0 3
8943: PPUSH
8944: LD_INT 1
8946: PPUSH
8947: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8951: LD_INT 46
8953: PPUSH
8954: LD_VAR 0 3
8958: PPUSH
8959: LD_INT 1
8961: PPUSH
8962: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8966: LD_INT 47
8968: PPUSH
8969: LD_VAR 0 3
8973: PPUSH
8974: LD_INT 1
8976: PPUSH
8977: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8981: LD_INT 0
8983: PPUSH
8984: LD_VAR 0 3
8988: PPUSH
8989: LD_INT 1
8991: PPUSH
8992: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8996: LD_INT 2
8998: PPUSH
8999: LD_VAR 0 3
9003: PPUSH
9004: LD_INT 1
9006: PPUSH
9007: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9011: LD_INT 4
9013: PPUSH
9014: LD_VAR 0 3
9018: PPUSH
9019: LD_INT 1
9021: PPUSH
9022: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9026: LD_INT 6
9028: PPUSH
9029: LD_VAR 0 3
9033: PPUSH
9034: LD_INT 1
9036: PPUSH
9037: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9041: LD_INT 29
9043: PPUSH
9044: LD_VAR 0 3
9048: PPUSH
9049: LD_INT 1
9051: PPUSH
9052: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9056: LD_INT 31
9058: PPUSH
9059: LD_VAR 0 3
9063: PPUSH
9064: LD_INT 1
9066: PPUSH
9067: CALL_OW 324
// end ; 2 :
9071: GO 12825
9073: LD_INT 2
9075: DOUBLE
9076: EQUAL
9077: IFTRUE 9081
9079: GO 9279
9081: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9082: LD_INT 35
9084: PPUSH
9085: LD_VAR 0 3
9089: PPUSH
9090: LD_INT 1
9092: PPUSH
9093: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9097: LD_INT 45
9099: PPUSH
9100: LD_VAR 0 3
9104: PPUSH
9105: LD_INT 1
9107: PPUSH
9108: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9112: LD_INT 46
9114: PPUSH
9115: LD_VAR 0 3
9119: PPUSH
9120: LD_INT 1
9122: PPUSH
9123: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9127: LD_INT 47
9129: PPUSH
9130: LD_VAR 0 3
9134: PPUSH
9135: LD_INT 1
9137: PPUSH
9138: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9142: LD_INT 1
9144: PPUSH
9145: LD_VAR 0 3
9149: PPUSH
9150: LD_INT 1
9152: PPUSH
9153: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9157: LD_INT 2
9159: PPUSH
9160: LD_VAR 0 3
9164: PPUSH
9165: LD_INT 1
9167: PPUSH
9168: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9172: LD_INT 11
9174: PPUSH
9175: LD_VAR 0 3
9179: PPUSH
9180: LD_INT 1
9182: PPUSH
9183: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9187: LD_INT 0
9189: PPUSH
9190: LD_VAR 0 3
9194: PPUSH
9195: LD_INT 1
9197: PPUSH
9198: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9202: LD_INT 2
9204: PPUSH
9205: LD_VAR 0 3
9209: PPUSH
9210: LD_INT 1
9212: PPUSH
9213: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9217: LD_INT 4
9219: PPUSH
9220: LD_VAR 0 3
9224: PPUSH
9225: LD_INT 1
9227: PPUSH
9228: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9232: LD_INT 6
9234: PPUSH
9235: LD_VAR 0 3
9239: PPUSH
9240: LD_INT 1
9242: PPUSH
9243: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9247: LD_INT 29
9249: PPUSH
9250: LD_VAR 0 3
9254: PPUSH
9255: LD_INT 1
9257: PPUSH
9258: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9262: LD_INT 31
9264: PPUSH
9265: LD_VAR 0 3
9269: PPUSH
9270: LD_INT 1
9272: PPUSH
9273: CALL_OW 324
// end ; 3 :
9277: GO 12825
9279: LD_INT 3
9281: DOUBLE
9282: EQUAL
9283: IFTRUE 9287
9285: GO 9740
9287: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9288: LD_INT 35
9290: PPUSH
9291: LD_VAR 0 3
9295: PPUSH
9296: LD_INT 1
9298: PPUSH
9299: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9303: LD_INT 45
9305: PPUSH
9306: LD_VAR 0 3
9310: PPUSH
9311: LD_INT 1
9313: PPUSH
9314: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9318: LD_INT 46
9320: PPUSH
9321: LD_VAR 0 3
9325: PPUSH
9326: LD_INT 1
9328: PPUSH
9329: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9333: LD_INT 47
9335: PPUSH
9336: LD_VAR 0 3
9340: PPUSH
9341: LD_INT 1
9343: PPUSH
9344: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9348: LD_INT 1
9350: PPUSH
9351: LD_VAR 0 3
9355: PPUSH
9356: LD_INT 1
9358: PPUSH
9359: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9363: LD_INT 2
9365: PPUSH
9366: LD_VAR 0 3
9370: PPUSH
9371: LD_INT 1
9373: PPUSH
9374: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9378: LD_INT 11
9380: PPUSH
9381: LD_VAR 0 3
9385: PPUSH
9386: LD_INT 1
9388: PPUSH
9389: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9393: LD_INT 48
9395: PPUSH
9396: LD_VAR 0 3
9400: PPUSH
9401: LD_INT 1
9403: PPUSH
9404: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9408: LD_INT 69
9410: PPUSH
9411: LD_VAR 0 3
9415: PPUSH
9416: LD_INT 1
9418: PPUSH
9419: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9423: LD_INT 39
9425: PPUSH
9426: LD_VAR 0 3
9430: PPUSH
9431: LD_INT 1
9433: PPUSH
9434: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9438: LD_INT 43
9440: PPUSH
9441: LD_VAR 0 3
9445: PPUSH
9446: LD_INT 1
9448: PPUSH
9449: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9453: LD_INT 51
9455: PPUSH
9456: LD_VAR 0 3
9460: PPUSH
9461: LD_INT 1
9463: PPUSH
9464: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9468: LD_INT 6
9470: PPUSH
9471: LD_VAR 0 3
9475: PPUSH
9476: LD_INT 1
9478: PPUSH
9479: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9483: LD_INT 0
9485: PPUSH
9486: LD_VAR 0 3
9490: PPUSH
9491: LD_INT 1
9493: PPUSH
9494: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9498: LD_INT 2
9500: PPUSH
9501: LD_VAR 0 3
9505: PPUSH
9506: LD_INT 1
9508: PPUSH
9509: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9513: LD_INT 3
9515: PPUSH
9516: LD_VAR 0 3
9520: PPUSH
9521: LD_INT 1
9523: PPUSH
9524: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9528: LD_INT 4
9530: PPUSH
9531: LD_VAR 0 3
9535: PPUSH
9536: LD_INT 1
9538: PPUSH
9539: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9543: LD_INT 6
9545: PPUSH
9546: LD_VAR 0 3
9550: PPUSH
9551: LD_INT 1
9553: PPUSH
9554: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9558: LD_INT 7
9560: PPUSH
9561: LD_VAR 0 3
9565: PPUSH
9566: LD_INT 1
9568: PPUSH
9569: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9573: LD_INT 8
9575: PPUSH
9576: LD_VAR 0 3
9580: PPUSH
9581: LD_INT 1
9583: PPUSH
9584: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9588: LD_INT 10
9590: PPUSH
9591: LD_VAR 0 3
9595: PPUSH
9596: LD_INT 1
9598: PPUSH
9599: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9603: LD_INT 15
9605: PPUSH
9606: LD_VAR 0 3
9610: PPUSH
9611: LD_INT 1
9613: PPUSH
9614: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9618: LD_INT 16
9620: PPUSH
9621: LD_VAR 0 3
9625: PPUSH
9626: LD_INT 1
9628: PPUSH
9629: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9633: LD_INT 17
9635: PPUSH
9636: LD_VAR 0 3
9640: PPUSH
9641: LD_INT 1
9643: PPUSH
9644: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9648: LD_INT 20
9650: PPUSH
9651: LD_VAR 0 3
9655: PPUSH
9656: LD_INT 1
9658: PPUSH
9659: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9663: LD_INT 26
9665: PPUSH
9666: LD_VAR 0 3
9670: PPUSH
9671: LD_INT 1
9673: PPUSH
9674: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9678: LD_INT 27
9680: PPUSH
9681: LD_VAR 0 3
9685: PPUSH
9686: LD_INT 1
9688: PPUSH
9689: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9693: LD_INT 29
9695: PPUSH
9696: LD_VAR 0 3
9700: PPUSH
9701: LD_INT 1
9703: PPUSH
9704: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9708: LD_INT 31
9710: PPUSH
9711: LD_VAR 0 3
9715: PPUSH
9716: LD_INT 1
9718: PPUSH
9719: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9723: LD_INT 32
9725: PPUSH
9726: LD_VAR 0 3
9730: PPUSH
9731: LD_INT 1
9733: PPUSH
9734: CALL_OW 324
// end ; 4 :
9738: GO 12825
9740: LD_INT 4
9742: DOUBLE
9743: EQUAL
9744: IFTRUE 9748
9746: GO 10696
9748: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9749: LD_INT 35
9751: PPUSH
9752: LD_VAR 0 3
9756: PPUSH
9757: LD_INT 1
9759: PPUSH
9760: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9764: LD_INT 45
9766: PPUSH
9767: LD_VAR 0 3
9771: PPUSH
9772: LD_INT 1
9774: PPUSH
9775: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9779: LD_INT 46
9781: PPUSH
9782: LD_VAR 0 3
9786: PPUSH
9787: LD_INT 1
9789: PPUSH
9790: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9794: LD_INT 47
9796: PPUSH
9797: LD_VAR 0 3
9801: PPUSH
9802: LD_INT 1
9804: PPUSH
9805: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9809: LD_INT 1
9811: PPUSH
9812: LD_VAR 0 3
9816: PPUSH
9817: LD_INT 1
9819: PPUSH
9820: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9824: LD_INT 2
9826: PPUSH
9827: LD_VAR 0 3
9831: PPUSH
9832: LD_INT 1
9834: PPUSH
9835: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9839: LD_INT 11
9841: PPUSH
9842: LD_VAR 0 3
9846: PPUSH
9847: LD_INT 1
9849: PPUSH
9850: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9854: LD_INT 20
9856: PPUSH
9857: LD_VAR 0 3
9861: PPUSH
9862: LD_INT 1
9864: PPUSH
9865: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9869: LD_INT 48
9871: PPUSH
9872: LD_VAR 0 3
9876: PPUSH
9877: LD_INT 1
9879: PPUSH
9880: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9884: LD_INT 49
9886: PPUSH
9887: LD_VAR 0 3
9891: PPUSH
9892: LD_INT 1
9894: PPUSH
9895: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9899: LD_INT 69
9901: PPUSH
9902: LD_VAR 0 3
9906: PPUSH
9907: LD_INT 1
9909: PPUSH
9910: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9914: LD_INT 39
9916: PPUSH
9917: LD_VAR 0 3
9921: PPUSH
9922: LD_INT 1
9924: PPUSH
9925: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9929: LD_INT 34
9931: PPUSH
9932: LD_VAR 0 3
9936: PPUSH
9937: LD_INT 1
9939: PPUSH
9940: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
9944: LD_INT 42
9946: PPUSH
9947: LD_VAR 0 3
9951: PPUSH
9952: LD_INT 1
9954: PPUSH
9955: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
9959: LD_INT 44
9961: PPUSH
9962: LD_VAR 0 3
9966: PPUSH
9967: LD_INT 1
9969: PPUSH
9970: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
9974: LD_INT 41
9976: PPUSH
9977: LD_VAR 0 3
9981: PPUSH
9982: LD_INT 1
9984: PPUSH
9985: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9989: LD_INT 43
9991: PPUSH
9992: LD_VAR 0 3
9996: PPUSH
9997: LD_INT 1
9999: PPUSH
10000: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10004: LD_INT 70
10006: PPUSH
10007: LD_VAR 0 3
10011: PPUSH
10012: LD_INT 1
10014: PPUSH
10015: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10019: LD_INT 51
10021: PPUSH
10022: LD_VAR 0 3
10026: PPUSH
10027: LD_INT 1
10029: PPUSH
10030: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10034: LD_INT 52
10036: PPUSH
10037: LD_VAR 0 3
10041: PPUSH
10042: LD_INT 1
10044: PPUSH
10045: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10049: LD_INT 6
10051: PPUSH
10052: LD_VAR 0 3
10056: PPUSH
10057: LD_INT 1
10059: PPUSH
10060: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10064: LD_INT 15
10066: PPUSH
10067: LD_VAR 0 3
10071: PPUSH
10072: LD_INT 1
10074: PPUSH
10075: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10079: LD_INT 7
10081: PPUSH
10082: LD_VAR 0 3
10086: PPUSH
10087: LD_INT 1
10089: PPUSH
10090: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10094: LD_INT 12
10096: PPUSH
10097: LD_VAR 0 3
10101: PPUSH
10102: LD_INT 1
10104: PPUSH
10105: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10109: LD_INT 18
10111: PPUSH
10112: LD_VAR 0 3
10116: PPUSH
10117: LD_INT 1
10119: PPUSH
10120: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10124: LD_INT 60
10126: PPUSH
10127: LD_VAR 0 3
10131: PPUSH
10132: LD_INT 1
10134: PPUSH
10135: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10139: LD_INT 9
10141: PPUSH
10142: LD_VAR 0 3
10146: PPUSH
10147: LD_INT 1
10149: PPUSH
10150: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10154: LD_INT 30
10156: PPUSH
10157: LD_VAR 0 3
10161: PPUSH
10162: LD_INT 1
10164: PPUSH
10165: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10169: LD_INT 37
10171: PPUSH
10172: LD_VAR 0 3
10176: PPUSH
10177: LD_INT 1
10179: PPUSH
10180: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10184: LD_INT 5
10186: PPUSH
10187: LD_VAR 0 3
10191: PPUSH
10192: LD_INT 1
10194: PPUSH
10195: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10199: LD_INT 66
10201: PPUSH
10202: LD_VAR 0 3
10206: PPUSH
10207: LD_INT 1
10209: PPUSH
10210: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10214: LD_INT 21
10216: PPUSH
10217: LD_VAR 0 3
10221: PPUSH
10222: LD_INT 1
10224: PPUSH
10225: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10229: LD_INT 22
10231: PPUSH
10232: LD_VAR 0 3
10236: PPUSH
10237: LD_INT 1
10239: PPUSH
10240: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10244: LD_INT 54
10246: PPUSH
10247: LD_VAR 0 3
10251: PPUSH
10252: LD_INT 1
10254: PPUSH
10255: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10259: LD_INT 0
10261: PPUSH
10262: LD_VAR 0 3
10266: PPUSH
10267: LD_INT 1
10269: PPUSH
10270: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10274: LD_INT 1
10276: PPUSH
10277: LD_VAR 0 3
10281: PPUSH
10282: LD_INT 1
10284: PPUSH
10285: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10289: LD_INT 2
10291: PPUSH
10292: LD_VAR 0 3
10296: PPUSH
10297: LD_INT 1
10299: PPUSH
10300: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10304: LD_INT 3
10306: PPUSH
10307: LD_VAR 0 3
10311: PPUSH
10312: LD_INT 1
10314: PPUSH
10315: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10319: LD_INT 4
10321: PPUSH
10322: LD_VAR 0 3
10326: PPUSH
10327: LD_INT 1
10329: PPUSH
10330: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10334: LD_INT 5
10336: PPUSH
10337: LD_VAR 0 3
10341: PPUSH
10342: LD_INT 1
10344: PPUSH
10345: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10349: LD_INT 6
10351: PPUSH
10352: LD_VAR 0 3
10356: PPUSH
10357: LD_INT 1
10359: PPUSH
10360: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10364: LD_INT 7
10366: PPUSH
10367: LD_VAR 0 3
10371: PPUSH
10372: LD_INT 1
10374: PPUSH
10375: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10379: LD_INT 8
10381: PPUSH
10382: LD_VAR 0 3
10386: PPUSH
10387: LD_INT 1
10389: PPUSH
10390: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10394: LD_INT 10
10396: PPUSH
10397: LD_VAR 0 3
10401: PPUSH
10402: LD_INT 1
10404: PPUSH
10405: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10409: LD_INT 11
10411: PPUSH
10412: LD_VAR 0 3
10416: PPUSH
10417: LD_INT 1
10419: PPUSH
10420: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10424: LD_INT 12
10426: PPUSH
10427: LD_VAR 0 3
10431: PPUSH
10432: LD_INT 1
10434: PPUSH
10435: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10439: LD_INT 13
10441: PPUSH
10442: LD_VAR 0 3
10446: PPUSH
10447: LD_INT 1
10449: PPUSH
10450: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10454: LD_INT 14
10456: PPUSH
10457: LD_VAR 0 3
10461: PPUSH
10462: LD_INT 1
10464: PPUSH
10465: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10469: LD_INT 15
10471: PPUSH
10472: LD_VAR 0 3
10476: PPUSH
10477: LD_INT 1
10479: PPUSH
10480: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10484: LD_INT 16
10486: PPUSH
10487: LD_VAR 0 3
10491: PPUSH
10492: LD_INT 1
10494: PPUSH
10495: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10499: LD_INT 17
10501: PPUSH
10502: LD_VAR 0 3
10506: PPUSH
10507: LD_INT 1
10509: PPUSH
10510: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10514: LD_INT 19
10516: PPUSH
10517: LD_VAR 0 3
10521: PPUSH
10522: LD_INT 1
10524: PPUSH
10525: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10529: LD_INT 20
10531: PPUSH
10532: LD_VAR 0 3
10536: PPUSH
10537: LD_INT 1
10539: PPUSH
10540: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10544: LD_INT 21
10546: PPUSH
10547: LD_VAR 0 3
10551: PPUSH
10552: LD_INT 1
10554: PPUSH
10555: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10559: LD_INT 23
10561: PPUSH
10562: LD_VAR 0 3
10566: PPUSH
10567: LD_INT 1
10569: PPUSH
10570: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10574: LD_INT 26
10576: PPUSH
10577: LD_VAR 0 3
10581: PPUSH
10582: LD_INT 1
10584: PPUSH
10585: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10589: LD_INT 27
10591: PPUSH
10592: LD_VAR 0 3
10596: PPUSH
10597: LD_INT 1
10599: PPUSH
10600: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10604: LD_INT 28
10606: PPUSH
10607: LD_VAR 0 3
10611: PPUSH
10612: LD_INT 1
10614: PPUSH
10615: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10619: LD_INT 29
10621: PPUSH
10622: LD_VAR 0 3
10626: PPUSH
10627: LD_INT 1
10629: PPUSH
10630: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10634: LD_INT 30
10636: PPUSH
10637: LD_VAR 0 3
10641: PPUSH
10642: LD_INT 1
10644: PPUSH
10645: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10649: LD_INT 31
10651: PPUSH
10652: LD_VAR 0 3
10656: PPUSH
10657: LD_INT 1
10659: PPUSH
10660: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10664: LD_INT 32
10666: PPUSH
10667: LD_VAR 0 3
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10679: LD_INT 36
10681: PPUSH
10682: LD_VAR 0 3
10686: PPUSH
10687: LD_INT 1
10689: PPUSH
10690: CALL_OW 324
// end ; 5 :
10694: GO 12825
10696: LD_INT 5
10698: DOUBLE
10699: EQUAL
10700: IFTRUE 10704
10702: GO 11817
10704: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10705: LD_INT 35
10707: PPUSH
10708: LD_VAR 0 3
10712: PPUSH
10713: LD_INT 1
10715: PPUSH
10716: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10720: LD_INT 45
10722: PPUSH
10723: LD_VAR 0 3
10727: PPUSH
10728: LD_INT 1
10730: PPUSH
10731: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10735: LD_INT 46
10737: PPUSH
10738: LD_VAR 0 3
10742: PPUSH
10743: LD_INT 1
10745: PPUSH
10746: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10750: LD_INT 47
10752: PPUSH
10753: LD_VAR 0 3
10757: PPUSH
10758: LD_INT 1
10760: PPUSH
10761: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10765: LD_INT 1
10767: PPUSH
10768: LD_VAR 0 3
10772: PPUSH
10773: LD_INT 1
10775: PPUSH
10776: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10780: LD_INT 2
10782: PPUSH
10783: LD_VAR 0 3
10787: PPUSH
10788: LD_INT 1
10790: PPUSH
10791: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10795: LD_INT 11
10797: PPUSH
10798: LD_VAR 0 3
10802: PPUSH
10803: LD_INT 1
10805: PPUSH
10806: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10810: LD_INT 20
10812: PPUSH
10813: LD_VAR 0 3
10817: PPUSH
10818: LD_INT 1
10820: PPUSH
10821: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10825: LD_INT 48
10827: PPUSH
10828: LD_VAR 0 3
10832: PPUSH
10833: LD_INT 1
10835: PPUSH
10836: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10840: LD_INT 49
10842: PPUSH
10843: LD_VAR 0 3
10847: PPUSH
10848: LD_INT 1
10850: PPUSH
10851: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10855: LD_INT 69
10857: PPUSH
10858: LD_VAR 0 3
10862: PPUSH
10863: LD_INT 1
10865: PPUSH
10866: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10870: LD_INT 39
10872: PPUSH
10873: LD_VAR 0 3
10877: PPUSH
10878: LD_INT 1
10880: PPUSH
10881: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10885: LD_INT 34
10887: PPUSH
10888: LD_VAR 0 3
10892: PPUSH
10893: LD_INT 1
10895: PPUSH
10896: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10900: LD_INT 42
10902: PPUSH
10903: LD_VAR 0 3
10907: PPUSH
10908: LD_INT 1
10910: PPUSH
10911: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10915: LD_INT 44
10917: PPUSH
10918: LD_VAR 0 3
10922: PPUSH
10923: LD_INT 1
10925: PPUSH
10926: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10930: LD_INT 41
10932: PPUSH
10933: LD_VAR 0 3
10937: PPUSH
10938: LD_INT 1
10940: PPUSH
10941: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
10945: LD_INT 40
10947: PPUSH
10948: LD_VAR 0 3
10952: PPUSH
10953: LD_INT 1
10955: PPUSH
10956: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10960: LD_INT 43
10962: PPUSH
10963: LD_VAR 0 3
10967: PPUSH
10968: LD_INT 1
10970: PPUSH
10971: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10975: LD_INT 70
10977: PPUSH
10978: LD_VAR 0 3
10982: PPUSH
10983: LD_INT 1
10985: PPUSH
10986: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10990: LD_INT 51
10992: PPUSH
10993: LD_VAR 0 3
10997: PPUSH
10998: LD_INT 1
11000: PPUSH
11001: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11005: LD_INT 52
11007: PPUSH
11008: LD_VAR 0 3
11012: PPUSH
11013: LD_INT 1
11015: PPUSH
11016: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11020: LD_INT 6
11022: PPUSH
11023: LD_VAR 0 3
11027: PPUSH
11028: LD_INT 1
11030: PPUSH
11031: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11035: LD_INT 15
11037: PPUSH
11038: LD_VAR 0 3
11042: PPUSH
11043: LD_INT 1
11045: PPUSH
11046: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11050: LD_INT 7
11052: PPUSH
11053: LD_VAR 0 3
11057: PPUSH
11058: LD_INT 1
11060: PPUSH
11061: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11065: LD_INT 12
11067: PPUSH
11068: LD_VAR 0 3
11072: PPUSH
11073: LD_INT 1
11075: PPUSH
11076: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11080: LD_INT 17
11082: PPUSH
11083: LD_VAR 0 3
11087: PPUSH
11088: LD_INT 1
11090: PPUSH
11091: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11095: LD_INT 18
11097: PPUSH
11098: LD_VAR 0 3
11102: PPUSH
11103: LD_INT 1
11105: PPUSH
11106: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11110: LD_INT 60
11112: PPUSH
11113: LD_VAR 0 3
11117: PPUSH
11118: LD_INT 1
11120: PPUSH
11121: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11125: LD_INT 32
11127: PPUSH
11128: LD_VAR 0 3
11132: PPUSH
11133: LD_INT 1
11135: PPUSH
11136: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11140: LD_INT 9
11142: PPUSH
11143: LD_VAR 0 3
11147: PPUSH
11148: LD_INT 1
11150: PPUSH
11151: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11155: LD_INT 57
11157: PPUSH
11158: LD_VAR 0 3
11162: PPUSH
11163: LD_INT 1
11165: PPUSH
11166: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11170: LD_INT 30
11172: PPUSH
11173: LD_VAR 0 3
11177: PPUSH
11178: LD_INT 1
11180: PPUSH
11181: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11185: LD_INT 37
11187: PPUSH
11188: LD_VAR 0 3
11192: PPUSH
11193: LD_INT 1
11195: PPUSH
11196: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11200: LD_INT 63
11202: PPUSH
11203: LD_VAR 0 3
11207: PPUSH
11208: LD_INT 1
11210: PPUSH
11211: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11215: LD_INT 3
11217: PPUSH
11218: LD_VAR 0 3
11222: PPUSH
11223: LD_INT 1
11225: PPUSH
11226: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11230: LD_INT 4
11232: PPUSH
11233: LD_VAR 0 3
11237: PPUSH
11238: LD_INT 1
11240: PPUSH
11241: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11245: LD_INT 5
11247: PPUSH
11248: LD_VAR 0 3
11252: PPUSH
11253: LD_INT 1
11255: PPUSH
11256: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11260: LD_INT 66
11262: PPUSH
11263: LD_VAR 0 3
11267: PPUSH
11268: LD_INT 1
11270: PPUSH
11271: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11275: LD_INT 21
11277: PPUSH
11278: LD_VAR 0 3
11282: PPUSH
11283: LD_INT 1
11285: PPUSH
11286: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11290: LD_INT 22
11292: PPUSH
11293: LD_VAR 0 3
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11305: LD_INT 19
11307: PPUSH
11308: LD_VAR 0 3
11312: PPUSH
11313: LD_INT 1
11315: PPUSH
11316: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11320: LD_INT 54
11322: PPUSH
11323: LD_VAR 0 3
11327: PPUSH
11328: LD_INT 1
11330: PPUSH
11331: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11335: LD_INT 55
11337: PPUSH
11338: LD_VAR 0 3
11342: PPUSH
11343: LD_INT 1
11345: PPUSH
11346: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11350: LD_INT 0
11352: PPUSH
11353: LD_VAR 0 3
11357: PPUSH
11358: LD_INT 1
11360: PPUSH
11361: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11365: LD_INT 1
11367: PPUSH
11368: LD_VAR 0 3
11372: PPUSH
11373: LD_INT 1
11375: PPUSH
11376: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11380: LD_INT 2
11382: PPUSH
11383: LD_VAR 0 3
11387: PPUSH
11388: LD_INT 1
11390: PPUSH
11391: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11395: LD_INT 3
11397: PPUSH
11398: LD_VAR 0 3
11402: PPUSH
11403: LD_INT 1
11405: PPUSH
11406: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11410: LD_INT 4
11412: PPUSH
11413: LD_VAR 0 3
11417: PPUSH
11418: LD_INT 1
11420: PPUSH
11421: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11425: LD_INT 5
11427: PPUSH
11428: LD_VAR 0 3
11432: PPUSH
11433: LD_INT 1
11435: PPUSH
11436: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11440: LD_INT 6
11442: PPUSH
11443: LD_VAR 0 3
11447: PPUSH
11448: LD_INT 1
11450: PPUSH
11451: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11455: LD_INT 7
11457: PPUSH
11458: LD_VAR 0 3
11462: PPUSH
11463: LD_INT 1
11465: PPUSH
11466: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11470: LD_INT 8
11472: PPUSH
11473: LD_VAR 0 3
11477: PPUSH
11478: LD_INT 1
11480: PPUSH
11481: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11485: LD_INT 10
11487: PPUSH
11488: LD_VAR 0 3
11492: PPUSH
11493: LD_INT 1
11495: PPUSH
11496: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11500: LD_INT 11
11502: PPUSH
11503: LD_VAR 0 3
11507: PPUSH
11508: LD_INT 1
11510: PPUSH
11511: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11515: LD_INT 12
11517: PPUSH
11518: LD_VAR 0 3
11522: PPUSH
11523: LD_INT 1
11525: PPUSH
11526: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11530: LD_INT 13
11532: PPUSH
11533: LD_VAR 0 3
11537: PPUSH
11538: LD_INT 1
11540: PPUSH
11541: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11545: LD_INT 14
11547: PPUSH
11548: LD_VAR 0 3
11552: PPUSH
11553: LD_INT 1
11555: PPUSH
11556: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11560: LD_INT 15
11562: PPUSH
11563: LD_VAR 0 3
11567: PPUSH
11568: LD_INT 1
11570: PPUSH
11571: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11575: LD_INT 16
11577: PPUSH
11578: LD_VAR 0 3
11582: PPUSH
11583: LD_INT 1
11585: PPUSH
11586: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11590: LD_INT 17
11592: PPUSH
11593: LD_VAR 0 3
11597: PPUSH
11598: LD_INT 1
11600: PPUSH
11601: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11605: LD_INT 18
11607: PPUSH
11608: LD_VAR 0 3
11612: PPUSH
11613: LD_INT 1
11615: PPUSH
11616: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11620: LD_INT 19
11622: PPUSH
11623: LD_VAR 0 3
11627: PPUSH
11628: LD_INT 1
11630: PPUSH
11631: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11635: LD_INT 20
11637: PPUSH
11638: LD_VAR 0 3
11642: PPUSH
11643: LD_INT 1
11645: PPUSH
11646: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11650: LD_INT 21
11652: PPUSH
11653: LD_VAR 0 3
11657: PPUSH
11658: LD_INT 1
11660: PPUSH
11661: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11665: LD_INT 23
11667: PPUSH
11668: LD_VAR 0 3
11672: PPUSH
11673: LD_INT 1
11675: PPUSH
11676: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11680: LD_INT 26
11682: PPUSH
11683: LD_VAR 0 3
11687: PPUSH
11688: LD_INT 1
11690: PPUSH
11691: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11695: LD_INT 27
11697: PPUSH
11698: LD_VAR 0 3
11702: PPUSH
11703: LD_INT 1
11705: PPUSH
11706: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11710: LD_INT 28
11712: PPUSH
11713: LD_VAR 0 3
11717: PPUSH
11718: LD_INT 1
11720: PPUSH
11721: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11725: LD_INT 29
11727: PPUSH
11728: LD_VAR 0 3
11732: PPUSH
11733: LD_INT 1
11735: PPUSH
11736: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11740: LD_INT 30
11742: PPUSH
11743: LD_VAR 0 3
11747: PPUSH
11748: LD_INT 1
11750: PPUSH
11751: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11755: LD_INT 31
11757: PPUSH
11758: LD_VAR 0 3
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11770: LD_INT 32
11772: PPUSH
11773: LD_VAR 0 3
11777: PPUSH
11778: LD_INT 1
11780: PPUSH
11781: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
11785: LD_INT 33
11787: PPUSH
11788: LD_VAR 0 3
11792: PPUSH
11793: LD_INT 1
11795: PPUSH
11796: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11800: LD_INT 36
11802: PPUSH
11803: LD_VAR 0 3
11807: PPUSH
11808: LD_INT 1
11810: PPUSH
11811: CALL_OW 324
// end ; 6 :
11815: GO 12825
11817: LD_INT 6
11819: DOUBLE
11820: EQUAL
11821: IFTRUE 11825
11823: GO 12750
11825: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11826: LD_INT 35
11828: PPUSH
11829: LD_VAR 0 3
11833: PPUSH
11834: LD_INT 1
11836: PPUSH
11837: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11841: LD_INT 45
11843: PPUSH
11844: LD_VAR 0 3
11848: PPUSH
11849: LD_INT 1
11851: PPUSH
11852: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11856: LD_INT 46
11858: PPUSH
11859: LD_VAR 0 3
11863: PPUSH
11864: LD_INT 1
11866: PPUSH
11867: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11871: LD_INT 47
11873: PPUSH
11874: LD_VAR 0 3
11878: PPUSH
11879: LD_INT 1
11881: PPUSH
11882: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11886: LD_INT 1
11888: PPUSH
11889: LD_VAR 0 3
11893: PPUSH
11894: LD_INT 1
11896: PPUSH
11897: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11901: LD_INT 2
11903: PPUSH
11904: LD_VAR 0 3
11908: PPUSH
11909: LD_INT 1
11911: PPUSH
11912: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11916: LD_INT 11
11918: PPUSH
11919: LD_VAR 0 3
11923: PPUSH
11924: LD_INT 1
11926: PPUSH
11927: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11931: LD_INT 20
11933: PPUSH
11934: LD_VAR 0 3
11938: PPUSH
11939: LD_INT 1
11941: PPUSH
11942: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11946: LD_INT 48
11948: PPUSH
11949: LD_VAR 0 3
11953: PPUSH
11954: LD_INT 1
11956: PPUSH
11957: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11961: LD_INT 49
11963: PPUSH
11964: LD_VAR 0 3
11968: PPUSH
11969: LD_INT 1
11971: PPUSH
11972: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
11976: LD_INT 50
11978: PPUSH
11979: LD_VAR 0 3
11983: PPUSH
11984: LD_INT 1
11986: PPUSH
11987: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11991: LD_INT 69
11993: PPUSH
11994: LD_VAR 0 3
11998: PPUSH
11999: LD_INT 1
12001: PPUSH
12002: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12006: LD_INT 39
12008: PPUSH
12009: LD_VAR 0 3
12013: PPUSH
12014: LD_INT 1
12016: PPUSH
12017: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12021: LD_INT 34
12023: PPUSH
12024: LD_VAR 0 3
12028: PPUSH
12029: LD_INT 1
12031: PPUSH
12032: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12036: LD_INT 42
12038: PPUSH
12039: LD_VAR 0 3
12043: PPUSH
12044: LD_INT 1
12046: PPUSH
12047: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12051: LD_INT 44
12053: PPUSH
12054: LD_VAR 0 3
12058: PPUSH
12059: LD_INT 1
12061: PPUSH
12062: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12066: LD_INT 41
12068: PPUSH
12069: LD_VAR 0 3
12073: PPUSH
12074: LD_INT 1
12076: PPUSH
12077: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12081: LD_INT 13
12083: PPUSH
12084: LD_VAR 0 3
12088: PPUSH
12089: LD_INT 1
12091: PPUSH
12092: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12096: LD_INT 40
12098: PPUSH
12099: LD_VAR 0 3
12103: PPUSH
12104: LD_INT 1
12106: PPUSH
12107: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12111: LD_INT 43
12113: PPUSH
12114: LD_VAR 0 3
12118: PPUSH
12119: LD_INT 1
12121: PPUSH
12122: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12126: LD_INT 70
12128: PPUSH
12129: LD_VAR 0 3
12133: PPUSH
12134: LD_INT 1
12136: PPUSH
12137: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12141: LD_INT 23
12143: PPUSH
12144: LD_VAR 0 3
12148: PPUSH
12149: LD_INT 1
12151: PPUSH
12152: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12156: LD_INT 51
12158: PPUSH
12159: LD_VAR 0 3
12163: PPUSH
12164: LD_INT 1
12166: PPUSH
12167: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12171: LD_INT 52
12173: PPUSH
12174: LD_VAR 0 3
12178: PPUSH
12179: LD_INT 1
12181: PPUSH
12182: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12186: LD_INT 6
12188: PPUSH
12189: LD_VAR 0 3
12193: PPUSH
12194: LD_INT 1
12196: PPUSH
12197: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12201: LD_INT 15
12203: PPUSH
12204: LD_VAR 0 3
12208: PPUSH
12209: LD_INT 1
12211: PPUSH
12212: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12216: LD_INT 7
12218: PPUSH
12219: LD_VAR 0 3
12223: PPUSH
12224: LD_INT 1
12226: PPUSH
12227: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12231: LD_INT 12
12233: PPUSH
12234: LD_VAR 0 3
12238: PPUSH
12239: LD_INT 1
12241: PPUSH
12242: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12246: LD_INT 10
12248: PPUSH
12249: LD_VAR 0 3
12253: PPUSH
12254: LD_INT 1
12256: PPUSH
12257: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12261: LD_INT 17
12263: PPUSH
12264: LD_VAR 0 3
12268: PPUSH
12269: LD_INT 1
12271: PPUSH
12272: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12276: LD_INT 18
12278: PPUSH
12279: LD_VAR 0 3
12283: PPUSH
12284: LD_INT 1
12286: PPUSH
12287: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12291: LD_INT 60
12293: PPUSH
12294: LD_VAR 0 3
12298: PPUSH
12299: LD_INT 1
12301: PPUSH
12302: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12306: LD_INT 61
12308: PPUSH
12309: LD_VAR 0 3
12313: PPUSH
12314: LD_INT 1
12316: PPUSH
12317: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12321: LD_INT 32
12323: PPUSH
12324: LD_VAR 0 3
12328: PPUSH
12329: LD_INT 1
12331: PPUSH
12332: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12336: LD_INT 27
12338: PPUSH
12339: LD_VAR 0 3
12343: PPUSH
12344: LD_INT 1
12346: PPUSH
12347: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12351: LD_INT 36
12353: PPUSH
12354: LD_VAR 0 3
12358: PPUSH
12359: LD_INT 1
12361: PPUSH
12362: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12366: LD_INT 33
12368: PPUSH
12369: LD_VAR 0 3
12373: PPUSH
12374: LD_INT 1
12376: PPUSH
12377: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12381: LD_INT 9
12383: PPUSH
12384: LD_VAR 0 3
12388: PPUSH
12389: LD_INT 1
12391: PPUSH
12392: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12396: LD_INT 38
12398: PPUSH
12399: LD_VAR 0 3
12403: PPUSH
12404: LD_INT 1
12406: PPUSH
12407: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12411: LD_INT 57
12413: PPUSH
12414: LD_VAR 0 3
12418: PPUSH
12419: LD_INT 1
12421: PPUSH
12422: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12426: LD_INT 58
12428: PPUSH
12429: LD_VAR 0 3
12433: PPUSH
12434: LD_INT 1
12436: PPUSH
12437: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12441: LD_INT 28
12443: PPUSH
12444: LD_VAR 0 3
12448: PPUSH
12449: LD_INT 1
12451: PPUSH
12452: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12456: LD_INT 29
12458: PPUSH
12459: LD_VAR 0 3
12463: PPUSH
12464: LD_INT 1
12466: PPUSH
12467: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12471: LD_INT 30
12473: PPUSH
12474: LD_VAR 0 3
12478: PPUSH
12479: LD_INT 1
12481: PPUSH
12482: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12486: LD_INT 37
12488: PPUSH
12489: LD_VAR 0 3
12493: PPUSH
12494: LD_INT 1
12496: PPUSH
12497: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12501: LD_INT 63
12503: PPUSH
12504: LD_VAR 0 3
12508: PPUSH
12509: LD_INT 1
12511: PPUSH
12512: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12516: LD_INT 64
12518: PPUSH
12519: LD_VAR 0 3
12523: PPUSH
12524: LD_INT 1
12526: PPUSH
12527: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12531: LD_INT 3
12533: PPUSH
12534: LD_VAR 0 3
12538: PPUSH
12539: LD_INT 1
12541: PPUSH
12542: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12546: LD_INT 4
12548: PPUSH
12549: LD_VAR 0 3
12553: PPUSH
12554: LD_INT 1
12556: PPUSH
12557: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12561: LD_INT 5
12563: PPUSH
12564: LD_VAR 0 3
12568: PPUSH
12569: LD_INT 1
12571: PPUSH
12572: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12576: LD_INT 8
12578: PPUSH
12579: LD_VAR 0 3
12583: PPUSH
12584: LD_INT 1
12586: PPUSH
12587: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12591: LD_INT 66
12593: PPUSH
12594: LD_VAR 0 3
12598: PPUSH
12599: LD_INT 1
12601: PPUSH
12602: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12606: LD_INT 67
12608: PPUSH
12609: LD_VAR 0 3
12613: PPUSH
12614: LD_INT 1
12616: PPUSH
12617: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12621: LD_INT 21
12623: PPUSH
12624: LD_VAR 0 3
12628: PPUSH
12629: LD_INT 1
12631: PPUSH
12632: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12636: LD_INT 22
12638: PPUSH
12639: LD_VAR 0 3
12643: PPUSH
12644: LD_INT 1
12646: PPUSH
12647: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12651: LD_INT 19
12653: PPUSH
12654: LD_VAR 0 3
12658: PPUSH
12659: LD_INT 1
12661: PPUSH
12662: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12666: LD_INT 26
12668: PPUSH
12669: LD_VAR 0 3
12673: PPUSH
12674: LD_INT 1
12676: PPUSH
12677: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12681: LD_INT 54
12683: PPUSH
12684: LD_VAR 0 3
12688: PPUSH
12689: LD_INT 1
12691: PPUSH
12692: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12696: LD_INT 55
12698: PPUSH
12699: LD_VAR 0 3
12703: PPUSH
12704: LD_INT 1
12706: PPUSH
12707: CALL_OW 322
// for i = 0 to 39 do
12711: LD_ADDR_VAR 0 4
12715: PUSH
12716: DOUBLE
12717: LD_INT 0
12719: DEC
12720: ST_TO_ADDR
12721: LD_INT 39
12723: PUSH
12724: FOR_TO
12725: IFFALSE 12746
// SetRestrict ( i , side , true ) ;
12727: LD_VAR 0 4
12731: PPUSH
12732: LD_VAR 0 3
12736: PPUSH
12737: LD_INT 1
12739: PPUSH
12740: CALL_OW 324
12744: GO 12724
12746: POP
12747: POP
// end ; else
12748: GO 12825
12750: POP
// begin for i = 1 to 73 do
12751: LD_ADDR_VAR 0 4
12755: PUSH
12756: DOUBLE
12757: LD_INT 1
12759: DEC
12760: ST_TO_ADDR
12761: LD_INT 73
12763: PUSH
12764: FOR_TO
12765: IFFALSE 12786
// SetTech ( i , side , state_enabled ) ;
12767: LD_VAR 0 4
12771: PPUSH
12772: LD_VAR 0 3
12776: PPUSH
12777: LD_INT 1
12779: PPUSH
12780: CALL_OW 322
12784: GO 12764
12786: POP
12787: POP
// for i = 0 to 39 do
12788: LD_ADDR_VAR 0 4
12792: PUSH
12793: DOUBLE
12794: LD_INT 0
12796: DEC
12797: ST_TO_ADDR
12798: LD_INT 39
12800: PUSH
12801: FOR_TO
12802: IFFALSE 12823
// SetRestrict ( i , side , true ) ;
12804: LD_VAR 0 4
12808: PPUSH
12809: LD_VAR 0 3
12813: PPUSH
12814: LD_INT 1
12816: PPUSH
12817: CALL_OW 324
12821: GO 12801
12823: POP
12824: POP
// end ; end ; end ;
12825: GO 8830
12827: POP
12828: POP
// end ; end_of_file
12829: LD_VAR 0 2
12833: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
12834: LD_INT 0
12836: PPUSH
12837: PPUSH
12838: PPUSH
12839: PPUSH
12840: PPUSH
12841: PPUSH
12842: PPUSH
12843: PPUSH
12844: PPUSH
// for i := 1 to 8 do
12845: LD_ADDR_VAR 0 2
12849: PUSH
12850: DOUBLE
12851: LD_INT 1
12853: DEC
12854: ST_TO_ADDR
12855: LD_INT 8
12857: PUSH
12858: FOR_TO
12859: IFFALSE 13243
// begin if Side_Positions [ i ] then
12861: LD_EXP 32
12865: PUSH
12866: LD_VAR 0 2
12870: ARRAY
12871: IFFALSE 13241
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
12873: LD_ADDR_VAR 0 7
12877: PUSH
12878: LD_INT 22
12880: PUSH
12881: LD_VAR 0 2
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 21
12892: PUSH
12893: LD_INT 1
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PPUSH
12904: CALL_OW 69
12908: PUSH
12909: LD_INT 0
12911: PLUS
12912: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12913: LD_ADDR_VAR 0 9
12917: PUSH
12918: LD_INT 22
12920: PUSH
12921: LD_VAR 0 2
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 2
12932: PUSH
12933: LD_INT 30
12935: PUSH
12936: LD_INT 0
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 30
12945: PUSH
12946: LD_INT 1
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: LIST
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: PPUSH
12962: CALL_OW 69
12966: ST_TO_ADDR
// crates := 0 ;
12967: LD_ADDR_VAR 0 4
12971: PUSH
12972: LD_INT 0
12974: ST_TO_ADDR
// oil := 0 ;
12975: LD_ADDR_VAR 0 5
12979: PUSH
12980: LD_INT 0
12982: ST_TO_ADDR
// sib := 0 ;
12983: LD_ADDR_VAR 0 6
12987: PUSH
12988: LD_INT 0
12990: ST_TO_ADDR
// if bases then
12991: LD_VAR 0 9
12995: IFFALSE 13101
// begin for j in bases do
12997: LD_ADDR_VAR 0 3
13001: PUSH
13002: LD_VAR 0 9
13006: PUSH
13007: FOR_IN
13008: IFFALSE 13099
// begin base := GetBase ( j ) ;
13010: LD_ADDR_VAR 0 8
13014: PUSH
13015: LD_VAR 0 3
13019: PPUSH
13020: CALL_OW 274
13024: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13025: LD_ADDR_VAR 0 4
13029: PUSH
13030: LD_VAR 0 4
13034: PUSH
13035: LD_VAR 0 8
13039: PPUSH
13040: LD_INT 1
13042: PPUSH
13043: CALL_OW 275
13047: PLUS
13048: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13049: LD_ADDR_VAR 0 5
13053: PUSH
13054: LD_VAR 0 5
13058: PUSH
13059: LD_VAR 0 8
13063: PPUSH
13064: LD_INT 2
13066: PPUSH
13067: CALL_OW 275
13071: PLUS
13072: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13073: LD_ADDR_VAR 0 6
13077: PUSH
13078: LD_VAR 0 6
13082: PUSH
13083: LD_VAR 0 8
13087: PPUSH
13088: LD_INT 3
13090: PPUSH
13091: CALL_OW 275
13095: PLUS
13096: ST_TO_ADDR
// end ;
13097: GO 13007
13099: POP
13100: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13101: LD_STRING setSpecText(
13103: PUSH
13104: LD_VAR 0 2
13108: STR
13109: PUSH
13110: LD_STRING ,
13112: STR
13113: PUSH
13114: LD_INT 2
13116: STR
13117: PUSH
13118: LD_STRING ,
13120: STR
13121: PUSH
13122: LD_VAR 0 4
13126: STR
13127: PUSH
13128: LD_STRING )
13130: STR
13131: PPUSH
13132: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13136: LD_STRING setSpecText(
13138: PUSH
13139: LD_VAR 0 2
13143: STR
13144: PUSH
13145: LD_STRING ,
13147: STR
13148: PUSH
13149: LD_INT 3
13151: STR
13152: PUSH
13153: LD_STRING ,
13155: STR
13156: PUSH
13157: LD_VAR 0 5
13161: STR
13162: PUSH
13163: LD_STRING )
13165: STR
13166: PPUSH
13167: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13171: LD_STRING setSpecText(
13173: PUSH
13174: LD_VAR 0 2
13178: STR
13179: PUSH
13180: LD_STRING ,
13182: STR
13183: PUSH
13184: LD_INT 4
13186: STR
13187: PUSH
13188: LD_STRING ,
13190: STR
13191: PUSH
13192: LD_VAR 0 6
13196: STR
13197: PUSH
13198: LD_STRING )
13200: STR
13201: PPUSH
13202: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13206: LD_STRING setSpecText(
13208: PUSH
13209: LD_VAR 0 2
13213: STR
13214: PUSH
13215: LD_STRING ,
13217: STR
13218: PUSH
13219: LD_INT 5
13221: STR
13222: PUSH
13223: LD_STRING ,
13225: STR
13226: PUSH
13227: LD_VAR 0 7
13231: STR
13232: PUSH
13233: LD_STRING )
13235: STR
13236: PPUSH
13237: CALL_OW 559
// end ; end ;
13241: GO 12858
13243: POP
13244: POP
// end ;
13245: LD_VAR 0 1
13249: RET
// every 0 0$1 do
13250: GO 13252
13252: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13253: LD_STRING setSpecLogoNumber(
13255: PUSH
13256: LD_INT 2
13258: STR
13259: PUSH
13260: LD_STRING ,
13262: STR
13263: PUSH
13264: LD_INT 1
13266: STR
13267: PUSH
13268: LD_STRING )
13270: STR
13271: PPUSH
13272: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13276: LD_STRING setSpecLogoNumber(
13278: PUSH
13279: LD_INT 3
13281: STR
13282: PUSH
13283: LD_STRING ,
13285: STR
13286: PUSH
13287: LD_INT 2
13289: STR
13290: PUSH
13291: LD_STRING )
13293: STR
13294: PPUSH
13295: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13299: LD_STRING setSpecLogoNumber(
13301: PUSH
13302: LD_INT 4
13304: STR
13305: PUSH
13306: LD_STRING ,
13308: STR
13309: PUSH
13310: LD_INT 3
13312: STR
13313: PUSH
13314: LD_STRING )
13316: STR
13317: PPUSH
13318: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13322: LD_STRING setSpecLogoNumber(
13324: PUSH
13325: LD_INT 5
13327: STR
13328: PUSH
13329: LD_STRING ,
13331: STR
13332: PUSH
13333: LD_INT 4
13335: STR
13336: PUSH
13337: LD_STRING )
13339: STR
13340: PPUSH
13341: CALL_OW 559
// end ;
13345: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13346: LD_INT 2
13348: PUSH
13349: LD_INT 30
13351: PUSH
13352: LD_INT 0
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 30
13361: PUSH
13362: LD_INT 1
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: LIST
13373: PPUSH
13374: CALL_OW 69
13378: IFFALSE 13388
13380: GO 13382
13382: DISABLE
// begin enable ;
13383: ENABLE
// UpdateSpectatorBar ;
13384: CALL 12834 0 0
// end ;
13388: END
