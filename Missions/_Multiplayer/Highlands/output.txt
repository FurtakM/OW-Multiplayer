// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , amount_of_apemen , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , extra_sib_deposits_locations , normal_oil_deposits_locations , normal_sib_deposits_locations , battle_flags_id , Side_Comps ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function init_map ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// normal_oil_deposits_locations := [ [ 65 , 49 ] , [ 157 , 62 ] , [ 192 , 143 ] , [ 109 , 147 ] ] ;
   4: LD_ADDR_EXP 40
   8: PUSH
   9: LD_INT 65
  11: PUSH
  12: LD_INT 49
  14: PUSH
  15: EMPTY
  16: LIST
  17: LIST
  18: PUSH
  19: LD_INT 157
  21: PUSH
  22: LD_INT 62
  24: PUSH
  25: EMPTY
  26: LIST
  27: LIST
  28: PUSH
  29: LD_INT 192
  31: PUSH
  32: LD_INT 143
  34: PUSH
  35: EMPTY
  36: LIST
  37: LIST
  38: PUSH
  39: LD_INT 109
  41: PUSH
  42: LD_INT 147
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: EMPTY
  50: LIST
  51: LIST
  52: LIST
  53: LIST
  54: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 22 , 33 ] , [ 179 , 43 ] , [ 228 , 151 ] , [ 83 , 154 ] ] ;
  55: LD_ADDR_EXP 38
  59: PUSH
  60: LD_INT 22
  62: PUSH
  63: LD_INT 33
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 179
  72: PUSH
  73: LD_INT 43
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: LD_INT 228
  82: PUSH
  83: LD_INT 151
  85: PUSH
  86: EMPTY
  87: LIST
  88: LIST
  89: PUSH
  90: LD_INT 83
  92: PUSH
  93: LD_INT 154
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: PUSH
 100: EMPTY
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 39 , 18 ] , [ 138 , 27 ] , [ 222 , 157 ] , [ 82 , 115 ] ] ;
 106: LD_ADDR_EXP 41
 110: PUSH
 111: LD_INT 39
 113: PUSH
 114: LD_INT 18
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: PUSH
 121: LD_INT 138
 123: PUSH
 124: LD_INT 27
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: PUSH
 131: LD_INT 222
 133: PUSH
 134: LD_INT 157
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: PUSH
 141: LD_INT 82
 143: PUSH
 144: LD_INT 115
 146: PUSH
 147: EMPTY
 148: LIST
 149: LIST
 150: PUSH
 151: EMPTY
 152: LIST
 153: LIST
 154: LIST
 155: LIST
 156: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 35 , 55 ] , [ 188 , 70 ] , [ 214 , 123 ] , [ 66 , 120 ] ] ;
 157: LD_ADDR_EXP 39
 161: PUSH
 162: LD_INT 35
 164: PUSH
 165: LD_INT 55
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: PUSH
 172: LD_INT 188
 174: PUSH
 175: LD_INT 70
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: LD_INT 214
 184: PUSH
 185: LD_INT 123
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: LD_INT 66
 194: PUSH
 195: LD_INT 120
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: ST_TO_ADDR
// depot_def := [ [ 54 , 45 , 3 ] , [ 161 , 55 , 5 ] , [ 98 , 142 , 4 ] , [ 194 , 133 , 1 ] ] ;
 208: LD_ADDR_EXP 35
 212: PUSH
 213: LD_INT 54
 215: PUSH
 216: LD_INT 45
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: PUSH
 227: LD_INT 161
 229: PUSH
 230: LD_INT 55
 232: PUSH
 233: LD_INT 5
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 98
 243: PUSH
 244: LD_INT 142
 246: PUSH
 247: LD_INT 4
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: LIST
 254: PUSH
 255: LD_INT 194
 257: PUSH
 258: LD_INT 133
 260: PUSH
 261: LD_INT 1
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: LIST
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: LIST
 274: ST_TO_ADDR
// start_def := [ [ 53 , 52 ] , [ 152 , 45 ] , [ 91 , 140 ] , [ 200 , 132 ] ] ;
 275: LD_ADDR_EXP 37
 279: PUSH
 280: LD_INT 53
 282: PUSH
 283: LD_INT 52
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 152
 292: PUSH
 293: LD_INT 45
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: LD_INT 91
 302: PUSH
 303: LD_INT 140
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 200
 312: PUSH
 313: LD_INT 132
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: ST_TO_ADDR
// breastworks_def := [ [ [ 76 , 75 , 5 ] , [ 72 , 34 , 4 ] , [ 81 , 60 , 5 ] , [ 31 , 31 , 2 ] ] , [ [ 170 , 79 , 5 ] , [ 139 , 42 , 1 ] , [ 171 , 58 , 4 ] , [ 149 , 25 , 3 ] ] , [ [ 114 , 163 , 5 ] , [ 114 , 138 , 4 ] , [ 97 , 116 , 3 ] , [ 81 , 135 , 1 ] ] , [ [ 179 , 116 , 2 ] , [ 175 , 145 , 1 ] , [ 217 , 149 , 4 ] , [ 202 , 158 , 0 ] ] ] ;
 326: LD_ADDR_EXP 36
 330: PUSH
 331: LD_INT 76
 333: PUSH
 334: LD_INT 75
 336: PUSH
 337: LD_INT 5
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 72
 347: PUSH
 348: LD_INT 34
 350: PUSH
 351: LD_INT 4
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 81
 361: PUSH
 362: LD_INT 60
 364: PUSH
 365: LD_INT 5
 367: PUSH
 368: EMPTY
 369: LIST
 370: LIST
 371: LIST
 372: PUSH
 373: LD_INT 31
 375: PUSH
 376: LD_INT 31
 378: PUSH
 379: LD_INT 2
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: LIST
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: PUSH
 393: LD_INT 170
 395: PUSH
 396: LD_INT 79
 398: PUSH
 399: LD_INT 5
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 139
 409: PUSH
 410: LD_INT 42
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: PUSH
 421: LD_INT 171
 423: PUSH
 424: LD_INT 58
 426: PUSH
 427: LD_INT 4
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 149
 437: PUSH
 438: LD_INT 25
 440: PUSH
 441: LD_INT 3
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 114
 457: PUSH
 458: LD_INT 163
 460: PUSH
 461: LD_INT 5
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 114
 471: PUSH
 472: LD_INT 138
 474: PUSH
 475: LD_INT 4
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: PUSH
 483: LD_INT 97
 485: PUSH
 486: LD_INT 116
 488: PUSH
 489: LD_INT 3
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PUSH
 497: LD_INT 81
 499: PUSH
 500: LD_INT 135
 502: PUSH
 503: LD_INT 1
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 179
 519: PUSH
 520: LD_INT 116
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 175
 533: PUSH
 534: LD_INT 145
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 217
 547: PUSH
 548: LD_INT 149
 550: PUSH
 551: LD_INT 4
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 202
 561: PUSH
 562: LD_INT 158
 564: PUSH
 565: LD_INT 0
 567: PUSH
 568: EMPTY
 569: LIST
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: ST_TO_ADDR
// for i in normal_oil_deposits_locations do
 585: LD_ADDR_VAR 0 2
 589: PUSH
 590: LD_EXP 40
 594: PUSH
 595: FOR_IN
 596: IFFALSE 625
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 598: LD_VAR 0 2
 602: PUSH
 603: LD_INT 1
 605: ARRAY
 606: PPUSH
 607: LD_VAR 0 2
 611: PUSH
 612: LD_INT 2
 614: ARRAY
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: CALL_OW 62
 623: GO 595
 625: POP
 626: POP
// if def_extra_oil_deposits then
 627: LD_EXP 6
 631: IFFALSE 675
// for i in extra_oil_deposits_locations do
 633: LD_ADDR_VAR 0 2
 637: PUSH
 638: LD_EXP 38
 642: PUSH
 643: FOR_IN
 644: IFFALSE 673
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 646: LD_VAR 0 2
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: LD_VAR 0 2
 659: PUSH
 660: LD_INT 2
 662: ARRAY
 663: PPUSH
 664: LD_INT 2
 666: PPUSH
 667: CALL_OW 62
 671: GO 643
 673: POP
 674: POP
// if def_extra_sib_deposits > 0 then
 675: LD_EXP 7
 679: PUSH
 680: LD_INT 0
 682: GREATER
 683: IFFALSE 779
// begin for i in normal_sib_deposits_locations do
 685: LD_ADDR_VAR 0 2
 689: PUSH
 690: LD_EXP 41
 694: PUSH
 695: FOR_IN
 696: IFFALSE 725
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 698: LD_VAR 0 2
 702: PUSH
 703: LD_INT 1
 705: ARRAY
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 2
 714: ARRAY
 715: PPUSH
 716: LD_INT 3
 718: PPUSH
 719: CALL_OW 62
 723: GO 695
 725: POP
 726: POP
// if def_extra_sib_deposits = 2 then
 727: LD_EXP 7
 731: PUSH
 732: LD_INT 2
 734: EQUAL
 735: IFFALSE 779
// for i in extra_sib_deposits_locations do
 737: LD_ADDR_VAR 0 2
 741: PUSH
 742: LD_EXP 39
 746: PUSH
 747: FOR_IN
 748: IFFALSE 777
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 750: LD_VAR 0 2
 754: PUSH
 755: LD_INT 1
 757: ARRAY
 758: PPUSH
 759: LD_VAR 0 2
 763: PUSH
 764: LD_INT 2
 766: ARRAY
 767: PPUSH
 768: LD_INT 3
 770: PPUSH
 771: CALL_OW 62
 775: GO 747
 777: POP
 778: POP
// end ; end ;
 779: LD_VAR 0 1
 783: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 784: LD_INT 0
 786: PPUSH
 787: PPUSH
 788: PPUSH
 789: PPUSH
 790: PPUSH
 791: PPUSH
 792: PPUSH
 793: PPUSH
 794: PPUSH
// if MultiPlayer then
 795: LD_OWVAR 4
 799: IFFALSE 863
// begin Game_Type = mp_game_type ;
 801: LD_ADDR_EXP 16
 805: PUSH
 806: LD_OWVAR 6
 810: ST_TO_ADDR
// Your_Side = mp_player_side ;
 811: LD_ADDR_OWVAR 2
 815: PUSH
 816: LD_OWVAR 7
 820: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 821: LD_ADDR_EXP 32
 825: PUSH
 826: LD_OWVAR 17
 830: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 831: LD_ADDR_EXP 30
 835: PUSH
 836: LD_OWVAR 15
 840: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 841: LD_ADDR_EXP 33
 845: PUSH
 846: LD_OWVAR 16
 850: ST_TO_ADDR
// Teams = mp_teams ;
 851: LD_ADDR_EXP 31
 855: PUSH
 856: LD_OWVAR 12
 860: ST_TO_ADDR
// end else
 861: GO 1064
// begin Game_Type = 2 ;
 863: LD_ADDR_EXP 16
 867: PUSH
 868: LD_INT 2
 870: ST_TO_ADDR
// Your_Side = 4 ;
 871: LD_ADDR_OWVAR 2
 875: PUSH
 876: LD_INT 4
 878: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 879: LD_ADDR_EXP 32
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: LD_INT 3
 889: PUSH
 890: LD_INT 0
 892: PUSH
 893: LD_INT 1
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 2
 901: PUSH
 902: LD_INT 4
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 918: LD_ADDR_EXP 30
 922: PUSH
 923: LD_INT 0
 925: PUSH
 926: LD_INT 1
 928: PUSH
 929: LD_INT 0
 931: PUSH
 932: LD_INT 2
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 2
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 957: LD_ADDR_EXP 33
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 3
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: LD_INT 2
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: LD_INT 1
 979: PUSH
 980: LD_INT 3
 982: PUSH
 983: LD_INT 0
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 996: LD_ADDR_EXP 43
1000: PUSH
1001: LD_INT 0
1003: PUSH
1004: LD_INT 0
1006: PUSH
1007: LD_INT 0
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: LD_INT 0
1015: PUSH
1016: LD_INT 0
1018: PUSH
1019: LD_INT 0
1021: PUSH
1022: LD_INT 0
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 4 , 7 ] ] ;
1035: LD_ADDR_EXP 31
1039: PUSH
1040: LD_INT 2
1042: PUSH
1043: LD_INT 6
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: PUSH
1050: LD_INT 4
1052: PUSH
1053: LD_INT 7
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: ST_TO_ADDR
// end ; if MultiPlayer then
1064: LD_OWVAR 4
1068: IFFALSE 1267
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1070: LD_ADDR_EXP 1
1074: PUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 426
1082: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1083: LD_ADDR_EXP 2
1087: PUSH
1088: LD_INT 1
1090: PPUSH
1091: CALL_OW 426
1095: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1096: LD_ADDR_EXP 3
1100: PUSH
1101: LD_INT 2
1103: PPUSH
1104: CALL_OW 426
1108: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1109: LD_ADDR_EXP 4
1113: PUSH
1114: LD_INT 3
1116: PPUSH
1117: CALL_OW 426
1121: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1122: LD_ADDR_EXP 5
1126: PUSH
1127: LD_INT 4
1129: PPUSH
1130: CALL_OW 426
1134: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1135: LD_ADDR_EXP 6
1139: PUSH
1140: LD_INT 5
1142: PPUSH
1143: CALL_OW 426
1147: ST_TO_ADDR
// def_extra_sib_deposits = GetMultiplayerSetting ( 6 ) ;
1148: LD_ADDR_EXP 7
1152: PUSH
1153: LD_INT 6
1155: PPUSH
1156: CALL_OW 426
1160: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1161: LD_ADDR_EXP 8
1165: PUSH
1166: LD_INT 10
1168: PPUSH
1169: CALL_OW 426
1173: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1174: LD_ADDR_EXP 9
1178: PUSH
1179: LD_INT 11
1181: PPUSH
1182: CALL_OW 426
1186: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1187: LD_ADDR_EXP 10
1191: PUSH
1192: LD_INT 12
1194: PPUSH
1195: CALL_OW 426
1199: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1200: LD_ADDR_EXP 11
1204: PUSH
1205: LD_INT 13
1207: PPUSH
1208: CALL_OW 426
1212: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1213: LD_ADDR_EXP 12
1217: PUSH
1218: LD_INT 14
1220: PPUSH
1221: CALL_OW 426
1225: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1226: LD_ADDR_EXP 13
1230: PUSH
1231: LD_INT 15
1233: PPUSH
1234: CALL_OW 426
1238: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
1239: LD_ADDR_EXP 14
1243: PUSH
1244: LD_INT 20
1246: PPUSH
1247: CALL_OW 426
1251: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
1252: LD_ADDR_VAR 0 9
1256: PUSH
1257: LD_INT 22
1259: PPUSH
1260: CALL_OW 426
1264: ST_TO_ADDR
// end else
1265: GO 1391
// begin randomize ;
1267: CALL_OW 10
// def_base_level = 2 ;
1271: LD_ADDR_EXP 1
1275: PUSH
1276: LD_INT 2
1278: ST_TO_ADDR
// def_amount_of_people = 1 ;
1279: LD_ADDR_EXP 2
1283: PUSH
1284: LD_INT 1
1286: ST_TO_ADDR
// def_skill_level = 1 ;
1287: LD_ADDR_EXP 3
1291: PUSH
1292: LD_INT 1
1294: ST_TO_ADDR
// def_starting_resources = 2 ;
1295: LD_ADDR_EXP 4
1299: PUSH
1300: LD_INT 2
1302: ST_TO_ADDR
// def_shipments_density = 50 ;
1303: LD_ADDR_EXP 5
1307: PUSH
1308: LD_INT 50
1310: ST_TO_ADDR
// def_extra_oil_deposits = 1 ;
1311: LD_ADDR_EXP 6
1315: PUSH
1316: LD_INT 1
1318: ST_TO_ADDR
// def_extra_sib_deposits = 1 ;
1319: LD_ADDR_EXP 7
1323: PUSH
1324: LD_INT 1
1326: ST_TO_ADDR
// def_shared_vision = 1 ;
1327: LD_ADDR_EXP 8
1331: PUSH
1332: LD_INT 1
1334: ST_TO_ADDR
// def_morale_flags = 2 ;
1335: LD_ADDR_EXP 9
1339: PUSH
1340: LD_INT 2
1342: ST_TO_ADDR
// def_siberite_detection = 1 ;
1343: LD_ADDR_EXP 10
1347: PUSH
1348: LD_INT 1
1350: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1351: LD_ADDR_EXP 11
1355: PUSH
1356: LD_INT 3
1358: ST_TO_ADDR
// def_people_respawning = 2 ;
1359: LD_ADDR_EXP 12
1363: PUSH
1364: LD_INT 2
1366: ST_TO_ADDR
// def_siberite_bomb = 2 ;
1367: LD_ADDR_EXP 13
1371: PUSH
1372: LD_INT 2
1374: ST_TO_ADDR
// def_builduptime = 2 ;
1375: LD_ADDR_EXP 14
1379: PUSH
1380: LD_INT 2
1382: ST_TO_ADDR
// tech_level = 4 ;
1383: LD_ADDR_VAR 0 9
1387: PUSH
1388: LD_INT 4
1390: ST_TO_ADDR
// end ; if isSGUI then
1391: LD_OWVAR 83
1395: IFFALSE 1403
// setMpTechs ( ) else
1397: CALL 8247 0 0
1401: GO 1416
// SetMpTechLevel ( tech_level + 1 ) ;
1403: LD_VAR 0 9
1407: PUSH
1408: LD_INT 1
1410: PLUS
1411: PPUSH
1412: CALL 8394 0 1
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1416: LD_ADDR_EXP 17
1420: PUSH
1421: LD_INT 0
1423: PUSH
1424: LD_INT 1
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_EXP 1
1443: PUSH
1444: LD_INT 1
1446: PLUS
1447: ARRAY
1448: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1449: LD_ADDR_EXP 18
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 2
1462: PUSH
1463: LD_INT 4
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_EXP 1
1476: PUSH
1477: LD_INT 1
1479: PLUS
1480: ARRAY
1481: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1482: LD_ADDR_EXP 20
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: LD_INT 3
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: LD_INT 5
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: PUSH
1505: LD_EXP 3
1509: PUSH
1510: LD_INT 1
1512: PLUS
1513: ARRAY
1514: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1515: LD_ADDR_EXP 22
1519: PUSH
1520: LD_INT 0
1522: PUSH
1523: LD_INT 0
1525: PUSH
1526: LD_INT 0
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: PUSH
1534: LD_INT 30
1536: PUSH
1537: LD_INT 0
1539: PUSH
1540: LD_INT 0
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 50
1550: PUSH
1551: LD_INT 20
1553: PUSH
1554: LD_INT 0
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: LIST
1561: PUSH
1562: LD_INT 80
1564: PUSH
1565: LD_INT 40
1567: PUSH
1568: LD_INT 20
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: PUSH
1582: LD_EXP 4
1586: PUSH
1587: LD_INT 1
1589: PLUS
1590: ARRAY
1591: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1592: LD_ADDR_EXP 21
1596: PUSH
1597: LD_INT 10
1599: PUSH
1600: EMPTY
1601: LIST
1602: PUSH
1603: LD_INT 7
1605: PUSH
1606: LD_INT 14
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: PUSH
1613: LD_INT 6
1615: PUSH
1616: LD_INT 12
1618: PUSH
1619: LD_INT 18
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: LD_INT 10
1632: PUSH
1633: LD_INT 15
1635: PUSH
1636: LD_INT 20
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: PUSH
1651: LD_EXP 4
1655: PUSH
1656: LD_INT 1
1658: PLUS
1659: ARRAY
1660: ST_TO_ADDR
// number_of_people = def_amount_of_people + 4 ;
1661: LD_ADDR_EXP 19
1665: PUSH
1666: LD_EXP 2
1670: PUSH
1671: LD_INT 4
1673: PLUS
1674: ST_TO_ADDR
// shipments_density = 150 - ( def_shipments_density + 1 ) ;
1675: LD_ADDR_EXP 23
1679: PUSH
1680: LD_INT 150
1682: PUSH
1683: LD_EXP 5
1687: PUSH
1688: LD_INT 1
1690: PLUS
1691: MINUS
1692: ST_TO_ADDR
// amount_of_apemen = [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1693: LD_ADDR_EXP 27
1697: PUSH
1698: LD_INT 0
1700: PUSH
1701: LD_INT 3
1703: PUSH
1704: LD_INT 6
1706: PUSH
1707: LD_INT 9
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: PUSH
1716: LD_EXP 11
1720: PUSH
1721: LD_INT 1
1723: PLUS
1724: ARRAY
1725: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1726: LD_ADDR_EXP 25
1730: PUSH
1731: LD_INT 0
1733: PUSH
1734: LD_INT 8400
1736: PUSH
1737: LD_INT 1750
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_EXP 12
1749: PUSH
1750: LD_INT 1
1752: PLUS
1753: ARRAY
1754: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1755: LD_ADDR_EXP 26
1759: PUSH
1760: LD_INT 0
1762: PUSH
1763: LD_INT 21000
1765: PUSH
1766: LD_INT 4200
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: PUSH
1774: LD_EXP 12
1778: PUSH
1779: LD_INT 1
1781: PLUS
1782: ARRAY
1783: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1784: LD_ADDR_EXP 24
1788: PUSH
1789: LD_INT 1
1791: NEG
1792: PUSH
1793: LD_INT 350
1795: PUSH
1796: LD_INT 700
1798: PUSH
1799: LD_INT 1400
1801: PUSH
1802: LD_INT 0
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: PUSH
1812: LD_EXP 9
1816: PUSH
1817: LD_INT 1
1819: PLUS
1820: ARRAY
1821: ST_TO_ADDR
// battle_flags_id = [ ] ;
1822: LD_ADDR_EXP 42
1826: PUSH
1827: EMPTY
1828: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1829: LD_EXP 13
1833: PUSH
1834: LD_INT 0
1836: EQUAL
1837: IFFALSE 1849
// siberite_bomb_Delay = 0 else
1839: LD_ADDR_EXP 28
1843: PUSH
1844: LD_INT 0
1846: ST_TO_ADDR
1847: GO 1871
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1849: LD_ADDR_EXP 28
1853: PUSH
1854: LD_EXP 13
1858: PUSH
1859: LD_INT 1
1861: MINUS
1862: PUSH
1863: LD_INT 21000
1865: MUL
1866: PUSH
1867: LD_INT 1
1869: PLUS
1870: ST_TO_ADDR
// end ;
1871: LD_VAR 0 1
1875: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1876: LD_INT 0
1878: PPUSH
1879: PPUSH
1880: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1881: LD_ADDR_EXP 34
1885: PUSH
1886: LD_EXP 30
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: EMPTY
1895: LIST
1896: DIFF
1897: PUSH
1898: LD_INT 1
1900: GREATER
1901: ST_TO_ADDR
// if not Team_Game then
1902: LD_EXP 34
1906: NOT
1907: IFFALSE 2005
// begin for i = 1 to 8 do
1909: LD_ADDR_VAR 0 2
1913: PUSH
1914: DOUBLE
1915: LD_INT 1
1917: DEC
1918: ST_TO_ADDR
1919: LD_INT 8
1921: PUSH
1922: FOR_TO
1923: IFFALSE 2001
// for j = 1 to 8 do
1925: LD_ADDR_VAR 0 3
1929: PUSH
1930: DOUBLE
1931: LD_INT 1
1933: DEC
1934: ST_TO_ADDR
1935: LD_INT 8
1937: PUSH
1938: FOR_TO
1939: IFFALSE 1997
// if i <> j then
1941: LD_VAR 0 2
1945: PUSH
1946: LD_VAR 0 3
1950: NONEQUAL
1951: IFFALSE 1975
// SetAttitude ( i , j , att_neutral , true ) else
1953: LD_VAR 0 2
1957: PPUSH
1958: LD_VAR 0 3
1962: PPUSH
1963: LD_INT 0
1965: PPUSH
1966: LD_INT 1
1968: PPUSH
1969: CALL_OW 80
1973: GO 1995
// SetAttitude ( i , j , att_friend , true ) ;
1975: LD_VAR 0 2
1979: PPUSH
1980: LD_VAR 0 3
1984: PPUSH
1985: LD_INT 1
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: CALL_OW 80
1995: GO 1938
1997: POP
1998: POP
1999: GO 1922
2001: POP
2002: POP
// end else
2003: GO 2180
// begin if def_shared_vision then
2005: LD_EXP 8
2009: IFFALSE 2074
// begin for i in Teams do
2011: LD_ADDR_VAR 0 2
2015: PUSH
2016: LD_EXP 31
2020: PUSH
2021: FOR_IN
2022: IFFALSE 2072
// for j = 2 to i do
2024: LD_ADDR_VAR 0 3
2028: PUSH
2029: DOUBLE
2030: LD_INT 2
2032: DEC
2033: ST_TO_ADDR
2034: LD_VAR 0 2
2038: PUSH
2039: FOR_TO
2040: IFFALSE 2068
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2042: LD_VAR 0 2
2046: PUSH
2047: LD_VAR 0 3
2051: ARRAY
2052: PPUSH
2053: LD_VAR 0 2
2057: PUSH
2058: LD_INT 1
2060: ARRAY
2061: PPUSH
2062: CALL_OW 343
2066: GO 2039
2068: POP
2069: POP
2070: GO 2021
2072: POP
2073: POP
// end ; for i = 1 to 8 do
2074: LD_ADDR_VAR 0 2
2078: PUSH
2079: DOUBLE
2080: LD_INT 1
2082: DEC
2083: ST_TO_ADDR
2084: LD_INT 8
2086: PUSH
2087: FOR_TO
2088: IFFALSE 2178
// for j = 1 to 8 do
2090: LD_ADDR_VAR 0 3
2094: PUSH
2095: DOUBLE
2096: LD_INT 1
2098: DEC
2099: ST_TO_ADDR
2100: LD_INT 8
2102: PUSH
2103: FOR_TO
2104: IFFALSE 2174
// if Side_Teams [ i ] = Side_Teams [ j ] then
2106: LD_EXP 30
2110: PUSH
2111: LD_VAR 0 2
2115: ARRAY
2116: PUSH
2117: LD_EXP 30
2121: PUSH
2122: LD_VAR 0 3
2126: ARRAY
2127: EQUAL
2128: IFFALSE 2152
// SetAttitude ( i , j , att_friend , true ) else
2130: LD_VAR 0 2
2134: PPUSH
2135: LD_VAR 0 3
2139: PPUSH
2140: LD_INT 1
2142: PPUSH
2143: LD_INT 1
2145: PPUSH
2146: CALL_OW 80
2150: GO 2172
// SetAttitude ( i , j , att_enemy , true ) ;
2152: LD_VAR 0 2
2156: PPUSH
2157: LD_VAR 0 3
2161: PPUSH
2162: LD_INT 2
2164: PPUSH
2165: LD_INT 1
2167: PPUSH
2168: CALL_OW 80
2172: GO 2103
2174: POP
2175: POP
2176: GO 2087
2178: POP
2179: POP
// end ; end ;
2180: LD_VAR 0 1
2184: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2185: LD_INT 0
2187: PPUSH
2188: PPUSH
2189: PPUSH
2190: PPUSH
// result := [ ] ;
2191: LD_ADDR_VAR 0 7
2195: PUSH
2196: EMPTY
2197: ST_TO_ADDR
// for i := 1 to count do
2198: LD_ADDR_VAR 0 8
2202: PUSH
2203: DOUBLE
2204: LD_INT 1
2206: DEC
2207: ST_TO_ADDR
2208: LD_VAR 0 1
2212: PUSH
2213: FOR_TO
2214: IFFALSE 2632
// begin uc_direction := Rand ( 0 , 5 ) ;
2216: LD_ADDR_OWVAR 24
2220: PUSH
2221: LD_INT 0
2223: PPUSH
2224: LD_INT 5
2226: PPUSH
2227: CALL_OW 12
2231: ST_TO_ADDR
// if commander then
2232: LD_LOC 1
2236: IFFALSE 2345
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2238: LD_ADDR_OWVAR 26
2242: PUSH
2243: LD_OWVAR 19
2247: PUSH
2248: LD_OWVAR 20
2252: ARRAY
2253: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2254: LD_INT 1
2256: PPUSH
2257: LD_INT 2
2259: PPUSH
2260: CALL_OW 12
2264: PPUSH
2265: LD_VAR 0 2
2269: PPUSH
2270: LD_EXP 20
2274: PUSH
2275: LD_INT 2
2277: PLUS
2278: PPUSH
2279: CALL_OW 380
// hc_importance := 105 ;
2283: LD_ADDR_OWVAR 32
2287: PUSH
2288: LD_INT 105
2290: ST_TO_ADDR
// commander := false ;
2291: LD_ADDR_LOC 1
2295: PUSH
2296: LD_INT 0
2298: ST_TO_ADDR
// if Multiplayer then
2299: LD_OWVAR 4
2303: IFFALSE 2343
// begin hc_gallery := MULTIAVATARS ;
2305: LD_ADDR_OWVAR 33
2309: PUSH
2310: LD_STRING MULTIAVATARS
2312: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2313: LD_ADDR_OWVAR 34
2317: PUSH
2318: LD_OWVAR 20
2322: PPUSH
2323: CALL_OW 525
2327: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2328: LD_ADDR_OWVAR 27
2332: PUSH
2333: LD_OWVAR 20
2337: PPUSH
2338: CALL_OW 526
2342: ST_TO_ADDR
// end ; end else
2343: GO 2408
// begin hc_name :=  ;
2345: LD_ADDR_OWVAR 26
2349: PUSH
2350: LD_STRING 
2352: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2353: LD_INT 1
2355: PPUSH
2356: LD_INT 2
2358: PPUSH
2359: CALL_OW 12
2363: PPUSH
2364: LD_VAR 0 2
2368: PPUSH
2369: LD_EXP 20
2373: PPUSH
2374: CALL_OW 380
// hc_importance := 0 ;
2378: LD_ADDR_OWVAR 32
2382: PUSH
2383: LD_INT 0
2385: ST_TO_ADDR
// if Multiplayer then
2386: LD_OWVAR 4
2390: IFFALSE 2408
// begin hc_gallery :=  ;
2392: LD_ADDR_OWVAR 33
2396: PUSH
2397: LD_STRING 
2399: ST_TO_ADDR
// hc_face_number := 0 ;
2400: LD_ADDR_OWVAR 34
2404: PUSH
2405: LD_INT 0
2407: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2408: LD_ADDR_VAR 0 10
2412: PUSH
2413: CALL_OW 44
2417: ST_TO_ADDR
// if global_defined then
2418: LD_LOC 3
2422: IFFALSE 2562
// begin if ( cl = class_soldier ) then
2424: LD_VAR 0 2
2428: PUSH
2429: LD_INT 1
2431: EQUAL
2432: IFFALSE 2452
// j := i + soldiers_created else
2434: LD_ADDR_VAR 0 9
2438: PUSH
2439: LD_VAR 0 8
2443: PUSH
2444: LD_LOC 4
2448: PLUS
2449: ST_TO_ADDR
2450: GO 2462
// j := i ;
2452: LD_ADDR_VAR 0 9
2456: PUSH
2457: LD_VAR 0 8
2461: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2462: LD_LOC 2
2466: PUSH
2467: LD_VAR 0 2
2471: ARRAY
2472: PUSH
2473: LD_VAR 0 9
2477: ARRAY
2478: PPUSH
2479: LD_VAR 0 10
2483: PPUSH
2484: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2488: LD_VAR 0 10
2492: PPUSH
2493: LD_INT 2
2495: PPUSH
2496: LD_LOC 2
2500: PUSH
2501: LD_VAR 0 2
2505: ARRAY
2506: PUSH
2507: LD_VAR 0 9
2511: ARRAY
2512: PPUSH
2513: LD_INT 2
2515: PPUSH
2516: CALL_OW 260
2520: PPUSH
2521: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2525: LD_VAR 0 10
2529: PPUSH
2530: LD_INT 1
2532: PPUSH
2533: LD_LOC 2
2537: PUSH
2538: LD_VAR 0 2
2542: ARRAY
2543: PUSH
2544: LD_VAR 0 9
2548: ARRAY
2549: PPUSH
2550: LD_INT 1
2552: PPUSH
2553: CALL_OW 260
2557: PPUSH
2558: CALL_OW 239
// end ; if building then
2562: LD_VAR 0 6
2566: IFFALSE 2584
// PlaceHumanInUnit ( un , building ) else
2568: LD_VAR 0 10
2572: PPUSH
2573: LD_VAR 0 6
2577: PPUSH
2578: CALL_OW 52
2582: GO 2611
// PlaceUnitXYR ( un , x , y , r , false ) ;
2584: LD_VAR 0 10
2588: PPUSH
2589: LD_VAR 0 3
2593: PPUSH
2594: LD_VAR 0 4
2598: PPUSH
2599: LD_VAR 0 5
2603: PPUSH
2604: LD_INT 0
2606: PPUSH
2607: CALL_OW 50
// result := result ^ [ un ] ;
2611: LD_ADDR_VAR 0 7
2615: PUSH
2616: LD_VAR 0 7
2620: PUSH
2621: LD_VAR 0 10
2625: PUSH
2626: EMPTY
2627: LIST
2628: ADD
2629: ST_TO_ADDR
// end ;
2630: GO 2213
2632: POP
2633: POP
// if not global_defined then
2634: LD_LOC 3
2638: NOT
2639: IFFALSE 2717
// if ( global_units >= cl ) then
2641: LD_LOC 2
2645: PUSH
2646: LD_VAR 0 2
2650: GREATEREQUAL
2651: IFFALSE 2692
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2653: LD_ADDR_LOC 2
2657: PUSH
2658: LD_LOC 2
2662: PPUSH
2663: LD_VAR 0 2
2667: PPUSH
2668: LD_LOC 2
2672: PUSH
2673: LD_VAR 0 2
2677: ARRAY
2678: PUSH
2679: LD_VAR 0 7
2683: ADD
2684: PPUSH
2685: CALL_OW 1
2689: ST_TO_ADDR
2690: GO 2717
// global_units := Replace ( global_units , cl , result ) ;
2692: LD_ADDR_LOC 2
2696: PUSH
2697: LD_LOC 2
2701: PPUSH
2702: LD_VAR 0 2
2706: PPUSH
2707: LD_VAR 0 7
2711: PPUSH
2712: CALL_OW 1
2716: ST_TO_ADDR
// end ;
2717: LD_VAR 0 7
2721: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2722: LD_INT 0
2724: PPUSH
2725: PPUSH
2726: PPUSH
2727: PPUSH
2728: PPUSH
2729: PPUSH
2730: PPUSH
2731: PPUSH
2732: PPUSH
// pos := Side_Positions [ side ] ;
2733: LD_ADDR_VAR 0 3
2737: PUSH
2738: LD_EXP 32
2742: PUSH
2743: LD_VAR 0 1
2747: ARRAY
2748: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2749: LD_ADDR_OWVAR 21
2753: PUSH
2754: LD_EXP 33
2758: PUSH
2759: LD_VAR 0 1
2763: ARRAY
2764: ST_TO_ADDR
// uc_side := side ;
2765: LD_ADDR_OWVAR 20
2769: PUSH
2770: LD_VAR 0 1
2774: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2775: LD_ADDR_VAR 0 4
2779: PUSH
2780: LD_EXP 35
2784: PUSH
2785: LD_VAR 0 3
2789: ARRAY
2790: PUSH
2791: LD_INT 1
2793: ARRAY
2794: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2795: LD_ADDR_VAR 0 5
2799: PUSH
2800: LD_EXP 35
2804: PUSH
2805: LD_VAR 0 3
2809: ARRAY
2810: PUSH
2811: LD_INT 2
2813: ARRAY
2814: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2815: LD_ADDR_VAR 0 6
2819: PUSH
2820: LD_EXP 35
2824: PUSH
2825: LD_VAR 0 3
2829: ARRAY
2830: PUSH
2831: LD_INT 3
2833: ARRAY
2834: ST_TO_ADDR
// if is_depot then
2835: LD_EXP 17
2839: IFFALSE 2972
// begin bc_type = b_depot ;
2841: LD_ADDR_OWVAR 42
2845: PUSH
2846: LD_INT 0
2848: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2849: LD_ADDR_VAR 0 10
2853: PUSH
2854: LD_VAR 0 4
2858: PPUSH
2859: LD_VAR 0 5
2863: PPUSH
2864: LD_VAR 0 6
2868: PPUSH
2869: CALL_OW 47
2873: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2874: LD_VAR 0 10
2878: PPUSH
2879: LD_STRING @
2881: PUSH
2882: LD_VAR 0 1
2886: STR
2887: PPUSH
2888: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2892: LD_VAR 0 10
2896: PPUSH
2897: CALL_OW 274
2901: PPUSH
2902: LD_INT 1
2904: PPUSH
2905: LD_EXP 22
2909: PUSH
2910: LD_INT 1
2912: ARRAY
2913: PPUSH
2914: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2918: LD_VAR 0 10
2922: PPUSH
2923: CALL_OW 274
2927: PPUSH
2928: LD_INT 2
2930: PPUSH
2931: LD_EXP 22
2935: PUSH
2936: LD_INT 2
2938: ARRAY
2939: PPUSH
2940: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2944: LD_VAR 0 10
2948: PPUSH
2949: CALL_OW 274
2953: PPUSH
2954: LD_INT 3
2956: PPUSH
2957: LD_EXP 22
2961: PUSH
2962: LD_INT 3
2964: ARRAY
2965: PPUSH
2966: CALL_OW 277
// end else
2970: GO 3116
// begin for i := 1 to 3 do
2972: LD_ADDR_VAR 0 7
2976: PUSH
2977: DOUBLE
2978: LD_INT 1
2980: DEC
2981: ST_TO_ADDR
2982: LD_INT 3
2984: PUSH
2985: FOR_TO
2986: IFFALSE 3114
// begin r := starting_resources [ i ] ;
2988: LD_ADDR_VAR 0 8
2992: PUSH
2993: LD_EXP 22
2997: PUSH
2998: LD_VAR 0 7
3002: ARRAY
3003: ST_TO_ADDR
// while r >= 10 do
3004: LD_VAR 0 8
3008: PUSH
3009: LD_INT 10
3011: GREATEREQUAL
3012: IFFALSE 3112
// if r > 50 then
3014: LD_VAR 0 8
3018: PUSH
3019: LD_INT 50
3021: GREATER
3022: IFFALSE 3068
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3024: LD_VAR 0 7
3028: PPUSH
3029: LD_INT 5
3031: PPUSH
3032: LD_VAR 0 4
3036: PPUSH
3037: LD_VAR 0 5
3041: PPUSH
3042: LD_INT 4
3044: PPUSH
3045: LD_INT 0
3047: PPUSH
3048: CALL_OW 60
// r := r - 50 ;
3052: LD_ADDR_VAR 0 8
3056: PUSH
3057: LD_VAR 0 8
3061: PUSH
3062: LD_INT 50
3064: MINUS
3065: ST_TO_ADDR
// end else
3066: GO 3110
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3068: LD_VAR 0 7
3072: PPUSH
3073: LD_VAR 0 8
3077: PUSH
3078: LD_INT 10
3080: DIV
3081: PPUSH
3082: LD_VAR 0 4
3086: PPUSH
3087: LD_VAR 0 5
3091: PPUSH
3092: LD_INT 4
3094: PPUSH
3095: LD_INT 0
3097: PPUSH
3098: CALL_OW 60
// r := 0 ;
3102: LD_ADDR_VAR 0 8
3106: PUSH
3107: LD_INT 0
3109: ST_TO_ADDR
// end ;
3110: GO 3004
// end ;
3112: GO 2985
3114: POP
3115: POP
// end ; for r in starting_crates do
3116: LD_ADDR_VAR 0 8
3120: PUSH
3121: LD_EXP 21
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3159
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3129: LD_INT 1
3131: PPUSH
3132: LD_INT 5
3134: PPUSH
3135: LD_VAR 0 4
3139: PPUSH
3140: LD_VAR 0 5
3144: PPUSH
3145: LD_VAR 0 8
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 60
3157: GO 3126
3159: POP
3160: POP
// if def_morale_flags then
3161: LD_EXP 9
3165: IFFALSE 3304
// begin x := start_def [ pos ] [ 1 ] ;
3167: LD_ADDR_VAR 0 4
3171: PUSH
3172: LD_EXP 37
3176: PUSH
3177: LD_VAR 0 3
3181: ARRAY
3182: PUSH
3183: LD_INT 1
3185: ARRAY
3186: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3187: LD_ADDR_VAR 0 5
3191: PUSH
3192: LD_EXP 37
3196: PUSH
3197: LD_VAR 0 3
3201: ARRAY
3202: PUSH
3203: LD_INT 2
3205: ARRAY
3206: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3207: LD_VAR 0 4
3211: PPUSH
3212: LD_VAR 0 5
3216: PPUSH
3217: LD_INT 12
3219: PPUSH
3220: LD_INT 2
3222: PPUSH
3223: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3227: LD_ADDR_EXP 42
3231: PUSH
3232: LD_EXP 42
3236: PUSH
3237: LD_VAR 0 1
3241: PPUSH
3242: LD_VAR 0 4
3246: PPUSH
3247: LD_VAR 0 5
3251: PPUSH
3252: LD_INT 1
3254: PUSH
3255: LD_INT 100
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: PUSH
3262: LD_INT 2
3264: PUSH
3265: LD_INT 50
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 3
3274: PUSH
3275: LD_INT 20
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: LD_INT 20
3284: PUSH
3285: LD_INT 100
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 418
3302: ADD
3303: ST_TO_ADDR
// end ; commander := true ;
3304: LD_ADDR_LOC 1
3308: PUSH
3309: LD_INT 1
3311: ST_TO_ADDR
// soldiers_created := 0 ;
3312: LD_ADDR_LOC 4
3316: PUSH
3317: LD_INT 0
3319: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3320: LD_ADDR_VAR 0 7
3324: PUSH
3325: DOUBLE
3326: LD_INT 1
3328: DEC
3329: ST_TO_ADDR
3330: LD_EXP 18
3334: PUSH
3335: FOR_TO
3336: IFFALSE 3489
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3338: LD_ADDR_VAR 0 4
3342: PUSH
3343: LD_EXP 36
3347: PUSH
3348: LD_VAR 0 3
3352: ARRAY
3353: PUSH
3354: LD_VAR 0 7
3358: ARRAY
3359: PUSH
3360: LD_INT 1
3362: ARRAY
3363: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3364: LD_ADDR_VAR 0 5
3368: PUSH
3369: LD_EXP 36
3373: PUSH
3374: LD_VAR 0 3
3378: ARRAY
3379: PUSH
3380: LD_VAR 0 7
3384: ARRAY
3385: PUSH
3386: LD_INT 2
3388: ARRAY
3389: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3390: LD_ADDR_VAR 0 6
3394: PUSH
3395: LD_EXP 36
3399: PUSH
3400: LD_VAR 0 3
3404: ARRAY
3405: PUSH
3406: LD_VAR 0 7
3410: ARRAY
3411: PUSH
3412: LD_INT 3
3414: ARRAY
3415: ST_TO_ADDR
// bc_type := b_breastwork ;
3416: LD_ADDR_OWVAR 42
3420: PUSH
3421: LD_INT 31
3423: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3424: LD_ADDR_VAR 0 9
3428: PUSH
3429: LD_VAR 0 4
3433: PPUSH
3434: LD_VAR 0 5
3438: PPUSH
3439: LD_VAR 0 6
3443: PPUSH
3444: CALL_OW 47
3448: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3449: LD_INT 1
3451: PPUSH
3452: LD_INT 1
3454: PPUSH
3455: LD_INT 0
3457: PPUSH
3458: LD_INT 0
3460: PPUSH
3461: LD_INT 0
3463: PPUSH
3464: LD_VAR 0 9
3468: PPUSH
3469: CALL 2185 0 6
// soldiers_created := soldiers_created + 1 ;
3473: LD_ADDR_LOC 4
3477: PUSH
3478: LD_LOC 4
3482: PUSH
3483: LD_INT 1
3485: PLUS
3486: ST_TO_ADDR
// end ;
3487: GO 3335
3489: POP
3490: POP
// x := start_def [ pos ] [ 1 ] ;
3491: LD_ADDR_VAR 0 4
3495: PUSH
3496: LD_EXP 37
3500: PUSH
3501: LD_VAR 0 3
3505: ARRAY
3506: PUSH
3507: LD_INT 1
3509: ARRAY
3510: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3511: LD_ADDR_VAR 0 5
3515: PUSH
3516: LD_EXP 37
3520: PUSH
3521: LD_VAR 0 3
3525: ARRAY
3526: PUSH
3527: LD_INT 2
3529: ARRAY
3530: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3531: LD_LOC 8
3535: PUSH
3536: LD_EXP 18
3540: MINUS
3541: PPUSH
3542: LD_INT 1
3544: PPUSH
3545: LD_VAR 0 4
3549: PPUSH
3550: LD_VAR 0 5
3554: PPUSH
3555: LD_INT 5
3557: PPUSH
3558: LD_INT 0
3560: PPUSH
3561: CALL 2185 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3565: LD_LOC 5
3569: PPUSH
3570: LD_INT 2
3572: PPUSH
3573: LD_VAR 0 4
3577: PPUSH
3578: LD_VAR 0 5
3582: PPUSH
3583: LD_INT 5
3585: PPUSH
3586: LD_INT 0
3588: PPUSH
3589: CALL 2185 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3593: LD_LOC 7
3597: PPUSH
3598: LD_INT 3
3600: PPUSH
3601: LD_VAR 0 4
3605: PPUSH
3606: LD_VAR 0 5
3610: PPUSH
3611: LD_INT 5
3613: PPUSH
3614: LD_INT 0
3616: PPUSH
3617: CALL 2185 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3621: LD_LOC 6
3625: PPUSH
3626: LD_INT 4
3628: PPUSH
3629: LD_VAR 0 4
3633: PPUSH
3634: LD_VAR 0 5
3638: PPUSH
3639: LD_INT 5
3641: PPUSH
3642: LD_INT 0
3644: PPUSH
3645: CALL 2185 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3649: LD_EXP 10
3653: PUSH
3654: LD_INT 20
3656: PPUSH
3657: LD_VAR 0 1
3661: PPUSH
3662: CALL_OW 321
3666: PUSH
3667: LD_INT 1
3669: EQUAL
3670: AND
3671: IFFALSE 3688
// SetTech ( tech_SibDet , side , state_researched ) ;
3673: LD_INT 20
3675: PPUSH
3676: LD_VAR 0 1
3680: PPUSH
3681: LD_INT 2
3683: PPUSH
3684: CALL_OW 322
// if def_siberite_bomb = 1 then
3688: LD_EXP 13
3692: PUSH
3693: LD_INT 1
3695: EQUAL
3696: IFFALSE 3730
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3698: LD_INT 25
3700: PPUSH
3701: LD_VAR 0 1
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3713: LD_INT 73
3715: PPUSH
3716: LD_VAR 0 1
3720: PPUSH
3721: LD_INT 1
3723: PPUSH
3724: CALL_OW 322
// end else
3728: GO 3760
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3730: LD_INT 25
3732: PPUSH
3733: LD_VAR 0 1
3737: PPUSH
3738: LD_INT 0
3740: PPUSH
3741: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3745: LD_INT 73
3747: PPUSH
3748: LD_VAR 0 1
3752: PPUSH
3753: LD_INT 0
3755: PPUSH
3756: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3760: LD_INT 24
3762: PPUSH
3763: LD_VAR 0 1
3767: PPUSH
3768: LD_INT 0
3770: PPUSH
3771: CALL_OW 322
// global_defined := true ;
3775: LD_ADDR_LOC 3
3779: PUSH
3780: LD_INT 1
3782: ST_TO_ADDR
// end ;
3783: LD_VAR 0 2
3787: RET
// every 0 0$1 do
3788: GO 3790
3790: DISABLE
// if ( def_siberite_bomb > 1 ) then
3791: LD_EXP 13
3795: PUSH
3796: LD_INT 1
3798: GREATER
3799: IFFALSE 3814
// begin wait ( siberite_bomb_Delay ) ;
3801: LD_EXP 28
3805: PPUSH
3806: CALL_OW 67
// EnableSibFiss ;
3810: CALL 3815 0 0
// end ;
3814: END
// function EnableSibFiss ; var i ; begin
3815: LD_INT 0
3817: PPUSH
3818: PPUSH
// for i := 1 to 8 do
3819: LD_ADDR_VAR 0 2
3823: PUSH
3824: DOUBLE
3825: LD_INT 1
3827: DEC
3828: ST_TO_ADDR
3829: LD_INT 8
3831: PUSH
3832: FOR_TO
3833: IFFALSE 3879
// if Side_Positions [ i ] then
3835: LD_EXP 32
3839: PUSH
3840: LD_VAR 0 2
3844: ARRAY
3845: IFFALSE 3877
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3847: LD_INT 25
3849: PPUSH
3850: LD_VAR 0 2
3854: PPUSH
3855: LD_INT 1
3857: PPUSH
3858: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3862: LD_INT 73
3864: PPUSH
3865: LD_VAR 0 2
3869: PPUSH
3870: LD_INT 1
3872: PPUSH
3873: CALL_OW 322
// end ;
3877: GO 3832
3879: POP
3880: POP
// end ;
3881: LD_VAR 0 1
3885: RET
// function prepare_sides ; var i ; begin
3886: LD_INT 0
3888: PPUSH
3889: PPUSH
// global_units := [ ] ;
3890: LD_ADDR_LOC 2
3894: PUSH
3895: EMPTY
3896: ST_TO_ADDR
// global_defined := false ;
3897: LD_ADDR_LOC 3
3901: PUSH
3902: LD_INT 0
3904: ST_TO_ADDR
// CountClassMembers ;
3905: CALL 3955 0 0
// for i := 1 to 8 do
3909: LD_ADDR_VAR 0 2
3913: PUSH
3914: DOUBLE
3915: LD_INT 1
3917: DEC
3918: ST_TO_ADDR
3919: LD_INT 8
3921: PUSH
3922: FOR_TO
3923: IFFALSE 3948
// if Side_Positions [ i ] then
3925: LD_EXP 32
3929: PUSH
3930: LD_VAR 0 2
3934: ARRAY
3935: IFFALSE 3946
// prepare_side ( i ) ;
3937: LD_VAR 0 2
3941: PPUSH
3942: CALL 2722 0 1
3946: GO 3922
3948: POP
3949: POP
// end ;
3950: LD_VAR 0 1
3954: RET
// function CountClassMembers ; var Mode ; begin
3955: LD_INT 0
3957: PPUSH
3958: PPUSH
// if No_Mechs then
3959: LD_EXP 15
3963: IFFALSE 3975
// Mode := 2 else
3965: LD_ADDR_VAR 0 2
3969: PUSH
3970: LD_INT 2
3972: ST_TO_ADDR
3973: GO 3983
// Mode := 1 ;
3975: LD_ADDR_VAR 0 2
3979: PUSH
3980: LD_INT 1
3982: ST_TO_ADDR
// neng := number_of_people ;
3983: LD_ADDR_LOC 5
3987: PUSH
3988: LD_EXP 19
3992: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
3993: LD_ADDR_LOC 8
3997: PUSH
3998: LD_LOC 5
4002: PUSH
4003: LD_INT 4
4005: PUSH
4006: LD_INT 3
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_VAR 0 2
4017: ARRAY
4018: DIV
4019: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4020: LD_LOC 8
4024: PUSH
4025: LD_EXP 18
4029: LESS
4030: IFFALSE 4042
// nsol := number_of_breastworks ;
4032: LD_ADDR_LOC 8
4036: PUSH
4037: LD_EXP 18
4041: ST_TO_ADDR
// neng := neng - nsol ;
4042: LD_ADDR_LOC 5
4046: PUSH
4047: LD_LOC 5
4051: PUSH
4052: LD_LOC 8
4056: MINUS
4057: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4058: LD_ADDR_LOC 6
4062: PUSH
4063: LD_LOC 5
4067: PUSH
4068: LD_INT 3
4070: PUSH
4071: LD_INT 2
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PUSH
4078: LD_VAR 0 2
4082: ARRAY
4083: DIV
4084: ST_TO_ADDR
// if ( nsci < 1 ) then
4085: LD_LOC 6
4089: PUSH
4090: LD_INT 1
4092: LESS
4093: IFFALSE 4103
// nsci := 1 ;
4095: LD_ADDR_LOC 6
4099: PUSH
4100: LD_INT 1
4102: ST_TO_ADDR
// neng := neng - nsci ;
4103: LD_ADDR_LOC 5
4107: PUSH
4108: LD_LOC 5
4112: PUSH
4113: LD_LOC 6
4117: MINUS
4118: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4119: LD_ADDR_LOC 7
4123: PUSH
4124: LD_LOC 5
4128: PUSH
4129: LD_INT 2
4131: DIV
4132: PUSH
4133: LD_INT 0
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: LD_VAR 0 2
4144: ARRAY
4145: ST_TO_ADDR
// neng := neng - nmech ;
4146: LD_ADDR_LOC 5
4150: PUSH
4151: LD_LOC 5
4155: PUSH
4156: LD_LOC 7
4160: MINUS
4161: ST_TO_ADDR
// if ( neng < 1 ) then
4162: LD_LOC 5
4166: PUSH
4167: LD_INT 1
4169: LESS
4170: IFFALSE 4180
// neng := 1 ;
4172: LD_ADDR_LOC 5
4176: PUSH
4177: LD_INT 1
4179: ST_TO_ADDR
// end ;
4180: LD_VAR 0 1
4184: RET
// starting begin disable ( 98 ) ;
4185: LD_INT 98
4187: DISABLE_MARKED
// disable ( 99 ) ;
4188: LD_INT 99
4190: DISABLE_MARKED
// disable ( 400 ) ;
4191: LD_INT 400
4193: DISABLE_MARKED
// disable ( 401 ) ;
4194: LD_INT 401
4196: DISABLE_MARKED
// mp_selectmsg := true ;
4197: LD_ADDR_OWVAR 13
4201: PUSH
4202: LD_INT 1
4204: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4205: CALL 784 0 0
// init_map ;
4209: CALL 0 0 0
// init_respawning ;
4213: CALL 12971 0 0
// set_shared_visions_and_alliances ;
4217: CALL 1876 0 0
// ResetFog ;
4221: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4225: LD_OWVAR 2
4229: PPUSH
4230: CALL_OW 520
// prepare_sides ;
4234: CALL 3886 0 0
// Init_Win_Condition ;
4238: CALL 6952 0 0
// ShowTimer ;
4242: CALL 6530 0 0
// music_nat := Side_Nations [ your_side ] ;
4246: LD_ADDR_OWVAR 71
4250: PUSH
4251: LD_EXP 33
4255: PUSH
4256: LD_OWVAR 2
4260: ARRAY
4261: ST_TO_ADDR
// if IAmSpec then
4262: CALL_OW 531
4266: IFFALSE 4290
// begin fogoff ( true ) ;
4268: LD_INT 1
4270: PPUSH
4271: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
4275: LD_INT 104
4277: PPUSH
4278: LD_INT 69
4280: PPUSH
4281: CALL_OW 86
// enable ( 400 ) ;
4285: LD_INT 400
4287: ENABLE_MARKED
// end else
4288: GO 4336
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4290: LD_EXP 37
4294: PUSH
4295: LD_EXP 32
4299: PUSH
4300: LD_OWVAR 2
4304: ARRAY
4305: ARRAY
4306: PUSH
4307: LD_INT 1
4309: ARRAY
4310: PPUSH
4311: LD_EXP 37
4315: PUSH
4316: LD_EXP 32
4320: PUSH
4321: LD_OWVAR 2
4325: ARRAY
4326: ARRAY
4327: PUSH
4328: LD_INT 2
4330: ARRAY
4331: PPUSH
4332: CALL_OW 86
// end ; AnimateTrees ( true ) ;
4336: LD_INT 1
4338: PPUSH
4339: CALL_OW 573
// BuildUpAreas := [ base_nw , base_ne , base_sw , base_se ] ;
4343: LD_ADDR_EXP 54
4347: PUSH
4348: LD_INT 8
4350: PUSH
4351: LD_INT 9
4353: PUSH
4354: LD_INT 10
4356: PUSH
4357: LD_INT 11
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: ST_TO_ADDR
// BeginBuildUp ;
4366: CALL 13465 0 0
// end ; end_of_file
4370: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
4371: LD_VAR 0 1
4375: PPUSH
4376: CALL_OW 266
4380: PUSH
4381: LD_INT 0
4383: PUSH
4384: LD_INT 1
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: IN
4391: IFFALSE 4416
// SetBName ( b , @ & GetSide ( b ) ) ;
4393: LD_VAR 0 1
4397: PPUSH
4398: LD_STRING @
4400: PUSH
4401: LD_VAR 0 1
4405: PPUSH
4406: CALL_OW 255
4410: STR
4411: PPUSH
4412: CALL_OW 500
// end ;
4416: PPOPN 2
4418: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
4419: LD_VAR 0 1
4423: PPUSH
4424: CALL_OW 266
4428: PUSH
4429: LD_INT 0
4431: PUSH
4432: LD_INT 1
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: IN
4439: IFFALSE 4464
// SetBName ( b , @ & GetSide ( b ) ) ;
4441: LD_VAR 0 1
4445: PPUSH
4446: LD_STRING @
4448: PUSH
4449: LD_VAR 0 1
4453: PPUSH
4454: CALL_OW 255
4458: STR
4459: PPUSH
4460: CALL_OW 500
// end ;
4464: PPOPN 3
4466: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
4467: LD_INT 0
4469: PPUSH
4470: PPUSH
4471: PPUSH
4472: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
4473: LD_VAR 0 1
4477: PPUSH
4478: CALL_OW 257
4482: PUSH
4483: LD_INT 12
4485: PUSH
4486: LD_INT 15
4488: PUSH
4489: LD_INT 17
4491: PUSH
4492: LD_INT 16
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: IN
4501: PUSH
4502: LD_VAR 0 1
4506: PPUSH
4507: CALL_OW 263
4511: PUSH
4512: LD_INT 5
4514: EQUAL
4515: OR
4516: IFFALSE 4527
// ApeKilled ( j ) ;
4518: LD_VAR 0 1
4522: PPUSH
4523: CALL 6194 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
4527: LD_VAR 0 1
4531: PPUSH
4532: CALL_OW 266
4536: PUSH
4537: LD_INT 0
4539: PUSH
4540: LD_INT 1
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: IN
4547: IFFALSE 4629
// begin pos := Side_Positions [ GetSide ( j ) ] ;
4549: LD_ADDR_VAR 0 4
4553: PUSH
4554: LD_EXP 32
4558: PUSH
4559: LD_VAR 0 1
4563: PPUSH
4564: CALL_OW 255
4568: ARRAY
4569: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
4570: LD_ADDR_VAR 0 2
4574: PUSH
4575: LD_EXP 37
4579: PUSH
4580: LD_VAR 0 4
4584: ARRAY
4585: PUSH
4586: LD_INT 1
4588: ARRAY
4589: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: LD_EXP 37
4599: PUSH
4600: LD_VAR 0 4
4604: ARRAY
4605: PUSH
4606: LD_INT 2
4608: ARRAY
4609: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
4610: LD_VAR 0 2
4614: PPUSH
4615: LD_VAR 0 3
4619: PPUSH
4620: CALL_OW 420
4624: PPUSH
4625: CALL_OW 419
// end ; end ;
4629: PPOPN 5
4631: END
// on VehicleConstructed ( veh , fac ) do var side ;
4632: LD_INT 0
4634: PPUSH
// begin if GetControl ( veh ) = control_apeman then
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 263
4644: PUSH
4645: LD_INT 5
4647: EQUAL
4648: IFFALSE 4790
// begin side := GetSide ( veh ) ;
4650: LD_ADDR_VAR 0 3
4654: PUSH
4655: LD_VAR 0 1
4659: PPUSH
4660: CALL_OW 255
4664: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
4665: LD_ADDR_EXP 48
4669: PUSH
4670: LD_EXP 48
4674: PPUSH
4675: LD_VAR 0 3
4679: PPUSH
4680: LD_EXP 48
4684: PUSH
4685: LD_VAR 0 3
4689: ARRAY
4690: PPUSH
4691: LD_INT 52
4693: PUSH
4694: EMPTY
4695: LIST
4696: PPUSH
4697: CALL_OW 72
4701: PUSH
4702: LD_INT 22
4704: PUSH
4705: LD_VAR 0 3
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: LD_INT 2
4716: PUSH
4717: LD_INT 33
4719: PUSH
4720: LD_INT 5
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 25
4729: PUSH
4730: LD_INT 12
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PUSH
4737: LD_INT 25
4739: PUSH
4740: LD_INT 15
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: LD_INT 25
4749: PUSH
4750: LD_INT 16
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 25
4759: PUSH
4760: LD_INT 17
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 69
4783: UNION
4784: PPUSH
4785: CALL_OW 1
4789: ST_TO_ADDR
// end ; end ;
4790: PPOPN 3
4792: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
4793: LD_VAR 0 1
4797: PPUSH
4798: LD_VAR 0 2
4802: PPUSH
4803: LD_VAR 0 3
4807: PPUSH
4808: LD_OWVAR 2
4812: PPUSH
4813: CALL 6713 0 4
4817: PPOPN 3
4819: END
// every 1 1$0 + 0 0$0.3 do
4820: GO 4822
4822: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
4823: LD_INT 4
4825: PPUSH
4826: LD_INT 5
4828: PPUSH
4829: CALL_OW 12
4833: PPUSH
4834: LD_INT 1
4836: PPUSH
4837: CALL_OW 57
// enable ;
4841: ENABLE
// end ;
4842: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4843: GO 4845
4845: DISABLE
4846: LD_INT 0
4848: PPUSH
4849: PPUSH
// begin case tick of 1 .. 1 1$0 :
4850: LD_OWVAR 1
4854: PUSH
4855: LD_INT 1
4857: DOUBLE
4858: GREATEREQUAL
4859: IFFALSE 4867
4861: LD_INT 2100
4863: DOUBLE
4864: LESSEQUAL
4865: IFTRUE 4869
4867: GO 4897
4869: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4870: LD_EXP 23
4874: PUSH
4875: LD_INT 100
4877: DIVREAL
4878: PUSH
4879: LD_INT 525
4881: PPUSH
4882: LD_INT 1050
4884: PPUSH
4885: CALL_OW 12
4889: MUL
4890: PPUSH
4891: CALL_OW 67
4895: GO 5199
4897: LD_INT 2100
4899: PUSH
4900: LD_INT 1
4902: PLUS
4903: DOUBLE
4904: GREATEREQUAL
4905: IFFALSE 4913
4907: LD_INT 10500
4909: DOUBLE
4910: LESSEQUAL
4911: IFTRUE 4915
4913: GO 4943
4915: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4916: LD_EXP 23
4920: PUSH
4921: LD_INT 100
4923: DIVREAL
4924: PUSH
4925: LD_INT 1050
4927: PPUSH
4928: LD_INT 1750
4930: PPUSH
4931: CALL_OW 12
4935: MUL
4936: PPUSH
4937: CALL_OW 67
4941: GO 5199
4943: LD_INT 10500
4945: PUSH
4946: LD_INT 1
4948: PLUS
4949: DOUBLE
4950: GREATEREQUAL
4951: IFFALSE 4959
4953: LD_INT 21000
4955: DOUBLE
4956: LESSEQUAL
4957: IFTRUE 4961
4959: GO 4989
4961: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4962: LD_EXP 23
4966: PUSH
4967: LD_INT 100
4969: DIVREAL
4970: PUSH
4971: LD_INT 1750
4973: PPUSH
4974: LD_INT 2100
4976: PPUSH
4977: CALL_OW 12
4981: MUL
4982: PPUSH
4983: CALL_OW 67
4987: GO 5199
4989: LD_INT 21000
4991: PUSH
4992: LD_INT 1
4994: PLUS
4995: DOUBLE
4996: GREATEREQUAL
4997: IFFALSE 5005
4999: LD_INT 42000
5001: DOUBLE
5002: LESSEQUAL
5003: IFTRUE 5007
5005: GO 5035
5007: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5008: LD_EXP 23
5012: PUSH
5013: LD_INT 100
5015: DIVREAL
5016: PUSH
5017: LD_INT 2100
5019: PPUSH
5020: LD_INT 2275
5022: PPUSH
5023: CALL_OW 12
5027: MUL
5028: PPUSH
5029: CALL_OW 67
5033: GO 5199
5035: LD_INT 42000
5037: PUSH
5038: LD_INT 1
5040: PLUS
5041: DOUBLE
5042: GREATEREQUAL
5043: IFFALSE 5051
5045: LD_INT 63000
5047: DOUBLE
5048: LESSEQUAL
5049: IFTRUE 5053
5051: GO 5081
5053: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5054: LD_EXP 23
5058: PUSH
5059: LD_INT 100
5061: DIVREAL
5062: PUSH
5063: LD_INT 2275
5065: PPUSH
5066: LD_INT 2450
5068: PPUSH
5069: CALL_OW 12
5073: MUL
5074: PPUSH
5075: CALL_OW 67
5079: GO 5199
5081: LD_INT 63000
5083: PUSH
5084: LD_INT 1
5086: PLUS
5087: DOUBLE
5088: GREATEREQUAL
5089: IFFALSE 5097
5091: LD_INT 105000
5093: DOUBLE
5094: LESSEQUAL
5095: IFTRUE 5099
5097: GO 5127
5099: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5100: LD_EXP 23
5104: PUSH
5105: LD_INT 100
5107: DIVREAL
5108: PUSH
5109: LD_INT 2450
5111: PPUSH
5112: LD_INT 2800
5114: PPUSH
5115: CALL_OW 12
5119: MUL
5120: PPUSH
5121: CALL_OW 67
5125: GO 5199
5127: LD_INT 105000
5129: PUSH
5130: LD_INT 1
5132: PLUS
5133: DOUBLE
5134: GREATEREQUAL
5135: IFFALSE 5143
5137: LD_INT 630000
5139: DOUBLE
5140: LESSEQUAL
5141: IFTRUE 5145
5143: GO 5173
5145: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5146: LD_EXP 23
5150: PUSH
5151: LD_INT 100
5153: DIVREAL
5154: PUSH
5155: LD_INT 2800
5157: PPUSH
5158: LD_INT 3500
5160: PPUSH
5161: CALL_OW 12
5165: MUL
5166: PPUSH
5167: CALL_OW 67
5171: GO 5199
5173: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5174: LD_EXP 23
5178: PUSH
5179: LD_INT 100
5181: DIVREAL
5182: PUSH
5183: LD_INT 3500
5185: PPUSH
5186: LD_INT 3850
5188: PPUSH
5189: CALL_OW 12
5193: MUL
5194: PPUSH
5195: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5199: LD_ADDR_VAR 0 2
5203: PUSH
5204: LD_INT 3
5206: PPUSH
5207: LD_INT 5
5209: PPUSH
5210: CALL_OW 12
5214: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5215: LD_ADDR_VAR 0 1
5219: PUSH
5220: LD_EXP 32
5224: PUSH
5225: LD_INT 0
5227: PUSH
5228: EMPTY
5229: LIST
5230: DIFF
5231: PUSH
5232: FOR_IN
5233: IFFALSE 5273
// CreateCratesArea ( amount , [ base_nw , base_ne , base_sw , base_se ] [ i ] , true ) ;
5235: LD_VAR 0 2
5239: PPUSH
5240: LD_INT 8
5242: PUSH
5243: LD_INT 9
5245: PUSH
5246: LD_INT 10
5248: PUSH
5249: LD_INT 11
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: PUSH
5258: LD_VAR 0 1
5262: ARRAY
5263: PPUSH
5264: LD_INT 1
5266: PPUSH
5267: CALL_OW 55
5271: GO 5232
5273: POP
5274: POP
// enable ;
5275: ENABLE
// end ;
5276: PPOPN 2
5278: END
// every 1 1$0 trigger def_shipments_density do
5279: LD_EXP 5
5283: IFFALSE 5319
5285: GO 5287
5287: DISABLE
// begin CreateCratesArea ( 5 , map_center , true ) ;
5288: LD_INT 5
5290: PPUSH
5291: LD_INT 7
5293: PPUSH
5294: LD_INT 1
5296: PPUSH
5297: CALL_OW 55
// wait ( 3 3$0 - ( 1 1$0 * def_shipments_density ) ) ;
5301: LD_INT 6300
5303: PUSH
5304: LD_INT 2100
5306: PUSH
5307: LD_EXP 5
5311: MUL
5312: MINUS
5313: PPUSH
5314: CALL_OW 67
// enable ;
5318: ENABLE
// end ; end_of_file
5319: END
// every 20 20$00 trigger apemanNumber do
5320: LD_EXP 45
5324: IFFALSE 5357
5326: GO 5328
5328: DISABLE
// begin enable ;
5329: ENABLE
// if apeLevel >= 8 then
5330: LD_EXP 50
5334: PUSH
5335: LD_INT 8
5337: GREATEREQUAL
5338: IFFALSE 5343
// disable else
5340: DISABLE
5341: GO 5357
// apeLevel := apeLevel + 1 ;
5343: LD_ADDR_EXP 50
5347: PUSH
5348: LD_EXP 50
5352: PUSH
5353: LD_INT 1
5355: PLUS
5356: ST_TO_ADDR
// end ;
5357: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5358: LD_EXP 45
5362: PUSH
5363: LD_EXP 46
5367: LESS
5368: IFFALSE 5508
5370: GO 5372
5372: DISABLE
5373: LD_INT 0
5375: PPUSH
5376: PPUSH
5377: PPUSH
5378: PPUSH
// begin enable ;
5379: ENABLE
// for i := 1 to apemanPos do
5380: LD_ADDR_VAR 0 1
5384: PUSH
5385: DOUBLE
5386: LD_INT 1
5388: DEC
5389: ST_TO_ADDR
5390: LD_EXP 48
5394: PUSH
5395: FOR_TO
5396: IFFALSE 5506
// begin if apemanPlayerCount [ i ] then
5398: LD_EXP 49
5402: PUSH
5403: LD_VAR 0 1
5407: ARRAY
5408: IFFALSE 5504
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5410: LD_EXP 49
5414: PUSH
5415: LD_VAR 0 1
5419: ARRAY
5420: PUSH
5421: LD_EXP 48
5425: PUSH
5426: LD_VAR 0 1
5430: ARRAY
5431: GREATER
5432: IFFALSE 5504
// begin ape := PrepareApeman ;
5434: LD_ADDR_VAR 0 2
5438: PUSH
5439: CALL 6003 0 0
5443: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5444: LD_VAR 0 2
5448: PPUSH
5449: LD_EXP 51
5453: PUSH
5454: LD_VAR 0 1
5458: ARRAY
5459: PPUSH
5460: LD_INT 0
5462: PPUSH
5463: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5467: LD_ADDR_EXP 48
5471: PUSH
5472: LD_EXP 48
5476: PPUSH
5477: LD_VAR 0 1
5481: PPUSH
5482: LD_EXP 48
5486: PUSH
5487: LD_VAR 0 1
5491: ARRAY
5492: PUSH
5493: LD_VAR 0 2
5497: UNION
5498: PPUSH
5499: CALL_OW 1
5503: ST_TO_ADDR
// end ; end ; end ;
5504: GO 5395
5506: POP
5507: POP
// end ;
5508: PPOPN 4
5510: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5511: LD_INT 0
5513: PPUSH
5514: PPUSH
5515: PPUSH
5516: PPUSH
5517: PPUSH
5518: PPUSH
5519: PPUSH
// playersAmount := 0 ;
5520: LD_ADDR_VAR 0 3
5524: PUSH
5525: LD_INT 0
5527: ST_TO_ADDR
// _apeAreas := [ north_apeman , south_apeman ] ;
5528: LD_ADDR_VAR 0 7
5532: PUSH
5533: LD_INT 1
5535: PUSH
5536: LD_INT 2
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5543: LD_ADDR_EXP 51
5547: PUSH
5548: LD_INT 0
5550: PUSH
5551: LD_INT 0
5553: PUSH
5554: LD_INT 0
5556: PUSH
5557: LD_INT 0
5559: PUSH
5560: LD_INT 0
5562: PUSH
5563: LD_INT 0
5565: PUSH
5566: LD_INT 0
5568: PUSH
5569: LD_INT 0
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: ST_TO_ADDR
// for j = 1 to Side_Positions do
5582: LD_ADDR_VAR 0 4
5586: PUSH
5587: DOUBLE
5588: LD_INT 1
5590: DEC
5591: ST_TO_ADDR
5592: LD_EXP 32
5596: PUSH
5597: FOR_TO
5598: IFFALSE 5665
// if Side_Positions [ j ] then
5600: LD_EXP 32
5604: PUSH
5605: LD_VAR 0 4
5609: ARRAY
5610: IFFALSE 5663
// begin playersAmount := playersAmount + 1 ;
5612: LD_ADDR_VAR 0 3
5616: PUSH
5617: LD_VAR 0 3
5621: PUSH
5622: LD_INT 1
5624: PLUS
5625: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5626: LD_ADDR_EXP 51
5630: PUSH
5631: LD_EXP 51
5635: PPUSH
5636: LD_VAR 0 4
5640: PPUSH
5641: LD_VAR 0 7
5645: PUSH
5646: LD_EXP 32
5650: PUSH
5651: LD_VAR 0 4
5655: ARRAY
5656: ARRAY
5657: PPUSH
5658: CALL_OW 1
5662: ST_TO_ADDR
// end ;
5663: GO 5597
5665: POP
5666: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5667: LD_ADDR_EXP 47
5671: PUSH
5672: LD_INT 3
5674: PUSH
5675: LD_EXP 27
5679: MUL
5680: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5681: LD_ADDR_EXP 45
5685: PUSH
5686: LD_VAR 0 3
5690: PUSH
5691: LD_EXP 47
5695: MUL
5696: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5697: LD_ADDR_EXP 46
5701: PUSH
5702: LD_EXP 45
5706: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5707: LD_ADDR_EXP 48
5711: PUSH
5712: LD_INT 0
5714: PUSH
5715: LD_INT 0
5717: PUSH
5718: LD_INT 0
5720: PUSH
5721: LD_INT 0
5723: PUSH
5724: LD_INT 0
5726: PUSH
5727: LD_INT 0
5729: PUSH
5730: LD_INT 0
5732: PUSH
5733: LD_INT 0
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5746: LD_ADDR_EXP 49
5750: PUSH
5751: LD_INT 0
5753: PUSH
5754: LD_INT 0
5756: PUSH
5757: LD_INT 0
5759: PUSH
5760: LD_INT 0
5762: PUSH
5763: LD_INT 0
5765: PUSH
5766: LD_INT 0
5768: PUSH
5769: LD_INT 0
5771: PUSH
5772: LD_INT 0
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: ST_TO_ADDR
// apeLevel := 1 ;
5785: LD_ADDR_EXP 50
5789: PUSH
5790: LD_INT 1
5792: ST_TO_ADDR
// if not apemanNumber then
5793: LD_EXP 45
5797: NOT
5798: IFFALSE 5802
// exit ;
5800: GO 5998
// for i := 1 to apemanPerPlayer do
5802: LD_ADDR_VAR 0 2
5806: PUSH
5807: DOUBLE
5808: LD_INT 1
5810: DEC
5811: ST_TO_ADDR
5812: LD_EXP 47
5816: PUSH
5817: FOR_TO
5818: IFFALSE 5996
// begin for j := 1 to Side_Positions do
5820: LD_ADDR_VAR 0 4
5824: PUSH
5825: DOUBLE
5826: LD_INT 1
5828: DEC
5829: ST_TO_ADDR
5830: LD_EXP 32
5834: PUSH
5835: FOR_TO
5836: IFFALSE 5992
// if Side_Positions [ j ] then
5838: LD_EXP 32
5842: PUSH
5843: LD_VAR 0 4
5847: ARRAY
5848: IFFALSE 5990
// begin pos := Side_Positions [ j ] ;
5850: LD_ADDR_VAR 0 6
5854: PUSH
5855: LD_EXP 32
5859: PUSH
5860: LD_VAR 0 4
5864: ARRAY
5865: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5866: LD_ADDR_EXP 49
5870: PUSH
5871: LD_EXP 49
5875: PPUSH
5876: LD_VAR 0 4
5880: PPUSH
5881: LD_EXP 49
5885: PUSH
5886: LD_VAR 0 4
5890: ARRAY
5891: PUSH
5892: LD_INT 1
5894: PLUS
5895: PPUSH
5896: CALL_OW 1
5900: ST_TO_ADDR
// ape := PrepareApeman ;
5901: LD_ADDR_VAR 0 5
5905: PUSH
5906: CALL 6003 0 0
5910: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5911: LD_ADDR_EXP 48
5915: PUSH
5916: LD_EXP 48
5920: PPUSH
5921: LD_VAR 0 4
5925: PPUSH
5926: LD_EXP 48
5930: PUSH
5931: LD_VAR 0 4
5935: ARRAY
5936: PPUSH
5937: LD_EXP 48
5941: PUSH
5942: LD_VAR 0 4
5946: ARRAY
5947: PUSH
5948: LD_INT 1
5950: PLUS
5951: PPUSH
5952: LD_VAR 0 5
5956: PPUSH
5957: CALL_OW 1
5961: PPUSH
5962: CALL_OW 1
5966: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5967: LD_VAR 0 5
5971: PPUSH
5972: LD_EXP 51
5976: PUSH
5977: LD_VAR 0 4
5981: ARRAY
5982: PPUSH
5983: LD_INT 0
5985: PPUSH
5986: CALL_OW 49
// end ;
5990: GO 5835
5992: POP
5993: POP
// end ;
5994: GO 5817
5996: POP
5997: POP
// end ;
5998: LD_VAR 0 1
6002: RET
// export function PrepareApeman ; var bonus ; begin
6003: LD_INT 0
6005: PPUSH
6006: PPUSH
// uc_side := 0 ;
6007: LD_ADDR_OWVAR 20
6011: PUSH
6012: LD_INT 0
6014: ST_TO_ADDR
// uc_nation := 0 ;
6015: LD_ADDR_OWVAR 21
6019: PUSH
6020: LD_INT 0
6022: ST_TO_ADDR
// InitHc ;
6023: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6027: LD_ADDR_VAR 0 2
6031: PUSH
6032: LD_INT 1
6034: NEG
6035: PUSH
6036: LD_INT 0
6038: PUSH
6039: LD_INT 1
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: LIST
6046: PUSH
6047: LD_INT 25
6049: PUSH
6050: LD_INT 12
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PPUSH
6057: CALL_OW 69
6061: PUSH
6062: LD_INT 3
6064: MOD
6065: PUSH
6066: LD_INT 1
6068: PLUS
6069: ARRAY
6070: ST_TO_ADDR
// hc_class := class_apeman ;
6071: LD_ADDR_OWVAR 28
6075: PUSH
6076: LD_INT 12
6078: ST_TO_ADDR
// hc_gallery :=  ;
6079: LD_ADDR_OWVAR 33
6083: PUSH
6084: LD_STRING 
6086: ST_TO_ADDR
// hc_name :=  ;
6087: LD_ADDR_OWVAR 26
6091: PUSH
6092: LD_STRING 
6094: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6095: LD_ADDR_OWVAR 31
6099: PUSH
6100: LD_EXP 50
6104: PUSH
6105: LD_VAR 0 2
6109: PLUS
6110: PUSH
6111: LD_EXP 50
6115: PUSH
6116: LD_VAR 0 2
6120: PLUS
6121: PUSH
6122: LD_EXP 50
6126: PUSH
6127: LD_VAR 0 2
6131: PLUS
6132: PUSH
6133: LD_EXP 50
6137: PUSH
6138: LD_VAR 0 2
6142: PLUS
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6150: LD_ADDR_OWVAR 35
6154: PUSH
6155: LD_INT 10
6157: PUSH
6158: LD_VAR 0 2
6162: MUL
6163: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6164: LD_ADDR_OWVAR 29
6168: PUSH
6169: LD_INT 12
6171: PUSH
6172: LD_INT 10
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: ST_TO_ADDR
// result := CreateHuman ;
6179: LD_ADDR_VAR 0 1
6183: PUSH
6184: CALL_OW 44
6188: ST_TO_ADDR
// end ;
6189: LD_VAR 0 1
6193: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6194: LD_INT 0
6196: PPUSH
6197: PPUSH
6198: PPUSH
// if not ape then
6199: LD_VAR 0 1
6203: NOT
6204: IFFALSE 6208
// exit ;
6206: GO 6333
// side := GetSide ( ape ) ;
6208: LD_ADDR_VAR 0 3
6212: PUSH
6213: LD_VAR 0 1
6217: PPUSH
6218: CALL_OW 255
6222: ST_TO_ADDR
// if not side then
6223: LD_VAR 0 3
6227: NOT
6228: IFFALSE 6282
// begin for i = 1 to apemanPos do
6230: LD_ADDR_VAR 0 4
6234: PUSH
6235: DOUBLE
6236: LD_INT 1
6238: DEC
6239: ST_TO_ADDR
6240: LD_EXP 48
6244: PUSH
6245: FOR_TO
6246: IFFALSE 6280
// if ape in apemanPos [ i ] then
6248: LD_VAR 0 1
6252: PUSH
6253: LD_EXP 48
6257: PUSH
6258: LD_VAR 0 4
6262: ARRAY
6263: IN
6264: IFFALSE 6278
// begin side := i ;
6266: LD_ADDR_VAR 0 3
6270: PUSH
6271: LD_VAR 0 4
6275: ST_TO_ADDR
// break ;
6276: GO 6280
// end ;
6278: GO 6245
6280: POP
6281: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6282: LD_ADDR_EXP 48
6286: PUSH
6287: LD_EXP 48
6291: PPUSH
6292: LD_VAR 0 3
6296: PPUSH
6297: LD_EXP 48
6301: PUSH
6302: LD_VAR 0 3
6306: ARRAY
6307: PUSH
6308: LD_VAR 0 1
6312: DIFF
6313: PPUSH
6314: CALL_OW 1
6318: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6319: LD_ADDR_EXP 45
6323: PUSH
6324: LD_EXP 45
6328: PUSH
6329: LD_INT 1
6331: MINUS
6332: ST_TO_ADDR
// end ; end_of_file
6333: LD_VAR 0 2
6337: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6338: LD_INT 0
6340: PPUSH
6341: PPUSH
// for un in battle_flags_id do
6342: LD_ADDR_VAR 0 2
6346: PUSH
6347: LD_EXP 42
6351: PUSH
6352: FOR_IN
6353: IFFALSE 6428
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6355: LD_VAR 0 2
6359: PPUSH
6360: LD_INT 1
6362: PUSH
6363: LD_LOC 9
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 2
6374: PUSH
6375: LD_LOC 9
6379: PUSH
6380: LD_INT 2
6382: DIV
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: LD_INT 3
6390: PUSH
6391: LD_LOC 9
6395: PUSH
6396: LD_INT 5
6398: DIV
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PUSH
6404: LD_INT 20
6406: PUSH
6407: LD_LOC 9
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: PPUSH
6422: CALL_OW 423
6426: GO 6352
6428: POP
6429: POP
// end ;
6430: LD_VAR 0 1
6434: RET
// every 0 0$0.1 do var un ;
6435: GO 6437
6437: DISABLE
6438: LD_INT 0
6440: PPUSH
// begin if not def_morale_flags then
6441: LD_EXP 9
6445: NOT
6446: IFFALSE 6450
// exit ;
6448: GO 6527
// if not morale_decreasing_time then
6450: LD_EXP 24
6454: NOT
6455: IFFALSE 6459
// exit ;
6457: GO 6527
// strength = 100 ;
6459: LD_ADDR_LOC 9
6463: PUSH
6464: LD_INT 100
6466: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6467: LD_EXP 24
6471: PPUSH
6472: CALL_OW 67
// strength := strength - 1 ;
6476: LD_ADDR_LOC 9
6480: PUSH
6481: LD_LOC 9
6485: PUSH
6486: LD_INT 1
6488: MINUS
6489: ST_TO_ADDR
// Update_Flags ;
6490: CALL 6338 0 0
// until not strength ;
6494: LD_LOC 9
6498: NOT
6499: IFFALSE 6467
// for un in battle_flags_id do
6501: LD_ADDR_VAR 0 1
6505: PUSH
6506: LD_EXP 42
6510: PUSH
6511: FOR_IN
6512: IFFALSE 6525
// KillBattleFlag ( un ) ;
6514: LD_VAR 0 1
6518: PPUSH
6519: CALL_OW 419
6523: GO 6511
6525: POP
6526: POP
// end ; end_of_file
6527: PPOPN 1
6529: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
6530: LD_INT 0
6532: PPUSH
6533: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
6534: LD_ADDR_VAR 0 2
6538: PUSH
6539: LD_STRING #Multi1x1-Time
6541: PUSH
6542: LD_OWVAR 1
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: ST_TO_ADDR
// if WaitServerStrings then
6551: LD_EXP 53
6555: IFFALSE 6573
// AllStrings = AllStrings ^ WaitServerStrings ;
6557: LD_ADDR_VAR 0 2
6561: PUSH
6562: LD_VAR 0 2
6566: PUSH
6567: LD_EXP 53
6571: ADD
6572: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
6573: LD_INT 0
6575: PUSH
6576: LD_EXP 28
6580: PUSH
6581: LD_OWVAR 1
6585: MINUS
6586: LESSEQUAL
6587: IFFALSE 6618
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
6589: LD_ADDR_VAR 0 2
6593: PUSH
6594: LD_VAR 0 2
6598: PUSH
6599: LD_STRING #allowedsibbomb
6601: PUSH
6602: LD_EXP 28
6606: PUSH
6607: LD_OWVAR 1
6611: MINUS
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: ADD
6617: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
6618: LD_INT 0
6620: PUSH
6621: LD_EXP 56
6625: PUSH
6626: LD_OWVAR 1
6630: MINUS
6631: LESSEQUAL
6632: IFFALSE 6663
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
6634: LD_ADDR_VAR 0 2
6638: PUSH
6639: LD_VAR 0 2
6643: PUSH
6644: LD_STRING #builduptime
6646: PUSH
6647: LD_EXP 56
6651: PUSH
6652: LD_OWVAR 1
6656: MINUS
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: ADD
6662: ST_TO_ADDR
// if ( ExtraStrings ) then
6663: LD_EXP 52
6667: IFFALSE 6689
// AllStrings := AllStrings ^  ^ ExtraStrings ;
6669: LD_ADDR_VAR 0 2
6673: PUSH
6674: LD_VAR 0 2
6678: PUSH
6679: LD_STRING 
6681: ADD
6682: PUSH
6683: LD_EXP 52
6687: ADD
6688: ST_TO_ADDR
// Display_Strings := AllStrings ;
6689: LD_ADDR_OWVAR 47
6693: PUSH
6694: LD_VAR 0 2
6698: ST_TO_ADDR
// end ;
6699: LD_VAR 0 1
6703: RET
// every 0 0$1 do
6704: GO 6706
6706: DISABLE
// begin ShowTimer ;
6707: CALL 6530 0 0
// enable ;
6711: ENABLE
// end ; end_of_file
6712: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
6713: LD_INT 0
6715: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
6716: LD_VAR 0 1
6720: PPUSH
6721: CALL_OW 255
6725: PUSH
6726: LD_VAR 0 4
6730: EQUAL
6731: IFFALSE 6750
// begin SetAchievement ( ACH_RAD ) ;
6733: LD_STRING ACH_RAD
6735: PPUSH
6736: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
6740: LD_STRING ACH_NL
6742: PPUSH
6743: LD_INT 1
6745: PPUSH
6746: CALL_OW 564
// end end ;
6750: LD_VAR 0 5
6754: RET
// export function SA_Win ( side ) ; begin
6755: LD_INT 0
6757: PPUSH
// case side of 1 :
6758: LD_VAR 0 1
6762: PUSH
6763: LD_INT 1
6765: DOUBLE
6766: EQUAL
6767: IFTRUE 6771
6769: GO 6784
6771: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
6772: LD_STRING ACH_AH
6774: PPUSH
6775: LD_INT 1
6777: PPUSH
6778: CALL_OW 564
6782: GO 6947
6784: LD_INT 2
6786: DOUBLE
6787: EQUAL
6788: IFTRUE 6792
6790: GO 6805
6792: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
6793: LD_STRING ACH_E
6795: PPUSH
6796: LD_INT 1
6798: PPUSH
6799: CALL_OW 564
6803: GO 6947
6805: LD_INT 3
6807: DOUBLE
6808: EQUAL
6809: IFTRUE 6813
6811: GO 6826
6813: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
6814: LD_STRING ACH_OOL
6816: PPUSH
6817: LD_INT 1
6819: PPUSH
6820: CALL_OW 564
6824: GO 6947
6826: LD_INT 1
6828: PUSH
6829: LD_INT 2
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: DOUBLE
6836: EQUAL
6837: IFTRUE 6841
6839: GO 6866
6841: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
6842: LD_STRING ACH_AH
6844: PPUSH
6845: LD_REAL  5.00000000000000E-0001
6848: PPUSH
6849: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
6853: LD_STRING ACH_E
6855: PPUSH
6856: LD_REAL  5.00000000000000E-0001
6859: PPUSH
6860: CALL_OW 564
// end ; [ 2 , 3 ] :
6864: GO 6947
6866: LD_INT 2
6868: PUSH
6869: LD_INT 3
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: DOUBLE
6876: EQUAL
6877: IFTRUE 6881
6879: GO 6906
6881: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
6882: LD_STRING ACH_OOL
6884: PPUSH
6885: LD_REAL  5.00000000000000E-0001
6888: PPUSH
6889: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
6893: LD_STRING ACH_E
6895: PPUSH
6896: LD_REAL  5.00000000000000E-0001
6899: PPUSH
6900: CALL_OW 564
// end ; [ 3 , 1 ] :
6904: GO 6947
6906: LD_INT 3
6908: PUSH
6909: LD_INT 1
6911: PUSH
6912: EMPTY
6913: LIST
6914: LIST
6915: DOUBLE
6916: EQUAL
6917: IFTRUE 6921
6919: GO 6946
6921: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
6922: LD_STRING ACH_AH
6924: PPUSH
6925: LD_REAL  5.00000000000000E-0001
6928: PPUSH
6929: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
6933: LD_STRING ACH_OOL
6935: PPUSH
6936: LD_REAL  5.00000000000000E-0001
6939: PPUSH
6940: CALL_OW 564
// end ; end ;
6944: GO 6947
6946: POP
// end ; end_of_file
6947: LD_VAR 0 2
6951: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
6952: LD_INT 0
6954: PPUSH
6955: PPUSH
// enable ( 98 ) ;
6956: LD_INT 98
6958: ENABLE_MARKED
// GameEnded = false ;
6959: LD_ADDR_LOC 15
6963: PUSH
6964: LD_INT 0
6966: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6967: LD_ADDR_LOC 14
6971: PUSH
6972: LD_INT 0
6974: PUSH
6975: LD_INT 0
6977: PUSH
6978: LD_INT 0
6980: PUSH
6981: LD_INT 0
6983: PUSH
6984: LD_INT 0
6986: PUSH
6987: LD_INT 0
6989: PUSH
6990: LD_INT 0
6992: PUSH
6993: LD_INT 0
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: ST_TO_ADDR
// unfoged = false ;
7006: LD_ADDR_LOC 16
7010: PUSH
7011: LD_INT 0
7013: ST_TO_ADDR
// defeated_specs := [ ] ;
7014: LD_ADDR_LOC 17
7018: PUSH
7019: EMPTY
7020: ST_TO_ADDR
// for i = 1 to side_positions do
7021: LD_ADDR_VAR 0 2
7025: PUSH
7026: DOUBLE
7027: LD_INT 1
7029: DEC
7030: ST_TO_ADDR
7031: LD_EXP 32
7035: PUSH
7036: FOR_TO
7037: IFFALSE 7077
// if not side_positions [ i ] then
7039: LD_EXP 32
7043: PUSH
7044: LD_VAR 0 2
7048: ARRAY
7049: NOT
7050: IFFALSE 7075
// defeated = replace ( defeated , i , true ) ;
7052: LD_ADDR_LOC 14
7056: PUSH
7057: LD_LOC 14
7061: PPUSH
7062: LD_VAR 0 2
7066: PPUSH
7067: LD_INT 1
7069: PPUSH
7070: CALL_OW 1
7074: ST_TO_ADDR
7075: GO 7036
7077: POP
7078: POP
// end ;
7079: LD_VAR 0 1
7083: RET
// function CanWinLoose ; begin
7084: LD_INT 0
7086: PPUSH
// Result := true ;
7087: LD_ADDR_VAR 0 1
7091: PUSH
7092: LD_INT 1
7094: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7095: CALL_OW 518
7099: PUSH
7100: CALL_OW 519
7104: PUSH
7105: LD_INT 0
7107: GREATER
7108: AND
7109: IFFALSE 7119
// Result := false ;
7111: LD_ADDR_VAR 0 1
7115: PUSH
7116: LD_INT 0
7118: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7119: CALL_OW 531
7123: PUSH
7124: CALL_OW 519
7128: PUSH
7129: LD_INT 1
7131: GREATER
7132: AND
7133: IFFALSE 7143
// Result := false ;
7135: LD_ADDR_VAR 0 1
7139: PUSH
7140: LD_INT 0
7142: ST_TO_ADDR
// end ;
7143: LD_VAR 0 1
7147: RET
// export function HasPower ( i ) ; var k , h ; begin
7148: LD_INT 0
7150: PPUSH
7151: PPUSH
7152: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7153: LD_VAR 0 1
7157: PPUSH
7158: CALL_OW 108
7162: NOT
7163: PUSH
7164: LD_EXP 43
7168: PUSH
7169: LD_VAR 0 1
7173: ARRAY
7174: NOT
7175: AND
7176: PUSH
7177: LD_OWVAR 4
7181: AND
7182: IFFALSE 7194
// begin result = false ;
7184: LD_ADDR_VAR 0 2
7188: PUSH
7189: LD_INT 0
7191: ST_TO_ADDR
// end else
7192: GO 7489
// case def_win_rules of 0 :
7194: LD_EXP 29
7198: PUSH
7199: LD_INT 0
7201: DOUBLE
7202: EQUAL
7203: IFTRUE 7207
7205: GO 7370
7207: POP
// if def_people_respawning then
7208: LD_EXP 12
7212: IFFALSE 7303
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7214: LD_ADDR_VAR 0 2
7218: PUSH
7219: LD_INT 22
7221: PUSH
7222: LD_VAR 0 1
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: LD_INT 2
7233: PUSH
7234: LD_INT 21
7236: PUSH
7237: LD_INT 1
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: PUSH
7244: LD_INT 33
7246: PUSH
7247: LD_INT 3
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: LD_INT 33
7256: PUSH
7257: LD_INT 5
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 30
7266: PUSH
7267: LD_INT 0
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PUSH
7274: LD_INT 30
7276: PUSH
7277: LD_INT 1
7279: PUSH
7280: EMPTY
7281: LIST
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PPUSH
7296: CALL_OW 69
7300: ST_TO_ADDR
7301: GO 7368
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
7303: LD_ADDR_VAR 0 2
7307: PUSH
7308: LD_INT 22
7310: PUSH
7311: LD_VAR 0 1
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PUSH
7320: LD_INT 2
7322: PUSH
7323: LD_INT 21
7325: PUSH
7326: LD_INT 1
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 33
7335: PUSH
7336: LD_INT 3
7338: PUSH
7339: EMPTY
7340: LIST
7341: LIST
7342: PUSH
7343: LD_INT 33
7345: PUSH
7346: LD_INT 5
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PPUSH
7363: CALL_OW 69
7367: ST_TO_ADDR
7368: GO 7489
7370: LD_INT 1
7372: DOUBLE
7373: EQUAL
7374: IFTRUE 7378
7376: GO 7417
7378: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
7379: LD_ADDR_VAR 0 2
7383: PUSH
7384: LD_INT 22
7386: PUSH
7387: LD_VAR 0 1
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: PUSH
7396: LD_INT 21
7398: PUSH
7399: LD_INT 1
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: PUSH
7406: EMPTY
7407: LIST
7408: LIST
7409: PPUSH
7410: CALL_OW 69
7414: ST_TO_ADDR
7415: GO 7489
7417: LD_INT 2
7419: DOUBLE
7420: EQUAL
7421: IFTRUE 7425
7423: GO 7488
7425: POP
// begin h = false ;
7426: LD_ADDR_VAR 0 4
7430: PUSH
7431: LD_INT 0
7433: ST_TO_ADDR
// for k in heroes [ i ] do
7434: LD_ADDR_VAR 0 3
7438: PUSH
7439: LD_EXP 44
7443: PUSH
7444: LD_VAR 0 1
7448: ARRAY
7449: PUSH
7450: FOR_IN
7451: IFFALSE 7474
// if IsLive ( k ) then
7453: LD_VAR 0 3
7457: PPUSH
7458: CALL_OW 300
7462: IFFALSE 7472
// h = true ;
7464: LD_ADDR_VAR 0 4
7468: PUSH
7469: LD_INT 1
7471: ST_TO_ADDR
7472: GO 7450
7474: POP
7475: POP
// Result := h ;
7476: LD_ADDR_VAR 0 2
7480: PUSH
7481: LD_VAR 0 4
7485: ST_TO_ADDR
// end ; end ;
7486: GO 7489
7488: POP
// end ;
7489: LD_VAR 0 2
7493: RET
// function AlliedSides ( i , j ) ; begin
7494: LD_INT 0
7496: PPUSH
// Result := false ;
7497: LD_ADDR_VAR 0 3
7501: PUSH
7502: LD_INT 0
7504: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7505: LD_VAR 0 1
7509: PPUSH
7510: LD_VAR 0 2
7514: PPUSH
7515: CALL_OW 81
7519: PUSH
7520: LD_INT 1
7522: EQUAL
7523: PUSH
7524: LD_VAR 0 2
7528: PPUSH
7529: LD_VAR 0 1
7533: PPUSH
7534: CALL_OW 81
7538: PUSH
7539: LD_INT 1
7541: EQUAL
7542: AND
7543: PUSH
7544: LD_VAR 0 1
7548: PPUSH
7549: CALL_OW 83
7553: AND
7554: PUSH
7555: LD_VAR 0 2
7559: PPUSH
7560: CALL_OW 83
7564: AND
7565: IFFALSE 7575
// Result := true ;
7567: LD_ADDR_VAR 0 3
7571: PUSH
7572: LD_INT 1
7574: ST_TO_ADDR
// end ;
7575: LD_VAR 0 3
7579: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
7580: CALL 7084 0 0
7584: PUSH
7585: LD_LOC 15
7589: NOT
7590: AND
7591: IFFALSE 7607
7593: GO 7595
7595: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
7596: LD_ADDR_EXP 53
7600: PUSH
7601: LD_STRING #Player-Ended
7603: PUSH
7604: EMPTY
7605: LIST
7606: ST_TO_ADDR
7607: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
7608: CALL 7084 0 0
7612: PUSH
7613: LD_LOC 15
7617: AND
7618: IFFALSE 7627
7620: GO 7622
7622: DISABLE
// YouLostInMultiplayer ;
7623: CALL_OW 107
7627: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
7628: CALL 7084 0 0
7632: NOT
7633: PUSH
7634: CALL_OW 531
7638: NOT
7639: AND
7640: IFFALSE 7656
7642: GO 7644
7644: DISABLE
// WaitServerStrings = [ #server-wait ] ;
7645: LD_ADDR_EXP 53
7649: PUSH
7650: LD_STRING #server-wait
7652: PUSH
7653: EMPTY
7654: LIST
7655: ST_TO_ADDR
7656: END
// every 100 trigger IAmSpec do
7657: CALL_OW 531
7661: IFFALSE 7677
7663: GO 7665
7665: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
7666: LD_ADDR_EXP 53
7670: PUSH
7671: LD_STRING #Player-IAmSpec
7673: PUSH
7674: EMPTY
7675: LIST
7676: ST_TO_ADDR
7677: END
// every 100 trigger GameEnded and IAmSpec do
7678: LD_LOC 15
7682: PUSH
7683: CALL_OW 531
7687: AND
7688: IFFALSE 7697
7690: GO 7692
7692: DISABLE
// YouLostInMultiplayer ;
7693: CALL_OW 107
7697: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
7698: CALL 7084 0 0
7702: PUSH
7703: LD_LOC 15
7707: NOT
7708: AND
7709: IFFALSE 7725
7711: GO 7713
7713: DISABLE
// WaitServerStrings = [ $player-win ] ;
7714: LD_ADDR_EXP 53
7718: PUSH
7719: LD_STRING $player-win
7721: PUSH
7722: EMPTY
7723: LIST
7724: ST_TO_ADDR
7725: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
7726: CALL 7084 0 0
7730: PUSH
7731: LD_LOC 15
7735: AND
7736: IFFALSE 7760
7738: GO 7740
7740: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
7741: LD_EXP 33
7745: PUSH
7746: LD_OWVAR 7
7750: ARRAY
7751: PPUSH
7752: CALL 6755 0 1
// YouWinInMultiplayer ;
7756: CALL_OW 106
// end ;
7760: END
// every 100 trigger isEditor marked 401 do
7761: LD_OWVAR 84
7765: IFFALSE 7781
7767: GO 7769
7769: DISABLE
// Debug_Strings = [ You won ] ;
7770: LD_ADDR_OWVAR 48
7774: PUSH
7775: LD_STRING You won
7777: PUSH
7778: EMPTY
7779: LIST
7780: ST_TO_ADDR
7781: END
// every 100 trigger isEditor marked 400 do
7782: LD_OWVAR 84
7786: IFFALSE 7802
7788: GO 7790
7790: DISABLE
// Debug_Strings = [ You loss ] ;
7791: LD_ADDR_OWVAR 48
7795: PUSH
7796: LD_STRING You loss
7798: PUSH
7799: EMPTY
7800: LIST
7801: ST_TO_ADDR
7802: END
// every 100 marked 98 do var i , un ;
7803: GO 7805
7805: DISABLE
7806: LD_INT 0
7808: PPUSH
7809: PPUSH
// begin for i = 1 to side_positions do
7810: LD_ADDR_VAR 0 1
7814: PUSH
7815: DOUBLE
7816: LD_INT 1
7818: DEC
7819: ST_TO_ADDR
7820: LD_EXP 32
7824: PUSH
7825: FOR_TO
7826: IFFALSE 7913
// begin if side_positions [ i ] then
7828: LD_EXP 32
7832: PUSH
7833: LD_VAR 0 1
7837: ARRAY
7838: IFFALSE 7911
// if not HasPower ( i ) and not defeated [ i ] then
7840: LD_VAR 0 1
7844: PPUSH
7845: CALL 7148 0 1
7849: NOT
7850: PUSH
7851: LD_LOC 14
7855: PUSH
7856: LD_VAR 0 1
7860: ARRAY
7861: NOT
7862: AND
7863: IFFALSE 7911
// begin defeated = replace ( defeated , i , true ) ;
7865: LD_ADDR_LOC 14
7869: PUSH
7870: LD_LOC 14
7874: PPUSH
7875: LD_VAR 0 1
7879: PPUSH
7880: LD_INT 1
7882: PPUSH
7883: CALL_OW 1
7887: ST_TO_ADDR
// if i = mp_player_side then
7888: LD_VAR 0 1
7892: PUSH
7893: LD_OWVAR 7
7897: EQUAL
7898: IFFALSE 7911
// begin Multiplayer_Loose_Message ;
7900: CALL_OW 521
// SetPlayerSpectator ( ) ;
7904: CALL_OW 572
// enable ( 400 ) ;
7908: LD_INT 400
7910: ENABLE_MARKED
// end ; end ; end ;
7911: GO 7825
7913: POP
7914: POP
// DidGameEnd ;
7915: CALL 7930 0 0
// if not GameEnded then
7919: LD_LOC 15
7923: NOT
7924: IFFALSE 7927
// enable ;
7926: ENABLE
// end ;
7927: PPOPN 2
7929: END
// function DidGameEnd ; var i , k , enemy ; begin
7930: LD_INT 0
7932: PPUSH
7933: PPUSH
7934: PPUSH
7935: PPUSH
// enemy = [ ] ;
7936: LD_ADDR_VAR 0 4
7940: PUSH
7941: EMPTY
7942: ST_TO_ADDR
// for i = 1 to side_positions do
7943: LD_ADDR_VAR 0 2
7947: PUSH
7948: DOUBLE
7949: LD_INT 1
7951: DEC
7952: ST_TO_ADDR
7953: LD_EXP 32
7957: PUSH
7958: FOR_TO
7959: IFFALSE 8053
// if not defeated [ i ] then
7961: LD_LOC 14
7965: PUSH
7966: LD_VAR 0 2
7970: ARRAY
7971: NOT
7972: IFFALSE 8051
// for k = 1 to side_positions do
7974: LD_ADDR_VAR 0 3
7978: PUSH
7979: DOUBLE
7980: LD_INT 1
7982: DEC
7983: ST_TO_ADDR
7984: LD_EXP 32
7988: PUSH
7989: FOR_TO
7990: IFFALSE 8049
// if not defeated [ k ] then
7992: LD_LOC 14
7996: PUSH
7997: LD_VAR 0 3
8001: ARRAY
8002: NOT
8003: IFFALSE 8047
// if not AlliedSides ( i , k ) then
8005: LD_VAR 0 2
8009: PPUSH
8010: LD_VAR 0 3
8014: PPUSH
8015: CALL 7494 0 2
8019: NOT
8020: IFFALSE 8047
// enemy = enemy ^ [ i , k ] ;
8022: LD_ADDR_VAR 0 4
8026: PUSH
8027: LD_VAR 0 4
8031: PUSH
8032: LD_VAR 0 2
8036: PUSH
8037: LD_VAR 0 3
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: ADD
8046: ST_TO_ADDR
8047: GO 7989
8049: POP
8050: POP
8051: GO 7958
8053: POP
8054: POP
// if not enemy then
8055: LD_VAR 0 4
8059: NOT
8060: IFFALSE 8086
// begin GameEnded = true ;
8062: LD_ADDR_LOC 15
8066: PUSH
8067: LD_INT 1
8069: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
8070: LD_LOC 14
8074: PUSH
8075: LD_OWVAR 7
8079: ARRAY
8080: NOT
8081: IFFALSE 8086
// enable ( 401 ) ;
8083: LD_INT 401
8085: ENABLE_MARKED
// end ; end ;
8086: LD_VAR 0 1
8090: RET
// function unfog ; var k , friends ; begin
8091: LD_INT 0
8093: PPUSH
8094: PPUSH
8095: PPUSH
// for k = 1 to side_positions do
8096: LD_ADDR_VAR 0 2
8100: PUSH
8101: DOUBLE
8102: LD_INT 1
8104: DEC
8105: ST_TO_ADDR
8106: LD_EXP 32
8110: PUSH
8111: FOR_TO
8112: IFFALSE 8168
// if not defeated [ k ] then
8114: LD_LOC 14
8118: PUSH
8119: LD_VAR 0 2
8123: ARRAY
8124: NOT
8125: IFFALSE 8166
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
8127: LD_OWVAR 7
8131: PPUSH
8132: LD_VAR 0 2
8136: PPUSH
8137: CALL_OW 81
8141: PUSH
8142: LD_INT 1
8144: PUSH
8145: EMPTY
8146: LIST
8147: IN
8148: IFFALSE 8166
// friends = friends ^ k ;
8150: LD_ADDR_VAR 0 3
8154: PUSH
8155: LD_VAR 0 3
8159: PUSH
8160: LD_VAR 0 2
8164: ADD
8165: ST_TO_ADDR
8166: GO 8111
8168: POP
8169: POP
// if not friends then
8170: LD_VAR 0 3
8174: NOT
8175: IFFALSE 8189
// begin SetPlayerSpectator ( ) ;
8177: CALL_OW 572
// unfoged = true ;
8181: LD_ADDR_LOC 16
8185: PUSH
8186: LD_INT 1
8188: ST_TO_ADDR
// end ; end ;
8189: LD_VAR 0 1
8193: RET
// export function MakeGameEnd ; begin
8194: LD_INT 0
8196: PPUSH
// SetPlayerSpectator ( ) ;
8197: CALL_OW 572
// unfoged = true ;
8201: LD_ADDR_LOC 16
8205: PUSH
8206: LD_INT 1
8208: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8209: LD_INT 175
8211: PPUSH
8212: CALL_OW 67
// GameEnded = true ;
8216: LD_ADDR_LOC 15
8220: PUSH
8221: LD_INT 1
8223: ST_TO_ADDR
// end ;
8224: LD_VAR 0 1
8228: RET
// export function GetGameEnded ; begin
8229: LD_INT 0
8231: PPUSH
// result = GameEnded ;
8232: LD_ADDR_VAR 0 1
8236: PUSH
8237: LD_LOC 15
8241: ST_TO_ADDR
// end ; end_of_file
8242: LD_VAR 0 1
8246: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8247: LD_INT 0
8249: PPUSH
8250: PPUSH
8251: PPUSH
// for side = 1 to 8 do
8252: LD_ADDR_VAR 0 2
8256: PUSH
8257: DOUBLE
8258: LD_INT 1
8260: DEC
8261: ST_TO_ADDR
8262: LD_INT 8
8264: PUSH
8265: FOR_TO
8266: IFFALSE 8387
// begin for i = 1 to 72 do
8268: LD_ADDR_VAR 0 3
8272: PUSH
8273: DOUBLE
8274: LD_INT 1
8276: DEC
8277: ST_TO_ADDR
8278: LD_INT 72
8280: PUSH
8281: FOR_TO
8282: IFFALSE 8313
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
8284: LD_VAR 0 3
8288: PPUSH
8289: LD_VAR 0 2
8293: PPUSH
8294: LD_INT 0
8296: PPUSH
8297: LD_VAR 0 3
8301: PPUSH
8302: CALL_OW 565
8306: PPUSH
8307: CALL_OW 322
8311: GO 8281
8313: POP
8314: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
8315: LD_INT 73
8317: PPUSH
8318: LD_VAR 0 2
8322: PPUSH
8323: LD_INT 0
8325: PPUSH
8326: LD_INT 25
8328: PPUSH
8329: CALL_OW 565
8333: PPUSH
8334: CALL_OW 322
// for i = 0 to 40 do
8338: LD_ADDR_VAR 0 3
8342: PUSH
8343: DOUBLE
8344: LD_INT 0
8346: DEC
8347: ST_TO_ADDR
8348: LD_INT 40
8350: PUSH
8351: FOR_TO
8352: IFFALSE 8383
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
8354: LD_VAR 0 3
8358: PPUSH
8359: LD_VAR 0 2
8363: PPUSH
8364: LD_INT 1
8366: PPUSH
8367: LD_VAR 0 3
8371: PPUSH
8372: CALL_OW 565
8376: PPUSH
8377: CALL_OW 324
8381: GO 8351
8383: POP
8384: POP
// end ;
8385: GO 8265
8387: POP
8388: POP
// end ;
8389: LD_VAR 0 1
8393: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
8394: LD_INT 0
8396: PPUSH
8397: PPUSH
8398: PPUSH
// for side = 1 to 8 do
8399: LD_ADDR_VAR 0 3
8403: PUSH
8404: DOUBLE
8405: LD_INT 1
8407: DEC
8408: ST_TO_ADDR
8409: LD_INT 8
8411: PUSH
8412: FOR_TO
8413: IFFALSE 12409
// begin for i = 1 to 73 do
8415: LD_ADDR_VAR 0 4
8419: PUSH
8420: DOUBLE
8421: LD_INT 1
8423: DEC
8424: ST_TO_ADDR
8425: LD_INT 73
8427: PUSH
8428: FOR_TO
8429: IFFALSE 8450
// SetTech ( i , side , state_disabled ) ;
8431: LD_VAR 0 4
8435: PPUSH
8436: LD_VAR 0 3
8440: PPUSH
8441: LD_INT 0
8443: PPUSH
8444: CALL_OW 322
8448: GO 8428
8450: POP
8451: POP
// for i = 0 to 40 do
8452: LD_ADDR_VAR 0 4
8456: PUSH
8457: DOUBLE
8458: LD_INT 0
8460: DEC
8461: ST_TO_ADDR
8462: LD_INT 40
8464: PUSH
8465: FOR_TO
8466: IFFALSE 8487
// SetRestrict ( i , side , false ) ;
8468: LD_VAR 0 4
8472: PPUSH
8473: LD_VAR 0 3
8477: PPUSH
8478: LD_INT 0
8480: PPUSH
8481: CALL_OW 324
8485: GO 8465
8487: POP
8488: POP
// case level of 1 :
8489: LD_VAR 0 1
8493: PUSH
8494: LD_INT 1
8496: DOUBLE
8497: EQUAL
8498: IFTRUE 8502
8500: GO 8655
8502: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8503: LD_INT 35
8505: PPUSH
8506: LD_VAR 0 3
8510: PPUSH
8511: LD_INT 1
8513: PPUSH
8514: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8518: LD_INT 45
8520: PPUSH
8521: LD_VAR 0 3
8525: PPUSH
8526: LD_INT 1
8528: PPUSH
8529: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8533: LD_INT 46
8535: PPUSH
8536: LD_VAR 0 3
8540: PPUSH
8541: LD_INT 1
8543: PPUSH
8544: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8548: LD_INT 47
8550: PPUSH
8551: LD_VAR 0 3
8555: PPUSH
8556: LD_INT 1
8558: PPUSH
8559: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8563: LD_INT 0
8565: PPUSH
8566: LD_VAR 0 3
8570: PPUSH
8571: LD_INT 1
8573: PPUSH
8574: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8578: LD_INT 2
8580: PPUSH
8581: LD_VAR 0 3
8585: PPUSH
8586: LD_INT 1
8588: PPUSH
8589: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8593: LD_INT 4
8595: PPUSH
8596: LD_VAR 0 3
8600: PPUSH
8601: LD_INT 1
8603: PPUSH
8604: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8608: LD_INT 6
8610: PPUSH
8611: LD_VAR 0 3
8615: PPUSH
8616: LD_INT 1
8618: PPUSH
8619: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8623: LD_INT 29
8625: PPUSH
8626: LD_VAR 0 3
8630: PPUSH
8631: LD_INT 1
8633: PPUSH
8634: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8638: LD_INT 31
8640: PPUSH
8641: LD_VAR 0 3
8645: PPUSH
8646: LD_INT 1
8648: PPUSH
8649: CALL_OW 324
// end ; 2 :
8653: GO 12407
8655: LD_INT 2
8657: DOUBLE
8658: EQUAL
8659: IFTRUE 8663
8661: GO 8861
8663: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8664: LD_INT 35
8666: PPUSH
8667: LD_VAR 0 3
8671: PPUSH
8672: LD_INT 1
8674: PPUSH
8675: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8679: LD_INT 45
8681: PPUSH
8682: LD_VAR 0 3
8686: PPUSH
8687: LD_INT 1
8689: PPUSH
8690: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8694: LD_INT 46
8696: PPUSH
8697: LD_VAR 0 3
8701: PPUSH
8702: LD_INT 1
8704: PPUSH
8705: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8709: LD_INT 47
8711: PPUSH
8712: LD_VAR 0 3
8716: PPUSH
8717: LD_INT 1
8719: PPUSH
8720: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8724: LD_INT 1
8726: PPUSH
8727: LD_VAR 0 3
8731: PPUSH
8732: LD_INT 1
8734: PPUSH
8735: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8739: LD_INT 2
8741: PPUSH
8742: LD_VAR 0 3
8746: PPUSH
8747: LD_INT 1
8749: PPUSH
8750: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8754: LD_INT 11
8756: PPUSH
8757: LD_VAR 0 3
8761: PPUSH
8762: LD_INT 1
8764: PPUSH
8765: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8769: LD_INT 0
8771: PPUSH
8772: LD_VAR 0 3
8776: PPUSH
8777: LD_INT 1
8779: PPUSH
8780: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8784: LD_INT 2
8786: PPUSH
8787: LD_VAR 0 3
8791: PPUSH
8792: LD_INT 1
8794: PPUSH
8795: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8799: LD_INT 4
8801: PPUSH
8802: LD_VAR 0 3
8806: PPUSH
8807: LD_INT 1
8809: PPUSH
8810: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8814: LD_INT 6
8816: PPUSH
8817: LD_VAR 0 3
8821: PPUSH
8822: LD_INT 1
8824: PPUSH
8825: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8829: LD_INT 29
8831: PPUSH
8832: LD_VAR 0 3
8836: PPUSH
8837: LD_INT 1
8839: PPUSH
8840: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8844: LD_INT 31
8846: PPUSH
8847: LD_VAR 0 3
8851: PPUSH
8852: LD_INT 1
8854: PPUSH
8855: CALL_OW 324
// end ; 3 :
8859: GO 12407
8861: LD_INT 3
8863: DOUBLE
8864: EQUAL
8865: IFTRUE 8869
8867: GO 9322
8869: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8870: LD_INT 35
8872: PPUSH
8873: LD_VAR 0 3
8877: PPUSH
8878: LD_INT 1
8880: PPUSH
8881: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8885: LD_INT 45
8887: PPUSH
8888: LD_VAR 0 3
8892: PPUSH
8893: LD_INT 1
8895: PPUSH
8896: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8900: LD_INT 46
8902: PPUSH
8903: LD_VAR 0 3
8907: PPUSH
8908: LD_INT 1
8910: PPUSH
8911: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8915: LD_INT 47
8917: PPUSH
8918: LD_VAR 0 3
8922: PPUSH
8923: LD_INT 1
8925: PPUSH
8926: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8930: LD_INT 1
8932: PPUSH
8933: LD_VAR 0 3
8937: PPUSH
8938: LD_INT 1
8940: PPUSH
8941: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8945: LD_INT 2
8947: PPUSH
8948: LD_VAR 0 3
8952: PPUSH
8953: LD_INT 1
8955: PPUSH
8956: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8960: LD_INT 11
8962: PPUSH
8963: LD_VAR 0 3
8967: PPUSH
8968: LD_INT 1
8970: PPUSH
8971: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
8975: LD_INT 48
8977: PPUSH
8978: LD_VAR 0 3
8982: PPUSH
8983: LD_INT 1
8985: PPUSH
8986: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
8990: LD_INT 69
8992: PPUSH
8993: LD_VAR 0 3
8997: PPUSH
8998: LD_INT 1
9000: PPUSH
9001: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9005: LD_INT 39
9007: PPUSH
9008: LD_VAR 0 3
9012: PPUSH
9013: LD_INT 1
9015: PPUSH
9016: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9020: LD_INT 43
9022: PPUSH
9023: LD_VAR 0 3
9027: PPUSH
9028: LD_INT 1
9030: PPUSH
9031: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9035: LD_INT 51
9037: PPUSH
9038: LD_VAR 0 3
9042: PPUSH
9043: LD_INT 1
9045: PPUSH
9046: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9050: LD_INT 6
9052: PPUSH
9053: LD_VAR 0 3
9057: PPUSH
9058: LD_INT 1
9060: PPUSH
9061: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9065: LD_INT 0
9067: PPUSH
9068: LD_VAR 0 3
9072: PPUSH
9073: LD_INT 1
9075: PPUSH
9076: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9080: LD_INT 2
9082: PPUSH
9083: LD_VAR 0 3
9087: PPUSH
9088: LD_INT 1
9090: PPUSH
9091: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9095: LD_INT 3
9097: PPUSH
9098: LD_VAR 0 3
9102: PPUSH
9103: LD_INT 1
9105: PPUSH
9106: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9110: LD_INT 4
9112: PPUSH
9113: LD_VAR 0 3
9117: PPUSH
9118: LD_INT 1
9120: PPUSH
9121: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9125: LD_INT 6
9127: PPUSH
9128: LD_VAR 0 3
9132: PPUSH
9133: LD_INT 1
9135: PPUSH
9136: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9140: LD_INT 7
9142: PPUSH
9143: LD_VAR 0 3
9147: PPUSH
9148: LD_INT 1
9150: PPUSH
9151: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9155: LD_INT 8
9157: PPUSH
9158: LD_VAR 0 3
9162: PPUSH
9163: LD_INT 1
9165: PPUSH
9166: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9170: LD_INT 10
9172: PPUSH
9173: LD_VAR 0 3
9177: PPUSH
9178: LD_INT 1
9180: PPUSH
9181: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9185: LD_INT 15
9187: PPUSH
9188: LD_VAR 0 3
9192: PPUSH
9193: LD_INT 1
9195: PPUSH
9196: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9200: LD_INT 16
9202: PPUSH
9203: LD_VAR 0 3
9207: PPUSH
9208: LD_INT 1
9210: PPUSH
9211: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9215: LD_INT 17
9217: PPUSH
9218: LD_VAR 0 3
9222: PPUSH
9223: LD_INT 1
9225: PPUSH
9226: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9230: LD_INT 20
9232: PPUSH
9233: LD_VAR 0 3
9237: PPUSH
9238: LD_INT 1
9240: PPUSH
9241: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9245: LD_INT 26
9247: PPUSH
9248: LD_VAR 0 3
9252: PPUSH
9253: LD_INT 1
9255: PPUSH
9256: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9260: LD_INT 27
9262: PPUSH
9263: LD_VAR 0 3
9267: PPUSH
9268: LD_INT 1
9270: PPUSH
9271: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9275: LD_INT 29
9277: PPUSH
9278: LD_VAR 0 3
9282: PPUSH
9283: LD_INT 1
9285: PPUSH
9286: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9290: LD_INT 31
9292: PPUSH
9293: LD_VAR 0 3
9297: PPUSH
9298: LD_INT 1
9300: PPUSH
9301: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9305: LD_INT 32
9307: PPUSH
9308: LD_VAR 0 3
9312: PPUSH
9313: LD_INT 1
9315: PPUSH
9316: CALL_OW 324
// end ; 4 :
9320: GO 12407
9322: LD_INT 4
9324: DOUBLE
9325: EQUAL
9326: IFTRUE 9330
9328: GO 10278
9330: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9331: LD_INT 35
9333: PPUSH
9334: LD_VAR 0 3
9338: PPUSH
9339: LD_INT 1
9341: PPUSH
9342: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9346: LD_INT 45
9348: PPUSH
9349: LD_VAR 0 3
9353: PPUSH
9354: LD_INT 1
9356: PPUSH
9357: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9361: LD_INT 46
9363: PPUSH
9364: LD_VAR 0 3
9368: PPUSH
9369: LD_INT 1
9371: PPUSH
9372: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9376: LD_INT 47
9378: PPUSH
9379: LD_VAR 0 3
9383: PPUSH
9384: LD_INT 1
9386: PPUSH
9387: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9391: LD_INT 1
9393: PPUSH
9394: LD_VAR 0 3
9398: PPUSH
9399: LD_INT 1
9401: PPUSH
9402: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9406: LD_INT 2
9408: PPUSH
9409: LD_VAR 0 3
9413: PPUSH
9414: LD_INT 1
9416: PPUSH
9417: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9421: LD_INT 11
9423: PPUSH
9424: LD_VAR 0 3
9428: PPUSH
9429: LD_INT 1
9431: PPUSH
9432: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9436: LD_INT 20
9438: PPUSH
9439: LD_VAR 0 3
9443: PPUSH
9444: LD_INT 1
9446: PPUSH
9447: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9451: LD_INT 48
9453: PPUSH
9454: LD_VAR 0 3
9458: PPUSH
9459: LD_INT 1
9461: PPUSH
9462: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9466: LD_INT 49
9468: PPUSH
9469: LD_VAR 0 3
9473: PPUSH
9474: LD_INT 1
9476: PPUSH
9477: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9481: LD_INT 69
9483: PPUSH
9484: LD_VAR 0 3
9488: PPUSH
9489: LD_INT 1
9491: PPUSH
9492: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9496: LD_INT 39
9498: PPUSH
9499: LD_VAR 0 3
9503: PPUSH
9504: LD_INT 1
9506: PPUSH
9507: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9511: LD_INT 34
9513: PPUSH
9514: LD_VAR 0 3
9518: PPUSH
9519: LD_INT 1
9521: PPUSH
9522: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
9526: LD_INT 42
9528: PPUSH
9529: LD_VAR 0 3
9533: PPUSH
9534: LD_INT 1
9536: PPUSH
9537: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
9541: LD_INT 44
9543: PPUSH
9544: LD_VAR 0 3
9548: PPUSH
9549: LD_INT 1
9551: PPUSH
9552: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
9556: LD_INT 41
9558: PPUSH
9559: LD_VAR 0 3
9563: PPUSH
9564: LD_INT 1
9566: PPUSH
9567: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9571: LD_INT 43
9573: PPUSH
9574: LD_VAR 0 3
9578: PPUSH
9579: LD_INT 1
9581: PPUSH
9582: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
9586: LD_INT 70
9588: PPUSH
9589: LD_VAR 0 3
9593: PPUSH
9594: LD_INT 1
9596: PPUSH
9597: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9601: LD_INT 51
9603: PPUSH
9604: LD_VAR 0 3
9608: PPUSH
9609: LD_INT 1
9611: PPUSH
9612: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
9616: LD_INT 52
9618: PPUSH
9619: LD_VAR 0 3
9623: PPUSH
9624: LD_INT 1
9626: PPUSH
9627: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9631: LD_INT 6
9633: PPUSH
9634: LD_VAR 0 3
9638: PPUSH
9639: LD_INT 1
9641: PPUSH
9642: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9646: LD_INT 15
9648: PPUSH
9649: LD_VAR 0 3
9653: PPUSH
9654: LD_INT 1
9656: PPUSH
9657: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
9661: LD_INT 7
9663: PPUSH
9664: LD_VAR 0 3
9668: PPUSH
9669: LD_INT 1
9671: PPUSH
9672: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
9676: LD_INT 12
9678: PPUSH
9679: LD_VAR 0 3
9683: PPUSH
9684: LD_INT 1
9686: PPUSH
9687: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
9691: LD_INT 18
9693: PPUSH
9694: LD_VAR 0 3
9698: PPUSH
9699: LD_INT 1
9701: PPUSH
9702: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
9706: LD_INT 60
9708: PPUSH
9709: LD_VAR 0 3
9713: PPUSH
9714: LD_INT 1
9716: PPUSH
9717: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
9721: LD_INT 9
9723: PPUSH
9724: LD_VAR 0 3
9728: PPUSH
9729: LD_INT 1
9731: PPUSH
9732: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
9736: LD_INT 30
9738: PPUSH
9739: LD_VAR 0 3
9743: PPUSH
9744: LD_INT 1
9746: PPUSH
9747: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
9751: LD_INT 37
9753: PPUSH
9754: LD_VAR 0 3
9758: PPUSH
9759: LD_INT 1
9761: PPUSH
9762: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
9766: LD_INT 5
9768: PPUSH
9769: LD_VAR 0 3
9773: PPUSH
9774: LD_INT 1
9776: PPUSH
9777: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
9781: LD_INT 66
9783: PPUSH
9784: LD_VAR 0 3
9788: PPUSH
9789: LD_INT 1
9791: PPUSH
9792: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
9796: LD_INT 21
9798: PPUSH
9799: LD_VAR 0 3
9803: PPUSH
9804: LD_INT 1
9806: PPUSH
9807: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
9811: LD_INT 22
9813: PPUSH
9814: LD_VAR 0 3
9818: PPUSH
9819: LD_INT 1
9821: PPUSH
9822: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
9826: LD_INT 54
9828: PPUSH
9829: LD_VAR 0 3
9833: PPUSH
9834: LD_INT 1
9836: PPUSH
9837: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9841: LD_INT 0
9843: PPUSH
9844: LD_VAR 0 3
9848: PPUSH
9849: LD_INT 1
9851: PPUSH
9852: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
9856: LD_INT 1
9858: PPUSH
9859: LD_VAR 0 3
9863: PPUSH
9864: LD_INT 1
9866: PPUSH
9867: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9871: LD_INT 2
9873: PPUSH
9874: LD_VAR 0 3
9878: PPUSH
9879: LD_INT 1
9881: PPUSH
9882: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9886: LD_INT 3
9888: PPUSH
9889: LD_VAR 0 3
9893: PPUSH
9894: LD_INT 1
9896: PPUSH
9897: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9901: LD_INT 4
9903: PPUSH
9904: LD_VAR 0 3
9908: PPUSH
9909: LD_INT 1
9911: PPUSH
9912: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
9916: LD_INT 5
9918: PPUSH
9919: LD_VAR 0 3
9923: PPUSH
9924: LD_INT 1
9926: PPUSH
9927: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9931: LD_INT 6
9933: PPUSH
9934: LD_VAR 0 3
9938: PPUSH
9939: LD_INT 1
9941: PPUSH
9942: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9946: LD_INT 7
9948: PPUSH
9949: LD_VAR 0 3
9953: PPUSH
9954: LD_INT 1
9956: PPUSH
9957: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9961: LD_INT 8
9963: PPUSH
9964: LD_VAR 0 3
9968: PPUSH
9969: LD_INT 1
9971: PPUSH
9972: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9976: LD_INT 10
9978: PPUSH
9979: LD_VAR 0 3
9983: PPUSH
9984: LD_INT 1
9986: PPUSH
9987: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
9991: LD_INT 11
9993: PPUSH
9994: LD_VAR 0 3
9998: PPUSH
9999: LD_INT 1
10001: PPUSH
10002: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10006: LD_INT 12
10008: PPUSH
10009: LD_VAR 0 3
10013: PPUSH
10014: LD_INT 1
10016: PPUSH
10017: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10021: LD_INT 13
10023: PPUSH
10024: LD_VAR 0 3
10028: PPUSH
10029: LD_INT 1
10031: PPUSH
10032: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10036: LD_INT 14
10038: PPUSH
10039: LD_VAR 0 3
10043: PPUSH
10044: LD_INT 1
10046: PPUSH
10047: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10051: LD_INT 15
10053: PPUSH
10054: LD_VAR 0 3
10058: PPUSH
10059: LD_INT 1
10061: PPUSH
10062: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10066: LD_INT 16
10068: PPUSH
10069: LD_VAR 0 3
10073: PPUSH
10074: LD_INT 1
10076: PPUSH
10077: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10081: LD_INT 17
10083: PPUSH
10084: LD_VAR 0 3
10088: PPUSH
10089: LD_INT 1
10091: PPUSH
10092: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10096: LD_INT 19
10098: PPUSH
10099: LD_VAR 0 3
10103: PPUSH
10104: LD_INT 1
10106: PPUSH
10107: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10111: LD_INT 20
10113: PPUSH
10114: LD_VAR 0 3
10118: PPUSH
10119: LD_INT 1
10121: PPUSH
10122: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10126: LD_INT 21
10128: PPUSH
10129: LD_VAR 0 3
10133: PPUSH
10134: LD_INT 1
10136: PPUSH
10137: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10141: LD_INT 23
10143: PPUSH
10144: LD_VAR 0 3
10148: PPUSH
10149: LD_INT 1
10151: PPUSH
10152: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10156: LD_INT 26
10158: PPUSH
10159: LD_VAR 0 3
10163: PPUSH
10164: LD_INT 1
10166: PPUSH
10167: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10171: LD_INT 27
10173: PPUSH
10174: LD_VAR 0 3
10178: PPUSH
10179: LD_INT 1
10181: PPUSH
10182: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10186: LD_INT 28
10188: PPUSH
10189: LD_VAR 0 3
10193: PPUSH
10194: LD_INT 1
10196: PPUSH
10197: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10201: LD_INT 29
10203: PPUSH
10204: LD_VAR 0 3
10208: PPUSH
10209: LD_INT 1
10211: PPUSH
10212: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10216: LD_INT 30
10218: PPUSH
10219: LD_VAR 0 3
10223: PPUSH
10224: LD_INT 1
10226: PPUSH
10227: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10231: LD_INT 31
10233: PPUSH
10234: LD_VAR 0 3
10238: PPUSH
10239: LD_INT 1
10241: PPUSH
10242: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10246: LD_INT 32
10248: PPUSH
10249: LD_VAR 0 3
10253: PPUSH
10254: LD_INT 1
10256: PPUSH
10257: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10261: LD_INT 36
10263: PPUSH
10264: LD_VAR 0 3
10268: PPUSH
10269: LD_INT 1
10271: PPUSH
10272: CALL_OW 324
// end ; 5 :
10276: GO 12407
10278: LD_INT 5
10280: DOUBLE
10281: EQUAL
10282: IFTRUE 10286
10284: GO 11399
10286: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10287: LD_INT 35
10289: PPUSH
10290: LD_VAR 0 3
10294: PPUSH
10295: LD_INT 1
10297: PPUSH
10298: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10302: LD_INT 45
10304: PPUSH
10305: LD_VAR 0 3
10309: PPUSH
10310: LD_INT 1
10312: PPUSH
10313: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10317: LD_INT 46
10319: PPUSH
10320: LD_VAR 0 3
10324: PPUSH
10325: LD_INT 1
10327: PPUSH
10328: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10332: LD_INT 47
10334: PPUSH
10335: LD_VAR 0 3
10339: PPUSH
10340: LD_INT 1
10342: PPUSH
10343: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10347: LD_INT 1
10349: PPUSH
10350: LD_VAR 0 3
10354: PPUSH
10355: LD_INT 1
10357: PPUSH
10358: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10362: LD_INT 2
10364: PPUSH
10365: LD_VAR 0 3
10369: PPUSH
10370: LD_INT 1
10372: PPUSH
10373: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10377: LD_INT 11
10379: PPUSH
10380: LD_VAR 0 3
10384: PPUSH
10385: LD_INT 1
10387: PPUSH
10388: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10392: LD_INT 20
10394: PPUSH
10395: LD_VAR 0 3
10399: PPUSH
10400: LD_INT 1
10402: PPUSH
10403: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10407: LD_INT 48
10409: PPUSH
10410: LD_VAR 0 3
10414: PPUSH
10415: LD_INT 1
10417: PPUSH
10418: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10422: LD_INT 49
10424: PPUSH
10425: LD_VAR 0 3
10429: PPUSH
10430: LD_INT 1
10432: PPUSH
10433: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10437: LD_INT 69
10439: PPUSH
10440: LD_VAR 0 3
10444: PPUSH
10445: LD_INT 1
10447: PPUSH
10448: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10452: LD_INT 39
10454: PPUSH
10455: LD_VAR 0 3
10459: PPUSH
10460: LD_INT 1
10462: PPUSH
10463: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10467: LD_INT 34
10469: PPUSH
10470: LD_VAR 0 3
10474: PPUSH
10475: LD_INT 1
10477: PPUSH
10478: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10482: LD_INT 42
10484: PPUSH
10485: LD_VAR 0 3
10489: PPUSH
10490: LD_INT 1
10492: PPUSH
10493: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10497: LD_INT 44
10499: PPUSH
10500: LD_VAR 0 3
10504: PPUSH
10505: LD_INT 1
10507: PPUSH
10508: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10512: LD_INT 41
10514: PPUSH
10515: LD_VAR 0 3
10519: PPUSH
10520: LD_INT 1
10522: PPUSH
10523: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
10527: LD_INT 40
10529: PPUSH
10530: LD_VAR 0 3
10534: PPUSH
10535: LD_INT 1
10537: PPUSH
10538: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10542: LD_INT 43
10544: PPUSH
10545: LD_VAR 0 3
10549: PPUSH
10550: LD_INT 1
10552: PPUSH
10553: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10557: LD_INT 70
10559: PPUSH
10560: LD_VAR 0 3
10564: PPUSH
10565: LD_INT 1
10567: PPUSH
10568: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10572: LD_INT 51
10574: PPUSH
10575: LD_VAR 0 3
10579: PPUSH
10580: LD_INT 1
10582: PPUSH
10583: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10587: LD_INT 52
10589: PPUSH
10590: LD_VAR 0 3
10594: PPUSH
10595: LD_INT 1
10597: PPUSH
10598: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10602: LD_INT 6
10604: PPUSH
10605: LD_VAR 0 3
10609: PPUSH
10610: LD_INT 1
10612: PPUSH
10613: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10617: LD_INT 15
10619: PPUSH
10620: LD_VAR 0 3
10624: PPUSH
10625: LD_INT 1
10627: PPUSH
10628: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10632: LD_INT 7
10634: PPUSH
10635: LD_VAR 0 3
10639: PPUSH
10640: LD_INT 1
10642: PPUSH
10643: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10647: LD_INT 12
10649: PPUSH
10650: LD_VAR 0 3
10654: PPUSH
10655: LD_INT 1
10657: PPUSH
10658: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
10662: LD_INT 17
10664: PPUSH
10665: LD_VAR 0 3
10669: PPUSH
10670: LD_INT 1
10672: PPUSH
10673: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10677: LD_INT 18
10679: PPUSH
10680: LD_VAR 0 3
10684: PPUSH
10685: LD_INT 1
10687: PPUSH
10688: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10692: LD_INT 60
10694: PPUSH
10695: LD_VAR 0 3
10699: PPUSH
10700: LD_INT 1
10702: PPUSH
10703: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
10707: LD_INT 32
10709: PPUSH
10710: LD_VAR 0 3
10714: PPUSH
10715: LD_INT 1
10717: PPUSH
10718: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10722: LD_INT 9
10724: PPUSH
10725: LD_VAR 0 3
10729: PPUSH
10730: LD_INT 1
10732: PPUSH
10733: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
10737: LD_INT 57
10739: PPUSH
10740: LD_VAR 0 3
10744: PPUSH
10745: LD_INT 1
10747: PPUSH
10748: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10752: LD_INT 30
10754: PPUSH
10755: LD_VAR 0 3
10759: PPUSH
10760: LD_INT 1
10762: PPUSH
10763: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10767: LD_INT 37
10769: PPUSH
10770: LD_VAR 0 3
10774: PPUSH
10775: LD_INT 1
10777: PPUSH
10778: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
10782: LD_INT 63
10784: PPUSH
10785: LD_VAR 0 3
10789: PPUSH
10790: LD_INT 1
10792: PPUSH
10793: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
10797: LD_INT 3
10799: PPUSH
10800: LD_VAR 0 3
10804: PPUSH
10805: LD_INT 1
10807: PPUSH
10808: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
10812: LD_INT 4
10814: PPUSH
10815: LD_VAR 0 3
10819: PPUSH
10820: LD_INT 1
10822: PPUSH
10823: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10827: LD_INT 5
10829: PPUSH
10830: LD_VAR 0 3
10834: PPUSH
10835: LD_INT 1
10837: PPUSH
10838: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10842: LD_INT 66
10844: PPUSH
10845: LD_VAR 0 3
10849: PPUSH
10850: LD_INT 1
10852: PPUSH
10853: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10857: LD_INT 21
10859: PPUSH
10860: LD_VAR 0 3
10864: PPUSH
10865: LD_INT 1
10867: PPUSH
10868: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10872: LD_INT 22
10874: PPUSH
10875: LD_VAR 0 3
10879: PPUSH
10880: LD_INT 1
10882: PPUSH
10883: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
10887: LD_INT 19
10889: PPUSH
10890: LD_VAR 0 3
10894: PPUSH
10895: LD_INT 1
10897: PPUSH
10898: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10902: LD_INT 54
10904: PPUSH
10905: LD_VAR 0 3
10909: PPUSH
10910: LD_INT 1
10912: PPUSH
10913: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
10917: LD_INT 55
10919: PPUSH
10920: LD_VAR 0 3
10924: PPUSH
10925: LD_INT 1
10927: PPUSH
10928: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10932: LD_INT 0
10934: PPUSH
10935: LD_VAR 0 3
10939: PPUSH
10940: LD_INT 1
10942: PPUSH
10943: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10947: LD_INT 1
10949: PPUSH
10950: LD_VAR 0 3
10954: PPUSH
10955: LD_INT 1
10957: PPUSH
10958: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10962: LD_INT 2
10964: PPUSH
10965: LD_VAR 0 3
10969: PPUSH
10970: LD_INT 1
10972: PPUSH
10973: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10977: LD_INT 3
10979: PPUSH
10980: LD_VAR 0 3
10984: PPUSH
10985: LD_INT 1
10987: PPUSH
10988: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10992: LD_INT 4
10994: PPUSH
10995: LD_VAR 0 3
10999: PPUSH
11000: LD_INT 1
11002: PPUSH
11003: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11007: LD_INT 5
11009: PPUSH
11010: LD_VAR 0 3
11014: PPUSH
11015: LD_INT 1
11017: PPUSH
11018: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11022: LD_INT 6
11024: PPUSH
11025: LD_VAR 0 3
11029: PPUSH
11030: LD_INT 1
11032: PPUSH
11033: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11037: LD_INT 7
11039: PPUSH
11040: LD_VAR 0 3
11044: PPUSH
11045: LD_INT 1
11047: PPUSH
11048: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11052: LD_INT 8
11054: PPUSH
11055: LD_VAR 0 3
11059: PPUSH
11060: LD_INT 1
11062: PPUSH
11063: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11067: LD_INT 10
11069: PPUSH
11070: LD_VAR 0 3
11074: PPUSH
11075: LD_INT 1
11077: PPUSH
11078: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11082: LD_INT 11
11084: PPUSH
11085: LD_VAR 0 3
11089: PPUSH
11090: LD_INT 1
11092: PPUSH
11093: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11097: LD_INT 12
11099: PPUSH
11100: LD_VAR 0 3
11104: PPUSH
11105: LD_INT 1
11107: PPUSH
11108: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11112: LD_INT 13
11114: PPUSH
11115: LD_VAR 0 3
11119: PPUSH
11120: LD_INT 1
11122: PPUSH
11123: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11127: LD_INT 14
11129: PPUSH
11130: LD_VAR 0 3
11134: PPUSH
11135: LD_INT 1
11137: PPUSH
11138: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11142: LD_INT 15
11144: PPUSH
11145: LD_VAR 0 3
11149: PPUSH
11150: LD_INT 1
11152: PPUSH
11153: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11157: LD_INT 16
11159: PPUSH
11160: LD_VAR 0 3
11164: PPUSH
11165: LD_INT 1
11167: PPUSH
11168: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11172: LD_INT 17
11174: PPUSH
11175: LD_VAR 0 3
11179: PPUSH
11180: LD_INT 1
11182: PPUSH
11183: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11187: LD_INT 18
11189: PPUSH
11190: LD_VAR 0 3
11194: PPUSH
11195: LD_INT 1
11197: PPUSH
11198: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11202: LD_INT 19
11204: PPUSH
11205: LD_VAR 0 3
11209: PPUSH
11210: LD_INT 1
11212: PPUSH
11213: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11217: LD_INT 20
11219: PPUSH
11220: LD_VAR 0 3
11224: PPUSH
11225: LD_INT 1
11227: PPUSH
11228: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11232: LD_INT 21
11234: PPUSH
11235: LD_VAR 0 3
11239: PPUSH
11240: LD_INT 1
11242: PPUSH
11243: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11247: LD_INT 23
11249: PPUSH
11250: LD_VAR 0 3
11254: PPUSH
11255: LD_INT 1
11257: PPUSH
11258: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11262: LD_INT 26
11264: PPUSH
11265: LD_VAR 0 3
11269: PPUSH
11270: LD_INT 1
11272: PPUSH
11273: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11277: LD_INT 27
11279: PPUSH
11280: LD_VAR 0 3
11284: PPUSH
11285: LD_INT 1
11287: PPUSH
11288: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11292: LD_INT 28
11294: PPUSH
11295: LD_VAR 0 3
11299: PPUSH
11300: LD_INT 1
11302: PPUSH
11303: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11307: LD_INT 29
11309: PPUSH
11310: LD_VAR 0 3
11314: PPUSH
11315: LD_INT 1
11317: PPUSH
11318: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11322: LD_INT 30
11324: PPUSH
11325: LD_VAR 0 3
11329: PPUSH
11330: LD_INT 1
11332: PPUSH
11333: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11337: LD_INT 31
11339: PPUSH
11340: LD_VAR 0 3
11344: PPUSH
11345: LD_INT 1
11347: PPUSH
11348: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11352: LD_INT 32
11354: PPUSH
11355: LD_VAR 0 3
11359: PPUSH
11360: LD_INT 1
11362: PPUSH
11363: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
11367: LD_INT 33
11369: PPUSH
11370: LD_VAR 0 3
11374: PPUSH
11375: LD_INT 1
11377: PPUSH
11378: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11382: LD_INT 36
11384: PPUSH
11385: LD_VAR 0 3
11389: PPUSH
11390: LD_INT 1
11392: PPUSH
11393: CALL_OW 324
// end ; 6 :
11397: GO 12407
11399: LD_INT 6
11401: DOUBLE
11402: EQUAL
11403: IFTRUE 11407
11405: GO 12332
11407: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11408: LD_INT 35
11410: PPUSH
11411: LD_VAR 0 3
11415: PPUSH
11416: LD_INT 1
11418: PPUSH
11419: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11423: LD_INT 45
11425: PPUSH
11426: LD_VAR 0 3
11430: PPUSH
11431: LD_INT 1
11433: PPUSH
11434: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11438: LD_INT 46
11440: PPUSH
11441: LD_VAR 0 3
11445: PPUSH
11446: LD_INT 1
11448: PPUSH
11449: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11453: LD_INT 47
11455: PPUSH
11456: LD_VAR 0 3
11460: PPUSH
11461: LD_INT 1
11463: PPUSH
11464: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11468: LD_INT 1
11470: PPUSH
11471: LD_VAR 0 3
11475: PPUSH
11476: LD_INT 1
11478: PPUSH
11479: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11483: LD_INT 2
11485: PPUSH
11486: LD_VAR 0 3
11490: PPUSH
11491: LD_INT 1
11493: PPUSH
11494: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11498: LD_INT 11
11500: PPUSH
11501: LD_VAR 0 3
11505: PPUSH
11506: LD_INT 1
11508: PPUSH
11509: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11513: LD_INT 20
11515: PPUSH
11516: LD_VAR 0 3
11520: PPUSH
11521: LD_INT 1
11523: PPUSH
11524: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11528: LD_INT 48
11530: PPUSH
11531: LD_VAR 0 3
11535: PPUSH
11536: LD_INT 1
11538: PPUSH
11539: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11543: LD_INT 49
11545: PPUSH
11546: LD_VAR 0 3
11550: PPUSH
11551: LD_INT 1
11553: PPUSH
11554: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
11558: LD_INT 50
11560: PPUSH
11561: LD_VAR 0 3
11565: PPUSH
11566: LD_INT 1
11568: PPUSH
11569: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11573: LD_INT 69
11575: PPUSH
11576: LD_VAR 0 3
11580: PPUSH
11581: LD_INT 1
11583: PPUSH
11584: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11588: LD_INT 39
11590: PPUSH
11591: LD_VAR 0 3
11595: PPUSH
11596: LD_INT 1
11598: PPUSH
11599: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11603: LD_INT 34
11605: PPUSH
11606: LD_VAR 0 3
11610: PPUSH
11611: LD_INT 1
11613: PPUSH
11614: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11618: LD_INT 42
11620: PPUSH
11621: LD_VAR 0 3
11625: PPUSH
11626: LD_INT 1
11628: PPUSH
11629: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11633: LD_INT 44
11635: PPUSH
11636: LD_VAR 0 3
11640: PPUSH
11641: LD_INT 1
11643: PPUSH
11644: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11648: LD_INT 41
11650: PPUSH
11651: LD_VAR 0 3
11655: PPUSH
11656: LD_INT 1
11658: PPUSH
11659: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
11663: LD_INT 13
11665: PPUSH
11666: LD_VAR 0 3
11670: PPUSH
11671: LD_INT 1
11673: PPUSH
11674: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11678: LD_INT 40
11680: PPUSH
11681: LD_VAR 0 3
11685: PPUSH
11686: LD_INT 1
11688: PPUSH
11689: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11693: LD_INT 43
11695: PPUSH
11696: LD_VAR 0 3
11700: PPUSH
11701: LD_INT 1
11703: PPUSH
11704: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11708: LD_INT 70
11710: PPUSH
11711: LD_VAR 0 3
11715: PPUSH
11716: LD_INT 1
11718: PPUSH
11719: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
11723: LD_INT 23
11725: PPUSH
11726: LD_VAR 0 3
11730: PPUSH
11731: LD_INT 1
11733: PPUSH
11734: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11738: LD_INT 51
11740: PPUSH
11741: LD_VAR 0 3
11745: PPUSH
11746: LD_INT 1
11748: PPUSH
11749: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11753: LD_INT 52
11755: PPUSH
11756: LD_VAR 0 3
11760: PPUSH
11761: LD_INT 1
11763: PPUSH
11764: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11768: LD_INT 6
11770: PPUSH
11771: LD_VAR 0 3
11775: PPUSH
11776: LD_INT 1
11778: PPUSH
11779: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11783: LD_INT 15
11785: PPUSH
11786: LD_VAR 0 3
11790: PPUSH
11791: LD_INT 1
11793: PPUSH
11794: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11798: LD_INT 7
11800: PPUSH
11801: LD_VAR 0 3
11805: PPUSH
11806: LD_INT 1
11808: PPUSH
11809: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11813: LD_INT 12
11815: PPUSH
11816: LD_VAR 0 3
11820: PPUSH
11821: LD_INT 1
11823: PPUSH
11824: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
11828: LD_INT 10
11830: PPUSH
11831: LD_VAR 0 3
11835: PPUSH
11836: LD_INT 1
11838: PPUSH
11839: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11843: LD_INT 17
11845: PPUSH
11846: LD_VAR 0 3
11850: PPUSH
11851: LD_INT 1
11853: PPUSH
11854: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11858: LD_INT 18
11860: PPUSH
11861: LD_VAR 0 3
11865: PPUSH
11866: LD_INT 1
11868: PPUSH
11869: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11873: LD_INT 60
11875: PPUSH
11876: LD_VAR 0 3
11880: PPUSH
11881: LD_INT 1
11883: PPUSH
11884: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
11888: LD_INT 61
11890: PPUSH
11891: LD_VAR 0 3
11895: PPUSH
11896: LD_INT 1
11898: PPUSH
11899: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11903: LD_INT 32
11905: PPUSH
11906: LD_VAR 0 3
11910: PPUSH
11911: LD_INT 1
11913: PPUSH
11914: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
11918: LD_INT 27
11920: PPUSH
11921: LD_VAR 0 3
11925: PPUSH
11926: LD_INT 1
11928: PPUSH
11929: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
11933: LD_INT 36
11935: PPUSH
11936: LD_VAR 0 3
11940: PPUSH
11941: LD_INT 1
11943: PPUSH
11944: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
11948: LD_INT 33
11950: PPUSH
11951: LD_VAR 0 3
11955: PPUSH
11956: LD_INT 1
11958: PPUSH
11959: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11963: LD_INT 9
11965: PPUSH
11966: LD_VAR 0 3
11970: PPUSH
11971: LD_INT 1
11973: PPUSH
11974: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
11978: LD_INT 38
11980: PPUSH
11981: LD_VAR 0 3
11985: PPUSH
11986: LD_INT 1
11988: PPUSH
11989: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11993: LD_INT 57
11995: PPUSH
11996: LD_VAR 0 3
12000: PPUSH
12001: LD_INT 1
12003: PPUSH
12004: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12008: LD_INT 58
12010: PPUSH
12011: LD_VAR 0 3
12015: PPUSH
12016: LD_INT 1
12018: PPUSH
12019: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12023: LD_INT 28
12025: PPUSH
12026: LD_VAR 0 3
12030: PPUSH
12031: LD_INT 1
12033: PPUSH
12034: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12038: LD_INT 29
12040: PPUSH
12041: LD_VAR 0 3
12045: PPUSH
12046: LD_INT 1
12048: PPUSH
12049: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12053: LD_INT 30
12055: PPUSH
12056: LD_VAR 0 3
12060: PPUSH
12061: LD_INT 1
12063: PPUSH
12064: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12068: LD_INT 37
12070: PPUSH
12071: LD_VAR 0 3
12075: PPUSH
12076: LD_INT 1
12078: PPUSH
12079: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12083: LD_INT 63
12085: PPUSH
12086: LD_VAR 0 3
12090: PPUSH
12091: LD_INT 1
12093: PPUSH
12094: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12098: LD_INT 64
12100: PPUSH
12101: LD_VAR 0 3
12105: PPUSH
12106: LD_INT 1
12108: PPUSH
12109: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12113: LD_INT 3
12115: PPUSH
12116: LD_VAR 0 3
12120: PPUSH
12121: LD_INT 1
12123: PPUSH
12124: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12128: LD_INT 4
12130: PPUSH
12131: LD_VAR 0 3
12135: PPUSH
12136: LD_INT 1
12138: PPUSH
12139: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12143: LD_INT 5
12145: PPUSH
12146: LD_VAR 0 3
12150: PPUSH
12151: LD_INT 1
12153: PPUSH
12154: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12158: LD_INT 8
12160: PPUSH
12161: LD_VAR 0 3
12165: PPUSH
12166: LD_INT 1
12168: PPUSH
12169: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12173: LD_INT 66
12175: PPUSH
12176: LD_VAR 0 3
12180: PPUSH
12181: LD_INT 1
12183: PPUSH
12184: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12188: LD_INT 67
12190: PPUSH
12191: LD_VAR 0 3
12195: PPUSH
12196: LD_INT 1
12198: PPUSH
12199: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12203: LD_INT 21
12205: PPUSH
12206: LD_VAR 0 3
12210: PPUSH
12211: LD_INT 1
12213: PPUSH
12214: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12218: LD_INT 22
12220: PPUSH
12221: LD_VAR 0 3
12225: PPUSH
12226: LD_INT 1
12228: PPUSH
12229: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12233: LD_INT 19
12235: PPUSH
12236: LD_VAR 0 3
12240: PPUSH
12241: LD_INT 1
12243: PPUSH
12244: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12248: LD_INT 26
12250: PPUSH
12251: LD_VAR 0 3
12255: PPUSH
12256: LD_INT 1
12258: PPUSH
12259: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12263: LD_INT 54
12265: PPUSH
12266: LD_VAR 0 3
12270: PPUSH
12271: LD_INT 1
12273: PPUSH
12274: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12278: LD_INT 55
12280: PPUSH
12281: LD_VAR 0 3
12285: PPUSH
12286: LD_INT 1
12288: PPUSH
12289: CALL_OW 322
// for i = 0 to 39 do
12293: LD_ADDR_VAR 0 4
12297: PUSH
12298: DOUBLE
12299: LD_INT 0
12301: DEC
12302: ST_TO_ADDR
12303: LD_INT 39
12305: PUSH
12306: FOR_TO
12307: IFFALSE 12328
// SetRestrict ( i , side , true ) ;
12309: LD_VAR 0 4
12313: PPUSH
12314: LD_VAR 0 3
12318: PPUSH
12319: LD_INT 1
12321: PPUSH
12322: CALL_OW 324
12326: GO 12306
12328: POP
12329: POP
// end ; else
12330: GO 12407
12332: POP
// begin for i = 1 to 73 do
12333: LD_ADDR_VAR 0 4
12337: PUSH
12338: DOUBLE
12339: LD_INT 1
12341: DEC
12342: ST_TO_ADDR
12343: LD_INT 73
12345: PUSH
12346: FOR_TO
12347: IFFALSE 12368
// SetTech ( i , side , state_enabled ) ;
12349: LD_VAR 0 4
12353: PPUSH
12354: LD_VAR 0 3
12358: PPUSH
12359: LD_INT 1
12361: PPUSH
12362: CALL_OW 322
12366: GO 12346
12368: POP
12369: POP
// for i = 0 to 39 do
12370: LD_ADDR_VAR 0 4
12374: PUSH
12375: DOUBLE
12376: LD_INT 0
12378: DEC
12379: ST_TO_ADDR
12380: LD_INT 39
12382: PUSH
12383: FOR_TO
12384: IFFALSE 12405
// SetRestrict ( i , side , true ) ;
12386: LD_VAR 0 4
12390: PPUSH
12391: LD_VAR 0 3
12395: PPUSH
12396: LD_INT 1
12398: PPUSH
12399: CALL_OW 324
12403: GO 12383
12405: POP
12406: POP
// end ; end ; end ;
12407: GO 8412
12409: POP
12410: POP
// end ; end_of_file
12411: LD_VAR 0 2
12415: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
12416: LD_INT 0
12418: PPUSH
12419: PPUSH
12420: PPUSH
12421: PPUSH
12422: PPUSH
12423: PPUSH
12424: PPUSH
12425: PPUSH
12426: PPUSH
// for i := 1 to 8 do
12427: LD_ADDR_VAR 0 2
12431: PUSH
12432: DOUBLE
12433: LD_INT 1
12435: DEC
12436: ST_TO_ADDR
12437: LD_INT 8
12439: PUSH
12440: FOR_TO
12441: IFFALSE 12825
// begin if Side_Positions [ i ] then
12443: LD_EXP 32
12447: PUSH
12448: LD_VAR 0 2
12452: ARRAY
12453: IFFALSE 12823
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
12455: LD_ADDR_VAR 0 7
12459: PUSH
12460: LD_INT 22
12462: PUSH
12463: LD_VAR 0 2
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 21
12474: PUSH
12475: LD_INT 1
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PPUSH
12486: CALL_OW 69
12490: PUSH
12491: LD_INT 0
12493: PLUS
12494: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12495: LD_ADDR_VAR 0 9
12499: PUSH
12500: LD_INT 22
12502: PUSH
12503: LD_VAR 0 2
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 2
12514: PUSH
12515: LD_INT 30
12517: PUSH
12518: LD_INT 0
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: PUSH
12525: LD_INT 30
12527: PUSH
12528: LD_INT 1
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PPUSH
12544: CALL_OW 69
12548: ST_TO_ADDR
// crates := 0 ;
12549: LD_ADDR_VAR 0 4
12553: PUSH
12554: LD_INT 0
12556: ST_TO_ADDR
// oil := 0 ;
12557: LD_ADDR_VAR 0 5
12561: PUSH
12562: LD_INT 0
12564: ST_TO_ADDR
// sib := 0 ;
12565: LD_ADDR_VAR 0 6
12569: PUSH
12570: LD_INT 0
12572: ST_TO_ADDR
// if bases then
12573: LD_VAR 0 9
12577: IFFALSE 12683
// begin for j in bases do
12579: LD_ADDR_VAR 0 3
12583: PUSH
12584: LD_VAR 0 9
12588: PUSH
12589: FOR_IN
12590: IFFALSE 12681
// begin base := GetBase ( j ) ;
12592: LD_ADDR_VAR 0 8
12596: PUSH
12597: LD_VAR 0 3
12601: PPUSH
12602: CALL_OW 274
12606: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
12607: LD_ADDR_VAR 0 4
12611: PUSH
12612: LD_VAR 0 4
12616: PUSH
12617: LD_VAR 0 8
12621: PPUSH
12622: LD_INT 1
12624: PPUSH
12625: CALL_OW 275
12629: PLUS
12630: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
12631: LD_ADDR_VAR 0 5
12635: PUSH
12636: LD_VAR 0 5
12640: PUSH
12641: LD_VAR 0 8
12645: PPUSH
12646: LD_INT 2
12648: PPUSH
12649: CALL_OW 275
12653: PLUS
12654: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
12655: LD_ADDR_VAR 0 6
12659: PUSH
12660: LD_VAR 0 6
12664: PUSH
12665: LD_VAR 0 8
12669: PPUSH
12670: LD_INT 3
12672: PPUSH
12673: CALL_OW 275
12677: PLUS
12678: ST_TO_ADDR
// end ;
12679: GO 12589
12681: POP
12682: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
12683: LD_STRING setSpecText(
12685: PUSH
12686: LD_VAR 0 2
12690: STR
12691: PUSH
12692: LD_STRING ,
12694: STR
12695: PUSH
12696: LD_INT 2
12698: STR
12699: PUSH
12700: LD_STRING ,
12702: STR
12703: PUSH
12704: LD_VAR 0 4
12708: STR
12709: PUSH
12710: LD_STRING )
12712: STR
12713: PPUSH
12714: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
12718: LD_STRING setSpecText(
12720: PUSH
12721: LD_VAR 0 2
12725: STR
12726: PUSH
12727: LD_STRING ,
12729: STR
12730: PUSH
12731: LD_INT 3
12733: STR
12734: PUSH
12735: LD_STRING ,
12737: STR
12738: PUSH
12739: LD_VAR 0 5
12743: STR
12744: PUSH
12745: LD_STRING )
12747: STR
12748: PPUSH
12749: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
12753: LD_STRING setSpecText(
12755: PUSH
12756: LD_VAR 0 2
12760: STR
12761: PUSH
12762: LD_STRING ,
12764: STR
12765: PUSH
12766: LD_INT 4
12768: STR
12769: PUSH
12770: LD_STRING ,
12772: STR
12773: PUSH
12774: LD_VAR 0 6
12778: STR
12779: PUSH
12780: LD_STRING )
12782: STR
12783: PPUSH
12784: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
12788: LD_STRING setSpecText(
12790: PUSH
12791: LD_VAR 0 2
12795: STR
12796: PUSH
12797: LD_STRING ,
12799: STR
12800: PUSH
12801: LD_INT 5
12803: STR
12804: PUSH
12805: LD_STRING ,
12807: STR
12808: PUSH
12809: LD_VAR 0 7
12813: STR
12814: PUSH
12815: LD_STRING )
12817: STR
12818: PPUSH
12819: CALL_OW 559
// end ; end ;
12823: GO 12440
12825: POP
12826: POP
// end ;
12827: LD_VAR 0 1
12831: RET
// every 0 0$1 do
12832: GO 12834
12834: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
12835: LD_STRING setSpecLogoNumber(
12837: PUSH
12838: LD_INT 2
12840: STR
12841: PUSH
12842: LD_STRING ,
12844: STR
12845: PUSH
12846: LD_INT 1
12848: STR
12849: PUSH
12850: LD_STRING )
12852: STR
12853: PPUSH
12854: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
12858: LD_STRING setSpecLogoNumber(
12860: PUSH
12861: LD_INT 3
12863: STR
12864: PUSH
12865: LD_STRING ,
12867: STR
12868: PUSH
12869: LD_INT 2
12871: STR
12872: PUSH
12873: LD_STRING )
12875: STR
12876: PPUSH
12877: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
12881: LD_STRING setSpecLogoNumber(
12883: PUSH
12884: LD_INT 4
12886: STR
12887: PUSH
12888: LD_STRING ,
12890: STR
12891: PUSH
12892: LD_INT 3
12894: STR
12895: PUSH
12896: LD_STRING )
12898: STR
12899: PPUSH
12900: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
12904: LD_STRING setSpecLogoNumber(
12906: PUSH
12907: LD_INT 5
12909: STR
12910: PUSH
12911: LD_STRING ,
12913: STR
12914: PUSH
12915: LD_INT 4
12917: STR
12918: PUSH
12919: LD_STRING )
12921: STR
12922: PPUSH
12923: CALL_OW 559
// end ;
12927: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
12928: LD_INT 2
12930: PUSH
12931: LD_INT 30
12933: PUSH
12934: LD_INT 0
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: LD_INT 30
12943: PUSH
12944: LD_INT 1
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: LIST
12955: PPUSH
12956: CALL_OW 69
12960: IFFALSE 12970
12962: GO 12964
12964: DISABLE
// begin enable ;
12965: ENABLE
// UpdateSpectatorBar ;
12966: CALL 12416 0 0
// end ; end_of_file
12970: END
// var respawn , inqueue ; export function init_respawning ; begin
12971: LD_INT 0
12973: PPUSH
// respawn := Rand ( 1 , 8 ) ;
12974: LD_ADDR_LOC 18
12978: PUSH
12979: LD_INT 1
12981: PPUSH
12982: LD_INT 8
12984: PPUSH
12985: CALL_OW 12
12989: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12990: LD_ADDR_LOC 19
12994: PUSH
12995: LD_INT 0
12997: PUSH
12998: LD_INT 0
13000: PUSH
13001: LD_INT 0
13003: PUSH
13004: LD_INT 0
13006: PUSH
13007: LD_INT 0
13009: PUSH
13010: LD_INT 0
13012: PUSH
13013: LD_INT 0
13015: PUSH
13016: LD_INT 0
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: ST_TO_ADDR
// end ;
13029: LD_VAR 0 1
13033: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13034: GO 13036
13036: DISABLE
13037: LD_INT 0
13039: PPUSH
13040: PPUSH
13041: PPUSH
// begin if respawning_time_max = 0 then
13042: LD_EXP 26
13046: PUSH
13047: LD_INT 0
13049: EQUAL
13050: IFFALSE 13054
// exit ;
13052: GO 13462
// if respawn = 8 then
13054: LD_LOC 18
13058: PUSH
13059: LD_INT 8
13061: EQUAL
13062: IFFALSE 13074
// respawn := 1 else
13064: LD_ADDR_LOC 18
13068: PUSH
13069: LD_INT 1
13071: ST_TO_ADDR
13072: GO 13088
// respawn := respawn + 1 ;
13074: LD_ADDR_LOC 18
13078: PUSH
13079: LD_LOC 18
13083: PUSH
13084: LD_INT 1
13086: PLUS
13087: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
13088: LD_EXP 32
13092: PUSH
13093: LD_LOC 18
13097: ARRAY
13098: PUSH
13099: LD_LOC 19
13103: PUSH
13104: LD_LOC 18
13108: ARRAY
13109: NOT
13110: AND
13111: IFFALSE 13461
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
13113: LD_ADDR_VAR 0 1
13117: PUSH
13118: LD_INT 21
13120: PUSH
13121: LD_INT 1
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PUSH
13128: LD_INT 22
13130: PUSH
13131: LD_LOC 18
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PUSH
13140: LD_INT 3
13142: PUSH
13143: LD_INT 23
13145: PUSH
13146: LD_INT 0
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: PPUSH
13159: CALL_OW 69
13163: ST_TO_ADDR
// if n < number_of_people then
13164: LD_VAR 0 1
13168: PUSH
13169: LD_EXP 19
13173: LESS
13174: IFFALSE 13458
// begin aktresp := respawn ;
13176: LD_ADDR_VAR 0 3
13180: PUSH
13181: LD_LOC 18
13185: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
13186: LD_ADDR_LOC 19
13190: PUSH
13191: LD_LOC 19
13195: PPUSH
13196: LD_VAR 0 3
13200: PPUSH
13201: LD_INT 1
13203: PPUSH
13204: CALL_OW 1
13208: ST_TO_ADDR
// enable ;
13209: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
13210: LD_EXP 25
13214: PPUSH
13215: LD_EXP 26
13219: PPUSH
13220: CALL_OW 12
13224: PPUSH
13225: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
13229: LD_ADDR_LOC 19
13233: PUSH
13234: LD_LOC 19
13238: PPUSH
13239: LD_VAR 0 3
13243: PPUSH
13244: LD_INT 0
13246: PPUSH
13247: CALL_OW 1
13251: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
13252: LD_ADDR_VAR 0 2
13256: PUSH
13257: LD_INT 21
13259: PUSH
13260: LD_INT 3
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: LD_INT 2
13269: PUSH
13270: LD_INT 30
13272: PUSH
13273: LD_INT 0
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PUSH
13280: LD_INT 30
13282: PUSH
13283: LD_INT 1
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: LIST
13294: PUSH
13295: LD_INT 50
13297: PUSH
13298: EMPTY
13299: LIST
13300: PUSH
13301: LD_INT 22
13303: PUSH
13304: LD_VAR 0 3
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: PPUSH
13319: CALL_OW 69
13323: ST_TO_ADDR
// if dep = 0 then
13324: LD_VAR 0 2
13328: PUSH
13329: LD_INT 0
13331: EQUAL
13332: IFFALSE 13336
// exit ;
13334: GO 13462
// hc_name :=  ;
13336: LD_ADDR_OWVAR 26
13340: PUSH
13341: LD_STRING 
13343: ST_TO_ADDR
// hc_importance := 0 ;
13344: LD_ADDR_OWVAR 32
13348: PUSH
13349: LD_INT 0
13351: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
13352: LD_INT 0
13354: PPUSH
13355: LD_INT 0
13357: PPUSH
13358: LD_EXP 20
13362: PUSH
13363: LD_INT 2
13365: DIV
13366: PPUSH
13367: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
13371: LD_ADDR_OWVAR 21
13375: PUSH
13376: LD_EXP 33
13380: PUSH
13381: LD_VAR 0 3
13385: ARRAY
13386: ST_TO_ADDR
// uc_side := aktresp ;
13387: LD_ADDR_OWVAR 20
13391: PUSH
13392: LD_VAR 0 3
13396: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
13397: LD_ADDR_VAR 0 2
13401: PUSH
13402: LD_VAR 0 2
13406: PUSH
13407: LD_INT 1
13409: PPUSH
13410: LD_VAR 0 2
13414: PPUSH
13415: CALL_OW 12
13419: ARRAY
13420: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
13421: CALL_OW 44
13425: PPUSH
13426: LD_VAR 0 2
13430: PPUSH
13431: CALL_OW 250
13435: PPUSH
13436: LD_VAR 0 2
13440: PPUSH
13441: CALL_OW 251
13445: PPUSH
13446: LD_INT 7
13448: PPUSH
13449: LD_INT 1
13451: PPUSH
13452: CALL_OW 50
// end else
13456: GO 13459
// enable ;
13458: ENABLE
// end else
13459: GO 13462
// enable ;
13461: ENABLE
// end ; end_of_file
13462: PPOPN 3
13464: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
13465: LD_INT 0
13467: PPUSH
13468: PPUSH
13469: PPUSH
// BuildUpTime_Delay = 0 ;
13470: LD_ADDR_EXP 56
13474: PUSH
13475: LD_INT 0
13477: ST_TO_ADDR
// if not def_builduptime then
13478: LD_EXP 14
13482: NOT
13483: IFFALSE 13487
// exit ;
13485: GO 13670
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
13487: LD_ADDR_EXP 56
13491: PUSH
13492: LD_INT 8400
13494: PUSH
13495: LD_INT 2100
13497: PUSH
13498: LD_EXP 14
13502: MUL
13503: PLUS
13504: ST_TO_ADDR
// BuildUpTimeActive := true ;
13505: LD_ADDR_EXP 55
13509: PUSH
13510: LD_INT 1
13512: ST_TO_ADDR
// for i := 1 to 8 do
13513: LD_ADDR_VAR 0 2
13517: PUSH
13518: DOUBLE
13519: LD_INT 1
13521: DEC
13522: ST_TO_ADDR
13523: LD_INT 8
13525: PUSH
13526: FOR_TO
13527: IFFALSE 13668
// if Side_Positions [ i ] then
13529: LD_EXP 32
13533: PUSH
13534: LD_VAR 0 2
13538: ARRAY
13539: IFFALSE 13666
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
13541: LD_EXP 54
13545: PUSH
13546: LD_EXP 32
13550: PUSH
13551: LD_VAR 0 2
13555: ARRAY
13556: ARRAY
13557: PPUSH
13558: LD_INT 5
13560: PPUSH
13561: CALL_OW 424
// for j := 1 to 8 do
13565: LD_ADDR_VAR 0 3
13569: PUSH
13570: DOUBLE
13571: LD_INT 1
13573: DEC
13574: ST_TO_ADDR
13575: LD_INT 8
13577: PUSH
13578: FOR_TO
13579: IFFALSE 13664
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13581: LD_EXP 32
13585: PUSH
13586: LD_VAR 0 3
13590: ARRAY
13591: PUSH
13592: LD_EXP 30
13596: PUSH
13597: LD_VAR 0 2
13601: ARRAY
13602: PUSH
13603: LD_EXP 30
13607: PUSH
13608: LD_VAR 0 3
13612: ARRAY
13613: NONEQUAL
13614: PUSH
13615: LD_EXP 34
13619: NOT
13620: PUSH
13621: LD_VAR 0 2
13625: PUSH
13626: LD_VAR 0 3
13630: NONEQUAL
13631: AND
13632: OR
13633: AND
13634: IFFALSE 13662
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13636: LD_VAR 0 3
13640: PPUSH
13641: LD_EXP 54
13645: PUSH
13646: LD_EXP 32
13650: PUSH
13651: LD_VAR 0 2
13655: ARRAY
13656: ARRAY
13657: PPUSH
13658: CALL_OW 333
13662: GO 13578
13664: POP
13665: POP
// end ;
13666: GO 13526
13668: POP
13669: POP
// end ;
13670: LD_VAR 0 1
13674: RET
// export function EndBuildUp ; var i , j ; begin
13675: LD_INT 0
13677: PPUSH
13678: PPUSH
13679: PPUSH
// BuildUpTimeActive := false ;
13680: LD_ADDR_EXP 55
13684: PUSH
13685: LD_INT 0
13687: ST_TO_ADDR
// for i := 1 to 8 do
13688: LD_ADDR_VAR 0 2
13692: PUSH
13693: DOUBLE
13694: LD_INT 1
13696: DEC
13697: ST_TO_ADDR
13698: LD_INT 8
13700: PUSH
13701: FOR_TO
13702: IFFALSE 13843
// if Side_Positions [ i ] then
13704: LD_EXP 32
13708: PUSH
13709: LD_VAR 0 2
13713: ARRAY
13714: IFFALSE 13841
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
13716: LD_EXP 54
13720: PUSH
13721: LD_EXP 32
13725: PUSH
13726: LD_VAR 0 2
13730: ARRAY
13731: ARRAY
13732: PPUSH
13733: LD_INT 0
13735: PPUSH
13736: CALL_OW 424
// for j := 1 to 8 do
13740: LD_ADDR_VAR 0 3
13744: PUSH
13745: DOUBLE
13746: LD_INT 1
13748: DEC
13749: ST_TO_ADDR
13750: LD_INT 8
13752: PUSH
13753: FOR_TO
13754: IFFALSE 13839
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13756: LD_EXP 32
13760: PUSH
13761: LD_VAR 0 3
13765: ARRAY
13766: PUSH
13767: LD_EXP 30
13771: PUSH
13772: LD_VAR 0 2
13776: ARRAY
13777: PUSH
13778: LD_EXP 30
13782: PUSH
13783: LD_VAR 0 3
13787: ARRAY
13788: NONEQUAL
13789: PUSH
13790: LD_EXP 34
13794: NOT
13795: PUSH
13796: LD_VAR 0 2
13800: PUSH
13801: LD_VAR 0 3
13805: NONEQUAL
13806: AND
13807: OR
13808: AND
13809: IFFALSE 13837
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13811: LD_VAR 0 3
13815: PPUSH
13816: LD_EXP 54
13820: PUSH
13821: LD_EXP 32
13825: PUSH
13826: LD_VAR 0 2
13830: ARRAY
13831: ARRAY
13832: PPUSH
13833: CALL_OW 334
13837: GO 13753
13839: POP
13840: POP
// end ;
13841: GO 13701
13843: POP
13844: POP
// end ;
13845: LD_VAR 0 1
13849: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
13850: LD_EXP 55
13854: IFFALSE 14029
13856: GO 13858
13858: DISABLE
13859: LD_INT 0
13861: PPUSH
13862: PPUSH
// begin for i := 1 to 8 do
13863: LD_ADDR_VAR 0 1
13867: PUSH
13868: DOUBLE
13869: LD_INT 1
13871: DEC
13872: ST_TO_ADDR
13873: LD_INT 8
13875: PUSH
13876: FOR_TO
13877: IFFALSE 14026
// if Side_Positions [ i ] then
13879: LD_EXP 32
13883: PUSH
13884: LD_VAR 0 1
13888: ARRAY
13889: IFFALSE 14024
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13891: LD_ADDR_VAR 0 2
13895: PUSH
13896: LD_EXP 54
13900: PUSH
13901: LD_EXP 32
13905: PUSH
13906: LD_VAR 0 1
13910: ARRAY
13911: ARRAY
13912: PPUSH
13913: LD_INT 2
13915: PUSH
13916: LD_INT 21
13918: PUSH
13919: LD_INT 1
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: LD_INT 21
13928: PUSH
13929: LD_INT 2
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: LIST
13940: PUSH
13941: LD_INT 22
13943: PUSH
13944: LD_OWVAR 2
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: PPUSH
13957: CALL_OW 70
13961: PUSH
13962: FOR_IN
13963: IFFALSE 14022
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
13965: LD_EXP 30
13969: PUSH
13970: LD_VAR 0 1
13974: ARRAY
13975: PUSH
13976: LD_EXP 30
13980: PUSH
13981: LD_OWVAR 2
13985: ARRAY
13986: NONEQUAL
13987: PUSH
13988: LD_EXP 34
13992: NOT
13993: PUSH
13994: LD_VAR 0 1
13998: PUSH
13999: LD_OWVAR 2
14003: NONEQUAL
14004: AND
14005: OR
14006: IFFALSE 14020
// ComMoveToArea ( un , BuildUpEscape ) ;
14008: LD_VAR 0 2
14012: PPUSH
14013: LD_INT 12
14015: PPUSH
14016: CALL_OW 113
14020: GO 13962
14022: POP
14023: POP
14024: GO 13876
14026: POP
14027: POP
// enable ;
14028: ENABLE
// end ;
14029: PPOPN 2
14031: END
// every 0 0$1 trigger def_builduptime do
14032: LD_EXP 14
14036: IFFALSE 14062
14038: GO 14040
14040: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14041: LD_INT 8400
14043: PUSH
14044: LD_EXP 14
14048: PUSH
14049: LD_INT 2100
14051: MUL
14052: PLUS
14053: PPUSH
14054: CALL_OW 67
// EndBuildUp ;
14058: CALL 13675 0 0
// end ;
14062: END
