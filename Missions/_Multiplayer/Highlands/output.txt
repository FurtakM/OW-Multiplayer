// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , amount_of_apemen , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , extra_sib_deposits_locations , normal_oil_deposits_locations , normal_sib_deposits_locations , battle_flags_id , Side_Comps ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function init_map ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// normal_oil_deposits_locations := [ [ 65 , 49 ] , [ 157 , 62 ] , [ 192 , 143 ] , [ 109 , 147 ] ] ;
   4: LD_ADDR_EXP 40
   8: PUSH
   9: LD_INT 65
  11: PUSH
  12: LD_INT 49
  14: PUSH
  15: EMPTY
  16: LIST
  17: LIST
  18: PUSH
  19: LD_INT 157
  21: PUSH
  22: LD_INT 62
  24: PUSH
  25: EMPTY
  26: LIST
  27: LIST
  28: PUSH
  29: LD_INT 192
  31: PUSH
  32: LD_INT 143
  34: PUSH
  35: EMPTY
  36: LIST
  37: LIST
  38: PUSH
  39: LD_INT 109
  41: PUSH
  42: LD_INT 147
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: EMPTY
  50: LIST
  51: LIST
  52: LIST
  53: LIST
  54: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 22 , 33 ] , [ 179 , 43 ] , [ 228 , 151 ] , [ 83 , 154 ] ] ;
  55: LD_ADDR_EXP 38
  59: PUSH
  60: LD_INT 22
  62: PUSH
  63: LD_INT 33
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 179
  72: PUSH
  73: LD_INT 43
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: LD_INT 228
  82: PUSH
  83: LD_INT 151
  85: PUSH
  86: EMPTY
  87: LIST
  88: LIST
  89: PUSH
  90: LD_INT 83
  92: PUSH
  93: LD_INT 154
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: PUSH
 100: EMPTY
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 39 , 18 ] , [ 138 , 27 ] , [ 222 , 157 ] , [ 82 , 115 ] ] ;
 106: LD_ADDR_EXP 41
 110: PUSH
 111: LD_INT 39
 113: PUSH
 114: LD_INT 18
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: PUSH
 121: LD_INT 138
 123: PUSH
 124: LD_INT 27
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: PUSH
 131: LD_INT 222
 133: PUSH
 134: LD_INT 157
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: PUSH
 141: LD_INT 82
 143: PUSH
 144: LD_INT 115
 146: PUSH
 147: EMPTY
 148: LIST
 149: LIST
 150: PUSH
 151: EMPTY
 152: LIST
 153: LIST
 154: LIST
 155: LIST
 156: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 35 , 55 ] , [ 188 , 70 ] , [ 214 , 123 ] , [ 66 , 120 ] ] ;
 157: LD_ADDR_EXP 39
 161: PUSH
 162: LD_INT 35
 164: PUSH
 165: LD_INT 55
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: PUSH
 172: LD_INT 188
 174: PUSH
 175: LD_INT 70
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: LD_INT 214
 184: PUSH
 185: LD_INT 123
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: LD_INT 66
 194: PUSH
 195: LD_INT 120
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: ST_TO_ADDR
// depot_def := [ [ 54 , 45 , 3 ] , [ 161 , 55 , 5 ] , [ 98 , 142 , 4 ] , [ 194 , 133 , 1 ] ] ;
 208: LD_ADDR_EXP 35
 212: PUSH
 213: LD_INT 54
 215: PUSH
 216: LD_INT 45
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: PUSH
 227: LD_INT 161
 229: PUSH
 230: LD_INT 55
 232: PUSH
 233: LD_INT 5
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 98
 243: PUSH
 244: LD_INT 142
 246: PUSH
 247: LD_INT 4
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: LIST
 254: PUSH
 255: LD_INT 194
 257: PUSH
 258: LD_INT 133
 260: PUSH
 261: LD_INT 1
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: LIST
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: LIST
 274: ST_TO_ADDR
// start_def := [ [ 53 , 52 ] , [ 152 , 45 ] , [ 91 , 140 ] , [ 200 , 132 ] ] ;
 275: LD_ADDR_EXP 37
 279: PUSH
 280: LD_INT 53
 282: PUSH
 283: LD_INT 52
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 152
 292: PUSH
 293: LD_INT 45
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: LD_INT 91
 302: PUSH
 303: LD_INT 140
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 200
 312: PUSH
 313: LD_INT 132
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: ST_TO_ADDR
// breastworks_def := [ [ [ 76 , 75 , 5 ] , [ 72 , 34 , 4 ] , [ 81 , 60 , 5 ] , [ 31 , 31 , 2 ] ] , [ [ 170 , 79 , 5 ] , [ 139 , 42 , 1 ] , [ 171 , 58 , 4 ] , [ 149 , 25 , 3 ] ] , [ [ 114 , 163 , 5 ] , [ 114 , 138 , 4 ] , [ 97 , 116 , 3 ] , [ 81 , 135 , 1 ] ] , [ [ 179 , 116 , 2 ] , [ 175 , 145 , 1 ] , [ 217 , 149 , 4 ] , [ 202 , 158 , 0 ] ] ] ;
 326: LD_ADDR_EXP 36
 330: PUSH
 331: LD_INT 76
 333: PUSH
 334: LD_INT 75
 336: PUSH
 337: LD_INT 5
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 72
 347: PUSH
 348: LD_INT 34
 350: PUSH
 351: LD_INT 4
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 81
 361: PUSH
 362: LD_INT 60
 364: PUSH
 365: LD_INT 5
 367: PUSH
 368: EMPTY
 369: LIST
 370: LIST
 371: LIST
 372: PUSH
 373: LD_INT 31
 375: PUSH
 376: LD_INT 31
 378: PUSH
 379: LD_INT 2
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: LIST
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: PUSH
 393: LD_INT 170
 395: PUSH
 396: LD_INT 79
 398: PUSH
 399: LD_INT 5
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 139
 409: PUSH
 410: LD_INT 42
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: PUSH
 421: LD_INT 171
 423: PUSH
 424: LD_INT 58
 426: PUSH
 427: LD_INT 4
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 149
 437: PUSH
 438: LD_INT 25
 440: PUSH
 441: LD_INT 3
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 114
 457: PUSH
 458: LD_INT 163
 460: PUSH
 461: LD_INT 5
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 114
 471: PUSH
 472: LD_INT 138
 474: PUSH
 475: LD_INT 4
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: PUSH
 483: LD_INT 97
 485: PUSH
 486: LD_INT 116
 488: PUSH
 489: LD_INT 3
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PUSH
 497: LD_INT 81
 499: PUSH
 500: LD_INT 135
 502: PUSH
 503: LD_INT 1
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 179
 519: PUSH
 520: LD_INT 116
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 175
 533: PUSH
 534: LD_INT 145
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 217
 547: PUSH
 548: LD_INT 149
 550: PUSH
 551: LD_INT 4
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 202
 561: PUSH
 562: LD_INT 158
 564: PUSH
 565: LD_INT 0
 567: PUSH
 568: EMPTY
 569: LIST
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: ST_TO_ADDR
// for i in normal_oil_deposits_locations do
 585: LD_ADDR_VAR 0 2
 589: PUSH
 590: LD_EXP 40
 594: PUSH
 595: FOR_IN
 596: IFFALSE 625
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 598: LD_VAR 0 2
 602: PUSH
 603: LD_INT 1
 605: ARRAY
 606: PPUSH
 607: LD_VAR 0 2
 611: PUSH
 612: LD_INT 2
 614: ARRAY
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: CALL_OW 62
 623: GO 595
 625: POP
 626: POP
// if def_extra_oil_deposits then
 627: LD_EXP 6
 631: IFFALSE 675
// for i in extra_oil_deposits_locations do
 633: LD_ADDR_VAR 0 2
 637: PUSH
 638: LD_EXP 38
 642: PUSH
 643: FOR_IN
 644: IFFALSE 673
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 646: LD_VAR 0 2
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: LD_VAR 0 2
 659: PUSH
 660: LD_INT 2
 662: ARRAY
 663: PPUSH
 664: LD_INT 2
 666: PPUSH
 667: CALL_OW 62
 671: GO 643
 673: POP
 674: POP
// if def_extra_sib_deposits > 0 then
 675: LD_EXP 7
 679: PUSH
 680: LD_INT 0
 682: GREATER
 683: IFFALSE 779
// begin for i in normal_sib_deposits_locations do
 685: LD_ADDR_VAR 0 2
 689: PUSH
 690: LD_EXP 41
 694: PUSH
 695: FOR_IN
 696: IFFALSE 725
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 698: LD_VAR 0 2
 702: PUSH
 703: LD_INT 1
 705: ARRAY
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 2
 714: ARRAY
 715: PPUSH
 716: LD_INT 3
 718: PPUSH
 719: CALL_OW 62
 723: GO 695
 725: POP
 726: POP
// if def_extra_sib_deposits = 2 then
 727: LD_EXP 7
 731: PUSH
 732: LD_INT 2
 734: EQUAL
 735: IFFALSE 779
// for i in extra_sib_deposits_locations do
 737: LD_ADDR_VAR 0 2
 741: PUSH
 742: LD_EXP 39
 746: PUSH
 747: FOR_IN
 748: IFFALSE 777
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 750: LD_VAR 0 2
 754: PUSH
 755: LD_INT 1
 757: ARRAY
 758: PPUSH
 759: LD_VAR 0 2
 763: PUSH
 764: LD_INT 2
 766: ARRAY
 767: PPUSH
 768: LD_INT 3
 770: PPUSH
 771: CALL_OW 62
 775: GO 747
 777: POP
 778: POP
// end ; end ;
 779: LD_VAR 0 1
 783: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 784: LD_INT 0
 786: PPUSH
 787: PPUSH
 788: PPUSH
 789: PPUSH
 790: PPUSH
 791: PPUSH
 792: PPUSH
 793: PPUSH
 794: PPUSH
// if MultiPlayer then
 795: LD_OWVAR 4
 799: IFFALSE 863
// begin Game_Type = mp_game_type ;
 801: LD_ADDR_EXP 16
 805: PUSH
 806: LD_OWVAR 6
 810: ST_TO_ADDR
// Your_Side = mp_player_side ;
 811: LD_ADDR_OWVAR 2
 815: PUSH
 816: LD_OWVAR 7
 820: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 821: LD_ADDR_EXP 32
 825: PUSH
 826: LD_OWVAR 17
 830: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 831: LD_ADDR_EXP 30
 835: PUSH
 836: LD_OWVAR 15
 840: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 841: LD_ADDR_EXP 33
 845: PUSH
 846: LD_OWVAR 16
 850: ST_TO_ADDR
// Teams = mp_teams ;
 851: LD_ADDR_EXP 31
 855: PUSH
 856: LD_OWVAR 12
 860: ST_TO_ADDR
// end else
 861: GO 1064
// begin Game_Type = 2 ;
 863: LD_ADDR_EXP 16
 867: PUSH
 868: LD_INT 2
 870: ST_TO_ADDR
// Your_Side = 4 ;
 871: LD_ADDR_OWVAR 2
 875: PUSH
 876: LD_INT 4
 878: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 879: LD_ADDR_EXP 32
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: LD_INT 3
 889: PUSH
 890: LD_INT 0
 892: PUSH
 893: LD_INT 1
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 2
 901: PUSH
 902: LD_INT 4
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 918: LD_ADDR_EXP 30
 922: PUSH
 923: LD_INT 0
 925: PUSH
 926: LD_INT 1
 928: PUSH
 929: LD_INT 0
 931: PUSH
 932: LD_INT 2
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 2
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 957: LD_ADDR_EXP 33
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 3
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: LD_INT 2
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: LD_INT 1
 979: PUSH
 980: LD_INT 3
 982: PUSH
 983: LD_INT 0
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 996: LD_ADDR_EXP 43
1000: PUSH
1001: LD_INT 0
1003: PUSH
1004: LD_INT 0
1006: PUSH
1007: LD_INT 0
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: LD_INT 0
1015: PUSH
1016: LD_INT 0
1018: PUSH
1019: LD_INT 0
1021: PUSH
1022: LD_INT 0
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 4 , 7 ] ] ;
1035: LD_ADDR_EXP 31
1039: PUSH
1040: LD_INT 2
1042: PUSH
1043: LD_INT 6
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: PUSH
1050: LD_INT 4
1052: PUSH
1053: LD_INT 7
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: ST_TO_ADDR
// end ; if MultiPlayer then
1064: LD_OWVAR 4
1068: IFFALSE 1267
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1070: LD_ADDR_EXP 1
1074: PUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 426
1082: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1083: LD_ADDR_EXP 2
1087: PUSH
1088: LD_INT 1
1090: PPUSH
1091: CALL_OW 426
1095: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1096: LD_ADDR_EXP 3
1100: PUSH
1101: LD_INT 2
1103: PPUSH
1104: CALL_OW 426
1108: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1109: LD_ADDR_EXP 4
1113: PUSH
1114: LD_INT 3
1116: PPUSH
1117: CALL_OW 426
1121: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1122: LD_ADDR_EXP 5
1126: PUSH
1127: LD_INT 4
1129: PPUSH
1130: CALL_OW 426
1134: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1135: LD_ADDR_EXP 6
1139: PUSH
1140: LD_INT 5
1142: PPUSH
1143: CALL_OW 426
1147: ST_TO_ADDR
// def_extra_sib_deposits = GetMultiplayerSetting ( 6 ) ;
1148: LD_ADDR_EXP 7
1152: PUSH
1153: LD_INT 6
1155: PPUSH
1156: CALL_OW 426
1160: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1161: LD_ADDR_EXP 8
1165: PUSH
1166: LD_INT 10
1168: PPUSH
1169: CALL_OW 426
1173: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1174: LD_ADDR_EXP 9
1178: PUSH
1179: LD_INT 11
1181: PPUSH
1182: CALL_OW 426
1186: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1187: LD_ADDR_EXP 10
1191: PUSH
1192: LD_INT 12
1194: PPUSH
1195: CALL_OW 426
1199: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1200: LD_ADDR_EXP 11
1204: PUSH
1205: LD_INT 13
1207: PPUSH
1208: CALL_OW 426
1212: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1213: LD_ADDR_EXP 12
1217: PUSH
1218: LD_INT 14
1220: PPUSH
1221: CALL_OW 426
1225: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1226: LD_ADDR_EXP 13
1230: PUSH
1231: LD_INT 15
1233: PPUSH
1234: CALL_OW 426
1238: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
1239: LD_ADDR_EXP 14
1243: PUSH
1244: LD_INT 20
1246: PPUSH
1247: CALL_OW 426
1251: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
1252: LD_ADDR_VAR 0 9
1256: PUSH
1257: LD_INT 22
1259: PPUSH
1260: CALL_OW 426
1264: ST_TO_ADDR
// end else
1265: GO 1391
// begin randomize ;
1267: CALL_OW 10
// def_base_level = 2 ;
1271: LD_ADDR_EXP 1
1275: PUSH
1276: LD_INT 2
1278: ST_TO_ADDR
// def_amount_of_people = 1 ;
1279: LD_ADDR_EXP 2
1283: PUSH
1284: LD_INT 1
1286: ST_TO_ADDR
// def_skill_level = 1 ;
1287: LD_ADDR_EXP 3
1291: PUSH
1292: LD_INT 1
1294: ST_TO_ADDR
// def_starting_resources = 2 ;
1295: LD_ADDR_EXP 4
1299: PUSH
1300: LD_INT 2
1302: ST_TO_ADDR
// def_shipments_density = 50 ;
1303: LD_ADDR_EXP 5
1307: PUSH
1308: LD_INT 50
1310: ST_TO_ADDR
// def_extra_oil_deposits = 1 ;
1311: LD_ADDR_EXP 6
1315: PUSH
1316: LD_INT 1
1318: ST_TO_ADDR
// def_extra_sib_deposits = 1 ;
1319: LD_ADDR_EXP 7
1323: PUSH
1324: LD_INT 1
1326: ST_TO_ADDR
// def_shared_vision = 1 ;
1327: LD_ADDR_EXP 8
1331: PUSH
1332: LD_INT 1
1334: ST_TO_ADDR
// def_morale_flags = 2 ;
1335: LD_ADDR_EXP 9
1339: PUSH
1340: LD_INT 2
1342: ST_TO_ADDR
// def_siberite_detection = 1 ;
1343: LD_ADDR_EXP 10
1347: PUSH
1348: LD_INT 1
1350: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1351: LD_ADDR_EXP 11
1355: PUSH
1356: LD_INT 3
1358: ST_TO_ADDR
// def_people_respawning = 2 ;
1359: LD_ADDR_EXP 12
1363: PUSH
1364: LD_INT 2
1366: ST_TO_ADDR
// def_siberite_bomb = 2 ;
1367: LD_ADDR_EXP 13
1371: PUSH
1372: LD_INT 2
1374: ST_TO_ADDR
// def_builduptime = 1 ;
1375: LD_ADDR_EXP 14
1379: PUSH
1380: LD_INT 1
1382: ST_TO_ADDR
// tech_level = 4 ;
1383: LD_ADDR_VAR 0 9
1387: PUSH
1388: LD_INT 4
1390: ST_TO_ADDR
// end ; if isSGUI then
1391: LD_OWVAR 83
1395: IFFALSE 1403
// setMpTechs ( ) else
1397: CALL 8222 0 0
1401: GO 1416
// SetMpTechLevel ( tech_level + 1 ) ;
1403: LD_VAR 0 9
1407: PUSH
1408: LD_INT 1
1410: PLUS
1411: PPUSH
1412: CALL 8369 0 1
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1416: LD_ADDR_EXP 17
1420: PUSH
1421: LD_INT 0
1423: PUSH
1424: LD_INT 1
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_EXP 1
1443: PUSH
1444: LD_INT 1
1446: PLUS
1447: ARRAY
1448: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1449: LD_ADDR_EXP 18
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 2
1462: PUSH
1463: LD_INT 4
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_EXP 1
1476: PUSH
1477: LD_INT 1
1479: PLUS
1480: ARRAY
1481: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1482: LD_ADDR_EXP 20
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: LD_INT 3
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: LD_INT 5
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: PUSH
1505: LD_EXP 3
1509: PUSH
1510: LD_INT 1
1512: PLUS
1513: ARRAY
1514: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1515: LD_ADDR_EXP 22
1519: PUSH
1520: LD_INT 0
1522: PUSH
1523: LD_INT 0
1525: PUSH
1526: LD_INT 0
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: PUSH
1534: LD_INT 30
1536: PUSH
1537: LD_INT 0
1539: PUSH
1540: LD_INT 0
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 50
1550: PUSH
1551: LD_INT 20
1553: PUSH
1554: LD_INT 0
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: LIST
1561: PUSH
1562: LD_INT 80
1564: PUSH
1565: LD_INT 40
1567: PUSH
1568: LD_INT 20
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: PUSH
1582: LD_EXP 4
1586: PUSH
1587: LD_INT 1
1589: PLUS
1590: ARRAY
1591: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1592: LD_ADDR_EXP 21
1596: PUSH
1597: LD_INT 10
1599: PUSH
1600: EMPTY
1601: LIST
1602: PUSH
1603: LD_INT 7
1605: PUSH
1606: LD_INT 14
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: PUSH
1613: LD_INT 6
1615: PUSH
1616: LD_INT 12
1618: PUSH
1619: LD_INT 18
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: LD_INT 10
1632: PUSH
1633: LD_INT 15
1635: PUSH
1636: LD_INT 20
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: PUSH
1651: LD_EXP 4
1655: PUSH
1656: LD_INT 1
1658: PLUS
1659: ARRAY
1660: ST_TO_ADDR
// number_of_people = def_amount_of_people + 4 ;
1661: LD_ADDR_EXP 19
1665: PUSH
1666: LD_EXP 2
1670: PUSH
1671: LD_INT 4
1673: PLUS
1674: ST_TO_ADDR
// shipments_density = 150 - ( def_shipments_density + 1 ) ;
1675: LD_ADDR_EXP 23
1679: PUSH
1680: LD_INT 150
1682: PUSH
1683: LD_EXP 5
1687: PUSH
1688: LD_INT 1
1690: PLUS
1691: MINUS
1692: ST_TO_ADDR
// amount_of_apemen = [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1693: LD_ADDR_EXP 27
1697: PUSH
1698: LD_INT 0
1700: PUSH
1701: LD_INT 3
1703: PUSH
1704: LD_INT 6
1706: PUSH
1707: LD_INT 9
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: PUSH
1716: LD_EXP 11
1720: PUSH
1721: LD_INT 1
1723: PLUS
1724: ARRAY
1725: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1726: LD_ADDR_EXP 25
1730: PUSH
1731: LD_INT 0
1733: PUSH
1734: LD_INT 8400
1736: PUSH
1737: LD_INT 1750
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_EXP 12
1749: PUSH
1750: LD_INT 1
1752: PLUS
1753: ARRAY
1754: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1755: LD_ADDR_EXP 26
1759: PUSH
1760: LD_INT 0
1762: PUSH
1763: LD_INT 21000
1765: PUSH
1766: LD_INT 4200
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: PUSH
1774: LD_EXP 12
1778: PUSH
1779: LD_INT 1
1781: PLUS
1782: ARRAY
1783: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1784: LD_ADDR_EXP 24
1788: PUSH
1789: LD_INT 1
1791: NEG
1792: PUSH
1793: LD_INT 350
1795: PUSH
1796: LD_INT 700
1798: PUSH
1799: LD_INT 1400
1801: PUSH
1802: LD_INT 0
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: PUSH
1812: LD_EXP 9
1816: PUSH
1817: LD_INT 1
1819: PLUS
1820: ARRAY
1821: ST_TO_ADDR
// battle_flags_id = [ ] ;
1822: LD_ADDR_EXP 42
1826: PUSH
1827: EMPTY
1828: ST_TO_ADDR
// siberite_bomb_Delay = [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1829: LD_ADDR_EXP 28
1833: PUSH
1834: LD_INT 0
1836: PUSH
1837: LD_INT 1
1839: PUSH
1840: LD_INT 63000
1842: PUSH
1843: LD_INT 126000
1845: PUSH
1846: LD_INT 189000
1848: PUSH
1849: LD_INT 252000
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: PUSH
1860: LD_EXP 13
1864: PUSH
1865: LD_INT 1
1867: PLUS
1868: ARRAY
1869: ST_TO_ADDR
// end ;
1870: LD_VAR 0 1
1874: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1875: LD_INT 0
1877: PPUSH
1878: PPUSH
1879: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1880: LD_ADDR_EXP 34
1884: PUSH
1885: LD_EXP 30
1889: PUSH
1890: LD_INT 0
1892: PUSH
1893: EMPTY
1894: LIST
1895: DIFF
1896: PUSH
1897: LD_INT 1
1899: GREATER
1900: ST_TO_ADDR
// if not Team_Game then
1901: LD_EXP 34
1905: NOT
1906: IFFALSE 2004
// begin for i = 1 to 8 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 8
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2000
// for j = 1 to 8 do
1924: LD_ADDR_VAR 0 3
1928: PUSH
1929: DOUBLE
1930: LD_INT 1
1932: DEC
1933: ST_TO_ADDR
1934: LD_INT 8
1936: PUSH
1937: FOR_TO
1938: IFFALSE 1996
// if i <> j then
1940: LD_VAR 0 2
1944: PUSH
1945: LD_VAR 0 3
1949: NONEQUAL
1950: IFFALSE 1974
// SetAttitude ( i , j , att_neutral , true ) else
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 3
1961: PPUSH
1962: LD_INT 0
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: CALL_OW 80
1972: GO 1994
// SetAttitude ( i , j , att_friend , true ) ;
1974: LD_VAR 0 2
1978: PPUSH
1979: LD_VAR 0 3
1983: PPUSH
1984: LD_INT 1
1986: PPUSH
1987: LD_INT 1
1989: PPUSH
1990: CALL_OW 80
1994: GO 1937
1996: POP
1997: POP
1998: GO 1921
2000: POP
2001: POP
// end else
2002: GO 2179
// begin if def_shared_vision then
2004: LD_EXP 8
2008: IFFALSE 2073
// begin for i in Teams do
2010: LD_ADDR_VAR 0 2
2014: PUSH
2015: LD_EXP 31
2019: PUSH
2020: FOR_IN
2021: IFFALSE 2071
// for j = 2 to i do
2023: LD_ADDR_VAR 0 3
2027: PUSH
2028: DOUBLE
2029: LD_INT 2
2031: DEC
2032: ST_TO_ADDR
2033: LD_VAR 0 2
2037: PUSH
2038: FOR_TO
2039: IFFALSE 2067
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2041: LD_VAR 0 2
2045: PUSH
2046: LD_VAR 0 3
2050: ARRAY
2051: PPUSH
2052: LD_VAR 0 2
2056: PUSH
2057: LD_INT 1
2059: ARRAY
2060: PPUSH
2061: CALL_OW 343
2065: GO 2038
2067: POP
2068: POP
2069: GO 2020
2071: POP
2072: POP
// end ; for i = 1 to 8 do
2073: LD_ADDR_VAR 0 2
2077: PUSH
2078: DOUBLE
2079: LD_INT 1
2081: DEC
2082: ST_TO_ADDR
2083: LD_INT 8
2085: PUSH
2086: FOR_TO
2087: IFFALSE 2177
// for j = 1 to 8 do
2089: LD_ADDR_VAR 0 3
2093: PUSH
2094: DOUBLE
2095: LD_INT 1
2097: DEC
2098: ST_TO_ADDR
2099: LD_INT 8
2101: PUSH
2102: FOR_TO
2103: IFFALSE 2173
// if Side_Teams [ i ] = Side_Teams [ j ] then
2105: LD_EXP 30
2109: PUSH
2110: LD_VAR 0 2
2114: ARRAY
2115: PUSH
2116: LD_EXP 30
2120: PUSH
2121: LD_VAR 0 3
2125: ARRAY
2126: EQUAL
2127: IFFALSE 2151
// SetAttitude ( i , j , att_friend , true ) else
2129: LD_VAR 0 2
2133: PPUSH
2134: LD_VAR 0 3
2138: PPUSH
2139: LD_INT 1
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: CALL_OW 80
2149: GO 2171
// SetAttitude ( i , j , att_enemy , true ) ;
2151: LD_VAR 0 2
2155: PPUSH
2156: LD_VAR 0 3
2160: PPUSH
2161: LD_INT 2
2163: PPUSH
2164: LD_INT 1
2166: PPUSH
2167: CALL_OW 80
2171: GO 2102
2173: POP
2174: POP
2175: GO 2086
2177: POP
2178: POP
// end ; end ;
2179: LD_VAR 0 1
2183: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2184: LD_INT 0
2186: PPUSH
2187: PPUSH
2188: PPUSH
2189: PPUSH
// result := [ ] ;
2190: LD_ADDR_VAR 0 7
2194: PUSH
2195: EMPTY
2196: ST_TO_ADDR
// for i := 1 to count do
2197: LD_ADDR_VAR 0 8
2201: PUSH
2202: DOUBLE
2203: LD_INT 1
2205: DEC
2206: ST_TO_ADDR
2207: LD_VAR 0 1
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2631
// begin uc_direction := Rand ( 0 , 5 ) ;
2215: LD_ADDR_OWVAR 24
2219: PUSH
2220: LD_INT 0
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: CALL_OW 12
2230: ST_TO_ADDR
// if commander then
2231: LD_LOC 1
2235: IFFALSE 2344
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2237: LD_ADDR_OWVAR 26
2241: PUSH
2242: LD_OWVAR 19
2246: PUSH
2247: LD_OWVAR 20
2251: ARRAY
2252: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2253: LD_INT 1
2255: PPUSH
2256: LD_INT 2
2258: PPUSH
2259: CALL_OW 12
2263: PPUSH
2264: LD_VAR 0 2
2268: PPUSH
2269: LD_EXP 20
2273: PUSH
2274: LD_INT 2
2276: PLUS
2277: PPUSH
2278: CALL_OW 380
// hc_importance := 105 ;
2282: LD_ADDR_OWVAR 32
2286: PUSH
2287: LD_INT 105
2289: ST_TO_ADDR
// commander := false ;
2290: LD_ADDR_LOC 1
2294: PUSH
2295: LD_INT 0
2297: ST_TO_ADDR
// if Multiplayer then
2298: LD_OWVAR 4
2302: IFFALSE 2342
// begin hc_gallery := MULTIAVATARS ;
2304: LD_ADDR_OWVAR 33
2308: PUSH
2309: LD_STRING MULTIAVATARS
2311: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2312: LD_ADDR_OWVAR 34
2316: PUSH
2317: LD_OWVAR 20
2321: PPUSH
2322: CALL_OW 525
2326: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2327: LD_ADDR_OWVAR 27
2331: PUSH
2332: LD_OWVAR 20
2336: PPUSH
2337: CALL_OW 526
2341: ST_TO_ADDR
// end ; end else
2342: GO 2407
// begin hc_name :=  ;
2344: LD_ADDR_OWVAR 26
2348: PUSH
2349: LD_STRING 
2351: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2352: LD_INT 1
2354: PPUSH
2355: LD_INT 2
2357: PPUSH
2358: CALL_OW 12
2362: PPUSH
2363: LD_VAR 0 2
2367: PPUSH
2368: LD_EXP 20
2372: PPUSH
2373: CALL_OW 380
// hc_importance := 0 ;
2377: LD_ADDR_OWVAR 32
2381: PUSH
2382: LD_INT 0
2384: ST_TO_ADDR
// if Multiplayer then
2385: LD_OWVAR 4
2389: IFFALSE 2407
// begin hc_gallery :=  ;
2391: LD_ADDR_OWVAR 33
2395: PUSH
2396: LD_STRING 
2398: ST_TO_ADDR
// hc_face_number := 0 ;
2399: LD_ADDR_OWVAR 34
2403: PUSH
2404: LD_INT 0
2406: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2407: LD_ADDR_VAR 0 10
2411: PUSH
2412: CALL_OW 44
2416: ST_TO_ADDR
// if global_defined then
2417: LD_LOC 3
2421: IFFALSE 2561
// begin if ( cl = class_soldier ) then
2423: LD_VAR 0 2
2427: PUSH
2428: LD_INT 1
2430: EQUAL
2431: IFFALSE 2451
// j := i + soldiers_created else
2433: LD_ADDR_VAR 0 9
2437: PUSH
2438: LD_VAR 0 8
2442: PUSH
2443: LD_LOC 4
2447: PLUS
2448: ST_TO_ADDR
2449: GO 2461
// j := i ;
2451: LD_ADDR_VAR 0 9
2455: PUSH
2456: LD_VAR 0 8
2460: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2461: LD_LOC 2
2465: PUSH
2466: LD_VAR 0 2
2470: ARRAY
2471: PUSH
2472: LD_VAR 0 9
2476: ARRAY
2477: PPUSH
2478: LD_VAR 0 10
2482: PPUSH
2483: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2487: LD_VAR 0 10
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: LD_LOC 2
2499: PUSH
2500: LD_VAR 0 2
2504: ARRAY
2505: PUSH
2506: LD_VAR 0 9
2510: ARRAY
2511: PPUSH
2512: LD_INT 2
2514: PPUSH
2515: CALL_OW 260
2519: PPUSH
2520: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2524: LD_VAR 0 10
2528: PPUSH
2529: LD_INT 1
2531: PPUSH
2532: LD_LOC 2
2536: PUSH
2537: LD_VAR 0 2
2541: ARRAY
2542: PUSH
2543: LD_VAR 0 9
2547: ARRAY
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: CALL_OW 260
2556: PPUSH
2557: CALL_OW 239
// end ; if building then
2561: LD_VAR 0 6
2565: IFFALSE 2583
// PlaceHumanInUnit ( un , building ) else
2567: LD_VAR 0 10
2571: PPUSH
2572: LD_VAR 0 6
2576: PPUSH
2577: CALL_OW 52
2581: GO 2610
// PlaceUnitXYR ( un , x , y , r , false ) ;
2583: LD_VAR 0 10
2587: PPUSH
2588: LD_VAR 0 3
2592: PPUSH
2593: LD_VAR 0 4
2597: PPUSH
2598: LD_VAR 0 5
2602: PPUSH
2603: LD_INT 0
2605: PPUSH
2606: CALL_OW 50
// result := result ^ [ un ] ;
2610: LD_ADDR_VAR 0 7
2614: PUSH
2615: LD_VAR 0 7
2619: PUSH
2620: LD_VAR 0 10
2624: PUSH
2625: EMPTY
2626: LIST
2627: ADD
2628: ST_TO_ADDR
// end ;
2629: GO 2212
2631: POP
2632: POP
// if not global_defined then
2633: LD_LOC 3
2637: NOT
2638: IFFALSE 2716
// if ( global_units >= cl ) then
2640: LD_LOC 2
2644: PUSH
2645: LD_VAR 0 2
2649: GREATEREQUAL
2650: IFFALSE 2691
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2652: LD_ADDR_LOC 2
2656: PUSH
2657: LD_LOC 2
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: LD_LOC 2
2671: PUSH
2672: LD_VAR 0 2
2676: ARRAY
2677: PUSH
2678: LD_VAR 0 7
2682: ADD
2683: PPUSH
2684: CALL_OW 1
2688: ST_TO_ADDR
2689: GO 2716
// global_units := Replace ( global_units , cl , result ) ;
2691: LD_ADDR_LOC 2
2695: PUSH
2696: LD_LOC 2
2700: PPUSH
2701: LD_VAR 0 2
2705: PPUSH
2706: LD_VAR 0 7
2710: PPUSH
2711: CALL_OW 1
2715: ST_TO_ADDR
// end ;
2716: LD_VAR 0 7
2720: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2721: LD_INT 0
2723: PPUSH
2724: PPUSH
2725: PPUSH
2726: PPUSH
2727: PPUSH
2728: PPUSH
2729: PPUSH
2730: PPUSH
2731: PPUSH
// pos := Side_Positions [ side ] ;
2732: LD_ADDR_VAR 0 3
2736: PUSH
2737: LD_EXP 32
2741: PUSH
2742: LD_VAR 0 1
2746: ARRAY
2747: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2748: LD_ADDR_OWVAR 21
2752: PUSH
2753: LD_EXP 33
2757: PUSH
2758: LD_VAR 0 1
2762: ARRAY
2763: ST_TO_ADDR
// uc_side := side ;
2764: LD_ADDR_OWVAR 20
2768: PUSH
2769: LD_VAR 0 1
2773: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2774: LD_ADDR_VAR 0 4
2778: PUSH
2779: LD_EXP 35
2783: PUSH
2784: LD_VAR 0 3
2788: ARRAY
2789: PUSH
2790: LD_INT 1
2792: ARRAY
2793: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2794: LD_ADDR_VAR 0 5
2798: PUSH
2799: LD_EXP 35
2803: PUSH
2804: LD_VAR 0 3
2808: ARRAY
2809: PUSH
2810: LD_INT 2
2812: ARRAY
2813: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2814: LD_ADDR_VAR 0 6
2818: PUSH
2819: LD_EXP 35
2823: PUSH
2824: LD_VAR 0 3
2828: ARRAY
2829: PUSH
2830: LD_INT 3
2832: ARRAY
2833: ST_TO_ADDR
// if is_depot then
2834: LD_EXP 17
2838: IFFALSE 2971
// begin bc_type = b_depot ;
2840: LD_ADDR_OWVAR 42
2844: PUSH
2845: LD_INT 0
2847: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2848: LD_ADDR_VAR 0 10
2852: PUSH
2853: LD_VAR 0 4
2857: PPUSH
2858: LD_VAR 0 5
2862: PPUSH
2863: LD_VAR 0 6
2867: PPUSH
2868: CALL_OW 47
2872: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2873: LD_VAR 0 10
2877: PPUSH
2878: LD_STRING @
2880: PUSH
2881: LD_VAR 0 1
2885: STR
2886: PPUSH
2887: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2891: LD_VAR 0 10
2895: PPUSH
2896: CALL_OW 274
2900: PPUSH
2901: LD_INT 1
2903: PPUSH
2904: LD_EXP 22
2908: PUSH
2909: LD_INT 1
2911: ARRAY
2912: PPUSH
2913: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2917: LD_VAR 0 10
2921: PPUSH
2922: CALL_OW 274
2926: PPUSH
2927: LD_INT 2
2929: PPUSH
2930: LD_EXP 22
2934: PUSH
2935: LD_INT 2
2937: ARRAY
2938: PPUSH
2939: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2943: LD_VAR 0 10
2947: PPUSH
2948: CALL_OW 274
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_EXP 22
2960: PUSH
2961: LD_INT 3
2963: ARRAY
2964: PPUSH
2965: CALL_OW 277
// end else
2969: GO 3115
// begin for i := 1 to 3 do
2971: LD_ADDR_VAR 0 7
2975: PUSH
2976: DOUBLE
2977: LD_INT 1
2979: DEC
2980: ST_TO_ADDR
2981: LD_INT 3
2983: PUSH
2984: FOR_TO
2985: IFFALSE 3113
// begin r := starting_resources [ i ] ;
2987: LD_ADDR_VAR 0 8
2991: PUSH
2992: LD_EXP 22
2996: PUSH
2997: LD_VAR 0 7
3001: ARRAY
3002: ST_TO_ADDR
// while r >= 10 do
3003: LD_VAR 0 8
3007: PUSH
3008: LD_INT 10
3010: GREATEREQUAL
3011: IFFALSE 3111
// if r > 50 then
3013: LD_VAR 0 8
3017: PUSH
3018: LD_INT 50
3020: GREATER
3021: IFFALSE 3067
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: LD_VAR 0 4
3035: PPUSH
3036: LD_VAR 0 5
3040: PPUSH
3041: LD_INT 4
3043: PPUSH
3044: LD_INT 0
3046: PPUSH
3047: CALL_OW 60
// r := r - 50 ;
3051: LD_ADDR_VAR 0 8
3055: PUSH
3056: LD_VAR 0 8
3060: PUSH
3061: LD_INT 50
3063: MINUS
3064: ST_TO_ADDR
// end else
3065: GO 3109
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3067: LD_VAR 0 7
3071: PPUSH
3072: LD_VAR 0 8
3076: PUSH
3077: LD_INT 10
3079: DIV
3080: PPUSH
3081: LD_VAR 0 4
3085: PPUSH
3086: LD_VAR 0 5
3090: PPUSH
3091: LD_INT 4
3093: PPUSH
3094: LD_INT 0
3096: PPUSH
3097: CALL_OW 60
// r := 0 ;
3101: LD_ADDR_VAR 0 8
3105: PUSH
3106: LD_INT 0
3108: ST_TO_ADDR
// end ;
3109: GO 3003
// end ;
3111: GO 2984
3113: POP
3114: POP
// end ; for r in starting_crates do
3115: LD_ADDR_VAR 0 8
3119: PUSH
3120: LD_EXP 21
3124: PUSH
3125: FOR_IN
3126: IFFALSE 3158
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3128: LD_INT 1
3130: PPUSH
3131: LD_INT 5
3133: PPUSH
3134: LD_VAR 0 4
3138: PPUSH
3139: LD_VAR 0 5
3143: PPUSH
3144: LD_VAR 0 8
3148: PPUSH
3149: LD_INT 0
3151: PPUSH
3152: CALL_OW 60
3156: GO 3125
3158: POP
3159: POP
// if def_morale_flags then
3160: LD_EXP 9
3164: IFFALSE 3303
// begin x := start_def [ pos ] [ 1 ] ;
3166: LD_ADDR_VAR 0 4
3170: PUSH
3171: LD_EXP 37
3175: PUSH
3176: LD_VAR 0 3
3180: ARRAY
3181: PUSH
3182: LD_INT 1
3184: ARRAY
3185: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3186: LD_ADDR_VAR 0 5
3190: PUSH
3191: LD_EXP 37
3195: PUSH
3196: LD_VAR 0 3
3200: ARRAY
3201: PUSH
3202: LD_INT 2
3204: ARRAY
3205: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3206: LD_VAR 0 4
3210: PPUSH
3211: LD_VAR 0 5
3215: PPUSH
3216: LD_INT 12
3218: PPUSH
3219: LD_INT 2
3221: PPUSH
3222: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3226: LD_ADDR_EXP 42
3230: PUSH
3231: LD_EXP 42
3235: PUSH
3236: LD_VAR 0 1
3240: PPUSH
3241: LD_VAR 0 4
3245: PPUSH
3246: LD_VAR 0 5
3250: PPUSH
3251: LD_INT 1
3253: PUSH
3254: LD_INT 100
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 2
3263: PUSH
3264: LD_INT 50
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 3
3273: PUSH
3274: LD_INT 20
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 20
3283: PUSH
3284: LD_INT 100
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: PPUSH
3297: CALL_OW 418
3301: ADD
3302: ST_TO_ADDR
// end ; commander := true ;
3303: LD_ADDR_LOC 1
3307: PUSH
3308: LD_INT 1
3310: ST_TO_ADDR
// soldiers_created := 0 ;
3311: LD_ADDR_LOC 4
3315: PUSH
3316: LD_INT 0
3318: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3319: LD_ADDR_VAR 0 7
3323: PUSH
3324: DOUBLE
3325: LD_INT 1
3327: DEC
3328: ST_TO_ADDR
3329: LD_EXP 18
3333: PUSH
3334: FOR_TO
3335: IFFALSE 3488
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3337: LD_ADDR_VAR 0 4
3341: PUSH
3342: LD_EXP 36
3346: PUSH
3347: LD_VAR 0 3
3351: ARRAY
3352: PUSH
3353: LD_VAR 0 7
3357: ARRAY
3358: PUSH
3359: LD_INT 1
3361: ARRAY
3362: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3363: LD_ADDR_VAR 0 5
3367: PUSH
3368: LD_EXP 36
3372: PUSH
3373: LD_VAR 0 3
3377: ARRAY
3378: PUSH
3379: LD_VAR 0 7
3383: ARRAY
3384: PUSH
3385: LD_INT 2
3387: ARRAY
3388: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3389: LD_ADDR_VAR 0 6
3393: PUSH
3394: LD_EXP 36
3398: PUSH
3399: LD_VAR 0 3
3403: ARRAY
3404: PUSH
3405: LD_VAR 0 7
3409: ARRAY
3410: PUSH
3411: LD_INT 3
3413: ARRAY
3414: ST_TO_ADDR
// bc_type := b_breastwork ;
3415: LD_ADDR_OWVAR 42
3419: PUSH
3420: LD_INT 31
3422: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3423: LD_ADDR_VAR 0 9
3427: PUSH
3428: LD_VAR 0 4
3432: PPUSH
3433: LD_VAR 0 5
3437: PPUSH
3438: LD_VAR 0 6
3442: PPUSH
3443: CALL_OW 47
3447: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3448: LD_INT 1
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 0
3459: PPUSH
3460: LD_INT 0
3462: PPUSH
3463: LD_VAR 0 9
3467: PPUSH
3468: CALL 2184 0 6
// soldiers_created := soldiers_created + 1 ;
3472: LD_ADDR_LOC 4
3476: PUSH
3477: LD_LOC 4
3481: PUSH
3482: LD_INT 1
3484: PLUS
3485: ST_TO_ADDR
// end ;
3486: GO 3334
3488: POP
3489: POP
// x := start_def [ pos ] [ 1 ] ;
3490: LD_ADDR_VAR 0 4
3494: PUSH
3495: LD_EXP 37
3499: PUSH
3500: LD_VAR 0 3
3504: ARRAY
3505: PUSH
3506: LD_INT 1
3508: ARRAY
3509: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3510: LD_ADDR_VAR 0 5
3514: PUSH
3515: LD_EXP 37
3519: PUSH
3520: LD_VAR 0 3
3524: ARRAY
3525: PUSH
3526: LD_INT 2
3528: ARRAY
3529: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3530: LD_LOC 8
3534: PUSH
3535: LD_EXP 18
3539: MINUS
3540: PPUSH
3541: LD_INT 1
3543: PPUSH
3544: LD_VAR 0 4
3548: PPUSH
3549: LD_VAR 0 5
3553: PPUSH
3554: LD_INT 5
3556: PPUSH
3557: LD_INT 0
3559: PPUSH
3560: CALL 2184 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3564: LD_LOC 5
3568: PPUSH
3569: LD_INT 2
3571: PPUSH
3572: LD_VAR 0 4
3576: PPUSH
3577: LD_VAR 0 5
3581: PPUSH
3582: LD_INT 5
3584: PPUSH
3585: LD_INT 0
3587: PPUSH
3588: CALL 2184 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3592: LD_LOC 7
3596: PPUSH
3597: LD_INT 3
3599: PPUSH
3600: LD_VAR 0 4
3604: PPUSH
3605: LD_VAR 0 5
3609: PPUSH
3610: LD_INT 5
3612: PPUSH
3613: LD_INT 0
3615: PPUSH
3616: CALL 2184 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3620: LD_LOC 6
3624: PPUSH
3625: LD_INT 4
3627: PPUSH
3628: LD_VAR 0 4
3632: PPUSH
3633: LD_VAR 0 5
3637: PPUSH
3638: LD_INT 5
3640: PPUSH
3641: LD_INT 0
3643: PPUSH
3644: CALL 2184 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3648: LD_EXP 10
3652: PUSH
3653: LD_INT 20
3655: PPUSH
3656: LD_VAR 0 1
3660: PPUSH
3661: CALL_OW 321
3665: PUSH
3666: LD_INT 1
3668: EQUAL
3669: AND
3670: IFFALSE 3687
// SetTech ( tech_SibDet , side , state_researched ) ;
3672: LD_INT 20
3674: PPUSH
3675: LD_VAR 0 1
3679: PPUSH
3680: LD_INT 2
3682: PPUSH
3683: CALL_OW 322
// if def_siberite_bomb = 1 then
3687: LD_EXP 13
3691: PUSH
3692: LD_INT 1
3694: EQUAL
3695: IFFALSE 3729
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3697: LD_INT 25
3699: PPUSH
3700: LD_VAR 0 1
3704: PPUSH
3705: LD_INT 1
3707: PPUSH
3708: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3712: LD_INT 73
3714: PPUSH
3715: LD_VAR 0 1
3719: PPUSH
3720: LD_INT 1
3722: PPUSH
3723: CALL_OW 322
// end else
3727: GO 3759
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3729: LD_INT 25
3731: PPUSH
3732: LD_VAR 0 1
3736: PPUSH
3737: LD_INT 0
3739: PPUSH
3740: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3744: LD_INT 73
3746: PPUSH
3747: LD_VAR 0 1
3751: PPUSH
3752: LD_INT 0
3754: PPUSH
3755: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3759: LD_INT 24
3761: PPUSH
3762: LD_VAR 0 1
3766: PPUSH
3767: LD_INT 0
3769: PPUSH
3770: CALL_OW 322
// global_defined := true ;
3774: LD_ADDR_LOC 3
3778: PUSH
3779: LD_INT 1
3781: ST_TO_ADDR
// end ;
3782: LD_VAR 0 2
3786: RET
// every 0 0$1 do
3787: GO 3789
3789: DISABLE
// if ( def_siberite_bomb > 1 ) then
3790: LD_EXP 13
3794: PUSH
3795: LD_INT 1
3797: GREATER
3798: IFFALSE 3813
// begin wait ( siberite_bomb_Delay ) ;
3800: LD_EXP 28
3804: PPUSH
3805: CALL_OW 67
// EnableSibFiss ;
3809: CALL 3814 0 0
// end ;
3813: END
// function EnableSibFiss ; var i ; begin
3814: LD_INT 0
3816: PPUSH
3817: PPUSH
// for i := 1 to 8 do
3818: LD_ADDR_VAR 0 2
3822: PUSH
3823: DOUBLE
3824: LD_INT 1
3826: DEC
3827: ST_TO_ADDR
3828: LD_INT 8
3830: PUSH
3831: FOR_TO
3832: IFFALSE 3878
// if Side_Positions [ i ] then
3834: LD_EXP 32
3838: PUSH
3839: LD_VAR 0 2
3843: ARRAY
3844: IFFALSE 3876
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3846: LD_INT 25
3848: PPUSH
3849: LD_VAR 0 2
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3861: LD_INT 73
3863: PPUSH
3864: LD_VAR 0 2
3868: PPUSH
3869: LD_INT 1
3871: PPUSH
3872: CALL_OW 322
// end ;
3876: GO 3831
3878: POP
3879: POP
// end ;
3880: LD_VAR 0 1
3884: RET
// function prepare_sides ; var i ; begin
3885: LD_INT 0
3887: PPUSH
3888: PPUSH
// global_units := [ ] ;
3889: LD_ADDR_LOC 2
3893: PUSH
3894: EMPTY
3895: ST_TO_ADDR
// global_defined := false ;
3896: LD_ADDR_LOC 3
3900: PUSH
3901: LD_INT 0
3903: ST_TO_ADDR
// CountClassMembers ;
3904: CALL 3954 0 0
// for i := 1 to 8 do
3908: LD_ADDR_VAR 0 2
3912: PUSH
3913: DOUBLE
3914: LD_INT 1
3916: DEC
3917: ST_TO_ADDR
3918: LD_INT 8
3920: PUSH
3921: FOR_TO
3922: IFFALSE 3947
// if Side_Positions [ i ] then
3924: LD_EXP 32
3928: PUSH
3929: LD_VAR 0 2
3933: ARRAY
3934: IFFALSE 3945
// prepare_side ( i ) ;
3936: LD_VAR 0 2
3940: PPUSH
3941: CALL 2721 0 1
3945: GO 3921
3947: POP
3948: POP
// end ;
3949: LD_VAR 0 1
3953: RET
// function CountClassMembers ; var Mode ; begin
3954: LD_INT 0
3956: PPUSH
3957: PPUSH
// if No_Mechs then
3958: LD_EXP 15
3962: IFFALSE 3974
// Mode := 2 else
3964: LD_ADDR_VAR 0 2
3968: PUSH
3969: LD_INT 2
3971: ST_TO_ADDR
3972: GO 3982
// Mode := 1 ;
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: LD_INT 1
3981: ST_TO_ADDR
// neng := number_of_people ;
3982: LD_ADDR_LOC 5
3986: PUSH
3987: LD_EXP 19
3991: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
3992: LD_ADDR_LOC 8
3996: PUSH
3997: LD_LOC 5
4001: PUSH
4002: LD_INT 4
4004: PUSH
4005: LD_INT 3
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: LD_VAR 0 2
4016: ARRAY
4017: DIV
4018: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4019: LD_LOC 8
4023: PUSH
4024: LD_EXP 18
4028: LESS
4029: IFFALSE 4041
// nsol := number_of_breastworks ;
4031: LD_ADDR_LOC 8
4035: PUSH
4036: LD_EXP 18
4040: ST_TO_ADDR
// neng := neng - nsol ;
4041: LD_ADDR_LOC 5
4045: PUSH
4046: LD_LOC 5
4050: PUSH
4051: LD_LOC 8
4055: MINUS
4056: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4057: LD_ADDR_LOC 6
4061: PUSH
4062: LD_LOC 5
4066: PUSH
4067: LD_INT 3
4069: PUSH
4070: LD_INT 2
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: PUSH
4077: LD_VAR 0 2
4081: ARRAY
4082: DIV
4083: ST_TO_ADDR
// if ( nsci < 1 ) then
4084: LD_LOC 6
4088: PUSH
4089: LD_INT 1
4091: LESS
4092: IFFALSE 4102
// nsci := 1 ;
4094: LD_ADDR_LOC 6
4098: PUSH
4099: LD_INT 1
4101: ST_TO_ADDR
// neng := neng - nsci ;
4102: LD_ADDR_LOC 5
4106: PUSH
4107: LD_LOC 5
4111: PUSH
4112: LD_LOC 6
4116: MINUS
4117: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4118: LD_ADDR_LOC 7
4122: PUSH
4123: LD_LOC 5
4127: PUSH
4128: LD_INT 2
4130: DIV
4131: PUSH
4132: LD_INT 0
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: PUSH
4139: LD_VAR 0 2
4143: ARRAY
4144: ST_TO_ADDR
// neng := neng - nmech ;
4145: LD_ADDR_LOC 5
4149: PUSH
4150: LD_LOC 5
4154: PUSH
4155: LD_LOC 7
4159: MINUS
4160: ST_TO_ADDR
// if ( neng < 1 ) then
4161: LD_LOC 5
4165: PUSH
4166: LD_INT 1
4168: LESS
4169: IFFALSE 4179
// neng := 1 ;
4171: LD_ADDR_LOC 5
4175: PUSH
4176: LD_INT 1
4178: ST_TO_ADDR
// end ;
4179: LD_VAR 0 1
4183: RET
// starting begin disable ( 98 ) ;
4184: LD_INT 98
4186: DISABLE_MARKED
// disable ( 99 ) ;
4187: LD_INT 99
4189: DISABLE_MARKED
// disable ( 400 ) ;
4190: LD_INT 400
4192: DISABLE_MARKED
// disable ( 401 ) ;
4193: LD_INT 401
4195: DISABLE_MARKED
// mp_selectmsg := true ;
4196: LD_ADDR_OWVAR 13
4200: PUSH
4201: LD_INT 1
4203: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4204: CALL 784 0 0
// init_map ;
4208: CALL 0 0 0
// init_respawning ;
4212: CALL 12946 0 0
// set_shared_visions_and_alliances ;
4216: CALL 1875 0 0
// ResetFog ;
4220: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4224: LD_OWVAR 2
4228: PPUSH
4229: CALL_OW 520
// prepare_sides ;
4233: CALL 3885 0 0
// Init_Win_Condition ;
4237: CALL 6927 0 0
// ShowTimer ;
4241: CALL 5907 0 0
// music_nat := Side_Nations [ your_side ] ;
4245: LD_ADDR_OWVAR 71
4249: PUSH
4250: LD_EXP 33
4254: PUSH
4255: LD_OWVAR 2
4259: ARRAY
4260: ST_TO_ADDR
// if IAmSpec then
4261: CALL_OW 531
4265: IFFALSE 4289
// begin fogoff ( true ) ;
4267: LD_INT 1
4269: PPUSH
4270: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
4274: LD_INT 104
4276: PPUSH
4277: LD_INT 69
4279: PPUSH
4280: CALL_OW 86
// enable ( 400 ) ;
4284: LD_INT 400
4286: ENABLE_MARKED
// end else
4287: GO 4335
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4289: LD_EXP 37
4293: PUSH
4294: LD_EXP 32
4298: PUSH
4299: LD_OWVAR 2
4303: ARRAY
4304: ARRAY
4305: PUSH
4306: LD_INT 1
4308: ARRAY
4309: PPUSH
4310: LD_EXP 37
4314: PUSH
4315: LD_EXP 32
4319: PUSH
4320: LD_OWVAR 2
4324: ARRAY
4325: ARRAY
4326: PUSH
4327: LD_INT 2
4329: ARRAY
4330: PPUSH
4331: CALL_OW 86
// end ; AnimateTrees ( true ) ;
4335: LD_INT 1
4337: PPUSH
4338: CALL_OW 573
// BuildUpAreas := [ base_nw , base_ne , base_sw , base_se ] ;
4342: LD_ADDR_EXP 47
4346: PUSH
4347: LD_INT 8
4349: PUSH
4350: LD_INT 9
4352: PUSH
4353: LD_INT 10
4355: PUSH
4356: LD_INT 11
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: ST_TO_ADDR
// BeginBuildUp ;
4365: CALL 6090 0 0
// end ; end_of_file
4369: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
4370: LD_VAR 0 1
4374: PPUSH
4375: CALL_OW 266
4379: PUSH
4380: LD_INT 0
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: IN
4390: IFFALSE 4415
// SetBName ( b , @ & GetSide ( b ) ) ;
4392: LD_VAR 0 1
4396: PPUSH
4397: LD_STRING @
4399: PUSH
4400: LD_VAR 0 1
4404: PPUSH
4405: CALL_OW 255
4409: STR
4410: PPUSH
4411: CALL_OW 500
// end ;
4415: PPOPN 2
4417: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
4418: LD_VAR 0 1
4422: PPUSH
4423: CALL_OW 266
4427: PUSH
4428: LD_INT 0
4430: PUSH
4431: LD_INT 1
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: IN
4438: IFFALSE 4463
// SetBName ( b , @ & GetSide ( b ) ) ;
4440: LD_VAR 0 1
4444: PPUSH
4445: LD_STRING @
4447: PUSH
4448: LD_VAR 0 1
4452: PPUSH
4453: CALL_OW 255
4457: STR
4458: PPUSH
4459: CALL_OW 500
// end ;
4463: PPOPN 3
4465: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
4466: LD_INT 0
4468: PPUSH
4469: PPUSH
4470: PPUSH
4471: PPUSH
// begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
4472: LD_VAR 0 1
4476: PPUSH
4477: CALL_OW 255
4481: PUSH
4482: LD_INT 0
4484: EQUAL
4485: PUSH
4486: LD_VAR 0 1
4490: PPUSH
4491: CALL_OW 257
4495: PUSH
4496: LD_INT 12
4498: EQUAL
4499: AND
4500: IFFALSE 4506
// CheckApemenAmount ;
4502: CALL 5258 0 0
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
4506: LD_VAR 0 1
4510: PPUSH
4511: CALL_OW 266
4515: PUSH
4516: LD_INT 0
4518: PUSH
4519: LD_INT 1
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: IN
4526: IFFALSE 4608
// begin pos := Side_Positions [ GetSide ( j ) ] ;
4528: LD_ADDR_VAR 0 4
4532: PUSH
4533: LD_EXP 32
4537: PUSH
4538: LD_VAR 0 1
4542: PPUSH
4543: CALL_OW 255
4547: ARRAY
4548: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
4549: LD_ADDR_VAR 0 2
4553: PUSH
4554: LD_EXP 37
4558: PUSH
4559: LD_VAR 0 4
4563: ARRAY
4564: PUSH
4565: LD_INT 1
4567: ARRAY
4568: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4569: LD_ADDR_VAR 0 3
4573: PUSH
4574: LD_EXP 37
4578: PUSH
4579: LD_VAR 0 4
4583: ARRAY
4584: PUSH
4585: LD_INT 2
4587: ARRAY
4588: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
4589: LD_VAR 0 2
4593: PPUSH
4594: LD_VAR 0 3
4598: PPUSH
4599: CALL_OW 420
4603: PPUSH
4604: CALL_OW 419
// end ; end ;
4608: PPOPN 5
4610: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
4611: LD_VAR 0 1
4615: PPUSH
4616: LD_VAR 0 2
4620: PPUSH
4621: LD_VAR 0 3
4625: PPUSH
4626: LD_OWVAR 2
4630: PPUSH
4631: CALL 6688 0 4
4635: PPOPN 3
4637: END
// every 1 1$0 + 0 0$0.3 do
4638: GO 4640
4640: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
4641: LD_INT 4
4643: PPUSH
4644: LD_INT 5
4646: PPUSH
4647: CALL_OW 12
4651: PPUSH
4652: LD_INT 1
4654: PPUSH
4655: CALL_OW 57
// enable ;
4659: ENABLE
// end ;
4660: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4661: GO 4663
4663: DISABLE
4664: LD_INT 0
4666: PPUSH
4667: PPUSH
// begin case tick of 1 .. 1 1$0 :
4668: LD_OWVAR 1
4672: PUSH
4673: LD_INT 1
4675: DOUBLE
4676: GREATEREQUAL
4677: IFFALSE 4685
4679: LD_INT 2100
4681: DOUBLE
4682: LESSEQUAL
4683: IFTRUE 4687
4685: GO 4715
4687: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4688: LD_EXP 23
4692: PUSH
4693: LD_INT 100
4695: DIVREAL
4696: PUSH
4697: LD_INT 350
4699: PPUSH
4700: LD_INT 1050
4702: PPUSH
4703: CALL_OW 12
4707: MUL
4708: PPUSH
4709: CALL_OW 67
4713: GO 5017
4715: LD_INT 2100
4717: PUSH
4718: LD_INT 1
4720: PLUS
4721: DOUBLE
4722: GREATEREQUAL
4723: IFFALSE 4731
4725: LD_INT 10500
4727: DOUBLE
4728: LESSEQUAL
4729: IFTRUE 4733
4731: GO 4761
4733: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4734: LD_EXP 23
4738: PUSH
4739: LD_INT 100
4741: DIVREAL
4742: PUSH
4743: LD_INT 1050
4745: PPUSH
4746: LD_INT 1575
4748: PPUSH
4749: CALL_OW 12
4753: MUL
4754: PPUSH
4755: CALL_OW 67
4759: GO 5017
4761: LD_INT 10500
4763: PUSH
4764: LD_INT 1
4766: PLUS
4767: DOUBLE
4768: GREATEREQUAL
4769: IFFALSE 4777
4771: LD_INT 21000
4773: DOUBLE
4774: LESSEQUAL
4775: IFTRUE 4779
4777: GO 4807
4779: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4780: LD_EXP 23
4784: PUSH
4785: LD_INT 100
4787: DIVREAL
4788: PUSH
4789: LD_INT 1575
4791: PPUSH
4792: LD_INT 2100
4794: PPUSH
4795: CALL_OW 12
4799: MUL
4800: PPUSH
4801: CALL_OW 67
4805: GO 5017
4807: LD_INT 21000
4809: PUSH
4810: LD_INT 1
4812: PLUS
4813: DOUBLE
4814: GREATEREQUAL
4815: IFFALSE 4823
4817: LD_INT 42000
4819: DOUBLE
4820: LESSEQUAL
4821: IFTRUE 4825
4823: GO 4853
4825: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4826: LD_EXP 23
4830: PUSH
4831: LD_INT 100
4833: DIVREAL
4834: PUSH
4835: LD_INT 2100
4837: PPUSH
4838: LD_INT 2625
4840: PPUSH
4841: CALL_OW 12
4845: MUL
4846: PPUSH
4847: CALL_OW 67
4851: GO 5017
4853: LD_INT 42000
4855: PUSH
4856: LD_INT 1
4858: PLUS
4859: DOUBLE
4860: GREATEREQUAL
4861: IFFALSE 4869
4863: LD_INT 63000
4865: DOUBLE
4866: LESSEQUAL
4867: IFTRUE 4871
4869: GO 4899
4871: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
4872: LD_EXP 23
4876: PUSH
4877: LD_INT 100
4879: DIVREAL
4880: PUSH
4881: LD_INT 2625
4883: PPUSH
4884: LD_INT 3150
4886: PPUSH
4887: CALL_OW 12
4891: MUL
4892: PPUSH
4893: CALL_OW 67
4897: GO 5017
4899: LD_INT 63000
4901: PUSH
4902: LD_INT 1
4904: PLUS
4905: DOUBLE
4906: GREATEREQUAL
4907: IFFALSE 4915
4909: LD_INT 105000
4911: DOUBLE
4912: LESSEQUAL
4913: IFTRUE 4917
4915: GO 4945
4917: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
4918: LD_EXP 23
4922: PUSH
4923: LD_INT 100
4925: DIVREAL
4926: PUSH
4927: LD_INT 3150
4929: PPUSH
4930: LD_INT 3675
4932: PPUSH
4933: CALL_OW 12
4937: MUL
4938: PPUSH
4939: CALL_OW 67
4943: GO 5017
4945: LD_INT 105000
4947: PUSH
4948: LD_INT 1
4950: PLUS
4951: DOUBLE
4952: GREATEREQUAL
4953: IFFALSE 4961
4955: LD_INT 630000
4957: DOUBLE
4958: LESSEQUAL
4959: IFTRUE 4963
4961: GO 4991
4963: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
4964: LD_EXP 23
4968: PUSH
4969: LD_INT 100
4971: DIVREAL
4972: PUSH
4973: LD_INT 3675
4975: PPUSH
4976: LD_INT 4200
4978: PPUSH
4979: CALL_OW 12
4983: MUL
4984: PPUSH
4985: CALL_OW 67
4989: GO 5017
4991: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
4992: LD_EXP 23
4996: PUSH
4997: LD_INT 100
4999: DIVREAL
5000: PUSH
5001: LD_INT 4200
5003: PPUSH
5004: LD_INT 5250
5006: PPUSH
5007: CALL_OW 12
5011: MUL
5012: PPUSH
5013: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5017: LD_ADDR_VAR 0 2
5021: PUSH
5022: LD_INT 3
5024: PPUSH
5025: LD_INT 5
5027: PPUSH
5028: CALL_OW 12
5032: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5033: LD_ADDR_VAR 0 1
5037: PUSH
5038: LD_EXP 32
5042: PUSH
5043: LD_INT 0
5045: PUSH
5046: EMPTY
5047: LIST
5048: DIFF
5049: PUSH
5050: FOR_IN
5051: IFFALSE 5091
// CreateCratesArea ( amount , [ base_nw , base_ne , base_sw , base_se ] [ i ] , true ) ;
5053: LD_VAR 0 2
5057: PPUSH
5058: LD_INT 8
5060: PUSH
5061: LD_INT 9
5063: PUSH
5064: LD_INT 10
5066: PUSH
5067: LD_INT 11
5069: PUSH
5070: EMPTY
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: PUSH
5076: LD_VAR 0 1
5080: ARRAY
5081: PPUSH
5082: LD_INT 1
5084: PPUSH
5085: CALL_OW 55
5089: GO 5050
5091: POP
5092: POP
// enable ;
5093: ENABLE
// end ;
5094: PPOPN 2
5096: END
// every 1 1$0 trigger def_shipments_density do
5097: LD_EXP 5
5101: IFFALSE 5137
5103: GO 5105
5105: DISABLE
// begin CreateCratesArea ( 5 , map_center , true ) ;
5106: LD_INT 5
5108: PPUSH
5109: LD_INT 7
5111: PPUSH
5112: LD_INT 1
5114: PPUSH
5115: CALL_OW 55
// wait ( 3 3$0 - ( 1 1$0 * def_shipments_density ) ) ;
5119: LD_INT 6300
5121: PUSH
5122: LD_INT 2100
5124: PUSH
5125: LD_EXP 5
5129: MUL
5130: MINUS
5131: PPUSH
5132: CALL_OW 67
// enable ;
5136: ENABLE
// end ; end_of_file
5137: END
// var _apemenIncrement , _apemenMaximum , _apemenSkillLevel , _apemenThreshold , _isSpawning , _wildApemenAmount ; every 0 0$15 do var i ;
5138: GO 5140
5140: DISABLE
5141: LD_INT 0
5143: PPUSH
// begin _apemenIncrement := 0 ;
5144: LD_ADDR_LOC 9
5148: PUSH
5149: LD_INT 0
5151: ST_TO_ADDR
// _apemenSkillLevel := 0 ;
5152: LD_ADDR_LOC 11
5156: PUSH
5157: LD_INT 0
5159: ST_TO_ADDR
// _isSpawning := true ;
5160: LD_ADDR_LOC 13
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// _wildApemenAmount := 0 ;
5168: LD_ADDR_LOC 14
5172: PUSH
5173: LD_INT 0
5175: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5176: LD_ADDR_VAR 0 1
5180: PUSH
5181: LD_EXP 32
5185: PUSH
5186: LD_INT 0
5188: PUSH
5189: EMPTY
5190: LIST
5191: DIFF
5192: PUSH
5193: FOR_IN
5194: IFFALSE 5212
// _apemenIncrement := _apemenIncrement + 1 ;
5196: LD_ADDR_LOC 9
5200: PUSH
5201: LD_LOC 9
5205: PUSH
5206: LD_INT 1
5208: PLUS
5209: ST_TO_ADDR
5210: GO 5193
5212: POP
5213: POP
// _apemenMaximum := _apemenIncrement * amount_of_apemen ;
5214: LD_ADDR_LOC 10
5218: PUSH
5219: LD_LOC 9
5223: PUSH
5224: LD_EXP 27
5228: MUL
5229: ST_TO_ADDR
// _apemenThreshold := _apemenMaximum / 2 ;
5230: LD_ADDR_LOC 12
5234: PUSH
5235: LD_LOC 10
5239: PUSH
5240: LD_INT 2
5242: DIVREAL
5243: ST_TO_ADDR
// prepare_apemen ;
5244: CALL 5336 0 0
// end ;
5248: PPOPN 1
5250: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
5251: CALL 5258 0 0
// end ;
5255: PPOPN 2
5257: END
// export function CheckApemenAmount ; begin
5258: LD_INT 0
5260: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
5261: LD_ADDR_LOC 14
5265: PUSH
5266: LD_LOC 14
5270: PUSH
5271: LD_INT 1
5273: MINUS
5274: ST_TO_ADDR
// if _isSpawning then
5275: LD_LOC 13
5279: IFFALSE 5283
// exit ;
5281: GO 5331
// if _wildApemenAmount <= ( _apemenThreshold ) then
5283: LD_LOC 14
5287: PUSH
5288: LD_LOC 12
5292: LESSEQUAL
5293: IFFALSE 5331
// begin if _apemenSkillLevel < 8 then
5295: LD_LOC 11
5299: PUSH
5300: LD_INT 8
5302: LESS
5303: IFFALSE 5319
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
5305: LD_ADDR_LOC 11
5309: PUSH
5310: LD_LOC 11
5314: PUSH
5315: LD_INT 1
5317: PLUS
5318: ST_TO_ADDR
// _isSpawning := true ;
5319: LD_ADDR_LOC 13
5323: PUSH
5324: LD_INT 1
5326: ST_TO_ADDR
// prepare_apemen ;
5327: CALL 5336 0 0
// end ; end ;
5331: LD_VAR 0 1
5335: RET
// function prepare_apemen ; var i ; begin
5336: LD_INT 0
5338: PPUSH
5339: PPUSH
// if not amount_of_apemen then
5340: LD_EXP 27
5344: NOT
5345: IFFALSE 5349
// exit ;
5347: GO 5528
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5349: LD_INT 1050
5351: PPUSH
5352: LD_INT 3150
5354: PPUSH
5355: CALL_OW 12
5359: PPUSH
5360: CALL_OW 67
// apeman_init ;
5364: CALL 5533 0 0
// for i in ( Side_Positions diff [ 0 ] ) do
5368: LD_ADDR_VAR 0 2
5372: PUSH
5373: LD_EXP 32
5377: PUSH
5378: LD_INT 0
5380: PUSH
5381: EMPTY
5382: LIST
5383: DIFF
5384: PUSH
5385: FOR_IN
5386: IFFALSE 5490
// begin if i = 1 then
5388: LD_VAR 0 2
5392: PUSH
5393: LD_INT 1
5395: EQUAL
5396: IFFALSE 5413
// PlaceUnitArea ( CreateHuman , north_apeman , false ) ;
5398: CALL_OW 44
5402: PPUSH
5403: LD_INT 1
5405: PPUSH
5406: LD_INT 0
5408: PPUSH
5409: CALL_OW 49
// if i = 2 then
5413: LD_VAR 0 2
5417: PUSH
5418: LD_INT 2
5420: EQUAL
5421: IFFALSE 5438
// PlaceUnitArea ( CreateHuman , north_apeman , false ) ;
5423: CALL_OW 44
5427: PPUSH
5428: LD_INT 1
5430: PPUSH
5431: LD_INT 0
5433: PPUSH
5434: CALL_OW 49
// if i = 3 then
5438: LD_VAR 0 2
5442: PUSH
5443: LD_INT 3
5445: EQUAL
5446: IFFALSE 5463
// PlaceUnitArea ( CreateHuman , south_apeman , false ) ;
5448: CALL_OW 44
5452: PPUSH
5453: LD_INT 2
5455: PPUSH
5456: LD_INT 0
5458: PPUSH
5459: CALL_OW 49
// if i = 4 then
5463: LD_VAR 0 2
5467: PUSH
5468: LD_INT 4
5470: EQUAL
5471: IFFALSE 5488
// PlaceUnitArea ( CreateHuman , south_apeman , false ) ;
5473: CALL_OW 44
5477: PPUSH
5478: LD_INT 2
5480: PPUSH
5481: LD_INT 0
5483: PPUSH
5484: CALL_OW 49
// end ;
5488: GO 5385
5490: POP
5491: POP
// _wildApemenAmount := _wildApemenAmount + _apemenIncrement ;
5492: LD_ADDR_LOC 14
5496: PUSH
5497: LD_LOC 14
5501: PUSH
5502: LD_LOC 9
5506: PLUS
5507: ST_TO_ADDR
// until _wildApemenAmount >= _apemenMaximum ;
5508: LD_LOC 14
5512: PUSH
5513: LD_LOC 10
5517: GREATEREQUAL
5518: IFFALSE 5349
// _isSpawning := false ;
5520: LD_ADDR_LOC 13
5524: PUSH
5525: LD_INT 0
5527: ST_TO_ADDR
// end ;
5528: LD_VAR 0 1
5532: RET
// function apeman_init ; begin
5533: LD_INT 0
5535: PPUSH
// uc_side := 0 ;
5536: LD_ADDR_OWVAR 20
5540: PUSH
5541: LD_INT 0
5543: ST_TO_ADDR
// uc_nation := nation_nature ;
5544: LD_ADDR_OWVAR 21
5548: PUSH
5549: LD_INT 0
5551: ST_TO_ADDR
// hc_class := class_apeman ;
5552: LD_ADDR_OWVAR 28
5556: PUSH
5557: LD_INT 12
5559: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
5560: LD_ADDR_OWVAR 30
5564: PUSH
5565: LD_INT 2
5567: PUSH
5568: LD_INT 2
5570: PUSH
5571: LD_INT 2
5573: PUSH
5574: LD_INT 2
5576: PUSH
5577: EMPTY
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
5583: LD_ADDR_OWVAR 31
5587: PUSH
5588: LD_INT 0
5590: PPUSH
5591: LD_INT 2
5593: PPUSH
5594: CALL_OW 12
5598: PUSH
5599: LD_LOC 11
5603: PLUS
5604: PUSH
5605: LD_INT 0
5607: PPUSH
5608: LD_INT 2
5610: PPUSH
5611: CALL_OW 12
5615: PUSH
5616: LD_LOC 11
5620: PLUS
5621: PUSH
5622: LD_INT 0
5624: PPUSH
5625: LD_INT 2
5627: PPUSH
5628: CALL_OW 12
5632: PUSH
5633: LD_LOC 11
5637: PLUS
5638: PUSH
5639: LD_INT 0
5641: PPUSH
5642: LD_INT 2
5644: PPUSH
5645: CALL_OW 12
5649: PUSH
5650: LD_LOC 11
5654: PLUS
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
5662: LD_ADDR_OWVAR 29
5666: PUSH
5667: LD_INT 10
5669: PUSH
5670: LD_INT 12
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: ST_TO_ADDR
// hc_sex := sex_male ;
5677: LD_ADDR_OWVAR 27
5681: PUSH
5682: LD_INT 1
5684: ST_TO_ADDR
// hc_importance := 0 ;
5685: LD_ADDR_OWVAR 32
5689: PUSH
5690: LD_INT 0
5692: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
5693: LD_ADDR_OWVAR 35
5697: PUSH
5698: LD_INT 20
5700: NEG
5701: PPUSH
5702: LD_INT 20
5704: PPUSH
5705: CALL_OW 12
5709: ST_TO_ADDR
// end ; end_of_file
5710: LD_VAR 0 1
5714: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
5715: LD_INT 0
5717: PPUSH
5718: PPUSH
// for un in battle_flags_id do
5719: LD_ADDR_VAR 0 2
5723: PUSH
5724: LD_EXP 42
5728: PUSH
5729: FOR_IN
5730: IFFALSE 5805
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
5732: LD_VAR 0 2
5736: PPUSH
5737: LD_INT 1
5739: PUSH
5740: LD_LOC 15
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PUSH
5749: LD_INT 2
5751: PUSH
5752: LD_LOC 15
5756: PUSH
5757: LD_INT 2
5759: DIV
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PUSH
5765: LD_INT 3
5767: PUSH
5768: LD_LOC 15
5772: PUSH
5773: LD_INT 5
5775: DIV
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PUSH
5781: LD_INT 20
5783: PUSH
5784: LD_LOC 15
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: PPUSH
5799: CALL_OW 423
5803: GO 5729
5805: POP
5806: POP
// end ;
5807: LD_VAR 0 1
5811: RET
// every 0 0$0.1 do var un ;
5812: GO 5814
5814: DISABLE
5815: LD_INT 0
5817: PPUSH
// begin if not def_morale_flags then
5818: LD_EXP 9
5822: NOT
5823: IFFALSE 5827
// exit ;
5825: GO 5904
// if not morale_decreasing_time then
5827: LD_EXP 24
5831: NOT
5832: IFFALSE 5836
// exit ;
5834: GO 5904
// strength = 100 ;
5836: LD_ADDR_LOC 15
5840: PUSH
5841: LD_INT 100
5843: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
5844: LD_EXP 24
5848: PPUSH
5849: CALL_OW 67
// strength := strength - 1 ;
5853: LD_ADDR_LOC 15
5857: PUSH
5858: LD_LOC 15
5862: PUSH
5863: LD_INT 1
5865: MINUS
5866: ST_TO_ADDR
// Update_Flags ;
5867: CALL 5715 0 0
// until not strength ;
5871: LD_LOC 15
5875: NOT
5876: IFFALSE 5844
// for un in battle_flags_id do
5878: LD_ADDR_VAR 0 1
5882: PUSH
5883: LD_EXP 42
5887: PUSH
5888: FOR_IN
5889: IFFALSE 5902
// KillBattleFlag ( un ) ;
5891: LD_VAR 0 1
5895: PPUSH
5896: CALL_OW 419
5900: GO 5888
5902: POP
5903: POP
// end ; end_of_file
5904: PPOPN 1
5906: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
5907: LD_INT 0
5909: PPUSH
5910: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
5911: LD_ADDR_VAR 0 2
5915: PUSH
5916: LD_STRING #Multi1x1-Time
5918: PUSH
5919: LD_OWVAR 1
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: ST_TO_ADDR
// if WaitServerStrings then
5928: LD_EXP 46
5932: IFFALSE 5950
// AllStrings = AllStrings ^ WaitServerStrings ;
5934: LD_ADDR_VAR 0 2
5938: PUSH
5939: LD_VAR 0 2
5943: PUSH
5944: LD_EXP 46
5948: ADD
5949: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
5950: LD_INT 0
5952: PUSH
5953: LD_EXP 28
5957: PUSH
5958: LD_OWVAR 1
5962: MINUS
5963: LESSEQUAL
5964: IFFALSE 5995
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
5966: LD_ADDR_VAR 0 2
5970: PUSH
5971: LD_VAR 0 2
5975: PUSH
5976: LD_STRING #allowedsibbomb
5978: PUSH
5979: LD_EXP 28
5983: PUSH
5984: LD_OWVAR 1
5988: MINUS
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: ADD
5994: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
5995: LD_INT 0
5997: PUSH
5998: LD_EXP 49
6002: PUSH
6003: LD_OWVAR 1
6007: MINUS
6008: LESSEQUAL
6009: IFFALSE 6040
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: LD_VAR 0 2
6020: PUSH
6021: LD_STRING #builduptime
6023: PUSH
6024: LD_EXP 49
6028: PUSH
6029: LD_OWVAR 1
6033: MINUS
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: ADD
6039: ST_TO_ADDR
// if ( ExtraStrings ) then
6040: LD_EXP 45
6044: IFFALSE 6066
// AllStrings := AllStrings ^  ^ ExtraStrings ;
6046: LD_ADDR_VAR 0 2
6050: PUSH
6051: LD_VAR 0 2
6055: PUSH
6056: LD_STRING 
6058: ADD
6059: PUSH
6060: LD_EXP 45
6064: ADD
6065: ST_TO_ADDR
// Display_Strings := AllStrings ;
6066: LD_ADDR_OWVAR 47
6070: PUSH
6071: LD_VAR 0 2
6075: ST_TO_ADDR
// end ;
6076: LD_VAR 0 1
6080: RET
// every 0 0$1 do
6081: GO 6083
6083: DISABLE
// begin ShowTimer ;
6084: CALL 5907 0 0
// enable ;
6088: ENABLE
// end ; end_of_file
6089: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
6090: LD_INT 0
6092: PPUSH
6093: PPUSH
6094: PPUSH
// BuildUpTime_Delay = 0 ;
6095: LD_ADDR_EXP 49
6099: PUSH
6100: LD_INT 0
6102: ST_TO_ADDR
// if not def_builduptime then
6103: LD_EXP 14
6107: NOT
6108: IFFALSE 6112
// exit ;
6110: GO 6295
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
6112: LD_ADDR_EXP 49
6116: PUSH
6117: LD_INT 8400
6119: PUSH
6120: LD_INT 2100
6122: PUSH
6123: LD_EXP 14
6127: MUL
6128: PLUS
6129: ST_TO_ADDR
// BuildUpTimeActive := true ;
6130: LD_ADDR_EXP 48
6134: PUSH
6135: LD_INT 1
6137: ST_TO_ADDR
// for i := 1 to 8 do
6138: LD_ADDR_VAR 0 2
6142: PUSH
6143: DOUBLE
6144: LD_INT 1
6146: DEC
6147: ST_TO_ADDR
6148: LD_INT 8
6150: PUSH
6151: FOR_TO
6152: IFFALSE 6293
// if Side_Positions [ i ] then
6154: LD_EXP 32
6158: PUSH
6159: LD_VAR 0 2
6163: ARRAY
6164: IFFALSE 6291
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
6166: LD_EXP 47
6170: PUSH
6171: LD_EXP 32
6175: PUSH
6176: LD_VAR 0 2
6180: ARRAY
6181: ARRAY
6182: PPUSH
6183: LD_INT 5
6185: PPUSH
6186: CALL_OW 424
// for j := 1 to 8 do
6190: LD_ADDR_VAR 0 3
6194: PUSH
6195: DOUBLE
6196: LD_INT 1
6198: DEC
6199: ST_TO_ADDR
6200: LD_INT 8
6202: PUSH
6203: FOR_TO
6204: IFFALSE 6289
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
6206: LD_EXP 32
6210: PUSH
6211: LD_VAR 0 3
6215: ARRAY
6216: PUSH
6217: LD_EXP 30
6221: PUSH
6222: LD_VAR 0 2
6226: ARRAY
6227: PUSH
6228: LD_EXP 30
6232: PUSH
6233: LD_VAR 0 3
6237: ARRAY
6238: NONEQUAL
6239: PUSH
6240: LD_EXP 34
6244: NOT
6245: PUSH
6246: LD_VAR 0 2
6250: PUSH
6251: LD_VAR 0 3
6255: NONEQUAL
6256: AND
6257: OR
6258: AND
6259: IFFALSE 6287
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
6261: LD_VAR 0 3
6265: PPUSH
6266: LD_EXP 47
6270: PUSH
6271: LD_EXP 32
6275: PUSH
6276: LD_VAR 0 2
6280: ARRAY
6281: ARRAY
6282: PPUSH
6283: CALL_OW 333
6287: GO 6203
6289: POP
6290: POP
// end ;
6291: GO 6151
6293: POP
6294: POP
// end ;
6295: LD_VAR 0 1
6299: RET
// export function EndBuildUp ; var i , j ; begin
6300: LD_INT 0
6302: PPUSH
6303: PPUSH
6304: PPUSH
// BuildUpTimeActive := false ;
6305: LD_ADDR_EXP 48
6309: PUSH
6310: LD_INT 0
6312: ST_TO_ADDR
// for i := 1 to 8 do
6313: LD_ADDR_VAR 0 2
6317: PUSH
6318: DOUBLE
6319: LD_INT 1
6321: DEC
6322: ST_TO_ADDR
6323: LD_INT 8
6325: PUSH
6326: FOR_TO
6327: IFFALSE 6468
// if Side_Positions [ i ] then
6329: LD_EXP 32
6333: PUSH
6334: LD_VAR 0 2
6338: ARRAY
6339: IFFALSE 6466
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
6341: LD_EXP 47
6345: PUSH
6346: LD_EXP 32
6350: PUSH
6351: LD_VAR 0 2
6355: ARRAY
6356: ARRAY
6357: PPUSH
6358: LD_INT 0
6360: PPUSH
6361: CALL_OW 424
// for j := 1 to 8 do
6365: LD_ADDR_VAR 0 3
6369: PUSH
6370: DOUBLE
6371: LD_INT 1
6373: DEC
6374: ST_TO_ADDR
6375: LD_INT 8
6377: PUSH
6378: FOR_TO
6379: IFFALSE 6464
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
6381: LD_EXP 32
6385: PUSH
6386: LD_VAR 0 3
6390: ARRAY
6391: PUSH
6392: LD_EXP 30
6396: PUSH
6397: LD_VAR 0 2
6401: ARRAY
6402: PUSH
6403: LD_EXP 30
6407: PUSH
6408: LD_VAR 0 3
6412: ARRAY
6413: NONEQUAL
6414: PUSH
6415: LD_EXP 34
6419: NOT
6420: PUSH
6421: LD_VAR 0 2
6425: PUSH
6426: LD_VAR 0 3
6430: NONEQUAL
6431: AND
6432: OR
6433: AND
6434: IFFALSE 6462
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
6436: LD_VAR 0 3
6440: PPUSH
6441: LD_EXP 47
6445: PUSH
6446: LD_EXP 32
6450: PUSH
6451: LD_VAR 0 2
6455: ARRAY
6456: ARRAY
6457: PPUSH
6458: CALL_OW 334
6462: GO 6378
6464: POP
6465: POP
// end ;
6466: GO 6326
6468: POP
6469: POP
// end ;
6470: LD_VAR 0 1
6474: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
6475: LD_EXP 48
6479: IFFALSE 6654
6481: GO 6483
6483: DISABLE
6484: LD_INT 0
6486: PPUSH
6487: PPUSH
// begin for i := 1 to 8 do
6488: LD_ADDR_VAR 0 1
6492: PUSH
6493: DOUBLE
6494: LD_INT 1
6496: DEC
6497: ST_TO_ADDR
6498: LD_INT 8
6500: PUSH
6501: FOR_TO
6502: IFFALSE 6651
// if Side_Positions [ i ] then
6504: LD_EXP 32
6508: PUSH
6509: LD_VAR 0 1
6513: ARRAY
6514: IFFALSE 6649
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
6516: LD_ADDR_VAR 0 2
6520: PUSH
6521: LD_EXP 47
6525: PUSH
6526: LD_EXP 32
6530: PUSH
6531: LD_VAR 0 1
6535: ARRAY
6536: ARRAY
6537: PPUSH
6538: LD_INT 2
6540: PUSH
6541: LD_INT 21
6543: PUSH
6544: LD_INT 1
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: PUSH
6551: LD_INT 21
6553: PUSH
6554: LD_INT 2
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 22
6568: PUSH
6569: LD_OWVAR 2
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PPUSH
6582: CALL_OW 70
6586: PUSH
6587: FOR_IN
6588: IFFALSE 6647
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
6590: LD_EXP 30
6594: PUSH
6595: LD_VAR 0 1
6599: ARRAY
6600: PUSH
6601: LD_EXP 30
6605: PUSH
6606: LD_OWVAR 2
6610: ARRAY
6611: NONEQUAL
6612: PUSH
6613: LD_EXP 34
6617: NOT
6618: PUSH
6619: LD_VAR 0 1
6623: PUSH
6624: LD_OWVAR 2
6628: NONEQUAL
6629: AND
6630: OR
6631: IFFALSE 6645
// ComMoveToArea ( un , BuildUpEscape ) ;
6633: LD_VAR 0 2
6637: PPUSH
6638: LD_INT 12
6640: PPUSH
6641: CALL_OW 113
6645: GO 6587
6647: POP
6648: POP
6649: GO 6501
6651: POP
6652: POP
// enable ;
6653: ENABLE
// end ;
6654: PPOPN 2
6656: END
// every 0 0$1 trigger def_builduptime do
6657: LD_EXP 14
6661: IFFALSE 6687
6663: GO 6665
6665: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
6666: LD_INT 8400
6668: PUSH
6669: LD_EXP 14
6673: PUSH
6674: LD_INT 2100
6676: MUL
6677: PLUS
6678: PPUSH
6679: CALL_OW 67
// EndBuildUp ;
6683: CALL 6300 0 0
// end ; end_of_file
6687: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
6688: LD_INT 0
6690: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
6691: LD_VAR 0 1
6695: PPUSH
6696: CALL_OW 255
6700: PUSH
6701: LD_VAR 0 4
6705: EQUAL
6706: IFFALSE 6725
// begin SetAchievement ( ACH_RAD ) ;
6708: LD_STRING ACH_RAD
6710: PPUSH
6711: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
6715: LD_STRING ACH_NL
6717: PPUSH
6718: LD_INT 1
6720: PPUSH
6721: CALL_OW 564
// end end ;
6725: LD_VAR 0 5
6729: RET
// export function SA_Win ( side ) ; begin
6730: LD_INT 0
6732: PPUSH
// case side of 1 :
6733: LD_VAR 0 1
6737: PUSH
6738: LD_INT 1
6740: DOUBLE
6741: EQUAL
6742: IFTRUE 6746
6744: GO 6759
6746: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
6747: LD_STRING ACH_AH
6749: PPUSH
6750: LD_INT 1
6752: PPUSH
6753: CALL_OW 564
6757: GO 6922
6759: LD_INT 2
6761: DOUBLE
6762: EQUAL
6763: IFTRUE 6767
6765: GO 6780
6767: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
6768: LD_STRING ACH_E
6770: PPUSH
6771: LD_INT 1
6773: PPUSH
6774: CALL_OW 564
6778: GO 6922
6780: LD_INT 3
6782: DOUBLE
6783: EQUAL
6784: IFTRUE 6788
6786: GO 6801
6788: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
6789: LD_STRING ACH_OOL
6791: PPUSH
6792: LD_INT 1
6794: PPUSH
6795: CALL_OW 564
6799: GO 6922
6801: LD_INT 1
6803: PUSH
6804: LD_INT 2
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: DOUBLE
6811: EQUAL
6812: IFTRUE 6816
6814: GO 6841
6816: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
6817: LD_STRING ACH_AH
6819: PPUSH
6820: LD_REAL  5.00000000000000E-0001
6823: PPUSH
6824: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
6828: LD_STRING ACH_E
6830: PPUSH
6831: LD_REAL  5.00000000000000E-0001
6834: PPUSH
6835: CALL_OW 564
// end ; [ 2 , 3 ] :
6839: GO 6922
6841: LD_INT 2
6843: PUSH
6844: LD_INT 3
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: DOUBLE
6851: EQUAL
6852: IFTRUE 6856
6854: GO 6881
6856: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
6857: LD_STRING ACH_OOL
6859: PPUSH
6860: LD_REAL  5.00000000000000E-0001
6863: PPUSH
6864: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
6868: LD_STRING ACH_E
6870: PPUSH
6871: LD_REAL  5.00000000000000E-0001
6874: PPUSH
6875: CALL_OW 564
// end ; [ 3 , 1 ] :
6879: GO 6922
6881: LD_INT 3
6883: PUSH
6884: LD_INT 1
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: DOUBLE
6891: EQUAL
6892: IFTRUE 6896
6894: GO 6921
6896: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
6897: LD_STRING ACH_AH
6899: PPUSH
6900: LD_REAL  5.00000000000000E-0001
6903: PPUSH
6904: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
6908: LD_STRING ACH_OOL
6910: PPUSH
6911: LD_REAL  5.00000000000000E-0001
6914: PPUSH
6915: CALL_OW 564
// end ; end ;
6919: GO 6922
6921: POP
// end ; end_of_file
6922: LD_VAR 0 2
6926: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
6927: LD_INT 0
6929: PPUSH
6930: PPUSH
// enable ( 98 ) ;
6931: LD_INT 98
6933: ENABLE_MARKED
// GameEnded = false ;
6934: LD_ADDR_LOC 21
6938: PUSH
6939: LD_INT 0
6941: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6942: LD_ADDR_LOC 20
6946: PUSH
6947: LD_INT 0
6949: PUSH
6950: LD_INT 0
6952: PUSH
6953: LD_INT 0
6955: PUSH
6956: LD_INT 0
6958: PUSH
6959: LD_INT 0
6961: PUSH
6962: LD_INT 0
6964: PUSH
6965: LD_INT 0
6967: PUSH
6968: LD_INT 0
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: ST_TO_ADDR
// unfoged = false ;
6981: LD_ADDR_LOC 22
6985: PUSH
6986: LD_INT 0
6988: ST_TO_ADDR
// defeated_specs := [ ] ;
6989: LD_ADDR_LOC 23
6993: PUSH
6994: EMPTY
6995: ST_TO_ADDR
// for i = 1 to side_positions do
6996: LD_ADDR_VAR 0 2
7000: PUSH
7001: DOUBLE
7002: LD_INT 1
7004: DEC
7005: ST_TO_ADDR
7006: LD_EXP 32
7010: PUSH
7011: FOR_TO
7012: IFFALSE 7052
// if not side_positions [ i ] then
7014: LD_EXP 32
7018: PUSH
7019: LD_VAR 0 2
7023: ARRAY
7024: NOT
7025: IFFALSE 7050
// defeated = replace ( defeated , i , true ) ;
7027: LD_ADDR_LOC 20
7031: PUSH
7032: LD_LOC 20
7036: PPUSH
7037: LD_VAR 0 2
7041: PPUSH
7042: LD_INT 1
7044: PPUSH
7045: CALL_OW 1
7049: ST_TO_ADDR
7050: GO 7011
7052: POP
7053: POP
// end ;
7054: LD_VAR 0 1
7058: RET
// function CanWinLoose ; begin
7059: LD_INT 0
7061: PPUSH
// Result := true ;
7062: LD_ADDR_VAR 0 1
7066: PUSH
7067: LD_INT 1
7069: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7070: CALL_OW 518
7074: PUSH
7075: CALL_OW 519
7079: PUSH
7080: LD_INT 0
7082: GREATER
7083: AND
7084: IFFALSE 7094
// Result := false ;
7086: LD_ADDR_VAR 0 1
7090: PUSH
7091: LD_INT 0
7093: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7094: CALL_OW 531
7098: PUSH
7099: CALL_OW 519
7103: PUSH
7104: LD_INT 1
7106: GREATER
7107: AND
7108: IFFALSE 7118
// Result := false ;
7110: LD_ADDR_VAR 0 1
7114: PUSH
7115: LD_INT 0
7117: ST_TO_ADDR
// end ;
7118: LD_VAR 0 1
7122: RET
// export function HasPower ( i ) ; var k , h ; begin
7123: LD_INT 0
7125: PPUSH
7126: PPUSH
7127: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7128: LD_VAR 0 1
7132: PPUSH
7133: CALL_OW 108
7137: NOT
7138: PUSH
7139: LD_EXP 43
7143: PUSH
7144: LD_VAR 0 1
7148: ARRAY
7149: NOT
7150: AND
7151: PUSH
7152: LD_OWVAR 4
7156: AND
7157: IFFALSE 7169
// begin result = false ;
7159: LD_ADDR_VAR 0 2
7163: PUSH
7164: LD_INT 0
7166: ST_TO_ADDR
// end else
7167: GO 7464
// case def_win_rules of 0 :
7169: LD_EXP 29
7173: PUSH
7174: LD_INT 0
7176: DOUBLE
7177: EQUAL
7178: IFTRUE 7182
7180: GO 7345
7182: POP
// if def_people_respawning then
7183: LD_EXP 12
7187: IFFALSE 7278
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7189: LD_ADDR_VAR 0 2
7193: PUSH
7194: LD_INT 22
7196: PUSH
7197: LD_VAR 0 1
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: LD_INT 2
7208: PUSH
7209: LD_INT 21
7211: PUSH
7212: LD_INT 1
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: LD_INT 33
7221: PUSH
7222: LD_INT 3
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 33
7231: PUSH
7232: LD_INT 5
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: LD_INT 30
7241: PUSH
7242: LD_INT 0
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: LD_INT 30
7251: PUSH
7252: LD_INT 1
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PPUSH
7271: CALL_OW 69
7275: ST_TO_ADDR
7276: GO 7343
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
7278: LD_ADDR_VAR 0 2
7282: PUSH
7283: LD_INT 22
7285: PUSH
7286: LD_VAR 0 1
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: LD_INT 2
7297: PUSH
7298: LD_INT 21
7300: PUSH
7301: LD_INT 1
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PUSH
7308: LD_INT 33
7310: PUSH
7311: LD_INT 3
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: LD_INT 33
7320: PUSH
7321: LD_INT 5
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: PPUSH
7338: CALL_OW 69
7342: ST_TO_ADDR
7343: GO 7464
7345: LD_INT 1
7347: DOUBLE
7348: EQUAL
7349: IFTRUE 7353
7351: GO 7392
7353: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
7354: LD_ADDR_VAR 0 2
7358: PUSH
7359: LD_INT 22
7361: PUSH
7362: LD_VAR 0 1
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: LD_INT 21
7373: PUSH
7374: LD_INT 1
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PPUSH
7385: CALL_OW 69
7389: ST_TO_ADDR
7390: GO 7464
7392: LD_INT 2
7394: DOUBLE
7395: EQUAL
7396: IFTRUE 7400
7398: GO 7463
7400: POP
// begin h = false ;
7401: LD_ADDR_VAR 0 4
7405: PUSH
7406: LD_INT 0
7408: ST_TO_ADDR
// for k in heroes [ i ] do
7409: LD_ADDR_VAR 0 3
7413: PUSH
7414: LD_EXP 44
7418: PUSH
7419: LD_VAR 0 1
7423: ARRAY
7424: PUSH
7425: FOR_IN
7426: IFFALSE 7449
// if IsLive ( k ) then
7428: LD_VAR 0 3
7432: PPUSH
7433: CALL_OW 300
7437: IFFALSE 7447
// h = true ;
7439: LD_ADDR_VAR 0 4
7443: PUSH
7444: LD_INT 1
7446: ST_TO_ADDR
7447: GO 7425
7449: POP
7450: POP
// Result := h ;
7451: LD_ADDR_VAR 0 2
7455: PUSH
7456: LD_VAR 0 4
7460: ST_TO_ADDR
// end ; end ;
7461: GO 7464
7463: POP
// end ;
7464: LD_VAR 0 2
7468: RET
// function AlliedSides ( i , j ) ; begin
7469: LD_INT 0
7471: PPUSH
// Result := false ;
7472: LD_ADDR_VAR 0 3
7476: PUSH
7477: LD_INT 0
7479: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7480: LD_VAR 0 1
7484: PPUSH
7485: LD_VAR 0 2
7489: PPUSH
7490: CALL_OW 81
7494: PUSH
7495: LD_INT 1
7497: EQUAL
7498: PUSH
7499: LD_VAR 0 2
7503: PPUSH
7504: LD_VAR 0 1
7508: PPUSH
7509: CALL_OW 81
7513: PUSH
7514: LD_INT 1
7516: EQUAL
7517: AND
7518: PUSH
7519: LD_VAR 0 1
7523: PPUSH
7524: CALL_OW 83
7528: AND
7529: PUSH
7530: LD_VAR 0 2
7534: PPUSH
7535: CALL_OW 83
7539: AND
7540: IFFALSE 7550
// Result := true ;
7542: LD_ADDR_VAR 0 3
7546: PUSH
7547: LD_INT 1
7549: ST_TO_ADDR
// end ;
7550: LD_VAR 0 3
7554: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
7555: CALL 7059 0 0
7559: PUSH
7560: LD_LOC 21
7564: NOT
7565: AND
7566: IFFALSE 7582
7568: GO 7570
7570: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
7571: LD_ADDR_EXP 46
7575: PUSH
7576: LD_STRING #Player-Ended
7578: PUSH
7579: EMPTY
7580: LIST
7581: ST_TO_ADDR
7582: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
7583: CALL 7059 0 0
7587: PUSH
7588: LD_LOC 21
7592: AND
7593: IFFALSE 7602
7595: GO 7597
7597: DISABLE
// YouLostInMultiplayer ;
7598: CALL_OW 107
7602: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
7603: CALL 7059 0 0
7607: NOT
7608: PUSH
7609: CALL_OW 531
7613: NOT
7614: AND
7615: IFFALSE 7631
7617: GO 7619
7619: DISABLE
// WaitServerStrings = [ #server-wait ] ;
7620: LD_ADDR_EXP 46
7624: PUSH
7625: LD_STRING #server-wait
7627: PUSH
7628: EMPTY
7629: LIST
7630: ST_TO_ADDR
7631: END
// every 100 trigger IAmSpec do
7632: CALL_OW 531
7636: IFFALSE 7652
7638: GO 7640
7640: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
7641: LD_ADDR_EXP 46
7645: PUSH
7646: LD_STRING #Player-IAmSpec
7648: PUSH
7649: EMPTY
7650: LIST
7651: ST_TO_ADDR
7652: END
// every 100 trigger GameEnded and IAmSpec do
7653: LD_LOC 21
7657: PUSH
7658: CALL_OW 531
7662: AND
7663: IFFALSE 7672
7665: GO 7667
7667: DISABLE
// YouLostInMultiplayer ;
7668: CALL_OW 107
7672: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
7673: CALL 7059 0 0
7677: PUSH
7678: LD_LOC 21
7682: NOT
7683: AND
7684: IFFALSE 7700
7686: GO 7688
7688: DISABLE
// WaitServerStrings = [ $player-win ] ;
7689: LD_ADDR_EXP 46
7693: PUSH
7694: LD_STRING $player-win
7696: PUSH
7697: EMPTY
7698: LIST
7699: ST_TO_ADDR
7700: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
7701: CALL 7059 0 0
7705: PUSH
7706: LD_LOC 21
7710: AND
7711: IFFALSE 7735
7713: GO 7715
7715: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
7716: LD_EXP 33
7720: PUSH
7721: LD_OWVAR 7
7725: ARRAY
7726: PPUSH
7727: CALL 6730 0 1
// YouWinInMultiplayer ;
7731: CALL_OW 106
// end ;
7735: END
// every 100 trigger isEditor marked 401 do
7736: LD_OWVAR 84
7740: IFFALSE 7756
7742: GO 7744
7744: DISABLE
// Debug_Strings = [ You won ] ;
7745: LD_ADDR_OWVAR 48
7749: PUSH
7750: LD_STRING You won
7752: PUSH
7753: EMPTY
7754: LIST
7755: ST_TO_ADDR
7756: END
// every 100 trigger isEditor marked 400 do
7757: LD_OWVAR 84
7761: IFFALSE 7777
7763: GO 7765
7765: DISABLE
// Debug_Strings = [ You loss ] ;
7766: LD_ADDR_OWVAR 48
7770: PUSH
7771: LD_STRING You loss
7773: PUSH
7774: EMPTY
7775: LIST
7776: ST_TO_ADDR
7777: END
// every 100 marked 98 do var i , un ;
7778: GO 7780
7780: DISABLE
7781: LD_INT 0
7783: PPUSH
7784: PPUSH
// begin for i = 1 to side_positions do
7785: LD_ADDR_VAR 0 1
7789: PUSH
7790: DOUBLE
7791: LD_INT 1
7793: DEC
7794: ST_TO_ADDR
7795: LD_EXP 32
7799: PUSH
7800: FOR_TO
7801: IFFALSE 7888
// begin if side_positions [ i ] then
7803: LD_EXP 32
7807: PUSH
7808: LD_VAR 0 1
7812: ARRAY
7813: IFFALSE 7886
// if not HasPower ( i ) and not defeated [ i ] then
7815: LD_VAR 0 1
7819: PPUSH
7820: CALL 7123 0 1
7824: NOT
7825: PUSH
7826: LD_LOC 20
7830: PUSH
7831: LD_VAR 0 1
7835: ARRAY
7836: NOT
7837: AND
7838: IFFALSE 7886
// begin defeated = replace ( defeated , i , true ) ;
7840: LD_ADDR_LOC 20
7844: PUSH
7845: LD_LOC 20
7849: PPUSH
7850: LD_VAR 0 1
7854: PPUSH
7855: LD_INT 1
7857: PPUSH
7858: CALL_OW 1
7862: ST_TO_ADDR
// if i = mp_player_side then
7863: LD_VAR 0 1
7867: PUSH
7868: LD_OWVAR 7
7872: EQUAL
7873: IFFALSE 7886
// begin Multiplayer_Loose_Message ;
7875: CALL_OW 521
// SetPlayerSpectator ( ) ;
7879: CALL_OW 572
// enable ( 400 ) ;
7883: LD_INT 400
7885: ENABLE_MARKED
// end ; end ; end ;
7886: GO 7800
7888: POP
7889: POP
// DidGameEnd ;
7890: CALL 7905 0 0
// if not GameEnded then
7894: LD_LOC 21
7898: NOT
7899: IFFALSE 7902
// enable ;
7901: ENABLE
// end ;
7902: PPOPN 2
7904: END
// function DidGameEnd ; var i , k , enemy ; begin
7905: LD_INT 0
7907: PPUSH
7908: PPUSH
7909: PPUSH
7910: PPUSH
// enemy = [ ] ;
7911: LD_ADDR_VAR 0 4
7915: PUSH
7916: EMPTY
7917: ST_TO_ADDR
// for i = 1 to side_positions do
7918: LD_ADDR_VAR 0 2
7922: PUSH
7923: DOUBLE
7924: LD_INT 1
7926: DEC
7927: ST_TO_ADDR
7928: LD_EXP 32
7932: PUSH
7933: FOR_TO
7934: IFFALSE 8028
// if not defeated [ i ] then
7936: LD_LOC 20
7940: PUSH
7941: LD_VAR 0 2
7945: ARRAY
7946: NOT
7947: IFFALSE 8026
// for k = 1 to side_positions do
7949: LD_ADDR_VAR 0 3
7953: PUSH
7954: DOUBLE
7955: LD_INT 1
7957: DEC
7958: ST_TO_ADDR
7959: LD_EXP 32
7963: PUSH
7964: FOR_TO
7965: IFFALSE 8024
// if not defeated [ k ] then
7967: LD_LOC 20
7971: PUSH
7972: LD_VAR 0 3
7976: ARRAY
7977: NOT
7978: IFFALSE 8022
// if not AlliedSides ( i , k ) then
7980: LD_VAR 0 2
7984: PPUSH
7985: LD_VAR 0 3
7989: PPUSH
7990: CALL 7469 0 2
7994: NOT
7995: IFFALSE 8022
// enemy = enemy ^ [ i , k ] ;
7997: LD_ADDR_VAR 0 4
8001: PUSH
8002: LD_VAR 0 4
8006: PUSH
8007: LD_VAR 0 2
8011: PUSH
8012: LD_VAR 0 3
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: ADD
8021: ST_TO_ADDR
8022: GO 7964
8024: POP
8025: POP
8026: GO 7933
8028: POP
8029: POP
// if not enemy then
8030: LD_VAR 0 4
8034: NOT
8035: IFFALSE 8061
// begin GameEnded = true ;
8037: LD_ADDR_LOC 21
8041: PUSH
8042: LD_INT 1
8044: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
8045: LD_LOC 20
8049: PUSH
8050: LD_OWVAR 7
8054: ARRAY
8055: NOT
8056: IFFALSE 8061
// enable ( 401 ) ;
8058: LD_INT 401
8060: ENABLE_MARKED
// end ; end ;
8061: LD_VAR 0 1
8065: RET
// function unfog ; var k , friends ; begin
8066: LD_INT 0
8068: PPUSH
8069: PPUSH
8070: PPUSH
// for k = 1 to side_positions do
8071: LD_ADDR_VAR 0 2
8075: PUSH
8076: DOUBLE
8077: LD_INT 1
8079: DEC
8080: ST_TO_ADDR
8081: LD_EXP 32
8085: PUSH
8086: FOR_TO
8087: IFFALSE 8143
// if not defeated [ k ] then
8089: LD_LOC 20
8093: PUSH
8094: LD_VAR 0 2
8098: ARRAY
8099: NOT
8100: IFFALSE 8141
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
8102: LD_OWVAR 7
8106: PPUSH
8107: LD_VAR 0 2
8111: PPUSH
8112: CALL_OW 81
8116: PUSH
8117: LD_INT 1
8119: PUSH
8120: EMPTY
8121: LIST
8122: IN
8123: IFFALSE 8141
// friends = friends ^ k ;
8125: LD_ADDR_VAR 0 3
8129: PUSH
8130: LD_VAR 0 3
8134: PUSH
8135: LD_VAR 0 2
8139: ADD
8140: ST_TO_ADDR
8141: GO 8086
8143: POP
8144: POP
// if not friends then
8145: LD_VAR 0 3
8149: NOT
8150: IFFALSE 8164
// begin SetPlayerSpectator ( ) ;
8152: CALL_OW 572
// unfoged = true ;
8156: LD_ADDR_LOC 22
8160: PUSH
8161: LD_INT 1
8163: ST_TO_ADDR
// end ; end ;
8164: LD_VAR 0 1
8168: RET
// export function MakeGameEnd ; begin
8169: LD_INT 0
8171: PPUSH
// SetPlayerSpectator ( ) ;
8172: CALL_OW 572
// unfoged = true ;
8176: LD_ADDR_LOC 22
8180: PUSH
8181: LD_INT 1
8183: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8184: LD_INT 175
8186: PPUSH
8187: CALL_OW 67
// GameEnded = true ;
8191: LD_ADDR_LOC 21
8195: PUSH
8196: LD_INT 1
8198: ST_TO_ADDR
// end ;
8199: LD_VAR 0 1
8203: RET
// export function GetGameEnded ; begin
8204: LD_INT 0
8206: PPUSH
// result = GameEnded ;
8207: LD_ADDR_VAR 0 1
8211: PUSH
8212: LD_LOC 21
8216: ST_TO_ADDR
// end ; end_of_file
8217: LD_VAR 0 1
8221: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8222: LD_INT 0
8224: PPUSH
8225: PPUSH
8226: PPUSH
// for side = 1 to 8 do
8227: LD_ADDR_VAR 0 2
8231: PUSH
8232: DOUBLE
8233: LD_INT 1
8235: DEC
8236: ST_TO_ADDR
8237: LD_INT 8
8239: PUSH
8240: FOR_TO
8241: IFFALSE 8362
// begin for i = 1 to 72 do
8243: LD_ADDR_VAR 0 3
8247: PUSH
8248: DOUBLE
8249: LD_INT 1
8251: DEC
8252: ST_TO_ADDR
8253: LD_INT 72
8255: PUSH
8256: FOR_TO
8257: IFFALSE 8288
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
8259: LD_VAR 0 3
8263: PPUSH
8264: LD_VAR 0 2
8268: PPUSH
8269: LD_INT 0
8271: PPUSH
8272: LD_VAR 0 3
8276: PPUSH
8277: CALL_OW 565
8281: PPUSH
8282: CALL_OW 322
8286: GO 8256
8288: POP
8289: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
8290: LD_INT 73
8292: PPUSH
8293: LD_VAR 0 2
8297: PPUSH
8298: LD_INT 0
8300: PPUSH
8301: LD_INT 25
8303: PPUSH
8304: CALL_OW 565
8308: PPUSH
8309: CALL_OW 322
// for i = 0 to 40 do
8313: LD_ADDR_VAR 0 3
8317: PUSH
8318: DOUBLE
8319: LD_INT 0
8321: DEC
8322: ST_TO_ADDR
8323: LD_INT 40
8325: PUSH
8326: FOR_TO
8327: IFFALSE 8358
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
8329: LD_VAR 0 3
8333: PPUSH
8334: LD_VAR 0 2
8338: PPUSH
8339: LD_INT 1
8341: PPUSH
8342: LD_VAR 0 3
8346: PPUSH
8347: CALL_OW 565
8351: PPUSH
8352: CALL_OW 324
8356: GO 8326
8358: POP
8359: POP
// end ;
8360: GO 8240
8362: POP
8363: POP
// end ;
8364: LD_VAR 0 1
8368: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
8369: LD_INT 0
8371: PPUSH
8372: PPUSH
8373: PPUSH
// for side = 1 to 8 do
8374: LD_ADDR_VAR 0 3
8378: PUSH
8379: DOUBLE
8380: LD_INT 1
8382: DEC
8383: ST_TO_ADDR
8384: LD_INT 8
8386: PUSH
8387: FOR_TO
8388: IFFALSE 12384
// begin for i = 1 to 73 do
8390: LD_ADDR_VAR 0 4
8394: PUSH
8395: DOUBLE
8396: LD_INT 1
8398: DEC
8399: ST_TO_ADDR
8400: LD_INT 73
8402: PUSH
8403: FOR_TO
8404: IFFALSE 8425
// SetTech ( i , side , state_disabled ) ;
8406: LD_VAR 0 4
8410: PPUSH
8411: LD_VAR 0 3
8415: PPUSH
8416: LD_INT 0
8418: PPUSH
8419: CALL_OW 322
8423: GO 8403
8425: POP
8426: POP
// for i = 0 to 40 do
8427: LD_ADDR_VAR 0 4
8431: PUSH
8432: DOUBLE
8433: LD_INT 0
8435: DEC
8436: ST_TO_ADDR
8437: LD_INT 40
8439: PUSH
8440: FOR_TO
8441: IFFALSE 8462
// SetRestrict ( i , side , false ) ;
8443: LD_VAR 0 4
8447: PPUSH
8448: LD_VAR 0 3
8452: PPUSH
8453: LD_INT 0
8455: PPUSH
8456: CALL_OW 324
8460: GO 8440
8462: POP
8463: POP
// case level of 1 :
8464: LD_VAR 0 1
8468: PUSH
8469: LD_INT 1
8471: DOUBLE
8472: EQUAL
8473: IFTRUE 8477
8475: GO 8630
8477: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8478: LD_INT 35
8480: PPUSH
8481: LD_VAR 0 3
8485: PPUSH
8486: LD_INT 1
8488: PPUSH
8489: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8493: LD_INT 45
8495: PPUSH
8496: LD_VAR 0 3
8500: PPUSH
8501: LD_INT 1
8503: PPUSH
8504: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8508: LD_INT 46
8510: PPUSH
8511: LD_VAR 0 3
8515: PPUSH
8516: LD_INT 1
8518: PPUSH
8519: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8523: LD_INT 47
8525: PPUSH
8526: LD_VAR 0 3
8530: PPUSH
8531: LD_INT 1
8533: PPUSH
8534: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8538: LD_INT 0
8540: PPUSH
8541: LD_VAR 0 3
8545: PPUSH
8546: LD_INT 1
8548: PPUSH
8549: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8553: LD_INT 2
8555: PPUSH
8556: LD_VAR 0 3
8560: PPUSH
8561: LD_INT 1
8563: PPUSH
8564: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8568: LD_INT 4
8570: PPUSH
8571: LD_VAR 0 3
8575: PPUSH
8576: LD_INT 1
8578: PPUSH
8579: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8583: LD_INT 6
8585: PPUSH
8586: LD_VAR 0 3
8590: PPUSH
8591: LD_INT 1
8593: PPUSH
8594: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8598: LD_INT 29
8600: PPUSH
8601: LD_VAR 0 3
8605: PPUSH
8606: LD_INT 1
8608: PPUSH
8609: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8613: LD_INT 31
8615: PPUSH
8616: LD_VAR 0 3
8620: PPUSH
8621: LD_INT 1
8623: PPUSH
8624: CALL_OW 324
// end ; 2 :
8628: GO 12382
8630: LD_INT 2
8632: DOUBLE
8633: EQUAL
8634: IFTRUE 8638
8636: GO 8836
8638: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8639: LD_INT 35
8641: PPUSH
8642: LD_VAR 0 3
8646: PPUSH
8647: LD_INT 1
8649: PPUSH
8650: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8654: LD_INT 45
8656: PPUSH
8657: LD_VAR 0 3
8661: PPUSH
8662: LD_INT 1
8664: PPUSH
8665: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8669: LD_INT 46
8671: PPUSH
8672: LD_VAR 0 3
8676: PPUSH
8677: LD_INT 1
8679: PPUSH
8680: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8684: LD_INT 47
8686: PPUSH
8687: LD_VAR 0 3
8691: PPUSH
8692: LD_INT 1
8694: PPUSH
8695: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8699: LD_INT 1
8701: PPUSH
8702: LD_VAR 0 3
8706: PPUSH
8707: LD_INT 1
8709: PPUSH
8710: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8714: LD_INT 2
8716: PPUSH
8717: LD_VAR 0 3
8721: PPUSH
8722: LD_INT 1
8724: PPUSH
8725: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8729: LD_INT 11
8731: PPUSH
8732: LD_VAR 0 3
8736: PPUSH
8737: LD_INT 1
8739: PPUSH
8740: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8744: LD_INT 0
8746: PPUSH
8747: LD_VAR 0 3
8751: PPUSH
8752: LD_INT 1
8754: PPUSH
8755: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8759: LD_INT 2
8761: PPUSH
8762: LD_VAR 0 3
8766: PPUSH
8767: LD_INT 1
8769: PPUSH
8770: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8774: LD_INT 4
8776: PPUSH
8777: LD_VAR 0 3
8781: PPUSH
8782: LD_INT 1
8784: PPUSH
8785: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8789: LD_INT 6
8791: PPUSH
8792: LD_VAR 0 3
8796: PPUSH
8797: LD_INT 1
8799: PPUSH
8800: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8804: LD_INT 29
8806: PPUSH
8807: LD_VAR 0 3
8811: PPUSH
8812: LD_INT 1
8814: PPUSH
8815: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8819: LD_INT 31
8821: PPUSH
8822: LD_VAR 0 3
8826: PPUSH
8827: LD_INT 1
8829: PPUSH
8830: CALL_OW 324
// end ; 3 :
8834: GO 12382
8836: LD_INT 3
8838: DOUBLE
8839: EQUAL
8840: IFTRUE 8844
8842: GO 9297
8844: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8845: LD_INT 35
8847: PPUSH
8848: LD_VAR 0 3
8852: PPUSH
8853: LD_INT 1
8855: PPUSH
8856: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8860: LD_INT 45
8862: PPUSH
8863: LD_VAR 0 3
8867: PPUSH
8868: LD_INT 1
8870: PPUSH
8871: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8875: LD_INT 46
8877: PPUSH
8878: LD_VAR 0 3
8882: PPUSH
8883: LD_INT 1
8885: PPUSH
8886: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8890: LD_INT 47
8892: PPUSH
8893: LD_VAR 0 3
8897: PPUSH
8898: LD_INT 1
8900: PPUSH
8901: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8905: LD_INT 1
8907: PPUSH
8908: LD_VAR 0 3
8912: PPUSH
8913: LD_INT 1
8915: PPUSH
8916: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8920: LD_INT 2
8922: PPUSH
8923: LD_VAR 0 3
8927: PPUSH
8928: LD_INT 1
8930: PPUSH
8931: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8935: LD_INT 11
8937: PPUSH
8938: LD_VAR 0 3
8942: PPUSH
8943: LD_INT 1
8945: PPUSH
8946: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
8950: LD_INT 48
8952: PPUSH
8953: LD_VAR 0 3
8957: PPUSH
8958: LD_INT 1
8960: PPUSH
8961: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
8965: LD_INT 69
8967: PPUSH
8968: LD_VAR 0 3
8972: PPUSH
8973: LD_INT 1
8975: PPUSH
8976: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
8980: LD_INT 39
8982: PPUSH
8983: LD_VAR 0 3
8987: PPUSH
8988: LD_INT 1
8990: PPUSH
8991: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
8995: LD_INT 43
8997: PPUSH
8998: LD_VAR 0 3
9002: PPUSH
9003: LD_INT 1
9005: PPUSH
9006: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9010: LD_INT 51
9012: PPUSH
9013: LD_VAR 0 3
9017: PPUSH
9018: LD_INT 1
9020: PPUSH
9021: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9025: LD_INT 6
9027: PPUSH
9028: LD_VAR 0 3
9032: PPUSH
9033: LD_INT 1
9035: PPUSH
9036: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9040: LD_INT 0
9042: PPUSH
9043: LD_VAR 0 3
9047: PPUSH
9048: LD_INT 1
9050: PPUSH
9051: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9055: LD_INT 2
9057: PPUSH
9058: LD_VAR 0 3
9062: PPUSH
9063: LD_INT 1
9065: PPUSH
9066: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9070: LD_INT 3
9072: PPUSH
9073: LD_VAR 0 3
9077: PPUSH
9078: LD_INT 1
9080: PPUSH
9081: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9085: LD_INT 4
9087: PPUSH
9088: LD_VAR 0 3
9092: PPUSH
9093: LD_INT 1
9095: PPUSH
9096: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9100: LD_INT 6
9102: PPUSH
9103: LD_VAR 0 3
9107: PPUSH
9108: LD_INT 1
9110: PPUSH
9111: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9115: LD_INT 7
9117: PPUSH
9118: LD_VAR 0 3
9122: PPUSH
9123: LD_INT 1
9125: PPUSH
9126: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9130: LD_INT 8
9132: PPUSH
9133: LD_VAR 0 3
9137: PPUSH
9138: LD_INT 1
9140: PPUSH
9141: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9145: LD_INT 10
9147: PPUSH
9148: LD_VAR 0 3
9152: PPUSH
9153: LD_INT 1
9155: PPUSH
9156: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9160: LD_INT 15
9162: PPUSH
9163: LD_VAR 0 3
9167: PPUSH
9168: LD_INT 1
9170: PPUSH
9171: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9175: LD_INT 16
9177: PPUSH
9178: LD_VAR 0 3
9182: PPUSH
9183: LD_INT 1
9185: PPUSH
9186: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9190: LD_INT 17
9192: PPUSH
9193: LD_VAR 0 3
9197: PPUSH
9198: LD_INT 1
9200: PPUSH
9201: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9205: LD_INT 20
9207: PPUSH
9208: LD_VAR 0 3
9212: PPUSH
9213: LD_INT 1
9215: PPUSH
9216: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9220: LD_INT 26
9222: PPUSH
9223: LD_VAR 0 3
9227: PPUSH
9228: LD_INT 1
9230: PPUSH
9231: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9235: LD_INT 27
9237: PPUSH
9238: LD_VAR 0 3
9242: PPUSH
9243: LD_INT 1
9245: PPUSH
9246: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9250: LD_INT 29
9252: PPUSH
9253: LD_VAR 0 3
9257: PPUSH
9258: LD_INT 1
9260: PPUSH
9261: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9265: LD_INT 31
9267: PPUSH
9268: LD_VAR 0 3
9272: PPUSH
9273: LD_INT 1
9275: PPUSH
9276: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9280: LD_INT 32
9282: PPUSH
9283: LD_VAR 0 3
9287: PPUSH
9288: LD_INT 1
9290: PPUSH
9291: CALL_OW 324
// end ; 4 :
9295: GO 12382
9297: LD_INT 4
9299: DOUBLE
9300: EQUAL
9301: IFTRUE 9305
9303: GO 10253
9305: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9306: LD_INT 35
9308: PPUSH
9309: LD_VAR 0 3
9313: PPUSH
9314: LD_INT 1
9316: PPUSH
9317: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9321: LD_INT 45
9323: PPUSH
9324: LD_VAR 0 3
9328: PPUSH
9329: LD_INT 1
9331: PPUSH
9332: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9336: LD_INT 46
9338: PPUSH
9339: LD_VAR 0 3
9343: PPUSH
9344: LD_INT 1
9346: PPUSH
9347: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9351: LD_INT 47
9353: PPUSH
9354: LD_VAR 0 3
9358: PPUSH
9359: LD_INT 1
9361: PPUSH
9362: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9366: LD_INT 1
9368: PPUSH
9369: LD_VAR 0 3
9373: PPUSH
9374: LD_INT 1
9376: PPUSH
9377: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9381: LD_INT 2
9383: PPUSH
9384: LD_VAR 0 3
9388: PPUSH
9389: LD_INT 1
9391: PPUSH
9392: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9396: LD_INT 11
9398: PPUSH
9399: LD_VAR 0 3
9403: PPUSH
9404: LD_INT 1
9406: PPUSH
9407: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9411: LD_INT 20
9413: PPUSH
9414: LD_VAR 0 3
9418: PPUSH
9419: LD_INT 1
9421: PPUSH
9422: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9426: LD_INT 48
9428: PPUSH
9429: LD_VAR 0 3
9433: PPUSH
9434: LD_INT 1
9436: PPUSH
9437: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9441: LD_INT 49
9443: PPUSH
9444: LD_VAR 0 3
9448: PPUSH
9449: LD_INT 1
9451: PPUSH
9452: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9456: LD_INT 69
9458: PPUSH
9459: LD_VAR 0 3
9463: PPUSH
9464: LD_INT 1
9466: PPUSH
9467: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9471: LD_INT 39
9473: PPUSH
9474: LD_VAR 0 3
9478: PPUSH
9479: LD_INT 1
9481: PPUSH
9482: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9486: LD_INT 34
9488: PPUSH
9489: LD_VAR 0 3
9493: PPUSH
9494: LD_INT 1
9496: PPUSH
9497: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
9501: LD_INT 42
9503: PPUSH
9504: LD_VAR 0 3
9508: PPUSH
9509: LD_INT 1
9511: PPUSH
9512: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
9516: LD_INT 44
9518: PPUSH
9519: LD_VAR 0 3
9523: PPUSH
9524: LD_INT 1
9526: PPUSH
9527: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
9531: LD_INT 41
9533: PPUSH
9534: LD_VAR 0 3
9538: PPUSH
9539: LD_INT 1
9541: PPUSH
9542: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9546: LD_INT 43
9548: PPUSH
9549: LD_VAR 0 3
9553: PPUSH
9554: LD_INT 1
9556: PPUSH
9557: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
9561: LD_INT 70
9563: PPUSH
9564: LD_VAR 0 3
9568: PPUSH
9569: LD_INT 1
9571: PPUSH
9572: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9576: LD_INT 51
9578: PPUSH
9579: LD_VAR 0 3
9583: PPUSH
9584: LD_INT 1
9586: PPUSH
9587: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
9591: LD_INT 52
9593: PPUSH
9594: LD_VAR 0 3
9598: PPUSH
9599: LD_INT 1
9601: PPUSH
9602: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9606: LD_INT 6
9608: PPUSH
9609: LD_VAR 0 3
9613: PPUSH
9614: LD_INT 1
9616: PPUSH
9617: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9621: LD_INT 15
9623: PPUSH
9624: LD_VAR 0 3
9628: PPUSH
9629: LD_INT 1
9631: PPUSH
9632: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
9636: LD_INT 7
9638: PPUSH
9639: LD_VAR 0 3
9643: PPUSH
9644: LD_INT 1
9646: PPUSH
9647: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
9651: LD_INT 12
9653: PPUSH
9654: LD_VAR 0 3
9658: PPUSH
9659: LD_INT 1
9661: PPUSH
9662: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
9666: LD_INT 18
9668: PPUSH
9669: LD_VAR 0 3
9673: PPUSH
9674: LD_INT 1
9676: PPUSH
9677: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
9681: LD_INT 60
9683: PPUSH
9684: LD_VAR 0 3
9688: PPUSH
9689: LD_INT 1
9691: PPUSH
9692: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
9696: LD_INT 9
9698: PPUSH
9699: LD_VAR 0 3
9703: PPUSH
9704: LD_INT 1
9706: PPUSH
9707: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
9711: LD_INT 30
9713: PPUSH
9714: LD_VAR 0 3
9718: PPUSH
9719: LD_INT 1
9721: PPUSH
9722: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
9726: LD_INT 37
9728: PPUSH
9729: LD_VAR 0 3
9733: PPUSH
9734: LD_INT 1
9736: PPUSH
9737: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
9741: LD_INT 5
9743: PPUSH
9744: LD_VAR 0 3
9748: PPUSH
9749: LD_INT 1
9751: PPUSH
9752: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
9756: LD_INT 66
9758: PPUSH
9759: LD_VAR 0 3
9763: PPUSH
9764: LD_INT 1
9766: PPUSH
9767: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
9771: LD_INT 21
9773: PPUSH
9774: LD_VAR 0 3
9778: PPUSH
9779: LD_INT 1
9781: PPUSH
9782: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
9786: LD_INT 22
9788: PPUSH
9789: LD_VAR 0 3
9793: PPUSH
9794: LD_INT 1
9796: PPUSH
9797: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
9801: LD_INT 54
9803: PPUSH
9804: LD_VAR 0 3
9808: PPUSH
9809: LD_INT 1
9811: PPUSH
9812: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9816: LD_INT 0
9818: PPUSH
9819: LD_VAR 0 3
9823: PPUSH
9824: LD_INT 1
9826: PPUSH
9827: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
9831: LD_INT 1
9833: PPUSH
9834: LD_VAR 0 3
9838: PPUSH
9839: LD_INT 1
9841: PPUSH
9842: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9846: LD_INT 2
9848: PPUSH
9849: LD_VAR 0 3
9853: PPUSH
9854: LD_INT 1
9856: PPUSH
9857: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9861: LD_INT 3
9863: PPUSH
9864: LD_VAR 0 3
9868: PPUSH
9869: LD_INT 1
9871: PPUSH
9872: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9876: LD_INT 4
9878: PPUSH
9879: LD_VAR 0 3
9883: PPUSH
9884: LD_INT 1
9886: PPUSH
9887: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
9891: LD_INT 5
9893: PPUSH
9894: LD_VAR 0 3
9898: PPUSH
9899: LD_INT 1
9901: PPUSH
9902: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9906: LD_INT 6
9908: PPUSH
9909: LD_VAR 0 3
9913: PPUSH
9914: LD_INT 1
9916: PPUSH
9917: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9921: LD_INT 7
9923: PPUSH
9924: LD_VAR 0 3
9928: PPUSH
9929: LD_INT 1
9931: PPUSH
9932: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9936: LD_INT 8
9938: PPUSH
9939: LD_VAR 0 3
9943: PPUSH
9944: LD_INT 1
9946: PPUSH
9947: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9951: LD_INT 10
9953: PPUSH
9954: LD_VAR 0 3
9958: PPUSH
9959: LD_INT 1
9961: PPUSH
9962: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
9966: LD_INT 11
9968: PPUSH
9969: LD_VAR 0 3
9973: PPUSH
9974: LD_INT 1
9976: PPUSH
9977: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
9981: LD_INT 12
9983: PPUSH
9984: LD_VAR 0 3
9988: PPUSH
9989: LD_INT 1
9991: PPUSH
9992: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
9996: LD_INT 13
9998: PPUSH
9999: LD_VAR 0 3
10003: PPUSH
10004: LD_INT 1
10006: PPUSH
10007: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10011: LD_INT 14
10013: PPUSH
10014: LD_VAR 0 3
10018: PPUSH
10019: LD_INT 1
10021: PPUSH
10022: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10026: LD_INT 15
10028: PPUSH
10029: LD_VAR 0 3
10033: PPUSH
10034: LD_INT 1
10036: PPUSH
10037: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10041: LD_INT 16
10043: PPUSH
10044: LD_VAR 0 3
10048: PPUSH
10049: LD_INT 1
10051: PPUSH
10052: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10056: LD_INT 17
10058: PPUSH
10059: LD_VAR 0 3
10063: PPUSH
10064: LD_INT 1
10066: PPUSH
10067: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10071: LD_INT 19
10073: PPUSH
10074: LD_VAR 0 3
10078: PPUSH
10079: LD_INT 1
10081: PPUSH
10082: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10086: LD_INT 20
10088: PPUSH
10089: LD_VAR 0 3
10093: PPUSH
10094: LD_INT 1
10096: PPUSH
10097: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10101: LD_INT 21
10103: PPUSH
10104: LD_VAR 0 3
10108: PPUSH
10109: LD_INT 1
10111: PPUSH
10112: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10116: LD_INT 23
10118: PPUSH
10119: LD_VAR 0 3
10123: PPUSH
10124: LD_INT 1
10126: PPUSH
10127: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10131: LD_INT 26
10133: PPUSH
10134: LD_VAR 0 3
10138: PPUSH
10139: LD_INT 1
10141: PPUSH
10142: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10146: LD_INT 27
10148: PPUSH
10149: LD_VAR 0 3
10153: PPUSH
10154: LD_INT 1
10156: PPUSH
10157: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10161: LD_INT 28
10163: PPUSH
10164: LD_VAR 0 3
10168: PPUSH
10169: LD_INT 1
10171: PPUSH
10172: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10176: LD_INT 29
10178: PPUSH
10179: LD_VAR 0 3
10183: PPUSH
10184: LD_INT 1
10186: PPUSH
10187: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10191: LD_INT 30
10193: PPUSH
10194: LD_VAR 0 3
10198: PPUSH
10199: LD_INT 1
10201: PPUSH
10202: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10206: LD_INT 31
10208: PPUSH
10209: LD_VAR 0 3
10213: PPUSH
10214: LD_INT 1
10216: PPUSH
10217: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10221: LD_INT 32
10223: PPUSH
10224: LD_VAR 0 3
10228: PPUSH
10229: LD_INT 1
10231: PPUSH
10232: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10236: LD_INT 36
10238: PPUSH
10239: LD_VAR 0 3
10243: PPUSH
10244: LD_INT 1
10246: PPUSH
10247: CALL_OW 324
// end ; 5 :
10251: GO 12382
10253: LD_INT 5
10255: DOUBLE
10256: EQUAL
10257: IFTRUE 10261
10259: GO 11374
10261: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10262: LD_INT 35
10264: PPUSH
10265: LD_VAR 0 3
10269: PPUSH
10270: LD_INT 1
10272: PPUSH
10273: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10277: LD_INT 45
10279: PPUSH
10280: LD_VAR 0 3
10284: PPUSH
10285: LD_INT 1
10287: PPUSH
10288: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10292: LD_INT 46
10294: PPUSH
10295: LD_VAR 0 3
10299: PPUSH
10300: LD_INT 1
10302: PPUSH
10303: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10307: LD_INT 47
10309: PPUSH
10310: LD_VAR 0 3
10314: PPUSH
10315: LD_INT 1
10317: PPUSH
10318: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10322: LD_INT 1
10324: PPUSH
10325: LD_VAR 0 3
10329: PPUSH
10330: LD_INT 1
10332: PPUSH
10333: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10337: LD_INT 2
10339: PPUSH
10340: LD_VAR 0 3
10344: PPUSH
10345: LD_INT 1
10347: PPUSH
10348: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10352: LD_INT 11
10354: PPUSH
10355: LD_VAR 0 3
10359: PPUSH
10360: LD_INT 1
10362: PPUSH
10363: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10367: LD_INT 20
10369: PPUSH
10370: LD_VAR 0 3
10374: PPUSH
10375: LD_INT 1
10377: PPUSH
10378: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10382: LD_INT 48
10384: PPUSH
10385: LD_VAR 0 3
10389: PPUSH
10390: LD_INT 1
10392: PPUSH
10393: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10397: LD_INT 49
10399: PPUSH
10400: LD_VAR 0 3
10404: PPUSH
10405: LD_INT 1
10407: PPUSH
10408: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10412: LD_INT 69
10414: PPUSH
10415: LD_VAR 0 3
10419: PPUSH
10420: LD_INT 1
10422: PPUSH
10423: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10427: LD_INT 39
10429: PPUSH
10430: LD_VAR 0 3
10434: PPUSH
10435: LD_INT 1
10437: PPUSH
10438: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10442: LD_INT 34
10444: PPUSH
10445: LD_VAR 0 3
10449: PPUSH
10450: LD_INT 1
10452: PPUSH
10453: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10457: LD_INT 42
10459: PPUSH
10460: LD_VAR 0 3
10464: PPUSH
10465: LD_INT 1
10467: PPUSH
10468: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10472: LD_INT 44
10474: PPUSH
10475: LD_VAR 0 3
10479: PPUSH
10480: LD_INT 1
10482: PPUSH
10483: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10487: LD_INT 41
10489: PPUSH
10490: LD_VAR 0 3
10494: PPUSH
10495: LD_INT 1
10497: PPUSH
10498: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
10502: LD_INT 40
10504: PPUSH
10505: LD_VAR 0 3
10509: PPUSH
10510: LD_INT 1
10512: PPUSH
10513: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10517: LD_INT 43
10519: PPUSH
10520: LD_VAR 0 3
10524: PPUSH
10525: LD_INT 1
10527: PPUSH
10528: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10532: LD_INT 70
10534: PPUSH
10535: LD_VAR 0 3
10539: PPUSH
10540: LD_INT 1
10542: PPUSH
10543: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10547: LD_INT 51
10549: PPUSH
10550: LD_VAR 0 3
10554: PPUSH
10555: LD_INT 1
10557: PPUSH
10558: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10562: LD_INT 52
10564: PPUSH
10565: LD_VAR 0 3
10569: PPUSH
10570: LD_INT 1
10572: PPUSH
10573: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10577: LD_INT 6
10579: PPUSH
10580: LD_VAR 0 3
10584: PPUSH
10585: LD_INT 1
10587: PPUSH
10588: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10592: LD_INT 15
10594: PPUSH
10595: LD_VAR 0 3
10599: PPUSH
10600: LD_INT 1
10602: PPUSH
10603: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10607: LD_INT 7
10609: PPUSH
10610: LD_VAR 0 3
10614: PPUSH
10615: LD_INT 1
10617: PPUSH
10618: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10622: LD_INT 12
10624: PPUSH
10625: LD_VAR 0 3
10629: PPUSH
10630: LD_INT 1
10632: PPUSH
10633: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
10637: LD_INT 17
10639: PPUSH
10640: LD_VAR 0 3
10644: PPUSH
10645: LD_INT 1
10647: PPUSH
10648: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10652: LD_INT 18
10654: PPUSH
10655: LD_VAR 0 3
10659: PPUSH
10660: LD_INT 1
10662: PPUSH
10663: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10667: LD_INT 60
10669: PPUSH
10670: LD_VAR 0 3
10674: PPUSH
10675: LD_INT 1
10677: PPUSH
10678: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
10682: LD_INT 32
10684: PPUSH
10685: LD_VAR 0 3
10689: PPUSH
10690: LD_INT 1
10692: PPUSH
10693: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10697: LD_INT 9
10699: PPUSH
10700: LD_VAR 0 3
10704: PPUSH
10705: LD_INT 1
10707: PPUSH
10708: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
10712: LD_INT 57
10714: PPUSH
10715: LD_VAR 0 3
10719: PPUSH
10720: LD_INT 1
10722: PPUSH
10723: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10727: LD_INT 30
10729: PPUSH
10730: LD_VAR 0 3
10734: PPUSH
10735: LD_INT 1
10737: PPUSH
10738: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10742: LD_INT 37
10744: PPUSH
10745: LD_VAR 0 3
10749: PPUSH
10750: LD_INT 1
10752: PPUSH
10753: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
10757: LD_INT 63
10759: PPUSH
10760: LD_VAR 0 3
10764: PPUSH
10765: LD_INT 1
10767: PPUSH
10768: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
10772: LD_INT 3
10774: PPUSH
10775: LD_VAR 0 3
10779: PPUSH
10780: LD_INT 1
10782: PPUSH
10783: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
10787: LD_INT 4
10789: PPUSH
10790: LD_VAR 0 3
10794: PPUSH
10795: LD_INT 1
10797: PPUSH
10798: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10802: LD_INT 5
10804: PPUSH
10805: LD_VAR 0 3
10809: PPUSH
10810: LD_INT 1
10812: PPUSH
10813: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10817: LD_INT 66
10819: PPUSH
10820: LD_VAR 0 3
10824: PPUSH
10825: LD_INT 1
10827: PPUSH
10828: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10832: LD_INT 21
10834: PPUSH
10835: LD_VAR 0 3
10839: PPUSH
10840: LD_INT 1
10842: PPUSH
10843: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10847: LD_INT 22
10849: PPUSH
10850: LD_VAR 0 3
10854: PPUSH
10855: LD_INT 1
10857: PPUSH
10858: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
10862: LD_INT 19
10864: PPUSH
10865: LD_VAR 0 3
10869: PPUSH
10870: LD_INT 1
10872: PPUSH
10873: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10877: LD_INT 54
10879: PPUSH
10880: LD_VAR 0 3
10884: PPUSH
10885: LD_INT 1
10887: PPUSH
10888: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
10892: LD_INT 55
10894: PPUSH
10895: LD_VAR 0 3
10899: PPUSH
10900: LD_INT 1
10902: PPUSH
10903: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10907: LD_INT 0
10909: PPUSH
10910: LD_VAR 0 3
10914: PPUSH
10915: LD_INT 1
10917: PPUSH
10918: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10922: LD_INT 1
10924: PPUSH
10925: LD_VAR 0 3
10929: PPUSH
10930: LD_INT 1
10932: PPUSH
10933: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10937: LD_INT 2
10939: PPUSH
10940: LD_VAR 0 3
10944: PPUSH
10945: LD_INT 1
10947: PPUSH
10948: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10952: LD_INT 3
10954: PPUSH
10955: LD_VAR 0 3
10959: PPUSH
10960: LD_INT 1
10962: PPUSH
10963: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10967: LD_INT 4
10969: PPUSH
10970: LD_VAR 0 3
10974: PPUSH
10975: LD_INT 1
10977: PPUSH
10978: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10982: LD_INT 5
10984: PPUSH
10985: LD_VAR 0 3
10989: PPUSH
10990: LD_INT 1
10992: PPUSH
10993: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10997: LD_INT 6
10999: PPUSH
11000: LD_VAR 0 3
11004: PPUSH
11005: LD_INT 1
11007: PPUSH
11008: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11012: LD_INT 7
11014: PPUSH
11015: LD_VAR 0 3
11019: PPUSH
11020: LD_INT 1
11022: PPUSH
11023: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11027: LD_INT 8
11029: PPUSH
11030: LD_VAR 0 3
11034: PPUSH
11035: LD_INT 1
11037: PPUSH
11038: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11042: LD_INT 10
11044: PPUSH
11045: LD_VAR 0 3
11049: PPUSH
11050: LD_INT 1
11052: PPUSH
11053: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11057: LD_INT 11
11059: PPUSH
11060: LD_VAR 0 3
11064: PPUSH
11065: LD_INT 1
11067: PPUSH
11068: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11072: LD_INT 12
11074: PPUSH
11075: LD_VAR 0 3
11079: PPUSH
11080: LD_INT 1
11082: PPUSH
11083: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11087: LD_INT 13
11089: PPUSH
11090: LD_VAR 0 3
11094: PPUSH
11095: LD_INT 1
11097: PPUSH
11098: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11102: LD_INT 14
11104: PPUSH
11105: LD_VAR 0 3
11109: PPUSH
11110: LD_INT 1
11112: PPUSH
11113: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11117: LD_INT 15
11119: PPUSH
11120: LD_VAR 0 3
11124: PPUSH
11125: LD_INT 1
11127: PPUSH
11128: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11132: LD_INT 16
11134: PPUSH
11135: LD_VAR 0 3
11139: PPUSH
11140: LD_INT 1
11142: PPUSH
11143: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11147: LD_INT 17
11149: PPUSH
11150: LD_VAR 0 3
11154: PPUSH
11155: LD_INT 1
11157: PPUSH
11158: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11162: LD_INT 18
11164: PPUSH
11165: LD_VAR 0 3
11169: PPUSH
11170: LD_INT 1
11172: PPUSH
11173: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11177: LD_INT 19
11179: PPUSH
11180: LD_VAR 0 3
11184: PPUSH
11185: LD_INT 1
11187: PPUSH
11188: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11192: LD_INT 20
11194: PPUSH
11195: LD_VAR 0 3
11199: PPUSH
11200: LD_INT 1
11202: PPUSH
11203: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11207: LD_INT 21
11209: PPUSH
11210: LD_VAR 0 3
11214: PPUSH
11215: LD_INT 1
11217: PPUSH
11218: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11222: LD_INT 23
11224: PPUSH
11225: LD_VAR 0 3
11229: PPUSH
11230: LD_INT 1
11232: PPUSH
11233: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11237: LD_INT 26
11239: PPUSH
11240: LD_VAR 0 3
11244: PPUSH
11245: LD_INT 1
11247: PPUSH
11248: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11252: LD_INT 27
11254: PPUSH
11255: LD_VAR 0 3
11259: PPUSH
11260: LD_INT 1
11262: PPUSH
11263: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11267: LD_INT 28
11269: PPUSH
11270: LD_VAR 0 3
11274: PPUSH
11275: LD_INT 1
11277: PPUSH
11278: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11282: LD_INT 29
11284: PPUSH
11285: LD_VAR 0 3
11289: PPUSH
11290: LD_INT 1
11292: PPUSH
11293: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11297: LD_INT 30
11299: PPUSH
11300: LD_VAR 0 3
11304: PPUSH
11305: LD_INT 1
11307: PPUSH
11308: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11312: LD_INT 31
11314: PPUSH
11315: LD_VAR 0 3
11319: PPUSH
11320: LD_INT 1
11322: PPUSH
11323: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11327: LD_INT 32
11329: PPUSH
11330: LD_VAR 0 3
11334: PPUSH
11335: LD_INT 1
11337: PPUSH
11338: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
11342: LD_INT 33
11344: PPUSH
11345: LD_VAR 0 3
11349: PPUSH
11350: LD_INT 1
11352: PPUSH
11353: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11357: LD_INT 36
11359: PPUSH
11360: LD_VAR 0 3
11364: PPUSH
11365: LD_INT 1
11367: PPUSH
11368: CALL_OW 324
// end ; 6 :
11372: GO 12382
11374: LD_INT 6
11376: DOUBLE
11377: EQUAL
11378: IFTRUE 11382
11380: GO 12307
11382: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11383: LD_INT 35
11385: PPUSH
11386: LD_VAR 0 3
11390: PPUSH
11391: LD_INT 1
11393: PPUSH
11394: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11398: LD_INT 45
11400: PPUSH
11401: LD_VAR 0 3
11405: PPUSH
11406: LD_INT 1
11408: PPUSH
11409: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11413: LD_INT 46
11415: PPUSH
11416: LD_VAR 0 3
11420: PPUSH
11421: LD_INT 1
11423: PPUSH
11424: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11428: LD_INT 47
11430: PPUSH
11431: LD_VAR 0 3
11435: PPUSH
11436: LD_INT 1
11438: PPUSH
11439: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11443: LD_INT 1
11445: PPUSH
11446: LD_VAR 0 3
11450: PPUSH
11451: LD_INT 1
11453: PPUSH
11454: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11458: LD_INT 2
11460: PPUSH
11461: LD_VAR 0 3
11465: PPUSH
11466: LD_INT 1
11468: PPUSH
11469: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11473: LD_INT 11
11475: PPUSH
11476: LD_VAR 0 3
11480: PPUSH
11481: LD_INT 1
11483: PPUSH
11484: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11488: LD_INT 20
11490: PPUSH
11491: LD_VAR 0 3
11495: PPUSH
11496: LD_INT 1
11498: PPUSH
11499: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11503: LD_INT 48
11505: PPUSH
11506: LD_VAR 0 3
11510: PPUSH
11511: LD_INT 1
11513: PPUSH
11514: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11518: LD_INT 49
11520: PPUSH
11521: LD_VAR 0 3
11525: PPUSH
11526: LD_INT 1
11528: PPUSH
11529: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
11533: LD_INT 50
11535: PPUSH
11536: LD_VAR 0 3
11540: PPUSH
11541: LD_INT 1
11543: PPUSH
11544: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11548: LD_INT 69
11550: PPUSH
11551: LD_VAR 0 3
11555: PPUSH
11556: LD_INT 1
11558: PPUSH
11559: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11563: LD_INT 39
11565: PPUSH
11566: LD_VAR 0 3
11570: PPUSH
11571: LD_INT 1
11573: PPUSH
11574: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11578: LD_INT 34
11580: PPUSH
11581: LD_VAR 0 3
11585: PPUSH
11586: LD_INT 1
11588: PPUSH
11589: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11593: LD_INT 42
11595: PPUSH
11596: LD_VAR 0 3
11600: PPUSH
11601: LD_INT 1
11603: PPUSH
11604: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11608: LD_INT 44
11610: PPUSH
11611: LD_VAR 0 3
11615: PPUSH
11616: LD_INT 1
11618: PPUSH
11619: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11623: LD_INT 41
11625: PPUSH
11626: LD_VAR 0 3
11630: PPUSH
11631: LD_INT 1
11633: PPUSH
11634: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
11638: LD_INT 13
11640: PPUSH
11641: LD_VAR 0 3
11645: PPUSH
11646: LD_INT 1
11648: PPUSH
11649: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11653: LD_INT 40
11655: PPUSH
11656: LD_VAR 0 3
11660: PPUSH
11661: LD_INT 1
11663: PPUSH
11664: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11668: LD_INT 43
11670: PPUSH
11671: LD_VAR 0 3
11675: PPUSH
11676: LD_INT 1
11678: PPUSH
11679: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11683: LD_INT 70
11685: PPUSH
11686: LD_VAR 0 3
11690: PPUSH
11691: LD_INT 1
11693: PPUSH
11694: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
11698: LD_INT 23
11700: PPUSH
11701: LD_VAR 0 3
11705: PPUSH
11706: LD_INT 1
11708: PPUSH
11709: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11713: LD_INT 51
11715: PPUSH
11716: LD_VAR 0 3
11720: PPUSH
11721: LD_INT 1
11723: PPUSH
11724: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11728: LD_INT 52
11730: PPUSH
11731: LD_VAR 0 3
11735: PPUSH
11736: LD_INT 1
11738: PPUSH
11739: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11743: LD_INT 6
11745: PPUSH
11746: LD_VAR 0 3
11750: PPUSH
11751: LD_INT 1
11753: PPUSH
11754: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11758: LD_INT 15
11760: PPUSH
11761: LD_VAR 0 3
11765: PPUSH
11766: LD_INT 1
11768: PPUSH
11769: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11773: LD_INT 7
11775: PPUSH
11776: LD_VAR 0 3
11780: PPUSH
11781: LD_INT 1
11783: PPUSH
11784: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11788: LD_INT 12
11790: PPUSH
11791: LD_VAR 0 3
11795: PPUSH
11796: LD_INT 1
11798: PPUSH
11799: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
11803: LD_INT 10
11805: PPUSH
11806: LD_VAR 0 3
11810: PPUSH
11811: LD_INT 1
11813: PPUSH
11814: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11818: LD_INT 17
11820: PPUSH
11821: LD_VAR 0 3
11825: PPUSH
11826: LD_INT 1
11828: PPUSH
11829: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11833: LD_INT 18
11835: PPUSH
11836: LD_VAR 0 3
11840: PPUSH
11841: LD_INT 1
11843: PPUSH
11844: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11848: LD_INT 60
11850: PPUSH
11851: LD_VAR 0 3
11855: PPUSH
11856: LD_INT 1
11858: PPUSH
11859: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
11863: LD_INT 61
11865: PPUSH
11866: LD_VAR 0 3
11870: PPUSH
11871: LD_INT 1
11873: PPUSH
11874: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11878: LD_INT 32
11880: PPUSH
11881: LD_VAR 0 3
11885: PPUSH
11886: LD_INT 1
11888: PPUSH
11889: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
11893: LD_INT 27
11895: PPUSH
11896: LD_VAR 0 3
11900: PPUSH
11901: LD_INT 1
11903: PPUSH
11904: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
11908: LD_INT 36
11910: PPUSH
11911: LD_VAR 0 3
11915: PPUSH
11916: LD_INT 1
11918: PPUSH
11919: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
11923: LD_INT 33
11925: PPUSH
11926: LD_VAR 0 3
11930: PPUSH
11931: LD_INT 1
11933: PPUSH
11934: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11938: LD_INT 9
11940: PPUSH
11941: LD_VAR 0 3
11945: PPUSH
11946: LD_INT 1
11948: PPUSH
11949: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
11953: LD_INT 38
11955: PPUSH
11956: LD_VAR 0 3
11960: PPUSH
11961: LD_INT 1
11963: PPUSH
11964: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11968: LD_INT 57
11970: PPUSH
11971: LD_VAR 0 3
11975: PPUSH
11976: LD_INT 1
11978: PPUSH
11979: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
11983: LD_INT 58
11985: PPUSH
11986: LD_VAR 0 3
11990: PPUSH
11991: LD_INT 1
11993: PPUSH
11994: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
11998: LD_INT 28
12000: PPUSH
12001: LD_VAR 0 3
12005: PPUSH
12006: LD_INT 1
12008: PPUSH
12009: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12013: LD_INT 29
12015: PPUSH
12016: LD_VAR 0 3
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12028: LD_INT 30
12030: PPUSH
12031: LD_VAR 0 3
12035: PPUSH
12036: LD_INT 1
12038: PPUSH
12039: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12043: LD_INT 37
12045: PPUSH
12046: LD_VAR 0 3
12050: PPUSH
12051: LD_INT 1
12053: PPUSH
12054: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12058: LD_INT 63
12060: PPUSH
12061: LD_VAR 0 3
12065: PPUSH
12066: LD_INT 1
12068: PPUSH
12069: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12073: LD_INT 64
12075: PPUSH
12076: LD_VAR 0 3
12080: PPUSH
12081: LD_INT 1
12083: PPUSH
12084: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12088: LD_INT 3
12090: PPUSH
12091: LD_VAR 0 3
12095: PPUSH
12096: LD_INT 1
12098: PPUSH
12099: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12103: LD_INT 4
12105: PPUSH
12106: LD_VAR 0 3
12110: PPUSH
12111: LD_INT 1
12113: PPUSH
12114: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12118: LD_INT 5
12120: PPUSH
12121: LD_VAR 0 3
12125: PPUSH
12126: LD_INT 1
12128: PPUSH
12129: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12133: LD_INT 8
12135: PPUSH
12136: LD_VAR 0 3
12140: PPUSH
12141: LD_INT 1
12143: PPUSH
12144: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12148: LD_INT 66
12150: PPUSH
12151: LD_VAR 0 3
12155: PPUSH
12156: LD_INT 1
12158: PPUSH
12159: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12163: LD_INT 67
12165: PPUSH
12166: LD_VAR 0 3
12170: PPUSH
12171: LD_INT 1
12173: PPUSH
12174: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12178: LD_INT 21
12180: PPUSH
12181: LD_VAR 0 3
12185: PPUSH
12186: LD_INT 1
12188: PPUSH
12189: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12193: LD_INT 22
12195: PPUSH
12196: LD_VAR 0 3
12200: PPUSH
12201: LD_INT 1
12203: PPUSH
12204: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12208: LD_INT 19
12210: PPUSH
12211: LD_VAR 0 3
12215: PPUSH
12216: LD_INT 1
12218: PPUSH
12219: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12223: LD_INT 26
12225: PPUSH
12226: LD_VAR 0 3
12230: PPUSH
12231: LD_INT 1
12233: PPUSH
12234: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12238: LD_INT 54
12240: PPUSH
12241: LD_VAR 0 3
12245: PPUSH
12246: LD_INT 1
12248: PPUSH
12249: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12253: LD_INT 55
12255: PPUSH
12256: LD_VAR 0 3
12260: PPUSH
12261: LD_INT 1
12263: PPUSH
12264: CALL_OW 322
// for i = 0 to 39 do
12268: LD_ADDR_VAR 0 4
12272: PUSH
12273: DOUBLE
12274: LD_INT 0
12276: DEC
12277: ST_TO_ADDR
12278: LD_INT 39
12280: PUSH
12281: FOR_TO
12282: IFFALSE 12303
// SetRestrict ( i , side , true ) ;
12284: LD_VAR 0 4
12288: PPUSH
12289: LD_VAR 0 3
12293: PPUSH
12294: LD_INT 1
12296: PPUSH
12297: CALL_OW 324
12301: GO 12281
12303: POP
12304: POP
// end ; else
12305: GO 12382
12307: POP
// begin for i = 1 to 73 do
12308: LD_ADDR_VAR 0 4
12312: PUSH
12313: DOUBLE
12314: LD_INT 1
12316: DEC
12317: ST_TO_ADDR
12318: LD_INT 73
12320: PUSH
12321: FOR_TO
12322: IFFALSE 12343
// SetTech ( i , side , state_enabled ) ;
12324: LD_VAR 0 4
12328: PPUSH
12329: LD_VAR 0 3
12333: PPUSH
12334: LD_INT 1
12336: PPUSH
12337: CALL_OW 322
12341: GO 12321
12343: POP
12344: POP
// for i = 0 to 39 do
12345: LD_ADDR_VAR 0 4
12349: PUSH
12350: DOUBLE
12351: LD_INT 0
12353: DEC
12354: ST_TO_ADDR
12355: LD_INT 39
12357: PUSH
12358: FOR_TO
12359: IFFALSE 12380
// SetRestrict ( i , side , true ) ;
12361: LD_VAR 0 4
12365: PPUSH
12366: LD_VAR 0 3
12370: PPUSH
12371: LD_INT 1
12373: PPUSH
12374: CALL_OW 324
12378: GO 12358
12380: POP
12381: POP
// end ; end ; end ;
12382: GO 8387
12384: POP
12385: POP
// end ; end_of_file
12386: LD_VAR 0 2
12390: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
12391: LD_INT 0
12393: PPUSH
12394: PPUSH
12395: PPUSH
12396: PPUSH
12397: PPUSH
12398: PPUSH
12399: PPUSH
12400: PPUSH
12401: PPUSH
// for i := 1 to 8 do
12402: LD_ADDR_VAR 0 2
12406: PUSH
12407: DOUBLE
12408: LD_INT 1
12410: DEC
12411: ST_TO_ADDR
12412: LD_INT 8
12414: PUSH
12415: FOR_TO
12416: IFFALSE 12800
// begin if Side_Positions [ i ] then
12418: LD_EXP 32
12422: PUSH
12423: LD_VAR 0 2
12427: ARRAY
12428: IFFALSE 12798
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
12430: LD_ADDR_VAR 0 7
12434: PUSH
12435: LD_INT 22
12437: PUSH
12438: LD_VAR 0 2
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 21
12449: PUSH
12450: LD_INT 1
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: PPUSH
12461: CALL_OW 69
12465: PUSH
12466: LD_INT 0
12468: PLUS
12469: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12470: LD_ADDR_VAR 0 9
12474: PUSH
12475: LD_INT 22
12477: PUSH
12478: LD_VAR 0 2
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: LD_INT 2
12489: PUSH
12490: LD_INT 30
12492: PUSH
12493: LD_INT 0
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PUSH
12500: LD_INT 30
12502: PUSH
12503: LD_INT 1
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: PPUSH
12519: CALL_OW 69
12523: ST_TO_ADDR
// crates := 0 ;
12524: LD_ADDR_VAR 0 4
12528: PUSH
12529: LD_INT 0
12531: ST_TO_ADDR
// oil := 0 ;
12532: LD_ADDR_VAR 0 5
12536: PUSH
12537: LD_INT 0
12539: ST_TO_ADDR
// sib := 0 ;
12540: LD_ADDR_VAR 0 6
12544: PUSH
12545: LD_INT 0
12547: ST_TO_ADDR
// if bases then
12548: LD_VAR 0 9
12552: IFFALSE 12658
// begin for j in bases do
12554: LD_ADDR_VAR 0 3
12558: PUSH
12559: LD_VAR 0 9
12563: PUSH
12564: FOR_IN
12565: IFFALSE 12656
// begin base := GetBase ( j ) ;
12567: LD_ADDR_VAR 0 8
12571: PUSH
12572: LD_VAR 0 3
12576: PPUSH
12577: CALL_OW 274
12581: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
12582: LD_ADDR_VAR 0 4
12586: PUSH
12587: LD_VAR 0 4
12591: PUSH
12592: LD_VAR 0 8
12596: PPUSH
12597: LD_INT 1
12599: PPUSH
12600: CALL_OW 275
12604: PLUS
12605: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
12606: LD_ADDR_VAR 0 5
12610: PUSH
12611: LD_VAR 0 5
12615: PUSH
12616: LD_VAR 0 8
12620: PPUSH
12621: LD_INT 2
12623: PPUSH
12624: CALL_OW 275
12628: PLUS
12629: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
12630: LD_ADDR_VAR 0 6
12634: PUSH
12635: LD_VAR 0 6
12639: PUSH
12640: LD_VAR 0 8
12644: PPUSH
12645: LD_INT 3
12647: PPUSH
12648: CALL_OW 275
12652: PLUS
12653: ST_TO_ADDR
// end ;
12654: GO 12564
12656: POP
12657: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
12658: LD_STRING setSpecText(
12660: PUSH
12661: LD_VAR 0 2
12665: STR
12666: PUSH
12667: LD_STRING ,
12669: STR
12670: PUSH
12671: LD_INT 2
12673: STR
12674: PUSH
12675: LD_STRING ,
12677: STR
12678: PUSH
12679: LD_VAR 0 4
12683: STR
12684: PUSH
12685: LD_STRING )
12687: STR
12688: PPUSH
12689: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
12693: LD_STRING setSpecText(
12695: PUSH
12696: LD_VAR 0 2
12700: STR
12701: PUSH
12702: LD_STRING ,
12704: STR
12705: PUSH
12706: LD_INT 3
12708: STR
12709: PUSH
12710: LD_STRING ,
12712: STR
12713: PUSH
12714: LD_VAR 0 5
12718: STR
12719: PUSH
12720: LD_STRING )
12722: STR
12723: PPUSH
12724: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
12728: LD_STRING setSpecText(
12730: PUSH
12731: LD_VAR 0 2
12735: STR
12736: PUSH
12737: LD_STRING ,
12739: STR
12740: PUSH
12741: LD_INT 4
12743: STR
12744: PUSH
12745: LD_STRING ,
12747: STR
12748: PUSH
12749: LD_VAR 0 6
12753: STR
12754: PUSH
12755: LD_STRING )
12757: STR
12758: PPUSH
12759: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
12763: LD_STRING setSpecText(
12765: PUSH
12766: LD_VAR 0 2
12770: STR
12771: PUSH
12772: LD_STRING ,
12774: STR
12775: PUSH
12776: LD_INT 5
12778: STR
12779: PUSH
12780: LD_STRING ,
12782: STR
12783: PUSH
12784: LD_VAR 0 7
12788: STR
12789: PUSH
12790: LD_STRING )
12792: STR
12793: PPUSH
12794: CALL_OW 559
// end ; end ;
12798: GO 12415
12800: POP
12801: POP
// end ;
12802: LD_VAR 0 1
12806: RET
// every 0 0$1 do
12807: GO 12809
12809: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
12810: LD_STRING setSpecLogoNumber(
12812: PUSH
12813: LD_INT 2
12815: STR
12816: PUSH
12817: LD_STRING ,
12819: STR
12820: PUSH
12821: LD_INT 1
12823: STR
12824: PUSH
12825: LD_STRING )
12827: STR
12828: PPUSH
12829: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
12833: LD_STRING setSpecLogoNumber(
12835: PUSH
12836: LD_INT 3
12838: STR
12839: PUSH
12840: LD_STRING ,
12842: STR
12843: PUSH
12844: LD_INT 2
12846: STR
12847: PUSH
12848: LD_STRING )
12850: STR
12851: PPUSH
12852: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
12856: LD_STRING setSpecLogoNumber(
12858: PUSH
12859: LD_INT 4
12861: STR
12862: PUSH
12863: LD_STRING ,
12865: STR
12866: PUSH
12867: LD_INT 3
12869: STR
12870: PUSH
12871: LD_STRING )
12873: STR
12874: PPUSH
12875: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
12879: LD_STRING setSpecLogoNumber(
12881: PUSH
12882: LD_INT 5
12884: STR
12885: PUSH
12886: LD_STRING ,
12888: STR
12889: PUSH
12890: LD_INT 4
12892: STR
12893: PUSH
12894: LD_STRING )
12896: STR
12897: PPUSH
12898: CALL_OW 559
// end ;
12902: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
12903: LD_INT 2
12905: PUSH
12906: LD_INT 30
12908: PUSH
12909: LD_INT 0
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PUSH
12916: LD_INT 30
12918: PUSH
12919: LD_INT 1
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: LIST
12930: PPUSH
12931: CALL_OW 69
12935: IFFALSE 12945
12937: GO 12939
12939: DISABLE
// begin enable ;
12940: ENABLE
// UpdateSpectatorBar ;
12941: CALL 12391 0 0
// end ; end_of_file
12945: END
// var respawn , inqueue ; export function init_respawning ; begin
12946: LD_INT 0
12948: PPUSH
// respawn := Rand ( 1 , 8 ) ;
12949: LD_ADDR_LOC 24
12953: PUSH
12954: LD_INT 1
12956: PPUSH
12957: LD_INT 8
12959: PPUSH
12960: CALL_OW 12
12964: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12965: LD_ADDR_LOC 25
12969: PUSH
12970: LD_INT 0
12972: PUSH
12973: LD_INT 0
12975: PUSH
12976: LD_INT 0
12978: PUSH
12979: LD_INT 0
12981: PUSH
12982: LD_INT 0
12984: PUSH
12985: LD_INT 0
12987: PUSH
12988: LD_INT 0
12990: PUSH
12991: LD_INT 0
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: ST_TO_ADDR
// end ;
13004: LD_VAR 0 1
13008: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13009: GO 13011
13011: DISABLE
13012: LD_INT 0
13014: PPUSH
13015: PPUSH
13016: PPUSH
// begin if respawning_time_max = 0 then
13017: LD_EXP 26
13021: PUSH
13022: LD_INT 0
13024: EQUAL
13025: IFFALSE 13029
// exit ;
13027: GO 13437
// if respawn = 8 then
13029: LD_LOC 24
13033: PUSH
13034: LD_INT 8
13036: EQUAL
13037: IFFALSE 13049
// respawn := 1 else
13039: LD_ADDR_LOC 24
13043: PUSH
13044: LD_INT 1
13046: ST_TO_ADDR
13047: GO 13063
// respawn := respawn + 1 ;
13049: LD_ADDR_LOC 24
13053: PUSH
13054: LD_LOC 24
13058: PUSH
13059: LD_INT 1
13061: PLUS
13062: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
13063: LD_EXP 32
13067: PUSH
13068: LD_LOC 24
13072: ARRAY
13073: PUSH
13074: LD_LOC 25
13078: PUSH
13079: LD_LOC 24
13083: ARRAY
13084: NOT
13085: AND
13086: IFFALSE 13436
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
13088: LD_ADDR_VAR 0 1
13092: PUSH
13093: LD_INT 21
13095: PUSH
13096: LD_INT 1
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PUSH
13103: LD_INT 22
13105: PUSH
13106: LD_LOC 24
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PUSH
13115: LD_INT 3
13117: PUSH
13118: LD_INT 23
13120: PUSH
13121: LD_INT 0
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: PPUSH
13134: CALL_OW 69
13138: ST_TO_ADDR
// if n < number_of_people then
13139: LD_VAR 0 1
13143: PUSH
13144: LD_EXP 19
13148: LESS
13149: IFFALSE 13433
// begin aktresp := respawn ;
13151: LD_ADDR_VAR 0 3
13155: PUSH
13156: LD_LOC 24
13160: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
13161: LD_ADDR_LOC 25
13165: PUSH
13166: LD_LOC 25
13170: PPUSH
13171: LD_VAR 0 3
13175: PPUSH
13176: LD_INT 1
13178: PPUSH
13179: CALL_OW 1
13183: ST_TO_ADDR
// enable ;
13184: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
13185: LD_EXP 25
13189: PPUSH
13190: LD_EXP 26
13194: PPUSH
13195: CALL_OW 12
13199: PPUSH
13200: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
13204: LD_ADDR_LOC 25
13208: PUSH
13209: LD_LOC 25
13213: PPUSH
13214: LD_VAR 0 3
13218: PPUSH
13219: LD_INT 0
13221: PPUSH
13222: CALL_OW 1
13226: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
13227: LD_ADDR_VAR 0 2
13231: PUSH
13232: LD_INT 21
13234: PUSH
13235: LD_INT 3
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 2
13244: PUSH
13245: LD_INT 30
13247: PUSH
13248: LD_INT 0
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PUSH
13255: LD_INT 30
13257: PUSH
13258: LD_INT 1
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: LIST
13269: PUSH
13270: LD_INT 50
13272: PUSH
13273: EMPTY
13274: LIST
13275: PUSH
13276: LD_INT 22
13278: PUSH
13279: LD_VAR 0 3
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: PPUSH
13294: CALL_OW 69
13298: ST_TO_ADDR
// if dep = 0 then
13299: LD_VAR 0 2
13303: PUSH
13304: LD_INT 0
13306: EQUAL
13307: IFFALSE 13311
// exit ;
13309: GO 13437
// hc_name :=  ;
13311: LD_ADDR_OWVAR 26
13315: PUSH
13316: LD_STRING 
13318: ST_TO_ADDR
// hc_importance := 0 ;
13319: LD_ADDR_OWVAR 32
13323: PUSH
13324: LD_INT 0
13326: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
13327: LD_INT 0
13329: PPUSH
13330: LD_INT 0
13332: PPUSH
13333: LD_EXP 20
13337: PUSH
13338: LD_INT 2
13340: DIV
13341: PPUSH
13342: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
13346: LD_ADDR_OWVAR 21
13350: PUSH
13351: LD_EXP 33
13355: PUSH
13356: LD_VAR 0 3
13360: ARRAY
13361: ST_TO_ADDR
// uc_side := aktresp ;
13362: LD_ADDR_OWVAR 20
13366: PUSH
13367: LD_VAR 0 3
13371: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
13372: LD_ADDR_VAR 0 2
13376: PUSH
13377: LD_VAR 0 2
13381: PUSH
13382: LD_INT 1
13384: PPUSH
13385: LD_VAR 0 2
13389: PPUSH
13390: CALL_OW 12
13394: ARRAY
13395: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
13396: CALL_OW 44
13400: PPUSH
13401: LD_VAR 0 2
13405: PPUSH
13406: CALL_OW 250
13410: PPUSH
13411: LD_VAR 0 2
13415: PPUSH
13416: CALL_OW 251
13420: PPUSH
13421: LD_INT 7
13423: PPUSH
13424: LD_INT 1
13426: PPUSH
13427: CALL_OW 50
// end else
13431: GO 13434
// enable ;
13433: ENABLE
// end else
13434: GO 13437
// enable ;
13436: ENABLE
// end ;
13437: PPOPN 3
13439: END
