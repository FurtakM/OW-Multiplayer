// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , amount_of_apemen , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , extra_sib_deposits_locations , normal_oil_deposits_locations , normal_sib_deposits_locations , battle_flags_id , Side_Comps ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function init_map ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// normal_oil_deposits_locations := [ [ 65 , 49 ] , [ 157 , 62 ] , [ 192 , 143 ] , [ 109 , 147 ] ] ;
   4: LD_ADDR_EXP 40
   8: PUSH
   9: LD_INT 65
  11: PUSH
  12: LD_INT 49
  14: PUSH
  15: EMPTY
  16: LIST
  17: LIST
  18: PUSH
  19: LD_INT 157
  21: PUSH
  22: LD_INT 62
  24: PUSH
  25: EMPTY
  26: LIST
  27: LIST
  28: PUSH
  29: LD_INT 192
  31: PUSH
  32: LD_INT 143
  34: PUSH
  35: EMPTY
  36: LIST
  37: LIST
  38: PUSH
  39: LD_INT 109
  41: PUSH
  42: LD_INT 147
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: EMPTY
  50: LIST
  51: LIST
  52: LIST
  53: LIST
  54: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 22 , 33 ] , [ 179 , 43 ] , [ 228 , 151 ] , [ 83 , 154 ] ] ;
  55: LD_ADDR_EXP 38
  59: PUSH
  60: LD_INT 22
  62: PUSH
  63: LD_INT 33
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 179
  72: PUSH
  73: LD_INT 43
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: LD_INT 228
  82: PUSH
  83: LD_INT 151
  85: PUSH
  86: EMPTY
  87: LIST
  88: LIST
  89: PUSH
  90: LD_INT 83
  92: PUSH
  93: LD_INT 154
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: PUSH
 100: EMPTY
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 39 , 18 ] , [ 138 , 27 ] , [ 222 , 157 ] , [ 82 , 115 ] ] ;
 106: LD_ADDR_EXP 41
 110: PUSH
 111: LD_INT 39
 113: PUSH
 114: LD_INT 18
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: PUSH
 121: LD_INT 138
 123: PUSH
 124: LD_INT 27
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: PUSH
 131: LD_INT 222
 133: PUSH
 134: LD_INT 157
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: PUSH
 141: LD_INT 82
 143: PUSH
 144: LD_INT 115
 146: PUSH
 147: EMPTY
 148: LIST
 149: LIST
 150: PUSH
 151: EMPTY
 152: LIST
 153: LIST
 154: LIST
 155: LIST
 156: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 35 , 55 ] , [ 188 , 70 ] , [ 214 , 123 ] , [ 66 , 120 ] ] ;
 157: LD_ADDR_EXP 39
 161: PUSH
 162: LD_INT 35
 164: PUSH
 165: LD_INT 55
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: PUSH
 172: LD_INT 188
 174: PUSH
 175: LD_INT 70
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: LD_INT 214
 184: PUSH
 185: LD_INT 123
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: LD_INT 66
 194: PUSH
 195: LD_INT 120
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: ST_TO_ADDR
// depot_def := [ [ 54 , 45 , 3 ] , [ 161 , 55 , 5 ] , [ 98 , 142 , 4 ] , [ 194 , 133 , 1 ] ] ;
 208: LD_ADDR_EXP 35
 212: PUSH
 213: LD_INT 54
 215: PUSH
 216: LD_INT 45
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: PUSH
 227: LD_INT 161
 229: PUSH
 230: LD_INT 55
 232: PUSH
 233: LD_INT 5
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 98
 243: PUSH
 244: LD_INT 142
 246: PUSH
 247: LD_INT 4
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: LIST
 254: PUSH
 255: LD_INT 194
 257: PUSH
 258: LD_INT 133
 260: PUSH
 261: LD_INT 1
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: LIST
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: LIST
 274: ST_TO_ADDR
// start_def := [ [ 53 , 52 ] , [ 152 , 45 ] , [ 91 , 140 ] , [ 200 , 132 ] ] ;
 275: LD_ADDR_EXP 37
 279: PUSH
 280: LD_INT 53
 282: PUSH
 283: LD_INT 52
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 152
 292: PUSH
 293: LD_INT 45
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: LD_INT 91
 302: PUSH
 303: LD_INT 140
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 200
 312: PUSH
 313: LD_INT 132
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: ST_TO_ADDR
// breastworks_def := [ [ [ 76 , 75 , 5 ] , [ 72 , 34 , 4 ] , [ 81 , 60 , 5 ] , [ 31 , 31 , 2 ] ] , [ [ 170 , 79 , 5 ] , [ 139 , 42 , 1 ] , [ 171 , 58 , 4 ] , [ 149 , 25 , 3 ] ] , [ [ 114 , 163 , 5 ] , [ 114 , 138 , 4 ] , [ 97 , 116 , 3 ] , [ 81 , 135 , 1 ] ] , [ [ 179 , 116 , 2 ] , [ 175 , 145 , 1 ] , [ 217 , 149 , 4 ] , [ 202 , 158 , 0 ] ] ] ;
 326: LD_ADDR_EXP 36
 330: PUSH
 331: LD_INT 76
 333: PUSH
 334: LD_INT 75
 336: PUSH
 337: LD_INT 5
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 72
 347: PUSH
 348: LD_INT 34
 350: PUSH
 351: LD_INT 4
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 81
 361: PUSH
 362: LD_INT 60
 364: PUSH
 365: LD_INT 5
 367: PUSH
 368: EMPTY
 369: LIST
 370: LIST
 371: LIST
 372: PUSH
 373: LD_INT 31
 375: PUSH
 376: LD_INT 31
 378: PUSH
 379: LD_INT 2
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: LIST
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: PUSH
 393: LD_INT 170
 395: PUSH
 396: LD_INT 79
 398: PUSH
 399: LD_INT 5
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 139
 409: PUSH
 410: LD_INT 42
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: PUSH
 421: LD_INT 171
 423: PUSH
 424: LD_INT 58
 426: PUSH
 427: LD_INT 4
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 149
 437: PUSH
 438: LD_INT 25
 440: PUSH
 441: LD_INT 3
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 114
 457: PUSH
 458: LD_INT 163
 460: PUSH
 461: LD_INT 5
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 114
 471: PUSH
 472: LD_INT 138
 474: PUSH
 475: LD_INT 4
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: PUSH
 483: LD_INT 97
 485: PUSH
 486: LD_INT 116
 488: PUSH
 489: LD_INT 3
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PUSH
 497: LD_INT 81
 499: PUSH
 500: LD_INT 135
 502: PUSH
 503: LD_INT 1
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 179
 519: PUSH
 520: LD_INT 116
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 175
 533: PUSH
 534: LD_INT 145
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 217
 547: PUSH
 548: LD_INT 149
 550: PUSH
 551: LD_INT 4
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 202
 561: PUSH
 562: LD_INT 158
 564: PUSH
 565: LD_INT 0
 567: PUSH
 568: EMPTY
 569: LIST
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: ST_TO_ADDR
// for i in normal_oil_deposits_locations do
 585: LD_ADDR_VAR 0 2
 589: PUSH
 590: LD_EXP 40
 594: PUSH
 595: FOR_IN
 596: IFFALSE 625
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 598: LD_VAR 0 2
 602: PUSH
 603: LD_INT 1
 605: ARRAY
 606: PPUSH
 607: LD_VAR 0 2
 611: PUSH
 612: LD_INT 2
 614: ARRAY
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: CALL_OW 62
 623: GO 595
 625: POP
 626: POP
// if def_extra_oil_deposits then
 627: LD_EXP 6
 631: IFFALSE 675
// for i in extra_oil_deposits_locations do
 633: LD_ADDR_VAR 0 2
 637: PUSH
 638: LD_EXP 38
 642: PUSH
 643: FOR_IN
 644: IFFALSE 673
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 646: LD_VAR 0 2
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: LD_VAR 0 2
 659: PUSH
 660: LD_INT 2
 662: ARRAY
 663: PPUSH
 664: LD_INT 2
 666: PPUSH
 667: CALL_OW 62
 671: GO 643
 673: POP
 674: POP
// if def_extra_sib_deposits > 0 then
 675: LD_EXP 7
 679: PUSH
 680: LD_INT 0
 682: GREATER
 683: IFFALSE 779
// begin for i in normal_sib_deposits_locations do
 685: LD_ADDR_VAR 0 2
 689: PUSH
 690: LD_EXP 41
 694: PUSH
 695: FOR_IN
 696: IFFALSE 725
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 698: LD_VAR 0 2
 702: PUSH
 703: LD_INT 1
 705: ARRAY
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 2
 714: ARRAY
 715: PPUSH
 716: LD_INT 3
 718: PPUSH
 719: CALL_OW 62
 723: GO 695
 725: POP
 726: POP
// if def_extra_sib_deposits = 2 then
 727: LD_EXP 7
 731: PUSH
 732: LD_INT 2
 734: EQUAL
 735: IFFALSE 779
// for i in extra_sib_deposits_locations do
 737: LD_ADDR_VAR 0 2
 741: PUSH
 742: LD_EXP 39
 746: PUSH
 747: FOR_IN
 748: IFFALSE 777
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 750: LD_VAR 0 2
 754: PUSH
 755: LD_INT 1
 757: ARRAY
 758: PPUSH
 759: LD_VAR 0 2
 763: PUSH
 764: LD_INT 2
 766: ARRAY
 767: PPUSH
 768: LD_INT 3
 770: PPUSH
 771: CALL_OW 62
 775: GO 747
 777: POP
 778: POP
// end ; end ;
 779: LD_VAR 0 1
 783: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 784: LD_INT 0
 786: PPUSH
 787: PPUSH
 788: PPUSH
 789: PPUSH
 790: PPUSH
 791: PPUSH
 792: PPUSH
 793: PPUSH
 794: PPUSH
// if MultiPlayer then
 795: LD_OWVAR 4
 799: IFFALSE 863
// begin Game_Type = mp_game_type ;
 801: LD_ADDR_EXP 16
 805: PUSH
 806: LD_OWVAR 6
 810: ST_TO_ADDR
// Your_Side = mp_player_side ;
 811: LD_ADDR_OWVAR 2
 815: PUSH
 816: LD_OWVAR 7
 820: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 821: LD_ADDR_EXP 32
 825: PUSH
 826: LD_OWVAR 17
 830: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 831: LD_ADDR_EXP 30
 835: PUSH
 836: LD_OWVAR 15
 840: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 841: LD_ADDR_EXP 33
 845: PUSH
 846: LD_OWVAR 16
 850: ST_TO_ADDR
// Teams = mp_teams ;
 851: LD_ADDR_EXP 31
 855: PUSH
 856: LD_OWVAR 12
 860: ST_TO_ADDR
// end else
 861: GO 1064
// begin Game_Type = 2 ;
 863: LD_ADDR_EXP 16
 867: PUSH
 868: LD_INT 2
 870: ST_TO_ADDR
// Your_Side = 4 ;
 871: LD_ADDR_OWVAR 2
 875: PUSH
 876: LD_INT 4
 878: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 879: LD_ADDR_EXP 32
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: LD_INT 3
 889: PUSH
 890: LD_INT 0
 892: PUSH
 893: LD_INT 1
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 2
 901: PUSH
 902: LD_INT 4
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 918: LD_ADDR_EXP 30
 922: PUSH
 923: LD_INT 0
 925: PUSH
 926: LD_INT 1
 928: PUSH
 929: LD_INT 0
 931: PUSH
 932: LD_INT 2
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 2
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 957: LD_ADDR_EXP 33
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 3
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: LD_INT 2
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: LD_INT 1
 979: PUSH
 980: LD_INT 3
 982: PUSH
 983: LD_INT 0
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 996: LD_ADDR_EXP 43
1000: PUSH
1001: LD_INT 0
1003: PUSH
1004: LD_INT 0
1006: PUSH
1007: LD_INT 0
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: LD_INT 0
1015: PUSH
1016: LD_INT 0
1018: PUSH
1019: LD_INT 0
1021: PUSH
1022: LD_INT 0
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 4 , 7 ] ] ;
1035: LD_ADDR_EXP 31
1039: PUSH
1040: LD_INT 2
1042: PUSH
1043: LD_INT 6
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: PUSH
1050: LD_INT 4
1052: PUSH
1053: LD_INT 7
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: ST_TO_ADDR
// end ; if MultiPlayer then
1064: LD_OWVAR 4
1068: IFFALSE 1267
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1070: LD_ADDR_EXP 1
1074: PUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 426
1082: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1083: LD_ADDR_EXP 2
1087: PUSH
1088: LD_INT 1
1090: PPUSH
1091: CALL_OW 426
1095: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1096: LD_ADDR_EXP 3
1100: PUSH
1101: LD_INT 2
1103: PPUSH
1104: CALL_OW 426
1108: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1109: LD_ADDR_EXP 4
1113: PUSH
1114: LD_INT 3
1116: PPUSH
1117: CALL_OW 426
1121: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1122: LD_ADDR_EXP 5
1126: PUSH
1127: LD_INT 4
1129: PPUSH
1130: CALL_OW 426
1134: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1135: LD_ADDR_EXP 6
1139: PUSH
1140: LD_INT 5
1142: PPUSH
1143: CALL_OW 426
1147: ST_TO_ADDR
// def_extra_sib_deposits = GetMultiplayerSetting ( 6 ) ;
1148: LD_ADDR_EXP 7
1152: PUSH
1153: LD_INT 6
1155: PPUSH
1156: CALL_OW 426
1160: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1161: LD_ADDR_EXP 8
1165: PUSH
1166: LD_INT 10
1168: PPUSH
1169: CALL_OW 426
1173: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1174: LD_ADDR_EXP 9
1178: PUSH
1179: LD_INT 11
1181: PPUSH
1182: CALL_OW 426
1186: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1187: LD_ADDR_EXP 10
1191: PUSH
1192: LD_INT 12
1194: PPUSH
1195: CALL_OW 426
1199: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1200: LD_ADDR_EXP 11
1204: PUSH
1205: LD_INT 13
1207: PPUSH
1208: CALL_OW 426
1212: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1213: LD_ADDR_EXP 12
1217: PUSH
1218: LD_INT 14
1220: PPUSH
1221: CALL_OW 426
1225: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1226: LD_ADDR_EXP 13
1230: PUSH
1231: LD_INT 15
1233: PPUSH
1234: CALL_OW 426
1238: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
1239: LD_ADDR_EXP 14
1243: PUSH
1244: LD_INT 20
1246: PPUSH
1247: CALL_OW 426
1251: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
1252: LD_ADDR_VAR 0 9
1256: PUSH
1257: LD_INT 22
1259: PPUSH
1260: CALL_OW 426
1264: ST_TO_ADDR
// end else
1265: GO 1391
// begin randomize ;
1267: CALL_OW 10
// def_base_level = 2 ;
1271: LD_ADDR_EXP 1
1275: PUSH
1276: LD_INT 2
1278: ST_TO_ADDR
// def_amount_of_people = 1 ;
1279: LD_ADDR_EXP 2
1283: PUSH
1284: LD_INT 1
1286: ST_TO_ADDR
// def_skill_level = 1 ;
1287: LD_ADDR_EXP 3
1291: PUSH
1292: LD_INT 1
1294: ST_TO_ADDR
// def_starting_resources = 2 ;
1295: LD_ADDR_EXP 4
1299: PUSH
1300: LD_INT 2
1302: ST_TO_ADDR
// def_shipments_density = 1 ;
1303: LD_ADDR_EXP 5
1307: PUSH
1308: LD_INT 1
1310: ST_TO_ADDR
// def_extra_oil_deposits = 1 ;
1311: LD_ADDR_EXP 6
1315: PUSH
1316: LD_INT 1
1318: ST_TO_ADDR
// def_extra_sib_deposits = 1 ;
1319: LD_ADDR_EXP 7
1323: PUSH
1324: LD_INT 1
1326: ST_TO_ADDR
// def_shared_vision = 1 ;
1327: LD_ADDR_EXP 8
1331: PUSH
1332: LD_INT 1
1334: ST_TO_ADDR
// def_morale_flags = 2 ;
1335: LD_ADDR_EXP 9
1339: PUSH
1340: LD_INT 2
1342: ST_TO_ADDR
// def_siberite_detection = 1 ;
1343: LD_ADDR_EXP 10
1347: PUSH
1348: LD_INT 1
1350: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1351: LD_ADDR_EXP 11
1355: PUSH
1356: LD_INT 3
1358: ST_TO_ADDR
// def_people_respawning = 2 ;
1359: LD_ADDR_EXP 12
1363: PUSH
1364: LD_INT 2
1366: ST_TO_ADDR
// def_siberite_bomb = 2 ;
1367: LD_ADDR_EXP 13
1371: PUSH
1372: LD_INT 2
1374: ST_TO_ADDR
// def_builduptime = 1 ;
1375: LD_ADDR_EXP 14
1379: PUSH
1380: LD_INT 1
1382: ST_TO_ADDR
// tech_level = 4 ;
1383: LD_ADDR_VAR 0 9
1387: PUSH
1388: LD_INT 4
1390: ST_TO_ADDR
// end ; if isSGUI then
1391: LD_OWVAR 83
1395: IFFALSE 1403
// setMpTechs ( ) else
1397: CALL 8596 0 0
1401: GO 1416
// SetMpTechLevel ( tech_level + 1 ) ;
1403: LD_VAR 0 9
1407: PUSH
1408: LD_INT 1
1410: PLUS
1411: PPUSH
1412: CALL 8743 0 1
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1416: LD_ADDR_EXP 17
1420: PUSH
1421: LD_INT 0
1423: PUSH
1424: LD_INT 1
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_EXP 1
1443: PUSH
1444: LD_INT 1
1446: PLUS
1447: ARRAY
1448: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1449: LD_ADDR_EXP 18
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 2
1462: PUSH
1463: LD_INT 4
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_EXP 1
1476: PUSH
1477: LD_INT 1
1479: PLUS
1480: ARRAY
1481: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1482: LD_ADDR_EXP 20
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: LD_INT 3
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: LD_INT 5
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: PUSH
1505: LD_EXP 3
1509: PUSH
1510: LD_INT 1
1512: PLUS
1513: ARRAY
1514: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1515: LD_ADDR_EXP 22
1519: PUSH
1520: LD_INT 0
1522: PUSH
1523: LD_INT 0
1525: PUSH
1526: LD_INT 0
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: PUSH
1534: LD_INT 30
1536: PUSH
1537: LD_INT 0
1539: PUSH
1540: LD_INT 0
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 50
1550: PUSH
1551: LD_INT 20
1553: PUSH
1554: LD_INT 0
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: LIST
1561: PUSH
1562: LD_INT 80
1564: PUSH
1565: LD_INT 40
1567: PUSH
1568: LD_INT 20
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: PUSH
1582: LD_EXP 4
1586: PUSH
1587: LD_INT 1
1589: PLUS
1590: ARRAY
1591: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1592: LD_ADDR_EXP 21
1596: PUSH
1597: LD_INT 10
1599: PUSH
1600: EMPTY
1601: LIST
1602: PUSH
1603: LD_INT 7
1605: PUSH
1606: LD_INT 14
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: PUSH
1613: LD_INT 6
1615: PUSH
1616: LD_INT 12
1618: PUSH
1619: LD_INT 18
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: LD_INT 10
1632: PUSH
1633: LD_INT 15
1635: PUSH
1636: LD_INT 20
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: PUSH
1651: LD_EXP 4
1655: PUSH
1656: LD_INT 1
1658: PLUS
1659: ARRAY
1660: ST_TO_ADDR
// number_of_people = def_amount_of_people + 4 ;
1661: LD_ADDR_EXP 19
1665: PUSH
1666: LD_EXP 2
1670: PUSH
1671: LD_INT 4
1673: PLUS
1674: ST_TO_ADDR
// shipments_density = 20 + ( def_shipments_density ) * 28 ;
1675: LD_ADDR_EXP 23
1679: PUSH
1680: LD_INT 20
1682: PUSH
1683: LD_EXP 5
1687: PUSH
1688: LD_INT 28
1690: MUL
1691: PLUS
1692: ST_TO_ADDR
// amount_of_apemen = [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1693: LD_ADDR_EXP 27
1697: PUSH
1698: LD_INT 0
1700: PUSH
1701: LD_INT 3
1703: PUSH
1704: LD_INT 6
1706: PUSH
1707: LD_INT 9
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: PUSH
1716: LD_EXP 11
1720: PUSH
1721: LD_INT 1
1723: PLUS
1724: ARRAY
1725: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1726: LD_ADDR_EXP 25
1730: PUSH
1731: LD_INT 0
1733: PUSH
1734: LD_INT 8400
1736: PUSH
1737: LD_INT 1750
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_EXP 12
1749: PUSH
1750: LD_INT 1
1752: PLUS
1753: ARRAY
1754: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1755: LD_ADDR_EXP 26
1759: PUSH
1760: LD_INT 0
1762: PUSH
1763: LD_INT 21000
1765: PUSH
1766: LD_INT 4200
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: PUSH
1774: LD_EXP 12
1778: PUSH
1779: LD_INT 1
1781: PLUS
1782: ARRAY
1783: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1784: LD_ADDR_EXP 24
1788: PUSH
1789: LD_INT 1
1791: NEG
1792: PUSH
1793: LD_INT 350
1795: PUSH
1796: LD_INT 700
1798: PUSH
1799: LD_INT 1400
1801: PUSH
1802: LD_INT 0
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: PUSH
1812: LD_EXP 9
1816: PUSH
1817: LD_INT 1
1819: PLUS
1820: ARRAY
1821: ST_TO_ADDR
// battle_flags_id = [ ] ;
1822: LD_ADDR_EXP 42
1826: PUSH
1827: EMPTY
1828: ST_TO_ADDR
// siberite_bomb_Delay = [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1829: LD_ADDR_EXP 28
1833: PUSH
1834: LD_INT 0
1836: PUSH
1837: LD_INT 1
1839: PUSH
1840: LD_INT 63000
1842: PUSH
1843: LD_INT 126000
1845: PUSH
1846: LD_INT 189000
1848: PUSH
1849: LD_INT 252000
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: PUSH
1860: LD_EXP 13
1864: PUSH
1865: LD_INT 1
1867: PLUS
1868: ARRAY
1869: ST_TO_ADDR
// end ;
1870: LD_VAR 0 1
1874: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1875: LD_INT 0
1877: PPUSH
1878: PPUSH
1879: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1880: LD_ADDR_EXP 34
1884: PUSH
1885: LD_EXP 30
1889: PUSH
1890: LD_INT 0
1892: PUSH
1893: EMPTY
1894: LIST
1895: DIFF
1896: PUSH
1897: LD_INT 1
1899: GREATER
1900: ST_TO_ADDR
// if not Team_Game then
1901: LD_EXP 34
1905: NOT
1906: IFFALSE 2004
// begin for i = 1 to 8 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 8
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2000
// for j = 1 to 8 do
1924: LD_ADDR_VAR 0 3
1928: PUSH
1929: DOUBLE
1930: LD_INT 1
1932: DEC
1933: ST_TO_ADDR
1934: LD_INT 8
1936: PUSH
1937: FOR_TO
1938: IFFALSE 1996
// if i <> j then
1940: LD_VAR 0 2
1944: PUSH
1945: LD_VAR 0 3
1949: NONEQUAL
1950: IFFALSE 1974
// SetAttitude ( i , j , att_neutral , true ) else
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 3
1961: PPUSH
1962: LD_INT 0
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: CALL_OW 80
1972: GO 1994
// SetAttitude ( i , j , att_friend , true ) ;
1974: LD_VAR 0 2
1978: PPUSH
1979: LD_VAR 0 3
1983: PPUSH
1984: LD_INT 1
1986: PPUSH
1987: LD_INT 1
1989: PPUSH
1990: CALL_OW 80
1994: GO 1937
1996: POP
1997: POP
1998: GO 1921
2000: POP
2001: POP
// end else
2002: GO 2179
// begin if def_shared_vision then
2004: LD_EXP 8
2008: IFFALSE 2073
// begin for i in Teams do
2010: LD_ADDR_VAR 0 2
2014: PUSH
2015: LD_EXP 31
2019: PUSH
2020: FOR_IN
2021: IFFALSE 2071
// for j = 2 to i do
2023: LD_ADDR_VAR 0 3
2027: PUSH
2028: DOUBLE
2029: LD_INT 2
2031: DEC
2032: ST_TO_ADDR
2033: LD_VAR 0 2
2037: PUSH
2038: FOR_TO
2039: IFFALSE 2067
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2041: LD_VAR 0 2
2045: PUSH
2046: LD_VAR 0 3
2050: ARRAY
2051: PPUSH
2052: LD_VAR 0 2
2056: PUSH
2057: LD_INT 1
2059: ARRAY
2060: PPUSH
2061: CALL_OW 343
2065: GO 2038
2067: POP
2068: POP
2069: GO 2020
2071: POP
2072: POP
// end ; for i = 1 to 8 do
2073: LD_ADDR_VAR 0 2
2077: PUSH
2078: DOUBLE
2079: LD_INT 1
2081: DEC
2082: ST_TO_ADDR
2083: LD_INT 8
2085: PUSH
2086: FOR_TO
2087: IFFALSE 2177
// for j = 1 to 8 do
2089: LD_ADDR_VAR 0 3
2093: PUSH
2094: DOUBLE
2095: LD_INT 1
2097: DEC
2098: ST_TO_ADDR
2099: LD_INT 8
2101: PUSH
2102: FOR_TO
2103: IFFALSE 2173
// if Side_Teams [ i ] = Side_Teams [ j ] then
2105: LD_EXP 30
2109: PUSH
2110: LD_VAR 0 2
2114: ARRAY
2115: PUSH
2116: LD_EXP 30
2120: PUSH
2121: LD_VAR 0 3
2125: ARRAY
2126: EQUAL
2127: IFFALSE 2151
// SetAttitude ( i , j , att_friend , true ) else
2129: LD_VAR 0 2
2133: PPUSH
2134: LD_VAR 0 3
2138: PPUSH
2139: LD_INT 1
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: CALL_OW 80
2149: GO 2171
// SetAttitude ( i , j , att_enemy , true ) ;
2151: LD_VAR 0 2
2155: PPUSH
2156: LD_VAR 0 3
2160: PPUSH
2161: LD_INT 2
2163: PPUSH
2164: LD_INT 1
2166: PPUSH
2167: CALL_OW 80
2171: GO 2102
2173: POP
2174: POP
2175: GO 2086
2177: POP
2178: POP
// end ; end ;
2179: LD_VAR 0 1
2183: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2184: LD_INT 0
2186: PPUSH
2187: PPUSH
2188: PPUSH
2189: PPUSH
// result := [ ] ;
2190: LD_ADDR_VAR 0 7
2194: PUSH
2195: EMPTY
2196: ST_TO_ADDR
// for i := 1 to count do
2197: LD_ADDR_VAR 0 8
2201: PUSH
2202: DOUBLE
2203: LD_INT 1
2205: DEC
2206: ST_TO_ADDR
2207: LD_VAR 0 1
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2631
// begin uc_direction := Rand ( 0 , 5 ) ;
2215: LD_ADDR_OWVAR 24
2219: PUSH
2220: LD_INT 0
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: CALL_OW 12
2230: ST_TO_ADDR
// if commander then
2231: LD_LOC 1
2235: IFFALSE 2344
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2237: LD_ADDR_OWVAR 26
2241: PUSH
2242: LD_OWVAR 19
2246: PUSH
2247: LD_OWVAR 20
2251: ARRAY
2252: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2253: LD_INT 1
2255: PPUSH
2256: LD_INT 2
2258: PPUSH
2259: CALL_OW 12
2263: PPUSH
2264: LD_VAR 0 2
2268: PPUSH
2269: LD_EXP 20
2273: PUSH
2274: LD_INT 2
2276: PLUS
2277: PPUSH
2278: CALL_OW 380
// hc_importance := 105 ;
2282: LD_ADDR_OWVAR 32
2286: PUSH
2287: LD_INT 105
2289: ST_TO_ADDR
// commander := false ;
2290: LD_ADDR_LOC 1
2294: PUSH
2295: LD_INT 0
2297: ST_TO_ADDR
// if Multiplayer then
2298: LD_OWVAR 4
2302: IFFALSE 2342
// begin hc_gallery := MULTIAVATARS ;
2304: LD_ADDR_OWVAR 33
2308: PUSH
2309: LD_STRING MULTIAVATARS
2311: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2312: LD_ADDR_OWVAR 34
2316: PUSH
2317: LD_OWVAR 20
2321: PPUSH
2322: CALL_OW 525
2326: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2327: LD_ADDR_OWVAR 27
2331: PUSH
2332: LD_OWVAR 20
2336: PPUSH
2337: CALL_OW 526
2341: ST_TO_ADDR
// end ; end else
2342: GO 2407
// begin hc_name :=  ;
2344: LD_ADDR_OWVAR 26
2348: PUSH
2349: LD_STRING 
2351: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2352: LD_INT 1
2354: PPUSH
2355: LD_INT 2
2357: PPUSH
2358: CALL_OW 12
2362: PPUSH
2363: LD_VAR 0 2
2367: PPUSH
2368: LD_EXP 20
2372: PPUSH
2373: CALL_OW 380
// hc_importance := 0 ;
2377: LD_ADDR_OWVAR 32
2381: PUSH
2382: LD_INT 0
2384: ST_TO_ADDR
// if Multiplayer then
2385: LD_OWVAR 4
2389: IFFALSE 2407
// begin hc_gallery :=  ;
2391: LD_ADDR_OWVAR 33
2395: PUSH
2396: LD_STRING 
2398: ST_TO_ADDR
// hc_face_number := 0 ;
2399: LD_ADDR_OWVAR 34
2403: PUSH
2404: LD_INT 0
2406: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2407: LD_ADDR_VAR 0 10
2411: PUSH
2412: CALL_OW 44
2416: ST_TO_ADDR
// if global_defined then
2417: LD_LOC 3
2421: IFFALSE 2561
// begin if ( cl = class_soldier ) then
2423: LD_VAR 0 2
2427: PUSH
2428: LD_INT 1
2430: EQUAL
2431: IFFALSE 2451
// j := i + soldiers_created else
2433: LD_ADDR_VAR 0 9
2437: PUSH
2438: LD_VAR 0 8
2442: PUSH
2443: LD_LOC 4
2447: PLUS
2448: ST_TO_ADDR
2449: GO 2461
// j := i ;
2451: LD_ADDR_VAR 0 9
2455: PUSH
2456: LD_VAR 0 8
2460: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2461: LD_LOC 2
2465: PUSH
2466: LD_VAR 0 2
2470: ARRAY
2471: PUSH
2472: LD_VAR 0 9
2476: ARRAY
2477: PPUSH
2478: LD_VAR 0 10
2482: PPUSH
2483: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2487: LD_VAR 0 10
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: LD_LOC 2
2499: PUSH
2500: LD_VAR 0 2
2504: ARRAY
2505: PUSH
2506: LD_VAR 0 9
2510: ARRAY
2511: PPUSH
2512: LD_INT 2
2514: PPUSH
2515: CALL_OW 260
2519: PPUSH
2520: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2524: LD_VAR 0 10
2528: PPUSH
2529: LD_INT 1
2531: PPUSH
2532: LD_LOC 2
2536: PUSH
2537: LD_VAR 0 2
2541: ARRAY
2542: PUSH
2543: LD_VAR 0 9
2547: ARRAY
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: CALL_OW 260
2556: PPUSH
2557: CALL_OW 239
// end ; if building then
2561: LD_VAR 0 6
2565: IFFALSE 2583
// PlaceHumanInUnit ( un , building ) else
2567: LD_VAR 0 10
2571: PPUSH
2572: LD_VAR 0 6
2576: PPUSH
2577: CALL_OW 52
2581: GO 2610
// PlaceUnitXYR ( un , x , y , r , false ) ;
2583: LD_VAR 0 10
2587: PPUSH
2588: LD_VAR 0 3
2592: PPUSH
2593: LD_VAR 0 4
2597: PPUSH
2598: LD_VAR 0 5
2602: PPUSH
2603: LD_INT 0
2605: PPUSH
2606: CALL_OW 50
// result := result ^ [ un ] ;
2610: LD_ADDR_VAR 0 7
2614: PUSH
2615: LD_VAR 0 7
2619: PUSH
2620: LD_VAR 0 10
2624: PUSH
2625: EMPTY
2626: LIST
2627: ADD
2628: ST_TO_ADDR
// end ;
2629: GO 2212
2631: POP
2632: POP
// if not global_defined then
2633: LD_LOC 3
2637: NOT
2638: IFFALSE 2716
// if ( global_units >= cl ) then
2640: LD_LOC 2
2644: PUSH
2645: LD_VAR 0 2
2649: GREATEREQUAL
2650: IFFALSE 2691
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2652: LD_ADDR_LOC 2
2656: PUSH
2657: LD_LOC 2
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: LD_LOC 2
2671: PUSH
2672: LD_VAR 0 2
2676: ARRAY
2677: PUSH
2678: LD_VAR 0 7
2682: ADD
2683: PPUSH
2684: CALL_OW 1
2688: ST_TO_ADDR
2689: GO 2716
// global_units := Replace ( global_units , cl , result ) ;
2691: LD_ADDR_LOC 2
2695: PUSH
2696: LD_LOC 2
2700: PPUSH
2701: LD_VAR 0 2
2705: PPUSH
2706: LD_VAR 0 7
2710: PPUSH
2711: CALL_OW 1
2715: ST_TO_ADDR
// end ;
2716: LD_VAR 0 7
2720: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2721: LD_INT 0
2723: PPUSH
2724: PPUSH
2725: PPUSH
2726: PPUSH
2727: PPUSH
2728: PPUSH
2729: PPUSH
2730: PPUSH
2731: PPUSH
// pos := Side_Positions [ side ] ;
2732: LD_ADDR_VAR 0 3
2736: PUSH
2737: LD_EXP 32
2741: PUSH
2742: LD_VAR 0 1
2746: ARRAY
2747: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2748: LD_ADDR_OWVAR 21
2752: PUSH
2753: LD_EXP 33
2757: PUSH
2758: LD_VAR 0 1
2762: ARRAY
2763: ST_TO_ADDR
// uc_side := side ;
2764: LD_ADDR_OWVAR 20
2768: PUSH
2769: LD_VAR 0 1
2773: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2774: LD_ADDR_VAR 0 4
2778: PUSH
2779: LD_EXP 35
2783: PUSH
2784: LD_VAR 0 3
2788: ARRAY
2789: PUSH
2790: LD_INT 1
2792: ARRAY
2793: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2794: LD_ADDR_VAR 0 5
2798: PUSH
2799: LD_EXP 35
2803: PUSH
2804: LD_VAR 0 3
2808: ARRAY
2809: PUSH
2810: LD_INT 2
2812: ARRAY
2813: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2814: LD_ADDR_VAR 0 6
2818: PUSH
2819: LD_EXP 35
2823: PUSH
2824: LD_VAR 0 3
2828: ARRAY
2829: PUSH
2830: LD_INT 3
2832: ARRAY
2833: ST_TO_ADDR
// if is_depot then
2834: LD_EXP 17
2838: IFFALSE 2971
// begin bc_type = b_depot ;
2840: LD_ADDR_OWVAR 42
2844: PUSH
2845: LD_INT 0
2847: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2848: LD_ADDR_VAR 0 10
2852: PUSH
2853: LD_VAR 0 4
2857: PPUSH
2858: LD_VAR 0 5
2862: PPUSH
2863: LD_VAR 0 6
2867: PPUSH
2868: CALL_OW 47
2872: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2873: LD_VAR 0 10
2877: PPUSH
2878: LD_STRING @
2880: PUSH
2881: LD_VAR 0 1
2885: STR
2886: PPUSH
2887: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2891: LD_VAR 0 10
2895: PPUSH
2896: CALL_OW 274
2900: PPUSH
2901: LD_INT 1
2903: PPUSH
2904: LD_EXP 22
2908: PUSH
2909: LD_INT 1
2911: ARRAY
2912: PPUSH
2913: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2917: LD_VAR 0 10
2921: PPUSH
2922: CALL_OW 274
2926: PPUSH
2927: LD_INT 2
2929: PPUSH
2930: LD_EXP 22
2934: PUSH
2935: LD_INT 2
2937: ARRAY
2938: PPUSH
2939: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2943: LD_VAR 0 10
2947: PPUSH
2948: CALL_OW 274
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_EXP 22
2960: PUSH
2961: LD_INT 3
2963: ARRAY
2964: PPUSH
2965: CALL_OW 277
// end else
2969: GO 3115
// begin for i := 1 to 3 do
2971: LD_ADDR_VAR 0 7
2975: PUSH
2976: DOUBLE
2977: LD_INT 1
2979: DEC
2980: ST_TO_ADDR
2981: LD_INT 3
2983: PUSH
2984: FOR_TO
2985: IFFALSE 3113
// begin r := starting_resources [ i ] ;
2987: LD_ADDR_VAR 0 8
2991: PUSH
2992: LD_EXP 22
2996: PUSH
2997: LD_VAR 0 7
3001: ARRAY
3002: ST_TO_ADDR
// while r >= 10 do
3003: LD_VAR 0 8
3007: PUSH
3008: LD_INT 10
3010: GREATEREQUAL
3011: IFFALSE 3111
// if r > 50 then
3013: LD_VAR 0 8
3017: PUSH
3018: LD_INT 50
3020: GREATER
3021: IFFALSE 3067
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: LD_VAR 0 4
3035: PPUSH
3036: LD_VAR 0 5
3040: PPUSH
3041: LD_INT 4
3043: PPUSH
3044: LD_INT 0
3046: PPUSH
3047: CALL_OW 60
// r := r - 50 ;
3051: LD_ADDR_VAR 0 8
3055: PUSH
3056: LD_VAR 0 8
3060: PUSH
3061: LD_INT 50
3063: MINUS
3064: ST_TO_ADDR
// end else
3065: GO 3109
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3067: LD_VAR 0 7
3071: PPUSH
3072: LD_VAR 0 8
3076: PUSH
3077: LD_INT 10
3079: DIV
3080: PPUSH
3081: LD_VAR 0 4
3085: PPUSH
3086: LD_VAR 0 5
3090: PPUSH
3091: LD_INT 4
3093: PPUSH
3094: LD_INT 0
3096: PPUSH
3097: CALL_OW 60
// r := 0 ;
3101: LD_ADDR_VAR 0 8
3105: PUSH
3106: LD_INT 0
3108: ST_TO_ADDR
// end ;
3109: GO 3003
// end ;
3111: GO 2984
3113: POP
3114: POP
// end ; for r in starting_crates do
3115: LD_ADDR_VAR 0 8
3119: PUSH
3120: LD_EXP 21
3124: PUSH
3125: FOR_IN
3126: IFFALSE 3158
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3128: LD_INT 1
3130: PPUSH
3131: LD_INT 5
3133: PPUSH
3134: LD_VAR 0 4
3138: PPUSH
3139: LD_VAR 0 5
3143: PPUSH
3144: LD_VAR 0 8
3148: PPUSH
3149: LD_INT 0
3151: PPUSH
3152: CALL_OW 60
3156: GO 3125
3158: POP
3159: POP
// if def_morale_flags then
3160: LD_EXP 9
3164: IFFALSE 3303
// begin x := start_def [ pos ] [ 1 ] ;
3166: LD_ADDR_VAR 0 4
3170: PUSH
3171: LD_EXP 37
3175: PUSH
3176: LD_VAR 0 3
3180: ARRAY
3181: PUSH
3182: LD_INT 1
3184: ARRAY
3185: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3186: LD_ADDR_VAR 0 5
3190: PUSH
3191: LD_EXP 37
3195: PUSH
3196: LD_VAR 0 3
3200: ARRAY
3201: PUSH
3202: LD_INT 2
3204: ARRAY
3205: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3206: LD_VAR 0 4
3210: PPUSH
3211: LD_VAR 0 5
3215: PPUSH
3216: LD_INT 12
3218: PPUSH
3219: LD_INT 2
3221: PPUSH
3222: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3226: LD_ADDR_EXP 42
3230: PUSH
3231: LD_EXP 42
3235: PUSH
3236: LD_VAR 0 1
3240: PPUSH
3241: LD_VAR 0 4
3245: PPUSH
3246: LD_VAR 0 5
3250: PPUSH
3251: LD_INT 1
3253: PUSH
3254: LD_INT 100
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 2
3263: PUSH
3264: LD_INT 50
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 3
3273: PUSH
3274: LD_INT 20
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 20
3283: PUSH
3284: LD_INT 100
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: PPUSH
3297: CALL_OW 418
3301: ADD
3302: ST_TO_ADDR
// end ; commander := true ;
3303: LD_ADDR_LOC 1
3307: PUSH
3308: LD_INT 1
3310: ST_TO_ADDR
// soldiers_created := 0 ;
3311: LD_ADDR_LOC 4
3315: PUSH
3316: LD_INT 0
3318: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3319: LD_ADDR_VAR 0 7
3323: PUSH
3324: DOUBLE
3325: LD_INT 1
3327: DEC
3328: ST_TO_ADDR
3329: LD_EXP 18
3333: PUSH
3334: FOR_TO
3335: IFFALSE 3488
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3337: LD_ADDR_VAR 0 4
3341: PUSH
3342: LD_EXP 36
3346: PUSH
3347: LD_VAR 0 3
3351: ARRAY
3352: PUSH
3353: LD_VAR 0 7
3357: ARRAY
3358: PUSH
3359: LD_INT 1
3361: ARRAY
3362: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3363: LD_ADDR_VAR 0 5
3367: PUSH
3368: LD_EXP 36
3372: PUSH
3373: LD_VAR 0 3
3377: ARRAY
3378: PUSH
3379: LD_VAR 0 7
3383: ARRAY
3384: PUSH
3385: LD_INT 2
3387: ARRAY
3388: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3389: LD_ADDR_VAR 0 6
3393: PUSH
3394: LD_EXP 36
3398: PUSH
3399: LD_VAR 0 3
3403: ARRAY
3404: PUSH
3405: LD_VAR 0 7
3409: ARRAY
3410: PUSH
3411: LD_INT 3
3413: ARRAY
3414: ST_TO_ADDR
// bc_type := b_breastwork ;
3415: LD_ADDR_OWVAR 42
3419: PUSH
3420: LD_INT 31
3422: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3423: LD_ADDR_VAR 0 9
3427: PUSH
3428: LD_VAR 0 4
3432: PPUSH
3433: LD_VAR 0 5
3437: PPUSH
3438: LD_VAR 0 6
3442: PPUSH
3443: CALL_OW 47
3447: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3448: LD_INT 1
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 0
3459: PPUSH
3460: LD_INT 0
3462: PPUSH
3463: LD_VAR 0 9
3467: PPUSH
3468: CALL 2184 0 6
// soldiers_created := soldiers_created + 1 ;
3472: LD_ADDR_LOC 4
3476: PUSH
3477: LD_LOC 4
3481: PUSH
3482: LD_INT 1
3484: PLUS
3485: ST_TO_ADDR
// end ;
3486: GO 3334
3488: POP
3489: POP
// x := start_def [ pos ] [ 1 ] ;
3490: LD_ADDR_VAR 0 4
3494: PUSH
3495: LD_EXP 37
3499: PUSH
3500: LD_VAR 0 3
3504: ARRAY
3505: PUSH
3506: LD_INT 1
3508: ARRAY
3509: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3510: LD_ADDR_VAR 0 5
3514: PUSH
3515: LD_EXP 37
3519: PUSH
3520: LD_VAR 0 3
3524: ARRAY
3525: PUSH
3526: LD_INT 2
3528: ARRAY
3529: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3530: LD_LOC 8
3534: PUSH
3535: LD_EXP 18
3539: MINUS
3540: PPUSH
3541: LD_INT 1
3543: PPUSH
3544: LD_VAR 0 4
3548: PPUSH
3549: LD_VAR 0 5
3553: PPUSH
3554: LD_INT 5
3556: PPUSH
3557: LD_INT 0
3559: PPUSH
3560: CALL 2184 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3564: LD_LOC 5
3568: PPUSH
3569: LD_INT 2
3571: PPUSH
3572: LD_VAR 0 4
3576: PPUSH
3577: LD_VAR 0 5
3581: PPUSH
3582: LD_INT 5
3584: PPUSH
3585: LD_INT 0
3587: PPUSH
3588: CALL 2184 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3592: LD_LOC 7
3596: PPUSH
3597: LD_INT 3
3599: PPUSH
3600: LD_VAR 0 4
3604: PPUSH
3605: LD_VAR 0 5
3609: PPUSH
3610: LD_INT 5
3612: PPUSH
3613: LD_INT 0
3615: PPUSH
3616: CALL 2184 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3620: LD_LOC 6
3624: PPUSH
3625: LD_INT 4
3627: PPUSH
3628: LD_VAR 0 4
3632: PPUSH
3633: LD_VAR 0 5
3637: PPUSH
3638: LD_INT 5
3640: PPUSH
3641: LD_INT 0
3643: PPUSH
3644: CALL 2184 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3648: LD_EXP 10
3652: PUSH
3653: LD_INT 20
3655: PPUSH
3656: LD_VAR 0 1
3660: PPUSH
3661: CALL_OW 321
3665: PUSH
3666: LD_INT 1
3668: EQUAL
3669: AND
3670: IFFALSE 3687
// SetTech ( tech_SibDet , side , state_researched ) ;
3672: LD_INT 20
3674: PPUSH
3675: LD_VAR 0 1
3679: PPUSH
3680: LD_INT 2
3682: PPUSH
3683: CALL_OW 322
// if def_siberite_bomb = 1 then
3687: LD_EXP 13
3691: PUSH
3692: LD_INT 1
3694: EQUAL
3695: IFFALSE 3729
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3697: LD_INT 25
3699: PPUSH
3700: LD_VAR 0 1
3704: PPUSH
3705: LD_INT 1
3707: PPUSH
3708: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3712: LD_INT 73
3714: PPUSH
3715: LD_VAR 0 1
3719: PPUSH
3720: LD_INT 1
3722: PPUSH
3723: CALL_OW 322
// end else
3727: GO 3759
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3729: LD_INT 25
3731: PPUSH
3732: LD_VAR 0 1
3736: PPUSH
3737: LD_INT 0
3739: PPUSH
3740: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3744: LD_INT 73
3746: PPUSH
3747: LD_VAR 0 1
3751: PPUSH
3752: LD_INT 0
3754: PPUSH
3755: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3759: LD_INT 24
3761: PPUSH
3762: LD_VAR 0 1
3766: PPUSH
3767: LD_INT 0
3769: PPUSH
3770: CALL_OW 322
// global_defined := true ;
3774: LD_ADDR_LOC 3
3778: PUSH
3779: LD_INT 1
3781: ST_TO_ADDR
// end ;
3782: LD_VAR 0 2
3786: RET
// every 0 0$1 do
3787: GO 3789
3789: DISABLE
// if ( def_siberite_bomb > 1 ) then
3790: LD_EXP 13
3794: PUSH
3795: LD_INT 1
3797: GREATER
3798: IFFALSE 3813
// begin wait ( siberite_bomb_Delay ) ;
3800: LD_EXP 28
3804: PPUSH
3805: CALL_OW 67
// EnableSibFiss ;
3809: CALL 3814 0 0
// end ;
3813: END
// function EnableSibFiss ; var i ; begin
3814: LD_INT 0
3816: PPUSH
3817: PPUSH
// for i := 1 to 8 do
3818: LD_ADDR_VAR 0 2
3822: PUSH
3823: DOUBLE
3824: LD_INT 1
3826: DEC
3827: ST_TO_ADDR
3828: LD_INT 8
3830: PUSH
3831: FOR_TO
3832: IFFALSE 3878
// if Side_Positions [ i ] then
3834: LD_EXP 32
3838: PUSH
3839: LD_VAR 0 2
3843: ARRAY
3844: IFFALSE 3876
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3846: LD_INT 25
3848: PPUSH
3849: LD_VAR 0 2
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3861: LD_INT 73
3863: PPUSH
3864: LD_VAR 0 2
3868: PPUSH
3869: LD_INT 1
3871: PPUSH
3872: CALL_OW 322
// end ;
3876: GO 3831
3878: POP
3879: POP
// end ;
3880: LD_VAR 0 1
3884: RET
// function prepare_sides ; var i ; begin
3885: LD_INT 0
3887: PPUSH
3888: PPUSH
// global_units := [ ] ;
3889: LD_ADDR_LOC 2
3893: PUSH
3894: EMPTY
3895: ST_TO_ADDR
// global_defined := false ;
3896: LD_ADDR_LOC 3
3900: PUSH
3901: LD_INT 0
3903: ST_TO_ADDR
// CountClassMembers ;
3904: CALL 3954 0 0
// for i := 1 to 8 do
3908: LD_ADDR_VAR 0 2
3912: PUSH
3913: DOUBLE
3914: LD_INT 1
3916: DEC
3917: ST_TO_ADDR
3918: LD_INT 8
3920: PUSH
3921: FOR_TO
3922: IFFALSE 3947
// if Side_Positions [ i ] then
3924: LD_EXP 32
3928: PUSH
3929: LD_VAR 0 2
3933: ARRAY
3934: IFFALSE 3945
// prepare_side ( i ) ;
3936: LD_VAR 0 2
3940: PPUSH
3941: CALL 2721 0 1
3945: GO 3921
3947: POP
3948: POP
// end ;
3949: LD_VAR 0 1
3953: RET
// function CountClassMembers ; var Mode ; begin
3954: LD_INT 0
3956: PPUSH
3957: PPUSH
// if No_Mechs then
3958: LD_EXP 15
3962: IFFALSE 3974
// Mode := 2 else
3964: LD_ADDR_VAR 0 2
3968: PUSH
3969: LD_INT 2
3971: ST_TO_ADDR
3972: GO 3982
// Mode := 1 ;
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: LD_INT 1
3981: ST_TO_ADDR
// neng := number_of_people ;
3982: LD_ADDR_LOC 5
3986: PUSH
3987: LD_EXP 19
3991: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
3992: LD_ADDR_LOC 8
3996: PUSH
3997: LD_LOC 5
4001: PUSH
4002: LD_INT 4
4004: PUSH
4005: LD_INT 3
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: LD_VAR 0 2
4016: ARRAY
4017: DIV
4018: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4019: LD_LOC 8
4023: PUSH
4024: LD_EXP 18
4028: LESS
4029: IFFALSE 4041
// nsol := number_of_breastworks ;
4031: LD_ADDR_LOC 8
4035: PUSH
4036: LD_EXP 18
4040: ST_TO_ADDR
// neng := neng - nsol ;
4041: LD_ADDR_LOC 5
4045: PUSH
4046: LD_LOC 5
4050: PUSH
4051: LD_LOC 8
4055: MINUS
4056: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4057: LD_ADDR_LOC 6
4061: PUSH
4062: LD_LOC 5
4066: PUSH
4067: LD_INT 3
4069: PUSH
4070: LD_INT 2
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: PUSH
4077: LD_VAR 0 2
4081: ARRAY
4082: DIV
4083: ST_TO_ADDR
// if ( nsci < 1 ) then
4084: LD_LOC 6
4088: PUSH
4089: LD_INT 1
4091: LESS
4092: IFFALSE 4102
// nsci := 1 ;
4094: LD_ADDR_LOC 6
4098: PUSH
4099: LD_INT 1
4101: ST_TO_ADDR
// neng := neng - nsci ;
4102: LD_ADDR_LOC 5
4106: PUSH
4107: LD_LOC 5
4111: PUSH
4112: LD_LOC 6
4116: MINUS
4117: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4118: LD_ADDR_LOC 7
4122: PUSH
4123: LD_LOC 5
4127: PUSH
4128: LD_INT 2
4130: DIV
4131: PUSH
4132: LD_INT 0
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: PUSH
4139: LD_VAR 0 2
4143: ARRAY
4144: ST_TO_ADDR
// neng := neng - nmech ;
4145: LD_ADDR_LOC 5
4149: PUSH
4150: LD_LOC 5
4154: PUSH
4155: LD_LOC 7
4159: MINUS
4160: ST_TO_ADDR
// if ( neng < 1 ) then
4161: LD_LOC 5
4165: PUSH
4166: LD_INT 1
4168: LESS
4169: IFFALSE 4179
// neng := 1 ;
4171: LD_ADDR_LOC 5
4175: PUSH
4176: LD_INT 1
4178: ST_TO_ADDR
// end ;
4179: LD_VAR 0 1
4183: RET
// starting begin disable ( 98 ) ;
4184: LD_INT 98
4186: DISABLE_MARKED
// disable ( 99 ) ;
4187: LD_INT 99
4189: DISABLE_MARKED
// disable ( 400 ) ;
4190: LD_INT 400
4192: DISABLE_MARKED
// disable ( 401 ) ;
4193: LD_INT 401
4195: DISABLE_MARKED
// mp_selectmsg := true ;
4196: LD_ADDR_OWVAR 13
4200: PUSH
4201: LD_INT 1
4203: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4204: CALL 784 0 0
// init_map ;
4208: CALL 0 0 0
// set_shared_visions_and_alliances ;
4212: CALL 1875 0 0
// ResetFog ;
4216: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4220: LD_OWVAR 2
4224: PPUSH
4225: CALL_OW 520
// prepare_sides ;
4229: CALL 3885 0 0
// init_shipments_and_respawning ;
4233: CALL 4631 0 0
// Init_Win_Condition ;
4237: CALL 7370 0 0
// ShowTimer ;
4241: CALL 6350 0 0
// music_nat := Side_Nations [ your_side ] ;
4245: LD_ADDR_OWVAR 71
4249: PUSH
4250: LD_EXP 33
4254: PUSH
4255: LD_OWVAR 2
4259: ARRAY
4260: ST_TO_ADDR
// if IAmSpec then
4261: CALL_OW 531
4265: IFFALSE 4289
// begin fogoff ( true ) ;
4267: LD_INT 1
4269: PPUSH
4270: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
4274: LD_INT 104
4276: PPUSH
4277: LD_INT 69
4279: PPUSH
4280: CALL_OW 86
// enable ( 400 ) ;
4284: LD_INT 400
4286: ENABLE_MARKED
// end else
4287: GO 4335
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4289: LD_EXP 37
4293: PUSH
4294: LD_EXP 32
4298: PUSH
4299: LD_OWVAR 2
4303: ARRAY
4304: ARRAY
4305: PUSH
4306: LD_INT 1
4308: ARRAY
4309: PPUSH
4310: LD_EXP 37
4314: PUSH
4315: LD_EXP 32
4319: PUSH
4320: LD_OWVAR 2
4324: ARRAY
4325: ARRAY
4326: PUSH
4327: LD_INT 2
4329: ARRAY
4330: PPUSH
4331: CALL_OW 86
// end ; BuildUpAreas := [ base_nw , base_ne , base_sw , base_se ] ;
4335: LD_ADDR_EXP 47
4339: PUSH
4340: LD_INT 8
4342: PUSH
4343: LD_INT 9
4345: PUSH
4346: LD_INT 10
4348: PUSH
4349: LD_INT 11
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: ST_TO_ADDR
// BeginBuildUp ;
4358: CALL 6533 0 0
// end ; end_of_file
4362: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
4363: LD_VAR 0 1
4367: PPUSH
4368: CALL_OW 266
4372: PUSH
4373: LD_INT 0
4375: PUSH
4376: LD_INT 1
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: IN
4383: IFFALSE 4408
// SetBName ( b , @ & GetSide ( b ) ) ;
4385: LD_VAR 0 1
4389: PPUSH
4390: LD_STRING @
4392: PUSH
4393: LD_VAR 0 1
4397: PPUSH
4398: CALL_OW 255
4402: STR
4403: PPUSH
4404: CALL_OW 500
// end ;
4408: PPOPN 2
4410: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
4411: LD_VAR 0 1
4415: PPUSH
4416: CALL_OW 266
4420: PUSH
4421: LD_INT 0
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: IN
4431: IFFALSE 4456
// SetBName ( b , @ & GetSide ( b ) ) ;
4433: LD_VAR 0 1
4437: PPUSH
4438: LD_STRING @
4440: PUSH
4441: LD_VAR 0 1
4445: PPUSH
4446: CALL_OW 255
4450: STR
4451: PPUSH
4452: CALL_OW 500
// end ;
4456: PPOPN 3
4458: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
4459: LD_INT 0
4461: PPUSH
4462: PPUSH
4463: PPUSH
4464: PPUSH
// begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
4465: LD_VAR 0 1
4469: PPUSH
4470: CALL_OW 255
4474: PUSH
4475: LD_INT 0
4477: EQUAL
4478: PUSH
4479: LD_VAR 0 1
4483: PPUSH
4484: CALL_OW 257
4488: PUSH
4489: LD_INT 12
4491: EQUAL
4492: AND
4493: IFFALSE 4499
// CheckApemenAmount ;
4495: CALL 5701 0 0
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
4499: LD_VAR 0 1
4503: PPUSH
4504: CALL_OW 266
4508: PUSH
4509: LD_INT 0
4511: PUSH
4512: LD_INT 1
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: IN
4519: IFFALSE 4601
// begin pos := Side_Positions [ GetSide ( j ) ] ;
4521: LD_ADDR_VAR 0 4
4525: PUSH
4526: LD_EXP 32
4530: PUSH
4531: LD_VAR 0 1
4535: PPUSH
4536: CALL_OW 255
4540: ARRAY
4541: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
4542: LD_ADDR_VAR 0 2
4546: PUSH
4547: LD_EXP 37
4551: PUSH
4552: LD_VAR 0 4
4556: ARRAY
4557: PUSH
4558: LD_INT 1
4560: ARRAY
4561: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4562: LD_ADDR_VAR 0 3
4566: PUSH
4567: LD_EXP 37
4571: PUSH
4572: LD_VAR 0 4
4576: ARRAY
4577: PUSH
4578: LD_INT 2
4580: ARRAY
4581: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
4582: LD_VAR 0 2
4586: PPUSH
4587: LD_VAR 0 3
4591: PPUSH
4592: CALL_OW 420
4596: PPUSH
4597: CALL_OW 419
// end ; end ;
4601: PPOPN 5
4603: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
4604: LD_VAR 0 1
4608: PPUSH
4609: LD_VAR 0 2
4613: PPUSH
4614: LD_VAR 0 3
4618: PPUSH
4619: LD_OWVAR 2
4623: PPUSH
4624: CALL 7131 0 4
4628: PPOPN 3
4630: END
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
4631: LD_INT 0
4633: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4634: LD_ADDR_LOC 9
4638: PUSH
4639: LD_INT 0
4641: PPUSH
4642: LD_INT 3
4644: PPUSH
4645: CALL_OW 12
4649: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
4650: LD_ADDR_LOC 10
4654: PUSH
4655: LD_INT 1
4657: PPUSH
4658: LD_INT 8
4660: PPUSH
4661: CALL_OW 12
4665: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4666: LD_ADDR_LOC 11
4670: PUSH
4671: LD_INT 0
4673: PUSH
4674: LD_INT 0
4676: PUSH
4677: LD_INT 0
4679: PUSH
4680: LD_INT 0
4682: PUSH
4683: LD_INT 0
4685: PUSH
4686: LD_INT 0
4688: PUSH
4689: LD_INT 0
4691: PUSH
4692: LD_INT 0
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: ST_TO_ADDR
// end ;
4705: LD_VAR 0 1
4709: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
4710: GO 4712
4712: DISABLE
4713: LD_INT 0
4715: PPUSH
4716: PPUSH
4717: PPUSH
4718: PPUSH
// begin if respawning_time_max = 0 then
4719: LD_EXP 26
4723: PUSH
4724: LD_INT 0
4726: EQUAL
4727: IFFALSE 4731
// exit ;
4729: GO 5238
// if respawn = 8 then
4731: LD_LOC 10
4735: PUSH
4736: LD_INT 8
4738: EQUAL
4739: IFFALSE 4751
// respawn := 1 else
4741: LD_ADDR_LOC 10
4745: PUSH
4746: LD_INT 1
4748: ST_TO_ADDR
4749: GO 4765
// respawn := respawn + 1 ;
4751: LD_ADDR_LOC 10
4755: PUSH
4756: LD_LOC 10
4760: PUSH
4761: LD_INT 1
4763: PLUS
4764: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
4765: LD_EXP 32
4769: PUSH
4770: LD_LOC 10
4774: ARRAY
4775: PUSH
4776: LD_LOC 11
4780: PUSH
4781: LD_LOC 10
4785: ARRAY
4786: NOT
4787: AND
4788: IFFALSE 5237
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
4790: LD_ADDR_VAR 0 1
4794: PUSH
4795: LD_INT 21
4797: PUSH
4798: LD_INT 1
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: PUSH
4805: LD_INT 22
4807: PUSH
4808: LD_LOC 10
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: PUSH
4817: LD_INT 3
4819: PUSH
4820: LD_INT 23
4822: PUSH
4823: LD_INT 0
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: PPUSH
4836: CALL_OW 69
4840: ST_TO_ADDR
// if n < number_of_people then
4841: LD_VAR 0 1
4845: PUSH
4846: LD_EXP 19
4850: LESS
4851: IFFALSE 5234
// begin aktresp := respawn ;
4853: LD_ADDR_VAR 0 3
4857: PUSH
4858: LD_LOC 10
4862: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
4863: LD_ADDR_LOC 11
4867: PUSH
4868: LD_LOC 11
4872: PPUSH
4873: LD_VAR 0 3
4877: PPUSH
4878: LD_INT 1
4880: PPUSH
4881: CALL_OW 1
4885: ST_TO_ADDR
// enable ;
4886: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
4887: LD_EXP 25
4891: PPUSH
4892: LD_EXP 26
4896: PPUSH
4897: CALL_OW 12
4901: PPUSH
4902: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
4906: LD_ADDR_LOC 11
4910: PUSH
4911: LD_LOC 11
4915: PPUSH
4916: LD_VAR 0 3
4920: PPUSH
4921: LD_INT 0
4923: PPUSH
4924: CALL_OW 1
4928: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
4929: LD_ADDR_VAR 0 2
4933: PUSH
4934: LD_INT 21
4936: PUSH
4937: LD_INT 3
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PUSH
4944: LD_INT 2
4946: PUSH
4947: LD_INT 30
4949: PUSH
4950: LD_INT 0
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PUSH
4957: LD_INT 30
4959: PUSH
4960: LD_INT 1
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: LIST
4971: PUSH
4972: LD_INT 50
4974: PUSH
4975: EMPTY
4976: LIST
4977: PUSH
4978: LD_INT 22
4980: PUSH
4981: LD_VAR 0 3
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: PPUSH
4996: CALL_OW 69
5000: ST_TO_ADDR
// if building_list = 0 then
5001: LD_VAR 0 2
5005: PUSH
5006: LD_INT 0
5008: EQUAL
5009: IFFALSE 5054
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5011: LD_ADDR_VAR 0 2
5015: PUSH
5016: LD_INT 21
5018: PUSH
5019: LD_INT 3
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 50
5028: PUSH
5029: EMPTY
5030: LIST
5031: PUSH
5032: LD_INT 22
5034: PUSH
5035: LD_VAR 0 3
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: LIST
5048: PPUSH
5049: CALL_OW 69
5053: ST_TO_ADDR
// if building_list = 0 then
5054: LD_VAR 0 2
5058: PUSH
5059: LD_INT 0
5061: EQUAL
5062: IFFALSE 5066
// exit ;
5064: GO 5238
// hc_name :=  ;
5066: LD_ADDR_OWVAR 26
5070: PUSH
5071: LD_STRING 
5073: ST_TO_ADDR
// hc_importance := 0 ;
5074: LD_ADDR_OWVAR 32
5078: PUSH
5079: LD_INT 0
5081: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
5082: LD_INT 0
5084: PPUSH
5085: LD_INT 0
5087: PPUSH
5088: LD_EXP 20
5092: PUSH
5093: LD_INT 2
5095: DIV
5096: PPUSH
5097: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
5101: LD_ADDR_OWVAR 21
5105: PUSH
5106: LD_EXP 33
5110: PUSH
5111: LD_VAR 0 3
5115: ARRAY
5116: ST_TO_ADDR
// uc_side := aktresp ;
5117: LD_ADDR_OWVAR 20
5121: PUSH
5122: LD_VAR 0 3
5126: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5127: LD_ADDR_VAR 0 4
5131: PUSH
5132: LD_VAR 0 2
5136: PUSH
5137: LD_INT 1
5139: PPUSH
5140: LD_VAR 0 2
5144: PUSH
5145: LD_INT 0
5147: PLUS
5148: PPUSH
5149: CALL_OW 12
5153: ARRAY
5154: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5155: LD_VAR 0 4
5159: PPUSH
5160: CALL_OW 266
5164: PUSH
5165: LD_INT 0
5167: PUSH
5168: LD_INT 1
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: IN
5175: IFFALSE 5187
// n = 25 else
5177: LD_ADDR_VAR 0 1
5181: PUSH
5182: LD_INT 25
5184: ST_TO_ADDR
5185: GO 5195
// n = 10 ;
5187: LD_ADDR_VAR 0 1
5191: PUSH
5192: LD_INT 10
5194: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5195: CALL_OW 44
5199: PPUSH
5200: LD_VAR 0 4
5204: PPUSH
5205: CALL_OW 250
5209: PPUSH
5210: LD_VAR 0 4
5214: PPUSH
5215: CALL_OW 251
5219: PPUSH
5220: LD_VAR 0 1
5224: PPUSH
5225: LD_INT 1
5227: PPUSH
5228: CALL_OW 50
// end else
5232: GO 5235
// enable ;
5234: ENABLE
// end else
5235: GO 5238
// enable ;
5237: ENABLE
// end ;
5238: PPOPN 4
5240: END
// every 0 0$5 + 0 0$1.1 do var d ;
5241: GO 5243
5243: DISABLE
5244: LD_INT 0
5246: PPUSH
// begin case tick of 1 .. 1 1$0 :
5247: LD_OWVAR 1
5251: PUSH
5252: LD_INT 1
5254: DOUBLE
5255: GREATEREQUAL
5256: IFFALSE 5264
5258: LD_INT 2100
5260: DOUBLE
5261: LESSEQUAL
5262: IFTRUE 5266
5264: GO 5277
5266: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5267: LD_ADDR_VAR 0 1
5271: PUSH
5272: LD_INT 150
5274: ST_TO_ADDR
5275: GO 5460
5277: LD_INT 2100
5279: PUSH
5280: LD_INT 1
5282: PLUS
5283: DOUBLE
5284: GREATEREQUAL
5285: IFFALSE 5293
5287: LD_INT 10500
5289: DOUBLE
5290: LESSEQUAL
5291: IFTRUE 5295
5293: GO 5306
5295: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5296: LD_ADDR_VAR 0 1
5300: PUSH
5301: LD_INT 100
5303: ST_TO_ADDR
5304: GO 5460
5306: LD_INT 10500
5308: PUSH
5309: LD_INT 1
5311: PLUS
5312: DOUBLE
5313: GREATEREQUAL
5314: IFFALSE 5322
5316: LD_INT 21000
5318: DOUBLE
5319: LESSEQUAL
5320: IFTRUE 5324
5322: GO 5335
5324: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5325: LD_ADDR_VAR 0 1
5329: PUSH
5330: LD_INT 90
5332: ST_TO_ADDR
5333: GO 5460
5335: LD_INT 21000
5337: PUSH
5338: LD_INT 1
5340: PLUS
5341: DOUBLE
5342: GREATEREQUAL
5343: IFFALSE 5351
5345: LD_INT 42000
5347: DOUBLE
5348: LESSEQUAL
5349: IFTRUE 5353
5351: GO 5364
5353: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5354: LD_ADDR_VAR 0 1
5358: PUSH
5359: LD_INT 70
5361: ST_TO_ADDR
5362: GO 5460
5364: LD_INT 42000
5366: PUSH
5367: LD_INT 1
5369: PLUS
5370: DOUBLE
5371: GREATEREQUAL
5372: IFFALSE 5380
5374: LD_INT 63000
5376: DOUBLE
5377: LESSEQUAL
5378: IFTRUE 5382
5380: GO 5393
5382: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5383: LD_ADDR_VAR 0 1
5387: PUSH
5388: LD_INT 60
5390: ST_TO_ADDR
5391: GO 5460
5393: LD_INT 63000
5395: PUSH
5396: LD_INT 1
5398: PLUS
5399: DOUBLE
5400: GREATEREQUAL
5401: IFFALSE 5409
5403: LD_INT 105000
5405: DOUBLE
5406: LESSEQUAL
5407: IFTRUE 5411
5409: GO 5422
5411: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5412: LD_ADDR_VAR 0 1
5416: PUSH
5417: LD_INT 35
5419: ST_TO_ADDR
5420: GO 5460
5422: LD_INT 105000
5424: PUSH
5425: LD_INT 1
5427: PLUS
5428: DOUBLE
5429: GREATEREQUAL
5430: IFFALSE 5438
5432: LD_INT 630000
5434: DOUBLE
5435: LESSEQUAL
5436: IFTRUE 5440
5438: GO 5451
5440: POP
// d := 20 ; else
5441: LD_ADDR_VAR 0 1
5445: PUSH
5446: LD_INT 20
5448: ST_TO_ADDR
5449: GO 5460
5451: POP
// d := 0 ; end ;
5452: LD_ADDR_VAR 0 1
5456: PUSH
5457: LD_INT 0
5459: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5460: LD_INT 1
5462: PPUSH
5463: LD_INT 10000
5465: PPUSH
5466: CALL_OW 12
5470: PUSH
5471: LD_VAR 0 1
5475: PUSH
5476: LD_EXP 23
5480: MUL
5481: LESSEQUAL
5482: IFFALSE 5536
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5484: LD_INT 1
5486: PPUSH
5487: LD_INT 140
5489: PPUSH
5490: CALL_OW 12
5494: PPUSH
5495: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5499: LD_ADDR_LOC 9
5503: PUSH
5504: LD_LOC 9
5508: PUSH
5509: LD_INT 1
5511: PLUS
5512: PUSH
5513: LD_INT 4
5515: MOD
5516: ST_TO_ADDR
// CreateCratesArea ( 5 , nw + shipment , true ) ;
5517: LD_INT 5
5519: PPUSH
5520: LD_INT 3
5522: PUSH
5523: LD_LOC 9
5527: PLUS
5528: PPUSH
5529: LD_INT 1
5531: PPUSH
5532: CALL_OW 55
// end ; enable ;
5536: ENABLE
// end ;
5537: PPOPN 1
5539: END
// every 1 1$0 trigger def_shipments_density do
5540: LD_EXP 5
5544: IFFALSE 5580
5546: GO 5548
5548: DISABLE
// begin CreateCratesArea ( 5 , map_center , true ) ;
5549: LD_INT 5
5551: PPUSH
5552: LD_INT 7
5554: PPUSH
5555: LD_INT 1
5557: PPUSH
5558: CALL_OW 55
// wait ( 3 3$0 - ( 1 1$0 * def_shipments_density ) ) ;
5562: LD_INT 6300
5564: PUSH
5565: LD_INT 2100
5567: PUSH
5568: LD_EXP 5
5572: MUL
5573: MINUS
5574: PPUSH
5575: CALL_OW 67
// enable ;
5579: ENABLE
// end ; end_of_file
5580: END
// var _apemenIncrement , _apemenMaximum , _apemenSkillLevel , _apemenThreshold , _isSpawning , _wildApemenAmount ; every 0 0$15 do var i ;
5581: GO 5583
5583: DISABLE
5584: LD_INT 0
5586: PPUSH
// begin _apemenIncrement := 0 ;
5587: LD_ADDR_LOC 12
5591: PUSH
5592: LD_INT 0
5594: ST_TO_ADDR
// _apemenSkillLevel := 0 ;
5595: LD_ADDR_LOC 14
5599: PUSH
5600: LD_INT 0
5602: ST_TO_ADDR
// _isSpawning := true ;
5603: LD_ADDR_LOC 16
5607: PUSH
5608: LD_INT 1
5610: ST_TO_ADDR
// _wildApemenAmount := 0 ;
5611: LD_ADDR_LOC 17
5615: PUSH
5616: LD_INT 0
5618: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5619: LD_ADDR_VAR 0 1
5623: PUSH
5624: LD_EXP 32
5628: PUSH
5629: LD_INT 0
5631: PUSH
5632: EMPTY
5633: LIST
5634: DIFF
5635: PUSH
5636: FOR_IN
5637: IFFALSE 5655
// _apemenIncrement := _apemenIncrement + 1 ;
5639: LD_ADDR_LOC 12
5643: PUSH
5644: LD_LOC 12
5648: PUSH
5649: LD_INT 1
5651: PLUS
5652: ST_TO_ADDR
5653: GO 5636
5655: POP
5656: POP
// _apemenMaximum := _apemenIncrement * amount_of_apemen ;
5657: LD_ADDR_LOC 13
5661: PUSH
5662: LD_LOC 12
5666: PUSH
5667: LD_EXP 27
5671: MUL
5672: ST_TO_ADDR
// _apemenThreshold := _apemenMaximum / 2 ;
5673: LD_ADDR_LOC 15
5677: PUSH
5678: LD_LOC 13
5682: PUSH
5683: LD_INT 2
5685: DIVREAL
5686: ST_TO_ADDR
// prepare_apemen ;
5687: CALL 5779 0 0
// end ;
5691: PPOPN 1
5693: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
5694: CALL 5701 0 0
// end ;
5698: PPOPN 2
5700: END
// export function CheckApemenAmount ; begin
5701: LD_INT 0
5703: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
5704: LD_ADDR_LOC 17
5708: PUSH
5709: LD_LOC 17
5713: PUSH
5714: LD_INT 1
5716: MINUS
5717: ST_TO_ADDR
// if _isSpawning then
5718: LD_LOC 16
5722: IFFALSE 5726
// exit ;
5724: GO 5774
// if _wildApemenAmount <= ( _apemenThreshold ) then
5726: LD_LOC 17
5730: PUSH
5731: LD_LOC 15
5735: LESSEQUAL
5736: IFFALSE 5774
// begin if _apemenSkillLevel < 8 then
5738: LD_LOC 14
5742: PUSH
5743: LD_INT 8
5745: LESS
5746: IFFALSE 5762
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
5748: LD_ADDR_LOC 14
5752: PUSH
5753: LD_LOC 14
5757: PUSH
5758: LD_INT 1
5760: PLUS
5761: ST_TO_ADDR
// _isSpawning := true ;
5762: LD_ADDR_LOC 16
5766: PUSH
5767: LD_INT 1
5769: ST_TO_ADDR
// prepare_apemen ;
5770: CALL 5779 0 0
// end ; end ;
5774: LD_VAR 0 1
5778: RET
// function prepare_apemen ; var i ; begin
5779: LD_INT 0
5781: PPUSH
5782: PPUSH
// if not amount_of_apemen then
5783: LD_EXP 27
5787: NOT
5788: IFFALSE 5792
// exit ;
5790: GO 5971
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5792: LD_INT 1050
5794: PPUSH
5795: LD_INT 3150
5797: PPUSH
5798: CALL_OW 12
5802: PPUSH
5803: CALL_OW 67
// apeman_init ;
5807: CALL 5976 0 0
// for i in ( Side_Positions diff [ 0 ] ) do
5811: LD_ADDR_VAR 0 2
5815: PUSH
5816: LD_EXP 32
5820: PUSH
5821: LD_INT 0
5823: PUSH
5824: EMPTY
5825: LIST
5826: DIFF
5827: PUSH
5828: FOR_IN
5829: IFFALSE 5933
// begin if i = 1 then
5831: LD_VAR 0 2
5835: PUSH
5836: LD_INT 1
5838: EQUAL
5839: IFFALSE 5856
// PlaceUnitArea ( CreateHuman , north_apeman , false ) ;
5841: CALL_OW 44
5845: PPUSH
5846: LD_INT 1
5848: PPUSH
5849: LD_INT 0
5851: PPUSH
5852: CALL_OW 49
// if i = 2 then
5856: LD_VAR 0 2
5860: PUSH
5861: LD_INT 2
5863: EQUAL
5864: IFFALSE 5881
// PlaceUnitArea ( CreateHuman , north_apeman , false ) ;
5866: CALL_OW 44
5870: PPUSH
5871: LD_INT 1
5873: PPUSH
5874: LD_INT 0
5876: PPUSH
5877: CALL_OW 49
// if i = 3 then
5881: LD_VAR 0 2
5885: PUSH
5886: LD_INT 3
5888: EQUAL
5889: IFFALSE 5906
// PlaceUnitArea ( CreateHuman , south_apeman , false ) ;
5891: CALL_OW 44
5895: PPUSH
5896: LD_INT 2
5898: PPUSH
5899: LD_INT 0
5901: PPUSH
5902: CALL_OW 49
// if i = 4 then
5906: LD_VAR 0 2
5910: PUSH
5911: LD_INT 4
5913: EQUAL
5914: IFFALSE 5931
// PlaceUnitArea ( CreateHuman , south_apeman , false ) ;
5916: CALL_OW 44
5920: PPUSH
5921: LD_INT 2
5923: PPUSH
5924: LD_INT 0
5926: PPUSH
5927: CALL_OW 49
// end ;
5931: GO 5828
5933: POP
5934: POP
// _wildApemenAmount := _wildApemenAmount + _apemenIncrement ;
5935: LD_ADDR_LOC 17
5939: PUSH
5940: LD_LOC 17
5944: PUSH
5945: LD_LOC 12
5949: PLUS
5950: ST_TO_ADDR
// until _wildApemenAmount >= _apemenMaximum ;
5951: LD_LOC 17
5955: PUSH
5956: LD_LOC 13
5960: GREATEREQUAL
5961: IFFALSE 5792
// _isSpawning := false ;
5963: LD_ADDR_LOC 16
5967: PUSH
5968: LD_INT 0
5970: ST_TO_ADDR
// end ;
5971: LD_VAR 0 1
5975: RET
// function apeman_init ; begin
5976: LD_INT 0
5978: PPUSH
// uc_side := 0 ;
5979: LD_ADDR_OWVAR 20
5983: PUSH
5984: LD_INT 0
5986: ST_TO_ADDR
// uc_nation := nation_nature ;
5987: LD_ADDR_OWVAR 21
5991: PUSH
5992: LD_INT 0
5994: ST_TO_ADDR
// hc_class := class_apeman ;
5995: LD_ADDR_OWVAR 28
5999: PUSH
6000: LD_INT 12
6002: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
6003: LD_ADDR_OWVAR 30
6007: PUSH
6008: LD_INT 2
6010: PUSH
6011: LD_INT 2
6013: PUSH
6014: LD_INT 2
6016: PUSH
6017: LD_INT 2
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
6026: LD_ADDR_OWVAR 31
6030: PUSH
6031: LD_INT 0
6033: PPUSH
6034: LD_INT 2
6036: PPUSH
6037: CALL_OW 12
6041: PUSH
6042: LD_LOC 14
6046: PLUS
6047: PUSH
6048: LD_INT 0
6050: PPUSH
6051: LD_INT 2
6053: PPUSH
6054: CALL_OW 12
6058: PUSH
6059: LD_LOC 14
6063: PLUS
6064: PUSH
6065: LD_INT 0
6067: PPUSH
6068: LD_INT 2
6070: PPUSH
6071: CALL_OW 12
6075: PUSH
6076: LD_LOC 14
6080: PLUS
6081: PUSH
6082: LD_INT 0
6084: PPUSH
6085: LD_INT 2
6087: PPUSH
6088: CALL_OW 12
6092: PUSH
6093: LD_LOC 14
6097: PLUS
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
6105: LD_ADDR_OWVAR 29
6109: PUSH
6110: LD_INT 10
6112: PUSH
6113: LD_INT 12
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: ST_TO_ADDR
// hc_sex := sex_male ;
6120: LD_ADDR_OWVAR 27
6124: PUSH
6125: LD_INT 1
6127: ST_TO_ADDR
// hc_importance := 0 ;
6128: LD_ADDR_OWVAR 32
6132: PUSH
6133: LD_INT 0
6135: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
6136: LD_ADDR_OWVAR 35
6140: PUSH
6141: LD_INT 20
6143: NEG
6144: PPUSH
6145: LD_INT 20
6147: PPUSH
6148: CALL_OW 12
6152: ST_TO_ADDR
// end ; end_of_file
6153: LD_VAR 0 1
6157: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6158: LD_INT 0
6160: PPUSH
6161: PPUSH
// for un in battle_flags_id do
6162: LD_ADDR_VAR 0 2
6166: PUSH
6167: LD_EXP 42
6171: PUSH
6172: FOR_IN
6173: IFFALSE 6248
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6175: LD_VAR 0 2
6179: PPUSH
6180: LD_INT 1
6182: PUSH
6183: LD_LOC 18
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: LD_INT 2
6194: PUSH
6195: LD_LOC 18
6199: PUSH
6200: LD_INT 2
6202: DIV
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 3
6210: PUSH
6211: LD_LOC 18
6215: PUSH
6216: LD_INT 5
6218: DIV
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 20
6226: PUSH
6227: LD_LOC 18
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: PPUSH
6242: CALL_OW 423
6246: GO 6172
6248: POP
6249: POP
// end ;
6250: LD_VAR 0 1
6254: RET
// every 0 0$0.1 do var un ;
6255: GO 6257
6257: DISABLE
6258: LD_INT 0
6260: PPUSH
// begin if not def_morale_flags then
6261: LD_EXP 9
6265: NOT
6266: IFFALSE 6270
// exit ;
6268: GO 6347
// if not morale_decreasing_time then
6270: LD_EXP 24
6274: NOT
6275: IFFALSE 6279
// exit ;
6277: GO 6347
// strength = 100 ;
6279: LD_ADDR_LOC 18
6283: PUSH
6284: LD_INT 100
6286: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6287: LD_EXP 24
6291: PPUSH
6292: CALL_OW 67
// strength := strength - 1 ;
6296: LD_ADDR_LOC 18
6300: PUSH
6301: LD_LOC 18
6305: PUSH
6306: LD_INT 1
6308: MINUS
6309: ST_TO_ADDR
// Update_Flags ;
6310: CALL 6158 0 0
// until not strength ;
6314: LD_LOC 18
6318: NOT
6319: IFFALSE 6287
// for un in battle_flags_id do
6321: LD_ADDR_VAR 0 1
6325: PUSH
6326: LD_EXP 42
6330: PUSH
6331: FOR_IN
6332: IFFALSE 6345
// KillBattleFlag ( un ) ;
6334: LD_VAR 0 1
6338: PPUSH
6339: CALL_OW 419
6343: GO 6331
6345: POP
6346: POP
// end ; end_of_file
6347: PPOPN 1
6349: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
6350: LD_INT 0
6352: PPUSH
6353: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
6354: LD_ADDR_VAR 0 2
6358: PUSH
6359: LD_STRING #Multi1x1-Time
6361: PUSH
6362: LD_OWVAR 1
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: ST_TO_ADDR
// if WaitServerStrings then
6371: LD_EXP 46
6375: IFFALSE 6393
// AllStrings = AllStrings ^ WaitServerStrings ;
6377: LD_ADDR_VAR 0 2
6381: PUSH
6382: LD_VAR 0 2
6386: PUSH
6387: LD_EXP 46
6391: ADD
6392: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
6393: LD_INT 0
6395: PUSH
6396: LD_EXP 28
6400: PUSH
6401: LD_OWVAR 1
6405: MINUS
6406: LESSEQUAL
6407: IFFALSE 6438
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
6409: LD_ADDR_VAR 0 2
6413: PUSH
6414: LD_VAR 0 2
6418: PUSH
6419: LD_STRING #allowedsibbomb
6421: PUSH
6422: LD_EXP 28
6426: PUSH
6427: LD_OWVAR 1
6431: MINUS
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: ADD
6437: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
6438: LD_INT 0
6440: PUSH
6441: LD_EXP 49
6445: PUSH
6446: LD_OWVAR 1
6450: MINUS
6451: LESSEQUAL
6452: IFFALSE 6483
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
6454: LD_ADDR_VAR 0 2
6458: PUSH
6459: LD_VAR 0 2
6463: PUSH
6464: LD_STRING #builduptime
6466: PUSH
6467: LD_EXP 49
6471: PUSH
6472: LD_OWVAR 1
6476: MINUS
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: ADD
6482: ST_TO_ADDR
// if ( ExtraStrings ) then
6483: LD_EXP 45
6487: IFFALSE 6509
// AllStrings := AllStrings ^  ^ ExtraStrings ;
6489: LD_ADDR_VAR 0 2
6493: PUSH
6494: LD_VAR 0 2
6498: PUSH
6499: LD_STRING 
6501: ADD
6502: PUSH
6503: LD_EXP 45
6507: ADD
6508: ST_TO_ADDR
// Display_Strings := AllStrings ;
6509: LD_ADDR_OWVAR 47
6513: PUSH
6514: LD_VAR 0 2
6518: ST_TO_ADDR
// end ;
6519: LD_VAR 0 1
6523: RET
// every 0 0$1 do
6524: GO 6526
6526: DISABLE
// begin ShowTimer ;
6527: CALL 6350 0 0
// enable ;
6531: ENABLE
// end ; end_of_file
6532: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
6533: LD_INT 0
6535: PPUSH
6536: PPUSH
6537: PPUSH
// BuildUpTime_Delay = 0 ;
6538: LD_ADDR_EXP 49
6542: PUSH
6543: LD_INT 0
6545: ST_TO_ADDR
// if not def_builduptime then
6546: LD_EXP 14
6550: NOT
6551: IFFALSE 6555
// exit ;
6553: GO 6738
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
6555: LD_ADDR_EXP 49
6559: PUSH
6560: LD_INT 8400
6562: PUSH
6563: LD_INT 2100
6565: PUSH
6566: LD_EXP 14
6570: MUL
6571: PLUS
6572: ST_TO_ADDR
// BuildUpTimeActive := true ;
6573: LD_ADDR_EXP 48
6577: PUSH
6578: LD_INT 1
6580: ST_TO_ADDR
// for i := 1 to 8 do
6581: LD_ADDR_VAR 0 2
6585: PUSH
6586: DOUBLE
6587: LD_INT 1
6589: DEC
6590: ST_TO_ADDR
6591: LD_INT 8
6593: PUSH
6594: FOR_TO
6595: IFFALSE 6736
// if Side_Positions [ i ] then
6597: LD_EXP 32
6601: PUSH
6602: LD_VAR 0 2
6606: ARRAY
6607: IFFALSE 6734
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
6609: LD_EXP 47
6613: PUSH
6614: LD_EXP 32
6618: PUSH
6619: LD_VAR 0 2
6623: ARRAY
6624: ARRAY
6625: PPUSH
6626: LD_INT 5
6628: PPUSH
6629: CALL_OW 424
// for j := 1 to 8 do
6633: LD_ADDR_VAR 0 3
6637: PUSH
6638: DOUBLE
6639: LD_INT 1
6641: DEC
6642: ST_TO_ADDR
6643: LD_INT 8
6645: PUSH
6646: FOR_TO
6647: IFFALSE 6732
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
6649: LD_EXP 32
6653: PUSH
6654: LD_VAR 0 3
6658: ARRAY
6659: PUSH
6660: LD_EXP 30
6664: PUSH
6665: LD_VAR 0 2
6669: ARRAY
6670: PUSH
6671: LD_EXP 30
6675: PUSH
6676: LD_VAR 0 3
6680: ARRAY
6681: NONEQUAL
6682: PUSH
6683: LD_EXP 34
6687: NOT
6688: PUSH
6689: LD_VAR 0 2
6693: PUSH
6694: LD_VAR 0 3
6698: NONEQUAL
6699: AND
6700: OR
6701: AND
6702: IFFALSE 6730
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
6704: LD_VAR 0 3
6708: PPUSH
6709: LD_EXP 47
6713: PUSH
6714: LD_EXP 32
6718: PUSH
6719: LD_VAR 0 2
6723: ARRAY
6724: ARRAY
6725: PPUSH
6726: CALL_OW 333
6730: GO 6646
6732: POP
6733: POP
// end ;
6734: GO 6594
6736: POP
6737: POP
// end ;
6738: LD_VAR 0 1
6742: RET
// export function EndBuildUp ; var i , j ; begin
6743: LD_INT 0
6745: PPUSH
6746: PPUSH
6747: PPUSH
// BuildUpTimeActive := false ;
6748: LD_ADDR_EXP 48
6752: PUSH
6753: LD_INT 0
6755: ST_TO_ADDR
// for i := 1 to 8 do
6756: LD_ADDR_VAR 0 2
6760: PUSH
6761: DOUBLE
6762: LD_INT 1
6764: DEC
6765: ST_TO_ADDR
6766: LD_INT 8
6768: PUSH
6769: FOR_TO
6770: IFFALSE 6911
// if Side_Positions [ i ] then
6772: LD_EXP 32
6776: PUSH
6777: LD_VAR 0 2
6781: ARRAY
6782: IFFALSE 6909
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
6784: LD_EXP 47
6788: PUSH
6789: LD_EXP 32
6793: PUSH
6794: LD_VAR 0 2
6798: ARRAY
6799: ARRAY
6800: PPUSH
6801: LD_INT 0
6803: PPUSH
6804: CALL_OW 424
// for j := 1 to 8 do
6808: LD_ADDR_VAR 0 3
6812: PUSH
6813: DOUBLE
6814: LD_INT 1
6816: DEC
6817: ST_TO_ADDR
6818: LD_INT 8
6820: PUSH
6821: FOR_TO
6822: IFFALSE 6907
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
6824: LD_EXP 32
6828: PUSH
6829: LD_VAR 0 3
6833: ARRAY
6834: PUSH
6835: LD_EXP 30
6839: PUSH
6840: LD_VAR 0 2
6844: ARRAY
6845: PUSH
6846: LD_EXP 30
6850: PUSH
6851: LD_VAR 0 3
6855: ARRAY
6856: NONEQUAL
6857: PUSH
6858: LD_EXP 34
6862: NOT
6863: PUSH
6864: LD_VAR 0 2
6868: PUSH
6869: LD_VAR 0 3
6873: NONEQUAL
6874: AND
6875: OR
6876: AND
6877: IFFALSE 6905
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
6879: LD_VAR 0 3
6883: PPUSH
6884: LD_EXP 47
6888: PUSH
6889: LD_EXP 32
6893: PUSH
6894: LD_VAR 0 2
6898: ARRAY
6899: ARRAY
6900: PPUSH
6901: CALL_OW 334
6905: GO 6821
6907: POP
6908: POP
// end ;
6909: GO 6769
6911: POP
6912: POP
// end ;
6913: LD_VAR 0 1
6917: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
6918: LD_EXP 48
6922: IFFALSE 7097
6924: GO 6926
6926: DISABLE
6927: LD_INT 0
6929: PPUSH
6930: PPUSH
// begin for i := 1 to 8 do
6931: LD_ADDR_VAR 0 1
6935: PUSH
6936: DOUBLE
6937: LD_INT 1
6939: DEC
6940: ST_TO_ADDR
6941: LD_INT 8
6943: PUSH
6944: FOR_TO
6945: IFFALSE 7094
// if Side_Positions [ i ] then
6947: LD_EXP 32
6951: PUSH
6952: LD_VAR 0 1
6956: ARRAY
6957: IFFALSE 7092
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
6959: LD_ADDR_VAR 0 2
6963: PUSH
6964: LD_EXP 47
6968: PUSH
6969: LD_EXP 32
6973: PUSH
6974: LD_VAR 0 1
6978: ARRAY
6979: ARRAY
6980: PPUSH
6981: LD_INT 2
6983: PUSH
6984: LD_INT 21
6986: PUSH
6987: LD_INT 1
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 21
6996: PUSH
6997: LD_INT 2
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: PUSH
7009: LD_INT 22
7011: PUSH
7012: LD_OWVAR 2
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PPUSH
7025: CALL_OW 70
7029: PUSH
7030: FOR_IN
7031: IFFALSE 7090
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
7033: LD_EXP 30
7037: PUSH
7038: LD_VAR 0 1
7042: ARRAY
7043: PUSH
7044: LD_EXP 30
7048: PUSH
7049: LD_OWVAR 2
7053: ARRAY
7054: NONEQUAL
7055: PUSH
7056: LD_EXP 34
7060: NOT
7061: PUSH
7062: LD_VAR 0 1
7066: PUSH
7067: LD_OWVAR 2
7071: NONEQUAL
7072: AND
7073: OR
7074: IFFALSE 7088
// ComMoveToArea ( un , BuildUpEscape ) ;
7076: LD_VAR 0 2
7080: PPUSH
7081: LD_INT 12
7083: PPUSH
7084: CALL_OW 113
7088: GO 7030
7090: POP
7091: POP
7092: GO 6944
7094: POP
7095: POP
// enable ;
7096: ENABLE
// end ;
7097: PPOPN 2
7099: END
// every 0 0$1 trigger def_builduptime do
7100: LD_EXP 14
7104: IFFALSE 7130
7106: GO 7108
7108: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
7109: LD_INT 8400
7111: PUSH
7112: LD_EXP 14
7116: PUSH
7117: LD_INT 2100
7119: MUL
7120: PLUS
7121: PPUSH
7122: CALL_OW 67
// EndBuildUp ;
7126: CALL 6743 0 0
// end ; end_of_file
7130: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7131: LD_INT 0
7133: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7134: LD_VAR 0 1
7138: PPUSH
7139: CALL_OW 255
7143: PUSH
7144: LD_VAR 0 4
7148: EQUAL
7149: IFFALSE 7168
// begin SetAchievement ( ACH_RAD ) ;
7151: LD_STRING ACH_RAD
7153: PPUSH
7154: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7158: LD_STRING ACH_NL
7160: PPUSH
7161: LD_INT 1
7163: PPUSH
7164: CALL_OW 564
// end end ;
7168: LD_VAR 0 5
7172: RET
// export function SA_Win ( side ) ; begin
7173: LD_INT 0
7175: PPUSH
// case side of 1 :
7176: LD_VAR 0 1
7180: PUSH
7181: LD_INT 1
7183: DOUBLE
7184: EQUAL
7185: IFTRUE 7189
7187: GO 7202
7189: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7190: LD_STRING ACH_AH
7192: PPUSH
7193: LD_INT 1
7195: PPUSH
7196: CALL_OW 564
7200: GO 7365
7202: LD_INT 2
7204: DOUBLE
7205: EQUAL
7206: IFTRUE 7210
7208: GO 7223
7210: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7211: LD_STRING ACH_E
7213: PPUSH
7214: LD_INT 1
7216: PPUSH
7217: CALL_OW 564
7221: GO 7365
7223: LD_INT 3
7225: DOUBLE
7226: EQUAL
7227: IFTRUE 7231
7229: GO 7244
7231: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7232: LD_STRING ACH_OOL
7234: PPUSH
7235: LD_INT 1
7237: PPUSH
7238: CALL_OW 564
7242: GO 7365
7244: LD_INT 1
7246: PUSH
7247: LD_INT 2
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: DOUBLE
7254: EQUAL
7255: IFTRUE 7259
7257: GO 7284
7259: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7260: LD_STRING ACH_AH
7262: PPUSH
7263: LD_REAL  5.00000000000000E-0001
7266: PPUSH
7267: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7271: LD_STRING ACH_E
7273: PPUSH
7274: LD_REAL  5.00000000000000E-0001
7277: PPUSH
7278: CALL_OW 564
// end ; [ 2 , 3 ] :
7282: GO 7365
7284: LD_INT 2
7286: PUSH
7287: LD_INT 3
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: DOUBLE
7294: EQUAL
7295: IFTRUE 7299
7297: GO 7324
7299: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7300: LD_STRING ACH_OOL
7302: PPUSH
7303: LD_REAL  5.00000000000000E-0001
7306: PPUSH
7307: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7311: LD_STRING ACH_E
7313: PPUSH
7314: LD_REAL  5.00000000000000E-0001
7317: PPUSH
7318: CALL_OW 564
// end ; [ 3 , 1 ] :
7322: GO 7365
7324: LD_INT 3
7326: PUSH
7327: LD_INT 1
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: DOUBLE
7334: EQUAL
7335: IFTRUE 7339
7337: GO 7364
7339: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7340: LD_STRING ACH_AH
7342: PPUSH
7343: LD_REAL  5.00000000000000E-0001
7346: PPUSH
7347: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7351: LD_STRING ACH_OOL
7353: PPUSH
7354: LD_REAL  5.00000000000000E-0001
7357: PPUSH
7358: CALL_OW 564
// end ; end ;
7362: GO 7365
7364: POP
// end ; end_of_file
7365: LD_VAR 0 2
7369: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
7370: LD_INT 0
7372: PPUSH
7373: PPUSH
// enable ( 98 ) ;
7374: LD_INT 98
7376: ENABLE_MARKED
// GameEnded = false ;
7377: LD_ADDR_LOC 24
7381: PUSH
7382: LD_INT 0
7384: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7385: LD_ADDR_LOC 23
7389: PUSH
7390: LD_INT 0
7392: PUSH
7393: LD_INT 0
7395: PUSH
7396: LD_INT 0
7398: PUSH
7399: LD_INT 0
7401: PUSH
7402: LD_INT 0
7404: PUSH
7405: LD_INT 0
7407: PUSH
7408: LD_INT 0
7410: PUSH
7411: LD_INT 0
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: ST_TO_ADDR
// unfoged = false ;
7424: LD_ADDR_LOC 25
7428: PUSH
7429: LD_INT 0
7431: ST_TO_ADDR
// for i = 1 to side_positions do
7432: LD_ADDR_VAR 0 2
7436: PUSH
7437: DOUBLE
7438: LD_INT 1
7440: DEC
7441: ST_TO_ADDR
7442: LD_EXP 32
7446: PUSH
7447: FOR_TO
7448: IFFALSE 7488
// if not side_positions [ i ] then
7450: LD_EXP 32
7454: PUSH
7455: LD_VAR 0 2
7459: ARRAY
7460: NOT
7461: IFFALSE 7486
// defaited = replace ( defaited , i , true ) ;
7463: LD_ADDR_LOC 23
7467: PUSH
7468: LD_LOC 23
7472: PPUSH
7473: LD_VAR 0 2
7477: PPUSH
7478: LD_INT 1
7480: PPUSH
7481: CALL_OW 1
7485: ST_TO_ADDR
7486: GO 7447
7488: POP
7489: POP
// end ;
7490: LD_VAR 0 1
7494: RET
// function CanWinLoose ; begin
7495: LD_INT 0
7497: PPUSH
// Result := true ;
7498: LD_ADDR_VAR 0 1
7502: PUSH
7503: LD_INT 1
7505: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7506: CALL_OW 518
7510: PUSH
7511: CALL_OW 519
7515: PUSH
7516: LD_INT 0
7518: GREATER
7519: AND
7520: IFFALSE 7530
// Result := false ;
7522: LD_ADDR_VAR 0 1
7526: PUSH
7527: LD_INT 0
7529: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7530: CALL_OW 531
7534: PUSH
7535: CALL_OW 519
7539: PUSH
7540: LD_INT 1
7542: GREATER
7543: AND
7544: IFFALSE 7554
// Result := false ;
7546: LD_ADDR_VAR 0 1
7550: PUSH
7551: LD_INT 0
7553: ST_TO_ADDR
// end ;
7554: LD_VAR 0 1
7558: RET
// export function HasPower ( i ) ; var k , h ; begin
7559: LD_INT 0
7561: PPUSH
7562: PPUSH
7563: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7564: LD_VAR 0 1
7568: PPUSH
7569: CALL_OW 108
7573: NOT
7574: PUSH
7575: LD_EXP 43
7579: PUSH
7580: LD_VAR 0 1
7584: ARRAY
7585: NOT
7586: AND
7587: PUSH
7588: LD_OWVAR 4
7592: AND
7593: IFFALSE 7605
// begin result = false ;
7595: LD_ADDR_VAR 0 2
7599: PUSH
7600: LD_INT 0
7602: ST_TO_ADDR
// end else
7603: GO 7900
// case def_win_rules of 0 :
7605: LD_EXP 29
7609: PUSH
7610: LD_INT 0
7612: DOUBLE
7613: EQUAL
7614: IFTRUE 7618
7616: GO 7781
7618: POP
// if def_people_respawning then
7619: LD_EXP 12
7623: IFFALSE 7714
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7625: LD_ADDR_VAR 0 2
7629: PUSH
7630: LD_INT 22
7632: PUSH
7633: LD_VAR 0 1
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 2
7644: PUSH
7645: LD_INT 21
7647: PUSH
7648: LD_INT 1
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 33
7657: PUSH
7658: LD_INT 3
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: PUSH
7665: LD_INT 33
7667: PUSH
7668: LD_INT 5
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: PUSH
7675: LD_INT 30
7677: PUSH
7678: LD_INT 0
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: LD_INT 30
7687: PUSH
7688: LD_INT 1
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PPUSH
7707: CALL_OW 69
7711: ST_TO_ADDR
7712: GO 7779
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
7714: LD_ADDR_VAR 0 2
7718: PUSH
7719: LD_INT 22
7721: PUSH
7722: LD_VAR 0 1
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: LD_INT 2
7733: PUSH
7734: LD_INT 21
7736: PUSH
7737: LD_INT 1
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: PUSH
7744: LD_INT 33
7746: PUSH
7747: LD_INT 3
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: PUSH
7754: LD_INT 33
7756: PUSH
7757: LD_INT 5
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PPUSH
7774: CALL_OW 69
7778: ST_TO_ADDR
7779: GO 7900
7781: LD_INT 1
7783: DOUBLE
7784: EQUAL
7785: IFTRUE 7789
7787: GO 7828
7789: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
7790: LD_ADDR_VAR 0 2
7794: PUSH
7795: LD_INT 22
7797: PUSH
7798: LD_VAR 0 1
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PUSH
7807: LD_INT 21
7809: PUSH
7810: LD_INT 1
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PPUSH
7821: CALL_OW 69
7825: ST_TO_ADDR
7826: GO 7900
7828: LD_INT 2
7830: DOUBLE
7831: EQUAL
7832: IFTRUE 7836
7834: GO 7899
7836: POP
// begin h = false ;
7837: LD_ADDR_VAR 0 4
7841: PUSH
7842: LD_INT 0
7844: ST_TO_ADDR
// for k in heroes [ i ] do
7845: LD_ADDR_VAR 0 3
7849: PUSH
7850: LD_EXP 44
7854: PUSH
7855: LD_VAR 0 1
7859: ARRAY
7860: PUSH
7861: FOR_IN
7862: IFFALSE 7885
// if IsLive ( k ) then
7864: LD_VAR 0 3
7868: PPUSH
7869: CALL_OW 300
7873: IFFALSE 7883
// h = true ;
7875: LD_ADDR_VAR 0 4
7879: PUSH
7880: LD_INT 1
7882: ST_TO_ADDR
7883: GO 7861
7885: POP
7886: POP
// Result := h ;
7887: LD_ADDR_VAR 0 2
7891: PUSH
7892: LD_VAR 0 4
7896: ST_TO_ADDR
// end ; end ;
7897: GO 7900
7899: POP
// end ;
7900: LD_VAR 0 2
7904: RET
// function AlliedSides ( i , j ) ; begin
7905: LD_INT 0
7907: PPUSH
// Result := false ;
7908: LD_ADDR_VAR 0 3
7912: PUSH
7913: LD_INT 0
7915: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7916: LD_VAR 0 1
7920: PPUSH
7921: LD_VAR 0 2
7925: PPUSH
7926: CALL_OW 81
7930: PUSH
7931: LD_INT 1
7933: EQUAL
7934: PUSH
7935: LD_VAR 0 2
7939: PPUSH
7940: LD_VAR 0 1
7944: PPUSH
7945: CALL_OW 81
7949: PUSH
7950: LD_INT 1
7952: EQUAL
7953: AND
7954: PUSH
7955: LD_VAR 0 1
7959: PPUSH
7960: CALL_OW 83
7964: AND
7965: PUSH
7966: LD_VAR 0 2
7970: PPUSH
7971: CALL_OW 83
7975: AND
7976: IFFALSE 7986
// Result := true ;
7978: LD_ADDR_VAR 0 3
7982: PUSH
7983: LD_INT 1
7985: ST_TO_ADDR
// end ;
7986: LD_VAR 0 3
7990: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
7991: CALL 7495 0 0
7995: PUSH
7996: LD_LOC 24
8000: NOT
8001: AND
8002: IFFALSE 8018
8004: GO 8006
8006: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8007: LD_ADDR_EXP 46
8011: PUSH
8012: LD_STRING #Player-Ended
8014: PUSH
8015: EMPTY
8016: LIST
8017: ST_TO_ADDR
8018: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8019: CALL 7495 0 0
8023: PUSH
8024: LD_LOC 24
8028: AND
8029: IFFALSE 8038
8031: GO 8033
8033: DISABLE
// YouLostInMultiplayer ;
8034: CALL_OW 107
8038: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8039: CALL 7495 0 0
8043: NOT
8044: PUSH
8045: CALL_OW 531
8049: NOT
8050: AND
8051: IFFALSE 8067
8053: GO 8055
8055: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8056: LD_ADDR_EXP 46
8060: PUSH
8061: LD_STRING #server-wait
8063: PUSH
8064: EMPTY
8065: LIST
8066: ST_TO_ADDR
8067: END
// every 100 trigger IAmSpec do
8068: CALL_OW 531
8072: IFFALSE 8088
8074: GO 8076
8076: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8077: LD_ADDR_EXP 46
8081: PUSH
8082: LD_STRING #Player-IAmSpec
8084: PUSH
8085: EMPTY
8086: LIST
8087: ST_TO_ADDR
8088: END
// every 100 trigger GameEnded and IAmSpec do
8089: LD_LOC 24
8093: PUSH
8094: CALL_OW 531
8098: AND
8099: IFFALSE 8108
8101: GO 8103
8103: DISABLE
// YouLostInMultiplayer ;
8104: CALL_OW 107
8108: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8109: CALL 7495 0 0
8113: PUSH
8114: LD_LOC 24
8118: NOT
8119: AND
8120: IFFALSE 8136
8122: GO 8124
8124: DISABLE
// WaitServerStrings = [ $player-win ] ;
8125: LD_ADDR_EXP 46
8129: PUSH
8130: LD_STRING $player-win
8132: PUSH
8133: EMPTY
8134: LIST
8135: ST_TO_ADDR
8136: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8137: CALL 7495 0 0
8141: PUSH
8142: LD_LOC 24
8146: AND
8147: IFFALSE 8171
8149: GO 8151
8151: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8152: LD_EXP 33
8156: PUSH
8157: LD_OWVAR 2
8161: ARRAY
8162: PPUSH
8163: CALL 7173 0 1
// YouWinInMultiplayer ;
8167: CALL_OW 106
// end ;
8171: END
// every 100 trigger isEditor marked 401 do
8172: LD_OWVAR 84
8176: IFFALSE 8192
8178: GO 8180
8180: DISABLE
// Debug_Strings = [ You won ] ;
8181: LD_ADDR_OWVAR 48
8185: PUSH
8186: LD_STRING You won
8188: PUSH
8189: EMPTY
8190: LIST
8191: ST_TO_ADDR
8192: END
// every 100 trigger isEditor marked 400 do
8193: LD_OWVAR 84
8197: IFFALSE 8213
8199: GO 8201
8201: DISABLE
// Debug_Strings = [ You loss ] ;
8202: LD_ADDR_OWVAR 48
8206: PUSH
8207: LD_STRING You loss
8209: PUSH
8210: EMPTY
8211: LIST
8212: ST_TO_ADDR
8213: END
// every 100 marked 98 do var i , un ;
8214: GO 8216
8216: DISABLE
8217: LD_INT 0
8219: PPUSH
8220: PPUSH
// begin for i = 1 to side_positions do
8221: LD_ADDR_VAR 0 1
8225: PUSH
8226: DOUBLE
8227: LD_INT 1
8229: DEC
8230: ST_TO_ADDR
8231: LD_EXP 32
8235: PUSH
8236: FOR_TO
8237: IFFALSE 8320
// if side_positions [ i ] then
8239: LD_EXP 32
8243: PUSH
8244: LD_VAR 0 1
8248: ARRAY
8249: IFFALSE 8318
// if not HasPower ( i ) and not Defaited [ i ] then
8251: LD_VAR 0 1
8255: PPUSH
8256: CALL 7559 0 1
8260: NOT
8261: PUSH
8262: LD_LOC 23
8266: PUSH
8267: LD_VAR 0 1
8271: ARRAY
8272: NOT
8273: AND
8274: IFFALSE 8318
// begin Defaited = replace ( Defaited , i , true ) ;
8276: LD_ADDR_LOC 23
8280: PUSH
8281: LD_LOC 23
8285: PPUSH
8286: LD_VAR 0 1
8290: PPUSH
8291: LD_INT 1
8293: PPUSH
8294: CALL_OW 1
8298: ST_TO_ADDR
// if i = your_side then
8299: LD_VAR 0 1
8303: PUSH
8304: LD_OWVAR 2
8308: EQUAL
8309: IFFALSE 8318
// begin Multiplayer_Loose_Message ;
8311: CALL_OW 521
// enable ( 400 ) ;
8315: LD_INT 400
8317: ENABLE_MARKED
// end ; end ;
8318: GO 8236
8320: POP
8321: POP
// if not Unfoged and defaited [ your_side ] then
8322: LD_LOC 25
8326: NOT
8327: PUSH
8328: LD_LOC 23
8332: PUSH
8333: LD_OWVAR 2
8337: ARRAY
8338: AND
8339: IFFALSE 8345
// Unfog ;
8341: CALL 8521 0 0
// DidGameEnd ;
8345: CALL 8360 0 0
// if not GameEnded then
8349: LD_LOC 24
8353: NOT
8354: IFFALSE 8357
// enable ;
8356: ENABLE
// end ;
8357: PPOPN 2
8359: END
// function DidGameEnd ; var i , k , enemy ; begin
8360: LD_INT 0
8362: PPUSH
8363: PPUSH
8364: PPUSH
8365: PPUSH
// enemy = [ ] ;
8366: LD_ADDR_VAR 0 4
8370: PUSH
8371: EMPTY
8372: ST_TO_ADDR
// for i = 1 to side_positions do
8373: LD_ADDR_VAR 0 2
8377: PUSH
8378: DOUBLE
8379: LD_INT 1
8381: DEC
8382: ST_TO_ADDR
8383: LD_EXP 32
8387: PUSH
8388: FOR_TO
8389: IFFALSE 8483
// if not defaited [ i ] then
8391: LD_LOC 23
8395: PUSH
8396: LD_VAR 0 2
8400: ARRAY
8401: NOT
8402: IFFALSE 8481
// for k = 1 to side_positions do
8404: LD_ADDR_VAR 0 3
8408: PUSH
8409: DOUBLE
8410: LD_INT 1
8412: DEC
8413: ST_TO_ADDR
8414: LD_EXP 32
8418: PUSH
8419: FOR_TO
8420: IFFALSE 8479
// if not defaited [ k ] then
8422: LD_LOC 23
8426: PUSH
8427: LD_VAR 0 3
8431: ARRAY
8432: NOT
8433: IFFALSE 8477
// if not AlliedSides ( i , k ) then
8435: LD_VAR 0 2
8439: PPUSH
8440: LD_VAR 0 3
8444: PPUSH
8445: CALL 7905 0 2
8449: NOT
8450: IFFALSE 8477
// enemy = enemy ^ [ i , k ] ;
8452: LD_ADDR_VAR 0 4
8456: PUSH
8457: LD_VAR 0 4
8461: PUSH
8462: LD_VAR 0 2
8466: PUSH
8467: LD_VAR 0 3
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: ADD
8476: ST_TO_ADDR
8477: GO 8419
8479: POP
8480: POP
8481: GO 8388
8483: POP
8484: POP
// if not enemy then
8485: LD_VAR 0 4
8489: NOT
8490: IFFALSE 8516
// begin GameEnded = true ;
8492: LD_ADDR_LOC 24
8496: PUSH
8497: LD_INT 1
8499: ST_TO_ADDR
// if not defaited [ your_side ] then
8500: LD_LOC 23
8504: PUSH
8505: LD_OWVAR 2
8509: ARRAY
8510: NOT
8511: IFFALSE 8516
// enable ( 401 ) ;
8513: LD_INT 401
8515: ENABLE_MARKED
// end ; end ;
8516: LD_VAR 0 1
8520: RET
// function unfog ; var k , friends ; begin
8521: LD_INT 0
8523: PPUSH
8524: PPUSH
8525: PPUSH
// SetPlayerSpectator ( ) ;
8526: CALL_OW 572
// unfoged = true ;
8530: LD_ADDR_LOC 25
8534: PUSH
8535: LD_INT 1
8537: ST_TO_ADDR
// end ;
8538: LD_VAR 0 1
8542: RET
// export function MakeGameEnd ; begin
8543: LD_INT 0
8545: PPUSH
// SetPlayerSpectator ( ) ;
8546: CALL_OW 572
// unfoged = true ;
8550: LD_ADDR_LOC 25
8554: PUSH
8555: LD_INT 1
8557: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8558: LD_INT 175
8560: PPUSH
8561: CALL_OW 67
// GameEnded = true ;
8565: LD_ADDR_LOC 24
8569: PUSH
8570: LD_INT 1
8572: ST_TO_ADDR
// end ;
8573: LD_VAR 0 1
8577: RET
// export function GetGameEnded ; begin
8578: LD_INT 0
8580: PPUSH
// result = GameEnded ;
8581: LD_ADDR_VAR 0 1
8585: PUSH
8586: LD_LOC 24
8590: ST_TO_ADDR
// end ; end_of_file
8591: LD_VAR 0 1
8595: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8596: LD_INT 0
8598: PPUSH
8599: PPUSH
8600: PPUSH
// for side = 1 to 8 do
8601: LD_ADDR_VAR 0 2
8605: PUSH
8606: DOUBLE
8607: LD_INT 1
8609: DEC
8610: ST_TO_ADDR
8611: LD_INT 8
8613: PUSH
8614: FOR_TO
8615: IFFALSE 8736
// begin for i = 1 to 72 do
8617: LD_ADDR_VAR 0 3
8621: PUSH
8622: DOUBLE
8623: LD_INT 1
8625: DEC
8626: ST_TO_ADDR
8627: LD_INT 72
8629: PUSH
8630: FOR_TO
8631: IFFALSE 8662
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
8633: LD_VAR 0 3
8637: PPUSH
8638: LD_VAR 0 2
8642: PPUSH
8643: LD_INT 0
8645: PPUSH
8646: LD_VAR 0 3
8650: PPUSH
8651: CALL_OW 565
8655: PPUSH
8656: CALL_OW 322
8660: GO 8630
8662: POP
8663: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
8664: LD_INT 73
8666: PPUSH
8667: LD_VAR 0 2
8671: PPUSH
8672: LD_INT 0
8674: PPUSH
8675: LD_INT 25
8677: PPUSH
8678: CALL_OW 565
8682: PPUSH
8683: CALL_OW 322
// for i = 0 to 40 do
8687: LD_ADDR_VAR 0 3
8691: PUSH
8692: DOUBLE
8693: LD_INT 0
8695: DEC
8696: ST_TO_ADDR
8697: LD_INT 40
8699: PUSH
8700: FOR_TO
8701: IFFALSE 8732
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
8703: LD_VAR 0 3
8707: PPUSH
8708: LD_VAR 0 2
8712: PPUSH
8713: LD_INT 1
8715: PPUSH
8716: LD_VAR 0 3
8720: PPUSH
8721: CALL_OW 565
8725: PPUSH
8726: CALL_OW 324
8730: GO 8700
8732: POP
8733: POP
// end ;
8734: GO 8614
8736: POP
8737: POP
// end ;
8738: LD_VAR 0 1
8742: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
8743: LD_INT 0
8745: PPUSH
8746: PPUSH
8747: PPUSH
// for side = 1 to 8 do
8748: LD_ADDR_VAR 0 3
8752: PUSH
8753: DOUBLE
8754: LD_INT 1
8756: DEC
8757: ST_TO_ADDR
8758: LD_INT 8
8760: PUSH
8761: FOR_TO
8762: IFFALSE 12758
// begin for i = 1 to 73 do
8764: LD_ADDR_VAR 0 4
8768: PUSH
8769: DOUBLE
8770: LD_INT 1
8772: DEC
8773: ST_TO_ADDR
8774: LD_INT 73
8776: PUSH
8777: FOR_TO
8778: IFFALSE 8799
// SetTech ( i , side , state_disabled ) ;
8780: LD_VAR 0 4
8784: PPUSH
8785: LD_VAR 0 3
8789: PPUSH
8790: LD_INT 0
8792: PPUSH
8793: CALL_OW 322
8797: GO 8777
8799: POP
8800: POP
// for i = 0 to 40 do
8801: LD_ADDR_VAR 0 4
8805: PUSH
8806: DOUBLE
8807: LD_INT 0
8809: DEC
8810: ST_TO_ADDR
8811: LD_INT 40
8813: PUSH
8814: FOR_TO
8815: IFFALSE 8836
// SetRestrict ( i , side , false ) ;
8817: LD_VAR 0 4
8821: PPUSH
8822: LD_VAR 0 3
8826: PPUSH
8827: LD_INT 0
8829: PPUSH
8830: CALL_OW 324
8834: GO 8814
8836: POP
8837: POP
// case level of 1 :
8838: LD_VAR 0 1
8842: PUSH
8843: LD_INT 1
8845: DOUBLE
8846: EQUAL
8847: IFTRUE 8851
8849: GO 9004
8851: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8852: LD_INT 35
8854: PPUSH
8855: LD_VAR 0 3
8859: PPUSH
8860: LD_INT 1
8862: PPUSH
8863: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8867: LD_INT 45
8869: PPUSH
8870: LD_VAR 0 3
8874: PPUSH
8875: LD_INT 1
8877: PPUSH
8878: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8882: LD_INT 46
8884: PPUSH
8885: LD_VAR 0 3
8889: PPUSH
8890: LD_INT 1
8892: PPUSH
8893: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8897: LD_INT 47
8899: PPUSH
8900: LD_VAR 0 3
8904: PPUSH
8905: LD_INT 1
8907: PPUSH
8908: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8912: LD_INT 0
8914: PPUSH
8915: LD_VAR 0 3
8919: PPUSH
8920: LD_INT 1
8922: PPUSH
8923: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8927: LD_INT 2
8929: PPUSH
8930: LD_VAR 0 3
8934: PPUSH
8935: LD_INT 1
8937: PPUSH
8938: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8942: LD_INT 4
8944: PPUSH
8945: LD_VAR 0 3
8949: PPUSH
8950: LD_INT 1
8952: PPUSH
8953: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8957: LD_INT 6
8959: PPUSH
8960: LD_VAR 0 3
8964: PPUSH
8965: LD_INT 1
8967: PPUSH
8968: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8972: LD_INT 29
8974: PPUSH
8975: LD_VAR 0 3
8979: PPUSH
8980: LD_INT 1
8982: PPUSH
8983: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8987: LD_INT 31
8989: PPUSH
8990: LD_VAR 0 3
8994: PPUSH
8995: LD_INT 1
8997: PPUSH
8998: CALL_OW 324
// end ; 2 :
9002: GO 12756
9004: LD_INT 2
9006: DOUBLE
9007: EQUAL
9008: IFTRUE 9012
9010: GO 9210
9012: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9013: LD_INT 35
9015: PPUSH
9016: LD_VAR 0 3
9020: PPUSH
9021: LD_INT 1
9023: PPUSH
9024: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9028: LD_INT 45
9030: PPUSH
9031: LD_VAR 0 3
9035: PPUSH
9036: LD_INT 1
9038: PPUSH
9039: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9043: LD_INT 46
9045: PPUSH
9046: LD_VAR 0 3
9050: PPUSH
9051: LD_INT 1
9053: PPUSH
9054: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9058: LD_INT 47
9060: PPUSH
9061: LD_VAR 0 3
9065: PPUSH
9066: LD_INT 1
9068: PPUSH
9069: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9073: LD_INT 1
9075: PPUSH
9076: LD_VAR 0 3
9080: PPUSH
9081: LD_INT 1
9083: PPUSH
9084: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9088: LD_INT 2
9090: PPUSH
9091: LD_VAR 0 3
9095: PPUSH
9096: LD_INT 1
9098: PPUSH
9099: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9103: LD_INT 11
9105: PPUSH
9106: LD_VAR 0 3
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9118: LD_INT 0
9120: PPUSH
9121: LD_VAR 0 3
9125: PPUSH
9126: LD_INT 1
9128: PPUSH
9129: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9133: LD_INT 2
9135: PPUSH
9136: LD_VAR 0 3
9140: PPUSH
9141: LD_INT 1
9143: PPUSH
9144: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9148: LD_INT 4
9150: PPUSH
9151: LD_VAR 0 3
9155: PPUSH
9156: LD_INT 1
9158: PPUSH
9159: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9163: LD_INT 6
9165: PPUSH
9166: LD_VAR 0 3
9170: PPUSH
9171: LD_INT 1
9173: PPUSH
9174: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9178: LD_INT 29
9180: PPUSH
9181: LD_VAR 0 3
9185: PPUSH
9186: LD_INT 1
9188: PPUSH
9189: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9193: LD_INT 31
9195: PPUSH
9196: LD_VAR 0 3
9200: PPUSH
9201: LD_INT 1
9203: PPUSH
9204: CALL_OW 324
// end ; 3 :
9208: GO 12756
9210: LD_INT 3
9212: DOUBLE
9213: EQUAL
9214: IFTRUE 9218
9216: GO 9671
9218: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9219: LD_INT 35
9221: PPUSH
9222: LD_VAR 0 3
9226: PPUSH
9227: LD_INT 1
9229: PPUSH
9230: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9234: LD_INT 45
9236: PPUSH
9237: LD_VAR 0 3
9241: PPUSH
9242: LD_INT 1
9244: PPUSH
9245: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9249: LD_INT 46
9251: PPUSH
9252: LD_VAR 0 3
9256: PPUSH
9257: LD_INT 1
9259: PPUSH
9260: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9264: LD_INT 47
9266: PPUSH
9267: LD_VAR 0 3
9271: PPUSH
9272: LD_INT 1
9274: PPUSH
9275: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9279: LD_INT 1
9281: PPUSH
9282: LD_VAR 0 3
9286: PPUSH
9287: LD_INT 1
9289: PPUSH
9290: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9294: LD_INT 2
9296: PPUSH
9297: LD_VAR 0 3
9301: PPUSH
9302: LD_INT 1
9304: PPUSH
9305: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9309: LD_INT 11
9311: PPUSH
9312: LD_VAR 0 3
9316: PPUSH
9317: LD_INT 1
9319: PPUSH
9320: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9324: LD_INT 48
9326: PPUSH
9327: LD_VAR 0 3
9331: PPUSH
9332: LD_INT 1
9334: PPUSH
9335: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9339: LD_INT 69
9341: PPUSH
9342: LD_VAR 0 3
9346: PPUSH
9347: LD_INT 1
9349: PPUSH
9350: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9354: LD_INT 39
9356: PPUSH
9357: LD_VAR 0 3
9361: PPUSH
9362: LD_INT 1
9364: PPUSH
9365: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9369: LD_INT 43
9371: PPUSH
9372: LD_VAR 0 3
9376: PPUSH
9377: LD_INT 1
9379: PPUSH
9380: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9384: LD_INT 51
9386: PPUSH
9387: LD_VAR 0 3
9391: PPUSH
9392: LD_INT 1
9394: PPUSH
9395: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9399: LD_INT 6
9401: PPUSH
9402: LD_VAR 0 3
9406: PPUSH
9407: LD_INT 1
9409: PPUSH
9410: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9414: LD_INT 0
9416: PPUSH
9417: LD_VAR 0 3
9421: PPUSH
9422: LD_INT 1
9424: PPUSH
9425: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9429: LD_INT 2
9431: PPUSH
9432: LD_VAR 0 3
9436: PPUSH
9437: LD_INT 1
9439: PPUSH
9440: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9444: LD_INT 3
9446: PPUSH
9447: LD_VAR 0 3
9451: PPUSH
9452: LD_INT 1
9454: PPUSH
9455: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9459: LD_INT 4
9461: PPUSH
9462: LD_VAR 0 3
9466: PPUSH
9467: LD_INT 1
9469: PPUSH
9470: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9474: LD_INT 6
9476: PPUSH
9477: LD_VAR 0 3
9481: PPUSH
9482: LD_INT 1
9484: PPUSH
9485: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9489: LD_INT 7
9491: PPUSH
9492: LD_VAR 0 3
9496: PPUSH
9497: LD_INT 1
9499: PPUSH
9500: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9504: LD_INT 8
9506: PPUSH
9507: LD_VAR 0 3
9511: PPUSH
9512: LD_INT 1
9514: PPUSH
9515: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9519: LD_INT 10
9521: PPUSH
9522: LD_VAR 0 3
9526: PPUSH
9527: LD_INT 1
9529: PPUSH
9530: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9534: LD_INT 15
9536: PPUSH
9537: LD_VAR 0 3
9541: PPUSH
9542: LD_INT 1
9544: PPUSH
9545: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9549: LD_INT 16
9551: PPUSH
9552: LD_VAR 0 3
9556: PPUSH
9557: LD_INT 1
9559: PPUSH
9560: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9564: LD_INT 17
9566: PPUSH
9567: LD_VAR 0 3
9571: PPUSH
9572: LD_INT 1
9574: PPUSH
9575: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9579: LD_INT 20
9581: PPUSH
9582: LD_VAR 0 3
9586: PPUSH
9587: LD_INT 1
9589: PPUSH
9590: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9594: LD_INT 26
9596: PPUSH
9597: LD_VAR 0 3
9601: PPUSH
9602: LD_INT 1
9604: PPUSH
9605: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9609: LD_INT 27
9611: PPUSH
9612: LD_VAR 0 3
9616: PPUSH
9617: LD_INT 1
9619: PPUSH
9620: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9624: LD_INT 29
9626: PPUSH
9627: LD_VAR 0 3
9631: PPUSH
9632: LD_INT 1
9634: PPUSH
9635: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9639: LD_INT 31
9641: PPUSH
9642: LD_VAR 0 3
9646: PPUSH
9647: LD_INT 1
9649: PPUSH
9650: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9654: LD_INT 32
9656: PPUSH
9657: LD_VAR 0 3
9661: PPUSH
9662: LD_INT 1
9664: PPUSH
9665: CALL_OW 324
// end ; 4 :
9669: GO 12756
9671: LD_INT 4
9673: DOUBLE
9674: EQUAL
9675: IFTRUE 9679
9677: GO 10627
9679: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9680: LD_INT 35
9682: PPUSH
9683: LD_VAR 0 3
9687: PPUSH
9688: LD_INT 1
9690: PPUSH
9691: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9695: LD_INT 45
9697: PPUSH
9698: LD_VAR 0 3
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9710: LD_INT 46
9712: PPUSH
9713: LD_VAR 0 3
9717: PPUSH
9718: LD_INT 1
9720: PPUSH
9721: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9725: LD_INT 47
9727: PPUSH
9728: LD_VAR 0 3
9732: PPUSH
9733: LD_INT 1
9735: PPUSH
9736: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9740: LD_INT 1
9742: PPUSH
9743: LD_VAR 0 3
9747: PPUSH
9748: LD_INT 1
9750: PPUSH
9751: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9755: LD_INT 2
9757: PPUSH
9758: LD_VAR 0 3
9762: PPUSH
9763: LD_INT 1
9765: PPUSH
9766: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9770: LD_INT 11
9772: PPUSH
9773: LD_VAR 0 3
9777: PPUSH
9778: LD_INT 1
9780: PPUSH
9781: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9785: LD_INT 20
9787: PPUSH
9788: LD_VAR 0 3
9792: PPUSH
9793: LD_INT 1
9795: PPUSH
9796: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9800: LD_INT 48
9802: PPUSH
9803: LD_VAR 0 3
9807: PPUSH
9808: LD_INT 1
9810: PPUSH
9811: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9815: LD_INT 49
9817: PPUSH
9818: LD_VAR 0 3
9822: PPUSH
9823: LD_INT 1
9825: PPUSH
9826: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9830: LD_INT 69
9832: PPUSH
9833: LD_VAR 0 3
9837: PPUSH
9838: LD_INT 1
9840: PPUSH
9841: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9845: LD_INT 39
9847: PPUSH
9848: LD_VAR 0 3
9852: PPUSH
9853: LD_INT 1
9855: PPUSH
9856: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9860: LD_INT 34
9862: PPUSH
9863: LD_VAR 0 3
9867: PPUSH
9868: LD_INT 1
9870: PPUSH
9871: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
9875: LD_INT 42
9877: PPUSH
9878: LD_VAR 0 3
9882: PPUSH
9883: LD_INT 1
9885: PPUSH
9886: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
9890: LD_INT 44
9892: PPUSH
9893: LD_VAR 0 3
9897: PPUSH
9898: LD_INT 1
9900: PPUSH
9901: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
9905: LD_INT 41
9907: PPUSH
9908: LD_VAR 0 3
9912: PPUSH
9913: LD_INT 1
9915: PPUSH
9916: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9920: LD_INT 43
9922: PPUSH
9923: LD_VAR 0 3
9927: PPUSH
9928: LD_INT 1
9930: PPUSH
9931: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
9935: LD_INT 70
9937: PPUSH
9938: LD_VAR 0 3
9942: PPUSH
9943: LD_INT 1
9945: PPUSH
9946: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9950: LD_INT 51
9952: PPUSH
9953: LD_VAR 0 3
9957: PPUSH
9958: LD_INT 1
9960: PPUSH
9961: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
9965: LD_INT 52
9967: PPUSH
9968: LD_VAR 0 3
9972: PPUSH
9973: LD_INT 1
9975: PPUSH
9976: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9980: LD_INT 6
9982: PPUSH
9983: LD_VAR 0 3
9987: PPUSH
9988: LD_INT 1
9990: PPUSH
9991: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9995: LD_INT 15
9997: PPUSH
9998: LD_VAR 0 3
10002: PPUSH
10003: LD_INT 1
10005: PPUSH
10006: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10010: LD_INT 7
10012: PPUSH
10013: LD_VAR 0 3
10017: PPUSH
10018: LD_INT 1
10020: PPUSH
10021: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10025: LD_INT 12
10027: PPUSH
10028: LD_VAR 0 3
10032: PPUSH
10033: LD_INT 1
10035: PPUSH
10036: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10040: LD_INT 18
10042: PPUSH
10043: LD_VAR 0 3
10047: PPUSH
10048: LD_INT 1
10050: PPUSH
10051: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10055: LD_INT 60
10057: PPUSH
10058: LD_VAR 0 3
10062: PPUSH
10063: LD_INT 1
10065: PPUSH
10066: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10070: LD_INT 9
10072: PPUSH
10073: LD_VAR 0 3
10077: PPUSH
10078: LD_INT 1
10080: PPUSH
10081: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10085: LD_INT 30
10087: PPUSH
10088: LD_VAR 0 3
10092: PPUSH
10093: LD_INT 1
10095: PPUSH
10096: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10100: LD_INT 37
10102: PPUSH
10103: LD_VAR 0 3
10107: PPUSH
10108: LD_INT 1
10110: PPUSH
10111: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10115: LD_INT 5
10117: PPUSH
10118: LD_VAR 0 3
10122: PPUSH
10123: LD_INT 1
10125: PPUSH
10126: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10130: LD_INT 66
10132: PPUSH
10133: LD_VAR 0 3
10137: PPUSH
10138: LD_INT 1
10140: PPUSH
10141: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10145: LD_INT 21
10147: PPUSH
10148: LD_VAR 0 3
10152: PPUSH
10153: LD_INT 1
10155: PPUSH
10156: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10160: LD_INT 22
10162: PPUSH
10163: LD_VAR 0 3
10167: PPUSH
10168: LD_INT 1
10170: PPUSH
10171: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10175: LD_INT 54
10177: PPUSH
10178: LD_VAR 0 3
10182: PPUSH
10183: LD_INT 1
10185: PPUSH
10186: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10190: LD_INT 0
10192: PPUSH
10193: LD_VAR 0 3
10197: PPUSH
10198: LD_INT 1
10200: PPUSH
10201: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10205: LD_INT 1
10207: PPUSH
10208: LD_VAR 0 3
10212: PPUSH
10213: LD_INT 1
10215: PPUSH
10216: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10220: LD_INT 2
10222: PPUSH
10223: LD_VAR 0 3
10227: PPUSH
10228: LD_INT 1
10230: PPUSH
10231: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10235: LD_INT 3
10237: PPUSH
10238: LD_VAR 0 3
10242: PPUSH
10243: LD_INT 1
10245: PPUSH
10246: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10250: LD_INT 4
10252: PPUSH
10253: LD_VAR 0 3
10257: PPUSH
10258: LD_INT 1
10260: PPUSH
10261: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10265: LD_INT 5
10267: PPUSH
10268: LD_VAR 0 3
10272: PPUSH
10273: LD_INT 1
10275: PPUSH
10276: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10280: LD_INT 6
10282: PPUSH
10283: LD_VAR 0 3
10287: PPUSH
10288: LD_INT 1
10290: PPUSH
10291: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10295: LD_INT 7
10297: PPUSH
10298: LD_VAR 0 3
10302: PPUSH
10303: LD_INT 1
10305: PPUSH
10306: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10310: LD_INT 8
10312: PPUSH
10313: LD_VAR 0 3
10317: PPUSH
10318: LD_INT 1
10320: PPUSH
10321: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10325: LD_INT 10
10327: PPUSH
10328: LD_VAR 0 3
10332: PPUSH
10333: LD_INT 1
10335: PPUSH
10336: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10340: LD_INT 11
10342: PPUSH
10343: LD_VAR 0 3
10347: PPUSH
10348: LD_INT 1
10350: PPUSH
10351: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10355: LD_INT 12
10357: PPUSH
10358: LD_VAR 0 3
10362: PPUSH
10363: LD_INT 1
10365: PPUSH
10366: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10370: LD_INT 13
10372: PPUSH
10373: LD_VAR 0 3
10377: PPUSH
10378: LD_INT 1
10380: PPUSH
10381: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10385: LD_INT 14
10387: PPUSH
10388: LD_VAR 0 3
10392: PPUSH
10393: LD_INT 1
10395: PPUSH
10396: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10400: LD_INT 15
10402: PPUSH
10403: LD_VAR 0 3
10407: PPUSH
10408: LD_INT 1
10410: PPUSH
10411: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10415: LD_INT 16
10417: PPUSH
10418: LD_VAR 0 3
10422: PPUSH
10423: LD_INT 1
10425: PPUSH
10426: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10430: LD_INT 17
10432: PPUSH
10433: LD_VAR 0 3
10437: PPUSH
10438: LD_INT 1
10440: PPUSH
10441: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10445: LD_INT 19
10447: PPUSH
10448: LD_VAR 0 3
10452: PPUSH
10453: LD_INT 1
10455: PPUSH
10456: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10460: LD_INT 20
10462: PPUSH
10463: LD_VAR 0 3
10467: PPUSH
10468: LD_INT 1
10470: PPUSH
10471: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10475: LD_INT 21
10477: PPUSH
10478: LD_VAR 0 3
10482: PPUSH
10483: LD_INT 1
10485: PPUSH
10486: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10490: LD_INT 23
10492: PPUSH
10493: LD_VAR 0 3
10497: PPUSH
10498: LD_INT 1
10500: PPUSH
10501: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10505: LD_INT 26
10507: PPUSH
10508: LD_VAR 0 3
10512: PPUSH
10513: LD_INT 1
10515: PPUSH
10516: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10520: LD_INT 27
10522: PPUSH
10523: LD_VAR 0 3
10527: PPUSH
10528: LD_INT 1
10530: PPUSH
10531: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10535: LD_INT 28
10537: PPUSH
10538: LD_VAR 0 3
10542: PPUSH
10543: LD_INT 1
10545: PPUSH
10546: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10550: LD_INT 29
10552: PPUSH
10553: LD_VAR 0 3
10557: PPUSH
10558: LD_INT 1
10560: PPUSH
10561: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10565: LD_INT 30
10567: PPUSH
10568: LD_VAR 0 3
10572: PPUSH
10573: LD_INT 1
10575: PPUSH
10576: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10580: LD_INT 31
10582: PPUSH
10583: LD_VAR 0 3
10587: PPUSH
10588: LD_INT 1
10590: PPUSH
10591: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10595: LD_INT 32
10597: PPUSH
10598: LD_VAR 0 3
10602: PPUSH
10603: LD_INT 1
10605: PPUSH
10606: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10610: LD_INT 36
10612: PPUSH
10613: LD_VAR 0 3
10617: PPUSH
10618: LD_INT 1
10620: PPUSH
10621: CALL_OW 324
// end ; 5 :
10625: GO 12756
10627: LD_INT 5
10629: DOUBLE
10630: EQUAL
10631: IFTRUE 10635
10633: GO 11748
10635: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10636: LD_INT 35
10638: PPUSH
10639: LD_VAR 0 3
10643: PPUSH
10644: LD_INT 1
10646: PPUSH
10647: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10651: LD_INT 45
10653: PPUSH
10654: LD_VAR 0 3
10658: PPUSH
10659: LD_INT 1
10661: PPUSH
10662: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10666: LD_INT 46
10668: PPUSH
10669: LD_VAR 0 3
10673: PPUSH
10674: LD_INT 1
10676: PPUSH
10677: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10681: LD_INT 47
10683: PPUSH
10684: LD_VAR 0 3
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10696: LD_INT 1
10698: PPUSH
10699: LD_VAR 0 3
10703: PPUSH
10704: LD_INT 1
10706: PPUSH
10707: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10711: LD_INT 2
10713: PPUSH
10714: LD_VAR 0 3
10718: PPUSH
10719: LD_INT 1
10721: PPUSH
10722: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10726: LD_INT 11
10728: PPUSH
10729: LD_VAR 0 3
10733: PPUSH
10734: LD_INT 1
10736: PPUSH
10737: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10741: LD_INT 20
10743: PPUSH
10744: LD_VAR 0 3
10748: PPUSH
10749: LD_INT 1
10751: PPUSH
10752: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10756: LD_INT 48
10758: PPUSH
10759: LD_VAR 0 3
10763: PPUSH
10764: LD_INT 1
10766: PPUSH
10767: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10771: LD_INT 49
10773: PPUSH
10774: LD_VAR 0 3
10778: PPUSH
10779: LD_INT 1
10781: PPUSH
10782: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10786: LD_INT 69
10788: PPUSH
10789: LD_VAR 0 3
10793: PPUSH
10794: LD_INT 1
10796: PPUSH
10797: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10801: LD_INT 39
10803: PPUSH
10804: LD_VAR 0 3
10808: PPUSH
10809: LD_INT 1
10811: PPUSH
10812: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10816: LD_INT 34
10818: PPUSH
10819: LD_VAR 0 3
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10831: LD_INT 42
10833: PPUSH
10834: LD_VAR 0 3
10838: PPUSH
10839: LD_INT 1
10841: PPUSH
10842: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10846: LD_INT 44
10848: PPUSH
10849: LD_VAR 0 3
10853: PPUSH
10854: LD_INT 1
10856: PPUSH
10857: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10861: LD_INT 41
10863: PPUSH
10864: LD_VAR 0 3
10868: PPUSH
10869: LD_INT 1
10871: PPUSH
10872: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
10876: LD_INT 40
10878: PPUSH
10879: LD_VAR 0 3
10883: PPUSH
10884: LD_INT 1
10886: PPUSH
10887: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10891: LD_INT 43
10893: PPUSH
10894: LD_VAR 0 3
10898: PPUSH
10899: LD_INT 1
10901: PPUSH
10902: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10906: LD_INT 70
10908: PPUSH
10909: LD_VAR 0 3
10913: PPUSH
10914: LD_INT 1
10916: PPUSH
10917: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10921: LD_INT 51
10923: PPUSH
10924: LD_VAR 0 3
10928: PPUSH
10929: LD_INT 1
10931: PPUSH
10932: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10936: LD_INT 52
10938: PPUSH
10939: LD_VAR 0 3
10943: PPUSH
10944: LD_INT 1
10946: PPUSH
10947: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10951: LD_INT 6
10953: PPUSH
10954: LD_VAR 0 3
10958: PPUSH
10959: LD_INT 1
10961: PPUSH
10962: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10966: LD_INT 15
10968: PPUSH
10969: LD_VAR 0 3
10973: PPUSH
10974: LD_INT 1
10976: PPUSH
10977: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10981: LD_INT 7
10983: PPUSH
10984: LD_VAR 0 3
10988: PPUSH
10989: LD_INT 1
10991: PPUSH
10992: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10996: LD_INT 12
10998: PPUSH
10999: LD_VAR 0 3
11003: PPUSH
11004: LD_INT 1
11006: PPUSH
11007: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11011: LD_INT 17
11013: PPUSH
11014: LD_VAR 0 3
11018: PPUSH
11019: LD_INT 1
11021: PPUSH
11022: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11026: LD_INT 18
11028: PPUSH
11029: LD_VAR 0 3
11033: PPUSH
11034: LD_INT 1
11036: PPUSH
11037: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11041: LD_INT 60
11043: PPUSH
11044: LD_VAR 0 3
11048: PPUSH
11049: LD_INT 1
11051: PPUSH
11052: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11056: LD_INT 32
11058: PPUSH
11059: LD_VAR 0 3
11063: PPUSH
11064: LD_INT 1
11066: PPUSH
11067: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11071: LD_INT 9
11073: PPUSH
11074: LD_VAR 0 3
11078: PPUSH
11079: LD_INT 1
11081: PPUSH
11082: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11086: LD_INT 57
11088: PPUSH
11089: LD_VAR 0 3
11093: PPUSH
11094: LD_INT 1
11096: PPUSH
11097: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11101: LD_INT 30
11103: PPUSH
11104: LD_VAR 0 3
11108: PPUSH
11109: LD_INT 1
11111: PPUSH
11112: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11116: LD_INT 37
11118: PPUSH
11119: LD_VAR 0 3
11123: PPUSH
11124: LD_INT 1
11126: PPUSH
11127: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11131: LD_INT 63
11133: PPUSH
11134: LD_VAR 0 3
11138: PPUSH
11139: LD_INT 1
11141: PPUSH
11142: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11146: LD_INT 3
11148: PPUSH
11149: LD_VAR 0 3
11153: PPUSH
11154: LD_INT 1
11156: PPUSH
11157: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11161: LD_INT 4
11163: PPUSH
11164: LD_VAR 0 3
11168: PPUSH
11169: LD_INT 1
11171: PPUSH
11172: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11176: LD_INT 5
11178: PPUSH
11179: LD_VAR 0 3
11183: PPUSH
11184: LD_INT 1
11186: PPUSH
11187: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11191: LD_INT 66
11193: PPUSH
11194: LD_VAR 0 3
11198: PPUSH
11199: LD_INT 1
11201: PPUSH
11202: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11206: LD_INT 21
11208: PPUSH
11209: LD_VAR 0 3
11213: PPUSH
11214: LD_INT 1
11216: PPUSH
11217: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11221: LD_INT 22
11223: PPUSH
11224: LD_VAR 0 3
11228: PPUSH
11229: LD_INT 1
11231: PPUSH
11232: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11236: LD_INT 19
11238: PPUSH
11239: LD_VAR 0 3
11243: PPUSH
11244: LD_INT 1
11246: PPUSH
11247: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11251: LD_INT 54
11253: PPUSH
11254: LD_VAR 0 3
11258: PPUSH
11259: LD_INT 1
11261: PPUSH
11262: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11266: LD_INT 55
11268: PPUSH
11269: LD_VAR 0 3
11273: PPUSH
11274: LD_INT 1
11276: PPUSH
11277: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11281: LD_INT 0
11283: PPUSH
11284: LD_VAR 0 3
11288: PPUSH
11289: LD_INT 1
11291: PPUSH
11292: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11296: LD_INT 1
11298: PPUSH
11299: LD_VAR 0 3
11303: PPUSH
11304: LD_INT 1
11306: PPUSH
11307: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11311: LD_INT 2
11313: PPUSH
11314: LD_VAR 0 3
11318: PPUSH
11319: LD_INT 1
11321: PPUSH
11322: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11326: LD_INT 3
11328: PPUSH
11329: LD_VAR 0 3
11333: PPUSH
11334: LD_INT 1
11336: PPUSH
11337: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11341: LD_INT 4
11343: PPUSH
11344: LD_VAR 0 3
11348: PPUSH
11349: LD_INT 1
11351: PPUSH
11352: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11356: LD_INT 5
11358: PPUSH
11359: LD_VAR 0 3
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11371: LD_INT 6
11373: PPUSH
11374: LD_VAR 0 3
11378: PPUSH
11379: LD_INT 1
11381: PPUSH
11382: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11386: LD_INT 7
11388: PPUSH
11389: LD_VAR 0 3
11393: PPUSH
11394: LD_INT 1
11396: PPUSH
11397: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11401: LD_INT 8
11403: PPUSH
11404: LD_VAR 0 3
11408: PPUSH
11409: LD_INT 1
11411: PPUSH
11412: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11416: LD_INT 10
11418: PPUSH
11419: LD_VAR 0 3
11423: PPUSH
11424: LD_INT 1
11426: PPUSH
11427: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11431: LD_INT 11
11433: PPUSH
11434: LD_VAR 0 3
11438: PPUSH
11439: LD_INT 1
11441: PPUSH
11442: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11446: LD_INT 12
11448: PPUSH
11449: LD_VAR 0 3
11453: PPUSH
11454: LD_INT 1
11456: PPUSH
11457: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11461: LD_INT 13
11463: PPUSH
11464: LD_VAR 0 3
11468: PPUSH
11469: LD_INT 1
11471: PPUSH
11472: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11476: LD_INT 14
11478: PPUSH
11479: LD_VAR 0 3
11483: PPUSH
11484: LD_INT 1
11486: PPUSH
11487: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11491: LD_INT 15
11493: PPUSH
11494: LD_VAR 0 3
11498: PPUSH
11499: LD_INT 1
11501: PPUSH
11502: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11506: LD_INT 16
11508: PPUSH
11509: LD_VAR 0 3
11513: PPUSH
11514: LD_INT 1
11516: PPUSH
11517: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11521: LD_INT 17
11523: PPUSH
11524: LD_VAR 0 3
11528: PPUSH
11529: LD_INT 1
11531: PPUSH
11532: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11536: LD_INT 18
11538: PPUSH
11539: LD_VAR 0 3
11543: PPUSH
11544: LD_INT 1
11546: PPUSH
11547: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11551: LD_INT 19
11553: PPUSH
11554: LD_VAR 0 3
11558: PPUSH
11559: LD_INT 1
11561: PPUSH
11562: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11566: LD_INT 20
11568: PPUSH
11569: LD_VAR 0 3
11573: PPUSH
11574: LD_INT 1
11576: PPUSH
11577: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11581: LD_INT 21
11583: PPUSH
11584: LD_VAR 0 3
11588: PPUSH
11589: LD_INT 1
11591: PPUSH
11592: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11596: LD_INT 23
11598: PPUSH
11599: LD_VAR 0 3
11603: PPUSH
11604: LD_INT 1
11606: PPUSH
11607: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11611: LD_INT 26
11613: PPUSH
11614: LD_VAR 0 3
11618: PPUSH
11619: LD_INT 1
11621: PPUSH
11622: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11626: LD_INT 27
11628: PPUSH
11629: LD_VAR 0 3
11633: PPUSH
11634: LD_INT 1
11636: PPUSH
11637: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11641: LD_INT 28
11643: PPUSH
11644: LD_VAR 0 3
11648: PPUSH
11649: LD_INT 1
11651: PPUSH
11652: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11656: LD_INT 29
11658: PPUSH
11659: LD_VAR 0 3
11663: PPUSH
11664: LD_INT 1
11666: PPUSH
11667: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11671: LD_INT 30
11673: PPUSH
11674: LD_VAR 0 3
11678: PPUSH
11679: LD_INT 1
11681: PPUSH
11682: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11686: LD_INT 31
11688: PPUSH
11689: LD_VAR 0 3
11693: PPUSH
11694: LD_INT 1
11696: PPUSH
11697: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11701: LD_INT 32
11703: PPUSH
11704: LD_VAR 0 3
11708: PPUSH
11709: LD_INT 1
11711: PPUSH
11712: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
11716: LD_INT 33
11718: PPUSH
11719: LD_VAR 0 3
11723: PPUSH
11724: LD_INT 1
11726: PPUSH
11727: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11731: LD_INT 36
11733: PPUSH
11734: LD_VAR 0 3
11738: PPUSH
11739: LD_INT 1
11741: PPUSH
11742: CALL_OW 324
// end ; 6 :
11746: GO 12756
11748: LD_INT 6
11750: DOUBLE
11751: EQUAL
11752: IFTRUE 11756
11754: GO 12681
11756: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11757: LD_INT 35
11759: PPUSH
11760: LD_VAR 0 3
11764: PPUSH
11765: LD_INT 1
11767: PPUSH
11768: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11772: LD_INT 45
11774: PPUSH
11775: LD_VAR 0 3
11779: PPUSH
11780: LD_INT 1
11782: PPUSH
11783: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11787: LD_INT 46
11789: PPUSH
11790: LD_VAR 0 3
11794: PPUSH
11795: LD_INT 1
11797: PPUSH
11798: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11802: LD_INT 47
11804: PPUSH
11805: LD_VAR 0 3
11809: PPUSH
11810: LD_INT 1
11812: PPUSH
11813: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11817: LD_INT 1
11819: PPUSH
11820: LD_VAR 0 3
11824: PPUSH
11825: LD_INT 1
11827: PPUSH
11828: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11832: LD_INT 2
11834: PPUSH
11835: LD_VAR 0 3
11839: PPUSH
11840: LD_INT 1
11842: PPUSH
11843: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11847: LD_INT 11
11849: PPUSH
11850: LD_VAR 0 3
11854: PPUSH
11855: LD_INT 1
11857: PPUSH
11858: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11862: LD_INT 20
11864: PPUSH
11865: LD_VAR 0 3
11869: PPUSH
11870: LD_INT 1
11872: PPUSH
11873: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11877: LD_INT 48
11879: PPUSH
11880: LD_VAR 0 3
11884: PPUSH
11885: LD_INT 1
11887: PPUSH
11888: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11892: LD_INT 49
11894: PPUSH
11895: LD_VAR 0 3
11899: PPUSH
11900: LD_INT 1
11902: PPUSH
11903: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
11907: LD_INT 50
11909: PPUSH
11910: LD_VAR 0 3
11914: PPUSH
11915: LD_INT 1
11917: PPUSH
11918: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11922: LD_INT 69
11924: PPUSH
11925: LD_VAR 0 3
11929: PPUSH
11930: LD_INT 1
11932: PPUSH
11933: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11937: LD_INT 39
11939: PPUSH
11940: LD_VAR 0 3
11944: PPUSH
11945: LD_INT 1
11947: PPUSH
11948: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11952: LD_INT 34
11954: PPUSH
11955: LD_VAR 0 3
11959: PPUSH
11960: LD_INT 1
11962: PPUSH
11963: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11967: LD_INT 42
11969: PPUSH
11970: LD_VAR 0 3
11974: PPUSH
11975: LD_INT 1
11977: PPUSH
11978: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11982: LD_INT 44
11984: PPUSH
11985: LD_VAR 0 3
11989: PPUSH
11990: LD_INT 1
11992: PPUSH
11993: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11997: LD_INT 41
11999: PPUSH
12000: LD_VAR 0 3
12004: PPUSH
12005: LD_INT 1
12007: PPUSH
12008: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12012: LD_INT 13
12014: PPUSH
12015: LD_VAR 0 3
12019: PPUSH
12020: LD_INT 1
12022: PPUSH
12023: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12027: LD_INT 40
12029: PPUSH
12030: LD_VAR 0 3
12034: PPUSH
12035: LD_INT 1
12037: PPUSH
12038: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12042: LD_INT 43
12044: PPUSH
12045: LD_VAR 0 3
12049: PPUSH
12050: LD_INT 1
12052: PPUSH
12053: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12057: LD_INT 70
12059: PPUSH
12060: LD_VAR 0 3
12064: PPUSH
12065: LD_INT 1
12067: PPUSH
12068: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12072: LD_INT 23
12074: PPUSH
12075: LD_VAR 0 3
12079: PPUSH
12080: LD_INT 1
12082: PPUSH
12083: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12087: LD_INT 51
12089: PPUSH
12090: LD_VAR 0 3
12094: PPUSH
12095: LD_INT 1
12097: PPUSH
12098: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12102: LD_INT 52
12104: PPUSH
12105: LD_VAR 0 3
12109: PPUSH
12110: LD_INT 1
12112: PPUSH
12113: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12117: LD_INT 6
12119: PPUSH
12120: LD_VAR 0 3
12124: PPUSH
12125: LD_INT 1
12127: PPUSH
12128: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12132: LD_INT 15
12134: PPUSH
12135: LD_VAR 0 3
12139: PPUSH
12140: LD_INT 1
12142: PPUSH
12143: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12147: LD_INT 7
12149: PPUSH
12150: LD_VAR 0 3
12154: PPUSH
12155: LD_INT 1
12157: PPUSH
12158: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12162: LD_INT 12
12164: PPUSH
12165: LD_VAR 0 3
12169: PPUSH
12170: LD_INT 1
12172: PPUSH
12173: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12177: LD_INT 10
12179: PPUSH
12180: LD_VAR 0 3
12184: PPUSH
12185: LD_INT 1
12187: PPUSH
12188: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12192: LD_INT 17
12194: PPUSH
12195: LD_VAR 0 3
12199: PPUSH
12200: LD_INT 1
12202: PPUSH
12203: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12207: LD_INT 18
12209: PPUSH
12210: LD_VAR 0 3
12214: PPUSH
12215: LD_INT 1
12217: PPUSH
12218: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12222: LD_INT 60
12224: PPUSH
12225: LD_VAR 0 3
12229: PPUSH
12230: LD_INT 1
12232: PPUSH
12233: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12237: LD_INT 61
12239: PPUSH
12240: LD_VAR 0 3
12244: PPUSH
12245: LD_INT 1
12247: PPUSH
12248: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12252: LD_INT 32
12254: PPUSH
12255: LD_VAR 0 3
12259: PPUSH
12260: LD_INT 1
12262: PPUSH
12263: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12267: LD_INT 27
12269: PPUSH
12270: LD_VAR 0 3
12274: PPUSH
12275: LD_INT 1
12277: PPUSH
12278: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12282: LD_INT 36
12284: PPUSH
12285: LD_VAR 0 3
12289: PPUSH
12290: LD_INT 1
12292: PPUSH
12293: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12297: LD_INT 33
12299: PPUSH
12300: LD_VAR 0 3
12304: PPUSH
12305: LD_INT 1
12307: PPUSH
12308: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12312: LD_INT 9
12314: PPUSH
12315: LD_VAR 0 3
12319: PPUSH
12320: LD_INT 1
12322: PPUSH
12323: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12327: LD_INT 38
12329: PPUSH
12330: LD_VAR 0 3
12334: PPUSH
12335: LD_INT 1
12337: PPUSH
12338: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12342: LD_INT 57
12344: PPUSH
12345: LD_VAR 0 3
12349: PPUSH
12350: LD_INT 1
12352: PPUSH
12353: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12357: LD_INT 58
12359: PPUSH
12360: LD_VAR 0 3
12364: PPUSH
12365: LD_INT 1
12367: PPUSH
12368: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12372: LD_INT 28
12374: PPUSH
12375: LD_VAR 0 3
12379: PPUSH
12380: LD_INT 1
12382: PPUSH
12383: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12387: LD_INT 29
12389: PPUSH
12390: LD_VAR 0 3
12394: PPUSH
12395: LD_INT 1
12397: PPUSH
12398: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12402: LD_INT 30
12404: PPUSH
12405: LD_VAR 0 3
12409: PPUSH
12410: LD_INT 1
12412: PPUSH
12413: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12417: LD_INT 37
12419: PPUSH
12420: LD_VAR 0 3
12424: PPUSH
12425: LD_INT 1
12427: PPUSH
12428: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12432: LD_INT 63
12434: PPUSH
12435: LD_VAR 0 3
12439: PPUSH
12440: LD_INT 1
12442: PPUSH
12443: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12447: LD_INT 64
12449: PPUSH
12450: LD_VAR 0 3
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12462: LD_INT 3
12464: PPUSH
12465: LD_VAR 0 3
12469: PPUSH
12470: LD_INT 1
12472: PPUSH
12473: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12477: LD_INT 4
12479: PPUSH
12480: LD_VAR 0 3
12484: PPUSH
12485: LD_INT 1
12487: PPUSH
12488: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12492: LD_INT 5
12494: PPUSH
12495: LD_VAR 0 3
12499: PPUSH
12500: LD_INT 1
12502: PPUSH
12503: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12507: LD_INT 8
12509: PPUSH
12510: LD_VAR 0 3
12514: PPUSH
12515: LD_INT 1
12517: PPUSH
12518: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12522: LD_INT 66
12524: PPUSH
12525: LD_VAR 0 3
12529: PPUSH
12530: LD_INT 1
12532: PPUSH
12533: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12537: LD_INT 67
12539: PPUSH
12540: LD_VAR 0 3
12544: PPUSH
12545: LD_INT 1
12547: PPUSH
12548: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12552: LD_INT 21
12554: PPUSH
12555: LD_VAR 0 3
12559: PPUSH
12560: LD_INT 1
12562: PPUSH
12563: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12567: LD_INT 22
12569: PPUSH
12570: LD_VAR 0 3
12574: PPUSH
12575: LD_INT 1
12577: PPUSH
12578: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12582: LD_INT 19
12584: PPUSH
12585: LD_VAR 0 3
12589: PPUSH
12590: LD_INT 1
12592: PPUSH
12593: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12597: LD_INT 26
12599: PPUSH
12600: LD_VAR 0 3
12604: PPUSH
12605: LD_INT 1
12607: PPUSH
12608: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12612: LD_INT 54
12614: PPUSH
12615: LD_VAR 0 3
12619: PPUSH
12620: LD_INT 1
12622: PPUSH
12623: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12627: LD_INT 55
12629: PPUSH
12630: LD_VAR 0 3
12634: PPUSH
12635: LD_INT 1
12637: PPUSH
12638: CALL_OW 322
// for i = 0 to 39 do
12642: LD_ADDR_VAR 0 4
12646: PUSH
12647: DOUBLE
12648: LD_INT 0
12650: DEC
12651: ST_TO_ADDR
12652: LD_INT 39
12654: PUSH
12655: FOR_TO
12656: IFFALSE 12677
// SetRestrict ( i , side , true ) ;
12658: LD_VAR 0 4
12662: PPUSH
12663: LD_VAR 0 3
12667: PPUSH
12668: LD_INT 1
12670: PPUSH
12671: CALL_OW 324
12675: GO 12655
12677: POP
12678: POP
// end ; else
12679: GO 12756
12681: POP
// begin for i = 1 to 73 do
12682: LD_ADDR_VAR 0 4
12686: PUSH
12687: DOUBLE
12688: LD_INT 1
12690: DEC
12691: ST_TO_ADDR
12692: LD_INT 73
12694: PUSH
12695: FOR_TO
12696: IFFALSE 12717
// SetTech ( i , side , state_enabled ) ;
12698: LD_VAR 0 4
12702: PPUSH
12703: LD_VAR 0 3
12707: PPUSH
12708: LD_INT 1
12710: PPUSH
12711: CALL_OW 322
12715: GO 12695
12717: POP
12718: POP
// for i = 0 to 39 do
12719: LD_ADDR_VAR 0 4
12723: PUSH
12724: DOUBLE
12725: LD_INT 0
12727: DEC
12728: ST_TO_ADDR
12729: LD_INT 39
12731: PUSH
12732: FOR_TO
12733: IFFALSE 12754
// SetRestrict ( i , side , true ) ;
12735: LD_VAR 0 4
12739: PPUSH
12740: LD_VAR 0 3
12744: PPUSH
12745: LD_INT 1
12747: PPUSH
12748: CALL_OW 324
12752: GO 12732
12754: POP
12755: POP
// end ; end ; end ;
12756: GO 8761
12758: POP
12759: POP
// end ;
12760: LD_VAR 0 2
12764: RET
