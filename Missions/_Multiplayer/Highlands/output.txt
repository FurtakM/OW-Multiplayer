// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , amount_of_apemen , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , extra_sib_deposits_locations , normal_oil_deposits_locations , normal_sib_deposits_locations , battle_flags_id , Side_Comps ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function init_map ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// normal_oil_deposits_locations := [ [ 65 , 49 ] , [ 157 , 62 ] , [ 192 , 143 ] , [ 109 , 147 ] ] ;
   4: LD_ADDR_EXP 40
   8: PUSH
   9: LD_INT 65
  11: PUSH
  12: LD_INT 49
  14: PUSH
  15: EMPTY
  16: LIST
  17: LIST
  18: PUSH
  19: LD_INT 157
  21: PUSH
  22: LD_INT 62
  24: PUSH
  25: EMPTY
  26: LIST
  27: LIST
  28: PUSH
  29: LD_INT 192
  31: PUSH
  32: LD_INT 143
  34: PUSH
  35: EMPTY
  36: LIST
  37: LIST
  38: PUSH
  39: LD_INT 109
  41: PUSH
  42: LD_INT 147
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: EMPTY
  50: LIST
  51: LIST
  52: LIST
  53: LIST
  54: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 22 , 33 ] , [ 179 , 43 ] , [ 228 , 151 ] , [ 83 , 154 ] ] ;
  55: LD_ADDR_EXP 38
  59: PUSH
  60: LD_INT 22
  62: PUSH
  63: LD_INT 33
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 179
  72: PUSH
  73: LD_INT 43
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: LD_INT 228
  82: PUSH
  83: LD_INT 151
  85: PUSH
  86: EMPTY
  87: LIST
  88: LIST
  89: PUSH
  90: LD_INT 83
  92: PUSH
  93: LD_INT 154
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: PUSH
 100: EMPTY
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 39 , 18 ] , [ 138 , 27 ] , [ 222 , 157 ] , [ 82 , 115 ] ] ;
 106: LD_ADDR_EXP 41
 110: PUSH
 111: LD_INT 39
 113: PUSH
 114: LD_INT 18
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: PUSH
 121: LD_INT 138
 123: PUSH
 124: LD_INT 27
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: PUSH
 131: LD_INT 222
 133: PUSH
 134: LD_INT 157
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: PUSH
 141: LD_INT 82
 143: PUSH
 144: LD_INT 115
 146: PUSH
 147: EMPTY
 148: LIST
 149: LIST
 150: PUSH
 151: EMPTY
 152: LIST
 153: LIST
 154: LIST
 155: LIST
 156: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 35 , 55 ] , [ 188 , 70 ] , [ 214 , 123 ] , [ 66 , 120 ] ] ;
 157: LD_ADDR_EXP 39
 161: PUSH
 162: LD_INT 35
 164: PUSH
 165: LD_INT 55
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: PUSH
 172: LD_INT 188
 174: PUSH
 175: LD_INT 70
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: LD_INT 214
 184: PUSH
 185: LD_INT 123
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: LD_INT 66
 194: PUSH
 195: LD_INT 120
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: ST_TO_ADDR
// depot_def := [ [ 54 , 45 , 3 ] , [ 161 , 55 , 5 ] , [ 98 , 142 , 4 ] , [ 194 , 133 , 1 ] ] ;
 208: LD_ADDR_EXP 35
 212: PUSH
 213: LD_INT 54
 215: PUSH
 216: LD_INT 45
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: PUSH
 227: LD_INT 161
 229: PUSH
 230: LD_INT 55
 232: PUSH
 233: LD_INT 5
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 98
 243: PUSH
 244: LD_INT 142
 246: PUSH
 247: LD_INT 4
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: LIST
 254: PUSH
 255: LD_INT 194
 257: PUSH
 258: LD_INT 133
 260: PUSH
 261: LD_INT 1
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: LIST
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: LIST
 274: ST_TO_ADDR
// start_def := [ [ 53 , 52 ] , [ 152 , 45 ] , [ 91 , 140 ] , [ 200 , 132 ] ] ;
 275: LD_ADDR_EXP 37
 279: PUSH
 280: LD_INT 53
 282: PUSH
 283: LD_INT 52
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 152
 292: PUSH
 293: LD_INT 45
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: LD_INT 91
 302: PUSH
 303: LD_INT 140
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 200
 312: PUSH
 313: LD_INT 132
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: ST_TO_ADDR
// breastworks_def := [ [ [ 76 , 75 , 5 ] , [ 72 , 34 , 4 ] , [ 81 , 60 , 5 ] , [ 31 , 31 , 2 ] ] , [ [ 170 , 79 , 5 ] , [ 139 , 42 , 1 ] , [ 171 , 58 , 4 ] , [ 149 , 25 , 3 ] ] , [ [ 114 , 163 , 5 ] , [ 114 , 138 , 4 ] , [ 97 , 116 , 3 ] , [ 81 , 135 , 1 ] ] , [ [ 179 , 116 , 2 ] , [ 175 , 145 , 1 ] , [ 217 , 149 , 4 ] , [ 202 , 158 , 0 ] ] ] ;
 326: LD_ADDR_EXP 36
 330: PUSH
 331: LD_INT 76
 333: PUSH
 334: LD_INT 75
 336: PUSH
 337: LD_INT 5
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 72
 347: PUSH
 348: LD_INT 34
 350: PUSH
 351: LD_INT 4
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 81
 361: PUSH
 362: LD_INT 60
 364: PUSH
 365: LD_INT 5
 367: PUSH
 368: EMPTY
 369: LIST
 370: LIST
 371: LIST
 372: PUSH
 373: LD_INT 31
 375: PUSH
 376: LD_INT 31
 378: PUSH
 379: LD_INT 2
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: LIST
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: PUSH
 393: LD_INT 170
 395: PUSH
 396: LD_INT 79
 398: PUSH
 399: LD_INT 5
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 139
 409: PUSH
 410: LD_INT 42
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: PUSH
 421: LD_INT 171
 423: PUSH
 424: LD_INT 58
 426: PUSH
 427: LD_INT 4
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 149
 437: PUSH
 438: LD_INT 25
 440: PUSH
 441: LD_INT 3
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 114
 457: PUSH
 458: LD_INT 163
 460: PUSH
 461: LD_INT 5
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 114
 471: PUSH
 472: LD_INT 138
 474: PUSH
 475: LD_INT 4
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: PUSH
 483: LD_INT 97
 485: PUSH
 486: LD_INT 116
 488: PUSH
 489: LD_INT 3
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PUSH
 497: LD_INT 81
 499: PUSH
 500: LD_INT 135
 502: PUSH
 503: LD_INT 1
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 179
 519: PUSH
 520: LD_INT 116
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 175
 533: PUSH
 534: LD_INT 145
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 217
 547: PUSH
 548: LD_INT 149
 550: PUSH
 551: LD_INT 4
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 202
 561: PUSH
 562: LD_INT 158
 564: PUSH
 565: LD_INT 0
 567: PUSH
 568: EMPTY
 569: LIST
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: ST_TO_ADDR
// for i in normal_oil_deposits_locations do
 585: LD_ADDR_VAR 0 2
 589: PUSH
 590: LD_EXP 40
 594: PUSH
 595: FOR_IN
 596: IFFALSE 625
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 598: LD_VAR 0 2
 602: PUSH
 603: LD_INT 1
 605: ARRAY
 606: PPUSH
 607: LD_VAR 0 2
 611: PUSH
 612: LD_INT 2
 614: ARRAY
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: CALL_OW 62
 623: GO 595
 625: POP
 626: POP
// if def_extra_oil_deposits then
 627: LD_EXP 6
 631: IFFALSE 675
// for i in extra_oil_deposits_locations do
 633: LD_ADDR_VAR 0 2
 637: PUSH
 638: LD_EXP 38
 642: PUSH
 643: FOR_IN
 644: IFFALSE 673
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 646: LD_VAR 0 2
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: LD_VAR 0 2
 659: PUSH
 660: LD_INT 2
 662: ARRAY
 663: PPUSH
 664: LD_INT 2
 666: PPUSH
 667: CALL_OW 62
 671: GO 643
 673: POP
 674: POP
// if def_extra_sib_deposits > 0 then
 675: LD_EXP 7
 679: PUSH
 680: LD_INT 0
 682: GREATER
 683: IFFALSE 779
// begin for i in normal_sib_deposits_locations do
 685: LD_ADDR_VAR 0 2
 689: PUSH
 690: LD_EXP 41
 694: PUSH
 695: FOR_IN
 696: IFFALSE 725
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 698: LD_VAR 0 2
 702: PUSH
 703: LD_INT 1
 705: ARRAY
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 2
 714: ARRAY
 715: PPUSH
 716: LD_INT 3
 718: PPUSH
 719: CALL_OW 62
 723: GO 695
 725: POP
 726: POP
// if def_extra_sib_deposits = 2 then
 727: LD_EXP 7
 731: PUSH
 732: LD_INT 2
 734: EQUAL
 735: IFFALSE 779
// for i in extra_sib_deposits_locations do
 737: LD_ADDR_VAR 0 2
 741: PUSH
 742: LD_EXP 39
 746: PUSH
 747: FOR_IN
 748: IFFALSE 777
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 750: LD_VAR 0 2
 754: PUSH
 755: LD_INT 1
 757: ARRAY
 758: PPUSH
 759: LD_VAR 0 2
 763: PUSH
 764: LD_INT 2
 766: ARRAY
 767: PPUSH
 768: LD_INT 3
 770: PPUSH
 771: CALL_OW 62
 775: GO 747
 777: POP
 778: POP
// end ; end ;
 779: LD_VAR 0 1
 783: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 784: LD_INT 0
 786: PPUSH
 787: PPUSH
 788: PPUSH
 789: PPUSH
 790: PPUSH
 791: PPUSH
 792: PPUSH
 793: PPUSH
 794: PPUSH
// if MultiPlayer then
 795: LD_OWVAR 4
 799: IFFALSE 863
// begin Game_Type = mp_game_type ;
 801: LD_ADDR_EXP 16
 805: PUSH
 806: LD_OWVAR 6
 810: ST_TO_ADDR
// Your_Side = mp_player_side ;
 811: LD_ADDR_OWVAR 2
 815: PUSH
 816: LD_OWVAR 7
 820: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 821: LD_ADDR_EXP 32
 825: PUSH
 826: LD_OWVAR 17
 830: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 831: LD_ADDR_EXP 30
 835: PUSH
 836: LD_OWVAR 15
 840: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 841: LD_ADDR_EXP 33
 845: PUSH
 846: LD_OWVAR 16
 850: ST_TO_ADDR
// Teams = mp_teams ;
 851: LD_ADDR_EXP 31
 855: PUSH
 856: LD_OWVAR 12
 860: ST_TO_ADDR
// end else
 861: GO 1064
// begin Game_Type = 2 ;
 863: LD_ADDR_EXP 16
 867: PUSH
 868: LD_INT 2
 870: ST_TO_ADDR
// Your_Side = 4 ;
 871: LD_ADDR_OWVAR 2
 875: PUSH
 876: LD_INT 4
 878: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 879: LD_ADDR_EXP 32
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: LD_INT 3
 889: PUSH
 890: LD_INT 0
 892: PUSH
 893: LD_INT 1
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 2
 901: PUSH
 902: LD_INT 4
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 918: LD_ADDR_EXP 30
 922: PUSH
 923: LD_INT 0
 925: PUSH
 926: LD_INT 1
 928: PUSH
 929: LD_INT 0
 931: PUSH
 932: LD_INT 2
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 2
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 957: LD_ADDR_EXP 33
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 3
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: LD_INT 2
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: LD_INT 1
 979: PUSH
 980: LD_INT 3
 982: PUSH
 983: LD_INT 0
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 996: LD_ADDR_EXP 43
1000: PUSH
1001: LD_INT 0
1003: PUSH
1004: LD_INT 0
1006: PUSH
1007: LD_INT 0
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: LD_INT 0
1015: PUSH
1016: LD_INT 0
1018: PUSH
1019: LD_INT 0
1021: PUSH
1022: LD_INT 0
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 4 , 7 ] ] ;
1035: LD_ADDR_EXP 31
1039: PUSH
1040: LD_INT 2
1042: PUSH
1043: LD_INT 6
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: PUSH
1050: LD_INT 4
1052: PUSH
1053: LD_INT 7
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: ST_TO_ADDR
// end ; if MultiPlayer then
1064: LD_OWVAR 4
1068: IFFALSE 1267
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1070: LD_ADDR_EXP 1
1074: PUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 426
1082: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1083: LD_ADDR_EXP 2
1087: PUSH
1088: LD_INT 1
1090: PPUSH
1091: CALL_OW 426
1095: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1096: LD_ADDR_EXP 3
1100: PUSH
1101: LD_INT 2
1103: PPUSH
1104: CALL_OW 426
1108: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1109: LD_ADDR_EXP 4
1113: PUSH
1114: LD_INT 3
1116: PPUSH
1117: CALL_OW 426
1121: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1122: LD_ADDR_EXP 5
1126: PUSH
1127: LD_INT 4
1129: PPUSH
1130: CALL_OW 426
1134: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1135: LD_ADDR_EXP 6
1139: PUSH
1140: LD_INT 5
1142: PPUSH
1143: CALL_OW 426
1147: ST_TO_ADDR
// def_extra_sib_deposits = GetMultiplayerSetting ( 6 ) ;
1148: LD_ADDR_EXP 7
1152: PUSH
1153: LD_INT 6
1155: PPUSH
1156: CALL_OW 426
1160: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1161: LD_ADDR_EXP 8
1165: PUSH
1166: LD_INT 10
1168: PPUSH
1169: CALL_OW 426
1173: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1174: LD_ADDR_EXP 9
1178: PUSH
1179: LD_INT 11
1181: PPUSH
1182: CALL_OW 426
1186: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1187: LD_ADDR_EXP 10
1191: PUSH
1192: LD_INT 12
1194: PPUSH
1195: CALL_OW 426
1199: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1200: LD_ADDR_EXP 11
1204: PUSH
1205: LD_INT 13
1207: PPUSH
1208: CALL_OW 426
1212: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1213: LD_ADDR_EXP 12
1217: PUSH
1218: LD_INT 14
1220: PPUSH
1221: CALL_OW 426
1225: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1226: LD_ADDR_EXP 13
1230: PUSH
1231: LD_INT 15
1233: PPUSH
1234: CALL_OW 426
1238: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
1239: LD_ADDR_EXP 14
1243: PUSH
1244: LD_INT 20
1246: PPUSH
1247: CALL_OW 426
1251: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
1252: LD_ADDR_VAR 0 9
1256: PUSH
1257: LD_INT 22
1259: PPUSH
1260: CALL_OW 426
1264: ST_TO_ADDR
// end else
1265: GO 1391
// begin randomize ;
1267: CALL_OW 10
// def_base_level = 2 ;
1271: LD_ADDR_EXP 1
1275: PUSH
1276: LD_INT 2
1278: ST_TO_ADDR
// def_amount_of_people = 1 ;
1279: LD_ADDR_EXP 2
1283: PUSH
1284: LD_INT 1
1286: ST_TO_ADDR
// def_skill_level = 1 ;
1287: LD_ADDR_EXP 3
1291: PUSH
1292: LD_INT 1
1294: ST_TO_ADDR
// def_starting_resources = 2 ;
1295: LD_ADDR_EXP 4
1299: PUSH
1300: LD_INT 2
1302: ST_TO_ADDR
// def_shipments_density = 50 ;
1303: LD_ADDR_EXP 5
1307: PUSH
1308: LD_INT 50
1310: ST_TO_ADDR
// def_extra_oil_deposits = 1 ;
1311: LD_ADDR_EXP 6
1315: PUSH
1316: LD_INT 1
1318: ST_TO_ADDR
// def_extra_sib_deposits = 1 ;
1319: LD_ADDR_EXP 7
1323: PUSH
1324: LD_INT 1
1326: ST_TO_ADDR
// def_shared_vision = 1 ;
1327: LD_ADDR_EXP 8
1331: PUSH
1332: LD_INT 1
1334: ST_TO_ADDR
// def_morale_flags = 2 ;
1335: LD_ADDR_EXP 9
1339: PUSH
1340: LD_INT 2
1342: ST_TO_ADDR
// def_siberite_detection = 1 ;
1343: LD_ADDR_EXP 10
1347: PUSH
1348: LD_INT 1
1350: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1351: LD_ADDR_EXP 11
1355: PUSH
1356: LD_INT 3
1358: ST_TO_ADDR
// def_people_respawning = 2 ;
1359: LD_ADDR_EXP 12
1363: PUSH
1364: LD_INT 2
1366: ST_TO_ADDR
// def_siberite_bomb = 2 ;
1367: LD_ADDR_EXP 13
1371: PUSH
1372: LD_INT 2
1374: ST_TO_ADDR
// def_builduptime = 1 ;
1375: LD_ADDR_EXP 14
1379: PUSH
1380: LD_INT 1
1382: ST_TO_ADDR
// tech_level = 4 ;
1383: LD_ADDR_VAR 0 9
1387: PUSH
1388: LD_INT 4
1390: ST_TO_ADDR
// end ; if isSGUI then
1391: LD_OWVAR 83
1395: IFFALSE 1403
// setMpTechs ( ) else
1397: CALL 8763 0 0
1401: GO 1416
// SetMpTechLevel ( tech_level + 1 ) ;
1403: LD_VAR 0 9
1407: PUSH
1408: LD_INT 1
1410: PLUS
1411: PPUSH
1412: CALL 8910 0 1
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1416: LD_ADDR_EXP 17
1420: PUSH
1421: LD_INT 0
1423: PUSH
1424: LD_INT 1
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_EXP 1
1443: PUSH
1444: LD_INT 1
1446: PLUS
1447: ARRAY
1448: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1449: LD_ADDR_EXP 18
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 2
1462: PUSH
1463: LD_INT 4
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_EXP 1
1476: PUSH
1477: LD_INT 1
1479: PLUS
1480: ARRAY
1481: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1482: LD_ADDR_EXP 20
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: LD_INT 3
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: LD_INT 5
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: PUSH
1505: LD_EXP 3
1509: PUSH
1510: LD_INT 1
1512: PLUS
1513: ARRAY
1514: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1515: LD_ADDR_EXP 22
1519: PUSH
1520: LD_INT 0
1522: PUSH
1523: LD_INT 0
1525: PUSH
1526: LD_INT 0
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: PUSH
1534: LD_INT 30
1536: PUSH
1537: LD_INT 0
1539: PUSH
1540: LD_INT 0
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 50
1550: PUSH
1551: LD_INT 20
1553: PUSH
1554: LD_INT 0
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: LIST
1561: PUSH
1562: LD_INT 80
1564: PUSH
1565: LD_INT 40
1567: PUSH
1568: LD_INT 20
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: PUSH
1582: LD_EXP 4
1586: PUSH
1587: LD_INT 1
1589: PLUS
1590: ARRAY
1591: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1592: LD_ADDR_EXP 21
1596: PUSH
1597: LD_INT 10
1599: PUSH
1600: EMPTY
1601: LIST
1602: PUSH
1603: LD_INT 7
1605: PUSH
1606: LD_INT 14
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: PUSH
1613: LD_INT 6
1615: PUSH
1616: LD_INT 12
1618: PUSH
1619: LD_INT 18
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: LD_INT 10
1632: PUSH
1633: LD_INT 15
1635: PUSH
1636: LD_INT 20
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: PUSH
1651: LD_EXP 4
1655: PUSH
1656: LD_INT 1
1658: PLUS
1659: ARRAY
1660: ST_TO_ADDR
// number_of_people = def_amount_of_people + 4 ;
1661: LD_ADDR_EXP 19
1665: PUSH
1666: LD_EXP 2
1670: PUSH
1671: LD_INT 4
1673: PLUS
1674: ST_TO_ADDR
// shipments_density = 150 - ( def_shipments_density + 1 ) ;
1675: LD_ADDR_EXP 23
1679: PUSH
1680: LD_INT 150
1682: PUSH
1683: LD_EXP 5
1687: PUSH
1688: LD_INT 1
1690: PLUS
1691: MINUS
1692: ST_TO_ADDR
// amount_of_apemen = [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1693: LD_ADDR_EXP 27
1697: PUSH
1698: LD_INT 0
1700: PUSH
1701: LD_INT 3
1703: PUSH
1704: LD_INT 6
1706: PUSH
1707: LD_INT 9
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: PUSH
1716: LD_EXP 11
1720: PUSH
1721: LD_INT 1
1723: PLUS
1724: ARRAY
1725: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1726: LD_ADDR_EXP 25
1730: PUSH
1731: LD_INT 0
1733: PUSH
1734: LD_INT 8400
1736: PUSH
1737: LD_INT 1750
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_EXP 12
1749: PUSH
1750: LD_INT 1
1752: PLUS
1753: ARRAY
1754: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1755: LD_ADDR_EXP 26
1759: PUSH
1760: LD_INT 0
1762: PUSH
1763: LD_INT 21000
1765: PUSH
1766: LD_INT 4200
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: PUSH
1774: LD_EXP 12
1778: PUSH
1779: LD_INT 1
1781: PLUS
1782: ARRAY
1783: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1784: LD_ADDR_EXP 24
1788: PUSH
1789: LD_INT 1
1791: NEG
1792: PUSH
1793: LD_INT 350
1795: PUSH
1796: LD_INT 700
1798: PUSH
1799: LD_INT 1400
1801: PUSH
1802: LD_INT 0
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: PUSH
1812: LD_EXP 9
1816: PUSH
1817: LD_INT 1
1819: PLUS
1820: ARRAY
1821: ST_TO_ADDR
// battle_flags_id = [ ] ;
1822: LD_ADDR_EXP 42
1826: PUSH
1827: EMPTY
1828: ST_TO_ADDR
// siberite_bomb_Delay = [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1829: LD_ADDR_EXP 28
1833: PUSH
1834: LD_INT 0
1836: PUSH
1837: LD_INT 1
1839: PUSH
1840: LD_INT 63000
1842: PUSH
1843: LD_INT 126000
1845: PUSH
1846: LD_INT 189000
1848: PUSH
1849: LD_INT 252000
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: PUSH
1860: LD_EXP 13
1864: PUSH
1865: LD_INT 1
1867: PLUS
1868: ARRAY
1869: ST_TO_ADDR
// end ;
1870: LD_VAR 0 1
1874: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1875: LD_INT 0
1877: PPUSH
1878: PPUSH
1879: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1880: LD_ADDR_EXP 34
1884: PUSH
1885: LD_EXP 30
1889: PUSH
1890: LD_INT 0
1892: PUSH
1893: EMPTY
1894: LIST
1895: DIFF
1896: PUSH
1897: LD_INT 1
1899: GREATER
1900: ST_TO_ADDR
// if not Team_Game then
1901: LD_EXP 34
1905: NOT
1906: IFFALSE 2004
// begin for i = 1 to 8 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 8
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2000
// for j = 1 to 8 do
1924: LD_ADDR_VAR 0 3
1928: PUSH
1929: DOUBLE
1930: LD_INT 1
1932: DEC
1933: ST_TO_ADDR
1934: LD_INT 8
1936: PUSH
1937: FOR_TO
1938: IFFALSE 1996
// if i <> j then
1940: LD_VAR 0 2
1944: PUSH
1945: LD_VAR 0 3
1949: NONEQUAL
1950: IFFALSE 1974
// SetAttitude ( i , j , att_neutral , true ) else
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 3
1961: PPUSH
1962: LD_INT 0
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: CALL_OW 80
1972: GO 1994
// SetAttitude ( i , j , att_friend , true ) ;
1974: LD_VAR 0 2
1978: PPUSH
1979: LD_VAR 0 3
1983: PPUSH
1984: LD_INT 1
1986: PPUSH
1987: LD_INT 1
1989: PPUSH
1990: CALL_OW 80
1994: GO 1937
1996: POP
1997: POP
1998: GO 1921
2000: POP
2001: POP
// end else
2002: GO 2179
// begin if def_shared_vision then
2004: LD_EXP 8
2008: IFFALSE 2073
// begin for i in Teams do
2010: LD_ADDR_VAR 0 2
2014: PUSH
2015: LD_EXP 31
2019: PUSH
2020: FOR_IN
2021: IFFALSE 2071
// for j = 2 to i do
2023: LD_ADDR_VAR 0 3
2027: PUSH
2028: DOUBLE
2029: LD_INT 2
2031: DEC
2032: ST_TO_ADDR
2033: LD_VAR 0 2
2037: PUSH
2038: FOR_TO
2039: IFFALSE 2067
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2041: LD_VAR 0 2
2045: PUSH
2046: LD_VAR 0 3
2050: ARRAY
2051: PPUSH
2052: LD_VAR 0 2
2056: PUSH
2057: LD_INT 1
2059: ARRAY
2060: PPUSH
2061: CALL_OW 343
2065: GO 2038
2067: POP
2068: POP
2069: GO 2020
2071: POP
2072: POP
// end ; for i = 1 to 8 do
2073: LD_ADDR_VAR 0 2
2077: PUSH
2078: DOUBLE
2079: LD_INT 1
2081: DEC
2082: ST_TO_ADDR
2083: LD_INT 8
2085: PUSH
2086: FOR_TO
2087: IFFALSE 2177
// for j = 1 to 8 do
2089: LD_ADDR_VAR 0 3
2093: PUSH
2094: DOUBLE
2095: LD_INT 1
2097: DEC
2098: ST_TO_ADDR
2099: LD_INT 8
2101: PUSH
2102: FOR_TO
2103: IFFALSE 2173
// if Side_Teams [ i ] = Side_Teams [ j ] then
2105: LD_EXP 30
2109: PUSH
2110: LD_VAR 0 2
2114: ARRAY
2115: PUSH
2116: LD_EXP 30
2120: PUSH
2121: LD_VAR 0 3
2125: ARRAY
2126: EQUAL
2127: IFFALSE 2151
// SetAttitude ( i , j , att_friend , true ) else
2129: LD_VAR 0 2
2133: PPUSH
2134: LD_VAR 0 3
2138: PPUSH
2139: LD_INT 1
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: CALL_OW 80
2149: GO 2171
// SetAttitude ( i , j , att_enemy , true ) ;
2151: LD_VAR 0 2
2155: PPUSH
2156: LD_VAR 0 3
2160: PPUSH
2161: LD_INT 2
2163: PPUSH
2164: LD_INT 1
2166: PPUSH
2167: CALL_OW 80
2171: GO 2102
2173: POP
2174: POP
2175: GO 2086
2177: POP
2178: POP
// end ; end ;
2179: LD_VAR 0 1
2183: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2184: LD_INT 0
2186: PPUSH
2187: PPUSH
2188: PPUSH
2189: PPUSH
// result := [ ] ;
2190: LD_ADDR_VAR 0 7
2194: PUSH
2195: EMPTY
2196: ST_TO_ADDR
// for i := 1 to count do
2197: LD_ADDR_VAR 0 8
2201: PUSH
2202: DOUBLE
2203: LD_INT 1
2205: DEC
2206: ST_TO_ADDR
2207: LD_VAR 0 1
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2631
// begin uc_direction := Rand ( 0 , 5 ) ;
2215: LD_ADDR_OWVAR 24
2219: PUSH
2220: LD_INT 0
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: CALL_OW 12
2230: ST_TO_ADDR
// if commander then
2231: LD_LOC 1
2235: IFFALSE 2344
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2237: LD_ADDR_OWVAR 26
2241: PUSH
2242: LD_OWVAR 19
2246: PUSH
2247: LD_OWVAR 20
2251: ARRAY
2252: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2253: LD_INT 1
2255: PPUSH
2256: LD_INT 2
2258: PPUSH
2259: CALL_OW 12
2263: PPUSH
2264: LD_VAR 0 2
2268: PPUSH
2269: LD_EXP 20
2273: PUSH
2274: LD_INT 2
2276: PLUS
2277: PPUSH
2278: CALL_OW 380
// hc_importance := 105 ;
2282: LD_ADDR_OWVAR 32
2286: PUSH
2287: LD_INT 105
2289: ST_TO_ADDR
// commander := false ;
2290: LD_ADDR_LOC 1
2294: PUSH
2295: LD_INT 0
2297: ST_TO_ADDR
// if Multiplayer then
2298: LD_OWVAR 4
2302: IFFALSE 2342
// begin hc_gallery := MULTIAVATARS ;
2304: LD_ADDR_OWVAR 33
2308: PUSH
2309: LD_STRING MULTIAVATARS
2311: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2312: LD_ADDR_OWVAR 34
2316: PUSH
2317: LD_OWVAR 20
2321: PPUSH
2322: CALL_OW 525
2326: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2327: LD_ADDR_OWVAR 27
2331: PUSH
2332: LD_OWVAR 20
2336: PPUSH
2337: CALL_OW 526
2341: ST_TO_ADDR
// end ; end else
2342: GO 2407
// begin hc_name :=  ;
2344: LD_ADDR_OWVAR 26
2348: PUSH
2349: LD_STRING 
2351: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2352: LD_INT 1
2354: PPUSH
2355: LD_INT 2
2357: PPUSH
2358: CALL_OW 12
2362: PPUSH
2363: LD_VAR 0 2
2367: PPUSH
2368: LD_EXP 20
2372: PPUSH
2373: CALL_OW 380
// hc_importance := 0 ;
2377: LD_ADDR_OWVAR 32
2381: PUSH
2382: LD_INT 0
2384: ST_TO_ADDR
// if Multiplayer then
2385: LD_OWVAR 4
2389: IFFALSE 2407
// begin hc_gallery :=  ;
2391: LD_ADDR_OWVAR 33
2395: PUSH
2396: LD_STRING 
2398: ST_TO_ADDR
// hc_face_number := 0 ;
2399: LD_ADDR_OWVAR 34
2403: PUSH
2404: LD_INT 0
2406: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2407: LD_ADDR_VAR 0 10
2411: PUSH
2412: CALL_OW 44
2416: ST_TO_ADDR
// if global_defined then
2417: LD_LOC 3
2421: IFFALSE 2561
// begin if ( cl = class_soldier ) then
2423: LD_VAR 0 2
2427: PUSH
2428: LD_INT 1
2430: EQUAL
2431: IFFALSE 2451
// j := i + soldiers_created else
2433: LD_ADDR_VAR 0 9
2437: PUSH
2438: LD_VAR 0 8
2442: PUSH
2443: LD_LOC 4
2447: PLUS
2448: ST_TO_ADDR
2449: GO 2461
// j := i ;
2451: LD_ADDR_VAR 0 9
2455: PUSH
2456: LD_VAR 0 8
2460: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2461: LD_LOC 2
2465: PUSH
2466: LD_VAR 0 2
2470: ARRAY
2471: PUSH
2472: LD_VAR 0 9
2476: ARRAY
2477: PPUSH
2478: LD_VAR 0 10
2482: PPUSH
2483: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2487: LD_VAR 0 10
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: LD_LOC 2
2499: PUSH
2500: LD_VAR 0 2
2504: ARRAY
2505: PUSH
2506: LD_VAR 0 9
2510: ARRAY
2511: PPUSH
2512: LD_INT 2
2514: PPUSH
2515: CALL_OW 260
2519: PPUSH
2520: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2524: LD_VAR 0 10
2528: PPUSH
2529: LD_INT 1
2531: PPUSH
2532: LD_LOC 2
2536: PUSH
2537: LD_VAR 0 2
2541: ARRAY
2542: PUSH
2543: LD_VAR 0 9
2547: ARRAY
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: CALL_OW 260
2556: PPUSH
2557: CALL_OW 239
// end ; if building then
2561: LD_VAR 0 6
2565: IFFALSE 2583
// PlaceHumanInUnit ( un , building ) else
2567: LD_VAR 0 10
2571: PPUSH
2572: LD_VAR 0 6
2576: PPUSH
2577: CALL_OW 52
2581: GO 2610
// PlaceUnitXYR ( un , x , y , r , false ) ;
2583: LD_VAR 0 10
2587: PPUSH
2588: LD_VAR 0 3
2592: PPUSH
2593: LD_VAR 0 4
2597: PPUSH
2598: LD_VAR 0 5
2602: PPUSH
2603: LD_INT 0
2605: PPUSH
2606: CALL_OW 50
// result := result ^ [ un ] ;
2610: LD_ADDR_VAR 0 7
2614: PUSH
2615: LD_VAR 0 7
2619: PUSH
2620: LD_VAR 0 10
2624: PUSH
2625: EMPTY
2626: LIST
2627: ADD
2628: ST_TO_ADDR
// end ;
2629: GO 2212
2631: POP
2632: POP
// if not global_defined then
2633: LD_LOC 3
2637: NOT
2638: IFFALSE 2716
// if ( global_units >= cl ) then
2640: LD_LOC 2
2644: PUSH
2645: LD_VAR 0 2
2649: GREATEREQUAL
2650: IFFALSE 2691
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2652: LD_ADDR_LOC 2
2656: PUSH
2657: LD_LOC 2
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: LD_LOC 2
2671: PUSH
2672: LD_VAR 0 2
2676: ARRAY
2677: PUSH
2678: LD_VAR 0 7
2682: ADD
2683: PPUSH
2684: CALL_OW 1
2688: ST_TO_ADDR
2689: GO 2716
// global_units := Replace ( global_units , cl , result ) ;
2691: LD_ADDR_LOC 2
2695: PUSH
2696: LD_LOC 2
2700: PPUSH
2701: LD_VAR 0 2
2705: PPUSH
2706: LD_VAR 0 7
2710: PPUSH
2711: CALL_OW 1
2715: ST_TO_ADDR
// end ;
2716: LD_VAR 0 7
2720: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2721: LD_INT 0
2723: PPUSH
2724: PPUSH
2725: PPUSH
2726: PPUSH
2727: PPUSH
2728: PPUSH
2729: PPUSH
2730: PPUSH
2731: PPUSH
// pos := Side_Positions [ side ] ;
2732: LD_ADDR_VAR 0 3
2736: PUSH
2737: LD_EXP 32
2741: PUSH
2742: LD_VAR 0 1
2746: ARRAY
2747: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2748: LD_ADDR_OWVAR 21
2752: PUSH
2753: LD_EXP 33
2757: PUSH
2758: LD_VAR 0 1
2762: ARRAY
2763: ST_TO_ADDR
// uc_side := side ;
2764: LD_ADDR_OWVAR 20
2768: PUSH
2769: LD_VAR 0 1
2773: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2774: LD_ADDR_VAR 0 4
2778: PUSH
2779: LD_EXP 35
2783: PUSH
2784: LD_VAR 0 3
2788: ARRAY
2789: PUSH
2790: LD_INT 1
2792: ARRAY
2793: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2794: LD_ADDR_VAR 0 5
2798: PUSH
2799: LD_EXP 35
2803: PUSH
2804: LD_VAR 0 3
2808: ARRAY
2809: PUSH
2810: LD_INT 2
2812: ARRAY
2813: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2814: LD_ADDR_VAR 0 6
2818: PUSH
2819: LD_EXP 35
2823: PUSH
2824: LD_VAR 0 3
2828: ARRAY
2829: PUSH
2830: LD_INT 3
2832: ARRAY
2833: ST_TO_ADDR
// if is_depot then
2834: LD_EXP 17
2838: IFFALSE 2971
// begin bc_type = b_depot ;
2840: LD_ADDR_OWVAR 42
2844: PUSH
2845: LD_INT 0
2847: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2848: LD_ADDR_VAR 0 10
2852: PUSH
2853: LD_VAR 0 4
2857: PPUSH
2858: LD_VAR 0 5
2862: PPUSH
2863: LD_VAR 0 6
2867: PPUSH
2868: CALL_OW 47
2872: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2873: LD_VAR 0 10
2877: PPUSH
2878: LD_STRING @
2880: PUSH
2881: LD_VAR 0 1
2885: STR
2886: PPUSH
2887: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2891: LD_VAR 0 10
2895: PPUSH
2896: CALL_OW 274
2900: PPUSH
2901: LD_INT 1
2903: PPUSH
2904: LD_EXP 22
2908: PUSH
2909: LD_INT 1
2911: ARRAY
2912: PPUSH
2913: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2917: LD_VAR 0 10
2921: PPUSH
2922: CALL_OW 274
2926: PPUSH
2927: LD_INT 2
2929: PPUSH
2930: LD_EXP 22
2934: PUSH
2935: LD_INT 2
2937: ARRAY
2938: PPUSH
2939: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2943: LD_VAR 0 10
2947: PPUSH
2948: CALL_OW 274
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_EXP 22
2960: PUSH
2961: LD_INT 3
2963: ARRAY
2964: PPUSH
2965: CALL_OW 277
// end else
2969: GO 3115
// begin for i := 1 to 3 do
2971: LD_ADDR_VAR 0 7
2975: PUSH
2976: DOUBLE
2977: LD_INT 1
2979: DEC
2980: ST_TO_ADDR
2981: LD_INT 3
2983: PUSH
2984: FOR_TO
2985: IFFALSE 3113
// begin r := starting_resources [ i ] ;
2987: LD_ADDR_VAR 0 8
2991: PUSH
2992: LD_EXP 22
2996: PUSH
2997: LD_VAR 0 7
3001: ARRAY
3002: ST_TO_ADDR
// while r >= 10 do
3003: LD_VAR 0 8
3007: PUSH
3008: LD_INT 10
3010: GREATEREQUAL
3011: IFFALSE 3111
// if r > 50 then
3013: LD_VAR 0 8
3017: PUSH
3018: LD_INT 50
3020: GREATER
3021: IFFALSE 3067
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: LD_VAR 0 4
3035: PPUSH
3036: LD_VAR 0 5
3040: PPUSH
3041: LD_INT 4
3043: PPUSH
3044: LD_INT 0
3046: PPUSH
3047: CALL_OW 60
// r := r - 50 ;
3051: LD_ADDR_VAR 0 8
3055: PUSH
3056: LD_VAR 0 8
3060: PUSH
3061: LD_INT 50
3063: MINUS
3064: ST_TO_ADDR
// end else
3065: GO 3109
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3067: LD_VAR 0 7
3071: PPUSH
3072: LD_VAR 0 8
3076: PUSH
3077: LD_INT 10
3079: DIV
3080: PPUSH
3081: LD_VAR 0 4
3085: PPUSH
3086: LD_VAR 0 5
3090: PPUSH
3091: LD_INT 4
3093: PPUSH
3094: LD_INT 0
3096: PPUSH
3097: CALL_OW 60
// r := 0 ;
3101: LD_ADDR_VAR 0 8
3105: PUSH
3106: LD_INT 0
3108: ST_TO_ADDR
// end ;
3109: GO 3003
// end ;
3111: GO 2984
3113: POP
3114: POP
// end ; for r in starting_crates do
3115: LD_ADDR_VAR 0 8
3119: PUSH
3120: LD_EXP 21
3124: PUSH
3125: FOR_IN
3126: IFFALSE 3158
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3128: LD_INT 1
3130: PPUSH
3131: LD_INT 5
3133: PPUSH
3134: LD_VAR 0 4
3138: PPUSH
3139: LD_VAR 0 5
3143: PPUSH
3144: LD_VAR 0 8
3148: PPUSH
3149: LD_INT 0
3151: PPUSH
3152: CALL_OW 60
3156: GO 3125
3158: POP
3159: POP
// if def_morale_flags then
3160: LD_EXP 9
3164: IFFALSE 3303
// begin x := start_def [ pos ] [ 1 ] ;
3166: LD_ADDR_VAR 0 4
3170: PUSH
3171: LD_EXP 37
3175: PUSH
3176: LD_VAR 0 3
3180: ARRAY
3181: PUSH
3182: LD_INT 1
3184: ARRAY
3185: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3186: LD_ADDR_VAR 0 5
3190: PUSH
3191: LD_EXP 37
3195: PUSH
3196: LD_VAR 0 3
3200: ARRAY
3201: PUSH
3202: LD_INT 2
3204: ARRAY
3205: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3206: LD_VAR 0 4
3210: PPUSH
3211: LD_VAR 0 5
3215: PPUSH
3216: LD_INT 12
3218: PPUSH
3219: LD_INT 2
3221: PPUSH
3222: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3226: LD_ADDR_EXP 42
3230: PUSH
3231: LD_EXP 42
3235: PUSH
3236: LD_VAR 0 1
3240: PPUSH
3241: LD_VAR 0 4
3245: PPUSH
3246: LD_VAR 0 5
3250: PPUSH
3251: LD_INT 1
3253: PUSH
3254: LD_INT 100
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 2
3263: PUSH
3264: LD_INT 50
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 3
3273: PUSH
3274: LD_INT 20
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 20
3283: PUSH
3284: LD_INT 100
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: PPUSH
3297: CALL_OW 418
3301: ADD
3302: ST_TO_ADDR
// end ; commander := true ;
3303: LD_ADDR_LOC 1
3307: PUSH
3308: LD_INT 1
3310: ST_TO_ADDR
// soldiers_created := 0 ;
3311: LD_ADDR_LOC 4
3315: PUSH
3316: LD_INT 0
3318: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3319: LD_ADDR_VAR 0 7
3323: PUSH
3324: DOUBLE
3325: LD_INT 1
3327: DEC
3328: ST_TO_ADDR
3329: LD_EXP 18
3333: PUSH
3334: FOR_TO
3335: IFFALSE 3488
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3337: LD_ADDR_VAR 0 4
3341: PUSH
3342: LD_EXP 36
3346: PUSH
3347: LD_VAR 0 3
3351: ARRAY
3352: PUSH
3353: LD_VAR 0 7
3357: ARRAY
3358: PUSH
3359: LD_INT 1
3361: ARRAY
3362: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3363: LD_ADDR_VAR 0 5
3367: PUSH
3368: LD_EXP 36
3372: PUSH
3373: LD_VAR 0 3
3377: ARRAY
3378: PUSH
3379: LD_VAR 0 7
3383: ARRAY
3384: PUSH
3385: LD_INT 2
3387: ARRAY
3388: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3389: LD_ADDR_VAR 0 6
3393: PUSH
3394: LD_EXP 36
3398: PUSH
3399: LD_VAR 0 3
3403: ARRAY
3404: PUSH
3405: LD_VAR 0 7
3409: ARRAY
3410: PUSH
3411: LD_INT 3
3413: ARRAY
3414: ST_TO_ADDR
// bc_type := b_breastwork ;
3415: LD_ADDR_OWVAR 42
3419: PUSH
3420: LD_INT 31
3422: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3423: LD_ADDR_VAR 0 9
3427: PUSH
3428: LD_VAR 0 4
3432: PPUSH
3433: LD_VAR 0 5
3437: PPUSH
3438: LD_VAR 0 6
3442: PPUSH
3443: CALL_OW 47
3447: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3448: LD_INT 1
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 0
3459: PPUSH
3460: LD_INT 0
3462: PPUSH
3463: LD_VAR 0 9
3467: PPUSH
3468: CALL 2184 0 6
// soldiers_created := soldiers_created + 1 ;
3472: LD_ADDR_LOC 4
3476: PUSH
3477: LD_LOC 4
3481: PUSH
3482: LD_INT 1
3484: PLUS
3485: ST_TO_ADDR
// end ;
3486: GO 3334
3488: POP
3489: POP
// x := start_def [ pos ] [ 1 ] ;
3490: LD_ADDR_VAR 0 4
3494: PUSH
3495: LD_EXP 37
3499: PUSH
3500: LD_VAR 0 3
3504: ARRAY
3505: PUSH
3506: LD_INT 1
3508: ARRAY
3509: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3510: LD_ADDR_VAR 0 5
3514: PUSH
3515: LD_EXP 37
3519: PUSH
3520: LD_VAR 0 3
3524: ARRAY
3525: PUSH
3526: LD_INT 2
3528: ARRAY
3529: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3530: LD_LOC 8
3534: PUSH
3535: LD_EXP 18
3539: MINUS
3540: PPUSH
3541: LD_INT 1
3543: PPUSH
3544: LD_VAR 0 4
3548: PPUSH
3549: LD_VAR 0 5
3553: PPUSH
3554: LD_INT 5
3556: PPUSH
3557: LD_INT 0
3559: PPUSH
3560: CALL 2184 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3564: LD_LOC 5
3568: PPUSH
3569: LD_INT 2
3571: PPUSH
3572: LD_VAR 0 4
3576: PPUSH
3577: LD_VAR 0 5
3581: PPUSH
3582: LD_INT 5
3584: PPUSH
3585: LD_INT 0
3587: PPUSH
3588: CALL 2184 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3592: LD_LOC 7
3596: PPUSH
3597: LD_INT 3
3599: PPUSH
3600: LD_VAR 0 4
3604: PPUSH
3605: LD_VAR 0 5
3609: PPUSH
3610: LD_INT 5
3612: PPUSH
3613: LD_INT 0
3615: PPUSH
3616: CALL 2184 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3620: LD_LOC 6
3624: PPUSH
3625: LD_INT 4
3627: PPUSH
3628: LD_VAR 0 4
3632: PPUSH
3633: LD_VAR 0 5
3637: PPUSH
3638: LD_INT 5
3640: PPUSH
3641: LD_INT 0
3643: PPUSH
3644: CALL 2184 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3648: LD_EXP 10
3652: PUSH
3653: LD_INT 20
3655: PPUSH
3656: LD_VAR 0 1
3660: PPUSH
3661: CALL_OW 321
3665: PUSH
3666: LD_INT 1
3668: EQUAL
3669: AND
3670: IFFALSE 3687
// SetTech ( tech_SibDet , side , state_researched ) ;
3672: LD_INT 20
3674: PPUSH
3675: LD_VAR 0 1
3679: PPUSH
3680: LD_INT 2
3682: PPUSH
3683: CALL_OW 322
// if def_siberite_bomb = 1 then
3687: LD_EXP 13
3691: PUSH
3692: LD_INT 1
3694: EQUAL
3695: IFFALSE 3729
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3697: LD_INT 25
3699: PPUSH
3700: LD_VAR 0 1
3704: PPUSH
3705: LD_INT 1
3707: PPUSH
3708: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3712: LD_INT 73
3714: PPUSH
3715: LD_VAR 0 1
3719: PPUSH
3720: LD_INT 1
3722: PPUSH
3723: CALL_OW 322
// end else
3727: GO 3759
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3729: LD_INT 25
3731: PPUSH
3732: LD_VAR 0 1
3736: PPUSH
3737: LD_INT 0
3739: PPUSH
3740: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3744: LD_INT 73
3746: PPUSH
3747: LD_VAR 0 1
3751: PPUSH
3752: LD_INT 0
3754: PPUSH
3755: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3759: LD_INT 24
3761: PPUSH
3762: LD_VAR 0 1
3766: PPUSH
3767: LD_INT 0
3769: PPUSH
3770: CALL_OW 322
// global_defined := true ;
3774: LD_ADDR_LOC 3
3778: PUSH
3779: LD_INT 1
3781: ST_TO_ADDR
// end ;
3782: LD_VAR 0 2
3786: RET
// every 0 0$1 do
3787: GO 3789
3789: DISABLE
// if ( def_siberite_bomb > 1 ) then
3790: LD_EXP 13
3794: PUSH
3795: LD_INT 1
3797: GREATER
3798: IFFALSE 3813
// begin wait ( siberite_bomb_Delay ) ;
3800: LD_EXP 28
3804: PPUSH
3805: CALL_OW 67
// EnableSibFiss ;
3809: CALL 3814 0 0
// end ;
3813: END
// function EnableSibFiss ; var i ; begin
3814: LD_INT 0
3816: PPUSH
3817: PPUSH
// for i := 1 to 8 do
3818: LD_ADDR_VAR 0 2
3822: PUSH
3823: DOUBLE
3824: LD_INT 1
3826: DEC
3827: ST_TO_ADDR
3828: LD_INT 8
3830: PUSH
3831: FOR_TO
3832: IFFALSE 3878
// if Side_Positions [ i ] then
3834: LD_EXP 32
3838: PUSH
3839: LD_VAR 0 2
3843: ARRAY
3844: IFFALSE 3876
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3846: LD_INT 25
3848: PPUSH
3849: LD_VAR 0 2
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3861: LD_INT 73
3863: PPUSH
3864: LD_VAR 0 2
3868: PPUSH
3869: LD_INT 1
3871: PPUSH
3872: CALL_OW 322
// end ;
3876: GO 3831
3878: POP
3879: POP
// end ;
3880: LD_VAR 0 1
3884: RET
// function prepare_sides ; var i ; begin
3885: LD_INT 0
3887: PPUSH
3888: PPUSH
// global_units := [ ] ;
3889: LD_ADDR_LOC 2
3893: PUSH
3894: EMPTY
3895: ST_TO_ADDR
// global_defined := false ;
3896: LD_ADDR_LOC 3
3900: PUSH
3901: LD_INT 0
3903: ST_TO_ADDR
// CountClassMembers ;
3904: CALL 3954 0 0
// for i := 1 to 8 do
3908: LD_ADDR_VAR 0 2
3912: PUSH
3913: DOUBLE
3914: LD_INT 1
3916: DEC
3917: ST_TO_ADDR
3918: LD_INT 8
3920: PUSH
3921: FOR_TO
3922: IFFALSE 3947
// if Side_Positions [ i ] then
3924: LD_EXP 32
3928: PUSH
3929: LD_VAR 0 2
3933: ARRAY
3934: IFFALSE 3945
// prepare_side ( i ) ;
3936: LD_VAR 0 2
3940: PPUSH
3941: CALL 2721 0 1
3945: GO 3921
3947: POP
3948: POP
// end ;
3949: LD_VAR 0 1
3953: RET
// function CountClassMembers ; var Mode ; begin
3954: LD_INT 0
3956: PPUSH
3957: PPUSH
// if No_Mechs then
3958: LD_EXP 15
3962: IFFALSE 3974
// Mode := 2 else
3964: LD_ADDR_VAR 0 2
3968: PUSH
3969: LD_INT 2
3971: ST_TO_ADDR
3972: GO 3982
// Mode := 1 ;
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: LD_INT 1
3981: ST_TO_ADDR
// neng := number_of_people ;
3982: LD_ADDR_LOC 5
3986: PUSH
3987: LD_EXP 19
3991: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
3992: LD_ADDR_LOC 8
3996: PUSH
3997: LD_LOC 5
4001: PUSH
4002: LD_INT 4
4004: PUSH
4005: LD_INT 3
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: LD_VAR 0 2
4016: ARRAY
4017: DIV
4018: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4019: LD_LOC 8
4023: PUSH
4024: LD_EXP 18
4028: LESS
4029: IFFALSE 4041
// nsol := number_of_breastworks ;
4031: LD_ADDR_LOC 8
4035: PUSH
4036: LD_EXP 18
4040: ST_TO_ADDR
// neng := neng - nsol ;
4041: LD_ADDR_LOC 5
4045: PUSH
4046: LD_LOC 5
4050: PUSH
4051: LD_LOC 8
4055: MINUS
4056: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4057: LD_ADDR_LOC 6
4061: PUSH
4062: LD_LOC 5
4066: PUSH
4067: LD_INT 3
4069: PUSH
4070: LD_INT 2
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: PUSH
4077: LD_VAR 0 2
4081: ARRAY
4082: DIV
4083: ST_TO_ADDR
// if ( nsci < 1 ) then
4084: LD_LOC 6
4088: PUSH
4089: LD_INT 1
4091: LESS
4092: IFFALSE 4102
// nsci := 1 ;
4094: LD_ADDR_LOC 6
4098: PUSH
4099: LD_INT 1
4101: ST_TO_ADDR
// neng := neng - nsci ;
4102: LD_ADDR_LOC 5
4106: PUSH
4107: LD_LOC 5
4111: PUSH
4112: LD_LOC 6
4116: MINUS
4117: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4118: LD_ADDR_LOC 7
4122: PUSH
4123: LD_LOC 5
4127: PUSH
4128: LD_INT 2
4130: DIV
4131: PUSH
4132: LD_INT 0
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: PUSH
4139: LD_VAR 0 2
4143: ARRAY
4144: ST_TO_ADDR
// neng := neng - nmech ;
4145: LD_ADDR_LOC 5
4149: PUSH
4150: LD_LOC 5
4154: PUSH
4155: LD_LOC 7
4159: MINUS
4160: ST_TO_ADDR
// if ( neng < 1 ) then
4161: LD_LOC 5
4165: PUSH
4166: LD_INT 1
4168: LESS
4169: IFFALSE 4179
// neng := 1 ;
4171: LD_ADDR_LOC 5
4175: PUSH
4176: LD_INT 1
4178: ST_TO_ADDR
// end ;
4179: LD_VAR 0 1
4183: RET
// starting begin disable ( 98 ) ;
4184: LD_INT 98
4186: DISABLE_MARKED
// disable ( 99 ) ;
4187: LD_INT 99
4189: DISABLE_MARKED
// disable ( 400 ) ;
4190: LD_INT 400
4192: DISABLE_MARKED
// disable ( 401 ) ;
4193: LD_INT 401
4195: DISABLE_MARKED
// mp_selectmsg := true ;
4196: LD_ADDR_OWVAR 13
4200: PUSH
4201: LD_INT 1
4203: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4204: CALL 784 0 0
// init_map ;
4208: CALL 0 0 0
// set_shared_visions_and_alliances ;
4212: CALL 1875 0 0
// ResetFog ;
4216: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4220: LD_OWVAR 2
4224: PPUSH
4225: CALL_OW 520
// prepare_sides ;
4229: CALL 3885 0 0
// init_shipments_and_respawning ;
4233: CALL 4638 0 0
// Init_Win_Condition ;
4237: CALL 7468 0 0
// ShowTimer ;
4241: CALL 6448 0 0
// music_nat := Side_Nations [ your_side ] ;
4245: LD_ADDR_OWVAR 71
4249: PUSH
4250: LD_EXP 33
4254: PUSH
4255: LD_OWVAR 2
4259: ARRAY
4260: ST_TO_ADDR
// if IAmSpec then
4261: CALL_OW 531
4265: IFFALSE 4289
// begin fogoff ( true ) ;
4267: LD_INT 1
4269: PPUSH
4270: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
4274: LD_INT 104
4276: PPUSH
4277: LD_INT 69
4279: PPUSH
4280: CALL_OW 86
// enable ( 400 ) ;
4284: LD_INT 400
4286: ENABLE_MARKED
// end else
4287: GO 4335
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4289: LD_EXP 37
4293: PUSH
4294: LD_EXP 32
4298: PUSH
4299: LD_OWVAR 2
4303: ARRAY
4304: ARRAY
4305: PUSH
4306: LD_INT 1
4308: ARRAY
4309: PPUSH
4310: LD_EXP 37
4314: PUSH
4315: LD_EXP 32
4319: PUSH
4320: LD_OWVAR 2
4324: ARRAY
4325: ARRAY
4326: PUSH
4327: LD_INT 2
4329: ARRAY
4330: PPUSH
4331: CALL_OW 86
// end ; AnimateTrees ( true ) ;
4335: LD_INT 1
4337: PPUSH
4338: CALL_OW 573
// BuildUpAreas := [ base_nw , base_ne , base_sw , base_se ] ;
4342: LD_ADDR_EXP 47
4346: PUSH
4347: LD_INT 8
4349: PUSH
4350: LD_INT 9
4352: PUSH
4353: LD_INT 10
4355: PUSH
4356: LD_INT 11
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: ST_TO_ADDR
// BeginBuildUp ;
4365: CALL 6631 0 0
// end ; end_of_file
4369: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
4370: LD_VAR 0 1
4374: PPUSH
4375: CALL_OW 266
4379: PUSH
4380: LD_INT 0
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: IN
4390: IFFALSE 4415
// SetBName ( b , @ & GetSide ( b ) ) ;
4392: LD_VAR 0 1
4396: PPUSH
4397: LD_STRING @
4399: PUSH
4400: LD_VAR 0 1
4404: PPUSH
4405: CALL_OW 255
4409: STR
4410: PPUSH
4411: CALL_OW 500
// end ;
4415: PPOPN 2
4417: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
4418: LD_VAR 0 1
4422: PPUSH
4423: CALL_OW 266
4427: PUSH
4428: LD_INT 0
4430: PUSH
4431: LD_INT 1
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: IN
4438: IFFALSE 4463
// SetBName ( b , @ & GetSide ( b ) ) ;
4440: LD_VAR 0 1
4444: PPUSH
4445: LD_STRING @
4447: PUSH
4448: LD_VAR 0 1
4452: PPUSH
4453: CALL_OW 255
4457: STR
4458: PPUSH
4459: CALL_OW 500
// end ;
4463: PPOPN 3
4465: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
4466: LD_INT 0
4468: PPUSH
4469: PPUSH
4470: PPUSH
4471: PPUSH
// begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
4472: LD_VAR 0 1
4476: PPUSH
4477: CALL_OW 255
4481: PUSH
4482: LD_INT 0
4484: EQUAL
4485: PUSH
4486: LD_VAR 0 1
4490: PPUSH
4491: CALL_OW 257
4495: PUSH
4496: LD_INT 12
4498: EQUAL
4499: AND
4500: IFFALSE 4506
// CheckApemenAmount ;
4502: CALL 5799 0 0
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
4506: LD_VAR 0 1
4510: PPUSH
4511: CALL_OW 266
4515: PUSH
4516: LD_INT 0
4518: PUSH
4519: LD_INT 1
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: IN
4526: IFFALSE 4608
// begin pos := Side_Positions [ GetSide ( j ) ] ;
4528: LD_ADDR_VAR 0 4
4532: PUSH
4533: LD_EXP 32
4537: PUSH
4538: LD_VAR 0 1
4542: PPUSH
4543: CALL_OW 255
4547: ARRAY
4548: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
4549: LD_ADDR_VAR 0 2
4553: PUSH
4554: LD_EXP 37
4558: PUSH
4559: LD_VAR 0 4
4563: ARRAY
4564: PUSH
4565: LD_INT 1
4567: ARRAY
4568: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4569: LD_ADDR_VAR 0 3
4573: PUSH
4574: LD_EXP 37
4578: PUSH
4579: LD_VAR 0 4
4583: ARRAY
4584: PUSH
4585: LD_INT 2
4587: ARRAY
4588: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
4589: LD_VAR 0 2
4593: PPUSH
4594: LD_VAR 0 3
4598: PPUSH
4599: CALL_OW 420
4603: PPUSH
4604: CALL_OW 419
// end ; end ;
4608: PPOPN 5
4610: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
4611: LD_VAR 0 1
4615: PPUSH
4616: LD_VAR 0 2
4620: PPUSH
4621: LD_VAR 0 3
4625: PPUSH
4626: LD_OWVAR 2
4630: PPUSH
4631: CALL 7229 0 4
4635: PPOPN 3
4637: END
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
4638: LD_INT 0
4640: PPUSH
// respawn := Rand ( 1 , 8 ) ;
4641: LD_ADDR_LOC 10
4645: PUSH
4646: LD_INT 1
4648: PPUSH
4649: LD_INT 8
4651: PPUSH
4652: CALL_OW 12
4656: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4657: LD_ADDR_LOC 11
4661: PUSH
4662: LD_INT 0
4664: PUSH
4665: LD_INT 0
4667: PUSH
4668: LD_INT 0
4670: PUSH
4671: LD_INT 0
4673: PUSH
4674: LD_INT 0
4676: PUSH
4677: LD_INT 0
4679: PUSH
4680: LD_INT 0
4682: PUSH
4683: LD_INT 0
4685: PUSH
4686: EMPTY
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: ST_TO_ADDR
// end ;
4696: LD_VAR 0 1
4700: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
4701: GO 4703
4703: DISABLE
4704: LD_INT 0
4706: PPUSH
4707: PPUSH
4708: PPUSH
4709: PPUSH
// begin if respawning_time_max = 0 then
4710: LD_EXP 26
4714: PUSH
4715: LD_INT 0
4717: EQUAL
4718: IFFALSE 4722
// exit ;
4720: GO 5176
// if respawn = 8 then
4722: LD_LOC 10
4726: PUSH
4727: LD_INT 8
4729: EQUAL
4730: IFFALSE 4742
// respawn := 1 else
4732: LD_ADDR_LOC 10
4736: PUSH
4737: LD_INT 1
4739: ST_TO_ADDR
4740: GO 4756
// respawn := respawn + 1 ;
4742: LD_ADDR_LOC 10
4746: PUSH
4747: LD_LOC 10
4751: PUSH
4752: LD_INT 1
4754: PLUS
4755: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
4756: LD_EXP 32
4760: PUSH
4761: LD_LOC 10
4765: ARRAY
4766: PUSH
4767: LD_LOC 11
4771: PUSH
4772: LD_LOC 10
4776: ARRAY
4777: NOT
4778: AND
4779: IFFALSE 5175
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
4781: LD_ADDR_VAR 0 1
4785: PUSH
4786: LD_INT 21
4788: PUSH
4789: LD_INT 1
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 22
4798: PUSH
4799: LD_LOC 10
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: PUSH
4808: LD_INT 3
4810: PUSH
4811: LD_INT 23
4813: PUSH
4814: LD_INT 0
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: PUSH
4821: EMPTY
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: PPUSH
4827: CALL_OW 69
4831: ST_TO_ADDR
// if n < number_of_people then
4832: LD_VAR 0 1
4836: PUSH
4837: LD_EXP 19
4841: LESS
4842: IFFALSE 5172
// begin aktresp := respawn ;
4844: LD_ADDR_VAR 0 3
4848: PUSH
4849: LD_LOC 10
4853: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
4854: LD_ADDR_LOC 11
4858: PUSH
4859: LD_LOC 11
4863: PPUSH
4864: LD_VAR 0 3
4868: PPUSH
4869: LD_INT 1
4871: PPUSH
4872: CALL_OW 1
4876: ST_TO_ADDR
// enable ;
4877: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
4878: LD_EXP 25
4882: PPUSH
4883: LD_EXP 26
4887: PPUSH
4888: CALL_OW 12
4892: PPUSH
4893: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
4897: LD_ADDR_LOC 11
4901: PUSH
4902: LD_LOC 11
4906: PPUSH
4907: LD_VAR 0 3
4911: PPUSH
4912: LD_INT 0
4914: PPUSH
4915: CALL_OW 1
4919: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
4920: LD_ADDR_VAR 0 2
4924: PUSH
4925: LD_INT 21
4927: PUSH
4928: LD_INT 3
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: PUSH
4935: LD_INT 2
4937: PUSH
4938: LD_INT 30
4940: PUSH
4941: LD_INT 0
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 30
4950: PUSH
4951: LD_INT 1
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: LIST
4962: PUSH
4963: LD_INT 50
4965: PUSH
4966: EMPTY
4967: LIST
4968: PUSH
4969: LD_INT 22
4971: PUSH
4972: LD_VAR 0 3
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: PPUSH
4987: CALL_OW 69
4991: ST_TO_ADDR
// if building_list = 0 then
4992: LD_VAR 0 2
4996: PUSH
4997: LD_INT 0
4999: EQUAL
5000: IFFALSE 5004
// exit ;
5002: GO 5176
// hc_name :=  ;
5004: LD_ADDR_OWVAR 26
5008: PUSH
5009: LD_STRING 
5011: ST_TO_ADDR
// hc_importance := 0 ;
5012: LD_ADDR_OWVAR 32
5016: PUSH
5017: LD_INT 0
5019: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
5020: LD_INT 0
5022: PPUSH
5023: LD_INT 0
5025: PPUSH
5026: LD_EXP 20
5030: PUSH
5031: LD_INT 2
5033: DIV
5034: PPUSH
5035: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
5039: LD_ADDR_OWVAR 21
5043: PUSH
5044: LD_EXP 33
5048: PUSH
5049: LD_VAR 0 3
5053: ARRAY
5054: ST_TO_ADDR
// uc_side := aktresp ;
5055: LD_ADDR_OWVAR 20
5059: PUSH
5060: LD_VAR 0 3
5064: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5065: LD_ADDR_VAR 0 4
5069: PUSH
5070: LD_VAR 0 2
5074: PUSH
5075: LD_INT 1
5077: PPUSH
5078: LD_VAR 0 2
5082: PUSH
5083: LD_INT 0
5085: PLUS
5086: PPUSH
5087: CALL_OW 12
5091: ARRAY
5092: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5093: LD_VAR 0 4
5097: PPUSH
5098: CALL_OW 266
5102: PUSH
5103: LD_INT 0
5105: PUSH
5106: LD_INT 1
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: IN
5113: IFFALSE 5125
// n = 25 else
5115: LD_ADDR_VAR 0 1
5119: PUSH
5120: LD_INT 25
5122: ST_TO_ADDR
5123: GO 5133
// n = 10 ;
5125: LD_ADDR_VAR 0 1
5129: PUSH
5130: LD_INT 10
5132: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5133: CALL_OW 44
5137: PPUSH
5138: LD_VAR 0 4
5142: PPUSH
5143: CALL_OW 250
5147: PPUSH
5148: LD_VAR 0 4
5152: PPUSH
5153: CALL_OW 251
5157: PPUSH
5158: LD_VAR 0 1
5162: PPUSH
5163: LD_INT 1
5165: PPUSH
5166: CALL_OW 50
// end else
5170: GO 5173
// enable ;
5172: ENABLE
// end else
5173: GO 5176
// enable ;
5175: ENABLE
// end ;
5176: PPOPN 4
5178: END
// every 1 1$0 + 0 0$0.3 do
5179: GO 5181
5181: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5182: LD_INT 4
5184: PPUSH
5185: LD_INT 5
5187: PPUSH
5188: CALL_OW 12
5192: PPUSH
5193: LD_INT 1
5195: PPUSH
5196: CALL_OW 57
// enable ;
5200: ENABLE
// end ;
5201: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5202: GO 5204
5204: DISABLE
5205: LD_INT 0
5207: PPUSH
5208: PPUSH
// begin case tick of 1 .. 1 1$0 :
5209: LD_OWVAR 1
5213: PUSH
5214: LD_INT 1
5216: DOUBLE
5217: GREATEREQUAL
5218: IFFALSE 5226
5220: LD_INT 2100
5222: DOUBLE
5223: LESSEQUAL
5224: IFTRUE 5228
5226: GO 5256
5228: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5229: LD_EXP 23
5233: PUSH
5234: LD_INT 100
5236: DIVREAL
5237: PUSH
5238: LD_INT 350
5240: PPUSH
5241: LD_INT 1050
5243: PPUSH
5244: CALL_OW 12
5248: MUL
5249: PPUSH
5250: CALL_OW 67
5254: GO 5558
5256: LD_INT 2100
5258: PUSH
5259: LD_INT 1
5261: PLUS
5262: DOUBLE
5263: GREATEREQUAL
5264: IFFALSE 5272
5266: LD_INT 10500
5268: DOUBLE
5269: LESSEQUAL
5270: IFTRUE 5274
5272: GO 5302
5274: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5275: LD_EXP 23
5279: PUSH
5280: LD_INT 100
5282: DIVREAL
5283: PUSH
5284: LD_INT 1050
5286: PPUSH
5287: LD_INT 1575
5289: PPUSH
5290: CALL_OW 12
5294: MUL
5295: PPUSH
5296: CALL_OW 67
5300: GO 5558
5302: LD_INT 10500
5304: PUSH
5305: LD_INT 1
5307: PLUS
5308: DOUBLE
5309: GREATEREQUAL
5310: IFFALSE 5318
5312: LD_INT 21000
5314: DOUBLE
5315: LESSEQUAL
5316: IFTRUE 5320
5318: GO 5348
5320: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5321: LD_EXP 23
5325: PUSH
5326: LD_INT 100
5328: DIVREAL
5329: PUSH
5330: LD_INT 1575
5332: PPUSH
5333: LD_INT 2100
5335: PPUSH
5336: CALL_OW 12
5340: MUL
5341: PPUSH
5342: CALL_OW 67
5346: GO 5558
5348: LD_INT 21000
5350: PUSH
5351: LD_INT 1
5353: PLUS
5354: DOUBLE
5355: GREATEREQUAL
5356: IFFALSE 5364
5358: LD_INT 42000
5360: DOUBLE
5361: LESSEQUAL
5362: IFTRUE 5366
5364: GO 5394
5366: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5367: LD_EXP 23
5371: PUSH
5372: LD_INT 100
5374: DIVREAL
5375: PUSH
5376: LD_INT 2100
5378: PPUSH
5379: LD_INT 2625
5381: PPUSH
5382: CALL_OW 12
5386: MUL
5387: PPUSH
5388: CALL_OW 67
5392: GO 5558
5394: LD_INT 42000
5396: PUSH
5397: LD_INT 1
5399: PLUS
5400: DOUBLE
5401: GREATEREQUAL
5402: IFFALSE 5410
5404: LD_INT 63000
5406: DOUBLE
5407: LESSEQUAL
5408: IFTRUE 5412
5410: GO 5440
5412: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5413: LD_EXP 23
5417: PUSH
5418: LD_INT 100
5420: DIVREAL
5421: PUSH
5422: LD_INT 2625
5424: PPUSH
5425: LD_INT 3150
5427: PPUSH
5428: CALL_OW 12
5432: MUL
5433: PPUSH
5434: CALL_OW 67
5438: GO 5558
5440: LD_INT 63000
5442: PUSH
5443: LD_INT 1
5445: PLUS
5446: DOUBLE
5447: GREATEREQUAL
5448: IFFALSE 5456
5450: LD_INT 105000
5452: DOUBLE
5453: LESSEQUAL
5454: IFTRUE 5458
5456: GO 5486
5458: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5459: LD_EXP 23
5463: PUSH
5464: LD_INT 100
5466: DIVREAL
5467: PUSH
5468: LD_INT 3150
5470: PPUSH
5471: LD_INT 3675
5473: PPUSH
5474: CALL_OW 12
5478: MUL
5479: PPUSH
5480: CALL_OW 67
5484: GO 5558
5486: LD_INT 105000
5488: PUSH
5489: LD_INT 1
5491: PLUS
5492: DOUBLE
5493: GREATEREQUAL
5494: IFFALSE 5502
5496: LD_INT 630000
5498: DOUBLE
5499: LESSEQUAL
5500: IFTRUE 5504
5502: GO 5532
5504: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5505: LD_EXP 23
5509: PUSH
5510: LD_INT 100
5512: DIVREAL
5513: PUSH
5514: LD_INT 3675
5516: PPUSH
5517: LD_INT 4200
5519: PPUSH
5520: CALL_OW 12
5524: MUL
5525: PPUSH
5526: CALL_OW 67
5530: GO 5558
5532: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5533: LD_EXP 23
5537: PUSH
5538: LD_INT 100
5540: DIVREAL
5541: PUSH
5542: LD_INT 4200
5544: PPUSH
5545: LD_INT 5250
5547: PPUSH
5548: CALL_OW 12
5552: MUL
5553: PPUSH
5554: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5558: LD_ADDR_VAR 0 2
5562: PUSH
5563: LD_INT 3
5565: PPUSH
5566: LD_INT 5
5568: PPUSH
5569: CALL_OW 12
5573: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5574: LD_ADDR_VAR 0 1
5578: PUSH
5579: LD_EXP 32
5583: PUSH
5584: LD_INT 0
5586: PUSH
5587: EMPTY
5588: LIST
5589: DIFF
5590: PUSH
5591: FOR_IN
5592: IFFALSE 5632
// CreateCratesArea ( amount , [ base_nw , base_ne , base_sw , base_se ] [ i ] , true ) ;
5594: LD_VAR 0 2
5598: PPUSH
5599: LD_INT 8
5601: PUSH
5602: LD_INT 9
5604: PUSH
5605: LD_INT 10
5607: PUSH
5608: LD_INT 11
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: PUSH
5617: LD_VAR 0 1
5621: ARRAY
5622: PPUSH
5623: LD_INT 1
5625: PPUSH
5626: CALL_OW 55
5630: GO 5591
5632: POP
5633: POP
// enable ;
5634: ENABLE
// end ;
5635: PPOPN 2
5637: END
// every 1 1$0 trigger def_shipments_density do
5638: LD_EXP 5
5642: IFFALSE 5678
5644: GO 5646
5646: DISABLE
// begin CreateCratesArea ( 5 , map_center , true ) ;
5647: LD_INT 5
5649: PPUSH
5650: LD_INT 7
5652: PPUSH
5653: LD_INT 1
5655: PPUSH
5656: CALL_OW 55
// wait ( 3 3$0 - ( 1 1$0 * def_shipments_density ) ) ;
5660: LD_INT 6300
5662: PUSH
5663: LD_INT 2100
5665: PUSH
5666: LD_EXP 5
5670: MUL
5671: MINUS
5672: PPUSH
5673: CALL_OW 67
// enable ;
5677: ENABLE
// end ; end_of_file
5678: END
// var _apemenIncrement , _apemenMaximum , _apemenSkillLevel , _apemenThreshold , _isSpawning , _wildApemenAmount ; every 0 0$15 do var i ;
5679: GO 5681
5681: DISABLE
5682: LD_INT 0
5684: PPUSH
// begin _apemenIncrement := 0 ;
5685: LD_ADDR_LOC 12
5689: PUSH
5690: LD_INT 0
5692: ST_TO_ADDR
// _apemenSkillLevel := 0 ;
5693: LD_ADDR_LOC 14
5697: PUSH
5698: LD_INT 0
5700: ST_TO_ADDR
// _isSpawning := true ;
5701: LD_ADDR_LOC 16
5705: PUSH
5706: LD_INT 1
5708: ST_TO_ADDR
// _wildApemenAmount := 0 ;
5709: LD_ADDR_LOC 17
5713: PUSH
5714: LD_INT 0
5716: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5717: LD_ADDR_VAR 0 1
5721: PUSH
5722: LD_EXP 32
5726: PUSH
5727: LD_INT 0
5729: PUSH
5730: EMPTY
5731: LIST
5732: DIFF
5733: PUSH
5734: FOR_IN
5735: IFFALSE 5753
// _apemenIncrement := _apemenIncrement + 1 ;
5737: LD_ADDR_LOC 12
5741: PUSH
5742: LD_LOC 12
5746: PUSH
5747: LD_INT 1
5749: PLUS
5750: ST_TO_ADDR
5751: GO 5734
5753: POP
5754: POP
// _apemenMaximum := _apemenIncrement * amount_of_apemen ;
5755: LD_ADDR_LOC 13
5759: PUSH
5760: LD_LOC 12
5764: PUSH
5765: LD_EXP 27
5769: MUL
5770: ST_TO_ADDR
// _apemenThreshold := _apemenMaximum / 2 ;
5771: LD_ADDR_LOC 15
5775: PUSH
5776: LD_LOC 13
5780: PUSH
5781: LD_INT 2
5783: DIVREAL
5784: ST_TO_ADDR
// prepare_apemen ;
5785: CALL 5877 0 0
// end ;
5789: PPOPN 1
5791: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
5792: CALL 5799 0 0
// end ;
5796: PPOPN 2
5798: END
// export function CheckApemenAmount ; begin
5799: LD_INT 0
5801: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
5802: LD_ADDR_LOC 17
5806: PUSH
5807: LD_LOC 17
5811: PUSH
5812: LD_INT 1
5814: MINUS
5815: ST_TO_ADDR
// if _isSpawning then
5816: LD_LOC 16
5820: IFFALSE 5824
// exit ;
5822: GO 5872
// if _wildApemenAmount <= ( _apemenThreshold ) then
5824: LD_LOC 17
5828: PUSH
5829: LD_LOC 15
5833: LESSEQUAL
5834: IFFALSE 5872
// begin if _apemenSkillLevel < 8 then
5836: LD_LOC 14
5840: PUSH
5841: LD_INT 8
5843: LESS
5844: IFFALSE 5860
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
5846: LD_ADDR_LOC 14
5850: PUSH
5851: LD_LOC 14
5855: PUSH
5856: LD_INT 1
5858: PLUS
5859: ST_TO_ADDR
// _isSpawning := true ;
5860: LD_ADDR_LOC 16
5864: PUSH
5865: LD_INT 1
5867: ST_TO_ADDR
// prepare_apemen ;
5868: CALL 5877 0 0
// end ; end ;
5872: LD_VAR 0 1
5876: RET
// function prepare_apemen ; var i ; begin
5877: LD_INT 0
5879: PPUSH
5880: PPUSH
// if not amount_of_apemen then
5881: LD_EXP 27
5885: NOT
5886: IFFALSE 5890
// exit ;
5888: GO 6069
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5890: LD_INT 1050
5892: PPUSH
5893: LD_INT 3150
5895: PPUSH
5896: CALL_OW 12
5900: PPUSH
5901: CALL_OW 67
// apeman_init ;
5905: CALL 6074 0 0
// for i in ( Side_Positions diff [ 0 ] ) do
5909: LD_ADDR_VAR 0 2
5913: PUSH
5914: LD_EXP 32
5918: PUSH
5919: LD_INT 0
5921: PUSH
5922: EMPTY
5923: LIST
5924: DIFF
5925: PUSH
5926: FOR_IN
5927: IFFALSE 6031
// begin if i = 1 then
5929: LD_VAR 0 2
5933: PUSH
5934: LD_INT 1
5936: EQUAL
5937: IFFALSE 5954
// PlaceUnitArea ( CreateHuman , north_apeman , false ) ;
5939: CALL_OW 44
5943: PPUSH
5944: LD_INT 1
5946: PPUSH
5947: LD_INT 0
5949: PPUSH
5950: CALL_OW 49
// if i = 2 then
5954: LD_VAR 0 2
5958: PUSH
5959: LD_INT 2
5961: EQUAL
5962: IFFALSE 5979
// PlaceUnitArea ( CreateHuman , north_apeman , false ) ;
5964: CALL_OW 44
5968: PPUSH
5969: LD_INT 1
5971: PPUSH
5972: LD_INT 0
5974: PPUSH
5975: CALL_OW 49
// if i = 3 then
5979: LD_VAR 0 2
5983: PUSH
5984: LD_INT 3
5986: EQUAL
5987: IFFALSE 6004
// PlaceUnitArea ( CreateHuman , south_apeman , false ) ;
5989: CALL_OW 44
5993: PPUSH
5994: LD_INT 2
5996: PPUSH
5997: LD_INT 0
5999: PPUSH
6000: CALL_OW 49
// if i = 4 then
6004: LD_VAR 0 2
6008: PUSH
6009: LD_INT 4
6011: EQUAL
6012: IFFALSE 6029
// PlaceUnitArea ( CreateHuman , south_apeman , false ) ;
6014: CALL_OW 44
6018: PPUSH
6019: LD_INT 2
6021: PPUSH
6022: LD_INT 0
6024: PPUSH
6025: CALL_OW 49
// end ;
6029: GO 5926
6031: POP
6032: POP
// _wildApemenAmount := _wildApemenAmount + _apemenIncrement ;
6033: LD_ADDR_LOC 17
6037: PUSH
6038: LD_LOC 17
6042: PUSH
6043: LD_LOC 12
6047: PLUS
6048: ST_TO_ADDR
// until _wildApemenAmount >= _apemenMaximum ;
6049: LD_LOC 17
6053: PUSH
6054: LD_LOC 13
6058: GREATEREQUAL
6059: IFFALSE 5890
// _isSpawning := false ;
6061: LD_ADDR_LOC 16
6065: PUSH
6066: LD_INT 0
6068: ST_TO_ADDR
// end ;
6069: LD_VAR 0 1
6073: RET
// function apeman_init ; begin
6074: LD_INT 0
6076: PPUSH
// uc_side := 0 ;
6077: LD_ADDR_OWVAR 20
6081: PUSH
6082: LD_INT 0
6084: ST_TO_ADDR
// uc_nation := nation_nature ;
6085: LD_ADDR_OWVAR 21
6089: PUSH
6090: LD_INT 0
6092: ST_TO_ADDR
// hc_class := class_apeman ;
6093: LD_ADDR_OWVAR 28
6097: PUSH
6098: LD_INT 12
6100: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
6101: LD_ADDR_OWVAR 30
6105: PUSH
6106: LD_INT 2
6108: PUSH
6109: LD_INT 2
6111: PUSH
6112: LD_INT 2
6114: PUSH
6115: LD_INT 2
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
6124: LD_ADDR_OWVAR 31
6128: PUSH
6129: LD_INT 0
6131: PPUSH
6132: LD_INT 2
6134: PPUSH
6135: CALL_OW 12
6139: PUSH
6140: LD_LOC 14
6144: PLUS
6145: PUSH
6146: LD_INT 0
6148: PPUSH
6149: LD_INT 2
6151: PPUSH
6152: CALL_OW 12
6156: PUSH
6157: LD_LOC 14
6161: PLUS
6162: PUSH
6163: LD_INT 0
6165: PPUSH
6166: LD_INT 2
6168: PPUSH
6169: CALL_OW 12
6173: PUSH
6174: LD_LOC 14
6178: PLUS
6179: PUSH
6180: LD_INT 0
6182: PPUSH
6183: LD_INT 2
6185: PPUSH
6186: CALL_OW 12
6190: PUSH
6191: LD_LOC 14
6195: PLUS
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
6203: LD_ADDR_OWVAR 29
6207: PUSH
6208: LD_INT 10
6210: PUSH
6211: LD_INT 12
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: ST_TO_ADDR
// hc_sex := sex_male ;
6218: LD_ADDR_OWVAR 27
6222: PUSH
6223: LD_INT 1
6225: ST_TO_ADDR
// hc_importance := 0 ;
6226: LD_ADDR_OWVAR 32
6230: PUSH
6231: LD_INT 0
6233: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
6234: LD_ADDR_OWVAR 35
6238: PUSH
6239: LD_INT 20
6241: NEG
6242: PPUSH
6243: LD_INT 20
6245: PPUSH
6246: CALL_OW 12
6250: ST_TO_ADDR
// end ; end_of_file
6251: LD_VAR 0 1
6255: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6256: LD_INT 0
6258: PPUSH
6259: PPUSH
// for un in battle_flags_id do
6260: LD_ADDR_VAR 0 2
6264: PUSH
6265: LD_EXP 42
6269: PUSH
6270: FOR_IN
6271: IFFALSE 6346
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6273: LD_VAR 0 2
6277: PPUSH
6278: LD_INT 1
6280: PUSH
6281: LD_LOC 18
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PUSH
6290: LD_INT 2
6292: PUSH
6293: LD_LOC 18
6297: PUSH
6298: LD_INT 2
6300: DIV
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: PUSH
6306: LD_INT 3
6308: PUSH
6309: LD_LOC 18
6313: PUSH
6314: LD_INT 5
6316: DIV
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: PUSH
6322: LD_INT 20
6324: PUSH
6325: LD_LOC 18
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: PPUSH
6340: CALL_OW 423
6344: GO 6270
6346: POP
6347: POP
// end ;
6348: LD_VAR 0 1
6352: RET
// every 0 0$0.1 do var un ;
6353: GO 6355
6355: DISABLE
6356: LD_INT 0
6358: PPUSH
// begin if not def_morale_flags then
6359: LD_EXP 9
6363: NOT
6364: IFFALSE 6368
// exit ;
6366: GO 6445
// if not morale_decreasing_time then
6368: LD_EXP 24
6372: NOT
6373: IFFALSE 6377
// exit ;
6375: GO 6445
// strength = 100 ;
6377: LD_ADDR_LOC 18
6381: PUSH
6382: LD_INT 100
6384: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6385: LD_EXP 24
6389: PPUSH
6390: CALL_OW 67
// strength := strength - 1 ;
6394: LD_ADDR_LOC 18
6398: PUSH
6399: LD_LOC 18
6403: PUSH
6404: LD_INT 1
6406: MINUS
6407: ST_TO_ADDR
// Update_Flags ;
6408: CALL 6256 0 0
// until not strength ;
6412: LD_LOC 18
6416: NOT
6417: IFFALSE 6385
// for un in battle_flags_id do
6419: LD_ADDR_VAR 0 1
6423: PUSH
6424: LD_EXP 42
6428: PUSH
6429: FOR_IN
6430: IFFALSE 6443
// KillBattleFlag ( un ) ;
6432: LD_VAR 0 1
6436: PPUSH
6437: CALL_OW 419
6441: GO 6429
6443: POP
6444: POP
// end ; end_of_file
6445: PPOPN 1
6447: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
6448: LD_INT 0
6450: PPUSH
6451: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
6452: LD_ADDR_VAR 0 2
6456: PUSH
6457: LD_STRING #Multi1x1-Time
6459: PUSH
6460: LD_OWVAR 1
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: ST_TO_ADDR
// if WaitServerStrings then
6469: LD_EXP 46
6473: IFFALSE 6491
// AllStrings = AllStrings ^ WaitServerStrings ;
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: LD_VAR 0 2
6484: PUSH
6485: LD_EXP 46
6489: ADD
6490: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
6491: LD_INT 0
6493: PUSH
6494: LD_EXP 28
6498: PUSH
6499: LD_OWVAR 1
6503: MINUS
6504: LESSEQUAL
6505: IFFALSE 6536
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
6507: LD_ADDR_VAR 0 2
6511: PUSH
6512: LD_VAR 0 2
6516: PUSH
6517: LD_STRING #allowedsibbomb
6519: PUSH
6520: LD_EXP 28
6524: PUSH
6525: LD_OWVAR 1
6529: MINUS
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: ADD
6535: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
6536: LD_INT 0
6538: PUSH
6539: LD_EXP 49
6543: PUSH
6544: LD_OWVAR 1
6548: MINUS
6549: LESSEQUAL
6550: IFFALSE 6581
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
6552: LD_ADDR_VAR 0 2
6556: PUSH
6557: LD_VAR 0 2
6561: PUSH
6562: LD_STRING #builduptime
6564: PUSH
6565: LD_EXP 49
6569: PUSH
6570: LD_OWVAR 1
6574: MINUS
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: ADD
6580: ST_TO_ADDR
// if ( ExtraStrings ) then
6581: LD_EXP 45
6585: IFFALSE 6607
// AllStrings := AllStrings ^  ^ ExtraStrings ;
6587: LD_ADDR_VAR 0 2
6591: PUSH
6592: LD_VAR 0 2
6596: PUSH
6597: LD_STRING 
6599: ADD
6600: PUSH
6601: LD_EXP 45
6605: ADD
6606: ST_TO_ADDR
// Display_Strings := AllStrings ;
6607: LD_ADDR_OWVAR 47
6611: PUSH
6612: LD_VAR 0 2
6616: ST_TO_ADDR
// end ;
6617: LD_VAR 0 1
6621: RET
// every 0 0$1 do
6622: GO 6624
6624: DISABLE
// begin ShowTimer ;
6625: CALL 6448 0 0
// enable ;
6629: ENABLE
// end ; end_of_file
6630: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
6631: LD_INT 0
6633: PPUSH
6634: PPUSH
6635: PPUSH
// BuildUpTime_Delay = 0 ;
6636: LD_ADDR_EXP 49
6640: PUSH
6641: LD_INT 0
6643: ST_TO_ADDR
// if not def_builduptime then
6644: LD_EXP 14
6648: NOT
6649: IFFALSE 6653
// exit ;
6651: GO 6836
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
6653: LD_ADDR_EXP 49
6657: PUSH
6658: LD_INT 8400
6660: PUSH
6661: LD_INT 2100
6663: PUSH
6664: LD_EXP 14
6668: MUL
6669: PLUS
6670: ST_TO_ADDR
// BuildUpTimeActive := true ;
6671: LD_ADDR_EXP 48
6675: PUSH
6676: LD_INT 1
6678: ST_TO_ADDR
// for i := 1 to 8 do
6679: LD_ADDR_VAR 0 2
6683: PUSH
6684: DOUBLE
6685: LD_INT 1
6687: DEC
6688: ST_TO_ADDR
6689: LD_INT 8
6691: PUSH
6692: FOR_TO
6693: IFFALSE 6834
// if Side_Positions [ i ] then
6695: LD_EXP 32
6699: PUSH
6700: LD_VAR 0 2
6704: ARRAY
6705: IFFALSE 6832
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
6707: LD_EXP 47
6711: PUSH
6712: LD_EXP 32
6716: PUSH
6717: LD_VAR 0 2
6721: ARRAY
6722: ARRAY
6723: PPUSH
6724: LD_INT 5
6726: PPUSH
6727: CALL_OW 424
// for j := 1 to 8 do
6731: LD_ADDR_VAR 0 3
6735: PUSH
6736: DOUBLE
6737: LD_INT 1
6739: DEC
6740: ST_TO_ADDR
6741: LD_INT 8
6743: PUSH
6744: FOR_TO
6745: IFFALSE 6830
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
6747: LD_EXP 32
6751: PUSH
6752: LD_VAR 0 3
6756: ARRAY
6757: PUSH
6758: LD_EXP 30
6762: PUSH
6763: LD_VAR 0 2
6767: ARRAY
6768: PUSH
6769: LD_EXP 30
6773: PUSH
6774: LD_VAR 0 3
6778: ARRAY
6779: NONEQUAL
6780: PUSH
6781: LD_EXP 34
6785: NOT
6786: PUSH
6787: LD_VAR 0 2
6791: PUSH
6792: LD_VAR 0 3
6796: NONEQUAL
6797: AND
6798: OR
6799: AND
6800: IFFALSE 6828
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
6802: LD_VAR 0 3
6806: PPUSH
6807: LD_EXP 47
6811: PUSH
6812: LD_EXP 32
6816: PUSH
6817: LD_VAR 0 2
6821: ARRAY
6822: ARRAY
6823: PPUSH
6824: CALL_OW 333
6828: GO 6744
6830: POP
6831: POP
// end ;
6832: GO 6692
6834: POP
6835: POP
// end ;
6836: LD_VAR 0 1
6840: RET
// export function EndBuildUp ; var i , j ; begin
6841: LD_INT 0
6843: PPUSH
6844: PPUSH
6845: PPUSH
// BuildUpTimeActive := false ;
6846: LD_ADDR_EXP 48
6850: PUSH
6851: LD_INT 0
6853: ST_TO_ADDR
// for i := 1 to 8 do
6854: LD_ADDR_VAR 0 2
6858: PUSH
6859: DOUBLE
6860: LD_INT 1
6862: DEC
6863: ST_TO_ADDR
6864: LD_INT 8
6866: PUSH
6867: FOR_TO
6868: IFFALSE 7009
// if Side_Positions [ i ] then
6870: LD_EXP 32
6874: PUSH
6875: LD_VAR 0 2
6879: ARRAY
6880: IFFALSE 7007
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
6882: LD_EXP 47
6886: PUSH
6887: LD_EXP 32
6891: PUSH
6892: LD_VAR 0 2
6896: ARRAY
6897: ARRAY
6898: PPUSH
6899: LD_INT 0
6901: PPUSH
6902: CALL_OW 424
// for j := 1 to 8 do
6906: LD_ADDR_VAR 0 3
6910: PUSH
6911: DOUBLE
6912: LD_INT 1
6914: DEC
6915: ST_TO_ADDR
6916: LD_INT 8
6918: PUSH
6919: FOR_TO
6920: IFFALSE 7005
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
6922: LD_EXP 32
6926: PUSH
6927: LD_VAR 0 3
6931: ARRAY
6932: PUSH
6933: LD_EXP 30
6937: PUSH
6938: LD_VAR 0 2
6942: ARRAY
6943: PUSH
6944: LD_EXP 30
6948: PUSH
6949: LD_VAR 0 3
6953: ARRAY
6954: NONEQUAL
6955: PUSH
6956: LD_EXP 34
6960: NOT
6961: PUSH
6962: LD_VAR 0 2
6966: PUSH
6967: LD_VAR 0 3
6971: NONEQUAL
6972: AND
6973: OR
6974: AND
6975: IFFALSE 7003
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
6977: LD_VAR 0 3
6981: PPUSH
6982: LD_EXP 47
6986: PUSH
6987: LD_EXP 32
6991: PUSH
6992: LD_VAR 0 2
6996: ARRAY
6997: ARRAY
6998: PPUSH
6999: CALL_OW 334
7003: GO 6919
7005: POP
7006: POP
// end ;
7007: GO 6867
7009: POP
7010: POP
// end ;
7011: LD_VAR 0 1
7015: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
7016: LD_EXP 48
7020: IFFALSE 7195
7022: GO 7024
7024: DISABLE
7025: LD_INT 0
7027: PPUSH
7028: PPUSH
// begin for i := 1 to 8 do
7029: LD_ADDR_VAR 0 1
7033: PUSH
7034: DOUBLE
7035: LD_INT 1
7037: DEC
7038: ST_TO_ADDR
7039: LD_INT 8
7041: PUSH
7042: FOR_TO
7043: IFFALSE 7192
// if Side_Positions [ i ] then
7045: LD_EXP 32
7049: PUSH
7050: LD_VAR 0 1
7054: ARRAY
7055: IFFALSE 7190
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
7057: LD_ADDR_VAR 0 2
7061: PUSH
7062: LD_EXP 47
7066: PUSH
7067: LD_EXP 32
7071: PUSH
7072: LD_VAR 0 1
7076: ARRAY
7077: ARRAY
7078: PPUSH
7079: LD_INT 2
7081: PUSH
7082: LD_INT 21
7084: PUSH
7085: LD_INT 1
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 21
7094: PUSH
7095: LD_INT 2
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 22
7109: PUSH
7110: LD_OWVAR 2
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PPUSH
7123: CALL_OW 70
7127: PUSH
7128: FOR_IN
7129: IFFALSE 7188
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
7131: LD_EXP 30
7135: PUSH
7136: LD_VAR 0 1
7140: ARRAY
7141: PUSH
7142: LD_EXP 30
7146: PUSH
7147: LD_OWVAR 2
7151: ARRAY
7152: NONEQUAL
7153: PUSH
7154: LD_EXP 34
7158: NOT
7159: PUSH
7160: LD_VAR 0 1
7164: PUSH
7165: LD_OWVAR 2
7169: NONEQUAL
7170: AND
7171: OR
7172: IFFALSE 7186
// ComMoveToArea ( un , BuildUpEscape ) ;
7174: LD_VAR 0 2
7178: PPUSH
7179: LD_INT 12
7181: PPUSH
7182: CALL_OW 113
7186: GO 7128
7188: POP
7189: POP
7190: GO 7042
7192: POP
7193: POP
// enable ;
7194: ENABLE
// end ;
7195: PPOPN 2
7197: END
// every 0 0$1 trigger def_builduptime do
7198: LD_EXP 14
7202: IFFALSE 7228
7204: GO 7206
7206: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
7207: LD_INT 8400
7209: PUSH
7210: LD_EXP 14
7214: PUSH
7215: LD_INT 2100
7217: MUL
7218: PLUS
7219: PPUSH
7220: CALL_OW 67
// EndBuildUp ;
7224: CALL 6841 0 0
// end ; end_of_file
7228: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7229: LD_INT 0
7231: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7232: LD_VAR 0 1
7236: PPUSH
7237: CALL_OW 255
7241: PUSH
7242: LD_VAR 0 4
7246: EQUAL
7247: IFFALSE 7266
// begin SetAchievement ( ACH_RAD ) ;
7249: LD_STRING ACH_RAD
7251: PPUSH
7252: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7256: LD_STRING ACH_NL
7258: PPUSH
7259: LD_INT 1
7261: PPUSH
7262: CALL_OW 564
// end end ;
7266: LD_VAR 0 5
7270: RET
// export function SA_Win ( side ) ; begin
7271: LD_INT 0
7273: PPUSH
// case side of 1 :
7274: LD_VAR 0 1
7278: PUSH
7279: LD_INT 1
7281: DOUBLE
7282: EQUAL
7283: IFTRUE 7287
7285: GO 7300
7287: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7288: LD_STRING ACH_AH
7290: PPUSH
7291: LD_INT 1
7293: PPUSH
7294: CALL_OW 564
7298: GO 7463
7300: LD_INT 2
7302: DOUBLE
7303: EQUAL
7304: IFTRUE 7308
7306: GO 7321
7308: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7309: LD_STRING ACH_E
7311: PPUSH
7312: LD_INT 1
7314: PPUSH
7315: CALL_OW 564
7319: GO 7463
7321: LD_INT 3
7323: DOUBLE
7324: EQUAL
7325: IFTRUE 7329
7327: GO 7342
7329: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7330: LD_STRING ACH_OOL
7332: PPUSH
7333: LD_INT 1
7335: PPUSH
7336: CALL_OW 564
7340: GO 7463
7342: LD_INT 1
7344: PUSH
7345: LD_INT 2
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: DOUBLE
7352: EQUAL
7353: IFTRUE 7357
7355: GO 7382
7357: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7358: LD_STRING ACH_AH
7360: PPUSH
7361: LD_REAL  5.00000000000000E-0001
7364: PPUSH
7365: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7369: LD_STRING ACH_E
7371: PPUSH
7372: LD_REAL  5.00000000000000E-0001
7375: PPUSH
7376: CALL_OW 564
// end ; [ 2 , 3 ] :
7380: GO 7463
7382: LD_INT 2
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: DOUBLE
7392: EQUAL
7393: IFTRUE 7397
7395: GO 7422
7397: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7398: LD_STRING ACH_OOL
7400: PPUSH
7401: LD_REAL  5.00000000000000E-0001
7404: PPUSH
7405: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7409: LD_STRING ACH_E
7411: PPUSH
7412: LD_REAL  5.00000000000000E-0001
7415: PPUSH
7416: CALL_OW 564
// end ; [ 3 , 1 ] :
7420: GO 7463
7422: LD_INT 3
7424: PUSH
7425: LD_INT 1
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: DOUBLE
7432: EQUAL
7433: IFTRUE 7437
7435: GO 7462
7437: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7438: LD_STRING ACH_AH
7440: PPUSH
7441: LD_REAL  5.00000000000000E-0001
7444: PPUSH
7445: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7449: LD_STRING ACH_OOL
7451: PPUSH
7452: LD_REAL  5.00000000000000E-0001
7455: PPUSH
7456: CALL_OW 564
// end ; end ;
7460: GO 7463
7462: POP
// end ; end_of_file
7463: LD_VAR 0 2
7467: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7468: LD_INT 0
7470: PPUSH
7471: PPUSH
// enable ( 98 ) ;
7472: LD_INT 98
7474: ENABLE_MARKED
// GameEnded = false ;
7475: LD_ADDR_LOC 24
7479: PUSH
7480: LD_INT 0
7482: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7483: LD_ADDR_LOC 23
7487: PUSH
7488: LD_INT 0
7490: PUSH
7491: LD_INT 0
7493: PUSH
7494: LD_INT 0
7496: PUSH
7497: LD_INT 0
7499: PUSH
7500: LD_INT 0
7502: PUSH
7503: LD_INT 0
7505: PUSH
7506: LD_INT 0
7508: PUSH
7509: LD_INT 0
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: ST_TO_ADDR
// unfoged = false ;
7522: LD_ADDR_LOC 25
7526: PUSH
7527: LD_INT 0
7529: ST_TO_ADDR
// defeated_specs := [ ] ;
7530: LD_ADDR_LOC 26
7534: PUSH
7535: EMPTY
7536: ST_TO_ADDR
// for i = 1 to side_positions do
7537: LD_ADDR_VAR 0 2
7541: PUSH
7542: DOUBLE
7543: LD_INT 1
7545: DEC
7546: ST_TO_ADDR
7547: LD_EXP 32
7551: PUSH
7552: FOR_TO
7553: IFFALSE 7593
// if not side_positions [ i ] then
7555: LD_EXP 32
7559: PUSH
7560: LD_VAR 0 2
7564: ARRAY
7565: NOT
7566: IFFALSE 7591
// defeated = replace ( defeated , i , true ) ;
7568: LD_ADDR_LOC 23
7572: PUSH
7573: LD_LOC 23
7577: PPUSH
7578: LD_VAR 0 2
7582: PPUSH
7583: LD_INT 1
7585: PPUSH
7586: CALL_OW 1
7590: ST_TO_ADDR
7591: GO 7552
7593: POP
7594: POP
// end ;
7595: LD_VAR 0 1
7599: RET
// function CanWinLoose ; begin
7600: LD_INT 0
7602: PPUSH
// Result := true ;
7603: LD_ADDR_VAR 0 1
7607: PUSH
7608: LD_INT 1
7610: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7611: CALL_OW 518
7615: PUSH
7616: CALL_OW 519
7620: PUSH
7621: LD_INT 0
7623: GREATER
7624: AND
7625: IFFALSE 7635
// Result := false ;
7627: LD_ADDR_VAR 0 1
7631: PUSH
7632: LD_INT 0
7634: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7635: CALL_OW 531
7639: PUSH
7640: CALL_OW 519
7644: PUSH
7645: LD_INT 1
7647: GREATER
7648: AND
7649: IFFALSE 7659
// Result := false ;
7651: LD_ADDR_VAR 0 1
7655: PUSH
7656: LD_INT 0
7658: ST_TO_ADDR
// end ;
7659: LD_VAR 0 1
7663: RET
// export function HasPower ( i ) ; var k , h ; begin
7664: LD_INT 0
7666: PPUSH
7667: PPUSH
7668: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7669: LD_VAR 0 1
7673: PPUSH
7674: CALL_OW 108
7678: NOT
7679: PUSH
7680: LD_EXP 43
7684: PUSH
7685: LD_VAR 0 1
7689: ARRAY
7690: NOT
7691: AND
7692: PUSH
7693: LD_OWVAR 4
7697: AND
7698: IFFALSE 7710
// begin result = false ;
7700: LD_ADDR_VAR 0 2
7704: PUSH
7705: LD_INT 0
7707: ST_TO_ADDR
// end else
7708: GO 8005
// case def_win_rules of 0 :
7710: LD_EXP 29
7714: PUSH
7715: LD_INT 0
7717: DOUBLE
7718: EQUAL
7719: IFTRUE 7723
7721: GO 7886
7723: POP
// if def_people_respawning then
7724: LD_EXP 12
7728: IFFALSE 7819
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7730: LD_ADDR_VAR 0 2
7734: PUSH
7735: LD_INT 22
7737: PUSH
7738: LD_VAR 0 1
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: LD_INT 2
7749: PUSH
7750: LD_INT 21
7752: PUSH
7753: LD_INT 1
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 33
7762: PUSH
7763: LD_INT 3
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: PUSH
7770: LD_INT 33
7772: PUSH
7773: LD_INT 5
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: PUSH
7780: LD_INT 30
7782: PUSH
7783: LD_INT 0
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: PUSH
7790: LD_INT 30
7792: PUSH
7793: LD_INT 1
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PPUSH
7812: CALL_OW 69
7816: ST_TO_ADDR
7817: GO 7884
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
7819: LD_ADDR_VAR 0 2
7823: PUSH
7824: LD_INT 22
7826: PUSH
7827: LD_VAR 0 1
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: PUSH
7836: LD_INT 2
7838: PUSH
7839: LD_INT 21
7841: PUSH
7842: LD_INT 1
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PUSH
7849: LD_INT 33
7851: PUSH
7852: LD_INT 3
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: LD_INT 33
7861: PUSH
7862: LD_INT 5
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: PPUSH
7879: CALL_OW 69
7883: ST_TO_ADDR
7884: GO 8005
7886: LD_INT 1
7888: DOUBLE
7889: EQUAL
7890: IFTRUE 7894
7892: GO 7933
7894: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
7895: LD_ADDR_VAR 0 2
7899: PUSH
7900: LD_INT 22
7902: PUSH
7903: LD_VAR 0 1
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PUSH
7912: LD_INT 21
7914: PUSH
7915: LD_INT 1
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: PPUSH
7926: CALL_OW 69
7930: ST_TO_ADDR
7931: GO 8005
7933: LD_INT 2
7935: DOUBLE
7936: EQUAL
7937: IFTRUE 7941
7939: GO 8004
7941: POP
// begin h = false ;
7942: LD_ADDR_VAR 0 4
7946: PUSH
7947: LD_INT 0
7949: ST_TO_ADDR
// for k in heroes [ i ] do
7950: LD_ADDR_VAR 0 3
7954: PUSH
7955: LD_EXP 44
7959: PUSH
7960: LD_VAR 0 1
7964: ARRAY
7965: PUSH
7966: FOR_IN
7967: IFFALSE 7990
// if IsLive ( k ) then
7969: LD_VAR 0 3
7973: PPUSH
7974: CALL_OW 300
7978: IFFALSE 7988
// h = true ;
7980: LD_ADDR_VAR 0 4
7984: PUSH
7985: LD_INT 1
7987: ST_TO_ADDR
7988: GO 7966
7990: POP
7991: POP
// Result := h ;
7992: LD_ADDR_VAR 0 2
7996: PUSH
7997: LD_VAR 0 4
8001: ST_TO_ADDR
// end ; end ;
8002: GO 8005
8004: POP
// end ;
8005: LD_VAR 0 2
8009: RET
// function AlliedSides ( i , j ) ; begin
8010: LD_INT 0
8012: PPUSH
// Result := false ;
8013: LD_ADDR_VAR 0 3
8017: PUSH
8018: LD_INT 0
8020: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8021: LD_VAR 0 1
8025: PPUSH
8026: LD_VAR 0 2
8030: PPUSH
8031: CALL_OW 81
8035: PUSH
8036: LD_INT 1
8038: EQUAL
8039: PUSH
8040: LD_VAR 0 2
8044: PPUSH
8045: LD_VAR 0 1
8049: PPUSH
8050: CALL_OW 81
8054: PUSH
8055: LD_INT 1
8057: EQUAL
8058: AND
8059: PUSH
8060: LD_VAR 0 1
8064: PPUSH
8065: CALL_OW 83
8069: AND
8070: PUSH
8071: LD_VAR 0 2
8075: PPUSH
8076: CALL_OW 83
8080: AND
8081: IFFALSE 8091
// Result := true ;
8083: LD_ADDR_VAR 0 3
8087: PUSH
8088: LD_INT 1
8090: ST_TO_ADDR
// end ;
8091: LD_VAR 0 3
8095: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8096: CALL 7600 0 0
8100: PUSH
8101: LD_LOC 24
8105: NOT
8106: AND
8107: IFFALSE 8123
8109: GO 8111
8111: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8112: LD_ADDR_EXP 46
8116: PUSH
8117: LD_STRING #Player-Ended
8119: PUSH
8120: EMPTY
8121: LIST
8122: ST_TO_ADDR
8123: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8124: CALL 7600 0 0
8128: PUSH
8129: LD_LOC 24
8133: AND
8134: IFFALSE 8143
8136: GO 8138
8138: DISABLE
// YouLostInMultiplayer ;
8139: CALL_OW 107
8143: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8144: CALL 7600 0 0
8148: NOT
8149: PUSH
8150: CALL_OW 531
8154: NOT
8155: AND
8156: IFFALSE 8172
8158: GO 8160
8160: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8161: LD_ADDR_EXP 46
8165: PUSH
8166: LD_STRING #server-wait
8168: PUSH
8169: EMPTY
8170: LIST
8171: ST_TO_ADDR
8172: END
// every 100 trigger IAmSpec do
8173: CALL_OW 531
8177: IFFALSE 8193
8179: GO 8181
8181: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8182: LD_ADDR_EXP 46
8186: PUSH
8187: LD_STRING #Player-IAmSpec
8189: PUSH
8190: EMPTY
8191: LIST
8192: ST_TO_ADDR
8193: END
// every 100 trigger GameEnded and IAmSpec do
8194: LD_LOC 24
8198: PUSH
8199: CALL_OW 531
8203: AND
8204: IFFALSE 8213
8206: GO 8208
8208: DISABLE
// YouLostInMultiplayer ;
8209: CALL_OW 107
8213: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8214: CALL 7600 0 0
8218: PUSH
8219: LD_LOC 24
8223: NOT
8224: AND
8225: IFFALSE 8241
8227: GO 8229
8229: DISABLE
// WaitServerStrings = [ $player-win ] ;
8230: LD_ADDR_EXP 46
8234: PUSH
8235: LD_STRING $player-win
8237: PUSH
8238: EMPTY
8239: LIST
8240: ST_TO_ADDR
8241: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8242: CALL 7600 0 0
8246: PUSH
8247: LD_LOC 24
8251: AND
8252: IFFALSE 8276
8254: GO 8256
8256: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8257: LD_EXP 33
8261: PUSH
8262: LD_OWVAR 7
8266: ARRAY
8267: PPUSH
8268: CALL 7271 0 1
// YouWinInMultiplayer ;
8272: CALL_OW 106
// end ;
8276: END
// every 100 trigger isEditor marked 401 do
8277: LD_OWVAR 84
8281: IFFALSE 8297
8283: GO 8285
8285: DISABLE
// Debug_Strings = [ You won ] ;
8286: LD_ADDR_OWVAR 48
8290: PUSH
8291: LD_STRING You won
8293: PUSH
8294: EMPTY
8295: LIST
8296: ST_TO_ADDR
8297: END
// every 100 trigger isEditor marked 400 do
8298: LD_OWVAR 84
8302: IFFALSE 8318
8304: GO 8306
8306: DISABLE
// Debug_Strings = [ You loss ] ;
8307: LD_ADDR_OWVAR 48
8311: PUSH
8312: LD_STRING You loss
8314: PUSH
8315: EMPTY
8316: LIST
8317: ST_TO_ADDR
8318: END
// every 100 marked 98 do var i , un ;
8319: GO 8321
8321: DISABLE
8322: LD_INT 0
8324: PPUSH
8325: PPUSH
// begin for i = 1 to side_positions do
8326: LD_ADDR_VAR 0 1
8330: PUSH
8331: DOUBLE
8332: LD_INT 1
8334: DEC
8335: ST_TO_ADDR
8336: LD_EXP 32
8340: PUSH
8341: FOR_TO
8342: IFFALSE 8429
// begin if side_positions [ i ] then
8344: LD_EXP 32
8348: PUSH
8349: LD_VAR 0 1
8353: ARRAY
8354: IFFALSE 8427
// if not HasPower ( i ) and not defeated [ i ] then
8356: LD_VAR 0 1
8360: PPUSH
8361: CALL 7664 0 1
8365: NOT
8366: PUSH
8367: LD_LOC 23
8371: PUSH
8372: LD_VAR 0 1
8376: ARRAY
8377: NOT
8378: AND
8379: IFFALSE 8427
// begin defeated = replace ( defeated , i , true ) ;
8381: LD_ADDR_LOC 23
8385: PUSH
8386: LD_LOC 23
8390: PPUSH
8391: LD_VAR 0 1
8395: PPUSH
8396: LD_INT 1
8398: PPUSH
8399: CALL_OW 1
8403: ST_TO_ADDR
// if i = mp_player_side then
8404: LD_VAR 0 1
8408: PUSH
8409: LD_OWVAR 7
8413: EQUAL
8414: IFFALSE 8427
// begin Multiplayer_Loose_Message ;
8416: CALL_OW 521
// SetPlayerSpectator ( ) ;
8420: CALL_OW 572
// enable ( 400 ) ;
8424: LD_INT 400
8426: ENABLE_MARKED
// end ; end ; end ;
8427: GO 8341
8429: POP
8430: POP
// DidGameEnd ;
8431: CALL 8446 0 0
// if not GameEnded then
8435: LD_LOC 24
8439: NOT
8440: IFFALSE 8443
// enable ;
8442: ENABLE
// end ;
8443: PPOPN 2
8445: END
// function DidGameEnd ; var i , k , enemy ; begin
8446: LD_INT 0
8448: PPUSH
8449: PPUSH
8450: PPUSH
8451: PPUSH
// enemy = [ ] ;
8452: LD_ADDR_VAR 0 4
8456: PUSH
8457: EMPTY
8458: ST_TO_ADDR
// for i = 1 to side_positions do
8459: LD_ADDR_VAR 0 2
8463: PUSH
8464: DOUBLE
8465: LD_INT 1
8467: DEC
8468: ST_TO_ADDR
8469: LD_EXP 32
8473: PUSH
8474: FOR_TO
8475: IFFALSE 8569
// if not defeated [ i ] then
8477: LD_LOC 23
8481: PUSH
8482: LD_VAR 0 2
8486: ARRAY
8487: NOT
8488: IFFALSE 8567
// for k = 1 to side_positions do
8490: LD_ADDR_VAR 0 3
8494: PUSH
8495: DOUBLE
8496: LD_INT 1
8498: DEC
8499: ST_TO_ADDR
8500: LD_EXP 32
8504: PUSH
8505: FOR_TO
8506: IFFALSE 8565
// if not defeated [ k ] then
8508: LD_LOC 23
8512: PUSH
8513: LD_VAR 0 3
8517: ARRAY
8518: NOT
8519: IFFALSE 8563
// if not AlliedSides ( i , k ) then
8521: LD_VAR 0 2
8525: PPUSH
8526: LD_VAR 0 3
8530: PPUSH
8531: CALL 8010 0 2
8535: NOT
8536: IFFALSE 8563
// enemy = enemy ^ [ i , k ] ;
8538: LD_ADDR_VAR 0 4
8542: PUSH
8543: LD_VAR 0 4
8547: PUSH
8548: LD_VAR 0 2
8552: PUSH
8553: LD_VAR 0 3
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: ADD
8562: ST_TO_ADDR
8563: GO 8505
8565: POP
8566: POP
8567: GO 8474
8569: POP
8570: POP
// if not enemy then
8571: LD_VAR 0 4
8575: NOT
8576: IFFALSE 8602
// begin GameEnded = true ;
8578: LD_ADDR_LOC 24
8582: PUSH
8583: LD_INT 1
8585: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
8586: LD_LOC 23
8590: PUSH
8591: LD_OWVAR 7
8595: ARRAY
8596: NOT
8597: IFFALSE 8602
// enable ( 401 ) ;
8599: LD_INT 401
8601: ENABLE_MARKED
// end ; end ;
8602: LD_VAR 0 1
8606: RET
// function unfog ; var k , friends ; begin
8607: LD_INT 0
8609: PPUSH
8610: PPUSH
8611: PPUSH
// for k = 1 to side_positions do
8612: LD_ADDR_VAR 0 2
8616: PUSH
8617: DOUBLE
8618: LD_INT 1
8620: DEC
8621: ST_TO_ADDR
8622: LD_EXP 32
8626: PUSH
8627: FOR_TO
8628: IFFALSE 8684
// if not defeated [ k ] then
8630: LD_LOC 23
8634: PUSH
8635: LD_VAR 0 2
8639: ARRAY
8640: NOT
8641: IFFALSE 8682
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
8643: LD_OWVAR 7
8647: PPUSH
8648: LD_VAR 0 2
8652: PPUSH
8653: CALL_OW 81
8657: PUSH
8658: LD_INT 1
8660: PUSH
8661: EMPTY
8662: LIST
8663: IN
8664: IFFALSE 8682
// friends = friends ^ k ;
8666: LD_ADDR_VAR 0 3
8670: PUSH
8671: LD_VAR 0 3
8675: PUSH
8676: LD_VAR 0 2
8680: ADD
8681: ST_TO_ADDR
8682: GO 8627
8684: POP
8685: POP
// if not friends then
8686: LD_VAR 0 3
8690: NOT
8691: IFFALSE 8705
// begin SetPlayerSpectator ( ) ;
8693: CALL_OW 572
// unfoged = true ;
8697: LD_ADDR_LOC 25
8701: PUSH
8702: LD_INT 1
8704: ST_TO_ADDR
// end ; end ;
8705: LD_VAR 0 1
8709: RET
// export function MakeGameEnd ; begin
8710: LD_INT 0
8712: PPUSH
// SetPlayerSpectator ( ) ;
8713: CALL_OW 572
// unfoged = true ;
8717: LD_ADDR_LOC 25
8721: PUSH
8722: LD_INT 1
8724: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8725: LD_INT 175
8727: PPUSH
8728: CALL_OW 67
// GameEnded = true ;
8732: LD_ADDR_LOC 24
8736: PUSH
8737: LD_INT 1
8739: ST_TO_ADDR
// end ;
8740: LD_VAR 0 1
8744: RET
// export function GetGameEnded ; begin
8745: LD_INT 0
8747: PPUSH
// result = GameEnded ;
8748: LD_ADDR_VAR 0 1
8752: PUSH
8753: LD_LOC 24
8757: ST_TO_ADDR
// end ; end_of_file
8758: LD_VAR 0 1
8762: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8763: LD_INT 0
8765: PPUSH
8766: PPUSH
8767: PPUSH
// for side = 1 to 8 do
8768: LD_ADDR_VAR 0 2
8772: PUSH
8773: DOUBLE
8774: LD_INT 1
8776: DEC
8777: ST_TO_ADDR
8778: LD_INT 8
8780: PUSH
8781: FOR_TO
8782: IFFALSE 8903
// begin for i = 1 to 72 do
8784: LD_ADDR_VAR 0 3
8788: PUSH
8789: DOUBLE
8790: LD_INT 1
8792: DEC
8793: ST_TO_ADDR
8794: LD_INT 72
8796: PUSH
8797: FOR_TO
8798: IFFALSE 8829
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
8800: LD_VAR 0 3
8804: PPUSH
8805: LD_VAR 0 2
8809: PPUSH
8810: LD_INT 0
8812: PPUSH
8813: LD_VAR 0 3
8817: PPUSH
8818: CALL_OW 565
8822: PPUSH
8823: CALL_OW 322
8827: GO 8797
8829: POP
8830: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
8831: LD_INT 73
8833: PPUSH
8834: LD_VAR 0 2
8838: PPUSH
8839: LD_INT 0
8841: PPUSH
8842: LD_INT 25
8844: PPUSH
8845: CALL_OW 565
8849: PPUSH
8850: CALL_OW 322
// for i = 0 to 40 do
8854: LD_ADDR_VAR 0 3
8858: PUSH
8859: DOUBLE
8860: LD_INT 0
8862: DEC
8863: ST_TO_ADDR
8864: LD_INT 40
8866: PUSH
8867: FOR_TO
8868: IFFALSE 8899
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
8870: LD_VAR 0 3
8874: PPUSH
8875: LD_VAR 0 2
8879: PPUSH
8880: LD_INT 1
8882: PPUSH
8883: LD_VAR 0 3
8887: PPUSH
8888: CALL_OW 565
8892: PPUSH
8893: CALL_OW 324
8897: GO 8867
8899: POP
8900: POP
// end ;
8901: GO 8781
8903: POP
8904: POP
// end ;
8905: LD_VAR 0 1
8909: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
8910: LD_INT 0
8912: PPUSH
8913: PPUSH
8914: PPUSH
// for side = 1 to 8 do
8915: LD_ADDR_VAR 0 3
8919: PUSH
8920: DOUBLE
8921: LD_INT 1
8923: DEC
8924: ST_TO_ADDR
8925: LD_INT 8
8927: PUSH
8928: FOR_TO
8929: IFFALSE 12925
// begin for i = 1 to 73 do
8931: LD_ADDR_VAR 0 4
8935: PUSH
8936: DOUBLE
8937: LD_INT 1
8939: DEC
8940: ST_TO_ADDR
8941: LD_INT 73
8943: PUSH
8944: FOR_TO
8945: IFFALSE 8966
// SetTech ( i , side , state_disabled ) ;
8947: LD_VAR 0 4
8951: PPUSH
8952: LD_VAR 0 3
8956: PPUSH
8957: LD_INT 0
8959: PPUSH
8960: CALL_OW 322
8964: GO 8944
8966: POP
8967: POP
// for i = 0 to 40 do
8968: LD_ADDR_VAR 0 4
8972: PUSH
8973: DOUBLE
8974: LD_INT 0
8976: DEC
8977: ST_TO_ADDR
8978: LD_INT 40
8980: PUSH
8981: FOR_TO
8982: IFFALSE 9003
// SetRestrict ( i , side , false ) ;
8984: LD_VAR 0 4
8988: PPUSH
8989: LD_VAR 0 3
8993: PPUSH
8994: LD_INT 0
8996: PPUSH
8997: CALL_OW 324
9001: GO 8981
9003: POP
9004: POP
// case level of 1 :
9005: LD_VAR 0 1
9009: PUSH
9010: LD_INT 1
9012: DOUBLE
9013: EQUAL
9014: IFTRUE 9018
9016: GO 9171
9018: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9019: LD_INT 35
9021: PPUSH
9022: LD_VAR 0 3
9026: PPUSH
9027: LD_INT 1
9029: PPUSH
9030: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9034: LD_INT 45
9036: PPUSH
9037: LD_VAR 0 3
9041: PPUSH
9042: LD_INT 1
9044: PPUSH
9045: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9049: LD_INT 46
9051: PPUSH
9052: LD_VAR 0 3
9056: PPUSH
9057: LD_INT 1
9059: PPUSH
9060: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9064: LD_INT 47
9066: PPUSH
9067: LD_VAR 0 3
9071: PPUSH
9072: LD_INT 1
9074: PPUSH
9075: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9079: LD_INT 0
9081: PPUSH
9082: LD_VAR 0 3
9086: PPUSH
9087: LD_INT 1
9089: PPUSH
9090: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9094: LD_INT 2
9096: PPUSH
9097: LD_VAR 0 3
9101: PPUSH
9102: LD_INT 1
9104: PPUSH
9105: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9109: LD_INT 4
9111: PPUSH
9112: LD_VAR 0 3
9116: PPUSH
9117: LD_INT 1
9119: PPUSH
9120: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9124: LD_INT 6
9126: PPUSH
9127: LD_VAR 0 3
9131: PPUSH
9132: LD_INT 1
9134: PPUSH
9135: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9139: LD_INT 29
9141: PPUSH
9142: LD_VAR 0 3
9146: PPUSH
9147: LD_INT 1
9149: PPUSH
9150: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9154: LD_INT 31
9156: PPUSH
9157: LD_VAR 0 3
9161: PPUSH
9162: LD_INT 1
9164: PPUSH
9165: CALL_OW 324
// end ; 2 :
9169: GO 12923
9171: LD_INT 2
9173: DOUBLE
9174: EQUAL
9175: IFTRUE 9179
9177: GO 9377
9179: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9180: LD_INT 35
9182: PPUSH
9183: LD_VAR 0 3
9187: PPUSH
9188: LD_INT 1
9190: PPUSH
9191: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9195: LD_INT 45
9197: PPUSH
9198: LD_VAR 0 3
9202: PPUSH
9203: LD_INT 1
9205: PPUSH
9206: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9210: LD_INT 46
9212: PPUSH
9213: LD_VAR 0 3
9217: PPUSH
9218: LD_INT 1
9220: PPUSH
9221: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9225: LD_INT 47
9227: PPUSH
9228: LD_VAR 0 3
9232: PPUSH
9233: LD_INT 1
9235: PPUSH
9236: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9240: LD_INT 1
9242: PPUSH
9243: LD_VAR 0 3
9247: PPUSH
9248: LD_INT 1
9250: PPUSH
9251: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9255: LD_INT 2
9257: PPUSH
9258: LD_VAR 0 3
9262: PPUSH
9263: LD_INT 1
9265: PPUSH
9266: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9270: LD_INT 11
9272: PPUSH
9273: LD_VAR 0 3
9277: PPUSH
9278: LD_INT 1
9280: PPUSH
9281: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9285: LD_INT 0
9287: PPUSH
9288: LD_VAR 0 3
9292: PPUSH
9293: LD_INT 1
9295: PPUSH
9296: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9300: LD_INT 2
9302: PPUSH
9303: LD_VAR 0 3
9307: PPUSH
9308: LD_INT 1
9310: PPUSH
9311: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9315: LD_INT 4
9317: PPUSH
9318: LD_VAR 0 3
9322: PPUSH
9323: LD_INT 1
9325: PPUSH
9326: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9330: LD_INT 6
9332: PPUSH
9333: LD_VAR 0 3
9337: PPUSH
9338: LD_INT 1
9340: PPUSH
9341: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9345: LD_INT 29
9347: PPUSH
9348: LD_VAR 0 3
9352: PPUSH
9353: LD_INT 1
9355: PPUSH
9356: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9360: LD_INT 31
9362: PPUSH
9363: LD_VAR 0 3
9367: PPUSH
9368: LD_INT 1
9370: PPUSH
9371: CALL_OW 324
// end ; 3 :
9375: GO 12923
9377: LD_INT 3
9379: DOUBLE
9380: EQUAL
9381: IFTRUE 9385
9383: GO 9838
9385: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9386: LD_INT 35
9388: PPUSH
9389: LD_VAR 0 3
9393: PPUSH
9394: LD_INT 1
9396: PPUSH
9397: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9401: LD_INT 45
9403: PPUSH
9404: LD_VAR 0 3
9408: PPUSH
9409: LD_INT 1
9411: PPUSH
9412: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9416: LD_INT 46
9418: PPUSH
9419: LD_VAR 0 3
9423: PPUSH
9424: LD_INT 1
9426: PPUSH
9427: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9431: LD_INT 47
9433: PPUSH
9434: LD_VAR 0 3
9438: PPUSH
9439: LD_INT 1
9441: PPUSH
9442: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9446: LD_INT 1
9448: PPUSH
9449: LD_VAR 0 3
9453: PPUSH
9454: LD_INT 1
9456: PPUSH
9457: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9461: LD_INT 2
9463: PPUSH
9464: LD_VAR 0 3
9468: PPUSH
9469: LD_INT 1
9471: PPUSH
9472: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9476: LD_INT 11
9478: PPUSH
9479: LD_VAR 0 3
9483: PPUSH
9484: LD_INT 1
9486: PPUSH
9487: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9491: LD_INT 48
9493: PPUSH
9494: LD_VAR 0 3
9498: PPUSH
9499: LD_INT 1
9501: PPUSH
9502: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9506: LD_INT 69
9508: PPUSH
9509: LD_VAR 0 3
9513: PPUSH
9514: LD_INT 1
9516: PPUSH
9517: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9521: LD_INT 39
9523: PPUSH
9524: LD_VAR 0 3
9528: PPUSH
9529: LD_INT 1
9531: PPUSH
9532: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9536: LD_INT 43
9538: PPUSH
9539: LD_VAR 0 3
9543: PPUSH
9544: LD_INT 1
9546: PPUSH
9547: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9551: LD_INT 51
9553: PPUSH
9554: LD_VAR 0 3
9558: PPUSH
9559: LD_INT 1
9561: PPUSH
9562: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9566: LD_INT 6
9568: PPUSH
9569: LD_VAR 0 3
9573: PPUSH
9574: LD_INT 1
9576: PPUSH
9577: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9581: LD_INT 0
9583: PPUSH
9584: LD_VAR 0 3
9588: PPUSH
9589: LD_INT 1
9591: PPUSH
9592: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9596: LD_INT 2
9598: PPUSH
9599: LD_VAR 0 3
9603: PPUSH
9604: LD_INT 1
9606: PPUSH
9607: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9611: LD_INT 3
9613: PPUSH
9614: LD_VAR 0 3
9618: PPUSH
9619: LD_INT 1
9621: PPUSH
9622: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9626: LD_INT 4
9628: PPUSH
9629: LD_VAR 0 3
9633: PPUSH
9634: LD_INT 1
9636: PPUSH
9637: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9641: LD_INT 6
9643: PPUSH
9644: LD_VAR 0 3
9648: PPUSH
9649: LD_INT 1
9651: PPUSH
9652: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9656: LD_INT 7
9658: PPUSH
9659: LD_VAR 0 3
9663: PPUSH
9664: LD_INT 1
9666: PPUSH
9667: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9671: LD_INT 8
9673: PPUSH
9674: LD_VAR 0 3
9678: PPUSH
9679: LD_INT 1
9681: PPUSH
9682: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9686: LD_INT 10
9688: PPUSH
9689: LD_VAR 0 3
9693: PPUSH
9694: LD_INT 1
9696: PPUSH
9697: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9701: LD_INT 15
9703: PPUSH
9704: LD_VAR 0 3
9708: PPUSH
9709: LD_INT 1
9711: PPUSH
9712: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9716: LD_INT 16
9718: PPUSH
9719: LD_VAR 0 3
9723: PPUSH
9724: LD_INT 1
9726: PPUSH
9727: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9731: LD_INT 17
9733: PPUSH
9734: LD_VAR 0 3
9738: PPUSH
9739: LD_INT 1
9741: PPUSH
9742: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9746: LD_INT 20
9748: PPUSH
9749: LD_VAR 0 3
9753: PPUSH
9754: LD_INT 1
9756: PPUSH
9757: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9761: LD_INT 26
9763: PPUSH
9764: LD_VAR 0 3
9768: PPUSH
9769: LD_INT 1
9771: PPUSH
9772: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9776: LD_INT 27
9778: PPUSH
9779: LD_VAR 0 3
9783: PPUSH
9784: LD_INT 1
9786: PPUSH
9787: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9791: LD_INT 29
9793: PPUSH
9794: LD_VAR 0 3
9798: PPUSH
9799: LD_INT 1
9801: PPUSH
9802: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9806: LD_INT 31
9808: PPUSH
9809: LD_VAR 0 3
9813: PPUSH
9814: LD_INT 1
9816: PPUSH
9817: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9821: LD_INT 32
9823: PPUSH
9824: LD_VAR 0 3
9828: PPUSH
9829: LD_INT 1
9831: PPUSH
9832: CALL_OW 324
// end ; 4 :
9836: GO 12923
9838: LD_INT 4
9840: DOUBLE
9841: EQUAL
9842: IFTRUE 9846
9844: GO 10794
9846: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9847: LD_INT 35
9849: PPUSH
9850: LD_VAR 0 3
9854: PPUSH
9855: LD_INT 1
9857: PPUSH
9858: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9862: LD_INT 45
9864: PPUSH
9865: LD_VAR 0 3
9869: PPUSH
9870: LD_INT 1
9872: PPUSH
9873: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9877: LD_INT 46
9879: PPUSH
9880: LD_VAR 0 3
9884: PPUSH
9885: LD_INT 1
9887: PPUSH
9888: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9892: LD_INT 47
9894: PPUSH
9895: LD_VAR 0 3
9899: PPUSH
9900: LD_INT 1
9902: PPUSH
9903: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9907: LD_INT 1
9909: PPUSH
9910: LD_VAR 0 3
9914: PPUSH
9915: LD_INT 1
9917: PPUSH
9918: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9922: LD_INT 2
9924: PPUSH
9925: LD_VAR 0 3
9929: PPUSH
9930: LD_INT 1
9932: PPUSH
9933: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9937: LD_INT 11
9939: PPUSH
9940: LD_VAR 0 3
9944: PPUSH
9945: LD_INT 1
9947: PPUSH
9948: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9952: LD_INT 20
9954: PPUSH
9955: LD_VAR 0 3
9959: PPUSH
9960: LD_INT 1
9962: PPUSH
9963: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9967: LD_INT 48
9969: PPUSH
9970: LD_VAR 0 3
9974: PPUSH
9975: LD_INT 1
9977: PPUSH
9978: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9982: LD_INT 49
9984: PPUSH
9985: LD_VAR 0 3
9989: PPUSH
9990: LD_INT 1
9992: PPUSH
9993: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9997: LD_INT 69
9999: PPUSH
10000: LD_VAR 0 3
10004: PPUSH
10005: LD_INT 1
10007: PPUSH
10008: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10012: LD_INT 39
10014: PPUSH
10015: LD_VAR 0 3
10019: PPUSH
10020: LD_INT 1
10022: PPUSH
10023: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10027: LD_INT 34
10029: PPUSH
10030: LD_VAR 0 3
10034: PPUSH
10035: LD_INT 1
10037: PPUSH
10038: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10042: LD_INT 42
10044: PPUSH
10045: LD_VAR 0 3
10049: PPUSH
10050: LD_INT 1
10052: PPUSH
10053: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10057: LD_INT 44
10059: PPUSH
10060: LD_VAR 0 3
10064: PPUSH
10065: LD_INT 1
10067: PPUSH
10068: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10072: LD_INT 41
10074: PPUSH
10075: LD_VAR 0 3
10079: PPUSH
10080: LD_INT 1
10082: PPUSH
10083: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10087: LD_INT 43
10089: PPUSH
10090: LD_VAR 0 3
10094: PPUSH
10095: LD_INT 1
10097: PPUSH
10098: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10102: LD_INT 70
10104: PPUSH
10105: LD_VAR 0 3
10109: PPUSH
10110: LD_INT 1
10112: PPUSH
10113: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10117: LD_INT 51
10119: PPUSH
10120: LD_VAR 0 3
10124: PPUSH
10125: LD_INT 1
10127: PPUSH
10128: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10132: LD_INT 52
10134: PPUSH
10135: LD_VAR 0 3
10139: PPUSH
10140: LD_INT 1
10142: PPUSH
10143: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10147: LD_INT 6
10149: PPUSH
10150: LD_VAR 0 3
10154: PPUSH
10155: LD_INT 1
10157: PPUSH
10158: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10162: LD_INT 15
10164: PPUSH
10165: LD_VAR 0 3
10169: PPUSH
10170: LD_INT 1
10172: PPUSH
10173: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10177: LD_INT 7
10179: PPUSH
10180: LD_VAR 0 3
10184: PPUSH
10185: LD_INT 1
10187: PPUSH
10188: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10192: LD_INT 12
10194: PPUSH
10195: LD_VAR 0 3
10199: PPUSH
10200: LD_INT 1
10202: PPUSH
10203: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10207: LD_INT 18
10209: PPUSH
10210: LD_VAR 0 3
10214: PPUSH
10215: LD_INT 1
10217: PPUSH
10218: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10222: LD_INT 60
10224: PPUSH
10225: LD_VAR 0 3
10229: PPUSH
10230: LD_INT 1
10232: PPUSH
10233: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10237: LD_INT 9
10239: PPUSH
10240: LD_VAR 0 3
10244: PPUSH
10245: LD_INT 1
10247: PPUSH
10248: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10252: LD_INT 30
10254: PPUSH
10255: LD_VAR 0 3
10259: PPUSH
10260: LD_INT 1
10262: PPUSH
10263: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10267: LD_INT 37
10269: PPUSH
10270: LD_VAR 0 3
10274: PPUSH
10275: LD_INT 1
10277: PPUSH
10278: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10282: LD_INT 5
10284: PPUSH
10285: LD_VAR 0 3
10289: PPUSH
10290: LD_INT 1
10292: PPUSH
10293: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10297: LD_INT 66
10299: PPUSH
10300: LD_VAR 0 3
10304: PPUSH
10305: LD_INT 1
10307: PPUSH
10308: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10312: LD_INT 21
10314: PPUSH
10315: LD_VAR 0 3
10319: PPUSH
10320: LD_INT 1
10322: PPUSH
10323: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10327: LD_INT 22
10329: PPUSH
10330: LD_VAR 0 3
10334: PPUSH
10335: LD_INT 1
10337: PPUSH
10338: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10342: LD_INT 54
10344: PPUSH
10345: LD_VAR 0 3
10349: PPUSH
10350: LD_INT 1
10352: PPUSH
10353: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10357: LD_INT 0
10359: PPUSH
10360: LD_VAR 0 3
10364: PPUSH
10365: LD_INT 1
10367: PPUSH
10368: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10372: LD_INT 1
10374: PPUSH
10375: LD_VAR 0 3
10379: PPUSH
10380: LD_INT 1
10382: PPUSH
10383: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10387: LD_INT 2
10389: PPUSH
10390: LD_VAR 0 3
10394: PPUSH
10395: LD_INT 1
10397: PPUSH
10398: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10402: LD_INT 3
10404: PPUSH
10405: LD_VAR 0 3
10409: PPUSH
10410: LD_INT 1
10412: PPUSH
10413: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10417: LD_INT 4
10419: PPUSH
10420: LD_VAR 0 3
10424: PPUSH
10425: LD_INT 1
10427: PPUSH
10428: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10432: LD_INT 5
10434: PPUSH
10435: LD_VAR 0 3
10439: PPUSH
10440: LD_INT 1
10442: PPUSH
10443: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10447: LD_INT 6
10449: PPUSH
10450: LD_VAR 0 3
10454: PPUSH
10455: LD_INT 1
10457: PPUSH
10458: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10462: LD_INT 7
10464: PPUSH
10465: LD_VAR 0 3
10469: PPUSH
10470: LD_INT 1
10472: PPUSH
10473: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10477: LD_INT 8
10479: PPUSH
10480: LD_VAR 0 3
10484: PPUSH
10485: LD_INT 1
10487: PPUSH
10488: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10492: LD_INT 10
10494: PPUSH
10495: LD_VAR 0 3
10499: PPUSH
10500: LD_INT 1
10502: PPUSH
10503: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10507: LD_INT 11
10509: PPUSH
10510: LD_VAR 0 3
10514: PPUSH
10515: LD_INT 1
10517: PPUSH
10518: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10522: LD_INT 12
10524: PPUSH
10525: LD_VAR 0 3
10529: PPUSH
10530: LD_INT 1
10532: PPUSH
10533: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10537: LD_INT 13
10539: PPUSH
10540: LD_VAR 0 3
10544: PPUSH
10545: LD_INT 1
10547: PPUSH
10548: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10552: LD_INT 14
10554: PPUSH
10555: LD_VAR 0 3
10559: PPUSH
10560: LD_INT 1
10562: PPUSH
10563: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10567: LD_INT 15
10569: PPUSH
10570: LD_VAR 0 3
10574: PPUSH
10575: LD_INT 1
10577: PPUSH
10578: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10582: LD_INT 16
10584: PPUSH
10585: LD_VAR 0 3
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10597: LD_INT 17
10599: PPUSH
10600: LD_VAR 0 3
10604: PPUSH
10605: LD_INT 1
10607: PPUSH
10608: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10612: LD_INT 19
10614: PPUSH
10615: LD_VAR 0 3
10619: PPUSH
10620: LD_INT 1
10622: PPUSH
10623: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10627: LD_INT 20
10629: PPUSH
10630: LD_VAR 0 3
10634: PPUSH
10635: LD_INT 1
10637: PPUSH
10638: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10642: LD_INT 21
10644: PPUSH
10645: LD_VAR 0 3
10649: PPUSH
10650: LD_INT 1
10652: PPUSH
10653: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10657: LD_INT 23
10659: PPUSH
10660: LD_VAR 0 3
10664: PPUSH
10665: LD_INT 1
10667: PPUSH
10668: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10672: LD_INT 26
10674: PPUSH
10675: LD_VAR 0 3
10679: PPUSH
10680: LD_INT 1
10682: PPUSH
10683: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10687: LD_INT 27
10689: PPUSH
10690: LD_VAR 0 3
10694: PPUSH
10695: LD_INT 1
10697: PPUSH
10698: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10702: LD_INT 28
10704: PPUSH
10705: LD_VAR 0 3
10709: PPUSH
10710: LD_INT 1
10712: PPUSH
10713: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10717: LD_INT 29
10719: PPUSH
10720: LD_VAR 0 3
10724: PPUSH
10725: LD_INT 1
10727: PPUSH
10728: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10732: LD_INT 30
10734: PPUSH
10735: LD_VAR 0 3
10739: PPUSH
10740: LD_INT 1
10742: PPUSH
10743: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10747: LD_INT 31
10749: PPUSH
10750: LD_VAR 0 3
10754: PPUSH
10755: LD_INT 1
10757: PPUSH
10758: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10762: LD_INT 32
10764: PPUSH
10765: LD_VAR 0 3
10769: PPUSH
10770: LD_INT 1
10772: PPUSH
10773: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10777: LD_INT 36
10779: PPUSH
10780: LD_VAR 0 3
10784: PPUSH
10785: LD_INT 1
10787: PPUSH
10788: CALL_OW 324
// end ; 5 :
10792: GO 12923
10794: LD_INT 5
10796: DOUBLE
10797: EQUAL
10798: IFTRUE 10802
10800: GO 11915
10802: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10803: LD_INT 35
10805: PPUSH
10806: LD_VAR 0 3
10810: PPUSH
10811: LD_INT 1
10813: PPUSH
10814: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10818: LD_INT 45
10820: PPUSH
10821: LD_VAR 0 3
10825: PPUSH
10826: LD_INT 1
10828: PPUSH
10829: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10833: LD_INT 46
10835: PPUSH
10836: LD_VAR 0 3
10840: PPUSH
10841: LD_INT 1
10843: PPUSH
10844: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10848: LD_INT 47
10850: PPUSH
10851: LD_VAR 0 3
10855: PPUSH
10856: LD_INT 1
10858: PPUSH
10859: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10863: LD_INT 1
10865: PPUSH
10866: LD_VAR 0 3
10870: PPUSH
10871: LD_INT 1
10873: PPUSH
10874: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10878: LD_INT 2
10880: PPUSH
10881: LD_VAR 0 3
10885: PPUSH
10886: LD_INT 1
10888: PPUSH
10889: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10893: LD_INT 11
10895: PPUSH
10896: LD_VAR 0 3
10900: PPUSH
10901: LD_INT 1
10903: PPUSH
10904: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10908: LD_INT 20
10910: PPUSH
10911: LD_VAR 0 3
10915: PPUSH
10916: LD_INT 1
10918: PPUSH
10919: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10923: LD_INT 48
10925: PPUSH
10926: LD_VAR 0 3
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10938: LD_INT 49
10940: PPUSH
10941: LD_VAR 0 3
10945: PPUSH
10946: LD_INT 1
10948: PPUSH
10949: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10953: LD_INT 69
10955: PPUSH
10956: LD_VAR 0 3
10960: PPUSH
10961: LD_INT 1
10963: PPUSH
10964: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10968: LD_INT 39
10970: PPUSH
10971: LD_VAR 0 3
10975: PPUSH
10976: LD_INT 1
10978: PPUSH
10979: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10983: LD_INT 34
10985: PPUSH
10986: LD_VAR 0 3
10990: PPUSH
10991: LD_INT 1
10993: PPUSH
10994: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10998: LD_INT 42
11000: PPUSH
11001: LD_VAR 0 3
11005: PPUSH
11006: LD_INT 1
11008: PPUSH
11009: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11013: LD_INT 44
11015: PPUSH
11016: LD_VAR 0 3
11020: PPUSH
11021: LD_INT 1
11023: PPUSH
11024: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11028: LD_INT 41
11030: PPUSH
11031: LD_VAR 0 3
11035: PPUSH
11036: LD_INT 1
11038: PPUSH
11039: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11043: LD_INT 40
11045: PPUSH
11046: LD_VAR 0 3
11050: PPUSH
11051: LD_INT 1
11053: PPUSH
11054: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11058: LD_INT 43
11060: PPUSH
11061: LD_VAR 0 3
11065: PPUSH
11066: LD_INT 1
11068: PPUSH
11069: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11073: LD_INT 70
11075: PPUSH
11076: LD_VAR 0 3
11080: PPUSH
11081: LD_INT 1
11083: PPUSH
11084: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11088: LD_INT 51
11090: PPUSH
11091: LD_VAR 0 3
11095: PPUSH
11096: LD_INT 1
11098: PPUSH
11099: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11103: LD_INT 52
11105: PPUSH
11106: LD_VAR 0 3
11110: PPUSH
11111: LD_INT 1
11113: PPUSH
11114: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11118: LD_INT 6
11120: PPUSH
11121: LD_VAR 0 3
11125: PPUSH
11126: LD_INT 1
11128: PPUSH
11129: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11133: LD_INT 15
11135: PPUSH
11136: LD_VAR 0 3
11140: PPUSH
11141: LD_INT 1
11143: PPUSH
11144: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11148: LD_INT 7
11150: PPUSH
11151: LD_VAR 0 3
11155: PPUSH
11156: LD_INT 1
11158: PPUSH
11159: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11163: LD_INT 12
11165: PPUSH
11166: LD_VAR 0 3
11170: PPUSH
11171: LD_INT 1
11173: PPUSH
11174: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11178: LD_INT 17
11180: PPUSH
11181: LD_VAR 0 3
11185: PPUSH
11186: LD_INT 1
11188: PPUSH
11189: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11193: LD_INT 18
11195: PPUSH
11196: LD_VAR 0 3
11200: PPUSH
11201: LD_INT 1
11203: PPUSH
11204: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11208: LD_INT 60
11210: PPUSH
11211: LD_VAR 0 3
11215: PPUSH
11216: LD_INT 1
11218: PPUSH
11219: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11223: LD_INT 32
11225: PPUSH
11226: LD_VAR 0 3
11230: PPUSH
11231: LD_INT 1
11233: PPUSH
11234: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11238: LD_INT 9
11240: PPUSH
11241: LD_VAR 0 3
11245: PPUSH
11246: LD_INT 1
11248: PPUSH
11249: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11253: LD_INT 57
11255: PPUSH
11256: LD_VAR 0 3
11260: PPUSH
11261: LD_INT 1
11263: PPUSH
11264: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11268: LD_INT 30
11270: PPUSH
11271: LD_VAR 0 3
11275: PPUSH
11276: LD_INT 1
11278: PPUSH
11279: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11283: LD_INT 37
11285: PPUSH
11286: LD_VAR 0 3
11290: PPUSH
11291: LD_INT 1
11293: PPUSH
11294: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11298: LD_INT 63
11300: PPUSH
11301: LD_VAR 0 3
11305: PPUSH
11306: LD_INT 1
11308: PPUSH
11309: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11313: LD_INT 3
11315: PPUSH
11316: LD_VAR 0 3
11320: PPUSH
11321: LD_INT 1
11323: PPUSH
11324: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11328: LD_INT 4
11330: PPUSH
11331: LD_VAR 0 3
11335: PPUSH
11336: LD_INT 1
11338: PPUSH
11339: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11343: LD_INT 5
11345: PPUSH
11346: LD_VAR 0 3
11350: PPUSH
11351: LD_INT 1
11353: PPUSH
11354: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11358: LD_INT 66
11360: PPUSH
11361: LD_VAR 0 3
11365: PPUSH
11366: LD_INT 1
11368: PPUSH
11369: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11373: LD_INT 21
11375: PPUSH
11376: LD_VAR 0 3
11380: PPUSH
11381: LD_INT 1
11383: PPUSH
11384: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11388: LD_INT 22
11390: PPUSH
11391: LD_VAR 0 3
11395: PPUSH
11396: LD_INT 1
11398: PPUSH
11399: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11403: LD_INT 19
11405: PPUSH
11406: LD_VAR 0 3
11410: PPUSH
11411: LD_INT 1
11413: PPUSH
11414: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11418: LD_INT 54
11420: PPUSH
11421: LD_VAR 0 3
11425: PPUSH
11426: LD_INT 1
11428: PPUSH
11429: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11433: LD_INT 55
11435: PPUSH
11436: LD_VAR 0 3
11440: PPUSH
11441: LD_INT 1
11443: PPUSH
11444: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11448: LD_INT 0
11450: PPUSH
11451: LD_VAR 0 3
11455: PPUSH
11456: LD_INT 1
11458: PPUSH
11459: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11463: LD_INT 1
11465: PPUSH
11466: LD_VAR 0 3
11470: PPUSH
11471: LD_INT 1
11473: PPUSH
11474: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11478: LD_INT 2
11480: PPUSH
11481: LD_VAR 0 3
11485: PPUSH
11486: LD_INT 1
11488: PPUSH
11489: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11493: LD_INT 3
11495: PPUSH
11496: LD_VAR 0 3
11500: PPUSH
11501: LD_INT 1
11503: PPUSH
11504: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11508: LD_INT 4
11510: PPUSH
11511: LD_VAR 0 3
11515: PPUSH
11516: LD_INT 1
11518: PPUSH
11519: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11523: LD_INT 5
11525: PPUSH
11526: LD_VAR 0 3
11530: PPUSH
11531: LD_INT 1
11533: PPUSH
11534: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11538: LD_INT 6
11540: PPUSH
11541: LD_VAR 0 3
11545: PPUSH
11546: LD_INT 1
11548: PPUSH
11549: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11553: LD_INT 7
11555: PPUSH
11556: LD_VAR 0 3
11560: PPUSH
11561: LD_INT 1
11563: PPUSH
11564: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11568: LD_INT 8
11570: PPUSH
11571: LD_VAR 0 3
11575: PPUSH
11576: LD_INT 1
11578: PPUSH
11579: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11583: LD_INT 10
11585: PPUSH
11586: LD_VAR 0 3
11590: PPUSH
11591: LD_INT 1
11593: PPUSH
11594: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11598: LD_INT 11
11600: PPUSH
11601: LD_VAR 0 3
11605: PPUSH
11606: LD_INT 1
11608: PPUSH
11609: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11613: LD_INT 12
11615: PPUSH
11616: LD_VAR 0 3
11620: PPUSH
11621: LD_INT 1
11623: PPUSH
11624: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11628: LD_INT 13
11630: PPUSH
11631: LD_VAR 0 3
11635: PPUSH
11636: LD_INT 1
11638: PPUSH
11639: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11643: LD_INT 14
11645: PPUSH
11646: LD_VAR 0 3
11650: PPUSH
11651: LD_INT 1
11653: PPUSH
11654: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11658: LD_INT 15
11660: PPUSH
11661: LD_VAR 0 3
11665: PPUSH
11666: LD_INT 1
11668: PPUSH
11669: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11673: LD_INT 16
11675: PPUSH
11676: LD_VAR 0 3
11680: PPUSH
11681: LD_INT 1
11683: PPUSH
11684: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11688: LD_INT 17
11690: PPUSH
11691: LD_VAR 0 3
11695: PPUSH
11696: LD_INT 1
11698: PPUSH
11699: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11703: LD_INT 18
11705: PPUSH
11706: LD_VAR 0 3
11710: PPUSH
11711: LD_INT 1
11713: PPUSH
11714: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11718: LD_INT 19
11720: PPUSH
11721: LD_VAR 0 3
11725: PPUSH
11726: LD_INT 1
11728: PPUSH
11729: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11733: LD_INT 20
11735: PPUSH
11736: LD_VAR 0 3
11740: PPUSH
11741: LD_INT 1
11743: PPUSH
11744: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11748: LD_INT 21
11750: PPUSH
11751: LD_VAR 0 3
11755: PPUSH
11756: LD_INT 1
11758: PPUSH
11759: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11763: LD_INT 23
11765: PPUSH
11766: LD_VAR 0 3
11770: PPUSH
11771: LD_INT 1
11773: PPUSH
11774: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11778: LD_INT 26
11780: PPUSH
11781: LD_VAR 0 3
11785: PPUSH
11786: LD_INT 1
11788: PPUSH
11789: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11793: LD_INT 27
11795: PPUSH
11796: LD_VAR 0 3
11800: PPUSH
11801: LD_INT 1
11803: PPUSH
11804: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11808: LD_INT 28
11810: PPUSH
11811: LD_VAR 0 3
11815: PPUSH
11816: LD_INT 1
11818: PPUSH
11819: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11823: LD_INT 29
11825: PPUSH
11826: LD_VAR 0 3
11830: PPUSH
11831: LD_INT 1
11833: PPUSH
11834: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11838: LD_INT 30
11840: PPUSH
11841: LD_VAR 0 3
11845: PPUSH
11846: LD_INT 1
11848: PPUSH
11849: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11853: LD_INT 31
11855: PPUSH
11856: LD_VAR 0 3
11860: PPUSH
11861: LD_INT 1
11863: PPUSH
11864: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11868: LD_INT 32
11870: PPUSH
11871: LD_VAR 0 3
11875: PPUSH
11876: LD_INT 1
11878: PPUSH
11879: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
11883: LD_INT 33
11885: PPUSH
11886: LD_VAR 0 3
11890: PPUSH
11891: LD_INT 1
11893: PPUSH
11894: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11898: LD_INT 36
11900: PPUSH
11901: LD_VAR 0 3
11905: PPUSH
11906: LD_INT 1
11908: PPUSH
11909: CALL_OW 324
// end ; 6 :
11913: GO 12923
11915: LD_INT 6
11917: DOUBLE
11918: EQUAL
11919: IFTRUE 11923
11921: GO 12848
11923: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11924: LD_INT 35
11926: PPUSH
11927: LD_VAR 0 3
11931: PPUSH
11932: LD_INT 1
11934: PPUSH
11935: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11939: LD_INT 45
11941: PPUSH
11942: LD_VAR 0 3
11946: PPUSH
11947: LD_INT 1
11949: PPUSH
11950: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11954: LD_INT 46
11956: PPUSH
11957: LD_VAR 0 3
11961: PPUSH
11962: LD_INT 1
11964: PPUSH
11965: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11969: LD_INT 47
11971: PPUSH
11972: LD_VAR 0 3
11976: PPUSH
11977: LD_INT 1
11979: PPUSH
11980: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11984: LD_INT 1
11986: PPUSH
11987: LD_VAR 0 3
11991: PPUSH
11992: LD_INT 1
11994: PPUSH
11995: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11999: LD_INT 2
12001: PPUSH
12002: LD_VAR 0 3
12006: PPUSH
12007: LD_INT 1
12009: PPUSH
12010: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12014: LD_INT 11
12016: PPUSH
12017: LD_VAR 0 3
12021: PPUSH
12022: LD_INT 1
12024: PPUSH
12025: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12029: LD_INT 20
12031: PPUSH
12032: LD_VAR 0 3
12036: PPUSH
12037: LD_INT 1
12039: PPUSH
12040: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12044: LD_INT 48
12046: PPUSH
12047: LD_VAR 0 3
12051: PPUSH
12052: LD_INT 1
12054: PPUSH
12055: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12059: LD_INT 49
12061: PPUSH
12062: LD_VAR 0 3
12066: PPUSH
12067: LD_INT 1
12069: PPUSH
12070: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12074: LD_INT 50
12076: PPUSH
12077: LD_VAR 0 3
12081: PPUSH
12082: LD_INT 1
12084: PPUSH
12085: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12089: LD_INT 69
12091: PPUSH
12092: LD_VAR 0 3
12096: PPUSH
12097: LD_INT 1
12099: PPUSH
12100: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12104: LD_INT 39
12106: PPUSH
12107: LD_VAR 0 3
12111: PPUSH
12112: LD_INT 1
12114: PPUSH
12115: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12119: LD_INT 34
12121: PPUSH
12122: LD_VAR 0 3
12126: PPUSH
12127: LD_INT 1
12129: PPUSH
12130: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12134: LD_INT 42
12136: PPUSH
12137: LD_VAR 0 3
12141: PPUSH
12142: LD_INT 1
12144: PPUSH
12145: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12149: LD_INT 44
12151: PPUSH
12152: LD_VAR 0 3
12156: PPUSH
12157: LD_INT 1
12159: PPUSH
12160: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12164: LD_INT 41
12166: PPUSH
12167: LD_VAR 0 3
12171: PPUSH
12172: LD_INT 1
12174: PPUSH
12175: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12179: LD_INT 13
12181: PPUSH
12182: LD_VAR 0 3
12186: PPUSH
12187: LD_INT 1
12189: PPUSH
12190: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12194: LD_INT 40
12196: PPUSH
12197: LD_VAR 0 3
12201: PPUSH
12202: LD_INT 1
12204: PPUSH
12205: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12209: LD_INT 43
12211: PPUSH
12212: LD_VAR 0 3
12216: PPUSH
12217: LD_INT 1
12219: PPUSH
12220: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12224: LD_INT 70
12226: PPUSH
12227: LD_VAR 0 3
12231: PPUSH
12232: LD_INT 1
12234: PPUSH
12235: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12239: LD_INT 23
12241: PPUSH
12242: LD_VAR 0 3
12246: PPUSH
12247: LD_INT 1
12249: PPUSH
12250: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12254: LD_INT 51
12256: PPUSH
12257: LD_VAR 0 3
12261: PPUSH
12262: LD_INT 1
12264: PPUSH
12265: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12269: LD_INT 52
12271: PPUSH
12272: LD_VAR 0 3
12276: PPUSH
12277: LD_INT 1
12279: PPUSH
12280: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12284: LD_INT 6
12286: PPUSH
12287: LD_VAR 0 3
12291: PPUSH
12292: LD_INT 1
12294: PPUSH
12295: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12299: LD_INT 15
12301: PPUSH
12302: LD_VAR 0 3
12306: PPUSH
12307: LD_INT 1
12309: PPUSH
12310: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12314: LD_INT 7
12316: PPUSH
12317: LD_VAR 0 3
12321: PPUSH
12322: LD_INT 1
12324: PPUSH
12325: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12329: LD_INT 12
12331: PPUSH
12332: LD_VAR 0 3
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12344: LD_INT 10
12346: PPUSH
12347: LD_VAR 0 3
12351: PPUSH
12352: LD_INT 1
12354: PPUSH
12355: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12359: LD_INT 17
12361: PPUSH
12362: LD_VAR 0 3
12366: PPUSH
12367: LD_INT 1
12369: PPUSH
12370: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12374: LD_INT 18
12376: PPUSH
12377: LD_VAR 0 3
12381: PPUSH
12382: LD_INT 1
12384: PPUSH
12385: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12389: LD_INT 60
12391: PPUSH
12392: LD_VAR 0 3
12396: PPUSH
12397: LD_INT 1
12399: PPUSH
12400: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12404: LD_INT 61
12406: PPUSH
12407: LD_VAR 0 3
12411: PPUSH
12412: LD_INT 1
12414: PPUSH
12415: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12419: LD_INT 32
12421: PPUSH
12422: LD_VAR 0 3
12426: PPUSH
12427: LD_INT 1
12429: PPUSH
12430: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12434: LD_INT 27
12436: PPUSH
12437: LD_VAR 0 3
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12449: LD_INT 36
12451: PPUSH
12452: LD_VAR 0 3
12456: PPUSH
12457: LD_INT 1
12459: PPUSH
12460: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12464: LD_INT 33
12466: PPUSH
12467: LD_VAR 0 3
12471: PPUSH
12472: LD_INT 1
12474: PPUSH
12475: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12479: LD_INT 9
12481: PPUSH
12482: LD_VAR 0 3
12486: PPUSH
12487: LD_INT 1
12489: PPUSH
12490: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12494: LD_INT 38
12496: PPUSH
12497: LD_VAR 0 3
12501: PPUSH
12502: LD_INT 1
12504: PPUSH
12505: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12509: LD_INT 57
12511: PPUSH
12512: LD_VAR 0 3
12516: PPUSH
12517: LD_INT 1
12519: PPUSH
12520: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12524: LD_INT 58
12526: PPUSH
12527: LD_VAR 0 3
12531: PPUSH
12532: LD_INT 1
12534: PPUSH
12535: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12539: LD_INT 28
12541: PPUSH
12542: LD_VAR 0 3
12546: PPUSH
12547: LD_INT 1
12549: PPUSH
12550: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12554: LD_INT 29
12556: PPUSH
12557: LD_VAR 0 3
12561: PPUSH
12562: LD_INT 1
12564: PPUSH
12565: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12569: LD_INT 30
12571: PPUSH
12572: LD_VAR 0 3
12576: PPUSH
12577: LD_INT 1
12579: PPUSH
12580: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12584: LD_INT 37
12586: PPUSH
12587: LD_VAR 0 3
12591: PPUSH
12592: LD_INT 1
12594: PPUSH
12595: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12599: LD_INT 63
12601: PPUSH
12602: LD_VAR 0 3
12606: PPUSH
12607: LD_INT 1
12609: PPUSH
12610: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12614: LD_INT 64
12616: PPUSH
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 1
12624: PPUSH
12625: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12629: LD_INT 3
12631: PPUSH
12632: LD_VAR 0 3
12636: PPUSH
12637: LD_INT 1
12639: PPUSH
12640: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12644: LD_INT 4
12646: PPUSH
12647: LD_VAR 0 3
12651: PPUSH
12652: LD_INT 1
12654: PPUSH
12655: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12659: LD_INT 5
12661: PPUSH
12662: LD_VAR 0 3
12666: PPUSH
12667: LD_INT 1
12669: PPUSH
12670: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12674: LD_INT 8
12676: PPUSH
12677: LD_VAR 0 3
12681: PPUSH
12682: LD_INT 1
12684: PPUSH
12685: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12689: LD_INT 66
12691: PPUSH
12692: LD_VAR 0 3
12696: PPUSH
12697: LD_INT 1
12699: PPUSH
12700: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12704: LD_INT 67
12706: PPUSH
12707: LD_VAR 0 3
12711: PPUSH
12712: LD_INT 1
12714: PPUSH
12715: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12719: LD_INT 21
12721: PPUSH
12722: LD_VAR 0 3
12726: PPUSH
12727: LD_INT 1
12729: PPUSH
12730: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12734: LD_INT 22
12736: PPUSH
12737: LD_VAR 0 3
12741: PPUSH
12742: LD_INT 1
12744: PPUSH
12745: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12749: LD_INT 19
12751: PPUSH
12752: LD_VAR 0 3
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12764: LD_INT 26
12766: PPUSH
12767: LD_VAR 0 3
12771: PPUSH
12772: LD_INT 1
12774: PPUSH
12775: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12779: LD_INT 54
12781: PPUSH
12782: LD_VAR 0 3
12786: PPUSH
12787: LD_INT 1
12789: PPUSH
12790: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12794: LD_INT 55
12796: PPUSH
12797: LD_VAR 0 3
12801: PPUSH
12802: LD_INT 1
12804: PPUSH
12805: CALL_OW 322
// for i = 0 to 39 do
12809: LD_ADDR_VAR 0 4
12813: PUSH
12814: DOUBLE
12815: LD_INT 0
12817: DEC
12818: ST_TO_ADDR
12819: LD_INT 39
12821: PUSH
12822: FOR_TO
12823: IFFALSE 12844
// SetRestrict ( i , side , true ) ;
12825: LD_VAR 0 4
12829: PPUSH
12830: LD_VAR 0 3
12834: PPUSH
12835: LD_INT 1
12837: PPUSH
12838: CALL_OW 324
12842: GO 12822
12844: POP
12845: POP
// end ; else
12846: GO 12923
12848: POP
// begin for i = 1 to 73 do
12849: LD_ADDR_VAR 0 4
12853: PUSH
12854: DOUBLE
12855: LD_INT 1
12857: DEC
12858: ST_TO_ADDR
12859: LD_INT 73
12861: PUSH
12862: FOR_TO
12863: IFFALSE 12884
// SetTech ( i , side , state_enabled ) ;
12865: LD_VAR 0 4
12869: PPUSH
12870: LD_VAR 0 3
12874: PPUSH
12875: LD_INT 1
12877: PPUSH
12878: CALL_OW 322
12882: GO 12862
12884: POP
12885: POP
// for i = 0 to 39 do
12886: LD_ADDR_VAR 0 4
12890: PUSH
12891: DOUBLE
12892: LD_INT 0
12894: DEC
12895: ST_TO_ADDR
12896: LD_INT 39
12898: PUSH
12899: FOR_TO
12900: IFFALSE 12921
// SetRestrict ( i , side , true ) ;
12902: LD_VAR 0 4
12906: PPUSH
12907: LD_VAR 0 3
12911: PPUSH
12912: LD_INT 1
12914: PPUSH
12915: CALL_OW 324
12919: GO 12899
12921: POP
12922: POP
// end ; end ; end ;
12923: GO 8928
12925: POP
12926: POP
// end ; end_of_file
12927: LD_VAR 0 2
12931: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
12932: LD_INT 0
12934: PPUSH
12935: PPUSH
12936: PPUSH
12937: PPUSH
12938: PPUSH
12939: PPUSH
12940: PPUSH
12941: PPUSH
12942: PPUSH
// for i := 1 to 8 do
12943: LD_ADDR_VAR 0 2
12947: PUSH
12948: DOUBLE
12949: LD_INT 1
12951: DEC
12952: ST_TO_ADDR
12953: LD_INT 8
12955: PUSH
12956: FOR_TO
12957: IFFALSE 13341
// begin if Side_Positions [ i ] then
12959: LD_EXP 32
12963: PUSH
12964: LD_VAR 0 2
12968: ARRAY
12969: IFFALSE 13339
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
12971: LD_ADDR_VAR 0 7
12975: PUSH
12976: LD_INT 22
12978: PUSH
12979: LD_VAR 0 2
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PUSH
12988: LD_INT 21
12990: PUSH
12991: LD_INT 1
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PPUSH
13002: CALL_OW 69
13006: PUSH
13007: LD_INT 0
13009: PLUS
13010: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13011: LD_ADDR_VAR 0 9
13015: PUSH
13016: LD_INT 22
13018: PUSH
13019: LD_VAR 0 2
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PUSH
13028: LD_INT 2
13030: PUSH
13031: LD_INT 30
13033: PUSH
13034: LD_INT 0
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PUSH
13041: LD_INT 30
13043: PUSH
13044: LD_INT 1
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: LIST
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PPUSH
13060: CALL_OW 69
13064: ST_TO_ADDR
// crates := 0 ;
13065: LD_ADDR_VAR 0 4
13069: PUSH
13070: LD_INT 0
13072: ST_TO_ADDR
// oil := 0 ;
13073: LD_ADDR_VAR 0 5
13077: PUSH
13078: LD_INT 0
13080: ST_TO_ADDR
// sib := 0 ;
13081: LD_ADDR_VAR 0 6
13085: PUSH
13086: LD_INT 0
13088: ST_TO_ADDR
// if bases then
13089: LD_VAR 0 9
13093: IFFALSE 13199
// begin for j in bases do
13095: LD_ADDR_VAR 0 3
13099: PUSH
13100: LD_VAR 0 9
13104: PUSH
13105: FOR_IN
13106: IFFALSE 13197
// begin base := GetBase ( j ) ;
13108: LD_ADDR_VAR 0 8
13112: PUSH
13113: LD_VAR 0 3
13117: PPUSH
13118: CALL_OW 274
13122: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13123: LD_ADDR_VAR 0 4
13127: PUSH
13128: LD_VAR 0 4
13132: PUSH
13133: LD_VAR 0 8
13137: PPUSH
13138: LD_INT 1
13140: PPUSH
13141: CALL_OW 275
13145: PLUS
13146: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13147: LD_ADDR_VAR 0 5
13151: PUSH
13152: LD_VAR 0 5
13156: PUSH
13157: LD_VAR 0 8
13161: PPUSH
13162: LD_INT 2
13164: PPUSH
13165: CALL_OW 275
13169: PLUS
13170: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13171: LD_ADDR_VAR 0 6
13175: PUSH
13176: LD_VAR 0 6
13180: PUSH
13181: LD_VAR 0 8
13185: PPUSH
13186: LD_INT 3
13188: PPUSH
13189: CALL_OW 275
13193: PLUS
13194: ST_TO_ADDR
// end ;
13195: GO 13105
13197: POP
13198: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13199: LD_STRING setSpecText(
13201: PUSH
13202: LD_VAR 0 2
13206: STR
13207: PUSH
13208: LD_STRING ,
13210: STR
13211: PUSH
13212: LD_INT 2
13214: STR
13215: PUSH
13216: LD_STRING ,
13218: STR
13219: PUSH
13220: LD_VAR 0 4
13224: STR
13225: PUSH
13226: LD_STRING )
13228: STR
13229: PPUSH
13230: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13234: LD_STRING setSpecText(
13236: PUSH
13237: LD_VAR 0 2
13241: STR
13242: PUSH
13243: LD_STRING ,
13245: STR
13246: PUSH
13247: LD_INT 3
13249: STR
13250: PUSH
13251: LD_STRING ,
13253: STR
13254: PUSH
13255: LD_VAR 0 5
13259: STR
13260: PUSH
13261: LD_STRING )
13263: STR
13264: PPUSH
13265: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13269: LD_STRING setSpecText(
13271: PUSH
13272: LD_VAR 0 2
13276: STR
13277: PUSH
13278: LD_STRING ,
13280: STR
13281: PUSH
13282: LD_INT 4
13284: STR
13285: PUSH
13286: LD_STRING ,
13288: STR
13289: PUSH
13290: LD_VAR 0 6
13294: STR
13295: PUSH
13296: LD_STRING )
13298: STR
13299: PPUSH
13300: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13304: LD_STRING setSpecText(
13306: PUSH
13307: LD_VAR 0 2
13311: STR
13312: PUSH
13313: LD_STRING ,
13315: STR
13316: PUSH
13317: LD_INT 5
13319: STR
13320: PUSH
13321: LD_STRING ,
13323: STR
13324: PUSH
13325: LD_VAR 0 7
13329: STR
13330: PUSH
13331: LD_STRING )
13333: STR
13334: PPUSH
13335: CALL_OW 559
// end ; end ;
13339: GO 12956
13341: POP
13342: POP
// end ;
13343: LD_VAR 0 1
13347: RET
// every 0 0$1 do
13348: GO 13350
13350: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13351: LD_STRING setSpecLogoNumber(
13353: PUSH
13354: LD_INT 2
13356: STR
13357: PUSH
13358: LD_STRING ,
13360: STR
13361: PUSH
13362: LD_INT 1
13364: STR
13365: PUSH
13366: LD_STRING )
13368: STR
13369: PPUSH
13370: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13374: LD_STRING setSpecLogoNumber(
13376: PUSH
13377: LD_INT 3
13379: STR
13380: PUSH
13381: LD_STRING ,
13383: STR
13384: PUSH
13385: LD_INT 2
13387: STR
13388: PUSH
13389: LD_STRING )
13391: STR
13392: PPUSH
13393: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13397: LD_STRING setSpecLogoNumber(
13399: PUSH
13400: LD_INT 4
13402: STR
13403: PUSH
13404: LD_STRING ,
13406: STR
13407: PUSH
13408: LD_INT 3
13410: STR
13411: PUSH
13412: LD_STRING )
13414: STR
13415: PPUSH
13416: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13420: LD_STRING setSpecLogoNumber(
13422: PUSH
13423: LD_INT 5
13425: STR
13426: PUSH
13427: LD_STRING ,
13429: STR
13430: PUSH
13431: LD_INT 4
13433: STR
13434: PUSH
13435: LD_STRING )
13437: STR
13438: PPUSH
13439: CALL_OW 559
// end ;
13443: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13444: LD_INT 2
13446: PUSH
13447: LD_INT 30
13449: PUSH
13450: LD_INT 0
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 30
13459: PUSH
13460: LD_INT 1
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: LIST
13471: PPUSH
13472: CALL_OW 69
13476: IFFALSE 13486
13478: GO 13480
13480: DISABLE
// begin enable ;
13481: ENABLE
// UpdateSpectatorBar ;
13482: CALL 12932 0 0
// end ;
13486: END
