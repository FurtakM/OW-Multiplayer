// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , amount_of_apemen , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , extra_sib_deposits_locations , normal_oil_deposits_locations , normal_sib_deposits_locations , battle_flags_id , Side_Comps ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function init_map ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// normal_oil_deposits_locations := [ [ 65 , 49 ] , [ 157 , 62 ] , [ 192 , 143 ] , [ 109 , 147 ] ] ;
   4: LD_ADDR_EXP 40
   8: PUSH
   9: LD_INT 65
  11: PUSH
  12: LD_INT 49
  14: PUSH
  15: EMPTY
  16: LIST
  17: LIST
  18: PUSH
  19: LD_INT 157
  21: PUSH
  22: LD_INT 62
  24: PUSH
  25: EMPTY
  26: LIST
  27: LIST
  28: PUSH
  29: LD_INT 192
  31: PUSH
  32: LD_INT 143
  34: PUSH
  35: EMPTY
  36: LIST
  37: LIST
  38: PUSH
  39: LD_INT 109
  41: PUSH
  42: LD_INT 147
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: EMPTY
  50: LIST
  51: LIST
  52: LIST
  53: LIST
  54: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 22 , 33 ] , [ 179 , 43 ] , [ 228 , 151 ] , [ 83 , 154 ] ] ;
  55: LD_ADDR_EXP 38
  59: PUSH
  60: LD_INT 22
  62: PUSH
  63: LD_INT 33
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 179
  72: PUSH
  73: LD_INT 43
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: LD_INT 228
  82: PUSH
  83: LD_INT 151
  85: PUSH
  86: EMPTY
  87: LIST
  88: LIST
  89: PUSH
  90: LD_INT 83
  92: PUSH
  93: LD_INT 154
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: PUSH
 100: EMPTY
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 39 , 18 ] , [ 138 , 27 ] , [ 222 , 157 ] , [ 82 , 115 ] ] ;
 106: LD_ADDR_EXP 41
 110: PUSH
 111: LD_INT 39
 113: PUSH
 114: LD_INT 18
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: PUSH
 121: LD_INT 138
 123: PUSH
 124: LD_INT 27
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: PUSH
 131: LD_INT 222
 133: PUSH
 134: LD_INT 157
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: PUSH
 141: LD_INT 82
 143: PUSH
 144: LD_INT 115
 146: PUSH
 147: EMPTY
 148: LIST
 149: LIST
 150: PUSH
 151: EMPTY
 152: LIST
 153: LIST
 154: LIST
 155: LIST
 156: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 35 , 55 ] , [ 188 , 70 ] , [ 214 , 123 ] , [ 66 , 120 ] ] ;
 157: LD_ADDR_EXP 39
 161: PUSH
 162: LD_INT 35
 164: PUSH
 165: LD_INT 55
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: PUSH
 172: LD_INT 188
 174: PUSH
 175: LD_INT 70
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: LD_INT 214
 184: PUSH
 185: LD_INT 123
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: LD_INT 66
 194: PUSH
 195: LD_INT 120
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: ST_TO_ADDR
// depot_def := [ [ 54 , 45 , 3 ] , [ 161 , 55 , 5 ] , [ 98 , 142 , 4 ] , [ 194 , 133 , 1 ] ] ;
 208: LD_ADDR_EXP 35
 212: PUSH
 213: LD_INT 54
 215: PUSH
 216: LD_INT 45
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: PUSH
 227: LD_INT 161
 229: PUSH
 230: LD_INT 55
 232: PUSH
 233: LD_INT 5
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 98
 243: PUSH
 244: LD_INT 142
 246: PUSH
 247: LD_INT 4
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: LIST
 254: PUSH
 255: LD_INT 194
 257: PUSH
 258: LD_INT 133
 260: PUSH
 261: LD_INT 1
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: LIST
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: LIST
 274: ST_TO_ADDR
// start_def := [ [ 53 , 52 ] , [ 152 , 45 ] , [ 91 , 140 ] , [ 200 , 132 ] ] ;
 275: LD_ADDR_EXP 37
 279: PUSH
 280: LD_INT 53
 282: PUSH
 283: LD_INT 52
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 152
 292: PUSH
 293: LD_INT 45
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: LD_INT 91
 302: PUSH
 303: LD_INT 140
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 200
 312: PUSH
 313: LD_INT 132
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: ST_TO_ADDR
// breastworks_def := [ [ [ 76 , 75 , 5 ] , [ 72 , 34 , 4 ] , [ 81 , 60 , 5 ] , [ 31 , 31 , 2 ] ] , [ [ 170 , 79 , 5 ] , [ 139 , 42 , 1 ] , [ 171 , 58 , 4 ] , [ 149 , 25 , 3 ] ] , [ [ 114 , 163 , 5 ] , [ 114 , 138 , 4 ] , [ 97 , 116 , 3 ] , [ 81 , 135 , 1 ] ] , [ [ 179 , 116 , 2 ] , [ 175 , 145 , 1 ] , [ 217 , 149 , 4 ] , [ 202 , 158 , 0 ] ] ] ;
 326: LD_ADDR_EXP 36
 330: PUSH
 331: LD_INT 76
 333: PUSH
 334: LD_INT 75
 336: PUSH
 337: LD_INT 5
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 72
 347: PUSH
 348: LD_INT 34
 350: PUSH
 351: LD_INT 4
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 81
 361: PUSH
 362: LD_INT 60
 364: PUSH
 365: LD_INT 5
 367: PUSH
 368: EMPTY
 369: LIST
 370: LIST
 371: LIST
 372: PUSH
 373: LD_INT 31
 375: PUSH
 376: LD_INT 31
 378: PUSH
 379: LD_INT 2
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: LIST
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: PUSH
 393: LD_INT 170
 395: PUSH
 396: LD_INT 79
 398: PUSH
 399: LD_INT 5
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 139
 409: PUSH
 410: LD_INT 42
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: PUSH
 421: LD_INT 171
 423: PUSH
 424: LD_INT 58
 426: PUSH
 427: LD_INT 4
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 149
 437: PUSH
 438: LD_INT 25
 440: PUSH
 441: LD_INT 3
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 114
 457: PUSH
 458: LD_INT 163
 460: PUSH
 461: LD_INT 5
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 114
 471: PUSH
 472: LD_INT 138
 474: PUSH
 475: LD_INT 4
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: PUSH
 483: LD_INT 97
 485: PUSH
 486: LD_INT 116
 488: PUSH
 489: LD_INT 3
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PUSH
 497: LD_INT 81
 499: PUSH
 500: LD_INT 135
 502: PUSH
 503: LD_INT 1
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 179
 519: PUSH
 520: LD_INT 116
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 175
 533: PUSH
 534: LD_INT 145
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 217
 547: PUSH
 548: LD_INT 149
 550: PUSH
 551: LD_INT 4
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 202
 561: PUSH
 562: LD_INT 158
 564: PUSH
 565: LD_INT 0
 567: PUSH
 568: EMPTY
 569: LIST
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: ST_TO_ADDR
// for i in normal_oil_deposits_locations do
 585: LD_ADDR_VAR 0 2
 589: PUSH
 590: LD_EXP 40
 594: PUSH
 595: FOR_IN
 596: IFFALSE 625
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 598: LD_VAR 0 2
 602: PUSH
 603: LD_INT 1
 605: ARRAY
 606: PPUSH
 607: LD_VAR 0 2
 611: PUSH
 612: LD_INT 2
 614: ARRAY
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: CALL_OW 62
 623: GO 595
 625: POP
 626: POP
// if def_extra_oil_deposits then
 627: LD_EXP 6
 631: IFFALSE 675
// for i in extra_oil_deposits_locations do
 633: LD_ADDR_VAR 0 2
 637: PUSH
 638: LD_EXP 38
 642: PUSH
 643: FOR_IN
 644: IFFALSE 673
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 646: LD_VAR 0 2
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: LD_VAR 0 2
 659: PUSH
 660: LD_INT 2
 662: ARRAY
 663: PPUSH
 664: LD_INT 2
 666: PPUSH
 667: CALL_OW 62
 671: GO 643
 673: POP
 674: POP
// if def_extra_sib_deposits > 0 then
 675: LD_EXP 7
 679: PUSH
 680: LD_INT 0
 682: GREATER
 683: IFFALSE 779
// begin for i in normal_sib_deposits_locations do
 685: LD_ADDR_VAR 0 2
 689: PUSH
 690: LD_EXP 41
 694: PUSH
 695: FOR_IN
 696: IFFALSE 725
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 698: LD_VAR 0 2
 702: PUSH
 703: LD_INT 1
 705: ARRAY
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 2
 714: ARRAY
 715: PPUSH
 716: LD_INT 3
 718: PPUSH
 719: CALL_OW 62
 723: GO 695
 725: POP
 726: POP
// if def_extra_sib_deposits = 2 then
 727: LD_EXP 7
 731: PUSH
 732: LD_INT 2
 734: EQUAL
 735: IFFALSE 779
// for i in extra_sib_deposits_locations do
 737: LD_ADDR_VAR 0 2
 741: PUSH
 742: LD_EXP 39
 746: PUSH
 747: FOR_IN
 748: IFFALSE 777
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 750: LD_VAR 0 2
 754: PUSH
 755: LD_INT 1
 757: ARRAY
 758: PPUSH
 759: LD_VAR 0 2
 763: PUSH
 764: LD_INT 2
 766: ARRAY
 767: PPUSH
 768: LD_INT 3
 770: PPUSH
 771: CALL_OW 62
 775: GO 747
 777: POP
 778: POP
// end ; end ;
 779: LD_VAR 0 1
 783: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 784: LD_INT 0
 786: PPUSH
 787: PPUSH
 788: PPUSH
 789: PPUSH
 790: PPUSH
 791: PPUSH
 792: PPUSH
 793: PPUSH
 794: PPUSH
// if MultiPlayer then
 795: LD_OWVAR 4
 799: IFFALSE 863
// begin Game_Type = mp_game_type ;
 801: LD_ADDR_EXP 16
 805: PUSH
 806: LD_OWVAR 6
 810: ST_TO_ADDR
// Your_Side = mp_player_side ;
 811: LD_ADDR_OWVAR 2
 815: PUSH
 816: LD_OWVAR 7
 820: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 821: LD_ADDR_EXP 32
 825: PUSH
 826: LD_OWVAR 17
 830: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 831: LD_ADDR_EXP 30
 835: PUSH
 836: LD_OWVAR 15
 840: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 841: LD_ADDR_EXP 33
 845: PUSH
 846: LD_OWVAR 16
 850: ST_TO_ADDR
// Teams = mp_teams ;
 851: LD_ADDR_EXP 31
 855: PUSH
 856: LD_OWVAR 12
 860: ST_TO_ADDR
// end else
 861: GO 1064
// begin Game_Type = 2 ;
 863: LD_ADDR_EXP 16
 867: PUSH
 868: LD_INT 2
 870: ST_TO_ADDR
// Your_Side = 4 ;
 871: LD_ADDR_OWVAR 2
 875: PUSH
 876: LD_INT 4
 878: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 879: LD_ADDR_EXP 32
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: LD_INT 3
 889: PUSH
 890: LD_INT 0
 892: PUSH
 893: LD_INT 1
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 2
 901: PUSH
 902: LD_INT 4
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 918: LD_ADDR_EXP 30
 922: PUSH
 923: LD_INT 0
 925: PUSH
 926: LD_INT 1
 928: PUSH
 929: LD_INT 0
 931: PUSH
 932: LD_INT 2
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 2
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 957: LD_ADDR_EXP 33
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 3
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: LD_INT 2
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: LD_INT 1
 979: PUSH
 980: LD_INT 3
 982: PUSH
 983: LD_INT 0
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 996: LD_ADDR_EXP 43
1000: PUSH
1001: LD_INT 0
1003: PUSH
1004: LD_INT 0
1006: PUSH
1007: LD_INT 0
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: LD_INT 0
1015: PUSH
1016: LD_INT 0
1018: PUSH
1019: LD_INT 0
1021: PUSH
1022: LD_INT 0
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 4 , 7 ] ] ;
1035: LD_ADDR_EXP 31
1039: PUSH
1040: LD_INT 2
1042: PUSH
1043: LD_INT 6
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: PUSH
1050: LD_INT 4
1052: PUSH
1053: LD_INT 7
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: ST_TO_ADDR
// end ; if MultiPlayer then
1064: LD_OWVAR 4
1068: IFFALSE 1267
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1070: LD_ADDR_EXP 1
1074: PUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 426
1082: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1083: LD_ADDR_EXP 2
1087: PUSH
1088: LD_INT 1
1090: PPUSH
1091: CALL_OW 426
1095: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1096: LD_ADDR_EXP 3
1100: PUSH
1101: LD_INT 2
1103: PPUSH
1104: CALL_OW 426
1108: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1109: LD_ADDR_EXP 4
1113: PUSH
1114: LD_INT 3
1116: PPUSH
1117: CALL_OW 426
1121: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1122: LD_ADDR_EXP 5
1126: PUSH
1127: LD_INT 4
1129: PPUSH
1130: CALL_OW 426
1134: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1135: LD_ADDR_EXP 6
1139: PUSH
1140: LD_INT 5
1142: PPUSH
1143: CALL_OW 426
1147: ST_TO_ADDR
// def_extra_sib_deposits = GetMultiplayerSetting ( 6 ) ;
1148: LD_ADDR_EXP 7
1152: PUSH
1153: LD_INT 6
1155: PPUSH
1156: CALL_OW 426
1160: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1161: LD_ADDR_EXP 8
1165: PUSH
1166: LD_INT 10
1168: PPUSH
1169: CALL_OW 426
1173: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1174: LD_ADDR_EXP 9
1178: PUSH
1179: LD_INT 11
1181: PPUSH
1182: CALL_OW 426
1186: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1187: LD_ADDR_EXP 10
1191: PUSH
1192: LD_INT 12
1194: PPUSH
1195: CALL_OW 426
1199: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1200: LD_ADDR_EXP 11
1204: PUSH
1205: LD_INT 13
1207: PPUSH
1208: CALL_OW 426
1212: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1213: LD_ADDR_EXP 12
1217: PUSH
1218: LD_INT 14
1220: PPUSH
1221: CALL_OW 426
1225: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1226: LD_ADDR_EXP 13
1230: PUSH
1231: LD_INT 15
1233: PPUSH
1234: CALL_OW 426
1238: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
1239: LD_ADDR_EXP 14
1243: PUSH
1244: LD_INT 20
1246: PPUSH
1247: CALL_OW 426
1251: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
1252: LD_ADDR_VAR 0 9
1256: PUSH
1257: LD_INT 22
1259: PPUSH
1260: CALL_OW 426
1264: ST_TO_ADDR
// end else
1265: GO 1391
// begin randomize ;
1267: CALL_OW 10
// def_base_level = 2 ;
1271: LD_ADDR_EXP 1
1275: PUSH
1276: LD_INT 2
1278: ST_TO_ADDR
// def_amount_of_people = 1 ;
1279: LD_ADDR_EXP 2
1283: PUSH
1284: LD_INT 1
1286: ST_TO_ADDR
// def_skill_level = 1 ;
1287: LD_ADDR_EXP 3
1291: PUSH
1292: LD_INT 1
1294: ST_TO_ADDR
// def_starting_resources = 2 ;
1295: LD_ADDR_EXP 4
1299: PUSH
1300: LD_INT 2
1302: ST_TO_ADDR
// def_shipments_density = 50 ;
1303: LD_ADDR_EXP 5
1307: PUSH
1308: LD_INT 50
1310: ST_TO_ADDR
// def_extra_oil_deposits = 1 ;
1311: LD_ADDR_EXP 6
1315: PUSH
1316: LD_INT 1
1318: ST_TO_ADDR
// def_extra_sib_deposits = 1 ;
1319: LD_ADDR_EXP 7
1323: PUSH
1324: LD_INT 1
1326: ST_TO_ADDR
// def_shared_vision = 1 ;
1327: LD_ADDR_EXP 8
1331: PUSH
1332: LD_INT 1
1334: ST_TO_ADDR
// def_morale_flags = 2 ;
1335: LD_ADDR_EXP 9
1339: PUSH
1340: LD_INT 2
1342: ST_TO_ADDR
// def_siberite_detection = 1 ;
1343: LD_ADDR_EXP 10
1347: PUSH
1348: LD_INT 1
1350: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1351: LD_ADDR_EXP 11
1355: PUSH
1356: LD_INT 3
1358: ST_TO_ADDR
// def_people_respawning = 2 ;
1359: LD_ADDR_EXP 12
1363: PUSH
1364: LD_INT 2
1366: ST_TO_ADDR
// def_siberite_bomb = 2 ;
1367: LD_ADDR_EXP 13
1371: PUSH
1372: LD_INT 2
1374: ST_TO_ADDR
// def_builduptime = 1 ;
1375: LD_ADDR_EXP 14
1379: PUSH
1380: LD_INT 1
1382: ST_TO_ADDR
// tech_level = 4 ;
1383: LD_ADDR_VAR 0 9
1387: PUSH
1388: LD_INT 4
1390: ST_TO_ADDR
// end ; if isSGUI then
1391: LD_OWVAR 83
1395: IFFALSE 1403
// setMpTechs ( ) else
1397: CALL 8756 0 0
1401: GO 1416
// SetMpTechLevel ( tech_level + 1 ) ;
1403: LD_VAR 0 9
1407: PUSH
1408: LD_INT 1
1410: PLUS
1411: PPUSH
1412: CALL 8903 0 1
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1416: LD_ADDR_EXP 17
1420: PUSH
1421: LD_INT 0
1423: PUSH
1424: LD_INT 1
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_EXP 1
1443: PUSH
1444: LD_INT 1
1446: PLUS
1447: ARRAY
1448: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1449: LD_ADDR_EXP 18
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 2
1462: PUSH
1463: LD_INT 4
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_EXP 1
1476: PUSH
1477: LD_INT 1
1479: PLUS
1480: ARRAY
1481: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1482: LD_ADDR_EXP 20
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: LD_INT 3
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: LD_INT 5
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: PUSH
1505: LD_EXP 3
1509: PUSH
1510: LD_INT 1
1512: PLUS
1513: ARRAY
1514: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1515: LD_ADDR_EXP 22
1519: PUSH
1520: LD_INT 0
1522: PUSH
1523: LD_INT 0
1525: PUSH
1526: LD_INT 0
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: PUSH
1534: LD_INT 30
1536: PUSH
1537: LD_INT 0
1539: PUSH
1540: LD_INT 0
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 50
1550: PUSH
1551: LD_INT 20
1553: PUSH
1554: LD_INT 0
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: LIST
1561: PUSH
1562: LD_INT 80
1564: PUSH
1565: LD_INT 40
1567: PUSH
1568: LD_INT 20
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: PUSH
1582: LD_EXP 4
1586: PUSH
1587: LD_INT 1
1589: PLUS
1590: ARRAY
1591: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1592: LD_ADDR_EXP 21
1596: PUSH
1597: LD_INT 10
1599: PUSH
1600: EMPTY
1601: LIST
1602: PUSH
1603: LD_INT 7
1605: PUSH
1606: LD_INT 14
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: PUSH
1613: LD_INT 6
1615: PUSH
1616: LD_INT 12
1618: PUSH
1619: LD_INT 18
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: LD_INT 10
1632: PUSH
1633: LD_INT 15
1635: PUSH
1636: LD_INT 20
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: PUSH
1651: LD_EXP 4
1655: PUSH
1656: LD_INT 1
1658: PLUS
1659: ARRAY
1660: ST_TO_ADDR
// number_of_people = def_amount_of_people + 4 ;
1661: LD_ADDR_EXP 19
1665: PUSH
1666: LD_EXP 2
1670: PUSH
1671: LD_INT 4
1673: PLUS
1674: ST_TO_ADDR
// shipments_density = 150 - ( def_shipments_density + 1 ) ;
1675: LD_ADDR_EXP 23
1679: PUSH
1680: LD_INT 150
1682: PUSH
1683: LD_EXP 5
1687: PUSH
1688: LD_INT 1
1690: PLUS
1691: MINUS
1692: ST_TO_ADDR
// amount_of_apemen = [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1693: LD_ADDR_EXP 27
1697: PUSH
1698: LD_INT 0
1700: PUSH
1701: LD_INT 3
1703: PUSH
1704: LD_INT 6
1706: PUSH
1707: LD_INT 9
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: PUSH
1716: LD_EXP 11
1720: PUSH
1721: LD_INT 1
1723: PLUS
1724: ARRAY
1725: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1726: LD_ADDR_EXP 25
1730: PUSH
1731: LD_INT 0
1733: PUSH
1734: LD_INT 8400
1736: PUSH
1737: LD_INT 1750
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_EXP 12
1749: PUSH
1750: LD_INT 1
1752: PLUS
1753: ARRAY
1754: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1755: LD_ADDR_EXP 26
1759: PUSH
1760: LD_INT 0
1762: PUSH
1763: LD_INT 21000
1765: PUSH
1766: LD_INT 4200
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: PUSH
1774: LD_EXP 12
1778: PUSH
1779: LD_INT 1
1781: PLUS
1782: ARRAY
1783: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1784: LD_ADDR_EXP 24
1788: PUSH
1789: LD_INT 1
1791: NEG
1792: PUSH
1793: LD_INT 350
1795: PUSH
1796: LD_INT 700
1798: PUSH
1799: LD_INT 1400
1801: PUSH
1802: LD_INT 0
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: PUSH
1812: LD_EXP 9
1816: PUSH
1817: LD_INT 1
1819: PLUS
1820: ARRAY
1821: ST_TO_ADDR
// battle_flags_id = [ ] ;
1822: LD_ADDR_EXP 42
1826: PUSH
1827: EMPTY
1828: ST_TO_ADDR
// siberite_bomb_Delay = [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1829: LD_ADDR_EXP 28
1833: PUSH
1834: LD_INT 0
1836: PUSH
1837: LD_INT 1
1839: PUSH
1840: LD_INT 63000
1842: PUSH
1843: LD_INT 126000
1845: PUSH
1846: LD_INT 189000
1848: PUSH
1849: LD_INT 252000
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: PUSH
1860: LD_EXP 13
1864: PUSH
1865: LD_INT 1
1867: PLUS
1868: ARRAY
1869: ST_TO_ADDR
// end ;
1870: LD_VAR 0 1
1874: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1875: LD_INT 0
1877: PPUSH
1878: PPUSH
1879: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1880: LD_ADDR_EXP 34
1884: PUSH
1885: LD_EXP 30
1889: PUSH
1890: LD_INT 0
1892: PUSH
1893: EMPTY
1894: LIST
1895: DIFF
1896: PUSH
1897: LD_INT 1
1899: GREATER
1900: ST_TO_ADDR
// if not Team_Game then
1901: LD_EXP 34
1905: NOT
1906: IFFALSE 2004
// begin for i = 1 to 8 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 8
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2000
// for j = 1 to 8 do
1924: LD_ADDR_VAR 0 3
1928: PUSH
1929: DOUBLE
1930: LD_INT 1
1932: DEC
1933: ST_TO_ADDR
1934: LD_INT 8
1936: PUSH
1937: FOR_TO
1938: IFFALSE 1996
// if i <> j then
1940: LD_VAR 0 2
1944: PUSH
1945: LD_VAR 0 3
1949: NONEQUAL
1950: IFFALSE 1974
// SetAttitude ( i , j , att_neutral , true ) else
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 3
1961: PPUSH
1962: LD_INT 0
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: CALL_OW 80
1972: GO 1994
// SetAttitude ( i , j , att_friend , true ) ;
1974: LD_VAR 0 2
1978: PPUSH
1979: LD_VAR 0 3
1983: PPUSH
1984: LD_INT 1
1986: PPUSH
1987: LD_INT 1
1989: PPUSH
1990: CALL_OW 80
1994: GO 1937
1996: POP
1997: POP
1998: GO 1921
2000: POP
2001: POP
// end else
2002: GO 2179
// begin if def_shared_vision then
2004: LD_EXP 8
2008: IFFALSE 2073
// begin for i in Teams do
2010: LD_ADDR_VAR 0 2
2014: PUSH
2015: LD_EXP 31
2019: PUSH
2020: FOR_IN
2021: IFFALSE 2071
// for j = 2 to i do
2023: LD_ADDR_VAR 0 3
2027: PUSH
2028: DOUBLE
2029: LD_INT 2
2031: DEC
2032: ST_TO_ADDR
2033: LD_VAR 0 2
2037: PUSH
2038: FOR_TO
2039: IFFALSE 2067
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2041: LD_VAR 0 2
2045: PUSH
2046: LD_VAR 0 3
2050: ARRAY
2051: PPUSH
2052: LD_VAR 0 2
2056: PUSH
2057: LD_INT 1
2059: ARRAY
2060: PPUSH
2061: CALL_OW 343
2065: GO 2038
2067: POP
2068: POP
2069: GO 2020
2071: POP
2072: POP
// end ; for i = 1 to 8 do
2073: LD_ADDR_VAR 0 2
2077: PUSH
2078: DOUBLE
2079: LD_INT 1
2081: DEC
2082: ST_TO_ADDR
2083: LD_INT 8
2085: PUSH
2086: FOR_TO
2087: IFFALSE 2177
// for j = 1 to 8 do
2089: LD_ADDR_VAR 0 3
2093: PUSH
2094: DOUBLE
2095: LD_INT 1
2097: DEC
2098: ST_TO_ADDR
2099: LD_INT 8
2101: PUSH
2102: FOR_TO
2103: IFFALSE 2173
// if Side_Teams [ i ] = Side_Teams [ j ] then
2105: LD_EXP 30
2109: PUSH
2110: LD_VAR 0 2
2114: ARRAY
2115: PUSH
2116: LD_EXP 30
2120: PUSH
2121: LD_VAR 0 3
2125: ARRAY
2126: EQUAL
2127: IFFALSE 2151
// SetAttitude ( i , j , att_friend , true ) else
2129: LD_VAR 0 2
2133: PPUSH
2134: LD_VAR 0 3
2138: PPUSH
2139: LD_INT 1
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: CALL_OW 80
2149: GO 2171
// SetAttitude ( i , j , att_enemy , true ) ;
2151: LD_VAR 0 2
2155: PPUSH
2156: LD_VAR 0 3
2160: PPUSH
2161: LD_INT 2
2163: PPUSH
2164: LD_INT 1
2166: PPUSH
2167: CALL_OW 80
2171: GO 2102
2173: POP
2174: POP
2175: GO 2086
2177: POP
2178: POP
// end ; end ;
2179: LD_VAR 0 1
2183: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2184: LD_INT 0
2186: PPUSH
2187: PPUSH
2188: PPUSH
2189: PPUSH
// result := [ ] ;
2190: LD_ADDR_VAR 0 7
2194: PUSH
2195: EMPTY
2196: ST_TO_ADDR
// for i := 1 to count do
2197: LD_ADDR_VAR 0 8
2201: PUSH
2202: DOUBLE
2203: LD_INT 1
2205: DEC
2206: ST_TO_ADDR
2207: LD_VAR 0 1
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2631
// begin uc_direction := Rand ( 0 , 5 ) ;
2215: LD_ADDR_OWVAR 24
2219: PUSH
2220: LD_INT 0
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: CALL_OW 12
2230: ST_TO_ADDR
// if commander then
2231: LD_LOC 1
2235: IFFALSE 2344
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2237: LD_ADDR_OWVAR 26
2241: PUSH
2242: LD_OWVAR 19
2246: PUSH
2247: LD_OWVAR 20
2251: ARRAY
2252: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2253: LD_INT 1
2255: PPUSH
2256: LD_INT 2
2258: PPUSH
2259: CALL_OW 12
2263: PPUSH
2264: LD_VAR 0 2
2268: PPUSH
2269: LD_EXP 20
2273: PUSH
2274: LD_INT 2
2276: PLUS
2277: PPUSH
2278: CALL_OW 380
// hc_importance := 105 ;
2282: LD_ADDR_OWVAR 32
2286: PUSH
2287: LD_INT 105
2289: ST_TO_ADDR
// commander := false ;
2290: LD_ADDR_LOC 1
2294: PUSH
2295: LD_INT 0
2297: ST_TO_ADDR
// if Multiplayer then
2298: LD_OWVAR 4
2302: IFFALSE 2342
// begin hc_gallery := MULTIAVATARS ;
2304: LD_ADDR_OWVAR 33
2308: PUSH
2309: LD_STRING MULTIAVATARS
2311: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2312: LD_ADDR_OWVAR 34
2316: PUSH
2317: LD_OWVAR 20
2321: PPUSH
2322: CALL_OW 525
2326: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2327: LD_ADDR_OWVAR 27
2331: PUSH
2332: LD_OWVAR 20
2336: PPUSH
2337: CALL_OW 526
2341: ST_TO_ADDR
// end ; end else
2342: GO 2407
// begin hc_name :=  ;
2344: LD_ADDR_OWVAR 26
2348: PUSH
2349: LD_STRING 
2351: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2352: LD_INT 1
2354: PPUSH
2355: LD_INT 2
2357: PPUSH
2358: CALL_OW 12
2362: PPUSH
2363: LD_VAR 0 2
2367: PPUSH
2368: LD_EXP 20
2372: PPUSH
2373: CALL_OW 380
// hc_importance := 0 ;
2377: LD_ADDR_OWVAR 32
2381: PUSH
2382: LD_INT 0
2384: ST_TO_ADDR
// if Multiplayer then
2385: LD_OWVAR 4
2389: IFFALSE 2407
// begin hc_gallery :=  ;
2391: LD_ADDR_OWVAR 33
2395: PUSH
2396: LD_STRING 
2398: ST_TO_ADDR
// hc_face_number := 0 ;
2399: LD_ADDR_OWVAR 34
2403: PUSH
2404: LD_INT 0
2406: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2407: LD_ADDR_VAR 0 10
2411: PUSH
2412: CALL_OW 44
2416: ST_TO_ADDR
// if global_defined then
2417: LD_LOC 3
2421: IFFALSE 2561
// begin if ( cl = class_soldier ) then
2423: LD_VAR 0 2
2427: PUSH
2428: LD_INT 1
2430: EQUAL
2431: IFFALSE 2451
// j := i + soldiers_created else
2433: LD_ADDR_VAR 0 9
2437: PUSH
2438: LD_VAR 0 8
2442: PUSH
2443: LD_LOC 4
2447: PLUS
2448: ST_TO_ADDR
2449: GO 2461
// j := i ;
2451: LD_ADDR_VAR 0 9
2455: PUSH
2456: LD_VAR 0 8
2460: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2461: LD_LOC 2
2465: PUSH
2466: LD_VAR 0 2
2470: ARRAY
2471: PUSH
2472: LD_VAR 0 9
2476: ARRAY
2477: PPUSH
2478: LD_VAR 0 10
2482: PPUSH
2483: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2487: LD_VAR 0 10
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: LD_LOC 2
2499: PUSH
2500: LD_VAR 0 2
2504: ARRAY
2505: PUSH
2506: LD_VAR 0 9
2510: ARRAY
2511: PPUSH
2512: LD_INT 2
2514: PPUSH
2515: CALL_OW 260
2519: PPUSH
2520: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2524: LD_VAR 0 10
2528: PPUSH
2529: LD_INT 1
2531: PPUSH
2532: LD_LOC 2
2536: PUSH
2537: LD_VAR 0 2
2541: ARRAY
2542: PUSH
2543: LD_VAR 0 9
2547: ARRAY
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: CALL_OW 260
2556: PPUSH
2557: CALL_OW 239
// end ; if building then
2561: LD_VAR 0 6
2565: IFFALSE 2583
// PlaceHumanInUnit ( un , building ) else
2567: LD_VAR 0 10
2571: PPUSH
2572: LD_VAR 0 6
2576: PPUSH
2577: CALL_OW 52
2581: GO 2610
// PlaceUnitXYR ( un , x , y , r , false ) ;
2583: LD_VAR 0 10
2587: PPUSH
2588: LD_VAR 0 3
2592: PPUSH
2593: LD_VAR 0 4
2597: PPUSH
2598: LD_VAR 0 5
2602: PPUSH
2603: LD_INT 0
2605: PPUSH
2606: CALL_OW 50
// result := result ^ [ un ] ;
2610: LD_ADDR_VAR 0 7
2614: PUSH
2615: LD_VAR 0 7
2619: PUSH
2620: LD_VAR 0 10
2624: PUSH
2625: EMPTY
2626: LIST
2627: ADD
2628: ST_TO_ADDR
// end ;
2629: GO 2212
2631: POP
2632: POP
// if not global_defined then
2633: LD_LOC 3
2637: NOT
2638: IFFALSE 2716
// if ( global_units >= cl ) then
2640: LD_LOC 2
2644: PUSH
2645: LD_VAR 0 2
2649: GREATEREQUAL
2650: IFFALSE 2691
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2652: LD_ADDR_LOC 2
2656: PUSH
2657: LD_LOC 2
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: LD_LOC 2
2671: PUSH
2672: LD_VAR 0 2
2676: ARRAY
2677: PUSH
2678: LD_VAR 0 7
2682: ADD
2683: PPUSH
2684: CALL_OW 1
2688: ST_TO_ADDR
2689: GO 2716
// global_units := Replace ( global_units , cl , result ) ;
2691: LD_ADDR_LOC 2
2695: PUSH
2696: LD_LOC 2
2700: PPUSH
2701: LD_VAR 0 2
2705: PPUSH
2706: LD_VAR 0 7
2710: PPUSH
2711: CALL_OW 1
2715: ST_TO_ADDR
// end ;
2716: LD_VAR 0 7
2720: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2721: LD_INT 0
2723: PPUSH
2724: PPUSH
2725: PPUSH
2726: PPUSH
2727: PPUSH
2728: PPUSH
2729: PPUSH
2730: PPUSH
2731: PPUSH
// pos := Side_Positions [ side ] ;
2732: LD_ADDR_VAR 0 3
2736: PUSH
2737: LD_EXP 32
2741: PUSH
2742: LD_VAR 0 1
2746: ARRAY
2747: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2748: LD_ADDR_OWVAR 21
2752: PUSH
2753: LD_EXP 33
2757: PUSH
2758: LD_VAR 0 1
2762: ARRAY
2763: ST_TO_ADDR
// uc_side := side ;
2764: LD_ADDR_OWVAR 20
2768: PUSH
2769: LD_VAR 0 1
2773: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2774: LD_ADDR_VAR 0 4
2778: PUSH
2779: LD_EXP 35
2783: PUSH
2784: LD_VAR 0 3
2788: ARRAY
2789: PUSH
2790: LD_INT 1
2792: ARRAY
2793: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2794: LD_ADDR_VAR 0 5
2798: PUSH
2799: LD_EXP 35
2803: PUSH
2804: LD_VAR 0 3
2808: ARRAY
2809: PUSH
2810: LD_INT 2
2812: ARRAY
2813: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2814: LD_ADDR_VAR 0 6
2818: PUSH
2819: LD_EXP 35
2823: PUSH
2824: LD_VAR 0 3
2828: ARRAY
2829: PUSH
2830: LD_INT 3
2832: ARRAY
2833: ST_TO_ADDR
// if is_depot then
2834: LD_EXP 17
2838: IFFALSE 2971
// begin bc_type = b_depot ;
2840: LD_ADDR_OWVAR 42
2844: PUSH
2845: LD_INT 0
2847: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2848: LD_ADDR_VAR 0 10
2852: PUSH
2853: LD_VAR 0 4
2857: PPUSH
2858: LD_VAR 0 5
2862: PPUSH
2863: LD_VAR 0 6
2867: PPUSH
2868: CALL_OW 47
2872: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2873: LD_VAR 0 10
2877: PPUSH
2878: LD_STRING @
2880: PUSH
2881: LD_VAR 0 1
2885: STR
2886: PPUSH
2887: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2891: LD_VAR 0 10
2895: PPUSH
2896: CALL_OW 274
2900: PPUSH
2901: LD_INT 1
2903: PPUSH
2904: LD_EXP 22
2908: PUSH
2909: LD_INT 1
2911: ARRAY
2912: PPUSH
2913: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2917: LD_VAR 0 10
2921: PPUSH
2922: CALL_OW 274
2926: PPUSH
2927: LD_INT 2
2929: PPUSH
2930: LD_EXP 22
2934: PUSH
2935: LD_INT 2
2937: ARRAY
2938: PPUSH
2939: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2943: LD_VAR 0 10
2947: PPUSH
2948: CALL_OW 274
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_EXP 22
2960: PUSH
2961: LD_INT 3
2963: ARRAY
2964: PPUSH
2965: CALL_OW 277
// end else
2969: GO 3115
// begin for i := 1 to 3 do
2971: LD_ADDR_VAR 0 7
2975: PUSH
2976: DOUBLE
2977: LD_INT 1
2979: DEC
2980: ST_TO_ADDR
2981: LD_INT 3
2983: PUSH
2984: FOR_TO
2985: IFFALSE 3113
// begin r := starting_resources [ i ] ;
2987: LD_ADDR_VAR 0 8
2991: PUSH
2992: LD_EXP 22
2996: PUSH
2997: LD_VAR 0 7
3001: ARRAY
3002: ST_TO_ADDR
// while r >= 10 do
3003: LD_VAR 0 8
3007: PUSH
3008: LD_INT 10
3010: GREATEREQUAL
3011: IFFALSE 3111
// if r > 50 then
3013: LD_VAR 0 8
3017: PUSH
3018: LD_INT 50
3020: GREATER
3021: IFFALSE 3067
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: LD_VAR 0 4
3035: PPUSH
3036: LD_VAR 0 5
3040: PPUSH
3041: LD_INT 4
3043: PPUSH
3044: LD_INT 0
3046: PPUSH
3047: CALL_OW 60
// r := r - 50 ;
3051: LD_ADDR_VAR 0 8
3055: PUSH
3056: LD_VAR 0 8
3060: PUSH
3061: LD_INT 50
3063: MINUS
3064: ST_TO_ADDR
// end else
3065: GO 3109
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3067: LD_VAR 0 7
3071: PPUSH
3072: LD_VAR 0 8
3076: PUSH
3077: LD_INT 10
3079: DIV
3080: PPUSH
3081: LD_VAR 0 4
3085: PPUSH
3086: LD_VAR 0 5
3090: PPUSH
3091: LD_INT 4
3093: PPUSH
3094: LD_INT 0
3096: PPUSH
3097: CALL_OW 60
// r := 0 ;
3101: LD_ADDR_VAR 0 8
3105: PUSH
3106: LD_INT 0
3108: ST_TO_ADDR
// end ;
3109: GO 3003
// end ;
3111: GO 2984
3113: POP
3114: POP
// end ; for r in starting_crates do
3115: LD_ADDR_VAR 0 8
3119: PUSH
3120: LD_EXP 21
3124: PUSH
3125: FOR_IN
3126: IFFALSE 3158
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3128: LD_INT 1
3130: PPUSH
3131: LD_INT 5
3133: PPUSH
3134: LD_VAR 0 4
3138: PPUSH
3139: LD_VAR 0 5
3143: PPUSH
3144: LD_VAR 0 8
3148: PPUSH
3149: LD_INT 0
3151: PPUSH
3152: CALL_OW 60
3156: GO 3125
3158: POP
3159: POP
// if def_morale_flags then
3160: LD_EXP 9
3164: IFFALSE 3303
// begin x := start_def [ pos ] [ 1 ] ;
3166: LD_ADDR_VAR 0 4
3170: PUSH
3171: LD_EXP 37
3175: PUSH
3176: LD_VAR 0 3
3180: ARRAY
3181: PUSH
3182: LD_INT 1
3184: ARRAY
3185: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3186: LD_ADDR_VAR 0 5
3190: PUSH
3191: LD_EXP 37
3195: PUSH
3196: LD_VAR 0 3
3200: ARRAY
3201: PUSH
3202: LD_INT 2
3204: ARRAY
3205: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3206: LD_VAR 0 4
3210: PPUSH
3211: LD_VAR 0 5
3215: PPUSH
3216: LD_INT 12
3218: PPUSH
3219: LD_INT 2
3221: PPUSH
3222: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3226: LD_ADDR_EXP 42
3230: PUSH
3231: LD_EXP 42
3235: PUSH
3236: LD_VAR 0 1
3240: PPUSH
3241: LD_VAR 0 4
3245: PPUSH
3246: LD_VAR 0 5
3250: PPUSH
3251: LD_INT 1
3253: PUSH
3254: LD_INT 100
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 2
3263: PUSH
3264: LD_INT 50
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 3
3273: PUSH
3274: LD_INT 20
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 20
3283: PUSH
3284: LD_INT 100
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: PPUSH
3297: CALL_OW 418
3301: ADD
3302: ST_TO_ADDR
// end ; commander := true ;
3303: LD_ADDR_LOC 1
3307: PUSH
3308: LD_INT 1
3310: ST_TO_ADDR
// soldiers_created := 0 ;
3311: LD_ADDR_LOC 4
3315: PUSH
3316: LD_INT 0
3318: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3319: LD_ADDR_VAR 0 7
3323: PUSH
3324: DOUBLE
3325: LD_INT 1
3327: DEC
3328: ST_TO_ADDR
3329: LD_EXP 18
3333: PUSH
3334: FOR_TO
3335: IFFALSE 3488
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3337: LD_ADDR_VAR 0 4
3341: PUSH
3342: LD_EXP 36
3346: PUSH
3347: LD_VAR 0 3
3351: ARRAY
3352: PUSH
3353: LD_VAR 0 7
3357: ARRAY
3358: PUSH
3359: LD_INT 1
3361: ARRAY
3362: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3363: LD_ADDR_VAR 0 5
3367: PUSH
3368: LD_EXP 36
3372: PUSH
3373: LD_VAR 0 3
3377: ARRAY
3378: PUSH
3379: LD_VAR 0 7
3383: ARRAY
3384: PUSH
3385: LD_INT 2
3387: ARRAY
3388: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3389: LD_ADDR_VAR 0 6
3393: PUSH
3394: LD_EXP 36
3398: PUSH
3399: LD_VAR 0 3
3403: ARRAY
3404: PUSH
3405: LD_VAR 0 7
3409: ARRAY
3410: PUSH
3411: LD_INT 3
3413: ARRAY
3414: ST_TO_ADDR
// bc_type := b_breastwork ;
3415: LD_ADDR_OWVAR 42
3419: PUSH
3420: LD_INT 31
3422: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3423: LD_ADDR_VAR 0 9
3427: PUSH
3428: LD_VAR 0 4
3432: PPUSH
3433: LD_VAR 0 5
3437: PPUSH
3438: LD_VAR 0 6
3442: PPUSH
3443: CALL_OW 47
3447: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3448: LD_INT 1
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 0
3459: PPUSH
3460: LD_INT 0
3462: PPUSH
3463: LD_VAR 0 9
3467: PPUSH
3468: CALL 2184 0 6
// soldiers_created := soldiers_created + 1 ;
3472: LD_ADDR_LOC 4
3476: PUSH
3477: LD_LOC 4
3481: PUSH
3482: LD_INT 1
3484: PLUS
3485: ST_TO_ADDR
// end ;
3486: GO 3334
3488: POP
3489: POP
// x := start_def [ pos ] [ 1 ] ;
3490: LD_ADDR_VAR 0 4
3494: PUSH
3495: LD_EXP 37
3499: PUSH
3500: LD_VAR 0 3
3504: ARRAY
3505: PUSH
3506: LD_INT 1
3508: ARRAY
3509: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3510: LD_ADDR_VAR 0 5
3514: PUSH
3515: LD_EXP 37
3519: PUSH
3520: LD_VAR 0 3
3524: ARRAY
3525: PUSH
3526: LD_INT 2
3528: ARRAY
3529: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3530: LD_LOC 8
3534: PUSH
3535: LD_EXP 18
3539: MINUS
3540: PPUSH
3541: LD_INT 1
3543: PPUSH
3544: LD_VAR 0 4
3548: PPUSH
3549: LD_VAR 0 5
3553: PPUSH
3554: LD_INT 5
3556: PPUSH
3557: LD_INT 0
3559: PPUSH
3560: CALL 2184 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3564: LD_LOC 5
3568: PPUSH
3569: LD_INT 2
3571: PPUSH
3572: LD_VAR 0 4
3576: PPUSH
3577: LD_VAR 0 5
3581: PPUSH
3582: LD_INT 5
3584: PPUSH
3585: LD_INT 0
3587: PPUSH
3588: CALL 2184 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3592: LD_LOC 7
3596: PPUSH
3597: LD_INT 3
3599: PPUSH
3600: LD_VAR 0 4
3604: PPUSH
3605: LD_VAR 0 5
3609: PPUSH
3610: LD_INT 5
3612: PPUSH
3613: LD_INT 0
3615: PPUSH
3616: CALL 2184 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3620: LD_LOC 6
3624: PPUSH
3625: LD_INT 4
3627: PPUSH
3628: LD_VAR 0 4
3632: PPUSH
3633: LD_VAR 0 5
3637: PPUSH
3638: LD_INT 5
3640: PPUSH
3641: LD_INT 0
3643: PPUSH
3644: CALL 2184 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3648: LD_EXP 10
3652: PUSH
3653: LD_INT 20
3655: PPUSH
3656: LD_VAR 0 1
3660: PPUSH
3661: CALL_OW 321
3665: PUSH
3666: LD_INT 1
3668: EQUAL
3669: AND
3670: IFFALSE 3687
// SetTech ( tech_SibDet , side , state_researched ) ;
3672: LD_INT 20
3674: PPUSH
3675: LD_VAR 0 1
3679: PPUSH
3680: LD_INT 2
3682: PPUSH
3683: CALL_OW 322
// if def_siberite_bomb = 1 then
3687: LD_EXP 13
3691: PUSH
3692: LD_INT 1
3694: EQUAL
3695: IFFALSE 3729
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3697: LD_INT 25
3699: PPUSH
3700: LD_VAR 0 1
3704: PPUSH
3705: LD_INT 1
3707: PPUSH
3708: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3712: LD_INT 73
3714: PPUSH
3715: LD_VAR 0 1
3719: PPUSH
3720: LD_INT 1
3722: PPUSH
3723: CALL_OW 322
// end else
3727: GO 3759
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3729: LD_INT 25
3731: PPUSH
3732: LD_VAR 0 1
3736: PPUSH
3737: LD_INT 0
3739: PPUSH
3740: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3744: LD_INT 73
3746: PPUSH
3747: LD_VAR 0 1
3751: PPUSH
3752: LD_INT 0
3754: PPUSH
3755: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3759: LD_INT 24
3761: PPUSH
3762: LD_VAR 0 1
3766: PPUSH
3767: LD_INT 0
3769: PPUSH
3770: CALL_OW 322
// global_defined := true ;
3774: LD_ADDR_LOC 3
3778: PUSH
3779: LD_INT 1
3781: ST_TO_ADDR
// end ;
3782: LD_VAR 0 2
3786: RET
// every 0 0$1 do
3787: GO 3789
3789: DISABLE
// if ( def_siberite_bomb > 1 ) then
3790: LD_EXP 13
3794: PUSH
3795: LD_INT 1
3797: GREATER
3798: IFFALSE 3813
// begin wait ( siberite_bomb_Delay ) ;
3800: LD_EXP 28
3804: PPUSH
3805: CALL_OW 67
// EnableSibFiss ;
3809: CALL 3814 0 0
// end ;
3813: END
// function EnableSibFiss ; var i ; begin
3814: LD_INT 0
3816: PPUSH
3817: PPUSH
// for i := 1 to 8 do
3818: LD_ADDR_VAR 0 2
3822: PUSH
3823: DOUBLE
3824: LD_INT 1
3826: DEC
3827: ST_TO_ADDR
3828: LD_INT 8
3830: PUSH
3831: FOR_TO
3832: IFFALSE 3878
// if Side_Positions [ i ] then
3834: LD_EXP 32
3838: PUSH
3839: LD_VAR 0 2
3843: ARRAY
3844: IFFALSE 3876
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3846: LD_INT 25
3848: PPUSH
3849: LD_VAR 0 2
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3861: LD_INT 73
3863: PPUSH
3864: LD_VAR 0 2
3868: PPUSH
3869: LD_INT 1
3871: PPUSH
3872: CALL_OW 322
// end ;
3876: GO 3831
3878: POP
3879: POP
// end ;
3880: LD_VAR 0 1
3884: RET
// function prepare_sides ; var i ; begin
3885: LD_INT 0
3887: PPUSH
3888: PPUSH
// global_units := [ ] ;
3889: LD_ADDR_LOC 2
3893: PUSH
3894: EMPTY
3895: ST_TO_ADDR
// global_defined := false ;
3896: LD_ADDR_LOC 3
3900: PUSH
3901: LD_INT 0
3903: ST_TO_ADDR
// CountClassMembers ;
3904: CALL 3954 0 0
// for i := 1 to 8 do
3908: LD_ADDR_VAR 0 2
3912: PUSH
3913: DOUBLE
3914: LD_INT 1
3916: DEC
3917: ST_TO_ADDR
3918: LD_INT 8
3920: PUSH
3921: FOR_TO
3922: IFFALSE 3947
// if Side_Positions [ i ] then
3924: LD_EXP 32
3928: PUSH
3929: LD_VAR 0 2
3933: ARRAY
3934: IFFALSE 3945
// prepare_side ( i ) ;
3936: LD_VAR 0 2
3940: PPUSH
3941: CALL 2721 0 1
3945: GO 3921
3947: POP
3948: POP
// end ;
3949: LD_VAR 0 1
3953: RET
// function CountClassMembers ; var Mode ; begin
3954: LD_INT 0
3956: PPUSH
3957: PPUSH
// if No_Mechs then
3958: LD_EXP 15
3962: IFFALSE 3974
// Mode := 2 else
3964: LD_ADDR_VAR 0 2
3968: PUSH
3969: LD_INT 2
3971: ST_TO_ADDR
3972: GO 3982
// Mode := 1 ;
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: LD_INT 1
3981: ST_TO_ADDR
// neng := number_of_people ;
3982: LD_ADDR_LOC 5
3986: PUSH
3987: LD_EXP 19
3991: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
3992: LD_ADDR_LOC 8
3996: PUSH
3997: LD_LOC 5
4001: PUSH
4002: LD_INT 4
4004: PUSH
4005: LD_INT 3
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: LD_VAR 0 2
4016: ARRAY
4017: DIV
4018: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4019: LD_LOC 8
4023: PUSH
4024: LD_EXP 18
4028: LESS
4029: IFFALSE 4041
// nsol := number_of_breastworks ;
4031: LD_ADDR_LOC 8
4035: PUSH
4036: LD_EXP 18
4040: ST_TO_ADDR
// neng := neng - nsol ;
4041: LD_ADDR_LOC 5
4045: PUSH
4046: LD_LOC 5
4050: PUSH
4051: LD_LOC 8
4055: MINUS
4056: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4057: LD_ADDR_LOC 6
4061: PUSH
4062: LD_LOC 5
4066: PUSH
4067: LD_INT 3
4069: PUSH
4070: LD_INT 2
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: PUSH
4077: LD_VAR 0 2
4081: ARRAY
4082: DIV
4083: ST_TO_ADDR
// if ( nsci < 1 ) then
4084: LD_LOC 6
4088: PUSH
4089: LD_INT 1
4091: LESS
4092: IFFALSE 4102
// nsci := 1 ;
4094: LD_ADDR_LOC 6
4098: PUSH
4099: LD_INT 1
4101: ST_TO_ADDR
// neng := neng - nsci ;
4102: LD_ADDR_LOC 5
4106: PUSH
4107: LD_LOC 5
4111: PUSH
4112: LD_LOC 6
4116: MINUS
4117: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4118: LD_ADDR_LOC 7
4122: PUSH
4123: LD_LOC 5
4127: PUSH
4128: LD_INT 2
4130: DIV
4131: PUSH
4132: LD_INT 0
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: PUSH
4139: LD_VAR 0 2
4143: ARRAY
4144: ST_TO_ADDR
// neng := neng - nmech ;
4145: LD_ADDR_LOC 5
4149: PUSH
4150: LD_LOC 5
4154: PUSH
4155: LD_LOC 7
4159: MINUS
4160: ST_TO_ADDR
// if ( neng < 1 ) then
4161: LD_LOC 5
4165: PUSH
4166: LD_INT 1
4168: LESS
4169: IFFALSE 4179
// neng := 1 ;
4171: LD_ADDR_LOC 5
4175: PUSH
4176: LD_INT 1
4178: ST_TO_ADDR
// end ;
4179: LD_VAR 0 1
4183: RET
// starting begin disable ( 98 ) ;
4184: LD_INT 98
4186: DISABLE_MARKED
// disable ( 99 ) ;
4187: LD_INT 99
4189: DISABLE_MARKED
// disable ( 400 ) ;
4190: LD_INT 400
4192: DISABLE_MARKED
// disable ( 401 ) ;
4193: LD_INT 401
4195: DISABLE_MARKED
// mp_selectmsg := true ;
4196: LD_ADDR_OWVAR 13
4200: PUSH
4201: LD_INT 1
4203: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4204: CALL 784 0 0
// init_map ;
4208: CALL 0 0 0
// set_shared_visions_and_alliances ;
4212: CALL 1875 0 0
// ResetFog ;
4216: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4220: LD_OWVAR 2
4224: PPUSH
4225: CALL_OW 520
// prepare_sides ;
4229: CALL 3885 0 0
// init_shipments_and_respawning ;
4233: CALL 4631 0 0
// Init_Win_Condition ;
4237: CALL 7461 0 0
// ShowTimer ;
4241: CALL 6441 0 0
// music_nat := Side_Nations [ your_side ] ;
4245: LD_ADDR_OWVAR 71
4249: PUSH
4250: LD_EXP 33
4254: PUSH
4255: LD_OWVAR 2
4259: ARRAY
4260: ST_TO_ADDR
// if IAmSpec then
4261: CALL_OW 531
4265: IFFALSE 4289
// begin fogoff ( true ) ;
4267: LD_INT 1
4269: PPUSH
4270: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
4274: LD_INT 104
4276: PPUSH
4277: LD_INT 69
4279: PPUSH
4280: CALL_OW 86
// enable ( 400 ) ;
4284: LD_INT 400
4286: ENABLE_MARKED
// end else
4287: GO 4335
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4289: LD_EXP 37
4293: PUSH
4294: LD_EXP 32
4298: PUSH
4299: LD_OWVAR 2
4303: ARRAY
4304: ARRAY
4305: PUSH
4306: LD_INT 1
4308: ARRAY
4309: PPUSH
4310: LD_EXP 37
4314: PUSH
4315: LD_EXP 32
4319: PUSH
4320: LD_OWVAR 2
4324: ARRAY
4325: ARRAY
4326: PUSH
4327: LD_INT 2
4329: ARRAY
4330: PPUSH
4331: CALL_OW 86
// end ; BuildUpAreas := [ base_nw , base_ne , base_sw , base_se ] ;
4335: LD_ADDR_EXP 47
4339: PUSH
4340: LD_INT 8
4342: PUSH
4343: LD_INT 9
4345: PUSH
4346: LD_INT 10
4348: PUSH
4349: LD_INT 11
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: ST_TO_ADDR
// BeginBuildUp ;
4358: CALL 6624 0 0
// end ; end_of_file
4362: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
4363: LD_VAR 0 1
4367: PPUSH
4368: CALL_OW 266
4372: PUSH
4373: LD_INT 0
4375: PUSH
4376: LD_INT 1
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: IN
4383: IFFALSE 4408
// SetBName ( b , @ & GetSide ( b ) ) ;
4385: LD_VAR 0 1
4389: PPUSH
4390: LD_STRING @
4392: PUSH
4393: LD_VAR 0 1
4397: PPUSH
4398: CALL_OW 255
4402: STR
4403: PPUSH
4404: CALL_OW 500
// end ;
4408: PPOPN 2
4410: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
4411: LD_VAR 0 1
4415: PPUSH
4416: CALL_OW 266
4420: PUSH
4421: LD_INT 0
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: IN
4431: IFFALSE 4456
// SetBName ( b , @ & GetSide ( b ) ) ;
4433: LD_VAR 0 1
4437: PPUSH
4438: LD_STRING @
4440: PUSH
4441: LD_VAR 0 1
4445: PPUSH
4446: CALL_OW 255
4450: STR
4451: PPUSH
4452: CALL_OW 500
// end ;
4456: PPOPN 3
4458: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
4459: LD_INT 0
4461: PPUSH
4462: PPUSH
4463: PPUSH
4464: PPUSH
// begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
4465: LD_VAR 0 1
4469: PPUSH
4470: CALL_OW 255
4474: PUSH
4475: LD_INT 0
4477: EQUAL
4478: PUSH
4479: LD_VAR 0 1
4483: PPUSH
4484: CALL_OW 257
4488: PUSH
4489: LD_INT 12
4491: EQUAL
4492: AND
4493: IFFALSE 4499
// CheckApemenAmount ;
4495: CALL 5792 0 0
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
4499: LD_VAR 0 1
4503: PPUSH
4504: CALL_OW 266
4508: PUSH
4509: LD_INT 0
4511: PUSH
4512: LD_INT 1
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: IN
4519: IFFALSE 4601
// begin pos := Side_Positions [ GetSide ( j ) ] ;
4521: LD_ADDR_VAR 0 4
4525: PUSH
4526: LD_EXP 32
4530: PUSH
4531: LD_VAR 0 1
4535: PPUSH
4536: CALL_OW 255
4540: ARRAY
4541: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
4542: LD_ADDR_VAR 0 2
4546: PUSH
4547: LD_EXP 37
4551: PUSH
4552: LD_VAR 0 4
4556: ARRAY
4557: PUSH
4558: LD_INT 1
4560: ARRAY
4561: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4562: LD_ADDR_VAR 0 3
4566: PUSH
4567: LD_EXP 37
4571: PUSH
4572: LD_VAR 0 4
4576: ARRAY
4577: PUSH
4578: LD_INT 2
4580: ARRAY
4581: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
4582: LD_VAR 0 2
4586: PPUSH
4587: LD_VAR 0 3
4591: PPUSH
4592: CALL_OW 420
4596: PPUSH
4597: CALL_OW 419
// end ; end ;
4601: PPOPN 5
4603: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
4604: LD_VAR 0 1
4608: PPUSH
4609: LD_VAR 0 2
4613: PPUSH
4614: LD_VAR 0 3
4618: PPUSH
4619: LD_OWVAR 2
4623: PPUSH
4624: CALL 7222 0 4
4628: PPOPN 3
4630: END
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
4631: LD_INT 0
4633: PPUSH
// respawn := Rand ( 1 , 8 ) ;
4634: LD_ADDR_LOC 10
4638: PUSH
4639: LD_INT 1
4641: PPUSH
4642: LD_INT 8
4644: PPUSH
4645: CALL_OW 12
4649: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4650: LD_ADDR_LOC 11
4654: PUSH
4655: LD_INT 0
4657: PUSH
4658: LD_INT 0
4660: PUSH
4661: LD_INT 0
4663: PUSH
4664: LD_INT 0
4666: PUSH
4667: LD_INT 0
4669: PUSH
4670: LD_INT 0
4672: PUSH
4673: LD_INT 0
4675: PUSH
4676: LD_INT 0
4678: PUSH
4679: EMPTY
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: ST_TO_ADDR
// end ;
4689: LD_VAR 0 1
4693: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
4694: GO 4696
4696: DISABLE
4697: LD_INT 0
4699: PPUSH
4700: PPUSH
4701: PPUSH
4702: PPUSH
// begin if respawning_time_max = 0 then
4703: LD_EXP 26
4707: PUSH
4708: LD_INT 0
4710: EQUAL
4711: IFFALSE 4715
// exit ;
4713: GO 5169
// if respawn = 8 then
4715: LD_LOC 10
4719: PUSH
4720: LD_INT 8
4722: EQUAL
4723: IFFALSE 4735
// respawn := 1 else
4725: LD_ADDR_LOC 10
4729: PUSH
4730: LD_INT 1
4732: ST_TO_ADDR
4733: GO 4749
// respawn := respawn + 1 ;
4735: LD_ADDR_LOC 10
4739: PUSH
4740: LD_LOC 10
4744: PUSH
4745: LD_INT 1
4747: PLUS
4748: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
4749: LD_EXP 32
4753: PUSH
4754: LD_LOC 10
4758: ARRAY
4759: PUSH
4760: LD_LOC 11
4764: PUSH
4765: LD_LOC 10
4769: ARRAY
4770: NOT
4771: AND
4772: IFFALSE 5168
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
4774: LD_ADDR_VAR 0 1
4778: PUSH
4779: LD_INT 21
4781: PUSH
4782: LD_INT 1
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 22
4791: PUSH
4792: LD_LOC 10
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: LD_INT 3
4803: PUSH
4804: LD_INT 23
4806: PUSH
4807: LD_INT 0
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: PPUSH
4820: CALL_OW 69
4824: ST_TO_ADDR
// if n < number_of_people then
4825: LD_VAR 0 1
4829: PUSH
4830: LD_EXP 19
4834: LESS
4835: IFFALSE 5165
// begin aktresp := respawn ;
4837: LD_ADDR_VAR 0 3
4841: PUSH
4842: LD_LOC 10
4846: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
4847: LD_ADDR_LOC 11
4851: PUSH
4852: LD_LOC 11
4856: PPUSH
4857: LD_VAR 0 3
4861: PPUSH
4862: LD_INT 1
4864: PPUSH
4865: CALL_OW 1
4869: ST_TO_ADDR
// enable ;
4870: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
4871: LD_EXP 25
4875: PPUSH
4876: LD_EXP 26
4880: PPUSH
4881: CALL_OW 12
4885: PPUSH
4886: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
4890: LD_ADDR_LOC 11
4894: PUSH
4895: LD_LOC 11
4899: PPUSH
4900: LD_VAR 0 3
4904: PPUSH
4905: LD_INT 0
4907: PPUSH
4908: CALL_OW 1
4912: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
4913: LD_ADDR_VAR 0 2
4917: PUSH
4918: LD_INT 21
4920: PUSH
4921: LD_INT 3
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: LD_INT 2
4930: PUSH
4931: LD_INT 30
4933: PUSH
4934: LD_INT 0
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PUSH
4941: LD_INT 30
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: EMPTY
4952: LIST
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 50
4958: PUSH
4959: EMPTY
4960: LIST
4961: PUSH
4962: LD_INT 22
4964: PUSH
4965: LD_VAR 0 3
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: PPUSH
4980: CALL_OW 69
4984: ST_TO_ADDR
// if building_list = 0 then
4985: LD_VAR 0 2
4989: PUSH
4990: LD_INT 0
4992: EQUAL
4993: IFFALSE 4997
// exit ;
4995: GO 5169
// hc_name :=  ;
4997: LD_ADDR_OWVAR 26
5001: PUSH
5002: LD_STRING 
5004: ST_TO_ADDR
// hc_importance := 0 ;
5005: LD_ADDR_OWVAR 32
5009: PUSH
5010: LD_INT 0
5012: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
5013: LD_INT 0
5015: PPUSH
5016: LD_INT 0
5018: PPUSH
5019: LD_EXP 20
5023: PUSH
5024: LD_INT 2
5026: DIV
5027: PPUSH
5028: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
5032: LD_ADDR_OWVAR 21
5036: PUSH
5037: LD_EXP 33
5041: PUSH
5042: LD_VAR 0 3
5046: ARRAY
5047: ST_TO_ADDR
// uc_side := aktresp ;
5048: LD_ADDR_OWVAR 20
5052: PUSH
5053: LD_VAR 0 3
5057: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5058: LD_ADDR_VAR 0 4
5062: PUSH
5063: LD_VAR 0 2
5067: PUSH
5068: LD_INT 1
5070: PPUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_INT 0
5078: PLUS
5079: PPUSH
5080: CALL_OW 12
5084: ARRAY
5085: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5086: LD_VAR 0 4
5090: PPUSH
5091: CALL_OW 266
5095: PUSH
5096: LD_INT 0
5098: PUSH
5099: LD_INT 1
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: IN
5106: IFFALSE 5118
// n = 25 else
5108: LD_ADDR_VAR 0 1
5112: PUSH
5113: LD_INT 25
5115: ST_TO_ADDR
5116: GO 5126
// n = 10 ;
5118: LD_ADDR_VAR 0 1
5122: PUSH
5123: LD_INT 10
5125: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5126: CALL_OW 44
5130: PPUSH
5131: LD_VAR 0 4
5135: PPUSH
5136: CALL_OW 250
5140: PPUSH
5141: LD_VAR 0 4
5145: PPUSH
5146: CALL_OW 251
5150: PPUSH
5151: LD_VAR 0 1
5155: PPUSH
5156: LD_INT 1
5158: PPUSH
5159: CALL_OW 50
// end else
5163: GO 5166
// enable ;
5165: ENABLE
// end else
5166: GO 5169
// enable ;
5168: ENABLE
// end ;
5169: PPOPN 4
5171: END
// every 1 1$0 + 0 0$0.3 do
5172: GO 5174
5174: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5175: LD_INT 4
5177: PPUSH
5178: LD_INT 5
5180: PPUSH
5181: CALL_OW 12
5185: PPUSH
5186: LD_INT 1
5188: PPUSH
5189: CALL_OW 57
// enable ;
5193: ENABLE
// end ;
5194: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5195: GO 5197
5197: DISABLE
5198: LD_INT 0
5200: PPUSH
5201: PPUSH
// begin case tick of 1 .. 1 1$0 :
5202: LD_OWVAR 1
5206: PUSH
5207: LD_INT 1
5209: DOUBLE
5210: GREATEREQUAL
5211: IFFALSE 5219
5213: LD_INT 2100
5215: DOUBLE
5216: LESSEQUAL
5217: IFTRUE 5221
5219: GO 5249
5221: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5222: LD_EXP 23
5226: PUSH
5227: LD_INT 100
5229: DIVREAL
5230: PUSH
5231: LD_INT 350
5233: PPUSH
5234: LD_INT 1050
5236: PPUSH
5237: CALL_OW 12
5241: MUL
5242: PPUSH
5243: CALL_OW 67
5247: GO 5551
5249: LD_INT 2100
5251: PUSH
5252: LD_INT 1
5254: PLUS
5255: DOUBLE
5256: GREATEREQUAL
5257: IFFALSE 5265
5259: LD_INT 10500
5261: DOUBLE
5262: LESSEQUAL
5263: IFTRUE 5267
5265: GO 5295
5267: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5268: LD_EXP 23
5272: PUSH
5273: LD_INT 100
5275: DIVREAL
5276: PUSH
5277: LD_INT 1050
5279: PPUSH
5280: LD_INT 1575
5282: PPUSH
5283: CALL_OW 12
5287: MUL
5288: PPUSH
5289: CALL_OW 67
5293: GO 5551
5295: LD_INT 10500
5297: PUSH
5298: LD_INT 1
5300: PLUS
5301: DOUBLE
5302: GREATEREQUAL
5303: IFFALSE 5311
5305: LD_INT 21000
5307: DOUBLE
5308: LESSEQUAL
5309: IFTRUE 5313
5311: GO 5341
5313: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5314: LD_EXP 23
5318: PUSH
5319: LD_INT 100
5321: DIVREAL
5322: PUSH
5323: LD_INT 1575
5325: PPUSH
5326: LD_INT 2100
5328: PPUSH
5329: CALL_OW 12
5333: MUL
5334: PPUSH
5335: CALL_OW 67
5339: GO 5551
5341: LD_INT 21000
5343: PUSH
5344: LD_INT 1
5346: PLUS
5347: DOUBLE
5348: GREATEREQUAL
5349: IFFALSE 5357
5351: LD_INT 42000
5353: DOUBLE
5354: LESSEQUAL
5355: IFTRUE 5359
5357: GO 5387
5359: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5360: LD_EXP 23
5364: PUSH
5365: LD_INT 100
5367: DIVREAL
5368: PUSH
5369: LD_INT 2100
5371: PPUSH
5372: LD_INT 2625
5374: PPUSH
5375: CALL_OW 12
5379: MUL
5380: PPUSH
5381: CALL_OW 67
5385: GO 5551
5387: LD_INT 42000
5389: PUSH
5390: LD_INT 1
5392: PLUS
5393: DOUBLE
5394: GREATEREQUAL
5395: IFFALSE 5403
5397: LD_INT 63000
5399: DOUBLE
5400: LESSEQUAL
5401: IFTRUE 5405
5403: GO 5433
5405: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5406: LD_EXP 23
5410: PUSH
5411: LD_INT 100
5413: DIVREAL
5414: PUSH
5415: LD_INT 2625
5417: PPUSH
5418: LD_INT 3150
5420: PPUSH
5421: CALL_OW 12
5425: MUL
5426: PPUSH
5427: CALL_OW 67
5431: GO 5551
5433: LD_INT 63000
5435: PUSH
5436: LD_INT 1
5438: PLUS
5439: DOUBLE
5440: GREATEREQUAL
5441: IFFALSE 5449
5443: LD_INT 105000
5445: DOUBLE
5446: LESSEQUAL
5447: IFTRUE 5451
5449: GO 5479
5451: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5452: LD_EXP 23
5456: PUSH
5457: LD_INT 100
5459: DIVREAL
5460: PUSH
5461: LD_INT 3150
5463: PPUSH
5464: LD_INT 3675
5466: PPUSH
5467: CALL_OW 12
5471: MUL
5472: PPUSH
5473: CALL_OW 67
5477: GO 5551
5479: LD_INT 105000
5481: PUSH
5482: LD_INT 1
5484: PLUS
5485: DOUBLE
5486: GREATEREQUAL
5487: IFFALSE 5495
5489: LD_INT 630000
5491: DOUBLE
5492: LESSEQUAL
5493: IFTRUE 5497
5495: GO 5525
5497: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5498: LD_EXP 23
5502: PUSH
5503: LD_INT 100
5505: DIVREAL
5506: PUSH
5507: LD_INT 3675
5509: PPUSH
5510: LD_INT 4200
5512: PPUSH
5513: CALL_OW 12
5517: MUL
5518: PPUSH
5519: CALL_OW 67
5523: GO 5551
5525: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5526: LD_EXP 23
5530: PUSH
5531: LD_INT 100
5533: DIVREAL
5534: PUSH
5535: LD_INT 4200
5537: PPUSH
5538: LD_INT 5250
5540: PPUSH
5541: CALL_OW 12
5545: MUL
5546: PPUSH
5547: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5551: LD_ADDR_VAR 0 2
5555: PUSH
5556: LD_INT 3
5558: PPUSH
5559: LD_INT 5
5561: PPUSH
5562: CALL_OW 12
5566: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5567: LD_ADDR_VAR 0 1
5571: PUSH
5572: LD_EXP 32
5576: PUSH
5577: LD_INT 0
5579: PUSH
5580: EMPTY
5581: LIST
5582: DIFF
5583: PUSH
5584: FOR_IN
5585: IFFALSE 5625
// CreateCratesArea ( amount , [ base_nw , base_ne , base_sw , base_se ] [ i ] , true ) ;
5587: LD_VAR 0 2
5591: PPUSH
5592: LD_INT 8
5594: PUSH
5595: LD_INT 9
5597: PUSH
5598: LD_INT 10
5600: PUSH
5601: LD_INT 11
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: PUSH
5610: LD_VAR 0 1
5614: ARRAY
5615: PPUSH
5616: LD_INT 1
5618: PPUSH
5619: CALL_OW 55
5623: GO 5584
5625: POP
5626: POP
// enable ;
5627: ENABLE
// end ;
5628: PPOPN 2
5630: END
// every 1 1$0 trigger def_shipments_density do
5631: LD_EXP 5
5635: IFFALSE 5671
5637: GO 5639
5639: DISABLE
// begin CreateCratesArea ( 5 , map_center , true ) ;
5640: LD_INT 5
5642: PPUSH
5643: LD_INT 7
5645: PPUSH
5646: LD_INT 1
5648: PPUSH
5649: CALL_OW 55
// wait ( 3 3$0 - ( 1 1$0 * def_shipments_density ) ) ;
5653: LD_INT 6300
5655: PUSH
5656: LD_INT 2100
5658: PUSH
5659: LD_EXP 5
5663: MUL
5664: MINUS
5665: PPUSH
5666: CALL_OW 67
// enable ;
5670: ENABLE
// end ; end_of_file
5671: END
// var _apemenIncrement , _apemenMaximum , _apemenSkillLevel , _apemenThreshold , _isSpawning , _wildApemenAmount ; every 0 0$15 do var i ;
5672: GO 5674
5674: DISABLE
5675: LD_INT 0
5677: PPUSH
// begin _apemenIncrement := 0 ;
5678: LD_ADDR_LOC 12
5682: PUSH
5683: LD_INT 0
5685: ST_TO_ADDR
// _apemenSkillLevel := 0 ;
5686: LD_ADDR_LOC 14
5690: PUSH
5691: LD_INT 0
5693: ST_TO_ADDR
// _isSpawning := true ;
5694: LD_ADDR_LOC 16
5698: PUSH
5699: LD_INT 1
5701: ST_TO_ADDR
// _wildApemenAmount := 0 ;
5702: LD_ADDR_LOC 17
5706: PUSH
5707: LD_INT 0
5709: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5710: LD_ADDR_VAR 0 1
5714: PUSH
5715: LD_EXP 32
5719: PUSH
5720: LD_INT 0
5722: PUSH
5723: EMPTY
5724: LIST
5725: DIFF
5726: PUSH
5727: FOR_IN
5728: IFFALSE 5746
// _apemenIncrement := _apemenIncrement + 1 ;
5730: LD_ADDR_LOC 12
5734: PUSH
5735: LD_LOC 12
5739: PUSH
5740: LD_INT 1
5742: PLUS
5743: ST_TO_ADDR
5744: GO 5727
5746: POP
5747: POP
// _apemenMaximum := _apemenIncrement * amount_of_apemen ;
5748: LD_ADDR_LOC 13
5752: PUSH
5753: LD_LOC 12
5757: PUSH
5758: LD_EXP 27
5762: MUL
5763: ST_TO_ADDR
// _apemenThreshold := _apemenMaximum / 2 ;
5764: LD_ADDR_LOC 15
5768: PUSH
5769: LD_LOC 13
5773: PUSH
5774: LD_INT 2
5776: DIVREAL
5777: ST_TO_ADDR
// prepare_apemen ;
5778: CALL 5870 0 0
// end ;
5782: PPOPN 1
5784: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
5785: CALL 5792 0 0
// end ;
5789: PPOPN 2
5791: END
// export function CheckApemenAmount ; begin
5792: LD_INT 0
5794: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
5795: LD_ADDR_LOC 17
5799: PUSH
5800: LD_LOC 17
5804: PUSH
5805: LD_INT 1
5807: MINUS
5808: ST_TO_ADDR
// if _isSpawning then
5809: LD_LOC 16
5813: IFFALSE 5817
// exit ;
5815: GO 5865
// if _wildApemenAmount <= ( _apemenThreshold ) then
5817: LD_LOC 17
5821: PUSH
5822: LD_LOC 15
5826: LESSEQUAL
5827: IFFALSE 5865
// begin if _apemenSkillLevel < 8 then
5829: LD_LOC 14
5833: PUSH
5834: LD_INT 8
5836: LESS
5837: IFFALSE 5853
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
5839: LD_ADDR_LOC 14
5843: PUSH
5844: LD_LOC 14
5848: PUSH
5849: LD_INT 1
5851: PLUS
5852: ST_TO_ADDR
// _isSpawning := true ;
5853: LD_ADDR_LOC 16
5857: PUSH
5858: LD_INT 1
5860: ST_TO_ADDR
// prepare_apemen ;
5861: CALL 5870 0 0
// end ; end ;
5865: LD_VAR 0 1
5869: RET
// function prepare_apemen ; var i ; begin
5870: LD_INT 0
5872: PPUSH
5873: PPUSH
// if not amount_of_apemen then
5874: LD_EXP 27
5878: NOT
5879: IFFALSE 5883
// exit ;
5881: GO 6062
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5883: LD_INT 1050
5885: PPUSH
5886: LD_INT 3150
5888: PPUSH
5889: CALL_OW 12
5893: PPUSH
5894: CALL_OW 67
// apeman_init ;
5898: CALL 6067 0 0
// for i in ( Side_Positions diff [ 0 ] ) do
5902: LD_ADDR_VAR 0 2
5906: PUSH
5907: LD_EXP 32
5911: PUSH
5912: LD_INT 0
5914: PUSH
5915: EMPTY
5916: LIST
5917: DIFF
5918: PUSH
5919: FOR_IN
5920: IFFALSE 6024
// begin if i = 1 then
5922: LD_VAR 0 2
5926: PUSH
5927: LD_INT 1
5929: EQUAL
5930: IFFALSE 5947
// PlaceUnitArea ( CreateHuman , north_apeman , false ) ;
5932: CALL_OW 44
5936: PPUSH
5937: LD_INT 1
5939: PPUSH
5940: LD_INT 0
5942: PPUSH
5943: CALL_OW 49
// if i = 2 then
5947: LD_VAR 0 2
5951: PUSH
5952: LD_INT 2
5954: EQUAL
5955: IFFALSE 5972
// PlaceUnitArea ( CreateHuman , north_apeman , false ) ;
5957: CALL_OW 44
5961: PPUSH
5962: LD_INT 1
5964: PPUSH
5965: LD_INT 0
5967: PPUSH
5968: CALL_OW 49
// if i = 3 then
5972: LD_VAR 0 2
5976: PUSH
5977: LD_INT 3
5979: EQUAL
5980: IFFALSE 5997
// PlaceUnitArea ( CreateHuman , south_apeman , false ) ;
5982: CALL_OW 44
5986: PPUSH
5987: LD_INT 2
5989: PPUSH
5990: LD_INT 0
5992: PPUSH
5993: CALL_OW 49
// if i = 4 then
5997: LD_VAR 0 2
6001: PUSH
6002: LD_INT 4
6004: EQUAL
6005: IFFALSE 6022
// PlaceUnitArea ( CreateHuman , south_apeman , false ) ;
6007: CALL_OW 44
6011: PPUSH
6012: LD_INT 2
6014: PPUSH
6015: LD_INT 0
6017: PPUSH
6018: CALL_OW 49
// end ;
6022: GO 5919
6024: POP
6025: POP
// _wildApemenAmount := _wildApemenAmount + _apemenIncrement ;
6026: LD_ADDR_LOC 17
6030: PUSH
6031: LD_LOC 17
6035: PUSH
6036: LD_LOC 12
6040: PLUS
6041: ST_TO_ADDR
// until _wildApemenAmount >= _apemenMaximum ;
6042: LD_LOC 17
6046: PUSH
6047: LD_LOC 13
6051: GREATEREQUAL
6052: IFFALSE 5883
// _isSpawning := false ;
6054: LD_ADDR_LOC 16
6058: PUSH
6059: LD_INT 0
6061: ST_TO_ADDR
// end ;
6062: LD_VAR 0 1
6066: RET
// function apeman_init ; begin
6067: LD_INT 0
6069: PPUSH
// uc_side := 0 ;
6070: LD_ADDR_OWVAR 20
6074: PUSH
6075: LD_INT 0
6077: ST_TO_ADDR
// uc_nation := nation_nature ;
6078: LD_ADDR_OWVAR 21
6082: PUSH
6083: LD_INT 0
6085: ST_TO_ADDR
// hc_class := class_apeman ;
6086: LD_ADDR_OWVAR 28
6090: PUSH
6091: LD_INT 12
6093: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
6094: LD_ADDR_OWVAR 30
6098: PUSH
6099: LD_INT 2
6101: PUSH
6102: LD_INT 2
6104: PUSH
6105: LD_INT 2
6107: PUSH
6108: LD_INT 2
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
6117: LD_ADDR_OWVAR 31
6121: PUSH
6122: LD_INT 0
6124: PPUSH
6125: LD_INT 2
6127: PPUSH
6128: CALL_OW 12
6132: PUSH
6133: LD_LOC 14
6137: PLUS
6138: PUSH
6139: LD_INT 0
6141: PPUSH
6142: LD_INT 2
6144: PPUSH
6145: CALL_OW 12
6149: PUSH
6150: LD_LOC 14
6154: PLUS
6155: PUSH
6156: LD_INT 0
6158: PPUSH
6159: LD_INT 2
6161: PPUSH
6162: CALL_OW 12
6166: PUSH
6167: LD_LOC 14
6171: PLUS
6172: PUSH
6173: LD_INT 0
6175: PPUSH
6176: LD_INT 2
6178: PPUSH
6179: CALL_OW 12
6183: PUSH
6184: LD_LOC 14
6188: PLUS
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
6196: LD_ADDR_OWVAR 29
6200: PUSH
6201: LD_INT 10
6203: PUSH
6204: LD_INT 12
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: ST_TO_ADDR
// hc_sex := sex_male ;
6211: LD_ADDR_OWVAR 27
6215: PUSH
6216: LD_INT 1
6218: ST_TO_ADDR
// hc_importance := 0 ;
6219: LD_ADDR_OWVAR 32
6223: PUSH
6224: LD_INT 0
6226: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
6227: LD_ADDR_OWVAR 35
6231: PUSH
6232: LD_INT 20
6234: NEG
6235: PPUSH
6236: LD_INT 20
6238: PPUSH
6239: CALL_OW 12
6243: ST_TO_ADDR
// end ; end_of_file
6244: LD_VAR 0 1
6248: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6249: LD_INT 0
6251: PPUSH
6252: PPUSH
// for un in battle_flags_id do
6253: LD_ADDR_VAR 0 2
6257: PUSH
6258: LD_EXP 42
6262: PUSH
6263: FOR_IN
6264: IFFALSE 6339
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6266: LD_VAR 0 2
6270: PPUSH
6271: LD_INT 1
6273: PUSH
6274: LD_LOC 18
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 2
6285: PUSH
6286: LD_LOC 18
6290: PUSH
6291: LD_INT 2
6293: DIV
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: PUSH
6299: LD_INT 3
6301: PUSH
6302: LD_LOC 18
6306: PUSH
6307: LD_INT 5
6309: DIV
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PUSH
6315: LD_INT 20
6317: PUSH
6318: LD_LOC 18
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: PPUSH
6333: CALL_OW 423
6337: GO 6263
6339: POP
6340: POP
// end ;
6341: LD_VAR 0 1
6345: RET
// every 0 0$0.1 do var un ;
6346: GO 6348
6348: DISABLE
6349: LD_INT 0
6351: PPUSH
// begin if not def_morale_flags then
6352: LD_EXP 9
6356: NOT
6357: IFFALSE 6361
// exit ;
6359: GO 6438
// if not morale_decreasing_time then
6361: LD_EXP 24
6365: NOT
6366: IFFALSE 6370
// exit ;
6368: GO 6438
// strength = 100 ;
6370: LD_ADDR_LOC 18
6374: PUSH
6375: LD_INT 100
6377: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6378: LD_EXP 24
6382: PPUSH
6383: CALL_OW 67
// strength := strength - 1 ;
6387: LD_ADDR_LOC 18
6391: PUSH
6392: LD_LOC 18
6396: PUSH
6397: LD_INT 1
6399: MINUS
6400: ST_TO_ADDR
// Update_Flags ;
6401: CALL 6249 0 0
// until not strength ;
6405: LD_LOC 18
6409: NOT
6410: IFFALSE 6378
// for un in battle_flags_id do
6412: LD_ADDR_VAR 0 1
6416: PUSH
6417: LD_EXP 42
6421: PUSH
6422: FOR_IN
6423: IFFALSE 6436
// KillBattleFlag ( un ) ;
6425: LD_VAR 0 1
6429: PPUSH
6430: CALL_OW 419
6434: GO 6422
6436: POP
6437: POP
// end ; end_of_file
6438: PPOPN 1
6440: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
6441: LD_INT 0
6443: PPUSH
6444: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
6445: LD_ADDR_VAR 0 2
6449: PUSH
6450: LD_STRING #Multi1x1-Time
6452: PUSH
6453: LD_OWVAR 1
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: ST_TO_ADDR
// if WaitServerStrings then
6462: LD_EXP 46
6466: IFFALSE 6484
// AllStrings = AllStrings ^ WaitServerStrings ;
6468: LD_ADDR_VAR 0 2
6472: PUSH
6473: LD_VAR 0 2
6477: PUSH
6478: LD_EXP 46
6482: ADD
6483: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
6484: LD_INT 0
6486: PUSH
6487: LD_EXP 28
6491: PUSH
6492: LD_OWVAR 1
6496: MINUS
6497: LESSEQUAL
6498: IFFALSE 6529
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
6500: LD_ADDR_VAR 0 2
6504: PUSH
6505: LD_VAR 0 2
6509: PUSH
6510: LD_STRING #allowedsibbomb
6512: PUSH
6513: LD_EXP 28
6517: PUSH
6518: LD_OWVAR 1
6522: MINUS
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: ADD
6528: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
6529: LD_INT 0
6531: PUSH
6532: LD_EXP 49
6536: PUSH
6537: LD_OWVAR 1
6541: MINUS
6542: LESSEQUAL
6543: IFFALSE 6574
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
6545: LD_ADDR_VAR 0 2
6549: PUSH
6550: LD_VAR 0 2
6554: PUSH
6555: LD_STRING #builduptime
6557: PUSH
6558: LD_EXP 49
6562: PUSH
6563: LD_OWVAR 1
6567: MINUS
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: ADD
6573: ST_TO_ADDR
// if ( ExtraStrings ) then
6574: LD_EXP 45
6578: IFFALSE 6600
// AllStrings := AllStrings ^  ^ ExtraStrings ;
6580: LD_ADDR_VAR 0 2
6584: PUSH
6585: LD_VAR 0 2
6589: PUSH
6590: LD_STRING 
6592: ADD
6593: PUSH
6594: LD_EXP 45
6598: ADD
6599: ST_TO_ADDR
// Display_Strings := AllStrings ;
6600: LD_ADDR_OWVAR 47
6604: PUSH
6605: LD_VAR 0 2
6609: ST_TO_ADDR
// end ;
6610: LD_VAR 0 1
6614: RET
// every 0 0$1 do
6615: GO 6617
6617: DISABLE
// begin ShowTimer ;
6618: CALL 6441 0 0
// enable ;
6622: ENABLE
// end ; end_of_file
6623: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
6624: LD_INT 0
6626: PPUSH
6627: PPUSH
6628: PPUSH
// BuildUpTime_Delay = 0 ;
6629: LD_ADDR_EXP 49
6633: PUSH
6634: LD_INT 0
6636: ST_TO_ADDR
// if not def_builduptime then
6637: LD_EXP 14
6641: NOT
6642: IFFALSE 6646
// exit ;
6644: GO 6829
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
6646: LD_ADDR_EXP 49
6650: PUSH
6651: LD_INT 8400
6653: PUSH
6654: LD_INT 2100
6656: PUSH
6657: LD_EXP 14
6661: MUL
6662: PLUS
6663: ST_TO_ADDR
// BuildUpTimeActive := true ;
6664: LD_ADDR_EXP 48
6668: PUSH
6669: LD_INT 1
6671: ST_TO_ADDR
// for i := 1 to 8 do
6672: LD_ADDR_VAR 0 2
6676: PUSH
6677: DOUBLE
6678: LD_INT 1
6680: DEC
6681: ST_TO_ADDR
6682: LD_INT 8
6684: PUSH
6685: FOR_TO
6686: IFFALSE 6827
// if Side_Positions [ i ] then
6688: LD_EXP 32
6692: PUSH
6693: LD_VAR 0 2
6697: ARRAY
6698: IFFALSE 6825
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
6700: LD_EXP 47
6704: PUSH
6705: LD_EXP 32
6709: PUSH
6710: LD_VAR 0 2
6714: ARRAY
6715: ARRAY
6716: PPUSH
6717: LD_INT 5
6719: PPUSH
6720: CALL_OW 424
// for j := 1 to 8 do
6724: LD_ADDR_VAR 0 3
6728: PUSH
6729: DOUBLE
6730: LD_INT 1
6732: DEC
6733: ST_TO_ADDR
6734: LD_INT 8
6736: PUSH
6737: FOR_TO
6738: IFFALSE 6823
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
6740: LD_EXP 32
6744: PUSH
6745: LD_VAR 0 3
6749: ARRAY
6750: PUSH
6751: LD_EXP 30
6755: PUSH
6756: LD_VAR 0 2
6760: ARRAY
6761: PUSH
6762: LD_EXP 30
6766: PUSH
6767: LD_VAR 0 3
6771: ARRAY
6772: NONEQUAL
6773: PUSH
6774: LD_EXP 34
6778: NOT
6779: PUSH
6780: LD_VAR 0 2
6784: PUSH
6785: LD_VAR 0 3
6789: NONEQUAL
6790: AND
6791: OR
6792: AND
6793: IFFALSE 6821
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
6795: LD_VAR 0 3
6799: PPUSH
6800: LD_EXP 47
6804: PUSH
6805: LD_EXP 32
6809: PUSH
6810: LD_VAR 0 2
6814: ARRAY
6815: ARRAY
6816: PPUSH
6817: CALL_OW 333
6821: GO 6737
6823: POP
6824: POP
// end ;
6825: GO 6685
6827: POP
6828: POP
// end ;
6829: LD_VAR 0 1
6833: RET
// export function EndBuildUp ; var i , j ; begin
6834: LD_INT 0
6836: PPUSH
6837: PPUSH
6838: PPUSH
// BuildUpTimeActive := false ;
6839: LD_ADDR_EXP 48
6843: PUSH
6844: LD_INT 0
6846: ST_TO_ADDR
// for i := 1 to 8 do
6847: LD_ADDR_VAR 0 2
6851: PUSH
6852: DOUBLE
6853: LD_INT 1
6855: DEC
6856: ST_TO_ADDR
6857: LD_INT 8
6859: PUSH
6860: FOR_TO
6861: IFFALSE 7002
// if Side_Positions [ i ] then
6863: LD_EXP 32
6867: PUSH
6868: LD_VAR 0 2
6872: ARRAY
6873: IFFALSE 7000
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
6875: LD_EXP 47
6879: PUSH
6880: LD_EXP 32
6884: PUSH
6885: LD_VAR 0 2
6889: ARRAY
6890: ARRAY
6891: PPUSH
6892: LD_INT 0
6894: PPUSH
6895: CALL_OW 424
// for j := 1 to 8 do
6899: LD_ADDR_VAR 0 3
6903: PUSH
6904: DOUBLE
6905: LD_INT 1
6907: DEC
6908: ST_TO_ADDR
6909: LD_INT 8
6911: PUSH
6912: FOR_TO
6913: IFFALSE 6998
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
6915: LD_EXP 32
6919: PUSH
6920: LD_VAR 0 3
6924: ARRAY
6925: PUSH
6926: LD_EXP 30
6930: PUSH
6931: LD_VAR 0 2
6935: ARRAY
6936: PUSH
6937: LD_EXP 30
6941: PUSH
6942: LD_VAR 0 3
6946: ARRAY
6947: NONEQUAL
6948: PUSH
6949: LD_EXP 34
6953: NOT
6954: PUSH
6955: LD_VAR 0 2
6959: PUSH
6960: LD_VAR 0 3
6964: NONEQUAL
6965: AND
6966: OR
6967: AND
6968: IFFALSE 6996
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
6970: LD_VAR 0 3
6974: PPUSH
6975: LD_EXP 47
6979: PUSH
6980: LD_EXP 32
6984: PUSH
6985: LD_VAR 0 2
6989: ARRAY
6990: ARRAY
6991: PPUSH
6992: CALL_OW 334
6996: GO 6912
6998: POP
6999: POP
// end ;
7000: GO 6860
7002: POP
7003: POP
// end ;
7004: LD_VAR 0 1
7008: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
7009: LD_EXP 48
7013: IFFALSE 7188
7015: GO 7017
7017: DISABLE
7018: LD_INT 0
7020: PPUSH
7021: PPUSH
// begin for i := 1 to 8 do
7022: LD_ADDR_VAR 0 1
7026: PUSH
7027: DOUBLE
7028: LD_INT 1
7030: DEC
7031: ST_TO_ADDR
7032: LD_INT 8
7034: PUSH
7035: FOR_TO
7036: IFFALSE 7185
// if Side_Positions [ i ] then
7038: LD_EXP 32
7042: PUSH
7043: LD_VAR 0 1
7047: ARRAY
7048: IFFALSE 7183
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
7050: LD_ADDR_VAR 0 2
7054: PUSH
7055: LD_EXP 47
7059: PUSH
7060: LD_EXP 32
7064: PUSH
7065: LD_VAR 0 1
7069: ARRAY
7070: ARRAY
7071: PPUSH
7072: LD_INT 2
7074: PUSH
7075: LD_INT 21
7077: PUSH
7078: LD_INT 1
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: LD_INT 21
7087: PUSH
7088: LD_INT 2
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 22
7102: PUSH
7103: LD_OWVAR 2
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: PPUSH
7116: CALL_OW 70
7120: PUSH
7121: FOR_IN
7122: IFFALSE 7181
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
7124: LD_EXP 30
7128: PUSH
7129: LD_VAR 0 1
7133: ARRAY
7134: PUSH
7135: LD_EXP 30
7139: PUSH
7140: LD_OWVAR 2
7144: ARRAY
7145: NONEQUAL
7146: PUSH
7147: LD_EXP 34
7151: NOT
7152: PUSH
7153: LD_VAR 0 1
7157: PUSH
7158: LD_OWVAR 2
7162: NONEQUAL
7163: AND
7164: OR
7165: IFFALSE 7179
// ComMoveToArea ( un , BuildUpEscape ) ;
7167: LD_VAR 0 2
7171: PPUSH
7172: LD_INT 12
7174: PPUSH
7175: CALL_OW 113
7179: GO 7121
7181: POP
7182: POP
7183: GO 7035
7185: POP
7186: POP
// enable ;
7187: ENABLE
// end ;
7188: PPOPN 2
7190: END
// every 0 0$1 trigger def_builduptime do
7191: LD_EXP 14
7195: IFFALSE 7221
7197: GO 7199
7199: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
7200: LD_INT 8400
7202: PUSH
7203: LD_EXP 14
7207: PUSH
7208: LD_INT 2100
7210: MUL
7211: PLUS
7212: PPUSH
7213: CALL_OW 67
// EndBuildUp ;
7217: CALL 6834 0 0
// end ; end_of_file
7221: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7222: LD_INT 0
7224: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7225: LD_VAR 0 1
7229: PPUSH
7230: CALL_OW 255
7234: PUSH
7235: LD_VAR 0 4
7239: EQUAL
7240: IFFALSE 7259
// begin SetAchievement ( ACH_RAD ) ;
7242: LD_STRING ACH_RAD
7244: PPUSH
7245: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7249: LD_STRING ACH_NL
7251: PPUSH
7252: LD_INT 1
7254: PPUSH
7255: CALL_OW 564
// end end ;
7259: LD_VAR 0 5
7263: RET
// export function SA_Win ( side ) ; begin
7264: LD_INT 0
7266: PPUSH
// case side of 1 :
7267: LD_VAR 0 1
7271: PUSH
7272: LD_INT 1
7274: DOUBLE
7275: EQUAL
7276: IFTRUE 7280
7278: GO 7293
7280: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7281: LD_STRING ACH_AH
7283: PPUSH
7284: LD_INT 1
7286: PPUSH
7287: CALL_OW 564
7291: GO 7456
7293: LD_INT 2
7295: DOUBLE
7296: EQUAL
7297: IFTRUE 7301
7299: GO 7314
7301: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7302: LD_STRING ACH_E
7304: PPUSH
7305: LD_INT 1
7307: PPUSH
7308: CALL_OW 564
7312: GO 7456
7314: LD_INT 3
7316: DOUBLE
7317: EQUAL
7318: IFTRUE 7322
7320: GO 7335
7322: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7323: LD_STRING ACH_OOL
7325: PPUSH
7326: LD_INT 1
7328: PPUSH
7329: CALL_OW 564
7333: GO 7456
7335: LD_INT 1
7337: PUSH
7338: LD_INT 2
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: DOUBLE
7345: EQUAL
7346: IFTRUE 7350
7348: GO 7375
7350: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7351: LD_STRING ACH_AH
7353: PPUSH
7354: LD_REAL  5.00000000000000E-0001
7357: PPUSH
7358: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7362: LD_STRING ACH_E
7364: PPUSH
7365: LD_REAL  5.00000000000000E-0001
7368: PPUSH
7369: CALL_OW 564
// end ; [ 2 , 3 ] :
7373: GO 7456
7375: LD_INT 2
7377: PUSH
7378: LD_INT 3
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: DOUBLE
7385: EQUAL
7386: IFTRUE 7390
7388: GO 7415
7390: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7391: LD_STRING ACH_OOL
7393: PPUSH
7394: LD_REAL  5.00000000000000E-0001
7397: PPUSH
7398: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7402: LD_STRING ACH_E
7404: PPUSH
7405: LD_REAL  5.00000000000000E-0001
7408: PPUSH
7409: CALL_OW 564
// end ; [ 3 , 1 ] :
7413: GO 7456
7415: LD_INT 3
7417: PUSH
7418: LD_INT 1
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: DOUBLE
7425: EQUAL
7426: IFTRUE 7430
7428: GO 7455
7430: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7431: LD_STRING ACH_AH
7433: PPUSH
7434: LD_REAL  5.00000000000000E-0001
7437: PPUSH
7438: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7442: LD_STRING ACH_OOL
7444: PPUSH
7445: LD_REAL  5.00000000000000E-0001
7448: PPUSH
7449: CALL_OW 564
// end ; end ;
7453: GO 7456
7455: POP
// end ; end_of_file
7456: LD_VAR 0 2
7460: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7461: LD_INT 0
7463: PPUSH
7464: PPUSH
// enable ( 98 ) ;
7465: LD_INT 98
7467: ENABLE_MARKED
// GameEnded = false ;
7468: LD_ADDR_LOC 24
7472: PUSH
7473: LD_INT 0
7475: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7476: LD_ADDR_LOC 23
7480: PUSH
7481: LD_INT 0
7483: PUSH
7484: LD_INT 0
7486: PUSH
7487: LD_INT 0
7489: PUSH
7490: LD_INT 0
7492: PUSH
7493: LD_INT 0
7495: PUSH
7496: LD_INT 0
7498: PUSH
7499: LD_INT 0
7501: PUSH
7502: LD_INT 0
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: ST_TO_ADDR
// unfoged = false ;
7515: LD_ADDR_LOC 25
7519: PUSH
7520: LD_INT 0
7522: ST_TO_ADDR
// defeated_specs := [ ] ;
7523: LD_ADDR_LOC 26
7527: PUSH
7528: EMPTY
7529: ST_TO_ADDR
// for i = 1 to side_positions do
7530: LD_ADDR_VAR 0 2
7534: PUSH
7535: DOUBLE
7536: LD_INT 1
7538: DEC
7539: ST_TO_ADDR
7540: LD_EXP 32
7544: PUSH
7545: FOR_TO
7546: IFFALSE 7586
// if not side_positions [ i ] then
7548: LD_EXP 32
7552: PUSH
7553: LD_VAR 0 2
7557: ARRAY
7558: NOT
7559: IFFALSE 7584
// defeated = replace ( defeated , i , true ) ;
7561: LD_ADDR_LOC 23
7565: PUSH
7566: LD_LOC 23
7570: PPUSH
7571: LD_VAR 0 2
7575: PPUSH
7576: LD_INT 1
7578: PPUSH
7579: CALL_OW 1
7583: ST_TO_ADDR
7584: GO 7545
7586: POP
7587: POP
// end ;
7588: LD_VAR 0 1
7592: RET
// function CanWinLoose ; begin
7593: LD_INT 0
7595: PPUSH
// Result := true ;
7596: LD_ADDR_VAR 0 1
7600: PUSH
7601: LD_INT 1
7603: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7604: CALL_OW 518
7608: PUSH
7609: CALL_OW 519
7613: PUSH
7614: LD_INT 0
7616: GREATER
7617: AND
7618: IFFALSE 7628
// Result := false ;
7620: LD_ADDR_VAR 0 1
7624: PUSH
7625: LD_INT 0
7627: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7628: CALL_OW 531
7632: PUSH
7633: CALL_OW 519
7637: PUSH
7638: LD_INT 1
7640: GREATER
7641: AND
7642: IFFALSE 7652
// Result := false ;
7644: LD_ADDR_VAR 0 1
7648: PUSH
7649: LD_INT 0
7651: ST_TO_ADDR
// end ;
7652: LD_VAR 0 1
7656: RET
// export function HasPower ( i ) ; var k , h ; begin
7657: LD_INT 0
7659: PPUSH
7660: PPUSH
7661: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7662: LD_VAR 0 1
7666: PPUSH
7667: CALL_OW 108
7671: NOT
7672: PUSH
7673: LD_EXP 43
7677: PUSH
7678: LD_VAR 0 1
7682: ARRAY
7683: NOT
7684: AND
7685: PUSH
7686: LD_OWVAR 4
7690: AND
7691: IFFALSE 7703
// begin result = false ;
7693: LD_ADDR_VAR 0 2
7697: PUSH
7698: LD_INT 0
7700: ST_TO_ADDR
// end else
7701: GO 7998
// case def_win_rules of 0 :
7703: LD_EXP 29
7707: PUSH
7708: LD_INT 0
7710: DOUBLE
7711: EQUAL
7712: IFTRUE 7716
7714: GO 7879
7716: POP
// if def_people_respawning then
7717: LD_EXP 12
7721: IFFALSE 7812
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7723: LD_ADDR_VAR 0 2
7727: PUSH
7728: LD_INT 22
7730: PUSH
7731: LD_VAR 0 1
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 2
7742: PUSH
7743: LD_INT 21
7745: PUSH
7746: LD_INT 1
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: PUSH
7753: LD_INT 33
7755: PUSH
7756: LD_INT 3
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 33
7765: PUSH
7766: LD_INT 5
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 30
7775: PUSH
7776: LD_INT 0
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: LD_INT 30
7785: PUSH
7786: LD_INT 1
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PPUSH
7805: CALL_OW 69
7809: ST_TO_ADDR
7810: GO 7877
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
7812: LD_ADDR_VAR 0 2
7816: PUSH
7817: LD_INT 22
7819: PUSH
7820: LD_VAR 0 1
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: LD_INT 2
7831: PUSH
7832: LD_INT 21
7834: PUSH
7835: LD_INT 1
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 33
7844: PUSH
7845: LD_INT 3
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: LD_INT 33
7854: PUSH
7855: LD_INT 5
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PPUSH
7872: CALL_OW 69
7876: ST_TO_ADDR
7877: GO 7998
7879: LD_INT 1
7881: DOUBLE
7882: EQUAL
7883: IFTRUE 7887
7885: GO 7926
7887: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
7888: LD_ADDR_VAR 0 2
7892: PUSH
7893: LD_INT 22
7895: PUSH
7896: LD_VAR 0 1
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 21
7907: PUSH
7908: LD_INT 1
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PPUSH
7919: CALL_OW 69
7923: ST_TO_ADDR
7924: GO 7998
7926: LD_INT 2
7928: DOUBLE
7929: EQUAL
7930: IFTRUE 7934
7932: GO 7997
7934: POP
// begin h = false ;
7935: LD_ADDR_VAR 0 4
7939: PUSH
7940: LD_INT 0
7942: ST_TO_ADDR
// for k in heroes [ i ] do
7943: LD_ADDR_VAR 0 3
7947: PUSH
7948: LD_EXP 44
7952: PUSH
7953: LD_VAR 0 1
7957: ARRAY
7958: PUSH
7959: FOR_IN
7960: IFFALSE 7983
// if IsLive ( k ) then
7962: LD_VAR 0 3
7966: PPUSH
7967: CALL_OW 300
7971: IFFALSE 7981
// h = true ;
7973: LD_ADDR_VAR 0 4
7977: PUSH
7978: LD_INT 1
7980: ST_TO_ADDR
7981: GO 7959
7983: POP
7984: POP
// Result := h ;
7985: LD_ADDR_VAR 0 2
7989: PUSH
7990: LD_VAR 0 4
7994: ST_TO_ADDR
// end ; end ;
7995: GO 7998
7997: POP
// end ;
7998: LD_VAR 0 2
8002: RET
// function AlliedSides ( i , j ) ; begin
8003: LD_INT 0
8005: PPUSH
// Result := false ;
8006: LD_ADDR_VAR 0 3
8010: PUSH
8011: LD_INT 0
8013: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8014: LD_VAR 0 1
8018: PPUSH
8019: LD_VAR 0 2
8023: PPUSH
8024: CALL_OW 81
8028: PUSH
8029: LD_INT 1
8031: EQUAL
8032: PUSH
8033: LD_VAR 0 2
8037: PPUSH
8038: LD_VAR 0 1
8042: PPUSH
8043: CALL_OW 81
8047: PUSH
8048: LD_INT 1
8050: EQUAL
8051: AND
8052: PUSH
8053: LD_VAR 0 1
8057: PPUSH
8058: CALL_OW 83
8062: AND
8063: PUSH
8064: LD_VAR 0 2
8068: PPUSH
8069: CALL_OW 83
8073: AND
8074: IFFALSE 8084
// Result := true ;
8076: LD_ADDR_VAR 0 3
8080: PUSH
8081: LD_INT 1
8083: ST_TO_ADDR
// end ;
8084: LD_VAR 0 3
8088: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8089: CALL 7593 0 0
8093: PUSH
8094: LD_LOC 24
8098: NOT
8099: AND
8100: IFFALSE 8116
8102: GO 8104
8104: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8105: LD_ADDR_EXP 46
8109: PUSH
8110: LD_STRING #Player-Ended
8112: PUSH
8113: EMPTY
8114: LIST
8115: ST_TO_ADDR
8116: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8117: CALL 7593 0 0
8121: PUSH
8122: LD_LOC 24
8126: AND
8127: IFFALSE 8136
8129: GO 8131
8131: DISABLE
// YouLostInMultiplayer ;
8132: CALL_OW 107
8136: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8137: CALL 7593 0 0
8141: NOT
8142: PUSH
8143: CALL_OW 531
8147: NOT
8148: AND
8149: IFFALSE 8165
8151: GO 8153
8153: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8154: LD_ADDR_EXP 46
8158: PUSH
8159: LD_STRING #server-wait
8161: PUSH
8162: EMPTY
8163: LIST
8164: ST_TO_ADDR
8165: END
// every 100 trigger IAmSpec do
8166: CALL_OW 531
8170: IFFALSE 8186
8172: GO 8174
8174: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8175: LD_ADDR_EXP 46
8179: PUSH
8180: LD_STRING #Player-IAmSpec
8182: PUSH
8183: EMPTY
8184: LIST
8185: ST_TO_ADDR
8186: END
// every 100 trigger GameEnded and IAmSpec do
8187: LD_LOC 24
8191: PUSH
8192: CALL_OW 531
8196: AND
8197: IFFALSE 8206
8199: GO 8201
8201: DISABLE
// YouLostInMultiplayer ;
8202: CALL_OW 107
8206: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8207: CALL 7593 0 0
8211: PUSH
8212: LD_LOC 24
8216: NOT
8217: AND
8218: IFFALSE 8234
8220: GO 8222
8222: DISABLE
// WaitServerStrings = [ $player-win ] ;
8223: LD_ADDR_EXP 46
8227: PUSH
8228: LD_STRING $player-win
8230: PUSH
8231: EMPTY
8232: LIST
8233: ST_TO_ADDR
8234: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8235: CALL 7593 0 0
8239: PUSH
8240: LD_LOC 24
8244: AND
8245: IFFALSE 8269
8247: GO 8249
8249: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8250: LD_EXP 33
8254: PUSH
8255: LD_OWVAR 7
8259: ARRAY
8260: PPUSH
8261: CALL 7264 0 1
// YouWinInMultiplayer ;
8265: CALL_OW 106
// end ;
8269: END
// every 100 trigger isEditor marked 401 do
8270: LD_OWVAR 84
8274: IFFALSE 8290
8276: GO 8278
8278: DISABLE
// Debug_Strings = [ You won ] ;
8279: LD_ADDR_OWVAR 48
8283: PUSH
8284: LD_STRING You won
8286: PUSH
8287: EMPTY
8288: LIST
8289: ST_TO_ADDR
8290: END
// every 100 trigger isEditor marked 400 do
8291: LD_OWVAR 84
8295: IFFALSE 8311
8297: GO 8299
8299: DISABLE
// Debug_Strings = [ You loss ] ;
8300: LD_ADDR_OWVAR 48
8304: PUSH
8305: LD_STRING You loss
8307: PUSH
8308: EMPTY
8309: LIST
8310: ST_TO_ADDR
8311: END
// every 100 marked 98 do var i , un ;
8312: GO 8314
8314: DISABLE
8315: LD_INT 0
8317: PPUSH
8318: PPUSH
// begin for i = 1 to side_positions do
8319: LD_ADDR_VAR 0 1
8323: PUSH
8324: DOUBLE
8325: LD_INT 1
8327: DEC
8328: ST_TO_ADDR
8329: LD_EXP 32
8333: PUSH
8334: FOR_TO
8335: IFFALSE 8422
// begin if side_positions [ i ] then
8337: LD_EXP 32
8341: PUSH
8342: LD_VAR 0 1
8346: ARRAY
8347: IFFALSE 8420
// if not HasPower ( i ) and not defeated [ i ] then
8349: LD_VAR 0 1
8353: PPUSH
8354: CALL 7657 0 1
8358: NOT
8359: PUSH
8360: LD_LOC 23
8364: PUSH
8365: LD_VAR 0 1
8369: ARRAY
8370: NOT
8371: AND
8372: IFFALSE 8420
// begin defeated = replace ( defeated , i , true ) ;
8374: LD_ADDR_LOC 23
8378: PUSH
8379: LD_LOC 23
8383: PPUSH
8384: LD_VAR 0 1
8388: PPUSH
8389: LD_INT 1
8391: PPUSH
8392: CALL_OW 1
8396: ST_TO_ADDR
// if i = mp_player_side then
8397: LD_VAR 0 1
8401: PUSH
8402: LD_OWVAR 7
8406: EQUAL
8407: IFFALSE 8420
// begin Multiplayer_Loose_Message ;
8409: CALL_OW 521
// SetPlayerSpectator ( ) ;
8413: CALL_OW 572
// enable ( 400 ) ;
8417: LD_INT 400
8419: ENABLE_MARKED
// end ; end ; end ;
8420: GO 8334
8422: POP
8423: POP
// DidGameEnd ;
8424: CALL 8439 0 0
// if not GameEnded then
8428: LD_LOC 24
8432: NOT
8433: IFFALSE 8436
// enable ;
8435: ENABLE
// end ;
8436: PPOPN 2
8438: END
// function DidGameEnd ; var i , k , enemy ; begin
8439: LD_INT 0
8441: PPUSH
8442: PPUSH
8443: PPUSH
8444: PPUSH
// enemy = [ ] ;
8445: LD_ADDR_VAR 0 4
8449: PUSH
8450: EMPTY
8451: ST_TO_ADDR
// for i = 1 to side_positions do
8452: LD_ADDR_VAR 0 2
8456: PUSH
8457: DOUBLE
8458: LD_INT 1
8460: DEC
8461: ST_TO_ADDR
8462: LD_EXP 32
8466: PUSH
8467: FOR_TO
8468: IFFALSE 8562
// if not defeated [ i ] then
8470: LD_LOC 23
8474: PUSH
8475: LD_VAR 0 2
8479: ARRAY
8480: NOT
8481: IFFALSE 8560
// for k = 1 to side_positions do
8483: LD_ADDR_VAR 0 3
8487: PUSH
8488: DOUBLE
8489: LD_INT 1
8491: DEC
8492: ST_TO_ADDR
8493: LD_EXP 32
8497: PUSH
8498: FOR_TO
8499: IFFALSE 8558
// if not defeated [ k ] then
8501: LD_LOC 23
8505: PUSH
8506: LD_VAR 0 3
8510: ARRAY
8511: NOT
8512: IFFALSE 8556
// if not AlliedSides ( i , k ) then
8514: LD_VAR 0 2
8518: PPUSH
8519: LD_VAR 0 3
8523: PPUSH
8524: CALL 8003 0 2
8528: NOT
8529: IFFALSE 8556
// enemy = enemy ^ [ i , k ] ;
8531: LD_ADDR_VAR 0 4
8535: PUSH
8536: LD_VAR 0 4
8540: PUSH
8541: LD_VAR 0 2
8545: PUSH
8546: LD_VAR 0 3
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: ADD
8555: ST_TO_ADDR
8556: GO 8498
8558: POP
8559: POP
8560: GO 8467
8562: POP
8563: POP
// if not enemy then
8564: LD_VAR 0 4
8568: NOT
8569: IFFALSE 8595
// begin GameEnded = true ;
8571: LD_ADDR_LOC 24
8575: PUSH
8576: LD_INT 1
8578: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
8579: LD_LOC 23
8583: PUSH
8584: LD_OWVAR 7
8588: ARRAY
8589: NOT
8590: IFFALSE 8595
// enable ( 401 ) ;
8592: LD_INT 401
8594: ENABLE_MARKED
// end ; end ;
8595: LD_VAR 0 1
8599: RET
// function unfog ; var k , friends ; begin
8600: LD_INT 0
8602: PPUSH
8603: PPUSH
8604: PPUSH
// for k = 1 to side_positions do
8605: LD_ADDR_VAR 0 2
8609: PUSH
8610: DOUBLE
8611: LD_INT 1
8613: DEC
8614: ST_TO_ADDR
8615: LD_EXP 32
8619: PUSH
8620: FOR_TO
8621: IFFALSE 8677
// if not defeated [ k ] then
8623: LD_LOC 23
8627: PUSH
8628: LD_VAR 0 2
8632: ARRAY
8633: NOT
8634: IFFALSE 8675
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
8636: LD_OWVAR 7
8640: PPUSH
8641: LD_VAR 0 2
8645: PPUSH
8646: CALL_OW 81
8650: PUSH
8651: LD_INT 1
8653: PUSH
8654: EMPTY
8655: LIST
8656: IN
8657: IFFALSE 8675
// friends = friends ^ k ;
8659: LD_ADDR_VAR 0 3
8663: PUSH
8664: LD_VAR 0 3
8668: PUSH
8669: LD_VAR 0 2
8673: ADD
8674: ST_TO_ADDR
8675: GO 8620
8677: POP
8678: POP
// if not friends then
8679: LD_VAR 0 3
8683: NOT
8684: IFFALSE 8698
// begin SetPlayerSpectator ( ) ;
8686: CALL_OW 572
// unfoged = true ;
8690: LD_ADDR_LOC 25
8694: PUSH
8695: LD_INT 1
8697: ST_TO_ADDR
// end ; end ;
8698: LD_VAR 0 1
8702: RET
// export function MakeGameEnd ; begin
8703: LD_INT 0
8705: PPUSH
// SetPlayerSpectator ( ) ;
8706: CALL_OW 572
// unfoged = true ;
8710: LD_ADDR_LOC 25
8714: PUSH
8715: LD_INT 1
8717: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8718: LD_INT 175
8720: PPUSH
8721: CALL_OW 67
// GameEnded = true ;
8725: LD_ADDR_LOC 24
8729: PUSH
8730: LD_INT 1
8732: ST_TO_ADDR
// end ;
8733: LD_VAR 0 1
8737: RET
// export function GetGameEnded ; begin
8738: LD_INT 0
8740: PPUSH
// result = GameEnded ;
8741: LD_ADDR_VAR 0 1
8745: PUSH
8746: LD_LOC 24
8750: ST_TO_ADDR
// end ; end_of_file
8751: LD_VAR 0 1
8755: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8756: LD_INT 0
8758: PPUSH
8759: PPUSH
8760: PPUSH
// for side = 1 to 8 do
8761: LD_ADDR_VAR 0 2
8765: PUSH
8766: DOUBLE
8767: LD_INT 1
8769: DEC
8770: ST_TO_ADDR
8771: LD_INT 8
8773: PUSH
8774: FOR_TO
8775: IFFALSE 8896
// begin for i = 1 to 72 do
8777: LD_ADDR_VAR 0 3
8781: PUSH
8782: DOUBLE
8783: LD_INT 1
8785: DEC
8786: ST_TO_ADDR
8787: LD_INT 72
8789: PUSH
8790: FOR_TO
8791: IFFALSE 8822
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
8793: LD_VAR 0 3
8797: PPUSH
8798: LD_VAR 0 2
8802: PPUSH
8803: LD_INT 0
8805: PPUSH
8806: LD_VAR 0 3
8810: PPUSH
8811: CALL_OW 565
8815: PPUSH
8816: CALL_OW 322
8820: GO 8790
8822: POP
8823: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
8824: LD_INT 73
8826: PPUSH
8827: LD_VAR 0 2
8831: PPUSH
8832: LD_INT 0
8834: PPUSH
8835: LD_INT 25
8837: PPUSH
8838: CALL_OW 565
8842: PPUSH
8843: CALL_OW 322
// for i = 0 to 40 do
8847: LD_ADDR_VAR 0 3
8851: PUSH
8852: DOUBLE
8853: LD_INT 0
8855: DEC
8856: ST_TO_ADDR
8857: LD_INT 40
8859: PUSH
8860: FOR_TO
8861: IFFALSE 8892
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
8863: LD_VAR 0 3
8867: PPUSH
8868: LD_VAR 0 2
8872: PPUSH
8873: LD_INT 1
8875: PPUSH
8876: LD_VAR 0 3
8880: PPUSH
8881: CALL_OW 565
8885: PPUSH
8886: CALL_OW 324
8890: GO 8860
8892: POP
8893: POP
// end ;
8894: GO 8774
8896: POP
8897: POP
// end ;
8898: LD_VAR 0 1
8902: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
8903: LD_INT 0
8905: PPUSH
8906: PPUSH
8907: PPUSH
// for side = 1 to 8 do
8908: LD_ADDR_VAR 0 3
8912: PUSH
8913: DOUBLE
8914: LD_INT 1
8916: DEC
8917: ST_TO_ADDR
8918: LD_INT 8
8920: PUSH
8921: FOR_TO
8922: IFFALSE 12918
// begin for i = 1 to 73 do
8924: LD_ADDR_VAR 0 4
8928: PUSH
8929: DOUBLE
8930: LD_INT 1
8932: DEC
8933: ST_TO_ADDR
8934: LD_INT 73
8936: PUSH
8937: FOR_TO
8938: IFFALSE 8959
// SetTech ( i , side , state_disabled ) ;
8940: LD_VAR 0 4
8944: PPUSH
8945: LD_VAR 0 3
8949: PPUSH
8950: LD_INT 0
8952: PPUSH
8953: CALL_OW 322
8957: GO 8937
8959: POP
8960: POP
// for i = 0 to 40 do
8961: LD_ADDR_VAR 0 4
8965: PUSH
8966: DOUBLE
8967: LD_INT 0
8969: DEC
8970: ST_TO_ADDR
8971: LD_INT 40
8973: PUSH
8974: FOR_TO
8975: IFFALSE 8996
// SetRestrict ( i , side , false ) ;
8977: LD_VAR 0 4
8981: PPUSH
8982: LD_VAR 0 3
8986: PPUSH
8987: LD_INT 0
8989: PPUSH
8990: CALL_OW 324
8994: GO 8974
8996: POP
8997: POP
// case level of 1 :
8998: LD_VAR 0 1
9002: PUSH
9003: LD_INT 1
9005: DOUBLE
9006: EQUAL
9007: IFTRUE 9011
9009: GO 9164
9011: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9012: LD_INT 35
9014: PPUSH
9015: LD_VAR 0 3
9019: PPUSH
9020: LD_INT 1
9022: PPUSH
9023: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9027: LD_INT 45
9029: PPUSH
9030: LD_VAR 0 3
9034: PPUSH
9035: LD_INT 1
9037: PPUSH
9038: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9042: LD_INT 46
9044: PPUSH
9045: LD_VAR 0 3
9049: PPUSH
9050: LD_INT 1
9052: PPUSH
9053: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9057: LD_INT 47
9059: PPUSH
9060: LD_VAR 0 3
9064: PPUSH
9065: LD_INT 1
9067: PPUSH
9068: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9072: LD_INT 0
9074: PPUSH
9075: LD_VAR 0 3
9079: PPUSH
9080: LD_INT 1
9082: PPUSH
9083: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9087: LD_INT 2
9089: PPUSH
9090: LD_VAR 0 3
9094: PPUSH
9095: LD_INT 1
9097: PPUSH
9098: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9102: LD_INT 4
9104: PPUSH
9105: LD_VAR 0 3
9109: PPUSH
9110: LD_INT 1
9112: PPUSH
9113: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9117: LD_INT 6
9119: PPUSH
9120: LD_VAR 0 3
9124: PPUSH
9125: LD_INT 1
9127: PPUSH
9128: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9132: LD_INT 29
9134: PPUSH
9135: LD_VAR 0 3
9139: PPUSH
9140: LD_INT 1
9142: PPUSH
9143: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9147: LD_INT 31
9149: PPUSH
9150: LD_VAR 0 3
9154: PPUSH
9155: LD_INT 1
9157: PPUSH
9158: CALL_OW 324
// end ; 2 :
9162: GO 12916
9164: LD_INT 2
9166: DOUBLE
9167: EQUAL
9168: IFTRUE 9172
9170: GO 9370
9172: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9173: LD_INT 35
9175: PPUSH
9176: LD_VAR 0 3
9180: PPUSH
9181: LD_INT 1
9183: PPUSH
9184: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9188: LD_INT 45
9190: PPUSH
9191: LD_VAR 0 3
9195: PPUSH
9196: LD_INT 1
9198: PPUSH
9199: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9203: LD_INT 46
9205: PPUSH
9206: LD_VAR 0 3
9210: PPUSH
9211: LD_INT 1
9213: PPUSH
9214: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9218: LD_INT 47
9220: PPUSH
9221: LD_VAR 0 3
9225: PPUSH
9226: LD_INT 1
9228: PPUSH
9229: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9233: LD_INT 1
9235: PPUSH
9236: LD_VAR 0 3
9240: PPUSH
9241: LD_INT 1
9243: PPUSH
9244: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9248: LD_INT 2
9250: PPUSH
9251: LD_VAR 0 3
9255: PPUSH
9256: LD_INT 1
9258: PPUSH
9259: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9263: LD_INT 11
9265: PPUSH
9266: LD_VAR 0 3
9270: PPUSH
9271: LD_INT 1
9273: PPUSH
9274: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9278: LD_INT 0
9280: PPUSH
9281: LD_VAR 0 3
9285: PPUSH
9286: LD_INT 1
9288: PPUSH
9289: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9293: LD_INT 2
9295: PPUSH
9296: LD_VAR 0 3
9300: PPUSH
9301: LD_INT 1
9303: PPUSH
9304: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9308: LD_INT 4
9310: PPUSH
9311: LD_VAR 0 3
9315: PPUSH
9316: LD_INT 1
9318: PPUSH
9319: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9323: LD_INT 6
9325: PPUSH
9326: LD_VAR 0 3
9330: PPUSH
9331: LD_INT 1
9333: PPUSH
9334: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9338: LD_INT 29
9340: PPUSH
9341: LD_VAR 0 3
9345: PPUSH
9346: LD_INT 1
9348: PPUSH
9349: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9353: LD_INT 31
9355: PPUSH
9356: LD_VAR 0 3
9360: PPUSH
9361: LD_INT 1
9363: PPUSH
9364: CALL_OW 324
// end ; 3 :
9368: GO 12916
9370: LD_INT 3
9372: DOUBLE
9373: EQUAL
9374: IFTRUE 9378
9376: GO 9831
9378: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9379: LD_INT 35
9381: PPUSH
9382: LD_VAR 0 3
9386: PPUSH
9387: LD_INT 1
9389: PPUSH
9390: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9394: LD_INT 45
9396: PPUSH
9397: LD_VAR 0 3
9401: PPUSH
9402: LD_INT 1
9404: PPUSH
9405: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9409: LD_INT 46
9411: PPUSH
9412: LD_VAR 0 3
9416: PPUSH
9417: LD_INT 1
9419: PPUSH
9420: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9424: LD_INT 47
9426: PPUSH
9427: LD_VAR 0 3
9431: PPUSH
9432: LD_INT 1
9434: PPUSH
9435: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9439: LD_INT 1
9441: PPUSH
9442: LD_VAR 0 3
9446: PPUSH
9447: LD_INT 1
9449: PPUSH
9450: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9454: LD_INT 2
9456: PPUSH
9457: LD_VAR 0 3
9461: PPUSH
9462: LD_INT 1
9464: PPUSH
9465: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9469: LD_INT 11
9471: PPUSH
9472: LD_VAR 0 3
9476: PPUSH
9477: LD_INT 1
9479: PPUSH
9480: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9484: LD_INT 48
9486: PPUSH
9487: LD_VAR 0 3
9491: PPUSH
9492: LD_INT 1
9494: PPUSH
9495: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9499: LD_INT 69
9501: PPUSH
9502: LD_VAR 0 3
9506: PPUSH
9507: LD_INT 1
9509: PPUSH
9510: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9514: LD_INT 39
9516: PPUSH
9517: LD_VAR 0 3
9521: PPUSH
9522: LD_INT 1
9524: PPUSH
9525: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9529: LD_INT 43
9531: PPUSH
9532: LD_VAR 0 3
9536: PPUSH
9537: LD_INT 1
9539: PPUSH
9540: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9544: LD_INT 51
9546: PPUSH
9547: LD_VAR 0 3
9551: PPUSH
9552: LD_INT 1
9554: PPUSH
9555: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9559: LD_INT 6
9561: PPUSH
9562: LD_VAR 0 3
9566: PPUSH
9567: LD_INT 1
9569: PPUSH
9570: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9574: LD_INT 0
9576: PPUSH
9577: LD_VAR 0 3
9581: PPUSH
9582: LD_INT 1
9584: PPUSH
9585: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9589: LD_INT 2
9591: PPUSH
9592: LD_VAR 0 3
9596: PPUSH
9597: LD_INT 1
9599: PPUSH
9600: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9604: LD_INT 3
9606: PPUSH
9607: LD_VAR 0 3
9611: PPUSH
9612: LD_INT 1
9614: PPUSH
9615: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9619: LD_INT 4
9621: PPUSH
9622: LD_VAR 0 3
9626: PPUSH
9627: LD_INT 1
9629: PPUSH
9630: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9634: LD_INT 6
9636: PPUSH
9637: LD_VAR 0 3
9641: PPUSH
9642: LD_INT 1
9644: PPUSH
9645: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9649: LD_INT 7
9651: PPUSH
9652: LD_VAR 0 3
9656: PPUSH
9657: LD_INT 1
9659: PPUSH
9660: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9664: LD_INT 8
9666: PPUSH
9667: LD_VAR 0 3
9671: PPUSH
9672: LD_INT 1
9674: PPUSH
9675: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9679: LD_INT 10
9681: PPUSH
9682: LD_VAR 0 3
9686: PPUSH
9687: LD_INT 1
9689: PPUSH
9690: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9694: LD_INT 15
9696: PPUSH
9697: LD_VAR 0 3
9701: PPUSH
9702: LD_INT 1
9704: PPUSH
9705: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9709: LD_INT 16
9711: PPUSH
9712: LD_VAR 0 3
9716: PPUSH
9717: LD_INT 1
9719: PPUSH
9720: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9724: LD_INT 17
9726: PPUSH
9727: LD_VAR 0 3
9731: PPUSH
9732: LD_INT 1
9734: PPUSH
9735: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9739: LD_INT 20
9741: PPUSH
9742: LD_VAR 0 3
9746: PPUSH
9747: LD_INT 1
9749: PPUSH
9750: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9754: LD_INT 26
9756: PPUSH
9757: LD_VAR 0 3
9761: PPUSH
9762: LD_INT 1
9764: PPUSH
9765: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9769: LD_INT 27
9771: PPUSH
9772: LD_VAR 0 3
9776: PPUSH
9777: LD_INT 1
9779: PPUSH
9780: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9784: LD_INT 29
9786: PPUSH
9787: LD_VAR 0 3
9791: PPUSH
9792: LD_INT 1
9794: PPUSH
9795: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9799: LD_INT 31
9801: PPUSH
9802: LD_VAR 0 3
9806: PPUSH
9807: LD_INT 1
9809: PPUSH
9810: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9814: LD_INT 32
9816: PPUSH
9817: LD_VAR 0 3
9821: PPUSH
9822: LD_INT 1
9824: PPUSH
9825: CALL_OW 324
// end ; 4 :
9829: GO 12916
9831: LD_INT 4
9833: DOUBLE
9834: EQUAL
9835: IFTRUE 9839
9837: GO 10787
9839: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9840: LD_INT 35
9842: PPUSH
9843: LD_VAR 0 3
9847: PPUSH
9848: LD_INT 1
9850: PPUSH
9851: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9855: LD_INT 45
9857: PPUSH
9858: LD_VAR 0 3
9862: PPUSH
9863: LD_INT 1
9865: PPUSH
9866: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9870: LD_INT 46
9872: PPUSH
9873: LD_VAR 0 3
9877: PPUSH
9878: LD_INT 1
9880: PPUSH
9881: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9885: LD_INT 47
9887: PPUSH
9888: LD_VAR 0 3
9892: PPUSH
9893: LD_INT 1
9895: PPUSH
9896: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9900: LD_INT 1
9902: PPUSH
9903: LD_VAR 0 3
9907: PPUSH
9908: LD_INT 1
9910: PPUSH
9911: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9915: LD_INT 2
9917: PPUSH
9918: LD_VAR 0 3
9922: PPUSH
9923: LD_INT 1
9925: PPUSH
9926: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9930: LD_INT 11
9932: PPUSH
9933: LD_VAR 0 3
9937: PPUSH
9938: LD_INT 1
9940: PPUSH
9941: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9945: LD_INT 20
9947: PPUSH
9948: LD_VAR 0 3
9952: PPUSH
9953: LD_INT 1
9955: PPUSH
9956: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9960: LD_INT 48
9962: PPUSH
9963: LD_VAR 0 3
9967: PPUSH
9968: LD_INT 1
9970: PPUSH
9971: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9975: LD_INT 49
9977: PPUSH
9978: LD_VAR 0 3
9982: PPUSH
9983: LD_INT 1
9985: PPUSH
9986: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9990: LD_INT 69
9992: PPUSH
9993: LD_VAR 0 3
9997: PPUSH
9998: LD_INT 1
10000: PPUSH
10001: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10005: LD_INT 39
10007: PPUSH
10008: LD_VAR 0 3
10012: PPUSH
10013: LD_INT 1
10015: PPUSH
10016: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10020: LD_INT 34
10022: PPUSH
10023: LD_VAR 0 3
10027: PPUSH
10028: LD_INT 1
10030: PPUSH
10031: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10035: LD_INT 42
10037: PPUSH
10038: LD_VAR 0 3
10042: PPUSH
10043: LD_INT 1
10045: PPUSH
10046: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10050: LD_INT 44
10052: PPUSH
10053: LD_VAR 0 3
10057: PPUSH
10058: LD_INT 1
10060: PPUSH
10061: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10065: LD_INT 41
10067: PPUSH
10068: LD_VAR 0 3
10072: PPUSH
10073: LD_INT 1
10075: PPUSH
10076: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10080: LD_INT 43
10082: PPUSH
10083: LD_VAR 0 3
10087: PPUSH
10088: LD_INT 1
10090: PPUSH
10091: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10095: LD_INT 70
10097: PPUSH
10098: LD_VAR 0 3
10102: PPUSH
10103: LD_INT 1
10105: PPUSH
10106: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10110: LD_INT 51
10112: PPUSH
10113: LD_VAR 0 3
10117: PPUSH
10118: LD_INT 1
10120: PPUSH
10121: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10125: LD_INT 52
10127: PPUSH
10128: LD_VAR 0 3
10132: PPUSH
10133: LD_INT 1
10135: PPUSH
10136: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10140: LD_INT 6
10142: PPUSH
10143: LD_VAR 0 3
10147: PPUSH
10148: LD_INT 1
10150: PPUSH
10151: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10155: LD_INT 15
10157: PPUSH
10158: LD_VAR 0 3
10162: PPUSH
10163: LD_INT 1
10165: PPUSH
10166: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10170: LD_INT 7
10172: PPUSH
10173: LD_VAR 0 3
10177: PPUSH
10178: LD_INT 1
10180: PPUSH
10181: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10185: LD_INT 12
10187: PPUSH
10188: LD_VAR 0 3
10192: PPUSH
10193: LD_INT 1
10195: PPUSH
10196: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10200: LD_INT 18
10202: PPUSH
10203: LD_VAR 0 3
10207: PPUSH
10208: LD_INT 1
10210: PPUSH
10211: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10215: LD_INT 60
10217: PPUSH
10218: LD_VAR 0 3
10222: PPUSH
10223: LD_INT 1
10225: PPUSH
10226: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10230: LD_INT 9
10232: PPUSH
10233: LD_VAR 0 3
10237: PPUSH
10238: LD_INT 1
10240: PPUSH
10241: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10245: LD_INT 30
10247: PPUSH
10248: LD_VAR 0 3
10252: PPUSH
10253: LD_INT 1
10255: PPUSH
10256: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10260: LD_INT 37
10262: PPUSH
10263: LD_VAR 0 3
10267: PPUSH
10268: LD_INT 1
10270: PPUSH
10271: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10275: LD_INT 5
10277: PPUSH
10278: LD_VAR 0 3
10282: PPUSH
10283: LD_INT 1
10285: PPUSH
10286: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10290: LD_INT 66
10292: PPUSH
10293: LD_VAR 0 3
10297: PPUSH
10298: LD_INT 1
10300: PPUSH
10301: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10305: LD_INT 21
10307: PPUSH
10308: LD_VAR 0 3
10312: PPUSH
10313: LD_INT 1
10315: PPUSH
10316: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10320: LD_INT 22
10322: PPUSH
10323: LD_VAR 0 3
10327: PPUSH
10328: LD_INT 1
10330: PPUSH
10331: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10335: LD_INT 54
10337: PPUSH
10338: LD_VAR 0 3
10342: PPUSH
10343: LD_INT 1
10345: PPUSH
10346: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10350: LD_INT 0
10352: PPUSH
10353: LD_VAR 0 3
10357: PPUSH
10358: LD_INT 1
10360: PPUSH
10361: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10365: LD_INT 1
10367: PPUSH
10368: LD_VAR 0 3
10372: PPUSH
10373: LD_INT 1
10375: PPUSH
10376: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10380: LD_INT 2
10382: PPUSH
10383: LD_VAR 0 3
10387: PPUSH
10388: LD_INT 1
10390: PPUSH
10391: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10395: LD_INT 3
10397: PPUSH
10398: LD_VAR 0 3
10402: PPUSH
10403: LD_INT 1
10405: PPUSH
10406: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10410: LD_INT 4
10412: PPUSH
10413: LD_VAR 0 3
10417: PPUSH
10418: LD_INT 1
10420: PPUSH
10421: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10425: LD_INT 5
10427: PPUSH
10428: LD_VAR 0 3
10432: PPUSH
10433: LD_INT 1
10435: PPUSH
10436: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10440: LD_INT 6
10442: PPUSH
10443: LD_VAR 0 3
10447: PPUSH
10448: LD_INT 1
10450: PPUSH
10451: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10455: LD_INT 7
10457: PPUSH
10458: LD_VAR 0 3
10462: PPUSH
10463: LD_INT 1
10465: PPUSH
10466: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10470: LD_INT 8
10472: PPUSH
10473: LD_VAR 0 3
10477: PPUSH
10478: LD_INT 1
10480: PPUSH
10481: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10485: LD_INT 10
10487: PPUSH
10488: LD_VAR 0 3
10492: PPUSH
10493: LD_INT 1
10495: PPUSH
10496: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10500: LD_INT 11
10502: PPUSH
10503: LD_VAR 0 3
10507: PPUSH
10508: LD_INT 1
10510: PPUSH
10511: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10515: LD_INT 12
10517: PPUSH
10518: LD_VAR 0 3
10522: PPUSH
10523: LD_INT 1
10525: PPUSH
10526: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10530: LD_INT 13
10532: PPUSH
10533: LD_VAR 0 3
10537: PPUSH
10538: LD_INT 1
10540: PPUSH
10541: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10545: LD_INT 14
10547: PPUSH
10548: LD_VAR 0 3
10552: PPUSH
10553: LD_INT 1
10555: PPUSH
10556: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10560: LD_INT 15
10562: PPUSH
10563: LD_VAR 0 3
10567: PPUSH
10568: LD_INT 1
10570: PPUSH
10571: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10575: LD_INT 16
10577: PPUSH
10578: LD_VAR 0 3
10582: PPUSH
10583: LD_INT 1
10585: PPUSH
10586: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10590: LD_INT 17
10592: PPUSH
10593: LD_VAR 0 3
10597: PPUSH
10598: LD_INT 1
10600: PPUSH
10601: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10605: LD_INT 19
10607: PPUSH
10608: LD_VAR 0 3
10612: PPUSH
10613: LD_INT 1
10615: PPUSH
10616: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10620: LD_INT 20
10622: PPUSH
10623: LD_VAR 0 3
10627: PPUSH
10628: LD_INT 1
10630: PPUSH
10631: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10635: LD_INT 21
10637: PPUSH
10638: LD_VAR 0 3
10642: PPUSH
10643: LD_INT 1
10645: PPUSH
10646: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10650: LD_INT 23
10652: PPUSH
10653: LD_VAR 0 3
10657: PPUSH
10658: LD_INT 1
10660: PPUSH
10661: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10665: LD_INT 26
10667: PPUSH
10668: LD_VAR 0 3
10672: PPUSH
10673: LD_INT 1
10675: PPUSH
10676: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10680: LD_INT 27
10682: PPUSH
10683: LD_VAR 0 3
10687: PPUSH
10688: LD_INT 1
10690: PPUSH
10691: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10695: LD_INT 28
10697: PPUSH
10698: LD_VAR 0 3
10702: PPUSH
10703: LD_INT 1
10705: PPUSH
10706: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10710: LD_INT 29
10712: PPUSH
10713: LD_VAR 0 3
10717: PPUSH
10718: LD_INT 1
10720: PPUSH
10721: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10725: LD_INT 30
10727: PPUSH
10728: LD_VAR 0 3
10732: PPUSH
10733: LD_INT 1
10735: PPUSH
10736: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10740: LD_INT 31
10742: PPUSH
10743: LD_VAR 0 3
10747: PPUSH
10748: LD_INT 1
10750: PPUSH
10751: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10755: LD_INT 32
10757: PPUSH
10758: LD_VAR 0 3
10762: PPUSH
10763: LD_INT 1
10765: PPUSH
10766: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10770: LD_INT 36
10772: PPUSH
10773: LD_VAR 0 3
10777: PPUSH
10778: LD_INT 1
10780: PPUSH
10781: CALL_OW 324
// end ; 5 :
10785: GO 12916
10787: LD_INT 5
10789: DOUBLE
10790: EQUAL
10791: IFTRUE 10795
10793: GO 11908
10795: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10796: LD_INT 35
10798: PPUSH
10799: LD_VAR 0 3
10803: PPUSH
10804: LD_INT 1
10806: PPUSH
10807: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10811: LD_INT 45
10813: PPUSH
10814: LD_VAR 0 3
10818: PPUSH
10819: LD_INT 1
10821: PPUSH
10822: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10826: LD_INT 46
10828: PPUSH
10829: LD_VAR 0 3
10833: PPUSH
10834: LD_INT 1
10836: PPUSH
10837: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10841: LD_INT 47
10843: PPUSH
10844: LD_VAR 0 3
10848: PPUSH
10849: LD_INT 1
10851: PPUSH
10852: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10856: LD_INT 1
10858: PPUSH
10859: LD_VAR 0 3
10863: PPUSH
10864: LD_INT 1
10866: PPUSH
10867: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10871: LD_INT 2
10873: PPUSH
10874: LD_VAR 0 3
10878: PPUSH
10879: LD_INT 1
10881: PPUSH
10882: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10886: LD_INT 11
10888: PPUSH
10889: LD_VAR 0 3
10893: PPUSH
10894: LD_INT 1
10896: PPUSH
10897: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10901: LD_INT 20
10903: PPUSH
10904: LD_VAR 0 3
10908: PPUSH
10909: LD_INT 1
10911: PPUSH
10912: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10916: LD_INT 48
10918: PPUSH
10919: LD_VAR 0 3
10923: PPUSH
10924: LD_INT 1
10926: PPUSH
10927: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10931: LD_INT 49
10933: PPUSH
10934: LD_VAR 0 3
10938: PPUSH
10939: LD_INT 1
10941: PPUSH
10942: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10946: LD_INT 69
10948: PPUSH
10949: LD_VAR 0 3
10953: PPUSH
10954: LD_INT 1
10956: PPUSH
10957: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10961: LD_INT 39
10963: PPUSH
10964: LD_VAR 0 3
10968: PPUSH
10969: LD_INT 1
10971: PPUSH
10972: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10976: LD_INT 34
10978: PPUSH
10979: LD_VAR 0 3
10983: PPUSH
10984: LD_INT 1
10986: PPUSH
10987: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10991: LD_INT 42
10993: PPUSH
10994: LD_VAR 0 3
10998: PPUSH
10999: LD_INT 1
11001: PPUSH
11002: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11006: LD_INT 44
11008: PPUSH
11009: LD_VAR 0 3
11013: PPUSH
11014: LD_INT 1
11016: PPUSH
11017: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11021: LD_INT 41
11023: PPUSH
11024: LD_VAR 0 3
11028: PPUSH
11029: LD_INT 1
11031: PPUSH
11032: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11036: LD_INT 40
11038: PPUSH
11039: LD_VAR 0 3
11043: PPUSH
11044: LD_INT 1
11046: PPUSH
11047: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11051: LD_INT 43
11053: PPUSH
11054: LD_VAR 0 3
11058: PPUSH
11059: LD_INT 1
11061: PPUSH
11062: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11066: LD_INT 70
11068: PPUSH
11069: LD_VAR 0 3
11073: PPUSH
11074: LD_INT 1
11076: PPUSH
11077: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11081: LD_INT 51
11083: PPUSH
11084: LD_VAR 0 3
11088: PPUSH
11089: LD_INT 1
11091: PPUSH
11092: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11096: LD_INT 52
11098: PPUSH
11099: LD_VAR 0 3
11103: PPUSH
11104: LD_INT 1
11106: PPUSH
11107: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11111: LD_INT 6
11113: PPUSH
11114: LD_VAR 0 3
11118: PPUSH
11119: LD_INT 1
11121: PPUSH
11122: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11126: LD_INT 15
11128: PPUSH
11129: LD_VAR 0 3
11133: PPUSH
11134: LD_INT 1
11136: PPUSH
11137: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11141: LD_INT 7
11143: PPUSH
11144: LD_VAR 0 3
11148: PPUSH
11149: LD_INT 1
11151: PPUSH
11152: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11156: LD_INT 12
11158: PPUSH
11159: LD_VAR 0 3
11163: PPUSH
11164: LD_INT 1
11166: PPUSH
11167: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11171: LD_INT 17
11173: PPUSH
11174: LD_VAR 0 3
11178: PPUSH
11179: LD_INT 1
11181: PPUSH
11182: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11186: LD_INT 18
11188: PPUSH
11189: LD_VAR 0 3
11193: PPUSH
11194: LD_INT 1
11196: PPUSH
11197: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11201: LD_INT 60
11203: PPUSH
11204: LD_VAR 0 3
11208: PPUSH
11209: LD_INT 1
11211: PPUSH
11212: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11216: LD_INT 32
11218: PPUSH
11219: LD_VAR 0 3
11223: PPUSH
11224: LD_INT 1
11226: PPUSH
11227: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11231: LD_INT 9
11233: PPUSH
11234: LD_VAR 0 3
11238: PPUSH
11239: LD_INT 1
11241: PPUSH
11242: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11246: LD_INT 57
11248: PPUSH
11249: LD_VAR 0 3
11253: PPUSH
11254: LD_INT 1
11256: PPUSH
11257: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11261: LD_INT 30
11263: PPUSH
11264: LD_VAR 0 3
11268: PPUSH
11269: LD_INT 1
11271: PPUSH
11272: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11276: LD_INT 37
11278: PPUSH
11279: LD_VAR 0 3
11283: PPUSH
11284: LD_INT 1
11286: PPUSH
11287: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11291: LD_INT 63
11293: PPUSH
11294: LD_VAR 0 3
11298: PPUSH
11299: LD_INT 1
11301: PPUSH
11302: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11306: LD_INT 3
11308: PPUSH
11309: LD_VAR 0 3
11313: PPUSH
11314: LD_INT 1
11316: PPUSH
11317: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11321: LD_INT 4
11323: PPUSH
11324: LD_VAR 0 3
11328: PPUSH
11329: LD_INT 1
11331: PPUSH
11332: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11336: LD_INT 5
11338: PPUSH
11339: LD_VAR 0 3
11343: PPUSH
11344: LD_INT 1
11346: PPUSH
11347: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11351: LD_INT 66
11353: PPUSH
11354: LD_VAR 0 3
11358: PPUSH
11359: LD_INT 1
11361: PPUSH
11362: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11366: LD_INT 21
11368: PPUSH
11369: LD_VAR 0 3
11373: PPUSH
11374: LD_INT 1
11376: PPUSH
11377: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11381: LD_INT 22
11383: PPUSH
11384: LD_VAR 0 3
11388: PPUSH
11389: LD_INT 1
11391: PPUSH
11392: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11396: LD_INT 19
11398: PPUSH
11399: LD_VAR 0 3
11403: PPUSH
11404: LD_INT 1
11406: PPUSH
11407: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11411: LD_INT 54
11413: PPUSH
11414: LD_VAR 0 3
11418: PPUSH
11419: LD_INT 1
11421: PPUSH
11422: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11426: LD_INT 55
11428: PPUSH
11429: LD_VAR 0 3
11433: PPUSH
11434: LD_INT 1
11436: PPUSH
11437: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11441: LD_INT 0
11443: PPUSH
11444: LD_VAR 0 3
11448: PPUSH
11449: LD_INT 1
11451: PPUSH
11452: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11456: LD_INT 1
11458: PPUSH
11459: LD_VAR 0 3
11463: PPUSH
11464: LD_INT 1
11466: PPUSH
11467: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11471: LD_INT 2
11473: PPUSH
11474: LD_VAR 0 3
11478: PPUSH
11479: LD_INT 1
11481: PPUSH
11482: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11486: LD_INT 3
11488: PPUSH
11489: LD_VAR 0 3
11493: PPUSH
11494: LD_INT 1
11496: PPUSH
11497: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11501: LD_INT 4
11503: PPUSH
11504: LD_VAR 0 3
11508: PPUSH
11509: LD_INT 1
11511: PPUSH
11512: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11516: LD_INT 5
11518: PPUSH
11519: LD_VAR 0 3
11523: PPUSH
11524: LD_INT 1
11526: PPUSH
11527: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11531: LD_INT 6
11533: PPUSH
11534: LD_VAR 0 3
11538: PPUSH
11539: LD_INT 1
11541: PPUSH
11542: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11546: LD_INT 7
11548: PPUSH
11549: LD_VAR 0 3
11553: PPUSH
11554: LD_INT 1
11556: PPUSH
11557: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11561: LD_INT 8
11563: PPUSH
11564: LD_VAR 0 3
11568: PPUSH
11569: LD_INT 1
11571: PPUSH
11572: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11576: LD_INT 10
11578: PPUSH
11579: LD_VAR 0 3
11583: PPUSH
11584: LD_INT 1
11586: PPUSH
11587: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11591: LD_INT 11
11593: PPUSH
11594: LD_VAR 0 3
11598: PPUSH
11599: LD_INT 1
11601: PPUSH
11602: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11606: LD_INT 12
11608: PPUSH
11609: LD_VAR 0 3
11613: PPUSH
11614: LD_INT 1
11616: PPUSH
11617: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11621: LD_INT 13
11623: PPUSH
11624: LD_VAR 0 3
11628: PPUSH
11629: LD_INT 1
11631: PPUSH
11632: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11636: LD_INT 14
11638: PPUSH
11639: LD_VAR 0 3
11643: PPUSH
11644: LD_INT 1
11646: PPUSH
11647: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11651: LD_INT 15
11653: PPUSH
11654: LD_VAR 0 3
11658: PPUSH
11659: LD_INT 1
11661: PPUSH
11662: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11666: LD_INT 16
11668: PPUSH
11669: LD_VAR 0 3
11673: PPUSH
11674: LD_INT 1
11676: PPUSH
11677: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11681: LD_INT 17
11683: PPUSH
11684: LD_VAR 0 3
11688: PPUSH
11689: LD_INT 1
11691: PPUSH
11692: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11696: LD_INT 18
11698: PPUSH
11699: LD_VAR 0 3
11703: PPUSH
11704: LD_INT 1
11706: PPUSH
11707: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11711: LD_INT 19
11713: PPUSH
11714: LD_VAR 0 3
11718: PPUSH
11719: LD_INT 1
11721: PPUSH
11722: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11726: LD_INT 20
11728: PPUSH
11729: LD_VAR 0 3
11733: PPUSH
11734: LD_INT 1
11736: PPUSH
11737: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11741: LD_INT 21
11743: PPUSH
11744: LD_VAR 0 3
11748: PPUSH
11749: LD_INT 1
11751: PPUSH
11752: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11756: LD_INT 23
11758: PPUSH
11759: LD_VAR 0 3
11763: PPUSH
11764: LD_INT 1
11766: PPUSH
11767: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11771: LD_INT 26
11773: PPUSH
11774: LD_VAR 0 3
11778: PPUSH
11779: LD_INT 1
11781: PPUSH
11782: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11786: LD_INT 27
11788: PPUSH
11789: LD_VAR 0 3
11793: PPUSH
11794: LD_INT 1
11796: PPUSH
11797: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11801: LD_INT 28
11803: PPUSH
11804: LD_VAR 0 3
11808: PPUSH
11809: LD_INT 1
11811: PPUSH
11812: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11816: LD_INT 29
11818: PPUSH
11819: LD_VAR 0 3
11823: PPUSH
11824: LD_INT 1
11826: PPUSH
11827: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11831: LD_INT 30
11833: PPUSH
11834: LD_VAR 0 3
11838: PPUSH
11839: LD_INT 1
11841: PPUSH
11842: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11846: LD_INT 31
11848: PPUSH
11849: LD_VAR 0 3
11853: PPUSH
11854: LD_INT 1
11856: PPUSH
11857: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11861: LD_INT 32
11863: PPUSH
11864: LD_VAR 0 3
11868: PPUSH
11869: LD_INT 1
11871: PPUSH
11872: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
11876: LD_INT 33
11878: PPUSH
11879: LD_VAR 0 3
11883: PPUSH
11884: LD_INT 1
11886: PPUSH
11887: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11891: LD_INT 36
11893: PPUSH
11894: LD_VAR 0 3
11898: PPUSH
11899: LD_INT 1
11901: PPUSH
11902: CALL_OW 324
// end ; 6 :
11906: GO 12916
11908: LD_INT 6
11910: DOUBLE
11911: EQUAL
11912: IFTRUE 11916
11914: GO 12841
11916: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11917: LD_INT 35
11919: PPUSH
11920: LD_VAR 0 3
11924: PPUSH
11925: LD_INT 1
11927: PPUSH
11928: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11932: LD_INT 45
11934: PPUSH
11935: LD_VAR 0 3
11939: PPUSH
11940: LD_INT 1
11942: PPUSH
11943: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11947: LD_INT 46
11949: PPUSH
11950: LD_VAR 0 3
11954: PPUSH
11955: LD_INT 1
11957: PPUSH
11958: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11962: LD_INT 47
11964: PPUSH
11965: LD_VAR 0 3
11969: PPUSH
11970: LD_INT 1
11972: PPUSH
11973: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11977: LD_INT 1
11979: PPUSH
11980: LD_VAR 0 3
11984: PPUSH
11985: LD_INT 1
11987: PPUSH
11988: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11992: LD_INT 2
11994: PPUSH
11995: LD_VAR 0 3
11999: PPUSH
12000: LD_INT 1
12002: PPUSH
12003: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12007: LD_INT 11
12009: PPUSH
12010: LD_VAR 0 3
12014: PPUSH
12015: LD_INT 1
12017: PPUSH
12018: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12022: LD_INT 20
12024: PPUSH
12025: LD_VAR 0 3
12029: PPUSH
12030: LD_INT 1
12032: PPUSH
12033: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12037: LD_INT 48
12039: PPUSH
12040: LD_VAR 0 3
12044: PPUSH
12045: LD_INT 1
12047: PPUSH
12048: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12052: LD_INT 49
12054: PPUSH
12055: LD_VAR 0 3
12059: PPUSH
12060: LD_INT 1
12062: PPUSH
12063: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12067: LD_INT 50
12069: PPUSH
12070: LD_VAR 0 3
12074: PPUSH
12075: LD_INT 1
12077: PPUSH
12078: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12082: LD_INT 69
12084: PPUSH
12085: LD_VAR 0 3
12089: PPUSH
12090: LD_INT 1
12092: PPUSH
12093: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12097: LD_INT 39
12099: PPUSH
12100: LD_VAR 0 3
12104: PPUSH
12105: LD_INT 1
12107: PPUSH
12108: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12112: LD_INT 34
12114: PPUSH
12115: LD_VAR 0 3
12119: PPUSH
12120: LD_INT 1
12122: PPUSH
12123: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12127: LD_INT 42
12129: PPUSH
12130: LD_VAR 0 3
12134: PPUSH
12135: LD_INT 1
12137: PPUSH
12138: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12142: LD_INT 44
12144: PPUSH
12145: LD_VAR 0 3
12149: PPUSH
12150: LD_INT 1
12152: PPUSH
12153: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12157: LD_INT 41
12159: PPUSH
12160: LD_VAR 0 3
12164: PPUSH
12165: LD_INT 1
12167: PPUSH
12168: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12172: LD_INT 13
12174: PPUSH
12175: LD_VAR 0 3
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12187: LD_INT 40
12189: PPUSH
12190: LD_VAR 0 3
12194: PPUSH
12195: LD_INT 1
12197: PPUSH
12198: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12202: LD_INT 43
12204: PPUSH
12205: LD_VAR 0 3
12209: PPUSH
12210: LD_INT 1
12212: PPUSH
12213: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12217: LD_INT 70
12219: PPUSH
12220: LD_VAR 0 3
12224: PPUSH
12225: LD_INT 1
12227: PPUSH
12228: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12232: LD_INT 23
12234: PPUSH
12235: LD_VAR 0 3
12239: PPUSH
12240: LD_INT 1
12242: PPUSH
12243: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12247: LD_INT 51
12249: PPUSH
12250: LD_VAR 0 3
12254: PPUSH
12255: LD_INT 1
12257: PPUSH
12258: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12262: LD_INT 52
12264: PPUSH
12265: LD_VAR 0 3
12269: PPUSH
12270: LD_INT 1
12272: PPUSH
12273: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12277: LD_INT 6
12279: PPUSH
12280: LD_VAR 0 3
12284: PPUSH
12285: LD_INT 1
12287: PPUSH
12288: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12292: LD_INT 15
12294: PPUSH
12295: LD_VAR 0 3
12299: PPUSH
12300: LD_INT 1
12302: PPUSH
12303: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12307: LD_INT 7
12309: PPUSH
12310: LD_VAR 0 3
12314: PPUSH
12315: LD_INT 1
12317: PPUSH
12318: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12322: LD_INT 12
12324: PPUSH
12325: LD_VAR 0 3
12329: PPUSH
12330: LD_INT 1
12332: PPUSH
12333: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12337: LD_INT 10
12339: PPUSH
12340: LD_VAR 0 3
12344: PPUSH
12345: LD_INT 1
12347: PPUSH
12348: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12352: LD_INT 17
12354: PPUSH
12355: LD_VAR 0 3
12359: PPUSH
12360: LD_INT 1
12362: PPUSH
12363: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12367: LD_INT 18
12369: PPUSH
12370: LD_VAR 0 3
12374: PPUSH
12375: LD_INT 1
12377: PPUSH
12378: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12382: LD_INT 60
12384: PPUSH
12385: LD_VAR 0 3
12389: PPUSH
12390: LD_INT 1
12392: PPUSH
12393: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12397: LD_INT 61
12399: PPUSH
12400: LD_VAR 0 3
12404: PPUSH
12405: LD_INT 1
12407: PPUSH
12408: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12412: LD_INT 32
12414: PPUSH
12415: LD_VAR 0 3
12419: PPUSH
12420: LD_INT 1
12422: PPUSH
12423: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12427: LD_INT 27
12429: PPUSH
12430: LD_VAR 0 3
12434: PPUSH
12435: LD_INT 1
12437: PPUSH
12438: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12442: LD_INT 36
12444: PPUSH
12445: LD_VAR 0 3
12449: PPUSH
12450: LD_INT 1
12452: PPUSH
12453: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12457: LD_INT 33
12459: PPUSH
12460: LD_VAR 0 3
12464: PPUSH
12465: LD_INT 1
12467: PPUSH
12468: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12472: LD_INT 9
12474: PPUSH
12475: LD_VAR 0 3
12479: PPUSH
12480: LD_INT 1
12482: PPUSH
12483: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12487: LD_INT 38
12489: PPUSH
12490: LD_VAR 0 3
12494: PPUSH
12495: LD_INT 1
12497: PPUSH
12498: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12502: LD_INT 57
12504: PPUSH
12505: LD_VAR 0 3
12509: PPUSH
12510: LD_INT 1
12512: PPUSH
12513: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12517: LD_INT 58
12519: PPUSH
12520: LD_VAR 0 3
12524: PPUSH
12525: LD_INT 1
12527: PPUSH
12528: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12532: LD_INT 28
12534: PPUSH
12535: LD_VAR 0 3
12539: PPUSH
12540: LD_INT 1
12542: PPUSH
12543: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12547: LD_INT 29
12549: PPUSH
12550: LD_VAR 0 3
12554: PPUSH
12555: LD_INT 1
12557: PPUSH
12558: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12562: LD_INT 30
12564: PPUSH
12565: LD_VAR 0 3
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12577: LD_INT 37
12579: PPUSH
12580: LD_VAR 0 3
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12592: LD_INT 63
12594: PPUSH
12595: LD_VAR 0 3
12599: PPUSH
12600: LD_INT 1
12602: PPUSH
12603: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12607: LD_INT 64
12609: PPUSH
12610: LD_VAR 0 3
12614: PPUSH
12615: LD_INT 1
12617: PPUSH
12618: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12622: LD_INT 3
12624: PPUSH
12625: LD_VAR 0 3
12629: PPUSH
12630: LD_INT 1
12632: PPUSH
12633: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12637: LD_INT 4
12639: PPUSH
12640: LD_VAR 0 3
12644: PPUSH
12645: LD_INT 1
12647: PPUSH
12648: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12652: LD_INT 5
12654: PPUSH
12655: LD_VAR 0 3
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12667: LD_INT 8
12669: PPUSH
12670: LD_VAR 0 3
12674: PPUSH
12675: LD_INT 1
12677: PPUSH
12678: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12682: LD_INT 66
12684: PPUSH
12685: LD_VAR 0 3
12689: PPUSH
12690: LD_INT 1
12692: PPUSH
12693: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12697: LD_INT 67
12699: PPUSH
12700: LD_VAR 0 3
12704: PPUSH
12705: LD_INT 1
12707: PPUSH
12708: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12712: LD_INT 21
12714: PPUSH
12715: LD_VAR 0 3
12719: PPUSH
12720: LD_INT 1
12722: PPUSH
12723: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12727: LD_INT 22
12729: PPUSH
12730: LD_VAR 0 3
12734: PPUSH
12735: LD_INT 1
12737: PPUSH
12738: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12742: LD_INT 19
12744: PPUSH
12745: LD_VAR 0 3
12749: PPUSH
12750: LD_INT 1
12752: PPUSH
12753: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12757: LD_INT 26
12759: PPUSH
12760: LD_VAR 0 3
12764: PPUSH
12765: LD_INT 1
12767: PPUSH
12768: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12772: LD_INT 54
12774: PPUSH
12775: LD_VAR 0 3
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12787: LD_INT 55
12789: PPUSH
12790: LD_VAR 0 3
12794: PPUSH
12795: LD_INT 1
12797: PPUSH
12798: CALL_OW 322
// for i = 0 to 39 do
12802: LD_ADDR_VAR 0 4
12806: PUSH
12807: DOUBLE
12808: LD_INT 0
12810: DEC
12811: ST_TO_ADDR
12812: LD_INT 39
12814: PUSH
12815: FOR_TO
12816: IFFALSE 12837
// SetRestrict ( i , side , true ) ;
12818: LD_VAR 0 4
12822: PPUSH
12823: LD_VAR 0 3
12827: PPUSH
12828: LD_INT 1
12830: PPUSH
12831: CALL_OW 324
12835: GO 12815
12837: POP
12838: POP
// end ; else
12839: GO 12916
12841: POP
// begin for i = 1 to 73 do
12842: LD_ADDR_VAR 0 4
12846: PUSH
12847: DOUBLE
12848: LD_INT 1
12850: DEC
12851: ST_TO_ADDR
12852: LD_INT 73
12854: PUSH
12855: FOR_TO
12856: IFFALSE 12877
// SetTech ( i , side , state_enabled ) ;
12858: LD_VAR 0 4
12862: PPUSH
12863: LD_VAR 0 3
12867: PPUSH
12868: LD_INT 1
12870: PPUSH
12871: CALL_OW 322
12875: GO 12855
12877: POP
12878: POP
// for i = 0 to 39 do
12879: LD_ADDR_VAR 0 4
12883: PUSH
12884: DOUBLE
12885: LD_INT 0
12887: DEC
12888: ST_TO_ADDR
12889: LD_INT 39
12891: PUSH
12892: FOR_TO
12893: IFFALSE 12914
// SetRestrict ( i , side , true ) ;
12895: LD_VAR 0 4
12899: PPUSH
12900: LD_VAR 0 3
12904: PPUSH
12905: LD_INT 1
12907: PPUSH
12908: CALL_OW 324
12912: GO 12892
12914: POP
12915: POP
// end ; end ; end ;
12916: GO 8921
12918: POP
12919: POP
// end ; end_of_file
12920: LD_VAR 0 2
12924: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
12925: LD_INT 0
12927: PPUSH
12928: PPUSH
12929: PPUSH
12930: PPUSH
12931: PPUSH
12932: PPUSH
12933: PPUSH
12934: PPUSH
12935: PPUSH
// for i := 1 to 8 do
12936: LD_ADDR_VAR 0 2
12940: PUSH
12941: DOUBLE
12942: LD_INT 1
12944: DEC
12945: ST_TO_ADDR
12946: LD_INT 8
12948: PUSH
12949: FOR_TO
12950: IFFALSE 13334
// begin if Side_Positions [ i ] then
12952: LD_EXP 32
12956: PUSH
12957: LD_VAR 0 2
12961: ARRAY
12962: IFFALSE 13332
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
12964: LD_ADDR_VAR 0 7
12968: PUSH
12969: LD_INT 22
12971: PUSH
12972: LD_VAR 0 2
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: PUSH
12981: LD_INT 21
12983: PUSH
12984: LD_INT 1
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PPUSH
12995: CALL_OW 69
12999: PUSH
13000: LD_INT 0
13002: PLUS
13003: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13004: LD_ADDR_VAR 0 9
13008: PUSH
13009: LD_INT 22
13011: PUSH
13012: LD_VAR 0 2
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: PUSH
13021: LD_INT 2
13023: PUSH
13024: LD_INT 30
13026: PUSH
13027: LD_INT 0
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 30
13036: PUSH
13037: LD_INT 1
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: LIST
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PPUSH
13053: CALL_OW 69
13057: ST_TO_ADDR
// crates := 0 ;
13058: LD_ADDR_VAR 0 4
13062: PUSH
13063: LD_INT 0
13065: ST_TO_ADDR
// oil := 0 ;
13066: LD_ADDR_VAR 0 5
13070: PUSH
13071: LD_INT 0
13073: ST_TO_ADDR
// sib := 0 ;
13074: LD_ADDR_VAR 0 6
13078: PUSH
13079: LD_INT 0
13081: ST_TO_ADDR
// if bases then
13082: LD_VAR 0 9
13086: IFFALSE 13192
// begin for j in bases do
13088: LD_ADDR_VAR 0 3
13092: PUSH
13093: LD_VAR 0 9
13097: PUSH
13098: FOR_IN
13099: IFFALSE 13190
// begin base := GetBase ( j ) ;
13101: LD_ADDR_VAR 0 8
13105: PUSH
13106: LD_VAR 0 3
13110: PPUSH
13111: CALL_OW 274
13115: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13116: LD_ADDR_VAR 0 4
13120: PUSH
13121: LD_VAR 0 4
13125: PUSH
13126: LD_VAR 0 8
13130: PPUSH
13131: LD_INT 1
13133: PPUSH
13134: CALL_OW 275
13138: PLUS
13139: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13140: LD_ADDR_VAR 0 5
13144: PUSH
13145: LD_VAR 0 5
13149: PUSH
13150: LD_VAR 0 8
13154: PPUSH
13155: LD_INT 2
13157: PPUSH
13158: CALL_OW 275
13162: PLUS
13163: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13164: LD_ADDR_VAR 0 6
13168: PUSH
13169: LD_VAR 0 6
13173: PUSH
13174: LD_VAR 0 8
13178: PPUSH
13179: LD_INT 3
13181: PPUSH
13182: CALL_OW 275
13186: PLUS
13187: ST_TO_ADDR
// end ;
13188: GO 13098
13190: POP
13191: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13192: LD_STRING setSpecText(
13194: PUSH
13195: LD_VAR 0 2
13199: STR
13200: PUSH
13201: LD_STRING ,
13203: STR
13204: PUSH
13205: LD_INT 2
13207: STR
13208: PUSH
13209: LD_STRING ,
13211: STR
13212: PUSH
13213: LD_VAR 0 4
13217: STR
13218: PUSH
13219: LD_STRING )
13221: STR
13222: PPUSH
13223: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13227: LD_STRING setSpecText(
13229: PUSH
13230: LD_VAR 0 2
13234: STR
13235: PUSH
13236: LD_STRING ,
13238: STR
13239: PUSH
13240: LD_INT 3
13242: STR
13243: PUSH
13244: LD_STRING ,
13246: STR
13247: PUSH
13248: LD_VAR 0 5
13252: STR
13253: PUSH
13254: LD_STRING )
13256: STR
13257: PPUSH
13258: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13262: LD_STRING setSpecText(
13264: PUSH
13265: LD_VAR 0 2
13269: STR
13270: PUSH
13271: LD_STRING ,
13273: STR
13274: PUSH
13275: LD_INT 4
13277: STR
13278: PUSH
13279: LD_STRING ,
13281: STR
13282: PUSH
13283: LD_VAR 0 6
13287: STR
13288: PUSH
13289: LD_STRING )
13291: STR
13292: PPUSH
13293: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13297: LD_STRING setSpecText(
13299: PUSH
13300: LD_VAR 0 2
13304: STR
13305: PUSH
13306: LD_STRING ,
13308: STR
13309: PUSH
13310: LD_INT 5
13312: STR
13313: PUSH
13314: LD_STRING ,
13316: STR
13317: PUSH
13318: LD_VAR 0 7
13322: STR
13323: PUSH
13324: LD_STRING )
13326: STR
13327: PPUSH
13328: CALL_OW 559
// end ; end ;
13332: GO 12949
13334: POP
13335: POP
// end ;
13336: LD_VAR 0 1
13340: RET
// every 0 0$1 do
13341: GO 13343
13343: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13344: LD_STRING setSpecLogoNumber(
13346: PUSH
13347: LD_INT 2
13349: STR
13350: PUSH
13351: LD_STRING ,
13353: STR
13354: PUSH
13355: LD_INT 1
13357: STR
13358: PUSH
13359: LD_STRING )
13361: STR
13362: PPUSH
13363: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13367: LD_STRING setSpecLogoNumber(
13369: PUSH
13370: LD_INT 3
13372: STR
13373: PUSH
13374: LD_STRING ,
13376: STR
13377: PUSH
13378: LD_INT 2
13380: STR
13381: PUSH
13382: LD_STRING )
13384: STR
13385: PPUSH
13386: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13390: LD_STRING setSpecLogoNumber(
13392: PUSH
13393: LD_INT 4
13395: STR
13396: PUSH
13397: LD_STRING ,
13399: STR
13400: PUSH
13401: LD_INT 3
13403: STR
13404: PUSH
13405: LD_STRING )
13407: STR
13408: PPUSH
13409: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13413: LD_STRING setSpecLogoNumber(
13415: PUSH
13416: LD_INT 5
13418: STR
13419: PUSH
13420: LD_STRING ,
13422: STR
13423: PUSH
13424: LD_INT 4
13426: STR
13427: PUSH
13428: LD_STRING )
13430: STR
13431: PPUSH
13432: CALL_OW 559
// end ;
13436: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13437: LD_INT 2
13439: PUSH
13440: LD_INT 30
13442: PUSH
13443: LD_INT 0
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 30
13452: PUSH
13453: LD_INT 1
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: LIST
13464: PPUSH
13465: CALL_OW 69
13469: IFFALSE 13479
13471: GO 13473
13473: DISABLE
// begin enable ;
13474: ENABLE
// UpdateSpectatorBar ;
13475: CALL 12925 0 0
// end ;
13479: END
