// export is_depot , number_of_breastworks , number_of_people , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , amount_of_apemen , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id , Side_Comps ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function init_map ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// extra_oil_deposits_locations := [ [ 35 , 55 ] , [ 189 , 74 ] , [ 214 , 123 ] , [ 83 , 154 ] ] ;
   4: LD_ADDR_EXP 22
   8: PUSH
   9: LD_INT 35
  11: PUSH
  12: LD_INT 55
  14: PUSH
  15: EMPTY
  16: LIST
  17: LIST
  18: PUSH
  19: LD_INT 189
  21: PUSH
  22: LD_INT 74
  24: PUSH
  25: EMPTY
  26: LIST
  27: LIST
  28: PUSH
  29: LD_INT 214
  31: PUSH
  32: LD_INT 123
  34: PUSH
  35: EMPTY
  36: LIST
  37: LIST
  38: PUSH
  39: LD_INT 83
  41: PUSH
  42: LD_INT 154
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: EMPTY
  50: LIST
  51: LIST
  52: LIST
  53: LIST
  54: ST_TO_ADDR
// depot_def := [ [ 54 , 45 , 3 ] , [ 161 , 55 , 5 ] , [ 98 , 142 , 4 ] , [ 194 , 133 , 1 ] ] ;
  55: LD_ADDR_EXP 19
  59: PUSH
  60: LD_INT 54
  62: PUSH
  63: LD_INT 45
  65: PUSH
  66: LD_INT 3
  68: PUSH
  69: EMPTY
  70: LIST
  71: LIST
  72: LIST
  73: PUSH
  74: LD_INT 161
  76: PUSH
  77: LD_INT 55
  79: PUSH
  80: LD_INT 5
  82: PUSH
  83: EMPTY
  84: LIST
  85: LIST
  86: LIST
  87: PUSH
  88: LD_INT 98
  90: PUSH
  91: LD_INT 142
  93: PUSH
  94: LD_INT 4
  96: PUSH
  97: EMPTY
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_INT 194
 104: PUSH
 105: LD_INT 133
 107: PUSH
 108: LD_INT 1
 110: PUSH
 111: EMPTY
 112: LIST
 113: LIST
 114: LIST
 115: PUSH
 116: EMPTY
 117: LIST
 118: LIST
 119: LIST
 120: LIST
 121: ST_TO_ADDR
// start_def := [ [ 53 , 52 ] , [ 152 , 45 ] , [ 91 , 140 ] , [ 200 , 132 ] ] ;
 122: LD_ADDR_EXP 21
 126: PUSH
 127: LD_INT 53
 129: PUSH
 130: LD_INT 52
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: PUSH
 137: LD_INT 152
 139: PUSH
 140: LD_INT 45
 142: PUSH
 143: EMPTY
 144: LIST
 145: LIST
 146: PUSH
 147: LD_INT 91
 149: PUSH
 150: LD_INT 140
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 200
 159: PUSH
 160: LD_INT 132
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: LIST
 172: ST_TO_ADDR
// breastworks_def := [ [ [ 76 , 75 , 5 ] , [ 72 , 34 , 4 ] , [ 81 , 60 , 5 ] , [ 31 , 31 , 2 ] ] , [ [ 170 , 79 , 5 ] , [ 139 , 42 , 1 ] , [ 171 , 58 , 4 ] , [ 149 , 25 , 3 ] ] , [ [ 114 , 163 , 5 ] , [ 114 , 138 , 4 ] , [ 97 , 116 , 3 ] , [ 81 , 135 , 1 ] ] , [ [ 179 , 116 , 2 ] , [ 175 , 145 , 1 ] , [ 217 , 149 , 4 ] , [ 202 , 158 , 0 ] ] ] ;
 173: LD_ADDR_EXP 20
 177: PUSH
 178: LD_INT 76
 180: PUSH
 181: LD_INT 75
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: PUSH
 192: LD_INT 72
 194: PUSH
 195: LD_INT 34
 197: PUSH
 198: LD_INT 4
 200: PUSH
 201: EMPTY
 202: LIST
 203: LIST
 204: LIST
 205: PUSH
 206: LD_INT 81
 208: PUSH
 209: LD_INT 60
 211: PUSH
 212: LD_INT 5
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_INT 31
 222: PUSH
 223: LD_INT 31
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: EMPTY
 230: LIST
 231: LIST
 232: LIST
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: LIST
 238: LIST
 239: PUSH
 240: LD_INT 170
 242: PUSH
 243: LD_INT 79
 245: PUSH
 246: LD_INT 5
 248: PUSH
 249: EMPTY
 250: LIST
 251: LIST
 252: LIST
 253: PUSH
 254: LD_INT 139
 256: PUSH
 257: LD_INT 42
 259: PUSH
 260: LD_INT 1
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: LIST
 267: PUSH
 268: LD_INT 171
 270: PUSH
 271: LD_INT 58
 273: PUSH
 274: LD_INT 4
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: PUSH
 282: LD_INT 149
 284: PUSH
 285: LD_INT 25
 287: PUSH
 288: LD_INT 3
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: LIST
 300: LIST
 301: PUSH
 302: LD_INT 114
 304: PUSH
 305: LD_INT 163
 307: PUSH
 308: LD_INT 5
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: LIST
 315: PUSH
 316: LD_INT 114
 318: PUSH
 319: LD_INT 138
 321: PUSH
 322: LD_INT 4
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: LIST
 329: PUSH
 330: LD_INT 97
 332: PUSH
 333: LD_INT 116
 335: PUSH
 336: LD_INT 3
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_INT 81
 346: PUSH
 347: LD_INT 135
 349: PUSH
 350: LD_INT 1
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: LIST
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: PUSH
 364: LD_INT 179
 366: PUSH
 367: LD_INT 116
 369: PUSH
 370: LD_INT 2
 372: PUSH
 373: EMPTY
 374: LIST
 375: LIST
 376: LIST
 377: PUSH
 378: LD_INT 175
 380: PUSH
 381: LD_INT 145
 383: PUSH
 384: LD_INT 1
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: LIST
 391: PUSH
 392: LD_INT 217
 394: PUSH
 395: LD_INT 149
 397: PUSH
 398: LD_INT 4
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_INT 202
 408: PUSH
 409: LD_INT 158
 411: PUSH
 412: LD_INT 0
 414: PUSH
 415: EMPTY
 416: LIST
 417: LIST
 418: LIST
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: PUSH
 426: EMPTY
 427: LIST
 428: LIST
 429: LIST
 430: LIST
 431: ST_TO_ADDR
// if not def_extra_oil_deposits then
 432: LD_EXP 33
 436: NOT
 437: IFFALSE 478
// for i in extra_oil_deposits_locations do
 439: LD_ADDR_VAR 0 2
 443: PUSH
 444: LD_EXP 22
 448: PUSH
 449: FOR_IN
 450: IFFALSE 476
// RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
 452: LD_VAR 0 2
 456: PUSH
 457: LD_INT 1
 459: ARRAY
 460: PPUSH
 461: LD_VAR 0 2
 465: PUSH
 466: LD_INT 2
 468: ARRAY
 469: PPUSH
 470: CALL_OW 63
 474: GO 449
 476: POP
 477: POP
// end ;
 478: LD_VAR 0 1
 482: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 483: LD_INT 0
 485: PPUSH
 486: PPUSH
 487: PPUSH
 488: PPUSH
 489: PPUSH
 490: PPUSH
 491: PPUSH
 492: PPUSH
 493: PPUSH
// if MultiPlayer then
 494: LD_OWVAR 4
 498: IFFALSE 562
// begin Game_Type = mp_game_type ;
 500: LD_ADDR_EXP 26
 504: PUSH
 505: LD_OWVAR 6
 509: ST_TO_ADDR
// Your_Side = mp_player_side ;
 510: LD_ADDR_OWVAR 2
 514: PUSH
 515: LD_OWVAR 7
 519: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 520: LD_ADDR_EXP 16
 524: PUSH
 525: LD_OWVAR 17
 529: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 530: LD_ADDR_EXP 14
 534: PUSH
 535: LD_OWVAR 15
 539: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 540: LD_ADDR_EXP 17
 544: PUSH
 545: LD_OWVAR 16
 549: ST_TO_ADDR
// Teams = mp_teams ;
 550: LD_ADDR_EXP 15
 554: PUSH
 555: LD_OWVAR 12
 559: ST_TO_ADDR
// end else
 560: GO 724
// begin Game_Type = 2 ;
 562: LD_ADDR_EXP 26
 566: PUSH
 567: LD_INT 2
 569: ST_TO_ADDR
// Your_Side = 4 ;
 570: LD_ADDR_OWVAR 2
 574: PUSH
 575: LD_INT 4
 577: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 0 , 4 , 0 ] ;
 578: LD_ADDR_EXP 16
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 3
 588: PUSH
 589: LD_INT 0
 591: PUSH
 592: LD_INT 1
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: LD_INT 4
 603: PUSH
 604: LD_INT 0
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 617: LD_ADDR_EXP 14
 621: PUSH
 622: LD_INT 0
 624: PUSH
 625: LD_INT 1
 627: PUSH
 628: LD_INT 0
 630: PUSH
 631: LD_INT 2
 633: PUSH
 634: LD_INT 0
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: LD_INT 2
 642: PUSH
 643: LD_INT 0
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 656: LD_ADDR_EXP 17
 660: PUSH
 661: LD_INT 0
 663: PUSH
 664: LD_INT 3
 666: PUSH
 667: LD_INT 0
 669: PUSH
 670: LD_INT 1
 672: PUSH
 673: LD_INT 0
 675: PUSH
 676: LD_INT 1
 678: PUSH
 679: LD_INT 3
 681: PUSH
 682: LD_INT 0
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: ST_TO_ADDR
// Teams = [ [ 2 , 7 ] , [ 6 , 4 ] ] ;
 695: LD_ADDR_EXP 15
 699: PUSH
 700: LD_INT 2
 702: PUSH
 703: LD_INT 7
 705: PUSH
 706: EMPTY
 707: LIST
 708: LIST
 709: PUSH
 710: LD_INT 6
 712: PUSH
 713: LD_INT 4
 715: PUSH
 716: EMPTY
 717: LIST
 718: LIST
 719: PUSH
 720: EMPTY
 721: LIST
 722: LIST
 723: ST_TO_ADDR
// end ; for i := 1 to 8 do
 724: LD_ADDR_VAR 0 8
 728: PUSH
 729: DOUBLE
 730: LD_INT 1
 732: DEC
 733: ST_TO_ADDR
 734: LD_INT 8
 736: PUSH
 737: FOR_TO
 738: IFFALSE 825
// if Multiplayer_GetPlayerIsSpec ( i ) then
 740: LD_VAR 0 8
 744: PPUSH
 745: CALL_OW 530
 749: IFFALSE 823
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 751: LD_ADDR_EXP 16
 755: PUSH
 756: LD_EXP 16
 760: PPUSH
 761: LD_VAR 0 8
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 1
 773: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 774: LD_ADDR_EXP 15
 778: PUSH
 779: LD_EXP 15
 783: PPUSH
 784: LD_EXP 14
 788: PUSH
 789: LD_VAR 0 8
 793: ARRAY
 794: PPUSH
 795: LD_EXP 15
 799: PUSH
 800: LD_EXP 14
 804: PUSH
 805: LD_VAR 0 8
 809: ARRAY
 810: ARRAY
 811: PUSH
 812: LD_VAR 0 8
 816: DIFF
 817: PPUSH
 818: CALL_OW 1
 822: ST_TO_ADDR
// end ;
 823: GO 737
 825: POP
 826: POP
// if MultiPlayer then
 827: LD_OWVAR 4
 831: IFFALSE 1004
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 833: LD_ADDR_EXP 28
 837: PUSH
 838: LD_INT 0
 840: PPUSH
 841: CALL_OW 426
 845: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 846: LD_ADDR_EXP 29
 850: PUSH
 851: LD_INT 1
 853: PPUSH
 854: CALL_OW 426
 858: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
 859: LD_ADDR_EXP 30
 863: PUSH
 864: LD_INT 2
 866: PPUSH
 867: CALL_OW 426
 871: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 872: LD_ADDR_EXP 31
 876: PUSH
 877: LD_INT 3
 879: PPUSH
 880: CALL_OW 426
 884: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 885: LD_ADDR_EXP 32
 889: PUSH
 890: LD_INT 4
 892: PPUSH
 893: CALL_OW 426
 897: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 898: LD_ADDR_EXP 33
 902: PUSH
 903: LD_INT 5
 905: PPUSH
 906: CALL_OW 426
 910: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 911: LD_ADDR_EXP 35
 915: PUSH
 916: LD_INT 10
 918: PPUSH
 919: CALL_OW 426
 923: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 924: LD_ADDR_EXP 36
 928: PUSH
 929: LD_INT 11
 931: PPUSH
 932: CALL_OW 426
 936: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 937: LD_ADDR_EXP 37
 941: PUSH
 942: LD_INT 12
 944: PPUSH
 945: CALL_OW 426
 949: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
 950: LD_ADDR_EXP 39
 954: PUSH
 955: LD_INT 13
 957: PPUSH
 958: CALL_OW 426
 962: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
 963: LD_ADDR_EXP 38
 967: PUSH
 968: LD_INT 14
 970: PPUSH
 971: CALL_OW 426
 975: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 976: LD_ADDR_EXP 40
 980: PUSH
 981: LD_INT 15
 983: PPUSH
 984: CALL_OW 426
 988: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 989: LD_ADDR_VAR 0 9
 993: PUSH
 994: LD_INT 22
 996: PPUSH
 997: CALL_OW 426
1001: ST_TO_ADDR
// end else
1002: GO 1112
// begin randomize ;
1004: CALL_OW 10
// def_base_level = 2 ;
1008: LD_ADDR_EXP 28
1012: PUSH
1013: LD_INT 2
1015: ST_TO_ADDR
// def_amount_of_people = 1 ;
1016: LD_ADDR_EXP 29
1020: PUSH
1021: LD_INT 1
1023: ST_TO_ADDR
// def_skill_level = 1 ;
1024: LD_ADDR_EXP 30
1028: PUSH
1029: LD_INT 1
1031: ST_TO_ADDR
// def_starting_resources = 2 ;
1032: LD_ADDR_EXP 31
1036: PUSH
1037: LD_INT 2
1039: ST_TO_ADDR
// def_shipments_density = 1 ;
1040: LD_ADDR_EXP 32
1044: PUSH
1045: LD_INT 1
1047: ST_TO_ADDR
// def_extra_oil_deposits = 0 ;
1048: LD_ADDR_EXP 33
1052: PUSH
1053: LD_INT 0
1055: ST_TO_ADDR
// def_shared_vision = 1 ;
1056: LD_ADDR_EXP 35
1060: PUSH
1061: LD_INT 1
1063: ST_TO_ADDR
// def_morale_flags = 2 ;
1064: LD_ADDR_EXP 36
1068: PUSH
1069: LD_INT 2
1071: ST_TO_ADDR
// def_siberite_detection = 1 ;
1072: LD_ADDR_EXP 37
1076: PUSH
1077: LD_INT 1
1079: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1080: LD_ADDR_EXP 39
1084: PUSH
1085: LD_INT 3
1087: ST_TO_ADDR
// def_people_respawning = 2 ;
1088: LD_ADDR_EXP 38
1092: PUSH
1093: LD_INT 2
1095: ST_TO_ADDR
// def_siberite_bomb = 0 ;
1096: LD_ADDR_EXP 40
1100: PUSH
1101: LD_INT 0
1103: ST_TO_ADDR
// tech_level = 4 ;
1104: LD_ADDR_VAR 0 9
1108: PUSH
1109: LD_INT 4
1111: ST_TO_ADDR
// end ; InitGameRules ;
1112: CALL 6470 0 0
// if def_game_rules = 0 then
1116: LD_EXP 27
1120: PUSH
1121: LD_INT 0
1123: EQUAL
1124: IFFALSE 1151
// begin if isSGUI then
1126: LD_OWVAR 83
1130: IFFALSE 1138
// setMpTechs ( ) else
1132: CALL 11305 0 0
1136: GO 1151
// begin SetMpTechLevel ( tech_level + 1 ) ;
1138: LD_VAR 0 9
1142: PUSH
1143: LD_INT 1
1145: PLUS
1146: PPUSH
1147: CALL 11452 0 1
// end ; end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1151: LD_ADDR_EXP 1
1155: PUSH
1156: LD_INT 0
1158: PUSH
1159: LD_INT 1
1161: PUSH
1162: LD_INT 1
1164: PUSH
1165: LD_INT 1
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: LIST
1173: PUSH
1174: LD_EXP 28
1178: PUSH
1179: LD_INT 1
1181: PLUS
1182: ARRAY
1183: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1184: LD_ADDR_EXP 2
1188: PUSH
1189: LD_INT 0
1191: PUSH
1192: LD_INT 0
1194: PUSH
1195: LD_INT 2
1197: PUSH
1198: LD_INT 4
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: PUSH
1207: LD_EXP 28
1211: PUSH
1212: LD_INT 1
1214: PLUS
1215: ARRAY
1216: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1217: LD_ADDR_EXP 4
1221: PUSH
1222: LD_INT 2
1224: PUSH
1225: LD_INT 3
1227: PUSH
1228: LD_INT 4
1230: PUSH
1231: LD_INT 5
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: LIST
1238: LIST
1239: PUSH
1240: LD_EXP 30
1244: PUSH
1245: LD_INT 1
1247: PLUS
1248: ARRAY
1249: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1250: LD_ADDR_EXP 6
1254: PUSH
1255: LD_INT 0
1257: PUSH
1258: LD_INT 0
1260: PUSH
1261: LD_INT 0
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_INT 30
1271: PUSH
1272: LD_INT 0
1274: PUSH
1275: LD_INT 0
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: LIST
1282: PUSH
1283: LD_INT 50
1285: PUSH
1286: LD_INT 20
1288: PUSH
1289: LD_INT 0
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_INT 80
1299: PUSH
1300: LD_INT 40
1302: PUSH
1303: LD_INT 20
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: LIST
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: LD_EXP 31
1321: PUSH
1322: LD_INT 1
1324: PLUS
1325: ARRAY
1326: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1327: LD_ADDR_EXP 5
1331: PUSH
1332: LD_INT 10
1334: PUSH
1335: EMPTY
1336: LIST
1337: PUSH
1338: LD_INT 7
1340: PUSH
1341: LD_INT 14
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PUSH
1348: LD_INT 6
1350: PUSH
1351: LD_INT 12
1353: PUSH
1354: LD_INT 18
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: LIST
1361: PUSH
1362: LD_INT 5
1364: PUSH
1365: LD_INT 10
1367: PUSH
1368: LD_INT 15
1370: PUSH
1371: LD_INT 20
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: PUSH
1380: EMPTY
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: PUSH
1386: LD_EXP 31
1390: PUSH
1391: LD_INT 1
1393: PLUS
1394: ARRAY
1395: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1396: LD_ADDR_EXP 3
1400: PUSH
1401: LD_EXP 29
1405: PUSH
1406: LD_INT 4
1408: PLUS
1409: ST_TO_ADDR
// shipments_density := 20 + ( def_shipments_density ) * 28 ;
1410: LD_ADDR_EXP 7
1414: PUSH
1415: LD_INT 20
1417: PUSH
1418: LD_EXP 32
1422: PUSH
1423: LD_INT 28
1425: MUL
1426: PLUS
1427: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1428: LD_ADDR_EXP 11
1432: PUSH
1433: LD_INT 0
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 6
1441: PUSH
1442: LD_INT 9
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: PUSH
1451: LD_EXP 39
1455: PUSH
1456: LD_INT 1
1458: PLUS
1459: ARRAY
1460: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1461: LD_ADDR_EXP 9
1465: PUSH
1466: LD_INT 0
1468: PUSH
1469: LD_INT 8400
1471: PUSH
1472: LD_INT 1750
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: LIST
1479: PUSH
1480: LD_EXP 38
1484: PUSH
1485: LD_INT 1
1487: PLUS
1488: ARRAY
1489: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1490: LD_ADDR_EXP 10
1494: PUSH
1495: LD_INT 0
1497: PUSH
1498: LD_INT 21000
1500: PUSH
1501: LD_INT 4200
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: PUSH
1509: LD_EXP 38
1513: PUSH
1514: LD_INT 1
1516: PLUS
1517: ARRAY
1518: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1519: LD_ADDR_EXP 8
1523: PUSH
1524: LD_INT 1
1526: NEG
1527: PUSH
1528: LD_INT 350
1530: PUSH
1531: LD_INT 700
1533: PUSH
1534: LD_INT 1400
1536: PUSH
1537: LD_INT 0
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: PUSH
1547: LD_EXP 36
1551: PUSH
1552: LD_INT 1
1554: PLUS
1555: ARRAY
1556: ST_TO_ADDR
// battle_flags_id = [ ] ;
1557: LD_ADDR_EXP 23
1561: PUSH
1562: EMPTY
1563: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1564: LD_ADDR_EXP 12
1568: PUSH
1569: LD_INT 0
1571: PUSH
1572: LD_INT 1
1574: PUSH
1575: LD_INT 63000
1577: PUSH
1578: LD_INT 126000
1580: PUSH
1581: LD_INT 189000
1583: PUSH
1584: LD_INT 252000
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: PUSH
1595: LD_EXP 40
1599: PUSH
1600: LD_INT 1
1602: PLUS
1603: ARRAY
1604: ST_TO_ADDR
// if not def_builduptime then
1605: LD_EXP 41
1609: NOT
1610: IFFALSE 1615
// disable ( 600 ) ;
1612: LD_INT 600
1614: DISABLE_MARKED
// end ;
1615: LD_VAR 0 1
1619: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1620: LD_INT 0
1622: PPUSH
1623: PPUSH
1624: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1625: LD_ADDR_EXP 18
1629: PUSH
1630: LD_EXP 14
1634: PUSH
1635: LD_INT 0
1637: PUSH
1638: EMPTY
1639: LIST
1640: DIFF
1641: PUSH
1642: LD_INT 1
1644: GREATER
1645: ST_TO_ADDR
// if not Team_Game then
1646: LD_EXP 18
1650: NOT
1651: IFFALSE 1749
// begin for i = 1 to 8 do
1653: LD_ADDR_VAR 0 2
1657: PUSH
1658: DOUBLE
1659: LD_INT 1
1661: DEC
1662: ST_TO_ADDR
1663: LD_INT 8
1665: PUSH
1666: FOR_TO
1667: IFFALSE 1745
// for j = 1 to 8 do
1669: LD_ADDR_VAR 0 3
1673: PUSH
1674: DOUBLE
1675: LD_INT 1
1677: DEC
1678: ST_TO_ADDR
1679: LD_INT 8
1681: PUSH
1682: FOR_TO
1683: IFFALSE 1741
// if i <> j then
1685: LD_VAR 0 2
1689: PUSH
1690: LD_VAR 0 3
1694: NONEQUAL
1695: IFFALSE 1719
// SetAttitude ( i , j , att_neutral , true ) else
1697: LD_VAR 0 2
1701: PPUSH
1702: LD_VAR 0 3
1706: PPUSH
1707: LD_INT 0
1709: PPUSH
1710: LD_INT 1
1712: PPUSH
1713: CALL_OW 80
1717: GO 1739
// SetAttitude ( i , j , att_friend , true ) ;
1719: LD_VAR 0 2
1723: PPUSH
1724: LD_VAR 0 3
1728: PPUSH
1729: LD_INT 1
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: CALL_OW 80
1739: GO 1682
1741: POP
1742: POP
1743: GO 1666
1745: POP
1746: POP
// end else
1747: GO 1924
// begin if def_shared_vision then
1749: LD_EXP 35
1753: IFFALSE 1818
// begin for i in Teams do
1755: LD_ADDR_VAR 0 2
1759: PUSH
1760: LD_EXP 15
1764: PUSH
1765: FOR_IN
1766: IFFALSE 1816
// for j = 2 to i do
1768: LD_ADDR_VAR 0 3
1772: PUSH
1773: DOUBLE
1774: LD_INT 2
1776: DEC
1777: ST_TO_ADDR
1778: LD_VAR 0 2
1782: PUSH
1783: FOR_TO
1784: IFFALSE 1812
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1786: LD_VAR 0 2
1790: PUSH
1791: LD_VAR 0 3
1795: ARRAY
1796: PPUSH
1797: LD_VAR 0 2
1801: PUSH
1802: LD_INT 1
1804: ARRAY
1805: PPUSH
1806: CALL_OW 343
1810: GO 1783
1812: POP
1813: POP
1814: GO 1765
1816: POP
1817: POP
// end ; for i = 1 to 8 do
1818: LD_ADDR_VAR 0 2
1822: PUSH
1823: DOUBLE
1824: LD_INT 1
1826: DEC
1827: ST_TO_ADDR
1828: LD_INT 8
1830: PUSH
1831: FOR_TO
1832: IFFALSE 1922
// for j = 1 to 8 do
1834: LD_ADDR_VAR 0 3
1838: PUSH
1839: DOUBLE
1840: LD_INT 1
1842: DEC
1843: ST_TO_ADDR
1844: LD_INT 8
1846: PUSH
1847: FOR_TO
1848: IFFALSE 1918
// if Side_Teams [ i ] = Side_Teams [ j ] then
1850: LD_EXP 14
1854: PUSH
1855: LD_VAR 0 2
1859: ARRAY
1860: PUSH
1861: LD_EXP 14
1865: PUSH
1866: LD_VAR 0 3
1870: ARRAY
1871: EQUAL
1872: IFFALSE 1896
// SetAttitude ( i , j , att_friend , true ) else
1874: LD_VAR 0 2
1878: PPUSH
1879: LD_VAR 0 3
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: LD_INT 1
1889: PPUSH
1890: CALL_OW 80
1894: GO 1916
// SetAttitude ( i , j , att_enemy , true ) ;
1896: LD_VAR 0 2
1900: PPUSH
1901: LD_VAR 0 3
1905: PPUSH
1906: LD_INT 2
1908: PPUSH
1909: LD_INT 1
1911: PPUSH
1912: CALL_OW 80
1916: GO 1847
1918: POP
1919: POP
1920: GO 1831
1922: POP
1923: POP
// end ; end ;
1924: LD_VAR 0 1
1928: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
1929: LD_INT 0
1931: PPUSH
1932: PPUSH
1933: PPUSH
1934: PPUSH
// result := [ ] ;
1935: LD_ADDR_VAR 0 7
1939: PUSH
1940: EMPTY
1941: ST_TO_ADDR
// for i := 1 to count do
1942: LD_ADDR_VAR 0 8
1946: PUSH
1947: DOUBLE
1948: LD_INT 1
1950: DEC
1951: ST_TO_ADDR
1952: LD_VAR 0 1
1956: PUSH
1957: FOR_TO
1958: IFFALSE 2376
// begin uc_direction := Rand ( 0 , 5 ) ;
1960: LD_ADDR_OWVAR 24
1964: PUSH
1965: LD_INT 0
1967: PPUSH
1968: LD_INT 5
1970: PPUSH
1971: CALL_OW 12
1975: ST_TO_ADDR
// if commander then
1976: LD_LOC 1
1980: IFFALSE 2089
// begin hc_name := mp_sides_players_names [ uc_side ] ;
1982: LD_ADDR_OWVAR 26
1986: PUSH
1987: LD_OWVAR 19
1991: PUSH
1992: LD_OWVAR 20
1996: ARRAY
1997: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
1998: LD_INT 1
2000: PPUSH
2001: LD_INT 2
2003: PPUSH
2004: CALL_OW 12
2008: PPUSH
2009: LD_VAR 0 2
2013: PPUSH
2014: LD_EXP 4
2018: PUSH
2019: LD_INT 2
2021: PLUS
2022: PPUSH
2023: CALL_OW 380
// hc_importance := 105 ;
2027: LD_ADDR_OWVAR 32
2031: PUSH
2032: LD_INT 105
2034: ST_TO_ADDR
// commander := false ;
2035: LD_ADDR_LOC 1
2039: PUSH
2040: LD_INT 0
2042: ST_TO_ADDR
// if Multiplayer then
2043: LD_OWVAR 4
2047: IFFALSE 2087
// begin hc_gallery := MULTIAVATARS ;
2049: LD_ADDR_OWVAR 33
2053: PUSH
2054: LD_STRING MULTIAVATARS
2056: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2057: LD_ADDR_OWVAR 34
2061: PUSH
2062: LD_OWVAR 20
2066: PPUSH
2067: CALL_OW 525
2071: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2072: LD_ADDR_OWVAR 27
2076: PUSH
2077: LD_OWVAR 20
2081: PPUSH
2082: CALL_OW 526
2086: ST_TO_ADDR
// end ; end else
2087: GO 2152
// begin hc_name :=  ;
2089: LD_ADDR_OWVAR 26
2093: PUSH
2094: LD_STRING 
2096: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
2097: LD_INT 1
2099: PPUSH
2100: LD_INT 2
2102: PPUSH
2103: CALL_OW 12
2107: PPUSH
2108: LD_VAR 0 2
2112: PPUSH
2113: LD_EXP 4
2117: PPUSH
2118: CALL_OW 380
// hc_importance := 0 ;
2122: LD_ADDR_OWVAR 32
2126: PUSH
2127: LD_INT 0
2129: ST_TO_ADDR
// if Multiplayer then
2130: LD_OWVAR 4
2134: IFFALSE 2152
// begin hc_gallery :=  ;
2136: LD_ADDR_OWVAR 33
2140: PUSH
2141: LD_STRING 
2143: ST_TO_ADDR
// hc_face_number := 0 ;
2144: LD_ADDR_OWVAR 34
2148: PUSH
2149: LD_INT 0
2151: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2152: LD_ADDR_VAR 0 10
2156: PUSH
2157: CALL_OW 44
2161: ST_TO_ADDR
// if global_defined then
2162: LD_LOC 3
2166: IFFALSE 2306
// begin if ( cl = class_soldier ) then
2168: LD_VAR 0 2
2172: PUSH
2173: LD_INT 1
2175: EQUAL
2176: IFFALSE 2196
// j := i + soldiers_created else
2178: LD_ADDR_VAR 0 9
2182: PUSH
2183: LD_VAR 0 8
2187: PUSH
2188: LD_LOC 4
2192: PLUS
2193: ST_TO_ADDR
2194: GO 2206
// j := i ;
2196: LD_ADDR_VAR 0 9
2200: PUSH
2201: LD_VAR 0 8
2205: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2206: LD_LOC 2
2210: PUSH
2211: LD_VAR 0 2
2215: ARRAY
2216: PUSH
2217: LD_VAR 0 9
2221: ARRAY
2222: PPUSH
2223: LD_VAR 0 10
2227: PPUSH
2228: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2232: LD_VAR 0 10
2236: PPUSH
2237: LD_INT 2
2239: PPUSH
2240: LD_LOC 2
2244: PUSH
2245: LD_VAR 0 2
2249: ARRAY
2250: PUSH
2251: LD_VAR 0 9
2255: ARRAY
2256: PPUSH
2257: LD_INT 2
2259: PPUSH
2260: CALL_OW 260
2264: PPUSH
2265: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2269: LD_VAR 0 10
2273: PPUSH
2274: LD_INT 1
2276: PPUSH
2277: LD_LOC 2
2281: PUSH
2282: LD_VAR 0 2
2286: ARRAY
2287: PUSH
2288: LD_VAR 0 9
2292: ARRAY
2293: PPUSH
2294: LD_INT 1
2296: PPUSH
2297: CALL_OW 260
2301: PPUSH
2302: CALL_OW 239
// end ; if building then
2306: LD_VAR 0 6
2310: IFFALSE 2328
// PlaceHumanInUnit ( un , building ) else
2312: LD_VAR 0 10
2316: PPUSH
2317: LD_VAR 0 6
2321: PPUSH
2322: CALL_OW 52
2326: GO 2355
// PlaceUnitXYR ( un , x , y , r , false ) ;
2328: LD_VAR 0 10
2332: PPUSH
2333: LD_VAR 0 3
2337: PPUSH
2338: LD_VAR 0 4
2342: PPUSH
2343: LD_VAR 0 5
2347: PPUSH
2348: LD_INT 0
2350: PPUSH
2351: CALL_OW 50
// result := result ^ [ un ] ;
2355: LD_ADDR_VAR 0 7
2359: PUSH
2360: LD_VAR 0 7
2364: PUSH
2365: LD_VAR 0 10
2369: PUSH
2370: EMPTY
2371: LIST
2372: ADD
2373: ST_TO_ADDR
// end ;
2374: GO 1957
2376: POP
2377: POP
// if not global_defined then
2378: LD_LOC 3
2382: NOT
2383: IFFALSE 2461
// if ( global_units >= cl ) then
2385: LD_LOC 2
2389: PUSH
2390: LD_VAR 0 2
2394: GREATEREQUAL
2395: IFFALSE 2436
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2397: LD_ADDR_LOC 2
2401: PUSH
2402: LD_LOC 2
2406: PPUSH
2407: LD_VAR 0 2
2411: PPUSH
2412: LD_LOC 2
2416: PUSH
2417: LD_VAR 0 2
2421: ARRAY
2422: PUSH
2423: LD_VAR 0 7
2427: ADD
2428: PPUSH
2429: CALL_OW 1
2433: ST_TO_ADDR
2434: GO 2461
// global_units := Replace ( global_units , cl , result ) ;
2436: LD_ADDR_LOC 2
2440: PUSH
2441: LD_LOC 2
2445: PPUSH
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_VAR 0 7
2455: PPUSH
2456: CALL_OW 1
2460: ST_TO_ADDR
// end ;
2461: LD_VAR 0 7
2465: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2466: LD_INT 0
2468: PPUSH
2469: PPUSH
2470: PPUSH
2471: PPUSH
2472: PPUSH
2473: PPUSH
2474: PPUSH
2475: PPUSH
2476: PPUSH
// pos := Side_Positions [ side ] ;
2477: LD_ADDR_VAR 0 3
2481: PUSH
2482: LD_EXP 16
2486: PUSH
2487: LD_VAR 0 1
2491: ARRAY
2492: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2493: LD_ADDR_OWVAR 21
2497: PUSH
2498: LD_EXP 17
2502: PUSH
2503: LD_VAR 0 1
2507: ARRAY
2508: ST_TO_ADDR
// uc_side := side ;
2509: LD_ADDR_OWVAR 20
2513: PUSH
2514: LD_VAR 0 1
2518: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2519: LD_ADDR_VAR 0 4
2523: PUSH
2524: LD_EXP 19
2528: PUSH
2529: LD_VAR 0 3
2533: ARRAY
2534: PUSH
2535: LD_INT 1
2537: ARRAY
2538: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2539: LD_ADDR_VAR 0 5
2543: PUSH
2544: LD_EXP 19
2548: PUSH
2549: LD_VAR 0 3
2553: ARRAY
2554: PUSH
2555: LD_INT 2
2557: ARRAY
2558: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2559: LD_ADDR_VAR 0 6
2563: PUSH
2564: LD_EXP 19
2568: PUSH
2569: LD_VAR 0 3
2573: ARRAY
2574: PUSH
2575: LD_INT 3
2577: ARRAY
2578: ST_TO_ADDR
// if is_depot then
2579: LD_EXP 1
2583: IFFALSE 2716
// begin bc_type = b_depot ;
2585: LD_ADDR_OWVAR 42
2589: PUSH
2590: LD_INT 0
2592: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2593: LD_ADDR_VAR 0 10
2597: PUSH
2598: LD_VAR 0 4
2602: PPUSH
2603: LD_VAR 0 5
2607: PPUSH
2608: LD_VAR 0 6
2612: PPUSH
2613: CALL_OW 47
2617: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2618: LD_VAR 0 10
2622: PPUSH
2623: LD_STRING @
2625: PUSH
2626: LD_VAR 0 1
2630: STR
2631: PPUSH
2632: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2636: LD_VAR 0 10
2640: PPUSH
2641: CALL_OW 274
2645: PPUSH
2646: LD_INT 1
2648: PPUSH
2649: LD_EXP 6
2653: PUSH
2654: LD_INT 1
2656: ARRAY
2657: PPUSH
2658: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2662: LD_VAR 0 10
2666: PPUSH
2667: CALL_OW 274
2671: PPUSH
2672: LD_INT 2
2674: PPUSH
2675: LD_EXP 6
2679: PUSH
2680: LD_INT 2
2682: ARRAY
2683: PPUSH
2684: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2688: LD_VAR 0 10
2692: PPUSH
2693: CALL_OW 274
2697: PPUSH
2698: LD_INT 3
2700: PPUSH
2701: LD_EXP 6
2705: PUSH
2706: LD_INT 3
2708: ARRAY
2709: PPUSH
2710: CALL_OW 277
// end else
2714: GO 2860
// begin for i := 1 to 3 do
2716: LD_ADDR_VAR 0 7
2720: PUSH
2721: DOUBLE
2722: LD_INT 1
2724: DEC
2725: ST_TO_ADDR
2726: LD_INT 3
2728: PUSH
2729: FOR_TO
2730: IFFALSE 2858
// begin r := starting_resources [ i ] ;
2732: LD_ADDR_VAR 0 8
2736: PUSH
2737: LD_EXP 6
2741: PUSH
2742: LD_VAR 0 7
2746: ARRAY
2747: ST_TO_ADDR
// while r >= 10 do
2748: LD_VAR 0 8
2752: PUSH
2753: LD_INT 10
2755: GREATEREQUAL
2756: IFFALSE 2856
// if r > 50 then
2758: LD_VAR 0 8
2762: PUSH
2763: LD_INT 50
2765: GREATER
2766: IFFALSE 2812
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
2768: LD_VAR 0 7
2772: PPUSH
2773: LD_INT 5
2775: PPUSH
2776: LD_VAR 0 4
2780: PPUSH
2781: LD_VAR 0 5
2785: PPUSH
2786: LD_INT 4
2788: PPUSH
2789: LD_INT 0
2791: PPUSH
2792: CALL_OW 60
// r := r - 50 ;
2796: LD_ADDR_VAR 0 8
2800: PUSH
2801: LD_VAR 0 8
2805: PUSH
2806: LD_INT 50
2808: MINUS
2809: ST_TO_ADDR
// end else
2810: GO 2854
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
2812: LD_VAR 0 7
2816: PPUSH
2817: LD_VAR 0 8
2821: PUSH
2822: LD_INT 10
2824: DIV
2825: PPUSH
2826: LD_VAR 0 4
2830: PPUSH
2831: LD_VAR 0 5
2835: PPUSH
2836: LD_INT 4
2838: PPUSH
2839: LD_INT 0
2841: PPUSH
2842: CALL_OW 60
// r := 0 ;
2846: LD_ADDR_VAR 0 8
2850: PUSH
2851: LD_INT 0
2853: ST_TO_ADDR
// end ;
2854: GO 2748
// end ;
2856: GO 2729
2858: POP
2859: POP
// end ; for r in starting_crates do
2860: LD_ADDR_VAR 0 8
2864: PUSH
2865: LD_EXP 5
2869: PUSH
2870: FOR_IN
2871: IFFALSE 2903
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
2873: LD_INT 1
2875: PPUSH
2876: LD_INT 5
2878: PPUSH
2879: LD_VAR 0 4
2883: PPUSH
2884: LD_VAR 0 5
2888: PPUSH
2889: LD_VAR 0 8
2893: PPUSH
2894: LD_INT 0
2896: PPUSH
2897: CALL_OW 60
2901: GO 2870
2903: POP
2904: POP
// if def_morale_flags then
2905: LD_EXP 36
2909: IFFALSE 3048
// begin x := start_def [ pos ] [ 1 ] ;
2911: LD_ADDR_VAR 0 4
2915: PUSH
2916: LD_EXP 21
2920: PUSH
2921: LD_VAR 0 3
2925: ARRAY
2926: PUSH
2927: LD_INT 1
2929: ARRAY
2930: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
2931: LD_ADDR_VAR 0 5
2935: PUSH
2936: LD_EXP 21
2940: PUSH
2941: LD_VAR 0 3
2945: ARRAY
2946: PUSH
2947: LD_INT 2
2949: ARRAY
2950: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
2951: LD_VAR 0 4
2955: PPUSH
2956: LD_VAR 0 5
2960: PPUSH
2961: LD_INT 12
2963: PPUSH
2964: LD_INT 2
2966: PPUSH
2967: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
2971: LD_ADDR_EXP 23
2975: PUSH
2976: LD_EXP 23
2980: PUSH
2981: LD_VAR 0 1
2985: PPUSH
2986: LD_VAR 0 4
2990: PPUSH
2991: LD_VAR 0 5
2995: PPUSH
2996: LD_INT 1
2998: PUSH
2999: LD_INT 100
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: LD_INT 2
3008: PUSH
3009: LD_INT 50
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: PUSH
3016: LD_INT 3
3018: PUSH
3019: LD_INT 20
3021: PUSH
3022: EMPTY
3023: LIST
3024: LIST
3025: PUSH
3026: LD_INT 20
3028: PUSH
3029: LD_INT 100
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: LIST
3040: LIST
3041: PPUSH
3042: CALL_OW 418
3046: ADD
3047: ST_TO_ADDR
// end ; commander := true ;
3048: LD_ADDR_LOC 1
3052: PUSH
3053: LD_INT 1
3055: ST_TO_ADDR
// soldiers_created := 0 ;
3056: LD_ADDR_LOC 4
3060: PUSH
3061: LD_INT 0
3063: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3064: LD_ADDR_VAR 0 7
3068: PUSH
3069: DOUBLE
3070: LD_INT 1
3072: DEC
3073: ST_TO_ADDR
3074: LD_EXP 2
3078: PUSH
3079: FOR_TO
3080: IFFALSE 3233
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3082: LD_ADDR_VAR 0 4
3086: PUSH
3087: LD_EXP 20
3091: PUSH
3092: LD_VAR 0 3
3096: ARRAY
3097: PUSH
3098: LD_VAR 0 7
3102: ARRAY
3103: PUSH
3104: LD_INT 1
3106: ARRAY
3107: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3108: LD_ADDR_VAR 0 5
3112: PUSH
3113: LD_EXP 20
3117: PUSH
3118: LD_VAR 0 3
3122: ARRAY
3123: PUSH
3124: LD_VAR 0 7
3128: ARRAY
3129: PUSH
3130: LD_INT 2
3132: ARRAY
3133: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3134: LD_ADDR_VAR 0 6
3138: PUSH
3139: LD_EXP 20
3143: PUSH
3144: LD_VAR 0 3
3148: ARRAY
3149: PUSH
3150: LD_VAR 0 7
3154: ARRAY
3155: PUSH
3156: LD_INT 3
3158: ARRAY
3159: ST_TO_ADDR
// bc_type := b_breastwork ;
3160: LD_ADDR_OWVAR 42
3164: PUSH
3165: LD_INT 31
3167: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3168: LD_ADDR_VAR 0 9
3172: PUSH
3173: LD_VAR 0 4
3177: PPUSH
3178: LD_VAR 0 5
3182: PPUSH
3183: LD_VAR 0 6
3187: PPUSH
3188: CALL_OW 47
3192: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3193: LD_INT 1
3195: PPUSH
3196: LD_INT 1
3198: PPUSH
3199: LD_INT 0
3201: PPUSH
3202: LD_INT 0
3204: PPUSH
3205: LD_INT 0
3207: PPUSH
3208: LD_VAR 0 9
3212: PPUSH
3213: CALL 1929 0 6
// soldiers_created := soldiers_created + 1 ;
3217: LD_ADDR_LOC 4
3221: PUSH
3222: LD_LOC 4
3226: PUSH
3227: LD_INT 1
3229: PLUS
3230: ST_TO_ADDR
// end ;
3231: GO 3079
3233: POP
3234: POP
// x := start_def [ pos ] [ 1 ] ;
3235: LD_ADDR_VAR 0 4
3239: PUSH
3240: LD_EXP 21
3244: PUSH
3245: LD_VAR 0 3
3249: ARRAY
3250: PUSH
3251: LD_INT 1
3253: ARRAY
3254: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3255: LD_ADDR_VAR 0 5
3259: PUSH
3260: LD_EXP 21
3264: PUSH
3265: LD_VAR 0 3
3269: ARRAY
3270: PUSH
3271: LD_INT 2
3273: ARRAY
3274: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3275: LD_LOC 8
3279: PUSH
3280: LD_EXP 2
3284: MINUS
3285: PPUSH
3286: LD_INT 1
3288: PPUSH
3289: LD_VAR 0 4
3293: PPUSH
3294: LD_VAR 0 5
3298: PPUSH
3299: LD_INT 5
3301: PPUSH
3302: LD_INT 0
3304: PPUSH
3305: CALL 1929 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3309: LD_LOC 5
3313: PPUSH
3314: LD_INT 2
3316: PPUSH
3317: LD_VAR 0 4
3321: PPUSH
3322: LD_VAR 0 5
3326: PPUSH
3327: LD_INT 5
3329: PPUSH
3330: LD_INT 0
3332: PPUSH
3333: CALL 1929 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3337: LD_LOC 7
3341: PPUSH
3342: LD_INT 3
3344: PPUSH
3345: LD_VAR 0 4
3349: PPUSH
3350: LD_VAR 0 5
3354: PPUSH
3355: LD_INT 5
3357: PPUSH
3358: LD_INT 0
3360: PPUSH
3361: CALL 1929 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3365: LD_LOC 6
3369: PPUSH
3370: LD_INT 4
3372: PPUSH
3373: LD_VAR 0 4
3377: PPUSH
3378: LD_VAR 0 5
3382: PPUSH
3383: LD_INT 5
3385: PPUSH
3386: LD_INT 0
3388: PPUSH
3389: CALL 1929 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3393: LD_EXP 37
3397: PUSH
3398: LD_INT 20
3400: PPUSH
3401: LD_VAR 0 1
3405: PPUSH
3406: CALL_OW 321
3410: PUSH
3411: LD_INT 1
3413: EQUAL
3414: AND
3415: IFFALSE 3432
// SetTech ( tech_SibDet , side , state_researched ) ;
3417: LD_INT 20
3419: PPUSH
3420: LD_VAR 0 1
3424: PPUSH
3425: LD_INT 2
3427: PPUSH
3428: CALL_OW 322
// if def_siberite_bomb = 1 then
3432: LD_EXP 40
3436: PUSH
3437: LD_INT 1
3439: EQUAL
3440: IFFALSE 3474
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3442: LD_INT 25
3444: PPUSH
3445: LD_VAR 0 1
3449: PPUSH
3450: LD_INT 1
3452: PPUSH
3453: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3457: LD_INT 73
3459: PPUSH
3460: LD_VAR 0 1
3464: PPUSH
3465: LD_INT 1
3467: PPUSH
3468: CALL_OW 322
// end else
3472: GO 3504
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3474: LD_INT 25
3476: PPUSH
3477: LD_VAR 0 1
3481: PPUSH
3482: LD_INT 0
3484: PPUSH
3485: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3489: LD_INT 73
3491: PPUSH
3492: LD_VAR 0 1
3496: PPUSH
3497: LD_INT 0
3499: PPUSH
3500: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3504: LD_INT 24
3506: PPUSH
3507: LD_VAR 0 1
3511: PPUSH
3512: LD_INT 0
3514: PPUSH
3515: CALL_OW 322
// global_defined := true ;
3519: LD_ADDR_LOC 3
3523: PUSH
3524: LD_INT 1
3526: ST_TO_ADDR
// end ;
3527: LD_VAR 0 2
3531: RET
// every 0 0$1 do
3532: GO 3534
3534: DISABLE
// if ( def_siberite_bomb > 1 ) then
3535: LD_EXP 40
3539: PUSH
3540: LD_INT 1
3542: GREATER
3543: IFFALSE 3558
// begin wait ( siberite_bomb_Delay ) ;
3545: LD_EXP 12
3549: PPUSH
3550: CALL_OW 67
// EnableSibFiss ;
3554: CALL 3559 0 0
// end ;
3558: END
// function EnableSibFiss ; var i ; begin
3559: LD_INT 0
3561: PPUSH
3562: PPUSH
// for i := 1 to 8 do
3563: LD_ADDR_VAR 0 2
3567: PUSH
3568: DOUBLE
3569: LD_INT 1
3571: DEC
3572: ST_TO_ADDR
3573: LD_INT 8
3575: PUSH
3576: FOR_TO
3577: IFFALSE 3623
// if Side_Positions [ i ] then
3579: LD_EXP 16
3583: PUSH
3584: LD_VAR 0 2
3588: ARRAY
3589: IFFALSE 3621
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3591: LD_INT 25
3593: PPUSH
3594: LD_VAR 0 2
3598: PPUSH
3599: LD_INT 1
3601: PPUSH
3602: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3606: LD_INT 73
3608: PPUSH
3609: LD_VAR 0 2
3613: PPUSH
3614: LD_INT 1
3616: PPUSH
3617: CALL_OW 322
// end ;
3621: GO 3576
3623: POP
3624: POP
// end ;
3625: LD_VAR 0 1
3629: RET
// function prepare_sides ; var i ; begin
3630: LD_INT 0
3632: PPUSH
3633: PPUSH
// global_units := [ ] ;
3634: LD_ADDR_LOC 2
3638: PUSH
3639: EMPTY
3640: ST_TO_ADDR
// global_defined := false ;
3641: LD_ADDR_LOC 3
3645: PUSH
3646: LD_INT 0
3648: ST_TO_ADDR
// CountClassMembers ;
3649: CALL 3699 0 0
// for i := 1 to 8 do
3653: LD_ADDR_VAR 0 2
3657: PUSH
3658: DOUBLE
3659: LD_INT 1
3661: DEC
3662: ST_TO_ADDR
3663: LD_INT 8
3665: PUSH
3666: FOR_TO
3667: IFFALSE 3692
// if Side_Positions [ i ] then
3669: LD_EXP 16
3673: PUSH
3674: LD_VAR 0 2
3678: ARRAY
3679: IFFALSE 3690
// prepare_side ( i ) ;
3681: LD_VAR 0 2
3685: PPUSH
3686: CALL 2466 0 1
3690: GO 3666
3692: POP
3693: POP
// end ;
3694: LD_VAR 0 1
3698: RET
// function CountClassMembers ; var Mode ; begin
3699: LD_INT 0
3701: PPUSH
3702: PPUSH
// if No_Mechs then
3703: LD_EXP 42
3707: IFFALSE 3719
// Mode := 2 else
3709: LD_ADDR_VAR 0 2
3713: PUSH
3714: LD_INT 2
3716: ST_TO_ADDR
3717: GO 3727
// Mode := 1 ;
3719: LD_ADDR_VAR 0 2
3723: PUSH
3724: LD_INT 1
3726: ST_TO_ADDR
// neng := number_of_people ;
3727: LD_ADDR_LOC 5
3731: PUSH
3732: LD_EXP 3
3736: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
3737: LD_ADDR_LOC 8
3741: PUSH
3742: LD_LOC 5
3746: PUSH
3747: LD_INT 4
3749: PUSH
3750: LD_INT 3
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: PUSH
3757: LD_VAR 0 2
3761: ARRAY
3762: DIV
3763: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
3764: LD_LOC 8
3768: PUSH
3769: LD_EXP 2
3773: LESS
3774: IFFALSE 3786
// nsol := number_of_breastworks ;
3776: LD_ADDR_LOC 8
3780: PUSH
3781: LD_EXP 2
3785: ST_TO_ADDR
// neng := neng - nsol ;
3786: LD_ADDR_LOC 5
3790: PUSH
3791: LD_LOC 5
3795: PUSH
3796: LD_LOC 8
3800: MINUS
3801: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
3802: LD_ADDR_LOC 6
3806: PUSH
3807: LD_LOC 5
3811: PUSH
3812: LD_INT 3
3814: PUSH
3815: LD_INT 2
3817: PUSH
3818: EMPTY
3819: LIST
3820: LIST
3821: PUSH
3822: LD_VAR 0 2
3826: ARRAY
3827: DIV
3828: ST_TO_ADDR
// if ( nsci < 1 ) then
3829: LD_LOC 6
3833: PUSH
3834: LD_INT 1
3836: LESS
3837: IFFALSE 3847
// nsci := 1 ;
3839: LD_ADDR_LOC 6
3843: PUSH
3844: LD_INT 1
3846: ST_TO_ADDR
// neng := neng - nsci ;
3847: LD_ADDR_LOC 5
3851: PUSH
3852: LD_LOC 5
3856: PUSH
3857: LD_LOC 6
3861: MINUS
3862: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
3863: LD_ADDR_LOC 7
3867: PUSH
3868: LD_LOC 5
3872: PUSH
3873: LD_INT 2
3875: DIV
3876: PUSH
3877: LD_INT 0
3879: PUSH
3880: EMPTY
3881: LIST
3882: LIST
3883: PUSH
3884: LD_VAR 0 2
3888: ARRAY
3889: ST_TO_ADDR
// neng := neng - nmech ;
3890: LD_ADDR_LOC 5
3894: PUSH
3895: LD_LOC 5
3899: PUSH
3900: LD_LOC 7
3904: MINUS
3905: ST_TO_ADDR
// if ( neng < 1 ) then
3906: LD_LOC 5
3910: PUSH
3911: LD_INT 1
3913: LESS
3914: IFFALSE 3924
// neng := 1 ;
3916: LD_ADDR_LOC 5
3920: PUSH
3921: LD_INT 1
3923: ST_TO_ADDR
// end ;
3924: LD_VAR 0 1
3928: RET
// starting begin disable ( 98 ) ;
3929: LD_INT 98
3931: DISABLE_MARKED
// disable ( 99 ) ;
3932: LD_INT 99
3934: DISABLE_MARKED
// disable ( 400 ) ;
3935: LD_INT 400
3937: DISABLE_MARKED
// disable ( 401 ) ;
3938: LD_INT 401
3940: DISABLE_MARKED
// mp_selectmsg := true ;
3941: LD_ADDR_OWVAR 13
3945: PUSH
3946: LD_INT 1
3948: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
3949: CALL 483 0 0
// init_map ;
3953: CALL 0 0 0
// set_shared_visions_and_alliances ;
3957: CALL 1620 0 0
// ResetFog ;
3961: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
3965: LD_OWVAR 2
3969: PPUSH
3970: CALL_OW 520
// prepare_sides ;
3974: CALL 3630 0 0
// init_shipments_and_respawning ;
3978: CALL 4594 0 0
// Init_Win_Condition ;
3982: CALL 9942 0 0
// InitLimits ;
3986: CALL 8602 0 0
// ShowTimer ;
3990: CALL 9539 0 0
// music_nat := Side_Nations [ your_side ] ;
3994: LD_ADDR_OWVAR 71
3998: PUSH
3999: LD_EXP 17
4003: PUSH
4004: LD_OWVAR 2
4008: ARRAY
4009: ST_TO_ADDR
// if IAmSpec then
4010: CALL_OW 531
4014: IFFALSE 4038
// begin fogoff ( true ) ;
4016: LD_INT 1
4018: PPUSH
4019: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
4023: LD_INT 104
4025: PPUSH
4026: LD_INT 69
4028: PPUSH
4029: CALL_OW 86
// enable ( 400 ) ;
4033: LD_INT 400
4035: ENABLE_MARKED
// end else
4036: GO 4084
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4038: LD_EXP 21
4042: PUSH
4043: LD_EXP 16
4047: PUSH
4048: LD_OWVAR 2
4052: ARRAY
4053: ARRAY
4054: PUSH
4055: LD_INT 1
4057: ARRAY
4058: PPUSH
4059: LD_EXP 21
4063: PUSH
4064: LD_EXP 16
4068: PUSH
4069: LD_OWVAR 2
4073: ARRAY
4074: ARRAY
4075: PUSH
4076: LD_INT 2
4078: ARRAY
4079: PPUSH
4080: CALL_OW 86
// end ; end ; end_of_file
4084: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
4085: LD_VAR 0 1
4089: PPUSH
4090: CALL_OW 266
4094: PUSH
4095: LD_INT 0
4097: PUSH
4098: LD_INT 1
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: IN
4105: IFFALSE 4130
// SetBName ( b , @ & GetSide ( b ) ) ;
4107: LD_VAR 0 1
4111: PPUSH
4112: LD_STRING @
4114: PUSH
4115: LD_VAR 0 1
4119: PPUSH
4120: CALL_OW 255
4124: STR
4125: PPUSH
4126: CALL_OW 500
// if def_game_rules then
4130: LD_EXP 27
4134: IFFALSE 4171
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
4136: LD_VAR 0 1
4140: PPUSH
4141: LD_VAR 0 1
4145: PPUSH
4146: CALL_OW 266
4150: PPUSH
4151: LD_VAR 0 1
4155: PPUSH
4156: CALL_OW 255
4160: PPUSH
4161: LD_INT 0
4163: PPUSH
4164: LD_INT 1
4166: PPUSH
4167: CALL 9003 0 5
// end ;
4171: PPOPN 2
4173: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
4174: LD_VAR 0 1
4178: PPUSH
4179: CALL_OW 266
4183: PUSH
4184: LD_INT 0
4186: PUSH
4187: LD_INT 1
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: IN
4194: IFFALSE 4219
// SetBName ( b , @ & GetSide ( b ) ) ;
4196: LD_VAR 0 1
4200: PPUSH
4201: LD_STRING @
4203: PUSH
4204: LD_VAR 0 1
4208: PPUSH
4209: CALL_OW 255
4213: STR
4214: PPUSH
4215: CALL_OW 500
// if def_game_rules then
4219: LD_EXP 27
4223: IFFALSE 4262
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
4225: LD_VAR 0 1
4229: PPUSH
4230: LD_VAR 0 1
4234: PPUSH
4235: CALL_OW 266
4239: PPUSH
4240: LD_VAR 0 1
4244: PPUSH
4245: CALL_OW 255
4249: PPUSH
4250: LD_VAR 0 2
4254: PPUSH
4255: LD_INT 1
4257: PPUSH
4258: CALL 9003 0 5
// end ;
4262: PPOPN 3
4264: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
4265: LD_INT 0
4267: PPUSH
4268: PPUSH
4269: PPUSH
4270: PPUSH
// begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
4271: LD_VAR 0 1
4275: PPUSH
4276: CALL_OW 255
4280: PUSH
4281: LD_INT 0
4283: EQUAL
4284: PUSH
4285: LD_VAR 0 1
4289: PPUSH
4290: CALL_OW 257
4294: PUSH
4295: LD_INT 12
4297: EQUAL
4298: AND
4299: IFFALSE 4305
// CheckApemenAmount ;
4301: CALL 5730 0 0
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
4305: LD_VAR 0 1
4309: PPUSH
4310: CALL_OW 266
4314: PUSH
4315: LD_INT 0
4317: PUSH
4318: LD_INT 1
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: IN
4325: IFFALSE 4407
// begin pos := Side_Positions [ GetSide ( j ) ] ;
4327: LD_ADDR_VAR 0 4
4331: PUSH
4332: LD_EXP 16
4336: PUSH
4337: LD_VAR 0 1
4341: PPUSH
4342: CALL_OW 255
4346: ARRAY
4347: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
4348: LD_ADDR_VAR 0 2
4352: PUSH
4353: LD_EXP 21
4357: PUSH
4358: LD_VAR 0 4
4362: ARRAY
4363: PUSH
4364: LD_INT 1
4366: ARRAY
4367: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4368: LD_ADDR_VAR 0 3
4372: PUSH
4373: LD_EXP 21
4377: PUSH
4378: LD_VAR 0 4
4382: ARRAY
4383: PUSH
4384: LD_INT 2
4386: ARRAY
4387: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
4388: LD_VAR 0 2
4392: PPUSH
4393: LD_VAR 0 3
4397: PPUSH
4398: CALL_OW 420
4402: PPUSH
4403: CALL_OW 419
// end ; if def_game_rules then
4407: LD_EXP 27
4411: IFFALSE 4510
// if ( GetType ( j ) = 3 ) then
4413: LD_VAR 0 1
4417: PPUSH
4418: CALL_OW 247
4422: PUSH
4423: LD_INT 3
4425: EQUAL
4426: IFFALSE 4466
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
4428: LD_VAR 0 1
4432: PPUSH
4433: LD_VAR 0 1
4437: PPUSH
4438: CALL_OW 266
4442: PPUSH
4443: LD_VAR 0 1
4447: PPUSH
4448: CALL_OW 255
4452: PPUSH
4453: LD_INT 0
4455: PPUSH
4456: LD_INT 1
4458: NEG
4459: PPUSH
4460: CALL 9003 0 5
4464: GO 4510
// if ( GetChassis ( j ) = 25 ) then
4466: LD_VAR 0 1
4470: PPUSH
4471: CALL_OW 265
4475: PUSH
4476: LD_INT 25
4478: EQUAL
4479: IFFALSE 4510
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
4481: LD_VAR 0 1
4485: PPUSH
4486: LD_INT 37
4488: PPUSH
4489: LD_VAR 0 1
4493: PPUSH
4494: CALL_OW 255
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: LD_INT 1
4504: NEG
4505: PPUSH
4506: CALL 9003 0 5
// end ;
4510: PPOPN 5
4512: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
4513: LD_EXP 27
4517: PUSH
4518: LD_VAR 0 1
4522: PPUSH
4523: CALL_OW 265
4527: PUSH
4528: LD_INT 25
4530: EQUAL
4531: AND
4532: IFFALSE 4564
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
4534: LD_VAR 0 1
4538: PPUSH
4539: LD_INT 37
4541: PPUSH
4542: LD_VAR 0 1
4546: PPUSH
4547: CALL_OW 255
4551: PPUSH
4552: LD_VAR 0 3
4556: PPUSH
4557: LD_INT 1
4559: PPUSH
4560: CALL 9003 0 5
// end ;
4564: PPOPN 4
4566: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
4567: LD_VAR 0 1
4571: PPUSH
4572: LD_VAR 0 2
4576: PPUSH
4577: LD_VAR 0 3
4581: PPUSH
4582: LD_OWVAR 2
4586: PPUSH
4587: CALL 9703 0 4
4591: PPOPN 3
4593: END
// var shipment , respawn , inqueue ; export function init_shipments_and_respawning ; begin
4594: LD_INT 0
4596: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4597: LD_ADDR_LOC 9
4601: PUSH
4602: LD_INT 0
4604: PPUSH
4605: LD_INT 3
4607: PPUSH
4608: CALL_OW 12
4612: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
4613: LD_ADDR_LOC 10
4617: PUSH
4618: LD_INT 1
4620: PPUSH
4621: LD_INT 8
4623: PPUSH
4624: CALL_OW 12
4628: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4629: LD_ADDR_LOC 11
4633: PUSH
4634: LD_INT 0
4636: PUSH
4637: LD_INT 0
4639: PUSH
4640: LD_INT 0
4642: PUSH
4643: LD_INT 0
4645: PUSH
4646: LD_INT 0
4648: PUSH
4649: LD_INT 0
4651: PUSH
4652: LD_INT 0
4654: PUSH
4655: LD_INT 0
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: ST_TO_ADDR
// end ;
4668: LD_VAR 0 1
4672: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
4673: GO 4675
4675: DISABLE
4676: LD_INT 0
4678: PPUSH
4679: PPUSH
4680: PPUSH
4681: PPUSH
// begin if respawning_time_max = 0 then
4682: LD_EXP 10
4686: PUSH
4687: LD_INT 0
4689: EQUAL
4690: IFFALSE 4694
// exit ;
4692: GO 5201
// if respawn = 8 then
4694: LD_LOC 10
4698: PUSH
4699: LD_INT 8
4701: EQUAL
4702: IFFALSE 4714
// respawn := 1 else
4704: LD_ADDR_LOC 10
4708: PUSH
4709: LD_INT 1
4711: ST_TO_ADDR
4712: GO 4728
// respawn := respawn + 1 ;
4714: LD_ADDR_LOC 10
4718: PUSH
4719: LD_LOC 10
4723: PUSH
4724: LD_INT 1
4726: PLUS
4727: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
4728: LD_EXP 16
4732: PUSH
4733: LD_LOC 10
4737: ARRAY
4738: PUSH
4739: LD_LOC 11
4743: PUSH
4744: LD_LOC 10
4748: ARRAY
4749: NOT
4750: AND
4751: IFFALSE 5200
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
4753: LD_ADDR_VAR 0 1
4757: PUSH
4758: LD_INT 21
4760: PUSH
4761: LD_INT 1
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PUSH
4768: LD_INT 22
4770: PUSH
4771: LD_LOC 10
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: PUSH
4780: LD_INT 3
4782: PUSH
4783: LD_INT 23
4785: PUSH
4786: LD_INT 0
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: PPUSH
4799: CALL_OW 69
4803: ST_TO_ADDR
// if n < number_of_people then
4804: LD_VAR 0 1
4808: PUSH
4809: LD_EXP 3
4813: LESS
4814: IFFALSE 5197
// begin aktresp := respawn ;
4816: LD_ADDR_VAR 0 3
4820: PUSH
4821: LD_LOC 10
4825: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
4826: LD_ADDR_LOC 11
4830: PUSH
4831: LD_LOC 11
4835: PPUSH
4836: LD_VAR 0 3
4840: PPUSH
4841: LD_INT 1
4843: PPUSH
4844: CALL_OW 1
4848: ST_TO_ADDR
// enable ;
4849: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
4850: LD_EXP 9
4854: PPUSH
4855: LD_EXP 10
4859: PPUSH
4860: CALL_OW 12
4864: PPUSH
4865: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
4869: LD_ADDR_LOC 11
4873: PUSH
4874: LD_LOC 11
4878: PPUSH
4879: LD_VAR 0 3
4883: PPUSH
4884: LD_INT 0
4886: PPUSH
4887: CALL_OW 1
4891: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
4892: LD_ADDR_VAR 0 2
4896: PUSH
4897: LD_INT 21
4899: PUSH
4900: LD_INT 3
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PUSH
4907: LD_INT 2
4909: PUSH
4910: LD_INT 30
4912: PUSH
4913: LD_INT 0
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: LD_INT 30
4922: PUSH
4923: LD_INT 1
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: LIST
4934: PUSH
4935: LD_INT 50
4937: PUSH
4938: EMPTY
4939: LIST
4940: PUSH
4941: LD_INT 22
4943: PUSH
4944: LD_VAR 0 3
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: PPUSH
4959: CALL_OW 69
4963: ST_TO_ADDR
// if building_list = 0 then
4964: LD_VAR 0 2
4968: PUSH
4969: LD_INT 0
4971: EQUAL
4972: IFFALSE 5017
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
4974: LD_ADDR_VAR 0 2
4978: PUSH
4979: LD_INT 21
4981: PUSH
4982: LD_INT 3
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: LD_INT 50
4991: PUSH
4992: EMPTY
4993: LIST
4994: PUSH
4995: LD_INT 22
4997: PUSH
4998: LD_VAR 0 3
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: LIST
5011: PPUSH
5012: CALL_OW 69
5016: ST_TO_ADDR
// if building_list = 0 then
5017: LD_VAR 0 2
5021: PUSH
5022: LD_INT 0
5024: EQUAL
5025: IFFALSE 5029
// exit ;
5027: GO 5201
// hc_name :=  ;
5029: LD_ADDR_OWVAR 26
5033: PUSH
5034: LD_STRING 
5036: ST_TO_ADDR
// hc_importance := 0 ;
5037: LD_ADDR_OWVAR 32
5041: PUSH
5042: LD_INT 0
5044: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
5045: LD_INT 0
5047: PPUSH
5048: LD_INT 0
5050: PPUSH
5051: LD_EXP 4
5055: PUSH
5056: LD_INT 2
5058: DIV
5059: PPUSH
5060: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
5064: LD_ADDR_OWVAR 21
5068: PUSH
5069: LD_EXP 17
5073: PUSH
5074: LD_VAR 0 3
5078: ARRAY
5079: ST_TO_ADDR
// uc_side := aktresp ;
5080: LD_ADDR_OWVAR 20
5084: PUSH
5085: LD_VAR 0 3
5089: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5090: LD_ADDR_VAR 0 4
5094: PUSH
5095: LD_VAR 0 2
5099: PUSH
5100: LD_INT 1
5102: PPUSH
5103: LD_VAR 0 2
5107: PUSH
5108: LD_INT 0
5110: PLUS
5111: PPUSH
5112: CALL_OW 12
5116: ARRAY
5117: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5118: LD_VAR 0 4
5122: PPUSH
5123: CALL_OW 266
5127: PUSH
5128: LD_INT 0
5130: PUSH
5131: LD_INT 1
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: IN
5138: IFFALSE 5150
// n = 25 else
5140: LD_ADDR_VAR 0 1
5144: PUSH
5145: LD_INT 25
5147: ST_TO_ADDR
5148: GO 5158
// n = 10 ;
5150: LD_ADDR_VAR 0 1
5154: PUSH
5155: LD_INT 10
5157: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5158: CALL_OW 44
5162: PPUSH
5163: LD_VAR 0 4
5167: PPUSH
5168: CALL_OW 250
5172: PPUSH
5173: LD_VAR 0 4
5177: PPUSH
5178: CALL_OW 251
5182: PPUSH
5183: LD_VAR 0 1
5187: PPUSH
5188: LD_INT 1
5190: PPUSH
5191: CALL_OW 50
// end else
5195: GO 5198
// enable ;
5197: ENABLE
// end else
5198: GO 5201
// enable ;
5200: ENABLE
// end ;
5201: PPOPN 4
5203: END
// every 0 0$5 + 0 0$1.1 do var d ;
5204: GO 5206
5206: DISABLE
5207: LD_INT 0
5209: PPUSH
// begin case tick of 1 .. 1 1$0 :
5210: LD_OWVAR 1
5214: PUSH
5215: LD_INT 1
5217: DOUBLE
5218: GREATEREQUAL
5219: IFFALSE 5227
5221: LD_INT 2100
5223: DOUBLE
5224: LESSEQUAL
5225: IFTRUE 5229
5227: GO 5240
5229: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5230: LD_ADDR_VAR 0 1
5234: PUSH
5235: LD_INT 150
5237: ST_TO_ADDR
5238: GO 5423
5240: LD_INT 2100
5242: PUSH
5243: LD_INT 1
5245: PLUS
5246: DOUBLE
5247: GREATEREQUAL
5248: IFFALSE 5256
5250: LD_INT 10500
5252: DOUBLE
5253: LESSEQUAL
5254: IFTRUE 5258
5256: GO 5269
5258: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5259: LD_ADDR_VAR 0 1
5263: PUSH
5264: LD_INT 100
5266: ST_TO_ADDR
5267: GO 5423
5269: LD_INT 10500
5271: PUSH
5272: LD_INT 1
5274: PLUS
5275: DOUBLE
5276: GREATEREQUAL
5277: IFFALSE 5285
5279: LD_INT 21000
5281: DOUBLE
5282: LESSEQUAL
5283: IFTRUE 5287
5285: GO 5298
5287: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5288: LD_ADDR_VAR 0 1
5292: PUSH
5293: LD_INT 90
5295: ST_TO_ADDR
5296: GO 5423
5298: LD_INT 21000
5300: PUSH
5301: LD_INT 1
5303: PLUS
5304: DOUBLE
5305: GREATEREQUAL
5306: IFFALSE 5314
5308: LD_INT 42000
5310: DOUBLE
5311: LESSEQUAL
5312: IFTRUE 5316
5314: GO 5327
5316: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5317: LD_ADDR_VAR 0 1
5321: PUSH
5322: LD_INT 70
5324: ST_TO_ADDR
5325: GO 5423
5327: LD_INT 42000
5329: PUSH
5330: LD_INT 1
5332: PLUS
5333: DOUBLE
5334: GREATEREQUAL
5335: IFFALSE 5343
5337: LD_INT 63000
5339: DOUBLE
5340: LESSEQUAL
5341: IFTRUE 5345
5343: GO 5356
5345: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5346: LD_ADDR_VAR 0 1
5350: PUSH
5351: LD_INT 60
5353: ST_TO_ADDR
5354: GO 5423
5356: LD_INT 63000
5358: PUSH
5359: LD_INT 1
5361: PLUS
5362: DOUBLE
5363: GREATEREQUAL
5364: IFFALSE 5372
5366: LD_INT 105000
5368: DOUBLE
5369: LESSEQUAL
5370: IFTRUE 5374
5372: GO 5385
5374: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5375: LD_ADDR_VAR 0 1
5379: PUSH
5380: LD_INT 35
5382: ST_TO_ADDR
5383: GO 5423
5385: LD_INT 105000
5387: PUSH
5388: LD_INT 1
5390: PLUS
5391: DOUBLE
5392: GREATEREQUAL
5393: IFFALSE 5401
5395: LD_INT 630000
5397: DOUBLE
5398: LESSEQUAL
5399: IFTRUE 5403
5401: GO 5414
5403: POP
// d := 20 ; else
5404: LD_ADDR_VAR 0 1
5408: PUSH
5409: LD_INT 20
5411: ST_TO_ADDR
5412: GO 5423
5414: POP
// d := 0 ; end ;
5415: LD_ADDR_VAR 0 1
5419: PUSH
5420: LD_INT 0
5422: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
5423: LD_INT 1
5425: PPUSH
5426: LD_INT 10000
5428: PPUSH
5429: CALL_OW 12
5433: PUSH
5434: LD_VAR 0 1
5438: PUSH
5439: LD_EXP 7
5443: MUL
5444: LESSEQUAL
5445: IFFALSE 5499
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5447: LD_INT 1
5449: PPUSH
5450: LD_INT 140
5452: PPUSH
5453: CALL_OW 12
5457: PPUSH
5458: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
5462: LD_ADDR_LOC 9
5466: PUSH
5467: LD_LOC 9
5471: PUSH
5472: LD_INT 1
5474: PLUS
5475: PUSH
5476: LD_INT 4
5478: MOD
5479: ST_TO_ADDR
// CreateCratesArea ( 5 , nw + shipment , true ) ;
5480: LD_INT 5
5482: PPUSH
5483: LD_INT 3
5485: PUSH
5486: LD_LOC 9
5490: PLUS
5491: PPUSH
5492: LD_INT 1
5494: PPUSH
5495: CALL_OW 55
// end ; enable ;
5499: ENABLE
// end ;
5500: PPOPN 1
5502: END
// every 1 1$0 trigger def_shipments_density do
5503: LD_EXP 32
5507: IFFALSE 5543
5509: GO 5511
5511: DISABLE
// begin CreateCratesArea ( 5 , map_center , true ) ;
5512: LD_INT 5
5514: PPUSH
5515: LD_INT 7
5517: PPUSH
5518: LD_INT 1
5520: PPUSH
5521: CALL_OW 55
// wait ( 3 3$0 - ( 1 1$0 * def_shipments_density ) ) ;
5525: LD_INT 6300
5527: PUSH
5528: LD_INT 2100
5530: PUSH
5531: LD_EXP 32
5535: MUL
5536: MINUS
5537: PPUSH
5538: CALL_OW 67
// enable ;
5542: ENABLE
// end ; end_of_file
5543: END
// var _isDay ; every 0 0$10 do
5544: GO 5546
5546: DISABLE
// begin _isDay := true ;
5547: LD_ADDR_LOC 12
5551: PUSH
5552: LD_INT 1
5554: ST_TO_ADDR
// end ;
5555: END
// every 10 10$00 do
5556: GO 5558
5558: DISABLE
// begin _isDay := not _isDay ;
5559: LD_ADDR_LOC 12
5563: PUSH
5564: LD_LOC 12
5568: NOT
5569: ST_TO_ADDR
// if _isDay then
5570: LD_LOC 12
5574: IFFALSE 5593
// begin solar_recharge_percent := 100 ;
5576: LD_ADDR_OWVAR 79
5580: PUSH
5581: LD_INT 100
5583: ST_TO_ADDR
// LoadColorsTXT ( colors.txt ) ;
5584: LD_STRING colors.txt
5586: PPUSH
5587: CALL_OW 544
// end else
5591: GO 5608
// begin solar_recharge_percent := 0 ;
5593: LD_ADDR_OWVAR 79
5597: PUSH
5598: LD_INT 0
5600: ST_TO_ADDR
// LoadColorsTXT ( colors_night.txt ) ;
5601: LD_STRING colors_night.txt
5603: PPUSH
5604: CALL_OW 544
// end ; enable ;
5608: ENABLE
// end ; end_of_file
5609: END
// var _apemenIncrement , _apemenMaximum , _apemenSkillLevel , _apemenThreshold , _isSpawning , _wildApemenAmount ; every 0 0$15 do var i ;
5610: GO 5612
5612: DISABLE
5613: LD_INT 0
5615: PPUSH
// begin _apemenIncrement := 0 ;
5616: LD_ADDR_LOC 13
5620: PUSH
5621: LD_INT 0
5623: ST_TO_ADDR
// _apemenSkillLevel := 0 ;
5624: LD_ADDR_LOC 15
5628: PUSH
5629: LD_INT 0
5631: ST_TO_ADDR
// _isSpawning := true ;
5632: LD_ADDR_LOC 17
5636: PUSH
5637: LD_INT 1
5639: ST_TO_ADDR
// _wildApemenAmount := 0 ;
5640: LD_ADDR_LOC 18
5644: PUSH
5645: LD_INT 0
5647: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5648: LD_ADDR_VAR 0 1
5652: PUSH
5653: LD_EXP 16
5657: PUSH
5658: LD_INT 0
5660: PUSH
5661: EMPTY
5662: LIST
5663: DIFF
5664: PUSH
5665: FOR_IN
5666: IFFALSE 5684
// _apemenIncrement := _apemenIncrement + 1 ;
5668: LD_ADDR_LOC 13
5672: PUSH
5673: LD_LOC 13
5677: PUSH
5678: LD_INT 1
5680: PLUS
5681: ST_TO_ADDR
5682: GO 5665
5684: POP
5685: POP
// _apemenMaximum := _apemenIncrement * amount_of_apemen ;
5686: LD_ADDR_LOC 14
5690: PUSH
5691: LD_LOC 13
5695: PUSH
5696: LD_EXP 11
5700: MUL
5701: ST_TO_ADDR
// _apemenThreshold := _apemenMaximum / 2 ;
5702: LD_ADDR_LOC 16
5706: PUSH
5707: LD_LOC 14
5711: PUSH
5712: LD_INT 2
5714: DIVREAL
5715: ST_TO_ADDR
// prepare_apemen ;
5716: CALL 5808 0 0
// end ;
5720: PPOPN 1
5722: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
5723: CALL 5730 0 0
// end ;
5727: PPOPN 2
5729: END
// export function CheckApemenAmount ; begin
5730: LD_INT 0
5732: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
5733: LD_ADDR_LOC 18
5737: PUSH
5738: LD_LOC 18
5742: PUSH
5743: LD_INT 1
5745: MINUS
5746: ST_TO_ADDR
// if _isSpawning then
5747: LD_LOC 17
5751: IFFALSE 5755
// exit ;
5753: GO 5803
// if _wildApemenAmount <= ( _apemenThreshold ) then
5755: LD_LOC 18
5759: PUSH
5760: LD_LOC 16
5764: LESSEQUAL
5765: IFFALSE 5803
// begin if _apemenSkillLevel < 8 then
5767: LD_LOC 15
5771: PUSH
5772: LD_INT 8
5774: LESS
5775: IFFALSE 5791
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
5777: LD_ADDR_LOC 15
5781: PUSH
5782: LD_LOC 15
5786: PUSH
5787: LD_INT 1
5789: PLUS
5790: ST_TO_ADDR
// _isSpawning := true ;
5791: LD_ADDR_LOC 17
5795: PUSH
5796: LD_INT 1
5798: ST_TO_ADDR
// prepare_apemen ;
5799: CALL 5808 0 0
// end ; end ;
5803: LD_VAR 0 1
5807: RET
// function prepare_apemen ; var i ; begin
5808: LD_INT 0
5810: PPUSH
5811: PPUSH
// if not amount_of_apemen then
5812: LD_EXP 11
5816: NOT
5817: IFFALSE 5821
// exit ;
5819: GO 6000
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5821: LD_INT 1050
5823: PPUSH
5824: LD_INT 3150
5826: PPUSH
5827: CALL_OW 12
5831: PPUSH
5832: CALL_OW 67
// apeman_init ;
5836: CALL 6005 0 0
// for i in ( Side_Positions diff [ 0 ] ) do
5840: LD_ADDR_VAR 0 2
5844: PUSH
5845: LD_EXP 16
5849: PUSH
5850: LD_INT 0
5852: PUSH
5853: EMPTY
5854: LIST
5855: DIFF
5856: PUSH
5857: FOR_IN
5858: IFFALSE 5962
// begin if i = 1 then
5860: LD_VAR 0 2
5864: PUSH
5865: LD_INT 1
5867: EQUAL
5868: IFFALSE 5885
// PlaceUnitArea ( CreateHuman , north_apeman , false ) ;
5870: CALL_OW 44
5874: PPUSH
5875: LD_INT 1
5877: PPUSH
5878: LD_INT 0
5880: PPUSH
5881: CALL_OW 49
// if i = 2 then
5885: LD_VAR 0 2
5889: PUSH
5890: LD_INT 2
5892: EQUAL
5893: IFFALSE 5910
// PlaceUnitArea ( CreateHuman , north_apeman , false ) ;
5895: CALL_OW 44
5899: PPUSH
5900: LD_INT 1
5902: PPUSH
5903: LD_INT 0
5905: PPUSH
5906: CALL_OW 49
// if i = 3 then
5910: LD_VAR 0 2
5914: PUSH
5915: LD_INT 3
5917: EQUAL
5918: IFFALSE 5935
// PlaceUnitArea ( CreateHuman , south_apeman , false ) ;
5920: CALL_OW 44
5924: PPUSH
5925: LD_INT 2
5927: PPUSH
5928: LD_INT 0
5930: PPUSH
5931: CALL_OW 49
// if i = 4 then
5935: LD_VAR 0 2
5939: PUSH
5940: LD_INT 4
5942: EQUAL
5943: IFFALSE 5960
// PlaceUnitArea ( CreateHuman , south_apeman , false ) ;
5945: CALL_OW 44
5949: PPUSH
5950: LD_INT 2
5952: PPUSH
5953: LD_INT 0
5955: PPUSH
5956: CALL_OW 49
// end ;
5960: GO 5857
5962: POP
5963: POP
// _wildApemenAmount := _wildApemenAmount + _apemenIncrement ;
5964: LD_ADDR_LOC 18
5968: PUSH
5969: LD_LOC 18
5973: PUSH
5974: LD_LOC 13
5978: PLUS
5979: ST_TO_ADDR
// until _wildApemenAmount >= _apemenMaximum ;
5980: LD_LOC 18
5984: PUSH
5985: LD_LOC 14
5989: GREATEREQUAL
5990: IFFALSE 5821
// _isSpawning := false ;
5992: LD_ADDR_LOC 17
5996: PUSH
5997: LD_INT 0
5999: ST_TO_ADDR
// end ;
6000: LD_VAR 0 1
6004: RET
// function apeman_init ; begin
6005: LD_INT 0
6007: PPUSH
// uc_side := 0 ;
6008: LD_ADDR_OWVAR 20
6012: PUSH
6013: LD_INT 0
6015: ST_TO_ADDR
// uc_nation := nation_nature ;
6016: LD_ADDR_OWVAR 21
6020: PUSH
6021: LD_INT 0
6023: ST_TO_ADDR
// hc_class := class_apeman ;
6024: LD_ADDR_OWVAR 28
6028: PUSH
6029: LD_INT 12
6031: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
6032: LD_ADDR_OWVAR 30
6036: PUSH
6037: LD_INT 2
6039: PUSH
6040: LD_INT 2
6042: PUSH
6043: LD_INT 2
6045: PUSH
6046: LD_INT 2
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
6055: LD_ADDR_OWVAR 31
6059: PUSH
6060: LD_INT 0
6062: PPUSH
6063: LD_INT 2
6065: PPUSH
6066: CALL_OW 12
6070: PUSH
6071: LD_LOC 15
6075: PLUS
6076: PUSH
6077: LD_INT 0
6079: PPUSH
6080: LD_INT 2
6082: PPUSH
6083: CALL_OW 12
6087: PUSH
6088: LD_LOC 15
6092: PLUS
6093: PUSH
6094: LD_INT 0
6096: PPUSH
6097: LD_INT 2
6099: PPUSH
6100: CALL_OW 12
6104: PUSH
6105: LD_LOC 15
6109: PLUS
6110: PUSH
6111: LD_INT 0
6113: PPUSH
6114: LD_INT 2
6116: PPUSH
6117: CALL_OW 12
6121: PUSH
6122: LD_LOC 15
6126: PLUS
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
6134: LD_ADDR_OWVAR 29
6138: PUSH
6139: LD_INT 10
6141: PUSH
6142: LD_INT 12
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: ST_TO_ADDR
// hc_sex := sex_male ;
6149: LD_ADDR_OWVAR 27
6153: PUSH
6154: LD_INT 1
6156: ST_TO_ADDR
// hc_importance := 0 ;
6157: LD_ADDR_OWVAR 32
6161: PUSH
6162: LD_INT 0
6164: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
6165: LD_ADDR_OWVAR 35
6169: PUSH
6170: LD_INT 20
6172: NEG
6173: PPUSH
6174: LD_INT 20
6176: PPUSH
6177: CALL_OW 12
6181: ST_TO_ADDR
// end ; end_of_file
6182: LD_VAR 0 1
6186: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6187: LD_INT 0
6189: PPUSH
6190: PPUSH
// for un in battle_flags_id do
6191: LD_ADDR_VAR 0 2
6195: PUSH
6196: LD_EXP 23
6200: PUSH
6201: FOR_IN
6202: IFFALSE 6277
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6204: LD_VAR 0 2
6208: PPUSH
6209: LD_INT 1
6211: PUSH
6212: LD_LOC 19
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: PUSH
6221: LD_INT 2
6223: PUSH
6224: LD_LOC 19
6228: PUSH
6229: LD_INT 2
6231: DIV
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PUSH
6237: LD_INT 3
6239: PUSH
6240: LD_LOC 19
6244: PUSH
6245: LD_INT 5
6247: DIV
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 20
6255: PUSH
6256: LD_LOC 19
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: PPUSH
6271: CALL_OW 423
6275: GO 6201
6277: POP
6278: POP
// end ;
6279: LD_VAR 0 1
6283: RET
// every 0 0$0.1 do var un ;
6284: GO 6286
6286: DISABLE
6287: LD_INT 0
6289: PPUSH
// begin if not def_morale_flags then
6290: LD_EXP 36
6294: NOT
6295: IFFALSE 6299
// exit ;
6297: GO 6376
// if not morale_decreasing_time then
6299: LD_EXP 8
6303: NOT
6304: IFFALSE 6308
// exit ;
6306: GO 6376
// strength = 100 ;
6308: LD_ADDR_LOC 19
6312: PUSH
6313: LD_INT 100
6315: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6316: LD_EXP 8
6320: PPUSH
6321: CALL_OW 67
// strength := strength - 1 ;
6325: LD_ADDR_LOC 19
6329: PUSH
6330: LD_LOC 19
6334: PUSH
6335: LD_INT 1
6337: MINUS
6338: ST_TO_ADDR
// Update_Flags ;
6339: CALL 6187 0 0
// until not strength ;
6343: LD_LOC 19
6347: NOT
6348: IFFALSE 6316
// for un in battle_flags_id do
6350: LD_ADDR_VAR 0 1
6354: PUSH
6355: LD_EXP 23
6359: PUSH
6360: FOR_IN
6361: IFFALSE 6374
// KillBattleFlag ( un ) ;
6363: LD_VAR 0 1
6367: PPUSH
6368: CALL_OW 419
6372: GO 6360
6374: POP
6375: POP
// end ; end_of_file
6376: PPOPN 1
6378: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
6379: LD_INT 0
6381: PPUSH
6382: PPUSH
// if ( not IAmSpec ) then
6383: CALL_OW 531
6387: NOT
6388: IFFALSE 6404
// Result := Limits_Info ^  ;
6390: LD_ADDR_VAR 0 1
6394: PUSH
6395: LD_LOC 31
6399: PUSH
6400: LD_STRING 
6402: ADD
6403: ST_TO_ADDR
// for i := 1 to 8 do
6404: LD_ADDR_VAR 0 2
6408: PUSH
6409: DOUBLE
6410: LD_INT 1
6412: DEC
6413: ST_TO_ADDR
6414: LD_INT 8
6416: PUSH
6417: FOR_TO
6418: IFFALSE 6463
// if Cheaters [ i ] then
6420: LD_LOC 32
6424: PUSH
6425: LD_VAR 0 2
6429: ARRAY
6430: IFFALSE 6461
// Result := Result ^ [ #Cheater , i , i ] ;
6432: LD_ADDR_VAR 0 1
6436: PUSH
6437: LD_VAR 0 1
6441: PUSH
6442: LD_STRING #Cheater
6444: PUSH
6445: LD_VAR 0 2
6449: PUSH
6450: LD_VAR 0 2
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: ADD
6460: ST_TO_ADDR
6461: GO 6417
6463: POP
6464: POP
// end ;
6465: LD_VAR 0 1
6469: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
6470: LD_INT 0
6472: PPUSH
6473: PPUSH
6474: PPUSH
6475: PPUSH
6476: PPUSH
// case Game_Type of 10 :
6477: LD_EXP 26
6481: PUSH
6482: LD_INT 10
6484: DOUBLE
6485: EQUAL
6486: IFTRUE 6490
6488: GO 6501
6490: POP
// def_game_rules := 1 ; 11 :
6491: LD_ADDR_EXP 27
6495: PUSH
6496: LD_INT 1
6498: ST_TO_ADDR
6499: GO 6521
6501: LD_INT 11
6503: DOUBLE
6504: EQUAL
6505: IFTRUE 6509
6507: GO 6520
6509: POP
// def_game_rules := 3 ; end ;
6510: LD_ADDR_EXP 27
6514: PUSH
6515: LD_INT 3
6517: ST_TO_ADDR
6518: GO 6521
6520: POP
// case def_game_rules of 0 :
6521: LD_EXP 27
6525: PUSH
6526: LD_INT 0
6528: DOUBLE
6529: EQUAL
6530: IFTRUE 6534
6532: GO 6539
6534: POP
// exit ; 1 :
6535: GO 8597
6537: GO 8497
6539: LD_INT 1
6541: DOUBLE
6542: EQUAL
6543: IFTRUE 6547
6545: GO 6763
6547: POP
// begin def_base_level := 2 ;
6548: LD_ADDR_EXP 28
6552: PUSH
6553: LD_INT 2
6555: ST_TO_ADDR
// def_amount_of_people := 2 ;
6556: LD_ADDR_EXP 29
6560: PUSH
6561: LD_INT 2
6563: ST_TO_ADDR
// def_skill_level := 1 ;
6564: LD_ADDR_EXP 30
6568: PUSH
6569: LD_INT 1
6571: ST_TO_ADDR
// def_starting_resources := 2 ;
6572: LD_ADDR_EXP 31
6576: PUSH
6577: LD_INT 2
6579: ST_TO_ADDR
// def_shipments_density := 1 ;
6580: LD_ADDR_EXP 32
6584: PUSH
6585: LD_INT 1
6587: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
6588: LD_ADDR_EXP 33
6592: PUSH
6593: LD_INT 0
6595: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
6596: LD_ADDR_EXP 34
6600: PUSH
6601: LD_INT 1
6603: ST_TO_ADDR
// def_shared_vision := 1 ;
6604: LD_ADDR_EXP 35
6608: PUSH
6609: LD_INT 1
6611: ST_TO_ADDR
// def_morale_flags := 3 ;
6612: LD_ADDR_EXP 36
6616: PUSH
6617: LD_INT 3
6619: ST_TO_ADDR
// def_siberite_detection := 1 ;
6620: LD_ADDR_EXP 37
6624: PUSH
6625: LD_INT 1
6627: ST_TO_ADDR
// def_people_respawning := 1 ;
6628: LD_ADDR_EXP 38
6632: PUSH
6633: LD_INT 1
6635: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
6636: LD_ADDR_EXP 39
6640: PUSH
6641: LD_INT 1
6643: ST_TO_ADDR
// def_siberite_bomb := 0 ;
6644: LD_ADDR_EXP 40
6648: PUSH
6649: LD_INT 0
6651: ST_TO_ADDR
// def_builduptime := 2 ;
6652: LD_ADDR_EXP 41
6656: PUSH
6657: LD_INT 2
6659: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
6660: LD_ADDR_VAR 0 2
6664: PUSH
6665: EMPTY
6666: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
6667: LD_ADDR_VAR 0 3
6671: PUSH
6672: EMPTY
6673: ST_TO_ADDR
// Banned_Weapons := [ ] ;
6674: LD_ADDR_LOC 26
6678: PUSH
6679: EMPTY
6680: ST_TO_ADDR
// Banned_Chassis := [ ] ;
6681: LD_ADDR_LOC 27
6685: PUSH
6686: EMPTY
6687: ST_TO_ADDR
// Banned_Controls := [ ] ;
6688: LD_ADDR_LOC 28
6692: PUSH
6693: EMPTY
6694: ST_TO_ADDR
// Banned_Engines := [ ] ;
6695: LD_ADDR_LOC 29
6699: PUSH
6700: EMPTY
6701: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
6702: LD_ADDR_LOC 24
6706: PUSH
6707: LD_INT 37
6709: PUSH
6710: EMPTY
6711: LIST
6712: PUSH
6713: LD_INT 4
6715: PUSH
6716: LD_INT 5
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 31
6725: PUSH
6726: LD_INT 32
6728: PUSH
6729: LD_INT 33
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: LIST
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
6742: LD_ADDR_LOC 25
6746: PUSH
6747: LD_INT 2
6749: PUSH
6750: LD_INT 2
6752: PUSH
6753: LD_INT 4
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: ST_TO_ADDR
// end ; 2 :
6761: GO 8497
6763: LD_INT 2
6765: DOUBLE
6766: EQUAL
6767: IFTRUE 6771
6769: GO 6980
6771: POP
// begin def_base_level := 1 ;
6772: LD_ADDR_EXP 28
6776: PUSH
6777: LD_INT 1
6779: ST_TO_ADDR
// def_amount_of_people := 2 ;
6780: LD_ADDR_EXP 29
6784: PUSH
6785: LD_INT 2
6787: ST_TO_ADDR
// def_skill_level := 3 ;
6788: LD_ADDR_EXP 30
6792: PUSH
6793: LD_INT 3
6795: ST_TO_ADDR
// def_starting_resources := 3 ;
6796: LD_ADDR_EXP 31
6800: PUSH
6801: LD_INT 3
6803: ST_TO_ADDR
// def_shipments_density := 2 ;
6804: LD_ADDR_EXP 32
6808: PUSH
6809: LD_INT 2
6811: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
6812: LD_ADDR_EXP 33
6816: PUSH
6817: LD_INT 1
6819: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
6820: LD_ADDR_EXP 34
6824: PUSH
6825: LD_INT 2
6827: ST_TO_ADDR
// def_shared_vision := 1 ;
6828: LD_ADDR_EXP 35
6832: PUSH
6833: LD_INT 1
6835: ST_TO_ADDR
// def_morale_flags := 0 ;
6836: LD_ADDR_EXP 36
6840: PUSH
6841: LD_INT 0
6843: ST_TO_ADDR
// def_siberite_detection := 1 ;
6844: LD_ADDR_EXP 37
6848: PUSH
6849: LD_INT 1
6851: ST_TO_ADDR
// def_people_respawning := 0 ;
6852: LD_ADDR_EXP 38
6856: PUSH
6857: LD_INT 0
6859: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
6860: LD_ADDR_EXP 39
6864: PUSH
6865: LD_INT 0
6867: ST_TO_ADDR
// def_siberite_bomb := 0 ;
6868: LD_ADDR_EXP 40
6872: PUSH
6873: LD_INT 0
6875: ST_TO_ADDR
// def_builduptime := 2 ;
6876: LD_ADDR_EXP 41
6880: PUSH
6881: LD_INT 2
6883: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
6884: LD_ADDR_VAR 0 2
6888: PUSH
6889: LD_INT 1
6891: PUSH
6892: EMPTY
6893: LIST
6894: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
6895: LD_ADDR_VAR 0 3
6899: PUSH
6900: EMPTY
6901: ST_TO_ADDR
// Banned_Weapons := [ ] ;
6902: LD_ADDR_LOC 26
6906: PUSH
6907: EMPTY
6908: ST_TO_ADDR
// Banned_Chassis := [ ] ;
6909: LD_ADDR_LOC 27
6913: PUSH
6914: EMPTY
6915: ST_TO_ADDR
// Banned_Controls := [ ] ;
6916: LD_ADDR_LOC 28
6920: PUSH
6921: EMPTY
6922: ST_TO_ADDR
// Banned_Engines := [ ] ;
6923: LD_ADDR_LOC 29
6927: PUSH
6928: EMPTY
6929: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
6930: LD_ADDR_LOC 24
6934: PUSH
6935: LD_INT 4
6937: PUSH
6938: LD_INT 5
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: LD_INT 31
6947: PUSH
6948: LD_INT 32
6950: PUSH
6951: LD_INT 33
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
6963: LD_ADDR_LOC 25
6967: PUSH
6968: LD_INT 1
6970: PUSH
6971: LD_INT 2
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: ST_TO_ADDR
// end ; 3 :
6978: GO 8497
6980: LD_INT 3
6982: DOUBLE
6983: EQUAL
6984: IFTRUE 6988
6986: GO 7231
6988: POP
// begin def_base_level := 1 ;
6989: LD_ADDR_EXP 28
6993: PUSH
6994: LD_INT 1
6996: ST_TO_ADDR
// def_amount_of_people := 2 ;
6997: LD_ADDR_EXP 29
7001: PUSH
7002: LD_INT 2
7004: ST_TO_ADDR
// def_skill_level := 3 ;
7005: LD_ADDR_EXP 30
7009: PUSH
7010: LD_INT 3
7012: ST_TO_ADDR
// def_starting_resources := 3 ;
7013: LD_ADDR_EXP 31
7017: PUSH
7018: LD_INT 3
7020: ST_TO_ADDR
// def_shipments_density := 1 ;
7021: LD_ADDR_EXP 32
7025: PUSH
7026: LD_INT 1
7028: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7029: LD_ADDR_EXP 33
7033: PUSH
7034: LD_INT 0
7036: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7037: LD_ADDR_EXP 34
7041: PUSH
7042: LD_INT 1
7044: ST_TO_ADDR
// def_shared_vision := 1 ;
7045: LD_ADDR_EXP 35
7049: PUSH
7050: LD_INT 1
7052: ST_TO_ADDR
// def_morale_flags := 0 ;
7053: LD_ADDR_EXP 36
7057: PUSH
7058: LD_INT 0
7060: ST_TO_ADDR
// def_siberite_detection := 1 ;
7061: LD_ADDR_EXP 37
7065: PUSH
7066: LD_INT 1
7068: ST_TO_ADDR
// def_people_respawning := 0 ;
7069: LD_ADDR_EXP 38
7073: PUSH
7074: LD_INT 0
7076: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
7077: LD_ADDR_EXP 39
7081: PUSH
7082: LD_INT 2
7084: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7085: LD_ADDR_EXP 40
7089: PUSH
7090: LD_INT 0
7092: ST_TO_ADDR
// def_builduptime := 1 ;
7093: LD_ADDR_EXP 41
7097: PUSH
7098: LD_INT 1
7100: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
7101: LD_ADDR_VAR 0 2
7105: PUSH
7106: LD_INT 23
7108: PUSH
7109: EMPTY
7110: LIST
7111: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
7112: LD_ADDR_VAR 0 3
7116: PUSH
7117: LD_INT 2
7119: PUSH
7120: LD_INT 37
7122: PUSH
7123: LD_INT 32
7125: PUSH
7126: LD_INT 33
7128: PUSH
7129: LD_INT 36
7131: PUSH
7132: LD_INT 16
7134: PUSH
7135: LD_INT 23
7137: PUSH
7138: LD_INT 21
7140: PUSH
7141: LD_INT 18
7143: PUSH
7144: LD_INT 22
7146: PUSH
7147: LD_INT 20
7149: PUSH
7150: LD_INT 19
7152: PUSH
7153: LD_INT 25
7155: PUSH
7156: LD_INT 17
7158: PUSH
7159: LD_INT 24
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7179: LD_ADDR_LOC 26
7183: PUSH
7184: EMPTY
7185: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7186: LD_ADDR_LOC 27
7190: PUSH
7191: EMPTY
7192: ST_TO_ADDR
// Banned_Controls := [ ] ;
7193: LD_ADDR_LOC 28
7197: PUSH
7198: EMPTY
7199: ST_TO_ADDR
// Banned_Engines := [ ] ;
7200: LD_ADDR_LOC 29
7204: PUSH
7205: EMPTY
7206: ST_TO_ADDR
// Restricted_Builds := [ ] ;
7207: LD_ADDR_LOC 24
7211: PUSH
7212: EMPTY
7213: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
7214: LD_ADDR_LOC 25
7218: PUSH
7219: EMPTY
7220: ST_TO_ADDR
// No_Mechs := true ;
7221: LD_ADDR_EXP 42
7225: PUSH
7226: LD_INT 1
7228: ST_TO_ADDR
// end ; 4 :
7229: GO 8497
7231: LD_INT 4
7233: DOUBLE
7234: EQUAL
7235: IFTRUE 7239
7237: GO 7414
7239: POP
// begin def_base_level := 1 ;
7240: LD_ADDR_EXP 28
7244: PUSH
7245: LD_INT 1
7247: ST_TO_ADDR
// def_amount_of_people := 2 ;
7248: LD_ADDR_EXP 29
7252: PUSH
7253: LD_INT 2
7255: ST_TO_ADDR
// def_skill_level := 3 ;
7256: LD_ADDR_EXP 30
7260: PUSH
7261: LD_INT 3
7263: ST_TO_ADDR
// def_starting_resources := 3 ;
7264: LD_ADDR_EXP 31
7268: PUSH
7269: LD_INT 3
7271: ST_TO_ADDR
// def_shipments_density := 2 ;
7272: LD_ADDR_EXP 32
7276: PUSH
7277: LD_INT 2
7279: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
7280: LD_ADDR_EXP 33
7284: PUSH
7285: LD_INT 1
7287: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
7288: LD_ADDR_EXP 34
7292: PUSH
7293: LD_INT 2
7295: ST_TO_ADDR
// def_shared_vision := 1 ;
7296: LD_ADDR_EXP 35
7300: PUSH
7301: LD_INT 1
7303: ST_TO_ADDR
// def_morale_flags := 0 ;
7304: LD_ADDR_EXP 36
7308: PUSH
7309: LD_INT 0
7311: ST_TO_ADDR
// def_siberite_detection := 1 ;
7312: LD_ADDR_EXP 37
7316: PUSH
7317: LD_INT 1
7319: ST_TO_ADDR
// def_people_respawning := 0 ;
7320: LD_ADDR_EXP 38
7324: PUSH
7325: LD_INT 0
7327: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
7328: LD_ADDR_EXP 39
7332: PUSH
7333: LD_INT 0
7335: ST_TO_ADDR
// def_siberite_bomb := 1 ;
7336: LD_ADDR_EXP 40
7340: PUSH
7341: LD_INT 1
7343: ST_TO_ADDR
// def_builduptime := 3 ;
7344: LD_ADDR_EXP 41
7348: PUSH
7349: LD_INT 3
7351: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
7352: LD_ADDR_VAR 0 2
7356: PUSH
7357: LD_INT 1
7359: PUSH
7360: EMPTY
7361: LIST
7362: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
7363: LD_ADDR_VAR 0 3
7367: PUSH
7368: EMPTY
7369: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7370: LD_ADDR_LOC 26
7374: PUSH
7375: EMPTY
7376: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7377: LD_ADDR_LOC 27
7381: PUSH
7382: EMPTY
7383: ST_TO_ADDR
// Banned_Controls := [ ] ;
7384: LD_ADDR_LOC 28
7388: PUSH
7389: EMPTY
7390: ST_TO_ADDR
// Banned_Engines := [ ] ;
7391: LD_ADDR_LOC 29
7395: PUSH
7396: EMPTY
7397: ST_TO_ADDR
// Restricted_Builds := [ ] ;
7398: LD_ADDR_LOC 24
7402: PUSH
7403: EMPTY
7404: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
7405: LD_ADDR_LOC 25
7409: PUSH
7410: EMPTY
7411: ST_TO_ADDR
// end ; 5 :
7412: GO 8497
7414: LD_INT 5
7416: DOUBLE
7417: EQUAL
7418: IFTRUE 7422
7420: GO 7671
7422: POP
// begin def_base_level := 0 ;
7423: LD_ADDR_EXP 28
7427: PUSH
7428: LD_INT 0
7430: ST_TO_ADDR
// def_amount_of_people := 0 ;
7431: LD_ADDR_EXP 29
7435: PUSH
7436: LD_INT 0
7438: ST_TO_ADDR
// def_skill_level := 0 ;
7439: LD_ADDR_EXP 30
7443: PUSH
7444: LD_INT 0
7446: ST_TO_ADDR
// def_starting_resources := 0 ;
7447: LD_ADDR_EXP 31
7451: PUSH
7452: LD_INT 0
7454: ST_TO_ADDR
// def_shipments_density := 0 ;
7455: LD_ADDR_EXP 32
7459: PUSH
7460: LD_INT 0
7462: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7463: LD_ADDR_EXP 33
7467: PUSH
7468: LD_INT 0
7470: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
7471: LD_ADDR_EXP 34
7475: PUSH
7476: LD_INT 0
7478: ST_TO_ADDR
// def_shared_vision := 1 ;
7479: LD_ADDR_EXP 35
7483: PUSH
7484: LD_INT 1
7486: ST_TO_ADDR
// def_morale_flags := 0 ;
7487: LD_ADDR_EXP 36
7491: PUSH
7492: LD_INT 0
7494: ST_TO_ADDR
// def_siberite_detection := 0 ;
7495: LD_ADDR_EXP 37
7499: PUSH
7500: LD_INT 0
7502: ST_TO_ADDR
// def_people_respawning := 1 ;
7503: LD_ADDR_EXP 38
7507: PUSH
7508: LD_INT 1
7510: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
7511: LD_ADDR_EXP 39
7515: PUSH
7516: LD_INT 1
7518: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7519: LD_ADDR_EXP 40
7523: PUSH
7524: LD_INT 0
7526: ST_TO_ADDR
// def_builduptime := 0 ;
7527: LD_ADDR_EXP 41
7531: PUSH
7532: LD_INT 0
7534: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
7535: LD_ADDR_VAR 0 2
7539: PUSH
7540: LD_INT 10
7542: PUSH
7543: LD_INT 3
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
7550: LD_ADDR_VAR 0 3
7554: PUSH
7555: LD_INT 12
7557: PUSH
7558: LD_INT 11
7560: PUSH
7561: LD_INT 14
7563: PUSH
7564: LD_INT 13
7566: PUSH
7567: LD_INT 5
7569: PUSH
7570: LD_INT 24
7572: PUSH
7573: LD_INT 21
7575: PUSH
7576: LD_INT 33
7578: PUSH
7579: LD_INT 36
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
7593: LD_ADDR_LOC 26
7597: PUSH
7598: LD_INT 31
7600: PUSH
7601: EMPTY
7602: LIST
7603: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7604: LD_ADDR_LOC 27
7608: PUSH
7609: EMPTY
7610: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
7611: LD_ADDR_LOC 28
7615: PUSH
7616: LD_INT 2
7618: PUSH
7619: EMPTY
7620: LIST
7621: ST_TO_ADDR
// Banned_Engines := [ ] ;
7622: LD_ADDR_LOC 29
7626: PUSH
7627: EMPTY
7628: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
7629: LD_ADDR_LOC 24
7633: PUSH
7634: LD_INT 4
7636: PUSH
7637: EMPTY
7638: LIST
7639: PUSH
7640: LD_INT 31
7642: PUSH
7643: LD_INT 32
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
7654: LD_ADDR_LOC 25
7658: PUSH
7659: LD_INT 1
7661: PUSH
7662: LD_INT 1
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: ST_TO_ADDR
// end ; 6 :
7669: GO 8497
7671: LD_INT 6
7673: DOUBLE
7674: EQUAL
7675: IFTRUE 7679
7677: GO 7882
7679: POP
// begin def_base_level := 1 ;
7680: LD_ADDR_EXP 28
7684: PUSH
7685: LD_INT 1
7687: ST_TO_ADDR
// def_amount_of_people := 2 ;
7688: LD_ADDR_EXP 29
7692: PUSH
7693: LD_INT 2
7695: ST_TO_ADDR
// def_skill_level := 3 ;
7696: LD_ADDR_EXP 30
7700: PUSH
7701: LD_INT 3
7703: ST_TO_ADDR
// def_starting_resources := 3 ;
7704: LD_ADDR_EXP 31
7708: PUSH
7709: LD_INT 3
7711: ST_TO_ADDR
// def_shipments_density := 1 ;
7712: LD_ADDR_EXP 32
7716: PUSH
7717: LD_INT 1
7719: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
7720: LD_ADDR_EXP 33
7724: PUSH
7725: LD_INT 0
7727: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
7728: LD_ADDR_EXP 34
7732: PUSH
7733: LD_INT 1
7735: ST_TO_ADDR
// def_shared_vision := 1 ;
7736: LD_ADDR_EXP 35
7740: PUSH
7741: LD_INT 1
7743: ST_TO_ADDR
// def_morale_flags := 0 ;
7744: LD_ADDR_EXP 36
7748: PUSH
7749: LD_INT 0
7751: ST_TO_ADDR
// def_siberite_detection := 1 ;
7752: LD_ADDR_EXP 37
7756: PUSH
7757: LD_INT 1
7759: ST_TO_ADDR
// def_people_respawning := 2 ;
7760: LD_ADDR_EXP 38
7764: PUSH
7765: LD_INT 2
7767: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
7768: LD_ADDR_EXP 39
7772: PUSH
7773: LD_INT 1
7775: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7776: LD_ADDR_EXP 40
7780: PUSH
7781: LD_INT 0
7783: ST_TO_ADDR
// def_builduptime := 1 ;
7784: LD_ADDR_EXP 41
7788: PUSH
7789: LD_INT 1
7791: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
7792: LD_ADDR_VAR 0 2
7796: PUSH
7797: LD_INT 23
7799: PUSH
7800: EMPTY
7801: LIST
7802: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
7803: LD_ADDR_VAR 0 3
7807: PUSH
7808: LD_INT 2
7810: PUSH
7811: LD_INT 37
7813: PUSH
7814: LD_INT 31
7816: PUSH
7817: LD_INT 32
7819: PUSH
7820: LD_INT 33
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: ST_TO_ADDR
// Banned_Weapons := [ ] ;
7830: LD_ADDR_LOC 26
7834: PUSH
7835: EMPTY
7836: ST_TO_ADDR
// Banned_Chassis := [ ] ;
7837: LD_ADDR_LOC 27
7841: PUSH
7842: EMPTY
7843: ST_TO_ADDR
// Banned_Controls := [ ] ;
7844: LD_ADDR_LOC 28
7848: PUSH
7849: EMPTY
7850: ST_TO_ADDR
// Banned_Engines := [ ] ;
7851: LD_ADDR_LOC 29
7855: PUSH
7856: EMPTY
7857: ST_TO_ADDR
// Restricted_Builds := [ ] ;
7858: LD_ADDR_LOC 24
7862: PUSH
7863: EMPTY
7864: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
7865: LD_ADDR_LOC 25
7869: PUSH
7870: EMPTY
7871: ST_TO_ADDR
// No_Mechs := true ;
7872: LD_ADDR_EXP 42
7876: PUSH
7877: LD_INT 1
7879: ST_TO_ADDR
// end ; 7 :
7880: GO 8497
7882: LD_INT 7
7884: DOUBLE
7885: EQUAL
7886: IFTRUE 7890
7888: GO 8088
7890: POP
// begin def_base_level := 1 ;
7891: LD_ADDR_EXP 28
7895: PUSH
7896: LD_INT 1
7898: ST_TO_ADDR
// def_amount_of_people := 2 ;
7899: LD_ADDR_EXP 29
7903: PUSH
7904: LD_INT 2
7906: ST_TO_ADDR
// def_skill_level := 3 ;
7907: LD_ADDR_EXP 30
7911: PUSH
7912: LD_INT 3
7914: ST_TO_ADDR
// def_starting_resources := 3 ;
7915: LD_ADDR_EXP 31
7919: PUSH
7920: LD_INT 3
7922: ST_TO_ADDR
// def_shipments_density := 1 ;
7923: LD_ADDR_EXP 32
7927: PUSH
7928: LD_INT 1
7930: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
7931: LD_ADDR_EXP 33
7935: PUSH
7936: LD_INT 1
7938: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
7939: LD_ADDR_EXP 34
7943: PUSH
7944: LD_INT 2
7946: ST_TO_ADDR
// def_shared_vision := 1 ;
7947: LD_ADDR_EXP 35
7951: PUSH
7952: LD_INT 1
7954: ST_TO_ADDR
// def_morale_flags := 0 ;
7955: LD_ADDR_EXP 36
7959: PUSH
7960: LD_INT 0
7962: ST_TO_ADDR
// def_siberite_detection := 1 ;
7963: LD_ADDR_EXP 37
7967: PUSH
7968: LD_INT 1
7970: ST_TO_ADDR
// def_people_respawning := 0 ;
7971: LD_ADDR_EXP 38
7975: PUSH
7976: LD_INT 0
7978: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
7979: LD_ADDR_EXP 39
7983: PUSH
7984: LD_INT 1
7986: ST_TO_ADDR
// def_siberite_bomb := 0 ;
7987: LD_ADDR_EXP 40
7991: PUSH
7992: LD_INT 0
7994: ST_TO_ADDR
// def_builduptime := 3 ;
7995: LD_ADDR_EXP 41
7999: PUSH
8000: LD_INT 3
8002: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
8003: LD_ADDR_VAR 0 2
8007: PUSH
8008: LD_INT 23
8010: PUSH
8011: EMPTY
8012: LIST
8013: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
8014: LD_ADDR_VAR 0 3
8018: PUSH
8019: LD_INT 37
8021: PUSH
8022: EMPTY
8023: LIST
8024: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8025: LD_ADDR_LOC 26
8029: PUSH
8030: EMPTY
8031: ST_TO_ADDR
// Banned_Chassis := [ ] ;
8032: LD_ADDR_LOC 27
8036: PUSH
8037: EMPTY
8038: ST_TO_ADDR
// Banned_Controls := [ ] ;
8039: LD_ADDR_LOC 28
8043: PUSH
8044: EMPTY
8045: ST_TO_ADDR
// Banned_Engines := [ ] ;
8046: LD_ADDR_LOC 29
8050: PUSH
8051: EMPTY
8052: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
8053: LD_ADDR_LOC 24
8057: PUSH
8058: LD_INT 31
8060: PUSH
8061: LD_INT 32
8063: PUSH
8064: LD_INT 33
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: LIST
8071: PUSH
8072: EMPTY
8073: LIST
8074: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
8075: LD_ADDR_LOC 25
8079: PUSH
8080: LD_INT 10
8082: PUSH
8083: EMPTY
8084: LIST
8085: ST_TO_ADDR
// end ; 8 :
8086: GO 8497
8088: LD_INT 8
8090: DOUBLE
8091: EQUAL
8092: IFTRUE 8096
8094: GO 8496
8096: POP
// begin def_base_level := 0 ;
8097: LD_ADDR_EXP 28
8101: PUSH
8102: LD_INT 0
8104: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
8105: LD_ADDR_EXP 29
8109: PUSH
8110: LD_INT 0
8112: PPUSH
8113: LD_INT 1
8115: PPUSH
8116: CALL_OW 12
8120: ST_TO_ADDR
// def_skill_level := 0 ;
8121: LD_ADDR_EXP 30
8125: PUSH
8126: LD_INT 0
8128: ST_TO_ADDR
// def_starting_resources := 2 ;
8129: LD_ADDR_EXP 31
8133: PUSH
8134: LD_INT 2
8136: ST_TO_ADDR
// def_shipments_density := 1 ;
8137: LD_ADDR_EXP 32
8141: PUSH
8142: LD_INT 1
8144: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
8145: LD_ADDR_EXP 33
8149: PUSH
8150: LD_INT 0
8152: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
8153: LD_ADDR_EXP 34
8157: PUSH
8158: LD_INT 0
8160: ST_TO_ADDR
// def_shared_vision := 1 ;
8161: LD_ADDR_EXP 35
8165: PUSH
8166: LD_INT 1
8168: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
8169: LD_ADDR_EXP 36
8173: PUSH
8174: LD_INT 0
8176: PPUSH
8177: LD_INT 2
8179: PPUSH
8180: CALL_OW 12
8184: ST_TO_ADDR
// def_siberite_detection := 0 ;
8185: LD_ADDR_EXP 37
8189: PUSH
8190: LD_INT 0
8192: ST_TO_ADDR
// def_people_respawning := 0 ;
8193: LD_ADDR_EXP 38
8197: PUSH
8198: LD_INT 0
8200: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
8201: LD_ADDR_EXP 39
8205: PUSH
8206: LD_INT 2
8208: ST_TO_ADDR
// def_siberite_bomb := 0 ;
8209: LD_ADDR_EXP 40
8213: PUSH
8214: LD_INT 0
8216: ST_TO_ADDR
// def_builduptime := 0 ;
8217: LD_ADDR_EXP 41
8221: PUSH
8222: LD_INT 0
8224: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
8225: LD_ADDR_VAR 0 2
8229: PUSH
8230: LD_INT 23
8232: PUSH
8233: LD_INT 20
8235: PUSH
8236: LD_INT 40
8238: PUSH
8239: LD_INT 47
8241: PUSH
8242: LD_INT 46
8244: PUSH
8245: LD_INT 39
8247: PUSH
8248: LD_INT 71
8250: PUSH
8251: LD_INT 34
8253: PUSH
8254: LD_INT 41
8256: PUSH
8257: LD_INT 44
8259: PUSH
8260: LD_INT 17
8262: PUSH
8263: LD_INT 16
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
8280: LD_ADDR_VAR 0 3
8284: PUSH
8285: LD_INT 37
8287: PUSH
8288: LD_INT 5
8290: PUSH
8291: LD_INT 13
8293: PUSH
8294: LD_INT 34
8296: PUSH
8297: LD_INT 12
8299: PUSH
8300: LD_INT 15
8302: PUSH
8303: LD_INT 11
8305: PUSH
8306: LD_INT 14
8308: PUSH
8309: LD_INT 29
8311: PUSH
8312: LD_INT 30
8314: PUSH
8315: LD_INT 28
8317: PUSH
8318: LD_INT 24
8320: PUSH
8321: LD_INT 25
8323: PUSH
8324: LD_INT 20
8326: PUSH
8327: LD_INT 21
8329: PUSH
8330: LD_INT 22
8332: PUSH
8333: LD_INT 36
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: ST_TO_ADDR
// Banned_Weapons := [ ] ;
8355: LD_ADDR_LOC 26
8359: PUSH
8360: EMPTY
8361: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
8362: LD_ADDR_LOC 27
8366: PUSH
8367: LD_INT 14
8369: PUSH
8370: EMPTY
8371: LIST
8372: ST_TO_ADDR
// Banned_Controls := [ ] ;
8373: LD_ADDR_LOC 28
8377: PUSH
8378: EMPTY
8379: ST_TO_ADDR
// Banned_Engines := [ ] ;
8380: LD_ADDR_LOC 29
8384: PUSH
8385: EMPTY
8386: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
8387: LD_ADDR_LOC 24
8391: PUSH
8392: LD_INT 31
8394: PUSH
8395: LD_INT 32
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PUSH
8402: LD_INT 4
8404: PUSH
8405: EMPTY
8406: LIST
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
8412: LD_ADDR_LOC 25
8416: PUSH
8417: LD_INT 2
8419: PUSH
8420: LD_INT 1
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: ST_TO_ADDR
// for i := 1 to 8 do
8427: LD_ADDR_VAR 0 4
8431: PUSH
8432: DOUBLE
8433: LD_INT 1
8435: DEC
8436: ST_TO_ADDR
8437: LD_INT 8
8439: PUSH
8440: FOR_TO
8441: IFFALSE 8492
// if ( Side_Nations [ i ] = 3 ) then
8443: LD_EXP 17
8447: PUSH
8448: LD_VAR 0 4
8452: ARRAY
8453: PUSH
8454: LD_INT 3
8456: EQUAL
8457: IFFALSE 8490
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
8459: LD_ADDR_EXP 17
8463: PUSH
8464: LD_EXP 17
8468: PPUSH
8469: LD_VAR 0 4
8473: PPUSH
8474: LD_INT 1
8476: PPUSH
8477: LD_INT 2
8479: PPUSH
8480: CALL_OW 12
8484: PPUSH
8485: CALL_OW 1
8489: ST_TO_ADDR
8490: GO 8440
8492: POP
8493: POP
// end ; end ;
8494: GO 8497
8496: POP
// for i := 1 to 8 do
8497: LD_ADDR_VAR 0 4
8501: PUSH
8502: DOUBLE
8503: LD_INT 1
8505: DEC
8506: ST_TO_ADDR
8507: LD_INT 8
8509: PUSH
8510: FOR_TO
8511: IFFALSE 8595
// if Side_Positions [ i ] then
8513: LD_EXP 16
8517: PUSH
8518: LD_VAR 0 4
8522: ARRAY
8523: IFFALSE 8593
// begin for j in Unavailable_Techs do
8525: LD_ADDR_VAR 0 5
8529: PUSH
8530: LD_VAR 0 2
8534: PUSH
8535: FOR_IN
8536: IFFALSE 8557
// SetTech ( j , i , 0 ) ;
8538: LD_VAR 0 5
8542: PPUSH
8543: LD_VAR 0 4
8547: PPUSH
8548: LD_INT 0
8550: PPUSH
8551: CALL_OW 322
8555: GO 8535
8557: POP
8558: POP
// for j in Unavailable_Builds do
8559: LD_ADDR_VAR 0 5
8563: PUSH
8564: LD_VAR 0 3
8568: PUSH
8569: FOR_IN
8570: IFFALSE 8591
// SetRestrict ( j , i , 0 ) ;
8572: LD_VAR 0 5
8576: PPUSH
8577: LD_VAR 0 4
8581: PPUSH
8582: LD_INT 0
8584: PPUSH
8585: CALL_OW 324
8589: GO 8569
8591: POP
8592: POP
// end ;
8593: GO 8510
8595: POP
8596: POP
// end ;
8597: LD_VAR 0 1
8601: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
8602: LD_INT 0
8604: PPUSH
8605: PPUSH
8606: PPUSH
8607: PPUSH
8608: PPUSH
8609: PPUSH
8610: PPUSH
// for i := 1 to Restricted_Builds do
8611: LD_ADDR_VAR 0 2
8615: PUSH
8616: DOUBLE
8617: LD_INT 1
8619: DEC
8620: ST_TO_ADDR
8621: LD_LOC 24
8625: PUSH
8626: FOR_TO
8627: IFFALSE 8937
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
8629: LD_LOC 24
8633: PUSH
8634: LD_VAR 0 2
8638: ARRAY
8639: PUSH
8640: LD_INT 1
8642: ARRAY
8643: PUSH
8644: LD_INT 31
8646: DOUBLE
8647: EQUAL
8648: IFTRUE 8664
8650: LD_INT 32
8652: DOUBLE
8653: EQUAL
8654: IFTRUE 8664
8656: LD_INT 33
8658: DOUBLE
8659: EQUAL
8660: IFTRUE 8664
8662: GO 8675
8664: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
8665: LD_ADDR_VAR 0 6
8669: PUSH
8670: LD_STRING #Turrets
8672: ST_TO_ADDR
8673: GO 8720
8675: LD_INT 4
8677: DOUBLE
8678: EQUAL
8679: IFTRUE 8689
8681: LD_INT 5
8683: DOUBLE
8684: EQUAL
8685: IFTRUE 8689
8687: GO 8700
8689: POP
// btype := #Armouries ; b_Behemoth :
8690: LD_ADDR_VAR 0 6
8694: PUSH
8695: LD_STRING #Armouries
8697: ST_TO_ADDR
8698: GO 8720
8700: LD_INT 37
8702: DOUBLE
8703: EQUAL
8704: IFTRUE 8708
8706: GO 8719
8708: POP
// btype := #Behemoths ; end ;
8709: LD_ADDR_VAR 0 6
8713: PUSH
8714: LD_STRING #Behemoths
8716: ST_TO_ADDR
8717: GO 8720
8719: POP
// list := [ ] ;
8720: LD_ADDR_VAR 0 7
8724: PUSH
8725: EMPTY
8726: ST_TO_ADDR
// for j := 1 to 8 do
8727: LD_ADDR_VAR 0 3
8731: PUSH
8732: DOUBLE
8733: LD_INT 1
8735: DEC
8736: ST_TO_ADDR
8737: LD_INT 8
8739: PUSH
8740: FOR_TO
8741: IFFALSE 8834
// if Side_Positions [ j ] then
8743: LD_EXP 16
8747: PUSH
8748: LD_VAR 0 3
8752: ARRAY
8753: IFFALSE 8832
// begin amount := 0 ;
8755: LD_ADDR_VAR 0 5
8759: PUSH
8760: LD_INT 0
8762: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
8763: LD_ADDR_VAR 0 4
8767: PUSH
8768: LD_LOC 24
8772: PUSH
8773: LD_VAR 0 2
8777: ARRAY
8778: PUSH
8779: FOR_IN
8780: IFFALSE 8828
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
8782: LD_ADDR_VAR 0 5
8786: PUSH
8787: LD_VAR 0 5
8791: PUSH
8792: LD_INT 22
8794: PUSH
8795: LD_VAR 0 3
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PUSH
8804: LD_INT 30
8806: PUSH
8807: LD_VAR 0 4
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: PPUSH
8820: CALL_OW 69
8824: PLUS
8825: ST_TO_ADDR
8826: GO 8779
8828: POP
8829: POP
// break ;
8830: GO 8834
// end ;
8832: GO 8740
8834: POP
8835: POP
// list := [ ] ;
8836: LD_ADDR_VAR 0 7
8840: PUSH
8841: EMPTY
8842: ST_TO_ADDR
// for j := 1 to 8 do
8843: LD_ADDR_VAR 0 3
8847: PUSH
8848: DOUBLE
8849: LD_INT 1
8851: DEC
8852: ST_TO_ADDR
8853: LD_INT 8
8855: PUSH
8856: FOR_TO
8857: IFFALSE 8877
// list := list ^ amount ;
8859: LD_ADDR_VAR 0 7
8863: PUSH
8864: LD_VAR 0 7
8868: PUSH
8869: LD_VAR 0 5
8873: ADD
8874: ST_TO_ADDR
8875: GO 8856
8877: POP
8878: POP
// Already_Built := Already_Built ^ [ list ] ;
8879: LD_ADDR_LOC 30
8883: PUSH
8884: LD_LOC 30
8888: PUSH
8889: LD_VAR 0 7
8893: PUSH
8894: EMPTY
8895: LIST
8896: ADD
8897: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
8898: LD_ADDR_LOC 31
8902: PUSH
8903: LD_LOC 31
8907: PUSH
8908: LD_VAR 0 6
8912: PUSH
8913: LD_VAR 0 5
8917: PUSH
8918: LD_LOC 25
8922: PUSH
8923: LD_VAR 0 2
8927: ARRAY
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: ADD
8934: ST_TO_ADDR
// end ;
8935: GO 8626
8937: POP
8938: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8939: LD_ADDR_LOC 32
8943: PUSH
8944: LD_INT 0
8946: PUSH
8947: LD_INT 0
8949: PUSH
8950: LD_INT 0
8952: PUSH
8953: LD_INT 0
8955: PUSH
8956: LD_INT 0
8958: PUSH
8959: LD_INT 0
8961: PUSH
8962: LD_INT 0
8964: PUSH
8965: LD_INT 0
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: ST_TO_ADDR
// if Limits_Info then
8978: LD_LOC 31
8982: IFFALSE 8998
// Limits_Info := #Limits ^ Limits_Info ;
8984: LD_ADDR_LOC 31
8988: PUSH
8989: LD_STRING #Limits
8991: PUSH
8992: LD_LOC 31
8996: ADD
8997: ST_TO_ADDR
// end ;
8998: LD_VAR 0 1
9002: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
9003: LD_INT 0
9005: PPUSH
9006: PPUSH
9007: PPUSH
9008: PPUSH
// for i := 1 to Restricted_Builds do
9009: LD_ADDR_VAR 0 7
9013: PUSH
9014: DOUBLE
9015: LD_INT 1
9017: DEC
9018: ST_TO_ADDR
9019: LD_LOC 24
9023: PUSH
9024: FOR_TO
9025: IFFALSE 9448
// if BType in Restricted_Builds [ i ] then
9027: LD_VAR 0 2
9031: PUSH
9032: LD_LOC 24
9036: PUSH
9037: LD_VAR 0 7
9041: ARRAY
9042: IN
9043: IFFALSE 9446
// begin if old_side then
9045: LD_VAR 0 4
9049: IFFALSE 9175
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
9051: LD_LOC 30
9055: PUSH
9056: LD_VAR 0 7
9060: ARRAY
9061: PUSH
9062: LD_VAR 0 3
9066: ARRAY
9067: PUSH
9068: LD_VAR 0 5
9072: PLUS
9073: PUSH
9074: LD_LOC 25
9078: PUSH
9079: LD_VAR 0 7
9083: ARRAY
9084: GREATER
9085: IFFALSE 9111
// begin SetSide ( un , old_side ) ;
9087: LD_VAR 0 1
9091: PPUSH
9092: LD_VAR 0 4
9096: PPUSH
9097: CALL_OW 235
// count := 0 ;
9101: LD_ADDR_VAR 0 5
9105: PUSH
9106: LD_INT 0
9108: ST_TO_ADDR
// end else
9109: GO 9175
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
9111: LD_ADDR_LOC 30
9115: PUSH
9116: LD_LOC 30
9120: PPUSH
9121: LD_VAR 0 7
9125: PPUSH
9126: LD_LOC 30
9130: PUSH
9131: LD_VAR 0 7
9135: ARRAY
9136: PPUSH
9137: LD_VAR 0 4
9141: PPUSH
9142: LD_LOC 30
9146: PUSH
9147: LD_VAR 0 7
9151: ARRAY
9152: PUSH
9153: LD_VAR 0 4
9157: ARRAY
9158: PUSH
9159: LD_VAR 0 5
9163: MINUS
9164: PPUSH
9165: CALL_OW 1
9169: PPUSH
9170: CALL_OW 1
9174: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
9175: LD_ADDR_LOC 30
9179: PUSH
9180: LD_LOC 30
9184: PPUSH
9185: LD_VAR 0 7
9189: PPUSH
9190: LD_LOC 30
9194: PUSH
9195: LD_VAR 0 7
9199: ARRAY
9200: PPUSH
9201: LD_VAR 0 3
9205: PPUSH
9206: LD_LOC 30
9210: PUSH
9211: LD_VAR 0 7
9215: ARRAY
9216: PUSH
9217: LD_VAR 0 3
9221: ARRAY
9222: PUSH
9223: LD_VAR 0 5
9227: PLUS
9228: PPUSH
9229: CALL_OW 1
9233: PPUSH
9234: CALL_OW 1
9238: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
9239: LD_VAR 0 5
9243: PUSH
9244: LD_INT 0
9246: NONEQUAL
9247: PUSH
9248: LD_VAR 0 3
9252: PUSH
9253: LD_OWVAR 2
9257: EQUAL
9258: AND
9259: IFFALSE 9302
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
9261: LD_ADDR_LOC 31
9265: PUSH
9266: LD_LOC 31
9270: PPUSH
9271: LD_INT 3
9273: PUSH
9274: LD_VAR 0 7
9278: MUL
9279: PPUSH
9280: LD_LOC 30
9284: PUSH
9285: LD_VAR 0 7
9289: ARRAY
9290: PUSH
9291: LD_VAR 0 3
9295: ARRAY
9296: PPUSH
9297: CALL_OW 1
9301: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
9302: LD_LOC 30
9306: PUSH
9307: LD_VAR 0 7
9311: ARRAY
9312: PUSH
9313: LD_VAR 0 3
9317: ARRAY
9318: PUSH
9319: LD_LOC 25
9323: PUSH
9324: LD_VAR 0 7
9328: ARRAY
9329: GREATER
9330: IFFALSE 9357
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
9332: LD_ADDR_LOC 32
9336: PUSH
9337: LD_LOC 32
9341: PPUSH
9342: LD_VAR 0 3
9346: PPUSH
9347: LD_INT 1
9349: PPUSH
9350: CALL_OW 1
9354: ST_TO_ADDR
// end else
9355: GO 9444
// begin for j := 1 to Restricted_Builds do
9357: LD_ADDR_VAR 0 8
9361: PUSH
9362: DOUBLE
9363: LD_INT 1
9365: DEC
9366: ST_TO_ADDR
9367: LD_LOC 24
9371: PUSH
9372: FOR_TO
9373: IFFALSE 9417
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
9375: LD_LOC 30
9379: PUSH
9380: LD_VAR 0 8
9384: ARRAY
9385: PUSH
9386: LD_VAR 0 3
9390: ARRAY
9391: PUSH
9392: LD_LOC 25
9396: PUSH
9397: LD_VAR 0 8
9401: ARRAY
9402: GREATER
9403: IFFALSE 9415
// begin Is_Cheater := true ;
9405: LD_ADDR_VAR 0 9
9409: PUSH
9410: LD_INT 1
9412: ST_TO_ADDR
// break ;
9413: GO 9417
// end ;
9415: GO 9372
9417: POP
9418: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
9419: LD_ADDR_LOC 32
9423: PUSH
9424: LD_LOC 32
9428: PPUSH
9429: LD_VAR 0 3
9433: PPUSH
9434: LD_VAR 0 9
9438: PPUSH
9439: CALL_OW 1
9443: ST_TO_ADDR
// end ; break ;
9444: GO 9448
// end ;
9446: GO 9024
9448: POP
9449: POP
// end ;
9450: LD_VAR 0 6
9454: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
9455: LD_VAR 0 5
9459: PUSH
9460: LD_LOC 26
9464: IN
9465: PUSH
9466: LD_VAR 0 2
9470: PUSH
9471: LD_LOC 27
9475: IN
9476: OR
9477: PUSH
9478: LD_VAR 0 4
9482: PUSH
9483: LD_LOC 28
9487: IN
9488: OR
9489: PUSH
9490: LD_VAR 0 3
9494: PUSH
9495: LD_LOC 29
9499: IN
9500: OR
9501: IFFALSE 9512
// ComCancel ( factory ) ;
9503: LD_VAR 0 1
9507: PPUSH
9508: CALL_OW 127
// end ;
9512: PPOPN 5
9514: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
9515: LD_VAR 0 2
9519: PUSH
9520: LD_LOC 26
9524: IN
9525: IFFALSE 9536
// ComCancel ( building ) ;
9527: LD_VAR 0 1
9531: PPUSH
9532: CALL_OW 127
// end ; end_of_file
9536: PPOPN 2
9538: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
9539: LD_INT 0
9541: PPUSH
9542: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
9543: LD_ADDR_VAR 0 2
9547: PUSH
9548: LD_STRING #Multi1x1-Time
9550: PUSH
9551: LD_OWVAR 1
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: ST_TO_ADDR
// if WaitServerStrings then
9560: LD_EXP 44
9564: IFFALSE 9582
// AllStrings = AllStrings ^ WaitServerStrings ;
9566: LD_ADDR_VAR 0 2
9570: PUSH
9571: LD_VAR 0 2
9575: PUSH
9576: LD_EXP 44
9580: ADD
9581: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
9582: LD_INT 0
9584: PUSH
9585: LD_EXP 12
9589: PUSH
9590: LD_OWVAR 1
9594: MINUS
9595: LESSEQUAL
9596: IFFALSE 9627
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
9598: LD_ADDR_VAR 0 2
9602: PUSH
9603: LD_VAR 0 2
9607: PUSH
9608: LD_STRING #allowedsibbomb
9610: PUSH
9611: LD_EXP 12
9615: PUSH
9616: LD_OWVAR 1
9620: MINUS
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: ADD
9626: ST_TO_ADDR
// if ( ExtraStrings ) then
9627: LD_EXP 43
9631: IFFALSE 9653
// AllStrings := AllStrings ^  ^ ExtraStrings ;
9633: LD_ADDR_VAR 0 2
9637: PUSH
9638: LD_VAR 0 2
9642: PUSH
9643: LD_STRING 
9645: ADD
9646: PUSH
9647: LD_EXP 43
9651: ADD
9652: ST_TO_ADDR
// if ( LimitsStrings ) then
9653: CALL 6379 0 0
9657: IFFALSE 9679
// AllStrings := AllStrings ^  ^ LimitsStrings ;
9659: LD_ADDR_VAR 0 2
9663: PUSH
9664: LD_VAR 0 2
9668: PUSH
9669: LD_STRING 
9671: ADD
9672: PUSH
9673: CALL 6379 0 0
9677: ADD
9678: ST_TO_ADDR
// Display_Strings := AllStrings ;
9679: LD_ADDR_OWVAR 47
9683: PUSH
9684: LD_VAR 0 2
9688: ST_TO_ADDR
// end ;
9689: LD_VAR 0 1
9693: RET
// every 0 0$1 do
9694: GO 9696
9696: DISABLE
// begin ShowTimer ;
9697: CALL 9539 0 0
// enable ;
9701: ENABLE
// end ; end_of_file
9702: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
9703: LD_INT 0
9705: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
9706: LD_VAR 0 1
9710: PPUSH
9711: CALL_OW 255
9715: PUSH
9716: LD_VAR 0 4
9720: EQUAL
9721: IFFALSE 9740
// begin SetAchievement ( ACH_RAD ) ;
9723: LD_STRING ACH_RAD
9725: PPUSH
9726: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
9730: LD_STRING ACH_NL
9732: PPUSH
9733: LD_INT 1
9735: PPUSH
9736: CALL_OW 564
// end end ;
9740: LD_VAR 0 5
9744: RET
// export function SA_Win ( side ) ; begin
9745: LD_INT 0
9747: PPUSH
// case side of 1 :
9748: LD_VAR 0 1
9752: PUSH
9753: LD_INT 1
9755: DOUBLE
9756: EQUAL
9757: IFTRUE 9761
9759: GO 9774
9761: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
9762: LD_STRING ACH_AH
9764: PPUSH
9765: LD_INT 1
9767: PPUSH
9768: CALL_OW 564
9772: GO 9937
9774: LD_INT 2
9776: DOUBLE
9777: EQUAL
9778: IFTRUE 9782
9780: GO 9795
9782: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
9783: LD_STRING ACH_E
9785: PPUSH
9786: LD_INT 1
9788: PPUSH
9789: CALL_OW 564
9793: GO 9937
9795: LD_INT 3
9797: DOUBLE
9798: EQUAL
9799: IFTRUE 9803
9801: GO 9816
9803: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
9804: LD_STRING ACH_OOL
9806: PPUSH
9807: LD_INT 1
9809: PPUSH
9810: CALL_OW 564
9814: GO 9937
9816: LD_INT 1
9818: PUSH
9819: LD_INT 2
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: DOUBLE
9826: EQUAL
9827: IFTRUE 9831
9829: GO 9856
9831: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9832: LD_STRING ACH_AH
9834: PPUSH
9835: LD_REAL  5.00000000000000E-0001
9838: PPUSH
9839: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9843: LD_STRING ACH_E
9845: PPUSH
9846: LD_REAL  5.00000000000000E-0001
9849: PPUSH
9850: CALL_OW 564
// end ; [ 2 , 3 ] :
9854: GO 9937
9856: LD_INT 2
9858: PUSH
9859: LD_INT 3
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: DOUBLE
9866: EQUAL
9867: IFTRUE 9871
9869: GO 9896
9871: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
9872: LD_STRING ACH_OOL
9874: PPUSH
9875: LD_REAL  5.00000000000000E-0001
9878: PPUSH
9879: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9883: LD_STRING ACH_E
9885: PPUSH
9886: LD_REAL  5.00000000000000E-0001
9889: PPUSH
9890: CALL_OW 564
// end ; [ 3 , 1 ] :
9894: GO 9937
9896: LD_INT 3
9898: PUSH
9899: LD_INT 1
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: DOUBLE
9906: EQUAL
9907: IFTRUE 9911
9909: GO 9936
9911: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9912: LD_STRING ACH_AH
9914: PPUSH
9915: LD_REAL  5.00000000000000E-0001
9918: PPUSH
9919: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
9923: LD_STRING ACH_OOL
9925: PPUSH
9926: LD_REAL  5.00000000000000E-0001
9929: PPUSH
9930: CALL_OW 564
// end ; end ;
9934: GO 9937
9936: POP
// end ; end_of_file
9937: LD_VAR 0 2
9941: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
9942: LD_INT 0
9944: PPUSH
9945: PPUSH
// enable ( 98 ) ;
9946: LD_INT 98
9948: ENABLE_MARKED
// GameEnded = false ;
9949: LD_ADDR_LOC 34
9953: PUSH
9954: LD_INT 0
9956: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9957: LD_ADDR_LOC 33
9961: PUSH
9962: LD_INT 0
9964: PUSH
9965: LD_INT 0
9967: PUSH
9968: LD_INT 0
9970: PUSH
9971: LD_INT 0
9973: PUSH
9974: LD_INT 0
9976: PUSH
9977: LD_INT 0
9979: PUSH
9980: LD_INT 0
9982: PUSH
9983: LD_INT 0
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: ST_TO_ADDR
// unfoged = false ;
9996: LD_ADDR_LOC 35
10000: PUSH
10001: LD_INT 0
10003: ST_TO_ADDR
// for i = 1 to side_positions do
10004: LD_ADDR_VAR 0 2
10008: PUSH
10009: DOUBLE
10010: LD_INT 1
10012: DEC
10013: ST_TO_ADDR
10014: LD_EXP 16
10018: PUSH
10019: FOR_TO
10020: IFFALSE 10060
// if not side_positions [ i ] then
10022: LD_EXP 16
10026: PUSH
10027: LD_VAR 0 2
10031: ARRAY
10032: NOT
10033: IFFALSE 10058
// defaited = replace ( defaited , i , true ) ;
10035: LD_ADDR_LOC 33
10039: PUSH
10040: LD_LOC 33
10044: PPUSH
10045: LD_VAR 0 2
10049: PPUSH
10050: LD_INT 1
10052: PPUSH
10053: CALL_OW 1
10057: ST_TO_ADDR
10058: GO 10019
10060: POP
10061: POP
// end ;
10062: LD_VAR 0 1
10066: RET
// function CanWinLoose ; begin
10067: LD_INT 0
10069: PPUSH
// Result := true ;
10070: LD_ADDR_VAR 0 1
10074: PUSH
10075: LD_INT 1
10077: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
10078: CALL_OW 518
10082: PUSH
10083: CALL_OW 519
10087: PUSH
10088: LD_INT 0
10090: GREATER
10091: AND
10092: IFFALSE 10102
// Result := false ;
10094: LD_ADDR_VAR 0 1
10098: PUSH
10099: LD_INT 0
10101: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10102: CALL_OW 531
10106: PUSH
10107: CALL_OW 519
10111: PUSH
10112: LD_INT 1
10114: GREATER
10115: AND
10116: IFFALSE 10126
// Result := false ;
10118: LD_ADDR_VAR 0 1
10122: PUSH
10123: LD_INT 0
10125: ST_TO_ADDR
// end ;
10126: LD_VAR 0 1
10130: RET
// export function HasPower ( i ) ; var k , h ; begin
10131: LD_INT 0
10133: PPUSH
10134: PPUSH
10135: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
10136: LD_VAR 0 1
10140: PPUSH
10141: CALL_OW 108
10145: NOT
10146: PUSH
10147: LD_EXP 24
10151: PUSH
10152: LD_VAR 0 1
10156: ARRAY
10157: NOT
10158: AND
10159: PUSH
10160: LD_OWVAR 4
10164: AND
10165: IFFALSE 10177
// begin result = false ;
10167: LD_ADDR_VAR 0 2
10171: PUSH
10172: LD_INT 0
10174: ST_TO_ADDR
// end else
10175: GO 10472
// case def_win_rules of 0 :
10177: LD_EXP 13
10181: PUSH
10182: LD_INT 0
10184: DOUBLE
10185: EQUAL
10186: IFTRUE 10190
10188: GO 10353
10190: POP
// if def_people_respawning then
10191: LD_EXP 38
10195: IFFALSE 10286
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
10197: LD_ADDR_VAR 0 2
10201: PUSH
10202: LD_INT 22
10204: PUSH
10205: LD_VAR 0 1
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: PUSH
10214: LD_INT 2
10216: PUSH
10217: LD_INT 21
10219: PUSH
10220: LD_INT 1
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: LD_INT 33
10229: PUSH
10230: LD_INT 3
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: PUSH
10237: LD_INT 33
10239: PUSH
10240: LD_INT 5
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 30
10249: PUSH
10250: LD_INT 0
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 30
10259: PUSH
10260: LD_INT 1
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PPUSH
10279: CALL_OW 69
10283: ST_TO_ADDR
10284: GO 10351
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
10286: LD_ADDR_VAR 0 2
10290: PUSH
10291: LD_INT 22
10293: PUSH
10294: LD_VAR 0 1
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PUSH
10303: LD_INT 2
10305: PUSH
10306: LD_INT 21
10308: PUSH
10309: LD_INT 1
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: PUSH
10316: LD_INT 33
10318: PUSH
10319: LD_INT 3
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 33
10328: PUSH
10329: LD_INT 5
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PPUSH
10346: CALL_OW 69
10350: ST_TO_ADDR
10351: GO 10472
10353: LD_INT 1
10355: DOUBLE
10356: EQUAL
10357: IFTRUE 10361
10359: GO 10400
10361: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
10362: LD_ADDR_VAR 0 2
10366: PUSH
10367: LD_INT 22
10369: PUSH
10370: LD_VAR 0 1
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PUSH
10379: LD_INT 21
10381: PUSH
10382: LD_INT 1
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: ST_TO_ADDR
10398: GO 10472
10400: LD_INT 2
10402: DOUBLE
10403: EQUAL
10404: IFTRUE 10408
10406: GO 10471
10408: POP
// begin h = false ;
10409: LD_ADDR_VAR 0 4
10413: PUSH
10414: LD_INT 0
10416: ST_TO_ADDR
// for k in heroes [ i ] do
10417: LD_ADDR_VAR 0 3
10421: PUSH
10422: LD_EXP 25
10426: PUSH
10427: LD_VAR 0 1
10431: ARRAY
10432: PUSH
10433: FOR_IN
10434: IFFALSE 10457
// if IsLive ( k ) then
10436: LD_VAR 0 3
10440: PPUSH
10441: CALL_OW 300
10445: IFFALSE 10455
// h = true ;
10447: LD_ADDR_VAR 0 4
10451: PUSH
10452: LD_INT 1
10454: ST_TO_ADDR
10455: GO 10433
10457: POP
10458: POP
// Result := h ;
10459: LD_ADDR_VAR 0 2
10463: PUSH
10464: LD_VAR 0 4
10468: ST_TO_ADDR
// end ; end ;
10469: GO 10472
10471: POP
// end ;
10472: LD_VAR 0 2
10476: RET
// function AlliedSides ( i , j ) ; begin
10477: LD_INT 0
10479: PPUSH
// Result := false ;
10480: LD_ADDR_VAR 0 3
10484: PUSH
10485: LD_INT 0
10487: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
10488: LD_VAR 0 1
10492: PPUSH
10493: LD_VAR 0 2
10497: PPUSH
10498: CALL_OW 81
10502: PUSH
10503: LD_INT 1
10505: EQUAL
10506: PUSH
10507: LD_VAR 0 2
10511: PPUSH
10512: LD_VAR 0 1
10516: PPUSH
10517: CALL_OW 81
10521: PUSH
10522: LD_INT 1
10524: EQUAL
10525: AND
10526: PUSH
10527: LD_VAR 0 1
10531: PPUSH
10532: CALL_OW 83
10536: AND
10537: PUSH
10538: LD_VAR 0 2
10542: PPUSH
10543: CALL_OW 83
10547: AND
10548: IFFALSE 10558
// Result := true ;
10550: LD_ADDR_VAR 0 3
10554: PUSH
10555: LD_INT 1
10557: ST_TO_ADDR
// end ;
10558: LD_VAR 0 3
10562: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
10563: CALL 10067 0 0
10567: PUSH
10568: LD_LOC 34
10572: NOT
10573: AND
10574: IFFALSE 10590
10576: GO 10578
10578: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
10579: LD_ADDR_EXP 44
10583: PUSH
10584: LD_STRING #Player-Ended
10586: PUSH
10587: EMPTY
10588: LIST
10589: ST_TO_ADDR
10590: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
10591: CALL 10067 0 0
10595: PUSH
10596: LD_LOC 34
10600: AND
10601: IFFALSE 10610
10603: GO 10605
10605: DISABLE
// YouLostInMultiplayer ;
10606: CALL_OW 107
10610: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
10611: CALL 10067 0 0
10615: NOT
10616: PUSH
10617: CALL_OW 531
10621: NOT
10622: AND
10623: IFFALSE 10639
10625: GO 10627
10627: DISABLE
// WaitServerStrings = [ #server-wait ] ;
10628: LD_ADDR_EXP 44
10632: PUSH
10633: LD_STRING #server-wait
10635: PUSH
10636: EMPTY
10637: LIST
10638: ST_TO_ADDR
10639: END
// every 100 trigger IAmSpec do
10640: CALL_OW 531
10644: IFFALSE 10660
10646: GO 10648
10648: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
10649: LD_ADDR_EXP 44
10653: PUSH
10654: LD_STRING #Player-IAmSpec
10656: PUSH
10657: EMPTY
10658: LIST
10659: ST_TO_ADDR
10660: END
// every 100 trigger GameEnded and IAmSpec do
10661: LD_LOC 34
10665: PUSH
10666: CALL_OW 531
10670: AND
10671: IFFALSE 10680
10673: GO 10675
10675: DISABLE
// YouLostInMultiplayer ;
10676: CALL_OW 107
10680: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
10681: CALL 10067 0 0
10685: PUSH
10686: LD_LOC 34
10690: NOT
10691: AND
10692: IFFALSE 10708
10694: GO 10696
10696: DISABLE
// WaitServerStrings = [ $player-win ] ;
10697: LD_ADDR_EXP 44
10701: PUSH
10702: LD_STRING $player-win
10704: PUSH
10705: EMPTY
10706: LIST
10707: ST_TO_ADDR
10708: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
10709: CALL 10067 0 0
10713: PUSH
10714: LD_LOC 34
10718: AND
10719: IFFALSE 10743
10721: GO 10723
10723: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
10724: LD_EXP 17
10728: PUSH
10729: LD_OWVAR 2
10733: ARRAY
10734: PPUSH
10735: CALL 9745 0 1
// YouWinInMultiplayer ;
10739: CALL_OW 106
// end ;
10743: END
// every 100 trigger isEditor marked 401 do
10744: LD_OWVAR 84
10748: IFFALSE 10764
10750: GO 10752
10752: DISABLE
// Debug_Strings = [ You won ] ;
10753: LD_ADDR_OWVAR 48
10757: PUSH
10758: LD_STRING You won
10760: PUSH
10761: EMPTY
10762: LIST
10763: ST_TO_ADDR
10764: END
// every 100 trigger isEditor marked 400 do
10765: LD_OWVAR 84
10769: IFFALSE 10785
10771: GO 10773
10773: DISABLE
// Debug_Strings = [ You loss ] ;
10774: LD_ADDR_OWVAR 48
10778: PUSH
10779: LD_STRING You loss
10781: PUSH
10782: EMPTY
10783: LIST
10784: ST_TO_ADDR
10785: END
// every 100 marked 98 do var i , un ;
10786: GO 10788
10788: DISABLE
10789: LD_INT 0
10791: PPUSH
10792: PPUSH
// begin for i = 1 to side_positions do
10793: LD_ADDR_VAR 0 1
10797: PUSH
10798: DOUBLE
10799: LD_INT 1
10801: DEC
10802: ST_TO_ADDR
10803: LD_EXP 16
10807: PUSH
10808: FOR_TO
10809: IFFALSE 10932
// if side_positions [ i ] then
10811: LD_EXP 16
10815: PUSH
10816: LD_VAR 0 1
10820: ARRAY
10821: IFFALSE 10930
// if not HasPower ( i ) and not Defaited [ i ] then
10823: LD_VAR 0 1
10827: PPUSH
10828: CALL 10131 0 1
10832: NOT
10833: PUSH
10834: LD_LOC 33
10838: PUSH
10839: LD_VAR 0 1
10843: ARRAY
10844: NOT
10845: AND
10846: IFFALSE 10930
// begin un = filterallunits ( [ f_side , i ] ) ;
10848: LD_ADDR_VAR 0 2
10852: PUSH
10853: LD_INT 22
10855: PUSH
10856: LD_VAR 0 1
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PPUSH
10865: CALL_OW 69
10869: ST_TO_ADDR
// if un then
10870: LD_VAR 0 2
10874: IFFALSE 10888
// SetSide ( un , 0 ) ;
10876: LD_VAR 0 2
10880: PPUSH
10881: LD_INT 0
10883: PPUSH
10884: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
10888: LD_ADDR_LOC 33
10892: PUSH
10893: LD_LOC 33
10897: PPUSH
10898: LD_VAR 0 1
10902: PPUSH
10903: LD_INT 1
10905: PPUSH
10906: CALL_OW 1
10910: ST_TO_ADDR
// if i = your_side then
10911: LD_VAR 0 1
10915: PUSH
10916: LD_OWVAR 2
10920: EQUAL
10921: IFFALSE 10930
// begin Multiplayer_Loose_Message ;
10923: CALL_OW 521
// enable ( 400 ) ;
10927: LD_INT 400
10929: ENABLE_MARKED
// end ; end ;
10930: GO 10808
10932: POP
10933: POP
// if not Unfoged and defaited [ your_side ] then
10934: LD_LOC 35
10938: NOT
10939: PUSH
10940: LD_LOC 33
10944: PUSH
10945: LD_OWVAR 2
10949: ARRAY
10950: AND
10951: IFFALSE 10957
// Unfog ;
10953: CALL 11143 0 0
// DidGameEnd ;
10957: CALL 10972 0 0
// if not GameEnded then
10961: LD_LOC 34
10965: NOT
10966: IFFALSE 10969
// enable ;
10968: ENABLE
// end ;
10969: PPOPN 2
10971: END
// function DidGameEnd ; var i , k , enemy ; begin
10972: LD_INT 0
10974: PPUSH
10975: PPUSH
10976: PPUSH
10977: PPUSH
// enemy = [ ] ;
10978: LD_ADDR_VAR 0 4
10982: PUSH
10983: EMPTY
10984: ST_TO_ADDR
// for i = 1 to side_positions do
10985: LD_ADDR_VAR 0 2
10989: PUSH
10990: DOUBLE
10991: LD_INT 1
10993: DEC
10994: ST_TO_ADDR
10995: LD_EXP 16
10999: PUSH
11000: FOR_TO
11001: IFFALSE 11105
// if not defaited [ i ] then
11003: LD_LOC 33
11007: PUSH
11008: LD_VAR 0 2
11012: ARRAY
11013: NOT
11014: IFFALSE 11103
// for k = 1 to side_positions do
11016: LD_ADDR_VAR 0 3
11020: PUSH
11021: DOUBLE
11022: LD_INT 1
11024: DEC
11025: ST_TO_ADDR
11026: LD_EXP 16
11030: PUSH
11031: FOR_TO
11032: IFFALSE 11101
// if not defaited [ k ] then
11034: LD_LOC 33
11038: PUSH
11039: LD_VAR 0 3
11043: ARRAY
11044: NOT
11045: IFFALSE 11099
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
11047: LD_VAR 0 2
11051: PPUSH
11052: LD_VAR 0 3
11056: PPUSH
11057: CALL_OW 81
11061: PUSH
11062: LD_INT 2
11064: PUSH
11065: LD_INT 0
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: IN
11072: IFFALSE 11099
// enemy = enemy ^ [ i , k ] ;
11074: LD_ADDR_VAR 0 4
11078: PUSH
11079: LD_VAR 0 4
11083: PUSH
11084: LD_VAR 0 2
11088: PUSH
11089: LD_VAR 0 3
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: ADD
11098: ST_TO_ADDR
11099: GO 11031
11101: POP
11102: POP
11103: GO 11000
11105: POP
11106: POP
// if not enemy then
11107: LD_VAR 0 4
11111: NOT
11112: IFFALSE 11138
// begin GameEnded = true ;
11114: LD_ADDR_LOC 34
11118: PUSH
11119: LD_INT 1
11121: ST_TO_ADDR
// if not defaited [ your_side ] then
11122: LD_LOC 33
11126: PUSH
11127: LD_OWVAR 2
11131: ARRAY
11132: NOT
11133: IFFALSE 11138
// enable ( 401 ) ;
11135: LD_INT 401
11137: ENABLE_MARKED
// end ; end ;
11138: LD_VAR 0 1
11142: RET
// function unfog ; var k , friends ; begin
11143: LD_INT 0
11145: PPUSH
11146: PPUSH
11147: PPUSH
// for k = 1 to side_positions do
11148: LD_ADDR_VAR 0 2
11152: PUSH
11153: DOUBLE
11154: LD_INT 1
11156: DEC
11157: ST_TO_ADDR
11158: LD_EXP 16
11162: PUSH
11163: FOR_TO
11164: IFFALSE 11220
// if not defaited [ k ] then
11166: LD_LOC 33
11170: PUSH
11171: LD_VAR 0 2
11175: ARRAY
11176: NOT
11177: IFFALSE 11218
// if GetAttitude ( your_side , k ) in [ att_friend ] then
11179: LD_OWVAR 2
11183: PPUSH
11184: LD_VAR 0 2
11188: PPUSH
11189: CALL_OW 81
11193: PUSH
11194: LD_INT 1
11196: PUSH
11197: EMPTY
11198: LIST
11199: IN
11200: IFFALSE 11218
// friends = friends ^ k ;
11202: LD_ADDR_VAR 0 3
11206: PUSH
11207: LD_VAR 0 3
11211: PUSH
11212: LD_VAR 0 2
11216: ADD
11217: ST_TO_ADDR
11218: GO 11163
11220: POP
11221: POP
// if not friends then
11222: LD_VAR 0 3
11226: NOT
11227: IFFALSE 11244
// begin fogoff ( true ) ;
11229: LD_INT 1
11231: PPUSH
11232: CALL_OW 344
// unfoged = true ;
11236: LD_ADDR_LOC 35
11240: PUSH
11241: LD_INT 1
11243: ST_TO_ADDR
// end ; end ;
11244: LD_VAR 0 1
11248: RET
// export function MakeGameEnd ; begin
11249: LD_INT 0
11251: PPUSH
// fogoff ( true ) ;
11252: LD_INT 1
11254: PPUSH
11255: CALL_OW 344
// unfoged = true ;
11259: LD_ADDR_LOC 35
11263: PUSH
11264: LD_INT 1
11266: ST_TO_ADDR
// wait ( 0 0$5 ) ;
11267: LD_INT 175
11269: PPUSH
11270: CALL_OW 67
// GameEnded = true ;
11274: LD_ADDR_LOC 34
11278: PUSH
11279: LD_INT 1
11281: ST_TO_ADDR
// end ;
11282: LD_VAR 0 1
11286: RET
// export function GetGameEnded ; begin
11287: LD_INT 0
11289: PPUSH
// result = GameEnded ;
11290: LD_ADDR_VAR 0 1
11294: PUSH
11295: LD_LOC 34
11299: ST_TO_ADDR
// end ; end_of_file
11300: LD_VAR 0 1
11304: RET
// export function SetMpTechs ( ) ; var side , i ; begin
11305: LD_INT 0
11307: PPUSH
11308: PPUSH
11309: PPUSH
// for side = 1 to 8 do
11310: LD_ADDR_VAR 0 2
11314: PUSH
11315: DOUBLE
11316: LD_INT 1
11318: DEC
11319: ST_TO_ADDR
11320: LD_INT 8
11322: PUSH
11323: FOR_TO
11324: IFFALSE 11445
// begin for i = 1 to 72 do
11326: LD_ADDR_VAR 0 3
11330: PUSH
11331: DOUBLE
11332: LD_INT 1
11334: DEC
11335: ST_TO_ADDR
11336: LD_INT 72
11338: PUSH
11339: FOR_TO
11340: IFFALSE 11371
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
11342: LD_VAR 0 3
11346: PPUSH
11347: LD_VAR 0 2
11351: PPUSH
11352: LD_INT 0
11354: PPUSH
11355: LD_VAR 0 3
11359: PPUSH
11360: CALL_OW 565
11364: PPUSH
11365: CALL_OW 322
11369: GO 11339
11371: POP
11372: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
11373: LD_INT 73
11375: PPUSH
11376: LD_VAR 0 2
11380: PPUSH
11381: LD_INT 0
11383: PPUSH
11384: LD_INT 25
11386: PPUSH
11387: CALL_OW 565
11391: PPUSH
11392: CALL_OW 322
// for i = 0 to 40 do
11396: LD_ADDR_VAR 0 3
11400: PUSH
11401: DOUBLE
11402: LD_INT 0
11404: DEC
11405: ST_TO_ADDR
11406: LD_INT 40
11408: PUSH
11409: FOR_TO
11410: IFFALSE 11441
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
11412: LD_VAR 0 3
11416: PPUSH
11417: LD_VAR 0 2
11421: PPUSH
11422: LD_INT 1
11424: PPUSH
11425: LD_VAR 0 3
11429: PPUSH
11430: CALL_OW 565
11434: PPUSH
11435: CALL_OW 324
11439: GO 11409
11441: POP
11442: POP
// end ;
11443: GO 11323
11445: POP
11446: POP
// end ;
11447: LD_VAR 0 1
11451: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
11452: LD_INT 0
11454: PPUSH
11455: PPUSH
11456: PPUSH
// for side = 1 to 8 do
11457: LD_ADDR_VAR 0 3
11461: PUSH
11462: DOUBLE
11463: LD_INT 1
11465: DEC
11466: ST_TO_ADDR
11467: LD_INT 8
11469: PUSH
11470: FOR_TO
11471: IFFALSE 15467
// begin for i = 1 to 73 do
11473: LD_ADDR_VAR 0 4
11477: PUSH
11478: DOUBLE
11479: LD_INT 1
11481: DEC
11482: ST_TO_ADDR
11483: LD_INT 73
11485: PUSH
11486: FOR_TO
11487: IFFALSE 11508
// SetTech ( i , side , state_disabled ) ;
11489: LD_VAR 0 4
11493: PPUSH
11494: LD_VAR 0 3
11498: PPUSH
11499: LD_INT 0
11501: PPUSH
11502: CALL_OW 322
11506: GO 11486
11508: POP
11509: POP
// for i = 0 to 40 do
11510: LD_ADDR_VAR 0 4
11514: PUSH
11515: DOUBLE
11516: LD_INT 0
11518: DEC
11519: ST_TO_ADDR
11520: LD_INT 40
11522: PUSH
11523: FOR_TO
11524: IFFALSE 11545
// SetRestrict ( i , side , false ) ;
11526: LD_VAR 0 4
11530: PPUSH
11531: LD_VAR 0 3
11535: PPUSH
11536: LD_INT 0
11538: PPUSH
11539: CALL_OW 324
11543: GO 11523
11545: POP
11546: POP
// case level of 1 :
11547: LD_VAR 0 1
11551: PUSH
11552: LD_INT 1
11554: DOUBLE
11555: EQUAL
11556: IFTRUE 11560
11558: GO 11713
11560: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11561: LD_INT 35
11563: PPUSH
11564: LD_VAR 0 3
11568: PPUSH
11569: LD_INT 1
11571: PPUSH
11572: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11576: LD_INT 45
11578: PPUSH
11579: LD_VAR 0 3
11583: PPUSH
11584: LD_INT 1
11586: PPUSH
11587: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11591: LD_INT 46
11593: PPUSH
11594: LD_VAR 0 3
11598: PPUSH
11599: LD_INT 1
11601: PPUSH
11602: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11606: LD_INT 47
11608: PPUSH
11609: LD_VAR 0 3
11613: PPUSH
11614: LD_INT 1
11616: PPUSH
11617: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11621: LD_INT 0
11623: PPUSH
11624: LD_VAR 0 3
11628: PPUSH
11629: LD_INT 1
11631: PPUSH
11632: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11636: LD_INT 2
11638: PPUSH
11639: LD_VAR 0 3
11643: PPUSH
11644: LD_INT 1
11646: PPUSH
11647: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11651: LD_INT 4
11653: PPUSH
11654: LD_VAR 0 3
11658: PPUSH
11659: LD_INT 1
11661: PPUSH
11662: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11666: LD_INT 6
11668: PPUSH
11669: LD_VAR 0 3
11673: PPUSH
11674: LD_INT 1
11676: PPUSH
11677: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11681: LD_INT 29
11683: PPUSH
11684: LD_VAR 0 3
11688: PPUSH
11689: LD_INT 1
11691: PPUSH
11692: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11696: LD_INT 31
11698: PPUSH
11699: LD_VAR 0 3
11703: PPUSH
11704: LD_INT 1
11706: PPUSH
11707: CALL_OW 324
// end ; 2 :
11711: GO 15465
11713: LD_INT 2
11715: DOUBLE
11716: EQUAL
11717: IFTRUE 11721
11719: GO 11919
11721: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11722: LD_INT 35
11724: PPUSH
11725: LD_VAR 0 3
11729: PPUSH
11730: LD_INT 1
11732: PPUSH
11733: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11737: LD_INT 45
11739: PPUSH
11740: LD_VAR 0 3
11744: PPUSH
11745: LD_INT 1
11747: PPUSH
11748: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11752: LD_INT 46
11754: PPUSH
11755: LD_VAR 0 3
11759: PPUSH
11760: LD_INT 1
11762: PPUSH
11763: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11767: LD_INT 47
11769: PPUSH
11770: LD_VAR 0 3
11774: PPUSH
11775: LD_INT 1
11777: PPUSH
11778: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11782: LD_INT 1
11784: PPUSH
11785: LD_VAR 0 3
11789: PPUSH
11790: LD_INT 1
11792: PPUSH
11793: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11797: LD_INT 2
11799: PPUSH
11800: LD_VAR 0 3
11804: PPUSH
11805: LD_INT 1
11807: PPUSH
11808: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11812: LD_INT 11
11814: PPUSH
11815: LD_VAR 0 3
11819: PPUSH
11820: LD_INT 1
11822: PPUSH
11823: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11827: LD_INT 0
11829: PPUSH
11830: LD_VAR 0 3
11834: PPUSH
11835: LD_INT 1
11837: PPUSH
11838: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11842: LD_INT 2
11844: PPUSH
11845: LD_VAR 0 3
11849: PPUSH
11850: LD_INT 1
11852: PPUSH
11853: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11857: LD_INT 4
11859: PPUSH
11860: LD_VAR 0 3
11864: PPUSH
11865: LD_INT 1
11867: PPUSH
11868: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11872: LD_INT 6
11874: PPUSH
11875: LD_VAR 0 3
11879: PPUSH
11880: LD_INT 1
11882: PPUSH
11883: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11887: LD_INT 29
11889: PPUSH
11890: LD_VAR 0 3
11894: PPUSH
11895: LD_INT 1
11897: PPUSH
11898: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11902: LD_INT 31
11904: PPUSH
11905: LD_VAR 0 3
11909: PPUSH
11910: LD_INT 1
11912: PPUSH
11913: CALL_OW 324
// end ; 3 :
11917: GO 15465
11919: LD_INT 3
11921: DOUBLE
11922: EQUAL
11923: IFTRUE 11927
11925: GO 12380
11927: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11928: LD_INT 35
11930: PPUSH
11931: LD_VAR 0 3
11935: PPUSH
11936: LD_INT 1
11938: PPUSH
11939: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11943: LD_INT 45
11945: PPUSH
11946: LD_VAR 0 3
11950: PPUSH
11951: LD_INT 1
11953: PPUSH
11954: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11958: LD_INT 46
11960: PPUSH
11961: LD_VAR 0 3
11965: PPUSH
11966: LD_INT 1
11968: PPUSH
11969: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11973: LD_INT 47
11975: PPUSH
11976: LD_VAR 0 3
11980: PPUSH
11981: LD_INT 1
11983: PPUSH
11984: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11988: LD_INT 1
11990: PPUSH
11991: LD_VAR 0 3
11995: PPUSH
11996: LD_INT 1
11998: PPUSH
11999: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12003: LD_INT 2
12005: PPUSH
12006: LD_VAR 0 3
12010: PPUSH
12011: LD_INT 1
12013: PPUSH
12014: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12018: LD_INT 11
12020: PPUSH
12021: LD_VAR 0 3
12025: PPUSH
12026: LD_INT 1
12028: PPUSH
12029: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12033: LD_INT 48
12035: PPUSH
12036: LD_VAR 0 3
12040: PPUSH
12041: LD_INT 1
12043: PPUSH
12044: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12048: LD_INT 69
12050: PPUSH
12051: LD_VAR 0 3
12055: PPUSH
12056: LD_INT 1
12058: PPUSH
12059: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12063: LD_INT 39
12065: PPUSH
12066: LD_VAR 0 3
12070: PPUSH
12071: LD_INT 1
12073: PPUSH
12074: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12078: LD_INT 43
12080: PPUSH
12081: LD_VAR 0 3
12085: PPUSH
12086: LD_INT 1
12088: PPUSH
12089: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12093: LD_INT 51
12095: PPUSH
12096: LD_VAR 0 3
12100: PPUSH
12101: LD_INT 1
12103: PPUSH
12104: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12108: LD_INT 6
12110: PPUSH
12111: LD_VAR 0 3
12115: PPUSH
12116: LD_INT 1
12118: PPUSH
12119: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12123: LD_INT 0
12125: PPUSH
12126: LD_VAR 0 3
12130: PPUSH
12131: LD_INT 1
12133: PPUSH
12134: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12138: LD_INT 2
12140: PPUSH
12141: LD_VAR 0 3
12145: PPUSH
12146: LD_INT 1
12148: PPUSH
12149: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12153: LD_INT 3
12155: PPUSH
12156: LD_VAR 0 3
12160: PPUSH
12161: LD_INT 1
12163: PPUSH
12164: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12168: LD_INT 4
12170: PPUSH
12171: LD_VAR 0 3
12175: PPUSH
12176: LD_INT 1
12178: PPUSH
12179: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12183: LD_INT 6
12185: PPUSH
12186: LD_VAR 0 3
12190: PPUSH
12191: LD_INT 1
12193: PPUSH
12194: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12198: LD_INT 7
12200: PPUSH
12201: LD_VAR 0 3
12205: PPUSH
12206: LD_INT 1
12208: PPUSH
12209: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12213: LD_INT 8
12215: PPUSH
12216: LD_VAR 0 3
12220: PPUSH
12221: LD_INT 1
12223: PPUSH
12224: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12228: LD_INT 10
12230: PPUSH
12231: LD_VAR 0 3
12235: PPUSH
12236: LD_INT 1
12238: PPUSH
12239: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12243: LD_INT 15
12245: PPUSH
12246: LD_VAR 0 3
12250: PPUSH
12251: LD_INT 1
12253: PPUSH
12254: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12258: LD_INT 16
12260: PPUSH
12261: LD_VAR 0 3
12265: PPUSH
12266: LD_INT 1
12268: PPUSH
12269: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12273: LD_INT 17
12275: PPUSH
12276: LD_VAR 0 3
12280: PPUSH
12281: LD_INT 1
12283: PPUSH
12284: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12288: LD_INT 20
12290: PPUSH
12291: LD_VAR 0 3
12295: PPUSH
12296: LD_INT 1
12298: PPUSH
12299: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12303: LD_INT 26
12305: PPUSH
12306: LD_VAR 0 3
12310: PPUSH
12311: LD_INT 1
12313: PPUSH
12314: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12318: LD_INT 27
12320: PPUSH
12321: LD_VAR 0 3
12325: PPUSH
12326: LD_INT 1
12328: PPUSH
12329: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12333: LD_INT 29
12335: PPUSH
12336: LD_VAR 0 3
12340: PPUSH
12341: LD_INT 1
12343: PPUSH
12344: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12348: LD_INT 31
12350: PPUSH
12351: LD_VAR 0 3
12355: PPUSH
12356: LD_INT 1
12358: PPUSH
12359: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12363: LD_INT 32
12365: PPUSH
12366: LD_VAR 0 3
12370: PPUSH
12371: LD_INT 1
12373: PPUSH
12374: CALL_OW 324
// end ; 4 :
12378: GO 15465
12380: LD_INT 4
12382: DOUBLE
12383: EQUAL
12384: IFTRUE 12388
12386: GO 13336
12388: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12389: LD_INT 35
12391: PPUSH
12392: LD_VAR 0 3
12396: PPUSH
12397: LD_INT 1
12399: PPUSH
12400: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12404: LD_INT 45
12406: PPUSH
12407: LD_VAR 0 3
12411: PPUSH
12412: LD_INT 1
12414: PPUSH
12415: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12419: LD_INT 46
12421: PPUSH
12422: LD_VAR 0 3
12426: PPUSH
12427: LD_INT 1
12429: PPUSH
12430: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12434: LD_INT 47
12436: PPUSH
12437: LD_VAR 0 3
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12449: LD_INT 1
12451: PPUSH
12452: LD_VAR 0 3
12456: PPUSH
12457: LD_INT 1
12459: PPUSH
12460: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12464: LD_INT 2
12466: PPUSH
12467: LD_VAR 0 3
12471: PPUSH
12472: LD_INT 1
12474: PPUSH
12475: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12479: LD_INT 11
12481: PPUSH
12482: LD_VAR 0 3
12486: PPUSH
12487: LD_INT 1
12489: PPUSH
12490: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12494: LD_INT 20
12496: PPUSH
12497: LD_VAR 0 3
12501: PPUSH
12502: LD_INT 1
12504: PPUSH
12505: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12509: LD_INT 48
12511: PPUSH
12512: LD_VAR 0 3
12516: PPUSH
12517: LD_INT 1
12519: PPUSH
12520: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12524: LD_INT 49
12526: PPUSH
12527: LD_VAR 0 3
12531: PPUSH
12532: LD_INT 1
12534: PPUSH
12535: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12539: LD_INT 69
12541: PPUSH
12542: LD_VAR 0 3
12546: PPUSH
12547: LD_INT 1
12549: PPUSH
12550: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12554: LD_INT 39
12556: PPUSH
12557: LD_VAR 0 3
12561: PPUSH
12562: LD_INT 1
12564: PPUSH
12565: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12569: LD_INT 34
12571: PPUSH
12572: LD_VAR 0 3
12576: PPUSH
12577: LD_INT 1
12579: PPUSH
12580: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12584: LD_INT 42
12586: PPUSH
12587: LD_VAR 0 3
12591: PPUSH
12592: LD_INT 1
12594: PPUSH
12595: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12599: LD_INT 44
12601: PPUSH
12602: LD_VAR 0 3
12606: PPUSH
12607: LD_INT 1
12609: PPUSH
12610: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12614: LD_INT 41
12616: PPUSH
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 1
12624: PPUSH
12625: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12629: LD_INT 43
12631: PPUSH
12632: LD_VAR 0 3
12636: PPUSH
12637: LD_INT 1
12639: PPUSH
12640: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12644: LD_INT 70
12646: PPUSH
12647: LD_VAR 0 3
12651: PPUSH
12652: LD_INT 1
12654: PPUSH
12655: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12659: LD_INT 51
12661: PPUSH
12662: LD_VAR 0 3
12666: PPUSH
12667: LD_INT 1
12669: PPUSH
12670: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12674: LD_INT 52
12676: PPUSH
12677: LD_VAR 0 3
12681: PPUSH
12682: LD_INT 1
12684: PPUSH
12685: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12689: LD_INT 6
12691: PPUSH
12692: LD_VAR 0 3
12696: PPUSH
12697: LD_INT 1
12699: PPUSH
12700: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12704: LD_INT 15
12706: PPUSH
12707: LD_VAR 0 3
12711: PPUSH
12712: LD_INT 1
12714: PPUSH
12715: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12719: LD_INT 7
12721: PPUSH
12722: LD_VAR 0 3
12726: PPUSH
12727: LD_INT 1
12729: PPUSH
12730: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12734: LD_INT 12
12736: PPUSH
12737: LD_VAR 0 3
12741: PPUSH
12742: LD_INT 1
12744: PPUSH
12745: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12749: LD_INT 18
12751: PPUSH
12752: LD_VAR 0 3
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12764: LD_INT 60
12766: PPUSH
12767: LD_VAR 0 3
12771: PPUSH
12772: LD_INT 1
12774: PPUSH
12775: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12779: LD_INT 9
12781: PPUSH
12782: LD_VAR 0 3
12786: PPUSH
12787: LD_INT 1
12789: PPUSH
12790: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12794: LD_INT 30
12796: PPUSH
12797: LD_VAR 0 3
12801: PPUSH
12802: LD_INT 1
12804: PPUSH
12805: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12809: LD_INT 37
12811: PPUSH
12812: LD_VAR 0 3
12816: PPUSH
12817: LD_INT 1
12819: PPUSH
12820: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12824: LD_INT 5
12826: PPUSH
12827: LD_VAR 0 3
12831: PPUSH
12832: LD_INT 1
12834: PPUSH
12835: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12839: LD_INT 66
12841: PPUSH
12842: LD_VAR 0 3
12846: PPUSH
12847: LD_INT 1
12849: PPUSH
12850: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12854: LD_INT 21
12856: PPUSH
12857: LD_VAR 0 3
12861: PPUSH
12862: LD_INT 1
12864: PPUSH
12865: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12869: LD_INT 22
12871: PPUSH
12872: LD_VAR 0 3
12876: PPUSH
12877: LD_INT 1
12879: PPUSH
12880: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12884: LD_INT 54
12886: PPUSH
12887: LD_VAR 0 3
12891: PPUSH
12892: LD_INT 1
12894: PPUSH
12895: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12899: LD_INT 0
12901: PPUSH
12902: LD_VAR 0 3
12906: PPUSH
12907: LD_INT 1
12909: PPUSH
12910: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12914: LD_INT 1
12916: PPUSH
12917: LD_VAR 0 3
12921: PPUSH
12922: LD_INT 1
12924: PPUSH
12925: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12929: LD_INT 2
12931: PPUSH
12932: LD_VAR 0 3
12936: PPUSH
12937: LD_INT 1
12939: PPUSH
12940: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12944: LD_INT 3
12946: PPUSH
12947: LD_VAR 0 3
12951: PPUSH
12952: LD_INT 1
12954: PPUSH
12955: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12959: LD_INT 4
12961: PPUSH
12962: LD_VAR 0 3
12966: PPUSH
12967: LD_INT 1
12969: PPUSH
12970: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12974: LD_INT 5
12976: PPUSH
12977: LD_VAR 0 3
12981: PPUSH
12982: LD_INT 1
12984: PPUSH
12985: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12989: LD_INT 6
12991: PPUSH
12992: LD_VAR 0 3
12996: PPUSH
12997: LD_INT 1
12999: PPUSH
13000: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13004: LD_INT 7
13006: PPUSH
13007: LD_VAR 0 3
13011: PPUSH
13012: LD_INT 1
13014: PPUSH
13015: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13019: LD_INT 8
13021: PPUSH
13022: LD_VAR 0 3
13026: PPUSH
13027: LD_INT 1
13029: PPUSH
13030: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13034: LD_INT 10
13036: PPUSH
13037: LD_VAR 0 3
13041: PPUSH
13042: LD_INT 1
13044: PPUSH
13045: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
13049: LD_INT 11
13051: PPUSH
13052: LD_VAR 0 3
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
13064: LD_INT 12
13066: PPUSH
13067: LD_VAR 0 3
13071: PPUSH
13072: LD_INT 1
13074: PPUSH
13075: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
13079: LD_INT 13
13081: PPUSH
13082: LD_VAR 0 3
13086: PPUSH
13087: LD_INT 1
13089: PPUSH
13090: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13094: LD_INT 14
13096: PPUSH
13097: LD_VAR 0 3
13101: PPUSH
13102: LD_INT 1
13104: PPUSH
13105: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13109: LD_INT 15
13111: PPUSH
13112: LD_VAR 0 3
13116: PPUSH
13117: LD_INT 1
13119: PPUSH
13120: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13124: LD_INT 16
13126: PPUSH
13127: LD_VAR 0 3
13131: PPUSH
13132: LD_INT 1
13134: PPUSH
13135: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13139: LD_INT 17
13141: PPUSH
13142: LD_VAR 0 3
13146: PPUSH
13147: LD_INT 1
13149: PPUSH
13150: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13154: LD_INT 19
13156: PPUSH
13157: LD_VAR 0 3
13161: PPUSH
13162: LD_INT 1
13164: PPUSH
13165: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13169: LD_INT 20
13171: PPUSH
13172: LD_VAR 0 3
13176: PPUSH
13177: LD_INT 1
13179: PPUSH
13180: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13184: LD_INT 21
13186: PPUSH
13187: LD_VAR 0 3
13191: PPUSH
13192: LD_INT 1
13194: PPUSH
13195: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13199: LD_INT 23
13201: PPUSH
13202: LD_VAR 0 3
13206: PPUSH
13207: LD_INT 1
13209: PPUSH
13210: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13214: LD_INT 26
13216: PPUSH
13217: LD_VAR 0 3
13221: PPUSH
13222: LD_INT 1
13224: PPUSH
13225: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13229: LD_INT 27
13231: PPUSH
13232: LD_VAR 0 3
13236: PPUSH
13237: LD_INT 1
13239: PPUSH
13240: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13244: LD_INT 28
13246: PPUSH
13247: LD_VAR 0 3
13251: PPUSH
13252: LD_INT 1
13254: PPUSH
13255: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13259: LD_INT 29
13261: PPUSH
13262: LD_VAR 0 3
13266: PPUSH
13267: LD_INT 1
13269: PPUSH
13270: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13274: LD_INT 30
13276: PPUSH
13277: LD_VAR 0 3
13281: PPUSH
13282: LD_INT 1
13284: PPUSH
13285: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13289: LD_INT 31
13291: PPUSH
13292: LD_VAR 0 3
13296: PPUSH
13297: LD_INT 1
13299: PPUSH
13300: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13304: LD_INT 32
13306: PPUSH
13307: LD_VAR 0 3
13311: PPUSH
13312: LD_INT 1
13314: PPUSH
13315: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13319: LD_INT 36
13321: PPUSH
13322: LD_VAR 0 3
13326: PPUSH
13327: LD_INT 1
13329: PPUSH
13330: CALL_OW 324
// end ; 5 :
13334: GO 15465
13336: LD_INT 5
13338: DOUBLE
13339: EQUAL
13340: IFTRUE 13344
13342: GO 14457
13344: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13345: LD_INT 35
13347: PPUSH
13348: LD_VAR 0 3
13352: PPUSH
13353: LD_INT 1
13355: PPUSH
13356: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13360: LD_INT 45
13362: PPUSH
13363: LD_VAR 0 3
13367: PPUSH
13368: LD_INT 1
13370: PPUSH
13371: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13375: LD_INT 46
13377: PPUSH
13378: LD_VAR 0 3
13382: PPUSH
13383: LD_INT 1
13385: PPUSH
13386: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13390: LD_INT 47
13392: PPUSH
13393: LD_VAR 0 3
13397: PPUSH
13398: LD_INT 1
13400: PPUSH
13401: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13405: LD_INT 1
13407: PPUSH
13408: LD_VAR 0 3
13412: PPUSH
13413: LD_INT 1
13415: PPUSH
13416: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13420: LD_INT 2
13422: PPUSH
13423: LD_VAR 0 3
13427: PPUSH
13428: LD_INT 1
13430: PPUSH
13431: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13435: LD_INT 11
13437: PPUSH
13438: LD_VAR 0 3
13442: PPUSH
13443: LD_INT 1
13445: PPUSH
13446: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13450: LD_INT 20
13452: PPUSH
13453: LD_VAR 0 3
13457: PPUSH
13458: LD_INT 1
13460: PPUSH
13461: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13465: LD_INT 48
13467: PPUSH
13468: LD_VAR 0 3
13472: PPUSH
13473: LD_INT 1
13475: PPUSH
13476: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13480: LD_INT 49
13482: PPUSH
13483: LD_VAR 0 3
13487: PPUSH
13488: LD_INT 1
13490: PPUSH
13491: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13495: LD_INT 69
13497: PPUSH
13498: LD_VAR 0 3
13502: PPUSH
13503: LD_INT 1
13505: PPUSH
13506: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13510: LD_INT 39
13512: PPUSH
13513: LD_VAR 0 3
13517: PPUSH
13518: LD_INT 1
13520: PPUSH
13521: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13525: LD_INT 34
13527: PPUSH
13528: LD_VAR 0 3
13532: PPUSH
13533: LD_INT 1
13535: PPUSH
13536: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13540: LD_INT 42
13542: PPUSH
13543: LD_VAR 0 3
13547: PPUSH
13548: LD_INT 1
13550: PPUSH
13551: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13555: LD_INT 44
13557: PPUSH
13558: LD_VAR 0 3
13562: PPUSH
13563: LD_INT 1
13565: PPUSH
13566: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13570: LD_INT 41
13572: PPUSH
13573: LD_VAR 0 3
13577: PPUSH
13578: LD_INT 1
13580: PPUSH
13581: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13585: LD_INT 40
13587: PPUSH
13588: LD_VAR 0 3
13592: PPUSH
13593: LD_INT 1
13595: PPUSH
13596: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13600: LD_INT 43
13602: PPUSH
13603: LD_VAR 0 3
13607: PPUSH
13608: LD_INT 1
13610: PPUSH
13611: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13615: LD_INT 70
13617: PPUSH
13618: LD_VAR 0 3
13622: PPUSH
13623: LD_INT 1
13625: PPUSH
13626: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13630: LD_INT 51
13632: PPUSH
13633: LD_VAR 0 3
13637: PPUSH
13638: LD_INT 1
13640: PPUSH
13641: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13645: LD_INT 52
13647: PPUSH
13648: LD_VAR 0 3
13652: PPUSH
13653: LD_INT 1
13655: PPUSH
13656: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13660: LD_INT 6
13662: PPUSH
13663: LD_VAR 0 3
13667: PPUSH
13668: LD_INT 1
13670: PPUSH
13671: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13675: LD_INT 15
13677: PPUSH
13678: LD_VAR 0 3
13682: PPUSH
13683: LD_INT 1
13685: PPUSH
13686: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13690: LD_INT 7
13692: PPUSH
13693: LD_VAR 0 3
13697: PPUSH
13698: LD_INT 1
13700: PPUSH
13701: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13705: LD_INT 12
13707: PPUSH
13708: LD_VAR 0 3
13712: PPUSH
13713: LD_INT 1
13715: PPUSH
13716: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13720: LD_INT 17
13722: PPUSH
13723: LD_VAR 0 3
13727: PPUSH
13728: LD_INT 1
13730: PPUSH
13731: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13735: LD_INT 18
13737: PPUSH
13738: LD_VAR 0 3
13742: PPUSH
13743: LD_INT 1
13745: PPUSH
13746: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13750: LD_INT 60
13752: PPUSH
13753: LD_VAR 0 3
13757: PPUSH
13758: LD_INT 1
13760: PPUSH
13761: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13765: LD_INT 32
13767: PPUSH
13768: LD_VAR 0 3
13772: PPUSH
13773: LD_INT 1
13775: PPUSH
13776: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13780: LD_INT 9
13782: PPUSH
13783: LD_VAR 0 3
13787: PPUSH
13788: LD_INT 1
13790: PPUSH
13791: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13795: LD_INT 57
13797: PPUSH
13798: LD_VAR 0 3
13802: PPUSH
13803: LD_INT 1
13805: PPUSH
13806: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13810: LD_INT 30
13812: PPUSH
13813: LD_VAR 0 3
13817: PPUSH
13818: LD_INT 1
13820: PPUSH
13821: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13825: LD_INT 37
13827: PPUSH
13828: LD_VAR 0 3
13832: PPUSH
13833: LD_INT 1
13835: PPUSH
13836: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13840: LD_INT 63
13842: PPUSH
13843: LD_VAR 0 3
13847: PPUSH
13848: LD_INT 1
13850: PPUSH
13851: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13855: LD_INT 3
13857: PPUSH
13858: LD_VAR 0 3
13862: PPUSH
13863: LD_INT 1
13865: PPUSH
13866: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13870: LD_INT 4
13872: PPUSH
13873: LD_VAR 0 3
13877: PPUSH
13878: LD_INT 1
13880: PPUSH
13881: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13885: LD_INT 5
13887: PPUSH
13888: LD_VAR 0 3
13892: PPUSH
13893: LD_INT 1
13895: PPUSH
13896: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13900: LD_INT 66
13902: PPUSH
13903: LD_VAR 0 3
13907: PPUSH
13908: LD_INT 1
13910: PPUSH
13911: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13915: LD_INT 21
13917: PPUSH
13918: LD_VAR 0 3
13922: PPUSH
13923: LD_INT 1
13925: PPUSH
13926: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13930: LD_INT 22
13932: PPUSH
13933: LD_VAR 0 3
13937: PPUSH
13938: LD_INT 1
13940: PPUSH
13941: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13945: LD_INT 19
13947: PPUSH
13948: LD_VAR 0 3
13952: PPUSH
13953: LD_INT 1
13955: PPUSH
13956: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13960: LD_INT 54
13962: PPUSH
13963: LD_VAR 0 3
13967: PPUSH
13968: LD_INT 1
13970: PPUSH
13971: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13975: LD_INT 55
13977: PPUSH
13978: LD_VAR 0 3
13982: PPUSH
13983: LD_INT 1
13985: PPUSH
13986: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13990: LD_INT 0
13992: PPUSH
13993: LD_VAR 0 3
13997: PPUSH
13998: LD_INT 1
14000: PPUSH
14001: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14005: LD_INT 1
14007: PPUSH
14008: LD_VAR 0 3
14012: PPUSH
14013: LD_INT 1
14015: PPUSH
14016: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14020: LD_INT 2
14022: PPUSH
14023: LD_VAR 0 3
14027: PPUSH
14028: LD_INT 1
14030: PPUSH
14031: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14035: LD_INT 3
14037: PPUSH
14038: LD_VAR 0 3
14042: PPUSH
14043: LD_INT 1
14045: PPUSH
14046: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14050: LD_INT 4
14052: PPUSH
14053: LD_VAR 0 3
14057: PPUSH
14058: LD_INT 1
14060: PPUSH
14061: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14065: LD_INT 5
14067: PPUSH
14068: LD_VAR 0 3
14072: PPUSH
14073: LD_INT 1
14075: PPUSH
14076: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14080: LD_INT 6
14082: PPUSH
14083: LD_VAR 0 3
14087: PPUSH
14088: LD_INT 1
14090: PPUSH
14091: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14095: LD_INT 7
14097: PPUSH
14098: LD_VAR 0 3
14102: PPUSH
14103: LD_INT 1
14105: PPUSH
14106: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14110: LD_INT 8
14112: PPUSH
14113: LD_VAR 0 3
14117: PPUSH
14118: LD_INT 1
14120: PPUSH
14121: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14125: LD_INT 10
14127: PPUSH
14128: LD_VAR 0 3
14132: PPUSH
14133: LD_INT 1
14135: PPUSH
14136: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14140: LD_INT 11
14142: PPUSH
14143: LD_VAR 0 3
14147: PPUSH
14148: LD_INT 1
14150: PPUSH
14151: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14155: LD_INT 12
14157: PPUSH
14158: LD_VAR 0 3
14162: PPUSH
14163: LD_INT 1
14165: PPUSH
14166: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
14170: LD_INT 13
14172: PPUSH
14173: LD_VAR 0 3
14177: PPUSH
14178: LD_INT 1
14180: PPUSH
14181: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
14185: LD_INT 14
14187: PPUSH
14188: LD_VAR 0 3
14192: PPUSH
14193: LD_INT 1
14195: PPUSH
14196: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14200: LD_INT 15
14202: PPUSH
14203: LD_VAR 0 3
14207: PPUSH
14208: LD_INT 1
14210: PPUSH
14211: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14215: LD_INT 16
14217: PPUSH
14218: LD_VAR 0 3
14222: PPUSH
14223: LD_INT 1
14225: PPUSH
14226: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14230: LD_INT 17
14232: PPUSH
14233: LD_VAR 0 3
14237: PPUSH
14238: LD_INT 1
14240: PPUSH
14241: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
14245: LD_INT 18
14247: PPUSH
14248: LD_VAR 0 3
14252: PPUSH
14253: LD_INT 1
14255: PPUSH
14256: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14260: LD_INT 19
14262: PPUSH
14263: LD_VAR 0 3
14267: PPUSH
14268: LD_INT 1
14270: PPUSH
14271: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14275: LD_INT 20
14277: PPUSH
14278: LD_VAR 0 3
14282: PPUSH
14283: LD_INT 1
14285: PPUSH
14286: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14290: LD_INT 21
14292: PPUSH
14293: LD_VAR 0 3
14297: PPUSH
14298: LD_INT 1
14300: PPUSH
14301: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14305: LD_INT 23
14307: PPUSH
14308: LD_VAR 0 3
14312: PPUSH
14313: LD_INT 1
14315: PPUSH
14316: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14320: LD_INT 26
14322: PPUSH
14323: LD_VAR 0 3
14327: PPUSH
14328: LD_INT 1
14330: PPUSH
14331: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14335: LD_INT 27
14337: PPUSH
14338: LD_VAR 0 3
14342: PPUSH
14343: LD_INT 1
14345: PPUSH
14346: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14350: LD_INT 28
14352: PPUSH
14353: LD_VAR 0 3
14357: PPUSH
14358: LD_INT 1
14360: PPUSH
14361: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14365: LD_INT 29
14367: PPUSH
14368: LD_VAR 0 3
14372: PPUSH
14373: LD_INT 1
14375: PPUSH
14376: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14380: LD_INT 30
14382: PPUSH
14383: LD_VAR 0 3
14387: PPUSH
14388: LD_INT 1
14390: PPUSH
14391: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14395: LD_INT 31
14397: PPUSH
14398: LD_VAR 0 3
14402: PPUSH
14403: LD_INT 1
14405: PPUSH
14406: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14410: LD_INT 32
14412: PPUSH
14413: LD_VAR 0 3
14417: PPUSH
14418: LD_INT 1
14420: PPUSH
14421: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
14425: LD_INT 33
14427: PPUSH
14428: LD_VAR 0 3
14432: PPUSH
14433: LD_INT 1
14435: PPUSH
14436: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14440: LD_INT 36
14442: PPUSH
14443: LD_VAR 0 3
14447: PPUSH
14448: LD_INT 1
14450: PPUSH
14451: CALL_OW 324
// end ; 6 :
14455: GO 15465
14457: LD_INT 6
14459: DOUBLE
14460: EQUAL
14461: IFTRUE 14465
14463: GO 15390
14465: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14466: LD_INT 35
14468: PPUSH
14469: LD_VAR 0 3
14473: PPUSH
14474: LD_INT 1
14476: PPUSH
14477: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14481: LD_INT 45
14483: PPUSH
14484: LD_VAR 0 3
14488: PPUSH
14489: LD_INT 1
14491: PPUSH
14492: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14496: LD_INT 46
14498: PPUSH
14499: LD_VAR 0 3
14503: PPUSH
14504: LD_INT 1
14506: PPUSH
14507: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14511: LD_INT 47
14513: PPUSH
14514: LD_VAR 0 3
14518: PPUSH
14519: LD_INT 1
14521: PPUSH
14522: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14526: LD_INT 1
14528: PPUSH
14529: LD_VAR 0 3
14533: PPUSH
14534: LD_INT 1
14536: PPUSH
14537: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14541: LD_INT 2
14543: PPUSH
14544: LD_VAR 0 3
14548: PPUSH
14549: LD_INT 1
14551: PPUSH
14552: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14556: LD_INT 11
14558: PPUSH
14559: LD_VAR 0 3
14563: PPUSH
14564: LD_INT 1
14566: PPUSH
14567: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14571: LD_INT 20
14573: PPUSH
14574: LD_VAR 0 3
14578: PPUSH
14579: LD_INT 1
14581: PPUSH
14582: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14586: LD_INT 48
14588: PPUSH
14589: LD_VAR 0 3
14593: PPUSH
14594: LD_INT 1
14596: PPUSH
14597: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14601: LD_INT 49
14603: PPUSH
14604: LD_VAR 0 3
14608: PPUSH
14609: LD_INT 1
14611: PPUSH
14612: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
14616: LD_INT 50
14618: PPUSH
14619: LD_VAR 0 3
14623: PPUSH
14624: LD_INT 1
14626: PPUSH
14627: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14631: LD_INT 69
14633: PPUSH
14634: LD_VAR 0 3
14638: PPUSH
14639: LD_INT 1
14641: PPUSH
14642: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14646: LD_INT 39
14648: PPUSH
14649: LD_VAR 0 3
14653: PPUSH
14654: LD_INT 1
14656: PPUSH
14657: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14661: LD_INT 34
14663: PPUSH
14664: LD_VAR 0 3
14668: PPUSH
14669: LD_INT 1
14671: PPUSH
14672: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14676: LD_INT 42
14678: PPUSH
14679: LD_VAR 0 3
14683: PPUSH
14684: LD_INT 1
14686: PPUSH
14687: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14691: LD_INT 44
14693: PPUSH
14694: LD_VAR 0 3
14698: PPUSH
14699: LD_INT 1
14701: PPUSH
14702: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14706: LD_INT 41
14708: PPUSH
14709: LD_VAR 0 3
14713: PPUSH
14714: LD_INT 1
14716: PPUSH
14717: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
14721: LD_INT 13
14723: PPUSH
14724: LD_VAR 0 3
14728: PPUSH
14729: LD_INT 1
14731: PPUSH
14732: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14736: LD_INT 40
14738: PPUSH
14739: LD_VAR 0 3
14743: PPUSH
14744: LD_INT 1
14746: PPUSH
14747: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14751: LD_INT 43
14753: PPUSH
14754: LD_VAR 0 3
14758: PPUSH
14759: LD_INT 1
14761: PPUSH
14762: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14766: LD_INT 70
14768: PPUSH
14769: LD_VAR 0 3
14773: PPUSH
14774: LD_INT 1
14776: PPUSH
14777: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
14781: LD_INT 23
14783: PPUSH
14784: LD_VAR 0 3
14788: PPUSH
14789: LD_INT 1
14791: PPUSH
14792: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14796: LD_INT 51
14798: PPUSH
14799: LD_VAR 0 3
14803: PPUSH
14804: LD_INT 1
14806: PPUSH
14807: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14811: LD_INT 52
14813: PPUSH
14814: LD_VAR 0 3
14818: PPUSH
14819: LD_INT 1
14821: PPUSH
14822: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14826: LD_INT 6
14828: PPUSH
14829: LD_VAR 0 3
14833: PPUSH
14834: LD_INT 1
14836: PPUSH
14837: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14841: LD_INT 15
14843: PPUSH
14844: LD_VAR 0 3
14848: PPUSH
14849: LD_INT 1
14851: PPUSH
14852: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14856: LD_INT 7
14858: PPUSH
14859: LD_VAR 0 3
14863: PPUSH
14864: LD_INT 1
14866: PPUSH
14867: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14871: LD_INT 12
14873: PPUSH
14874: LD_VAR 0 3
14878: PPUSH
14879: LD_INT 1
14881: PPUSH
14882: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
14886: LD_INT 10
14888: PPUSH
14889: LD_VAR 0 3
14893: PPUSH
14894: LD_INT 1
14896: PPUSH
14897: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14901: LD_INT 17
14903: PPUSH
14904: LD_VAR 0 3
14908: PPUSH
14909: LD_INT 1
14911: PPUSH
14912: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14916: LD_INT 18
14918: PPUSH
14919: LD_VAR 0 3
14923: PPUSH
14924: LD_INT 1
14926: PPUSH
14927: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14931: LD_INT 60
14933: PPUSH
14934: LD_VAR 0 3
14938: PPUSH
14939: LD_INT 1
14941: PPUSH
14942: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
14946: LD_INT 61
14948: PPUSH
14949: LD_VAR 0 3
14953: PPUSH
14954: LD_INT 1
14956: PPUSH
14957: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14961: LD_INT 32
14963: PPUSH
14964: LD_VAR 0 3
14968: PPUSH
14969: LD_INT 1
14971: PPUSH
14972: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
14976: LD_INT 27
14978: PPUSH
14979: LD_VAR 0 3
14983: PPUSH
14984: LD_INT 1
14986: PPUSH
14987: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
14991: LD_INT 36
14993: PPUSH
14994: LD_VAR 0 3
14998: PPUSH
14999: LD_INT 1
15001: PPUSH
15002: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
15006: LD_INT 33
15008: PPUSH
15009: LD_VAR 0 3
15013: PPUSH
15014: LD_INT 1
15016: PPUSH
15017: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15021: LD_INT 9
15023: PPUSH
15024: LD_VAR 0 3
15028: PPUSH
15029: LD_INT 1
15031: PPUSH
15032: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
15036: LD_INT 38
15038: PPUSH
15039: LD_VAR 0 3
15043: PPUSH
15044: LD_INT 1
15046: PPUSH
15047: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15051: LD_INT 57
15053: PPUSH
15054: LD_VAR 0 3
15058: PPUSH
15059: LD_INT 1
15061: PPUSH
15062: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
15066: LD_INT 58
15068: PPUSH
15069: LD_VAR 0 3
15073: PPUSH
15074: LD_INT 1
15076: PPUSH
15077: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
15081: LD_INT 28
15083: PPUSH
15084: LD_VAR 0 3
15088: PPUSH
15089: LD_INT 1
15091: PPUSH
15092: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
15096: LD_INT 29
15098: PPUSH
15099: LD_VAR 0 3
15103: PPUSH
15104: LD_INT 1
15106: PPUSH
15107: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15111: LD_INT 30
15113: PPUSH
15114: LD_VAR 0 3
15118: PPUSH
15119: LD_INT 1
15121: PPUSH
15122: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15126: LD_INT 37
15128: PPUSH
15129: LD_VAR 0 3
15133: PPUSH
15134: LD_INT 1
15136: PPUSH
15137: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15141: LD_INT 63
15143: PPUSH
15144: LD_VAR 0 3
15148: PPUSH
15149: LD_INT 1
15151: PPUSH
15152: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
15156: LD_INT 64
15158: PPUSH
15159: LD_VAR 0 3
15163: PPUSH
15164: LD_INT 1
15166: PPUSH
15167: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15171: LD_INT 3
15173: PPUSH
15174: LD_VAR 0 3
15178: PPUSH
15179: LD_INT 1
15181: PPUSH
15182: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
15186: LD_INT 4
15188: PPUSH
15189: LD_VAR 0 3
15193: PPUSH
15194: LD_INT 1
15196: PPUSH
15197: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15201: LD_INT 5
15203: PPUSH
15204: LD_VAR 0 3
15208: PPUSH
15209: LD_INT 1
15211: PPUSH
15212: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
15216: LD_INT 8
15218: PPUSH
15219: LD_VAR 0 3
15223: PPUSH
15224: LD_INT 1
15226: PPUSH
15227: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15231: LD_INT 66
15233: PPUSH
15234: LD_VAR 0 3
15238: PPUSH
15239: LD_INT 1
15241: PPUSH
15242: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
15246: LD_INT 67
15248: PPUSH
15249: LD_VAR 0 3
15253: PPUSH
15254: LD_INT 1
15256: PPUSH
15257: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15261: LD_INT 21
15263: PPUSH
15264: LD_VAR 0 3
15268: PPUSH
15269: LD_INT 1
15271: PPUSH
15272: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15276: LD_INT 22
15278: PPUSH
15279: LD_VAR 0 3
15283: PPUSH
15284: LD_INT 1
15286: PPUSH
15287: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15291: LD_INT 19
15293: PPUSH
15294: LD_VAR 0 3
15298: PPUSH
15299: LD_INT 1
15301: PPUSH
15302: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
15306: LD_INT 26
15308: PPUSH
15309: LD_VAR 0 3
15313: PPUSH
15314: LD_INT 1
15316: PPUSH
15317: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15321: LD_INT 54
15323: PPUSH
15324: LD_VAR 0 3
15328: PPUSH
15329: LD_INT 1
15331: PPUSH
15332: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
15336: LD_INT 55
15338: PPUSH
15339: LD_VAR 0 3
15343: PPUSH
15344: LD_INT 1
15346: PPUSH
15347: CALL_OW 322
// for i = 0 to 39 do
15351: LD_ADDR_VAR 0 4
15355: PUSH
15356: DOUBLE
15357: LD_INT 0
15359: DEC
15360: ST_TO_ADDR
15361: LD_INT 39
15363: PUSH
15364: FOR_TO
15365: IFFALSE 15386
// SetRestrict ( i , side , true ) ;
15367: LD_VAR 0 4
15371: PPUSH
15372: LD_VAR 0 3
15376: PPUSH
15377: LD_INT 1
15379: PPUSH
15380: CALL_OW 324
15384: GO 15364
15386: POP
15387: POP
// end ; else
15388: GO 15465
15390: POP
// begin for i = 1 to 73 do
15391: LD_ADDR_VAR 0 4
15395: PUSH
15396: DOUBLE
15397: LD_INT 1
15399: DEC
15400: ST_TO_ADDR
15401: LD_INT 73
15403: PUSH
15404: FOR_TO
15405: IFFALSE 15426
// SetTech ( i , side , state_enabled ) ;
15407: LD_VAR 0 4
15411: PPUSH
15412: LD_VAR 0 3
15416: PPUSH
15417: LD_INT 1
15419: PPUSH
15420: CALL_OW 322
15424: GO 15404
15426: POP
15427: POP
// for i = 0 to 39 do
15428: LD_ADDR_VAR 0 4
15432: PUSH
15433: DOUBLE
15434: LD_INT 0
15436: DEC
15437: ST_TO_ADDR
15438: LD_INT 39
15440: PUSH
15441: FOR_TO
15442: IFFALSE 15463
// SetRestrict ( i , side , true ) ;
15444: LD_VAR 0 4
15448: PPUSH
15449: LD_VAR 0 3
15453: PPUSH
15454: LD_INT 1
15456: PPUSH
15457: CALL_OW 324
15461: GO 15441
15463: POP
15464: POP
// end ; end ; end ;
15465: GO 11470
15467: POP
15468: POP
// end ;
15469: LD_VAR 0 2
15473: RET
