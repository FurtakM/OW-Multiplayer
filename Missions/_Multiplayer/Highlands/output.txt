// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , amount_of_apemen , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , extra_sib_deposits_locations , normal_oil_deposits_locations , normal_sib_deposits_locations , battle_flags_id , Side_Comps ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function init_map ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// normal_oil_deposits_locations := [ [ 65 , 49 ] , [ 157 , 62 ] , [ 192 , 143 ] , [ 109 , 147 ] ] ;
   4: LD_ADDR_EXP 40
   8: PUSH
   9: LD_INT 65
  11: PUSH
  12: LD_INT 49
  14: PUSH
  15: EMPTY
  16: LIST
  17: LIST
  18: PUSH
  19: LD_INT 157
  21: PUSH
  22: LD_INT 62
  24: PUSH
  25: EMPTY
  26: LIST
  27: LIST
  28: PUSH
  29: LD_INT 192
  31: PUSH
  32: LD_INT 143
  34: PUSH
  35: EMPTY
  36: LIST
  37: LIST
  38: PUSH
  39: LD_INT 109
  41: PUSH
  42: LD_INT 147
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: EMPTY
  50: LIST
  51: LIST
  52: LIST
  53: LIST
  54: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 22 , 33 ] , [ 179 , 43 ] , [ 228 , 151 ] , [ 83 , 154 ] ] ;
  55: LD_ADDR_EXP 38
  59: PUSH
  60: LD_INT 22
  62: PUSH
  63: LD_INT 33
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 179
  72: PUSH
  73: LD_INT 43
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: LD_INT 228
  82: PUSH
  83: LD_INT 151
  85: PUSH
  86: EMPTY
  87: LIST
  88: LIST
  89: PUSH
  90: LD_INT 83
  92: PUSH
  93: LD_INT 154
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: PUSH
 100: EMPTY
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 39 , 18 ] , [ 138 , 27 ] , [ 222 , 157 ] , [ 82 , 115 ] ] ;
 106: LD_ADDR_EXP 41
 110: PUSH
 111: LD_INT 39
 113: PUSH
 114: LD_INT 18
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: PUSH
 121: LD_INT 138
 123: PUSH
 124: LD_INT 27
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: PUSH
 131: LD_INT 222
 133: PUSH
 134: LD_INT 157
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: PUSH
 141: LD_INT 82
 143: PUSH
 144: LD_INT 115
 146: PUSH
 147: EMPTY
 148: LIST
 149: LIST
 150: PUSH
 151: EMPTY
 152: LIST
 153: LIST
 154: LIST
 155: LIST
 156: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 35 , 55 ] , [ 188 , 70 ] , [ 214 , 123 ] , [ 66 , 120 ] ] ;
 157: LD_ADDR_EXP 39
 161: PUSH
 162: LD_INT 35
 164: PUSH
 165: LD_INT 55
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: PUSH
 172: LD_INT 188
 174: PUSH
 175: LD_INT 70
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: LD_INT 214
 184: PUSH
 185: LD_INT 123
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: LD_INT 66
 194: PUSH
 195: LD_INT 120
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: ST_TO_ADDR
// depot_def := [ [ 54 , 45 , 3 ] , [ 161 , 55 , 5 ] , [ 98 , 142 , 4 ] , [ 194 , 133 , 1 ] ] ;
 208: LD_ADDR_EXP 35
 212: PUSH
 213: LD_INT 54
 215: PUSH
 216: LD_INT 45
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: PUSH
 227: LD_INT 161
 229: PUSH
 230: LD_INT 55
 232: PUSH
 233: LD_INT 5
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 98
 243: PUSH
 244: LD_INT 142
 246: PUSH
 247: LD_INT 4
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: LIST
 254: PUSH
 255: LD_INT 194
 257: PUSH
 258: LD_INT 133
 260: PUSH
 261: LD_INT 1
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: LIST
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: LIST
 274: ST_TO_ADDR
// start_def := [ [ 53 , 52 ] , [ 152 , 45 ] , [ 91 , 140 ] , [ 200 , 132 ] ] ;
 275: LD_ADDR_EXP 37
 279: PUSH
 280: LD_INT 53
 282: PUSH
 283: LD_INT 52
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 152
 292: PUSH
 293: LD_INT 45
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: LD_INT 91
 302: PUSH
 303: LD_INT 140
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 200
 312: PUSH
 313: LD_INT 132
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: ST_TO_ADDR
// breastworks_def := [ [ [ 76 , 75 , 5 ] , [ 72 , 34 , 4 ] , [ 81 , 60 , 5 ] , [ 31 , 31 , 2 ] ] , [ [ 170 , 79 , 5 ] , [ 139 , 42 , 1 ] , [ 171 , 58 , 4 ] , [ 149 , 25 , 3 ] ] , [ [ 114 , 163 , 5 ] , [ 114 , 138 , 4 ] , [ 97 , 116 , 3 ] , [ 81 , 135 , 1 ] ] , [ [ 179 , 116 , 2 ] , [ 175 , 145 , 1 ] , [ 217 , 149 , 4 ] , [ 202 , 158 , 0 ] ] ] ;
 326: LD_ADDR_EXP 36
 330: PUSH
 331: LD_INT 76
 333: PUSH
 334: LD_INT 75
 336: PUSH
 337: LD_INT 5
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 72
 347: PUSH
 348: LD_INT 34
 350: PUSH
 351: LD_INT 4
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 81
 361: PUSH
 362: LD_INT 60
 364: PUSH
 365: LD_INT 5
 367: PUSH
 368: EMPTY
 369: LIST
 370: LIST
 371: LIST
 372: PUSH
 373: LD_INT 31
 375: PUSH
 376: LD_INT 31
 378: PUSH
 379: LD_INT 2
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: LIST
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: PUSH
 393: LD_INT 170
 395: PUSH
 396: LD_INT 79
 398: PUSH
 399: LD_INT 5
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 139
 409: PUSH
 410: LD_INT 42
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: PUSH
 421: LD_INT 171
 423: PUSH
 424: LD_INT 58
 426: PUSH
 427: LD_INT 4
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 149
 437: PUSH
 438: LD_INT 25
 440: PUSH
 441: LD_INT 3
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 114
 457: PUSH
 458: LD_INT 163
 460: PUSH
 461: LD_INT 5
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 114
 471: PUSH
 472: LD_INT 138
 474: PUSH
 475: LD_INT 4
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: PUSH
 483: LD_INT 97
 485: PUSH
 486: LD_INT 116
 488: PUSH
 489: LD_INT 3
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PUSH
 497: LD_INT 81
 499: PUSH
 500: LD_INT 135
 502: PUSH
 503: LD_INT 1
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 179
 519: PUSH
 520: LD_INT 116
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 175
 533: PUSH
 534: LD_INT 145
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 217
 547: PUSH
 548: LD_INT 149
 550: PUSH
 551: LD_INT 4
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 202
 561: PUSH
 562: LD_INT 158
 564: PUSH
 565: LD_INT 0
 567: PUSH
 568: EMPTY
 569: LIST
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: ST_TO_ADDR
// for i in normal_oil_deposits_locations do
 585: LD_ADDR_VAR 0 2
 589: PUSH
 590: LD_EXP 40
 594: PUSH
 595: FOR_IN
 596: IFFALSE 625
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 598: LD_VAR 0 2
 602: PUSH
 603: LD_INT 1
 605: ARRAY
 606: PPUSH
 607: LD_VAR 0 2
 611: PUSH
 612: LD_INT 2
 614: ARRAY
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: CALL_OW 62
 623: GO 595
 625: POP
 626: POP
// if def_extra_oil_deposits then
 627: LD_EXP 6
 631: IFFALSE 675
// for i in extra_oil_deposits_locations do
 633: LD_ADDR_VAR 0 2
 637: PUSH
 638: LD_EXP 38
 642: PUSH
 643: FOR_IN
 644: IFFALSE 673
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 646: LD_VAR 0 2
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: LD_VAR 0 2
 659: PUSH
 660: LD_INT 2
 662: ARRAY
 663: PPUSH
 664: LD_INT 2
 666: PPUSH
 667: CALL_OW 62
 671: GO 643
 673: POP
 674: POP
// if def_extra_sib_deposits > 0 then
 675: LD_EXP 7
 679: PUSH
 680: LD_INT 0
 682: GREATER
 683: IFFALSE 779
// begin for i in normal_sib_deposits_locations do
 685: LD_ADDR_VAR 0 2
 689: PUSH
 690: LD_EXP 41
 694: PUSH
 695: FOR_IN
 696: IFFALSE 725
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 698: LD_VAR 0 2
 702: PUSH
 703: LD_INT 1
 705: ARRAY
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 2
 714: ARRAY
 715: PPUSH
 716: LD_INT 3
 718: PPUSH
 719: CALL_OW 62
 723: GO 695
 725: POP
 726: POP
// if def_extra_sib_deposits = 2 then
 727: LD_EXP 7
 731: PUSH
 732: LD_INT 2
 734: EQUAL
 735: IFFALSE 779
// for i in extra_sib_deposits_locations do
 737: LD_ADDR_VAR 0 2
 741: PUSH
 742: LD_EXP 39
 746: PUSH
 747: FOR_IN
 748: IFFALSE 777
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 750: LD_VAR 0 2
 754: PUSH
 755: LD_INT 1
 757: ARRAY
 758: PPUSH
 759: LD_VAR 0 2
 763: PUSH
 764: LD_INT 2
 766: ARRAY
 767: PPUSH
 768: LD_INT 3
 770: PPUSH
 771: CALL_OW 62
 775: GO 747
 777: POP
 778: POP
// end ; end ;
 779: LD_VAR 0 1
 783: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 784: LD_INT 0
 786: PPUSH
 787: PPUSH
 788: PPUSH
 789: PPUSH
 790: PPUSH
 791: PPUSH
 792: PPUSH
 793: PPUSH
 794: PPUSH
// if MultiPlayer then
 795: LD_OWVAR 4
 799: IFFALSE 863
// begin Game_Type = mp_game_type ;
 801: LD_ADDR_EXP 16
 805: PUSH
 806: LD_OWVAR 6
 810: ST_TO_ADDR
// Your_Side = mp_player_side ;
 811: LD_ADDR_OWVAR 2
 815: PUSH
 816: LD_OWVAR 7
 820: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 821: LD_ADDR_EXP 32
 825: PUSH
 826: LD_OWVAR 17
 830: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 831: LD_ADDR_EXP 30
 835: PUSH
 836: LD_OWVAR 15
 840: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 841: LD_ADDR_EXP 33
 845: PUSH
 846: LD_OWVAR 16
 850: ST_TO_ADDR
// Teams = mp_teams ;
 851: LD_ADDR_EXP 31
 855: PUSH
 856: LD_OWVAR 12
 860: ST_TO_ADDR
// end else
 861: GO 1064
// begin Game_Type = 2 ;
 863: LD_ADDR_EXP 16
 867: PUSH
 868: LD_INT 2
 870: ST_TO_ADDR
// Your_Side = 4 ;
 871: LD_ADDR_OWVAR 2
 875: PUSH
 876: LD_INT 4
 878: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 879: LD_ADDR_EXP 32
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: LD_INT 3
 889: PUSH
 890: LD_INT 0
 892: PUSH
 893: LD_INT 1
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 2
 901: PUSH
 902: LD_INT 4
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 918: LD_ADDR_EXP 30
 922: PUSH
 923: LD_INT 0
 925: PUSH
 926: LD_INT 1
 928: PUSH
 929: LD_INT 0
 931: PUSH
 932: LD_INT 2
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 2
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 957: LD_ADDR_EXP 33
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 3
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: LD_INT 2
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: LD_INT 1
 979: PUSH
 980: LD_INT 3
 982: PUSH
 983: LD_INT 0
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 996: LD_ADDR_EXP 43
1000: PUSH
1001: LD_INT 0
1003: PUSH
1004: LD_INT 0
1006: PUSH
1007: LD_INT 0
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: LD_INT 0
1015: PUSH
1016: LD_INT 0
1018: PUSH
1019: LD_INT 0
1021: PUSH
1022: LD_INT 0
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 4 , 7 ] ] ;
1035: LD_ADDR_EXP 31
1039: PUSH
1040: LD_INT 2
1042: PUSH
1043: LD_INT 6
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: PUSH
1050: LD_INT 4
1052: PUSH
1053: LD_INT 7
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: ST_TO_ADDR
// end ; if MultiPlayer then
1064: LD_OWVAR 4
1068: IFFALSE 1267
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1070: LD_ADDR_EXP 1
1074: PUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 426
1082: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1083: LD_ADDR_EXP 2
1087: PUSH
1088: LD_INT 1
1090: PPUSH
1091: CALL_OW 426
1095: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1096: LD_ADDR_EXP 3
1100: PUSH
1101: LD_INT 2
1103: PPUSH
1104: CALL_OW 426
1108: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1109: LD_ADDR_EXP 4
1113: PUSH
1114: LD_INT 3
1116: PPUSH
1117: CALL_OW 426
1121: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1122: LD_ADDR_EXP 5
1126: PUSH
1127: LD_INT 4
1129: PPUSH
1130: CALL_OW 426
1134: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1135: LD_ADDR_EXP 6
1139: PUSH
1140: LD_INT 5
1142: PPUSH
1143: CALL_OW 426
1147: ST_TO_ADDR
// def_extra_sib_deposits = GetMultiplayerSetting ( 6 ) ;
1148: LD_ADDR_EXP 7
1152: PUSH
1153: LD_INT 6
1155: PPUSH
1156: CALL_OW 426
1160: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1161: LD_ADDR_EXP 8
1165: PUSH
1166: LD_INT 10
1168: PPUSH
1169: CALL_OW 426
1173: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1174: LD_ADDR_EXP 9
1178: PUSH
1179: LD_INT 11
1181: PPUSH
1182: CALL_OW 426
1186: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1187: LD_ADDR_EXP 10
1191: PUSH
1192: LD_INT 12
1194: PPUSH
1195: CALL_OW 426
1199: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1200: LD_ADDR_EXP 11
1204: PUSH
1205: LD_INT 13
1207: PPUSH
1208: CALL_OW 426
1212: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1213: LD_ADDR_EXP 12
1217: PUSH
1218: LD_INT 14
1220: PPUSH
1221: CALL_OW 426
1225: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1226: LD_ADDR_EXP 13
1230: PUSH
1231: LD_INT 15
1233: PPUSH
1234: CALL_OW 426
1238: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
1239: LD_ADDR_EXP 14
1243: PUSH
1244: LD_INT 20
1246: PPUSH
1247: CALL_OW 426
1251: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
1252: LD_ADDR_VAR 0 9
1256: PUSH
1257: LD_INT 22
1259: PPUSH
1260: CALL_OW 426
1264: ST_TO_ADDR
// end else
1265: GO 1391
// begin randomize ;
1267: CALL_OW 10
// def_base_level = 2 ;
1271: LD_ADDR_EXP 1
1275: PUSH
1276: LD_INT 2
1278: ST_TO_ADDR
// def_amount_of_people = 1 ;
1279: LD_ADDR_EXP 2
1283: PUSH
1284: LD_INT 1
1286: ST_TO_ADDR
// def_skill_level = 1 ;
1287: LD_ADDR_EXP 3
1291: PUSH
1292: LD_INT 1
1294: ST_TO_ADDR
// def_starting_resources = 2 ;
1295: LD_ADDR_EXP 4
1299: PUSH
1300: LD_INT 2
1302: ST_TO_ADDR
// def_shipments_density = 50 ;
1303: LD_ADDR_EXP 5
1307: PUSH
1308: LD_INT 50
1310: ST_TO_ADDR
// def_extra_oil_deposits = 1 ;
1311: LD_ADDR_EXP 6
1315: PUSH
1316: LD_INT 1
1318: ST_TO_ADDR
// def_extra_sib_deposits = 1 ;
1319: LD_ADDR_EXP 7
1323: PUSH
1324: LD_INT 1
1326: ST_TO_ADDR
// def_shared_vision = 1 ;
1327: LD_ADDR_EXP 8
1331: PUSH
1332: LD_INT 1
1334: ST_TO_ADDR
// def_morale_flags = 2 ;
1335: LD_ADDR_EXP 9
1339: PUSH
1340: LD_INT 2
1342: ST_TO_ADDR
// def_siberite_detection = 1 ;
1343: LD_ADDR_EXP 10
1347: PUSH
1348: LD_INT 1
1350: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1351: LD_ADDR_EXP 11
1355: PUSH
1356: LD_INT 3
1358: ST_TO_ADDR
// def_people_respawning = 2 ;
1359: LD_ADDR_EXP 12
1363: PUSH
1364: LD_INT 2
1366: ST_TO_ADDR
// def_siberite_bomb = 2 ;
1367: LD_ADDR_EXP 13
1371: PUSH
1372: LD_INT 2
1374: ST_TO_ADDR
// def_builduptime = 2 ;
1375: LD_ADDR_EXP 14
1379: PUSH
1380: LD_INT 2
1382: ST_TO_ADDR
// tech_level = 4 ;
1383: LD_ADDR_VAR 0 9
1387: PUSH
1388: LD_INT 4
1390: ST_TO_ADDR
// end ; if isSGUI then
1391: LD_OWVAR 83
1395: IFFALSE 1403
// setMpTechs ( ) else
1397: CALL 8225 0 0
1401: GO 1416
// SetMpTechLevel ( tech_level + 1 ) ;
1403: LD_VAR 0 9
1407: PUSH
1408: LD_INT 1
1410: PLUS
1411: PPUSH
1412: CALL 8372 0 1
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1416: LD_ADDR_EXP 17
1420: PUSH
1421: LD_INT 0
1423: PUSH
1424: LD_INT 1
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_EXP 1
1443: PUSH
1444: LD_INT 1
1446: PLUS
1447: ARRAY
1448: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1449: LD_ADDR_EXP 18
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 2
1462: PUSH
1463: LD_INT 4
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_EXP 1
1476: PUSH
1477: LD_INT 1
1479: PLUS
1480: ARRAY
1481: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1482: LD_ADDR_EXP 20
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: LD_INT 3
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: LD_INT 5
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: PUSH
1505: LD_EXP 3
1509: PUSH
1510: LD_INT 1
1512: PLUS
1513: ARRAY
1514: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1515: LD_ADDR_EXP 22
1519: PUSH
1520: LD_INT 0
1522: PUSH
1523: LD_INT 0
1525: PUSH
1526: LD_INT 0
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: PUSH
1534: LD_INT 30
1536: PUSH
1537: LD_INT 0
1539: PUSH
1540: LD_INT 0
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 50
1550: PUSH
1551: LD_INT 20
1553: PUSH
1554: LD_INT 0
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: LIST
1561: PUSH
1562: LD_INT 80
1564: PUSH
1565: LD_INT 40
1567: PUSH
1568: LD_INT 20
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: PUSH
1582: LD_EXP 4
1586: PUSH
1587: LD_INT 1
1589: PLUS
1590: ARRAY
1591: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1592: LD_ADDR_EXP 21
1596: PUSH
1597: LD_INT 10
1599: PUSH
1600: EMPTY
1601: LIST
1602: PUSH
1603: LD_INT 7
1605: PUSH
1606: LD_INT 14
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: PUSH
1613: LD_INT 6
1615: PUSH
1616: LD_INT 12
1618: PUSH
1619: LD_INT 18
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: LD_INT 10
1632: PUSH
1633: LD_INT 15
1635: PUSH
1636: LD_INT 20
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: PUSH
1651: LD_EXP 4
1655: PUSH
1656: LD_INT 1
1658: PLUS
1659: ARRAY
1660: ST_TO_ADDR
// number_of_people = def_amount_of_people + 4 ;
1661: LD_ADDR_EXP 19
1665: PUSH
1666: LD_EXP 2
1670: PUSH
1671: LD_INT 4
1673: PLUS
1674: ST_TO_ADDR
// shipments_density = 150 - ( def_shipments_density + 1 ) ;
1675: LD_ADDR_EXP 23
1679: PUSH
1680: LD_INT 150
1682: PUSH
1683: LD_EXP 5
1687: PUSH
1688: LD_INT 1
1690: PLUS
1691: MINUS
1692: ST_TO_ADDR
// amount_of_apemen = [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1693: LD_ADDR_EXP 27
1697: PUSH
1698: LD_INT 0
1700: PUSH
1701: LD_INT 3
1703: PUSH
1704: LD_INT 6
1706: PUSH
1707: LD_INT 9
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: PUSH
1716: LD_EXP 11
1720: PUSH
1721: LD_INT 1
1723: PLUS
1724: ARRAY
1725: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1726: LD_ADDR_EXP 25
1730: PUSH
1731: LD_INT 0
1733: PUSH
1734: LD_INT 8400
1736: PUSH
1737: LD_INT 1750
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_EXP 12
1749: PUSH
1750: LD_INT 1
1752: PLUS
1753: ARRAY
1754: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1755: LD_ADDR_EXP 26
1759: PUSH
1760: LD_INT 0
1762: PUSH
1763: LD_INT 21000
1765: PUSH
1766: LD_INT 4200
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: PUSH
1774: LD_EXP 12
1778: PUSH
1779: LD_INT 1
1781: PLUS
1782: ARRAY
1783: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1784: LD_ADDR_EXP 24
1788: PUSH
1789: LD_INT 1
1791: NEG
1792: PUSH
1793: LD_INT 350
1795: PUSH
1796: LD_INT 700
1798: PUSH
1799: LD_INT 1400
1801: PUSH
1802: LD_INT 0
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: PUSH
1812: LD_EXP 9
1816: PUSH
1817: LD_INT 1
1819: PLUS
1820: ARRAY
1821: ST_TO_ADDR
// battle_flags_id = [ ] ;
1822: LD_ADDR_EXP 42
1826: PUSH
1827: EMPTY
1828: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1829: LD_EXP 13
1833: PUSH
1834: LD_INT 0
1836: EQUAL
1837: IFFALSE 1849
// siberite_bomb_Delay = 0 else
1839: LD_ADDR_EXP 28
1843: PUSH
1844: LD_INT 0
1846: ST_TO_ADDR
1847: GO 1871
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1849: LD_ADDR_EXP 28
1853: PUSH
1854: LD_EXP 13
1858: PUSH
1859: LD_INT 1
1861: MINUS
1862: PUSH
1863: LD_INT 21000
1865: MUL
1866: PUSH
1867: LD_INT 1
1869: PLUS
1870: ST_TO_ADDR
// end ;
1871: LD_VAR 0 1
1875: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1876: LD_INT 0
1878: PPUSH
1879: PPUSH
1880: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1881: LD_ADDR_EXP 34
1885: PUSH
1886: LD_EXP 30
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: EMPTY
1895: LIST
1896: DIFF
1897: PUSH
1898: LD_INT 1
1900: GREATER
1901: ST_TO_ADDR
// if not Team_Game then
1902: LD_EXP 34
1906: NOT
1907: IFFALSE 2005
// begin for i = 1 to 8 do
1909: LD_ADDR_VAR 0 2
1913: PUSH
1914: DOUBLE
1915: LD_INT 1
1917: DEC
1918: ST_TO_ADDR
1919: LD_INT 8
1921: PUSH
1922: FOR_TO
1923: IFFALSE 2001
// for j = 1 to 8 do
1925: LD_ADDR_VAR 0 3
1929: PUSH
1930: DOUBLE
1931: LD_INT 1
1933: DEC
1934: ST_TO_ADDR
1935: LD_INT 8
1937: PUSH
1938: FOR_TO
1939: IFFALSE 1997
// if i <> j then
1941: LD_VAR 0 2
1945: PUSH
1946: LD_VAR 0 3
1950: NONEQUAL
1951: IFFALSE 1975
// SetAttitude ( i , j , att_neutral , true ) else
1953: LD_VAR 0 2
1957: PPUSH
1958: LD_VAR 0 3
1962: PPUSH
1963: LD_INT 0
1965: PPUSH
1966: LD_INT 1
1968: PPUSH
1969: CALL_OW 80
1973: GO 1995
// SetAttitude ( i , j , att_friend , true ) ;
1975: LD_VAR 0 2
1979: PPUSH
1980: LD_VAR 0 3
1984: PPUSH
1985: LD_INT 1
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: CALL_OW 80
1995: GO 1938
1997: POP
1998: POP
1999: GO 1922
2001: POP
2002: POP
// end else
2003: GO 2180
// begin if def_shared_vision then
2005: LD_EXP 8
2009: IFFALSE 2074
// begin for i in Teams do
2011: LD_ADDR_VAR 0 2
2015: PUSH
2016: LD_EXP 31
2020: PUSH
2021: FOR_IN
2022: IFFALSE 2072
// for j = 2 to i do
2024: LD_ADDR_VAR 0 3
2028: PUSH
2029: DOUBLE
2030: LD_INT 2
2032: DEC
2033: ST_TO_ADDR
2034: LD_VAR 0 2
2038: PUSH
2039: FOR_TO
2040: IFFALSE 2068
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2042: LD_VAR 0 2
2046: PUSH
2047: LD_VAR 0 3
2051: ARRAY
2052: PPUSH
2053: LD_VAR 0 2
2057: PUSH
2058: LD_INT 1
2060: ARRAY
2061: PPUSH
2062: CALL_OW 343
2066: GO 2039
2068: POP
2069: POP
2070: GO 2021
2072: POP
2073: POP
// end ; for i = 1 to 8 do
2074: LD_ADDR_VAR 0 2
2078: PUSH
2079: DOUBLE
2080: LD_INT 1
2082: DEC
2083: ST_TO_ADDR
2084: LD_INT 8
2086: PUSH
2087: FOR_TO
2088: IFFALSE 2178
// for j = 1 to 8 do
2090: LD_ADDR_VAR 0 3
2094: PUSH
2095: DOUBLE
2096: LD_INT 1
2098: DEC
2099: ST_TO_ADDR
2100: LD_INT 8
2102: PUSH
2103: FOR_TO
2104: IFFALSE 2174
// if Side_Teams [ i ] = Side_Teams [ j ] then
2106: LD_EXP 30
2110: PUSH
2111: LD_VAR 0 2
2115: ARRAY
2116: PUSH
2117: LD_EXP 30
2121: PUSH
2122: LD_VAR 0 3
2126: ARRAY
2127: EQUAL
2128: IFFALSE 2152
// SetAttitude ( i , j , att_friend , true ) else
2130: LD_VAR 0 2
2134: PPUSH
2135: LD_VAR 0 3
2139: PPUSH
2140: LD_INT 1
2142: PPUSH
2143: LD_INT 1
2145: PPUSH
2146: CALL_OW 80
2150: GO 2172
// SetAttitude ( i , j , att_enemy , true ) ;
2152: LD_VAR 0 2
2156: PPUSH
2157: LD_VAR 0 3
2161: PPUSH
2162: LD_INT 2
2164: PPUSH
2165: LD_INT 1
2167: PPUSH
2168: CALL_OW 80
2172: GO 2103
2174: POP
2175: POP
2176: GO 2087
2178: POP
2179: POP
// end ; end ;
2180: LD_VAR 0 1
2184: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2185: LD_INT 0
2187: PPUSH
2188: PPUSH
2189: PPUSH
2190: PPUSH
// result := [ ] ;
2191: LD_ADDR_VAR 0 7
2195: PUSH
2196: EMPTY
2197: ST_TO_ADDR
// for i := 1 to count do
2198: LD_ADDR_VAR 0 8
2202: PUSH
2203: DOUBLE
2204: LD_INT 1
2206: DEC
2207: ST_TO_ADDR
2208: LD_VAR 0 1
2212: PUSH
2213: FOR_TO
2214: IFFALSE 2632
// begin uc_direction := Rand ( 0 , 5 ) ;
2216: LD_ADDR_OWVAR 24
2220: PUSH
2221: LD_INT 0
2223: PPUSH
2224: LD_INT 5
2226: PPUSH
2227: CALL_OW 12
2231: ST_TO_ADDR
// if commander then
2232: LD_LOC 1
2236: IFFALSE 2345
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2238: LD_ADDR_OWVAR 26
2242: PUSH
2243: LD_OWVAR 19
2247: PUSH
2248: LD_OWVAR 20
2252: ARRAY
2253: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2254: LD_INT 1
2256: PPUSH
2257: LD_INT 2
2259: PPUSH
2260: CALL_OW 12
2264: PPUSH
2265: LD_VAR 0 2
2269: PPUSH
2270: LD_EXP 20
2274: PUSH
2275: LD_INT 2
2277: PLUS
2278: PPUSH
2279: CALL_OW 380
// hc_importance := 105 ;
2283: LD_ADDR_OWVAR 32
2287: PUSH
2288: LD_INT 105
2290: ST_TO_ADDR
// commander := false ;
2291: LD_ADDR_LOC 1
2295: PUSH
2296: LD_INT 0
2298: ST_TO_ADDR
// if Multiplayer then
2299: LD_OWVAR 4
2303: IFFALSE 2343
// begin hc_gallery := MULTIAVATARS ;
2305: LD_ADDR_OWVAR 33
2309: PUSH
2310: LD_STRING MULTIAVATARS
2312: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2313: LD_ADDR_OWVAR 34
2317: PUSH
2318: LD_OWVAR 20
2322: PPUSH
2323: CALL_OW 525
2327: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2328: LD_ADDR_OWVAR 27
2332: PUSH
2333: LD_OWVAR 20
2337: PPUSH
2338: CALL_OW 526
2342: ST_TO_ADDR
// end ; end else
2343: GO 2408
// begin hc_name :=  ;
2345: LD_ADDR_OWVAR 26
2349: PUSH
2350: LD_STRING 
2352: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2353: LD_INT 1
2355: PPUSH
2356: LD_INT 2
2358: PPUSH
2359: CALL_OW 12
2363: PPUSH
2364: LD_VAR 0 2
2368: PPUSH
2369: LD_EXP 20
2373: PPUSH
2374: CALL_OW 380
// hc_importance := 0 ;
2378: LD_ADDR_OWVAR 32
2382: PUSH
2383: LD_INT 0
2385: ST_TO_ADDR
// if Multiplayer then
2386: LD_OWVAR 4
2390: IFFALSE 2408
// begin hc_gallery :=  ;
2392: LD_ADDR_OWVAR 33
2396: PUSH
2397: LD_STRING 
2399: ST_TO_ADDR
// hc_face_number := 0 ;
2400: LD_ADDR_OWVAR 34
2404: PUSH
2405: LD_INT 0
2407: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2408: LD_ADDR_VAR 0 10
2412: PUSH
2413: CALL_OW 44
2417: ST_TO_ADDR
// if global_defined then
2418: LD_LOC 3
2422: IFFALSE 2562
// begin if ( cl = class_soldier ) then
2424: LD_VAR 0 2
2428: PUSH
2429: LD_INT 1
2431: EQUAL
2432: IFFALSE 2452
// j := i + soldiers_created else
2434: LD_ADDR_VAR 0 9
2438: PUSH
2439: LD_VAR 0 8
2443: PUSH
2444: LD_LOC 4
2448: PLUS
2449: ST_TO_ADDR
2450: GO 2462
// j := i ;
2452: LD_ADDR_VAR 0 9
2456: PUSH
2457: LD_VAR 0 8
2461: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2462: LD_LOC 2
2466: PUSH
2467: LD_VAR 0 2
2471: ARRAY
2472: PUSH
2473: LD_VAR 0 9
2477: ARRAY
2478: PPUSH
2479: LD_VAR 0 10
2483: PPUSH
2484: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2488: LD_VAR 0 10
2492: PPUSH
2493: LD_INT 2
2495: PPUSH
2496: LD_LOC 2
2500: PUSH
2501: LD_VAR 0 2
2505: ARRAY
2506: PUSH
2507: LD_VAR 0 9
2511: ARRAY
2512: PPUSH
2513: LD_INT 2
2515: PPUSH
2516: CALL_OW 260
2520: PPUSH
2521: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2525: LD_VAR 0 10
2529: PPUSH
2530: LD_INT 1
2532: PPUSH
2533: LD_LOC 2
2537: PUSH
2538: LD_VAR 0 2
2542: ARRAY
2543: PUSH
2544: LD_VAR 0 9
2548: ARRAY
2549: PPUSH
2550: LD_INT 1
2552: PPUSH
2553: CALL_OW 260
2557: PPUSH
2558: CALL_OW 239
// end ; if building then
2562: LD_VAR 0 6
2566: IFFALSE 2584
// PlaceHumanInUnit ( un , building ) else
2568: LD_VAR 0 10
2572: PPUSH
2573: LD_VAR 0 6
2577: PPUSH
2578: CALL_OW 52
2582: GO 2611
// PlaceUnitXYR ( un , x , y , r , false ) ;
2584: LD_VAR 0 10
2588: PPUSH
2589: LD_VAR 0 3
2593: PPUSH
2594: LD_VAR 0 4
2598: PPUSH
2599: LD_VAR 0 5
2603: PPUSH
2604: LD_INT 0
2606: PPUSH
2607: CALL_OW 50
// result := result ^ [ un ] ;
2611: LD_ADDR_VAR 0 7
2615: PUSH
2616: LD_VAR 0 7
2620: PUSH
2621: LD_VAR 0 10
2625: PUSH
2626: EMPTY
2627: LIST
2628: ADD
2629: ST_TO_ADDR
// end ;
2630: GO 2213
2632: POP
2633: POP
// if not global_defined then
2634: LD_LOC 3
2638: NOT
2639: IFFALSE 2717
// if ( global_units >= cl ) then
2641: LD_LOC 2
2645: PUSH
2646: LD_VAR 0 2
2650: GREATEREQUAL
2651: IFFALSE 2692
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2653: LD_ADDR_LOC 2
2657: PUSH
2658: LD_LOC 2
2662: PPUSH
2663: LD_VAR 0 2
2667: PPUSH
2668: LD_LOC 2
2672: PUSH
2673: LD_VAR 0 2
2677: ARRAY
2678: PUSH
2679: LD_VAR 0 7
2683: ADD
2684: PPUSH
2685: CALL_OW 1
2689: ST_TO_ADDR
2690: GO 2717
// global_units := Replace ( global_units , cl , result ) ;
2692: LD_ADDR_LOC 2
2696: PUSH
2697: LD_LOC 2
2701: PPUSH
2702: LD_VAR 0 2
2706: PPUSH
2707: LD_VAR 0 7
2711: PPUSH
2712: CALL_OW 1
2716: ST_TO_ADDR
// end ;
2717: LD_VAR 0 7
2721: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2722: LD_INT 0
2724: PPUSH
2725: PPUSH
2726: PPUSH
2727: PPUSH
2728: PPUSH
2729: PPUSH
2730: PPUSH
2731: PPUSH
2732: PPUSH
// pos := Side_Positions [ side ] ;
2733: LD_ADDR_VAR 0 3
2737: PUSH
2738: LD_EXP 32
2742: PUSH
2743: LD_VAR 0 1
2747: ARRAY
2748: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2749: LD_ADDR_OWVAR 21
2753: PUSH
2754: LD_EXP 33
2758: PUSH
2759: LD_VAR 0 1
2763: ARRAY
2764: ST_TO_ADDR
// uc_side := side ;
2765: LD_ADDR_OWVAR 20
2769: PUSH
2770: LD_VAR 0 1
2774: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2775: LD_ADDR_VAR 0 4
2779: PUSH
2780: LD_EXP 35
2784: PUSH
2785: LD_VAR 0 3
2789: ARRAY
2790: PUSH
2791: LD_INT 1
2793: ARRAY
2794: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2795: LD_ADDR_VAR 0 5
2799: PUSH
2800: LD_EXP 35
2804: PUSH
2805: LD_VAR 0 3
2809: ARRAY
2810: PUSH
2811: LD_INT 2
2813: ARRAY
2814: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2815: LD_ADDR_VAR 0 6
2819: PUSH
2820: LD_EXP 35
2824: PUSH
2825: LD_VAR 0 3
2829: ARRAY
2830: PUSH
2831: LD_INT 3
2833: ARRAY
2834: ST_TO_ADDR
// if is_depot then
2835: LD_EXP 17
2839: IFFALSE 2972
// begin bc_type = b_depot ;
2841: LD_ADDR_OWVAR 42
2845: PUSH
2846: LD_INT 0
2848: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2849: LD_ADDR_VAR 0 10
2853: PUSH
2854: LD_VAR 0 4
2858: PPUSH
2859: LD_VAR 0 5
2863: PPUSH
2864: LD_VAR 0 6
2868: PPUSH
2869: CALL_OW 47
2873: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2874: LD_VAR 0 10
2878: PPUSH
2879: LD_STRING @
2881: PUSH
2882: LD_VAR 0 1
2886: STR
2887: PPUSH
2888: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2892: LD_VAR 0 10
2896: PPUSH
2897: CALL_OW 274
2901: PPUSH
2902: LD_INT 1
2904: PPUSH
2905: LD_EXP 22
2909: PUSH
2910: LD_INT 1
2912: ARRAY
2913: PPUSH
2914: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2918: LD_VAR 0 10
2922: PPUSH
2923: CALL_OW 274
2927: PPUSH
2928: LD_INT 2
2930: PPUSH
2931: LD_EXP 22
2935: PUSH
2936: LD_INT 2
2938: ARRAY
2939: PPUSH
2940: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2944: LD_VAR 0 10
2948: PPUSH
2949: CALL_OW 274
2953: PPUSH
2954: LD_INT 3
2956: PPUSH
2957: LD_EXP 22
2961: PUSH
2962: LD_INT 3
2964: ARRAY
2965: PPUSH
2966: CALL_OW 277
// end else
2970: GO 3116
// begin for i := 1 to 3 do
2972: LD_ADDR_VAR 0 7
2976: PUSH
2977: DOUBLE
2978: LD_INT 1
2980: DEC
2981: ST_TO_ADDR
2982: LD_INT 3
2984: PUSH
2985: FOR_TO
2986: IFFALSE 3114
// begin r := starting_resources [ i ] ;
2988: LD_ADDR_VAR 0 8
2992: PUSH
2993: LD_EXP 22
2997: PUSH
2998: LD_VAR 0 7
3002: ARRAY
3003: ST_TO_ADDR
// while r >= 10 do
3004: LD_VAR 0 8
3008: PUSH
3009: LD_INT 10
3011: GREATEREQUAL
3012: IFFALSE 3112
// if r > 50 then
3014: LD_VAR 0 8
3018: PUSH
3019: LD_INT 50
3021: GREATER
3022: IFFALSE 3068
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3024: LD_VAR 0 7
3028: PPUSH
3029: LD_INT 5
3031: PPUSH
3032: LD_VAR 0 4
3036: PPUSH
3037: LD_VAR 0 5
3041: PPUSH
3042: LD_INT 4
3044: PPUSH
3045: LD_INT 0
3047: PPUSH
3048: CALL_OW 60
// r := r - 50 ;
3052: LD_ADDR_VAR 0 8
3056: PUSH
3057: LD_VAR 0 8
3061: PUSH
3062: LD_INT 50
3064: MINUS
3065: ST_TO_ADDR
// end else
3066: GO 3110
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3068: LD_VAR 0 7
3072: PPUSH
3073: LD_VAR 0 8
3077: PUSH
3078: LD_INT 10
3080: DIV
3081: PPUSH
3082: LD_VAR 0 4
3086: PPUSH
3087: LD_VAR 0 5
3091: PPUSH
3092: LD_INT 4
3094: PPUSH
3095: LD_INT 0
3097: PPUSH
3098: CALL_OW 60
// r := 0 ;
3102: LD_ADDR_VAR 0 8
3106: PUSH
3107: LD_INT 0
3109: ST_TO_ADDR
// end ;
3110: GO 3004
// end ;
3112: GO 2985
3114: POP
3115: POP
// end ; for r in starting_crates do
3116: LD_ADDR_VAR 0 8
3120: PUSH
3121: LD_EXP 21
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3159
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3129: LD_INT 1
3131: PPUSH
3132: LD_INT 5
3134: PPUSH
3135: LD_VAR 0 4
3139: PPUSH
3140: LD_VAR 0 5
3144: PPUSH
3145: LD_VAR 0 8
3149: PPUSH
3150: LD_INT 0
3152: PPUSH
3153: CALL_OW 60
3157: GO 3126
3159: POP
3160: POP
// if def_morale_flags then
3161: LD_EXP 9
3165: IFFALSE 3304
// begin x := start_def [ pos ] [ 1 ] ;
3167: LD_ADDR_VAR 0 4
3171: PUSH
3172: LD_EXP 37
3176: PUSH
3177: LD_VAR 0 3
3181: ARRAY
3182: PUSH
3183: LD_INT 1
3185: ARRAY
3186: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3187: LD_ADDR_VAR 0 5
3191: PUSH
3192: LD_EXP 37
3196: PUSH
3197: LD_VAR 0 3
3201: ARRAY
3202: PUSH
3203: LD_INT 2
3205: ARRAY
3206: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3207: LD_VAR 0 4
3211: PPUSH
3212: LD_VAR 0 5
3216: PPUSH
3217: LD_INT 12
3219: PPUSH
3220: LD_INT 2
3222: PPUSH
3223: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3227: LD_ADDR_EXP 42
3231: PUSH
3232: LD_EXP 42
3236: PUSH
3237: LD_VAR 0 1
3241: PPUSH
3242: LD_VAR 0 4
3246: PPUSH
3247: LD_VAR 0 5
3251: PPUSH
3252: LD_INT 1
3254: PUSH
3255: LD_INT 100
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: PUSH
3262: LD_INT 2
3264: PUSH
3265: LD_INT 50
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 3
3274: PUSH
3275: LD_INT 20
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: LD_INT 20
3284: PUSH
3285: LD_INT 100
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 418
3302: ADD
3303: ST_TO_ADDR
// end ; commander := true ;
3304: LD_ADDR_LOC 1
3308: PUSH
3309: LD_INT 1
3311: ST_TO_ADDR
// soldiers_created := 0 ;
3312: LD_ADDR_LOC 4
3316: PUSH
3317: LD_INT 0
3319: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3320: LD_ADDR_VAR 0 7
3324: PUSH
3325: DOUBLE
3326: LD_INT 1
3328: DEC
3329: ST_TO_ADDR
3330: LD_EXP 18
3334: PUSH
3335: FOR_TO
3336: IFFALSE 3489
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3338: LD_ADDR_VAR 0 4
3342: PUSH
3343: LD_EXP 36
3347: PUSH
3348: LD_VAR 0 3
3352: ARRAY
3353: PUSH
3354: LD_VAR 0 7
3358: ARRAY
3359: PUSH
3360: LD_INT 1
3362: ARRAY
3363: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3364: LD_ADDR_VAR 0 5
3368: PUSH
3369: LD_EXP 36
3373: PUSH
3374: LD_VAR 0 3
3378: ARRAY
3379: PUSH
3380: LD_VAR 0 7
3384: ARRAY
3385: PUSH
3386: LD_INT 2
3388: ARRAY
3389: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3390: LD_ADDR_VAR 0 6
3394: PUSH
3395: LD_EXP 36
3399: PUSH
3400: LD_VAR 0 3
3404: ARRAY
3405: PUSH
3406: LD_VAR 0 7
3410: ARRAY
3411: PUSH
3412: LD_INT 3
3414: ARRAY
3415: ST_TO_ADDR
// bc_type := b_breastwork ;
3416: LD_ADDR_OWVAR 42
3420: PUSH
3421: LD_INT 31
3423: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3424: LD_ADDR_VAR 0 9
3428: PUSH
3429: LD_VAR 0 4
3433: PPUSH
3434: LD_VAR 0 5
3438: PPUSH
3439: LD_VAR 0 6
3443: PPUSH
3444: CALL_OW 47
3448: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3449: LD_INT 1
3451: PPUSH
3452: LD_INT 1
3454: PPUSH
3455: LD_INT 0
3457: PPUSH
3458: LD_INT 0
3460: PPUSH
3461: LD_INT 0
3463: PPUSH
3464: LD_VAR 0 9
3468: PPUSH
3469: CALL 2185 0 6
// soldiers_created := soldiers_created + 1 ;
3473: LD_ADDR_LOC 4
3477: PUSH
3478: LD_LOC 4
3482: PUSH
3483: LD_INT 1
3485: PLUS
3486: ST_TO_ADDR
// end ;
3487: GO 3335
3489: POP
3490: POP
// x := start_def [ pos ] [ 1 ] ;
3491: LD_ADDR_VAR 0 4
3495: PUSH
3496: LD_EXP 37
3500: PUSH
3501: LD_VAR 0 3
3505: ARRAY
3506: PUSH
3507: LD_INT 1
3509: ARRAY
3510: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3511: LD_ADDR_VAR 0 5
3515: PUSH
3516: LD_EXP 37
3520: PUSH
3521: LD_VAR 0 3
3525: ARRAY
3526: PUSH
3527: LD_INT 2
3529: ARRAY
3530: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3531: LD_LOC 8
3535: PUSH
3536: LD_EXP 18
3540: MINUS
3541: PPUSH
3542: LD_INT 1
3544: PPUSH
3545: LD_VAR 0 4
3549: PPUSH
3550: LD_VAR 0 5
3554: PPUSH
3555: LD_INT 5
3557: PPUSH
3558: LD_INT 0
3560: PPUSH
3561: CALL 2185 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3565: LD_LOC 5
3569: PPUSH
3570: LD_INT 2
3572: PPUSH
3573: LD_VAR 0 4
3577: PPUSH
3578: LD_VAR 0 5
3582: PPUSH
3583: LD_INT 5
3585: PPUSH
3586: LD_INT 0
3588: PPUSH
3589: CALL 2185 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3593: LD_LOC 7
3597: PPUSH
3598: LD_INT 3
3600: PPUSH
3601: LD_VAR 0 4
3605: PPUSH
3606: LD_VAR 0 5
3610: PPUSH
3611: LD_INT 5
3613: PPUSH
3614: LD_INT 0
3616: PPUSH
3617: CALL 2185 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3621: LD_LOC 6
3625: PPUSH
3626: LD_INT 4
3628: PPUSH
3629: LD_VAR 0 4
3633: PPUSH
3634: LD_VAR 0 5
3638: PPUSH
3639: LD_INT 5
3641: PPUSH
3642: LD_INT 0
3644: PPUSH
3645: CALL 2185 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3649: LD_EXP 10
3653: PUSH
3654: LD_INT 20
3656: PPUSH
3657: LD_VAR 0 1
3661: PPUSH
3662: CALL_OW 321
3666: PUSH
3667: LD_INT 1
3669: EQUAL
3670: AND
3671: IFFALSE 3688
// SetTech ( tech_SibDet , side , state_researched ) ;
3673: LD_INT 20
3675: PPUSH
3676: LD_VAR 0 1
3680: PPUSH
3681: LD_INT 2
3683: PPUSH
3684: CALL_OW 322
// if def_siberite_bomb = 1 then
3688: LD_EXP 13
3692: PUSH
3693: LD_INT 1
3695: EQUAL
3696: IFFALSE 3730
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3698: LD_INT 25
3700: PPUSH
3701: LD_VAR 0 1
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3713: LD_INT 73
3715: PPUSH
3716: LD_VAR 0 1
3720: PPUSH
3721: LD_INT 1
3723: PPUSH
3724: CALL_OW 322
// end else
3728: GO 3760
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3730: LD_INT 25
3732: PPUSH
3733: LD_VAR 0 1
3737: PPUSH
3738: LD_INT 0
3740: PPUSH
3741: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3745: LD_INT 73
3747: PPUSH
3748: LD_VAR 0 1
3752: PPUSH
3753: LD_INT 0
3755: PPUSH
3756: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3760: LD_INT 24
3762: PPUSH
3763: LD_VAR 0 1
3767: PPUSH
3768: LD_INT 0
3770: PPUSH
3771: CALL_OW 322
// global_defined := true ;
3775: LD_ADDR_LOC 3
3779: PUSH
3780: LD_INT 1
3782: ST_TO_ADDR
// end ;
3783: LD_VAR 0 2
3787: RET
// every 0 0$1 do
3788: GO 3790
3790: DISABLE
// if ( def_siberite_bomb > 1 ) then
3791: LD_EXP 13
3795: PUSH
3796: LD_INT 1
3798: GREATER
3799: IFFALSE 3814
// begin wait ( siberite_bomb_Delay ) ;
3801: LD_EXP 28
3805: PPUSH
3806: CALL_OW 67
// EnableSibFiss ;
3810: CALL 3815 0 0
// end ;
3814: END
// function EnableSibFiss ; var i ; begin
3815: LD_INT 0
3817: PPUSH
3818: PPUSH
// for i := 1 to 8 do
3819: LD_ADDR_VAR 0 2
3823: PUSH
3824: DOUBLE
3825: LD_INT 1
3827: DEC
3828: ST_TO_ADDR
3829: LD_INT 8
3831: PUSH
3832: FOR_TO
3833: IFFALSE 3879
// if Side_Positions [ i ] then
3835: LD_EXP 32
3839: PUSH
3840: LD_VAR 0 2
3844: ARRAY
3845: IFFALSE 3877
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3847: LD_INT 25
3849: PPUSH
3850: LD_VAR 0 2
3854: PPUSH
3855: LD_INT 1
3857: PPUSH
3858: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3862: LD_INT 73
3864: PPUSH
3865: LD_VAR 0 2
3869: PPUSH
3870: LD_INT 1
3872: PPUSH
3873: CALL_OW 322
// end ;
3877: GO 3832
3879: POP
3880: POP
// end ;
3881: LD_VAR 0 1
3885: RET
// function prepare_sides ; var i ; begin
3886: LD_INT 0
3888: PPUSH
3889: PPUSH
// global_units := [ ] ;
3890: LD_ADDR_LOC 2
3894: PUSH
3895: EMPTY
3896: ST_TO_ADDR
// global_defined := false ;
3897: LD_ADDR_LOC 3
3901: PUSH
3902: LD_INT 0
3904: ST_TO_ADDR
// CountClassMembers ;
3905: CALL 3955 0 0
// for i := 1 to 8 do
3909: LD_ADDR_VAR 0 2
3913: PUSH
3914: DOUBLE
3915: LD_INT 1
3917: DEC
3918: ST_TO_ADDR
3919: LD_INT 8
3921: PUSH
3922: FOR_TO
3923: IFFALSE 3948
// if Side_Positions [ i ] then
3925: LD_EXP 32
3929: PUSH
3930: LD_VAR 0 2
3934: ARRAY
3935: IFFALSE 3946
// prepare_side ( i ) ;
3937: LD_VAR 0 2
3941: PPUSH
3942: CALL 2722 0 1
3946: GO 3922
3948: POP
3949: POP
// end ;
3950: LD_VAR 0 1
3954: RET
// function CountClassMembers ; var Mode ; begin
3955: LD_INT 0
3957: PPUSH
3958: PPUSH
// if No_Mechs then
3959: LD_EXP 15
3963: IFFALSE 3975
// Mode := 2 else
3965: LD_ADDR_VAR 0 2
3969: PUSH
3970: LD_INT 2
3972: ST_TO_ADDR
3973: GO 3983
// Mode := 1 ;
3975: LD_ADDR_VAR 0 2
3979: PUSH
3980: LD_INT 1
3982: ST_TO_ADDR
// neng := number_of_people ;
3983: LD_ADDR_LOC 5
3987: PUSH
3988: LD_EXP 19
3992: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
3993: LD_ADDR_LOC 8
3997: PUSH
3998: LD_LOC 5
4002: PUSH
4003: LD_INT 4
4005: PUSH
4006: LD_INT 3
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_VAR 0 2
4017: ARRAY
4018: DIV
4019: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4020: LD_LOC 8
4024: PUSH
4025: LD_EXP 18
4029: LESS
4030: IFFALSE 4042
// nsol := number_of_breastworks ;
4032: LD_ADDR_LOC 8
4036: PUSH
4037: LD_EXP 18
4041: ST_TO_ADDR
// neng := neng - nsol ;
4042: LD_ADDR_LOC 5
4046: PUSH
4047: LD_LOC 5
4051: PUSH
4052: LD_LOC 8
4056: MINUS
4057: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4058: LD_ADDR_LOC 6
4062: PUSH
4063: LD_LOC 5
4067: PUSH
4068: LD_INT 3
4070: PUSH
4071: LD_INT 2
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: PUSH
4078: LD_VAR 0 2
4082: ARRAY
4083: DIV
4084: ST_TO_ADDR
// if ( nsci < 1 ) then
4085: LD_LOC 6
4089: PUSH
4090: LD_INT 1
4092: LESS
4093: IFFALSE 4103
// nsci := 1 ;
4095: LD_ADDR_LOC 6
4099: PUSH
4100: LD_INT 1
4102: ST_TO_ADDR
// neng := neng - nsci ;
4103: LD_ADDR_LOC 5
4107: PUSH
4108: LD_LOC 5
4112: PUSH
4113: LD_LOC 6
4117: MINUS
4118: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4119: LD_ADDR_LOC 7
4123: PUSH
4124: LD_LOC 5
4128: PUSH
4129: LD_INT 2
4131: DIV
4132: PUSH
4133: LD_INT 0
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: PUSH
4140: LD_VAR 0 2
4144: ARRAY
4145: ST_TO_ADDR
// neng := neng - nmech ;
4146: LD_ADDR_LOC 5
4150: PUSH
4151: LD_LOC 5
4155: PUSH
4156: LD_LOC 7
4160: MINUS
4161: ST_TO_ADDR
// if ( neng < 1 ) then
4162: LD_LOC 5
4166: PUSH
4167: LD_INT 1
4169: LESS
4170: IFFALSE 4180
// neng := 1 ;
4172: LD_ADDR_LOC 5
4176: PUSH
4177: LD_INT 1
4179: ST_TO_ADDR
// end ;
4180: LD_VAR 0 1
4184: RET
// starting begin disable ( 98 ) ;
4185: LD_INT 98
4187: DISABLE_MARKED
// disable ( 99 ) ;
4188: LD_INT 99
4190: DISABLE_MARKED
// disable ( 400 ) ;
4191: LD_INT 400
4193: DISABLE_MARKED
// disable ( 401 ) ;
4194: LD_INT 401
4196: DISABLE_MARKED
// mp_selectmsg := true ;
4197: LD_ADDR_OWVAR 13
4201: PUSH
4202: LD_INT 1
4204: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4205: CALL 784 0 0
// init_map ;
4209: CALL 0 0 0
// init_respawning ;
4213: CALL 12949 0 0
// set_shared_visions_and_alliances ;
4217: CALL 1876 0 0
// ResetFog ;
4221: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4225: LD_OWVAR 2
4229: PPUSH
4230: CALL_OW 520
// prepare_sides ;
4234: CALL 3886 0 0
// Init_Win_Condition ;
4238: CALL 6930 0 0
// ShowTimer ;
4242: CALL 6508 0 0
// music_nat := Side_Nations [ your_side ] ;
4246: LD_ADDR_OWVAR 71
4250: PUSH
4251: LD_EXP 33
4255: PUSH
4256: LD_OWVAR 2
4260: ARRAY
4261: ST_TO_ADDR
// if IAmSpec then
4262: CALL_OW 531
4266: IFFALSE 4290
// begin fogoff ( true ) ;
4268: LD_INT 1
4270: PPUSH
4271: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
4275: LD_INT 104
4277: PPUSH
4278: LD_INT 69
4280: PPUSH
4281: CALL_OW 86
// enable ( 400 ) ;
4285: LD_INT 400
4287: ENABLE_MARKED
// end else
4288: GO 4336
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4290: LD_EXP 37
4294: PUSH
4295: LD_EXP 32
4299: PUSH
4300: LD_OWVAR 2
4304: ARRAY
4305: ARRAY
4306: PUSH
4307: LD_INT 1
4309: ARRAY
4310: PPUSH
4311: LD_EXP 37
4315: PUSH
4316: LD_EXP 32
4320: PUSH
4321: LD_OWVAR 2
4325: ARRAY
4326: ARRAY
4327: PUSH
4328: LD_INT 2
4330: ARRAY
4331: PPUSH
4332: CALL_OW 86
// end ; AnimateTrees ( true ) ;
4336: LD_INT 1
4338: PPUSH
4339: CALL_OW 573
// BuildUpAreas := [ base_nw , base_ne , base_sw , base_se ] ;
4343: LD_ADDR_EXP 54
4347: PUSH
4348: LD_INT 8
4350: PUSH
4351: LD_INT 9
4353: PUSH
4354: LD_INT 10
4356: PUSH
4357: LD_INT 11
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: ST_TO_ADDR
// BeginBuildUp ;
4366: CALL 13443 0 0
// end ; end_of_file
4370: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
4371: LD_VAR 0 1
4375: PPUSH
4376: CALL_OW 266
4380: PUSH
4381: LD_INT 0
4383: PUSH
4384: LD_INT 1
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: IN
4391: IFFALSE 4416
// SetBName ( b , @ & GetSide ( b ) ) ;
4393: LD_VAR 0 1
4397: PPUSH
4398: LD_STRING @
4400: PUSH
4401: LD_VAR 0 1
4405: PPUSH
4406: CALL_OW 255
4410: STR
4411: PPUSH
4412: CALL_OW 500
// end ;
4416: PPOPN 2
4418: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
4419: LD_VAR 0 1
4423: PPUSH
4424: CALL_OW 266
4428: PUSH
4429: LD_INT 0
4431: PUSH
4432: LD_INT 1
4434: PUSH
4435: EMPTY
4436: LIST
4437: LIST
4438: IN
4439: IFFALSE 4464
// SetBName ( b , @ & GetSide ( b ) ) ;
4441: LD_VAR 0 1
4445: PPUSH
4446: LD_STRING @
4448: PUSH
4449: LD_VAR 0 1
4453: PPUSH
4454: CALL_OW 255
4458: STR
4459: PPUSH
4460: CALL_OW 500
// end ;
4464: PPOPN 3
4466: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
4467: LD_INT 0
4469: PPUSH
4470: PPUSH
4471: PPUSH
4472: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
4473: LD_VAR 0 1
4477: PPUSH
4478: CALL_OW 257
4482: PUSH
4483: LD_INT 12
4485: PUSH
4486: LD_INT 15
4488: PUSH
4489: LD_INT 17
4491: PUSH
4492: LD_INT 16
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: IN
4501: PUSH
4502: LD_VAR 0 1
4506: PPUSH
4507: CALL_OW 263
4511: PUSH
4512: LD_INT 5
4514: EQUAL
4515: OR
4516: IFFALSE 4527
// ApeKilled ( j ) ;
4518: LD_VAR 0 1
4522: PPUSH
4523: CALL 6194 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
4527: LD_VAR 0 1
4531: PPUSH
4532: CALL_OW 266
4536: PUSH
4537: LD_INT 0
4539: PUSH
4540: LD_INT 1
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: IN
4547: IFFALSE 4629
// begin pos := Side_Positions [ GetSide ( j ) ] ;
4549: LD_ADDR_VAR 0 4
4553: PUSH
4554: LD_EXP 32
4558: PUSH
4559: LD_VAR 0 1
4563: PPUSH
4564: CALL_OW 255
4568: ARRAY
4569: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
4570: LD_ADDR_VAR 0 2
4574: PUSH
4575: LD_EXP 37
4579: PUSH
4580: LD_VAR 0 4
4584: ARRAY
4585: PUSH
4586: LD_INT 1
4588: ARRAY
4589: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: LD_EXP 37
4599: PUSH
4600: LD_VAR 0 4
4604: ARRAY
4605: PUSH
4606: LD_INT 2
4608: ARRAY
4609: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
4610: LD_VAR 0 2
4614: PPUSH
4615: LD_VAR 0 3
4619: PPUSH
4620: CALL_OW 420
4624: PPUSH
4625: CALL_OW 419
// end ; end ;
4629: PPOPN 5
4631: END
// on VehicleConstructed ( veh , fac ) do var side ;
4632: LD_INT 0
4634: PPUSH
// begin if GetControl ( veh ) = control_apeman then
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 263
4644: PUSH
4645: LD_INT 5
4647: EQUAL
4648: IFFALSE 4790
// begin side := GetSide ( veh ) ;
4650: LD_ADDR_VAR 0 3
4654: PUSH
4655: LD_VAR 0 1
4659: PPUSH
4660: CALL_OW 255
4664: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
4665: LD_ADDR_EXP 48
4669: PUSH
4670: LD_EXP 48
4674: PPUSH
4675: LD_VAR 0 3
4679: PPUSH
4680: LD_EXP 48
4684: PUSH
4685: LD_VAR 0 3
4689: ARRAY
4690: PPUSH
4691: LD_INT 52
4693: PUSH
4694: EMPTY
4695: LIST
4696: PPUSH
4697: CALL_OW 72
4701: PUSH
4702: LD_INT 22
4704: PUSH
4705: LD_VAR 0 3
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: LD_INT 2
4716: PUSH
4717: LD_INT 33
4719: PUSH
4720: LD_INT 5
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 25
4729: PUSH
4730: LD_INT 12
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: PUSH
4737: LD_INT 25
4739: PUSH
4740: LD_INT 15
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: LD_INT 25
4749: PUSH
4750: LD_INT 16
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 25
4759: PUSH
4760: LD_INT 17
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 69
4783: UNION
4784: PPUSH
4785: CALL_OW 1
4789: ST_TO_ADDR
// end ; end ;
4790: PPOPN 3
4792: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
4793: LD_VAR 0 1
4797: PPUSH
4798: LD_VAR 0 2
4802: PPUSH
4803: LD_VAR 0 3
4807: PPUSH
4808: LD_OWVAR 2
4812: PPUSH
4813: CALL 6691 0 4
4817: PPOPN 3
4819: END
// every 1 1$0 + 0 0$0.3 do
4820: GO 4822
4822: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
4823: LD_INT 4
4825: PPUSH
4826: LD_INT 5
4828: PPUSH
4829: CALL_OW 12
4833: PPUSH
4834: LD_INT 1
4836: PPUSH
4837: CALL_OW 57
// enable ;
4841: ENABLE
// end ;
4842: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4843: GO 4845
4845: DISABLE
4846: LD_INT 0
4848: PPUSH
4849: PPUSH
// begin case tick of 1 .. 1 1$0 :
4850: LD_OWVAR 1
4854: PUSH
4855: LD_INT 1
4857: DOUBLE
4858: GREATEREQUAL
4859: IFFALSE 4867
4861: LD_INT 2100
4863: DOUBLE
4864: LESSEQUAL
4865: IFTRUE 4869
4867: GO 4897
4869: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4870: LD_EXP 23
4874: PUSH
4875: LD_INT 100
4877: DIVREAL
4878: PUSH
4879: LD_INT 525
4881: PPUSH
4882: LD_INT 1050
4884: PPUSH
4885: CALL_OW 12
4889: MUL
4890: PPUSH
4891: CALL_OW 67
4895: GO 5199
4897: LD_INT 2100
4899: PUSH
4900: LD_INT 1
4902: PLUS
4903: DOUBLE
4904: GREATEREQUAL
4905: IFFALSE 4913
4907: LD_INT 10500
4909: DOUBLE
4910: LESSEQUAL
4911: IFTRUE 4915
4913: GO 4943
4915: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4916: LD_EXP 23
4920: PUSH
4921: LD_INT 100
4923: DIVREAL
4924: PUSH
4925: LD_INT 1050
4927: PPUSH
4928: LD_INT 1750
4930: PPUSH
4931: CALL_OW 12
4935: MUL
4936: PPUSH
4937: CALL_OW 67
4941: GO 5199
4943: LD_INT 10500
4945: PUSH
4946: LD_INT 1
4948: PLUS
4949: DOUBLE
4950: GREATEREQUAL
4951: IFFALSE 4959
4953: LD_INT 21000
4955: DOUBLE
4956: LESSEQUAL
4957: IFTRUE 4961
4959: GO 4989
4961: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4962: LD_EXP 23
4966: PUSH
4967: LD_INT 100
4969: DIVREAL
4970: PUSH
4971: LD_INT 1750
4973: PPUSH
4974: LD_INT 2100
4976: PPUSH
4977: CALL_OW 12
4981: MUL
4982: PPUSH
4983: CALL_OW 67
4987: GO 5199
4989: LD_INT 21000
4991: PUSH
4992: LD_INT 1
4994: PLUS
4995: DOUBLE
4996: GREATEREQUAL
4997: IFFALSE 5005
4999: LD_INT 42000
5001: DOUBLE
5002: LESSEQUAL
5003: IFTRUE 5007
5005: GO 5035
5007: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5008: LD_EXP 23
5012: PUSH
5013: LD_INT 100
5015: DIVREAL
5016: PUSH
5017: LD_INT 2100
5019: PPUSH
5020: LD_INT 2275
5022: PPUSH
5023: CALL_OW 12
5027: MUL
5028: PPUSH
5029: CALL_OW 67
5033: GO 5199
5035: LD_INT 42000
5037: PUSH
5038: LD_INT 1
5040: PLUS
5041: DOUBLE
5042: GREATEREQUAL
5043: IFFALSE 5051
5045: LD_INT 63000
5047: DOUBLE
5048: LESSEQUAL
5049: IFTRUE 5053
5051: GO 5081
5053: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5054: LD_EXP 23
5058: PUSH
5059: LD_INT 100
5061: DIVREAL
5062: PUSH
5063: LD_INT 2275
5065: PPUSH
5066: LD_INT 2450
5068: PPUSH
5069: CALL_OW 12
5073: MUL
5074: PPUSH
5075: CALL_OW 67
5079: GO 5199
5081: LD_INT 63000
5083: PUSH
5084: LD_INT 1
5086: PLUS
5087: DOUBLE
5088: GREATEREQUAL
5089: IFFALSE 5097
5091: LD_INT 105000
5093: DOUBLE
5094: LESSEQUAL
5095: IFTRUE 5099
5097: GO 5127
5099: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5100: LD_EXP 23
5104: PUSH
5105: LD_INT 100
5107: DIVREAL
5108: PUSH
5109: LD_INT 2450
5111: PPUSH
5112: LD_INT 2800
5114: PPUSH
5115: CALL_OW 12
5119: MUL
5120: PPUSH
5121: CALL_OW 67
5125: GO 5199
5127: LD_INT 105000
5129: PUSH
5130: LD_INT 1
5132: PLUS
5133: DOUBLE
5134: GREATEREQUAL
5135: IFFALSE 5143
5137: LD_INT 630000
5139: DOUBLE
5140: LESSEQUAL
5141: IFTRUE 5145
5143: GO 5173
5145: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5146: LD_EXP 23
5150: PUSH
5151: LD_INT 100
5153: DIVREAL
5154: PUSH
5155: LD_INT 2800
5157: PPUSH
5158: LD_INT 3500
5160: PPUSH
5161: CALL_OW 12
5165: MUL
5166: PPUSH
5167: CALL_OW 67
5171: GO 5199
5173: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5174: LD_EXP 23
5178: PUSH
5179: LD_INT 100
5181: DIVREAL
5182: PUSH
5183: LD_INT 3500
5185: PPUSH
5186: LD_INT 3850
5188: PPUSH
5189: CALL_OW 12
5193: MUL
5194: PPUSH
5195: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5199: LD_ADDR_VAR 0 2
5203: PUSH
5204: LD_INT 3
5206: PPUSH
5207: LD_INT 5
5209: PPUSH
5210: CALL_OW 12
5214: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5215: LD_ADDR_VAR 0 1
5219: PUSH
5220: LD_EXP 32
5224: PUSH
5225: LD_INT 0
5227: PUSH
5228: EMPTY
5229: LIST
5230: DIFF
5231: PUSH
5232: FOR_IN
5233: IFFALSE 5273
// CreateCratesArea ( amount , [ base_nw , base_ne , base_sw , base_se ] [ i ] , true ) ;
5235: LD_VAR 0 2
5239: PPUSH
5240: LD_INT 8
5242: PUSH
5243: LD_INT 9
5245: PUSH
5246: LD_INT 10
5248: PUSH
5249: LD_INT 11
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: PUSH
5258: LD_VAR 0 1
5262: ARRAY
5263: PPUSH
5264: LD_INT 1
5266: PPUSH
5267: CALL_OW 55
5271: GO 5232
5273: POP
5274: POP
// enable ;
5275: ENABLE
// end ;
5276: PPOPN 2
5278: END
// every 1 1$0 trigger def_shipments_density do
5279: LD_EXP 5
5283: IFFALSE 5319
5285: GO 5287
5287: DISABLE
// begin CreateCratesArea ( 5 , map_center , true ) ;
5288: LD_INT 5
5290: PPUSH
5291: LD_INT 7
5293: PPUSH
5294: LD_INT 1
5296: PPUSH
5297: CALL_OW 55
// wait ( 3 3$0 - ( 1 1$0 * def_shipments_density ) ) ;
5301: LD_INT 6300
5303: PUSH
5304: LD_INT 2100
5306: PUSH
5307: LD_EXP 5
5311: MUL
5312: MINUS
5313: PPUSH
5314: CALL_OW 67
// enable ;
5318: ENABLE
// end ; end_of_file
5319: END
// every 20 20$00 trigger apemanNumber do
5320: LD_EXP 45
5324: IFFALSE 5357
5326: GO 5328
5328: DISABLE
// begin enable ;
5329: ENABLE
// if apeLevel >= 8 then
5330: LD_EXP 50
5334: PUSH
5335: LD_INT 8
5337: GREATEREQUAL
5338: IFFALSE 5343
// disable else
5340: DISABLE
5341: GO 5357
// apeLevel := apeLevel + 1 ;
5343: LD_ADDR_EXP 50
5347: PUSH
5348: LD_EXP 50
5352: PUSH
5353: LD_INT 1
5355: PLUS
5356: ST_TO_ADDR
// end ;
5357: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5358: LD_EXP 45
5362: PUSH
5363: LD_EXP 46
5367: LESS
5368: IFFALSE 5508
5370: GO 5372
5372: DISABLE
5373: LD_INT 0
5375: PPUSH
5376: PPUSH
5377: PPUSH
5378: PPUSH
// begin enable ;
5379: ENABLE
// for i := 1 to apemanPos do
5380: LD_ADDR_VAR 0 1
5384: PUSH
5385: DOUBLE
5386: LD_INT 1
5388: DEC
5389: ST_TO_ADDR
5390: LD_EXP 48
5394: PUSH
5395: FOR_TO
5396: IFFALSE 5506
// begin if apemanPlayerCount [ i ] then
5398: LD_EXP 49
5402: PUSH
5403: LD_VAR 0 1
5407: ARRAY
5408: IFFALSE 5504
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5410: LD_EXP 49
5414: PUSH
5415: LD_VAR 0 1
5419: ARRAY
5420: PUSH
5421: LD_EXP 48
5425: PUSH
5426: LD_VAR 0 1
5430: ARRAY
5431: GREATER
5432: IFFALSE 5504
// begin ape := PrepareApeman ;
5434: LD_ADDR_VAR 0 2
5438: PUSH
5439: CALL 6003 0 0
5443: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5444: LD_VAR 0 2
5448: PPUSH
5449: LD_EXP 51
5453: PUSH
5454: LD_VAR 0 1
5458: ARRAY
5459: PPUSH
5460: LD_INT 0
5462: PPUSH
5463: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5467: LD_ADDR_EXP 48
5471: PUSH
5472: LD_EXP 48
5476: PPUSH
5477: LD_VAR 0 1
5481: PPUSH
5482: LD_EXP 48
5486: PUSH
5487: LD_VAR 0 1
5491: ARRAY
5492: PUSH
5493: LD_VAR 0 2
5497: UNION
5498: PPUSH
5499: CALL_OW 1
5503: ST_TO_ADDR
// end ; end ; end ;
5504: GO 5395
5506: POP
5507: POP
// end ;
5508: PPOPN 4
5510: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5511: LD_INT 0
5513: PPUSH
5514: PPUSH
5515: PPUSH
5516: PPUSH
5517: PPUSH
5518: PPUSH
5519: PPUSH
// playersAmount := 0 ;
5520: LD_ADDR_VAR 0 3
5524: PUSH
5525: LD_INT 0
5527: ST_TO_ADDR
// _apeAreas := [ north_apeman , south_apeman ] ;
5528: LD_ADDR_VAR 0 7
5532: PUSH
5533: LD_INT 1
5535: PUSH
5536: LD_INT 2
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5543: LD_ADDR_EXP 51
5547: PUSH
5548: LD_INT 0
5550: PUSH
5551: LD_INT 0
5553: PUSH
5554: LD_INT 0
5556: PUSH
5557: LD_INT 0
5559: PUSH
5560: LD_INT 0
5562: PUSH
5563: LD_INT 0
5565: PUSH
5566: LD_INT 0
5568: PUSH
5569: LD_INT 0
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: ST_TO_ADDR
// for j = 1 to Side_Positions do
5582: LD_ADDR_VAR 0 4
5586: PUSH
5587: DOUBLE
5588: LD_INT 1
5590: DEC
5591: ST_TO_ADDR
5592: LD_EXP 32
5596: PUSH
5597: FOR_TO
5598: IFFALSE 5665
// if Side_Positions [ j ] then
5600: LD_EXP 32
5604: PUSH
5605: LD_VAR 0 4
5609: ARRAY
5610: IFFALSE 5663
// begin playersAmount := playersAmount + 1 ;
5612: LD_ADDR_VAR 0 3
5616: PUSH
5617: LD_VAR 0 3
5621: PUSH
5622: LD_INT 1
5624: PLUS
5625: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5626: LD_ADDR_EXP 51
5630: PUSH
5631: LD_EXP 51
5635: PPUSH
5636: LD_VAR 0 4
5640: PPUSH
5641: LD_VAR 0 7
5645: PUSH
5646: LD_EXP 32
5650: PUSH
5651: LD_VAR 0 4
5655: ARRAY
5656: ARRAY
5657: PPUSH
5658: CALL_OW 1
5662: ST_TO_ADDR
// end ;
5663: GO 5597
5665: POP
5666: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5667: LD_ADDR_EXP 47
5671: PUSH
5672: LD_INT 3
5674: PUSH
5675: LD_EXP 27
5679: MUL
5680: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5681: LD_ADDR_EXP 45
5685: PUSH
5686: LD_VAR 0 3
5690: PUSH
5691: LD_EXP 47
5695: MUL
5696: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5697: LD_ADDR_EXP 46
5701: PUSH
5702: LD_EXP 45
5706: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5707: LD_ADDR_EXP 48
5711: PUSH
5712: LD_INT 0
5714: PUSH
5715: LD_INT 0
5717: PUSH
5718: LD_INT 0
5720: PUSH
5721: LD_INT 0
5723: PUSH
5724: LD_INT 0
5726: PUSH
5727: LD_INT 0
5729: PUSH
5730: LD_INT 0
5732: PUSH
5733: LD_INT 0
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5746: LD_ADDR_EXP 49
5750: PUSH
5751: LD_INT 0
5753: PUSH
5754: LD_INT 0
5756: PUSH
5757: LD_INT 0
5759: PUSH
5760: LD_INT 0
5762: PUSH
5763: LD_INT 0
5765: PUSH
5766: LD_INT 0
5768: PUSH
5769: LD_INT 0
5771: PUSH
5772: LD_INT 0
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: ST_TO_ADDR
// apeLevel := 1 ;
5785: LD_ADDR_EXP 50
5789: PUSH
5790: LD_INT 1
5792: ST_TO_ADDR
// if not apemanNumber then
5793: LD_EXP 45
5797: NOT
5798: IFFALSE 5802
// exit ;
5800: GO 5998
// for i := 1 to apemanPerPlayer do
5802: LD_ADDR_VAR 0 2
5806: PUSH
5807: DOUBLE
5808: LD_INT 1
5810: DEC
5811: ST_TO_ADDR
5812: LD_EXP 47
5816: PUSH
5817: FOR_TO
5818: IFFALSE 5996
// begin for j := 1 to Side_Positions do
5820: LD_ADDR_VAR 0 4
5824: PUSH
5825: DOUBLE
5826: LD_INT 1
5828: DEC
5829: ST_TO_ADDR
5830: LD_EXP 32
5834: PUSH
5835: FOR_TO
5836: IFFALSE 5992
// if Side_Positions [ j ] then
5838: LD_EXP 32
5842: PUSH
5843: LD_VAR 0 4
5847: ARRAY
5848: IFFALSE 5990
// begin pos := Side_Positions [ j ] ;
5850: LD_ADDR_VAR 0 6
5854: PUSH
5855: LD_EXP 32
5859: PUSH
5860: LD_VAR 0 4
5864: ARRAY
5865: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5866: LD_ADDR_EXP 49
5870: PUSH
5871: LD_EXP 49
5875: PPUSH
5876: LD_VAR 0 4
5880: PPUSH
5881: LD_EXP 49
5885: PUSH
5886: LD_VAR 0 4
5890: ARRAY
5891: PUSH
5892: LD_INT 1
5894: PLUS
5895: PPUSH
5896: CALL_OW 1
5900: ST_TO_ADDR
// ape := PrepareApeman ;
5901: LD_ADDR_VAR 0 5
5905: PUSH
5906: CALL 6003 0 0
5910: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5911: LD_ADDR_EXP 48
5915: PUSH
5916: LD_EXP 48
5920: PPUSH
5921: LD_VAR 0 4
5925: PPUSH
5926: LD_EXP 48
5930: PUSH
5931: LD_VAR 0 4
5935: ARRAY
5936: PPUSH
5937: LD_EXP 48
5941: PUSH
5942: LD_VAR 0 4
5946: ARRAY
5947: PUSH
5948: LD_INT 1
5950: PLUS
5951: PPUSH
5952: LD_VAR 0 5
5956: PPUSH
5957: CALL_OW 1
5961: PPUSH
5962: CALL_OW 1
5966: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5967: LD_VAR 0 5
5971: PPUSH
5972: LD_EXP 51
5976: PUSH
5977: LD_VAR 0 4
5981: ARRAY
5982: PPUSH
5983: LD_INT 0
5985: PPUSH
5986: CALL_OW 49
// end ;
5990: GO 5835
5992: POP
5993: POP
// end ;
5994: GO 5817
5996: POP
5997: POP
// end ;
5998: LD_VAR 0 1
6002: RET
// export function PrepareApeman ; var bonus ; begin
6003: LD_INT 0
6005: PPUSH
6006: PPUSH
// uc_side := 0 ;
6007: LD_ADDR_OWVAR 20
6011: PUSH
6012: LD_INT 0
6014: ST_TO_ADDR
// uc_nation := 0 ;
6015: LD_ADDR_OWVAR 21
6019: PUSH
6020: LD_INT 0
6022: ST_TO_ADDR
// InitHc ;
6023: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6027: LD_ADDR_VAR 0 2
6031: PUSH
6032: LD_INT 1
6034: NEG
6035: PUSH
6036: LD_INT 0
6038: PUSH
6039: LD_INT 1
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: LIST
6046: PUSH
6047: LD_INT 25
6049: PUSH
6050: LD_INT 12
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PPUSH
6057: CALL_OW 69
6061: PUSH
6062: LD_INT 3
6064: MOD
6065: PUSH
6066: LD_INT 1
6068: PLUS
6069: ARRAY
6070: ST_TO_ADDR
// hc_class := class_apeman ;
6071: LD_ADDR_OWVAR 28
6075: PUSH
6076: LD_INT 12
6078: ST_TO_ADDR
// hc_gallery :=  ;
6079: LD_ADDR_OWVAR 33
6083: PUSH
6084: LD_STRING 
6086: ST_TO_ADDR
// hc_name :=  ;
6087: LD_ADDR_OWVAR 26
6091: PUSH
6092: LD_STRING 
6094: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6095: LD_ADDR_OWVAR 31
6099: PUSH
6100: LD_EXP 50
6104: PUSH
6105: LD_VAR 0 2
6109: PLUS
6110: PUSH
6111: LD_EXP 50
6115: PUSH
6116: LD_VAR 0 2
6120: PLUS
6121: PUSH
6122: LD_EXP 50
6126: PUSH
6127: LD_VAR 0 2
6131: PLUS
6132: PUSH
6133: LD_EXP 50
6137: PUSH
6138: LD_VAR 0 2
6142: PLUS
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6150: LD_ADDR_OWVAR 35
6154: PUSH
6155: LD_INT 10
6157: PUSH
6158: LD_VAR 0 2
6162: MUL
6163: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6164: LD_ADDR_OWVAR 29
6168: PUSH
6169: LD_INT 12
6171: PUSH
6172: LD_INT 12
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: ST_TO_ADDR
// result := CreateHuman ;
6179: LD_ADDR_VAR 0 1
6183: PUSH
6184: CALL_OW 44
6188: ST_TO_ADDR
// end ;
6189: LD_VAR 0 1
6193: RET
// export function ApeKilled ( ape ) ; var s , i ; begin
6194: LD_INT 0
6196: PPUSH
6197: PPUSH
6198: PPUSH
// if not ape then
6199: LD_VAR 0 1
6203: NOT
6204: IFFALSE 6208
// exit ;
6206: GO 6311
// for i = 1 to apemanPos do
6208: LD_ADDR_VAR 0 4
6212: PUSH
6213: DOUBLE
6214: LD_INT 1
6216: DEC
6217: ST_TO_ADDR
6218: LD_EXP 48
6222: PUSH
6223: FOR_TO
6224: IFFALSE 6258
// if ape in apemanPos [ i ] then
6226: LD_VAR 0 1
6230: PUSH
6231: LD_EXP 48
6235: PUSH
6236: LD_VAR 0 4
6240: ARRAY
6241: IN
6242: IFFALSE 6256
// begin s := i ;
6244: LD_ADDR_VAR 0 3
6248: PUSH
6249: LD_VAR 0 4
6253: ST_TO_ADDR
// break ;
6254: GO 6258
// end ;
6256: GO 6223
6258: POP
6259: POP
// apemanPos := Replace ( apemanPos , s , apemanPos [ s ] diff ape ) ;
6260: LD_ADDR_EXP 48
6264: PUSH
6265: LD_EXP 48
6269: PPUSH
6270: LD_VAR 0 3
6274: PPUSH
6275: LD_EXP 48
6279: PUSH
6280: LD_VAR 0 3
6284: ARRAY
6285: PUSH
6286: LD_VAR 0 1
6290: DIFF
6291: PPUSH
6292: CALL_OW 1
6296: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6297: LD_ADDR_EXP 45
6301: PUSH
6302: LD_EXP 45
6306: PUSH
6307: LD_INT 1
6309: MINUS
6310: ST_TO_ADDR
// end ; end_of_file
6311: LD_VAR 0 2
6315: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6316: LD_INT 0
6318: PPUSH
6319: PPUSH
// for un in battle_flags_id do
6320: LD_ADDR_VAR 0 2
6324: PUSH
6325: LD_EXP 42
6329: PUSH
6330: FOR_IN
6331: IFFALSE 6406
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6333: LD_VAR 0 2
6337: PPUSH
6338: LD_INT 1
6340: PUSH
6341: LD_LOC 9
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PUSH
6350: LD_INT 2
6352: PUSH
6353: LD_LOC 9
6357: PUSH
6358: LD_INT 2
6360: DIV
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: LD_INT 3
6368: PUSH
6369: LD_LOC 9
6373: PUSH
6374: LD_INT 5
6376: DIV
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 20
6384: PUSH
6385: LD_LOC 9
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: PPUSH
6400: CALL_OW 423
6404: GO 6330
6406: POP
6407: POP
// end ;
6408: LD_VAR 0 1
6412: RET
// every 0 0$0.1 do var un ;
6413: GO 6415
6415: DISABLE
6416: LD_INT 0
6418: PPUSH
// begin if not def_morale_flags then
6419: LD_EXP 9
6423: NOT
6424: IFFALSE 6428
// exit ;
6426: GO 6505
// if not morale_decreasing_time then
6428: LD_EXP 24
6432: NOT
6433: IFFALSE 6437
// exit ;
6435: GO 6505
// strength = 100 ;
6437: LD_ADDR_LOC 9
6441: PUSH
6442: LD_INT 100
6444: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6445: LD_EXP 24
6449: PPUSH
6450: CALL_OW 67
// strength := strength - 1 ;
6454: LD_ADDR_LOC 9
6458: PUSH
6459: LD_LOC 9
6463: PUSH
6464: LD_INT 1
6466: MINUS
6467: ST_TO_ADDR
// Update_Flags ;
6468: CALL 6316 0 0
// until not strength ;
6472: LD_LOC 9
6476: NOT
6477: IFFALSE 6445
// for un in battle_flags_id do
6479: LD_ADDR_VAR 0 1
6483: PUSH
6484: LD_EXP 42
6488: PUSH
6489: FOR_IN
6490: IFFALSE 6503
// KillBattleFlag ( un ) ;
6492: LD_VAR 0 1
6496: PPUSH
6497: CALL_OW 419
6501: GO 6489
6503: POP
6504: POP
// end ; end_of_file
6505: PPOPN 1
6507: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
6508: LD_INT 0
6510: PPUSH
6511: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
6512: LD_ADDR_VAR 0 2
6516: PUSH
6517: LD_STRING #Multi1x1-Time
6519: PUSH
6520: LD_OWVAR 1
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: ST_TO_ADDR
// if WaitServerStrings then
6529: LD_EXP 53
6533: IFFALSE 6551
// AllStrings = AllStrings ^ WaitServerStrings ;
6535: LD_ADDR_VAR 0 2
6539: PUSH
6540: LD_VAR 0 2
6544: PUSH
6545: LD_EXP 53
6549: ADD
6550: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
6551: LD_INT 0
6553: PUSH
6554: LD_EXP 28
6558: PUSH
6559: LD_OWVAR 1
6563: MINUS
6564: LESSEQUAL
6565: IFFALSE 6596
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
6567: LD_ADDR_VAR 0 2
6571: PUSH
6572: LD_VAR 0 2
6576: PUSH
6577: LD_STRING #allowedsibbomb
6579: PUSH
6580: LD_EXP 28
6584: PUSH
6585: LD_OWVAR 1
6589: MINUS
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: ADD
6595: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
6596: LD_INT 0
6598: PUSH
6599: LD_EXP 56
6603: PUSH
6604: LD_OWVAR 1
6608: MINUS
6609: LESSEQUAL
6610: IFFALSE 6641
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
6612: LD_ADDR_VAR 0 2
6616: PUSH
6617: LD_VAR 0 2
6621: PUSH
6622: LD_STRING #builduptime
6624: PUSH
6625: LD_EXP 56
6629: PUSH
6630: LD_OWVAR 1
6634: MINUS
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: ADD
6640: ST_TO_ADDR
// if ( ExtraStrings ) then
6641: LD_EXP 52
6645: IFFALSE 6667
// AllStrings := AllStrings ^  ^ ExtraStrings ;
6647: LD_ADDR_VAR 0 2
6651: PUSH
6652: LD_VAR 0 2
6656: PUSH
6657: LD_STRING 
6659: ADD
6660: PUSH
6661: LD_EXP 52
6665: ADD
6666: ST_TO_ADDR
// Display_Strings := AllStrings ;
6667: LD_ADDR_OWVAR 47
6671: PUSH
6672: LD_VAR 0 2
6676: ST_TO_ADDR
// end ;
6677: LD_VAR 0 1
6681: RET
// every 0 0$1 do
6682: GO 6684
6684: DISABLE
// begin ShowTimer ;
6685: CALL 6508 0 0
// enable ;
6689: ENABLE
// end ; end_of_file
6690: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
6691: LD_INT 0
6693: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
6694: LD_VAR 0 1
6698: PPUSH
6699: CALL_OW 255
6703: PUSH
6704: LD_VAR 0 4
6708: EQUAL
6709: IFFALSE 6728
// begin SetAchievement ( ACH_RAD ) ;
6711: LD_STRING ACH_RAD
6713: PPUSH
6714: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
6718: LD_STRING ACH_NL
6720: PPUSH
6721: LD_INT 1
6723: PPUSH
6724: CALL_OW 564
// end end ;
6728: LD_VAR 0 5
6732: RET
// export function SA_Win ( side ) ; begin
6733: LD_INT 0
6735: PPUSH
// case side of 1 :
6736: LD_VAR 0 1
6740: PUSH
6741: LD_INT 1
6743: DOUBLE
6744: EQUAL
6745: IFTRUE 6749
6747: GO 6762
6749: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
6750: LD_STRING ACH_AH
6752: PPUSH
6753: LD_INT 1
6755: PPUSH
6756: CALL_OW 564
6760: GO 6925
6762: LD_INT 2
6764: DOUBLE
6765: EQUAL
6766: IFTRUE 6770
6768: GO 6783
6770: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
6771: LD_STRING ACH_E
6773: PPUSH
6774: LD_INT 1
6776: PPUSH
6777: CALL_OW 564
6781: GO 6925
6783: LD_INT 3
6785: DOUBLE
6786: EQUAL
6787: IFTRUE 6791
6789: GO 6804
6791: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
6792: LD_STRING ACH_OOL
6794: PPUSH
6795: LD_INT 1
6797: PPUSH
6798: CALL_OW 564
6802: GO 6925
6804: LD_INT 1
6806: PUSH
6807: LD_INT 2
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: DOUBLE
6814: EQUAL
6815: IFTRUE 6819
6817: GO 6844
6819: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
6820: LD_STRING ACH_AH
6822: PPUSH
6823: LD_REAL  5.00000000000000E-0001
6826: PPUSH
6827: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
6831: LD_STRING ACH_E
6833: PPUSH
6834: LD_REAL  5.00000000000000E-0001
6837: PPUSH
6838: CALL_OW 564
// end ; [ 2 , 3 ] :
6842: GO 6925
6844: LD_INT 2
6846: PUSH
6847: LD_INT 3
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: DOUBLE
6854: EQUAL
6855: IFTRUE 6859
6857: GO 6884
6859: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
6860: LD_STRING ACH_OOL
6862: PPUSH
6863: LD_REAL  5.00000000000000E-0001
6866: PPUSH
6867: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
6871: LD_STRING ACH_E
6873: PPUSH
6874: LD_REAL  5.00000000000000E-0001
6877: PPUSH
6878: CALL_OW 564
// end ; [ 3 , 1 ] :
6882: GO 6925
6884: LD_INT 3
6886: PUSH
6887: LD_INT 1
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: DOUBLE
6894: EQUAL
6895: IFTRUE 6899
6897: GO 6924
6899: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
6900: LD_STRING ACH_AH
6902: PPUSH
6903: LD_REAL  5.00000000000000E-0001
6906: PPUSH
6907: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
6911: LD_STRING ACH_OOL
6913: PPUSH
6914: LD_REAL  5.00000000000000E-0001
6917: PPUSH
6918: CALL_OW 564
// end ; end ;
6922: GO 6925
6924: POP
// end ; end_of_file
6925: LD_VAR 0 2
6929: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
6930: LD_INT 0
6932: PPUSH
6933: PPUSH
// enable ( 98 ) ;
6934: LD_INT 98
6936: ENABLE_MARKED
// GameEnded = false ;
6937: LD_ADDR_LOC 15
6941: PUSH
6942: LD_INT 0
6944: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6945: LD_ADDR_LOC 14
6949: PUSH
6950: LD_INT 0
6952: PUSH
6953: LD_INT 0
6955: PUSH
6956: LD_INT 0
6958: PUSH
6959: LD_INT 0
6961: PUSH
6962: LD_INT 0
6964: PUSH
6965: LD_INT 0
6967: PUSH
6968: LD_INT 0
6970: PUSH
6971: LD_INT 0
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: ST_TO_ADDR
// unfoged = false ;
6984: LD_ADDR_LOC 16
6988: PUSH
6989: LD_INT 0
6991: ST_TO_ADDR
// defeated_specs := [ ] ;
6992: LD_ADDR_LOC 17
6996: PUSH
6997: EMPTY
6998: ST_TO_ADDR
// for i = 1 to side_positions do
6999: LD_ADDR_VAR 0 2
7003: PUSH
7004: DOUBLE
7005: LD_INT 1
7007: DEC
7008: ST_TO_ADDR
7009: LD_EXP 32
7013: PUSH
7014: FOR_TO
7015: IFFALSE 7055
// if not side_positions [ i ] then
7017: LD_EXP 32
7021: PUSH
7022: LD_VAR 0 2
7026: ARRAY
7027: NOT
7028: IFFALSE 7053
// defeated = replace ( defeated , i , true ) ;
7030: LD_ADDR_LOC 14
7034: PUSH
7035: LD_LOC 14
7039: PPUSH
7040: LD_VAR 0 2
7044: PPUSH
7045: LD_INT 1
7047: PPUSH
7048: CALL_OW 1
7052: ST_TO_ADDR
7053: GO 7014
7055: POP
7056: POP
// end ;
7057: LD_VAR 0 1
7061: RET
// function CanWinLoose ; begin
7062: LD_INT 0
7064: PPUSH
// Result := true ;
7065: LD_ADDR_VAR 0 1
7069: PUSH
7070: LD_INT 1
7072: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7073: CALL_OW 518
7077: PUSH
7078: CALL_OW 519
7082: PUSH
7083: LD_INT 0
7085: GREATER
7086: AND
7087: IFFALSE 7097
// Result := false ;
7089: LD_ADDR_VAR 0 1
7093: PUSH
7094: LD_INT 0
7096: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7097: CALL_OW 531
7101: PUSH
7102: CALL_OW 519
7106: PUSH
7107: LD_INT 1
7109: GREATER
7110: AND
7111: IFFALSE 7121
// Result := false ;
7113: LD_ADDR_VAR 0 1
7117: PUSH
7118: LD_INT 0
7120: ST_TO_ADDR
// end ;
7121: LD_VAR 0 1
7125: RET
// export function HasPower ( i ) ; var k , h ; begin
7126: LD_INT 0
7128: PPUSH
7129: PPUSH
7130: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7131: LD_VAR 0 1
7135: PPUSH
7136: CALL_OW 108
7140: NOT
7141: PUSH
7142: LD_EXP 43
7146: PUSH
7147: LD_VAR 0 1
7151: ARRAY
7152: NOT
7153: AND
7154: PUSH
7155: LD_OWVAR 4
7159: AND
7160: IFFALSE 7172
// begin result = false ;
7162: LD_ADDR_VAR 0 2
7166: PUSH
7167: LD_INT 0
7169: ST_TO_ADDR
// end else
7170: GO 7467
// case def_win_rules of 0 :
7172: LD_EXP 29
7176: PUSH
7177: LD_INT 0
7179: DOUBLE
7180: EQUAL
7181: IFTRUE 7185
7183: GO 7348
7185: POP
// if def_people_respawning then
7186: LD_EXP 12
7190: IFFALSE 7281
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7192: LD_ADDR_VAR 0 2
7196: PUSH
7197: LD_INT 22
7199: PUSH
7200: LD_VAR 0 1
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: LD_INT 2
7211: PUSH
7212: LD_INT 21
7214: PUSH
7215: LD_INT 1
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: LD_INT 33
7224: PUSH
7225: LD_INT 3
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: LD_INT 33
7234: PUSH
7235: LD_INT 5
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 30
7244: PUSH
7245: LD_INT 0
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: PUSH
7252: LD_INT 30
7254: PUSH
7255: LD_INT 1
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PPUSH
7274: CALL_OW 69
7278: ST_TO_ADDR
7279: GO 7346
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
7281: LD_ADDR_VAR 0 2
7285: PUSH
7286: LD_INT 22
7288: PUSH
7289: LD_VAR 0 1
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: LD_INT 2
7300: PUSH
7301: LD_INT 21
7303: PUSH
7304: LD_INT 1
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: PUSH
7311: LD_INT 33
7313: PUSH
7314: LD_INT 3
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: PUSH
7321: LD_INT 33
7323: PUSH
7324: LD_INT 5
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PPUSH
7341: CALL_OW 69
7345: ST_TO_ADDR
7346: GO 7467
7348: LD_INT 1
7350: DOUBLE
7351: EQUAL
7352: IFTRUE 7356
7354: GO 7395
7356: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
7357: LD_ADDR_VAR 0 2
7361: PUSH
7362: LD_INT 22
7364: PUSH
7365: LD_VAR 0 1
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PUSH
7374: LD_INT 21
7376: PUSH
7377: LD_INT 1
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PPUSH
7388: CALL_OW 69
7392: ST_TO_ADDR
7393: GO 7467
7395: LD_INT 2
7397: DOUBLE
7398: EQUAL
7399: IFTRUE 7403
7401: GO 7466
7403: POP
// begin h = false ;
7404: LD_ADDR_VAR 0 4
7408: PUSH
7409: LD_INT 0
7411: ST_TO_ADDR
// for k in heroes [ i ] do
7412: LD_ADDR_VAR 0 3
7416: PUSH
7417: LD_EXP 44
7421: PUSH
7422: LD_VAR 0 1
7426: ARRAY
7427: PUSH
7428: FOR_IN
7429: IFFALSE 7452
// if IsLive ( k ) then
7431: LD_VAR 0 3
7435: PPUSH
7436: CALL_OW 300
7440: IFFALSE 7450
// h = true ;
7442: LD_ADDR_VAR 0 4
7446: PUSH
7447: LD_INT 1
7449: ST_TO_ADDR
7450: GO 7428
7452: POP
7453: POP
// Result := h ;
7454: LD_ADDR_VAR 0 2
7458: PUSH
7459: LD_VAR 0 4
7463: ST_TO_ADDR
// end ; end ;
7464: GO 7467
7466: POP
// end ;
7467: LD_VAR 0 2
7471: RET
// function AlliedSides ( i , j ) ; begin
7472: LD_INT 0
7474: PPUSH
// Result := false ;
7475: LD_ADDR_VAR 0 3
7479: PUSH
7480: LD_INT 0
7482: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7483: LD_VAR 0 1
7487: PPUSH
7488: LD_VAR 0 2
7492: PPUSH
7493: CALL_OW 81
7497: PUSH
7498: LD_INT 1
7500: EQUAL
7501: PUSH
7502: LD_VAR 0 2
7506: PPUSH
7507: LD_VAR 0 1
7511: PPUSH
7512: CALL_OW 81
7516: PUSH
7517: LD_INT 1
7519: EQUAL
7520: AND
7521: PUSH
7522: LD_VAR 0 1
7526: PPUSH
7527: CALL_OW 83
7531: AND
7532: PUSH
7533: LD_VAR 0 2
7537: PPUSH
7538: CALL_OW 83
7542: AND
7543: IFFALSE 7553
// Result := true ;
7545: LD_ADDR_VAR 0 3
7549: PUSH
7550: LD_INT 1
7552: ST_TO_ADDR
// end ;
7553: LD_VAR 0 3
7557: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
7558: CALL 7062 0 0
7562: PUSH
7563: LD_LOC 15
7567: NOT
7568: AND
7569: IFFALSE 7585
7571: GO 7573
7573: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
7574: LD_ADDR_EXP 53
7578: PUSH
7579: LD_STRING #Player-Ended
7581: PUSH
7582: EMPTY
7583: LIST
7584: ST_TO_ADDR
7585: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
7586: CALL 7062 0 0
7590: PUSH
7591: LD_LOC 15
7595: AND
7596: IFFALSE 7605
7598: GO 7600
7600: DISABLE
// YouLostInMultiplayer ;
7601: CALL_OW 107
7605: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
7606: CALL 7062 0 0
7610: NOT
7611: PUSH
7612: CALL_OW 531
7616: NOT
7617: AND
7618: IFFALSE 7634
7620: GO 7622
7622: DISABLE
// WaitServerStrings = [ #server-wait ] ;
7623: LD_ADDR_EXP 53
7627: PUSH
7628: LD_STRING #server-wait
7630: PUSH
7631: EMPTY
7632: LIST
7633: ST_TO_ADDR
7634: END
// every 100 trigger IAmSpec do
7635: CALL_OW 531
7639: IFFALSE 7655
7641: GO 7643
7643: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
7644: LD_ADDR_EXP 53
7648: PUSH
7649: LD_STRING #Player-IAmSpec
7651: PUSH
7652: EMPTY
7653: LIST
7654: ST_TO_ADDR
7655: END
// every 100 trigger GameEnded and IAmSpec do
7656: LD_LOC 15
7660: PUSH
7661: CALL_OW 531
7665: AND
7666: IFFALSE 7675
7668: GO 7670
7670: DISABLE
// YouLostInMultiplayer ;
7671: CALL_OW 107
7675: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
7676: CALL 7062 0 0
7680: PUSH
7681: LD_LOC 15
7685: NOT
7686: AND
7687: IFFALSE 7703
7689: GO 7691
7691: DISABLE
// WaitServerStrings = [ $player-win ] ;
7692: LD_ADDR_EXP 53
7696: PUSH
7697: LD_STRING $player-win
7699: PUSH
7700: EMPTY
7701: LIST
7702: ST_TO_ADDR
7703: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
7704: CALL 7062 0 0
7708: PUSH
7709: LD_LOC 15
7713: AND
7714: IFFALSE 7738
7716: GO 7718
7718: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
7719: LD_EXP 33
7723: PUSH
7724: LD_OWVAR 7
7728: ARRAY
7729: PPUSH
7730: CALL 6733 0 1
// YouWinInMultiplayer ;
7734: CALL_OW 106
// end ;
7738: END
// every 100 trigger isEditor marked 401 do
7739: LD_OWVAR 84
7743: IFFALSE 7759
7745: GO 7747
7747: DISABLE
// Debug_Strings = [ You won ] ;
7748: LD_ADDR_OWVAR 48
7752: PUSH
7753: LD_STRING You won
7755: PUSH
7756: EMPTY
7757: LIST
7758: ST_TO_ADDR
7759: END
// every 100 trigger isEditor marked 400 do
7760: LD_OWVAR 84
7764: IFFALSE 7780
7766: GO 7768
7768: DISABLE
// Debug_Strings = [ You loss ] ;
7769: LD_ADDR_OWVAR 48
7773: PUSH
7774: LD_STRING You loss
7776: PUSH
7777: EMPTY
7778: LIST
7779: ST_TO_ADDR
7780: END
// every 100 marked 98 do var i , un ;
7781: GO 7783
7783: DISABLE
7784: LD_INT 0
7786: PPUSH
7787: PPUSH
// begin for i = 1 to side_positions do
7788: LD_ADDR_VAR 0 1
7792: PUSH
7793: DOUBLE
7794: LD_INT 1
7796: DEC
7797: ST_TO_ADDR
7798: LD_EXP 32
7802: PUSH
7803: FOR_TO
7804: IFFALSE 7891
// begin if side_positions [ i ] then
7806: LD_EXP 32
7810: PUSH
7811: LD_VAR 0 1
7815: ARRAY
7816: IFFALSE 7889
// if not HasPower ( i ) and not defeated [ i ] then
7818: LD_VAR 0 1
7822: PPUSH
7823: CALL 7126 0 1
7827: NOT
7828: PUSH
7829: LD_LOC 14
7833: PUSH
7834: LD_VAR 0 1
7838: ARRAY
7839: NOT
7840: AND
7841: IFFALSE 7889
// begin defeated = replace ( defeated , i , true ) ;
7843: LD_ADDR_LOC 14
7847: PUSH
7848: LD_LOC 14
7852: PPUSH
7853: LD_VAR 0 1
7857: PPUSH
7858: LD_INT 1
7860: PPUSH
7861: CALL_OW 1
7865: ST_TO_ADDR
// if i = mp_player_side then
7866: LD_VAR 0 1
7870: PUSH
7871: LD_OWVAR 7
7875: EQUAL
7876: IFFALSE 7889
// begin Multiplayer_Loose_Message ;
7878: CALL_OW 521
// SetPlayerSpectator ( ) ;
7882: CALL_OW 572
// enable ( 400 ) ;
7886: LD_INT 400
7888: ENABLE_MARKED
// end ; end ; end ;
7889: GO 7803
7891: POP
7892: POP
// DidGameEnd ;
7893: CALL 7908 0 0
// if not GameEnded then
7897: LD_LOC 15
7901: NOT
7902: IFFALSE 7905
// enable ;
7904: ENABLE
// end ;
7905: PPOPN 2
7907: END
// function DidGameEnd ; var i , k , enemy ; begin
7908: LD_INT 0
7910: PPUSH
7911: PPUSH
7912: PPUSH
7913: PPUSH
// enemy = [ ] ;
7914: LD_ADDR_VAR 0 4
7918: PUSH
7919: EMPTY
7920: ST_TO_ADDR
// for i = 1 to side_positions do
7921: LD_ADDR_VAR 0 2
7925: PUSH
7926: DOUBLE
7927: LD_INT 1
7929: DEC
7930: ST_TO_ADDR
7931: LD_EXP 32
7935: PUSH
7936: FOR_TO
7937: IFFALSE 8031
// if not defeated [ i ] then
7939: LD_LOC 14
7943: PUSH
7944: LD_VAR 0 2
7948: ARRAY
7949: NOT
7950: IFFALSE 8029
// for k = 1 to side_positions do
7952: LD_ADDR_VAR 0 3
7956: PUSH
7957: DOUBLE
7958: LD_INT 1
7960: DEC
7961: ST_TO_ADDR
7962: LD_EXP 32
7966: PUSH
7967: FOR_TO
7968: IFFALSE 8027
// if not defeated [ k ] then
7970: LD_LOC 14
7974: PUSH
7975: LD_VAR 0 3
7979: ARRAY
7980: NOT
7981: IFFALSE 8025
// if not AlliedSides ( i , k ) then
7983: LD_VAR 0 2
7987: PPUSH
7988: LD_VAR 0 3
7992: PPUSH
7993: CALL 7472 0 2
7997: NOT
7998: IFFALSE 8025
// enemy = enemy ^ [ i , k ] ;
8000: LD_ADDR_VAR 0 4
8004: PUSH
8005: LD_VAR 0 4
8009: PUSH
8010: LD_VAR 0 2
8014: PUSH
8015: LD_VAR 0 3
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: ADD
8024: ST_TO_ADDR
8025: GO 7967
8027: POP
8028: POP
8029: GO 7936
8031: POP
8032: POP
// if not enemy then
8033: LD_VAR 0 4
8037: NOT
8038: IFFALSE 8064
// begin GameEnded = true ;
8040: LD_ADDR_LOC 15
8044: PUSH
8045: LD_INT 1
8047: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
8048: LD_LOC 14
8052: PUSH
8053: LD_OWVAR 7
8057: ARRAY
8058: NOT
8059: IFFALSE 8064
// enable ( 401 ) ;
8061: LD_INT 401
8063: ENABLE_MARKED
// end ; end ;
8064: LD_VAR 0 1
8068: RET
// function unfog ; var k , friends ; begin
8069: LD_INT 0
8071: PPUSH
8072: PPUSH
8073: PPUSH
// for k = 1 to side_positions do
8074: LD_ADDR_VAR 0 2
8078: PUSH
8079: DOUBLE
8080: LD_INT 1
8082: DEC
8083: ST_TO_ADDR
8084: LD_EXP 32
8088: PUSH
8089: FOR_TO
8090: IFFALSE 8146
// if not defeated [ k ] then
8092: LD_LOC 14
8096: PUSH
8097: LD_VAR 0 2
8101: ARRAY
8102: NOT
8103: IFFALSE 8144
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
8105: LD_OWVAR 7
8109: PPUSH
8110: LD_VAR 0 2
8114: PPUSH
8115: CALL_OW 81
8119: PUSH
8120: LD_INT 1
8122: PUSH
8123: EMPTY
8124: LIST
8125: IN
8126: IFFALSE 8144
// friends = friends ^ k ;
8128: LD_ADDR_VAR 0 3
8132: PUSH
8133: LD_VAR 0 3
8137: PUSH
8138: LD_VAR 0 2
8142: ADD
8143: ST_TO_ADDR
8144: GO 8089
8146: POP
8147: POP
// if not friends then
8148: LD_VAR 0 3
8152: NOT
8153: IFFALSE 8167
// begin SetPlayerSpectator ( ) ;
8155: CALL_OW 572
// unfoged = true ;
8159: LD_ADDR_LOC 16
8163: PUSH
8164: LD_INT 1
8166: ST_TO_ADDR
// end ; end ;
8167: LD_VAR 0 1
8171: RET
// export function MakeGameEnd ; begin
8172: LD_INT 0
8174: PPUSH
// SetPlayerSpectator ( ) ;
8175: CALL_OW 572
// unfoged = true ;
8179: LD_ADDR_LOC 16
8183: PUSH
8184: LD_INT 1
8186: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8187: LD_INT 175
8189: PPUSH
8190: CALL_OW 67
// GameEnded = true ;
8194: LD_ADDR_LOC 15
8198: PUSH
8199: LD_INT 1
8201: ST_TO_ADDR
// end ;
8202: LD_VAR 0 1
8206: RET
// export function GetGameEnded ; begin
8207: LD_INT 0
8209: PPUSH
// result = GameEnded ;
8210: LD_ADDR_VAR 0 1
8214: PUSH
8215: LD_LOC 15
8219: ST_TO_ADDR
// end ; end_of_file
8220: LD_VAR 0 1
8224: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8225: LD_INT 0
8227: PPUSH
8228: PPUSH
8229: PPUSH
// for side = 1 to 8 do
8230: LD_ADDR_VAR 0 2
8234: PUSH
8235: DOUBLE
8236: LD_INT 1
8238: DEC
8239: ST_TO_ADDR
8240: LD_INT 8
8242: PUSH
8243: FOR_TO
8244: IFFALSE 8365
// begin for i = 1 to 72 do
8246: LD_ADDR_VAR 0 3
8250: PUSH
8251: DOUBLE
8252: LD_INT 1
8254: DEC
8255: ST_TO_ADDR
8256: LD_INT 72
8258: PUSH
8259: FOR_TO
8260: IFFALSE 8291
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
8262: LD_VAR 0 3
8266: PPUSH
8267: LD_VAR 0 2
8271: PPUSH
8272: LD_INT 0
8274: PPUSH
8275: LD_VAR 0 3
8279: PPUSH
8280: CALL_OW 565
8284: PPUSH
8285: CALL_OW 322
8289: GO 8259
8291: POP
8292: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
8293: LD_INT 73
8295: PPUSH
8296: LD_VAR 0 2
8300: PPUSH
8301: LD_INT 0
8303: PPUSH
8304: LD_INT 25
8306: PPUSH
8307: CALL_OW 565
8311: PPUSH
8312: CALL_OW 322
// for i = 0 to 40 do
8316: LD_ADDR_VAR 0 3
8320: PUSH
8321: DOUBLE
8322: LD_INT 0
8324: DEC
8325: ST_TO_ADDR
8326: LD_INT 40
8328: PUSH
8329: FOR_TO
8330: IFFALSE 8361
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
8332: LD_VAR 0 3
8336: PPUSH
8337: LD_VAR 0 2
8341: PPUSH
8342: LD_INT 1
8344: PPUSH
8345: LD_VAR 0 3
8349: PPUSH
8350: CALL_OW 565
8354: PPUSH
8355: CALL_OW 324
8359: GO 8329
8361: POP
8362: POP
// end ;
8363: GO 8243
8365: POP
8366: POP
// end ;
8367: LD_VAR 0 1
8371: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
8372: LD_INT 0
8374: PPUSH
8375: PPUSH
8376: PPUSH
// for side = 1 to 8 do
8377: LD_ADDR_VAR 0 3
8381: PUSH
8382: DOUBLE
8383: LD_INT 1
8385: DEC
8386: ST_TO_ADDR
8387: LD_INT 8
8389: PUSH
8390: FOR_TO
8391: IFFALSE 12387
// begin for i = 1 to 73 do
8393: LD_ADDR_VAR 0 4
8397: PUSH
8398: DOUBLE
8399: LD_INT 1
8401: DEC
8402: ST_TO_ADDR
8403: LD_INT 73
8405: PUSH
8406: FOR_TO
8407: IFFALSE 8428
// SetTech ( i , side , state_disabled ) ;
8409: LD_VAR 0 4
8413: PPUSH
8414: LD_VAR 0 3
8418: PPUSH
8419: LD_INT 0
8421: PPUSH
8422: CALL_OW 322
8426: GO 8406
8428: POP
8429: POP
// for i = 0 to 40 do
8430: LD_ADDR_VAR 0 4
8434: PUSH
8435: DOUBLE
8436: LD_INT 0
8438: DEC
8439: ST_TO_ADDR
8440: LD_INT 40
8442: PUSH
8443: FOR_TO
8444: IFFALSE 8465
// SetRestrict ( i , side , false ) ;
8446: LD_VAR 0 4
8450: PPUSH
8451: LD_VAR 0 3
8455: PPUSH
8456: LD_INT 0
8458: PPUSH
8459: CALL_OW 324
8463: GO 8443
8465: POP
8466: POP
// case level of 1 :
8467: LD_VAR 0 1
8471: PUSH
8472: LD_INT 1
8474: DOUBLE
8475: EQUAL
8476: IFTRUE 8480
8478: GO 8633
8480: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8481: LD_INT 35
8483: PPUSH
8484: LD_VAR 0 3
8488: PPUSH
8489: LD_INT 1
8491: PPUSH
8492: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8496: LD_INT 45
8498: PPUSH
8499: LD_VAR 0 3
8503: PPUSH
8504: LD_INT 1
8506: PPUSH
8507: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8511: LD_INT 46
8513: PPUSH
8514: LD_VAR 0 3
8518: PPUSH
8519: LD_INT 1
8521: PPUSH
8522: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8526: LD_INT 47
8528: PPUSH
8529: LD_VAR 0 3
8533: PPUSH
8534: LD_INT 1
8536: PPUSH
8537: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8541: LD_INT 0
8543: PPUSH
8544: LD_VAR 0 3
8548: PPUSH
8549: LD_INT 1
8551: PPUSH
8552: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8556: LD_INT 2
8558: PPUSH
8559: LD_VAR 0 3
8563: PPUSH
8564: LD_INT 1
8566: PPUSH
8567: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8571: LD_INT 4
8573: PPUSH
8574: LD_VAR 0 3
8578: PPUSH
8579: LD_INT 1
8581: PPUSH
8582: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8586: LD_INT 6
8588: PPUSH
8589: LD_VAR 0 3
8593: PPUSH
8594: LD_INT 1
8596: PPUSH
8597: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8601: LD_INT 29
8603: PPUSH
8604: LD_VAR 0 3
8608: PPUSH
8609: LD_INT 1
8611: PPUSH
8612: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8616: LD_INT 31
8618: PPUSH
8619: LD_VAR 0 3
8623: PPUSH
8624: LD_INT 1
8626: PPUSH
8627: CALL_OW 324
// end ; 2 :
8631: GO 12385
8633: LD_INT 2
8635: DOUBLE
8636: EQUAL
8637: IFTRUE 8641
8639: GO 8839
8641: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8642: LD_INT 35
8644: PPUSH
8645: LD_VAR 0 3
8649: PPUSH
8650: LD_INT 1
8652: PPUSH
8653: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8657: LD_INT 45
8659: PPUSH
8660: LD_VAR 0 3
8664: PPUSH
8665: LD_INT 1
8667: PPUSH
8668: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8672: LD_INT 46
8674: PPUSH
8675: LD_VAR 0 3
8679: PPUSH
8680: LD_INT 1
8682: PPUSH
8683: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8687: LD_INT 47
8689: PPUSH
8690: LD_VAR 0 3
8694: PPUSH
8695: LD_INT 1
8697: PPUSH
8698: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8702: LD_INT 1
8704: PPUSH
8705: LD_VAR 0 3
8709: PPUSH
8710: LD_INT 1
8712: PPUSH
8713: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8717: LD_INT 2
8719: PPUSH
8720: LD_VAR 0 3
8724: PPUSH
8725: LD_INT 1
8727: PPUSH
8728: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8732: LD_INT 11
8734: PPUSH
8735: LD_VAR 0 3
8739: PPUSH
8740: LD_INT 1
8742: PPUSH
8743: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8747: LD_INT 0
8749: PPUSH
8750: LD_VAR 0 3
8754: PPUSH
8755: LD_INT 1
8757: PPUSH
8758: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8762: LD_INT 2
8764: PPUSH
8765: LD_VAR 0 3
8769: PPUSH
8770: LD_INT 1
8772: PPUSH
8773: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8777: LD_INT 4
8779: PPUSH
8780: LD_VAR 0 3
8784: PPUSH
8785: LD_INT 1
8787: PPUSH
8788: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8792: LD_INT 6
8794: PPUSH
8795: LD_VAR 0 3
8799: PPUSH
8800: LD_INT 1
8802: PPUSH
8803: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8807: LD_INT 29
8809: PPUSH
8810: LD_VAR 0 3
8814: PPUSH
8815: LD_INT 1
8817: PPUSH
8818: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8822: LD_INT 31
8824: PPUSH
8825: LD_VAR 0 3
8829: PPUSH
8830: LD_INT 1
8832: PPUSH
8833: CALL_OW 324
// end ; 3 :
8837: GO 12385
8839: LD_INT 3
8841: DOUBLE
8842: EQUAL
8843: IFTRUE 8847
8845: GO 9300
8847: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8848: LD_INT 35
8850: PPUSH
8851: LD_VAR 0 3
8855: PPUSH
8856: LD_INT 1
8858: PPUSH
8859: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8863: LD_INT 45
8865: PPUSH
8866: LD_VAR 0 3
8870: PPUSH
8871: LD_INT 1
8873: PPUSH
8874: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8878: LD_INT 46
8880: PPUSH
8881: LD_VAR 0 3
8885: PPUSH
8886: LD_INT 1
8888: PPUSH
8889: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8893: LD_INT 47
8895: PPUSH
8896: LD_VAR 0 3
8900: PPUSH
8901: LD_INT 1
8903: PPUSH
8904: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8908: LD_INT 1
8910: PPUSH
8911: LD_VAR 0 3
8915: PPUSH
8916: LD_INT 1
8918: PPUSH
8919: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8923: LD_INT 2
8925: PPUSH
8926: LD_VAR 0 3
8930: PPUSH
8931: LD_INT 1
8933: PPUSH
8934: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8938: LD_INT 11
8940: PPUSH
8941: LD_VAR 0 3
8945: PPUSH
8946: LD_INT 1
8948: PPUSH
8949: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
8953: LD_INT 48
8955: PPUSH
8956: LD_VAR 0 3
8960: PPUSH
8961: LD_INT 1
8963: PPUSH
8964: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
8968: LD_INT 69
8970: PPUSH
8971: LD_VAR 0 3
8975: PPUSH
8976: LD_INT 1
8978: PPUSH
8979: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
8983: LD_INT 39
8985: PPUSH
8986: LD_VAR 0 3
8990: PPUSH
8991: LD_INT 1
8993: PPUSH
8994: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
8998: LD_INT 43
9000: PPUSH
9001: LD_VAR 0 3
9005: PPUSH
9006: LD_INT 1
9008: PPUSH
9009: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9013: LD_INT 51
9015: PPUSH
9016: LD_VAR 0 3
9020: PPUSH
9021: LD_INT 1
9023: PPUSH
9024: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9028: LD_INT 6
9030: PPUSH
9031: LD_VAR 0 3
9035: PPUSH
9036: LD_INT 1
9038: PPUSH
9039: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9043: LD_INT 0
9045: PPUSH
9046: LD_VAR 0 3
9050: PPUSH
9051: LD_INT 1
9053: PPUSH
9054: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9058: LD_INT 2
9060: PPUSH
9061: LD_VAR 0 3
9065: PPUSH
9066: LD_INT 1
9068: PPUSH
9069: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9073: LD_INT 3
9075: PPUSH
9076: LD_VAR 0 3
9080: PPUSH
9081: LD_INT 1
9083: PPUSH
9084: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9088: LD_INT 4
9090: PPUSH
9091: LD_VAR 0 3
9095: PPUSH
9096: LD_INT 1
9098: PPUSH
9099: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9103: LD_INT 6
9105: PPUSH
9106: LD_VAR 0 3
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9118: LD_INT 7
9120: PPUSH
9121: LD_VAR 0 3
9125: PPUSH
9126: LD_INT 1
9128: PPUSH
9129: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9133: LD_INT 8
9135: PPUSH
9136: LD_VAR 0 3
9140: PPUSH
9141: LD_INT 1
9143: PPUSH
9144: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9148: LD_INT 10
9150: PPUSH
9151: LD_VAR 0 3
9155: PPUSH
9156: LD_INT 1
9158: PPUSH
9159: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9163: LD_INT 15
9165: PPUSH
9166: LD_VAR 0 3
9170: PPUSH
9171: LD_INT 1
9173: PPUSH
9174: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9178: LD_INT 16
9180: PPUSH
9181: LD_VAR 0 3
9185: PPUSH
9186: LD_INT 1
9188: PPUSH
9189: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9193: LD_INT 17
9195: PPUSH
9196: LD_VAR 0 3
9200: PPUSH
9201: LD_INT 1
9203: PPUSH
9204: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9208: LD_INT 20
9210: PPUSH
9211: LD_VAR 0 3
9215: PPUSH
9216: LD_INT 1
9218: PPUSH
9219: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9223: LD_INT 26
9225: PPUSH
9226: LD_VAR 0 3
9230: PPUSH
9231: LD_INT 1
9233: PPUSH
9234: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9238: LD_INT 27
9240: PPUSH
9241: LD_VAR 0 3
9245: PPUSH
9246: LD_INT 1
9248: PPUSH
9249: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9253: LD_INT 29
9255: PPUSH
9256: LD_VAR 0 3
9260: PPUSH
9261: LD_INT 1
9263: PPUSH
9264: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9268: LD_INT 31
9270: PPUSH
9271: LD_VAR 0 3
9275: PPUSH
9276: LD_INT 1
9278: PPUSH
9279: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9283: LD_INT 32
9285: PPUSH
9286: LD_VAR 0 3
9290: PPUSH
9291: LD_INT 1
9293: PPUSH
9294: CALL_OW 324
// end ; 4 :
9298: GO 12385
9300: LD_INT 4
9302: DOUBLE
9303: EQUAL
9304: IFTRUE 9308
9306: GO 10256
9308: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9309: LD_INT 35
9311: PPUSH
9312: LD_VAR 0 3
9316: PPUSH
9317: LD_INT 1
9319: PPUSH
9320: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9324: LD_INT 45
9326: PPUSH
9327: LD_VAR 0 3
9331: PPUSH
9332: LD_INT 1
9334: PPUSH
9335: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9339: LD_INT 46
9341: PPUSH
9342: LD_VAR 0 3
9346: PPUSH
9347: LD_INT 1
9349: PPUSH
9350: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9354: LD_INT 47
9356: PPUSH
9357: LD_VAR 0 3
9361: PPUSH
9362: LD_INT 1
9364: PPUSH
9365: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9369: LD_INT 1
9371: PPUSH
9372: LD_VAR 0 3
9376: PPUSH
9377: LD_INT 1
9379: PPUSH
9380: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9384: LD_INT 2
9386: PPUSH
9387: LD_VAR 0 3
9391: PPUSH
9392: LD_INT 1
9394: PPUSH
9395: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9399: LD_INT 11
9401: PPUSH
9402: LD_VAR 0 3
9406: PPUSH
9407: LD_INT 1
9409: PPUSH
9410: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9414: LD_INT 20
9416: PPUSH
9417: LD_VAR 0 3
9421: PPUSH
9422: LD_INT 1
9424: PPUSH
9425: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9429: LD_INT 48
9431: PPUSH
9432: LD_VAR 0 3
9436: PPUSH
9437: LD_INT 1
9439: PPUSH
9440: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9444: LD_INT 49
9446: PPUSH
9447: LD_VAR 0 3
9451: PPUSH
9452: LD_INT 1
9454: PPUSH
9455: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9459: LD_INT 69
9461: PPUSH
9462: LD_VAR 0 3
9466: PPUSH
9467: LD_INT 1
9469: PPUSH
9470: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9474: LD_INT 39
9476: PPUSH
9477: LD_VAR 0 3
9481: PPUSH
9482: LD_INT 1
9484: PPUSH
9485: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9489: LD_INT 34
9491: PPUSH
9492: LD_VAR 0 3
9496: PPUSH
9497: LD_INT 1
9499: PPUSH
9500: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
9504: LD_INT 42
9506: PPUSH
9507: LD_VAR 0 3
9511: PPUSH
9512: LD_INT 1
9514: PPUSH
9515: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
9519: LD_INT 44
9521: PPUSH
9522: LD_VAR 0 3
9526: PPUSH
9527: LD_INT 1
9529: PPUSH
9530: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
9534: LD_INT 41
9536: PPUSH
9537: LD_VAR 0 3
9541: PPUSH
9542: LD_INT 1
9544: PPUSH
9545: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9549: LD_INT 43
9551: PPUSH
9552: LD_VAR 0 3
9556: PPUSH
9557: LD_INT 1
9559: PPUSH
9560: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
9564: LD_INT 70
9566: PPUSH
9567: LD_VAR 0 3
9571: PPUSH
9572: LD_INT 1
9574: PPUSH
9575: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9579: LD_INT 51
9581: PPUSH
9582: LD_VAR 0 3
9586: PPUSH
9587: LD_INT 1
9589: PPUSH
9590: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
9594: LD_INT 52
9596: PPUSH
9597: LD_VAR 0 3
9601: PPUSH
9602: LD_INT 1
9604: PPUSH
9605: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9609: LD_INT 6
9611: PPUSH
9612: LD_VAR 0 3
9616: PPUSH
9617: LD_INT 1
9619: PPUSH
9620: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9624: LD_INT 15
9626: PPUSH
9627: LD_VAR 0 3
9631: PPUSH
9632: LD_INT 1
9634: PPUSH
9635: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
9639: LD_INT 7
9641: PPUSH
9642: LD_VAR 0 3
9646: PPUSH
9647: LD_INT 1
9649: PPUSH
9650: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
9654: LD_INT 12
9656: PPUSH
9657: LD_VAR 0 3
9661: PPUSH
9662: LD_INT 1
9664: PPUSH
9665: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
9669: LD_INT 18
9671: PPUSH
9672: LD_VAR 0 3
9676: PPUSH
9677: LD_INT 1
9679: PPUSH
9680: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
9684: LD_INT 60
9686: PPUSH
9687: LD_VAR 0 3
9691: PPUSH
9692: LD_INT 1
9694: PPUSH
9695: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
9699: LD_INT 9
9701: PPUSH
9702: LD_VAR 0 3
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
9714: LD_INT 30
9716: PPUSH
9717: LD_VAR 0 3
9721: PPUSH
9722: LD_INT 1
9724: PPUSH
9725: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
9729: LD_INT 37
9731: PPUSH
9732: LD_VAR 0 3
9736: PPUSH
9737: LD_INT 1
9739: PPUSH
9740: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
9744: LD_INT 5
9746: PPUSH
9747: LD_VAR 0 3
9751: PPUSH
9752: LD_INT 1
9754: PPUSH
9755: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
9759: LD_INT 66
9761: PPUSH
9762: LD_VAR 0 3
9766: PPUSH
9767: LD_INT 1
9769: PPUSH
9770: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
9774: LD_INT 21
9776: PPUSH
9777: LD_VAR 0 3
9781: PPUSH
9782: LD_INT 1
9784: PPUSH
9785: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
9789: LD_INT 22
9791: PPUSH
9792: LD_VAR 0 3
9796: PPUSH
9797: LD_INT 1
9799: PPUSH
9800: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
9804: LD_INT 54
9806: PPUSH
9807: LD_VAR 0 3
9811: PPUSH
9812: LD_INT 1
9814: PPUSH
9815: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9819: LD_INT 0
9821: PPUSH
9822: LD_VAR 0 3
9826: PPUSH
9827: LD_INT 1
9829: PPUSH
9830: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
9834: LD_INT 1
9836: PPUSH
9837: LD_VAR 0 3
9841: PPUSH
9842: LD_INT 1
9844: PPUSH
9845: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9849: LD_INT 2
9851: PPUSH
9852: LD_VAR 0 3
9856: PPUSH
9857: LD_INT 1
9859: PPUSH
9860: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9864: LD_INT 3
9866: PPUSH
9867: LD_VAR 0 3
9871: PPUSH
9872: LD_INT 1
9874: PPUSH
9875: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9879: LD_INT 4
9881: PPUSH
9882: LD_VAR 0 3
9886: PPUSH
9887: LD_INT 1
9889: PPUSH
9890: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
9894: LD_INT 5
9896: PPUSH
9897: LD_VAR 0 3
9901: PPUSH
9902: LD_INT 1
9904: PPUSH
9905: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9909: LD_INT 6
9911: PPUSH
9912: LD_VAR 0 3
9916: PPUSH
9917: LD_INT 1
9919: PPUSH
9920: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9924: LD_INT 7
9926: PPUSH
9927: LD_VAR 0 3
9931: PPUSH
9932: LD_INT 1
9934: PPUSH
9935: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9939: LD_INT 8
9941: PPUSH
9942: LD_VAR 0 3
9946: PPUSH
9947: LD_INT 1
9949: PPUSH
9950: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9954: LD_INT 10
9956: PPUSH
9957: LD_VAR 0 3
9961: PPUSH
9962: LD_INT 1
9964: PPUSH
9965: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
9969: LD_INT 11
9971: PPUSH
9972: LD_VAR 0 3
9976: PPUSH
9977: LD_INT 1
9979: PPUSH
9980: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
9984: LD_INT 12
9986: PPUSH
9987: LD_VAR 0 3
9991: PPUSH
9992: LD_INT 1
9994: PPUSH
9995: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
9999: LD_INT 13
10001: PPUSH
10002: LD_VAR 0 3
10006: PPUSH
10007: LD_INT 1
10009: PPUSH
10010: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10014: LD_INT 14
10016: PPUSH
10017: LD_VAR 0 3
10021: PPUSH
10022: LD_INT 1
10024: PPUSH
10025: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10029: LD_INT 15
10031: PPUSH
10032: LD_VAR 0 3
10036: PPUSH
10037: LD_INT 1
10039: PPUSH
10040: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10044: LD_INT 16
10046: PPUSH
10047: LD_VAR 0 3
10051: PPUSH
10052: LD_INT 1
10054: PPUSH
10055: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10059: LD_INT 17
10061: PPUSH
10062: LD_VAR 0 3
10066: PPUSH
10067: LD_INT 1
10069: PPUSH
10070: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10074: LD_INT 19
10076: PPUSH
10077: LD_VAR 0 3
10081: PPUSH
10082: LD_INT 1
10084: PPUSH
10085: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10089: LD_INT 20
10091: PPUSH
10092: LD_VAR 0 3
10096: PPUSH
10097: LD_INT 1
10099: PPUSH
10100: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10104: LD_INT 21
10106: PPUSH
10107: LD_VAR 0 3
10111: PPUSH
10112: LD_INT 1
10114: PPUSH
10115: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10119: LD_INT 23
10121: PPUSH
10122: LD_VAR 0 3
10126: PPUSH
10127: LD_INT 1
10129: PPUSH
10130: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10134: LD_INT 26
10136: PPUSH
10137: LD_VAR 0 3
10141: PPUSH
10142: LD_INT 1
10144: PPUSH
10145: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10149: LD_INT 27
10151: PPUSH
10152: LD_VAR 0 3
10156: PPUSH
10157: LD_INT 1
10159: PPUSH
10160: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10164: LD_INT 28
10166: PPUSH
10167: LD_VAR 0 3
10171: PPUSH
10172: LD_INT 1
10174: PPUSH
10175: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10179: LD_INT 29
10181: PPUSH
10182: LD_VAR 0 3
10186: PPUSH
10187: LD_INT 1
10189: PPUSH
10190: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10194: LD_INT 30
10196: PPUSH
10197: LD_VAR 0 3
10201: PPUSH
10202: LD_INT 1
10204: PPUSH
10205: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10209: LD_INT 31
10211: PPUSH
10212: LD_VAR 0 3
10216: PPUSH
10217: LD_INT 1
10219: PPUSH
10220: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10224: LD_INT 32
10226: PPUSH
10227: LD_VAR 0 3
10231: PPUSH
10232: LD_INT 1
10234: PPUSH
10235: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10239: LD_INT 36
10241: PPUSH
10242: LD_VAR 0 3
10246: PPUSH
10247: LD_INT 1
10249: PPUSH
10250: CALL_OW 324
// end ; 5 :
10254: GO 12385
10256: LD_INT 5
10258: DOUBLE
10259: EQUAL
10260: IFTRUE 10264
10262: GO 11377
10264: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10265: LD_INT 35
10267: PPUSH
10268: LD_VAR 0 3
10272: PPUSH
10273: LD_INT 1
10275: PPUSH
10276: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10280: LD_INT 45
10282: PPUSH
10283: LD_VAR 0 3
10287: PPUSH
10288: LD_INT 1
10290: PPUSH
10291: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10295: LD_INT 46
10297: PPUSH
10298: LD_VAR 0 3
10302: PPUSH
10303: LD_INT 1
10305: PPUSH
10306: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10310: LD_INT 47
10312: PPUSH
10313: LD_VAR 0 3
10317: PPUSH
10318: LD_INT 1
10320: PPUSH
10321: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10325: LD_INT 1
10327: PPUSH
10328: LD_VAR 0 3
10332: PPUSH
10333: LD_INT 1
10335: PPUSH
10336: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10340: LD_INT 2
10342: PPUSH
10343: LD_VAR 0 3
10347: PPUSH
10348: LD_INT 1
10350: PPUSH
10351: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10355: LD_INT 11
10357: PPUSH
10358: LD_VAR 0 3
10362: PPUSH
10363: LD_INT 1
10365: PPUSH
10366: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10370: LD_INT 20
10372: PPUSH
10373: LD_VAR 0 3
10377: PPUSH
10378: LD_INT 1
10380: PPUSH
10381: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10385: LD_INT 48
10387: PPUSH
10388: LD_VAR 0 3
10392: PPUSH
10393: LD_INT 1
10395: PPUSH
10396: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10400: LD_INT 49
10402: PPUSH
10403: LD_VAR 0 3
10407: PPUSH
10408: LD_INT 1
10410: PPUSH
10411: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10415: LD_INT 69
10417: PPUSH
10418: LD_VAR 0 3
10422: PPUSH
10423: LD_INT 1
10425: PPUSH
10426: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10430: LD_INT 39
10432: PPUSH
10433: LD_VAR 0 3
10437: PPUSH
10438: LD_INT 1
10440: PPUSH
10441: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10445: LD_INT 34
10447: PPUSH
10448: LD_VAR 0 3
10452: PPUSH
10453: LD_INT 1
10455: PPUSH
10456: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10460: LD_INT 42
10462: PPUSH
10463: LD_VAR 0 3
10467: PPUSH
10468: LD_INT 1
10470: PPUSH
10471: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10475: LD_INT 44
10477: PPUSH
10478: LD_VAR 0 3
10482: PPUSH
10483: LD_INT 1
10485: PPUSH
10486: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10490: LD_INT 41
10492: PPUSH
10493: LD_VAR 0 3
10497: PPUSH
10498: LD_INT 1
10500: PPUSH
10501: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
10505: LD_INT 40
10507: PPUSH
10508: LD_VAR 0 3
10512: PPUSH
10513: LD_INT 1
10515: PPUSH
10516: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10520: LD_INT 43
10522: PPUSH
10523: LD_VAR 0 3
10527: PPUSH
10528: LD_INT 1
10530: PPUSH
10531: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10535: LD_INT 70
10537: PPUSH
10538: LD_VAR 0 3
10542: PPUSH
10543: LD_INT 1
10545: PPUSH
10546: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10550: LD_INT 51
10552: PPUSH
10553: LD_VAR 0 3
10557: PPUSH
10558: LD_INT 1
10560: PPUSH
10561: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10565: LD_INT 52
10567: PPUSH
10568: LD_VAR 0 3
10572: PPUSH
10573: LD_INT 1
10575: PPUSH
10576: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10580: LD_INT 6
10582: PPUSH
10583: LD_VAR 0 3
10587: PPUSH
10588: LD_INT 1
10590: PPUSH
10591: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10595: LD_INT 15
10597: PPUSH
10598: LD_VAR 0 3
10602: PPUSH
10603: LD_INT 1
10605: PPUSH
10606: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10610: LD_INT 7
10612: PPUSH
10613: LD_VAR 0 3
10617: PPUSH
10618: LD_INT 1
10620: PPUSH
10621: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10625: LD_INT 12
10627: PPUSH
10628: LD_VAR 0 3
10632: PPUSH
10633: LD_INT 1
10635: PPUSH
10636: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
10640: LD_INT 17
10642: PPUSH
10643: LD_VAR 0 3
10647: PPUSH
10648: LD_INT 1
10650: PPUSH
10651: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10655: LD_INT 18
10657: PPUSH
10658: LD_VAR 0 3
10662: PPUSH
10663: LD_INT 1
10665: PPUSH
10666: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10670: LD_INT 60
10672: PPUSH
10673: LD_VAR 0 3
10677: PPUSH
10678: LD_INT 1
10680: PPUSH
10681: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
10685: LD_INT 32
10687: PPUSH
10688: LD_VAR 0 3
10692: PPUSH
10693: LD_INT 1
10695: PPUSH
10696: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10700: LD_INT 9
10702: PPUSH
10703: LD_VAR 0 3
10707: PPUSH
10708: LD_INT 1
10710: PPUSH
10711: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
10715: LD_INT 57
10717: PPUSH
10718: LD_VAR 0 3
10722: PPUSH
10723: LD_INT 1
10725: PPUSH
10726: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10730: LD_INT 30
10732: PPUSH
10733: LD_VAR 0 3
10737: PPUSH
10738: LD_INT 1
10740: PPUSH
10741: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10745: LD_INT 37
10747: PPUSH
10748: LD_VAR 0 3
10752: PPUSH
10753: LD_INT 1
10755: PPUSH
10756: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
10760: LD_INT 63
10762: PPUSH
10763: LD_VAR 0 3
10767: PPUSH
10768: LD_INT 1
10770: PPUSH
10771: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
10775: LD_INT 3
10777: PPUSH
10778: LD_VAR 0 3
10782: PPUSH
10783: LD_INT 1
10785: PPUSH
10786: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
10790: LD_INT 4
10792: PPUSH
10793: LD_VAR 0 3
10797: PPUSH
10798: LD_INT 1
10800: PPUSH
10801: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10805: LD_INT 5
10807: PPUSH
10808: LD_VAR 0 3
10812: PPUSH
10813: LD_INT 1
10815: PPUSH
10816: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10820: LD_INT 66
10822: PPUSH
10823: LD_VAR 0 3
10827: PPUSH
10828: LD_INT 1
10830: PPUSH
10831: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10835: LD_INT 21
10837: PPUSH
10838: LD_VAR 0 3
10842: PPUSH
10843: LD_INT 1
10845: PPUSH
10846: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10850: LD_INT 22
10852: PPUSH
10853: LD_VAR 0 3
10857: PPUSH
10858: LD_INT 1
10860: PPUSH
10861: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
10865: LD_INT 19
10867: PPUSH
10868: LD_VAR 0 3
10872: PPUSH
10873: LD_INT 1
10875: PPUSH
10876: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10880: LD_INT 54
10882: PPUSH
10883: LD_VAR 0 3
10887: PPUSH
10888: LD_INT 1
10890: PPUSH
10891: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
10895: LD_INT 55
10897: PPUSH
10898: LD_VAR 0 3
10902: PPUSH
10903: LD_INT 1
10905: PPUSH
10906: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10910: LD_INT 0
10912: PPUSH
10913: LD_VAR 0 3
10917: PPUSH
10918: LD_INT 1
10920: PPUSH
10921: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10925: LD_INT 1
10927: PPUSH
10928: LD_VAR 0 3
10932: PPUSH
10933: LD_INT 1
10935: PPUSH
10936: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10940: LD_INT 2
10942: PPUSH
10943: LD_VAR 0 3
10947: PPUSH
10948: LD_INT 1
10950: PPUSH
10951: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10955: LD_INT 3
10957: PPUSH
10958: LD_VAR 0 3
10962: PPUSH
10963: LD_INT 1
10965: PPUSH
10966: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10970: LD_INT 4
10972: PPUSH
10973: LD_VAR 0 3
10977: PPUSH
10978: LD_INT 1
10980: PPUSH
10981: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10985: LD_INT 5
10987: PPUSH
10988: LD_VAR 0 3
10992: PPUSH
10993: LD_INT 1
10995: PPUSH
10996: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11000: LD_INT 6
11002: PPUSH
11003: LD_VAR 0 3
11007: PPUSH
11008: LD_INT 1
11010: PPUSH
11011: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11015: LD_INT 7
11017: PPUSH
11018: LD_VAR 0 3
11022: PPUSH
11023: LD_INT 1
11025: PPUSH
11026: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11030: LD_INT 8
11032: PPUSH
11033: LD_VAR 0 3
11037: PPUSH
11038: LD_INT 1
11040: PPUSH
11041: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11045: LD_INT 10
11047: PPUSH
11048: LD_VAR 0 3
11052: PPUSH
11053: LD_INT 1
11055: PPUSH
11056: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11060: LD_INT 11
11062: PPUSH
11063: LD_VAR 0 3
11067: PPUSH
11068: LD_INT 1
11070: PPUSH
11071: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11075: LD_INT 12
11077: PPUSH
11078: LD_VAR 0 3
11082: PPUSH
11083: LD_INT 1
11085: PPUSH
11086: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11090: LD_INT 13
11092: PPUSH
11093: LD_VAR 0 3
11097: PPUSH
11098: LD_INT 1
11100: PPUSH
11101: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11105: LD_INT 14
11107: PPUSH
11108: LD_VAR 0 3
11112: PPUSH
11113: LD_INT 1
11115: PPUSH
11116: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11120: LD_INT 15
11122: PPUSH
11123: LD_VAR 0 3
11127: PPUSH
11128: LD_INT 1
11130: PPUSH
11131: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11135: LD_INT 16
11137: PPUSH
11138: LD_VAR 0 3
11142: PPUSH
11143: LD_INT 1
11145: PPUSH
11146: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11150: LD_INT 17
11152: PPUSH
11153: LD_VAR 0 3
11157: PPUSH
11158: LD_INT 1
11160: PPUSH
11161: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11165: LD_INT 18
11167: PPUSH
11168: LD_VAR 0 3
11172: PPUSH
11173: LD_INT 1
11175: PPUSH
11176: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11180: LD_INT 19
11182: PPUSH
11183: LD_VAR 0 3
11187: PPUSH
11188: LD_INT 1
11190: PPUSH
11191: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11195: LD_INT 20
11197: PPUSH
11198: LD_VAR 0 3
11202: PPUSH
11203: LD_INT 1
11205: PPUSH
11206: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11210: LD_INT 21
11212: PPUSH
11213: LD_VAR 0 3
11217: PPUSH
11218: LD_INT 1
11220: PPUSH
11221: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11225: LD_INT 23
11227: PPUSH
11228: LD_VAR 0 3
11232: PPUSH
11233: LD_INT 1
11235: PPUSH
11236: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11240: LD_INT 26
11242: PPUSH
11243: LD_VAR 0 3
11247: PPUSH
11248: LD_INT 1
11250: PPUSH
11251: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11255: LD_INT 27
11257: PPUSH
11258: LD_VAR 0 3
11262: PPUSH
11263: LD_INT 1
11265: PPUSH
11266: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11270: LD_INT 28
11272: PPUSH
11273: LD_VAR 0 3
11277: PPUSH
11278: LD_INT 1
11280: PPUSH
11281: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11285: LD_INT 29
11287: PPUSH
11288: LD_VAR 0 3
11292: PPUSH
11293: LD_INT 1
11295: PPUSH
11296: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11300: LD_INT 30
11302: PPUSH
11303: LD_VAR 0 3
11307: PPUSH
11308: LD_INT 1
11310: PPUSH
11311: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11315: LD_INT 31
11317: PPUSH
11318: LD_VAR 0 3
11322: PPUSH
11323: LD_INT 1
11325: PPUSH
11326: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11330: LD_INT 32
11332: PPUSH
11333: LD_VAR 0 3
11337: PPUSH
11338: LD_INT 1
11340: PPUSH
11341: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
11345: LD_INT 33
11347: PPUSH
11348: LD_VAR 0 3
11352: PPUSH
11353: LD_INT 1
11355: PPUSH
11356: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11360: LD_INT 36
11362: PPUSH
11363: LD_VAR 0 3
11367: PPUSH
11368: LD_INT 1
11370: PPUSH
11371: CALL_OW 324
// end ; 6 :
11375: GO 12385
11377: LD_INT 6
11379: DOUBLE
11380: EQUAL
11381: IFTRUE 11385
11383: GO 12310
11385: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11386: LD_INT 35
11388: PPUSH
11389: LD_VAR 0 3
11393: PPUSH
11394: LD_INT 1
11396: PPUSH
11397: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11401: LD_INT 45
11403: PPUSH
11404: LD_VAR 0 3
11408: PPUSH
11409: LD_INT 1
11411: PPUSH
11412: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11416: LD_INT 46
11418: PPUSH
11419: LD_VAR 0 3
11423: PPUSH
11424: LD_INT 1
11426: PPUSH
11427: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11431: LD_INT 47
11433: PPUSH
11434: LD_VAR 0 3
11438: PPUSH
11439: LD_INT 1
11441: PPUSH
11442: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11446: LD_INT 1
11448: PPUSH
11449: LD_VAR 0 3
11453: PPUSH
11454: LD_INT 1
11456: PPUSH
11457: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11461: LD_INT 2
11463: PPUSH
11464: LD_VAR 0 3
11468: PPUSH
11469: LD_INT 1
11471: PPUSH
11472: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11476: LD_INT 11
11478: PPUSH
11479: LD_VAR 0 3
11483: PPUSH
11484: LD_INT 1
11486: PPUSH
11487: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11491: LD_INT 20
11493: PPUSH
11494: LD_VAR 0 3
11498: PPUSH
11499: LD_INT 1
11501: PPUSH
11502: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11506: LD_INT 48
11508: PPUSH
11509: LD_VAR 0 3
11513: PPUSH
11514: LD_INT 1
11516: PPUSH
11517: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11521: LD_INT 49
11523: PPUSH
11524: LD_VAR 0 3
11528: PPUSH
11529: LD_INT 1
11531: PPUSH
11532: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
11536: LD_INT 50
11538: PPUSH
11539: LD_VAR 0 3
11543: PPUSH
11544: LD_INT 1
11546: PPUSH
11547: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11551: LD_INT 69
11553: PPUSH
11554: LD_VAR 0 3
11558: PPUSH
11559: LD_INT 1
11561: PPUSH
11562: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11566: LD_INT 39
11568: PPUSH
11569: LD_VAR 0 3
11573: PPUSH
11574: LD_INT 1
11576: PPUSH
11577: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11581: LD_INT 34
11583: PPUSH
11584: LD_VAR 0 3
11588: PPUSH
11589: LD_INT 1
11591: PPUSH
11592: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11596: LD_INT 42
11598: PPUSH
11599: LD_VAR 0 3
11603: PPUSH
11604: LD_INT 1
11606: PPUSH
11607: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11611: LD_INT 44
11613: PPUSH
11614: LD_VAR 0 3
11618: PPUSH
11619: LD_INT 1
11621: PPUSH
11622: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11626: LD_INT 41
11628: PPUSH
11629: LD_VAR 0 3
11633: PPUSH
11634: LD_INT 1
11636: PPUSH
11637: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
11641: LD_INT 13
11643: PPUSH
11644: LD_VAR 0 3
11648: PPUSH
11649: LD_INT 1
11651: PPUSH
11652: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11656: LD_INT 40
11658: PPUSH
11659: LD_VAR 0 3
11663: PPUSH
11664: LD_INT 1
11666: PPUSH
11667: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11671: LD_INT 43
11673: PPUSH
11674: LD_VAR 0 3
11678: PPUSH
11679: LD_INT 1
11681: PPUSH
11682: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11686: LD_INT 70
11688: PPUSH
11689: LD_VAR 0 3
11693: PPUSH
11694: LD_INT 1
11696: PPUSH
11697: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
11701: LD_INT 23
11703: PPUSH
11704: LD_VAR 0 3
11708: PPUSH
11709: LD_INT 1
11711: PPUSH
11712: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11716: LD_INT 51
11718: PPUSH
11719: LD_VAR 0 3
11723: PPUSH
11724: LD_INT 1
11726: PPUSH
11727: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11731: LD_INT 52
11733: PPUSH
11734: LD_VAR 0 3
11738: PPUSH
11739: LD_INT 1
11741: PPUSH
11742: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11746: LD_INT 6
11748: PPUSH
11749: LD_VAR 0 3
11753: PPUSH
11754: LD_INT 1
11756: PPUSH
11757: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11761: LD_INT 15
11763: PPUSH
11764: LD_VAR 0 3
11768: PPUSH
11769: LD_INT 1
11771: PPUSH
11772: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11776: LD_INT 7
11778: PPUSH
11779: LD_VAR 0 3
11783: PPUSH
11784: LD_INT 1
11786: PPUSH
11787: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11791: LD_INT 12
11793: PPUSH
11794: LD_VAR 0 3
11798: PPUSH
11799: LD_INT 1
11801: PPUSH
11802: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
11806: LD_INT 10
11808: PPUSH
11809: LD_VAR 0 3
11813: PPUSH
11814: LD_INT 1
11816: PPUSH
11817: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11821: LD_INT 17
11823: PPUSH
11824: LD_VAR 0 3
11828: PPUSH
11829: LD_INT 1
11831: PPUSH
11832: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11836: LD_INT 18
11838: PPUSH
11839: LD_VAR 0 3
11843: PPUSH
11844: LD_INT 1
11846: PPUSH
11847: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11851: LD_INT 60
11853: PPUSH
11854: LD_VAR 0 3
11858: PPUSH
11859: LD_INT 1
11861: PPUSH
11862: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
11866: LD_INT 61
11868: PPUSH
11869: LD_VAR 0 3
11873: PPUSH
11874: LD_INT 1
11876: PPUSH
11877: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11881: LD_INT 32
11883: PPUSH
11884: LD_VAR 0 3
11888: PPUSH
11889: LD_INT 1
11891: PPUSH
11892: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
11896: LD_INT 27
11898: PPUSH
11899: LD_VAR 0 3
11903: PPUSH
11904: LD_INT 1
11906: PPUSH
11907: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
11911: LD_INT 36
11913: PPUSH
11914: LD_VAR 0 3
11918: PPUSH
11919: LD_INT 1
11921: PPUSH
11922: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
11926: LD_INT 33
11928: PPUSH
11929: LD_VAR 0 3
11933: PPUSH
11934: LD_INT 1
11936: PPUSH
11937: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11941: LD_INT 9
11943: PPUSH
11944: LD_VAR 0 3
11948: PPUSH
11949: LD_INT 1
11951: PPUSH
11952: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
11956: LD_INT 38
11958: PPUSH
11959: LD_VAR 0 3
11963: PPUSH
11964: LD_INT 1
11966: PPUSH
11967: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11971: LD_INT 57
11973: PPUSH
11974: LD_VAR 0 3
11978: PPUSH
11979: LD_INT 1
11981: PPUSH
11982: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
11986: LD_INT 58
11988: PPUSH
11989: LD_VAR 0 3
11993: PPUSH
11994: LD_INT 1
11996: PPUSH
11997: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12001: LD_INT 28
12003: PPUSH
12004: LD_VAR 0 3
12008: PPUSH
12009: LD_INT 1
12011: PPUSH
12012: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12016: LD_INT 29
12018: PPUSH
12019: LD_VAR 0 3
12023: PPUSH
12024: LD_INT 1
12026: PPUSH
12027: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12031: LD_INT 30
12033: PPUSH
12034: LD_VAR 0 3
12038: PPUSH
12039: LD_INT 1
12041: PPUSH
12042: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12046: LD_INT 37
12048: PPUSH
12049: LD_VAR 0 3
12053: PPUSH
12054: LD_INT 1
12056: PPUSH
12057: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12061: LD_INT 63
12063: PPUSH
12064: LD_VAR 0 3
12068: PPUSH
12069: LD_INT 1
12071: PPUSH
12072: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12076: LD_INT 64
12078: PPUSH
12079: LD_VAR 0 3
12083: PPUSH
12084: LD_INT 1
12086: PPUSH
12087: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12091: LD_INT 3
12093: PPUSH
12094: LD_VAR 0 3
12098: PPUSH
12099: LD_INT 1
12101: PPUSH
12102: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12106: LD_INT 4
12108: PPUSH
12109: LD_VAR 0 3
12113: PPUSH
12114: LD_INT 1
12116: PPUSH
12117: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12121: LD_INT 5
12123: PPUSH
12124: LD_VAR 0 3
12128: PPUSH
12129: LD_INT 1
12131: PPUSH
12132: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12136: LD_INT 8
12138: PPUSH
12139: LD_VAR 0 3
12143: PPUSH
12144: LD_INT 1
12146: PPUSH
12147: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12151: LD_INT 66
12153: PPUSH
12154: LD_VAR 0 3
12158: PPUSH
12159: LD_INT 1
12161: PPUSH
12162: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12166: LD_INT 67
12168: PPUSH
12169: LD_VAR 0 3
12173: PPUSH
12174: LD_INT 1
12176: PPUSH
12177: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12181: LD_INT 21
12183: PPUSH
12184: LD_VAR 0 3
12188: PPUSH
12189: LD_INT 1
12191: PPUSH
12192: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12196: LD_INT 22
12198: PPUSH
12199: LD_VAR 0 3
12203: PPUSH
12204: LD_INT 1
12206: PPUSH
12207: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12211: LD_INT 19
12213: PPUSH
12214: LD_VAR 0 3
12218: PPUSH
12219: LD_INT 1
12221: PPUSH
12222: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12226: LD_INT 26
12228: PPUSH
12229: LD_VAR 0 3
12233: PPUSH
12234: LD_INT 1
12236: PPUSH
12237: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12241: LD_INT 54
12243: PPUSH
12244: LD_VAR 0 3
12248: PPUSH
12249: LD_INT 1
12251: PPUSH
12252: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12256: LD_INT 55
12258: PPUSH
12259: LD_VAR 0 3
12263: PPUSH
12264: LD_INT 1
12266: PPUSH
12267: CALL_OW 322
// for i = 0 to 39 do
12271: LD_ADDR_VAR 0 4
12275: PUSH
12276: DOUBLE
12277: LD_INT 0
12279: DEC
12280: ST_TO_ADDR
12281: LD_INT 39
12283: PUSH
12284: FOR_TO
12285: IFFALSE 12306
// SetRestrict ( i , side , true ) ;
12287: LD_VAR 0 4
12291: PPUSH
12292: LD_VAR 0 3
12296: PPUSH
12297: LD_INT 1
12299: PPUSH
12300: CALL_OW 324
12304: GO 12284
12306: POP
12307: POP
// end ; else
12308: GO 12385
12310: POP
// begin for i = 1 to 73 do
12311: LD_ADDR_VAR 0 4
12315: PUSH
12316: DOUBLE
12317: LD_INT 1
12319: DEC
12320: ST_TO_ADDR
12321: LD_INT 73
12323: PUSH
12324: FOR_TO
12325: IFFALSE 12346
// SetTech ( i , side , state_enabled ) ;
12327: LD_VAR 0 4
12331: PPUSH
12332: LD_VAR 0 3
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: CALL_OW 322
12344: GO 12324
12346: POP
12347: POP
// for i = 0 to 39 do
12348: LD_ADDR_VAR 0 4
12352: PUSH
12353: DOUBLE
12354: LD_INT 0
12356: DEC
12357: ST_TO_ADDR
12358: LD_INT 39
12360: PUSH
12361: FOR_TO
12362: IFFALSE 12383
// SetRestrict ( i , side , true ) ;
12364: LD_VAR 0 4
12368: PPUSH
12369: LD_VAR 0 3
12373: PPUSH
12374: LD_INT 1
12376: PPUSH
12377: CALL_OW 324
12381: GO 12361
12383: POP
12384: POP
// end ; end ; end ;
12385: GO 8390
12387: POP
12388: POP
// end ; end_of_file
12389: LD_VAR 0 2
12393: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
12394: LD_INT 0
12396: PPUSH
12397: PPUSH
12398: PPUSH
12399: PPUSH
12400: PPUSH
12401: PPUSH
12402: PPUSH
12403: PPUSH
12404: PPUSH
// for i := 1 to 8 do
12405: LD_ADDR_VAR 0 2
12409: PUSH
12410: DOUBLE
12411: LD_INT 1
12413: DEC
12414: ST_TO_ADDR
12415: LD_INT 8
12417: PUSH
12418: FOR_TO
12419: IFFALSE 12803
// begin if Side_Positions [ i ] then
12421: LD_EXP 32
12425: PUSH
12426: LD_VAR 0 2
12430: ARRAY
12431: IFFALSE 12801
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
12433: LD_ADDR_VAR 0 7
12437: PUSH
12438: LD_INT 22
12440: PUSH
12441: LD_VAR 0 2
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: LD_INT 21
12452: PUSH
12453: LD_INT 1
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PPUSH
12464: CALL_OW 69
12468: PUSH
12469: LD_INT 0
12471: PLUS
12472: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12473: LD_ADDR_VAR 0 9
12477: PUSH
12478: LD_INT 22
12480: PUSH
12481: LD_VAR 0 2
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: LD_INT 2
12492: PUSH
12493: LD_INT 30
12495: PUSH
12496: LD_INT 0
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PUSH
12503: LD_INT 30
12505: PUSH
12506: LD_INT 1
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: LIST
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PPUSH
12522: CALL_OW 69
12526: ST_TO_ADDR
// crates := 0 ;
12527: LD_ADDR_VAR 0 4
12531: PUSH
12532: LD_INT 0
12534: ST_TO_ADDR
// oil := 0 ;
12535: LD_ADDR_VAR 0 5
12539: PUSH
12540: LD_INT 0
12542: ST_TO_ADDR
// sib := 0 ;
12543: LD_ADDR_VAR 0 6
12547: PUSH
12548: LD_INT 0
12550: ST_TO_ADDR
// if bases then
12551: LD_VAR 0 9
12555: IFFALSE 12661
// begin for j in bases do
12557: LD_ADDR_VAR 0 3
12561: PUSH
12562: LD_VAR 0 9
12566: PUSH
12567: FOR_IN
12568: IFFALSE 12659
// begin base := GetBase ( j ) ;
12570: LD_ADDR_VAR 0 8
12574: PUSH
12575: LD_VAR 0 3
12579: PPUSH
12580: CALL_OW 274
12584: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
12585: LD_ADDR_VAR 0 4
12589: PUSH
12590: LD_VAR 0 4
12594: PUSH
12595: LD_VAR 0 8
12599: PPUSH
12600: LD_INT 1
12602: PPUSH
12603: CALL_OW 275
12607: PLUS
12608: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
12609: LD_ADDR_VAR 0 5
12613: PUSH
12614: LD_VAR 0 5
12618: PUSH
12619: LD_VAR 0 8
12623: PPUSH
12624: LD_INT 2
12626: PPUSH
12627: CALL_OW 275
12631: PLUS
12632: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
12633: LD_ADDR_VAR 0 6
12637: PUSH
12638: LD_VAR 0 6
12642: PUSH
12643: LD_VAR 0 8
12647: PPUSH
12648: LD_INT 3
12650: PPUSH
12651: CALL_OW 275
12655: PLUS
12656: ST_TO_ADDR
// end ;
12657: GO 12567
12659: POP
12660: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
12661: LD_STRING setSpecText(
12663: PUSH
12664: LD_VAR 0 2
12668: STR
12669: PUSH
12670: LD_STRING ,
12672: STR
12673: PUSH
12674: LD_INT 2
12676: STR
12677: PUSH
12678: LD_STRING ,
12680: STR
12681: PUSH
12682: LD_VAR 0 4
12686: STR
12687: PUSH
12688: LD_STRING )
12690: STR
12691: PPUSH
12692: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
12696: LD_STRING setSpecText(
12698: PUSH
12699: LD_VAR 0 2
12703: STR
12704: PUSH
12705: LD_STRING ,
12707: STR
12708: PUSH
12709: LD_INT 3
12711: STR
12712: PUSH
12713: LD_STRING ,
12715: STR
12716: PUSH
12717: LD_VAR 0 5
12721: STR
12722: PUSH
12723: LD_STRING )
12725: STR
12726: PPUSH
12727: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
12731: LD_STRING setSpecText(
12733: PUSH
12734: LD_VAR 0 2
12738: STR
12739: PUSH
12740: LD_STRING ,
12742: STR
12743: PUSH
12744: LD_INT 4
12746: STR
12747: PUSH
12748: LD_STRING ,
12750: STR
12751: PUSH
12752: LD_VAR 0 6
12756: STR
12757: PUSH
12758: LD_STRING )
12760: STR
12761: PPUSH
12762: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
12766: LD_STRING setSpecText(
12768: PUSH
12769: LD_VAR 0 2
12773: STR
12774: PUSH
12775: LD_STRING ,
12777: STR
12778: PUSH
12779: LD_INT 5
12781: STR
12782: PUSH
12783: LD_STRING ,
12785: STR
12786: PUSH
12787: LD_VAR 0 7
12791: STR
12792: PUSH
12793: LD_STRING )
12795: STR
12796: PPUSH
12797: CALL_OW 559
// end ; end ;
12801: GO 12418
12803: POP
12804: POP
// end ;
12805: LD_VAR 0 1
12809: RET
// every 0 0$1 do
12810: GO 12812
12812: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
12813: LD_STRING setSpecLogoNumber(
12815: PUSH
12816: LD_INT 2
12818: STR
12819: PUSH
12820: LD_STRING ,
12822: STR
12823: PUSH
12824: LD_INT 1
12826: STR
12827: PUSH
12828: LD_STRING )
12830: STR
12831: PPUSH
12832: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
12836: LD_STRING setSpecLogoNumber(
12838: PUSH
12839: LD_INT 3
12841: STR
12842: PUSH
12843: LD_STRING ,
12845: STR
12846: PUSH
12847: LD_INT 2
12849: STR
12850: PUSH
12851: LD_STRING )
12853: STR
12854: PPUSH
12855: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
12859: LD_STRING setSpecLogoNumber(
12861: PUSH
12862: LD_INT 4
12864: STR
12865: PUSH
12866: LD_STRING ,
12868: STR
12869: PUSH
12870: LD_INT 3
12872: STR
12873: PUSH
12874: LD_STRING )
12876: STR
12877: PPUSH
12878: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
12882: LD_STRING setSpecLogoNumber(
12884: PUSH
12885: LD_INT 5
12887: STR
12888: PUSH
12889: LD_STRING ,
12891: STR
12892: PUSH
12893: LD_INT 4
12895: STR
12896: PUSH
12897: LD_STRING )
12899: STR
12900: PPUSH
12901: CALL_OW 559
// end ;
12905: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
12906: LD_INT 2
12908: PUSH
12909: LD_INT 30
12911: PUSH
12912: LD_INT 0
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PUSH
12919: LD_INT 30
12921: PUSH
12922: LD_INT 1
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: PPUSH
12934: CALL_OW 69
12938: IFFALSE 12948
12940: GO 12942
12942: DISABLE
// begin enable ;
12943: ENABLE
// UpdateSpectatorBar ;
12944: CALL 12394 0 0
// end ; end_of_file
12948: END
// var respawn , inqueue ; export function init_respawning ; begin
12949: LD_INT 0
12951: PPUSH
// respawn := Rand ( 1 , 8 ) ;
12952: LD_ADDR_LOC 18
12956: PUSH
12957: LD_INT 1
12959: PPUSH
12960: LD_INT 8
12962: PPUSH
12963: CALL_OW 12
12967: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12968: LD_ADDR_LOC 19
12972: PUSH
12973: LD_INT 0
12975: PUSH
12976: LD_INT 0
12978: PUSH
12979: LD_INT 0
12981: PUSH
12982: LD_INT 0
12984: PUSH
12985: LD_INT 0
12987: PUSH
12988: LD_INT 0
12990: PUSH
12991: LD_INT 0
12993: PUSH
12994: LD_INT 0
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: ST_TO_ADDR
// end ;
13007: LD_VAR 0 1
13011: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13012: GO 13014
13014: DISABLE
13015: LD_INT 0
13017: PPUSH
13018: PPUSH
13019: PPUSH
// begin if respawning_time_max = 0 then
13020: LD_EXP 26
13024: PUSH
13025: LD_INT 0
13027: EQUAL
13028: IFFALSE 13032
// exit ;
13030: GO 13440
// if respawn = 8 then
13032: LD_LOC 18
13036: PUSH
13037: LD_INT 8
13039: EQUAL
13040: IFFALSE 13052
// respawn := 1 else
13042: LD_ADDR_LOC 18
13046: PUSH
13047: LD_INT 1
13049: ST_TO_ADDR
13050: GO 13066
// respawn := respawn + 1 ;
13052: LD_ADDR_LOC 18
13056: PUSH
13057: LD_LOC 18
13061: PUSH
13062: LD_INT 1
13064: PLUS
13065: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
13066: LD_EXP 32
13070: PUSH
13071: LD_LOC 18
13075: ARRAY
13076: PUSH
13077: LD_LOC 19
13081: PUSH
13082: LD_LOC 18
13086: ARRAY
13087: NOT
13088: AND
13089: IFFALSE 13439
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
13091: LD_ADDR_VAR 0 1
13095: PUSH
13096: LD_INT 21
13098: PUSH
13099: LD_INT 1
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 22
13108: PUSH
13109: LD_LOC 18
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PUSH
13118: LD_INT 3
13120: PUSH
13121: LD_INT 23
13123: PUSH
13124: LD_INT 0
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: PPUSH
13137: CALL_OW 69
13141: ST_TO_ADDR
// if n < number_of_people then
13142: LD_VAR 0 1
13146: PUSH
13147: LD_EXP 19
13151: LESS
13152: IFFALSE 13436
// begin aktresp := respawn ;
13154: LD_ADDR_VAR 0 3
13158: PUSH
13159: LD_LOC 18
13163: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
13164: LD_ADDR_LOC 19
13168: PUSH
13169: LD_LOC 19
13173: PPUSH
13174: LD_VAR 0 3
13178: PPUSH
13179: LD_INT 1
13181: PPUSH
13182: CALL_OW 1
13186: ST_TO_ADDR
// enable ;
13187: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
13188: LD_EXP 25
13192: PPUSH
13193: LD_EXP 26
13197: PPUSH
13198: CALL_OW 12
13202: PPUSH
13203: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
13207: LD_ADDR_LOC 19
13211: PUSH
13212: LD_LOC 19
13216: PPUSH
13217: LD_VAR 0 3
13221: PPUSH
13222: LD_INT 0
13224: PPUSH
13225: CALL_OW 1
13229: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
13230: LD_ADDR_VAR 0 2
13234: PUSH
13235: LD_INT 21
13237: PUSH
13238: LD_INT 3
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: LD_INT 30
13250: PUSH
13251: LD_INT 0
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 30
13260: PUSH
13261: LD_INT 1
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: LIST
13272: PUSH
13273: LD_INT 50
13275: PUSH
13276: EMPTY
13277: LIST
13278: PUSH
13279: LD_INT 22
13281: PUSH
13282: LD_VAR 0 3
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: PPUSH
13297: CALL_OW 69
13301: ST_TO_ADDR
// if dep = 0 then
13302: LD_VAR 0 2
13306: PUSH
13307: LD_INT 0
13309: EQUAL
13310: IFFALSE 13314
// exit ;
13312: GO 13440
// hc_name :=  ;
13314: LD_ADDR_OWVAR 26
13318: PUSH
13319: LD_STRING 
13321: ST_TO_ADDR
// hc_importance := 0 ;
13322: LD_ADDR_OWVAR 32
13326: PUSH
13327: LD_INT 0
13329: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
13330: LD_INT 0
13332: PPUSH
13333: LD_INT 0
13335: PPUSH
13336: LD_EXP 20
13340: PUSH
13341: LD_INT 2
13343: DIV
13344: PPUSH
13345: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
13349: LD_ADDR_OWVAR 21
13353: PUSH
13354: LD_EXP 33
13358: PUSH
13359: LD_VAR 0 3
13363: ARRAY
13364: ST_TO_ADDR
// uc_side := aktresp ;
13365: LD_ADDR_OWVAR 20
13369: PUSH
13370: LD_VAR 0 3
13374: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
13375: LD_ADDR_VAR 0 2
13379: PUSH
13380: LD_VAR 0 2
13384: PUSH
13385: LD_INT 1
13387: PPUSH
13388: LD_VAR 0 2
13392: PPUSH
13393: CALL_OW 12
13397: ARRAY
13398: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
13399: CALL_OW 44
13403: PPUSH
13404: LD_VAR 0 2
13408: PPUSH
13409: CALL_OW 250
13413: PPUSH
13414: LD_VAR 0 2
13418: PPUSH
13419: CALL_OW 251
13423: PPUSH
13424: LD_INT 7
13426: PPUSH
13427: LD_INT 1
13429: PPUSH
13430: CALL_OW 50
// end else
13434: GO 13437
// enable ;
13436: ENABLE
// end else
13437: GO 13440
// enable ;
13439: ENABLE
// end ; end_of_file
13440: PPOPN 3
13442: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
13443: LD_INT 0
13445: PPUSH
13446: PPUSH
13447: PPUSH
// BuildUpTime_Delay = 0 ;
13448: LD_ADDR_EXP 56
13452: PUSH
13453: LD_INT 0
13455: ST_TO_ADDR
// if not def_builduptime then
13456: LD_EXP 14
13460: NOT
13461: IFFALSE 13465
// exit ;
13463: GO 13648
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
13465: LD_ADDR_EXP 56
13469: PUSH
13470: LD_INT 8400
13472: PUSH
13473: LD_INT 2100
13475: PUSH
13476: LD_EXP 14
13480: MUL
13481: PLUS
13482: ST_TO_ADDR
// BuildUpTimeActive := true ;
13483: LD_ADDR_EXP 55
13487: PUSH
13488: LD_INT 1
13490: ST_TO_ADDR
// for i := 1 to 8 do
13491: LD_ADDR_VAR 0 2
13495: PUSH
13496: DOUBLE
13497: LD_INT 1
13499: DEC
13500: ST_TO_ADDR
13501: LD_INT 8
13503: PUSH
13504: FOR_TO
13505: IFFALSE 13646
// if Side_Positions [ i ] then
13507: LD_EXP 32
13511: PUSH
13512: LD_VAR 0 2
13516: ARRAY
13517: IFFALSE 13644
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
13519: LD_EXP 54
13523: PUSH
13524: LD_EXP 32
13528: PUSH
13529: LD_VAR 0 2
13533: ARRAY
13534: ARRAY
13535: PPUSH
13536: LD_INT 5
13538: PPUSH
13539: CALL_OW 424
// for j := 1 to 8 do
13543: LD_ADDR_VAR 0 3
13547: PUSH
13548: DOUBLE
13549: LD_INT 1
13551: DEC
13552: ST_TO_ADDR
13553: LD_INT 8
13555: PUSH
13556: FOR_TO
13557: IFFALSE 13642
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13559: LD_EXP 32
13563: PUSH
13564: LD_VAR 0 3
13568: ARRAY
13569: PUSH
13570: LD_EXP 30
13574: PUSH
13575: LD_VAR 0 2
13579: ARRAY
13580: PUSH
13581: LD_EXP 30
13585: PUSH
13586: LD_VAR 0 3
13590: ARRAY
13591: NONEQUAL
13592: PUSH
13593: LD_EXP 34
13597: NOT
13598: PUSH
13599: LD_VAR 0 2
13603: PUSH
13604: LD_VAR 0 3
13608: NONEQUAL
13609: AND
13610: OR
13611: AND
13612: IFFALSE 13640
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13614: LD_VAR 0 3
13618: PPUSH
13619: LD_EXP 54
13623: PUSH
13624: LD_EXP 32
13628: PUSH
13629: LD_VAR 0 2
13633: ARRAY
13634: ARRAY
13635: PPUSH
13636: CALL_OW 333
13640: GO 13556
13642: POP
13643: POP
// end ;
13644: GO 13504
13646: POP
13647: POP
// end ;
13648: LD_VAR 0 1
13652: RET
// export function EndBuildUp ; var i , j ; begin
13653: LD_INT 0
13655: PPUSH
13656: PPUSH
13657: PPUSH
// BuildUpTimeActive := false ;
13658: LD_ADDR_EXP 55
13662: PUSH
13663: LD_INT 0
13665: ST_TO_ADDR
// for i := 1 to 8 do
13666: LD_ADDR_VAR 0 2
13670: PUSH
13671: DOUBLE
13672: LD_INT 1
13674: DEC
13675: ST_TO_ADDR
13676: LD_INT 8
13678: PUSH
13679: FOR_TO
13680: IFFALSE 13821
// if Side_Positions [ i ] then
13682: LD_EXP 32
13686: PUSH
13687: LD_VAR 0 2
13691: ARRAY
13692: IFFALSE 13819
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
13694: LD_EXP 54
13698: PUSH
13699: LD_EXP 32
13703: PUSH
13704: LD_VAR 0 2
13708: ARRAY
13709: ARRAY
13710: PPUSH
13711: LD_INT 0
13713: PPUSH
13714: CALL_OW 424
// for j := 1 to 8 do
13718: LD_ADDR_VAR 0 3
13722: PUSH
13723: DOUBLE
13724: LD_INT 1
13726: DEC
13727: ST_TO_ADDR
13728: LD_INT 8
13730: PUSH
13731: FOR_TO
13732: IFFALSE 13817
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13734: LD_EXP 32
13738: PUSH
13739: LD_VAR 0 3
13743: ARRAY
13744: PUSH
13745: LD_EXP 30
13749: PUSH
13750: LD_VAR 0 2
13754: ARRAY
13755: PUSH
13756: LD_EXP 30
13760: PUSH
13761: LD_VAR 0 3
13765: ARRAY
13766: NONEQUAL
13767: PUSH
13768: LD_EXP 34
13772: NOT
13773: PUSH
13774: LD_VAR 0 2
13778: PUSH
13779: LD_VAR 0 3
13783: NONEQUAL
13784: AND
13785: OR
13786: AND
13787: IFFALSE 13815
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13789: LD_VAR 0 3
13793: PPUSH
13794: LD_EXP 54
13798: PUSH
13799: LD_EXP 32
13803: PUSH
13804: LD_VAR 0 2
13808: ARRAY
13809: ARRAY
13810: PPUSH
13811: CALL_OW 334
13815: GO 13731
13817: POP
13818: POP
// end ;
13819: GO 13679
13821: POP
13822: POP
// end ;
13823: LD_VAR 0 1
13827: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
13828: LD_EXP 55
13832: IFFALSE 14007
13834: GO 13836
13836: DISABLE
13837: LD_INT 0
13839: PPUSH
13840: PPUSH
// begin for i := 1 to 8 do
13841: LD_ADDR_VAR 0 1
13845: PUSH
13846: DOUBLE
13847: LD_INT 1
13849: DEC
13850: ST_TO_ADDR
13851: LD_INT 8
13853: PUSH
13854: FOR_TO
13855: IFFALSE 14004
// if Side_Positions [ i ] then
13857: LD_EXP 32
13861: PUSH
13862: LD_VAR 0 1
13866: ARRAY
13867: IFFALSE 14002
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13869: LD_ADDR_VAR 0 2
13873: PUSH
13874: LD_EXP 54
13878: PUSH
13879: LD_EXP 32
13883: PUSH
13884: LD_VAR 0 1
13888: ARRAY
13889: ARRAY
13890: PPUSH
13891: LD_INT 2
13893: PUSH
13894: LD_INT 21
13896: PUSH
13897: LD_INT 1
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PUSH
13904: LD_INT 21
13906: PUSH
13907: LD_INT 2
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: LIST
13918: PUSH
13919: LD_INT 22
13921: PUSH
13922: LD_OWVAR 2
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PPUSH
13935: CALL_OW 70
13939: PUSH
13940: FOR_IN
13941: IFFALSE 14000
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
13943: LD_EXP 30
13947: PUSH
13948: LD_VAR 0 1
13952: ARRAY
13953: PUSH
13954: LD_EXP 30
13958: PUSH
13959: LD_OWVAR 2
13963: ARRAY
13964: NONEQUAL
13965: PUSH
13966: LD_EXP 34
13970: NOT
13971: PUSH
13972: LD_VAR 0 1
13976: PUSH
13977: LD_OWVAR 2
13981: NONEQUAL
13982: AND
13983: OR
13984: IFFALSE 13998
// ComMoveToArea ( un , BuildUpEscape ) ;
13986: LD_VAR 0 2
13990: PPUSH
13991: LD_INT 12
13993: PPUSH
13994: CALL_OW 113
13998: GO 13940
14000: POP
14001: POP
14002: GO 13854
14004: POP
14005: POP
// enable ;
14006: ENABLE
// end ;
14007: PPOPN 2
14009: END
// every 0 0$1 trigger def_builduptime do
14010: LD_EXP 14
14014: IFFALSE 14040
14016: GO 14018
14018: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14019: LD_INT 8400
14021: PUSH
14022: LD_EXP 14
14026: PUSH
14027: LD_INT 2100
14029: MUL
14030: PLUS
14031: PPUSH
14032: CALL_OW 67
// EndBuildUp ;
14036: CALL 13653 0 0
// end ;
14040: END
