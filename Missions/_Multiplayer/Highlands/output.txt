// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , amount_of_apemen , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , extra_sib_deposits_locations , normal_oil_deposits_locations , normal_sib_deposits_locations , battle_flags_id , Side_Comps ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function init_map ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// normal_oil_deposits_locations := [ [ 65 , 49 ] , [ 157 , 62 ] , [ 192 , 143 ] , [ 109 , 147 ] ] ;
   4: LD_ADDR_EXP 40
   8: PUSH
   9: LD_INT 65
  11: PUSH
  12: LD_INT 49
  14: PUSH
  15: EMPTY
  16: LIST
  17: LIST
  18: PUSH
  19: LD_INT 157
  21: PUSH
  22: LD_INT 62
  24: PUSH
  25: EMPTY
  26: LIST
  27: LIST
  28: PUSH
  29: LD_INT 192
  31: PUSH
  32: LD_INT 143
  34: PUSH
  35: EMPTY
  36: LIST
  37: LIST
  38: PUSH
  39: LD_INT 109
  41: PUSH
  42: LD_INT 147
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: EMPTY
  50: LIST
  51: LIST
  52: LIST
  53: LIST
  54: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 22 , 33 ] , [ 179 , 43 ] , [ 228 , 151 ] , [ 83 , 154 ] ] ;
  55: LD_ADDR_EXP 38
  59: PUSH
  60: LD_INT 22
  62: PUSH
  63: LD_INT 33
  65: PUSH
  66: EMPTY
  67: LIST
  68: LIST
  69: PUSH
  70: LD_INT 179
  72: PUSH
  73: LD_INT 43
  75: PUSH
  76: EMPTY
  77: LIST
  78: LIST
  79: PUSH
  80: LD_INT 228
  82: PUSH
  83: LD_INT 151
  85: PUSH
  86: EMPTY
  87: LIST
  88: LIST
  89: PUSH
  90: LD_INT 83
  92: PUSH
  93: LD_INT 154
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: PUSH
 100: EMPTY
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 39 , 18 ] , [ 138 , 27 ] , [ 222 , 157 ] , [ 82 , 115 ] ] ;
 106: LD_ADDR_EXP 41
 110: PUSH
 111: LD_INT 39
 113: PUSH
 114: LD_INT 18
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: PUSH
 121: LD_INT 138
 123: PUSH
 124: LD_INT 27
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: PUSH
 131: LD_INT 222
 133: PUSH
 134: LD_INT 157
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: PUSH
 141: LD_INT 82
 143: PUSH
 144: LD_INT 115
 146: PUSH
 147: EMPTY
 148: LIST
 149: LIST
 150: PUSH
 151: EMPTY
 152: LIST
 153: LIST
 154: LIST
 155: LIST
 156: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 35 , 55 ] , [ 188 , 70 ] , [ 214 , 123 ] , [ 66 , 120 ] ] ;
 157: LD_ADDR_EXP 39
 161: PUSH
 162: LD_INT 35
 164: PUSH
 165: LD_INT 55
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: PUSH
 172: LD_INT 188
 174: PUSH
 175: LD_INT 70
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: LD_INT 214
 184: PUSH
 185: LD_INT 123
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: LD_INT 66
 194: PUSH
 195: LD_INT 120
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: LIST
 206: LIST
 207: ST_TO_ADDR
// depot_def := [ [ 54 , 45 , 3 ] , [ 161 , 55 , 5 ] , [ 98 , 142 , 4 ] , [ 194 , 133 , 1 ] ] ;
 208: LD_ADDR_EXP 35
 212: PUSH
 213: LD_INT 54
 215: PUSH
 216: LD_INT 45
 218: PUSH
 219: LD_INT 3
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: PUSH
 227: LD_INT 161
 229: PUSH
 230: LD_INT 55
 232: PUSH
 233: LD_INT 5
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_INT 98
 243: PUSH
 244: LD_INT 142
 246: PUSH
 247: LD_INT 4
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: LIST
 254: PUSH
 255: LD_INT 194
 257: PUSH
 258: LD_INT 133
 260: PUSH
 261: LD_INT 1
 263: PUSH
 264: EMPTY
 265: LIST
 266: LIST
 267: LIST
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: LIST
 274: ST_TO_ADDR
// start_def := [ [ 53 , 52 ] , [ 152 , 45 ] , [ 91 , 140 ] , [ 200 , 132 ] ] ;
 275: LD_ADDR_EXP 37
 279: PUSH
 280: LD_INT 53
 282: PUSH
 283: LD_INT 52
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 152
 292: PUSH
 293: LD_INT 45
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: LD_INT 91
 302: PUSH
 303: LD_INT 140
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 200
 312: PUSH
 313: LD_INT 132
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: LIST
 324: LIST
 325: ST_TO_ADDR
// breastworks_def := [ [ [ 76 , 75 , 5 ] , [ 72 , 34 , 4 ] , [ 81 , 60 , 5 ] , [ 31 , 31 , 2 ] ] , [ [ 170 , 79 , 5 ] , [ 139 , 42 , 1 ] , [ 171 , 58 , 4 ] , [ 149 , 25 , 3 ] ] , [ [ 114 , 163 , 5 ] , [ 114 , 138 , 4 ] , [ 97 , 116 , 3 ] , [ 81 , 135 , 1 ] ] , [ [ 179 , 116 , 2 ] , [ 175 , 145 , 1 ] , [ 217 , 149 , 4 ] , [ 202 , 158 , 0 ] ] ] ;
 326: LD_ADDR_EXP 36
 330: PUSH
 331: LD_INT 76
 333: PUSH
 334: LD_INT 75
 336: PUSH
 337: LD_INT 5
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 72
 347: PUSH
 348: LD_INT 34
 350: PUSH
 351: LD_INT 4
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 81
 361: PUSH
 362: LD_INT 60
 364: PUSH
 365: LD_INT 5
 367: PUSH
 368: EMPTY
 369: LIST
 370: LIST
 371: LIST
 372: PUSH
 373: LD_INT 31
 375: PUSH
 376: LD_INT 31
 378: PUSH
 379: LD_INT 2
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: LIST
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: LIST
 391: LIST
 392: PUSH
 393: LD_INT 170
 395: PUSH
 396: LD_INT 79
 398: PUSH
 399: LD_INT 5
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 139
 409: PUSH
 410: LD_INT 42
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: PUSH
 421: LD_INT 171
 423: PUSH
 424: LD_INT 58
 426: PUSH
 427: LD_INT 4
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 149
 437: PUSH
 438: LD_INT 25
 440: PUSH
 441: LD_INT 3
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 114
 457: PUSH
 458: LD_INT 163
 460: PUSH
 461: LD_INT 5
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 114
 471: PUSH
 472: LD_INT 138
 474: PUSH
 475: LD_INT 4
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: PUSH
 483: LD_INT 97
 485: PUSH
 486: LD_INT 116
 488: PUSH
 489: LD_INT 3
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: LIST
 496: PUSH
 497: LD_INT 81
 499: PUSH
 500: LD_INT 135
 502: PUSH
 503: LD_INT 1
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 179
 519: PUSH
 520: LD_INT 116
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 175
 533: PUSH
 534: LD_INT 145
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 217
 547: PUSH
 548: LD_INT 149
 550: PUSH
 551: LD_INT 4
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 202
 561: PUSH
 562: LD_INT 158
 564: PUSH
 565: LD_INT 0
 567: PUSH
 568: EMPTY
 569: LIST
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: ST_TO_ADDR
// for i in normal_oil_deposits_locations do
 585: LD_ADDR_VAR 0 2
 589: PUSH
 590: LD_EXP 40
 594: PUSH
 595: FOR_IN
 596: IFFALSE 625
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 598: LD_VAR 0 2
 602: PUSH
 603: LD_INT 1
 605: ARRAY
 606: PPUSH
 607: LD_VAR 0 2
 611: PUSH
 612: LD_INT 2
 614: ARRAY
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: CALL_OW 62
 623: GO 595
 625: POP
 626: POP
// if def_extra_oil_deposits then
 627: LD_EXP 6
 631: IFFALSE 675
// for i in extra_oil_deposits_locations do
 633: LD_ADDR_VAR 0 2
 637: PUSH
 638: LD_EXP 38
 642: PUSH
 643: FOR_IN
 644: IFFALSE 673
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
 646: LD_VAR 0 2
 650: PUSH
 651: LD_INT 1
 653: ARRAY
 654: PPUSH
 655: LD_VAR 0 2
 659: PUSH
 660: LD_INT 2
 662: ARRAY
 663: PPUSH
 664: LD_INT 2
 666: PPUSH
 667: CALL_OW 62
 671: GO 643
 673: POP
 674: POP
// if def_extra_sib_deposits > 0 then
 675: LD_EXP 7
 679: PUSH
 680: LD_INT 0
 682: GREATER
 683: IFFALSE 779
// begin for i in normal_sib_deposits_locations do
 685: LD_ADDR_VAR 0 2
 689: PUSH
 690: LD_EXP 41
 694: PUSH
 695: FOR_IN
 696: IFFALSE 725
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 698: LD_VAR 0 2
 702: PUSH
 703: LD_INT 1
 705: ARRAY
 706: PPUSH
 707: LD_VAR 0 2
 711: PUSH
 712: LD_INT 2
 714: ARRAY
 715: PPUSH
 716: LD_INT 3
 718: PPUSH
 719: CALL_OW 62
 723: GO 695
 725: POP
 726: POP
// if def_extra_sib_deposits = 2 then
 727: LD_EXP 7
 731: PUSH
 732: LD_INT 2
 734: EQUAL
 735: IFFALSE 779
// for i in extra_sib_deposits_locations do
 737: LD_ADDR_VAR 0 2
 741: PUSH
 742: LD_EXP 39
 746: PUSH
 747: FOR_IN
 748: IFFALSE 777
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_siberit ) ;
 750: LD_VAR 0 2
 754: PUSH
 755: LD_INT 1
 757: ARRAY
 758: PPUSH
 759: LD_VAR 0 2
 763: PUSH
 764: LD_INT 2
 766: ARRAY
 767: PPUSH
 768: LD_INT 3
 770: PPUSH
 771: CALL_OW 62
 775: GO 747
 777: POP
 778: POP
// end ; end ;
 779: LD_VAR 0 1
 783: RET
// function read_multiplayer_and_game_parameters ; var side , dep , br1 , br2 , br3 , un , i , tech_level ; begin
 784: LD_INT 0
 786: PPUSH
 787: PPUSH
 788: PPUSH
 789: PPUSH
 790: PPUSH
 791: PPUSH
 792: PPUSH
 793: PPUSH
 794: PPUSH
// if MultiPlayer then
 795: LD_OWVAR 4
 799: IFFALSE 863
// begin Game_Type = mp_game_type ;
 801: LD_ADDR_EXP 16
 805: PUSH
 806: LD_OWVAR 6
 810: ST_TO_ADDR
// Your_Side = mp_player_side ;
 811: LD_ADDR_OWVAR 2
 815: PUSH
 816: LD_OWVAR 7
 820: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
 821: LD_ADDR_EXP 32
 825: PUSH
 826: LD_OWVAR 17
 830: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
 831: LD_ADDR_EXP 30
 835: PUSH
 836: LD_OWVAR 15
 840: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
 841: LD_ADDR_EXP 33
 845: PUSH
 846: LD_OWVAR 16
 850: ST_TO_ADDR
// Teams = mp_teams ;
 851: LD_ADDR_EXP 31
 855: PUSH
 856: LD_OWVAR 12
 860: ST_TO_ADDR
// end else
 861: GO 1064
// begin Game_Type = 2 ;
 863: LD_ADDR_EXP 16
 867: PUSH
 868: LD_INT 2
 870: ST_TO_ADDR
// Your_Side = 4 ;
 871: LD_ADDR_OWVAR 2
 875: PUSH
 876: LD_INT 4
 878: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 879: LD_ADDR_EXP 32
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: LD_INT 3
 889: PUSH
 890: LD_INT 0
 892: PUSH
 893: LD_INT 1
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: LD_INT 2
 901: PUSH
 902: LD_INT 4
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 918: LD_ADDR_EXP 30
 922: PUSH
 923: LD_INT 0
 925: PUSH
 926: LD_INT 1
 928: PUSH
 929: LD_INT 0
 931: PUSH
 932: LD_INT 2
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 2
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: LIST
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 2 , 0 , 1 , 3 , 0 ] ;
 957: LD_ADDR_EXP 33
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: LD_INT 3
 967: PUSH
 968: LD_INT 0
 970: PUSH
 971: LD_INT 2
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: LD_INT 1
 979: PUSH
 980: LD_INT 3
 982: PUSH
 983: LD_INT 0
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 996: LD_ADDR_EXP 43
1000: PUSH
1001: LD_INT 0
1003: PUSH
1004: LD_INT 0
1006: PUSH
1007: LD_INT 0
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: LD_INT 0
1015: PUSH
1016: LD_INT 0
1018: PUSH
1019: LD_INT 0
1021: PUSH
1022: LD_INT 0
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: ST_TO_ADDR
// Teams = [ [ 2 , 6 ] , [ 4 , 7 ] ] ;
1035: LD_ADDR_EXP 31
1039: PUSH
1040: LD_INT 2
1042: PUSH
1043: LD_INT 6
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: PUSH
1050: LD_INT 4
1052: PUSH
1053: LD_INT 7
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: ST_TO_ADDR
// end ; if MultiPlayer then
1064: LD_OWVAR 4
1068: IFFALSE 1267
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
1070: LD_ADDR_EXP 1
1074: PUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 426
1082: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
1083: LD_ADDR_EXP 2
1087: PUSH
1088: LD_INT 1
1090: PPUSH
1091: CALL_OW 426
1095: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
1096: LD_ADDR_EXP 3
1100: PUSH
1101: LD_INT 2
1103: PPUSH
1104: CALL_OW 426
1108: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
1109: LD_ADDR_EXP 4
1113: PUSH
1114: LD_INT 3
1116: PPUSH
1117: CALL_OW 426
1121: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
1122: LD_ADDR_EXP 5
1126: PUSH
1127: LD_INT 4
1129: PPUSH
1130: CALL_OW 426
1134: ST_TO_ADDR
// def_extra_oil_deposits = GetMultiplayerSetting ( 5 ) ;
1135: LD_ADDR_EXP 6
1139: PUSH
1140: LD_INT 5
1142: PPUSH
1143: CALL_OW 426
1147: ST_TO_ADDR
// def_extra_sib_deposits = GetMultiplayerSetting ( 6 ) ;
1148: LD_ADDR_EXP 7
1152: PUSH
1153: LD_INT 6
1155: PPUSH
1156: CALL_OW 426
1160: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
1161: LD_ADDR_EXP 8
1165: PUSH
1166: LD_INT 10
1168: PPUSH
1169: CALL_OW 426
1173: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
1174: LD_ADDR_EXP 9
1178: PUSH
1179: LD_INT 11
1181: PPUSH
1182: CALL_OW 426
1186: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
1187: LD_ADDR_EXP 10
1191: PUSH
1192: LD_INT 12
1194: PPUSH
1195: CALL_OW 426
1199: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
1200: LD_ADDR_EXP 11
1204: PUSH
1205: LD_INT 13
1207: PPUSH
1208: CALL_OW 426
1212: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
1213: LD_ADDR_EXP 12
1217: PUSH
1218: LD_INT 14
1220: PPUSH
1221: CALL_OW 426
1225: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
1226: LD_ADDR_EXP 13
1230: PUSH
1231: LD_INT 15
1233: PPUSH
1234: CALL_OW 426
1238: ST_TO_ADDR
// def_builduptime = GetMultiplayerSetting ( 20 ) ;
1239: LD_ADDR_EXP 14
1243: PUSH
1244: LD_INT 20
1246: PPUSH
1247: CALL_OW 426
1251: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
1252: LD_ADDR_VAR 0 9
1256: PUSH
1257: LD_INT 22
1259: PPUSH
1260: CALL_OW 426
1264: ST_TO_ADDR
// end else
1265: GO 1391
// begin randomize ;
1267: CALL_OW 10
// def_base_level = 2 ;
1271: LD_ADDR_EXP 1
1275: PUSH
1276: LD_INT 2
1278: ST_TO_ADDR
// def_amount_of_people = 1 ;
1279: LD_ADDR_EXP 2
1283: PUSH
1284: LD_INT 1
1286: ST_TO_ADDR
// def_skill_level = 1 ;
1287: LD_ADDR_EXP 3
1291: PUSH
1292: LD_INT 1
1294: ST_TO_ADDR
// def_starting_resources = 2 ;
1295: LD_ADDR_EXP 4
1299: PUSH
1300: LD_INT 2
1302: ST_TO_ADDR
// def_shipments_density = 50 ;
1303: LD_ADDR_EXP 5
1307: PUSH
1308: LD_INT 50
1310: ST_TO_ADDR
// def_extra_oil_deposits = 1 ;
1311: LD_ADDR_EXP 6
1315: PUSH
1316: LD_INT 1
1318: ST_TO_ADDR
// def_extra_sib_deposits = 1 ;
1319: LD_ADDR_EXP 7
1323: PUSH
1324: LD_INT 1
1326: ST_TO_ADDR
// def_shared_vision = 1 ;
1327: LD_ADDR_EXP 8
1331: PUSH
1332: LD_INT 1
1334: ST_TO_ADDR
// def_morale_flags = 2 ;
1335: LD_ADDR_EXP 9
1339: PUSH
1340: LD_INT 2
1342: ST_TO_ADDR
// def_siberite_detection = 1 ;
1343: LD_ADDR_EXP 10
1347: PUSH
1348: LD_INT 1
1350: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
1351: LD_ADDR_EXP 11
1355: PUSH
1356: LD_INT 3
1358: ST_TO_ADDR
// def_people_respawning = 2 ;
1359: LD_ADDR_EXP 12
1363: PUSH
1364: LD_INT 2
1366: ST_TO_ADDR
// def_siberite_bomb = 2 ;
1367: LD_ADDR_EXP 13
1371: PUSH
1372: LD_INT 2
1374: ST_TO_ADDR
// def_builduptime = 1 ;
1375: LD_ADDR_EXP 14
1379: PUSH
1380: LD_INT 1
1382: ST_TO_ADDR
// tech_level = 4 ;
1383: LD_ADDR_VAR 0 9
1387: PUSH
1388: LD_INT 4
1390: ST_TO_ADDR
// end ; if isSGUI then
1391: LD_OWVAR 83
1395: IFFALSE 1403
// setMpTechs ( ) else
1397: CALL 7624 0 0
1401: GO 1416
// SetMpTechLevel ( tech_level + 1 ) ;
1403: LD_VAR 0 9
1407: PUSH
1408: LD_INT 1
1410: PLUS
1411: PPUSH
1412: CALL 7771 0 1
// is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1416: LD_ADDR_EXP 17
1420: PUSH
1421: LD_INT 0
1423: PUSH
1424: LD_INT 1
1426: PUSH
1427: LD_INT 1
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: PUSH
1439: LD_EXP 1
1443: PUSH
1444: LD_INT 1
1446: PLUS
1447: ARRAY
1448: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1449: LD_ADDR_EXP 18
1453: PUSH
1454: LD_INT 0
1456: PUSH
1457: LD_INT 0
1459: PUSH
1460: LD_INT 2
1462: PUSH
1463: LD_INT 4
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_EXP 1
1476: PUSH
1477: LD_INT 1
1479: PLUS
1480: ARRAY
1481: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1482: LD_ADDR_EXP 20
1486: PUSH
1487: LD_INT 2
1489: PUSH
1490: LD_INT 3
1492: PUSH
1493: LD_INT 4
1495: PUSH
1496: LD_INT 5
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: PUSH
1505: LD_EXP 3
1509: PUSH
1510: LD_INT 1
1512: PLUS
1513: ARRAY
1514: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1515: LD_ADDR_EXP 22
1519: PUSH
1520: LD_INT 0
1522: PUSH
1523: LD_INT 0
1525: PUSH
1526: LD_INT 0
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: LIST
1533: PUSH
1534: LD_INT 30
1536: PUSH
1537: LD_INT 0
1539: PUSH
1540: LD_INT 0
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 50
1550: PUSH
1551: LD_INT 20
1553: PUSH
1554: LD_INT 0
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: LIST
1561: PUSH
1562: LD_INT 80
1564: PUSH
1565: LD_INT 40
1567: PUSH
1568: LD_INT 20
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: PUSH
1582: LD_EXP 4
1586: PUSH
1587: LD_INT 1
1589: PLUS
1590: ARRAY
1591: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1592: LD_ADDR_EXP 21
1596: PUSH
1597: LD_INT 10
1599: PUSH
1600: EMPTY
1601: LIST
1602: PUSH
1603: LD_INT 7
1605: PUSH
1606: LD_INT 14
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: PUSH
1613: LD_INT 6
1615: PUSH
1616: LD_INT 12
1618: PUSH
1619: LD_INT 18
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: LD_INT 10
1632: PUSH
1633: LD_INT 15
1635: PUSH
1636: LD_INT 20
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: PUSH
1651: LD_EXP 4
1655: PUSH
1656: LD_INT 1
1658: PLUS
1659: ARRAY
1660: ST_TO_ADDR
// number_of_people = def_amount_of_people + 4 ;
1661: LD_ADDR_EXP 19
1665: PUSH
1666: LD_EXP 2
1670: PUSH
1671: LD_INT 4
1673: PLUS
1674: ST_TO_ADDR
// shipments_density = 150 - ( def_shipments_density + 1 ) ;
1675: LD_ADDR_EXP 23
1679: PUSH
1680: LD_INT 150
1682: PUSH
1683: LD_EXP 5
1687: PUSH
1688: LD_INT 1
1690: PLUS
1691: MINUS
1692: ST_TO_ADDR
// amount_of_apemen = [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1693: LD_ADDR_EXP 27
1697: PUSH
1698: LD_INT 0
1700: PUSH
1701: LD_INT 3
1703: PUSH
1704: LD_INT 6
1706: PUSH
1707: LD_INT 9
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: PUSH
1716: LD_EXP 11
1720: PUSH
1721: LD_INT 1
1723: PLUS
1724: ARRAY
1725: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1726: LD_ADDR_EXP 25
1730: PUSH
1731: LD_INT 0
1733: PUSH
1734: LD_INT 8400
1736: PUSH
1737: LD_INT 1750
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: LIST
1744: PUSH
1745: LD_EXP 12
1749: PUSH
1750: LD_INT 1
1752: PLUS
1753: ARRAY
1754: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1755: LD_ADDR_EXP 26
1759: PUSH
1760: LD_INT 0
1762: PUSH
1763: LD_INT 21000
1765: PUSH
1766: LD_INT 4200
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: PUSH
1774: LD_EXP 12
1778: PUSH
1779: LD_INT 1
1781: PLUS
1782: ARRAY
1783: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1784: LD_ADDR_EXP 24
1788: PUSH
1789: LD_INT 1
1791: NEG
1792: PUSH
1793: LD_INT 350
1795: PUSH
1796: LD_INT 700
1798: PUSH
1799: LD_INT 1400
1801: PUSH
1802: LD_INT 0
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: PUSH
1812: LD_EXP 9
1816: PUSH
1817: LD_INT 1
1819: PLUS
1820: ARRAY
1821: ST_TO_ADDR
// battle_flags_id = [ ] ;
1822: LD_ADDR_EXP 42
1826: PUSH
1827: EMPTY
1828: ST_TO_ADDR
// siberite_bomb_Delay = [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1829: LD_ADDR_EXP 28
1833: PUSH
1834: LD_INT 0
1836: PUSH
1837: LD_INT 1
1839: PUSH
1840: LD_INT 63000
1842: PUSH
1843: LD_INT 126000
1845: PUSH
1846: LD_INT 189000
1848: PUSH
1849: LD_INT 252000
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: PUSH
1860: LD_EXP 13
1864: PUSH
1865: LD_INT 1
1867: PLUS
1868: ARRAY
1869: ST_TO_ADDR
// end ;
1870: LD_VAR 0 1
1874: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1875: LD_INT 0
1877: PPUSH
1878: PPUSH
1879: PPUSH
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
1880: LD_ADDR_EXP 34
1884: PUSH
1885: LD_EXP 30
1889: PUSH
1890: LD_INT 0
1892: PUSH
1893: EMPTY
1894: LIST
1895: DIFF
1896: PUSH
1897: LD_INT 1
1899: GREATER
1900: ST_TO_ADDR
// if not Team_Game then
1901: LD_EXP 34
1905: NOT
1906: IFFALSE 2004
// begin for i = 1 to 8 do
1908: LD_ADDR_VAR 0 2
1912: PUSH
1913: DOUBLE
1914: LD_INT 1
1916: DEC
1917: ST_TO_ADDR
1918: LD_INT 8
1920: PUSH
1921: FOR_TO
1922: IFFALSE 2000
// for j = 1 to 8 do
1924: LD_ADDR_VAR 0 3
1928: PUSH
1929: DOUBLE
1930: LD_INT 1
1932: DEC
1933: ST_TO_ADDR
1934: LD_INT 8
1936: PUSH
1937: FOR_TO
1938: IFFALSE 1996
// if i <> j then
1940: LD_VAR 0 2
1944: PUSH
1945: LD_VAR 0 3
1949: NONEQUAL
1950: IFFALSE 1974
// SetAttitude ( i , j , att_neutral , true ) else
1952: LD_VAR 0 2
1956: PPUSH
1957: LD_VAR 0 3
1961: PPUSH
1962: LD_INT 0
1964: PPUSH
1965: LD_INT 1
1967: PPUSH
1968: CALL_OW 80
1972: GO 1994
// SetAttitude ( i , j , att_friend , true ) ;
1974: LD_VAR 0 2
1978: PPUSH
1979: LD_VAR 0 3
1983: PPUSH
1984: LD_INT 1
1986: PPUSH
1987: LD_INT 1
1989: PPUSH
1990: CALL_OW 80
1994: GO 1937
1996: POP
1997: POP
1998: GO 1921
2000: POP
2001: POP
// end else
2002: GO 2179
// begin if def_shared_vision then
2004: LD_EXP 8
2008: IFFALSE 2073
// begin for i in Teams do
2010: LD_ADDR_VAR 0 2
2014: PUSH
2015: LD_EXP 31
2019: PUSH
2020: FOR_IN
2021: IFFALSE 2071
// for j = 2 to i do
2023: LD_ADDR_VAR 0 3
2027: PUSH
2028: DOUBLE
2029: LD_INT 2
2031: DEC
2032: ST_TO_ADDR
2033: LD_VAR 0 2
2037: PUSH
2038: FOR_TO
2039: IFFALSE 2067
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2041: LD_VAR 0 2
2045: PUSH
2046: LD_VAR 0 3
2050: ARRAY
2051: PPUSH
2052: LD_VAR 0 2
2056: PUSH
2057: LD_INT 1
2059: ARRAY
2060: PPUSH
2061: CALL_OW 343
2065: GO 2038
2067: POP
2068: POP
2069: GO 2020
2071: POP
2072: POP
// end ; for i = 1 to 8 do
2073: LD_ADDR_VAR 0 2
2077: PUSH
2078: DOUBLE
2079: LD_INT 1
2081: DEC
2082: ST_TO_ADDR
2083: LD_INT 8
2085: PUSH
2086: FOR_TO
2087: IFFALSE 2177
// for j = 1 to 8 do
2089: LD_ADDR_VAR 0 3
2093: PUSH
2094: DOUBLE
2095: LD_INT 1
2097: DEC
2098: ST_TO_ADDR
2099: LD_INT 8
2101: PUSH
2102: FOR_TO
2103: IFFALSE 2173
// if Side_Teams [ i ] = Side_Teams [ j ] then
2105: LD_EXP 30
2109: PUSH
2110: LD_VAR 0 2
2114: ARRAY
2115: PUSH
2116: LD_EXP 30
2120: PUSH
2121: LD_VAR 0 3
2125: ARRAY
2126: EQUAL
2127: IFFALSE 2151
// SetAttitude ( i , j , att_friend , true ) else
2129: LD_VAR 0 2
2133: PPUSH
2134: LD_VAR 0 3
2138: PPUSH
2139: LD_INT 1
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: CALL_OW 80
2149: GO 2171
// SetAttitude ( i , j , att_enemy , true ) ;
2151: LD_VAR 0 2
2155: PPUSH
2156: LD_VAR 0 3
2160: PPUSH
2161: LD_INT 2
2163: PPUSH
2164: LD_INT 1
2166: PPUSH
2167: CALL_OW 80
2171: GO 2102
2173: POP
2174: POP
2175: GO 2086
2177: POP
2178: POP
// end ; end ;
2179: LD_VAR 0 1
2183: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2184: LD_INT 0
2186: PPUSH
2187: PPUSH
2188: PPUSH
2189: PPUSH
// result := [ ] ;
2190: LD_ADDR_VAR 0 7
2194: PUSH
2195: EMPTY
2196: ST_TO_ADDR
// for i := 1 to count do
2197: LD_ADDR_VAR 0 8
2201: PUSH
2202: DOUBLE
2203: LD_INT 1
2205: DEC
2206: ST_TO_ADDR
2207: LD_VAR 0 1
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2631
// begin uc_direction := Rand ( 0 , 5 ) ;
2215: LD_ADDR_OWVAR 24
2219: PUSH
2220: LD_INT 0
2222: PPUSH
2223: LD_INT 5
2225: PPUSH
2226: CALL_OW 12
2230: ST_TO_ADDR
// if commander then
2231: LD_LOC 1
2235: IFFALSE 2344
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2237: LD_ADDR_OWVAR 26
2241: PUSH
2242: LD_OWVAR 19
2246: PUSH
2247: LD_OWVAR 20
2251: ARRAY
2252: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2253: LD_INT 1
2255: PPUSH
2256: LD_INT 2
2258: PPUSH
2259: CALL_OW 12
2263: PPUSH
2264: LD_VAR 0 2
2268: PPUSH
2269: LD_EXP 20
2273: PUSH
2274: LD_INT 2
2276: PLUS
2277: PPUSH
2278: CALL_OW 380
// hc_importance := 105 ;
2282: LD_ADDR_OWVAR 32
2286: PUSH
2287: LD_INT 105
2289: ST_TO_ADDR
// commander := false ;
2290: LD_ADDR_LOC 1
2294: PUSH
2295: LD_INT 0
2297: ST_TO_ADDR
// if Multiplayer then
2298: LD_OWVAR 4
2302: IFFALSE 2342
// begin hc_gallery := MULTIAVATARS ;
2304: LD_ADDR_OWVAR 33
2308: PUSH
2309: LD_STRING MULTIAVATARS
2311: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2312: LD_ADDR_OWVAR 34
2316: PUSH
2317: LD_OWVAR 20
2321: PPUSH
2322: CALL_OW 525
2326: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2327: LD_ADDR_OWVAR 27
2331: PUSH
2332: LD_OWVAR 20
2336: PPUSH
2337: CALL_OW 526
2341: ST_TO_ADDR
// end ; end else
2342: GO 2407
// begin hc_name :=  ;
2344: LD_ADDR_OWVAR 26
2348: PUSH
2349: LD_STRING 
2351: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2352: LD_INT 1
2354: PPUSH
2355: LD_INT 2
2357: PPUSH
2358: CALL_OW 12
2362: PPUSH
2363: LD_VAR 0 2
2367: PPUSH
2368: LD_EXP 20
2372: PPUSH
2373: CALL_OW 380
// hc_importance := 0 ;
2377: LD_ADDR_OWVAR 32
2381: PUSH
2382: LD_INT 0
2384: ST_TO_ADDR
// if Multiplayer then
2385: LD_OWVAR 4
2389: IFFALSE 2407
// begin hc_gallery :=  ;
2391: LD_ADDR_OWVAR 33
2395: PUSH
2396: LD_STRING 
2398: ST_TO_ADDR
// hc_face_number := 0 ;
2399: LD_ADDR_OWVAR 34
2403: PUSH
2404: LD_INT 0
2406: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2407: LD_ADDR_VAR 0 10
2411: PUSH
2412: CALL_OW 44
2416: ST_TO_ADDR
// if global_defined then
2417: LD_LOC 3
2421: IFFALSE 2561
// begin if ( cl = class_soldier ) then
2423: LD_VAR 0 2
2427: PUSH
2428: LD_INT 1
2430: EQUAL
2431: IFFALSE 2451
// j := i + soldiers_created else
2433: LD_ADDR_VAR 0 9
2437: PUSH
2438: LD_VAR 0 8
2442: PUSH
2443: LD_LOC 4
2447: PLUS
2448: ST_TO_ADDR
2449: GO 2461
// j := i ;
2451: LD_ADDR_VAR 0 9
2455: PUSH
2456: LD_VAR 0 8
2460: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2461: LD_LOC 2
2465: PUSH
2466: LD_VAR 0 2
2470: ARRAY
2471: PUSH
2472: LD_VAR 0 9
2476: ARRAY
2477: PPUSH
2478: LD_VAR 0 10
2482: PPUSH
2483: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2487: LD_VAR 0 10
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: LD_LOC 2
2499: PUSH
2500: LD_VAR 0 2
2504: ARRAY
2505: PUSH
2506: LD_VAR 0 9
2510: ARRAY
2511: PPUSH
2512: LD_INT 2
2514: PPUSH
2515: CALL_OW 260
2519: PPUSH
2520: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2524: LD_VAR 0 10
2528: PPUSH
2529: LD_INT 1
2531: PPUSH
2532: LD_LOC 2
2536: PUSH
2537: LD_VAR 0 2
2541: ARRAY
2542: PUSH
2543: LD_VAR 0 9
2547: ARRAY
2548: PPUSH
2549: LD_INT 1
2551: PPUSH
2552: CALL_OW 260
2556: PPUSH
2557: CALL_OW 239
// end ; if building then
2561: LD_VAR 0 6
2565: IFFALSE 2583
// PlaceHumanInUnit ( un , building ) else
2567: LD_VAR 0 10
2571: PPUSH
2572: LD_VAR 0 6
2576: PPUSH
2577: CALL_OW 52
2581: GO 2610
// PlaceUnitXYR ( un , x , y , r , false ) ;
2583: LD_VAR 0 10
2587: PPUSH
2588: LD_VAR 0 3
2592: PPUSH
2593: LD_VAR 0 4
2597: PPUSH
2598: LD_VAR 0 5
2602: PPUSH
2603: LD_INT 0
2605: PPUSH
2606: CALL_OW 50
// result := result ^ [ un ] ;
2610: LD_ADDR_VAR 0 7
2614: PUSH
2615: LD_VAR 0 7
2619: PUSH
2620: LD_VAR 0 10
2624: PUSH
2625: EMPTY
2626: LIST
2627: ADD
2628: ST_TO_ADDR
// end ;
2629: GO 2212
2631: POP
2632: POP
// if not global_defined then
2633: LD_LOC 3
2637: NOT
2638: IFFALSE 2716
// if ( global_units >= cl ) then
2640: LD_LOC 2
2644: PUSH
2645: LD_VAR 0 2
2649: GREATEREQUAL
2650: IFFALSE 2691
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2652: LD_ADDR_LOC 2
2656: PUSH
2657: LD_LOC 2
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: LD_LOC 2
2671: PUSH
2672: LD_VAR 0 2
2676: ARRAY
2677: PUSH
2678: LD_VAR 0 7
2682: ADD
2683: PPUSH
2684: CALL_OW 1
2688: ST_TO_ADDR
2689: GO 2716
// global_units := Replace ( global_units , cl , result ) ;
2691: LD_ADDR_LOC 2
2695: PUSH
2696: LD_LOC 2
2700: PPUSH
2701: LD_VAR 0 2
2705: PPUSH
2706: LD_VAR 0 7
2710: PPUSH
2711: CALL_OW 1
2715: ST_TO_ADDR
// end ;
2716: LD_VAR 0 7
2720: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2721: LD_INT 0
2723: PPUSH
2724: PPUSH
2725: PPUSH
2726: PPUSH
2727: PPUSH
2728: PPUSH
2729: PPUSH
2730: PPUSH
2731: PPUSH
// pos := Side_Positions [ side ] ;
2732: LD_ADDR_VAR 0 3
2736: PUSH
2737: LD_EXP 32
2741: PUSH
2742: LD_VAR 0 1
2746: ARRAY
2747: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2748: LD_ADDR_OWVAR 21
2752: PUSH
2753: LD_EXP 33
2757: PUSH
2758: LD_VAR 0 1
2762: ARRAY
2763: ST_TO_ADDR
// uc_side := side ;
2764: LD_ADDR_OWVAR 20
2768: PUSH
2769: LD_VAR 0 1
2773: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2774: LD_ADDR_VAR 0 4
2778: PUSH
2779: LD_EXP 35
2783: PUSH
2784: LD_VAR 0 3
2788: ARRAY
2789: PUSH
2790: LD_INT 1
2792: ARRAY
2793: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2794: LD_ADDR_VAR 0 5
2798: PUSH
2799: LD_EXP 35
2803: PUSH
2804: LD_VAR 0 3
2808: ARRAY
2809: PUSH
2810: LD_INT 2
2812: ARRAY
2813: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2814: LD_ADDR_VAR 0 6
2818: PUSH
2819: LD_EXP 35
2823: PUSH
2824: LD_VAR 0 3
2828: ARRAY
2829: PUSH
2830: LD_INT 3
2832: ARRAY
2833: ST_TO_ADDR
// if is_depot then
2834: LD_EXP 17
2838: IFFALSE 2971
// begin bc_type = b_depot ;
2840: LD_ADDR_OWVAR 42
2844: PUSH
2845: LD_INT 0
2847: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2848: LD_ADDR_VAR 0 10
2852: PUSH
2853: LD_VAR 0 4
2857: PPUSH
2858: LD_VAR 0 5
2862: PPUSH
2863: LD_VAR 0 6
2867: PPUSH
2868: CALL_OW 47
2872: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2873: LD_VAR 0 10
2877: PPUSH
2878: LD_STRING @
2880: PUSH
2881: LD_VAR 0 1
2885: STR
2886: PPUSH
2887: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2891: LD_VAR 0 10
2895: PPUSH
2896: CALL_OW 274
2900: PPUSH
2901: LD_INT 1
2903: PPUSH
2904: LD_EXP 22
2908: PUSH
2909: LD_INT 1
2911: ARRAY
2912: PPUSH
2913: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2917: LD_VAR 0 10
2921: PPUSH
2922: CALL_OW 274
2926: PPUSH
2927: LD_INT 2
2929: PPUSH
2930: LD_EXP 22
2934: PUSH
2935: LD_INT 2
2937: ARRAY
2938: PPUSH
2939: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2943: LD_VAR 0 10
2947: PPUSH
2948: CALL_OW 274
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_EXP 22
2960: PUSH
2961: LD_INT 3
2963: ARRAY
2964: PPUSH
2965: CALL_OW 277
// end else
2969: GO 3115
// begin for i := 1 to 3 do
2971: LD_ADDR_VAR 0 7
2975: PUSH
2976: DOUBLE
2977: LD_INT 1
2979: DEC
2980: ST_TO_ADDR
2981: LD_INT 3
2983: PUSH
2984: FOR_TO
2985: IFFALSE 3113
// begin r := starting_resources [ i ] ;
2987: LD_ADDR_VAR 0 8
2991: PUSH
2992: LD_EXP 22
2996: PUSH
2997: LD_VAR 0 7
3001: ARRAY
3002: ST_TO_ADDR
// while r >= 10 do
3003: LD_VAR 0 8
3007: PUSH
3008: LD_INT 10
3010: GREATEREQUAL
3011: IFFALSE 3111
// if r > 50 then
3013: LD_VAR 0 8
3017: PUSH
3018: LD_INT 50
3020: GREATER
3021: IFFALSE 3067
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: LD_VAR 0 4
3035: PPUSH
3036: LD_VAR 0 5
3040: PPUSH
3041: LD_INT 4
3043: PPUSH
3044: LD_INT 0
3046: PPUSH
3047: CALL_OW 60
// r := r - 50 ;
3051: LD_ADDR_VAR 0 8
3055: PUSH
3056: LD_VAR 0 8
3060: PUSH
3061: LD_INT 50
3063: MINUS
3064: ST_TO_ADDR
// end else
3065: GO 3109
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3067: LD_VAR 0 7
3071: PPUSH
3072: LD_VAR 0 8
3076: PUSH
3077: LD_INT 10
3079: DIV
3080: PPUSH
3081: LD_VAR 0 4
3085: PPUSH
3086: LD_VAR 0 5
3090: PPUSH
3091: LD_INT 4
3093: PPUSH
3094: LD_INT 0
3096: PPUSH
3097: CALL_OW 60
// r := 0 ;
3101: LD_ADDR_VAR 0 8
3105: PUSH
3106: LD_INT 0
3108: ST_TO_ADDR
// end ;
3109: GO 3003
// end ;
3111: GO 2984
3113: POP
3114: POP
// end ; for r in starting_crates do
3115: LD_ADDR_VAR 0 8
3119: PUSH
3120: LD_EXP 21
3124: PUSH
3125: FOR_IN
3126: IFFALSE 3158
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3128: LD_INT 1
3130: PPUSH
3131: LD_INT 5
3133: PPUSH
3134: LD_VAR 0 4
3138: PPUSH
3139: LD_VAR 0 5
3143: PPUSH
3144: LD_VAR 0 8
3148: PPUSH
3149: LD_INT 0
3151: PPUSH
3152: CALL_OW 60
3156: GO 3125
3158: POP
3159: POP
// if def_morale_flags then
3160: LD_EXP 9
3164: IFFALSE 3303
// begin x := start_def [ pos ] [ 1 ] ;
3166: LD_ADDR_VAR 0 4
3170: PUSH
3171: LD_EXP 37
3175: PUSH
3176: LD_VAR 0 3
3180: ARRAY
3181: PUSH
3182: LD_INT 1
3184: ARRAY
3185: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3186: LD_ADDR_VAR 0 5
3190: PUSH
3191: LD_EXP 37
3195: PUSH
3196: LD_VAR 0 3
3200: ARRAY
3201: PUSH
3202: LD_INT 2
3204: ARRAY
3205: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3206: LD_VAR 0 4
3210: PPUSH
3211: LD_VAR 0 5
3215: PPUSH
3216: LD_INT 12
3218: PPUSH
3219: LD_INT 2
3221: PPUSH
3222: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3226: LD_ADDR_EXP 42
3230: PUSH
3231: LD_EXP 42
3235: PUSH
3236: LD_VAR 0 1
3240: PPUSH
3241: LD_VAR 0 4
3245: PPUSH
3246: LD_VAR 0 5
3250: PPUSH
3251: LD_INT 1
3253: PUSH
3254: LD_INT 100
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: LD_INT 2
3263: PUSH
3264: LD_INT 50
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 3
3273: PUSH
3274: LD_INT 20
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 20
3283: PUSH
3284: LD_INT 100
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: PPUSH
3297: CALL_OW 418
3301: ADD
3302: ST_TO_ADDR
// end ; commander := true ;
3303: LD_ADDR_LOC 1
3307: PUSH
3308: LD_INT 1
3310: ST_TO_ADDR
// soldiers_created := 0 ;
3311: LD_ADDR_LOC 4
3315: PUSH
3316: LD_INT 0
3318: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3319: LD_ADDR_VAR 0 7
3323: PUSH
3324: DOUBLE
3325: LD_INT 1
3327: DEC
3328: ST_TO_ADDR
3329: LD_EXP 18
3333: PUSH
3334: FOR_TO
3335: IFFALSE 3488
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3337: LD_ADDR_VAR 0 4
3341: PUSH
3342: LD_EXP 36
3346: PUSH
3347: LD_VAR 0 3
3351: ARRAY
3352: PUSH
3353: LD_VAR 0 7
3357: ARRAY
3358: PUSH
3359: LD_INT 1
3361: ARRAY
3362: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3363: LD_ADDR_VAR 0 5
3367: PUSH
3368: LD_EXP 36
3372: PUSH
3373: LD_VAR 0 3
3377: ARRAY
3378: PUSH
3379: LD_VAR 0 7
3383: ARRAY
3384: PUSH
3385: LD_INT 2
3387: ARRAY
3388: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3389: LD_ADDR_VAR 0 6
3393: PUSH
3394: LD_EXP 36
3398: PUSH
3399: LD_VAR 0 3
3403: ARRAY
3404: PUSH
3405: LD_VAR 0 7
3409: ARRAY
3410: PUSH
3411: LD_INT 3
3413: ARRAY
3414: ST_TO_ADDR
// bc_type := b_breastwork ;
3415: LD_ADDR_OWVAR 42
3419: PUSH
3420: LD_INT 31
3422: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3423: LD_ADDR_VAR 0 9
3427: PUSH
3428: LD_VAR 0 4
3432: PPUSH
3433: LD_VAR 0 5
3437: PPUSH
3438: LD_VAR 0 6
3442: PPUSH
3443: CALL_OW 47
3447: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3448: LD_INT 1
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 0
3459: PPUSH
3460: LD_INT 0
3462: PPUSH
3463: LD_VAR 0 9
3467: PPUSH
3468: CALL 2184 0 6
// soldiers_created := soldiers_created + 1 ;
3472: LD_ADDR_LOC 4
3476: PUSH
3477: LD_LOC 4
3481: PUSH
3482: LD_INT 1
3484: PLUS
3485: ST_TO_ADDR
// end ;
3486: GO 3334
3488: POP
3489: POP
// x := start_def [ pos ] [ 1 ] ;
3490: LD_ADDR_VAR 0 4
3494: PUSH
3495: LD_EXP 37
3499: PUSH
3500: LD_VAR 0 3
3504: ARRAY
3505: PUSH
3506: LD_INT 1
3508: ARRAY
3509: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3510: LD_ADDR_VAR 0 5
3514: PUSH
3515: LD_EXP 37
3519: PUSH
3520: LD_VAR 0 3
3524: ARRAY
3525: PUSH
3526: LD_INT 2
3528: ARRAY
3529: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3530: LD_LOC 8
3534: PUSH
3535: LD_EXP 18
3539: MINUS
3540: PPUSH
3541: LD_INT 1
3543: PPUSH
3544: LD_VAR 0 4
3548: PPUSH
3549: LD_VAR 0 5
3553: PPUSH
3554: LD_INT 5
3556: PPUSH
3557: LD_INT 0
3559: PPUSH
3560: CALL 2184 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3564: LD_LOC 5
3568: PPUSH
3569: LD_INT 2
3571: PPUSH
3572: LD_VAR 0 4
3576: PPUSH
3577: LD_VAR 0 5
3581: PPUSH
3582: LD_INT 5
3584: PPUSH
3585: LD_INT 0
3587: PPUSH
3588: CALL 2184 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3592: LD_LOC 7
3596: PPUSH
3597: LD_INT 3
3599: PPUSH
3600: LD_VAR 0 4
3604: PPUSH
3605: LD_VAR 0 5
3609: PPUSH
3610: LD_INT 5
3612: PPUSH
3613: LD_INT 0
3615: PPUSH
3616: CALL 2184 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3620: LD_LOC 6
3624: PPUSH
3625: LD_INT 4
3627: PPUSH
3628: LD_VAR 0 4
3632: PPUSH
3633: LD_VAR 0 5
3637: PPUSH
3638: LD_INT 5
3640: PPUSH
3641: LD_INT 0
3643: PPUSH
3644: CALL 2184 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3648: LD_EXP 10
3652: PUSH
3653: LD_INT 20
3655: PPUSH
3656: LD_VAR 0 1
3660: PPUSH
3661: CALL_OW 321
3665: PUSH
3666: LD_INT 1
3668: EQUAL
3669: AND
3670: IFFALSE 3687
// SetTech ( tech_SibDet , side , state_researched ) ;
3672: LD_INT 20
3674: PPUSH
3675: LD_VAR 0 1
3679: PPUSH
3680: LD_INT 2
3682: PPUSH
3683: CALL_OW 322
// if def_siberite_bomb = 1 then
3687: LD_EXP 13
3691: PUSH
3692: LD_INT 1
3694: EQUAL
3695: IFFALSE 3729
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3697: LD_INT 25
3699: PPUSH
3700: LD_VAR 0 1
3704: PPUSH
3705: LD_INT 1
3707: PPUSH
3708: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3712: LD_INT 73
3714: PPUSH
3715: LD_VAR 0 1
3719: PPUSH
3720: LD_INT 1
3722: PPUSH
3723: CALL_OW 322
// end else
3727: GO 3759
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3729: LD_INT 25
3731: PPUSH
3732: LD_VAR 0 1
3736: PPUSH
3737: LD_INT 0
3739: PPUSH
3740: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3744: LD_INT 73
3746: PPUSH
3747: LD_VAR 0 1
3751: PPUSH
3752: LD_INT 0
3754: PPUSH
3755: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
3759: LD_INT 24
3761: PPUSH
3762: LD_VAR 0 1
3766: PPUSH
3767: LD_INT 0
3769: PPUSH
3770: CALL_OW 322
// global_defined := true ;
3774: LD_ADDR_LOC 3
3778: PUSH
3779: LD_INT 1
3781: ST_TO_ADDR
// end ;
3782: LD_VAR 0 2
3786: RET
// every 0 0$1 do
3787: GO 3789
3789: DISABLE
// if ( def_siberite_bomb > 1 ) then
3790: LD_EXP 13
3794: PUSH
3795: LD_INT 1
3797: GREATER
3798: IFFALSE 3813
// begin wait ( siberite_bomb_Delay ) ;
3800: LD_EXP 28
3804: PPUSH
3805: CALL_OW 67
// EnableSibFiss ;
3809: CALL 3814 0 0
// end ;
3813: END
// function EnableSibFiss ; var i ; begin
3814: LD_INT 0
3816: PPUSH
3817: PPUSH
// for i := 1 to 8 do
3818: LD_ADDR_VAR 0 2
3822: PUSH
3823: DOUBLE
3824: LD_INT 1
3826: DEC
3827: ST_TO_ADDR
3828: LD_INT 8
3830: PUSH
3831: FOR_TO
3832: IFFALSE 3878
// if Side_Positions [ i ] then
3834: LD_EXP 32
3838: PUSH
3839: LD_VAR 0 2
3843: ARRAY
3844: IFFALSE 3876
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3846: LD_INT 25
3848: PPUSH
3849: LD_VAR 0 2
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3861: LD_INT 73
3863: PPUSH
3864: LD_VAR 0 2
3868: PPUSH
3869: LD_INT 1
3871: PPUSH
3872: CALL_OW 322
// end ;
3876: GO 3831
3878: POP
3879: POP
// end ;
3880: LD_VAR 0 1
3884: RET
// function prepare_sides ; var i ; begin
3885: LD_INT 0
3887: PPUSH
3888: PPUSH
// global_units := [ ] ;
3889: LD_ADDR_LOC 2
3893: PUSH
3894: EMPTY
3895: ST_TO_ADDR
// global_defined := false ;
3896: LD_ADDR_LOC 3
3900: PUSH
3901: LD_INT 0
3903: ST_TO_ADDR
// CountClassMembers ;
3904: CALL 3954 0 0
// for i := 1 to 8 do
3908: LD_ADDR_VAR 0 2
3912: PUSH
3913: DOUBLE
3914: LD_INT 1
3916: DEC
3917: ST_TO_ADDR
3918: LD_INT 8
3920: PUSH
3921: FOR_TO
3922: IFFALSE 3947
// if Side_Positions [ i ] then
3924: LD_EXP 32
3928: PUSH
3929: LD_VAR 0 2
3933: ARRAY
3934: IFFALSE 3945
// prepare_side ( i ) ;
3936: LD_VAR 0 2
3940: PPUSH
3941: CALL 2721 0 1
3945: GO 3921
3947: POP
3948: POP
// end ;
3949: LD_VAR 0 1
3953: RET
// function CountClassMembers ; var Mode ; begin
3954: LD_INT 0
3956: PPUSH
3957: PPUSH
// if No_Mechs then
3958: LD_EXP 15
3962: IFFALSE 3974
// Mode := 2 else
3964: LD_ADDR_VAR 0 2
3968: PUSH
3969: LD_INT 2
3971: ST_TO_ADDR
3972: GO 3982
// Mode := 1 ;
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: LD_INT 1
3981: ST_TO_ADDR
// neng := number_of_people ;
3982: LD_ADDR_LOC 5
3986: PUSH
3987: LD_EXP 19
3991: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
3992: LD_ADDR_LOC 8
3996: PUSH
3997: LD_LOC 5
4001: PUSH
4002: LD_INT 4
4004: PUSH
4005: LD_INT 3
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: LD_VAR 0 2
4016: ARRAY
4017: DIV
4018: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4019: LD_LOC 8
4023: PUSH
4024: LD_EXP 18
4028: LESS
4029: IFFALSE 4041
// nsol := number_of_breastworks ;
4031: LD_ADDR_LOC 8
4035: PUSH
4036: LD_EXP 18
4040: ST_TO_ADDR
// neng := neng - nsol ;
4041: LD_ADDR_LOC 5
4045: PUSH
4046: LD_LOC 5
4050: PUSH
4051: LD_LOC 8
4055: MINUS
4056: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4057: LD_ADDR_LOC 6
4061: PUSH
4062: LD_LOC 5
4066: PUSH
4067: LD_INT 3
4069: PUSH
4070: LD_INT 2
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: PUSH
4077: LD_VAR 0 2
4081: ARRAY
4082: DIV
4083: ST_TO_ADDR
// if ( nsci < 1 ) then
4084: LD_LOC 6
4088: PUSH
4089: LD_INT 1
4091: LESS
4092: IFFALSE 4102
// nsci := 1 ;
4094: LD_ADDR_LOC 6
4098: PUSH
4099: LD_INT 1
4101: ST_TO_ADDR
// neng := neng - nsci ;
4102: LD_ADDR_LOC 5
4106: PUSH
4107: LD_LOC 5
4111: PUSH
4112: LD_LOC 6
4116: MINUS
4117: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4118: LD_ADDR_LOC 7
4122: PUSH
4123: LD_LOC 5
4127: PUSH
4128: LD_INT 2
4130: DIV
4131: PUSH
4132: LD_INT 0
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: PUSH
4139: LD_VAR 0 2
4143: ARRAY
4144: ST_TO_ADDR
// neng := neng - nmech ;
4145: LD_ADDR_LOC 5
4149: PUSH
4150: LD_LOC 5
4154: PUSH
4155: LD_LOC 7
4159: MINUS
4160: ST_TO_ADDR
// if ( neng < 1 ) then
4161: LD_LOC 5
4165: PUSH
4166: LD_INT 1
4168: LESS
4169: IFFALSE 4179
// neng := 1 ;
4171: LD_ADDR_LOC 5
4175: PUSH
4176: LD_INT 1
4178: ST_TO_ADDR
// end ;
4179: LD_VAR 0 1
4183: RET
// starting begin disable ( 98 ) ;
4184: LD_INT 98
4186: DISABLE_MARKED
// disable ( 99 ) ;
4187: LD_INT 99
4189: DISABLE_MARKED
// disable ( 400 ) ;
4190: LD_INT 400
4192: DISABLE_MARKED
// disable ( 401 ) ;
4193: LD_INT 401
4195: DISABLE_MARKED
// mp_selectmsg := true ;
4196: LD_ADDR_OWVAR 13
4200: PUSH
4201: LD_INT 1
4203: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4204: CALL 784 0 0
// init_map ;
4208: CALL 0 0 0
// init_respawning ;
4212: CALL 12348 0 0
// set_shared_visions_and_alliances ;
4216: CALL 1875 0 0
// ResetFog ;
4220: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4224: LD_OWVAR 2
4228: PPUSH
4229: CALL_OW 520
// prepare_sides ;
4233: CALL 3885 0 0
// Init_Win_Condition ;
4237: CALL 6329 0 0
// ShowTimer ;
4241: CALL 5907 0 0
// music_nat := Side_Nations [ your_side ] ;
4245: LD_ADDR_OWVAR 71
4249: PUSH
4250: LD_EXP 33
4254: PUSH
4255: LD_OWVAR 2
4259: ARRAY
4260: ST_TO_ADDR
// if IAmSpec then
4261: CALL_OW 531
4265: IFFALSE 4289
// begin fogoff ( true ) ;
4267: LD_INT 1
4269: PPUSH
4270: CALL_OW 344
// CenterNowOnXY ( 104 , 69 ) ;
4274: LD_INT 104
4276: PPUSH
4277: LD_INT 69
4279: PPUSH
4280: CALL_OW 86
// enable ( 400 ) ;
4284: LD_INT 400
4286: ENABLE_MARKED
// end else
4287: GO 4335
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4289: LD_EXP 37
4293: PUSH
4294: LD_EXP 32
4298: PUSH
4299: LD_OWVAR 2
4303: ARRAY
4304: ARRAY
4305: PUSH
4306: LD_INT 1
4308: ARRAY
4309: PPUSH
4310: LD_EXP 37
4314: PUSH
4315: LD_EXP 32
4319: PUSH
4320: LD_OWVAR 2
4324: ARRAY
4325: ARRAY
4326: PUSH
4327: LD_INT 2
4329: ARRAY
4330: PPUSH
4331: CALL_OW 86
// end ; AnimateTrees ( true ) ;
4335: LD_INT 1
4337: PPUSH
4338: CALL_OW 573
// BuildUpAreas := [ base_nw , base_ne , base_sw , base_se ] ;
4342: LD_ADDR_EXP 47
4346: PUSH
4347: LD_INT 8
4349: PUSH
4350: LD_INT 9
4352: PUSH
4353: LD_INT 10
4355: PUSH
4356: LD_INT 11
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: ST_TO_ADDR
// BeginBuildUp ;
4365: CALL 12842 0 0
// end ; end_of_file
4369: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
4370: LD_VAR 0 1
4374: PPUSH
4375: CALL_OW 266
4379: PUSH
4380: LD_INT 0
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: IN
4390: IFFALSE 4415
// SetBName ( b , @ & GetSide ( b ) ) ;
4392: LD_VAR 0 1
4396: PPUSH
4397: LD_STRING @
4399: PUSH
4400: LD_VAR 0 1
4404: PPUSH
4405: CALL_OW 255
4409: STR
4410: PPUSH
4411: CALL_OW 500
// end ;
4415: PPOPN 2
4417: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
4418: LD_VAR 0 1
4422: PPUSH
4423: CALL_OW 266
4427: PUSH
4428: LD_INT 0
4430: PUSH
4431: LD_INT 1
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: IN
4438: IFFALSE 4463
// SetBName ( b , @ & GetSide ( b ) ) ;
4440: LD_VAR 0 1
4444: PPUSH
4445: LD_STRING @
4447: PUSH
4448: LD_VAR 0 1
4452: PPUSH
4453: CALL_OW 255
4457: STR
4458: PPUSH
4459: CALL_OW 500
// end ;
4463: PPOPN 3
4465: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
4466: LD_INT 0
4468: PPUSH
4469: PPUSH
4470: PPUSH
4471: PPUSH
// begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
4472: LD_VAR 0 1
4476: PPUSH
4477: CALL_OW 255
4481: PUSH
4482: LD_INT 0
4484: EQUAL
4485: PUSH
4486: LD_VAR 0 1
4490: PPUSH
4491: CALL_OW 257
4495: PUSH
4496: LD_INT 12
4498: EQUAL
4499: AND
4500: IFFALSE 4506
// CheckApemenAmount ;
4502: CALL 5258 0 0
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
4506: LD_VAR 0 1
4510: PPUSH
4511: CALL_OW 266
4515: PUSH
4516: LD_INT 0
4518: PUSH
4519: LD_INT 1
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: IN
4526: IFFALSE 4608
// begin pos := Side_Positions [ GetSide ( j ) ] ;
4528: LD_ADDR_VAR 0 4
4532: PUSH
4533: LD_EXP 32
4537: PUSH
4538: LD_VAR 0 1
4542: PPUSH
4543: CALL_OW 255
4547: ARRAY
4548: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
4549: LD_ADDR_VAR 0 2
4553: PUSH
4554: LD_EXP 37
4558: PUSH
4559: LD_VAR 0 4
4563: ARRAY
4564: PUSH
4565: LD_INT 1
4567: ARRAY
4568: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4569: LD_ADDR_VAR 0 3
4573: PUSH
4574: LD_EXP 37
4578: PUSH
4579: LD_VAR 0 4
4583: ARRAY
4584: PUSH
4585: LD_INT 2
4587: ARRAY
4588: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
4589: LD_VAR 0 2
4593: PPUSH
4594: LD_VAR 0 3
4598: PPUSH
4599: CALL_OW 420
4603: PPUSH
4604: CALL_OW 419
// end ; end ;
4608: PPOPN 5
4610: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
4611: LD_VAR 0 1
4615: PPUSH
4616: LD_VAR 0 2
4620: PPUSH
4621: LD_VAR 0 3
4625: PPUSH
4626: LD_OWVAR 2
4630: PPUSH
4631: CALL 6090 0 4
4635: PPOPN 3
4637: END
// every 1 1$0 + 0 0$0.3 do
4638: GO 4640
4640: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
4641: LD_INT 4
4643: PPUSH
4644: LD_INT 5
4646: PPUSH
4647: CALL_OW 12
4651: PPUSH
4652: LD_INT 1
4654: PPUSH
4655: CALL_OW 57
// enable ;
4659: ENABLE
// end ;
4660: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4661: GO 4663
4663: DISABLE
4664: LD_INT 0
4666: PPUSH
4667: PPUSH
// begin case tick of 1 .. 1 1$0 :
4668: LD_OWVAR 1
4672: PUSH
4673: LD_INT 1
4675: DOUBLE
4676: GREATEREQUAL
4677: IFFALSE 4685
4679: LD_INT 2100
4681: DOUBLE
4682: LESSEQUAL
4683: IFTRUE 4687
4685: GO 4715
4687: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4688: LD_EXP 23
4692: PUSH
4693: LD_INT 100
4695: DIVREAL
4696: PUSH
4697: LD_INT 350
4699: PPUSH
4700: LD_INT 1050
4702: PPUSH
4703: CALL_OW 12
4707: MUL
4708: PPUSH
4709: CALL_OW 67
4713: GO 5017
4715: LD_INT 2100
4717: PUSH
4718: LD_INT 1
4720: PLUS
4721: DOUBLE
4722: GREATEREQUAL
4723: IFFALSE 4731
4725: LD_INT 10500
4727: DOUBLE
4728: LESSEQUAL
4729: IFTRUE 4733
4731: GO 4761
4733: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4734: LD_EXP 23
4738: PUSH
4739: LD_INT 100
4741: DIVREAL
4742: PUSH
4743: LD_INT 1050
4745: PPUSH
4746: LD_INT 1575
4748: PPUSH
4749: CALL_OW 12
4753: MUL
4754: PPUSH
4755: CALL_OW 67
4759: GO 5017
4761: LD_INT 10500
4763: PUSH
4764: LD_INT 1
4766: PLUS
4767: DOUBLE
4768: GREATEREQUAL
4769: IFFALSE 4777
4771: LD_INT 21000
4773: DOUBLE
4774: LESSEQUAL
4775: IFTRUE 4779
4777: GO 4807
4779: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4780: LD_EXP 23
4784: PUSH
4785: LD_INT 100
4787: DIVREAL
4788: PUSH
4789: LD_INT 1575
4791: PPUSH
4792: LD_INT 2100
4794: PPUSH
4795: CALL_OW 12
4799: MUL
4800: PPUSH
4801: CALL_OW 67
4805: GO 5017
4807: LD_INT 21000
4809: PUSH
4810: LD_INT 1
4812: PLUS
4813: DOUBLE
4814: GREATEREQUAL
4815: IFFALSE 4823
4817: LD_INT 42000
4819: DOUBLE
4820: LESSEQUAL
4821: IFTRUE 4825
4823: GO 4853
4825: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4826: LD_EXP 23
4830: PUSH
4831: LD_INT 100
4833: DIVREAL
4834: PUSH
4835: LD_INT 2100
4837: PPUSH
4838: LD_INT 2625
4840: PPUSH
4841: CALL_OW 12
4845: MUL
4846: PPUSH
4847: CALL_OW 67
4851: GO 5017
4853: LD_INT 42000
4855: PUSH
4856: LD_INT 1
4858: PLUS
4859: DOUBLE
4860: GREATEREQUAL
4861: IFFALSE 4869
4863: LD_INT 63000
4865: DOUBLE
4866: LESSEQUAL
4867: IFTRUE 4871
4869: GO 4899
4871: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
4872: LD_EXP 23
4876: PUSH
4877: LD_INT 100
4879: DIVREAL
4880: PUSH
4881: LD_INT 2625
4883: PPUSH
4884: LD_INT 3150
4886: PPUSH
4887: CALL_OW 12
4891: MUL
4892: PPUSH
4893: CALL_OW 67
4897: GO 5017
4899: LD_INT 63000
4901: PUSH
4902: LD_INT 1
4904: PLUS
4905: DOUBLE
4906: GREATEREQUAL
4907: IFFALSE 4915
4909: LD_INT 105000
4911: DOUBLE
4912: LESSEQUAL
4913: IFTRUE 4917
4915: GO 4945
4917: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
4918: LD_EXP 23
4922: PUSH
4923: LD_INT 100
4925: DIVREAL
4926: PUSH
4927: LD_INT 3150
4929: PPUSH
4930: LD_INT 3675
4932: PPUSH
4933: CALL_OW 12
4937: MUL
4938: PPUSH
4939: CALL_OW 67
4943: GO 5017
4945: LD_INT 105000
4947: PUSH
4948: LD_INT 1
4950: PLUS
4951: DOUBLE
4952: GREATEREQUAL
4953: IFFALSE 4961
4955: LD_INT 630000
4957: DOUBLE
4958: LESSEQUAL
4959: IFTRUE 4963
4961: GO 4991
4963: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
4964: LD_EXP 23
4968: PUSH
4969: LD_INT 100
4971: DIVREAL
4972: PUSH
4973: LD_INT 3675
4975: PPUSH
4976: LD_INT 4200
4978: PPUSH
4979: CALL_OW 12
4983: MUL
4984: PPUSH
4985: CALL_OW 67
4989: GO 5017
4991: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
4992: LD_EXP 23
4996: PUSH
4997: LD_INT 100
4999: DIVREAL
5000: PUSH
5001: LD_INT 4200
5003: PPUSH
5004: LD_INT 5250
5006: PPUSH
5007: CALL_OW 12
5011: MUL
5012: PPUSH
5013: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5017: LD_ADDR_VAR 0 2
5021: PUSH
5022: LD_INT 3
5024: PPUSH
5025: LD_INT 5
5027: PPUSH
5028: CALL_OW 12
5032: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5033: LD_ADDR_VAR 0 1
5037: PUSH
5038: LD_EXP 32
5042: PUSH
5043: LD_INT 0
5045: PUSH
5046: EMPTY
5047: LIST
5048: DIFF
5049: PUSH
5050: FOR_IN
5051: IFFALSE 5091
// CreateCratesArea ( amount , [ base_nw , base_ne , base_sw , base_se ] [ i ] , true ) ;
5053: LD_VAR 0 2
5057: PPUSH
5058: LD_INT 8
5060: PUSH
5061: LD_INT 9
5063: PUSH
5064: LD_INT 10
5066: PUSH
5067: LD_INT 11
5069: PUSH
5070: EMPTY
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: PUSH
5076: LD_VAR 0 1
5080: ARRAY
5081: PPUSH
5082: LD_INT 1
5084: PPUSH
5085: CALL_OW 55
5089: GO 5050
5091: POP
5092: POP
// enable ;
5093: ENABLE
// end ;
5094: PPOPN 2
5096: END
// every 1 1$0 trigger def_shipments_density do
5097: LD_EXP 5
5101: IFFALSE 5137
5103: GO 5105
5105: DISABLE
// begin CreateCratesArea ( 5 , map_center , true ) ;
5106: LD_INT 5
5108: PPUSH
5109: LD_INT 7
5111: PPUSH
5112: LD_INT 1
5114: PPUSH
5115: CALL_OW 55
// wait ( 3 3$0 - ( 1 1$0 * def_shipments_density ) ) ;
5119: LD_INT 6300
5121: PUSH
5122: LD_INT 2100
5124: PUSH
5125: LD_EXP 5
5129: MUL
5130: MINUS
5131: PPUSH
5132: CALL_OW 67
// enable ;
5136: ENABLE
// end ; end_of_file
5137: END
// var _apemenIncrement , _apemenMaximum , _apemenSkillLevel , _apemenThreshold , _isSpawning , _wildApemenAmount ; every 0 0$15 do var i ;
5138: GO 5140
5140: DISABLE
5141: LD_INT 0
5143: PPUSH
// begin _apemenIncrement := 0 ;
5144: LD_ADDR_LOC 9
5148: PUSH
5149: LD_INT 0
5151: ST_TO_ADDR
// _apemenSkillLevel := 0 ;
5152: LD_ADDR_LOC 11
5156: PUSH
5157: LD_INT 0
5159: ST_TO_ADDR
// _isSpawning := true ;
5160: LD_ADDR_LOC 13
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// _wildApemenAmount := 0 ;
5168: LD_ADDR_LOC 14
5172: PUSH
5173: LD_INT 0
5175: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5176: LD_ADDR_VAR 0 1
5180: PUSH
5181: LD_EXP 32
5185: PUSH
5186: LD_INT 0
5188: PUSH
5189: EMPTY
5190: LIST
5191: DIFF
5192: PUSH
5193: FOR_IN
5194: IFFALSE 5212
// _apemenIncrement := _apemenIncrement + 1 ;
5196: LD_ADDR_LOC 9
5200: PUSH
5201: LD_LOC 9
5205: PUSH
5206: LD_INT 1
5208: PLUS
5209: ST_TO_ADDR
5210: GO 5193
5212: POP
5213: POP
// _apemenMaximum := _apemenIncrement * amount_of_apemen ;
5214: LD_ADDR_LOC 10
5218: PUSH
5219: LD_LOC 9
5223: PUSH
5224: LD_EXP 27
5228: MUL
5229: ST_TO_ADDR
// _apemenThreshold := _apemenMaximum / 2 ;
5230: LD_ADDR_LOC 12
5234: PUSH
5235: LD_LOC 10
5239: PUSH
5240: LD_INT 2
5242: DIVREAL
5243: ST_TO_ADDR
// prepare_apemen ;
5244: CALL 5336 0 0
// end ;
5248: PPOPN 1
5250: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
5251: CALL 5258 0 0
// end ;
5255: PPOPN 2
5257: END
// export function CheckApemenAmount ; begin
5258: LD_INT 0
5260: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
5261: LD_ADDR_LOC 14
5265: PUSH
5266: LD_LOC 14
5270: PUSH
5271: LD_INT 1
5273: MINUS
5274: ST_TO_ADDR
// if _isSpawning then
5275: LD_LOC 13
5279: IFFALSE 5283
// exit ;
5281: GO 5331
// if _wildApemenAmount <= ( _apemenThreshold ) then
5283: LD_LOC 14
5287: PUSH
5288: LD_LOC 12
5292: LESSEQUAL
5293: IFFALSE 5331
// begin if _apemenSkillLevel < 8 then
5295: LD_LOC 11
5299: PUSH
5300: LD_INT 8
5302: LESS
5303: IFFALSE 5319
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
5305: LD_ADDR_LOC 11
5309: PUSH
5310: LD_LOC 11
5314: PUSH
5315: LD_INT 1
5317: PLUS
5318: ST_TO_ADDR
// _isSpawning := true ;
5319: LD_ADDR_LOC 13
5323: PUSH
5324: LD_INT 1
5326: ST_TO_ADDR
// prepare_apemen ;
5327: CALL 5336 0 0
// end ; end ;
5331: LD_VAR 0 1
5335: RET
// function prepare_apemen ; var i ; begin
5336: LD_INT 0
5338: PPUSH
5339: PPUSH
// if not amount_of_apemen then
5340: LD_EXP 27
5344: NOT
5345: IFFALSE 5349
// exit ;
5347: GO 5528
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5349: LD_INT 1050
5351: PPUSH
5352: LD_INT 3150
5354: PPUSH
5355: CALL_OW 12
5359: PPUSH
5360: CALL_OW 67
// apeman_init ;
5364: CALL 5533 0 0
// for i in ( Side_Positions diff [ 0 ] ) do
5368: LD_ADDR_VAR 0 2
5372: PUSH
5373: LD_EXP 32
5377: PUSH
5378: LD_INT 0
5380: PUSH
5381: EMPTY
5382: LIST
5383: DIFF
5384: PUSH
5385: FOR_IN
5386: IFFALSE 5490
// begin if i = 1 then
5388: LD_VAR 0 2
5392: PUSH
5393: LD_INT 1
5395: EQUAL
5396: IFFALSE 5413
// PlaceUnitArea ( CreateHuman , north_apeman , false ) ;
5398: CALL_OW 44
5402: PPUSH
5403: LD_INT 1
5405: PPUSH
5406: LD_INT 0
5408: PPUSH
5409: CALL_OW 49
// if i = 2 then
5413: LD_VAR 0 2
5417: PUSH
5418: LD_INT 2
5420: EQUAL
5421: IFFALSE 5438
// PlaceUnitArea ( CreateHuman , north_apeman , false ) ;
5423: CALL_OW 44
5427: PPUSH
5428: LD_INT 1
5430: PPUSH
5431: LD_INT 0
5433: PPUSH
5434: CALL_OW 49
// if i = 3 then
5438: LD_VAR 0 2
5442: PUSH
5443: LD_INT 3
5445: EQUAL
5446: IFFALSE 5463
// PlaceUnitArea ( CreateHuman , south_apeman , false ) ;
5448: CALL_OW 44
5452: PPUSH
5453: LD_INT 2
5455: PPUSH
5456: LD_INT 0
5458: PPUSH
5459: CALL_OW 49
// if i = 4 then
5463: LD_VAR 0 2
5467: PUSH
5468: LD_INT 4
5470: EQUAL
5471: IFFALSE 5488
// PlaceUnitArea ( CreateHuman , south_apeman , false ) ;
5473: CALL_OW 44
5477: PPUSH
5478: LD_INT 2
5480: PPUSH
5481: LD_INT 0
5483: PPUSH
5484: CALL_OW 49
// end ;
5488: GO 5385
5490: POP
5491: POP
// _wildApemenAmount := _wildApemenAmount + _apemenIncrement ;
5492: LD_ADDR_LOC 14
5496: PUSH
5497: LD_LOC 14
5501: PUSH
5502: LD_LOC 9
5506: PLUS
5507: ST_TO_ADDR
// until _wildApemenAmount >= _apemenMaximum ;
5508: LD_LOC 14
5512: PUSH
5513: LD_LOC 10
5517: GREATEREQUAL
5518: IFFALSE 5349
// _isSpawning := false ;
5520: LD_ADDR_LOC 13
5524: PUSH
5525: LD_INT 0
5527: ST_TO_ADDR
// end ;
5528: LD_VAR 0 1
5532: RET
// function apeman_init ; begin
5533: LD_INT 0
5535: PPUSH
// uc_side := 0 ;
5536: LD_ADDR_OWVAR 20
5540: PUSH
5541: LD_INT 0
5543: ST_TO_ADDR
// uc_nation := nation_nature ;
5544: LD_ADDR_OWVAR 21
5548: PUSH
5549: LD_INT 0
5551: ST_TO_ADDR
// hc_class := class_apeman ;
5552: LD_ADDR_OWVAR 28
5556: PUSH
5557: LD_INT 12
5559: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
5560: LD_ADDR_OWVAR 30
5564: PUSH
5565: LD_INT 2
5567: PUSH
5568: LD_INT 2
5570: PUSH
5571: LD_INT 2
5573: PUSH
5574: LD_INT 2
5576: PUSH
5577: EMPTY
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
5583: LD_ADDR_OWVAR 31
5587: PUSH
5588: LD_INT 0
5590: PPUSH
5591: LD_INT 2
5593: PPUSH
5594: CALL_OW 12
5598: PUSH
5599: LD_LOC 11
5603: PLUS
5604: PUSH
5605: LD_INT 0
5607: PPUSH
5608: LD_INT 2
5610: PPUSH
5611: CALL_OW 12
5615: PUSH
5616: LD_LOC 11
5620: PLUS
5621: PUSH
5622: LD_INT 0
5624: PPUSH
5625: LD_INT 2
5627: PPUSH
5628: CALL_OW 12
5632: PUSH
5633: LD_LOC 11
5637: PLUS
5638: PUSH
5639: LD_INT 0
5641: PPUSH
5642: LD_INT 2
5644: PPUSH
5645: CALL_OW 12
5649: PUSH
5650: LD_LOC 11
5654: PLUS
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
5662: LD_ADDR_OWVAR 29
5666: PUSH
5667: LD_INT 10
5669: PUSH
5670: LD_INT 12
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: ST_TO_ADDR
// hc_sex := sex_male ;
5677: LD_ADDR_OWVAR 27
5681: PUSH
5682: LD_INT 1
5684: ST_TO_ADDR
// hc_importance := 0 ;
5685: LD_ADDR_OWVAR 32
5689: PUSH
5690: LD_INT 0
5692: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
5693: LD_ADDR_OWVAR 35
5697: PUSH
5698: LD_INT 20
5700: NEG
5701: PPUSH
5702: LD_INT 20
5704: PPUSH
5705: CALL_OW 12
5709: ST_TO_ADDR
// end ; end_of_file
5710: LD_VAR 0 1
5714: RET
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
5715: LD_INT 0
5717: PPUSH
5718: PPUSH
// for un in battle_flags_id do
5719: LD_ADDR_VAR 0 2
5723: PUSH
5724: LD_EXP 42
5728: PUSH
5729: FOR_IN
5730: IFFALSE 5805
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
5732: LD_VAR 0 2
5736: PPUSH
5737: LD_INT 1
5739: PUSH
5740: LD_LOC 15
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PUSH
5749: LD_INT 2
5751: PUSH
5752: LD_LOC 15
5756: PUSH
5757: LD_INT 2
5759: DIV
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PUSH
5765: LD_INT 3
5767: PUSH
5768: LD_LOC 15
5772: PUSH
5773: LD_INT 5
5775: DIV
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: PUSH
5781: LD_INT 20
5783: PUSH
5784: LD_LOC 15
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: PPUSH
5799: CALL_OW 423
5803: GO 5729
5805: POP
5806: POP
// end ;
5807: LD_VAR 0 1
5811: RET
// every 0 0$0.1 do var un ;
5812: GO 5814
5814: DISABLE
5815: LD_INT 0
5817: PPUSH
// begin if not def_morale_flags then
5818: LD_EXP 9
5822: NOT
5823: IFFALSE 5827
// exit ;
5825: GO 5904
// if not morale_decreasing_time then
5827: LD_EXP 24
5831: NOT
5832: IFFALSE 5836
// exit ;
5834: GO 5904
// strength = 100 ;
5836: LD_ADDR_LOC 15
5840: PUSH
5841: LD_INT 100
5843: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
5844: LD_EXP 24
5848: PPUSH
5849: CALL_OW 67
// strength := strength - 1 ;
5853: LD_ADDR_LOC 15
5857: PUSH
5858: LD_LOC 15
5862: PUSH
5863: LD_INT 1
5865: MINUS
5866: ST_TO_ADDR
// Update_Flags ;
5867: CALL 5715 0 0
// until not strength ;
5871: LD_LOC 15
5875: NOT
5876: IFFALSE 5844
// for un in battle_flags_id do
5878: LD_ADDR_VAR 0 1
5882: PUSH
5883: LD_EXP 42
5887: PUSH
5888: FOR_IN
5889: IFFALSE 5902
// KillBattleFlag ( un ) ;
5891: LD_VAR 0 1
5895: PPUSH
5896: CALL_OW 419
5900: GO 5888
5902: POP
5903: POP
// end ; end_of_file
5904: PPOPN 1
5906: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
5907: LD_INT 0
5909: PPUSH
5910: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
5911: LD_ADDR_VAR 0 2
5915: PUSH
5916: LD_STRING #Multi1x1-Time
5918: PUSH
5919: LD_OWVAR 1
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: ST_TO_ADDR
// if WaitServerStrings then
5928: LD_EXP 46
5932: IFFALSE 5950
// AllStrings = AllStrings ^ WaitServerStrings ;
5934: LD_ADDR_VAR 0 2
5938: PUSH
5939: LD_VAR 0 2
5943: PUSH
5944: LD_EXP 46
5948: ADD
5949: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
5950: LD_INT 0
5952: PUSH
5953: LD_EXP 28
5957: PUSH
5958: LD_OWVAR 1
5962: MINUS
5963: LESSEQUAL
5964: IFFALSE 5995
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
5966: LD_ADDR_VAR 0 2
5970: PUSH
5971: LD_VAR 0 2
5975: PUSH
5976: LD_STRING #allowedsibbomb
5978: PUSH
5979: LD_EXP 28
5983: PUSH
5984: LD_OWVAR 1
5988: MINUS
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: ADD
5994: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
5995: LD_INT 0
5997: PUSH
5998: LD_EXP 49
6002: PUSH
6003: LD_OWVAR 1
6007: MINUS
6008: LESSEQUAL
6009: IFFALSE 6040
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: LD_VAR 0 2
6020: PUSH
6021: LD_STRING #builduptime
6023: PUSH
6024: LD_EXP 49
6028: PUSH
6029: LD_OWVAR 1
6033: MINUS
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: ADD
6039: ST_TO_ADDR
// if ( ExtraStrings ) then
6040: LD_EXP 45
6044: IFFALSE 6066
// AllStrings := AllStrings ^  ^ ExtraStrings ;
6046: LD_ADDR_VAR 0 2
6050: PUSH
6051: LD_VAR 0 2
6055: PUSH
6056: LD_STRING 
6058: ADD
6059: PUSH
6060: LD_EXP 45
6064: ADD
6065: ST_TO_ADDR
// Display_Strings := AllStrings ;
6066: LD_ADDR_OWVAR 47
6070: PUSH
6071: LD_VAR 0 2
6075: ST_TO_ADDR
// end ;
6076: LD_VAR 0 1
6080: RET
// every 0 0$1 do
6081: GO 6083
6083: DISABLE
// begin ShowTimer ;
6084: CALL 5907 0 0
// enable ;
6088: ENABLE
// end ; end_of_file
6089: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
6090: LD_INT 0
6092: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
6093: LD_VAR 0 1
6097: PPUSH
6098: CALL_OW 255
6102: PUSH
6103: LD_VAR 0 4
6107: EQUAL
6108: IFFALSE 6127
// begin SetAchievement ( ACH_RAD ) ;
6110: LD_STRING ACH_RAD
6112: PPUSH
6113: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
6117: LD_STRING ACH_NL
6119: PPUSH
6120: LD_INT 1
6122: PPUSH
6123: CALL_OW 564
// end end ;
6127: LD_VAR 0 5
6131: RET
// export function SA_Win ( side ) ; begin
6132: LD_INT 0
6134: PPUSH
// case side of 1 :
6135: LD_VAR 0 1
6139: PUSH
6140: LD_INT 1
6142: DOUBLE
6143: EQUAL
6144: IFTRUE 6148
6146: GO 6161
6148: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
6149: LD_STRING ACH_AH
6151: PPUSH
6152: LD_INT 1
6154: PPUSH
6155: CALL_OW 564
6159: GO 6324
6161: LD_INT 2
6163: DOUBLE
6164: EQUAL
6165: IFTRUE 6169
6167: GO 6182
6169: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
6170: LD_STRING ACH_E
6172: PPUSH
6173: LD_INT 1
6175: PPUSH
6176: CALL_OW 564
6180: GO 6324
6182: LD_INT 3
6184: DOUBLE
6185: EQUAL
6186: IFTRUE 6190
6188: GO 6203
6190: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
6191: LD_STRING ACH_OOL
6193: PPUSH
6194: LD_INT 1
6196: PPUSH
6197: CALL_OW 564
6201: GO 6324
6203: LD_INT 1
6205: PUSH
6206: LD_INT 2
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: DOUBLE
6213: EQUAL
6214: IFTRUE 6218
6216: GO 6243
6218: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
6219: LD_STRING ACH_AH
6221: PPUSH
6222: LD_REAL  5.00000000000000E-0001
6225: PPUSH
6226: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
6230: LD_STRING ACH_E
6232: PPUSH
6233: LD_REAL  5.00000000000000E-0001
6236: PPUSH
6237: CALL_OW 564
// end ; [ 2 , 3 ] :
6241: GO 6324
6243: LD_INT 2
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: DOUBLE
6253: EQUAL
6254: IFTRUE 6258
6256: GO 6283
6258: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
6259: LD_STRING ACH_OOL
6261: PPUSH
6262: LD_REAL  5.00000000000000E-0001
6265: PPUSH
6266: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
6270: LD_STRING ACH_E
6272: PPUSH
6273: LD_REAL  5.00000000000000E-0001
6276: PPUSH
6277: CALL_OW 564
// end ; [ 3 , 1 ] :
6281: GO 6324
6283: LD_INT 3
6285: PUSH
6286: LD_INT 1
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: DOUBLE
6293: EQUAL
6294: IFTRUE 6298
6296: GO 6323
6298: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
6299: LD_STRING ACH_AH
6301: PPUSH
6302: LD_REAL  5.00000000000000E-0001
6305: PPUSH
6306: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
6310: LD_STRING ACH_OOL
6312: PPUSH
6313: LD_REAL  5.00000000000000E-0001
6316: PPUSH
6317: CALL_OW 564
// end ; end ;
6321: GO 6324
6323: POP
// end ; end_of_file
6324: LD_VAR 0 2
6328: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
6329: LD_INT 0
6331: PPUSH
6332: PPUSH
// enable ( 98 ) ;
6333: LD_INT 98
6335: ENABLE_MARKED
// GameEnded = false ;
6336: LD_ADDR_LOC 21
6340: PUSH
6341: LD_INT 0
6343: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6344: LD_ADDR_LOC 20
6348: PUSH
6349: LD_INT 0
6351: PUSH
6352: LD_INT 0
6354: PUSH
6355: LD_INT 0
6357: PUSH
6358: LD_INT 0
6360: PUSH
6361: LD_INT 0
6363: PUSH
6364: LD_INT 0
6366: PUSH
6367: LD_INT 0
6369: PUSH
6370: LD_INT 0
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: ST_TO_ADDR
// unfoged = false ;
6383: LD_ADDR_LOC 22
6387: PUSH
6388: LD_INT 0
6390: ST_TO_ADDR
// defeated_specs := [ ] ;
6391: LD_ADDR_LOC 23
6395: PUSH
6396: EMPTY
6397: ST_TO_ADDR
// for i = 1 to side_positions do
6398: LD_ADDR_VAR 0 2
6402: PUSH
6403: DOUBLE
6404: LD_INT 1
6406: DEC
6407: ST_TO_ADDR
6408: LD_EXP 32
6412: PUSH
6413: FOR_TO
6414: IFFALSE 6454
// if not side_positions [ i ] then
6416: LD_EXP 32
6420: PUSH
6421: LD_VAR 0 2
6425: ARRAY
6426: NOT
6427: IFFALSE 6452
// defeated = replace ( defeated , i , true ) ;
6429: LD_ADDR_LOC 20
6433: PUSH
6434: LD_LOC 20
6438: PPUSH
6439: LD_VAR 0 2
6443: PPUSH
6444: LD_INT 1
6446: PPUSH
6447: CALL_OW 1
6451: ST_TO_ADDR
6452: GO 6413
6454: POP
6455: POP
// end ;
6456: LD_VAR 0 1
6460: RET
// function CanWinLoose ; begin
6461: LD_INT 0
6463: PPUSH
// Result := true ;
6464: LD_ADDR_VAR 0 1
6468: PUSH
6469: LD_INT 1
6471: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
6472: CALL_OW 518
6476: PUSH
6477: CALL_OW 519
6481: PUSH
6482: LD_INT 0
6484: GREATER
6485: AND
6486: IFFALSE 6496
// Result := false ;
6488: LD_ADDR_VAR 0 1
6492: PUSH
6493: LD_INT 0
6495: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
6496: CALL_OW 531
6500: PUSH
6501: CALL_OW 519
6505: PUSH
6506: LD_INT 1
6508: GREATER
6509: AND
6510: IFFALSE 6520
// Result := false ;
6512: LD_ADDR_VAR 0 1
6516: PUSH
6517: LD_INT 0
6519: ST_TO_ADDR
// end ;
6520: LD_VAR 0 1
6524: RET
// export function HasPower ( i ) ; var k , h ; begin
6525: LD_INT 0
6527: PPUSH
6528: PPUSH
6529: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
6530: LD_VAR 0 1
6534: PPUSH
6535: CALL_OW 108
6539: NOT
6540: PUSH
6541: LD_EXP 43
6545: PUSH
6546: LD_VAR 0 1
6550: ARRAY
6551: NOT
6552: AND
6553: PUSH
6554: LD_OWVAR 4
6558: AND
6559: IFFALSE 6571
// begin result = false ;
6561: LD_ADDR_VAR 0 2
6565: PUSH
6566: LD_INT 0
6568: ST_TO_ADDR
// end else
6569: GO 6866
// case def_win_rules of 0 :
6571: LD_EXP 29
6575: PUSH
6576: LD_INT 0
6578: DOUBLE
6579: EQUAL
6580: IFTRUE 6584
6582: GO 6747
6584: POP
// if def_people_respawning then
6585: LD_EXP 12
6589: IFFALSE 6680
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
6591: LD_ADDR_VAR 0 2
6595: PUSH
6596: LD_INT 22
6598: PUSH
6599: LD_VAR 0 1
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: PUSH
6608: LD_INT 2
6610: PUSH
6611: LD_INT 21
6613: PUSH
6614: LD_INT 1
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PUSH
6621: LD_INT 33
6623: PUSH
6624: LD_INT 3
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: PUSH
6631: LD_INT 33
6633: PUSH
6634: LD_INT 5
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 30
6643: PUSH
6644: LD_INT 0
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: LD_INT 30
6653: PUSH
6654: LD_INT 1
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PUSH
6661: EMPTY
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PPUSH
6673: CALL_OW 69
6677: ST_TO_ADDR
6678: GO 6745
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
6680: LD_ADDR_VAR 0 2
6684: PUSH
6685: LD_INT 22
6687: PUSH
6688: LD_VAR 0 1
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 2
6699: PUSH
6700: LD_INT 21
6702: PUSH
6703: LD_INT 1
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: PUSH
6710: LD_INT 33
6712: PUSH
6713: LD_INT 3
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PUSH
6720: LD_INT 33
6722: PUSH
6723: LD_INT 5
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PPUSH
6740: CALL_OW 69
6744: ST_TO_ADDR
6745: GO 6866
6747: LD_INT 1
6749: DOUBLE
6750: EQUAL
6751: IFTRUE 6755
6753: GO 6794
6755: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
6756: LD_ADDR_VAR 0 2
6760: PUSH
6761: LD_INT 22
6763: PUSH
6764: LD_VAR 0 1
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PUSH
6773: LD_INT 21
6775: PUSH
6776: LD_INT 1
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PPUSH
6787: CALL_OW 69
6791: ST_TO_ADDR
6792: GO 6866
6794: LD_INT 2
6796: DOUBLE
6797: EQUAL
6798: IFTRUE 6802
6800: GO 6865
6802: POP
// begin h = false ;
6803: LD_ADDR_VAR 0 4
6807: PUSH
6808: LD_INT 0
6810: ST_TO_ADDR
// for k in heroes [ i ] do
6811: LD_ADDR_VAR 0 3
6815: PUSH
6816: LD_EXP 44
6820: PUSH
6821: LD_VAR 0 1
6825: ARRAY
6826: PUSH
6827: FOR_IN
6828: IFFALSE 6851
// if IsLive ( k ) then
6830: LD_VAR 0 3
6834: PPUSH
6835: CALL_OW 300
6839: IFFALSE 6849
// h = true ;
6841: LD_ADDR_VAR 0 4
6845: PUSH
6846: LD_INT 1
6848: ST_TO_ADDR
6849: GO 6827
6851: POP
6852: POP
// Result := h ;
6853: LD_ADDR_VAR 0 2
6857: PUSH
6858: LD_VAR 0 4
6862: ST_TO_ADDR
// end ; end ;
6863: GO 6866
6865: POP
// end ;
6866: LD_VAR 0 2
6870: RET
// function AlliedSides ( i , j ) ; begin
6871: LD_INT 0
6873: PPUSH
// Result := false ;
6874: LD_ADDR_VAR 0 3
6878: PUSH
6879: LD_INT 0
6881: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
6882: LD_VAR 0 1
6886: PPUSH
6887: LD_VAR 0 2
6891: PPUSH
6892: CALL_OW 81
6896: PUSH
6897: LD_INT 1
6899: EQUAL
6900: PUSH
6901: LD_VAR 0 2
6905: PPUSH
6906: LD_VAR 0 1
6910: PPUSH
6911: CALL_OW 81
6915: PUSH
6916: LD_INT 1
6918: EQUAL
6919: AND
6920: PUSH
6921: LD_VAR 0 1
6925: PPUSH
6926: CALL_OW 83
6930: AND
6931: PUSH
6932: LD_VAR 0 2
6936: PPUSH
6937: CALL_OW 83
6941: AND
6942: IFFALSE 6952
// Result := true ;
6944: LD_ADDR_VAR 0 3
6948: PUSH
6949: LD_INT 1
6951: ST_TO_ADDR
// end ;
6952: LD_VAR 0 3
6956: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
6957: CALL 6461 0 0
6961: PUSH
6962: LD_LOC 21
6966: NOT
6967: AND
6968: IFFALSE 6984
6970: GO 6972
6972: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
6973: LD_ADDR_EXP 46
6977: PUSH
6978: LD_STRING #Player-Ended
6980: PUSH
6981: EMPTY
6982: LIST
6983: ST_TO_ADDR
6984: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
6985: CALL 6461 0 0
6989: PUSH
6990: LD_LOC 21
6994: AND
6995: IFFALSE 7004
6997: GO 6999
6999: DISABLE
// YouLostInMultiplayer ;
7000: CALL_OW 107
7004: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
7005: CALL 6461 0 0
7009: NOT
7010: PUSH
7011: CALL_OW 531
7015: NOT
7016: AND
7017: IFFALSE 7033
7019: GO 7021
7021: DISABLE
// WaitServerStrings = [ #server-wait ] ;
7022: LD_ADDR_EXP 46
7026: PUSH
7027: LD_STRING #server-wait
7029: PUSH
7030: EMPTY
7031: LIST
7032: ST_TO_ADDR
7033: END
// every 100 trigger IAmSpec do
7034: CALL_OW 531
7038: IFFALSE 7054
7040: GO 7042
7042: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
7043: LD_ADDR_EXP 46
7047: PUSH
7048: LD_STRING #Player-IAmSpec
7050: PUSH
7051: EMPTY
7052: LIST
7053: ST_TO_ADDR
7054: END
// every 100 trigger GameEnded and IAmSpec do
7055: LD_LOC 21
7059: PUSH
7060: CALL_OW 531
7064: AND
7065: IFFALSE 7074
7067: GO 7069
7069: DISABLE
// YouLostInMultiplayer ;
7070: CALL_OW 107
7074: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
7075: CALL 6461 0 0
7079: PUSH
7080: LD_LOC 21
7084: NOT
7085: AND
7086: IFFALSE 7102
7088: GO 7090
7090: DISABLE
// WaitServerStrings = [ $player-win ] ;
7091: LD_ADDR_EXP 46
7095: PUSH
7096: LD_STRING $player-win
7098: PUSH
7099: EMPTY
7100: LIST
7101: ST_TO_ADDR
7102: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
7103: CALL 6461 0 0
7107: PUSH
7108: LD_LOC 21
7112: AND
7113: IFFALSE 7137
7115: GO 7117
7117: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
7118: LD_EXP 33
7122: PUSH
7123: LD_OWVAR 7
7127: ARRAY
7128: PPUSH
7129: CALL 6132 0 1
// YouWinInMultiplayer ;
7133: CALL_OW 106
// end ;
7137: END
// every 100 trigger isEditor marked 401 do
7138: LD_OWVAR 84
7142: IFFALSE 7158
7144: GO 7146
7146: DISABLE
// Debug_Strings = [ You won ] ;
7147: LD_ADDR_OWVAR 48
7151: PUSH
7152: LD_STRING You won
7154: PUSH
7155: EMPTY
7156: LIST
7157: ST_TO_ADDR
7158: END
// every 100 trigger isEditor marked 400 do
7159: LD_OWVAR 84
7163: IFFALSE 7179
7165: GO 7167
7167: DISABLE
// Debug_Strings = [ You loss ] ;
7168: LD_ADDR_OWVAR 48
7172: PUSH
7173: LD_STRING You loss
7175: PUSH
7176: EMPTY
7177: LIST
7178: ST_TO_ADDR
7179: END
// every 100 marked 98 do var i , un ;
7180: GO 7182
7182: DISABLE
7183: LD_INT 0
7185: PPUSH
7186: PPUSH
// begin for i = 1 to side_positions do
7187: LD_ADDR_VAR 0 1
7191: PUSH
7192: DOUBLE
7193: LD_INT 1
7195: DEC
7196: ST_TO_ADDR
7197: LD_EXP 32
7201: PUSH
7202: FOR_TO
7203: IFFALSE 7290
// begin if side_positions [ i ] then
7205: LD_EXP 32
7209: PUSH
7210: LD_VAR 0 1
7214: ARRAY
7215: IFFALSE 7288
// if not HasPower ( i ) and not defeated [ i ] then
7217: LD_VAR 0 1
7221: PPUSH
7222: CALL 6525 0 1
7226: NOT
7227: PUSH
7228: LD_LOC 20
7232: PUSH
7233: LD_VAR 0 1
7237: ARRAY
7238: NOT
7239: AND
7240: IFFALSE 7288
// begin defeated = replace ( defeated , i , true ) ;
7242: LD_ADDR_LOC 20
7246: PUSH
7247: LD_LOC 20
7251: PPUSH
7252: LD_VAR 0 1
7256: PPUSH
7257: LD_INT 1
7259: PPUSH
7260: CALL_OW 1
7264: ST_TO_ADDR
// if i = mp_player_side then
7265: LD_VAR 0 1
7269: PUSH
7270: LD_OWVAR 7
7274: EQUAL
7275: IFFALSE 7288
// begin Multiplayer_Loose_Message ;
7277: CALL_OW 521
// SetPlayerSpectator ( ) ;
7281: CALL_OW 572
// enable ( 400 ) ;
7285: LD_INT 400
7287: ENABLE_MARKED
// end ; end ; end ;
7288: GO 7202
7290: POP
7291: POP
// DidGameEnd ;
7292: CALL 7307 0 0
// if not GameEnded then
7296: LD_LOC 21
7300: NOT
7301: IFFALSE 7304
// enable ;
7303: ENABLE
// end ;
7304: PPOPN 2
7306: END
// function DidGameEnd ; var i , k , enemy ; begin
7307: LD_INT 0
7309: PPUSH
7310: PPUSH
7311: PPUSH
7312: PPUSH
// enemy = [ ] ;
7313: LD_ADDR_VAR 0 4
7317: PUSH
7318: EMPTY
7319: ST_TO_ADDR
// for i = 1 to side_positions do
7320: LD_ADDR_VAR 0 2
7324: PUSH
7325: DOUBLE
7326: LD_INT 1
7328: DEC
7329: ST_TO_ADDR
7330: LD_EXP 32
7334: PUSH
7335: FOR_TO
7336: IFFALSE 7430
// if not defeated [ i ] then
7338: LD_LOC 20
7342: PUSH
7343: LD_VAR 0 2
7347: ARRAY
7348: NOT
7349: IFFALSE 7428
// for k = 1 to side_positions do
7351: LD_ADDR_VAR 0 3
7355: PUSH
7356: DOUBLE
7357: LD_INT 1
7359: DEC
7360: ST_TO_ADDR
7361: LD_EXP 32
7365: PUSH
7366: FOR_TO
7367: IFFALSE 7426
// if not defeated [ k ] then
7369: LD_LOC 20
7373: PUSH
7374: LD_VAR 0 3
7378: ARRAY
7379: NOT
7380: IFFALSE 7424
// if not AlliedSides ( i , k ) then
7382: LD_VAR 0 2
7386: PPUSH
7387: LD_VAR 0 3
7391: PPUSH
7392: CALL 6871 0 2
7396: NOT
7397: IFFALSE 7424
// enemy = enemy ^ [ i , k ] ;
7399: LD_ADDR_VAR 0 4
7403: PUSH
7404: LD_VAR 0 4
7408: PUSH
7409: LD_VAR 0 2
7413: PUSH
7414: LD_VAR 0 3
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: ADD
7423: ST_TO_ADDR
7424: GO 7366
7426: POP
7427: POP
7428: GO 7335
7430: POP
7431: POP
// if not enemy then
7432: LD_VAR 0 4
7436: NOT
7437: IFFALSE 7463
// begin GameEnded = true ;
7439: LD_ADDR_LOC 21
7443: PUSH
7444: LD_INT 1
7446: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
7447: LD_LOC 20
7451: PUSH
7452: LD_OWVAR 7
7456: ARRAY
7457: NOT
7458: IFFALSE 7463
// enable ( 401 ) ;
7460: LD_INT 401
7462: ENABLE_MARKED
// end ; end ;
7463: LD_VAR 0 1
7467: RET
// function unfog ; var k , friends ; begin
7468: LD_INT 0
7470: PPUSH
7471: PPUSH
7472: PPUSH
// for k = 1 to side_positions do
7473: LD_ADDR_VAR 0 2
7477: PUSH
7478: DOUBLE
7479: LD_INT 1
7481: DEC
7482: ST_TO_ADDR
7483: LD_EXP 32
7487: PUSH
7488: FOR_TO
7489: IFFALSE 7545
// if not defeated [ k ] then
7491: LD_LOC 20
7495: PUSH
7496: LD_VAR 0 2
7500: ARRAY
7501: NOT
7502: IFFALSE 7543
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
7504: LD_OWVAR 7
7508: PPUSH
7509: LD_VAR 0 2
7513: PPUSH
7514: CALL_OW 81
7518: PUSH
7519: LD_INT 1
7521: PUSH
7522: EMPTY
7523: LIST
7524: IN
7525: IFFALSE 7543
// friends = friends ^ k ;
7527: LD_ADDR_VAR 0 3
7531: PUSH
7532: LD_VAR 0 3
7536: PUSH
7537: LD_VAR 0 2
7541: ADD
7542: ST_TO_ADDR
7543: GO 7488
7545: POP
7546: POP
// if not friends then
7547: LD_VAR 0 3
7551: NOT
7552: IFFALSE 7566
// begin SetPlayerSpectator ( ) ;
7554: CALL_OW 572
// unfoged = true ;
7558: LD_ADDR_LOC 22
7562: PUSH
7563: LD_INT 1
7565: ST_TO_ADDR
// end ; end ;
7566: LD_VAR 0 1
7570: RET
// export function MakeGameEnd ; begin
7571: LD_INT 0
7573: PPUSH
// SetPlayerSpectator ( ) ;
7574: CALL_OW 572
// unfoged = true ;
7578: LD_ADDR_LOC 22
7582: PUSH
7583: LD_INT 1
7585: ST_TO_ADDR
// wait ( 0 0$5 ) ;
7586: LD_INT 175
7588: PPUSH
7589: CALL_OW 67
// GameEnded = true ;
7593: LD_ADDR_LOC 21
7597: PUSH
7598: LD_INT 1
7600: ST_TO_ADDR
// end ;
7601: LD_VAR 0 1
7605: RET
// export function GetGameEnded ; begin
7606: LD_INT 0
7608: PPUSH
// result = GameEnded ;
7609: LD_ADDR_VAR 0 1
7613: PUSH
7614: LD_LOC 21
7618: ST_TO_ADDR
// end ; end_of_file
7619: LD_VAR 0 1
7623: RET
// export function SetMpTechs ( ) ; var side , i ; begin
7624: LD_INT 0
7626: PPUSH
7627: PPUSH
7628: PPUSH
// for side = 1 to 8 do
7629: LD_ADDR_VAR 0 2
7633: PUSH
7634: DOUBLE
7635: LD_INT 1
7637: DEC
7638: ST_TO_ADDR
7639: LD_INT 8
7641: PUSH
7642: FOR_TO
7643: IFFALSE 7764
// begin for i = 1 to 72 do
7645: LD_ADDR_VAR 0 3
7649: PUSH
7650: DOUBLE
7651: LD_INT 1
7653: DEC
7654: ST_TO_ADDR
7655: LD_INT 72
7657: PUSH
7658: FOR_TO
7659: IFFALSE 7690
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
7661: LD_VAR 0 3
7665: PPUSH
7666: LD_VAR 0 2
7670: PPUSH
7671: LD_INT 0
7673: PPUSH
7674: LD_VAR 0 3
7678: PPUSH
7679: CALL_OW 565
7683: PPUSH
7684: CALL_OW 322
7688: GO 7658
7690: POP
7691: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
7692: LD_INT 73
7694: PPUSH
7695: LD_VAR 0 2
7699: PPUSH
7700: LD_INT 0
7702: PPUSH
7703: LD_INT 25
7705: PPUSH
7706: CALL_OW 565
7710: PPUSH
7711: CALL_OW 322
// for i = 0 to 40 do
7715: LD_ADDR_VAR 0 3
7719: PUSH
7720: DOUBLE
7721: LD_INT 0
7723: DEC
7724: ST_TO_ADDR
7725: LD_INT 40
7727: PUSH
7728: FOR_TO
7729: IFFALSE 7760
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
7731: LD_VAR 0 3
7735: PPUSH
7736: LD_VAR 0 2
7740: PPUSH
7741: LD_INT 1
7743: PPUSH
7744: LD_VAR 0 3
7748: PPUSH
7749: CALL_OW 565
7753: PPUSH
7754: CALL_OW 324
7758: GO 7728
7760: POP
7761: POP
// end ;
7762: GO 7642
7764: POP
7765: POP
// end ;
7766: LD_VAR 0 1
7770: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
7771: LD_INT 0
7773: PPUSH
7774: PPUSH
7775: PPUSH
// for side = 1 to 8 do
7776: LD_ADDR_VAR 0 3
7780: PUSH
7781: DOUBLE
7782: LD_INT 1
7784: DEC
7785: ST_TO_ADDR
7786: LD_INT 8
7788: PUSH
7789: FOR_TO
7790: IFFALSE 11786
// begin for i = 1 to 73 do
7792: LD_ADDR_VAR 0 4
7796: PUSH
7797: DOUBLE
7798: LD_INT 1
7800: DEC
7801: ST_TO_ADDR
7802: LD_INT 73
7804: PUSH
7805: FOR_TO
7806: IFFALSE 7827
// SetTech ( i , side , state_disabled ) ;
7808: LD_VAR 0 4
7812: PPUSH
7813: LD_VAR 0 3
7817: PPUSH
7818: LD_INT 0
7820: PPUSH
7821: CALL_OW 322
7825: GO 7805
7827: POP
7828: POP
// for i = 0 to 40 do
7829: LD_ADDR_VAR 0 4
7833: PUSH
7834: DOUBLE
7835: LD_INT 0
7837: DEC
7838: ST_TO_ADDR
7839: LD_INT 40
7841: PUSH
7842: FOR_TO
7843: IFFALSE 7864
// SetRestrict ( i , side , false ) ;
7845: LD_VAR 0 4
7849: PPUSH
7850: LD_VAR 0 3
7854: PPUSH
7855: LD_INT 0
7857: PPUSH
7858: CALL_OW 324
7862: GO 7842
7864: POP
7865: POP
// case level of 1 :
7866: LD_VAR 0 1
7870: PUSH
7871: LD_INT 1
7873: DOUBLE
7874: EQUAL
7875: IFTRUE 7879
7877: GO 8032
7879: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
7880: LD_INT 35
7882: PPUSH
7883: LD_VAR 0 3
7887: PPUSH
7888: LD_INT 1
7890: PPUSH
7891: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
7895: LD_INT 45
7897: PPUSH
7898: LD_VAR 0 3
7902: PPUSH
7903: LD_INT 1
7905: PPUSH
7906: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
7910: LD_INT 46
7912: PPUSH
7913: LD_VAR 0 3
7917: PPUSH
7918: LD_INT 1
7920: PPUSH
7921: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
7925: LD_INT 47
7927: PPUSH
7928: LD_VAR 0 3
7932: PPUSH
7933: LD_INT 1
7935: PPUSH
7936: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
7940: LD_INT 0
7942: PPUSH
7943: LD_VAR 0 3
7947: PPUSH
7948: LD_INT 1
7950: PPUSH
7951: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
7955: LD_INT 2
7957: PPUSH
7958: LD_VAR 0 3
7962: PPUSH
7963: LD_INT 1
7965: PPUSH
7966: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
7970: LD_INT 4
7972: PPUSH
7973: LD_VAR 0 3
7977: PPUSH
7978: LD_INT 1
7980: PPUSH
7981: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
7985: LD_INT 6
7987: PPUSH
7988: LD_VAR 0 3
7992: PPUSH
7993: LD_INT 1
7995: PPUSH
7996: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8000: LD_INT 29
8002: PPUSH
8003: LD_VAR 0 3
8007: PPUSH
8008: LD_INT 1
8010: PPUSH
8011: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8015: LD_INT 31
8017: PPUSH
8018: LD_VAR 0 3
8022: PPUSH
8023: LD_INT 1
8025: PPUSH
8026: CALL_OW 324
// end ; 2 :
8030: GO 11784
8032: LD_INT 2
8034: DOUBLE
8035: EQUAL
8036: IFTRUE 8040
8038: GO 8238
8040: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8041: LD_INT 35
8043: PPUSH
8044: LD_VAR 0 3
8048: PPUSH
8049: LD_INT 1
8051: PPUSH
8052: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8056: LD_INT 45
8058: PPUSH
8059: LD_VAR 0 3
8063: PPUSH
8064: LD_INT 1
8066: PPUSH
8067: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8071: LD_INT 46
8073: PPUSH
8074: LD_VAR 0 3
8078: PPUSH
8079: LD_INT 1
8081: PPUSH
8082: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8086: LD_INT 47
8088: PPUSH
8089: LD_VAR 0 3
8093: PPUSH
8094: LD_INT 1
8096: PPUSH
8097: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8101: LD_INT 1
8103: PPUSH
8104: LD_VAR 0 3
8108: PPUSH
8109: LD_INT 1
8111: PPUSH
8112: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8116: LD_INT 2
8118: PPUSH
8119: LD_VAR 0 3
8123: PPUSH
8124: LD_INT 1
8126: PPUSH
8127: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8131: LD_INT 11
8133: PPUSH
8134: LD_VAR 0 3
8138: PPUSH
8139: LD_INT 1
8141: PPUSH
8142: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8146: LD_INT 0
8148: PPUSH
8149: LD_VAR 0 3
8153: PPUSH
8154: LD_INT 1
8156: PPUSH
8157: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8161: LD_INT 2
8163: PPUSH
8164: LD_VAR 0 3
8168: PPUSH
8169: LD_INT 1
8171: PPUSH
8172: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8176: LD_INT 4
8178: PPUSH
8179: LD_VAR 0 3
8183: PPUSH
8184: LD_INT 1
8186: PPUSH
8187: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8191: LD_INT 6
8193: PPUSH
8194: LD_VAR 0 3
8198: PPUSH
8199: LD_INT 1
8201: PPUSH
8202: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8206: LD_INT 29
8208: PPUSH
8209: LD_VAR 0 3
8213: PPUSH
8214: LD_INT 1
8216: PPUSH
8217: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8221: LD_INT 31
8223: PPUSH
8224: LD_VAR 0 3
8228: PPUSH
8229: LD_INT 1
8231: PPUSH
8232: CALL_OW 324
// end ; 3 :
8236: GO 11784
8238: LD_INT 3
8240: DOUBLE
8241: EQUAL
8242: IFTRUE 8246
8244: GO 8699
8246: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8247: LD_INT 35
8249: PPUSH
8250: LD_VAR 0 3
8254: PPUSH
8255: LD_INT 1
8257: PPUSH
8258: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8262: LD_INT 45
8264: PPUSH
8265: LD_VAR 0 3
8269: PPUSH
8270: LD_INT 1
8272: PPUSH
8273: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8277: LD_INT 46
8279: PPUSH
8280: LD_VAR 0 3
8284: PPUSH
8285: LD_INT 1
8287: PPUSH
8288: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8292: LD_INT 47
8294: PPUSH
8295: LD_VAR 0 3
8299: PPUSH
8300: LD_INT 1
8302: PPUSH
8303: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8307: LD_INT 1
8309: PPUSH
8310: LD_VAR 0 3
8314: PPUSH
8315: LD_INT 1
8317: PPUSH
8318: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8322: LD_INT 2
8324: PPUSH
8325: LD_VAR 0 3
8329: PPUSH
8330: LD_INT 1
8332: PPUSH
8333: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8337: LD_INT 11
8339: PPUSH
8340: LD_VAR 0 3
8344: PPUSH
8345: LD_INT 1
8347: PPUSH
8348: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
8352: LD_INT 48
8354: PPUSH
8355: LD_VAR 0 3
8359: PPUSH
8360: LD_INT 1
8362: PPUSH
8363: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
8367: LD_INT 69
8369: PPUSH
8370: LD_VAR 0 3
8374: PPUSH
8375: LD_INT 1
8377: PPUSH
8378: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
8382: LD_INT 39
8384: PPUSH
8385: LD_VAR 0 3
8389: PPUSH
8390: LD_INT 1
8392: PPUSH
8393: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
8397: LD_INT 43
8399: PPUSH
8400: LD_VAR 0 3
8404: PPUSH
8405: LD_INT 1
8407: PPUSH
8408: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
8412: LD_INT 51
8414: PPUSH
8415: LD_VAR 0 3
8419: PPUSH
8420: LD_INT 1
8422: PPUSH
8423: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
8427: LD_INT 6
8429: PPUSH
8430: LD_VAR 0 3
8434: PPUSH
8435: LD_INT 1
8437: PPUSH
8438: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8442: LD_INT 0
8444: PPUSH
8445: LD_VAR 0 3
8449: PPUSH
8450: LD_INT 1
8452: PPUSH
8453: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8457: LD_INT 2
8459: PPUSH
8460: LD_VAR 0 3
8464: PPUSH
8465: LD_INT 1
8467: PPUSH
8468: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
8472: LD_INT 3
8474: PPUSH
8475: LD_VAR 0 3
8479: PPUSH
8480: LD_INT 1
8482: PPUSH
8483: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8487: LD_INT 4
8489: PPUSH
8490: LD_VAR 0 3
8494: PPUSH
8495: LD_INT 1
8497: PPUSH
8498: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8502: LD_INT 6
8504: PPUSH
8505: LD_VAR 0 3
8509: PPUSH
8510: LD_INT 1
8512: PPUSH
8513: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
8517: LD_INT 7
8519: PPUSH
8520: LD_VAR 0 3
8524: PPUSH
8525: LD_INT 1
8527: PPUSH
8528: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
8532: LD_INT 8
8534: PPUSH
8535: LD_VAR 0 3
8539: PPUSH
8540: LD_INT 1
8542: PPUSH
8543: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
8547: LD_INT 10
8549: PPUSH
8550: LD_VAR 0 3
8554: PPUSH
8555: LD_INT 1
8557: PPUSH
8558: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
8562: LD_INT 15
8564: PPUSH
8565: LD_VAR 0 3
8569: PPUSH
8570: LD_INT 1
8572: PPUSH
8573: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
8577: LD_INT 16
8579: PPUSH
8580: LD_VAR 0 3
8584: PPUSH
8585: LD_INT 1
8587: PPUSH
8588: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
8592: LD_INT 17
8594: PPUSH
8595: LD_VAR 0 3
8599: PPUSH
8600: LD_INT 1
8602: PPUSH
8603: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
8607: LD_INT 20
8609: PPUSH
8610: LD_VAR 0 3
8614: PPUSH
8615: LD_INT 1
8617: PPUSH
8618: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
8622: LD_INT 26
8624: PPUSH
8625: LD_VAR 0 3
8629: PPUSH
8630: LD_INT 1
8632: PPUSH
8633: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
8637: LD_INT 27
8639: PPUSH
8640: LD_VAR 0 3
8644: PPUSH
8645: LD_INT 1
8647: PPUSH
8648: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8652: LD_INT 29
8654: PPUSH
8655: LD_VAR 0 3
8659: PPUSH
8660: LD_INT 1
8662: PPUSH
8663: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8667: LD_INT 31
8669: PPUSH
8670: LD_VAR 0 3
8674: PPUSH
8675: LD_INT 1
8677: PPUSH
8678: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
8682: LD_INT 32
8684: PPUSH
8685: LD_VAR 0 3
8689: PPUSH
8690: LD_INT 1
8692: PPUSH
8693: CALL_OW 324
// end ; 4 :
8697: GO 11784
8699: LD_INT 4
8701: DOUBLE
8702: EQUAL
8703: IFTRUE 8707
8705: GO 9655
8707: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8708: LD_INT 35
8710: PPUSH
8711: LD_VAR 0 3
8715: PPUSH
8716: LD_INT 1
8718: PPUSH
8719: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8723: LD_INT 45
8725: PPUSH
8726: LD_VAR 0 3
8730: PPUSH
8731: LD_INT 1
8733: PPUSH
8734: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8738: LD_INT 46
8740: PPUSH
8741: LD_VAR 0 3
8745: PPUSH
8746: LD_INT 1
8748: PPUSH
8749: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8753: LD_INT 47
8755: PPUSH
8756: LD_VAR 0 3
8760: PPUSH
8761: LD_INT 1
8763: PPUSH
8764: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8768: LD_INT 1
8770: PPUSH
8771: LD_VAR 0 3
8775: PPUSH
8776: LD_INT 1
8778: PPUSH
8779: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8783: LD_INT 2
8785: PPUSH
8786: LD_VAR 0 3
8790: PPUSH
8791: LD_INT 1
8793: PPUSH
8794: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8798: LD_INT 11
8800: PPUSH
8801: LD_VAR 0 3
8805: PPUSH
8806: LD_INT 1
8808: PPUSH
8809: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
8813: LD_INT 20
8815: PPUSH
8816: LD_VAR 0 3
8820: PPUSH
8821: LD_INT 1
8823: PPUSH
8824: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
8828: LD_INT 48
8830: PPUSH
8831: LD_VAR 0 3
8835: PPUSH
8836: LD_INT 1
8838: PPUSH
8839: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
8843: LD_INT 49
8845: PPUSH
8846: LD_VAR 0 3
8850: PPUSH
8851: LD_INT 1
8853: PPUSH
8854: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
8858: LD_INT 69
8860: PPUSH
8861: LD_VAR 0 3
8865: PPUSH
8866: LD_INT 1
8868: PPUSH
8869: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
8873: LD_INT 39
8875: PPUSH
8876: LD_VAR 0 3
8880: PPUSH
8881: LD_INT 1
8883: PPUSH
8884: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
8888: LD_INT 34
8890: PPUSH
8891: LD_VAR 0 3
8895: PPUSH
8896: LD_INT 1
8898: PPUSH
8899: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
8903: LD_INT 42
8905: PPUSH
8906: LD_VAR 0 3
8910: PPUSH
8911: LD_INT 1
8913: PPUSH
8914: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
8918: LD_INT 44
8920: PPUSH
8921: LD_VAR 0 3
8925: PPUSH
8926: LD_INT 1
8928: PPUSH
8929: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
8933: LD_INT 41
8935: PPUSH
8936: LD_VAR 0 3
8940: PPUSH
8941: LD_INT 1
8943: PPUSH
8944: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
8948: LD_INT 43
8950: PPUSH
8951: LD_VAR 0 3
8955: PPUSH
8956: LD_INT 1
8958: PPUSH
8959: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
8963: LD_INT 70
8965: PPUSH
8966: LD_VAR 0 3
8970: PPUSH
8971: LD_INT 1
8973: PPUSH
8974: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
8978: LD_INT 51
8980: PPUSH
8981: LD_VAR 0 3
8985: PPUSH
8986: LD_INT 1
8988: PPUSH
8989: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
8993: LD_INT 52
8995: PPUSH
8996: LD_VAR 0 3
9000: PPUSH
9001: LD_INT 1
9003: PPUSH
9004: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9008: LD_INT 6
9010: PPUSH
9011: LD_VAR 0 3
9015: PPUSH
9016: LD_INT 1
9018: PPUSH
9019: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9023: LD_INT 15
9025: PPUSH
9026: LD_VAR 0 3
9030: PPUSH
9031: LD_INT 1
9033: PPUSH
9034: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
9038: LD_INT 7
9040: PPUSH
9041: LD_VAR 0 3
9045: PPUSH
9046: LD_INT 1
9048: PPUSH
9049: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
9053: LD_INT 12
9055: PPUSH
9056: LD_VAR 0 3
9060: PPUSH
9061: LD_INT 1
9063: PPUSH
9064: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
9068: LD_INT 18
9070: PPUSH
9071: LD_VAR 0 3
9075: PPUSH
9076: LD_INT 1
9078: PPUSH
9079: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
9083: LD_INT 60
9085: PPUSH
9086: LD_VAR 0 3
9090: PPUSH
9091: LD_INT 1
9093: PPUSH
9094: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
9098: LD_INT 9
9100: PPUSH
9101: LD_VAR 0 3
9105: PPUSH
9106: LD_INT 1
9108: PPUSH
9109: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
9113: LD_INT 30
9115: PPUSH
9116: LD_VAR 0 3
9120: PPUSH
9121: LD_INT 1
9123: PPUSH
9124: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
9128: LD_INT 37
9130: PPUSH
9131: LD_VAR 0 3
9135: PPUSH
9136: LD_INT 1
9138: PPUSH
9139: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
9143: LD_INT 5
9145: PPUSH
9146: LD_VAR 0 3
9150: PPUSH
9151: LD_INT 1
9153: PPUSH
9154: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
9158: LD_INT 66
9160: PPUSH
9161: LD_VAR 0 3
9165: PPUSH
9166: LD_INT 1
9168: PPUSH
9169: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
9173: LD_INT 21
9175: PPUSH
9176: LD_VAR 0 3
9180: PPUSH
9181: LD_INT 1
9183: PPUSH
9184: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
9188: LD_INT 22
9190: PPUSH
9191: LD_VAR 0 3
9195: PPUSH
9196: LD_INT 1
9198: PPUSH
9199: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
9203: LD_INT 54
9205: PPUSH
9206: LD_VAR 0 3
9210: PPUSH
9211: LD_INT 1
9213: PPUSH
9214: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9218: LD_INT 0
9220: PPUSH
9221: LD_VAR 0 3
9225: PPUSH
9226: LD_INT 1
9228: PPUSH
9229: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
9233: LD_INT 1
9235: PPUSH
9236: LD_VAR 0 3
9240: PPUSH
9241: LD_INT 1
9243: PPUSH
9244: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9248: LD_INT 2
9250: PPUSH
9251: LD_VAR 0 3
9255: PPUSH
9256: LD_INT 1
9258: PPUSH
9259: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9263: LD_INT 3
9265: PPUSH
9266: LD_VAR 0 3
9270: PPUSH
9271: LD_INT 1
9273: PPUSH
9274: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9278: LD_INT 4
9280: PPUSH
9281: LD_VAR 0 3
9285: PPUSH
9286: LD_INT 1
9288: PPUSH
9289: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
9293: LD_INT 5
9295: PPUSH
9296: LD_VAR 0 3
9300: PPUSH
9301: LD_INT 1
9303: PPUSH
9304: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9308: LD_INT 6
9310: PPUSH
9311: LD_VAR 0 3
9315: PPUSH
9316: LD_INT 1
9318: PPUSH
9319: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9323: LD_INT 7
9325: PPUSH
9326: LD_VAR 0 3
9330: PPUSH
9331: LD_INT 1
9333: PPUSH
9334: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9338: LD_INT 8
9340: PPUSH
9341: LD_VAR 0 3
9345: PPUSH
9346: LD_INT 1
9348: PPUSH
9349: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9353: LD_INT 10
9355: PPUSH
9356: LD_VAR 0 3
9360: PPUSH
9361: LD_INT 1
9363: PPUSH
9364: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
9368: LD_INT 11
9370: PPUSH
9371: LD_VAR 0 3
9375: PPUSH
9376: LD_INT 1
9378: PPUSH
9379: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
9383: LD_INT 12
9385: PPUSH
9386: LD_VAR 0 3
9390: PPUSH
9391: LD_INT 1
9393: PPUSH
9394: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
9398: LD_INT 13
9400: PPUSH
9401: LD_VAR 0 3
9405: PPUSH
9406: LD_INT 1
9408: PPUSH
9409: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
9413: LD_INT 14
9415: PPUSH
9416: LD_VAR 0 3
9420: PPUSH
9421: LD_INT 1
9423: PPUSH
9424: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9428: LD_INT 15
9430: PPUSH
9431: LD_VAR 0 3
9435: PPUSH
9436: LD_INT 1
9438: PPUSH
9439: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9443: LD_INT 16
9445: PPUSH
9446: LD_VAR 0 3
9450: PPUSH
9451: LD_INT 1
9453: PPUSH
9454: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9458: LD_INT 17
9460: PPUSH
9461: LD_VAR 0 3
9465: PPUSH
9466: LD_INT 1
9468: PPUSH
9469: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
9473: LD_INT 19
9475: PPUSH
9476: LD_VAR 0 3
9480: PPUSH
9481: LD_INT 1
9483: PPUSH
9484: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9488: LD_INT 20
9490: PPUSH
9491: LD_VAR 0 3
9495: PPUSH
9496: LD_INT 1
9498: PPUSH
9499: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
9503: LD_INT 21
9505: PPUSH
9506: LD_VAR 0 3
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
9518: LD_INT 23
9520: PPUSH
9521: LD_VAR 0 3
9525: PPUSH
9526: LD_INT 1
9528: PPUSH
9529: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9533: LD_INT 26
9535: PPUSH
9536: LD_VAR 0 3
9540: PPUSH
9541: LD_INT 1
9543: PPUSH
9544: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9548: LD_INT 27
9550: PPUSH
9551: LD_VAR 0 3
9555: PPUSH
9556: LD_INT 1
9558: PPUSH
9559: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
9563: LD_INT 28
9565: PPUSH
9566: LD_VAR 0 3
9570: PPUSH
9571: LD_INT 1
9573: PPUSH
9574: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9578: LD_INT 29
9580: PPUSH
9581: LD_VAR 0 3
9585: PPUSH
9586: LD_INT 1
9588: PPUSH
9589: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
9593: LD_INT 30
9595: PPUSH
9596: LD_VAR 0 3
9600: PPUSH
9601: LD_INT 1
9603: PPUSH
9604: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9608: LD_INT 31
9610: PPUSH
9611: LD_VAR 0 3
9615: PPUSH
9616: LD_INT 1
9618: PPUSH
9619: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9623: LD_INT 32
9625: PPUSH
9626: LD_VAR 0 3
9630: PPUSH
9631: LD_INT 1
9633: PPUSH
9634: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
9638: LD_INT 36
9640: PPUSH
9641: LD_VAR 0 3
9645: PPUSH
9646: LD_INT 1
9648: PPUSH
9649: CALL_OW 324
// end ; 5 :
9653: GO 11784
9655: LD_INT 5
9657: DOUBLE
9658: EQUAL
9659: IFTRUE 9663
9661: GO 10776
9663: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9664: LD_INT 35
9666: PPUSH
9667: LD_VAR 0 3
9671: PPUSH
9672: LD_INT 1
9674: PPUSH
9675: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9679: LD_INT 45
9681: PPUSH
9682: LD_VAR 0 3
9686: PPUSH
9687: LD_INT 1
9689: PPUSH
9690: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9694: LD_INT 46
9696: PPUSH
9697: LD_VAR 0 3
9701: PPUSH
9702: LD_INT 1
9704: PPUSH
9705: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9709: LD_INT 47
9711: PPUSH
9712: LD_VAR 0 3
9716: PPUSH
9717: LD_INT 1
9719: PPUSH
9720: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9724: LD_INT 1
9726: PPUSH
9727: LD_VAR 0 3
9731: PPUSH
9732: LD_INT 1
9734: PPUSH
9735: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9739: LD_INT 2
9741: PPUSH
9742: LD_VAR 0 3
9746: PPUSH
9747: LD_INT 1
9749: PPUSH
9750: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9754: LD_INT 11
9756: PPUSH
9757: LD_VAR 0 3
9761: PPUSH
9762: LD_INT 1
9764: PPUSH
9765: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9769: LD_INT 20
9771: PPUSH
9772: LD_VAR 0 3
9776: PPUSH
9777: LD_INT 1
9779: PPUSH
9780: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9784: LD_INT 48
9786: PPUSH
9787: LD_VAR 0 3
9791: PPUSH
9792: LD_INT 1
9794: PPUSH
9795: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9799: LD_INT 49
9801: PPUSH
9802: LD_VAR 0 3
9806: PPUSH
9807: LD_INT 1
9809: PPUSH
9810: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9814: LD_INT 69
9816: PPUSH
9817: LD_VAR 0 3
9821: PPUSH
9822: LD_INT 1
9824: PPUSH
9825: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9829: LD_INT 39
9831: PPUSH
9832: LD_VAR 0 3
9836: PPUSH
9837: LD_INT 1
9839: PPUSH
9840: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9844: LD_INT 34
9846: PPUSH
9847: LD_VAR 0 3
9851: PPUSH
9852: LD_INT 1
9854: PPUSH
9855: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
9859: LD_INT 42
9861: PPUSH
9862: LD_VAR 0 3
9866: PPUSH
9867: LD_INT 1
9869: PPUSH
9870: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
9874: LD_INT 44
9876: PPUSH
9877: LD_VAR 0 3
9881: PPUSH
9882: LD_INT 1
9884: PPUSH
9885: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
9889: LD_INT 41
9891: PPUSH
9892: LD_VAR 0 3
9896: PPUSH
9897: LD_INT 1
9899: PPUSH
9900: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
9904: LD_INT 40
9906: PPUSH
9907: LD_VAR 0 3
9911: PPUSH
9912: LD_INT 1
9914: PPUSH
9915: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9919: LD_INT 43
9921: PPUSH
9922: LD_VAR 0 3
9926: PPUSH
9927: LD_INT 1
9929: PPUSH
9930: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
9934: LD_INT 70
9936: PPUSH
9937: LD_VAR 0 3
9941: PPUSH
9942: LD_INT 1
9944: PPUSH
9945: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9949: LD_INT 51
9951: PPUSH
9952: LD_VAR 0 3
9956: PPUSH
9957: LD_INT 1
9959: PPUSH
9960: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
9964: LD_INT 52
9966: PPUSH
9967: LD_VAR 0 3
9971: PPUSH
9972: LD_INT 1
9974: PPUSH
9975: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9979: LD_INT 6
9981: PPUSH
9982: LD_VAR 0 3
9986: PPUSH
9987: LD_INT 1
9989: PPUSH
9990: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9994: LD_INT 15
9996: PPUSH
9997: LD_VAR 0 3
10001: PPUSH
10002: LD_INT 1
10004: PPUSH
10005: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10009: LD_INT 7
10011: PPUSH
10012: LD_VAR 0 3
10016: PPUSH
10017: LD_INT 1
10019: PPUSH
10020: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10024: LD_INT 12
10026: PPUSH
10027: LD_VAR 0 3
10031: PPUSH
10032: LD_INT 1
10034: PPUSH
10035: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
10039: LD_INT 17
10041: PPUSH
10042: LD_VAR 0 3
10046: PPUSH
10047: LD_INT 1
10049: PPUSH
10050: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10054: LD_INT 18
10056: PPUSH
10057: LD_VAR 0 3
10061: PPUSH
10062: LD_INT 1
10064: PPUSH
10065: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10069: LD_INT 60
10071: PPUSH
10072: LD_VAR 0 3
10076: PPUSH
10077: LD_INT 1
10079: PPUSH
10080: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
10084: LD_INT 32
10086: PPUSH
10087: LD_VAR 0 3
10091: PPUSH
10092: LD_INT 1
10094: PPUSH
10095: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10099: LD_INT 9
10101: PPUSH
10102: LD_VAR 0 3
10106: PPUSH
10107: LD_INT 1
10109: PPUSH
10110: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
10114: LD_INT 57
10116: PPUSH
10117: LD_VAR 0 3
10121: PPUSH
10122: LD_INT 1
10124: PPUSH
10125: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10129: LD_INT 30
10131: PPUSH
10132: LD_VAR 0 3
10136: PPUSH
10137: LD_INT 1
10139: PPUSH
10140: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10144: LD_INT 37
10146: PPUSH
10147: LD_VAR 0 3
10151: PPUSH
10152: LD_INT 1
10154: PPUSH
10155: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
10159: LD_INT 63
10161: PPUSH
10162: LD_VAR 0 3
10166: PPUSH
10167: LD_INT 1
10169: PPUSH
10170: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
10174: LD_INT 3
10176: PPUSH
10177: LD_VAR 0 3
10181: PPUSH
10182: LD_INT 1
10184: PPUSH
10185: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
10189: LD_INT 4
10191: PPUSH
10192: LD_VAR 0 3
10196: PPUSH
10197: LD_INT 1
10199: PPUSH
10200: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10204: LD_INT 5
10206: PPUSH
10207: LD_VAR 0 3
10211: PPUSH
10212: LD_INT 1
10214: PPUSH
10215: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10219: LD_INT 66
10221: PPUSH
10222: LD_VAR 0 3
10226: PPUSH
10227: LD_INT 1
10229: PPUSH
10230: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10234: LD_INT 21
10236: PPUSH
10237: LD_VAR 0 3
10241: PPUSH
10242: LD_INT 1
10244: PPUSH
10245: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10249: LD_INT 22
10251: PPUSH
10252: LD_VAR 0 3
10256: PPUSH
10257: LD_INT 1
10259: PPUSH
10260: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
10264: LD_INT 19
10266: PPUSH
10267: LD_VAR 0 3
10271: PPUSH
10272: LD_INT 1
10274: PPUSH
10275: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10279: LD_INT 54
10281: PPUSH
10282: LD_VAR 0 3
10286: PPUSH
10287: LD_INT 1
10289: PPUSH
10290: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
10294: LD_INT 55
10296: PPUSH
10297: LD_VAR 0 3
10301: PPUSH
10302: LD_INT 1
10304: PPUSH
10305: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10309: LD_INT 0
10311: PPUSH
10312: LD_VAR 0 3
10316: PPUSH
10317: LD_INT 1
10319: PPUSH
10320: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10324: LD_INT 1
10326: PPUSH
10327: LD_VAR 0 3
10331: PPUSH
10332: LD_INT 1
10334: PPUSH
10335: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10339: LD_INT 2
10341: PPUSH
10342: LD_VAR 0 3
10346: PPUSH
10347: LD_INT 1
10349: PPUSH
10350: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10354: LD_INT 3
10356: PPUSH
10357: LD_VAR 0 3
10361: PPUSH
10362: LD_INT 1
10364: PPUSH
10365: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10369: LD_INT 4
10371: PPUSH
10372: LD_VAR 0 3
10376: PPUSH
10377: LD_INT 1
10379: PPUSH
10380: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10384: LD_INT 5
10386: PPUSH
10387: LD_VAR 0 3
10391: PPUSH
10392: LD_INT 1
10394: PPUSH
10395: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10399: LD_INT 6
10401: PPUSH
10402: LD_VAR 0 3
10406: PPUSH
10407: LD_INT 1
10409: PPUSH
10410: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10414: LD_INT 7
10416: PPUSH
10417: LD_VAR 0 3
10421: PPUSH
10422: LD_INT 1
10424: PPUSH
10425: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10429: LD_INT 8
10431: PPUSH
10432: LD_VAR 0 3
10436: PPUSH
10437: LD_INT 1
10439: PPUSH
10440: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10444: LD_INT 10
10446: PPUSH
10447: LD_VAR 0 3
10451: PPUSH
10452: LD_INT 1
10454: PPUSH
10455: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10459: LD_INT 11
10461: PPUSH
10462: LD_VAR 0 3
10466: PPUSH
10467: LD_INT 1
10469: PPUSH
10470: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10474: LD_INT 12
10476: PPUSH
10477: LD_VAR 0 3
10481: PPUSH
10482: LD_INT 1
10484: PPUSH
10485: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10489: LD_INT 13
10491: PPUSH
10492: LD_VAR 0 3
10496: PPUSH
10497: LD_INT 1
10499: PPUSH
10500: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10504: LD_INT 14
10506: PPUSH
10507: LD_VAR 0 3
10511: PPUSH
10512: LD_INT 1
10514: PPUSH
10515: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10519: LD_INT 15
10521: PPUSH
10522: LD_VAR 0 3
10526: PPUSH
10527: LD_INT 1
10529: PPUSH
10530: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10534: LD_INT 16
10536: PPUSH
10537: LD_VAR 0 3
10541: PPUSH
10542: LD_INT 1
10544: PPUSH
10545: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10549: LD_INT 17
10551: PPUSH
10552: LD_VAR 0 3
10556: PPUSH
10557: LD_INT 1
10559: PPUSH
10560: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
10564: LD_INT 18
10566: PPUSH
10567: LD_VAR 0 3
10571: PPUSH
10572: LD_INT 1
10574: PPUSH
10575: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10579: LD_INT 19
10581: PPUSH
10582: LD_VAR 0 3
10586: PPUSH
10587: LD_INT 1
10589: PPUSH
10590: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10594: LD_INT 20
10596: PPUSH
10597: LD_VAR 0 3
10601: PPUSH
10602: LD_INT 1
10604: PPUSH
10605: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10609: LD_INT 21
10611: PPUSH
10612: LD_VAR 0 3
10616: PPUSH
10617: LD_INT 1
10619: PPUSH
10620: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10624: LD_INT 23
10626: PPUSH
10627: LD_VAR 0 3
10631: PPUSH
10632: LD_INT 1
10634: PPUSH
10635: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10639: LD_INT 26
10641: PPUSH
10642: LD_VAR 0 3
10646: PPUSH
10647: LD_INT 1
10649: PPUSH
10650: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10654: LD_INT 27
10656: PPUSH
10657: LD_VAR 0 3
10661: PPUSH
10662: LD_INT 1
10664: PPUSH
10665: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10669: LD_INT 28
10671: PPUSH
10672: LD_VAR 0 3
10676: PPUSH
10677: LD_INT 1
10679: PPUSH
10680: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10684: LD_INT 29
10686: PPUSH
10687: LD_VAR 0 3
10691: PPUSH
10692: LD_INT 1
10694: PPUSH
10695: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10699: LD_INT 30
10701: PPUSH
10702: LD_VAR 0 3
10706: PPUSH
10707: LD_INT 1
10709: PPUSH
10710: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10714: LD_INT 31
10716: PPUSH
10717: LD_VAR 0 3
10721: PPUSH
10722: LD_INT 1
10724: PPUSH
10725: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10729: LD_INT 32
10731: PPUSH
10732: LD_VAR 0 3
10736: PPUSH
10737: LD_INT 1
10739: PPUSH
10740: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
10744: LD_INT 33
10746: PPUSH
10747: LD_VAR 0 3
10751: PPUSH
10752: LD_INT 1
10754: PPUSH
10755: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10759: LD_INT 36
10761: PPUSH
10762: LD_VAR 0 3
10766: PPUSH
10767: LD_INT 1
10769: PPUSH
10770: CALL_OW 324
// end ; 6 :
10774: GO 11784
10776: LD_INT 6
10778: DOUBLE
10779: EQUAL
10780: IFTRUE 10784
10782: GO 11709
10784: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10785: LD_INT 35
10787: PPUSH
10788: LD_VAR 0 3
10792: PPUSH
10793: LD_INT 1
10795: PPUSH
10796: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10800: LD_INT 45
10802: PPUSH
10803: LD_VAR 0 3
10807: PPUSH
10808: LD_INT 1
10810: PPUSH
10811: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10815: LD_INT 46
10817: PPUSH
10818: LD_VAR 0 3
10822: PPUSH
10823: LD_INT 1
10825: PPUSH
10826: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10830: LD_INT 47
10832: PPUSH
10833: LD_VAR 0 3
10837: PPUSH
10838: LD_INT 1
10840: PPUSH
10841: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10845: LD_INT 1
10847: PPUSH
10848: LD_VAR 0 3
10852: PPUSH
10853: LD_INT 1
10855: PPUSH
10856: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10860: LD_INT 2
10862: PPUSH
10863: LD_VAR 0 3
10867: PPUSH
10868: LD_INT 1
10870: PPUSH
10871: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10875: LD_INT 11
10877: PPUSH
10878: LD_VAR 0 3
10882: PPUSH
10883: LD_INT 1
10885: PPUSH
10886: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10890: LD_INT 20
10892: PPUSH
10893: LD_VAR 0 3
10897: PPUSH
10898: LD_INT 1
10900: PPUSH
10901: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10905: LD_INT 48
10907: PPUSH
10908: LD_VAR 0 3
10912: PPUSH
10913: LD_INT 1
10915: PPUSH
10916: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10920: LD_INT 49
10922: PPUSH
10923: LD_VAR 0 3
10927: PPUSH
10928: LD_INT 1
10930: PPUSH
10931: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
10935: LD_INT 50
10937: PPUSH
10938: LD_VAR 0 3
10942: PPUSH
10943: LD_INT 1
10945: PPUSH
10946: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10950: LD_INT 69
10952: PPUSH
10953: LD_VAR 0 3
10957: PPUSH
10958: LD_INT 1
10960: PPUSH
10961: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10965: LD_INT 39
10967: PPUSH
10968: LD_VAR 0 3
10972: PPUSH
10973: LD_INT 1
10975: PPUSH
10976: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10980: LD_INT 34
10982: PPUSH
10983: LD_VAR 0 3
10987: PPUSH
10988: LD_INT 1
10990: PPUSH
10991: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10995: LD_INT 42
10997: PPUSH
10998: LD_VAR 0 3
11002: PPUSH
11003: LD_INT 1
11005: PPUSH
11006: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11010: LD_INT 44
11012: PPUSH
11013: LD_VAR 0 3
11017: PPUSH
11018: LD_INT 1
11020: PPUSH
11021: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11025: LD_INT 41
11027: PPUSH
11028: LD_VAR 0 3
11032: PPUSH
11033: LD_INT 1
11035: PPUSH
11036: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
11040: LD_INT 13
11042: PPUSH
11043: LD_VAR 0 3
11047: PPUSH
11048: LD_INT 1
11050: PPUSH
11051: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11055: LD_INT 40
11057: PPUSH
11058: LD_VAR 0 3
11062: PPUSH
11063: LD_INT 1
11065: PPUSH
11066: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11070: LD_INT 43
11072: PPUSH
11073: LD_VAR 0 3
11077: PPUSH
11078: LD_INT 1
11080: PPUSH
11081: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11085: LD_INT 70
11087: PPUSH
11088: LD_VAR 0 3
11092: PPUSH
11093: LD_INT 1
11095: PPUSH
11096: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
11100: LD_INT 23
11102: PPUSH
11103: LD_VAR 0 3
11107: PPUSH
11108: LD_INT 1
11110: PPUSH
11111: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11115: LD_INT 51
11117: PPUSH
11118: LD_VAR 0 3
11122: PPUSH
11123: LD_INT 1
11125: PPUSH
11126: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11130: LD_INT 52
11132: PPUSH
11133: LD_VAR 0 3
11137: PPUSH
11138: LD_INT 1
11140: PPUSH
11141: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11145: LD_INT 6
11147: PPUSH
11148: LD_VAR 0 3
11152: PPUSH
11153: LD_INT 1
11155: PPUSH
11156: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11160: LD_INT 15
11162: PPUSH
11163: LD_VAR 0 3
11167: PPUSH
11168: LD_INT 1
11170: PPUSH
11171: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11175: LD_INT 7
11177: PPUSH
11178: LD_VAR 0 3
11182: PPUSH
11183: LD_INT 1
11185: PPUSH
11186: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11190: LD_INT 12
11192: PPUSH
11193: LD_VAR 0 3
11197: PPUSH
11198: LD_INT 1
11200: PPUSH
11201: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
11205: LD_INT 10
11207: PPUSH
11208: LD_VAR 0 3
11212: PPUSH
11213: LD_INT 1
11215: PPUSH
11216: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11220: LD_INT 17
11222: PPUSH
11223: LD_VAR 0 3
11227: PPUSH
11228: LD_INT 1
11230: PPUSH
11231: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11235: LD_INT 18
11237: PPUSH
11238: LD_VAR 0 3
11242: PPUSH
11243: LD_INT 1
11245: PPUSH
11246: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11250: LD_INT 60
11252: PPUSH
11253: LD_VAR 0 3
11257: PPUSH
11258: LD_INT 1
11260: PPUSH
11261: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
11265: LD_INT 61
11267: PPUSH
11268: LD_VAR 0 3
11272: PPUSH
11273: LD_INT 1
11275: PPUSH
11276: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11280: LD_INT 32
11282: PPUSH
11283: LD_VAR 0 3
11287: PPUSH
11288: LD_INT 1
11290: PPUSH
11291: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
11295: LD_INT 27
11297: PPUSH
11298: LD_VAR 0 3
11302: PPUSH
11303: LD_INT 1
11305: PPUSH
11306: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
11310: LD_INT 36
11312: PPUSH
11313: LD_VAR 0 3
11317: PPUSH
11318: LD_INT 1
11320: PPUSH
11321: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
11325: LD_INT 33
11327: PPUSH
11328: LD_VAR 0 3
11332: PPUSH
11333: LD_INT 1
11335: PPUSH
11336: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11340: LD_INT 9
11342: PPUSH
11343: LD_VAR 0 3
11347: PPUSH
11348: LD_INT 1
11350: PPUSH
11351: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
11355: LD_INT 38
11357: PPUSH
11358: LD_VAR 0 3
11362: PPUSH
11363: LD_INT 1
11365: PPUSH
11366: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11370: LD_INT 57
11372: PPUSH
11373: LD_VAR 0 3
11377: PPUSH
11378: LD_INT 1
11380: PPUSH
11381: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
11385: LD_INT 58
11387: PPUSH
11388: LD_VAR 0 3
11392: PPUSH
11393: LD_INT 1
11395: PPUSH
11396: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
11400: LD_INT 28
11402: PPUSH
11403: LD_VAR 0 3
11407: PPUSH
11408: LD_INT 1
11410: PPUSH
11411: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
11415: LD_INT 29
11417: PPUSH
11418: LD_VAR 0 3
11422: PPUSH
11423: LD_INT 1
11425: PPUSH
11426: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11430: LD_INT 30
11432: PPUSH
11433: LD_VAR 0 3
11437: PPUSH
11438: LD_INT 1
11440: PPUSH
11441: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11445: LD_INT 37
11447: PPUSH
11448: LD_VAR 0 3
11452: PPUSH
11453: LD_INT 1
11455: PPUSH
11456: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11460: LD_INT 63
11462: PPUSH
11463: LD_VAR 0 3
11467: PPUSH
11468: LD_INT 1
11470: PPUSH
11471: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
11475: LD_INT 64
11477: PPUSH
11478: LD_VAR 0 3
11482: PPUSH
11483: LD_INT 1
11485: PPUSH
11486: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11490: LD_INT 3
11492: PPUSH
11493: LD_VAR 0 3
11497: PPUSH
11498: LD_INT 1
11500: PPUSH
11501: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11505: LD_INT 4
11507: PPUSH
11508: LD_VAR 0 3
11512: PPUSH
11513: LD_INT 1
11515: PPUSH
11516: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11520: LD_INT 5
11522: PPUSH
11523: LD_VAR 0 3
11527: PPUSH
11528: LD_INT 1
11530: PPUSH
11531: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
11535: LD_INT 8
11537: PPUSH
11538: LD_VAR 0 3
11542: PPUSH
11543: LD_INT 1
11545: PPUSH
11546: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11550: LD_INT 66
11552: PPUSH
11553: LD_VAR 0 3
11557: PPUSH
11558: LD_INT 1
11560: PPUSH
11561: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
11565: LD_INT 67
11567: PPUSH
11568: LD_VAR 0 3
11572: PPUSH
11573: LD_INT 1
11575: PPUSH
11576: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11580: LD_INT 21
11582: PPUSH
11583: LD_VAR 0 3
11587: PPUSH
11588: LD_INT 1
11590: PPUSH
11591: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11595: LD_INT 22
11597: PPUSH
11598: LD_VAR 0 3
11602: PPUSH
11603: LD_INT 1
11605: PPUSH
11606: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11610: LD_INT 19
11612: PPUSH
11613: LD_VAR 0 3
11617: PPUSH
11618: LD_INT 1
11620: PPUSH
11621: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
11625: LD_INT 26
11627: PPUSH
11628: LD_VAR 0 3
11632: PPUSH
11633: LD_INT 1
11635: PPUSH
11636: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11640: LD_INT 54
11642: PPUSH
11643: LD_VAR 0 3
11647: PPUSH
11648: LD_INT 1
11650: PPUSH
11651: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11655: LD_INT 55
11657: PPUSH
11658: LD_VAR 0 3
11662: PPUSH
11663: LD_INT 1
11665: PPUSH
11666: CALL_OW 322
// for i = 0 to 39 do
11670: LD_ADDR_VAR 0 4
11674: PUSH
11675: DOUBLE
11676: LD_INT 0
11678: DEC
11679: ST_TO_ADDR
11680: LD_INT 39
11682: PUSH
11683: FOR_TO
11684: IFFALSE 11705
// SetRestrict ( i , side , true ) ;
11686: LD_VAR 0 4
11690: PPUSH
11691: LD_VAR 0 3
11695: PPUSH
11696: LD_INT 1
11698: PPUSH
11699: CALL_OW 324
11703: GO 11683
11705: POP
11706: POP
// end ; else
11707: GO 11784
11709: POP
// begin for i = 1 to 73 do
11710: LD_ADDR_VAR 0 4
11714: PUSH
11715: DOUBLE
11716: LD_INT 1
11718: DEC
11719: ST_TO_ADDR
11720: LD_INT 73
11722: PUSH
11723: FOR_TO
11724: IFFALSE 11745
// SetTech ( i , side , state_enabled ) ;
11726: LD_VAR 0 4
11730: PPUSH
11731: LD_VAR 0 3
11735: PPUSH
11736: LD_INT 1
11738: PPUSH
11739: CALL_OW 322
11743: GO 11723
11745: POP
11746: POP
// for i = 0 to 39 do
11747: LD_ADDR_VAR 0 4
11751: PUSH
11752: DOUBLE
11753: LD_INT 0
11755: DEC
11756: ST_TO_ADDR
11757: LD_INT 39
11759: PUSH
11760: FOR_TO
11761: IFFALSE 11782
// SetRestrict ( i , side , true ) ;
11763: LD_VAR 0 4
11767: PPUSH
11768: LD_VAR 0 3
11772: PPUSH
11773: LD_INT 1
11775: PPUSH
11776: CALL_OW 324
11780: GO 11760
11782: POP
11783: POP
// end ; end ; end ;
11784: GO 7789
11786: POP
11787: POP
// end ; end_of_file
11788: LD_VAR 0 2
11792: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
11793: LD_INT 0
11795: PPUSH
11796: PPUSH
11797: PPUSH
11798: PPUSH
11799: PPUSH
11800: PPUSH
11801: PPUSH
11802: PPUSH
11803: PPUSH
// for i := 1 to 8 do
11804: LD_ADDR_VAR 0 2
11808: PUSH
11809: DOUBLE
11810: LD_INT 1
11812: DEC
11813: ST_TO_ADDR
11814: LD_INT 8
11816: PUSH
11817: FOR_TO
11818: IFFALSE 12202
// begin if Side_Positions [ i ] then
11820: LD_EXP 32
11824: PUSH
11825: LD_VAR 0 2
11829: ARRAY
11830: IFFALSE 12200
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
11832: LD_ADDR_VAR 0 7
11836: PUSH
11837: LD_INT 22
11839: PUSH
11840: LD_VAR 0 2
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: PUSH
11849: LD_INT 21
11851: PUSH
11852: LD_INT 1
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PPUSH
11863: CALL_OW 69
11867: PUSH
11868: LD_INT 0
11870: PLUS
11871: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11872: LD_ADDR_VAR 0 9
11876: PUSH
11877: LD_INT 22
11879: PUSH
11880: LD_VAR 0 2
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: PUSH
11889: LD_INT 2
11891: PUSH
11892: LD_INT 30
11894: PUSH
11895: LD_INT 0
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: LD_INT 30
11904: PUSH
11905: LD_INT 1
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: LIST
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PPUSH
11921: CALL_OW 69
11925: ST_TO_ADDR
// crates := 0 ;
11926: LD_ADDR_VAR 0 4
11930: PUSH
11931: LD_INT 0
11933: ST_TO_ADDR
// oil := 0 ;
11934: LD_ADDR_VAR 0 5
11938: PUSH
11939: LD_INT 0
11941: ST_TO_ADDR
// sib := 0 ;
11942: LD_ADDR_VAR 0 6
11946: PUSH
11947: LD_INT 0
11949: ST_TO_ADDR
// if bases then
11950: LD_VAR 0 9
11954: IFFALSE 12060
// begin for j in bases do
11956: LD_ADDR_VAR 0 3
11960: PUSH
11961: LD_VAR 0 9
11965: PUSH
11966: FOR_IN
11967: IFFALSE 12058
// begin base := GetBase ( j ) ;
11969: LD_ADDR_VAR 0 8
11973: PUSH
11974: LD_VAR 0 3
11978: PPUSH
11979: CALL_OW 274
11983: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
11984: LD_ADDR_VAR 0 4
11988: PUSH
11989: LD_VAR 0 4
11993: PUSH
11994: LD_VAR 0 8
11998: PPUSH
11999: LD_INT 1
12001: PPUSH
12002: CALL_OW 275
12006: PLUS
12007: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
12008: LD_ADDR_VAR 0 5
12012: PUSH
12013: LD_VAR 0 5
12017: PUSH
12018: LD_VAR 0 8
12022: PPUSH
12023: LD_INT 2
12025: PPUSH
12026: CALL_OW 275
12030: PLUS
12031: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
12032: LD_ADDR_VAR 0 6
12036: PUSH
12037: LD_VAR 0 6
12041: PUSH
12042: LD_VAR 0 8
12046: PPUSH
12047: LD_INT 3
12049: PPUSH
12050: CALL_OW 275
12054: PLUS
12055: ST_TO_ADDR
// end ;
12056: GO 11966
12058: POP
12059: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
12060: LD_STRING setSpecText(
12062: PUSH
12063: LD_VAR 0 2
12067: STR
12068: PUSH
12069: LD_STRING ,
12071: STR
12072: PUSH
12073: LD_INT 2
12075: STR
12076: PUSH
12077: LD_STRING ,
12079: STR
12080: PUSH
12081: LD_VAR 0 4
12085: STR
12086: PUSH
12087: LD_STRING )
12089: STR
12090: PPUSH
12091: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
12095: LD_STRING setSpecText(
12097: PUSH
12098: LD_VAR 0 2
12102: STR
12103: PUSH
12104: LD_STRING ,
12106: STR
12107: PUSH
12108: LD_INT 3
12110: STR
12111: PUSH
12112: LD_STRING ,
12114: STR
12115: PUSH
12116: LD_VAR 0 5
12120: STR
12121: PUSH
12122: LD_STRING )
12124: STR
12125: PPUSH
12126: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
12130: LD_STRING setSpecText(
12132: PUSH
12133: LD_VAR 0 2
12137: STR
12138: PUSH
12139: LD_STRING ,
12141: STR
12142: PUSH
12143: LD_INT 4
12145: STR
12146: PUSH
12147: LD_STRING ,
12149: STR
12150: PUSH
12151: LD_VAR 0 6
12155: STR
12156: PUSH
12157: LD_STRING )
12159: STR
12160: PPUSH
12161: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
12165: LD_STRING setSpecText(
12167: PUSH
12168: LD_VAR 0 2
12172: STR
12173: PUSH
12174: LD_STRING ,
12176: STR
12177: PUSH
12178: LD_INT 5
12180: STR
12181: PUSH
12182: LD_STRING ,
12184: STR
12185: PUSH
12186: LD_VAR 0 7
12190: STR
12191: PUSH
12192: LD_STRING )
12194: STR
12195: PPUSH
12196: CALL_OW 559
// end ; end ;
12200: GO 11817
12202: POP
12203: POP
// end ;
12204: LD_VAR 0 1
12208: RET
// every 0 0$1 do
12209: GO 12211
12211: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
12212: LD_STRING setSpecLogoNumber(
12214: PUSH
12215: LD_INT 2
12217: STR
12218: PUSH
12219: LD_STRING ,
12221: STR
12222: PUSH
12223: LD_INT 1
12225: STR
12226: PUSH
12227: LD_STRING )
12229: STR
12230: PPUSH
12231: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
12235: LD_STRING setSpecLogoNumber(
12237: PUSH
12238: LD_INT 3
12240: STR
12241: PUSH
12242: LD_STRING ,
12244: STR
12245: PUSH
12246: LD_INT 2
12248: STR
12249: PUSH
12250: LD_STRING )
12252: STR
12253: PPUSH
12254: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
12258: LD_STRING setSpecLogoNumber(
12260: PUSH
12261: LD_INT 4
12263: STR
12264: PUSH
12265: LD_STRING ,
12267: STR
12268: PUSH
12269: LD_INT 3
12271: STR
12272: PUSH
12273: LD_STRING )
12275: STR
12276: PPUSH
12277: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
12281: LD_STRING setSpecLogoNumber(
12283: PUSH
12284: LD_INT 5
12286: STR
12287: PUSH
12288: LD_STRING ,
12290: STR
12291: PUSH
12292: LD_INT 4
12294: STR
12295: PUSH
12296: LD_STRING )
12298: STR
12299: PPUSH
12300: CALL_OW 559
// end ;
12304: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
12305: LD_INT 2
12307: PUSH
12308: LD_INT 30
12310: PUSH
12311: LD_INT 0
12313: PUSH
12314: EMPTY
12315: LIST
12316: LIST
12317: PUSH
12318: LD_INT 30
12320: PUSH
12321: LD_INT 1
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: LIST
12332: PPUSH
12333: CALL_OW 69
12337: IFFALSE 12347
12339: GO 12341
12341: DISABLE
// begin enable ;
12342: ENABLE
// UpdateSpectatorBar ;
12343: CALL 11793 0 0
// end ; end_of_file
12347: END
// var respawn , inqueue ; export function init_respawning ; begin
12348: LD_INT 0
12350: PPUSH
// respawn := Rand ( 1 , 8 ) ;
12351: LD_ADDR_LOC 24
12355: PUSH
12356: LD_INT 1
12358: PPUSH
12359: LD_INT 8
12361: PPUSH
12362: CALL_OW 12
12366: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12367: LD_ADDR_LOC 25
12371: PUSH
12372: LD_INT 0
12374: PUSH
12375: LD_INT 0
12377: PUSH
12378: LD_INT 0
12380: PUSH
12381: LD_INT 0
12383: PUSH
12384: LD_INT 0
12386: PUSH
12387: LD_INT 0
12389: PUSH
12390: LD_INT 0
12392: PUSH
12393: LD_INT 0
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: ST_TO_ADDR
// end ;
12406: LD_VAR 0 1
12410: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
12411: GO 12413
12413: DISABLE
12414: LD_INT 0
12416: PPUSH
12417: PPUSH
12418: PPUSH
// begin if respawning_time_max = 0 then
12419: LD_EXP 26
12423: PUSH
12424: LD_INT 0
12426: EQUAL
12427: IFFALSE 12431
// exit ;
12429: GO 12839
// if respawn = 8 then
12431: LD_LOC 24
12435: PUSH
12436: LD_INT 8
12438: EQUAL
12439: IFFALSE 12451
// respawn := 1 else
12441: LD_ADDR_LOC 24
12445: PUSH
12446: LD_INT 1
12448: ST_TO_ADDR
12449: GO 12465
// respawn := respawn + 1 ;
12451: LD_ADDR_LOC 24
12455: PUSH
12456: LD_LOC 24
12460: PUSH
12461: LD_INT 1
12463: PLUS
12464: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
12465: LD_EXP 32
12469: PUSH
12470: LD_LOC 24
12474: ARRAY
12475: PUSH
12476: LD_LOC 25
12480: PUSH
12481: LD_LOC 24
12485: ARRAY
12486: NOT
12487: AND
12488: IFFALSE 12838
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
12490: LD_ADDR_VAR 0 1
12494: PUSH
12495: LD_INT 21
12497: PUSH
12498: LD_INT 1
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: LD_INT 22
12507: PUSH
12508: LD_LOC 24
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: PUSH
12517: LD_INT 3
12519: PUSH
12520: LD_INT 23
12522: PUSH
12523: LD_INT 0
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: PPUSH
12536: CALL_OW 69
12540: ST_TO_ADDR
// if n < number_of_people then
12541: LD_VAR 0 1
12545: PUSH
12546: LD_EXP 19
12550: LESS
12551: IFFALSE 12835
// begin aktresp := respawn ;
12553: LD_ADDR_VAR 0 3
12557: PUSH
12558: LD_LOC 24
12562: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
12563: LD_ADDR_LOC 25
12567: PUSH
12568: LD_LOC 25
12572: PPUSH
12573: LD_VAR 0 3
12577: PPUSH
12578: LD_INT 1
12580: PPUSH
12581: CALL_OW 1
12585: ST_TO_ADDR
// enable ;
12586: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
12587: LD_EXP 25
12591: PPUSH
12592: LD_EXP 26
12596: PPUSH
12597: CALL_OW 12
12601: PPUSH
12602: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
12606: LD_ADDR_LOC 25
12610: PUSH
12611: LD_LOC 25
12615: PPUSH
12616: LD_VAR 0 3
12620: PPUSH
12621: LD_INT 0
12623: PPUSH
12624: CALL_OW 1
12628: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
12629: LD_ADDR_VAR 0 2
12633: PUSH
12634: LD_INT 21
12636: PUSH
12637: LD_INT 3
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PUSH
12644: LD_INT 2
12646: PUSH
12647: LD_INT 30
12649: PUSH
12650: LD_INT 0
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 30
12659: PUSH
12660: LD_INT 1
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: LIST
12671: PUSH
12672: LD_INT 50
12674: PUSH
12675: EMPTY
12676: LIST
12677: PUSH
12678: LD_INT 22
12680: PUSH
12681: LD_VAR 0 3
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: PPUSH
12696: CALL_OW 69
12700: ST_TO_ADDR
// if dep = 0 then
12701: LD_VAR 0 2
12705: PUSH
12706: LD_INT 0
12708: EQUAL
12709: IFFALSE 12713
// exit ;
12711: GO 12839
// hc_name :=  ;
12713: LD_ADDR_OWVAR 26
12717: PUSH
12718: LD_STRING 
12720: ST_TO_ADDR
// hc_importance := 0 ;
12721: LD_ADDR_OWVAR 32
12725: PUSH
12726: LD_INT 0
12728: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
12729: LD_INT 0
12731: PPUSH
12732: LD_INT 0
12734: PPUSH
12735: LD_EXP 20
12739: PUSH
12740: LD_INT 2
12742: DIV
12743: PPUSH
12744: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
12748: LD_ADDR_OWVAR 21
12752: PUSH
12753: LD_EXP 33
12757: PUSH
12758: LD_VAR 0 3
12762: ARRAY
12763: ST_TO_ADDR
// uc_side := aktresp ;
12764: LD_ADDR_OWVAR 20
12768: PUSH
12769: LD_VAR 0 3
12773: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
12774: LD_ADDR_VAR 0 2
12778: PUSH
12779: LD_VAR 0 2
12783: PUSH
12784: LD_INT 1
12786: PPUSH
12787: LD_VAR 0 2
12791: PPUSH
12792: CALL_OW 12
12796: ARRAY
12797: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
12798: CALL_OW 44
12802: PPUSH
12803: LD_VAR 0 2
12807: PPUSH
12808: CALL_OW 250
12812: PPUSH
12813: LD_VAR 0 2
12817: PPUSH
12818: CALL_OW 251
12822: PPUSH
12823: LD_INT 7
12825: PPUSH
12826: LD_INT 1
12828: PPUSH
12829: CALL_OW 50
// end else
12833: GO 12836
// enable ;
12835: ENABLE
// end else
12836: GO 12839
// enable ;
12838: ENABLE
// end ; end_of_file
12839: PPOPN 3
12841: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
12842: LD_INT 0
12844: PPUSH
12845: PPUSH
12846: PPUSH
// BuildUpTime_Delay = 0 ;
12847: LD_ADDR_EXP 49
12851: PUSH
12852: LD_INT 0
12854: ST_TO_ADDR
// if not def_builduptime then
12855: LD_EXP 14
12859: NOT
12860: IFFALSE 12864
// exit ;
12862: GO 13047
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
12864: LD_ADDR_EXP 49
12868: PUSH
12869: LD_INT 8400
12871: PUSH
12872: LD_INT 2100
12874: PUSH
12875: LD_EXP 14
12879: MUL
12880: PLUS
12881: ST_TO_ADDR
// BuildUpTimeActive := true ;
12882: LD_ADDR_EXP 48
12886: PUSH
12887: LD_INT 1
12889: ST_TO_ADDR
// for i := 1 to 8 do
12890: LD_ADDR_VAR 0 2
12894: PUSH
12895: DOUBLE
12896: LD_INT 1
12898: DEC
12899: ST_TO_ADDR
12900: LD_INT 8
12902: PUSH
12903: FOR_TO
12904: IFFALSE 13045
// if Side_Positions [ i ] then
12906: LD_EXP 32
12910: PUSH
12911: LD_VAR 0 2
12915: ARRAY
12916: IFFALSE 13043
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
12918: LD_EXP 47
12922: PUSH
12923: LD_EXP 32
12927: PUSH
12928: LD_VAR 0 2
12932: ARRAY
12933: ARRAY
12934: PPUSH
12935: LD_INT 5
12937: PPUSH
12938: CALL_OW 424
// for j := 1 to 8 do
12942: LD_ADDR_VAR 0 3
12946: PUSH
12947: DOUBLE
12948: LD_INT 1
12950: DEC
12951: ST_TO_ADDR
12952: LD_INT 8
12954: PUSH
12955: FOR_TO
12956: IFFALSE 13041
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
12958: LD_EXP 32
12962: PUSH
12963: LD_VAR 0 3
12967: ARRAY
12968: PUSH
12969: LD_EXP 30
12973: PUSH
12974: LD_VAR 0 2
12978: ARRAY
12979: PUSH
12980: LD_EXP 30
12984: PUSH
12985: LD_VAR 0 3
12989: ARRAY
12990: NONEQUAL
12991: PUSH
12992: LD_EXP 34
12996: NOT
12997: PUSH
12998: LD_VAR 0 2
13002: PUSH
13003: LD_VAR 0 3
13007: NONEQUAL
13008: AND
13009: OR
13010: AND
13011: IFFALSE 13039
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13013: LD_VAR 0 3
13017: PPUSH
13018: LD_EXP 47
13022: PUSH
13023: LD_EXP 32
13027: PUSH
13028: LD_VAR 0 2
13032: ARRAY
13033: ARRAY
13034: PPUSH
13035: CALL_OW 333
13039: GO 12955
13041: POP
13042: POP
// end ;
13043: GO 12903
13045: POP
13046: POP
// end ;
13047: LD_VAR 0 1
13051: RET
// export function EndBuildUp ; var i , j ; begin
13052: LD_INT 0
13054: PPUSH
13055: PPUSH
13056: PPUSH
// BuildUpTimeActive := false ;
13057: LD_ADDR_EXP 48
13061: PUSH
13062: LD_INT 0
13064: ST_TO_ADDR
// for i := 1 to 8 do
13065: LD_ADDR_VAR 0 2
13069: PUSH
13070: DOUBLE
13071: LD_INT 1
13073: DEC
13074: ST_TO_ADDR
13075: LD_INT 8
13077: PUSH
13078: FOR_TO
13079: IFFALSE 13220
// if Side_Positions [ i ] then
13081: LD_EXP 32
13085: PUSH
13086: LD_VAR 0 2
13090: ARRAY
13091: IFFALSE 13218
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
13093: LD_EXP 47
13097: PUSH
13098: LD_EXP 32
13102: PUSH
13103: LD_VAR 0 2
13107: ARRAY
13108: ARRAY
13109: PPUSH
13110: LD_INT 0
13112: PPUSH
13113: CALL_OW 424
// for j := 1 to 8 do
13117: LD_ADDR_VAR 0 3
13121: PUSH
13122: DOUBLE
13123: LD_INT 1
13125: DEC
13126: ST_TO_ADDR
13127: LD_INT 8
13129: PUSH
13130: FOR_TO
13131: IFFALSE 13216
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13133: LD_EXP 32
13137: PUSH
13138: LD_VAR 0 3
13142: ARRAY
13143: PUSH
13144: LD_EXP 30
13148: PUSH
13149: LD_VAR 0 2
13153: ARRAY
13154: PUSH
13155: LD_EXP 30
13159: PUSH
13160: LD_VAR 0 3
13164: ARRAY
13165: NONEQUAL
13166: PUSH
13167: LD_EXP 34
13171: NOT
13172: PUSH
13173: LD_VAR 0 2
13177: PUSH
13178: LD_VAR 0 3
13182: NONEQUAL
13183: AND
13184: OR
13185: AND
13186: IFFALSE 13214
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13188: LD_VAR 0 3
13192: PPUSH
13193: LD_EXP 47
13197: PUSH
13198: LD_EXP 32
13202: PUSH
13203: LD_VAR 0 2
13207: ARRAY
13208: ARRAY
13209: PPUSH
13210: CALL_OW 334
13214: GO 13130
13216: POP
13217: POP
// end ;
13218: GO 13078
13220: POP
13221: POP
// end ;
13222: LD_VAR 0 1
13226: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
13227: LD_EXP 48
13231: IFFALSE 13406
13233: GO 13235
13235: DISABLE
13236: LD_INT 0
13238: PPUSH
13239: PPUSH
// begin for i := 1 to 8 do
13240: LD_ADDR_VAR 0 1
13244: PUSH
13245: DOUBLE
13246: LD_INT 1
13248: DEC
13249: ST_TO_ADDR
13250: LD_INT 8
13252: PUSH
13253: FOR_TO
13254: IFFALSE 13403
// if Side_Positions [ i ] then
13256: LD_EXP 32
13260: PUSH
13261: LD_VAR 0 1
13265: ARRAY
13266: IFFALSE 13401
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13268: LD_ADDR_VAR 0 2
13272: PUSH
13273: LD_EXP 47
13277: PUSH
13278: LD_EXP 32
13282: PUSH
13283: LD_VAR 0 1
13287: ARRAY
13288: ARRAY
13289: PPUSH
13290: LD_INT 2
13292: PUSH
13293: LD_INT 21
13295: PUSH
13296: LD_INT 1
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PUSH
13303: LD_INT 21
13305: PUSH
13306: LD_INT 2
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 22
13320: PUSH
13321: LD_OWVAR 2
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: PPUSH
13334: CALL_OW 70
13338: PUSH
13339: FOR_IN
13340: IFFALSE 13399
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
13342: LD_EXP 30
13346: PUSH
13347: LD_VAR 0 1
13351: ARRAY
13352: PUSH
13353: LD_EXP 30
13357: PUSH
13358: LD_OWVAR 2
13362: ARRAY
13363: NONEQUAL
13364: PUSH
13365: LD_EXP 34
13369: NOT
13370: PUSH
13371: LD_VAR 0 1
13375: PUSH
13376: LD_OWVAR 2
13380: NONEQUAL
13381: AND
13382: OR
13383: IFFALSE 13397
// ComMoveToArea ( un , BuildUpEscape ) ;
13385: LD_VAR 0 2
13389: PPUSH
13390: LD_INT 12
13392: PPUSH
13393: CALL_OW 113
13397: GO 13339
13399: POP
13400: POP
13401: GO 13253
13403: POP
13404: POP
// enable ;
13405: ENABLE
// end ;
13406: PPOPN 2
13408: END
// every 0 0$1 trigger def_builduptime do
13409: LD_EXP 14
13413: IFFALSE 13439
13415: GO 13417
13417: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
13418: LD_INT 8400
13420: PUSH
13421: LD_EXP 14
13425: PUSH
13426: LD_INT 2100
13428: MUL
13429: PLUS
13430: PPUSH
13431: CALL_OW 67
// EndBuildUp ;
13435: CALL 13052 0 0
// end ;
13439: END
