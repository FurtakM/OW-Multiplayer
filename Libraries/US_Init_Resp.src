// Základ pro hry s více národy   -   Base for MultiNations Games
// Based on Abbys
var respawn,inqueue,nation,nations, noposn {number_of_people_of_same_nationality};
//var obnovcasvs; // hra s novì pøíchozími

export function init_respawn;
var i,pos;
begin
  nation:= rand(1,3);
  respawn:=Rand(1,8);
  Nations = [[],[],[],[],[],[],[],[]];

  inqueue:=[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]];
  for i:=1 to 8 do
    if Side_Positions[i] then
      begin
        //pos:=Side_Positions[i];
        if Game_Type in GT_DoubleNat^GT_TripleNat then
          nations = replace(nations,i,Position_Nations[i]diff 0)
        else
          nations = replace(nations,i,[Side_Nations[i]]);
      end;

  if Game_Type in GT_DoublePeople then
    noposn = number_of_people*2
  else noposn = number_of_people;

  SetRespawningTime( respawning_time_min,respawning_time_max ,respawning_time_delay_min,respawning_time_delay_max);
end;

every 0$1+0$0.5 do
var n,building_list,aktresp,b,skills,k;
begin
  if def_respawining_type = 0 then
    exit
  else if def_respawining_type in [2,3] then
  begin

    if respawn=8 then
    begin
      respawn:=1 ;
      if nation = 3 then nation := 1
      else nation := nation +1;
    end
    else
      respawn:=respawn+1;

    if Side_Positions[respawn] then
      begin
        if nation in nations[respawn] then
          begin
            if def_desert_warior < 2 then
              n:=FilterAllUnits([ [f_type, unit_human],                      // units - people
                                [f_side, respawn],                           // side - respawning side
                                [f_nation, nation],                             // Nations - of side
                               ])
            else
         n:=FilterAllUnits([ [f_type, unit_human],                      // units - people
                            [f_side, respawn],                           // side - respawning side
                            [f_nation, nation],                             // Nations - of side
                            f_not, [f_class, class_desert_warior],        // not desert warior
                            ]);
            if (n + inqueue [respawn][nation] ) < noposn then
              begin
                aktresp:=respawn;
                inqueue:=Replace(inqueue,aktresp,replace(inqueue[aktresp],nation,inqueue[aktresp][nation]+1));
                enable;

                ObnovCloveka(aktresp,nation,false);
              end
            else
              enable;
          end
        else
          enable;
      end
    else
      enable;
  end
    else
  if def_respawining_type = 1 then
  begin
    wait (rand(respawning_time_min,respawning_time_max));
    Vytvor_noveho_cloveka_pro_vsechny;
    enable;
  end
end;

Export function OnHumanRespawned(un);
var side, nation;
begin
  wait(0$30);  // predection materialization
 // inqueue:=Replace(inqueue,GetSide(un),inqueue[GetSide(un)]-1);
 side = GetSide(un);
 nation = GetNation(un);
 inqueue:=Replace(inqueue,side,replace(inqueue[side],nation,inqueue[side][nation]-1));
end;

Export Function RespawnHumanDestroyed(identifier, side, nation, x, y, direction, sex, cl);
begin

  if def_respawining_type < 2 then
    exit;
  if nation = nation_nature or side = 0 then
    exit;
  if not Side_Positions[side] then
    exit;
  if def_desert_warior = 2 then
    if cl = class_desert_warior then
      exit;
  
  inqueue:=Replace(inqueue,side,replace(inqueue[side],nation,inqueue[side][nation]+1));
  if def_respawining_type= 2 then
    ObnovCloveka(side,nation,identifier)
  else ObnovCloveka(side,nation,false);
end;



// Necesary Includes - SharedFunc and NewThrowbackVariables
Export ObnovCas,ObnovZpozdeni;
//Set Respawning Times
Export Function SetRespawningTime(minBTime,maxBTime,MinDelay,MaxDelay);
var k;
begin
  k = Rand(minBTime,maxBTime);
  ObnovCas = [k,k,k,k,k,k,k,k];
  k = Rand(minDelay,MaxDelay);
  ObnovZpozdeni = k;
end;

export unit_list;
// Funkce pro obnovu èlovìka, pokud neni budova, obnový se po dalším zpoždìní / obnoví se kamkoliv
// Restored - 0 for new human, more then 0 ID of dead human
Export function ObnovCloveka(side,nation,restored);
var building_list, b, n,un, {unit_list,}k,i, base_skills,speed,def;
begin
  if ObnovCas[side] = 0 then
    exit;

      uc_nation:=nation;
      uc_side:=side;

      uc_direction:=Rand(0,5);

      if restored then
      begin
        hc_class = GetClass(restored);
        hc_attr = [GetAttr(restored,attr_stamina),GetAttr(restored,attr_speed)];
        if hc_class in [class_sniper,class_bazooker,class_mortar] then
          hc_class = class_soldier;
      end
      else randomHumanStats(initial_level);

      hc_importance:=0;
      hc_gallery:= '';
      hc_face_number:=0;
      hc_name='';

      un:=CreateHuman;
      if restored then
        CopySkills(restored,un);

  k = ObnovCas[side] + ObnovZpozdeni;
  ObnovCas = Replace(ObnovCas,side,k);
  wait(ObnovCas[side] - ObnovZpozdeni);

  if not (HasPower(side)) then
    exit;

  building_list = FilterAllUnits([[f_type,unit_building],[f_or,[f_btype,b_depot],[f_btype,b_warehouse]],[f_ok],[f_side,side], [f_nation,nation]]);
  if building_list = 0 then
    building_list = FilterAllUnits([[f_type,unit_building],[f_or,[f_btype,b_depot],[f_btype,b_warehouse]],[f_ok],[f_side,side]]);
  if building_list = 0 then
    building_list = FilterAllUnits([[f_type,unit_building],[f_ok],[f_side,side]]);       
  if building_list > 0 then
    begin

      b:=building_list[Rand(1,building_list+0)];
      if GetBType(b) in [b_depot,b_warehouse] then
        n = 25
      else
        n = 10;

      PlaceUnitXYR(un,GetX(b),GetY(b),n,true);
      //this func must exist in map's sail, but can by empty
      OnHumanRespawned(un);
    end
  else
    begin
 //     unit_list = FilterAllUnits([[f_side,side],[f_ok]]);
 //     if unit_list > 0 then
//        begin
          ObnovOpozdilceCloveka(un,side,k/2);      // když se má dál zpožïovat
 //         PlaceUnitAnywhere(un,true);             // když se má obnovit kamkoliv
        //  OnHumanRespawned(un);
  //      end
  //    else exit;
  end;
end;

//Disabled - Èlovìk se bude Spawnovat kamkoliv místo dalšího zpoždìní
function ObnovOpozdilceCloveka(un,side,waitTime);
var building_list,n,unit_list,b;
begin
  wait(waitTime);
  if not (HasPower(side)) then
    exit;
  building_list = FilterAllUnits([[f_type,unit_building],[f_or,[f_btype,b_depot],[f_btype,b_warehouse]],[f_ok],[f_side,side], [f_nation,GetNation(un)]]);
  if building_list = 0 then
    building_list = FilterAllUnits([[f_type,unit_building],[f_or,[f_btype,b_depot],[f_btype,b_warehouse]],[f_ok],[f_side,side]]);
  if building_list = 0 then
    building_list = FilterAllUnits([[f_type,unit_building],[f_ok],[f_side,side]]);         
  if building_list > 0 then
    begin

      b:=building_list[Rand(1,building_list+0)];
      if GetBType(b) in [b_depot,b_warehouse] then
        n = 25
      else
        n = 10;

      PlaceUnitXYR(un,GetX(b),GetY(b),n,true);
      //this func must exist in map's sail, but can by empty
      OnHumanRespawned(un);
    end
  else 
    //begin
      //unit_list = FilterAllUnits([[f_side, side], [f_or, [f_type, unit_human], [f_control, control_computer], [f_control, control_apeman]]]);
    //  if (HasPower) then
        ObnovOpozdilceCloveka(un,side,waitTime);
    //  else
     //   exit;
  //end;
end;

export function Vytvor_noveho_cloveka_pro_vsechny;
var nat,side,sidy ,i ,k;
begin
  randomHumanStats(initial_level);
  sidy=[];

  for i=1 to Side_positions+0 do
    if Side_positions[i] > 0 then
      if HasPower(i) then
        for k in nations[i] do
          vytvor_cloveka(i,k);

end;

Function vytvor_cloveka(side,nat);
var pom;
begin
  uc_side = side;
  uc_nation = nat;
  hc_importance:=0;
  hc_gallery:= '';
  hc_face_number:=0;
  hc_name='';

  PlaceUnitAnywhere(CreateHuman, True);
  if game_type in GT_DoublePeople then
    PlaceUnitAnywhere(CreateHuman, True);
end;

